 PLUS/1000 LIBRARY CONTRIBUTION 
 ---------------------------------------------------------------------
  
 **DATE CODE: 2001
  
 **PROGRAM NAME:        
 **PROGRAM TITLE: 
  CHESS                                                                   
  
 **REVISION?  NO  
  
 **PACKAGE: 99    **CATEGORY:  6    **SUBCATEGORY:    
  
 **KEYWORDS:
    GAMES                                         
                                  
  
 **LANGUAGES: 
    ALGOL                             
  
 **COMPUTER TYPE: 
              
  
 **OPERATING SYSTEMS: 
    DOS-M                       
  
 **MEMORY REQUIREMENTS: 
  16K                                                                     
  
 **DEPENDENT ON SYSTEM SOFTWARE?  NO  
 **DEPENDENT ON SYSTEM HARDWARE?  NO  
  
  
 **ABSTRACT:
  
  THIS PROGRAM WILL PLAY CHESS BY GENERATING A (BEST MOVE) FROM A MINIMAX 
  GAME TREE.  IT IS DIVIDED INTO TWO DISTINCT PHASES - POSITIONAL ANALYSIS
  AND TACTICAL ANALYSIS.                                                  
                                                                          
  THE POSITIONAL ANALYSIS SECTION CONTAINS ALL OF THE CHESS SPECIFIC      
  HEURISTICS.  IT ASSIGNS POINTS TO EACH MOVE BASED ON A SERIES OF        
  PROGRAMMED GUIDELINES (SUCH AS ASSIGN 50 POINTS TO P-K4 DURING OPENING).
  THE GUIDELINES ALSO INCLUDE POINT AWARDS FOR CENTER CONTROL, ATTACKING  
  THE OPPONENT'S KING, ETC.  AFTER EACH POSSIBLE MOVE IS ASSIGNED A TOTAL 
  POINT VALUE, THE MOVES ARE SORTED SO THAT THE HIGHEST POINT VALUE MOVES 
  ARE CONSIDERED FIRST BY THE TACTICAL ANALYSIS PHASE.                    
                                                                          
  THE TACTICAL ANALYSIS PHASE THEN BUILDS A MOVE TREE WHICH LOOKS THREE   
  HALF MOVES AHEAD.  AT EACH BOTTOM OF THE MOVE TREE (AT DEPTH = 3), THE  
  MATERIAL (VALUE OF CHESS PIECES) GAINED OR LOST DURING THE THREE HALF   
  MOVES IS CALCULATED.  THE MINIMAX ALGORITHM WITH ALPHA-BETA PRUNING IS  
  APPLIED ONLY ON THAT MATERIAL GAIN OR LOSS.  EACH MOVE IS EVALUATED IN  
  TURN UNTIL A BEST MOVE IS FOUND AND EXECUTED.                           
                                                                          
  THE PROGRAM FALLS IN THE (BRUTE-FORCE) CLASS OF CHESS PLAYING PROGRAMS. 
  BY LOOKING AT EACH MOVE THREE HALF MOVES AHEAD, IT MAY CONSIDER AS MANY 
  AS TEN THOUSAND TO A HUNDRED THOUSAND COMBINATIONS IN ITS SEARCH.  THE  
  HP2100 COMPUTER DOES THIS IN AN AVERAGE TIME OF ONE TO THREE MINUTES.   
                                                                          
  THE PROGRAM WAS DESIGNED FOR A DOS-M SYSTEM WITH 16K CORE MEMORY.  HOW- 
  EVER, WITH SLIGHT MODIFICATIONS, IT WILL RUN ON BCS TODS SYSTEMS ALSO.  
  
  
 **FILES IDENTIFICATION:
   (NOTE: FILES IN THIS CONTRIBUTION HAVE THE SAME NAME AS THE
     DOCUMENTATION FILE WITH THE LAST 2 DIGITS INCREMENTED.   
     E.G.: A00101, A00102, A00103, ETC.)
  
  FILE#  1: DOCUMENTATION FILE                                
  FILE#  2: SOURCE                                            
  FILE#  3: SOURCE                                            
  FILE#  4: SOURCE                                            
  
  
 **LOAD INSTRUCTIONS: 
  
  ASSEMBLY AND COMPILATION OF SOURCE TAPES:                               
                                                                          
  A.  LOAD ASSEMBLY LANGUAGE SUBROUTINES ONTO DISK.                       
                                                                          
                   :JOB, SUBR                                             
                   :STORE,S,ECUTS,5                                       
                      YES                                                 
                   :STORE,S,CHS2S,5                                       
                      YES                                                 
                   :STORE,S,SBITS,5                                       
                      YES                                                 
                   :STORE,S,CBITS,5                                       
                      YES                                                 
                   :STORE,S,ZERO,5                                        
                      YES                                                 
                                                                          
  B.  ASSEMBLE EACH ROUTINE AND STORE RELOCATABLE CODE.                   
                                                                          
                   :JFILE,ECUTS                                           
                   :PR,ASMB,2,,,99                                        
                   :JFILE,CHS2S                                           
                   :PR,ASMB,2,,,99                                        
                   :JFILE,SBITS                                           
                   :PR,ASMB,2,,,99                                        
                   :JFILE,CBITS                                           
                   :PR,ASMB,2,,,99                                        
                   :JFILE,ZERO                                            
                   :PR,ASMB,2,,,99                                        
                   :ST,R,CHESL                                            
                                                                          
  C.  COMPILE THE MAIN PROGRAM, LOAD, AND EXECUTE.                        
                                                                          
                   :JOB, MAIN                                             
                   :STORE,S,GCHES,5                                       
                   :JFILE,GCHES                                           
                   :PR,ALGOL,2,,,99                                       
                   :PR,LOADR,2                                            
                        CHESL, /E                                         
                   :ST,P                                                  
                   :PR,CHESS                                              
                                                                          
  SEE SECTION 7.0 FOR SAMPLE RUNS OF THE PROGRAM.                         
  
  
 **RUN INSTRUCTIONS:
  
                                                                          
  
  
 **INPUT/OUTPUT EXAMPLES: 
  
                                                                          
  
  
 **PROGRAM DESCRIPTION: 
  
  SUBROUTINES INTERNAL TO ALGOL MAIN PROGRAM:                             
                                                                          
  TRY - PRINTS MATERIAL DUMPED IN "FULL DUMP" OPTION (SW2 UP)             
                                                                          
  BUMP - INCREMENTS TREEPTR (INDEX TO MOVE TREE STACK) AND CHECKS FOR     
         OVERFLOW.                                                        
                                                                          
  TYPEB - PRINTS OUT CHESS BOARD WITH PIECES                              
                                                                          
  PUSHM - MAIN PROCEDURE TO PUSH ALL POSSIBLE MOVES ONTO MOVE TREE STACK  
          FOR A GIVEN BOARD CONFIGURATION.                                
                                                                          
       PROCEDURES IN PUSHM:                                               
                                                                          
       CHECK  - DETERMINES WHETHER CASTLING IS ALLOWED OR NOT             
       CAS    - PLACES CASTLING MOVES ON MOVE TREE STACK                  
       CASTL  - IF CASTLING IS ALLOWED IT CALLS PROCEDURE CAS             
       KINGN  - PLACES KING OR KNIGHT MOVES ON MOVE TREE STACK            
       BPRKQN - PLACES BISHOP, ROOK, OR QUEEN MOVES ON STACK              
       PAWNC  - DETERMINES IF A CAPTURE BY A PAWN IS ALLOWED              
       PROMO  - DETERMINES IF A PAWN CAN BE PROMOTED OR NOT.              
                                                                          
  READM - READS AN OPPONENT'S MOVE, VERIFIES IT, AND EXECUTES IT          
                                                                          
  POSIT - MAIN PROCEDURE TO EXECUTE POSITIONAL ANALYSIS SECTION.          
                                                                          
          PROCEDURES USED IN POSIT:                                       
                                                                          
          CENCON - ASSIGNS CENTER CONTROL BONUS POINTS TO A MOVE          
          SORT   - SORTS MOVES AFTER BONUS POINTS ASSIGNED TO EACH        
          MDGAME - CALCULATES TOTAL PIECE WORTH OF EACH SIDE AND ASSIGNS  
                   IT TO WHITEPOINTS & BLACKPOINTS.                       
          MOBILE - CALCULATES MOBILITY FACTOR FOR A MOVE                  
          KINGCH - AWARDS BONUS POINTS FOR HARASSING OPPONENT'S KING      
          OPENB  - DURING OPENING, ASSIGNS BONUS POINTS TO EACH MOVE      
          MDBON  - DURING MIDGAME, ASSIGNS BONUS POINTS TO EACH MOVE      
                                                                          
  GENMOV - PROCEDURE WHICH EXECUTES TACTICAL ANALYSIS SECTION - BY MINIMAX
           ALGORITHM WITH ALPHA-BETA PRUNING                              
  SETBOARD - PROCEDURE TO INPUT AN OLD BOARD CONFIGURATION AND PARAMETERS.
                                                                          
  SUBROUTINES IMPLEMENTED IN ASSEMBLY LANGUAGE:                           
                                                                          
              BLANK(A) - WRITES BLANKS (ASCII CHARACTER CODE OCTAL 40)    
                         INTO INTEGER ARRAY A.                            
                                                                          
              IZERO(A) - WRITES ZERO INTO INTEGER ARRAY A.                
                                                                          
          CBITF(A,B,C) - EXTRACTS AND RIGHT-JUSTIFIES A BIT FIELD FROM BIT
                         POSITION B OF LENGTH C BITS IN THE DOUBLE WORD   
                         LOCATED AT ADDRESS A.                            
                                                                          
        SBITF(A,B,C,D) - SETS A BIT FIELD FROM BIT POSITION B OF LENGTH C 
                         BITS IN THE DOUBLE WORD LOCATED AT ADDRESS A TO  
                         THE QUANTITY D.                                  
                                                                          
         SAVE(A,B,C,D) - SAVES THE VALUE OF THE LAST MOVE A, THE BOARD    
                         CONFIGURATION B, AND THE MATERIAL C IN AN        
                         INTERNAL STORAGE ARRAY BUFF AT POSITION INDEXED  
                         BY DEPTH D.                                      
                                                                          
      RETRO(A,B,C,D,E) - RETRACTS THE VALUE OF THE LAST MOVE A, THE BOARD 
                         CONFIGURATION B, AND THE MATERIAL D FROM ARRAY   
                         BUFF AT A POSITION INDEXED BY DEPTH D.  ALSO     
                         TOGGLES THE VALUE OF THE CONTROL VARIABLE F AT   
                         ADDRESS C.                                       
                                                                          
  ECUTE(A,B,C,D,E,F,G) - EXECUTES THE MOVE GIVEN IN THE ADDRESS A.  IT    
                         UPDATES THE VALUE OF THE LAST MOVE B, THE BOARD  
                         CONFIGURATION C, THE CONTROL VARIABLE F AT       
                         ADDRESS F, AND THE MATERIAL G.                   
  
  
 **ADDITIONAL EXITS OR DIAGNOSTIC MESSAGES: 
  
  SEVERAL SWITCH OPTIONS ARE AVAILABLE TO HELP DEBUG THE PROGRAM:         
                                                                          
  SW0 - DUMPS RESULT OF POSITIONAL ANALYSIS ROUTINE POSIT                 
                                                                          
  SW1 - DUMPS THE BOTTOM NODES OF THE MOVE TREE DURING ITS GENERATION.    
        IT IS USEFUL TO DETERMINE WHY A PARTICULAR MOVE WAS CHOSEN.       
                                                                          
  SW2 - DUMPS A VERY LENGTHY DUMP USEFUL FOR TRACING SUBTLE BUGS IN THE   
        PROGRAM.                                                          
                                                                          
  NOTE:  THESE DUMPS ARE NOT NORMALLY USED DURING CONVENTIONAL PROGRAM    
         PLAY BUT ARE USEFUL FOR TRACKING DOWN BUGS.                      
  
  
 **MISCELLANEOUS: 
  
  ONE SHOULD NOT EXPECT THIS PROGRAM TO PLAY "GRAND MASTER" STYLE CHESS.  
  IF THE PROGRAM WAS A HUMAN PLAYER, IT WOULD BE CLASSIFIED AS A "FISH" - 
  AN OPPONENT WITH LITTLE OR NO TALENT.  HOWEVER, IT IS CAPABLE OF SOME-  
  TIMES VERY INTERESTING SEQUENCES, AND IS UNMERCIFUL IF ITS HUMAN        
  OPPONENT BLUNDERS BADLY.                                                
                                                                          
  THERE IS MUCH ROOM FOR IMPROVEMENT IN THE DEVELOPMENT OF THE PROGRAM.   
  SEVERAL IMPORTANT FEATURES CAN BE ADDED IN A "VERSION B".  AMONG THESE  
  ARE "QUIESCENCE" - THAT IS CONTINUING THE EVALUATION OF A MOVE SEQUENCE 
  IN PROCEDURE GENMV PAST THE DEPTH OF THREE LIMITATION IF IT ENDS IN A   
  CAPTURE.  THIS WOULD PREVENT HUMAN OPPONENTS FROM SUCKERING THE PROGRAM 
  BY PRESENTING UNFAVORABLE EXCHANGES LONGER THAN THREE HALF MOVES.  ALSO 
  SEVERAL IMPORTANT END-GAME CHESS HEURISTICS CAN BE COMBINED TO FORM AN  
  END GAME SECTION IN THE POSITIONAL ANALYSIS PROCEDURE POSIT.            
                                                                          
  HOPEFULLY, ENTRY OF THIS PROGRAM INTO THE CONTRIBUTOR'S LIBRARY WILL    
  SPARK ENOUGH INTEREST SO THAT HEWLETT-PACKARD MIGHT BE A SERIOUS        
  CONTENDER IN THE NEXT ACM COMPUTER CHESS TOURNAMENT.                    
