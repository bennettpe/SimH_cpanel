ASMB,R,L,B
      NAM SCPDR 
* 
* 
* 
*           *********************************************** 
*           *                                             * 
*           *    HP-2331A X-Y DISPLAY SUBSYSTEM DRIVER    * 
*           *                                             * 
*           *                  -- BY --                   * 
*           *                                             * 
*           *               STEVEN A. STARK               * 
*           *               HEWLETT-PACKARD               * 
*           *                PARAMUS, N.J.                * 
*           *                                             * 
*           *********************************************** 
* 
* 
* 
*    I. IDENTIFICATION - SAS 0037   REV. 0   3/2/70 
*    -----------------
* 
*    II. LANGUAGE - ASSEMBLY LANGUAGE, RELOCATABLE
*    ------------ 
* 
*    III. TYPE - FORTRAN CALLABLE SUBROUTINE
*    ---------
* 
*    IV. LENGTH - 167 (DECIMAL) WORDS - WITHOUT DMA 
*    ----------   181 (DECIMAL) WORDS - WITH DMA
* 
*    V. SPECIAL HARDWARE REQUIRED - 
*    ---------------------------- 
* 
*       A. HP-2331A X-Y DISPLAY SUBSYSTEM CONSISTING OF:
*          1. HP-1300A X-Y DISPLAY
*          2. HP-12555A DUAL D/A CONVERTER INTERFACE CARD 
* 
*    VI. DESCRIPTION -
*    ---------------
* 
*    IN ORDER TO UTILIZE THE X-Y DISPLAY SUBSYSTEM DRIVER, IT 
*    MUST FIRST BE CALLED TO SET UP THE PLOT BUFFER, IN WHICH 
*    CASE, IT WILL PROCESS THE BUFFER ADDRESS AND LENGTH AND
*    SAVE THEM FOR USE BY THE INTERRUPT SERVICE ROUTINE. THE
*    DRIVER THEN RETURNS TO THE CALLING PROGRAM.
* 
*    ONCE THE PLOT BUFFER HAS BEEN SET UP,THE DRIVER MAY THEN 
*    BE CALLED TO ENTER POINTS TO BE DISPLAYED. IN THIS CASE, 
*    IT WILL PROCESS THE X AND Y VALUES, DETERMINING IF THEY
*    ARE IN THE CORRECT RANGE AND MERGING THEM INTO A SINGLE
*    WORD.IT WILL THEN STORE THIS WORD IN THE PLOT BUFFER AND 
*    RETURN TO THE CALLING PROGRAM. IN THE EVENT THAT EITHER
*    THE X OR Y VALUE IS OUTSIDE THE PROPER RANGE, THE DRIVER 
*    RETURNS TO THE CALLING PROGRAM WITHOUT STORING THE POINT 
*    IN THE PLOT BUFFER.
      HED HP-2331A X-Y DISPLAY SUBSYSTEM DRIVER 
* 
* 
*    VI. DESCRIPTION - CONT'D 
*    ---------------
* 
*    WHEN THE DRIVER IS CALLED TO DISPLAY A SET OF X-Y AXIS,
*    IT WILL FIRST DETERMINE IF THE PLOT BUFFER HAS BEEN SET
*    UP. IF IT HAS, IT WILL THEN PROCESS THE X AND Y POSITION 
*    VALUES, DETERMINING A SET OF CORRESPONDING CONSTANTS AND 
*    SAVING THEM FOR USE BY THE INTERRUPT SERVICE ROUTINE. IT 
*    WILL THEN RETURN TO THE CALLING PROGRAM.IF THE DRIVER IS 
*    CALLED TO DISPLAY THE AXIS BEFORE THE PLOT BUFFER IS SET 
*    UP, IT WILL IGNORE THE REQUEST AND RETURN IMMEDIATELY TO 
*    THE CALLING PROGRAM. 
* 
*    THE DRIVER MAY ALSO BE CALLED TO CLEAR THE PLOT BUFFER,
*    IN WHICH CASE,IT WILL FIRST DETERMINE IF THE PLOT BUFFER 
*    HAS BEEN SET UP. IF IT HAS, THE DRIVER THEN CLEARS IT BY 
*    SETTING EACH LOCATION TO A 0 AND IT WILL THEN RETURN TO
*    THE CALLING PROGRAM.IF THE DRIVER IS CALLED TO CLEAR THE 
*    PLOT BUFFER BEFORE IT HAS BEEN SET UP,IT WILL IGNORE THE 
*    REQUEST AND RETURN IMMEDIATELY TO THE CALLING PROGRAM. 
* 
*    THE KEY SEGMENT OF THIS DRIVER IS THE INTERRUPT SERVICE
*    SUBROUTINE,WHICH IS EXECUTED EACH TIME THE D/A CONVERTER 
*    INTERRUPTS (ABOUT EVERY TWENTY MILLISECONDS). WHEN THIS
*    INTERRUPT OCCURS, THIS SUBROUTINE WILL FIRST DISPLAY THE 
*    X AND Y AXIS, IF THIS OPTION WAS REQUESTED. NEXT,IT WILL 
*    DISPLAY THE CONTENTS OF THE PLOT BUFFER, INITIALIZE THE
*    D/A CONVERTER AND RETURN TO THE PROGRAM IN PROGRESS. 
* 
*    VII. ENTRY POINTS - PLOTB, GRAPH, ERASE, DISPT, INTER
*    -----------------
* 
*    VIII. EXTERNAL SUBROUTINES - .ENTR 
*    -------------------------- 
* 
*    IX. CALLING INFORMATION -
*    -----------------------
* 
*    TO SET UP THE PLOT BUFFER, THE DRIVER IS CALLED FROM 
*    FROM FORTRAN AS: 
* 
*       CALL PLOTB (IARRY, NUMBR) 
* 
*          WHERE      IARRY - NAME OF AN INTEGER ARRAY
*                             USED TO STORE THE POINTS
*                             TO BE DISPLAYED.
* 
*                     NUMBR - AN INTEGER VARIABLE OR A
*                             CONSTANT WHICH SPECIFIES
*                             THE NUMBER OF POINTS TO 
*                             BE DISPLAYED. 
* 
      SKP 
* 
* 
*    IX. CALLING INFORMATION - CONT'D 
*    -----------------------
* 
*    TO TURN THE X-Y DISPLAY OFF, THE DRIVER IS CALLED FROM 
*    FORTRAN AS:
* 
*       CALL PLOTB (IARRY, 0) 
* 
*    TO STORE A POINT IN THE PLOT BUFFER, THE DRIVER IS 
*    CALLED FROM FORTRAN AS:
* 
*       CALL DISPT (IXVAL, IYVAL) 
* 
*          WHERE      IXVAL - AN INTEGER VARIABLE OR A
*                             CONSTANT, IN THE RANGE 0
*                             TO 255, REPRESENTING THE
*                             X-COORDINATE VALUE. 
* 
*                     IYVAL - AN INTEGER VARIABLE OR A
*                             CONSTANT, IN THE RANGE 0
*                             TO 255, REPRESENTING THE
*                             Y-COORDINATE VALUE. 
* 
*    TO DISPLAY A SET OF X AND Y AXIS, THE DRIVER IS CALLED 
*    FROM FORTRAN AS: 
* 
*       CALL GRAPH (IXAXS, IYAXS) 
* 
*          WHERE      IXAXS - AN INTEGER VARIABLE OR A
*                             CONSTANT SPECIFYING THE 
*                             POSITION OF THE X-AXIS, 
*                             AS SHOWN BELOW- 
* 
*                                NO.    POSITION
*                                ---    --------
* 
*                                 0     BOTTOM
*                                 1     CENTER
*                                 2     TOP 
* 
*                     IYAXS - AN INTEGER VARIABLE OR A
*                             CONSTANT SPECIFYING THE 
*                             POSITION OF THE Y-AXIS, 
*                             AS SHOWN BELOW- 
* 
*                                NO.    POSITION
*                                ---    --------
* 
*                                 0     LEFT
*                                 1     CENTER
*                                 2     RIGHT 
* 
      SKP 
* 
* 
*    IX. CALLING INFORMATION - CONT'D 
*    -----------------------
* 
*    TO TERMINATE DISPLAY OF THE AXIS, THE DRIVER IS CALLED 
*    FROM FORTRAN AS: 
* 
*       CALL GRAPH (-1, 0)
* 
*    TO CLEAR THE PLOT BUFFER, THE DRIVER IS CALLED FROM
*    FORTRAN AS:
* 
*       CALL ERASE
* 
* 
*    X. PROGRAMMING NOTES - 
*    -------------------- 
* 
*       1. TO DISPLAY THE CONTENTS OF THE PLOT BUFFER USING 
*          DIRECT MEMORY ACCESS,THE N OPTION MUST BE INCLUDED 
*          IN THE CONTROL STATEMENT DURING ASSEMBLY OF THIS 
*          PROGRAM. 
      SKP 
* 
* 
*    XI. PROGRAM LISTING -
*    -------------------
* 
      ENT PLOTB, ERASE, GRAPH, DISPT, INTER 
      EXT .ENTR 
DACON EQU 17B     ASSIGN I/O ADDRESS
DMA1  EQU 2B
DMA2  EQU 6B
* 
* 
*         PLOTB ENTRY POINT 
* 
* 
ARRY1 BSS 1 
NUMB1 BSS 1 
PLOTB NOP         ENTRY/EXIT
      JSB .ENTR   GET PARAMETER ADDRESSES 
      DEF ARRY1 
* 
      LDA INSTR   PUT JSB,I INSTRUCTION 
      STA DACON    IN TRAP CELL 
      LDA ARRY1   GET BUFFER ADDRESS
      STA ADDRS    SAVE FOR POINTER 
      STA PNTRX 
      LDA NUMB1,I GET BUFFER LENGTH 
      SSA,RSS     IS IT < 0?
      SZA,RSS     IS IT = 0?
      JMP TRNOF    YES, TURN DISPLAY OFF
      CMA,INA     MAKE NEGATIVE 
      STA LENTH    SAVE FOR COUNTER 
      STA CNTRX 
* 
      STC DACON,C INITIALIZE D/A CONVERTER
      JMP PLOTB,I RETURN TO CALLING PROGRAM 
* 
TRNOF CLC DACON   TURN D/A CONVERTER OFF
      JMP PLOTB,I RETURN TO CALLING PROGRAM 
* 
*     BUFFER CLEAR ROUTINE
* 
CLEAR NOP         ENTRY/EXIT
      LDA ADDRS   GET BUFFER ADDRESS
      SZA,RSS     IS IT > 0? (PLOTB CALLED?)
      JMP CLEAR,I  NO, RETURN TO MAIN PROGRAM 
      STA PNTR    SAVE FOR POINTER
      STA PNTRX   RESET PLOT BUFFR PNTR TO BEGINNING
      LDA LENTH   INITIALIZE POINT COUNTER
      STA CNTR
      STA CNTRX   RESET PLOT BUFFER COUNTER 
      CLA         SET A = 0 
LOOPC STA PNTR,I  SET BUFFER LOCATION = 0 
      ISZ PNTR    INDEX PNTR TO NEXT LOCATION 
      ISZ CNTR    INDEX POINT CNTR, IS IT = 0?
      JMP LOOPC    NO, RETURN & CLEAR NEXT LOCATION 
      JMP CLEAR,I RETURN TO MAIN PROGRAM
      SKP 
* 
* 
*         GRAPH ENTRY POINT 
* 
* 
XAXS1 BSS 1 
YAXS1 BSS 1 
GRAPH NOP         ENTRY/EXIT
      JSB .ENTR   GET PARAMETER ADDRESSES 
      DEF XAXS1 
* 
      LDA ADDRS   GET BUFFER ADDRESS
      SZA,RSS     IS IT > 0? (PLOTB CALLED?)
      JMP GRAPH,I  NO, RETURN TO CALLING PROGRAM
* 
      LDA YAXS1,I GET Y-AXIS POSITION 
      SSA         IS IT < 0?
      JMP AXOFF    YES, TURN AXIS DISPLAY OFF 
      CLB         SET X-VALUE = 0 
      SZA,RSS     IS POSITION = 0?
      JMP CONT1    YES, SKIP NEXT PART
      CCB 
      ADB D128    SET X-VALUE = 127 
      CPA D1      IS POSITION = 1?
      RSS          YES, SKIP NEXT PART
      ADB D128    SET X-VALUE = 255 
CONT1 BLF,BLF     MOVE X-VALUE TO UPPER 8 BITS
      STB XAXIS    SAVE IT
* 
      LDA XAXS1,I GET X-AXIS POSITION 
      SSA         IS IT < 0?
      JMP AXOFF    YES, TURN AXIS DISPLAY OFF 
      CLB         SET Y-VALUE = 0 
      SZA,RSS     IS POSITION = 0?
      JMP CONT2    YES, SKIP NEXT PART
      CCB 
      ADB D128    SET Y-VALUE = 127 
      CPA D1      IS POSITION = 1?
      RSS          YES, SKIP NEXT PART
      ADB D128    SET Y-VALUE = 255 
CONT2 STB YAXIS    SAVE Y-VALUE 
* 
      CLB         SET RSS INSTRUCTION IN INTER
      STB INSTX    SUBROUTINE TO A NOP
      JMP GRAPH,I RETURN TO CALLING PROGRAM 
* 
AXOFF LDA RSSIN   GET SKIP INSTRUCTION
      STA INSTX    STORE IT IN SUBROUTINE 
      JMP GRAPH,I RETURN TO CALLING PROGRAM 
* 
* 
*         ERASE ENTRY POINT 
* 
* 
ERASE NOP         ENTRY/EXIT
      JSB CLEAR   CLEAR PLOT BUFFER 
      ISZ ERASE   INCREMENT RETURN ADDRESS
      JMP ERASE,I RETURN TO CALLING PROGRAM 
      SKP 
* 
* 
*         DISPT ENTRY POINT 
* 
* 
XVALU BSS 1 
YVALU BSS 1 
DISPT NOP         ENTRY/EXIT
      JSB .ENTR   GET PARAMETER ADDRESSES 
      DEF XVALU 
* 
      LDA ADDRS   GET BUFFER ADDRESS
      SZA,RSS     IS IT > 0? (PLOTB CALLED?)
      JMP DISPT,I  NO, RETURN TO CALLING PROGRAM
* 
      LDA XVALU,I GET X-VALUE 
      SSA         IS IT NEGATIVE? 
      JMP DISPT,I  YES, RETURN TO CALLING PROGRAM 
      STA TEMP    SAVE IT 
      ADA DM256   SUBTRACT 256 FROM IT
      SSA,RSS     IS RESULT NEGATIVE? 
      JMP DISPT,I  NO, RETURN TO CALLING PROGRAM
* 
      LDA YVALU,I GET Y-VALUE 
      SSA         IS IT NEGATIVE? 
      JMP DISPT,I  YES, RETURN TO CALLING PROGRAM 
      STA 1       SAVE IT IN B-REG
      ADA DM256   SUBTRACT 256 FROM IT
      SSA,RSS     IS RESULT NEGATIVE? 
      JMP DISPT,I  NO, RETURN TO CALLING PROGRAM
* 
      LDA TEMP    GET X-VALUE AGAIN 
      ALF,ALF     MOVE IT TO UPPER 8 BITS 
      IOR 1       MERGE IT WITH Y-VALUE 
      ALF,ALF     ROTATE AGAIN TO SET Y IN UPPER BITS
      STA PNTRX,I STORE IT IN PLOT BUFFER 
      ISZ PNTRX   INDEX POINTER TO NEXT LOCATION
      ISZ CNTRX   INDEX POINT CNTR, IS IT = 0?
      JMP DISPT,I  NO, RETURN TO CALLING PROGRAM
* 
      LDA ADDRS   RESET PLOT BUFFER POINTER TO
      STA PNTRX    BEGINNING OF BUFFER
      LDA LENTH   RESET POINT COUNTER 
      STA CNTRX 
      JMP DISPT,I RETURN TO CALLING PROGRAM 
* 
      SKP 
* 
* 
*         INTER ENTRY POINT 
* 
* 
INTER NOP         ENTRY/EXIT
      STA SAVEA   SAVE CONTENTS OF A & B REGS 
      STB SAVEB 
* 
INSTX RSS         SKIP AXIS ROUTINE IF GRAPH
      JSB AXIS     NOT CALLED 
* 
      IFN         THIS ROUTINE IS USED FOR DMA
      LDA INSTY   PUT CLC INSTRUCTION IN
      STA DMA2     DMA TRAP CELL
      LDA CONWD   GET DMA CONTROL WORD
      OTA DMA2     OUTPUT IT TO DMA 
      CLC DMA1
      LDA ADDRS   GET BUFFER ADDRESS
      OTA DMA1     OUTPUT IT TO DMA 
      STC DMA1
      LDA LENTH   GET BUFFER LENGTH 
      OTA DMA1     OUTPUT IT TO DMA 
      STC DMA2,C  INITIALIZE DMA TRANSFER 
      JMP EXIT    SKIP NEXT PART
      XIF 
* 
      LDA ADDRS   INITIALIZE PLOT BUFFER POINTER
      STA PNTR1 
      LDA LENTH   INITIALIZE PLOT BUFFER COUNTER
      STA CNTR1 
* 
LOOP  LDA PNTR1,I  GET POINT FROM PLOT BUFFER 
      OTA DACON   DISPLAY IT
      ISZ PNTR1   INDEX POINTER TO NEXT POINT 
      ISZ CNTR1   INDEX POINT CNTR, IS IT = 0?
      JMP LOOP     NO, RETURN & DISPLAY NEXT POINT
* 
EXIT  LDA SAVEA   RESTORE CONTENTS OF A & B REGS
      LDB SAVEB 
      STC DACON,C INITIALIZE D/A CONVERTER
      JMP INTER,I RETURN TO MAIN PROGRAM
* 
      SKP 
* 
*     AXIS DISPLAY ROUTINE
* 
AXIS  NOP         ENTRY/EXIT
      CLB         SET X-VALUE = 0 
LOOPX LDA 1       GET X-VALUE 
      ALF,ALF     MOVE IT TO UPPER 8 BITS 
      IOR YAXIS   MERGE IN Y-VALUE
      OTA DACON   DISPLAY POINT 
      ADB D2      INCREMENT X-VALUE BY 2
      CPB D256    IS IT = 256?
      RSS          YES, GET OUT OF LOOP 
      JMP LOOPX   RETURN & DISPLAY NEXT POINT 
* 
      CLB         SET Y-VALUE = 0 
LOOPY LDA 1       GET Y-VALUE 
      IOR XAXIS   MERGE IN X-VALUE
      OTA DACON   DISPLAY POINT 
      ADB D2      INCREMENT Y-VALUE BY 2
      CPB D256    IS IT = 256?
      JMP AXIS,I   YES, RETURN TO MAIN PROGRAM
      JMP LOOPY   RETURN & DISPLAY NEXT POINT 
* 
*     CONSTANTS 
* 
ADDRS OCT 0 
LENTH BSS 1 
PNTR  BSS 1 
CNTR  BSS 1 
CNTR1 BSS 1 
PNTR1 BSS 1 
PNTRX BSS 1 
CNTRX BSS 1 
XAXIS BSS 1 
YAXIS BSS 1 
TEMP  BSS 1 
SAVEA BSS 1 
SAVEB BSS 1 
* 
DM256 DEC -256
D1    DEC 1 
D2    DEC 2 
D128  DEC 128 
D256  DEC 256 
* 
RSSIN RSS 
INSTR JSB LINK,I
* 
      IFN         THESE ARE USED BY DMA ROUTINE 
INSTY CLC DMA2
CONWD ABS DACON 
      XIF 
* 
      ORB 
LINK  DEF INTER 
* 
      END 
                              