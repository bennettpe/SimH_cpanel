set console -q -n log=log.txt 

; set debug -n -q debug.txt
; set debug stdout

; set clk debug=CSRW;PSERV;IOBUS
; set tty debug=CSRW;SERV;PSERV;XFER;IOBUS
; set ptr debug=SERV;XFER;IOBUS
; set ptp debug=CSRW;SERV;XFER;IOBUS
; set cpu debug=INSTR;DATA;FETCH;REG;OPNDEXEC;NOOS

echo
echo ***
echo *** BCS Basic Control System (1966) 
echo *** Prepare PaperTape 16k system
echo ***
echo

set cpu 16k

set clk dev=13
set tty dev=11
set ptr dev=10
set ptp dev=12

set tty autolf

att -q ptr bcsgen/bcsprep.abs
boot ptr

reset 

; set s register: the display register
dep s 11

; set p register: the program counter with address of program start
dep p 2000

call type2 "HS INP?"  "10"
call type2 "HS PUN?"  "12"
call type2 "FWA MEM?" "200"
call type2 "LWA MEM?" "37677"

go until "LOAD"
go 

att -q -e ptr bcsgen/bcstty.rel
go

att -q -e ptr bcsgen/bcsptr.rel
go

att -q -e ptr bcsgen/bcsptp.rel
go

attach -e ptr bcsgen/bcsioc.rel

go until "EQT?"
go 

call type "11,D.00"
call type "10,D.01"
call type "12,D.02"
call type "/E"

go until "SQT?"

call type2 "-KYBD?"  "7"
call type2 "-TTY?"   "7"
call type2 "-LIB?"   "10"
call type2 "-PUNCH?" "11"
call type2 "-INPUT?" "10"
call type2 "-LIST?"  "7"
call type2 "DMA?"    "0"

go until "LOAD"
go 

att -q -e ptr bcsgen/bcsloadr.rel
go until "INTERRUPT LINKAGE ?"
go

call type "10,101,I.01"
call type "11,102,I.00"
call type "12,103,I.02"
call type "/E"

go until "*BCS ABSOLUTE OUTPUT"
go

att ptp -q -n bcs/tmp.bcs16k.abs
go

det -q ptp

; PaperTape tmp.bcs16k.abs created and prepared
; Copy as production papertape

det -q all
copy -q bcs/tmp.bcs16k.abs  bcs/bcs16k.abs
del  -q bcs/tmp.bcs16k.abs

echo
echo
echo ***
echo *** Prepare finished 
if "%runtime%"!="" echo *** preparation time: %runtime%
echo ***

if "%1"=="QUIT" quit
echo
echo *** Press Enter to quit
set env -p "   " a
echo
 
echo
quit
goto end

:type
; simulate typing on tty. 
; %1 (parameter one) is the text to type 
send "%1"
send "\r"
go until "\n"
return

:type2
; simulate typing on tty. 
; %1 (parameter one) is the question to be replied with %2 (param two)
go until "%1"
send "%2"
send "\r"
go until "\n"
return

:end


