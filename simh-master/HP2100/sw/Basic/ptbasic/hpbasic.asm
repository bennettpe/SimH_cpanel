ASMB,A,B,L,T       BASIC LANGUAGE -- JANUARY 1, 1970
      HED BASE PAGE LINKS AND CONSTANTS
      ORG 77B
      SUP PRESS MULTIPLE OPERAND PRINTING
      HLT 77B       CHANGED TO JSB 107B,I BY 'BOSS'
*
**  ENTRY POINT FOR CONFIGURED BASIC
*
      JMP START,I
*
PREAD BSS 1         PHOTO READER LINK
WRITE BSS 1         TTY OUTPUT LINK
PUNCH BSS 1         PUNCH LINK
REED  BSS 1         KEYBOARD LINK
      DEF STOP      STOP LINK
LWBM  BSS 1         LAST WORD OF AVAILABLE MEMORY
      BSS 1         'BOSS' DRIVER LINKAGE
FWAM  DEF FINIS     FIRST WORD OF AVAILABLE MEMORY
LWAM  BSS 1         LAST WORD OF AVAILABLE MEMORY
PBUFF BSS 1         FIRST WORD OF USERS PROGRAM
PBPTR BSS 1         LAST WORD+1 OF USER'S PROGRAM
FWABP DEF FINBP     FIRST WORD AVAILABLE BASE PAGE
FCORE BSS 1         START OF FREE CORE
SYMTF BSS 1         START OF SYMBOL TABLE
SYMTA BSS 1         SYMBOL TABLE END
LSTAK BSS 1         LOW-CORE STACK ADDRESS
ASBTB DEF FINIS     START OF CALL LINKAGE TABLE
SBTBE DEF FINIS     LAST WORD +1 OF CALL TABLE
IMOFF BSS 1         LINK TO INTERRUPT OFF
IMON  BSS 1         LINK TO INTERRUPT ON
TLINK BSS 1         TTY INTERRUPT LINK
PLSTR DEF PUNCH,I
LISTR DEF WRITE,I   LIST DEVICE REFERENCE      JSB,I
TLSTR DEF WRITE,I
.BUFA BSS 1         I/O BUFFER ADDRESS
BADDR BSS 1         I/O BUFFER
CCNT  BSS 1           POINTERS
SBUFA BSS 1         SYNTAX BUFFER ADDRESS
SBPTR BSS 1         SYNTAX BUFFER POINTER
TFLAG BSS 1
TTYFL BSS 1
TSTPT BSS 1         TEMPORARY STACK POINTER
LSTPT BSS 1         LOW-CORE STACK POINTER
HSTPT BSS 1         HIGH-CORE STACK POINTER
PRADD BSS 1         PROGRAM EXECUTION
NXTST BSS 1           SEQUENCING INFORMATION
.LNUM BSS 1         CURRENT LINE NUMBER
TYPE  BSS 1         CURRENT STATEMENT TYPE
DSTRT BSS 1         DATA
NXTDT BSS 1           STATEMENT
DCCNT BSS 1             POINTERS
RSYM  BSS 1
SIGN  BSS 1
EXP   BSS 1
XH    BSS 1         RANDOM
XL    BSS 1           VARIABLE
TEMPS BSS 12        TEMPORARIES
MLBX1 EQU TEMPS+10
B1    BSS 2
B2    BSS 2
B3    BSS 2
      SKP
START DEF ENTRY     INITIATE BASIC SYSTEM
RUNA  DEF MFASE     PHASE 2: BUILD SYMBOL TABLE
FASE3 DEF XEC       PHASE 3: PROGRAM EXECUTION
PEXMA DEF PEXMK     RETURN TO MONITOR FROM SYNTAX
RDYDA DEF RDYPT     RETURN TO MONITOR FROM PHASE 3
DRQSA DEF DRQST     REQUEST INPUT DATA
LISTA DEF LIST      LIST OR PUNCH PROGRAM
MATA  DEF MAT+1     MAT ENTRY IN PRINT-NAME TABLE
EMATA DEF EMAT      FIRST WORD OF MATRIX EXECUTION
TSRCH DEF TBSRH     SEARCH PRINT-NAME TABLE
FNDPA DEF FNDPS     LOCATE STATEMENT SPECIFIED BY #
CNSTA DEF CONST     SIGNED ASCII TO BINARY
NUMCA DEF NUMCK     UNSIGNED ASCII TO BINARY
INCHK DEF INTCK     ASCII TO INTEGER CONVERSION
ENOTA DEF ENOUT     SIGNED BINARY NUMBER TO ASCII
NUMOA DEF NUMOT     UNSIGNED BINARY NUMBER TO ASCII
PGINT DEF PRGIN     FETCH PROGRAM INTEGER
OUTIA DEF OUTIN     INTEGER TO ASCII CONVERSION
OUTSA DEF OUTST     STRING TO BUFFER
OUTLA DEF OUTLN     DUMP PRINT BUFFER WITH CR/LF
OUTCA DEF OUTCR     PUT CHARACTER INTO PRINT BUFFER
GETCA DEF GETCR     FETCH NEXT NON-BLANK CHARACTER
DIGCA DEF DIGCK     SEE IF CHARACTER IS A DIGIT
LETCA DEF LETCK     SEE IF CHARACTER IS A LETTER
SSYMA DEF SSYMT     SEARCH SYMBOL TABLE FOR SYMBOL
FETCA DEF FETCH     EVALUATE FORMULA A RETURN VALUE
FORMA DEF FORMX     EVALUATE FORMULA
.LOGA DEF .LOG      TAKE NATURAL LOG OF ARGUMENT
.EXPA DEF .EXP      COMPUTE EXPONENTIAL OF ARGUMENT
.FADA DEF .FAD      FLOATING ADD
.FSBA DEF .FSB      FLOATING SUBTRACT
.FMPA DEF .FMP      FLOATING MULTIPLY
.FDVA DEF .FDV      FLOATING DIVIDE
ARINA DEF ARINV     NEGATE FLOATING NUMBER
MPYA  DEF MPY       INTEGER MULTIPLY
FLUNA DEF .FLUN     UNPACK FLOATING NUMBER
PACKA DEF .PACK     PACK FLOATING NUMBER
FLT   DEF FLOAT     16-BIT INTEGER TO FLOATING
IFIXA DEF IFIX      FLOATING TO INTEGER (TRUNCATION)
PRNIA DEF PRNIN     INITIALIZE PRINT BUFFER
CHRSA DEF CHRST
ACCST DEF ACTST
DELST DEF DLSTM
FDAT  DEF FDATA
LCK2A DEF LCHK2
XEC4A DEF XEC4
FSC1A DEF FSC14
FOR1A DEF FORM1
FOR0A DEF FORM0
FOR0B DEF FOR11
FOR1B DEF FOR10
FR12A DEF FOR12
EOF   JSB ERROR
NOEOF JSB ERROR
E8M1A DEF E8-1
ESYN3 DEF SYNE3-1
FSCEF DEF FSCE4
E6M1A DEF E6-1
EBUFA DEF EBUFF
EBFA  DEF EBFF-1
LBUFA DEF LBUFF
LNBFA DEF LNBFF-1
ERBS  DEF ERR-1
RECER DEF RCERR-ERR
FOPBS DEF QUOTE-2
STBAS DEF SYNTB-26,I
XECBR DEF XECTB-26,I
ARBAS DEF AROTB-6,I
PDFBS DEF PDFT-1
TBLAD DEF SYCMD
STTYP DEF LET
MATIO DEF READ
MCBOP DEF AND
PDFNS DEF SIN
MATFN DEF ZER
ANEXT DEF NEXT
ADATA DEF DATA
ATHEN DEF THEN
ATO   DEF TO
ASTEP DEF STEP
ANOT  DEF NOT
ATAB  DEF TAB
MBXL  DEF MLBX1
      SKP
.1    DEC 1
.2    DEC 2
.3    DEC 3
.4    DEC 4
.6    DEC 6
.7    DEC 7
.8    DEC 8
.9    DEC 9
.10   DEC 10
.12   DEC 12
.15   DEC 15
.23   DEC 23
.26   DEC 26
.27   DEC 27
.28   DEC 28
.30   DEC 30
.31   DEC 31
.32   DEC 32
.33   DEC 33
.34   DEC 34
.37   DEC 37
.40   DEC 40
.41   DEC 41
.43   DEC 43
.45   DEC 45
.46   DEC 46
.47   DEC 47
.48   DEC 48
.49   DEC 49
.58   DEC 58
.63   DEC 63
B100  OCT 100
E     OCT 105
F     OCT 106
.72   DEC 72
.74   DEC 74
.75   DEC 75
N     OCT 116
S     OCT  123
B133  OCT 133
B177  OCT 177
B200  OCT 200
MSK0  OCT 377
B400  OCT 400
B776  OCT 776
MSK1  OCT 777
B1000 OCT 1000
B2000 OCT 2000
B3000 OCT 3000
SCCNT OCT 3002
B4000 OCT 4000
LF    OCT 5000
B1400 OCT 14000
UNMNC OCT 21000
B2200 OCT 22000
B2300 OCT 23000
DEFOP OCT 35000
REMOP OCT 36000
RDOP  OCT 52000
TENTH OCT 63146
OPMSK OCT 77000
MSK4  OCT 77600
INF   OCT 77777
TYPFL OCT 100017
TABCN OCT 100037
OPDMK OCT 100777
RMODE OCT 130000
UNNRM OCT 140000
HIMSK OCT 174000
M1    DEC -1
M2    DEC -2
M3    DEC -3
M4    DEC -4
M5    DEC -5
M6    DEC -6
M7    DEC -7
M8    DEC -8
M9    DEC -9
M10   DEC -10
M11   DEC -11
M15   DEC -15
M16   DEC -16
M21   DEC -21
M25   DEC -25
M32   DEC -32
D53   OCT -53
D72   OCT -72
D100  OCT -100
M72   DEC -72
M73   DEC -73
M76   DEC -76
D133  OCT -133
M256  DEC -256
M310  DEC -310
M1000 DEC -1000
MAXSN DEC -10000
MSK3  EQU M7
FN    ASC 1,FN
QMARK ASC 1,?
HALF  OCT 40000
      OCT 0
HONE  EQU HALF
MNEG  OCT 100000   MAXIMUM NEGATIVE FLOATING
      OCT 376         POINT NUMBER
FLGBT EQU MNEG
MAXFX DEC -999999.5
MINFX DEC -0.099999959
BLANK OCT 40
      HED BASE PAGE SUBROUTINES
**
***  EMIT ERROR MESSAGE  **
**
ERROR NOP
      LDA TLSTR     SHIFT TO
      STA LISTR       COMMAND MODE
      LDA CCNT      SAVE
      STA OPCHK       OUTPUT
      LDA BADDR         BUFFER
      STA RSCHK           POINTERS
      LDA EBFA      SET BUFFER
      STA BADDR       POINTER
      LDA .8        SET CHARACTER
      STA CCNT        COUNT
      LDB ERROR     ERROR SOURCE IN (B)
      LDA ERBS      ERROR ADDRESS IN (A)
      INA           MOVE TO NEXT ERROR
      CPB 0,I       SAME AS ACTUAL ERROR?
      CMA,INA,RSS   YES
      JMP *-3       NO
      ADA ERBS      COMPUTE ERROR
      STA ENOUT     SAVE NEGATIVE OF ERROR
      CMA,INA           NUMBER
      JSB OUTIA,I   NUMBER TO BUFFER
      LDB EBUFA     LOAD BUFFER ADDRESS
      LDA CCNT      LOAD NEGATIVE OF
      CMA,INA         CHARACTER COUNT
      JSB WRITE,I   OUTPUT ERROR MESSAGE
      LDA LNBFA     OUTPUT
      STA BADDR
      LDA .10
      STA CCNT        LINE
      LDA .LNUM
      JSB OUTIA,I
      LDB LBUFA         NUMBER
      LDA CCNT
      JSB WRITE,I
      LDA ENOUT     RETRIEVE NEGATIVE OF ERROR
      ADA RECER     RECOVERABLE
      SSA,RSS         ERROR?
      JMP PEXMA,I   NO, RETURN TO SYNTAX MODE
      LDA RMODE     RETURN TO
      STA LISTR       RUN MODE
      LDA OPCHK     RESTORE
      STA CCNT        OUTPUT
      LDA RSCHK         BUFFER
      STA BADDR           POINTERS
      JMP ERROR,I   RETURN TO PROGRAM
      SKP
**
*** MOVE WORDS TO HIGHER CORE  **
**
MVTOH NOP
      LDB TEMP2     FETCH SOURCE ADDRESS
MVTO1 CPB TEMP3     ALL RELOCATION DONE?
      JMP MVTOH,I   YES, EXIT
      CCA           BACK UP
      ADA TEMP4       SOURCE AND
      STA TEMP4         DESTINATION
      ADB M1              ADDRESSES
      LDA 1,I       MOVE
      STA TEMP4,I     WORD
      JMP MVTO1
**
***  INPUT A CONSTANT  **
**
CONST NOP
      JSB GETCR
      JMP CONST,I
      CLB           SET SIGN
      STB SIGN        POSITIVE
      INB
      CPA .43       '+' ?
      JMP CONS1     YES
      CPA .45       NO, '-' ?
      CCB,RSS       YES
      JMP CONS2     NO
CONS1 STB SIGN      RECORD SIGN
      JSB GETCR     FETCH NEXT
      JMP SYE12-1     CHARACTER
CONS2 JSB NUMCK     FETCH CONSTANT
      JMP CONS3     NONE FOUND
      ISZ CONST     SUCCESSFULLY FOUND,
      JMP CONST,I     EXIT VIA (P+2)
CONS3 CPB SIGN      SIGN FOUND? ( (B) = 0)
      CCA,RSS       NO
      JSB ERROR     YES, SOLITARY SIGN
SYE12 JMP CONST,I   EXIT VIA (P+1)
**
***  FETCH NUMBER AND CONVERT TO BINARY  **
**
NUMCK NOP           CHARACTER IN (A), SIGN SET
      CLB
      STB EXP       ZERO
      STB MANT1       ALL
      STB MANT2         COMPONENTS
      STB EXPON           OF NUMBER
      STB TEMP3     SET 'NUMBER' FLAG FALSE
      CCB           SET 'DECIMAL POINT'
      STB DPFLG       FLAG FALSE
NUMC1 CPA .46       DECIMAL POINT?
      ISZ DPFLG     YES, SET FLAG TRUE
      JMP NUMC2     NO
      CLA           INITIALIZE POST-DECIMAL DIGIT
      STA EXPON       DIGIT COUNTER TO ZERO
      JMP NUMC3+1   FETCH A CHARACTER
NUMC2 JSB DIGCK     DIGIT?
      JMP NUMC7     NO
      ISZ EXPON     YES, COUNT DIGIT
      ALF,ALF       LEFT-JUSTIFY
      ALF,RAR         DIGIT AND
      STA TEMP4         SAVE IT
      JSB MBY10     MULTIPLY PREVIOUS NUMBER BY 10
      LDB EXP
      SZB           ZERO EXPONENT?
      JMP NUMC4     NO
      LDA .4        YES, SET
      STA EXP         EXPONENT TO 4
      LDA TEMP4     LOAD
      CLB             NUMBER
NUMC3 JSB NORML     NORMALIZE THE NUMBER
      ISZ TEMP3     SET 'NUMBER OCCURRED' FLAG
      JSB GETCR     ANOTHER CHARACTER?
      JMP NUM12     NO
      JMP NUMC1     YES
NUMC4 ADB M4        COMPUTE
      CMB             EXPONENT
      LDA TEMP4         BIAS AND
      STB TEMP4           SAVE IT
      CLB
NUMC5 ISZ TEMP4     DIGIT POSITIONED?
      JMP NUMC6     NO
      CLE           YES, ADD IN
      ADB MANT2       LOW PART
      CLO               OF NUMBER
      SEZ           OVERFLOW?
      INA           YES, BUMP (A)
      ADA MANT1     ADD IN HIGH PART OF NUMBER
      SOS           OVERFLOW?
      JMP NUMC3     NO
      CLE,ERA       YES, ROTATE
      ERB             DOWN AND
      ISZ EXP           BUMP
      NOP                 EXPONENT
      JMP NUMC3
NUMC6 CLE,ERA       SHIFT
      ERB             DIGIT
      JMP NUMC5         RIGHT
NUMC7 CLB           DECIMAL POINT
      STB TEMP4
      CPB TEMP3       OR DIGIT FOUND?
      JMP NUMCK,I   NO, EXIT VIA (P+1)
      CPA E         YES, 'E' ?
      RSS           YES
      JMP NUM12     NO, NO EXPONENT PART
      JSB GETCR
NUMER JSB ERROR
      CPA .43       '+' ?
      JMP NUMC8     YES
      CPA .45       NO, '-' ?
      CCA,RSS       YES
      JMP NUMC9     NO
      STA TEMP4     NOTE MINUS SIGN
NUMC8 JSB GETCR
      JMP NUMER
NUMC9 JSB DIGCK     DIGIT?
      JMP NUMER     NO
      STA TEMP3     YES, SAVE IT
      JSB GETCR
      JMP NUM10     SECOND
      JSB DIGCK       DIGIT?
      JMP NUM10     NO
      LDB TEMP3     YES
      BLS,BLS       MULTIPLY
      ADB TEMP3       PRIOR DIGIT
      BLS               BY 10
      ADA 1         ADD NEW DIGIT
      STA TEMP3     SAVE EXPONENT
      JSB GETCR
      JMP NUM10     THIRD
      JSB DIGCK       DIGIT?
      RSS           NO
      JMP NUMER     YES
NUM10 LDA TEMP3     LOAD EXPONENT
      ISZ TEMP4     POSITIVE?
      CMA,INA       YES, COMPLEMENT IT
      RSS           NO
NUM12 CLA           CLEAR IF NO EXPONENT PART
      ISZ DPFLG     DECIMAL POINT?
      ADA EXPON     YES, CORRECT EXPONENT
      SZA,RSS       ZERO EXPONENT?
      JMP NUM14     YES
      SSA           NO, NEGATIVE EXPONENT?
      JMP NUM13     NO
      CMA,INA       YES, SET
      STA EXPON       COUNTER
      JSB DBY10     DIVIDE NUMBER BY 10
      ISZ EXPON     DONE?
      JMP *-2       NO
      JMP NUM14     YES
NUM13 STA EXPON     SET COUNTER
      JSB MBY10     MULTIPLY BY 10
      ISZ EXPON     DONE?
      JMP *-2       NO
NUM14 LDA MANT1     YES, LOAD
      LDB MANT2       NUMBER
      ISZ SIGN      POSITIVE?
      JMP NUM15     YES
      CMA           NO,
      CMB,INB,SZB,RSS   COMPLEMENT
      INA                IT
NUM15 JSB .PACK     PACK NUMBER INTO (A) AND (B)
      ISZ SBPTR
      STA SBPTR,I   STORE
      ISZ SBPTR       NUMBER IN
      STB SBPTR,I       PROPER
      ISZ SBPTR           LOCATION
      JSB BCKSP     FETCH
      JSB GETCR       FIRST
      LDA .10           UNUSED CHARACTER
      ISZ NUMCK     RETURN
      JMP NUMCK,I     VIA (P+2)
**
***  NORMALIZE AND PACK FLOATING POINT NUMBER  **
**
.PACK NOP           MANTISSA IN (A) AND (B),
      JSB NORML       EXPONENT IN EXP, (E) CLEARED
      CLE,SZA,RSS   ZERO RESULT?
      JMP .PACK,I   YES
      ADB B177      NO, ROUND
      SSA,RSS       POSITIVE NUMBER?
      INB           YES, FINISH ROUND
      CLO
      SEZ           OVERFLOW FROM (B)?
      CLE,INA       YES, BUMP (A)
      SOS           OVERFLOW? (A=100000, B=0)
      RAL
      SSA,SLA,RSS   TWO HIGH BITS 1'S? (A=140000)
      JMP PACK1     NO
      CCE           YES
      ARS,SLA,ALS   SET (A) =100000 AND SKIP
PACK1 RAR           COUNTERPART TO *-5
      STA MBY10     SAVE (A)
      LDA 1         DELETE 8 LOW
      AND M256        ORDER BITS OF MANTISSA
      STA 1         SAVE LOWER MANTISSA
      LDA EXP       FETCH EXPONENT
      SEZ           DECREMENT EXPONENT?
      ADA M1        YES
      SOC           NO, PRIOR OVERFLOW?
      INA           YES, INCREMENT EXPONENT
      ADA B200     NO, EXPONENT
      SSA             UNDERFLOW?
      JMP PACK3     YES
      ADA M256      NO, EXPONENT
      SSA,RSS         OVERFLOW?
      JMP PACK4     YES
      ADA B200      NO, RESTORE EXPONENT,
      RAL             POSITION SIGN,
      AND MSK0          MASK TO 8 BITS, AND
      ADB 0             COMBINE WITH LOW MANTISSA
      LDA MBY10     RETRIEVE HIGH MANTISSA
      CPA MNEG
      RSS           NEGATIVE
      JMP .PACK,I
      CPB MNEG+1      OVERFLOW?
      JMP PACK4     YES
      JMP .PACK,I   NO
PACK3 JSB ERROR
UNDER CLA           ZERO RESULT
      CLB             ON UNDERFLOW
      JMP .PACK,I
PACK4 JSB ERROR
OVRER LDA MBY10
      JSB OVFLW
      JMP .PACK,I
**
***  LOAD INFINITY ON OVERFLOW  **
**
OVFLW NOP
      LDB M2        LOAD
      SSA             APPROPRIATE
      LDB B776          LOW MANTISSA
      IOR INF       LOAD
      SSA             APPROPRIATE
      LDA MNEG          HIGH MANTISSA
      JMP OVFLW,I
**
***  NORMALIZE (A), (B), AND EXP  **
**
NORML NOP           SET
      STA MBY10       LEFT-SHIFT
      CLA               COUNTER
      STA MPY             TO ZERO
      LDA MBY10
      SZA,RSS       ON
      SZB             ZERO
      JMP NORM3         CLEAR
      STA EXP             EVERYTHING
      STA MANT1     STORE
NORM1 STB MANT2       MANTISSA
      JMP NORML,I       AND RETURN
NORM2 ISZ MPY       COUNT LEFT SHIFTS
NORM3 CLE,ELB       ROTATE (A) AND
      ELA             (B) LEFT INTO (E)
      SEZ,SSA,RSS   TWO HIGHEST BITS 0?
      JMP NORM2     YES, + UNNORMALIZED
      SEZ,SSA       NO, TWO HIGHEST BITS 1?
      JMP NORM2     YES, - UNNORMALIZED
      ERA           SHIFT TO
      ERB,CLE         NORMALIZE MANTISSA
      STA MANT1     NO,
      LDA MPY         COMPUTE
      CMA,INA           CORRECTED
      ADA EXP             EXPONENT
      STA EXP               VALUE
      LDA MANT1
      JMP NORM1
**
***  MULTIPLY UNPACKED NUMBER BY 10  **
**
MBY10 NOP
      LDA MANT1     RETURN ON
      SZA,RSS         ZERO
      JMP MBY10,I       MANTISSA
      LDB EXP       MULTIPLY
      ADB .3          BY
      STB EXP           8
      LDB MANT2     LOAD MANTISSA
      CLE,ERA       DIVIDE
      ERB             BY
      CLE,ERA           4
      ERB,CLE
      ADB MANT2     DOUBLE
      SEZ             ADD TO
      INA               PRODUCE
      ADA MANT1           1.25 * MANTISSA
      SSA,RSS       CORRECT
      JMP *+5
      CLE,ERA         ON
      ERB
      ISZ EXP           OVERFLOW
      NOP
      STA MANT1
      STB MANT2
      JMP MBY10,I
**
***  DIVIDE UNPACKED NUMBER BY 10  **
**
DBY10 NOP           MULTIPLY BY DOUBLE-LENGTH TENTH
      LDA MANT1     RETURN
      SZA,RSS         ON ZERO
      JMP DBY10,I       MANTISSA
      LDB M2        ADD EXPONENT OF
      ADB EXP         'TENTH' TO
      STB EXP           MANTISSA EXPONENT
      LDA MANT2     JUSTIFY
      CLE,ERA         LOWER MANTISSA
      JSB MPY       MULTIPLY BY
      DEF TENTH       63146 (ONE-TENTH)
      CLE,ELA       SHIFT
      ELB,CLE         BACK
      ADA 1         ADD IN LOWER MANTISSA*
      SEZ             TENTH*(2)-16
      INB               AND ROUND
      STB MANT2           TO 16 BITS
      LDA MANT1     DO
      JSB MPY         SAME
      DEF TENTH         FOR
      CLE                 HIGH
      ADA 1                 MANTISSA
      ADA MANT2     (EFFECTIVELY) SUM
      SEZ             DOUBLE-LENGTH
      INB               PRODUCTS
      STB MANT1     EXCHANGE
      STA 1           (A) AND (B)
      LDA MANT1         REGISTERS
      JSB NORML     NORMALIZE RESULT
      JMP DBY10,I
      SKP
**
***  MULTIPLY INTEGER IN (A)  **
**
MPY   NOP           ADDRESS OF MULTIPLIER IN MPY,I
      LDB M2        SET -2 IN
      STB MBY10       SIGN TEMP
      LDB MPY,I     LOAD
      LDB 1,I         MULTIPLIER
      CLE,SSA       (A) NEGATIVE?
      CMA,CME,INA   YES, COMPLEMENT (A) AND (E)
      SSB           (B) NEGATIVE?
      CMB,CME,INB   YES, COMPLEMENT (B) AND (E)
      SEZ           (E) = 0?
      ISZ MBY10     NO, SET SIGN OF RESULT NEGATIVE
      STB NORML     SAVE MULTIPLIER
      LDB M16       SET
      STB MVTOH       COUNTER
      CLB           ZERO PRODUCT
      ELA           BIAS (A) TO LEFT
MPY1  ERA,CLE,SLA   SHIFT, TEST,
      ADB NORML       AND ADD UPON
      ERB               NON-ZERO BIT
      ISZ MVTOH     DONE?
      JMP MPY1      NO
      ERA,CLE       YES, ADJUST FINAL RESULT
      ISZ MBY10     NEGATIVE RESULT?
      JMP MPY2      NO
      CMB           YES,
      CMA,INA,SZA,RSS  COMPLEMENT
      INB                RESULT
MPY2  CLO
      ISZ MPY
      JMP MPY,I
**
***  FIND AND STORE ONE-CHARACTER OPERATORS  **
**
SYMCK NOP           CHARACTER IN (A)
      STB COUNT     -(ENTRIES TO BE SEARCHED)
      ALF,ALF       POSITION
      IOR .32         CHARACTER
      LDB SYMCK,I   STARTING TABLE ENTRY - 2
      ISZ SYMCK     SET RETURN ADDRESS
SYMC1 ADB .2        UPDATE TABLE POINTER
      CPA 1,I       MATCH?
      JMP SYMC2
      ISZ COUNT     NO, CONTINUE SEARCH?
      JMP SYMC1     YES
      ALF,ALF       NO, RESTORE
      AND B177        CHARACTER
      JMP SYMCK,I       AND EXIT
SYMC2 CCA           GET
      ADA 1           INFORMATION
      LDA 0,I           WORD
      AND OPMSK           AND
      STA SBPTR,I           STORE IT
      CPA B1400
      JMP FSC1A,I
      ISZ SYMCK     RETURN VIA
      JMP SYMCK,I     (P+2)
**
***  FIND CALLED SUBROUTINE  **
**
FNDSB NOP
      STB TEMP2     SAVE SUBROUTINE NUMBER
      LDB ASBTB     LOAD (B) WITH SUBROUTINE TABLE
FNDS1 CPB SBTBE     END OF TABLE?
      JSB ERROR     YES
CALER LDA 1,I       NO, EXTRACT
      AND .63         SUBROUTINE NUMBER
      CPA TEMP2     DESIRED ONE?
      JMP FNDSB,I   YES
      ADB .2        NO, MOVE TO
      JMP FNDS1       NEXT TABLE ENTRY
      SPC 5
*               ************************************************
*               SUBROUTINE TO COMPUTE THE STORAGE REQUIRED BY AN
*               ARRAY WHOSE PACKED DIMENSIONS ARE IN A UPON ENTRY
*               ************************************************
*
*               THE SUBROUTINE RETURNS IN A THE NUMBER OF LOCATIONS
*               REQUIRED FOR THE SPECIFIED DIMENSIONS
*               = 2*DIM1*DIM2
*
MDIM  NOP
      STA 1         STORE PACKED DIMS. TEMPORALILY
      AND MSK0
      STA .FLUN     STORE # OF COLUMNS
      LDA 1
      ALF,ALF
      AND MSK0      A = # OF ROWS
      ALS           DOUBLE FOR FLOATING POINT
      JSB MPY
      DEF .FLUN     COMPUTE 2*ROWS*COLUMNS
      SSA           RESULT < 32768 ?
      JSB ERROR     NO, ERROR DIMENSIONS TOO LARGE
MER9  JMP MDIM,I    YES, RETURN
      SKP
**
***  ROUND A SUBSCRIPT TO AN INTEGER  **
**
*
*  RETURNS INTEGER IN (1,32767) (BIASED BY -1)
*  OR EXITS TO ERROR.
*
SBFIX NOP           SUBSCRIPT IN (A) AND (B)
      JSB IFIX      24-BIT INTEGER?
      JMP E6M1A,I   NO
      SEZ,RSS       YES, ROUND AND
      ADB M1          BIAS BY -1
      SZA,RSS       15-BIT
      SSB             POSITIVE INTEGER?
      JMP E6M1A,I   NO
      JMP SBFIX,I   YES
**
***  INTEGERIZE FLOATING POINT NUMBER  **
**
IFIX  NOP
      STO
      STA GETCR     SAVE (A)
      JSB .FLUN     EXPONENT
      SSA             NON-NEGATIVE?
      JMP IFIX3     NO
      ADA M16       YES, EXPONENT
      SSA             <= 15?
      CLO           YES
      ADA M8        EXPONENT
      SSA,RSS         <= 23?
      JMP IFIX,I    NO, ALL SIGNIFICANCE IS INTEGER
      ADA M8        MOVE BINARY POINT TO END OF (B)
      STA .FLUN     SAVE SHIFT COUNT
      LDA GETCR     RETRIEVE (A)
      JMP IFIX2
IFIX1 CLE,SLA,ARS   SHIFT (A) RIGHT
      CME           SHIFT (B)
      SLB,ERB         RIGHT
      STO           NOTE IF A 1 IS LOST
IFIX2 ISZ .FLUN     DONE?
      JMP IFIX1     NO
      ISZ IFIX      YES
      JMP IFIX,I
IFIX3 LDA GETCR     RETRIEVE (A)
      CLE,SSA       TRUNCATE
      CCA,RSS         TO
      CLA,RSS           -1
      CCB,RSS             OR
      CLB                   0
      JMP IFIX2+2
      SKP
**
***  TAKE ARITHMETIC INVERSE  **
**
ARINV NOP           NUMBER IN (A) AND (B)
      STA OUTLN     SWAP
      LDA 1
      LDB OUTLN       REGISTERS
      CMB,CLE       COMPLEMENT HIGH PART
      XOR M256      COMPLEMENT LOW PART
      ADA B400      ADD IN 1
      SEZ,RSS       OVERFLOW?
      JMP ARIN2     NO
      INB           YES, INCREMENT HIGH MANTISSA
      CPB FLGBT     OVERFLOW?
      JMP ARIN1     YES
      CPB UNNRM     NO, NEGATIVE UNNORMALIZED?
      RSS           YES
      JMP ARIN2     NO
ARIN1 ADB UNNRM     FIX HIGH MANTISSA
      SLA,RAR       POSITION EXPONENT
      IOR MSK4      FILL IN BITS IF NEGATIVE
      SSB,RSS       POSITIVE?
      INA,RSS       YES, BUMP EXPONENT
      ADA M1        NO, DECREMENT EXPONENT
      RAL           POSITION
      AND MSK0        EXPONENT
ARIN2 STA OUTLN     SWAP
      LDA 1
      LDB OUTLN       REGISTERS
      JMP ARINV,I
**
***  UNPACK LOW WORD OF NUMBER  **
**
.FLUN NOP           WORD IN (B)
      LDA 1         (A) = (B)
      AND MSK0      EXTRACT EXPONENT IN (A)
      CMB           SUBTRACT OFF
      ADB 0           EXPONENT FROM
      CMB               MANTISSA IN (B)
      SLA,RAR       NEGATIVE EXPONENT?
      IOR MSK4      YES, FILL IN LEADING BITS
      JMP .FLUN,I   NO
**
***  STACK (B) ON LOW-CORE STACK  **
**
SLWST NOP
      ISZ LSTPT     ADVANCE 'LOW
      LDA LSTPT       STACK' POINTER
      CPA HSTPT     STACK OVERFLOW?
E1    JSB ERROR     YES
      STB LSTPT,I   NO, STACK (B)
      JMP SLWST,I
      SKP
**
***  BUMP HIGH STACK POINTER  **
**
BHSTP NOP
      CCB           ADVANCE
      ADB HSTPT
      STB HSTPT       POINTER
      CPB LSTPT     OVERFLOW?
      JMP E1        YES
      JMP BHSTP,I   NO
**
***  FETCH TOP OF STACK  **
**
STTOP NOP
      JSB OPCHK     VALIDATE
      JSB RSCHK       OPERAND
      LDB HSTPT,I   SAVE
      LDA 1,I       LOAD
      INB
      LDB 1,I         NUMBER
      JMP STTOP,I
**
***  VERIFY LEGITIMACY OF OPERAND  **
**
OPCHK NOP
      LDB HSTPT,I   OPERAND ADDRESS TO (B)
      LDA 1,I       HIGH PART OF
      CPA MNEG        OPERAND 100000B?
      INB,RSS       YES
      JMP OPCH1     NO
      LDA 1,I       LOW PART
      CPA MNEG+1      776B?
      JSB ERROR     YES
E8    ADB M1
OPCH1 CPB TSTPT     TEMPORARY OPERAND?
      RSS           YES
      JMP OPCHK,I   NO
      LDA TSTPT     UNSTACK
      ADA M2          THE TEMPORARY
      STA TSTPT         OPERAND
      JMP OPCHK,I   EXIT WITH ADDRESS IN (B)
**
***  ALLOT SPACE FOR INTERMEDIATE RESULT  **
**
RSCHK NOP
      LDA TSTPT     ALLOT
      ADA .2
      STA TSTPT       SPACE
      ADA M1        OVERFLOW INTO
      CPA LSTAK       LOW-CORE STACK?
      RSS           YES
      JMP RSCHK,I   NO
      LDA LSTAK     SAVE
      INA             LOWER
      STA TEMP3         STACK BOUND
      ADA .9        UPDATE
      STA LSTAK       STACK BOTTOM
      LDA LSTPT     SET
      INA             SOURCE
      STA TEMP2         ADDRESS
      ADA .9        UPDATE
      STA LSTPT       STACK TOP
      INA           SET DESTINATION
      STA TEMP4       ADDRESS
      CMA,INA       OVERFLOW
      ADA HSTPT       INTO
      SSA               HIGH-CORE STACK?
      JMP E1        YES
      JSB MVTOH     NO, MOVE
      JMP RSCHK,I     LOW-CORE STACK
**
***  CHECK FOR DIGIT  **
**
DIGCK NOP          CHARACTER IN (A)
      LDB 0
      ADB D72      ASCII 72B
      SSB,RSS        OR GREATER?
      JMP DIGCK,I  YES, RETURN WITH CHARACTER
      ADB .10       NO, ASCII 60B
      SSB            OR GREATER?
      JMP DIGCK,I  NO
      ISZ DIGCK    YES, SET 'SUCCESS' EXIT,
      LDA 1          LOAD DIGIT INTO (A),
      JMP DIGCK,I      AND RETURN
**
***  CHECK FOR LETTER  **
**
LETCK NOP          CHARACTER IN (A)
      LDB 0
      ADB D133     ASCII 133B
      SSB,RSS        OR GREATER?
      JMP LETCK,I  YES, EXIT WITH CHARACTER IN (A)
      ADB .26       NO, ASCII 101B
      SSB,RSS        OR GREATER?
      ISZ LETCK     YES
      JMP LETCK,I  NO
*
*  ON END-OF-FILE CONDITION RETURN TO P+1 ELSE
*  RETURN TO P+2 WITH NON-BLANK CHARACTER IN (A)
*
GETCR NOP
      ISZ CCNT      ANY CHARACTERS LEFT?
      RSS
      JMP GETCR,I   NO, END-OF-FILE EXIT
      LDB BADDR     LOAD BUFFER ADDRESS
      ISZ BADDR     UPDATE FOR NEXT TIME
      CLE,ERB       SET CHARACTER FLAG
      LDA 1,I       LOAD CURRENT BUFFER WORD
      SEZ,RSS       FIRST CHARACTER?
      ALF,ALF       YES, POSITION IT
      AND B177      MASK EXTRANEOUS BITS
      CPA BLANK     BLANK?
      JMP GETCR+1   YES, FETCH NEXT CHARACTER
      ISZ GETCR     UPDATE RETURN ADDRESS
      JMP GETCR,I     AND EXIT
**
***  BACKSPACE OVER ONE CHARACTER  **
**
BCKSP NOP
      CCA          BACKSPACE
      ADA CCNT       OVER
      STA CCNT         LAST
      CCA                CHARACTER IN
      ADA BADDR            INPUT
      STA BADDR              BUFFER
      JMP BCKSP,I
**
***  PRINT A NUMBER  **
**
ENOUT NOP
      CCE           SET SIGN FLAG TRUE
      JSB NUMOA,I   OUTPUT THE NUMBER
      JSB OUTLN     END-OF-LINE ACTION
      LDA .32       OUTPUT
      JSB OUTCR       A BLANK
      LDB MLBX1+1   FIELD
      ADB CCNT
      SZB             FULL?
      JMP *-5       NO
      JMP ENOUT,I
**
***  SPACE FOR A COMMA  **
**
EDELM NOP
      LDB CCNT      NO, LOAD CHARACTER COUNT
EDEL1 SZB,RSS       ZERO?
      JMP EDELM,I   YES
      ADB M15       NO, SUBTRACT ZONE WIDTH
      SSB,RSS       NEGATIVE RESULT?
      JMP EDEL1     NO
      STB OUTLN     YES, SAVE BLANK COUNT
      LDA .32       FETCH BLANK
      JSB OUTCR     OUTPUT
      ISZ OUTLN
      JMP *-3         BLANKS
      LDB CCNT      LINE
      ADB M76
      SSB,RSS         FULL?
      JSB OUTLN     YES
      JMP EDELM,I
      SKP
**
***  OUTPUT A COMPLETED LINE  **
**
OUTLN NOP
      LDA TYPE      FETCH 'CHARACTERS PRINTED' COUNT
      SLA           CORRECT FOR START ON
      INA             ODD PRINT POSITION
      ADA CCNT      OUTPUT
      LDB .BUFA       A
      JSB WRITE,I       LINE
      LDB MLBX1+1   CORRECT
      ADB CCNT
      STB MLBX1+1     MARKER
      CLA           RESET COUNT OF
      STA TYPE        CHARACTERS PRINTED
      JSB PRNIA,I   CLEAN UP
      JMP OUTLN,I
**
***  ADD A CHARACTER TO OUTPUT BUFFER  **
**
OUTCR NOP           CHARACTER IN (A)
      STA IFIX      SAVE CHARACTER
      ISZ CCNT      COUNT IT
      LDB CCNT      FIRST CHARACTER
      SLB             OF BUFFER WORD?
      ISZ BADDR     YES, MOVE TO FRESH WORD
      LDA BADDR,I   LOAD BUFFER WORD
      SLB           SAVE
      ALF,ALF         OTHER
      AND M256          CHARACTER
      IOR IFIX      ADD NEW CHARACTER
      SLB           POSITION
      ALF,ALF         WORD AND
      STA BADDR,I       STORE IT
      JMP OUTCR,I
*
*
TEMP  EQU TEMPS+1
TEMP1 EQU TEMPS+2
TEMP2 EQU TEMPS+3
TEMP3 EQU TEMPS+4
TEMP4 EQU TEMPS+5
COUNT EQU TEMPS+6
STEMP EQU TEMPS+4
MANT1 EQU SYMCK
MANT2 EQU MDIM
EXPON EQU LETCK
DPFLG EQU BCKSP
ARYAD EQU OUTCR
EOL   EQU CONST
FINBP EQU *         FIRST UNUSED WORD OF BASE PAGE
      HED BASIC INTEPRETER CONTROL
*
***************  BASIC INTERPRETER CONTROL *************************
*
*   THIS PROGRAM INTERPRETS THE SYSTEM COMMANDS AND PROVIDES
*     I/O  CONTROL FOR THE BASIC INTERPRETER. ALL USER
*     COMMUNICATION IS DONE THRU THIS PROGRAM. USER RESPONSES ARE
*     CHECKED FOR SYSTEM COMMANDS AND IF A VALID COMMAND IS
*     DETECTED  THIS PROGRAM INITIATES APPROPRIATE ACTION.
*
      ORG 2000B
*
*  DATA LOCAL TO MONITOR
*
RDYA  DEF READY
READY ASC 2,READ
      OCT 54415
LFEED DEF LF
QMRKA DEF QMARK
STOPA DEF STCMD
CMNDA DEF CMNDS
*
ENTRY CLC 0,C       STARTING POINT, TURN OFF ALL I/O
      STF 0         TURN ON INTERRUPT SYSTEM
      LDA LWBM      LOADED
      CPA LWAM        BY 'BOSS'?
      JMP FLUSH     NO
      STA LWAM      YES, RESET
      INA             POINTER
      STA SYMTA         VALUES
*
FLUSH LDA FWAM
      STA PBUFF     SET PROGRAM BUFFER ADDRESS
      STA PBPTR     SET PROGRAM BUFFER POINTER
      LDA .32       INITIALIZE
      STA BLANK       DELETE CHARACTER FOR GETCR
      CLA           SET LINE NUMBER
      STA .LNUM       TO 0 INITIALLY
*
RDYPT LDA TLSTR     SET TO
      STA LISTR       COMMAND MODE
      CLA
      STA DRQST     CLEAR DATA REQUEST FLAG
      STA TFLAG     CLEAR PHOTO READER INPUT FLAG
      STA TTYFL     CLEAR TTY TAPE FLAG
      JSB WRITE,I   DO A RETURN AND LINE FEED.
      LDA M6
      LDB RDYA
      JSB WRITE,I   PRINT *READY* ON TTY
*
PEXMK LDA TLSTR     SHIFT TO
      STA LISTR       COMMAND MODE
      LDA TFLAG
      SZA           IS TAPE FLAG SET?
      JMP PTAPE+1   YES, GET RECORD FROM PHOTO RDR
      SKP
DATAI LDB LFEED     LOAD ADDRESS OF LINE FEED
      STB RSYM      STORE ADDRESS OF READY SYMBOL
      LDA TTYFL     TTY TAPE
      SZA             INPUT?
      JMP GTRCD     YES, SUPPRESS LINE FEED
      CCA           NO
      LDB RSYM      LOAD LF OR '?' ADDRESS
      JSB WRITE,I   PRINT LF OR '?', NO CR-LF
*
GTRCD JSB IMOFF,I   TURN OFF KEYBOARD INTERRUPT MODE
      LDA .72
      LDB .BUFA
      JSB REED,I    GET RECORD FROM TTY
      CPA M2
      JMP RBOUT     RUBOUT IN RECORD, INPUT AGAIN
*
RPRCS CMA,SSA,RSS   SET A=-1-# CHARS AND CHECK FOR
      JSB ERROR     RECORD TOO LONG
RTLE  STA CCNT      -1-# CHARACTERS < 0,SET CCNT
      LDA .BUFA     LOAD BUFFER ADDRESS
      CLE,ELA       SHIFT LEFT,LEAST BIT USED AS
      STA BADDR      ODD/EVEN FLAG
      JSB GETCR     FETCH FIRST CHARACTER
      JMP DATAI     NULL RECORD, INPUT AGAIN
      LDB DRQST
      SZB,RSS       DATA REQUEST?
      JMP CKRCD     NO DATA REQUEST,GO CHECK RECORD
      CPA S         ASCII S  FIRST CHARACTER?
      JSB STOP      ASSUME STOP REQUESTED
      CLA           LINE
      JSB WRITE,I     FEED
      JSB BCKSP     BACKSPACE
      LDA RMODE     RETURN TO
      STA LISTR       RUN MODE
      LDB DRQST
      CLA
      STA DRQST     CLEAR DATA REQUEST FLAG
      JSB IMON,I    DATA REQUEST,TURN ON INTRPT MODE
      JMP 1,I       GO TO DATA REQUEST CALLING POINT
*
      ASC 1,\
      DEF *-1
RBOUT LDB *-1       OUTPUT 'X' WITH
      CLA,INA         CARRIAGE RETURN
      JSB WRITE,I       AND LINE FEED
      JMP GTRCD
*
*  THIS SECTION REQUESTS DATA INPUT
*
DRQST NOP           EXIT/ENTRY AND FLAG
      LDB TLSTR     SHIFT TO
      STB LISTR       COMMAND MODE
      LDB QMRKA
      JMP DATAI+1   PRINT '?' AND WAIT
      SKP
*
*  THIS SECTION CHECKS RECORD FOR SYSTEM COMMANDS.
*
CKRCD LDB SBUFA
      STB SBPTR     INITIALIZE SYNTAX BUFFER POINTER
      STA SBPTR,I   PUT FIRST CHAR IN SYNTAX BUFFER
      JSB LETCK     IS CHARACTER A LETTER
      JMP SYNTX     NO, TRY SYNTAX
*
      LDA TBLAD     LOAD SYS CMND TABLE START POINT
      LDB M8        LOOK FOR A
      JSB TSRCH,I     SYSTEM COMMAND
      JSB ERROR     NOT A VALID COMMAND
*
INVSC EQU *         INVALID CMND ERROR REFERENCE
*
      ALF,ALF       ENTRY FOUND
      ARS           MOVE JMP ADDR TO LEAST BITS POS.
      ADA CMNDA     ADD START ADDR. OF CMND ROUTINES
      STA STOP      SAVE (A)
      CLA           OUTPUT
      JSB WRITE,I     A CR-LF
      JMP STOP,I    EXECUTE COMMAND
      SKP
*
*  THIS SETS UP AND EXECUTES THE SYSTEM COMMANDS
*
CMNDS EQU *        COMMAND LIST REFERENCE
*
RUN   JSB IMON,I    TURN ON TTY INTERRUPT MODE
      JMP RUNA,I    GO TO RUN ENTRY POINT
*
SCRTH JMP FLUSH     SCRATCH CURRENT PROGRAM
*
TLIST LDA TLSTR     LIST PROGRAM, TFLAG = 0
      CLB,RSS
*
PLIST LDA PLSTR     PUNCH PROGRAM, TFLAG # 0
      STA LISTR     SET DRIVER ADDRESS
      STB TFLAG     SET DEVICE FLAG
      JSB IMON,I    TURN ON TTY INTERRUPT MODE
      JMP LISTA,I   GO TO LIST ENTRY POINT
*
PTAPE JSB IMON,I    PTAPE COMMAND
      LDA .72
      LDB .BUFA
      JSB PREAD,I   GET RECORD FROM PHOTO READER
      CPA M2        END OF TAPE?
      JMP EOTR      YES,GO SEE IF START OR END
      CPA M3        PHOTO READER READY?
      JSB ERROR     NO
PRERR SZA,RSS       YES
      JMP PTAPE+1   NULL RECORD
      STA TFLAG     SET FLAG # 0
      JMP RPRCS     GO PROCESS RECORD
*
EOTR  LDB TFLAG
      SZB,RSS       START OR END OF TAPE?
      JMP PTAPE+1   START
      JMP RDYPT     GO TO READY POINT
*
*   STOP COMMAND SERVICE
*
STOP  NOP
      JSB IMOFF,I   TURN OFF KEYBOARD INTERRUPT MODE
      LDB TLSTR     SHIFT TO
      STB LISTR       COMMAND MODE
      LDA MNEG
      INA,SZA
      JMP *-1       DELAY FOR 100 MILLISECONDS
      JSB WRITE,I   CARRIAGE-RETURN LINE-FEED
      LDA .4
      LDB STOPA
      JSB WRITE,I    PRINT *STOP*
      JMP RDYPT
      SKP
*
**  SET LINE FEED SUPPRESSION
*
TAPE  STA TTYFL     SET TO 'TAPE' MODE
      JMP GTRCD
*
**  RETURN TO 'BOSS' EXECUTIVE
*
BYEC  CLA
      JMP 77B
      HED CHECK SYNTAX AND TRANSLITERATE
*
* *******************************
****                           ***
***  CHECK SYNTAX OF STATEMENT  ***
****                           ***
* *******************************
*
**
***  DETERMINE SEQUENCE NUMBER  **
**
SYNTX JSB INCHK,I   RECORD
      DEF MAXSN       SEQUENCE NUMBER
      ISZ SBPTR     SAVE SPACE FOR LENGTH WORD
      STB .LNUM     SAVE LINE NUMBER
      LDB SBUFA     SET
      INB             TEMP TO
      STB TEMP          (SBUFF)+1
**
***  DETERMINE STATEMENT TYPE  **
**
      CPA .10       NULL STATEMENT?
      JMP DELST,I   YES, DELETE IT
      STA SBPTR,I   NO, RECORD NEXT CHARACTER
      LDA STTYP     PRINT-TABLE ADDRESS
      LDB M21       -(NUMBER OF ENTRIES)
      JSB TSRCH,I   FIND STATEMENT TYPE
      JSB ERROR     NOT FOUND
SYNE1 LDB M9        SET MULTIPLE STORE
      STB MSFLG       TO FALSE
      LDB PBPTR     NULL
      CPB PBUFF       PROGRAM?
      RSS           YES
      JMP SYNT1     NO
      LDB FWAM      INSURE NO
      STB PBUFF       SPURIOUS COMMON
      STB PBPTR         EXISTS
SYNT1 STB TEMPS     SET S-STACK POINTER
      CLB           SET DEFINE FLAG
      STB DFLAG       TO FALSE
      STB PFLAG     SET PARAMETER FLAG TO FALSE
      ALF,ALF       COMPUTE
      RAR             ADDRESS OF
      ADA STBAS         SYNTAX ROUTINE AND
      JMP 0,I               BRANCH TO IT
**
***  SINGLE CHARACTER AND/OR FORMULA OPERATORS  **
**
QUOTE OCT 1000      BITS 15-9 OF THE LABELLED WORD
      ASC 1,"
COMMA OCT 2000      ARE THE BASIC CODE OPERATOR
      ASC 1,,
SMCLN OCT 3000      NUMBERS.  BITS 3-0 ARE THE
      ASC 1,;
RPARN OCT 4001      OPERATOR'S HIERARCHICAL
      ASC 1,)
RBRAC OCT 5001      PRECEDENCE FOR THOSE OPERATORS
      ASC 1,]
SCMMA OCT 6002      BELONGING TO FORMULAS.  THE
      ASC 1,,
ASSOP OCT 7002      UNLABELLED WORD GIVES THE
      ASC 1,=
PLUS  OCT 10007     ASCII REPRESENTATION OF THE
      ASC 1,+
MINUS OCT 11007     SINGLE CHARACTER OPERATORS.
      ASC 1,-
TIMES OCT 12010
      ASC 1,*
DIV   OCT 13010
      ASC 1,/
EXPS  OCT 14012
      ASC 1,^
GTR   OCT 15005
      ASC 1,>
LSS   OCT 16005
      ASC 1,<
UNEQL OCT 17005
      ASC 1,#
EQUAL OCT 20005
      ASC 1,=
UNMIN OCT 21011
      ASC 1,-
LBRAC OCT 22020
      ASC 1,[
LPARN OCT 23020
      ASC 1,(
UPLUS OCT 24011
      ASC 1,+
OROP  OCT 25003
MSFLG NOP
ANDOP OCT 26004
DFLAG NOP
NOTOP OCT 27011
PFLAG NOP
GTREQ OCT 30005
UFLAG NOP
LSSEQ OCT 31005
*
***                      ***
**  LET STATEMENT SYNTAX  **
***                      ***
*
LETS  STB SFLAG     SET 'NO STORE' FLAG ( (B) = 0 )
      LDA M8        SET MULTIPLE STORE FLAG
      STA MSFLG       TO TRUE
      JSB FSC       FETCH FORMULA
      CPB SFLAG     DID STORE OCCUR? ( (B)=0 )
      JSB ERROR     NO
SYNE2 EQU *
**
***    CHECK FOR END OF STATEMENT  **
**
EOST  CPA .10       END-OF-STATEMENT?
      JMP ACCST,I   YES, ACCEPT STATEMENT
      JMP NOEOF     NO, ILLEGAL CHARACTER
      SKP
*
***                      ***
**  DIM STATEMENT SYNTAX  **
***                      ***
*
DIMS  ISZ DFLAG     SET DFLAG TO TRUE
      JSB ARRYS     CHECK AN ARRAY
      JMP ACCST,I   DONE
      JMP DIMS+1    WAS A COMMA, CONTINUE
*
***                      ***
**  COM STATEMENT SYNTAX  **
***                      ***
*
COMS  LDB PBPTR     HAS PROGRAM BUFFER
      CPB FWAM        BEEN MOVED?
      RSS           NO
      JSB ERROR     YES, ILLEGAL COM
SYNE3 STB TEMPS+7   SET ARRAY POINTER
      ISZ DFLAG     SET DEFINE FLAG TO TRUE
COMS1 CCA           SET COMMON FLAG
      STA PFLAG       TO TRUE
      JSB ARRYS     CHECK AN ARRAY
      RSS           DONE
      JMP COMS1     MORE ARRAYS
      LDB TEMPS+7   FETCH UPDATED POINTER
      STB PBUFF     SET PROGRAM BUFFER ADDRESS
      STB PBPTR     SET PROGRAM BUFFER POINTER
      JMP ACCST,I   EXIT
*
***                      ***
**  DEF STATEMENT SYNTAX  **
***                      ***
*
DEFS  JSB LTR
      JMP SYNE4     FIRST
      LDA TEMP1
      ALF,ALF        TWO CHARACTERS
      IOR TEMP2
      CPA FN           'FN'?
      RSS           YES
      JMP SYNE4     NO
      JSB LTR       LETTER FOLLOWS?
SYNE4 JSB ERROR     NO
      LDA TEMP1     YES, RECORD A
      LDB .58         FUNCTION
      JSB STROP        NAME
      LDA TEMP2     RETRIEVE CHARACTER
      JSB LPCK      LEFT PARENTHESIS?
      IOR FLGBT     YES, SET FORMAL
      STA SBPTR,I     PARAMETER BIT
      JSB VAROP     FETCH SIMPLE VARIABLE
      NOP           NONE FOUND
      JSB ERROR     SUBSCRIPTED VARIABLE FOUND
SYNE5 JSB RPCK      RECORD A RIGHT PARENTHESIS
      CCB           ASSIGNMENT
      JSB SYMCK
      DEF ASSOP-1     OPERATOR?
SYNE6 JSB ERROR     NO
      LDA M2        YES,
      ADA SBPTR       RETRIEVE
      LDA 0,I           PARAMETER
      AND MSK1            AND
      STA PFLAG             SAVE IT
      JSB FSC       FETCH DEFINING FORMULA
      JMP EOST      END-OF-STATEMENT TEST
*
***                      ***
**  REM STATEMENT SYNTAX  **
***                      ***
*
REMS  LDA .10       DUMMY STRING TERMINATOR
      JSB CHRSA,I   FETCH CHARACTER STRING
      JMP ACCST,I
*
***                     ***
**  IF STATEMENT SYNTAX  **
***                     ***
*
IFS   JSB FSC       GET DECISION FORMULA
      STA SBPTR,I   TABLE
      LDA ATHEN       SEARCH
      CCB               FOR
      JSB TSRCH,I         'THEN'
      JSB ERROR     NOT FOUND
SYNE7 EQU *         GET STATEMENT LABEL NUMBER
*
***                                  ***
**  GO TO AND GOSUB STATEMENT SYNTAX  **
***                                  ***
GOTOS JSB PGINT,I   FETCH AND RECORD
      DEF MAXSN       SEQUENCE NUMBER
      JMP EOST      END-OF-STATEMENT TEST
*
*
***                      ***
**  FOR STATEMENT SYNTAX  **
***                      ***
*
FORS  JSB VAROP     FETCH SIMPLE VARIABLE
      NOP           NONE FOUND
SYNE8 JSB ERROR     SUBSCRIPTED VARIABLE FOUND
      CCB
      JSB SYMCK     ASSIGNMENT
      DEF ASSOP-1     OPERATOR?
      JMP SYNE6     NO
      JSB FSC       YES, FETCH INITIAL VALUE FORMULA
      STA SBPTR,I   LOOK
      LDA ATO         FOR
      CCB               THE
      JSB TSRCH,I         'TO'
      JSB ERROR     MISSING
SYNE9 JSB FSC       GET LIMIT FORMULA
      CPA .10       END-OF-STATEMENT?
      JMP ACCST,I   YES
      CCB           NO, ERASE
      ADB SBPTR       ZERO
      STB SBPTR         WORD
      STA SBPTR,I   NOW
      LDA ASTEP       LOOK
      CCB               FOR
      JSB TSRCH,I         THE 'STEP'
      JSB ERROR     MISSING
SYE10 JSB FSC       GET STEP SIZE FORMULA
      JMP EOST      END-OF-STATEMENT TEST
*
***                       ***
**  NEXT STATEMENT SYNTAX  **
***                       ***
*
NXTS  JSB VAROP     FETCH SIMPLE VARIABLE
      NOP           NONE FOUND
      JMP SYNE8     SUBSCRIPTED VARIABLE FOUND
      JMP EOST      END-OF-STATEMENT TEST
*
***                                             ***
**  END, STOP, RESTORE, RETURN STATEMENT SYNTAX  **
***                                             ***
*
ENDS  ISZ SBPTR
      JSB GETCR     END-OF-STATEMENT?
      JMP ACCST,I   YES
      JMP NOEOF     NO
*
***                       ***
**  WAIT STATEMENT SYNTAX  **
***                       ***
*
WAITS JSB GETPF
      JMP EOST      END-OF-STATEMENT TEST
*
***                       ***
**  CALL STATEMENT SYNTAX  **
***                       ***
*
CALLS JSB GETCR     FETCH AND
      JMP EOF         RECORD
      ISZ SBPTR         LEFT
      JSB LPCK            PARENTHESIS
      JSB PGINT,I   FETCH AND RECORD
      DEF D100        SUBROUTINE NUMBER
      STA TEMP1     SAVE NEXT CHARACTER
      JSB FNDSB     FIND
      LDA 1,I         NUMBER
      ALF,ALF           OF
      AND .31             PARAMETERS
      CMA           RECORD
      STA TEMPS+7     COMPLEMENT - 1
      LDA TEMP1     RETRIEVE CHARACTER
CALL2 CCB
      JSB SYMCK     COMMA?
      DEF COMMA-1
      JMP CALL3     NO
      ISZ TEMPS+7   YES, MORE
      RSS             PARAMETERS PERMITTED?
SYE11 JSB ERROR     NO
      JSB FSC       YES, FETCH
      JMP CALL2       PARAMETER FORMULA
CALL3 ISZ TEMPS+7   ALL PARAMETERS PRESENT?
      JMP SYE11     NO
      JSB RPCK      YES, FETCH RIGHT PARENTHESIS
      JMP EOST      END-OF-STATEMENT TEST
*
***                       ***
**  DATA STATEMENT SYNTAX  **
***                       ***
*
DATAS JSB CONST     FETCH A CONSTANT
      JMP SYE12-1   NONE FOUND
      JSB NUMOP     FIX UP PRECEDING OPERATOR
      CCB           CHECK
      JSB SYMCK       FOR A
      DEF COMMA-1       COMMA
      JMP EOST      END-OF-STATEMENT TEST
      JMP DATAS     FETCH ANOTHER NUMBER
*
***                                 ***
**  READ AND INPUT STATEMENT SYNTAX  **
***                                 ***
*
READS JSB VAROP     RECORD VARIABLE OPERAND
      JSB ERROR     MISSING
SYE13 NOP
      CCB           CHECK
      JSB SYMCK       FOR A
      DEF COMMA-1       COMMA
      RSS
      JMP READS     IS, FETCH NEXT ITEM
      CLB           APPEND
      STB SBPTR,I     END-OF-FORMULA
      ISZ SBPTR         OPERATOR
      JMP EOST      END OF STATEMENT TEST
*
***                        ***
**  PRINT STATEMENT SYNTAX  **
***                        ***
*
PRIN1 LDB M2        NO,
      JSB SYMCK       COMMA OR
      DEF COMMA-1       SEMICOLON?
      JMP PRIN2     NO
PRINS CCA           YES, ENABLE
      STA TEMP,I      FORMULA
      ISZ SBPTR
      JSB GETCR     END-OF-STATEMENT?
      JMP ACCST,I   YES
PRIN2 CCB
      JSB SYMCK     QUOTE?
      DEF QUOTE-1
      JMP PRIN3     NO
      LDA .34       YES, SET QUOTE AS TERMINATOR
      JSB CHRSA,I     CHARACTER AND FETCH STRING
      JSB ERROR     MISSING QUOTE
SYE14 LDA QUOTE     RECORD
      STA SBPTR,I     QUOTE
      ISZ SBPTR
      JSB GETCR     END-OP-STATEMENT?
      JMP ACCST,I   YES
      CCB           ENABLE
      STB TEMP,I      FORMULA
      JMP PRIN1     NO
PRIN3 ISZ TEMP,I    TAB OR FORMULA PERMITTED?
      JSB ERROR     NO
SYE15 STA SBPTR,I   SEARCH
      LDA ATAB        FOR
      CCB               'TAB'
      JSB TSRCH,I
      CLA,RSS       NOT FOUND
      LDA TABCN
      CCB           BACKUP
      ADB SBPTR       TO WORD WITH
      STB SBPTR         PREVIOUS OPERATOR
      SZA,RSS       'TAB' ?
      JMP PRIN4     NO
      IOR SBPTR,I
      STA SBPTR,I   YES, RECORD IT
      JSB GETPF     FETCH PARAMETER
      CLB           FOLLOW
      STB SBPTR,I     WITH A
      ISZ SBPTR         ZERO
      JMP PRIN5
PRIN4 JSB BCKSP     BACKSPACE OVER LAST CHARACTER
      JSB FSC       FETCH FORMULA
PRIN5 CPA .10       END-OF-STATEMENT?
      JMP ACCST,I   YES
      JMP PRIN1     NO
*
***                      ***
**  MAT STATEMENT SYNTAX  **
***                      ***
*
MATS  JSB LTR       FIRST
      JSB ERROR       TWO CHARACTERS
SYE16 JSB LETCK         LETTERS?
      JMP MATS2     NO
      ISZ SBPTR     YES, MOVE TO FRESH S-BUFFER WORD
      LDB TEMP1     RETRIEVE FIRST LETTER AND
      BLF,BLF         PUT IT IN THE
      IOR 1             UPPER CHARACTER OF (A)
      STA SBPTR,I   SEARCH
      LDA MATIO       FOR
      LDB M2            'READ' OR
      JSB TSRCH,I         'PRINT'
      JSB ERROR     NOT FOUND
SYE17 CPA RDOP      READ?
      JMP MATS1     YES
MATS0 JSB ARRID     RECORD ARRAY
      CPA .10       END-OF-STATEMENT?
      JMP ACCST,I   YES
      LDB M2        NO,
      JSB SYMCK       COMMA OR
      DEF COMMA-1       SEMICOLON?
      JSB ERROR     NO
SYE18 JSB GETCR     END-OF-STATEMENT?
      JMP *+3       YES
      JSB BCKSP     NO
      JMP MATS0
      ISZ SBPTR     INCLUDE
      JMP ACCST,I     PARAMETER
MATS1 JSB ARRID     RECORD ARRAY
      JSB MATSB     IF SUBSCRIPT,
      NOP             RECORD IT
      CPA .10       END-OF-STATEMENT?
      JMP ACCST,I   YES
      CCB           NO
      JSB SYMCK
      DEF COMMA-1   COMMA?
      JMP SYE18-1   NO
      JMP MATS1     YES
MATS2 STA TEMP2
      LDA SBPTR     SAVE
      STA ARYAD       OPERAND ADDRESS
      LDA TEMP1     RETRIEVE FIRST LETTER
      LDB .46       RECORD AN
      JSB STROP       ARRAY
      LDA TEMP2     RETRIEVE CHARACTER
      CCB           ASSIGNMENT
      JSB SYMCK
      DEF ASSOP-1     OPERATOR?
      JMP SYNE6     NO
      LDA ARYAD,I   YES, RETRIEVE
      AND MSK1        AND SAVE
      STA TEMP,I        PREVIOUS ARRAY IDENTIFIER
      JSB LTR       LETTER NEXT?
      JMP MATS4     NO
      JSB LETCK     YES, SECOND LETTER?
      JMP MATS5     NC
      ISZ SBPTR     YES,
      LDB TEMP1       CONCATENATE
      BLF,BLF           LETTERS
      IOR 1               AND
      STA SBPTR,I           SEARCH
      LDA MATFN               FOR
      LDB M5                    ARRAY
      JSB TSRCH,I                 FUNCTION
      JSB ERROR     NOT FOUND
SYE19 ALF,ALF       FOUND
      ALF,RAR       POSITION IT,
      ADA .15         COMPLETE OPERAND,
      CCB               COMBINE
      ADB SBPTR           WITH
      IOR 1,I               OPERATOR,
      IOR FLGBT               ADD FLAG BIT,
      STA 1,I                   AND STORE
      AND MSK1      'INV'
      ADA M256        OR
      SSA,RSS           'TRN?
      JMP MATS3     YES
      JSB GETCR     NO, FND-OF-STATEMENT?
      JMP ACCST,I   YES
      JSB MATSB     NO, SUBSCRIPT?
      JSB ERROR     NO
SYE20 JMP NOEOF
MATS3 JSB GETCR
      JMP EOF
      JSB LPCK      GET LEFT PARENTHESIS
      JSB ARRID     FETCH AND RECORD AN ARRAY
      JSB RPCK      RECORD A RIGHT PARENTHESIS
      LDA ARYAD,I   RETRIEVE
      AND MSK1        PREVIOUS ARRAY IDENTIFIER
      CPA TEMP,I    MATCH LEFT-HAND SIDE ARRAY?
      JSB ERROR     YES
SYE21 JMP ACCST,I   NO
MATS4 ISZ SBPTR
      JSB LPCK      FETCH LEFT PARENTHESIS
      JSB FSC       FETCH FORMULA
      JSB RPCK      FETCH RIGHT PARENTHESIS
      CCB           MULTIPLICATION
      JSB SYMCK       OPERATOR?
      DEF TIMES-1
      JSB ERROR     NO
SYE22 JSB ARRID     YES, FETCH AND RECORD ARRAY
      CPA .10       END-OF-STATEMENT?
      JMP ACCST,I   YES
      JMP NOEOF     NO
MATS5 STA TEMP2
      LDA SBPTR     SAVE
      STA ARYAD       OPERAND ADDRESS
      LDA TEMP1     RETRIEVE
      LDB .46         AND RECORD
      JSB STROP         ARRAY
      LDA TEMP2     END-OF-
      CPA .10         STATEMENT?
      JMP ACCST,I   YES
      LDB M3        NO, MUST BE
      JSB SYMCK       A '+',
      DEF PLUS-1        '-', OR '*'
      JSB ERROR     ISN'T
SYE23 CLB           IS, SET FOR FALSE
      ADA .8
      CPA TIMES     '*'?
      JMP MATS7     YES
MATS6 STB PFLAG     NO, SET PFLAG
      JSB ARRID     GET SECOND ARRAY
      CPA .10       END-OF-STATEMENT?
      RSS           YES
      JMP NOEOF     NO
      ISZ PFLAG     WAS OPERATOR A '*'?
      JMP ACCST,I   NO
      LDA ARYAD,I   YES, RETRIEVE
      AND MSK1        SECOND ARRAY
      CPA TEMP,I    MATCH LEFT-HAND SIDE ARRAY?
SYE24 JSB ERROR     YES
      JMP ACCST,I   NO
MATS7 LDA ARYAD,I   RETRIEVE
      AND MSK1        ARRAY
      CCB           SET FOR TRUE
      CPA TEMP,I    MATCH LEFT-HAND SIDE ARRAY?
      JMP SYE24     YES
      JMP MATS6     NO
**
***  JUMP TABLE FOR STATEMENT SYNTAX  **
**
SYNTB DEF LETS     LET
      DEF DIMS     DIM
      DEF COMS     COM
      DEF DEFS     DEF
      DEF REMS     REM
      DEF GOTOS    GO TO
      DEF IFS      IF
      DEF FORS     FOR
      DEF NXTS      NEXT
      DEF GOTOS    GOSUB
      DEF ENDS     RETURN
      DEF ENDS     END
      DEF ENDS     STOP
      DEF WAITS    WAIT
      DEF CALLS    CALL
      DEF DATAS    DATA
      DEF READS    READ
      DEF PRINS    PRINT
      DEF READS    INPUT
      DEF ENDS     RESTORE
      DEF MATS     MAT
*
***                        ***
**  FORMULA SYNTAX CHECKER  **
***                        ***
*
FSC   NOP
      CLA          SET LEFT PARENTHESIS
      STA TEMPS,I    COUNT TO ZERO
FSC1  CCA          SET UNARY FLAG
      STA UFLAG      TO TRUE
FSC2  JSB VAROP    LOOK FOR VARIABLE OPERAND
      JMP FSC9     NOT FOUND
      JMP FSC6     SUBSCRIPTED VARIABLE FOUND
      JSB LETCK    FOLLOWED BY LETTER?
      JMP FSC6     NO
      LDB M2       YES, LOOK FOR
      JSB MCBCK      'AND' OR 'OR'
      LDA TEMP1    NOT FOUND, FETCH PREVIOUS
      ALF,ALF        CHARACTER AND LEFT-JUSTIFY IT
      IOR TEMP2    ADD LATEST CHARACTER
      CPA FN       'FN'?
      JMP FSC4     YES
      STA SBPTR,I  NO,
      LDA PDFNS      SEARCH FOR
      LDB M11           PREDEFINED
      JSB TSRCH,I        FUNCTION
      JMP FSC3     NOT FOUND
      ALF,ALF      ASSEMBLE
      ALF,RAR        OPERAND
      IOR FLGBT     ADD FLAG BIT
      JMP FSC5
FSC3  ISZ UFLAG    'NOT' PERMITTED?
      JMP FSC8-1   NO
      LDA ANOT     YES,
      CCB            SEARCH FOR
      JSB TSRCH,I      'NOT'
      JMP FSC8-1   'NOT' NOT FOUND
      CCB          RETRIEVE
      ADB SBPTR      PREVIOUS WORD
      LDA 1,I          WORD
      AND OPMSK    SET TO
      STA 1,I        NULL OPERAND
      JMP FSC14
FSC4  JSB GETCR     IDENTIFYING
      JMP SYNE4       FUNCTION
      JSB LETCK         LETTER?
      JMP SYNE4     NO
      ADA D100      YES,
      ALF             ASSEMBLE AND
FSC5  ADA .15           SAVE
      STA TEMP1           FUNCTION IDENTIFIER
      CCB           RETRIEVE
      ADB SBPTR       PREVIOUS
      LDA 1,I           PROGRAM WORD
      AND OPMSK     EXTRACT OPERATOR,
      IOR TEMP1       APPEND OPERAND,
      STA 1,I            AND RECORD
      JSB GETCR     LEFT PARENTHESIS
FSCE1 JSB ERROR       OR
      JSB LPCK          LEFT BRACKET?
      JSB FRCUR     YES, SAVE LOCAL VARIABLES OF FSC
      JSB FSC       FETCH ACTUAL PARAMETER
      JSB FPOP      RESTORE LOCAL VARIABLES OF FSC
      JSB RPCK      FETCH RIGHT PARENTHESIS
      JMP FSC10+1
FSC7  LDB M2       CHECK FOR
      JSB SYMCK      RIGHT PARENTHESIS
      DEF RPARN-1      OR RIGHT BRACKET
      JMP FSC8     NOT FOUND
      LDA B4000     RECORD A
      STA SBPTR,I     RIGHT PARENTHESIS
      LDA .41       RESTORE RIGHT PARENTHESIS
      CCB          MATCHING
      ADB TEMPS,I    LEFT
      SSB              PARENTHESIS?
      JMP FSC8     NO
      STB TEMPS,I  YES
      ISZ SBPTR
      JSB GETCR    FETCH
      LDA .10         CHARACTER
FSC6  CPA .10       END OF FORMULA?
      JMP FSC8     YES
      STA UFLAG    NO, SET UNARY FLAG TO FALSE
      LDB M5        SEARCH FOR A MULTICHARACTER
      JSB MCBCK      BINARY OPERATOR
      LDA SBPTR,I  NOT FOUND,
      ALF,ALF        RESTORE
      AND B177         CHARACTER
      LDB MSFLG    SEARCH
      JSB SYMCK      FOR A
      DEF PLUS-1       BINARY OPERATOR
      RSS           NOT FOUND
      JMP FSC12     FOUND
      CCB          ASSIGNMENT
      JSB SYMCK
      DEF ASSOP-1     OPERATOR?
      JMP FSC7     NO
      STA SFLAG     YES, SET
      JMP FSC1        'STORE OCCURRED' FLAG
      LDA TEMP2    RETRIEVE LETTER
FSC8  LDB TEMPS,I  ALL LEFT PARENTHESES
      SZB            MATCHED?
FSCE2 JSB ERROR     NO
      STB SBPTR,I  YES, RECORD AN
      ISZ SBPTR      END-OF-FORMULA AND
      JMP FSC,I        EXIT WITH CHARACTER IN (A)
*
FSC9  CPA .40       LEFT
      JMP FSC11       PARENTHESIS
      CPA B133          OR LEFT BRACKET?
      JMP FSC11     YES
      CLB           NO, SET SIGN
      STB SIGN        POSITIVE
      JSB NUMCK     NUMBER?
      JMP FSC13     NO
FSC10 JSB NUMOP     YES, FIX UP PRECEDING OPERATOR
      LDB M9        UPDATE
      STB MSFLG       MULTIPLE STORE
      JMP FSC6        FLAG
FSC11 ISZ SBPTR     YES
      LDA B2300     RECORD
      STA SBPTR,I     IT AND
      ISZ TEMPS,I       COUNT IT
FSC12 LDB M9        UPDATE
      STB MSFLG       MULTIPLE STORE FLAG
      JMP FSC1          FLAG
FSC13 ISZ UFLAG     UNARY OPERATORS PERMITTED?
FSCE3 JSB ERROR     NO
      LDB UNMNC
      CPA .43       '+'?
      JMP *+4       YES
      CPA .45       NO, '-'?
      JMP *+3       YES
      JMP FSCE3     NO
      ADB B3000     STORE
      ISZ SBPTR       UNARY
      STB SBPTR,I       OPERATOR
FSC14 LDB M9        UPDATE
      STB MSFLG       MULTIPLE STORE FLAG
      JMP FSC2        FLAG
**
***  CHECK FOR A MULTICHARACTER BINARY OPERATOR  **
**
MCBCK NOP
      STA SBPTR,I   SEARCH
      LDA MCBOP      FOR 'AND'
      JSB TSRCH,I      OR 'OR'
      JMP MCBCK,I  NOT FOUND
      JMP FSC12     FOUND
**
***  RESTORE FSC LOCAL QUANTITIES  **
**
FPOP  NOP
      STA TEMP1    SAVE CHARACTER
      LDB TEMPS
      ADB M5
      STB TEMPS     RESTORE S-STACK TOP
      INB
      LDA 1,I
      STA MSFLG     RESTORE MULTIPLE STORE FLAG
      INB
      LDA 1,I
      STA UFLAG     RESTORE UNARY OPERATOR FLAG
      INB
      LDA 1,I
      STA FSC       RESTORE FSC RETURN ADDRESS
      INB
      LDA 1,I       RESTORE
      STA VAROP       VAROP RETURN ADDRESS
      LDA TEMP1     RETRIEVE CHARACTER
      JMP FPOP,I
**
***  SAVE LOCAL QUANTITIES OF FSC  **
**
FRCUR NOP
      LDB TEMPS     FETCH CURRENT S-STACK POINTER
      INB           UPDATE IT
      LDA MSFLG     DUMP MULTIPLE STORE
      STA 1,I         FLAG ON S-STACK
      INB
      LDA UFLAG     STACK UNARY OPERATOR
      STA 1,I         FLAG
      INB
      LDA FSC       STACK FSC
      STA 1,I         RETURN ADDRESS
      LDA VAROP     STACK VAROP RETURN ADDRESS
      JSB SSOV        AND CHECK FOR S-STACK OVERFLOW
      JMP FRCUR,I
**
***  PUT ITEM ON S-STACK AND CHECK FOR OVERFLOW  **
**
SSOV  NOP           STORE QUANTITY
      INB           ADVANCE S-STACK POINTER
      STA 1,I       SAVE ITEM IN (A)
      INB           ADVANCE S-STACK POINTER
      STB TEMPS       AND RECORD IT
      CMB,INB
      ADB LWBM      LAST WORD
      SSB             EXCEEDED?
FSCE4 JSB ERROR     YES
      JMP SSOV,I
**
***  CHECK FOR SUBSCRIPT PART  **
**
SBSCK NOP          CHARACTER IN (A)
      LDB M2       LEFT BRACKET
      JSB SYMCK      OR
      DEF LBRAC-1      LEFT PARENTHESIS?
      JMP SBSCK,I  NO, RETURN VIA (P+1)
      ISZ SBSCK    YES, SET RETURN TO (P+2)
      LDA ARYAD,I   SET
      AND M16         ARRAY
      INA               TO
      STA ARYAD,I         SINGLE SUBSCRIPT
      LDA B2200     RECORD A
      STA SBPTR,I     LEFT BRACKET
      CLB          DIM OR COM
      CPB DFLAG      STATEMENT?
      JMP SBSC3    NO
      JSB PGINT,I   FETCH INTEGER
      DEF M256        SUBSCRIPT BOUND
      BLF,BLF       SAVE
      STB TEMP1       BOUND
      CCB           IS THE
      JSB SYMCK      NEXT CHARACTER
      DEF SCMMA-1      A COMMA?
      JMP SBSC1     NO
      ISZ ARYAD,I   YES, NOTE SECOND SUBSCRIPT
      JSB PGINT,I   FETCH SECOND
      DEF M256        INTEGER SUBSCRIPT BOUND
      RSS
SBSC1 CLB,INB       SET ONE-DIMENSIONAL CASE
      ISZ PFLAG    COM STATEMENT?
      JMP SBSC2    NO
      STA TEMP2     SAVE CHARACTER
      LDA 1
      IOR TEMP1     RETRIEVE FIRST BOUND
      JSB MDIM      FIND STORAGE NEED
      ADA TEMPS+7   UPDATE COM
      STA TEMPS+7     STORAGE POINTER
      LDA TEMP2    RETRIEVE NEXT CHARACTER
SBSC2 LDB M2       RIGHT PARENTHESIS
      JSB SYMCK      OR
      DEF RPARN-1      RIGHT BRACKET?
      JMP FSCE2     NO
      LDA LF        YES, RECORD A
      STA SBPTR,I     RIGHT BRACKET
      ISZ SBPTR    ADJUST S-BUFFER POINTER
      JSB GETCR    FETCH FOLLOWING
      LDA .10         CHARACTER
      LDB DFLAG     DIM OR COM
      SZB             STATEMENT?
      JMP SBSCK,I   YES
      JSB FPOP     RESTORE FSC LOCAL VARIABLES
      LDB M2       RESTORE
      ADB TEMPS      S-STACK
      STB TEMPS        POINTER
      INB          FETCH
      LDB 1,I        RETURN ADDRESS
      JMP 1,I          AND EXIT
SBSC3 LDA SBSCK     SAVE
      LDB TEMPS      RETURN ADDRESS
      JSB SSOV           ON S-STACK
      JSB FRCUR    SAVE FSC LOCAL VARIABLES
      LDB M9       SET MULTIPLE STORE FLAG
      STB MSFLG      TO FALSE
      LDA ARYAD     SAVE
      LDB TEMPS       OPERAND
      JSB SSOV          ADDRESS
      JSB FSC      GET SUBSCRIPT FORMULA
      CCB          CANCEL
      ADB SBPTR      END-OF-FORMULA
      STB SBPTR          OPERATOR
      LDB M2        RESTORE
      ADB TEMPS       S-STACK
      STB TEMPS         POINTER
      INB           RESTORE
      LDB 1,I         OPERAND
      STB ARYAD         ADDRESS
      CCB           IS THE
      JSB SYMCK       NEXT CHARACTER
      DEF SCMMA-1       A COMMA?
      JMP SBSC2     NO
      ISZ ARYAD,I   YES, NOTE SECOND SUBSCRIPT
      JSB FSC       GET SUBSCRIPT FORMULA
      CCB           CANCEL
      ADB SBPTR      END-OF-FORMULA
      STB SBPTR          OPERATOR
      JMP SBSC2
      SKP
**
***  CHECK SYNTAX OF ARRAY DEFINITIONS  **
**
ARRYS NOP
      JSB ARRID     FETCH ARRAY IDENTIFIER
      JSB SBSCK     RECORD A SUBSCRIPT
      JSB ERROR     MISSING SUBSCRIPT
ARRE1 CPA .10       END-OF-STATEMENT?
      JMP ARRYS,I   YES, RETURN VIA (P+1)
      CCB           NO,
      JSB SYMCK       MUST BE
      DEF COMMA-1       A COMMA
      JMP NOEOF     ISN'T
      ISZ ARRYS     IS, RETURN
      JMP ARRYS,I     VIA (P+2)
**
***  FETCH ARRAY IDENTIFIER  **
*-
ARRID NOP
      JSB LTR      FETCH LETTER
      JSB ERROR    NONE FOUND
ARRE2 LDA SBPTR     SAVE
      STA ARYAD       OPERAND ADDRES
      LDA TEMP1    RECORD
      LDB .46         ARRAY
      JSB STROP        IDENTIFIER
      LDA TEMP2    RETRIEVE FOLLOWING CHARACTER
      JMP ARRID,I
**
***  CHECK FOR VARIABLE OPERAND  **
**
VAROP NOP
      JSB LTR       LETTER?
      JMP VAROP,I   NO, EXIT VIA (P+1)
      ISZ VAROP
      CPA .40       LEFT PARENTHESIS?
      JMP VARO5     YES
      CPA B133      NO, LEFT BRACKET?
      JMP VARO5     YES
      ISZ VAROP     NO
      JSB DIGCK    DIGIT?
      JMP VARO1     NO
      LDA TEMP1    YES, RETRIEVE LETTER,
      ADB .48       AND RESTORE ASCII DIGIT
      STB TEMP1
      JSB STROP     RECORD VARIABLE
      JSB GETCR    FETCH FOLLOWING
      LDA .10         CHARACTER
      JMP VARO2
VARO1 LDA TEMP1    RETRIEVE LETTER,
      LDB .47         SET 'NO DIGIT',
      JSB STROP        AND RECORD VARIABLE
      LDA TEMP2     RETRIEVE FOLLOWING CHARACTER
VARO2 STA TEMP2     SAVE CHARACTER
      CLB           INSIDE A
      CPB PFLAG       DEF STATEMENT?
      JMP VAROP,I   NO, EXIT VIA (P+3)
      CCB
      ADB SBPTR       RETRIEVE
      LDA 1,I
      AND MSK1          OPERAND
      CPA PFLAG     MATCH PARAMETER?
      JMP VARO4     YES
VARO3 LDA TEMP2     NO, RETRIEVE
      JMP VAROP,I     CHARACTER AND EXIT VIA (P+3)
VARO4 LDA 1,I       SET OPERAND TO
      IOR FLGBT       ACTUAL PARAMETER
      STA 1,I           AND RECORD IT
      JMP VARO3
VARO5 LDA SBPTR     SAVE
      STA ARYAD       OPERAND ADDRESS
      LDA TEMP1     RETRIEVE LETTER
      LDB .46       RECORD
      JSB STROP       ARRAY IDENTIFIER
      LDA B133      RETRIEVE LEFT BRACKET
      JSB SBSCK     FETCH SUBSCRIPT
      NOP
      JMP VAROP,I   EXIT VIA (P+2)
**
***  FETCH A LETTER  **
**
LTR   NOP
      JSB GETCR
      LDA .10
      JSB LETCK    LETTER?
      JMP LTR,I    NO, EXIT VIA (P+1)
      ISZ LTR      YES,
      STA TEMP1      SAVE IT
      JSB GETCR    NEXT CHARACTER
      LDA .10         TO (A)
      STA TEMP2     SAVE SECOND CHARACTER
      JMP LTR,I    EXIT VIA (P+2)
**
***  STORE AN OPERAND NAME  **
**
STROP NOP           LETTER IN (A), NUMBER IN (B)
      ADA D100      NUMERICALLY ADJUST THE
      ADB D53         OPERAND NAME
      ALF           COMBINE THE
      IOR 1           TWO PARTS
      IOR SBPTR,I   COMPLETE OPERAND-OPERATOR PAIR
      STA SBPTR,I     AND STORE IT
      ISZ SBPTR     UPDATE S-BUFFER POINTER
      JMP STROP,I
      SKP
**
***  CHECK FOR LEFT PARENTHESIS  **
**
LPCK  NOP           CHARACTER IN (A)
      LDB M2        LEFT PARENTHESIS
      JSB SYMCK       OR
      DEF LBRAC-1       LEFT BRACKET?
      JMP FSCE1     NO
      LDA B2300     YES, RECORD A
      STA SBPTR,I     LEFT PARENTHESIS
      JMP LPCK,I    EXIT
**
***  CHECK FOR RIGHT PARENTHESIS  **
**
RPCK  NOP
      LDB M2       RIGHT PARENTHESIS
      JSB SYMCK      OR
      DEF RPARN-1      RIGHT BRACKET?
      JMP FSCE2     NO
      LDA B4000     YES, RECORD A
      STA SBPTR,I     RIGHT PARENTHESIS
      ISZ SBPTR    UPDATE SYNTAX BUFFER POINTER
      JSB GETCR    FETCH
      LDA .10         FOLLOWING CHARACTER
      JMP RPCK,I
**
***  FETCH MAT STATEMENT SUBSCRIPT  **
**
MATSB NOP
      LDB M2        LEFT PARENTHESIS
      JSB SYMCK       OR
      DEF LBRAC-1       LEFT BRACKET?
      JMP MATSB,I   NO
      ISZ MATSB     YES, SET RETURN ADDRESS
      LDA B2200     RECORD A
      STA SBPTR,I     LEFT BRACKET
      JSB FSC       FETCH SUBSCRIPT
      CCB
      JSB SYMCK     COMMA?
      DEF COMMA-1
      RSS           NO
      JSB FSC       YES, FETCH SUBSCRIPT
      LDB M2        RIGHT PARENTHESIS
      JSB SYMCK       OR
      DEF RPARN-1       RIGHT BRACKET
      JMP FSCE2
      LDA LF        RECORD A
      STA SBPTR,I     RIGHT BRACKET
      ISZ SBPTR
      JSB GETCR     END-OF-STATEMENT?
      JMP ACCST,I   YES
      JMP MATSB,I
      SKP
**
***  FETCH PARENTHESIZED FORMULA  **
**
GETPF NOP
      JSB GETCR
      JMP EOF
      ISZ SBPTR
      JSB LPCK      FETCH LEFT PARENTHESIS
      JSB FSC       FETCH FORMULA
      JSB RPCK      GET RIGHT PARENTHESIS
      JMP GETPF,I
**
***  FLAG OPERATOR WHICH PRECEDES NUMBER  **
**
NUMOP NOP
      STA TEMP4
      LDB M3        FETCH
      ADB SBPTR       PRECEDING
      LDA 1,I           OPERATOR
      IOR FLGBT     ADD FLAG BIT
      STA 1,I       REPLACE OPERATOR
      LDA TEMP4
      JMP NUMOP,I
      SKP
*
*   SYSTEM COMMAND TABLE
*
SYCMD OCT 00003
      ASC 2,RUN     EXECUTE PROGRAM
*
      OCT 02003
      ASC 2,SCR     SCRATCH PROGRAM
*
      OCT 03004
      ASC 2,LIST    LIST COMMAND
*
      OCT 05005
      ASC 3,PLIST   PUNCH LIST COMMAND
*
      OCT 12003
      ASC 2,PTA     ACTIVATE PHOTO-READER
*
      OCT 33004
STCMD ASC 2,STOP    ABORT CURRENT ACTIVITY
*
      OCT 46003
      ASC 2,TAP     ACTIVATE TTY TAPE MODE
*
      OCT 50003
      ASC 2,BYE     EXIT SYSTEM
**
***  PRINT NAME TABLE FOR OPERATORS  **
**
LET   OCT 32003     BITS 15-9 OF THE LABELLED WORD
      ASC 2,LET
DIM   OCT 33003     ARE THE BASIC CODE OPERATOR
      ASC 2,DIM
COM   OCT 34003     NUMBERS.  BITS 2-0 ARE THE
      ASC 2,COM
DEF   OCT 35003     LENGTH IN CHARACTERS OF THE
      ASC 2,DEF
REM   OCT 36003     SYMBOL.  THE ASCII VERSION OF
      ASC 2,REM
GOTO  OCT 37004     THE SYMBOL FOLLOWS.
      ASC 2,GOTO
IF    OCT 40002
      ASC 1,IF
FOR   OCT 41003
      ASC 2,FOR
NEXT  OCT 42004
      ASC 2,NEXT
GOSUB OCT 43005
      ASC 3,GOSUB
RTRN  OCT 44006
      ASC 3,RETURN
END   OCT 45003
      ASC 2,END
STP   OCT 46004
      ASC 2,STOP
WAIT  OCT 47004
      ASC 2,WAIT
CALL  OCT 50004
      ASC 2,CALL
DATA  OCT 51004
      ASC 2,DATA
READ  OCT 52004
      ASC 2,READ
PRINT OCT 53005
      ASC 3,PRINT
INPUT OCT 54005
      ASC 3,INPUT
RSTOR OCT 55007
      ASC 4,RESTORE
MAT   OCT 56003
      ASC 2,MAT
THEN  OCT 57004
      ASC 2,THEN
TO    OCT 60002
      ASC 1,TO
STEP  OCT 61004
      ASC 2,STEP
NOT   OCT 27003
      ASC 2,NOT
AND   OCT 26003
      ASC 2,AND
OR    OCT 25002
      ASC 1,OR
GTE   OCT 30002
      ASC 1,>=
LTE   OCT 31002
      ASC 1,<=
AUNEQ OCT 17002     ALTERNATE UNEQUAL SIGN
      ASC 1,<>
*
TAB   OCT 1003
      ASC 2,TAB
SIN   OCT 2003      THIS SECTION HAS THE PRE-DEFINED
      ASC 2,SIN
COS   OCT 3003      FUNCTIONS.  HERE BITS 13-9 ARE
      ASC 2,COS
TAN   OCT 4003      THE IDENTIFYING NUMBER OF THE
      ASC 2,TAN
ATN   OCT 5003      FUNCTION.
      ASC 2,ATN
EXPN  OCT 6003
      ASC 2,EXP
LOG   OCT 7003
      ASC 2,LOG
ABS   OCT 10003
      ASC 2,ABS
SQR   OCT 11003
      ASC 2,SQR
INT   OCT 12003
      ASC 2,INT
RND   OCT 13003
      ASC 2,RND
SGN   OCT 14003
      ASC 2,SGN
ZER   OCT 15003     MATRIX FUNCTIONS
      ASC 2,ZER
CON   OCT 16003
      ASC 2,CON
IDN   OCT 17003
      ASC 2,IDN
INV   OCT 20003
      ASC 2,INV
TRN   OCT 21003
      ASC 2,TRN
**
***  TABLE SEARCH FOR MULTICHARACTER SYMBOLS  **
**
TBSRH NOP
      STA TABLE     STORE TABLE ADDRESS
      STB LNGTH     STORE -(NUMBER OF ENTRIES)
      LDA BADDR     SAVE
      STA TEMP3       INPUT
      LDA CCNT          BUFFER
      STA TEMP4           STATUS
      LDA SBPTR     INITIALIZE END-OF-SYMBOL
      STA SMEND       POINTER
      CLA,INA       COUNT FIRST CHARACTER OF
      STA SLENG       SYMBOL
      LDA SBPTR,I   FETCH PARTIAL SYMBOL
      AND B177      TWO
      CPA SBPTR,I     CHARACTERS?
      RSS           NO
      JMP TSR10     YES
      ALF,ALF       LEFT-JUSTIFY
      IOR .32         FIRST CHARACTER AND
      STA SBPTR,I       APPEND BLANK
TSRC1 JSB GETCR     FETCH NEXT CHARACTER
      JMP TSRC9     END-OF-STATEMENT
      LDB SLENG     CHECK FOR
      CPB .7          IMPOSSIBLE LENGTH
      JMP TSRC9
      SLB           EVEN-NUMBERED CHARACTER?
      JMP TSRC2     YES
      ISZ SMEND     NO, FETCH FRESH WORD,
      ALF,ALF         LEFT-JUSTIFY CHARACTER,
      IOR .32           APPEND BLANK,
      STA SMEND,I         AND STORE
      JMP TSR10
TSRC2 ADA M32       DELETE BLANK,
      ADA SMEND,I     FILL SECOND CHARACTER,
      STA SMEND,I       AND STORE
TSR10 ISZ SLENG     COUNT IT
      LDB LNGTH     INITIALIZE TABLE LENGTH
      STB COUNT       COUNTER
      LDA TABLE
TSRC3 STA TBLPT     SET TABLE POINTER
      LDA TBLPT,I   EXTRACT SYMBOL LENGTH
      AND .7          FROM TABLE AND COMPARE
      CPA SLENG         WITH CURRENT SYMBOL
      JMP TSRC5     EQUAL?
TSRC4 ADA .3        DIFFERENT,
      ARS             UPDATE
      ADA TBLPT         TABLE POINTER
      ISZ COUNT     MORE ENTRIES?
      JMP TSRC3     YES
      JMP TSRC1     NO
TSRC5 LDB TBLPT     SET POINTER TO
      STB TSPTR       TABLE SYMBOL
      LDB SBPTR     SET (B) TO INPUT
      JMP TSRC7       SYMBOL POINTER
TSRC6 CPB SMEND     ALL OF SYMBOL CONSIDERED?
      JMP TSRC8     YES, MATCH OCCURRED
      INB           NO, INCREMENT
TSRC7 ISZ TSPTR       SYMBOL POINTERS
      LDA TSPTR,I   FETCH WORD FROM TABLE
      CPA 1,I       MATCH WITH INPUT SYMBOL?
      JMP TSRC6     YES
      LDA SLENG     NO, WRONG
      JMP TSRC4       SYMBOL
TSRC8 LDA TBLPT,I   EXTRACT
      AND OPMSK       SYMBOL CODE
      STA SBPTR,I
      ISZ TBSRH         AND RETURN VIA
      JMP TBSRH,I         'SUCCESS' EXIT
TSRC9 LDA TEMP3     RESTORE
      STA BADDR       INPUT
      LDA TEMP4         BUFFER
      STA CCNT            STATUS
      JMP TBSRH,I   'FAILURE' EXIT
**
***  FETCH AND RECORD PROGRAM INTEGER  **
**
PRGIN NOP
      LDA SBPTR,I   SET
      IOR FLGBT       'INTEGER
      ADA .3             FOLLOWS'
      STA SBPTR,I          OPERAND
      LDA PRGIN,I   GIVE ADDRESS
      STA PRGI1       TO INTCK
      ISZ SBPTR
      JSB GETCR
SYE25 JSB ERROR
      JSB INTCK     FETCH
PRGI1 NOP
      ISZ PRGIN
      JMP PRGIN,I
**
***  BUILD AN INTEGER  **
**
INTCK NOP           CHARACTER IN (A)
      CLB           STORE
      STB INTGR       PARTIAL RESULT
INTC1 JSB DIGCK     DIGIT?
      JMP INTC2     NO
      CLO
      LDB INTGR     MULTIPLY
      ADB 1           PARTIAL
      ADB 1             RESULT
      ADB INTGR           BY
      ADB 1                 10
      ADB 0         ADD LATEST DIGIT
      SOC           OVERFLOW?
      JMP SYE25     YES
      STB INTGR     STORE PARTIAL RESULT
      JSB GETCR     NO, FETCH
      LDA .10         NEXT CHARACTER
      JMP INTC1
INTC2 LDB INTGR     ZERO
      SZB,RSS         INTEGER?
      JMP SYE25     YES
      STB SBPTR,I   NO, RECORD IT
      LDB INTCK,I   INTEGER
      LDB 1,I         TOO
      ADB INTGR         LARGE?
      SSB,RSS
      JMP SYE25     YES
      LDB INTGR     NO,
      ISZ SBPTR       RETURN WITH
      ISZ INTCK         INTEGER
      JMP INTCK,I         IN (B)
**
***  PROCESS CHARACTER STRING  **
**
CHRST NOP
      STA TEMP2     RECORD TERMINATOR CHARACTER
      LDA .10       DUMMY
      STA BLANK       DELETE CHARACTER
CHRS1 JSB GETCR
      JMP CHRS3     TO END-OF-STATEMENT EXIT
      CPA TEMP2     TERMINATOR CHARACTER?
      JMP CHRS2     YES
      IOR SBPTR,I   NO, FILL
      STA SBPTR,I     SECOND CHARACTER
      JSB GETCR
      JMP CHRS3     TO END-OF-STATEMENT EXIT
      CPA TEMP2     TERMINATOR CHARACTER?
      JMP CHRS2     YES
      ISZ SBPTR     NO, MOVE TO NEW WORD
      ALF,ALF         AND STORE
      STA SBPTR,I       FIRST CHARACTER
      JMP CHRS1
CHRS2 ISZ CHRST     SET (P+2) EXIT
CHRS3 ISZ SBPTR     MOVE TO NEXT BUFFER WORD
      LDA .32       RESTORE BLANK AS
      STA BLANK       DELETE CHARACTER
      JMP CHRST,I
      SKP
**
***  DELETE STATEMENT  **
**
DLSTM LDA SBUFA,I   LOAD SEQUENCE NUMBER
      JSB FNDPS     FIND STATEMENT TO BE DELETED
      JMP PEXMA,I   DOESN'T
      JMP PEXMA,I     EXIST
      CLA           ZERO WORD SKIP FOR DESTINATION
      INB           ADDRESS OF SOURCE WORD SKIP IN B
      JSB CLPRG     CLOSE UP PROGRAM
      JMP PEXMA,I   EXIT TO PHASE 1 WAIT
*
***                  ***
**  ACCEPT STATEMENT  **
***                  ***
*
ACTST LDA SBUFA     COMPUTE
      CMA,INA         LENGTH
      ADA SBPTR         OF STATEMENT
      STA TEMP,I          AND RECORD IT
      LDA SBUFA,I   LOAD SEQUENCE NUMBER
      JSB FNDPS     SEARCH ON SEQUENCE NUMBER
      JMP ACCS1     APPEND STATEMENT TO PROGRAM
      JMP ACCS4     INSERT STATEMENT IN PROGRAM
      INB           REPLACE STATEMENT IN PROGRAM
      LDA 1,I       COMPARE LENGTHS OF
      CMA,INA         STATEMENT BEING REPLACED
      ADA TEMP,I        AND STATEMENT
      SZA,RSS             REPLACING IT
      JMP ACCS2     EQUAL
      SSA,RSS
      JMP ACCS4+1   SHORTER
      LDA TEMP,I    LONGER,
      JSB CLPRG       CLOSE UP PROGRAM
      JMP ACCS2
ACCS1 LDA TEMP,I    LOAD PROGRAM SPACE REQUIREMENT
      JSB OVCHK     SUFFICIENT PROGRAM SPACE LEFT?
ACCS2 CLB           YES, SET COUNTER TO ZERO
      LDA SBUFA     INITIALIZE
      STA TEMP2       SOURCE ADDRESS
ACCS3 LDA TEMP2,I   TRANSFER WORD FROM
      STA TEMP3,I     S-BUFFER TO PROGRAM SPACE
      ISZ TEMP2     INCREMENT SOURCE AND
      ISZ TEMP3       DESTINATION ADDRESSES
      INB           BUMP COUNTER
      CPB TEMP,I    ENTIRE STATEMENT MOVED?
      JMP PEXMA,I   YES
      JMP ACCS3     NO
ACCS4 LDA TEMP,I    LOAD PROGRAM SPACE REQUIREMENT
      JSB OVCHK     SUFFICIENT PROGRAM SPACE LEFT?
      JSB MVTOH     MAKE
      JMP ACCS2       ROOM
      SKP
**
***  FIND SEQUENTIAL POSITION  **
**
FNDPS NOP
      STA TEMP3     SAVE SEQUENCE NUMBER
      LDB PBUFF     STARTING ADDRESS
FNDP1 CPB PBPTR     END OF PROGRAM?
      JMP FNDP4     YES, EXIT VIA (P+1)
      LDA 1,I       SUBTRACT PROGRAM
      CMA,INA         SEQUENCE NUMBER FROM
      ADA TEMP3       S-BUFFER SEQUENCE NUMBER
      SZA,RSS       EQUAL?
      JMP FNDP2     YES, SET EXIT TO (P+3)
      SSA           NO, P-SEQ NO > S-SEQ NO ?
      JMP FNDP3     YES, SET EXIT TO (P+2)
      LDA 1         POINT (A) TO
      INA             PROGRAM ADDRESS INCREMENT
      ADB 0,I       COMPUTE NEW ADDRESS
      JMP FNDP1
FNDP2 ISZ FNDPS
FNDP3 ISZ FNDPS
FNDP4 STB TEMP3     SAVE STATEMENT ADDRESS
      JMP FNDPS,I
**
***  DELETE SPACE IN PROGRAM  **
**
CLPRG NOP           REFERENCE LOCATION IN TEMP3
      ADA TEMP3     SKIP (A) LOCATIONS FROM TEMP3
      STA TEMP4       AND SAVE DESTINATION ADDRESS
      LDB 1,I       SKIP TO END OF STATEMENT BEING
      ADB TEMP3       DELETED, SOURCE ADDRESS IN (B)
CLPR1 CPB PBPTR     ALL OF PROGRAM MOVED?
      JMP CLPR2     YES
      LDA 1,I       NO, MOVE WORD FROM SOURCE TO
      STA TEMP4,I     DESTINATION ADDRESS
      ISZ TEMP4     INCREMENT DESTINATION ADDRESS
      INB           INCREMENT SOURCE ADDRESS
      JMP CLPR1
CLPR2 LDA TEMP4     SET END-OF-PROGRAM
      STA PBPTR       POINTER
      JMP CLPRG,I
**
***  CHECK FOR PROGRAM SPACE OVERFLOW  **
**
OVCHK NOP           NEW WORD REQUIREMENT IN (A)
      LDB PBPTR     SET SOURCE ADDRESS
      STB TEMP2       FOR PROGRAM RELOCATION
      ADB 0         SET DESTINATION
      STB TEMP4       ADDRESS
      CMB,INB       ENOUGH
      ADB LWBM        FREE
      SSB               SPACE?
      JMP FSCEF,I   NO, PROGRAM SPACE OVERFLOW
      LDB TEMP4     YES, RELOCATE FREE
      STB PBPTR       PROGRAM SPACE POINTER
      JMP OVCHK,I
      HED LIST PROGRAM
*
* **********************
****                  ***
***  LIST THE PROGRAM  ***
****                  ***
* **********************
*
LIST  LDB PBUFF     INITIALIZE TO FIRST
      STB TEMPS       STATEMENT OF PROGRAM
      JSB GETCR     SEQUENCE NUMBER GIVEN?
      JMP LIST0     NO
      LDB .BUFA     YES, SET FOR
      STB SBPTR       SEQUENCE NUMBER
      JSB INCHK,I   FETCH
      DEF MAXSN       IT
      LDA .BUFA,I   LOAD SEQUENCE NUMBER
      JSB FNDPS     FIND INTIAL STATEMENT
      JMP RDYDA,I
      NOP           SAVE
      STB TEMPS       ADDRESS
LIST0 CLB           HIGH-SPEED
      CPB TFLAG       PUNCH?
      JMP LIST1     NO
      LDA B133      YES, EMIT
      JSB LISTR,I     LEADER
LIST1 LDB TEMPS     MORE
      CPB PBPTR       PROGRAM?
      JMP LIS13     NO
      CCA           INITIALIZE
      ADA SBUFA       OUTPUT BUFFER
      STA BADDR         POINTER
      CLA           INITIALIZE
      STA CCNT        CHARACTER COUNT
      LDA TEMPS,I   OUTPUT
      JSB OUTIN       SEQUENCE NUMBER
      LDA BLANK     OUTPUT
      JSB OUTCR       BLANK
      ISZ TEMPS     FETCH
      LDA TEMPS,I     STATEMENT LENGTH
      CMA,INA       SET
      INA             WORD
      STA SLWST         COUNTER
LIST3 ISZ TEMPS     MORE
      ISZ SLWST       STATEMENT?
      JMP LIST4     YES
LIST2 LDB SBUFA     OUTPUT
      LDA CCNT
      JSB LISTR,I     STATEMENT
      JMP LIST1
LIST4 LDA TEMPS,I
      AND OPMSK
      SZA,RSS       NULL OPERATOR?
      JMP LIST5     YES
      STA TEMP2     NO, SAVE OPERATOR
      ALF,ALF       SINGLE
      ARS
      LDB 0           CHARACTER
      ADA M21
      SSA,RSS           OPERATOR?
      JMP LIS12     NO
      BLS           YES
      INB           LOAD
      ADB FOPBS       SYMBOL'S
      LDA 1,I           ASCII WORD
      ALF,ALF       ADJUST
      AND MSK0      CHARACTER
      CPA .34       * ?
      JMP LIS14     YES
      JSB OUTCR     NO
LIST5 LDA TEMPS,I
      AND OPDMK     SAVE
      STA TEMP3       OPERAND
      AND TYPFL     EXTRACT OPERAND TYPE
      STA LFLAG     SET LFLAG FALSE
      SSA           FLAG BIT SET?
      JMP LIST9     YES
      SZA,RSS       NO, NULL OPERAND?
      JMP LIST3     YES
      CPA .15       FUNCTION?
      JMP LIST8     YES
LIST6 ADA M5
      SSA           LETTER-DIGIT COMBINATION?
      JMP LIST7     NO
      CCA           YES, SET
      STA LFLAG       LFLAG FALSE
LIST7 LDA TEMP3
      ALF,ALF       RESTORE AND
      ALF
      AND B177        OUTPUT
      ADA B100
      JSB OUTCR         LETTER
      ISZ LFLAG     DIGIT FOLLOWS?
      JMP LIST3     NO
      LDA TEMP3     YES
      AND .15       RESTORE
      ADA .43         DIGIT
      JSB OUTCR     OUTPUT DIGIT
      JMP LIST3
LIST8 LDA F         OUTPUT
      JSB OUTCR       'F'
      LDA N         OUTPUT
      JSB OUTCR       'N'
      JMP LIST7
LIST9 XOR FLGBT
      CLE,SZA       NUMBER?
      JMP LIS10     NO
      ISZ TEMPS     YES
      STA SIGN      SET SIGN FLAG FALSE
      LDA TEMPS,I
      ISZ TEMPS
      LDB TEMPS,I
      ISZ SLWST
      ISZ SLWST
      SSA           NEGATIVE NUMBER?
      CCE           YES, SET SIGN FLAG TRUE
      JSB NUMOA,I
      NOP
      JMP LIST3
LIS10 CPA .3        INTEGER?
      JMP LIS11     YES
      CPA .15       NO, FUNCTION?
      RSS           YES
      JMP LIST6     NO, MUST BE A PARAMETER
      LDA TEMP3     COMPUTE
      ALF,RAL         PRINT
      AND OPMSK         TABLE
      STA TEMP2           CODE
      LDB ATAB      OUTPUT
      JSB MCOUT       FUNCTION NAME
      JMP LIST3
LIS11 ISZ TEMPS     OUTPUT
      ISZ SLWST
      LDA TEMPS,I     INTEGER
      JSB OUTIN
      JMP LIST3         OPERAND
LIS12 LDA BLANK     OUTPUT
      JSB OUTCR       BLANK
      LDB STTYP     OUTPUT
      JSB MCOUT       OPERATOR
      LDA REMOP     WAS IT
      CPA TEMP2       A REM?
      JMP OUTS1     YES, OUTPUT REMARK
      LDA BLANK     NO, OUTPUT
      JMP LIST5-1     A BLANK
LIS13 CLB           HIGH-SPEED
      CPB TFLAG       PUNCH?
      JMP RDYDA,I   NO
      LDA B133      YES, EMIT
      JSB LISTR,I     TRAILER
      JMP RDYDA,I
LIS14 JSB OUTCR     OUTPUT *
      JSB OUTST     OUTPUT QUOTE STRING
      LDA .34       OUTPUT
      JMP LIST5-1
*                       *
**  OUTPUT AN INTEGER  **
*                       *
OUTIN NOP           INTEGER IN (A)
      LDB M4        SET
      STB DIGCT       DIGIT COUNTER
      LDB LDVSR     SET DIVISOR
      STB DIVSR       ADDRESS
      CLB           SET LEADING
      STB LDZRO       ZERO FLAG
OUTI1 LDB DIVSR,I   NEGATE
      CMB,INB         AND STORE
      STB MIND          DIVISOR
      CCB           SET QUOTIENT
      INB             TO ZERO
      ADA MIND      SUBTRACT DIVISOR FROM INTEGER
      SSA,RSS       NEGATIVE RESULT?
      JMP *-3       NO, INCREMENT QUOTIENT
      ADA DIVSR,I   YES, RECOVER REMAINDER
      STA MCOUT       AND SAVE IT
      LDA 1
      SZA           ZERO?
      JMP OUTI2     NO
      CPA LDZRO     YES, LEADING ZERO?
      JMP OUTI3     YES
OUTI2 ADA .48       NO, COMPUTE ASCII FOR DIGIT
      STA LDZRO     SET 'ZEROES SIGNIFICANT'
      JSB OUTCR     OUTPUT DIGIT
OUTI3 LDA MCOUT     RETRIEVE REMAINDER
      ISZ DIVSR     SET FOR NEXT DIVISOR
      ISZ DIGCT     DIVISION NECESSARY?
      JMP OUTI1     YES
      ADA .48       NO, COMPUTE ASCII FOR LAST
      JSB OUTCR       DIGIT AND OUTPUT IT
      JMP OUTIN,I
*                     *
**  OUTPUT A STRING  **
*                     *
OUTST NOP           * ENTRY POINT
OUTS1 LDA TEMPS,I   REM ENTRY POINT
      AND B177      OUTPUT SECOND CHARACTER
      SZA             OF WORD IF
      JSB OUTCR         NOT NULL
      ISZ TEMPS     BUMP POINTER
      ISZ SLWST     REM COMPLETED?
      RSS           NO
      JMP LIST2     YES
      LDA TEMPS,I   EXTRACT
      ALF,ALF         FIRST CHARACTER
      AND B177          OF WORD
      CPA .2        EXIT
      JMP OUTST,I     IF A
      CPA .3            CLOSING
      JMP OUTST,I         QUOTE
      JSB OUTCR     OUTPUT
      JMP OUTS1       CHARACTER
*                                  *
**  LIST A MULTICHARACTER SYMBOL  **
*                                  *
MCOUT NOP
MCOU1 LDA 1,I       LOAD INFORMATION WORD
      AND OPMSK     COMPARE WITH
      CPA TEMP2       OPERATOR CODE
      JMP MCOU2     EQUAL
      LDA 1,I       UNEQUAL,
      AND .7          COMPUTE
      ADA .3            ENTRY
      ARS                 LENGTH
      ADB 0         COMPUTE ADDRESS OF NEXT ENTRY
      JMP MCOU1
MCOU2 LDA 1,I       COMPUTE
      AND .7          ENTRY
      CMA,INA           LENGTH
      STA DIGCT           AND SAVE IT
      CLE,INB       SET FOR FIRST CHARACTER
      STB TEMP3     SAVE SYMBOL ADDRESS
MCOU3 LDA TEMP3,I   LOAD WORD
      SEZ,RSS       FIRST CHARACTER?
      ALF,ALF       YES, POSITION IT
      AND B177      EXTRACT CHARACTER
      JSB OUTCR     OUTPUT IT
      SEZ,CME       SET FOR NEXT CHARACTER
      ISZ TEMP3     MOVE TO NEXT WORD OF SYMBOL
      ISZ DIGCT     MORE CHARACTERS?
      JMP MCOU3     YES
      JMP MCOUT,I
*
*
LDVSR DEF *+1
      DEC 10000
      DEC 1000
      DEC 100
      DEC 10
*
*
SFLAG EQU ARRYS
TABLE EQU PRGIN
LNGTH EQU TEMPS+8
SMEND EQU INTCK
SLENG EQU OVCHK
TBLPT EQU FNDPS
TSPTR EQU CLPRG
INTGR EQU OVCHK
LFLAG EQU PRGIN
DIVSR EQU INTCK
LDZRO EQU OVCHK
MIND  EQU FNDPS
      HED PRE-EXECUTION PROCESSING
*               ***********************
*               PHASE 2 OF THE COMPILER
*               ***********************
*
*               THIS PHASE HAS THE FOLLOWING 3 FUNCTIONS:
*               1. SYMBOL TABLE CONSTRUCTION
*               2. FOR LOOP CHECKING
*               3. ARRAY STORAGE ALLOCATION
*
MFASE LDA PBPTR     NULL
      CPA PBUFF       PROGRAM?
      JMP RDYDA,I   YES
      STA FCORE     NO, SET FOR-TABLE POINTER
      LDA FWAM
      STA COML     INITIALIZE COMMON POINTER
      LDA SYMTA
      STA SYMTF    INITIALIZE SYMBOL TABLE POINTER
      LDA PBUFF
      STA MPTR     INITIALIZE PROGRAM POINTER
MLOP1 LDB MPTR,I
      STB .LNUM    SET LINE NUMBER
      LDB MPTR
      ISZ MPTR
      ADB MPTR,I   COMPUTE LOCATION OF NEXT
      STB MNPTR    STATEMENT AND STORE THIS
      ISZ MPTR
      LDA MPTR,I   FETCH THE FIRST WORD IN THE
MLO10 ARS           STATEMENT AND SAVE
      ALF,ALF       THE STATEMENT TYPE
      AND .63
      STA TYPE
      CPA .46       MAT STATEMENT?
      JMP MLO12     YES
      CPA .30       NO, REM STATEMENT?
      STB MPTR      YES, SET TO SKIP IT
      CPA .43       NO, PRINT STATEMENT?
      STB MPTR      YES, SET TO SKIP IT
      CCA           NO, SET
      STA MWDNO       'FIRST VARIABLE'
      JMP MLOP2+1       FLAG
*
MLO12 LDA MPTR      SEEK
      INA             SUBSIDIARY
      LDA 0,I           STATEMENT
      JMP MLO10           TYPE
*
MLO13 AND MSK1      YES, ISOLATE OPERAND
      LDB MPTR     INDEX THE PROGRAM POINTER BY
      SZA,RSS      AN AMOUNT APPROPRIATE TO THE
      ADB .2       OPERAND. THE FOLLOWING APPLIES
      CPA .3       OPERAND = 0  ADD 2 TO POINTER
      INB          OPERAND =3  ADD 1 TO POINTER
      STB MPTR
*
MLOP2 ISZ MPTR      INCREMENT WORD-OF-STATEMENT PTR
      LDA MPTR      STATEMENT
      CPA MNPTR       EXHAUSTED?
      JMP MLOP5     YES
      LDA MPTR,I    NO
      SSA           'CONSTANT' OPERAND?
      JMP MLO13     YES
      AND MSK1      NO
      SZA,RSS       NULL OPERAND?
      JMP MLOP2     YES
      STA MBOX1     NO, SAVE IT
      AND .15       PROGRAMMER-DEFINED
      CPA .15         FUNCTION?
      JMP MLOP6     YES
      ADA M4        NO
      SSA           ARRAY VARIABLE?
      JMP MLOP7     YES
      LDA MBOX1     NO, SIMPLE VARIABLE
      JSB SSYMA,I   ALREADY IN
      SSB,RSS         SYMBOL TABLE?
      JMP MLOP3     YES
      LDA MNEG      NO
      LDB MNEG+1    ENTER
      STA MBOX1+1     IT WITH
      STB MBOX1+2       'UNDEFINED'
      LDA M3              VALUE
      JSB ESYMT
MLOP3 LDB TYPE
      LDA MBOX1
      CPB .34       NEXT STATEMENT?
      JMP MLOP4     YES
      CPB .33       NO, FOR STATEMENT?
      ISZ MWDNO     YES, FIRST VARIABLE?
      JMP MLOP2     NO
      ISZ FCORE     DEMAND
      LDB FCORE       SPACE
      CPB SYMTF         FOR NEW
      JMP MER8-1          ENTRY
      STA FCORE,I   SAVE VARIABLE NAME
      JMP MLOP2
*
MLOP4 LDB FCORE     FOR-TABLE
      CPB PBPTR       EMPTY?
      JSB ERROR     YES
MER3  CPA FCORE,I   NO, MATCH LATEST ENTRY?
      RSS           YES
      JMP MER3-1    NO
      ADB M1        REMOVE
      STB FCORE       MATCHED
      JMP MLOP2         ENTRY
*
MLOP5 CPA PBPTR     PROGRAM EXHAUSTED?
      RSS           YES
      JMP MLOP1     NO
      LDA TYPE      YES
      CPA .37       END STATEMENT?
      JMP M1LOP     YES
      JSB ERROR     NO
MLOP6 LDA MPTR,I    ISOLATE
      AND OPMSK       PRECEDING OPERATOR
      CPA DEFOP     'DEF' ?
      RSS           YES
      JMP MLOP2    NO GO TO PROCESS NEXT WORD
      LDA MBOX1    SEARCH SYMBOL TABLE FOR
      JSB SSYMA,I     THE FUNCTION
      SSB,RSS
      JSB ERROR    FOUND. ERROR MULTIPLY DEFINED
MER4  LDA MPTR
      ADA .3       ENTER THE FUNCTION INTO THE
      STA MBOX1+1  SYMBOL TABLE TOGETHER WITH
      LDA M2       ITS ENTRY POINT IN THE SOURCE
      JSB ESYMT    CODE
      JMP MLOP2    GO TO PROCESS THE NEXT WORD
*
MLOP7 STA 1
      LDA TYPE
      CPA .27       DIM STATEMENT?
      JMP MLOP8     YES
      CPA .28       NO, COM STATEMENT?
      JMP MLOP8     YES
      JSB MSYMT     NO, LOOK FOR IT IN SYMBOL TABLE
      JMP MLOP2     FOUND
      CLA           NOT THERE
      STA MBOX1+1   ENTER IT WITH
      STA MBOX1+2     DIMENSIONS AND
      STA MBOX1+3       DIMENSIONALITY
      JMP MLOP0           UNDEFINED
*
MLOP8 ISZ MPTR     PROCESS COM OR DIM STMT
      ISZ MPTR
      LDA MPTR,I   PICK UP FIRST DIMENSION
      ALF,ALF      SHIFT TO M. S. PART OF WORD
      CPB M3       IS THIS A SINGLE DIMENSION ARRAY
      JMP *+5      YES, JUMP
      ISZ MPTR     NO, INDEX POINTER TO THE LOC.
      ISZ MPTR     OF SECOND DIMENSION AND PACK
      IOR MPTR,I   INTO A WITH THE FIRST DIMENSION
      RSS
      IOR .1
      STA MBOX1+2  SET UP TO STORE PACKED
      STA MBOX1+3  DIMENSIONS IN FORMAL AND ACTUAL
      CLA           SLOTS AND UNDEFINED FLAG IN
      STA MBOX1+1  STORAGE ALLOCATION SLOT
      JSB MSYMT     IN SYMBOL TABLE?
      JMP MLOP9     NO
      LDA TYPE      YES
      CPA .28
      RSS          IS STMT A COM
      JMP MLOP0    NO, JUMP
      LDA MBOX1+2  YES PICK UP PACKED DIMENSIONS
      JSB MDIM     COMPUTE STORAGE REQUIRED
      LDB COML     POINTER TO NEXT FREE LOC IN COM
      STB MBOX1+1  STORE IN STORAGE ALLOCATION SLOT
      ADB 0        UPDATE POINTER BY THE AMOUNT OF
      STB COML     STORAGE ASSIGNED.
MLOP0 LDA M4       ENTER THE FOUR WORD ENTRY
      JSB ESYMT    PREVIOUSLY SET UP IN MBOX1 INTO
      JMP MLOP2    SYMBOL TABLE AND CONTINUE
*
MLOP9 ADB .2        CHECK THE FORMAL DIMENSIONS
      LDA 1,I      LOCATION TO SEE IF THE DIMENSION
      SZA           IS ALREADY DEFINED
      JSB ERROR    ERROR, DOUBLY DIMENSIONED
MER5  LDA TYPE
      CPA .28       COM STMT?
      JMP ESYN3,I   ERROB MISPLACED COM STMT
      LDA MBOX1+2
      STA 1,I      STORE THESE DIMENSIONS IN FORMAL
      INB          AND ACTUAL SLOTS IN SYMBOL TABLE
      STA 1,I      ENTRY
      JMP MLOP2    GO TO PROCESS NEXT WORD
*
*                  THE SECTION WHICH FOLLOWS CHECKS
*                  THAT ALL FOR LOOPS HAVE BEEN
*                  TERMINATED, ASSIGNS THE STANDARD
*                  DIMENSIONS TO UNDIMENSIONED ARRAYS
*                  AND MAKES STORAGE ASSIGNMENTS FOR
*                  ALL ARRAYS WHICH DO NOT APPEAR IN
*                  A COM STMT
*
M1LOP LDA FCORE     ALL FORS
      CPA PBPTR       MATCHED?
      RSS           YES
      JSB ERROR     NO
MER6  LDB SYMTF
*
M2LOP CPB SYMTA     MORE SYMBOLS?
      JMP M4LOP     NO
      LDA 1,I       YES
      AND .15       ACCONT FOR
      ADB .2          A FUNCTION
      CPA .15       IS IT?
      JMP M2LOP     YES
      INB           NO, ACCOUNT FOR
      ADA M4          SIMPLE VARIABLE
      SSA,INA,RSS   IS IT?
      JMP M2LOP     YES
      SZA,RSS       NO, # OF SUBSCRIPTS KNOWN?
      JSB ERROR     NO
MER10 INA           SAVE
      STA MBOX1+1     FLAG
      STB MBOX1     SAVE POINTER
      LDA 1,I       DEFINED
      SZA             ARRAY?
      JMP M3LOP     YES
      LDA STDIM     NO, LOAD
      ISZ MBOX1+1     APPROPRIATE
      ADA .9            STANDARD DIMENSIONS
      STA 1,I       RECORD AS
      ADB M1          FORMAL AND ACTUAL
      STA 1,I           DIMENSIONS
M3LOP JSB MDIM      SAVE STORAGE
      STA MBOX1+1     REQUIREMENT
      LDB MBOX1     LOAD
      ADB M2          ADDRESS OF
      LDA 1,I           ELEMENT SPACE
      SZA           DEFINED IN COM?
      JMP MER7      YES
      LDA FCORE     NO, USE CURRENT
      STA 1,I         FREE-CORE ADDRESS
      ADA MBOX1+1   UPDATE FREE-CORE
      STA FCORE       ADDRESS
      CMA,INA       OUT
      ADA SYMTF       OF
      SSA               SPACE?
      JSB ERROR     YES
MER7  ADB .3        NO, ADVANCE POINTER
      JMP M2LOP       TO NEXT ENTRY
*
M4LOP LDB PBPTR     INITIALIZE ALL
      CPB FCORE       ARRAY ELEMENTS
      JMP FASE3,I       TO 'UNDEFINED'
      LDA MNEG
      STA 1,I
      INB
      LDA MNEG+1
      STA 1,I
      INB
      JMP M4LOP+1
*
STDIM OCT 5001
      SKP
*               *****************************
*               ENTER SYMBOL TABLE SUBROUTINE
*               *****************************
*
*               TRANSFER -(A) WORDS FROM THE BUFFER ADDRESSED
*               BY MBUF TO THE TOP OF THE SYMBOL TABLE.
*
ESYMT NOP
      STA MBIN1    SAVE NEGATIVE OF LENGTH OF ENTRY
      ADA SYMTF
      STA SYMTF    MOVE SYMBOL TABLE START LOCATOR
      STA MBIN2    UP BY THE LENGTH OF ENTRY
      CMA,INA      CHECK THAT THE SYMBOL TABLE AND
      ADA FCORE     FOR TABLE DO NOT OVERLAP
      SSA,RSS
      JSB ERROR    OVERLAP ERROR
MER8  LDB MBUF     POINTER TO REQD ENTRY
      LDA 1,I      TRANSFER ENTRY TO THE SYMBOL
      STA MBIN2,I  TABLE
      INB
      ISZ MBIN2
      ISZ MBIN1
      JMP MER8+1
      JMP ESYMT,I  RETURN
*
*          **********************************************
*          SUBROUTINE TO SEARCH SYMBOL TABLE FOR AN ARRAY
*          **********************************************
MSYMT NOP          B GIVES ARRAY TYPE -3 = 1 DIM,
      STB MBIN1    -2 = 2DIM, -1 = UNDIMENSIONED
      LDA MBOX1    LOAD IDENTIFIER
      JSB SSYMA,I   SEARCH SYMBOL TABLE
      SSB,RSS
      JMP MSYMT,I  FOUND, RETURN
      ISZ MBIN1    IF ARRAY UNDIMENSIONED
      RSS
      JMP MSYM     JUMP TO NOT FOUND EXIT
      ISZ MBIN1    SET UP TO CHECK THAT ARRAY DOES
      ADA .2       NOT APPEAR IN THE TABLE WITH
      ADA M1       DIFFERENT DIMENSIONS. CHANGE
      JSB SSYMA,I   TYPE 2 TO 1 8 TYPE 1 TO  2 AND
      SSB,RSS      SEARCH AGAIN
      JSB ERROR    FOUND, INCONSISTENT DIMENSIONS
MSYM  ISZ MSYMT    NOT FOUND, INCREMENT RETURN
      JMP MSYMT,I  ADDRESS AND RETURN
*
*
MBUF  DEF TEMPS
MBOX1 EQU TEMPS
MBIN1 EQU SLWST
MBIN2 EQU RSCHK
MPTR  EQU SBPTR
MNPTR EQU OPCHK
COML  EQU TEMPS+9
MWDNO EQU TEMPS+10
DIGCT EQU MSYMT
      HED EXECUTE THE PROGRAM
*
***                    ***
**  EVALUATE A FORMULA  **
***                    ***
*
FORMX NOP           FORMULA BEGINS IN (TEMPS)
      CLB           INITIALIZE OPERATOR
      JSB SLWST       STACK
FORM1 LDA TEMPS,I   FETCH OPERAND
      ISZ TEMPS     SET FOR NEXT WORD OF FORMULA
      AND OPDMK     EXTRACT OPERAND
      STA TEMPS+6     AND SAVE IT
      SZA,RSS       NULL OPERAND?
      JMP FORM2     YES
      JSB BHSTP     SET STACK FOR OPERAND ADDRESS
      SSA           FLAG BIT SET?
      JMP FORM4     YES
      JSB SSYMA,I   FETCH OPERAND ADDRESS
      INB,SZB,RSS   EXISTANT?
      JMP E8M1A,I   NO
      AND .15       YES
      CPA .15         FUNCTION?
      JMP FORM6     YES
      STB HSTPT,I   NO, STACK OPERAND ADDRESS
FORM2 LDA TEMPS,I   FETCH
      AND OPMSK       OPERATOR
      ALF,ALF       POSITION IT
      LDB 0         LOAD ADDRESS OF
      ADB FOPBS       OPERATOR'S INFORMATION WORD
      ADA M8        NON-FORMULA
      SSA             OPERATOR?
      CLB           YES
      ADA D53       NO, NON-FORMULA
      SSA,RSS         OPERATOR?
      CLB           YES
      CLA           NO
      LDA 1,I       LOAD INFORMATION WORD
      AND MSK1      SAVE
      STA TEMPS+7     PRECEDENCE
      XOR 1,I       SAVE
      ARS
      STA TEMPS+6     IDENTIFICATION
      JMP FOR11
FORM0 STA TSTPT,I   STACK HIGH WORD
      LDA TSTPT     STACK OPERAND
      STA HSTPT,I     ADDRESS
      INA           STORE
      STB 0,I         LOW WORD
FOR11 LDA LSTPT,I   DOES OPERATOR
      AND MSK0        ON TOP OF
      CMA               OPERATOR STACK
      ADA TEMPS+7         HAVE HIGHER
      SSA                   PRECEDENCE?
      JMP FORM9     YES, EXECUTE IT
      RSS           NO
FOR10 ISZ LSTPT
      LDB TEMPS+7   RETRIEVE PRECEDENCE
      ADB M15       NO, LEFT PARENTHESIS
      SSB             OR LEFT BRACKET?
      ADB .15       NO, RESTORE PRECEDENCE
      ADB TEMPS+6   COMBINE IDENTIFICATION
      JSB SLWST       WITH PRECEDENCE AND STACK
      JMP FORM1
FORM4 CPA FLGBT     CONSTANT?
      JMP FORM5     YES
      AND .15       NO, PRE-DEFINED
      CPA .15       FUNCTION
      JMP FORM7     YES
      LDB TEMPS+9   NO, MUST BE A
      JMP FORM2-1     PARAMETER
FORM5 LDB TEMPS     LOAD CONSTANT ADDRESS
      ISZ TEMPS     MOVE POINTER TO
      ISZ TEMPS       NEXT CODE WORD
      JMP FORM2-1
FORM6 STB TEMPS+6   SAVE SYMBOL TABLE POINTER
      LDB TSTPT     SAVE CURRENT POINTER
      JSB SLWST       TO TEMPORARY STACK
      LDB TEMPS+6,I
      JSB SLWST     SAVE FUNCTION ADDRESS
      LDA FORMX     SAVE CURRENT
      STA HSTPT,I     FORMX RETURN ADDRESS
      JSB FORMX     EVALUATE THE PARAMETER
      ISZ TEMPS     UPDATE FORMULA POINTER
      ISZ TEMPS       PAST RIGHT PARENTHESIS
      LDA TEMPS     SWITCH
      LDB LSTPT,I     FORMULA POINTER
      STB TEMPS         TO FUNCTION'S
      STA LSTPT,I         FORMULA
      LDB TEMPS+9   SET
      LDA HSTPT,I     PARAMETER POINTER
      ISZ LSTPT         TO NEW PARAMETER,
      ISZ HSTPT           SAVING PREVIOUS
      STB LSTPT,I           SETTING ON
      STA TEMPS+9             LOW-CORE STACK
      CPA TSTPT     PROTECT PARAMETER IF
      JSB RSCHK       ON TEMPORARY STACK
      JSB FORMX     EVALUATE FUNCTION
      LDA LSTPT,I   RESTORE OLD
      STA TEMPS+9     PARAMETER POINTER
      LDA LSTPT     CUT BACK
      ADA M3          LOW-CORE
      STA LSTPT         STACK
      INA           RESTORE ORIGINAL
      LDB 0,I         TEMPORARY STACK
      STB TSTPT         POINTER
      INA           RESTORE
      LDB 0,I         ORIGINAL
      STB TEMPS         FORMULA POINTER
      JSB STTOP     POP RESULT
      SKP
*
**  PRE-DEFINED FUNCTIONS RETURN HERE WITH RESULT
*
FOR12 STA TSTPT,I   STORE HIGH WORD
      LDA TSTPT
      INA           STORE
      STB 0,I         LOW WORD
      ISZ HSTPT
      LDB HSTPT,I   RESTORE FORMX
      STB FORMX       RETURN ADDRESS
      ADA M1        STACK ADDRESS
      STA HSTPT,I     OF RESULT
      JMP FORM2
FORM7 LDA TEMPS+6   COMPUTE
      ALF,ALF
      ALF             FUNCTION
      AND .31
      ADA PDFBS         ADDRESS
      LDB 0,I
      JSB SLWST     SAVE FUNCTION ADDRESS
      LDA FORMX     SAVE CURRENT
      STA HSTPT,I     FORMX RETURN ADDRESS
      JSB FORMX     EVALUATE THE PARAMETER
      ISZ TEMPS     UPDATE FORMULA POINTER
      ISZ TEMPS       PAST RIGHT PARENTHESIS
      LDB LSTPT,I   POP
      CCA             FUNCTION
      ADA LSTPT         ENTRY
      STA LSTPT           ADDRESS
      STB ESYMT     SAVE
      JSB STTOP     POP PARAMETER
      JMP ESYMT,I   EVALUATE FUNCTION
FORM9 LDA LSTPT,I   UNSTACK
      CCB             OPERATOR
      ADB LSTPT         INFORMATION
      STB LSTPT           WORD
      ALF,ALF       COMPUTE
      AND B177        SUBROUTINE
      ADA ARBAS         ADDRESS
      JMP 0,I       EXECUTE
**
***  EXECUTION BRANCH TABLE  **
**
XECTB DEF ELET      LET
      DEF XEC4      DIM
      DEF XEC4      COM
      DEF XEC4      DEF
      DEF XEC4      REM
      DEF EGOTO     GO TO
      DEF EIF       IF
      DEF EFOR      FOR
      DEF ENEXT     NEXT
      DEF EGOSB     GOSUB
      DEF ERTRN     RETURN
      DEF RDYDA,I   END
      DEF RDYDA,I   STOP
      DEF EWAIT     WAIT
      DEF ECALL     CALL
      DEF XEC4      DATA
      DEF EREAD     READ
      DEF EPRIN     PRINT
      DEF EINPT     INPUT
      DEF ERSTR     RESTORE
      DEF EMAT      MAT
*
* *************************
****                     ***
***  EXECUTE THE PROGRAM  ***
****                     ***
* *************************
*
**
***INITIALIZE FOR OUTPUT  **
**
XEC   CLA           SET COUNTER FOR
      STA TYPE        CHARACTERS OUTPUTTED
      STA XH        INITIALIZE
      INA             RANDOM
      STA XL            VARIABLE
**
***  INITIALIZE THE DATA POINTER  **
**
      CCA           SET
      STA DCCNT       'NO
      STA DSTRT         DATA'
      LDB PBUFF           CONDITION
      STB NXTDT
      LDA ADATA,I   SEARCH FOR FIRST
      JSB STSRH       DATA STATEMENT
      JMP XEC2      NONE FOUND
      STB DSTRT     SAVE STATEMENT LOCATION
      JSB SETDP     SET DATA POINTER
**
***  INITIALIZE STACK POINTERS  **
**
XEC2  LDB SYMTF     INITIALIZE
      STB HSTPT       POINTERS TO
      LDB FCORE          'HIGH CORE' STACK,
      STB TSTPT             'TEMPORARY'
      ADB .23                 STACK, AND
      STB LSTAK                 'LOW CORE'
      STB LSTPT                   STACK
      CMB           DO
      ADB HSTPT       STACKS
      SSB               MEET?
      JMP E1        YES
      LDB RMODE     NO, SHIFT TO
      STB LISTR       RUN MODE
      LDB PBUFF     BEGIN
      JMP XEC5        EXECUTION
      SKP
**
***  FIND NEXT STATEMENT TO BE EXECUTED  **
**
XEC4  LDA NXTST     NEXT STATEMENT NUMBER
      LDB PRADD     PROSPECTIVE ADDRESS
      CPA 1,I       DESIRED STATEMENT?
      JMP XEC6      YES
      LDB PBUFF     NO, FIND
      JSB FNDPA,I     STATEMENT
      NOP           NON-EXISTENT
      JSB ERROR       STATEMENT
XEC5  LDA 1,I       SAVE NEW
XEC6  STA .LNUM       SEQUENCE NUMBER
**
***  SET SUCCESSOR STATEMENT  **
**
      JSB FLWST
      AND OPMSK     EXTRACT STATEMENT TYPE
      ALF,ALF       POSITION
      RAR             IT
      ADA XECBR     COMPUTE EXECUTION ADDRESS
      JMP 0,I       BRANCH TO EXECUTION CODE
**
***  EVALUATE FORMULA AND RETURN RESULT  **
**
FETCH NOP
      JSB FORMA,I   EVALUATE FORMULA
      JSB OPCHK
      ISZ HSTPT     UNSTACK RESULT ADDRESS
      LDA 1,I       LOAD (A) WITH HIGH MANTISSA
      INB           LOAD LOW PART
      LDB 1,I         OF RESULT INTO (B)
      JMP FETCH,I   EXIT
**
***  SET POINTER TC START OF DATA STATEMENT  **
**
SETDP NOP           STATEMENT ADDRESS IN (B)
      INB           LOAD
      LDA 1,I         STATEMENT LENGTH
      CMA,INA       SET
      INA             DATA COUNTER
      STA DCCNT         TO 1-STATEMENT LENGTH
      INB           SET 'NEXT DATA' POINTER ONE
      STB NXTDT       WORD ABOVE FIRST CONSTANT
      JMP SETDP,I
**
***  SEARCH FOR STATEMENT OF GIVEN TYPE  **
**
STSRH NOP           TYPE IN (A), ADDRESS IN (B)
      AND OPMSK     EXTRACT
      STA TEMP4       STATEMENT TYPE
STSR1 LDA 1         EXTRACT
      ADA .2          PROGRAM
      LDA 0,I           STATEMENT
      AND OPMSK           TYPE
      CPA TEMP4     DESIRED TYPE?
      JMP STSR2     YES
      LDA 1         NO, FETCH
      INA             STATEMENT LENGTH
      ADB 0,I       COMPUTE NEW ADDRESS
      CPB PBPTR     PAST LAST STATEMENT?
      JMP STSRH,I   YES
      JMP STSR1     NO
STSR2 ISZ STSRH
      JMP STSRH,I
**
***  FETCH A DATA ITEM  **
**
FDATA NOP
FDAT1 ISZ DCCNT     MORE DATA?
      JMP FDAT2     YES
      LDA ADATA,I   NO, SEARCH
      LDB NXTDT       FOR NEXT
      JSB STSRH         DATA STATEMENT
      JSB ERROR     NONE FOUND
E4    JSB SETDP     INITIALIZE THE
      JMP FDAT1       DATA POINTERS
FDAT2 ISZ DCCNT     UPDATE
      ISZ DCCNT       POINTER
      ISZ NXTDT
      LDA NXTDT,I   LOAD
      ISZ NXTDT       DATA
      LDB NXTDT,I       ITEM
      ISZ NXTDT     UPDATE POINTER
      JMP FDATA,I
**
***  SET FOR FOLLOWING STATEMENT  **
**
FLWST NOP           (B) HOLDS PRESENT ADDRESS
      LDA 1         COMPUTE
      INA             ADDRESS
      LDA 0,I           OF
      ADA 1               NEXT
      STA PRADD             STATEMENT
      LDA 0,I       RECORD THE
      STA NXTST       SEQUENCE NUMBER
      ADB .2        FETCH
      STB TEMPS       FIRST WORD
      LDA 1,I           OF CURRENT
      JMP FLWST,I         STATEMENT
**
***  SEARCH STACK FOR GIVEN FOR-VARIABLE  **
**
FVSRH NOP
      LDA TEMPS,I   FETCH
      AND MSK1        FOR-VARIABLE
      STA EDELM     SAVE FOR-VARIABLE
      JSB SSYMA,I   FIND ADDRESS IN
      INB             SYMBOL TABLE
      LDA HSTPT     SAVE
      STA TEMP3       STACK TOP
FVSR1 CPA SYMTF     STACK BOTTOM?
      JMP FVSRH,I   YES, EXIT VIA (P+1)
      CPB 0,I       MATCHING FOR-VARIABLE?
      JMP FVSR2     YES
      ADA .6        NO, MOVE TO
      JMP FVSR1       NEXT STACK ENTRY
FVSR2 ISZ FVSRH     EXIT
      JMP FVSRH,I     VIA (P+2)
*
***             ***
**  EXECUTE LET  **
***             ***
*
ELET  JSB FORMA,I
      JMP XEC4
*
***               ***
**  EXECUTE GO TO  **
***               ***
*
EGOTO INB           LOAD SEQUENCE
      LDA 1,I         NUMBER
      JMP XEC4+1    FIND REFERENCED STATEMENT
*
***            ***
**  EXECUTE IF  **
***            ***
*
EIF   JSB FETCA,I   FETCH VALUE OF FORMULA
      SZA,RSS       RESULTANT TRUE?
      JMP XEC4      NO
      ISZ TEMPS     YES, BRANCH TO
      LDB TEMPS       FOLLOWING
      JMP EGOTO         SEQUENCE NUMBER
*
***             ***
**  EXECUTE FOR  **
***             ***
*
EFOR  JSB FVSRH     FOR-VARIABLE ALREADY IN STACK?
      JMP EFOR1     NO
      STA TEMP2     YES, SAVE SOURCE ADDRESS
      ADA .6        SAVE
      STA TEMP4       DESTINATION ADDRESS
      STB TEMP1     SAVE FOR-VARIABLE ADDRESS
      JSB MVTOH     COMPRESS STACK
      LDB TEMP1     RESTORE FOR-VARIABLE ADDRESS
      CLA           COMPUTE
      CLA,RSS       COMPUTE
EFOR1 LDA M6          NEW TOP OF
      ADA HSTPT         FOR-STACK
      STA HSTPT           POINTER
      STA TEMP1
      CMA,INA       STACK
      ADA LSTPT
      SSA,RSS         OVERFLOW?
      JMP E1        YES
      STB TEMP1,I   NO, RECORD FOR-VARIABLE ADDRESS
      JSB FORMA,I   INITIALIZE FOR-VARIABLE
      ISZ TEMPS
      ISZ TEMP1     SAVE
      LDA TEMP1       LIMIT
      STA ENEX2         ADDRESS
      JSB FETCA,I   FETCH
      STA TEMP1,I     AND
      ISZ TEMP1         STORE
      STB TEMP1,I         LIMIT
      ISZ TEMP1
      LDB M2        SET FOR STEP SIZE
      STB FDATA       SIGN CHECK
      LDA TEMPS,I   LOOK FOR
      SZA             FOLLOWING ' STEP'
      JMP EFOR2     FOUND
      LDA HONE      NOT FOUND,
      LDB .2          DEFAULT
      RSS               IS 1.0
EFOR2 JSB FETCA,I
      SSA           STEP SIZE NEGATIVE?
      ISZ FDATA     YES
      STA TEMP1,I   SAVE
      ISZ TEMP1       STEP
      STB TEMP1,I       SIZE
      ISZ TEMP1     SET POINTER
      LDA NXTST       TO STATEMENT
      STA TEMP1,I       FOLLOWING THE FOR
EFOR3 LDA ANEXT,I   FIND
      LDB PRADD       'NEXT'
      JSB STSRH         STATEMENT
      NOP
      JSB FLWST     FIND FOLLOWING STATEMENT
      AND MSK1      SAME
      CPA EDELM       FOR-VARIABLE?
      RSS           YES
      JMP EFOR3     NO
      LDB HSTPT,I   LOAD
      LDA 1,I         VALUE
      INB               OF
      LDB 1,I             FOR-VARIABLE
      JMP ENEX2-1   CHECK ACCEPTABILITY
*
***              ***
**  EXECUTE NEXT  **
***              ***
*
ENEXT JSB FVSRH     FIND CORRESPONDING STACK ENTRY
      JMP XEC4      NONE PRESENT
      STA HSTPT     RESET TOP OF STACK
      STB ENEX1     SAVE FOR-VARIABLE ADDRESS
      INA           SAVE LIMIT
      STA ENEX2       ADDRESS
      ADA .2        SAVE STEP SIZE
      STA TEMP1       ADDRESS
      LDB M2        SET STEP SIZE
      STB FDATA       SIGN CHECK
      LDA TEMP1,I   LOAD
      ISZ TEMP1       STEP
      LDB TEMP1,I       SIZE
      ISZ TEMP1
      SSA           CHECK
      ISZ FDATA       SIGN
      JSB .FAD      INCREMENT
ENEX1 NOP           FOR-VARIABLE
      STA ENEX1,I       AND
      ISZ ENEX1           SAVE
      STB ENEX1,I           VALUE
      JSB .FSB      COMPUTE FOR-VARIABLE - LIMIT
ENEX2 NOP
      ISZ FDATA     POSITIVE STEP SIZE?
      ELA           YES, COMPLEMENT SIGN
      SSA           NO, NON-NEGATIVE RESULT?
      JMP ENEX3     NO
      LDA TEMP1,I   YES, GO TO FIRST
      JMP XEC4+1      STATEMENT OF LOOP
ENEX3 LDA HSTPT     FAILS,
      ADA .6          ERASE
      STA HSTPT         STACK
      JMP XEC4            ENTRY
*
***               ***
**  EXECUTE GOSUB  **
***               ***
*
EGOSB INB           LOAD (A) WITH
      LDA 1,I         SEQUENCE NUMBER
      LDB NXTST     LOAD (B) WITH
      STA NXTST       RETURN SEQUENCE NUMBER
      JSB SLWST     STACK RETURN ON LOW-CORE STACK
      ADA M10       GOSUBS NESTED
      CPA LSTAK       10 DEEP?
      JSB ERROR     YES
E2    JMP XEC4      NO
*
***                ***
**  EXECUTE RETURN  **
***                ***
*
ERTRN LDB LSTPT     RETURN STACK
      CPB LSTAK       EMPTY?
      JSB ERROR     YES
E3    LDA LSTPT,I   NO, LOAD RETURN ADDRESS
      ADB M1        RESET
      STB LSTPT       STACK POINTER
      JMP XEC4+1
      SKP
*
***              ***
**  EXECUTE WAIT  **
***              ***
*
EWAIT ISZ TEMPS     POINT (TEMPS) TO FORMULA
      JSB FETCA,I   FETCH EVALUATED FORMULA
      SSA           NEGATIVE?
      JMP XEC4      YES
      JSB IFIX      CONVERT TO INTEGER
      CLA,INA       LARGE INTEGER
      SZA,RSS       SMALL
      CMB,SSB,RSS     INTEGER?
      LDB MNEG      NO
EWAI1 INB,SZB,RSS   WAIT?
      JMP XEC4      NO
      LDA M310      YES, SET INNER LOOP
      INA,SZA       MORE?
      JMP *-1       YES
      JMP EWAI1     NO
*
***              ***
**  EXECUTE CALL  **
***              ***
*
ECALL ISZ TEMPS     FETCH
      ISZ TEMPS       SUBROUTINE
      LDB TEMPS,I       NUMBER
      JSB FNDSB     FIND
      INB             ENTRY
      LDB 1,I           POINT AND
      STB TEMPS+11        SAVE IT
      LDA HSTPT     SAVE HIGH CORE
      STA TEMPS+10    STACK POINTER
ECAL1 ISZ TEMPS     ANY
      LDA TEMPS,I     PARAMETERS
      CPA B4000         LEFT?
      JMP ECAL2     NO
      JSB FORMA,I   YES, EVALUATE
      JMP ECAL1       A PARAMETER
ECAL2 CCA           LOAD ADDRESS OF
      ADA TEMPS+10    PARAMETER ADDRESSES
      JSB TEMPS+11,I    AND BRANCH TO SUBROUTINE
      LDA TEMPS+10  RESTORE
      STA HSTPT
      LDB FCORE     POINTERS
      STB TSTPT
      JMP XEC4
      SKP
*
***              ***
**  EXECUTE READ  **
***              ***
*
EREAD CPB PRADD     END-OF-STATEMENT?
      JMP XEC4      YES
      JSB FORMA,I   NO, EVALUATE NEXT ADDRESS
      LDA HSTPT,I   RECORD
      STA OUTLN       ADDRESS
      JSB FDATA     GET DATA ITEM
      STA OUTLN,I   STORE
      ISZ OUTLN       DATA
      STB OUTLN,I       ITEM
      ISZ HSTPT
      LDB TEMPS
      INB
      JMP EREAD
**
***  INITIALIZE FOR PRINT  **
**
PRNIN NOP
      CCA           INITIALIZE
      ADA .BUFA       BUFFER
      STA BADDR         POINTER
      LDA TYPE      INITIALIZE
      CMA,INA         'CHARACTERS OUTPUTTED'
      STA CCNT          COUNTER
      SLA,RSS       START ON ODD CHARACTER POSITION?
      JMP PRNIN,I   NO
      ADA M1        YES, BIAS
      STA CCNT        COUNTER
      CLA           OUTPUT A
      JSB OUTCR       NULL CHARACTER
      JMP PRNIN,I
*
***               ***
**  EXECUTE PRINT  **
***               ***
*
EPRIN JSB PRNIN     SET FOR PRINT
      CLA           TURN ON
      JMP EPRI1+1     'END-OF-LINE' FLAG
EPRI0 CLA           EXECUTE COMMA
      CPA EOL         IF NOT FOLLOWING
      JSB EDELM         A TAB
EPRI1 CCA           TURN OFF
      STA EOL         'END-OF-LINE' FLAG
      LDA TEMPS,I   EXTRACT
      AND OPDMK       OPERAND
      SZA           NULL?
      JMP EPRI3     NO, FORMULA OR TAB
EPRI2 ISZ TEMPS     YES
      LDB TEMPS     MORE
      CPB PRADD       STATEMENT?
      JMP EPRI7     NO
      LDA TEMPS,I   YES, EXTRACT
      AND OPMSK       NEXT OPERATOR
      CPA B2000     ',' ?
      JMP EPRI0     YES
      CPA B3000     NO, ')' ?
      JMP EPRI1     YES
      CPA B1000     NO, * ?
      JMP EPRI4     YES
      CCA           NO, MUST BE +,-, OR (
      ADA TEMPS     BACKUP TO PRIOR
      STA TEMPS       NULL OPERAND
EPRI3 CCA           SET
      STA EOL         TAB FLAG
      JSB FETCA,I   EVALUATE
      ISZ EOL       TAB?
      JMP EPRI2     YES
      JSB ENOUT     NO, PRINT NUMBER
      JMP EPRI2
EPRI4 CLA           TURN ON
      STA EOL         'END-OF-LINE' FLAG
      STA SLWST     ZERO
      STA OUTLN       CHARACTER COUNT
EPRI5 LDA 1,I
      AND MSK0      NON-NULL
      SZA,RSS         LOW CHARACTER?
      JMP EPRI6     NO
      ISZ OUTLN     YES, COUNT IT
      INB
      LDA 1,I
      AND OPMSK
      CPA B1000     * NEXT?
      JMP EPRI6     YES
      ISZ OUTLN     NO, COUNT HIGH CHARACTER
      JMP EPRI5
EPRI6 LDB OUTLN     WILL
      ADB CCNT        LINE
      ADB M73           EXCEED
      SSB,RSS             72 CHARACTERS?
      JSB OUTLN     YES, GET FRESH LINE
      JSB OUTSA,I   OUTPUT STRING
      JMP EPRI1+2
EPRI7 ISZ EOL       'END-OF-LINE' ?
      JMP EPRI8     YES
      LDB TYPE      NO, LOAD COUNT OF
      CMB,INB         CHARACTERS OUTPUTTED
      LDA CCNT      LOAD LINE LENGTH
      CMA,INA       SAVE NEW COUNT OF
      STA TYPE        CHARACTERS OUTPUTTFD
      ADA 1         COMPUTE CHARACTERS NOT YET OUT
      SLB           CORRECT FOR START ON
      ADA M1          ODD PRINT POSITION
      LDB .BUFA     OUTPUT
      SZA             NON-EMPTY
      JSB WRITE,I       BUFFER
      JMP XEC4
EPRI8 JSB OUTLN     PRINT LINE
      JMP XEC4
**
***  TAB TELEPRINTER  **
**
ETAB  JSB IENTA,I   SMALL INTEGER?
      JMP ETAB1     NO
      CLB           YES, SET
      STB EOL         'TAB' FLAG TRUE
      ADA M72       EXCEED
      SSA,RSS         72?
      JMP ETAB1     YES
      CMA,INA       NO, COMPUTE
      ADA M72         BLANKS?
      ADA CCNT          REQUIRED
      SSA,RSS       ANY?
      JMP FR12A,I   NO
      STA OUTLN     YES,
      LDA .32         OUTPUT
      JSB OUTCR         REQUIRED
      ISZ OUTLN           NUMBER
      JMP *-3                OF BLANKS
      JMP FR12A,I
ETAB1 JSB OUTLN     OUTPUT THE
      JMP FR12A,I     LINE
*
IENTA DEF .IENT
*
***               ***
**  EXECUTE INPUT  **
***               ***
*
EINP1 INA,SZA       END-OF-INPUT?
      JSB DRQSA,I   YES, CALL FOR MORE
EINP2 JSB CONST     CONVERT AND STORE NUMBER
      JMP EINP1     NOT NUMBER
      LDB TEMPS     END-OF-
      INB
      CPB PRADD       STATEMENT?
      JMP EINP3     YES
      CPA .10       NO, INSURE MORE INPUT
EINPT JSB DRQSA,I   CALL FOR INPUT
      JSB FORMA,I   COMPUTE VARIABLE ADDRESS
      CCA           STORE
      ADA HSTPT,I     ADDRESS-1
      ISZ HSTPT         IN
      STA SBPTR           POINTER
      JMP EINP2
EINP3 CLA           RESET
      STA TYPE        OUTPUT BUFFER
      JMP XEC4
      SKP
**
***  EXIT FORMULA ON EMPTY STACK  **
**
      DEF FORMX,I
*
***                 ***
**  EXECUTE RESTORE  **
***                 ***
*
ERSTR LDB DSTRT     GET FIRST DATA STATEMENT ADDRESS
      CPB M1        IMPOSSIBLE ADDRESS?
      JMP XEC4      YES, DONE
      JSB SETDP     NO, SET DATA POINTER
      JMP XEC4      DONE
**
***  FORMULA OPERATOR JUMP TABLE  **
**
AROTB DEF ESCMA     SUBSCRIPT SEPARATOR
      DEF ESTR      ASSIGNMENT OPERATOR
      DEF EFAD      '+'
      DEF EFSB      '-'
      DEF EFMP      '*'
      DEF EFDV      '/'
      DEF EPWR      '^'
      DEF EGTRT     '>'
      DEF ELST      '<'
      DEF ENEQL     '#'
      DEF EEQL      '='
      DEF EUMIN     UNARY '-'
      DEF ELBRC     '['
      DEF FOR1A,I   '('
      DEF FOR0B,I   UNARY '+'
      DEF EOR       OR
      DEF EAND      AND
      DEF ENOT      NOT
      DEF EGORE     '>='
      DEF ELORE     '<='
**
***  EXECUTE A BINARY OPERATOR  **
**
BINOP NOP           SAVE
      LDA BINOP,I     SUBROUTINE
      STA BINO1         CALL
      ISZ BINOP     SET RETURN ADDRESS
      JSB OPCHK     SAVE ADDRESS OF
      STB BINO2       TOP OPERAND
      ISZ HSTPT     UNSTACK ADDRESS
      JSB STTOP     LOAD SECOND OPERAND
BINO1 NOP           PERFORM OPERATION
BINO2 NOP           ADDRESS OF SECOND OPERAND
      JMP BINOP,I
      SKP
**
***  EXECUTE SUBSCRIPT COMMA  **
**
ESCMA JSB ESBS      INTEGERIZE COLUMN SUBSCRIPT
      ISZ LSTPT
      JSB ESBS      INTEGERIZE ROW SUBSCRIPT
      LDB HSTPT,I   FETCH
      ADB .2          SUBSCRIPT
      LDA 1,I           ROUNDS
      AND MSK0      SAVE
      STA OUTLN       COLUMN BOUND
      LDA 1,I       EXTRACT
      ALF,ALF         ROW
      AND MSK0          BOUND
      CMA,INA       ACTUAL
      ADA LSTPT,I     ROW SUBSCRIPT
      SSA,RSS           LEGAL?
      JMP E6-1      NO
      LDA OUTLN     YES
      CPA .1        COLUMN MATRIX?
      JMP ESCM1     YES
      JSB MPY       NO, COMPUTE ADDRESS
      DEF LSTPT,I     DISPLACEMENT
      RSS               DUE TO ROWS
ESCM1 LDA LSTPT,I
      CCB           UNSTACK
      ADB LSTPT       ROW
      STB LSTPT         SUBSCRIPT
      LDB OUTLN     ACTUAL
      CMB,INB         COLUMN
      ADB LSTPT,I       SUBSCRIPT
      SSB,RSS             LEGAL?
      JSB ERROR     NO
E6    ADA LSTPT,I   YES, ADD IN COLUMN DISPLACEMENT
      ALS           DOUBLE DISPLACEMENT
      LDB HSTPT,I   COMPUTE
      ADA 1,I         ACTUAL
      STA HSTPT,I       ADDRESS
      LDB LSTPT     UNSTACK
      ADB M1
      STB LSTPT         (
      JMP FOR1A,I
**
***  INTEGERIZE A SUBSCRIPT  **
**
ESBS  NOP
      JSB OPCHK     VALIDATE SUBSCRIPT
      LDA 1,I       FETCH
      INB             SUBSCRIPT
      LDB 1,I
      JSB SBFIX     INTEGERIZE
      STB LSTPT,I   SAVE IN OPERATOR STACK
      ISZ HSTPT     POP OPERAND STACK
      JMP ESBS,I
      SKP
**
***  EXECUTE STORE  **
**
ESTR  LDB TEMPS+7   IS NEXT OPERATOR
      SZB             AN END-OF-FORMULA?
      JMP FOR1B,I   NO, DEFER STORE
      CPB TEMPS+6   YES, FIRST STORE OPERATOR USED?
      JMP ESTR2     YES
ESTR1 LDA HSTPT,I   SET
      STA TEMPS+9     DESTINATION
      LDA TEMPS+6   SOURCE ADDRESS IN (A)
      LDB 0,I       TRANSFER HIGH
      STB TEMPS+9,I   PART OF SOURCE
      ISZ TEMPS+9   UPDATE
      INA             POINTERS
      LDB 0,I       TRANSFER LOW
      STB TEMPS+9,I   PART OF SOURCE
      ISZ HSTPT     POP STACK
      JMP FOR0B,I
ESTR2 JSB OPCHK     SAVE ADDRESS
      STB TEMPS+6     OF QUANTITY
      ISZ HSTPT     YES, POP HIGH-CORE
      JMP ESTR1       STACK AND EXECUTE STORE
**
***  CALL ADD  **
**
EFAD  JSB BINOP
      JSB .FAD
      JMP FOR0A,I
**
***  CALL SUBTRACT  **
**
EFSB  JSB BINOP
      JSB .FSB
      JMP FOR0A,I
**
***  CALL MULTIPLY  **
**
EFMP  JSB BINOP
      JSB .FMP
      JMP FOR0A,I
**
***  CALL DIVIDE  **
**
EFDV  JSB BINOP
      JSB .FDV
      JMP FOR0A,I
**
***  EXECUTE ^  **
**
EPWR  LDB HSTPT,I   LOAD
      LDA 1,I
      INB             POWER
      LDB 1,I
      JSB IFIX
      JMP *+3
      SOS           INTEGER?
      JMP EPWR1     YES
      JSB BINOP     NO
      JMP RPWR
RPWR  JSB PCHK      CHECK ARGUMENTS
      SSA           NEGATIVE BASE?
      JSB ERROR     YES
BASER EQU *
      LDB BINO1     NO, LOAD BASE
      JSB .LOGA,I   TAKE NATURAL LOG
      JSB .FMP      MULTIPLY
      DEF BINO2,I     BY POWER
      JSB .EXPA,I   EXPONENTIATE
      JMP FOR0A,I     RESULT
EPWR1 STB TT1       SAVE SIGN
      SSB           SAVE
      CMB,INB         ABSOLUTE VALUE
      STB TT2           OF POWER
      JSB BINOP
      JMP IPWR
IPWR  JSB PCHK      CHECK ARGUMENTS
      LDB BINO1     STORE
      STA BINO1
      STB BINO2       BASE
      LDA HONE      INITIALIZE
      STA TT3         RESULT
      LDA .2            TO
      STA TT4             1.0
IPWR1 LDB TT2       DIVIDE POWER
      SLB,BRS         BY 2
      JMP IPWR3     WAS ODD
      STB TT2       WAS EVEN
IPWR2 SZB           ZERO?
      JMP IPWR4     NO
      LDA TT1       YES
      SSA           POSITIVE POWER?
      JMP IPWR5     NO
      LDA TT3       YES,LOAD
      LDB TT4         RESULT
      JMP FOR0A,I
IPWR5 LDA HONE      LOAD
      LDB .2          1.0
      JSB .FDV      DIVIDE BY
      DEF TT3         RESULT
      JMP FOR0A,I
IPWR3 STB TT2       SAVE POWER
      LDA BINO1     LOAD
      LDB BINO2       BASE
      JSB .FMP      MULTIPLY BY
      DEF TT3         RESULT-SO-FAR
      STA TT3       SAVE PARTIAL
      STB TT4         RESULT
      LDB TT2       LOAD POWER
      JMP IPWR2
IPWR4 LDA BINO1     LOAD
      LDB BINO2       BASE
      JSB .FMP      SQUARE
      DEF BINO1       IT
      STA BINO1     SAVE
      STB BINO2       RESULT
      JMP IPWR1
**
***  INSURE VALID OPERATION  **
**
PCHK  NOP
      STB BINO1     LOAD
      LDB BINO2,I     POWER
      SZA           BASE ZERO?
      JMP PCHK1     NO
      SZB,RSS       YES, POWER ZERO?
      JSB ERROR     YES
POWER EQU *
      SSB,RSS       NO, POWER POSITIVE?
      JMP FALSE     YES
      JSB ERROR     NO
ZRTNG LDA INF       USE POSITIVE
      LDB M2          INFINITY
      JMP FOR0A,I
PCHK1 SZB,RSS       POWER ZERO?
      JMP TRUE      YES, RETURN 1.0
      JMP PCHK,I    NO
**
***  EXECUTE >  **
**
EGTRT JSB BINOP     COMPUTE OPERAND
      JSB .FSB        DIFFERENCE
      SSA           NEGATIVE?
      JMP FALSE     YES
      JMP ENEQ1     NO
**
***  EXECUTE <  **
**
ELST  JSB BINOP     COMPUTE OPERAND
      JSB .FSB        DIFFERENCE
      SSA           NEGATIVE?
      JMP TRUE      YES
      JMP FALSE     NO
**
***  EXECUTE =  **
**
EEQL  JSB BINOP     COMPUTE OPERAND
      JSB .FSB        DIFFERENCE
EEQL1 SZA           ZERO?
      JMP FALSE     NO
      JMP TRUE      YES
      SKP
**
***  EXECUTE >=  **
**
EGORE JSB BINOP     COMPUTE OPERAND
      JSB .FSB        DIFFERENCE
      SSA           POSITIVE?
      JMP FALSE     NO
      JMP TRUE      YES
**
***  EXECUTE <=  **
**
ELORE JSB BINOP     COMPUTE OPERAND
      JSB .FSB        DIFFERENCE
      SSA           NEGATIVE?
      JMP TRUE      YES
      JMP EEQL1     NO
**
***  EXECUTE #  **
**
ENEQL JSB BINOP     COMPUTE OPERAND
      JSB .FSB        DIFFERENCE
ENEQ1 SZA           NON-ZERO?
      JMP TRUE      YES
**
***  SET LOGICAL VALUES  **
**
FALSE CLA           LOAD
      CLB             ZERO
      JMP FOR0A,I
TRUE  LDA HONE      LOAD
      LDB .2          ONE
      JMP FOR0A,I
**
***  EXECUTE UNARY -  **
**
EUMIN JSB STTOP     LOAD NUMBER
      JSB ARINV     NEGATE NUMBER
      JMP FOR0A,I
**
***  EXECUTE LEFT BRACKET  **
**
ELBRC ISZ LSTPT     LOAD SUBSCRIPT COMMA
      LDB SCCNT       INFORMATION WORD
      JSB SLWST     STACK IT
      JSB BHSTP     STACK
      JSB RSCHK
      JMP TRUE        1
**
***  EXECUTE OR  **
**
EOR   JSB BINOP     VALIDATE
      JMP ORS         OPERANDS
ORS   SZA           SECOND OPERAND NON-ZERO?
      JMP TRUE      YES
ORS1  LDA BINO2,I   NO, CHECK SECOND
      JMP ENEQ1       OPERAND
**
***  EXECUTE AND  **
**
EAND  JSB BINOP     VALIDATE
      JMP ANDS        OPERANDS
ANDS  SZA,RSS       SECOND OPERAND ZERO?
      JMP FALSE     YES
      JMP ORS1      NO
**
***  EXECUTE NOT  **
**
ENOT  JSB STTOP     LOAD OPERAND
      SZA           ZERO?
      JMP FALSE     NO
      JMP TRUE      YES
**
***  ADD TWO FLOATING POINT QUANTITIES  **
**
ADMUP NOP
      LDA OUTLN     COMPUTE
ADMU1 CMA,INA         EXPONENT
      ADA EXP           DIFFERENCE
      SSA,RSS       ARG 1 LARGER?
      JMP ADMU2     YES
      LDA A1        NO,
      LDB A2          SWAP
      STA A2            ARGUMENTS
      STB A1
      LDA C1
      LDB C2
      STA C2
      STB C1
      LDA EXP
      LDB OUTLN
      STA OUTLN
      STB EXP
      JMP ADMU1
ADMU2 ADA M25       SHIFT COUNT >=
      LDB C1
      SSA,RSS         25 ?
      JMP ADMU4     YES, IGNORE SMALLER ARGUMENT
      CMA,CLE       NO, COMPUTE
      ADA M25         SHIFT COUNT
      STA OUTLN         AS NEGATIVE
      LDA A2        LOAD SMALLER
      LDB C2        MANTISSA
ADMU3 ISZ OUTLN     MORE SHIFTS?
      JMP ADMU5     YES
      ADB C1        NO, ADD LOW MANTISSAS
      CLO
      RBR,ELB       SAVE (E) IN B(0)
      CLE
      ADA A1        ADD HIGH MANTISSAS
      SLB           OVERFLOW FROM LOWER MANTISSA?
      INA           YES, ADD IT IN
      ERB,CLE,ELB   ERASE B(0)
      SOS           OVERFLOW?
      JMP ADMU4+1   NO
      ERA           YES, SHIFT
      ERB             MANTISSA DOWN AND
      ISZ EXP           CORRECT EXPONENT
      JMP ADMU4+1
      RSS
ADMU4 LDA A1        RETRIEVE HIGH MANTISSA
      JSB .PACK     NORMALIZE AND PACK
      JMP ADMUP,I
ADMU5 CLE,SLA,ARS   ARITHMETIC
      CME             DOUBLE
      ERB,CLE           SHIFT
      JMP ADMU3
**
***  ADD TWO FLOATING POINT NUMBERS  **
**
.FAD  NOP
      JSB UNPAK     UNPACK THE ARGUMENTS
      JSB ADMUP     ADD THEM UP
      JMP .FAD,I
**
***  SUBTRACT TWO FLOATING POINT NUMBERS  **
**
.FSB  NOP
      JSB UNPAK     UNPACK THE ARGUMENTS
      LDA A2        TWO'S COMPLEMENT
      CMA             THE SECOND ARGUMENT
      CMB,INB,SZB   LOW PART ZERO?
      JMP .FSB1     NO
      SSA,INA,RSS   YES, ORIGINAL NUMBER NEGATIVE?
      SSA,RSS       YES, STILL NEGATIVE?
      JMP .FSB1     NO
      RAR           YES, SHIFT DOWN AND
      ISZ OUTLN       CORRECT EXPONENT
.FSB1 STB C2        SAVE COMPLEMENTED
      STA A2          NUMBER
      JSB ADMUP     ADD ARGUMENTS
      JMP .FSB,I
**
***  UNPACK ARGUMENTS FOR ARITHMETIC OPERATIONS  **
**
UNPAK NOP
      STA A1        SAVE HIGH PART OF ARG 1
      SZA,RSS       UNPACK
      CLB,INB         SECOND
      JSB .FLUN         WORD
      STB C1        SAVE LOW PART OF ARG 1
      STA EXP       SAVE EXPONENT OF ARG 1
      LDA UNPAK     COMPUTE ADDRESS OF
      ADA M2          CALLING ROUTINE
      LDB 0,I
      ISZ 0,I       SET CALLING ROUTINE'S RETURN
      LDB 1,I       LOAD
      RBL,CLE,SLB,ERB   ADDRESS OF
      JMP *-2             ARG 2
      LDA 1,I       LOAD
      INB             ARG 2
      LDB 1,I
      STA A2        SAVE HIGH PART OF ARG 2
      SZA,RSS       UNPACK
      CLB,INB         SECOND
      JSB .FLUN         WORD
      STB C2        SAVE LOW PART OF ARG 2
      STA OUTLN     SAVE EXPONENT OF ARG 2
      JMP UNPAK,I
**
***  MULTIPLY TWO FLOATING POINT NUMBERS  **
**
.FMP  NOP           UNPACK THE
      JSB UNPAK       ARGUMENTS
      ADA EXP       ADD EXPONENTS
      INA             PLUS 1 FOR
      STA EXP           NORMALIZATION
      RBR           POSITION LOW PART OF ARG 2
      LDA 1         COMPUTE A
      JSB MPY         CROSS PRODUCT
      DEF A1
      STA C2        SAVE RESULT
      LDA C1        LOAD AND POSITION
      RAR             LOW PART OF ARG 1
      STB C1        SAVE REST OF PRIOR RESULT
      JSB MPY       COMPUTE SECOND
      DEF A2          CROSS PRODUCT
      ADB C1        ADD
      CLE             CROSS
      ADA C2            PRODUCTS
      SEZ           CORRECT
      INB             FOR CARRY
      STB C2        SAVE RESULT
      LDA A1        COMPUTE
      JSB MPY         HIGH PART
      DEF A2            OF PRODUCT
      CLE,ERA       POSITION LOW PART
      ADA C2        ADD IN CROSS TERMS
      CLE,ELA       REPOSITION
      SEZ,RSS       CARRY FROM LOW PART?
      JMP *+4       NO
      SOC           YES, POSITIVE CARRY?
      INB,RSS       YES
      ADB M1        NO
      STA A1        EXCHANGE
      LDA 1
      LDB A1          REGISTERS
      JSB .PACK     NORMALIZE AND PACK
      JMP .FMP,I
      SKP
**
***  PERFORM FLOATING DIVIDE  **
**
.FDV  NOP
      JSB UNPAK     UNPACK ARGUMENTS
      LDB A2        DIVISOR
      SZB,RSS         ZERO?
      JMP .FDV2     YES
      LDB A1        NO, DIVIDEND
      SZB,RSS         ZERO?
      JMP .FDV1     YES
      CMA,INA       NO, COMPUTE
      INA             EXPONENT
      ADA EXP           DIFFERENCE
      STA EXP             PLUS 1
      LDA C1        LOAD DIVIDEND
      CLE,SLB,BRS   ARITHMETIC
      CME             RIGHT SHIFT
      ERA               TWICE TO
      CLE,SLB,BRS         PREVENT
      CME                   DIVISION
      ERA                     OVERFLOW
      JSB IDIV      DIVIDE
      STA OUTLN     SAVE QUOTIENT
      BRS           DIVIDE REMAINDER BY 2 TO
      CLA             PREVENT DIVISION OVERFLOW
      JSB IDIV      DIVIDE REMAINDER AND
      STA NUMCK       SAVE LOW PART OF QUOTIENT
      LDB C2
      CLA,CLE       SCALE TO
      ERB,BRS         PREVENT
      BRS               OVERFLOW
      JSB IDIV      COMPUTE B2/A2 = Q
      CMA,INA       COMPUTE
      JSB MPY         -HIGH QUOTIENT*Q
      DEF OUTLN
      BLS,CLE,ELB   SHIFT SIGN TO (E)
      LDA NUMCK     LOW QUOTIENT
      SSA             NEGATIVE?
      CCA,RSS       YES, SET (A)=-1  (EXTEND
      CLA           NO, SET (A)=0       SIGN)
      CMA,SEZ       IF (E)=1 SUBTRACT
      INA             1 AS EXTENSION
      CMA,CLE           OF PRODUCT
      ADB NUMCK     ADD IN LOW QUOTIENT
      SEZ           CARRY
      INA             INTO (A)
      CLE,ELB       POSITION
      ELA             REGISTERS
      ADA OUTLN     ADD IN HIGH QUOTIENT
      RSS
.FDV1 CLA           SET MANTISSA TO ZERO
      JSB .PACK     NORMALIZE AND PACK
      JMP .FDV,I
.FDV2 JSB ERROR     DIVIDE-BY-ZERO
DBYZR LDA A1
      JSB OVFLW     RETURN INFINITY
      JMP .FDV,I
**
***  INTEGER DIVIDE  **
**
IDIV  NOP           DIVIDEND IN (B) AND (A)
      STB A1        SAVE HIGH DIVIDEND
      LDB A2
      CLE,SSB       SET (B) TO ABS(B)
      CMB,CME,INB     AND (E) TO SIGN(B)
      STB .FAD      SAVE POSITIVE DIVISOR
      CMB,INB       SAVE
      STB .FSB        NEGATIVE DIVISOR
      LDB M16       SET
      STB C1          COUNTER
      LDB M2        SET
      STB SIGN
      STB .FMP        SIGNS
      LDB A1        RETRIEVE HIGH DIVIDENED
      SSB,RSS       POSITIVE?
      JMP IDIV1     YES
      ISZ .FMP      NO, SET REMAINDER SIGN
      CMB,CME         NEGATIVE AND COMPLEMENT
      SZA               THE DIVISOR
      CMA,INA,RSS         AND (E)
      INB
IDIV1 SEZ           QUOTIENT POSITIVE?
      ISZ SIGN      NO
IDIV2 CLE,ELA       SHIFT
      ELB             DIVIDEND
      ADB .FSB      SUBTRACT DIVISOR
      SSB,RSS       OK?
      INA,RSS       YES
      ADB .FAD      NO, RESTORE DIVIDEND
      ISZ C1        DONE?
      JMP IDIV2     NO
      CMA,INA       YES, NEGATE QUOTIENT
      ISZ SIGN      RESULT TO BE POSITIVE?
      CMA,INA       YES
      ISZ .FMP      NO, REMAINDER POSITIVE?
      JMP IDIV,I    YES
      CMB,INB       NO
      JMP IDIV,I
      SKP
*               ******************************
*               SYMBOL TABLE SEARCH SUBROUTINE
*               ******************************
*
*               THE SUBROUTINE IS CALLED WITH THE IDENTIFIER TO BE
*               SEARCHED FOR IN A . THE SUBROUTINE RETURNS WITH
*               THE ADDRESS OF THE MATCHING ENTRY IN B OR -1 IN
*               B IF THERE IS NO MATCHING ENTRY
*               THE FOLLOWING RULES APPLY WHEN SEARCHING FOR ARRAYS
*
*               TYPE 1 (1 DIMENSION) SEARCH FOR CORRESPONDING TYPE 1
*               OR TYPE 3 ARRAY. IF TYPE 3 IS FOUND CHANGE THE ENTRY
*               TYPE TO TYPE 1
*
*               TYPE 2 (2 DIMENSIONS) SEARCH FOR CORRESPONDING TYPES
*               OR TYPE 3 ARRAY. IF TYPE 3 IS FORND CHANGE THE ENTRY
*               TYPE TO TYPE 2
*
*               TYPE 3 (UNDIMENSIONED) SEARCH FOR CORRESPONDING
*               TYPE 3 OR TYPE 1 OR TYPE 2 ARRAY
*
SSYMT NOP
      STA STEMP    STORE IDENTIFIER
      AND .15      ISOLATE IDENTIFIER TYPE
      ADA M4
      SSA,INA
      JMP *+4      JUMP IF ARRAY TYPE
      LDA STEMP    RESTORE A
      STA 1        STORE IN B
      JMP SYMT1+3
      SSA          SKIP IF UNDIMENSIONED
      JMP SYMT1
      LDA STEMP    RESTORE A
      AND MSK3     177771B SET TYPE TO 1
      STA 1
      INB          SET TYPE IN B TO 2
      JMP *+4
SYMT1 CCB          SET DIMENSIONED FLAG IN B
      LDA .3
      IOR STEMP    SET TYPE TO UNDEFINED
      STA STEMP+1  STORE A
      STB STEMP+2  STORE B
      LDB SYMTF    START OF SYMBOL TABLE
      JMP SYMT4
SYMT2 LDA 1,I      PICK UP 1ST WORD OF ENTRY
      CPA STEMP    COMPARE WITH IDENTIFIER
      JMP SSYMT,I  MATCH ?  RETURN
      CPA STEMP+1  COMPARE WITH DIFFERENT DIM.
      JMP SYMT3
      CPA STEMP+2  COMPARE WITH DIFFERENT DIM.
      JMP SYMT3
      LDA 1,I
      AND .15      ISOLATE ENTRY TYPE
      CPA .15      FUNCTION ?
      JMP *+5      YES
      ADA M4
      SSA          ARRAY ?
      INB          YES INCREMENT POINTER
      INB          INCREMENT POINTER
      ADB .2       ADD 2 TO POINTER
SYMT4 CPB SYMTA     SYMBOL TABLE EXHAUSTED?
      CCB,RSS       YES
      JMP SYMT2     NO, CHECK NEXT ENTRY FOR MATCH
      LDA STEMP     RETRIEVE SYMBOL
      JMP SSYMT,I  RETURN WITH B NEGATIVE
SYMT3 LDA STEMP    RESTORE A
      ISZ STEMP+2  DIMENSIONED IDENTIFIER?
      RSS          NO, SKIP
      STA 1,I      YES CHANGE 1ST WORD OF ENTRY TO
      JMP SSYMT,I  APPROPRIATE DIMENSION TYPE
      SPC 5
**
***  ERROR TABLE  **
**
ERR   DEF EOF+1     PREMATURE STATEMENT END
      DEF RTLE      INPUT EXCEEDS 71 CHARACTERS
      DEF INVSC     SYSTEM COMMAND NOT RECOGNIZED
      DEF SYNE1     NO STATEMENT TYPE FOUND
      DEF NUMER+1   BAD EXPONENT PART
      DEF SYE16     NO LETTER WHERE EXPECTED
      DEF SYNE2     LET STATEMENT HAS NO STORE
      DEF SYNE3     ILLEGAL COM STATEMENT
      DEF SYNE4+1   NO FUNCTION IDENTIFIER (OR BAD)
      DEF SYNE5     MISSING PARAMETER
      DEF SYNE6+1   MISSING ASSIGNMENT OPERATOR
      DEF SYNE7     MISSING 'THEN'
      DEF SYNE8+1   MISSING OR IMPROPER FOR-VARIABLE
      DEF SYNE9     MISSING 'TO'
      DEF SYE10     BAD 'STEP' PART IN FOR STATEMENT
      DEF CALER     CALLED ROUTINE DOES NOT EXIST
      DEF SYE11+1   WRONG NUMBER OF CALL PARAMETERS
      DEF SYE12     NO CONSTANT WHERE EXPECTED
      DEF SYE13     NO VARIABLE WHERE EXPECTED
      DEF SYE14     NO CLOSING QUOTE FOR STRING
      DEF SYE15     PRINT JUXTAPOSES FORMULAS
      DEF SYE17     IMPROPER WORD IN MAT STATEMENT
      DEF SYE18     NO COMMA WHERE EXPECTED
      DEF SYE19     IMPROPER ARRAY FUNCTION
      DEF SYE20     NO SUBSCRIPT WHERE EXPECTED
      DEF SYE21     ARRAY INVERSION INTO SELF
      DEF SYE22     MISSING MULTIPLICATION OPERATOR
      DEF SYE23     IMPROPER ARRAY OPERATOR
      DEF SYE24+1   ARRAY MULTIPLICATION INTO SELF
      DEF FSCE1+1   MISSING LEFT PARENTHESIS
      DEF FSCE2+1   MISSING RIGHT PARENTHESIS
      DEF FSCE3+1   UNRECOGNIZED OPERAND
      DEF ARRE1     MISSING SUBSCRIPT
      DEF ARRE2     MISSING ARRAY IDENTIFIER
      DEF SYE25+1   MISSING OR BAD INTEGER
      DEF NOEOF+1   CHARACTERS AFTER STATEMENT END
      DEF FSCE4+1   OUT OF CORE DURING SYNTAX
      DEF PRERR     PHOTO READER NOT READY
      DEF MER4      FUNCTION MULTIPLY DEFINED
      DEF MER6      UNMATCHED FOR STATEMENT
      DEF MER3      UNMATCHED NEXT
      DEF MER8      OUT OF STORAGE-SYMBOL TABLE
      DEF MSYM      INCONSISTENT DIMENSIONS
      DEF MLOP6     LAST STATEMENT IS NOT 'END'
      DEF MER5      ARRAY DOUBLE DIMENSIONED
      DEF MER10     NO OF DIMENSIONS UNSPECIFIED
      DEF MER9      ARRAY TOO LARGE
      DEF MER7      OUT OF STORAGE-ARRAY ALLOCATION
      DEF E6        SUBSCRIPT TOO LARGE
      DEF E8        UNDEFINED OPERAND ACCESSED
      DEF BASER     NEGATIVE BASE POWERED TO REAL
      DEF POWER     ZERO TO ZERO POWER
      DEF XEC5      MISSING STATEMENT
      DEF E2        GOSUBS NESTED 10 DEEP
      DEF E3        RETURN FINDS NO ADDRESS
      DEF E4        OUT OF DATA
      DEF E1+1      OUT OF STORAGE - EXECUTION
      DEF E7        RE-DIMENSIONED ARRAY TOO LARGE
      DEF LERR+1    DIMENSIONS NOT COMPATIBLE
      DEF LCHK5     MATRIX UNASSIGNED
      DEF LDUM1     NEARLY SINGULAR MATRIX
      DEF TRGER     ARGUMENT TOO LARGE
      DEF SQRER     SQRT HAS NEGATIVE ARGUMENT
      DEF LOGER     LOG OF NEGATIVE ARGUMENT
RCERR EQU *         ** RECOVERABLE ERRORS FOLLOW  **
      DEF OVRER     OVERFLOW
      DEF UNDER     UNDERFLOW
      DEF LNZR      LOG OF ZERO
      DEF EXPER     EXPONENTIAL OVERFLOW
      DEF DBYZR     DIVIDE BY ZERO
      DEF ZRTNG     ZERO TO NEGATIVE POWER
*
*
EBUFF OCT 6412
      ASC 3,ERROR
EBFF  BSS 2
LBUFF ASC 5, IN LINE
LNBFF BSS 2
      SKP
**
***  PREDEFINED FUNCTION JUMP TABLE  **
**
PDFT  DEF ETAB
      DEF ESIN
      DEF ECOS
      DEF ETAN
      DEF EATN
      DEF EEXP
      DEF ELOG
      DEF EABS
      DEF ESQR
      DEF EINT
      DEF ERND
      DEF ESGN
**
***  OUTPUT A NUMBER  **
**
NUMOT NOP           NUMBER IN (A) AND (B)
      STA EXPON     SAVE NUMBER
      SEZ,RSS       SIGN?
      JMP NS2       NO
      SSA,RSS       YES, NEGATIVE NUMBER?
      JMP NS1       NO
      JSB ARINV     YES, INVERT IT
      STA EXPON
      LDA .45
      RSS
NS1   LDA .32       STORE
      STA SIGN          SIGN
      LDA EXPON
NS2   STB GETDG     SAVE NUMBER
      JSB IFIX      INTEGERIZE
      NOP
      LDA NUMOT,I   SET
      STA NUMO1       END-OF-LINE
      STA NUMO3         OPERATION
      ISZ NUMOT     BUMP RETURN ADDRESS
      SOC           WAS IT AN INTEGER?
      JMP NUMO2     NO
**
***  OUTPUT AN INTEGER  **
**
      CLA           SAVE
      STB B1+1        INTEGER
      ADB M1000     5 OR MORE
      SSB,RSS         CHARACTERS?
      ADA .3        YES
      ADA .6        COMPUTE
      ADA CCNT        END-OF-FIELD
      CMA,INA       SAVE MARKER TO
      STA MLBX1+1     END-OF-FIELD
      ADA .74       ENOUGH
      SSA             ROOM?
NUMO1 NOP           NO
      LDA SIGN
      SZA           SIGN?
      JSB OUTCR     YES, OUTPUT IT
      LDA B1+1      OUTPUT
      JSB OUTIA,I     THE INTEGER
      JMP NUMOT,I
NUMO2 CCA           SET 'FIXED'
      STA FFLAG       FLAG FALSE
      LDA EXPON     LOAD
      LDB GETDG       NUMBER
      JSB .FADA,I   IS NUMBER
      DEF MAXFX       LESS THAN
      SSA,RSS           999999.5 ?
      JMP NUMO5     NO
      LDA EXPON     YES, IS
      LDB GETDG       NUMBER
      JSB .FADA,I       LESS
      DEF MINFX           THAN
      LDB .12               0..9999995?
      SSA,RSS
      ISZ FFLAG     NO, SET FFLAG = 0 AND SKIP
NUMO5 LDB .15       YES, LOAD 'FLOATING' FIELD WIDTH
      ADB CCNT      SAVE
      CMB,INB         END-OF-FIELD
      STB MLBX1+1       MARKER
      ADB .75       ROOM
      SSB             ENOUGH?
NUMO3 NOP           NO
**
***  OUTPUT A FLOATING POINT NUMBER  **
**
      LDA EXPON
      STA MANT1
      LDB GETDG     UNPACK
      JSB .FLUN
      STB MANT2       NUMBER
      STA EXP
      LDA SIGN
      SZA           SIGN?
      JSB OUTCR     YES, OUTPUT IT
      CLA           INITIALIZE COUNTER
      STA EXPON       FOR DECIMAL EXPONENT
      CPA EXP       EXPONENT ZERO?
      JMP EOUT4     YES
EOUT2 JSB MBY10     NO,
      LDA EXP         MULTIPLY
      CMA,INA           NUMBER BY 10
      SSA                 UNTIL
      JMP *+3               IT IS
      ISZ EXPON               GREATER
      JMP EOUT2                 THAN 1
      JSB DBY10     DIVIDE BY 10
      LDA EXPON
EOUT3 LDB EXP       DIVIDE
      CMB,INB         NUMBER
      SSB,RSS           BY 10
      JMP EOUT4           UNTIL
      STA EXPON             IT IS
      JSB DBY10               LESS
      CCA                       THAN
      ADA EXPON                   1
      JMP EOUT3
EOUT4 CMA           SET EXPONENT
      STA EXPON       TO TRUE VALUE-1
      LDB M7        SET DIGIT
      STB RETCR       COUNTER
      CCB           SET DECIMAL
      STB OUTLN       POINT FLAG
      CPB FFLAG     FIXED POINT?
      JMP EOUT6     NO
      CMA           YES, SET
      STA OUTLN       DECIMAL POINT FLAG
      CPA .1        .1?
      JMP EOUT5     YES
      SSA,RSS       LEADING DECIMAL POINT?
      JMP EOUT7+2   YES
EOUT6 JSB GETDG     OUTPUT
      ADA .48         A
      JSB OUTCR         DIGIT
      JMP EOUT8
EOUT5 LDA .46       OUTPUT
      JSB OUTCR       DECIMAL POINT
      LDA .48       OUTPUT
      JMP EOUT8-1     LEADING ZERO
EOUT7 ISZ OUTLN     DECIMAL POINT NEXT?
      JMP EOUT6     NO
      LDA .46       YES,
      JSB OUTCR       OUTPUT IT
EOUT8 ISZ RETCR     MORE MANTISSA?
      JMP EOUT7     YES
      LDA CCNT      NO,
      STA NUMO1       SAVE
      LDA BADDR         OUTPUT
      STA NUMO3           POINTERS
      JSB GETDG     NEXT DIGIT
      ADA M5          FIVE OR
      SSA               GREATER?
      JMP EOUT1     NO
      CCA           SET DECIMAL
ERND1 STA SYMCK       POINT COUNTER
      JSB RETCR     RETRIEVE CHARACTER
      CPA .46       DECIMAL POINT?
      JMP ERND1-1   YES, FLAG IT
      JSB DIGCK     NO, DIGIT?
      JMP ERND2     NO
      CPA .9        YES, 9?
      JMP *+3       YES
      ADA .49       NO, BUMP
      JMP ERND3       DIGIT 1
      LDA .48       OVERLAY
      JSB OUTCR       A ZERO
      JSB RETCR     BACKSPACE
      CCA           DECREMENT
      ADA SYMCK       DECIMAL POINT
      JMP ERND1         COUNTER
ERND2 JSB OUTCR     RESTORE CHARACTER
      ISZ EXPON     CORRECT
      NOP             EXPONENT
      LDA .49       OVERLAY A 1
      LDB FFLAG     FIXED
      SZB             POINT?
      JMP ERND3     NO
      JSB OUTCR     YES, OUTPUT CHARACTER
      LDA .48       PREPARE TO OVERLAY A ZERO
      ISZ SYMCK     DECIMAL POINT NEXT?
      JMP *-3       NO
      LDA .46       YES
ERND3 JSB OUTCR
      LDA NUMO1     RESTORE
      STA CCNT        OUTPUT
      LDA NUMO3         POINTERS
      STA BADDR
EOUT1 ISZ FFLAG     NO, FIXED POINT?
      JMP EOUT9     YES
      LDA E         NO,
      JSB OUTCR       OUTPUT 'E'
      LDA .45       LOAD '-'
      LDB EXPON     POSITIVE
      SSB             EXPONENT?
      CMB,INB,RSS   NO
      LDA .43       YES, LOAD '+'
      STB EXPON
      JSB OUTCR     OUTPUT SIGN
      LDB EXPON
      LDA .48       COMPUTE
      ADB M10
      SSB             EXPONENT
      JMP *+3
      INA               DIGIT
      JMP *-4
      ADB .58       COMPUTE
      STB EXPON       SECOND DIGIT
      JSB OUTCR     OUTPUT
      LDA EXPON
      JSB OUTCR       EXPONENT
      JMP NUMOT,I
EOUT9 JSB RETCR     RETRIEVE CHARACTER
      CPA .48       ZERO?
      JMP EOU10     YES
      JSB OUTCR     NO, RESTORE CHARACTER
      JMP NUMOT,I
EOU10 LDA .32       OVERLAY
      JSB OUTCR       A BLANK
      JSB RETCR     BACKSPACE
      JMP EOUT9
      SKP
**
***  GET DIGIT TO OUTPUT  **
**
GETDG NOP
      JSB MBY10     MULTIPLY BY 10
      LDB EXP       GET EXPONENT IN (B)
      CMB,INB         AS NEGATIVE
      AND HIMSK     KEEP 5 HIGH BITS OF (A)
      RAL           NORMALIZE TO BIT 15
      SSB,INB       ROTATE INTEGER
      JMP *-2         INTO (A)
      AND MSK0      EXTRACT
      STA NUMCK       DIGIT
      LDB EXP       ROTATE
      CMB,INB
      RAR             BACK
      SSB,INB
      JMP *-2
      XOR MANT1     REMOVE
      LDB MANT2       DIGIT
      JSB NORML     NORMALIZE REMAINDER
      LDA NUMCK     LOAD (A) WITH DIGIT
      JMP GETDG,I
**
***  RETRIEVE CHARACTER FROM OUTPUT BUFFER  **
**
RETCR NOP
      LDB CCNT      DECREMENT
      ADB M1          CHARACTER
      STB CCNT          COUNT
      LDA BADDR,I   POSITION
      SLB,RSS         AND
      ALF,ALF           EXTRACT
      AND MSK0            CHARACTER
      SLB           FIRST CHARACTER OF WORD?
      JMP RETCR,I   NO
      LDB BADDR     YES, DECREMENT
      ADB M1          BUFFER
      STB BADDR         POINTER
      JMP RETCR,I
*
*
A1    EQU SETDP
A2    EQU STSRH
C1    EQU FLWST
C2    EQU FVSRH
      HED LIBRARY ROUTINES
*               ******************************
*               SUBROUTINE TO CALCULATE TAN(X)
*               ******************************
*
*               CALLED BY A JMP ETAN WITH THE ARGUMENT
*               IN FLOATING RADIANS IN THE REGISTERS.
*               THE FLOATING RESULT IS RETURNED IN A & B
*
ETAN  JSB .FMPA,I
      DEF FOPI      4/PI
      STA XTEMP
      STB XTEMP+1
      JSB .FADA,I
      DEF K1
      JSB .PWR2
      DEC -2
      JSB .IENT
      JSB ERROR
TRGER JSB FLOAT
      JSB ARINV
      JSB .PWR2
      DEC 2
      JSB .FADA,I
      DEF XTEMP
      STA XTEMP
      STB XTEMP+1   X=X-4*ENTIER((X+1)/4)
      JSB .FSBA,I
      DEF K1
      STA SBOX      TEMPORARY
      SSA           X<1?
      JMP ELSE1     YES
      LDA K2        NO
      LDB K2+1
      JSB .FSBA,I
      DEF XTEMP
BOTH1 STA YTEMP
      STB YTEMP+1   Y= 2-X
      JSB .FMPA,I
      DEF YTEMP
      JSB .FMPA,I
      DEF K2
      JSB .FSBA,I
      DEF K1
      JSB .CHEB
      DEF COEFF
      JSB .FMPA,I
      DEF YTEMP
      STA YTEMP
      STB YTEMP+1   Y=Y*CHEBY(2*Y**2-1)
      LDA SBOX
      SSA           X<1 ?
      JMP ELSE2     YES
      LDA K1
      LDB K1+1
      JSB .FDVA,I
      DEF YTEMP
      JMP FR12A,I   ANS = 1/Y
ELSE1 LDA XTEMP
      LDB XTEMP+1
      JMP BOTH1     Y=X
ELSE2 LDA YTEMP
      LDB YTEMP+1
      JMP FR12A,I   ANS = Y
*
FOPI  DEC 1.273239545    4/PI
K1    DEC 1.
XTEMP BSS 2
YTEMP BSS 2
UTEMP BSS 2
K2    DEC 2.
COEFF DEC 1.4458E-8
      DEC 2.013766E-7
      DEC 2.804816E-6
      DEC 3.906637E-5
      DEC 5.4417038E-4
      DEC 7.586101578E-3
      DEC .10675392857
      DEC 1.7701474227
      OCT 0
      SKP
*               ******************************
*               SUBROUTINE TO CALCULATE ATN(X)
*               ******************************
*
*               CALLED BY A JMP EATN WITH THE ARGUMENT
*               IN FLOATING POINT FORM IN THE REGISTERS.
*               THE FLOATING RESULT IN THE RANGE -PI/2
*               TO PI/2 IS RETURNED IN A & B
*
EATN  STA XTEMP
      STB XTEMP+1
      LDA 1
      AND MSK0
      STA SBOX      TAN = EXP OF (X)
      SZA
      SLA           ABS (X) > 1 ?
      JMP ELS1      NO
      LDA K1
      LDB K1+1
      JSB .FDVA,I
      DEF XTEMP     U=1/X
BTH1  STA UTEMP
      STB UTEMP+1
      JSB .FMPA,I
      DEF UTEMP
      JSB .FMPA,I
      DEF K2
      JSB .FSBA,I
      DEF K1
      JSB .CHEB
      DEF COEF
      JSB .FMPA,I
      DEF UTEMP
      STA YTEMP
      STB YTEMP+1   Y=U*CHEBY(2*U**2-1)
      LDA SBOX
      SZA
      SLA           ABS(X)>1 ?
      JMP ELS2      NO
      LDA XTEMP
      SSA           X<O ?
      JMP ELS3      YES
      LDA PIBY2
      LDB PIBY2+1
      JMP ELS3+2    ANS = PI/2 - Y
ELS1  LDA XTEMP
      LDB XTEMP+1
      JMP BTH1      U=X
ELS2  LDA YTEMP
      LDB YTEMP+1
      JMP FR12A,I   ANS = Y
ELS3  LDA MP2
      LDB MP2+1
      JSB .FSBA,I
      DEF YTEMP     ANS=-PI/2-Y
      JMP FR12A,I
*
PIBY2 DEC 1.5707963268   PI/2
MP2   DEC -1.5707963268  -PI/2
COEF  DEC -1.33034E-8
      DEC 8.64888E-8
      DEC -56.99186E-8
      DEC 3.821037E-6
      DEC -2.6215196E-5
      DEC 1.8574297E-4
      DEC -1.381195004E-3
      DEC .01113584206
      DEC -.1058929245
      DEC 1.762747174
      OCT 0
      SPC 5
*               ******************************
*               SUBROUTINE TO COMPUTE ABS(X)
*               ******************************
*
*               CALLED BY A JMP EABS WITH THE ARGUMENT
*               IN FLOATING POINT FORM IN THE REGISTERS.
*               THE ABSOLUTE VALUE IN FLOATING POINT
*               IS RETURNED IN A S B
*
EABS  SSA           NEGATIVE?
      JSB ARINV     YES, NEGATE IT
      JMP FR12A,I
      SKP
*               ******************************
*               SUBROUTINE TO CALCULATE SIN(X)
*               ******************************
*
*               CALLED BY A JMP ESIN WITH THE ARGUMENT
*               IN FLOATING RADIANS IN THE REGISTERS.
*               THE FLOATING RESULT IS RETURNED IN A 8 B
*
ECOS  JSB .FADA,I
      DEF PIBY2
ESIN  JSB .FMPA,I
      DEF TOPI
      STA XTEMP
      STB XTEMP+1   X=2*X/PI
      JSB .FADA,I
      DEF K1
      JSB .PWR2
      DEC -2
      JSB .IENT
      JMP TRGER-1   ERROR IF EXPONENT >= 15
      JSB FLOAT
      JSB .FMPA,I
      DEF MM4
      JSB .FADA,I
      DEF XTEMP
      STA XTEMP
      STB XTEMP+1   X=X-4*ENTIER((X+1)/4)
      JSB .FSBA,I
      DEF K1
      SSA           X<1 ?
      JMP PAST      YES
      LDA K2
      LDB K2+1
      JSB .FSBA,I
      DEF XTEMP
      STA XTEMP
      STB XTEMP+1   X=2-X
PAST  LDA XTEMP
      LDB XTEMP+1
      JSB .FMPA,I
      DEF XTEMP
      JSB .PWR2
      DEC 1
      JSB .FSBA,I
      DEF K1
      JSB .CHEB
      DEF COEF1
      JSB .FMPA,I
      DEF XTEMP
      JMP FR12A,I   ANS=X+CHEBYI2*X**2-1)
*
TOPI  DEC .636619772     2/PI
MM4   DEC -4.
COEF1 DEC 1.18496E-6
      DEC -1.365875E-4
      DEC 9.118016E-3
      DEC -.2852615692
      DEC 2.5525579248
      OCT 0
      SPC 5
*               *****************************
*               SUSROUTINE TO COMPUTE RND(X)
*               *****************************
*
*               THE ARGUMENT OF RND IS A DUMMY ONE
*               THE ROUTINE GENERATES A RANDOM NUMBER
*               IN THE A & B REGISTERS
*
*  R=X/M, X=C*X MOD M, M=2^31, C=2^15 + 3
*
ERND  CLA           X IS INITIALLY 1
      STA EXP       INITIALIZE EXPONENT
      LDA XH        COMPUTE
      ALS             HIGH
      ADA XH            PART
      LDB XL              2*XH
      CLE,ERB               + XH +
      ADA 1                   XL*2^15
      LDB XL
      RBL,CLE,SLB,ERB    ADD XL[15] TO
      INA                  (A) (FROM 2*XL)
      CLE,ELB            2*XL
      ADB XL               + XL
      ELA,CLE,SLA,ERA    ADD OVERFLOW
      CLE,INA              TO (A)
      ADB FLGBT     ADD IN TRAILING BIT OF XL*2^15
      SEZ           ADD OVERFLOW
      INA             TO (A)
      ELA,CLE,ERA   ERASE A[15]
      STA XH        STORE
      STB XL          INTEGER
      JSB .PACK     NORMALIZE AND PACK
      JMP FR12A,I
      SKP
*               ******************************
*               SUBROUTINE TO CALCULATE SQR(X)
*               ******************************
*
*               CALLED BY A JMP ESQR WITH THE ARGUMENT
*               IN FLOATING POINT FORM IN THE REGISTERS.
*               THE FLOATING RESULT IS RETURNED IN A & B
*
ESQR  SZA,RSS       X=0 ?
      JMP FR12A,I   YES, ANS = 0
      SSA           X<O ?
      JSB ERROR     YES ERROR
SQRER STA XTEMP
      JSB .FLUN
      SLA,ARS       EXP(X) ODD?
      JMP ODD
      ADA M1
      STA SBOX      SBOX=EXPO(X)/2-1
      STB XTEMP+1   LOW MANTISSA/2
      LDA XTEMP
      JSB .FMPA,I
      DEF SA2
      JSB .FADA,I
      DEF SB2       Y=SB2+SA2*X
BTH2  STA YTEMP
      STB YTEMP+1
      LDA XTEMP
      LDB XTEMP+1
      JSB .FDVA,I
      DEF YTEMP
      JSB .FADA,I
      DEF YTEMP
      JSB .PWR2
      DEC -1
      STA YTEMP
      STB YTEMP+1   Y=(Y+X/Y)/2
      LDA XTEMP
      LDB XTEMP+1
      JSB .FDVA,I
      DEF YTEMP
      JSB .FADA,I
      DEF YTEMP
      STA YTEMP
      STB YTEMP+1
      JSB .PWR2
SBOX  OCT 0
      JMP FR12A,I   ANS=(P+F/P)*2**SBOX
ODD   STA SBOX      SBOX = EXP(X)/2
      ADB MSK0
      STB XTEMP+1   LOW MANTISSA/2
      LDA XTEMP
      JSB .FMPA,I
      DEF SA1
      JSB .FADA,I
      DEF SB1
      JMP BTH2      Y=SB1+SA1*X
*
SA1   DEC .875
SA2   DEC .578125
SB1   DEC .27863
SB2   DEC .421875
      SPC 5
*               ******************************
*               SUBROUTINE TO CALCULATE INT(X)
*               ******************************
*
*               CALLED BY A JMP EINT WITH THE ARGUMENT
*               IN FLOATING POINT FORM IN THE REGISTERS.
*               ENTIER(X) IS FLOATED AND RETURNED IN A & B
*
*               CALCULATES THE FLOATING POINT EQUIVALENT
*               OF ENTIER(X)
*
EINT  STB SBOX      SAVE LOW WORD
      LDB .31       PRESET BIAS FOR
      STB EXP         BINARY POINT
      LDB SBOX      24-BIT
      JSB IFIX        INTEGER?
      JMP EINT1     NO
      JSB .PACK     YES, PACK IT
      JMP FR12A,I
EINT1 LDA GETCR     RETRIEVE
      LDB SBOX        NUMBER
      JMP FR12A,I
      SKP
*               ******************************
*               SUBROUTINE TO CALCULATE LOG(X)
*               ******************************
*
*               CALLED BY A JMP ELOG WITH THE ARGUMENT
*               IN FLOATING POINT FORM IN THE REGISTERS.
*               THE FLOATING RESULT IS RETURNED IN A & B
*
ELOG  JSB .LOG
      JMP FR12A,I
.LOG  NOP
      SZA,RSS       NON-ZERO ARGUMENT?
      JMP .LOG1     NO
      SSA           YES, POSITIVE ARGUMENT?
      JSB ERROR     NO
LOGER STA XTEMP     YES
      JSB .FLUN
      STB XTEMP+1
      JSB FLOAT
      STA YTEMP
      STB YTEMP+1   Y=EXPO(X)
      LDA XTEMP
      LDB XTEMP+1
      JSB .FADA,I
      DEF R22
      STA UTEMP
      STB UTEMP+1   U=X+SQR(0.5)
      LDA XTEMP
      LDB XTEMP+1
      JSB .FSBA,I
      DEF R22
      JSB .FDVA,I
      DEF UTEMP
      STA UTEMP
      STB UTEMP+1   U=(X-SQR(0.5))/U
      JSB .FMPA,I
      DEF UTEMP
      JSB .FSBA,I
      DEF CCC
      STA XTEMP
      STB XTEMP+1
      LDA MB
      LDB MB+1
      JSB .FDVA,I
      DEF XTEMP
      JSB .FADA,I
      DEF AAA
      JSB .FMPA,I
      DEF UTEMP
      JSB .FSBA,I
      DEF HALF
      JSB .FADA,I
      DEF YTEMP
      JSB .FMPA,I
      DEF LE2
      JMP .LOG,I    ANS=LOG(2)*(EXPO(X)-0.5+U*
*                                   (A-B/X))
.LOG1 JSB ERROR     LOG OF ZERO
LNZR  LDA MNEG      RETURN
      LDB B776        NEGATIVE
      JMP .LOG,I        INFINITY
*
R22   DEC .707106781     SQR(0.5)
LE2   DEC .6931471806    LOG BASE E OF 2
AAA   DEC 1.2920070987
MB    DEC -2.6398577035
CCC   DEC 1.6567626301
      SPC 5
*               ******************************
*               SUBROUTINE TO COMPUTE SGN(X)
*               ******************************
*
*               CALLED BY A JMP ESGN WITH THE ARGUMENT
*               IN FLOATING POINT FORM IN THE REGISTERS.
*               ON RETURN A & B CONTAIN THE FOLLOWING:
*
*               IF X>0 THEN +1.
*               IF X=0 THEN  0
*               IF X<0 THEN -1.
*
ESGN  CLB
      SZA,RSS       ZERO?
      JMP FR12A,I   YES
      SSA,RSS       NO, POSITIVE?
      LDB .2        YES, SET EXPONENT
      LDA FLGBT     LOAD MANTISSA
      SZB           POSITIVE?
      RAR           YES, CORRECT MANTISSA
      JMP FR12A,I
      SKP
*               ******************************
*               SUBROUTINE TO CALCULATE EXP(X)
*               ******************************
*
*               CALLED BY A JMP EEXP WITH THE ARGUMENT
*               IN FLOATING POINT FORM IN THE REGISTERS.
*               THE FLOATING RESULT IS RETURNED IN A & B
*
EEXP  JSB .EXP
      JMP FR12A,I
.EXP  NOP
      JSB .FMPA,I
      DEF L2E
      STA XTEMP
      STB XTEMP+1   X=Z*LOG2(E)
      JSB .IENT
      JMP .EXP1
      STA INTE      INTE = ENTIER(X)
      JSB FLOAT
      STA YTEMP
      STB YTEMP+1   Y=ENTIER(X)
      LDA INTE
      ADA M124
      SSA,RSS       INTE >=124 ?
      JMP EXPER-1   YES,ERROR
      ADA .244      INTE <-120 ?
      SSA
      JMP ZERE      YES,ANS=0
      LDA XTEMP
      LDB XTEMP+1
      JSB .FSBA,I
      DEF YTEMP
      STA XTEMP
      STB XTEMP+1   X=X-ENTIER(X)
      JSB .FMPA,I
      DEF XTEMP
      STA UTEMP
      STB UTEMP+1   U=X**2
      JSB .FADA,I
      DEF AAAA
      STA YTEMP
      STB YTEMP+1   Y=X**2+AAAA
      LDA BBBB
      LDB BBBB+1
      JSB .FDVA,I
      DEF YTEMP
      STA YTEMP
      STB YTEMP+1   Y=BBBB/Y
      LDA CCCC
      LDB CCCC+1
      JSB .FMPA,I
      DEF UTEMP
      JSB .FADA,I
      DEF DDDD
      JSB .FSBA,I
      DEF XTEMP
      JSB .FSBA,I
      DEF YTEMP
      STA YTEMP
      STB YTEMP+1   Y=-X+DDDD+CCCC*X**2-Y
      LDA XTEMP
      LDB XTEMP+1
      JSB .FDVA,I
      DEF YTEMP
      JSB .FADA,I
      DEF HALF
      ISZ INTE
      NOP
      JSB .PWR2
INTE  OCT 0
      JMP .EXP,I    ANS=(0.5+X/Y)*2**INTE
ZERE  CLA
      CLB
      JMP .EXP,I    ANS=0
.EXP1 LDA X2TMP
      SSA
      JMP ZERE
      JSB ERROR
EXPER LDA INF
      LDB M2
      JMP .EXP,I
*
M124  DEC -124
.244  DEC 244
AAAA  DEC 87.417497202
BBBB  DEC 617.9722695
CCCC  DEC .03465735903
DDDD  DEC 9.9545957821
L2E   DEC 1.4426950409
      SKP
*               ******************************
*               SUBROUTINE TO COMPUTE CHEBY(X)
*               ******************************
*
*               CALLING SEQUENCE:
*
*               LDA X         (FLOATING)
*               LDB X+1
*               JSB .CHEB     (RESULT FLOATING)
*               DEF C         (TABLE OF CHEBY.COEFFS.,FLOATING)
*
.CHEB NOP
      JSB .FMPA,I
      DEF K2
      STA X2TMP
      STB X2TMP+1   X2 =X*2
      LDB .CHEB,I
      STB CTMP      C POINTS TO COEFFICIENT TABLE
      LDA 1,I
      INB
      LDB 1,I       GET FIRST COEFF
      STA DTMP
      STB DTMP+1    D=C(N)
      CLA
      STA BTMP
      STA BTMP+1    B=0
LOPC  ISZ CTMP
      ISZ CTMP      N=N-1
      LDA CTMP,I
      SZA,RSS       C(N)=0 ?
      JMP COUT      ZERO FLAGS END OF TABLE
      LDA BTMP      NO
      LDB BTMP+1
      STA ATMP
      STB ATMP+1    A=B
      LDA DTMP
      LDB DTMP+1
      STA BTMP
      STB BTMP+1    B=D
      JSB .FMPA,I
      DEF X2TMP
      JSB .FSBA,I
      DEF ATMP
      JSB .FADA,I
      DEF CTMP,I
      STA DTMP
      STB DTMP+1    D=C(N) -A+B*X2
      JMP LOPC
COUT  LDA DTMP
      LDB DTMP+1
      JSB .FSBA,I
      DEF ATMP
      JSB .FMPA,I
      DEF HALF
      ISZ .CHEB
      JMP .CHEB,I   ANS=(D-A)/2
*
X2TMP BSS 2
ATMP  BSS 2
BTMP  BSS 2
CTMP  BSS 2
DTMP  BSS 2
      SPC 5
*               ********************************************
*               SUBROUTINE TO COMPUTE THE ENTIER OF A NUMBER
*               WHOSE EXPONENT IS LESS THAN 15
*               ********************************************
*
*               CALLING SEQUENCE:
*
*               LDA X         (FLOATING)
*               LDA X+1
*               JSB .IENT.    (RESULT INTERGER)
*               JSB ERROR     (EXIT IF EXPO(X)>14)
*
*
.IENT NOP
      STA X2TMP     STORE HIGH PART
      LDA 1         MOVE LOW PART TO A
      AND MSK0      ISOLATE EXPONENT
      SLA,RAR
      JMP *+4       IF NEGATIVE OK
      ADA M15
      SSA,RSS       EXPO(X) > 14
      JMP .IENT,I   YES, ERROR RETURN
      ISZ .IENT     NO BUMP RETURN POINT
      LDA X2TMP     RESTORE HIGH PART
      JSB IFIX      CALL ENTIER
      NOP
      LDA 1         PUT RESULT INTO (A)
      JMP .IENT,I
      SKP
*               ******************************
*               SUBROUTINE TO FLOAT AN INTEGER
*               ******************************
*
*               CALLED BY JSB FLOAT WITH INTEGER IN A
*               THE FLUATING POINT EQUIVALENT IS RETURNED
*               IN A & B
*
FLOAT NOP
      LDB .15
      STB EXP
      CLB
      JSB .PACK
      JMP FLOAT,I
      SPC 5
*               ****************************************
*               SUBROUTINE TO MULTIPLY BY A POWER OF TWO
*               ****************************************
*
*               CALLING SEQUENCE
*
*               LDA X         (FLOATING)
*               LDB X+1
*               JSB .RWR2     (RESULT FLOATING)
*               DEC N         (INTEGER POWER)
*
*               RETURNS WITH X*2^N IN A&B
*               NO CHECK IS MADE FOR EXPONENT
*               OVERFLOW OR UNDERFLOW
*
.PWR2 NOP
      SZA,RSS       X=0 ?
      JMP .RET      YES, ANS=0
      STA X2TMP
      JSB .FLUN
      STB X2TMP+1
      ADA .PWR2,I
      RAL
      AND MSK0      NEW EXPO = (OLD EXPO) +N
      STA 1
      ADB X2TMP+1   KEEP OLD MANTISSA
      LDA X2TMP
.RET  ISZ .PWR2
      JMP .PWR2,I
      SPC 2
TT1   EQU .FDV
TT2   EQU IDIV
TT3   EQU TEMPS+4
TT4   EQU TEMPS+5
FFLAG EQU SBOX
      HED MATRIX ROUTINES
*               *****************************
*               MATRIX STMT EXECUTION CONTROL
*               *****************************
EMAT  LDA TEMPS,I
      ISZ TEMPS     MAT READ
      AND MSK1        OR
      SZA               MAT PRINT?
      JMP EMAT7     NO
      LDA TEMPS,I   YES
      AND OPMSK     SAVE
      STA MLBX1       TYPE
      CPA RDOP      PRINT?
      RSS           NO
      JSB PRNIA,I   YES
*
EMAT1 LDA TEMPS,I   LOAD
      AND MSK1        OPERAND
      SZA,RSS       NULL? (END OF MAT PRINT)
      JMP XEC4A,I   YES
      JSB SSYMA,I   NO, SEARCH SYMBOL TABLE
      INB,SZB,RSS   FOUND?
      JMP E8M1A,I   NO
      ISZ TEMPS     YES
      LDA 1,I       SAVE ARRAY
      STA B1          BASE ADDRESS
      LDA MLBX1
      CPA RDOP      READ?
      JMP EMAT5     YES
      ADB .2        NO
      LDA 1,I       SAVE
      STA B1+1        DIMENSIONS
      AND MSK0      SET
      CMA,INA         COLUMN
      STA B2            COUNTERS
      STA B2+1
      LDA 1,I       SET
      ALF,ALF
      AND MSK0        ROW
      CMA,INA
      STA B3            COUNTER
      JSB LCK2A,I   ENSURE ARRAY IS DEFINED
      CLA           SET DELIMITER
      STA MCKS        AS COMMA
      LDA TEMPS     MORE
      CPA PRADD       STATEMENT?
      JMP EMAT3     NO
      LDA TEMPS,I   YES
      AND OPMSK     EXTRACT DELIMITER
      CPA B3000     SEMICOLON?
      ISZ MCKS      YES
      JMP EMAT3
EMAT2 CLB           COMMA
      CPB MCKS        DELIMETER?
      JSB EDELM     YES
EMAT3 LDA B1,I      LOAD
      ISZ B1          NEXT
      LDB B1,I          ELEMENT
      ISZ B1
      JSB ENOUT     OUTPUT IT
      ISZ B2        ROW COMPLETE?
      JMP EMAT2     NO
      JSB OUTLN     YES, DO
      JSB OUTLN       SPACING
      LDA B2+1      RESET
      STA B2          COLUMN COUNTER
      ISZ B3        ARRAY EXHAUSTED?
      JMP EMAT3     NO
EMAT4 LDB TEMPS     YES, MORE
      CPB PRADD       STATEMENT?
      JMP XEC4A,I   NO
      JMP EMAT1     YES
*
EMAT5 STB B2        SAVE SYMBOL TABLE POINTER
      LDA TEMPS,I   EXTRACT
      AND OPMSK       NEXT OPERATOR
      LDB TEMPS     STATEMENT
      CPB PRADD       EXHAUSTED?
      CLA           YES
      CPA B2200     'I' ?
      JSB REDIM     YES, REDIMENSION ARRAY
      LDA B2        LOAD
      ADA .2          ARRAY
      LDA 0,I           DIMENSIONS
      JSB MDIM      SET
      ARS             ARRAY
      CMA,INA           ELEMENT
      STA B3              COUNTER
EMAT6 JSB FDAT,I    FETCH VALUE
      STA B1,I      STORE
      ISZ B1
      STB B1,I        IT
      ISZ B1
      ISZ B3        ARRAY EXHAUSTED?
      JMP EMAT6     NO
      JMP EMAT4     YES
*
EMAT7 JSB SSYMA,I   SAVE
      INB             BASE ADDRESS
      LDA 1,I           OF DESTINATION
      STA B3              ARRAY
      STB B2        SAVE SYMBOL TABLE ADDRESS
      ADB .2        SAVE
      LDA 1,I         ITS
      STA B3+1          DIMENSIONS
      CLA,INA       ASSUME MAT
      STA EDELM       REPLACEMENT
EMAT0 LDA TEMPS,I   LOAD NEXT
      ISZ TEMPS       OPERAND
      SSA           ARRAY FUNCTION?
      JMP EMA11     YES
EMAT8 AND MSK1      NO
      SZA,RSS       SCALAR MULTIPLICATION?
      JMP EMA10     YES
      JSB SSYMA,I   NO
      INB           SAVE
      LDA 1,I         BASE
      STA B1            ADDRESS AND
      ADB .2              DIMENSIONS
      LDA 1,I               OF FIRST
      STA B1+1                SOURCE ARRAY
      LDB TEMPS     STATEMENT
      CPB PRADD       EXHAUSTED?
      JMP EMAT9     YES
      LDA TEMPS,I   NO
      ARS           EXTRACT
      ALF,ALF         AND
      AND .63           RECORD
      ADA M6              EMAT
      STA EDELM             OPERATOR
      LDA TEMPS,I   SAVE
      AND MSK1
      JSB SSYMA,I     BASE ADDRESS
      INB
      LDA 1,I           AND DIMENSIONS
      STA B2
      ADB .2              OF SECOND
      LDA 1,I
      STA B2+1              SOURCE ARRAY
*
EMAT9 LDA EDELM     TRANSFER TO
      ADA LMAP        APPROPRIATE
      JSB 0,I           ROUTINE
      JMP XEC4A,I
*
LMAP  DEF LBASE-1,I
LBASE DEF REPLC
      DEF ADD
      DEF SUB
      DEF MULT
      DEF SZER
      DEF LCON
      DEF LIDN
      DEF LINV
      DEF TRAN
      DEF SMULT
*
EMA10 LDA .10       SET 8MULT
      STA EDELM       OPERATOR
      JSB FETCA,I   EVALUATE
      STA MLBX1       AND SAVE
      STB MLBX1+1       SCALAR
      ISZ TEMPS     GO TO
      ISZ TEMPS       PROCESS
      JMP EMAT0         SOURCE ARRAY
*
EMA11 ALF,ALF       EXTRACT
      ALF
      AND .31         TYPE
      ADA M8        RECORD EMAT
      STA EDELM       OFERATOR TYPE
      ADA M8        INV OR
      SSA             TRN?
      JMP EMA12     NO
      LDA TEMPS,I   YES, LOAD
      ISZ TEMPS       SOURCE
      ISZ TEMPS         ARRAY
      JMP EMAT8           SYMBOL
*
EMA12 LDB TEMPS     REDIMENSIONING
      CPB PRADD       PART?
      JMP EMAT9     NO
      JSB REDIM     YES
      JMP EMAT9
      SPC 5
*               *******************************
*               SUBROUTINE TO REDIMENSION ARRAY
*               *******************************
REDIM NOP
      JSB MCKS      EVALUATE
      BLF,BLF         AND SAVE
      STB B3+1          ROW COUNT
      CLB,INB       LOAD DEFAULT COLUMN COUNT
      ISZ TEMPS     SINGLE
      LDA TEMPS,I     DIMENSION
      AND OPMSK         ARRAY?
      CPA LF
      JMP REDI1     YES
      JSB MCKS      NO, EVALUATE COLUMN COUNT
      ISZ TEMPS     MOVE PAST
REDI1 ISZ TEMPS       RIGHT BRACKET
      ADB B3+1      PACK
      STB B3+1        DIMENSIONS
      LDA B2        STORE IN
      ADA .2          SYMBOL
      STB 0,I           TABLE
      ADA M1        COMPUTE
      LDA 0,I         PHYSICAL
      JSB MDIM          ARRAY SPACE
      STA MLBX1+1         SIZE
      LDA B3+1      COMPUTE
      JSB MDIM        NEW SIZE
      CMA,INA       NEW
      ADA MLBX1+1     SIZE
      SSA               ACCEPTABLE?
      JSB ERROR     NO
E7    JMP REDIM,I   YES
      SKP
*               ******************************************
*               SUBROUTINE TO EVALUATE & CHECK A SUBSCRIPT
*               ******************************************
MCKS  NOP
      JSB FETCA,I   CALL FOR EVALUATION
      JSB SBFIX     CONVERT TO INTEGER (ROUNDED)
      INB           UNBIAS SUBSCRIPT
      LDA 1         PUT INTO (A)
      ADA M256      LESS THAN
      SSA,RSS         256?
      JMP E6M1A,I   NO
      JMP MCKS,I    YES, RETURN SUBSCRIPT IN (B)
      SKP
      ORG 12000B
*
*********************************************
******      MATRIX   ROUTINES        ********
*********************************************
*CALL FOR MATRIX OPERATION IS MADE WITH FOUR*
*PARAMETERS,ROUTINE NUMBER AND ADDRESS OF   *
*SYMBOL TABLE OF THREE MATRICES. FOR SCALAR *
*MULT,LAST IS ADDRESS OF SCALAR VALUE       *
*OPERATION IS OF FORM  B3=B1 OP B2          *
*THE ADDRESS OF THE BASE ADDRESS OF MATRICES*
*IS GIVEN IN B1,B2,B3. THE DIMENSIONS OF A  *
*MATRIX IS GIVEN IN B(I)+1, ROWS IN MOST SIG*
*PART(MSP) AND COLUMN IN LEAST SIG PART(LSP)*
*********************************************
*
*
*
*********************************************
***       SUBROUTINE  GENERAL             ***
*********************************************
*B3=B1 OP B2  SUBROUTINE COMPUTES AN ELEMENT*
*OF B3 AND INCREMENTS TO NEXT ELEMENT. THE  *
*OPERATION THAT IS PERFORMED AND            *
* THE MATRICES INCREMENTED ARE              *
*  MODIFIED BY ROUTINES ADD, SUB, REPL      *
*SCALAR MULT, CON,ZERO,IDN. ROUTINE CHECKS  *
*COMPATIBILITY OF THREE MATRICES USING SUB  *
*COMPARE (PARAMETERS SUPPLIED IN REG A,B)   *
*********************************************
*
GENER NOP           SUBROUTINE GENERAL
      LDA B2+1      LOAD DIM FOR MATRIX 2
      LDB B1+1      LOAD DIM FOR MATRIX 1
      JSB COMPR     CHECKS ROW AND COL DIM
*                                   ARE COMPATIBLE
GEN2  LDA B1+1      LOAD DIM FOR MATRIX 1
      LDB B3+1      LOAD DIM FOR MATRIX 3
      JSB COMPR     CHECK ROW AND COL DIM
      JSB MPY       COLUMNS IN (A)
      DEF T3        ROWS IN T3
      CMA,INA
      STA LPIV      -ROWS*COLUMNS
*                                   COMPUTES B3=B1 OP B2
LOOP  LDA B1,I      LOAD
      ISZ B1          NEXT
      LDB B1,I          SOURCE
      ISZ B1              ELEMENT
MOD1  NOP           USUALLY A JSB
      NOP           USUALLY DEF B2,I
      STA B3,I      STORE
      ISZ B3          NEXT
      STB B3,I          DESTINATION
      ISZ B3              ELEMENT
MOD2  NOP           ISZ B2 FOR
      NOP             MAT ADD OR SUB
      ISZ LPIV
      JMP LOOP      COMPUTE NEXT ELEMENT
      JMP GENER,I
*
*
*********************************************
****      SUBROUTINE COMPARE             ****
*********************************************
*ROUTINE COMPARES DIM OF TWO MATRICES GIVEN *
*THEIR DIM IN REGISTERS A,B                 *
*DIMENSIONS ARE GIVEN IN B(I)+2             *
*********************************************
*
COMPR NOP
      CPA 1         EQUAL?
      RSS           YES
LERR  JSB ERROR     NO
      ALF,ALF       SAVE
      AND MSK0        # OF
      STA T3            ROWS
      LDA 1
      AND MSK0      SAVE #
      STA T4          OF COLUMNS
      JMP COMPR,I
*
*
*********************************************
******     SUBROUTINE   LCHK           ******
*********************************************
*TESTS THAT NO ELEMENT IN A MATRIX IS       *
*UNASSIGNED. ENTRY1 CHECKS MATRICES GIVEN BY*
*B1 AND B2 AND ENTRY 2 CHECKS ONLY B1       *
*********************************************
*
LCHK2 NOP
      LDA LCHK2
      STA LCHK1
      JMP *+5
LCHK1 NOP
      LDB B2        BASE ADDR
      LDA B2+1      ROW AND COL DIM.
      JSB LCHK4     TEST EACH TERM OF B2
      LDB B1        BASE ADDR
      LDA B1+1      ROW AND COL DIM.
      JSB LCHK4     TEST EACH TERM OF B1
      JMP LCHK1,I
*
LCHK4 NOP           SUBROUTINE TO TEST TERMS
      STB T6        SAVE
      JSB MDIM      COMPUTE SIZE OF MATRIX
      ARS           SET NEGATIVE
      CMA,INA
      STA T7        COUNTER FOR ELEMENTS
LCHK6 LDA T6,I      LOAD
      ISZ T6
      LDB T6,I        ELEMENT
      ISZ T6
      CPA MNEG      COMPARE WITH PRESET QTY.
      JMP *+2
      JMP LCHK5
      CPB MNEG+1
      JSB ERROR     ERROR 'MAT UNASSIGNED'
LCHK5 ISZ T7        DONE?
      JMP LCHK6     NO
      JMP LCHK4,I   YES
*
*
*********************************************
****  SUBROUTINE  MAIRIX  ADD            ****
*********************************************
*B1,B2,B3 CONTAIN ADDRESS OF BASE ADDRESS OF*
*THREE MATRICES. ROUTINE EXECUTES B3=B1+B2  *
*BY MODIFYING INSTR IN ROUTINE GENERAL      *
*********************************************
*
ADD   NOP
      LDA LPLUS     JSB .FAD
ADD1  STA MOD1      SET IN GENER
      LDA LPLUS+1   DEF OF B2,I
      STA MOD1+1    MODIFY ROUTINE GENERAL
      LDA INCB2     ISZ B2
      STA MOD2
      STA MOD2+1
      JSB LCHK1     TEST B1,B2 FOR UNASSIGNED TERMS
      JSB GENER     ROUTINE GENERAL
      JMP ADD,I     EXIT TO MAIN PROGRAM
*
*
*********************************************
****  SUBROUTINE  MATRIX  SUBTRACT       ****
*********************************************
*B1,B2,B3 CONTAIN ADDRESS OF BASE ADDRESS OF*
*THREE MATRICES. ROUTINE EXECUTES B3=B1-B2  *
*BY MODIFYING INSTR IN ROUTINE GENERAL      *
*********************************************
*
SUB   NOP           LET
      LDA SUB         ADD DO
      STA ADD           RETURN
      LDA LMIN      JSB .FSB
      JMP ADD1
      SKP
*
*********************************************
****   SUBROUTINE  MATRIX  REPLACE       ****
*********************************************
*B1,B3 GIVE ADDRESS OF BASE ADDRESS OF GIVEN*
*MATRIX AND RECEIVING MATRIX RESPECTIVELY   *
*********************************************
REPLC NOP           LET
      LDA REPLC       GENER DO
      STA GENER         RETURN
      CLA           NO
      CLB             OPERATION
REPL1 STA MOD1      SET
      STB MOD1+1      OPERATION
      CLA           B2
      STA MOD2        NOT
      STA MOD2+1        USED
      JSB LCHK2     TEST B1 FOR UNASSIGNED ELEMENTS
      JMP GEN2
*
*
*********************************************
****  SUBROUTINE MATRIX SCALAR MULT      ****
*********************************************
*B1,B3 GIVE ADDRESS OF BASE ADDRESS OF GIVEN*
*MATRIX AND RECEIVING MATRIX RESPECTIVELY   *
*MBXL HOLDS ADDRESS OF SCALAR VALUE         *
*********************************************
*
SMULT NOP           LET
      LDA SMULT       GENER DO
      STA GENER         RETURN
      LDA LTIME     SET FOR
      LDB MBXL        MULTIPLY
      JMP REPL1
*
*
*********************************************
****    SUBROUTINE  MATRIX  CON          ****
*********************************************
*SETS MATRIX TO ALL ONES.  B3 IS ADDRESS OF *
*BASE ADDRESS OF MATRIX.                    *
*********************************************
*
LCON  NOP
      LDA HONE
      LDB .2
LCON1 STA MLBX1     SET
      STB MLBX1+1     CONSTANT
      LDA B3+1
      JSB MDIM      SET
      ARS             ELEMENT
      CMA,INA           COUNTER
      STA LPIV
      LDA MLBX1     LOAD
      LDB MLBX1+1     CONSTANT
LCON2 STA B3,I      STORE
      ISZ B3          IN
      STB B3,I          NEXT
      ISZ B3              ELEMENT
      ISZ LPIV      DONE?
      JMP LCON2     NO
      JMP LCON,I    YES
*
*
*********************************************
****    SUBROUTINE  MATRIX  ZERO         ****
*********************************************
*SETS MATRIX TO ZERO. B3 IS ADDRESS OF BASE *
*ADDRESS OF MATRIX.  B1,B2 ARE REDUNDANT    *
*SET B1=0 AND USE SUBROUTINE CON,ENTRY2     *
*********************************************
*
SZER  NOP
      LDA SZER      CONVERT
      STA LCON
      CLA             LCON
      CLB
      JMP LCON1         TO SZER
*
*
*********************************************
****    SUBROUTINE  MATRIX  IDN          ****
*********************************************
*ROUTINE SETS UP IDENTITY MATRIX            *
*B3 IS ADDRESS OF BASE ADDRESS OF MATRIX    *
*USE SZER TO SET MATRIX TO ALL ZEROS.  ON   *
*RETURN CHECK FOR SQUARE MATRIX.            *
*********************************************
*
LIDN  NOP
      LDA B3
      STA T9        SAVE BASE ADDRESS
      JSB SZER      SET ALL MATRIX TO ZERO
      LDA B3+1      IS
      ALF,ALF         ARRAY
      CPA B3+1          SQUARE?
      ALS,SLA       YES
      JMP LERR      NO
      AND MSK1      SAVE ROW
      STA MLBX1       LENGTH
      ARS           SAVE
      CMA,INA         ROW
      STA MLBX1+1       COUNTER
      LDB T9        RESTORE
      STB B3          B3
LIDN1 LDA HONE      STORE
      STA 1,I
      INB             1.0 ON
      LDA .2
      STA 1,I           DIAGONAL
      INB
      ADB MLBX1     MOVE TO NEXT DIAGONAL ELEMENT
      ISZ MLBX1+1   DONE?
      JMP LIDN1     NO
      JMP LIDN,I    YES
*
*
*********************************************
*****     SUBROUTINES DLD AND DST      ******
*********************************************
*
*
*
.DLD  NOP
      JSB GETAD     GET ADDRESS
      DEF .DLD,I
      ISZ .DLD      BUMP RETURN ADDRESS
      LDA ADRES,I   LOAD HIGH PART.
      ISZ ADRES
      LDB ADRES,I   LOAD LOW PART.
      JMP .DLD,I
*
.DST  NOP
      JSB GETAD     GET ADDRESS.
      DEF .DST,I
      ISZ .DST      BUMP RETURN ADDRESS.
      STA ADRES,I   STORE HIGH PART.
      ISZ ADRES
      STB ADRES,I   STORE LOW PART.
      JMP .DST,I
*
GETAD NOP           COMPUTES EFFECTIVE ADDRESS.
      STA TINY      SAVE A REGISTER.
      LDA GETAD,I   GET POINTER TO ADDRESS.
GET   STA ADRES     STORE IN ADRES.
      LDA TINY      RESTORE A REGISTER.
      LDA ADRES,I
      RAL,CLE,SLA,ERA  TEST FOR INDIRECT
      JMP GET       IT IS INDIRECT.
      STA ADRES     EFFECTIVE ADDRESS.
      LDA TINY
      ISZ GETAD     RETURN
      JMP GETAD,I
ADRES BSS 1
TINY  BSS 1
      SKP
*
*********************************************
****      SUBROUTINE  TRANSPOSE         *****
*********************************************
*TRANSPOSE OF FORM B3(M,N)=T(B1(N,M))       *
*B1,B3 GIVE ADDRESS OF BASE ADDRESS OF GIVEN*
*AND RECEIVING MATRICES RESPECTIVELY.       *
*********************************************
*
TRAN  NOP
      JSB LCHK2     TEST B1 FOR UNASSIGNED TERMS
*                                   CHECK DIMENSIONS
      LDA B3+1      PARAMETERS OF B3
      ALF,ALF       INTERCHANGE ROW AND COLUMN
      LDB B1+1      PARAMETERS OF B1
      JSB COMPR     SUBROUTINE COMPARE
*                                   DIMENSIONS COMPATIBLE
      JSB MPY       # OF COLUMNS IN (A)
      DEF T3        # OF ROWS IN T3
      STA LPIV      PRODUCT OF ROW*COL
      LDA T4        SET
      CMA,INA         COLUMN
      STA T5            COUNTER
*                                   T6 IS INDICATOR TO SELECT
*                                   WHICH ELEMENT IN A COL OF
*                                   B1 IS TO BE TRANSPOSED
TRAN1 CLA
      STA T6        SET T6=0
LNEXT LDB T6        LOAD
      BLS
      ADB B1          NEXT ELEMENT
      LDA 1,I
      INB               OF COLUMN
      LDB 1,I
      STA B3,I      STORE
      ISZ B3          IN
      STB B3,I          ROW
      ISZ B3
      LDA T6        SET T6=T6+T4
      ADA T4        T6 POINTS TO NEXT TERM IN
      STA T6        A COLUMN TO BE TRANSPOSED
      CPA LPIV      TEST FOR LAST IN COL
      JMP *+2
      JMP LNEXT
*                                   SET BASE ADDRESS TO FIRST
*                                   TERM IN NEXT COLUMN
      ISZ B1
      ISZ B1
      ISZ T5
      JMP TRAN1     TRANSPOSE NEXT COL
      JMP TRAN,I    EXIT TO MAIN PROGRAM
      SKP
*
*********************************************
****    SUBROUTINE  MATRIX  MULT         ****
*********************************************
*ROUTINE IS OF FORM B3(M,P)=B1(M,N)*B2(N,P) *
*B1,B2,B3 ARE ADDRESSES OF BASE ADDRESSES OF*
*THREE MATRICES                             *
*********************************************
*
MULT  NOP
      JSB LCHK1     TEST B1,B2 FOR UNASSIGNED TERMS
*                                   CHECK DIMENSIONS
      LDA B3+1      PARAMETERS OF B3
      AND MSK0      SAVE COLUMN COUNT
      STA T6
      LDA B2+1      PARAMETERS OF B2
      AND MSK0
      CPA T6        COLUMNS EQUAL
      RSS             IN NUMBER?
      JMP LERR      NO
*                                   COMBINE B3,B2 PARAMETERS
*                                   INTO (M,N) AND COMPARE
*                                   WITH THOSE OF B1
      LDA B3+1      PARAMETERS OF B3
      AND M256
      STA 1         STORE ROW IN MSP OF B
      LDA B2+1      PARAMETERS OF B2
      ALF,ALF       GET ROW COUNT
      AND MSK0        IN (A)
      ADA 1         COMBINE A AND B
      LDB B1+1      PARAMETERS OF B1
      JSB COMPR     COMPARE ROW AND COL
*                                   DIMENSIONS ARE COMPATIBLE
*                                   M,N ARE STORED IN T3,T4
*                                   SAVE B2 AS DESTROYED IN
      LDA B2        MULT
      STA T5
      LDA T3        SET
      CMA,INA         ROW
      STA T9            COUNTER
MULT4 LDA T6
      CMA,INA
      STA T10       SET COUNTER
      LDA T5
      STA B2        RESTORE BASE ADDRESS B2
MULT3 CLA
      STA T11       COUNTER FOR B2. INCR BY
*                                   2*P AND POINTS TO NEXT TERM
*                                   IN COL TO BE MULTIPLIED
      STA T12       COUNTER FOR B1. INCR BY 2
*                                   AND POINTS TO NEXT TERM
*                                   IN ROW TO BE MULTIPLIED
      CLB
      JSB .DST      CLEAR TO ZERO
      DEF B3,I
MULT2 LDB B1        COMPUTE PROD OF ONE TERM
      ADB T12       IN ROW BY ONE TERM IN COL
      STB T18
      LDB B2
      ADB T11
      JSB .DLD
      DEF 1,I
      JSB .FMPA,I
      DEF T18,I
      JSB .FADA,I   COMPUTES RUNNING SUM
      DEF B3,I
      JSB .DST
      DEF B3,I
      ISZ T12       SELECT NEXT TERM IN ROW
      ISZ T12
      LDA T6        SELECT NEXT TERM IN COL
      ALS
      ADA T11
      STA T11
*                                   TEST IF HAVE MULT ONE ROW
*                                   BY ONE COLUMN
      LDA T4
      ALS
      CPA T12
      JMP *+2
      JMP MULT2     MULT AND ADD IN NEXT TERM
*                                   SUMMATION OF PRODUCTS FOR
*                                   ONE TERM OF B3 IS DONE
*                                   MULT SAME ROW BY NEXT COL
      ISZ B3        INCR RECEIVING MAT
      ISZ B3
      ISZ B2        BASE ADDRESS OF NEXT COL
      ISZ B2
*                                   TEST IF HAVE MULT ONE ROW
*                                   BY ALL COLUMNS
      ISZ T10       SKIP IF INNERPRODUCT DONE
      JMP MULT3     COMPUTE SAME ROW*NEXT COL
*                                   SELECT NEXT ROW
      LDA T4
      ALS
      ADA B1
      STA B1        ADDRESS OF NEXT ROW
      ISZ T9
      JMP MULT4     MULT ROW BY ALL COLUMNS
      JMP MULT,I    EXIT TO MAIN PROGRAM
      SKP
*
*********************************************
****   SUBROUTINE  MATRIX  INVERT        ****
*********************************************
*OPERATION OF FORM  MAT B3 = INV B1         *
*B1,B3 ARE ADDRESSES OF BASE ADDRESS OF     *
*MATRIX TO BE INVERTED AND RECEIVING MATRIX *
*RESPECTIVELY. B2 IS REDUNDANT. METHOD USED *
*IS GAUSSIAN ELIMINATION WITH COLUMN        *
*PIVOTING                                   *
*********************************************
*
LINV  NOP           SUBROUTINE MATRIX INVERT
      JSB LCHK2     TEST B1 FOR UNASSIGNED TERMS
      LDA B1+1      DIMENSIONS OF MATRIX B1
      LDB B3+1      DIMENSIONS OF MATRIX B3
      JSB COMPR     CHECK DIMENSIONS
*                                   ROW AND COL VALUES T3,T4
*                                   MAKE COPY OF MATRIX B1
*                                       IN FREE CORE
      LDA B3        SAVE
      STA T13         B3
      LDA B1+1      COMPUTE SIZE
      JSB MDIM        OF MATRIX
      CMA,INA
      ARS           SAVE
      STA T2          ELEMENT
      ALS               COUNTER
      LDB LSTPT     SAVE
      INB             ADDRESS OF
      STB B2            FREE CORE
      STB B3
      CMB,INB       COMPUTE SIZE OF
      ADB HSTPT       FREE CORE AREA
      ADA 1         ENOUGH
      SSA             CORE LEFT?
      JMP E1        NO
      JSB REPLC     YES, COPY SOURCE MATRIX
      LDA T13       RESTORE
      STA B3          B3
      JSB LIDN      SET DESTINATION TO IDENTITY
      LDA T13       RESTORE ITS
      STA B3          BASE ADDRESS
      CLA           INITIALIZE
      STA T12         MAXIMUM
      STA T13           ELEMENT
      LDA B2        COPY B2 INTO B1 AS
      STA B1        B2 NEEDED LATER
LIN11 LDA B1,I      LOAD
      ISZ B1          NEXT
      LDB B1,I          ELEMENT
      ISZ B1
      SSA           GET ABSOLUTE VALUE
      JSB ARINV        IF NUMBER IS NEGATIVE
      STA T18       SAVE NUMBER
      STB T19
      JSB .FSBA,I   SUBTRACT EXISTING MAX.
      DEF T12           VALUE
      SSA           SKIP AND SWAP IF POSITIVE
      JMP LIN10
      LDA T18       SWAP
      LDB T19
      STA T12
      STB T13
LIN10 ISZ T2        ALL ELEMENTS EXHAUSTED?
      JMP LIN11     NO
      LDA T12       COMPUTE RELATIVE TOLERANCE
      LDB T13       TOL=ABSOLUTE TOL * MAX VALUE
      JSB .FMPA,I
      DEF T16       ABSOLUTE TOLERANCE
      STA MLBX1     RELATIVE
      STB MLBX1+1     TOLERANCE
      CLA           INITIALIZE PIVOT
      STA LPIV
      ISZ T4        REQUIRE CONSTANT (ROW+1)
LINV1 ISZ LPIV      SELECT NEXT PIVOT
      LDA LPIV      TEST IF HAVE PROCESSED
      CPA T4        LAST PIVOT
      JMP LINV,I    NORMAL EXIT TO MAIN PROG
*                                   SCAN PIVOTAL COLUMN FOR
*                                   LARGEST ELEMENT
      LDA LPIV      COMPUTE ADDRESS OF PIVOT
      LDB LPIV      COLUMN USING ROUTINE LWHR
      STA T2        ROW COUNTER
      JSB LWHR      ON RETURN, ADDRESS IN A
      STA T1
      CLA
      STA T12       T12,T13 IS STORE
      STA T13       FOR GREATEST VALUE
LINV2 JSB .DLD      LOAD FP NUMBER
      DEF T1,I
      SSA           OBTAIN ABSOLUTE VALUE
      JSB ARINV      IF NUMBER IS NEGATIVE
      STA T18       STORE VALUE OF FP NUMBER
      STB T19
      JSB .FSBA,I   SUBTR EXISTING LARGEST VALUE
      DEF T12
      SSA           SKIP AND SWAP IF POSITIVE
      JMP LINV7     T2 STILL CONTAINS MAX VALUE
      LDA T18       STORE NEW MAX VALUE
      LDB T19
      STA T12
      STB T13
      LDA T2        SET T5 TO POSITION IN
      STA T5        COLUMN OF MAX VALUE
LINV7 ISZ T2
      LDA T2        TEST FOR LAST TERM IN COL
      CPA T4
      JMP LINV8     SWAP ROWS
      LDA T3        COMPUTE
      ALS           NEXT ADDRESS
      ADA T1             IN PIVOT
      STA T1              COLUMN
      JMP LINV2     SELECT NEXT TERM
*                                   SWAP ROWS LPIV AND T5
LINV8 LDA LPIV      COMPUTE ADDRESS
      CLB,INB       OF PIVOTAL ROW
      JSB LWHR
      STA T1        ADDRESS OF PIVOTAL ROW
      LDA T5
      CLB,INB
      JSB LWHR
      STA T2        ADDR OF ROW TO BE SWAPPED
      LDA LPIV
      CLB,INB       COMPUTE ADDRESS OF
      JSB LWHR2     PIVOTAL ROW IN I-MATRIX
      STA T9
      STA T10       KEEP COPY
      LDA T5
      CLB,INB       COMPUTE ADDR OF ROW TO
      JSB LWHR2     BE SWAPPED IN I-MATRIX
      STA T11
      LDA T3
      CMA,INA
      STA T12       COUNTER FOR TERMS IN A ROW
LINV3 JSB .DLD      SWAP ONE ELEMENT OF ROW
      DEF T1,I
      STA T18
      STB T19
      JSB .DLD
      DEF T2,I
      STA T1,I
      ISZ T1
      STB T1,I
      ISZ T1
      LDA T18
      LDB T19
      STA T2,I
      ISZ T2
      STB T2,I
      ISZ T2
      JSB .DLD      SWAP ONE ELEMENT IN A ROW
      DEF T9,I      OF I-MATRIX
      STA T18
      STB T19
      JSB .DLD
      DEF T11,I
      STA T9,I
      ISZ T9
      STB T9,I
      ISZ T9
      LDA T18
      LDB T19
      STA T11,I
      ISZ T11
      STB T11,I
      ISZ T11
      ISZ T12       SKIP IF DONE
      JMP LINV3     SWAP NEXT ELEMENT
*                                   HAVE LARGEST ELEMENT IN
*                                   PIVOTAL POSITION. FIND
*                                   VALUE AND TEST TO ZERO
*                                   FOR SINGULAR MATRIX
      LDA LPIV      COMPUTE
      LDB LPIV        ADDRESS OF
      JSB LWHR          PIVOT
      STA T1             ELEMENT
      JSB .DLD        PIVOT VALUE
      DEF T1,I
      SSA           OBTAIN ABSOLUTE VALUE
      JSB ARINV      IF NUMBER IS NEGATIVE
      JSB .FSBA,I   SUBTRACT TOLERANCE AND
      DEF MLBX1
      SSA           COMPARE TO ZERO
      JSB ERROR     PRINT'NEARLY SING MATRIX'
*                                   DIVIDE PIVOT ROW AND ROW
*                                   IN I-MAT BY PIVOT VALUE
LDUM1 LDA T1        ADDRESS OF PIOT ELEMENT
      STA T2
      LDA HONE      LOAD
      LDB .2          1.0
      JSB .FDVA,I
      DEF T1,I
      STA T18       INVERSE OF PIVOT
      STB T19
*                                   MULT ROW BY 1/PIVOT
*                                   STARTING AT PIVOT+1
      LDA LPIV
      STA T11       COUNTER FOR ROW
LINV6 ISZ T11       INCREMENT COUNTER
      LDA T11
      CPA T4        TEST FOR END OF ROW
      JMP LIN12
      ISZ T2        ADDRESS OF NEXT ELEMENT
      ISZ T2
      JSB .DLD
      DEF T2,I
      JSB .FMPA,I
      DEF T18
      JSB .DST
      DEF T2,I
      JMP LINV6
*                                   MULT ROW IN I-MATRIX BY
*                                   1/PIVOT. SKIP IF ELEMENT=0
LIN12 LDA T10       ADDRESS OF PIVOT ROW
      STA T5        IN I-MATRIX
      LDA T3
      CMA,INA  SET
      STA T11       ROW COUNTER
LIN13 JSB .DLD
      DEF T5,I
      SZA,RSS       SKIP MULTIPLICATION IF ZERO
      SZB
      JMP *+2       NOT ZERO
      JMP LIN14     ZERO
      JSB .FMPA,I
      DEF T18
      JSB .DST
      DEF T5,I
LIN14 ISZ T5        NEXT ELEMENT IN I-MATRIX
      ISZ T5
      ISZ T11  DONE?
      JMP LIN13     NO
*                                   PERFORM ROW MANIPULATIONS
*                                   AND SUBTRACTIONS TO REDUCE
*                                   PIVOT COLUMN TO ZERO
      CLA
      STA B1
LINV4 ISZ B1   SELECT NEXT ROW
      LDA B1
      CPA T4        TEST FOR LAST ROW
      JMP LINV1     SELECT NEXT PIVOT
      CPA LPIV      TEST TO SKIP PIVOTAL ROW
      JMP LINV4     SKIP PIVOTAL ROW
      LDA B1
      CLB,INB
      JSB LWHR2     ADDRESS OF ROW TO BE TRANSFORMED
      STA T11           IN I-MATRIX
*                                   COMPUTE MULTIPLIER WHICH
*                                   IS THAT ELEMENT IN ROW TO
*                                   BE TRANSFORMED WHICH LIES
*                                   IN THE PIVOTAL COLUMN
      LDA B1
      LDB LPIV
      JSB LWHR
      STA T9        SAVE ADDRESS
      JSB .DLD
      DEF 0,I
      STA T7        VALUE OF MULTIPLIER
      STB T8
*                                   DO ELIMINATION OF ROWS IN
*                                   ORIGINAL MATRIX. START AT
*                                   COLUMN LPIV+1
      LDA LPIV
      STA T13       COUNTER
      LDA T1
      STA T2
LINV5 ISZ T13
      LDA T13
      CPA T4        TEST FOR LAST TERM IN ROW
      JMP LIN15
      ISZ T9        T9 IS ADDRESS OF
      ISZ T9        ELEMENT TO BE CHANGED
      ISZ T2        T2 IS ADDR OF CORRESPONDING
      ISZ T2        ELEMENT IN PIVOTAL ROW
      LDA T7
      LDB T8
      JSB .FMPA,I
      DEF T2,I
      STA T18       MULTIPLIER*VALUE IN
      STB T19           PIVOT ROW
      JSB .DLD
      DEF T9,I
      JSB .FSBA,I
      DEF T18
      JSB .DST      TRANSFORMED ELEMENT
      DEF T9,I
      JMP LINV5     SELECT NEXT TERM
*                                   DO ELIMINATION OF ROWS IN
*                                   IDENTITY MATRIX. START AT
*                                   BEGINNING OF ROW AND LEAVE
*                                   ELEMENT UNCHANGED WHEN ZERO
*                                   IN PIVOTAL ROW.
LIN15 LDA T10       ADDRESS OF
      STA T5           PIVOTAL ROW
      LDA T3
      CMA,INA       SET
      STA T13         COUNTER
LIN18 LDA T5,I
      ISZ T5
      LDB T5,I
      ISZ T5
      SZA,RSS       SKIP IF ZERO
      SZB
      JMP *+2       NOT ZERO
      JMP LIN17     ZERO
      JSB .FMPA,I   MULTIPLY BY
      DEF T7             MULTIPLIER
      STA T18
      STB T19
      JSB .DLD
      DEF T11,I
      JSB .FSBA,I
      DEF T18
      JSB .DST
      DEF T11,I
LIN17 ISZ T11
      ISZ T11
      ISZ T13
      JMP LIN18     SELECT NEXT TERM
      JMP LINV4     ELIMINATE NEXT ROW
*
*
*********************************************
*****    SUBROUTINE LWHR                *****
*********************************************
*SUBROUTINE COMPUTES ADDRESS OF AN ELEMENT  *
*IN MATRIX GIVEN BY B2. ROW AND COL VALUES  *
*ARE SUPPLIED IN A,B. ADDRESS IS LEFT IN A  *
*ENTRY LWHR2 COMPUTES ADDR IN MAT B3        *
*********************************************
*
LWHR  NOP
      STB T7        SAVE COLUMN #
      ADA M1
      JSB MPY
      DEF T3        (A-1)*T3
      ADA T7
      ADA M1        +(B-1)
      ALS
      ADA B2        DDR=B2+2((A-1)*T3+(B-1))
      JMP LWHR,I
LWHR2 NOP
      STB T7
      ADA M1
      JSB MPY
      DEF T3
      ADA T7
      ADA M1
      ALS
      ADA B3
      JMP LWHR2,I
*
*
*********************************************
*              CONSTANTS                    *
*********************************************
*
T1    BSS 1         TEMPORARY CONSTANTS
T2    BSS 1
T3    BSS 1
T4    BSS 1
T5    BSS 1
T6    BSS 1
T7    BSS 1
T8    BSS 1
T9    BSS 1
T10   BSS 1
T11   BSS 1
T12   BSS 1
T13   BSS 1
T16   DEC +1E-6     ABSOLUTE TOLERANCE
T18   BSS 1
T19   BSS 1
LPIV  BSS 1
LPLUS JSB .FADA,I   GENERATES CODE
      DEF B2,I
LMIN  JSB .FSBA,I   GENERATES CODE
LTIME JSB .FMPA,I   GENERATES CODE
INCB2 ISZ B2        GENERATES CODE
FINIS EQU *
      END
