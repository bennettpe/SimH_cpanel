ASMB,A,B,L,Z
      ORG 13142B
      SPC 3 
*           *********************************************** 
*           *                                             * 
*           *    HP-2331A X-Y DISPLAY SUBSYSTEM DRIVER    * 
*           *                                             * 
*           *                  -- BY --                   * 
*           *                                             * 
*           *               STEVEN A. STARK               * 
*           *               HEWLETT-PACKARD               * 
*           *                PARAMUS, N.J.                * 
*           *                                             * 
*           *********************************************** 
      SPC 3 
*    I. IDENTIFICATION - SAS 0044   REV. 4   9/15/71
*    -----------------
* 
*    II. LANGUAGE - ASSEMBLY LANGUAGE, ABSOLUTE 
*    ------------ 
* 
*    III. TYPE - BASIC CALLABLE SUBROUTINE
*    ---------
* 
*    IV. LENGTH - 204 (DECIMAL) WORDS - WITHOUT DMA 
*    ----------   216 (DECIMAL) WORDS - WITH DMA
* 
*    V. SPECIAL HARDWARE REQUIRED - 
*    ---------------------------- 
* 
*       A. HP-2331A X-Y DISPLAY SUBSYSTEM CONSISTING OF:
*          1. HP-1300A X-Y DISPLAY
*          2. HP-12555A DUAL D/A CONVERTER INTERFACE CARD 
* 
*    VI. DESCRIPTION -
*    ---------------
* 
*    IN ORDER TO UTILIZE THE X-Y DISPLAY SUBSYSTEM DRIVER, IT 
*    MUST FIRST BE CALLED TO SET UP THE PLOT BUFFER, IN WHICH 
*    CASE, IT WILL PROCESS THE BUFFER ADDRESS AND LENGTH AND
*    SAVE THEM FOR USE BY THE INTERRUPT SERVICE ROUTINE. THE
*    DRIVER THEN RETURNS TO THE CALLING PROGRAM.
* 
*    ONCE THE PLOT BUFFER HAS BEEN SET UP,THE DRIVER MAY THEN 
*    BE CALLED TO ENTER POINTS TO BE DISPLAYED. IN THIS CASE, 
*    IT WILL PROCESS THE X AND Y VALUES, DETERMINING IF THEY
*    ARE IN THE CORRECT RANGE AND MERGING THEM INTO A SINGLE
*    WORD.IT WILL THEN STORE THIS WORD IN THE PLOT BUFFER AND 
*    RETURN TO THE CALLING PROGRAM. IN THE EVENT THAT EITHER
*    THE X OR Y VALUE IS OUTSIDE THE PROPER RANGE, THE DRIVER 
*    RETURNS TO THE CALLING PROGRAM WITHOUT STORING THE POINT 
*    IN THE PLOT BUFFER.
      HED HP-2331A X-Y DISPLAY SUBSYSTEM DRIVER - SAS 0044
* 
* 
*    VI. DESCRIPTION - CONT'D 
*    -------------- 
* 
*    WHEN THE DRIVER IS CALLED TO DISPLAY A SET OF X-Y AXIS,
*    IT WILL FIRST DETERMINE IF THE PLOT BUFFER HAS BEEN SET
*    UP. IF IT HAS, IT WILL THEN PROCESS THE X AND Y POSITION 
*    VALUES, DETERMINING A SET OF CORRESPONDING CONSTANTS AND 
*    SAVING THEM FOR USE BY THE INTERRUPT SERVICE ROUTINE. IT 
*    WILL THEN RETURN TO THE CALLING PROGRAM.IF THE DRIVER IS 
*    CALLED TO DISPLAY THE AXIS BEFORE THE PLOT BUFFER IS SET 
*    UP, IT WILL IGNORE THE REQUEST AND RETURN IMMEDIATELY TO 
*    THE CALLING PROGRAM. 
* 
*    THE DRIVER MAY ALSO BE CALLED TO CLEAR THE PLOT BUFFER,
*    IN WHICH CASE,IT WILL FIRST DETERMINE IF THE PLOT BUFFER 
*    HAS BEEN SET UP. IF IT HAS, THE DRIVER THEN CLEARS IT BY 
*    SETTING EACH LOCATION TO A 0 AND IT WILL THEN RETURN TO
*    THE CALLING PROGRAM.IF THE DRIVER IS CALLED TO CLEAR THE 
*    PLOT BUFFER BEFORE IT HAS BEEN SET UP,IT WILL IGNORE THE 
*    REQUEST AND RETURN IMMEDIATELY TO THE CALLING PROGRAM. 
* 
*    THE KEY SEGMENT OF THIS DRIVER IS THE INTERRUPT SERVICE
*    SUBROUTINE,WHICH IS EXECUTED EACH TIME THE D/A CONVERTER 
*    INTERRUPTS (ABOUT EVERY TWENTY MILLISECONDS). WHEN THIS
*    INTERRUPT OCCURS, THIS SUBROUTINE WILL FIRST DISPLAY THE 
*    X AND Y AXIS, IF THIS OPTION WAS REQUESTED. NEXT,IT WILL 
*    DISPLAY THE CONTENTS OF THE PLOT BUFFER, INITIALIZE THE
*    D/A CONVERTER AND RETURN TO THE PROGRAM IN PROGRESS. 
* 
*    VII. ENTRY POINTS - PLOTB, GRAPH, ERASE, DISPT, INTER
*    -----------------
* 
*    VIII. EXTERNAL SUBROUTINES - IFIX
*    -------------------------- 
* 
*    IX. CALLING INFORMATION -
*    -----------------------
* 
*    TO SET UP THE PLOT BUFFER, THE DRIVER IS CALLED FROM 
*    BASIC AS:
* 
*       CALL (1, A(1), N) 
* 
*          WHERE        A - AN ARRAY USED TO STORE THE
*                           POINTS TO BE DISPLAYED. 
* 
*                       N - A VARIABLE OR CONSTANT WHICH
*                           SPECIFIES THE NO. OF POINTS 
*                           TO BE DISPLAYED.
* 
* 
      SKP 
* 
* 
*    IX. CALLING INFORMATION - CONT'D 
*    -----------------------
* 
*    TO TURN THE X-Y DISPLAY OFF, THE DRIVER IS CALLED FROM 
*    BASIC AS:
* 
*       CALL (1, A(1), 0) 
* 
*    TO STORE A POINT IN THE PLOT BUFFER, THE DRIVER IS 
*    CALLED FROM BASIC AS:
* 
*       CALL (2, X, Y)
* 
*          WHERE        X - A VARIABLE OR CONSTANT, IN
*                           THE RANGE 1 TO 255, WHICH 
*                           REPRESENTS THE X-COORDINATE 
*                           VALUE.
* 
*                       Y - A VARIABLE OR CONSTANT, IN
*                           THE RANGE 1 TO 255, WHICH 
*                           REPRESENTS THE Y-COORDINATE 
*                           VALUE.
* 
*    TO DISPLAY A SET OF X AND Y AXIS, THE DRIVER IS CALLED 
*    FROM BASIC AS: 
* 
*       CALL (3, H, V)
* 
*          WHERE        H - A VARIABLE OR CONSTANT WHICH
*                           SPECIFIES THE POSITION OF THE 
*                           X-AXIS, AS SHOWN BELOW- 
* 
*                                NO.    POSITION
*                                ---    --------
* 
*                                 0     BOTTOM
*                                 1     CENTER
*                                 2     TOP 
* 
*                       V - A VARIABLE OR CONSTANT WHICH
*                           SPECIFIES THE POSITION OF THE 
*                           Y-AXIS, AS SHOWN BELOW- 
* 
*                                NO.    POSITION
*                                ---    --------
* 
*                                 0     LEFT
*                                 1     CENTER
*                                 2     RIGHT 
* 
      SKP 
* 
* 
*    IX. CALLING INFORMATION - CONT'D 
*    -----------------------
* 
*    TO TERMINATE DISPLAY OF THE AXIS, THE DRIVER IS CALLED 
*    FROM BASIC AS: 
* 
*       CALL (3, -1, 0) 
* 
*    TO CLEAR THE PLOT BUFFER, THE DRIVER IS CALLED FROM
*    BASIC AS:
* 
*       CALL (4)
* 
* 
*    X. PROGRAMMING NOTES - 
*    -------------------- 
* 
*       1. THIS PROGRAM SHOULD BE USED ONLY IN CONJUNCTION
*          WITH THE HP-24000A BASIC COMPILER. USE WITH ANY
*          OTHER VERSION OF THE BASIC COMPILER WILL RESULT
*          IN UNSUCCESSFUL PROGRAM EXECUTION. 
* 
*       2. TO OVERLAY THE MATRIX OPERATIONS OF THE COMPILER 
*          WITH THIS PROGRAM, THE N OPTION MUST BE SPECIFIED
*          IN THE CONTORL STATEMENT DURING ASSEMBLY.
* 
*       3. TO DISPLAY THE CONTENTS OF THE PLOT BUFFER USING 
*          DIRECT MEMORY ACCESS,THE Z OPTION MUST BE INCLUDED 
*          IN THE CONTROL STATEMENT DURING ASSEMBLY.
* 
*       4. TO CONFIGURE THIS PROGRAM FOR USE WITH DIFFERENT 
*          I/O CHANNELS, FOLLOW THE PROCEDURE BELOW-
* 
*             A. LOAD THE BASIC COMPILER, USING THE BBL.
* 
*             B. LOAD THE X-Y DISPLAY SUBSYSTEM DRIVER, 
*                USING THE BBL. 
* 
*             C. LOAD ADDRESS TO 77B. 
* 
*             D. LOAD THE SWITCH REGISTER WITH THE SELECT 
*                CODE OF THE D/A CONVERTER INTERFACE CARD.
* 
*             E. PRESS PRESET.
* 
*             F. PRESS RUN. 
* 
*          THE COMPUTER WILL NOW HALT WITH A 102077 IN THE
*          T-REGISTER AND THE DRIVER IS READY FOR USE.
* 
      SKP 
* 
* 
*    XI. PROGRAM LISTING -
*    -------------------
* 
      IFN 
      ORG 11456B  PROGRAM BEGINS AT THIS ADDRESS
      XIF          FOR OVERLAY OF MATRIX OPERATIONS 
* 
DACON EQU 23B     ASSIGN I/O ADDRESS
DMA1  EQU 2B
DMA2  EQU 6B
* 
* 
*         PLOTB ENTRY POINT 
* 
* 
PLOTB NOP         ENTRY/EXIT
      JSB .ENTR   GET PARAMETER ADDRESSES 
      LDA INSTR   PUT JSB,I INSTRUCTION 
IN1   STA DACON    IN TRAP CELL 
      LDA PARA1   GET BUFFER ADDRESS
      STA ADDRS    SAVE FOR POINTER 
      STA PNTRX 
      LDA PARA2,I GET BUFFER LENGTH 
      LDB PARA2+1,I 
      JSB IFIX     CONVERT IT TO AN INTEGER 
      NOP 
      SSB,RSS     IS IT < OR = 0? 
      SZB,RSS 
      JMP TRNOF    YES, TURN DISPLAY OFF
      CMB,INB     MAKE NEGATIVE 
      STB LENTH    SAVE FOR COUNTERS
      STB CNTRX 
IN2   STC DACON,C INITIALIZE D/A CONVERTER
      JMP PLOTB,I RETURN TO CALLING PROGRAM 
* 
TRNOF CLC DACON   TURN D/A CONVERTER OFF
      JMP PLOTB,I RETURN TO CALLING PROGRAM 
* 
*     BUFFER CLEAR ROUTINE
* 
CLEAR NOP         ENTRY/EXIT
      LDA ADDRS   GET BUFFER ADDRESS
      SZA,RSS     IS IT > 0? (PLOTB CALLED?)
      JMP CLEAR,I  NO, RETURN TO MAIN PROGRAM 
      STA PNTR    SAVE FOR POINTER
      STA PNTRX   RESET PLOT BUFFR PNTR TO BEGINNING
      LDA LENTH   INITIALIZE POINT COUNTER
      STA CNTR
      STA CNTRX   RESET PLOT BUFFER COUNTER 
      CLA         SET A = 0 
LOOPC STA PNTR,I  SET BUFFER LOCATION = 0 
      ISZ PNTR    INDEX PNTR TO NEXT LOCATION 
      ISZ CNTR    INDEX POINT CNTR, IS IT = 0?
      JMP LOOPC    NO, RETURN & CLEAR NEXT LOCATION 
      JMP CLEAR,I RETURN TO MAIN PROGRAM
      SKP 
* 
* 
*         GRAPH ENTRY POINT 
* 
* 
GRAPH NOP         ENTRY/EXIT
      JSB .ENTR   GET PARAMETER ADDRESSES 
      LDA ADDRS   GET BUFFER ADDRESS
      SZA,RSS     IS IT > 0? (PLOTB CALLED?)
      JMP GRAPH,I  NO, RETURN TO CALLING PROGRAM
* 
      LDA PARA2,I GET Y-AXIS POSITION 
      LDB PARA2+1,I 
      JSB IFIX     CONVERT IT TO AN INTEGER 
      NOP 
      SSB         IS IT < 0?
      JMP AXOFF    YES, TURN AXIS DISPLAY OFF 
      CLA         SET X-VALUE = 0 
      SZB,RSS     IS POSITION = 0?
      JMP CONT1    YES - SKIP NEXT PART 
      CCA 
      ADA D128    SET X-VALUE = 127 
      CPB D1      IS POSITION = 1?
      RSS          YES - SKIP NEXT PART 
      ADA D128    SET X-VALUE = 255 
CONT1 ALF,ALF     MOVE X-VALUE TO UPPER 8 BITS
      STA XAXIS    SAVE IT
* 
      LDA PARA1,I GET X-AXIS POSITION 
      LDB PARA1+1,I 
      JSB IFIX     CONVERT IT TO AN INTEGER 
      NOP 
      SSB         IS IT < 0?
      JMP AXOFF    YES, TURN AXIS DISPLAY OFF 
      CLA         SET Y-VALUE = 0 
      SZB,RSS     IS POSITION = 0?
      JMP CONT2    YES - SKIP NEXT PART 
      CCA 
      ADA D128    SET Y-VALUE = 127 
      CPB D1      IS POSITION = 1?
      RSS          YES - SKIP NEXT PART 
      ADA D128    SET Y-VALUE = 255 
CONT2 STA YAXIS    SAVE IT
* 
      CLB         SET RSS INSTRUCTION IN INTER
      STB INSTX    SUBROUTINE TO A NOP
      JMP GRAPH,I RETURN TO CALLING PROGRAM 
* 
AXOFF LDA RSSIN   GET SKIP INSTRUCTION
      STA INSTX    STORE IT IN SUBROUTINE 
      JMP GRAPH,I RETURN TO CALLING PROGRAM 
      SKP 
* 
* 
*         DISPT ENTRY POINT 
* 
* 
DISPT NOP         ENTRY/EXIT
      JSB .ENTR   GET PARAMETER ADDRESSES 
      LDA ADDRS   GET BUFFER ADDRESS
      SZA,RSS     IS IT > 0? (PLOTB CALLED?)
      JMP DISPT,I  NO, RETURN TO CALLING PROGRAM
* 
      LDA PARA1,I GET X-VALUE 
      LDB PARA1+1,I 
      JSB IFIX     CONVERT IT TO AN INTEGER 
      NOP 
      SSB         IS IT < 0?
      JMP DISPT,I  YES, RETURN TO CALLING PROGRAM 
      STB TEMP    SAVE IT 
      ADB DM256   SUBTRACT 256 FROM IT
      SSB,RSS     IS RESULT < 0?
      JMP DISPT,I  NO, RETURN TO CALLING PROGRAM
* 
      LDA PARA2,I GET Y-VALUE 
      LDB PARA2+1,I 
      JSB IFIX     CONVERT IT TO AN INTEGER 
      NOP 
      SSB         IS IT < 0?
      JMP DISPT,I  YES, RETURN TO CALLING PROGRAM 
      LDA 1       LOAD IT INTO A
      ADA DM256   SUBTRACT 256 FROM IT
      SSA,RSS     IS RESULT < 0?
      JMP DISPT,I  NO, RETURN TO CALLING PROGRAM
* 
      LDA TEMP    GET X-VALUE AGAIN 
      ALF,ALF     MOVE IT TO UPPER 8 BITS 
      IOR 1       MERGE IT WITH Y-VALUE 
      ALF,ALF     ROTATE AGAIN TO SET Y IN UPPER BITS
      SZA,RSS     IS IT 0-0?
      JMP DISPT,I  YES, RETURN TO CALLING PROGRAM 
      STA PNTRX,I STORE IT IN PLOT BUFFER 
      ISZ PNTRX   INDEX POINTER TO NEXT LOCATION
      ISZ CNTRX   INDEX POINT CNTR, IS IT = 0?
      JMP DISPT,I  NO, RETURN TO CALLING PROGRAM
* 
      LDA ADDRS   RESET PLOT BUFFER POINTER TO
      STA PNTRX    BEGINNING OF BUFFER
      LDA LENTH   RESET POINT COUNTER 
      STA CNTRX 
      JMP DISPT,I RETURN TO CALLING PROGRAM 
* 
      SKP 
* 
* 
*         ERASE ENTRY POINT 
* 
* 
ERASE NOP         ENTRY/EXIT
      JSB CLEAR   CLEAR PLOT BUFFER 
      JMP ERASE,I RETURN TO CALLING PROGRAM 
* 
* 
*         INTER ENTRY POINT 
* 
* 
INTER NOP         ENTRY/EXIT
      STA SAVEA   SAVE CONTENTS OF A & B REGS 
      STB SAVEB 
* 
INSTX RSS         SKIP AXIS ROUTINE IF GRAPH
      JSB AXIS     NOT CALLED 
* 
      IFZ         THIS IS USED FOR DMA REFRESH
      LDA INSTY   PUT CLC INSTRUCTION IN
      STA DMA2     DMA TRAP CELL
      LDA CONWD   GET DMA CONTROL WORD
      OTA DMA2     OUTPUT IT TO DMA 
      CLC DMA1
      LDA ADDRS   GET BUFFER ADDRESS
      OTA DMA1     OUTPUT IT TO DMA 
      STC DMA1
      LDA LENTH   GET BUFFER LENGTH 
      OTA DMA1     OUTPUT IT TO DMA 
      STC DMA2,C  INITIALIZE DMA TRANSFER 
      JMP EXIT    SKIP NEXT PART
      XIF 
* 
      LDA ADDRS   INITIALIZE PLOT BUFFER POINTER
      STA PNTR
      LDA LENTH   INITIALIZE PLOT BUFFER COUNTER
      STA CNTR
* 
LOOP  LDA PNTR,I  GET POINT FROM PLOT BUFFER
      SZA,RSS     IS IT 0-0?
      JMP EXIT     YES, GET OUT OF LOOP 
IN3   OTA DACON   DISPLAY IT
      ISZ PNTR    INDEX POINTER TO NEXT POINT 
      ISZ CNTR    INDEX POINT CNTR, IS IT = 0?
      JMP LOOP     NO, RETURN & DISPLAY NEXT POINT
* 
EXIT  LDA SAVEA   RESTORE CONTENTS OF A & B REGS
      LDB SAVEB 
IN4   STC DACON,C INITIALIZE D/A CONVERTER
      JMP INTER,I RETURN TO MAIN PROGRAM
* 
      SKP 
* 
*     AXIS DISPLAY ROUTINE
* 
AXIS  NOP         ENTRY/EXIT
      CLB         SET X-VALUE = 0 
LOOPX LDA 1       GET X-VALUE 
      ALF,ALF     MOVE IT TO UPPER 8 BITS 
      IOR YAXIS   MERGE IN Y-VALUE
IN5   OTA DACON   DISPLAY POINT 
      ADB D2      INCREMENT X-VALUE BY 2
      CPB D256    IS IT = 256?
      RSS          YES, GET OUT OF LOOP 
      JMP LOOPX   RETURN & DISPLAY NEXT POINT 
* 
      CLB         SET Y-VALUE = 0 
LOOPY LDA 1       GET Y-VALUE 
      IOR XAXIS   MERGE IN X-VALUE
IN6   OTA DACON   DISPLAY POINT 
      ADB D2      INCREMENT Y-VALUE BY 2
      CPB D256    IS IT = 256?
      JMP AXIS,I   YES, RETURN TO MAIN PROGRAM
      JMP LOOPY   RETURN & DISPLAY NEXT POINT 
* 
*     PARAMETER ADDRESS ROUTINE 
* 
.ENTR NOP         ENTRY/EXIT
      LDB 0,I     GET PARAM #1 ADDRESS
      STB PARA1   STORE IT
      INB         INDEX IT TO FORM 2ND PART 
      STB PARA1+1 STORE 2ND PART
* 
      ADA DM1     MOVE PNTR TO NEXT ADDRESS 
      LDB 0,I     GET PARAM #2 ADDRESS
      STB PARA2   STORE IT
      INB         INDEX IT TO FORM 2ND PART 
      STB PARA2+1 STORE 2ND PART
* 
      JMP .ENTR,I RETURN TO MAIN PROGRAM
* 
*     CONSTANTS 
* 
ADDRS OCT 0 
LENTH BSS 1 
PNTR  BSS 1 
CNTR  BSS 1 
PNTRX BSS 1 
CNTRX BSS 1 
XAXIS BSS 1 
YAXIS BSS 1 
TEMP  BSS 1 
SAVEA BSS 1 
SAVEB BSS 1 
PARA1 BSS 2 
PARA2 BSS 2 
* 
      SKP 
* 
IFIX  EQU 1364B   POINTER TO BASIC COMPILER 
* 
DM1   DEC -1
DM256 DEC -256
D1    DEC 1 
D2    DEC 2 
D128  DEC 128 
D256  DEC 256 
* 
RSSIN RSS 
INSTR JSB LINK,I
* 
INSTY CLC DMA2
CONWD ABS DACON 
* 
*     SPECIAL CONSTANTS 
* 
SBTBL OCT 1001    SUBROUTINE PARAMETER TABLE
      DEF PLOTB 
      OCT 1002
      DEF DISPT 
      OCT 1003
      DEF GRAPH 
      OCT 0004
      DEF ERASE 
ENDTB EQU * 
* 
      ORG 30B     LINK TO INTERRUPT ROUTINE 
LINK  DEF INTER 
* 
      ORG 110B    DEFINE FWAM 
      DEF ENDTB 
* 
      ORG 121B    DEFINE SUBROUTINE PARAMETER TABLE 
      DEF SBTBL 
      DEF ENDTB 
* 
      IFN 
      ORG 4107B   THESE CONSTANTS ARE USED WHEN 
      OCT 32003    OVERLAYING MATRIX OPERATIONS 
      ASC 2,LET 
      XIF 
* 
      SKP 
* 
*     CONFIGURATION ROUTINE 
*        *NOTE: THIS SECTION RELEASED AFTER EXECUTION 
* 
      ORG 76B 
      DEF CONFG   PROGRAM LINK TO ROUTINE 
      JMP *-1,I 
* 
      ORG ENDTB 
      IFN 
      ORG 12000B  BEGIN CONGIGURATION ROUTINE 
      XIF          HERE WHEN OVERLAYING MATRICES
* 
CONFG LIA 01      GET SELECT CODE 
      AND MASK     ISOLATE IT 
      STA IOADD     SAVE IT 
* 
      LDA NUMBR   INITIALIZE INSTRUCTION COUNTER
      STA ICNTR 
      LDA START   INITIALIZE INSTRUCTION ADDRESS
      STA IPNTR    POINTER
* 
ILOOP LDB IPNTR,I GET INSTRUCTION ADDDRESS
      LDA B,I      GET INSTRUCTION
      AND XMASK     MASK OUT OLD SELECT CODE
      IOR IOADD      MERGE IN NEW ONE 
      STA B,I         SET IN PROGRAM
* 
      ISZ IPNTR   INDEX ADDRESS POINTER 
      ISZ ICNTR   INDEX INSTRUCTION CNTR, IS IT = 0?
      JMP ILOOP    NO - MORE TO PROCESS 
* 
      HLT 77B     STOP...END OF ROUTINE 
      JMP *-1 
* 
NUMBR DEC -7
MASK  OCT 77
XMASK OCT 177700
IOADD BSS 1 
ICNTR BSS 1 
IPNTR BSS 1 
* 
B     EQU 1 
* 
START DEF *+1 
      DEF IN1 
      DEF IN2 
      DEF IN3 
      DEF IN4 
      DEF IN5 
      DEF IN6 
      DEF CONWD 
* 
      END 
