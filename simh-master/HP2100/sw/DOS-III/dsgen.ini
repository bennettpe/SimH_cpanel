set console -q -n log=log.txt 

; set debug -n -q debug.txt
; set debug stdout

; set clk debug=CSRW;PSERV;IOBUS
; set tty debug=CSRW;SERV;PSERV;XFER;IOBUS
; set ptr debug=SERV;XFER;IOBUS
; set ptp debug=CSRW;SERV;XFER;IOBUS
; set cpu debug=INSTR;DATA;FETCH;REG;OPNDEXEC;NOOS
; set mp  debug=IOBUS
; set drc debug=IOBUS

echo
echo ***
echo *** DOS-III Disk Operating System (1975) 
echo *** Generation
echo ***
echo

; generates a new DOS-III system
;
; Sw installed:
;   EFMP       - File manager
;   EDIT       - Editor
;   ALGOL      - Algol Compiler
;   ASMB, XREF - Assembler
;   FTN4       - Fortran IV
;   BASIC      - HP 2000F BASIC
;

set cpu 2100
set cpu 32k

set tty sc=11
set clk sc=12
set ptr sc=13
set tbg sc=17
set ptp sc=20

set tty autolf
send after=200k
send delay=30k

; 7900 DISC
set dpc 13210A
set dpc sc=22
set dpc ena
att dpc0 -q -n tmp.DOS-III_0.disc
att dpc1 -q -n tmp.DOS-III_1.disc

; 7970 MAG TAPE
set msd sc=30
set msd ena

; load DSGEN (24307-16074_Rev-1523_DOS_IIIB_SYSTEM_GENE_A.abin)

d s 0
att ptr -q dsgen/sio16k11.abs
boot ptr
att ptr -q dsgen/dsgen.abs
boot ptr

echo
; format user disc subchannel 1

reset
d s 177777
d p 100

go until "SYS GEN CODE?" 
send "0102\r"
go until "GEN DISC CHNL?" 
send "22\r"
go until "SYS DISC CHNL?" 
send "22\r"
go until "DISC TYPE?" 
send "7900\r"
go until "USER DISC SUBCHNL?" 
send "1\r"
go

echo
; initialization phase

d s 0
d p 100

call type2 "SYS GEN CODE?"        "0102"
call type2 "GEN DISC CHNL?"       "22"
call type2 "SYS DISC CHNL?"       "22"
call type2 "DISC TYPE?"           "7900"
call type2 "SYS DISC SIZE?"       "200"
call type2 "# DRIVES?"            "2"
call type2 "FIRST SYSTEM TRACK?"  "0"
call type2 "FIRST SYSTEM SECTOR?" "3"
call type2 "SYS DISC SUBCHNL?"    "0"
call type2 "USER DISC SUBCHNL?"   "1"
call type2 "TIME BASE GEN CHNL?"  "17"
call type2 "PRIV INT CARD CHNL?"  "0"
call type2 "# DMA CHANNELS?"      "2"
call type2 "LWA MEM?"             "77677"
call type2 "ALLOW :SS?"           "YES"
call type2 "PRGM INPT?"           "PT"
call type2 "LIBR INPT?"           "PT"
call type2 "PRAM INPT?"           "TY"
go

; program input phase: Now load rel files for DOS-III

goto start_module_load

:load_module
echo ---> Load Module %1
att ptr -q dsgen/%1
d s 0
expect "ERR" goto load_err
go
noexpect
return

:load_err
go until "\n"
echo
echo ERROR! *** Paper tape load error
echo .      *** Press Enter to quit
set env -p "      " a
echo
bye
return

:start_module_load

; Main Memory resident system (DISCM) and EXEC modules ($EX01 ...)

call load_module 24307-16002_rev_1419_DISCM.rel 	; DISCM 24307-16002 rev 1419 DISC MONITOR
call load_module 24307-16003_rev_1419_EX01.rel		; $EXMD 24307-16003 rev 1419 EXEC MODULES

; I/O Drivers - load required device drivers if they are included in the system

; mandatory: Choose one System Console Driver driver
call load_module 20985-60001_rev_1419_DVR00.rel		; DVR00 20985-60001 rev 1419 TTY-LIKE CONSOLE-TERMINAL
; call load_module 24157-60001_rev_1419_DVR05.rel	; DVR05 24157-60001 rev 1419 TTY-LIKE_CONSOLE
; call load_module 24307-16018_rev_1507_DVR26.rel	; DVR26 24307-16018 rev 1507 2762A-B AND 2615A CONSOLE

; paper tape drivers
call load_module 20987-60001_rev_1419_DVR01.rel		; DVR01 20987-60001 rev 1419 PAPER TAPE READER
call load_module 20989-60001_rev_1419_DVR02.rel		; DVR02 20989-60001 rev 1419 PAPER TAPE PUNCH

; choose none/one/two line printer
; call load_module 24168-60001_rev_1419_DVR12.rel	; D2767 24168-60001 rev 1419 2767A LINE PRINTER (DVR12)
; call load_module 24307-16011_rev_1446_DVR12.rel	; D26XX 24307-16011 rev 1446 DVR12 FOR 2607-2610-2614-2613-2618

; mandatory: disc device driver
call load_module 24156-60001_rev_1419_DVR31.rel		; DVR31 24156-60001 rev 1419 7900-7901_DISC

; magnetic tape
call load_module 13024-60001_rev_1446_DVR23.rel		; DVR23 13024-60001 rev 1446 7970B-E MAG TAPE

; other I/O drivers
; call load_module 24307-16017_rev_1446_DVR15.rel	; DVR15 24307-16017 rev 1446 7261A MARK SENSE CARD READER
; call load_module 24272-60001_rev_1419_DVR11.rel	; D2892 24272-60001 rev 1419 2892B CARD READER (DVR11)
; call load_module 24341-60001_rev_1419_DVR67.rel	; DVR67 24341-60001 rev 1419 12889A HI SPEED SERIAL INTERFACE
; call load_module 24307-16009_rev_1446_DVR70.rel	; DVR70 24307-16009 rev 1446 DVR70 FOR 12618A SYNC INTERFACE
; call load_module 24350-16001_rev_1419_DVR72.rel	; DVR72 24350-16001 rev 1419 12587B ASYNC DATA SET INTERFACE
; call load_module 24377-16001_rev_1503_DVR73.rel	; DVR73 24377-16001 rev 1503 12920A-B MULTIPLEXOR
; call load_module 24381-16001_rev_1503_ATD01.rel	; ATD01 24381-16001 rev 1503 ASYNC TERMINAL DRIVER #1
; call load_module 24307-16012_rev_1442_ATD02.rel	; ATD02 24307-16012 rev 1442 ASYNC TERMINAL DRIVER #2
; call load_module 24307-16008_rev_1438_PMT01.rel	; PMT01 24307-16008 rev 1438 PAGE MODE TERMINAL DRIVER #1
; call load_module 24307-16016_rev_1503_PMT02.rel	; PMT02 24307-16016 rev 1503 PAGE MODE TERMINAL DRIVER #2
; call load_module 24307-16010_rev_1438_SLC.rel		; SLC   24307-16010 rev 1438 SYNCHRONOUS LINE CONTROL DRIVER

; mandatory: job processor
call load_module 24307-16004_rev_1419_JOBPR.rel		; JOBPR 24307-16004 rev 1419 JOB PROCESSOR/FILE MANAGER

; mandatory if EFMP or IMAGE is desired
call load_module 24309-60002_rev_1419_EX30.rel		; EFMP 24309-60002 rev 1419 EXT FILE MGR EXEC MODULES
							; EFMP_24309-60003 rev 1419 
; SW developement

; relocating Linker/Loader
call load_module 24308-60001_rev_1432_LOADR.rel		; RLODR 24308-60001 rev 1432 RELOCATING-LINKING_LOADER

; Assembler
call load_module 24307-16006_rev_1419_ASMB.rel		; ASMB  24307-16006 rev 1419 ASSEMBLER

; Algol compiler
call load_module 24129-60001_rev_C_ALGOL.rel		; ALGOL 24129-60001 rev C    ALGOL COMPILER
							;       24129-60002 rev C    (second part tape)
; Fortran IV compiler
call load_module 24170-60001_rev_C_FTN4.rel		; .FTN4 24170-60001 rev C    FORTRAN IV COMPILER
							;       24170-60001 rev C     
							;       24170-60003 rev C    
; call load_module 24177-60001_rev_1442_FTN4.rel	; FTN4  24177-60001 rev 1442 FORTRAN IV COMPILER (10K AREA)
							;       24177-60021 rev 1442    
call load_module 24152-60001_rev_C_F4D.rel		; F4D.N 24152-60001 rev C    RELOCATABLE SUBR LIBR (FTN4)
; load FFP only if FFP (Fast Fortran Processor) is present 
; call load_module 12907-16001_rev_A_FFP.rel		; FFP.N 12907-16001 rev A    RELOCATABLE SUBR LIBR (FFP)
; call load_module 12907-16002_rev_1350_FFP.rel		; $SETP 12907-16002 rev 1350 FFP SUBR $SETP

; choose one: F2E (if EAU present), or F2F (if Floating Point Arithmetic)
call load_module 24151-60001_rev_D_F2E.rel		; F2E.N 24151-60001 rev D RELOCATABLE SUBR LIBR (EAU)
; call load_module 24248-60001_rev_B_F2F.rel		; F2F.N 24248-60001 rev B RELOCATABLE SUBR LIBR (FP)

; Cross Reference Table Generator
call load_module 24223-60001_rev_1432_XREF.rel		; XREF  24223-60001 rev 1432 CROSS REF TABLE GENERATOR

; Debug program - use only for HP21MX cpu
; call load_module 24307-16007_rev_1432_DEBUG.rel	; RDBUG 24307-16007 rev 1432 RTE-DOS DEBUG PROGRAM

; Load only if WCS is present (Writable Control Storage - Microcode programming)
; call load_module 24278-60001_rev_1419_DVR33.rel	; DVR33 24278-60001 rev 1419 HP2100-21MX WCS DRIVER
; call load_module 24332-60001_rev_1419_MICRO.rel	; MASMB 24332-60001 rev 1419 WCS MICRO ASSEMBLER
; call load_module 24333-60001_rev_A_WCSIO.rel		; WCSUT 24333-60001 rev A    WCS I/O UTILITIES
; call load_module 24334-60001_rev_1419_MDE.rel		; MDBUG 24334-60001 rev 1419 WCS MICRO DEBUG EDITOR

; Load .rel files terminated. 

; terminate program input phase: check undefined externals

; Parameter input phase

d s 01

go until   "ENTER PROG PARAMETERS" 
call type  "$EX18,0"
call type  "/E"
call type2 "# LINKS?"               "800"
call type2 "ENTER SUBSYSTEM NAMES"  "/E"

go until   "EQUIPMENT TABLE ENTRY" 
call type  "11,DVR00"
call type  "13,DVR01"
call type  "20,DVR02"
call type  "22,DVR31,D"
call type  "30,DVR23,D"
call type  "/E"

go until   "DEVICE REFERENCE TABLE" 
call type2 "1 = EQT #?"  "1"
call type2 "2 = EQT #?"  "4"
call type2 "3 = EQT #?"  "4"
call type2 "4 = EQT #?"  "3"
call type2 "5 = EQT #?"  "2"
call type2 "6 = EQT #?"  "0"
call type2 "7 = EQT #?"  "0"
call type2 "8 = EQT #?"  "5"
call type2 "9 = EQT #?"  "/E"

go until   "INTERRUPT TABLE" 
call type  "11,EQT,1"
call type  "13,EQT,2"
call type  "20,EQT,3"
call type  "23,EQT,4"
call type  "31,EQT,5"
call type  "/E"

go until "FWA USER LINKS?" 
send "01000\r"
go until "FWA USER?" 
send "20000\r"
go

det -q all

; system generated in tmp.DOS-III_0/1.disc 

echo
echo ***
echo *** System generated 
echo *** Boot, label the disk, install HP 2000F BASIC and test the system
echo ***
echo

reset
dep s 0

; DOS prompt is "@" + BEL -> to remove the bell char issue this scp command
set console pchar=23400

; the prompt after some commands is "@" + BEL + CR/LF, but for some others
; commands is "@" + BEL without CR/LF. Be aware!

att dpc0 -q tmp.DOS-III_0.disc
att dpc1 -q tmp.DOS-III_1.disc

boot dpc0
echo

; first off all: set date

go until "@" 

call typecmd ":DATE,10JULY1975"
call typecmd ":JOB"
call typecmd ":LIST,X,1"

; give label to disk
call typecmd ":IN,SYS01"

; display local unit and equipement tables: 
; in this system, LU2 is paper tape reader
call typecmd ":LU"
call typecmd ":EQ"
call typecmd ":EJOB"

; load HP 2000F BASIC for DOS-III
; use dsgen_hp2000f_basic_gen.ini to assemble sources
; use dsgen_hp2000f_basic_tape.ini (faster) to use already assembled rel programs in tape
; do not use both at the same time! one, the other or none (for no basic)
do dsgen_hp2000f_basic_gen.ini
; do dsgen_hp2000f_basic_tape.ini

; test run for sw loaded on system generation

; assembler test run

call typecmd ":JOB"
send ":STORE,S,SOURC,1\r"
go until "\n"
go until "\n"
send 'ASMB,R,L\r'
send '      NAM HELLO,3\r'
send '      EXT EXEC\r'
send '*\r'
send 'START NOP\r'
send '      JSB EXEC\r'
send '      DEF *+5\r'
send '      DEF RCODE\r'
send '      DEF CONWD\r'
send '      DEF BUFFR\r'
send '      DEF BUFLN\r'
send '*\r'
send '      JSB EXEC\r'
send '      DEF *+2\r'
send '      DEF *+1\r'
send '      DEC 6\r'
send '*\r'
send 'RCODE DEC 2\r'
send 'CONWD OCT 1\r'
send 'BUFFR ASC 7,ASMB HOLA TST\r'
send 'BUFLN DEC -13\r'
send '      END START\r'
send '\r'
send "::\r"
go until "@" 
go until "\n"

call typecmd ":LIST,S,1,SOURC"
call typecmd ":JFILE,SOURC"

send ":PROG,ASMB,2,6,7,8,99\r"
go until "@" 
send ":PROG,LOADR\r"
go until "@" 
send ":RUN,HELLO\r"
go until "@"
 
call typecmd ":PURGE,SOURC"
call typecmd ":PURGE,HELLO"
call typecmd ":EJOB"

; algol test run

call typecmd ":JOB"

send ":STORE,S,SOURC,1\r"
go until "\n"
go until "\n"
send 'HPAL,L,B,"HELLO"\r'
send '\r'
send 'BEGIN\r'
send '   WRITE(1,#("ALGOL HOLA"))\x3B\r'
send 'END$\r'
send '::\r'
go until "@" 
go until "\n"

call typecmd ":LIST,S,1,SOURC"
call typecmd ":JFILE,SOURC"

send ":PROG,ALGOL,2,6,7,8,99\r"
go until "@" 
send ":PROG,LOADR\r"
go until "@" 
send ":RUN,HELLO\r"
go until "@" 

call typecmd ":PURGE,SOURC"
call typecmd ":PURGE,HELLO"
call typecmd ":EJOB"

; fortran IV test run

call typecmd ":JOB"

send ":STORE,S,SOURC,1\r"
go until "\n"
go until "\n"
send 'FTN4,B,L \r'
send 'C \r'
send '      PROGRAM HELLO \r'
send '      WRITE(1,99) \r'
send 'C \r'
send '   99 FORMAT("FTN4 HOLA")\r'
send '      STOP\r'
send '      END\r'
send '      END$\r'
send '\r'
send "::\r"
go until "@" 
go until "\n"

call typecmd ":LIST,S,1,SOURC"
call typecmd ":JFILE,SOURC"

send ":PROG,FTN4,2,6,7,8,99\r"
go until "@" 
send ":PROG,LOADR\r"
go until "@" 
send ":RUN,HELLO\r"
go until "@" 

call typecmd ":PURGE,SOURC"
call typecmd ":PURGE,HELLO"
call typecmd ":EJOB"

; list files on disc: system generation files and user files

call typecmd ":JOB"
call typecmd ":LIST,X,1"
; user generated files

call typecmd ":LIST,U,1"
call typecmd ":EJOB"

; Successfull test. Copy as production disk

det -q all
copy -q tmp.DOS-III_0.disc   DOS-III_0.disc
copy -q tmp.DOS-III_1.disc   DOS-III_1.disc
del  -q tmp.DOS-III_0.disc   
del  -q tmp.DOS-III_1.disc   

echo
echo
echo ***
echo *** Generation finished 
echo ***

if "%1"=="QUIT" quit
echo
echo *** Press Enter to quit
set env -p "   " a
echo
 
echo
quit
goto end

:type
; simulate typing on tty. 
; %1 (parameter one) is the text to type 
send "%1"
send "\r"
go until "\n"
return

:type2
; simulate typing on tty. 
; %1 (parameter one) is the question to be replied with %2 (param two)
go until "%1"
send "%2"
send "\r"
go until "\n"
return

:typecmd
; simulate typing on tty command for DOS. 
; %1 (parameter one) is the text to type 
send "%1"
send "\r"
go until "@"
go until "\n"
return

:end



