ASMB,R,B,L,X
      HED COMPILE 
      NAM COMP0,7 
      SPC 2 
      ENT CMPLE,CM10B,CMPL7 
      ENT CMPL0 
      ENT ASBFA 
      ENT CMP00 
      SPC 2 
      COM PBPTR,NEG(26),.(52),MAIN,SPROG,SYMTB,ERRCT
      COM SBPTR,SBUFA,SSTAK,SYNTQ,SERRS(36),RERRS(50) 
      COM FERRS(15),WERRS(10),MAXCR,MSFLG,PFLAG,SFLAG 
      COM DFLAG,TEMP(3),CDFLG,ARYAD,GFLAG,SIGN,UFLAG
      COM PINTG(2),TABLE,LNGHT,SMBGN,SLENG,COUNT
      COM TBLPT,TSPTR,SBT0
      COM EXP,MANT1,MANT2,EXPON,DPFLG,NT0,ENOUF 
      COM LNAME,CHRCT,OCTMP,SPTR,FILTB,NSPTR,INFST
      COM DCLC1,DEST,DCLC2,STEND,DFILT,FILPT,COMSN
      COM MVEND 
      COM STYPE,USESN,FILCT,.LNUM 
      COM PRGCT,STCT1,STCT2,NUMPT,STCT3,FLINK 
      COM STMP1,STMP2,VLFLG,VALTB,FCORE,COMPT,VTMP1 
      COM VTMP2,VTMP3,VTMP4,VTMP5,IFSS
      COM ZZ(8),ASINP 
      COM YY(204),ERSEC(77),DRFLG 
      SPC 2 
      EXT PBUFF,EXIT3,SINIT,GETCR,BCKSP,BLDIN,FNDPS 
      EXT S14SC,RSTPT,MLINB,PRNST,DCMPL,SSYMT 
      EXT ASYMT,SCHLB,CUSP,LWAUS,XEC,ALCOM,EXEC 
      EXT PRNS1,PRNS2,PRNSB,PRNSC 
      EXT CSAV2 
      SPC 2 
A     EQU 0 
UNABT EQU .+16
CFLAG EQU .+2 
?LINK EQU 15B 
UIR   OCT 160001
COMOP OCT 45000 
FOROP OCT 54000 
NXTOP OCT 55000 
DEFOP OCT 50000 
DIMOP OCT 47000 
ENDOP OCT 60000 
.5000 DEC 5000
A.10  DEF .+10
M256  DEC -256
B377  OCT 377 
.72   DEC 72
FILEN ASC 3,FILES 
      SPC 2 
ERSCA DEF ERSEC 
ERS32 DEF ERSEC+32
ASBFA DEF ERSEC+60
*  COMPILED': VARIABLE OPERANDS ARE POINTERS TO A SYMBOL TABLE AND
*  STATEMENT REFERENCES ARE REPLACED BY ABSOLUTE POINTERS.
*  SYMTB = SPTR IMPLIES THE PROGRAM IS 'COMPILED': THE SYMBOL TABLE 
*  ENTRIES CONTAIN POINTERS TO A VALUE TABLE OR IN THE CASE OF
*  FUNCTIONS TO THE DEFINING FORMULA, AND A TABLE IS BUILT
*  CONTAINING INFORMATION FOR EACH FILE IN THE PROGRAM.  BEFORE 
*  BUILDING THE SYMBOL TABLE, THE INTERPRETER'S PROGRAM COUNTER 
*  IS SET TO THE STATEMENT REFERENCED BY THE 'RUN' COMMAND (THE 
*  LOWEST NUMBERED STATEMENT IS THE DEFAULT CHOICE).
* 
CMPLE LDB PBUFF     NULL
      CPB PBPTR       PROGRAM?
      JMP EXIT3 
      CLB,INB       INITIALIZE
      STB PRGCT       PROGRAM COUNTER 
      JSB SINIT     SIMPLE
      JSB GETCR       'RUN' ? 
      JMP CMP15     YES 
      JSB BCKSP     NO
      JSB BLDIN     DEMAND AN INTEGER 
      STB PRGCT     SAVE STARTING STATEMENT NUMBER
      CPA .+15B     END OF RECORD?
      RSS           YES 
      JSB RERRS+12,I  NO
CMP15 LDA MAIN,I
      IOR UNABT       ALLOW 
      STA MAIN,I        ABORTS
      LDB PBUFF 
      CPB SPROG     NO, COM STORAGE ALLOCATED?
      JSB ALCOM     NO--DO IT 
      LDA SYMTB     GET SYMBOL TABLE POINTER
      SZA,RSS       IS PROGRAM COMPILED ? 
      LDA PBPTR     NO, USE PBPTR 
      LDB PRGCT     GET STARTING STATEMENT NUMBER 
      JSB FNDPS     SEEK REFERENCED STATEMENT 
      JMP EXIT3 
      NOP           SET 
      STB PRGCT       PROGRAM COUNTER 
CMP14 LDA MAIN      TELL 2114 
      INA 
      LDA 0,I           THAT USER 
      IOR UIR 
      JSB S14SC 
CMPL0 LDA SYMTB     PROGRAM 
      SZA,RSS         UNCOMPILED? 
      JMP CMP00     YES 
      CPA SPTR      NO, COMPILED? 
      RSS           YES 
      JMP CMP16     NO, MUST BE SEMI-COMPILED 
      LDB ASINP 
      SZB,RSS       ASSIGN STATEMENT SEEN?
      JMP VALUE     NO
      JSB RSTPT     YES, FAKE SEMI-COMPILED PROGRAM 
      LDA SYMTB 
      STA SPTR
      JMP CMP18 
CMP16 EQU * 
      STA SPTR
      JMP CMP17 
CMP00 STA FILTB 
      LDA CFLAG     SET 
      LDB MLINB 
      ADB .-?LINK     PROGRAM MODE
      IOR 1,I 
      STA 1,I           TO 'COMPILED' 
      SKP 
**                            **
***  BUILD THE SYMBOL TABLE  ***
**                            **
* 
*  THE PROGRAM IS EXAMINED STATEMENT BY STATEMENT.  ALL 
*  VARIABLE OPERANDS ARE REPLACED BY POINTERS (RELATIVE 
*  TO THE START OF THE SYMBOL TABLE) TO TWO WORD ENTRIES. 
*  SYMBOL TABLE ENTRIES KEEP THE SYMBOL IN THE FIRST WORD 
*  AND INFORMATION IN THE SECOND.  FOR FUNCTIONS THE
*  SECOND WORD CONTAINS A POINTER TO THE DEFINING FORMULA 
*  (0 BEFORE FINDING THE <DEF STATEMENT>).  FOR SIMPLE
*  VARIABLES THE SECOND WORD IS USED TO FORM A LINKED LIST
*  OF UNMATCHED FOR-VARIABLES (OTHERWISE IT IS 0) WITH
*  FLINK POINTING TO THE INNERMOST NESTED FOR-VARIABLE. 
*  IF THE SIMPLE VARIABLE APPEARS IN A <COM STATEMENT>
*  THE SECOND WORD IS SET TO -1. FOR ARRAY AND STRING 
*  VARIABLES THE SECOND WORD IS 0 UNLESS THE VARIABLE 
*  APPEARS IN A <DIM STATEMENT>, IN WHICH CASE IT 
*  POINTS TO THE DIMENSIONS IN THE CODE, OR IT APPEARS
*  IN A <COM STATEMENT>, IN WHICH CASE IT IS THE
*  NEGATION OF A POINTER TO THE DIMENSIONS. 
*  PROGRAM INTEGERS ARE REPLACED BY A POINTER TO THE
*  STATEMENT THEY REFERENCE.  ON EXIT TO VALUE OR DCMPL,
*  SPTR POINTS TO THE FIRST WORD NOT PROCESSED. 
* 
      LDB PBPTR     CREATE POINTER
      STB SYMTB       TO SYMBOL TABLE 
* 
* COUNT NUMBER OF STATEMENTS IN PROGRAM 
* 
      CLA,INA       INITIALIZE STATEMENT COUNTER
      LDB SPROG 
CMP01 INB           MOVE TO 
      ADB 1,I         NEXT
      ADB .-1           STATEMENT 
      CPB PBPTR     DONE? 
      JMP CMP02     YES 
      INA           NO--BUMP COUNTER
      JMP CMP01 
CMP02 CLB           DIVIDE # OF STATEMENTS
      DIV .+32        INTO 32 PARTS 
      CMB           SET B=-1-# OF OVERSIZE GROUPS,
      SZA,RSS         BUT IF <32 STATEMENTS USE -#
      INB 
      INA           SET A TO SIZE OF LARGER GROUP 
      STA STCT1     SET COUNTER 
      STB STCT2 
      LDB ERSCA     SET POINTER TO TABLE
      STB NUMPT 
      SKP 
* 
* BUILD A TABLE OF 64 WORDS. THE FIRST 32 CONTAIN THE SEQUENCE
* NUMBERS OF STATEMNTS WHICH DIVIDE THE PROGRAM INTO 32 ALMOST
* EQUAL PARTS. THE SECOND 32 WORDS ARE THE ABSOLUTE ADDRESSES 
* OF THESE STATEMENTS 
* 
      LDA SPROG 
CMP03 ADB .+32
      STA 1,I       SET ABSOLUTE ADDRESS INTO TABLE 
      LDB 0,I       SET SEQUENCE # INTO TABLE 
      STB NUMPT,I 
      ISZ NUMPT     BUMP POINTERS 
      ISZ STCT2     TEST FOR ANY MORE 
      CLB,RSS         OVERSIZE GROUPS 
      CCB           COMPUTE SIZE OF NEXT GROUP
      ADB STCT1 
      STB STCT1 
      CMB 
      STB STCT3 
      LDB NUMPT     TEST FOR DONE 
      CPB ERS32 
      JMP CMP04 
      ISZ STCT3     COMPUTE FIRST STATEMENT 
      INA,RSS         IN NEXT GROUP 
      JMP CMP03 
      ADA 0,I 
      ADA .-1 
      JMP *-5 
* 
CMP04 CLA,INA 
      STA FLINK     SET FOR-QUEUE TO EMPTY
      JSB PRNST     INITIALIZE
      DEF CMP11       COMPILATION 
      SEZ,RSS       WAS FLAG BIT SET? 
      JMP CMPL3     NO
*                                  *
**  PROCESS NON-VARIABLE OPERAND  **
*                                  *
      ADA .-4       PROGRAM 
      SSA,RSS         INTEGER?
      JMP PRNS2     NO, MUST BE A PARAMETER 
CMPL1 ISZ SPTR      YES, MOVE 
      LDB SPTR        TO NEXT WORD
      CPB NSPTR     STATEMENT FINISHED? 
      JMP CMP11     YES 
      LDB ERSCA     BEGIN SEARCH FOR REFERNECED STMT
CMP05 LDA 1,I       FIRST STATEMENT =>SOUGHT STATE.?
      CMA 
      ADA SPTR,I
      SSA,INA 
      JMP CMP06     FOUND ONE 
      INB 
      CPB ERS32     TEST FOR DONE 
      RSS 
      JMP CMP05 
      ADB .+31
      LDA SYMTB     STATEMENT IS IN LAST GROUP
      JMP CMP07 
CMP06 ADB .+32      B=> FIRST STATEMNT IN GROUP 
      SZA,RSS       TEST FOR FOUND
      JMP CMP09 
      CPB ERS32     TEST FOR NOT THERE
      JMP CMPL2     ERROR 
      LDA 1,I       SET A=> FIRST WORD BEYOND GROUP 
      ADB .-1 
CMP07 LDB 1,I 
      STA STCT1     SAVE END TEST 
      LDA SPTR,I    GET SEQUENCE NUMBER 
CMP08 INB           BUMP STATEMENT POINTER
      ADB 1,I 
      ADB .-1 
      CPB STCT1     TEST FOR DONE 
      JMP CMPL2     LABEL NOT FOUND--ERROR
      CPA 1,I       TEST FOR FOUND
      JMP CMP09+1 
      JMP CMP08 
CMP09 LDB 1,I 
      STB SPTR,I    FOUND--REPLACE INTEFER
      ISZ INFST     IN 'USING' STATEMENT? 
      JMP CMPL1     NO
      JMP PRNS2     YES 
CMPL2 JSB DCMPL     DECOMPILE 
      JSB RERRS,I   NON-EXISTENT STATEMENT NUMBER 
*                              *
**  PROCESS VARIABLE OPERAND  **
*                              *
CMPL3 STA STMP1     SAVE SYMBOL 
      AND .+17B 
      CPA .+17B     FUNCTION? 
      JMP CMPL6     YES 
      SZA,RSS       NO, STRING VARIABLE?
      JMP CMPL9-3   YES 
      ADA .-4       NO, 
      SSA             ARRAY?
      JMP CMPL9     YES 
      JSB SSYMT     NO, COMPILE 
      ISZ SPTR        SIMPLE VARIABLE 
      CPB COMOP     'COM'?
      JMP CMP41     YES 
      CPB FOROP     NO, FOR-VARIABLE OF 'FOR'?
      JMP CMPL4     YES 
      CPB NXTOP     NO, FOR-VARIABLE OF 'NEXT' ?
      RSS           YES 
      JMP PRNSB      NO 
      LDB FLINK 
      SSB           MAKE
      CMB,INB         POSITIVE
      CPB STMP2     MATCH LATEST <FOR STATEMENT> ?
      JMP *+3       YES 
      JSB DCMPL     NO, DECOMPILE 
      JSB RERRS+1,I NEXT NOT PRECEDED BY PROPER FOR 
      LDB FLINK 
      LDA STMP2,I   REMOVE
      STA FLINK       VARIABLE
      SSB           WAS VARIABLE IN COMMON? 
      CCB,RSS       NO
      CLB           NO
      STB STMP2,I   RESET AS SIMPLE VARIABLE
      JMP PRNSB 
CMPL4 LDA STMP2,I   LOAD SECOND WORD OF TABLE ENTRY 
      SZA           ALREADY IN FOR-QUEUE? 
      INA,SZA,RSS   COMMON VARIABLE 
      JMP CMPL5 
      JSB DCMPL     DECOMPILE 
      JSB RERRS+2,I NESTED "FOR'S" WITH SAME VARIABLE 
CMPL5 LDB STMP2 
      LDA STMP2,I   WAS VARIABLE
      SSA             IN COMMON?
      CMB,INB       YES 
      LDA FLINK     ADD 
      STA STMP2,I     TO
      STB FLINK         FOR-QUEUE 
      ISZ STYPE     DESTROY STATEMENT TYPE
      JMP PRNSB 
CMP41 LDA STMP2 
      LDB A,I       GET POINTER 
      SZB           ALREADY IN COMMON?
      JMP CMP10+1 
      CCB           FLAG VARIABLE AS
      STB A,I         CONTAINED IN COMMON 
      JMP PRNSB 
CMPL6 JSB SSYMT     COMPILE FUNCTION NAME 
      CPB DEFOP     FUNCTION DEFINITION?
      RSS           YES 
      JMP PRNS2     NO
      LDB STMP2,I   PREVIOUSLY
      SZB             DEFINED?
      JMP CMPL8     YES 
      LDA STMP2     NO
      ISZ STYPE     DESTROY STATEMENT TYPE
CMPL7 LDB SPTR      ADVANCE 
      ADB .+3         PROGRAM 
      STB SPTR          POINTER 
      STB 0,I       SAVE
      JMP PRNSB 
CMPL8 ISZ SPTR
      JSB DCMPL     DECOMPILE 
      JSB RERRS+3,I FUNCTION DEFINED TWICE
      JSB SSYMT     COMPILE STRING VARIABLE 
      ISZ STMP1     SET TO 'SINGLY SUBSCRIPTED' 
      RSS           PROCESS POSSIBLE DECLARATION
CMPL9 JSB ASYMT     COMPILE ARRAY VARIABLE
      CCE           SET 'COM' FLAG
      CPB COMOP     'COM'?
      JMP CMP91     YES 
      CPB DIMOP     NO, 'DIM'?
      CLE,RSS       YES--SET 'DIM' FLAG 
      JMP PRNS2 
CMP91 LDB STMP2,I   WAS VARIABLE
      SZB             PREVIOUSLY DIMENSIONED? 
      JMP CMP10     YES 
      LDB SPTR      NO, SAVE POINTER
      ADB .+2         TO DIMENSIONS 
      SEZ           DIMENSIONED IN 'COM' ?
      CMB,INB       YES--FLAG IT
      STB STMP2,I   NO
      LDB SPTR      RESTORE 
      ADB .+2         POINTER 
      LDA STMP1     RETRIEVE SYMBOL 
      SLA,RSS       ADVANCE 
      ADB .+2         POINTER 
      ADB .+2           PAST
      STB SPTR            ONE OR TWO
      JMP PRNSC 
CMP10 ISZ SPTR
      JSB DCMPL     DECOMPILE 
      JSB RERRS+4,I VARIABLE DEFINED TWICE
*                              *
**  PROCESS END OF STATEMENT  **
*                              *
CMP11 CPB SYMTB     END OF PROGRAM? 
      RSS           YES 
      JMP PRNS1     NO
      STB SPTR      INSURE CORRECT SETTING FOR SPTR 
      LDA STYPE     LAST STATEMENT
      CPA ENDOP       AN 'END' ?
      JMP CMP12     YES 
      JSB DCMPL     NO, DECOMPILE 
      JSB RERRS+5,I MISSING 'END' 
CMP12 CLA,INA 
      CPA FLINK     ALL FORS MATCHED? 
      JMP *+3       YES 
      JSB DCMPL     DECOMPILE 
      JSB RERRS+6,I 'FOR' WITHOUT 'NEXT'
CMP17 EQU * 
      CLA 
      STA VLFLG     MUST RUN VALUE. 
      LDB PBPTR     SET POINTER TO
      STB FILTB       END OF SYMBOL TABLE.
      LDA DRFLG     CHECK FOR CSAVE 
      SSA,RSS 
      JMP CMP18 
      AND .+1 
      STA DRFLG 
      JMP CSAV2 
* 
*  FILCT = -5 AT THIS POINT UNLESS THE PROGRAM CONTAINS A 
*  <FILES STATEMENT>.  THE CALL TO SCHLB,I LEAVES VALTB = 
*  FILTB+7*(NUMBER OF FILES REQUESTED).  IF NO <FILES STATEMENT>
*  APPEARS, VALTB = FILTB.
* 
CMP18 EQU * 
      LDA FILCT     ANY <FILES
      CPA .-5         STATEMENTS>?
      JMP CMP13     NO
      JSB EXEC
      DEF *+4 
      DEF .+8 
      DEF FILEN 
      DEF *-3 
      JSB RERRS+13,I  BAD FORMAT OR ILLEGAL NAME
      JSB RERRS+14,I  MISSING OR PROTECTED FILE 
      JSB RERRS+10,I  OUT OF STORAGE
      JMP VALUE+2   SUCCESSFUL REQUEST
CMP13 LDB FILTB     SET VALUE TABLE 
      STB VALTB       POINTER.
      JMP VALUE+2 
CM10B EQU CMP10-5 
**                           ** 
***  BUILD THE VALUE TABLE  *** 
**                           ** 
* 
*  IF NO VALUE TABLE EXISTS, ONE IS BUILT FROM THE SYMBOL 
*  TABLE AND INITIALIZED; IF IT ALREADY EXISTS, IT IS 
*  INITIALIZED.  IN BUILDING THE VALUE TABLE, EACH ENTRY
*  IN THE SYMBOL TABLE IS CHECKED: FOR FUNCTIONS THE
*  EXISTENCE OF A DEFINING FORMULA IS CHECKED; FOR SIMPLE 
*  VARIABLES TWO WORDS ARE ALLOCATED AND SET TO 'UNDEFINED' 
*  AND A POINTER TO THEM IS PLACED IN THE SECOND WORD OF
*  THE SYMBOL TABLE ENTRY; FOR ARRAYS FOUR WORDS ARE
*  ALLOCATED FOR THE DECLARED AND DYNAMIC DIMENSIONS, 
*  THE DIMENSIONS ARE INITIALIZED EITHER FROM A 
*  <DIM STATEMENT> IN THE PROGRAM OR THE DEFAULT
*  DIMENSIONS, ARRAY SPACE IS ALLOCATED AT TWO WORDS PER
*  ARRAY ELEMENT CONTIGUOUS WITH THE DIMENSIONS,  THE 
*  ELEMENTS ARE INITIALIZED TO 'UNDEFINED,' AND A 
*  POINTER TO THE FIRST ELEMENT IS PLACED IN THE SECOND 
*  WORD OF THE SYMBOL TABLE ENTRY; FOR STRINGS FOLLOW THE 
*  PATTERN FOR ARRAYS WITH ONE WORD HOLDING THE PHYSICAL
*  DIMENSION IN BITS 15-8 AND THE DYNAMIC DIMENSION IN
*  BITS 7-0 (DIMENSION HERE MEANS LENGTH AS NUMBER OF 
*  CHARACTERS), STRING SPACE IS ALLOCATED ONE WORD PER
*  TWO CHARACTERS, AND THE DYNAMIC LENGTH IS INITIALIZED
*  TO ZERO.  FOR "DON'T KNOW" ARRAY ENTRIES, THE SECOND 
*  WORD OF THE SYMBOL TABLE ENTRY IS COPIED FROM THE
*  ASSOCIATED SINGLY OR DOUBLY SUBSCRIPTED ENTRY (OR
*  EXIT TO ERROR IF NONE EXISTS). 
*  FOR VARIABLES WHICH HAVE BEEN DECLARED IN A <COM 
*  STATEMENT>, STORAGE IS ALLOCATED IN THE COMMON AREA
*  WHICH RESIDES AHEAD OF THE PROGRAM. FOR ARRAYS AND 
*  STRINGS, THIS AREA IS LEFT UNDISTURBED IF THE DIMENSIONS 
*  DECLARED IN THE <COM STATEMENT> MATCH THOSE FOUND IN 
*  THE COMMON AREA, AND THE DYNAMIC DIMENSIONS ARE CONSISTENT 
*  IF A VALUE TABLE ALREADY EXISTS, VARIABLES IN COMMON ARE 
*  LEFT UNTOUCHED, VALUES OF SIMPLE VARIABLES AND ARRAY 
*  ELEMENTS ARE SET TO 'UNDEFINED' AND DYNAMIC ARRAY
*  DIMENSIONS ARE SET TO DECLARED DIMENSIONS; THE DYNAMIC 
*  LENGTHS OF STRINGS ARE SET TO ZERO.  EXIT TO XEC IF
*  PROCESSING IS SATISFACTORILY COMPLETED.
* 
VALUE LDB FCORE     INSURE CORRECT
      STB PBPTR       SETTING FOR PBPTR 
      LDB PBUFF     INITIALIZE
      STB COMPT       COMMON POINTER
      LDB SYMTB     SET (B) TO
      RSS             SYMBOL TABLE
VALU1 INB           SYMBOL TABLE
      CPB FILTB       EXHAUSTED?
      JMP VAL99     YES 
      LDA 1,I       NO, LOAD SYMBOL 
      INB           POINT (B) TO VALUE TABLE POINTER
      SZA,RSS       NULL SYMBOL?
      JMP VAL14     YES 
      AND .+17B     NO
      CPA .+17B     FUNCTION? 
      JMP VALU4     YES 
      SZA,RSS       NO, STRING VARIABLE?
      JMP VAL15     YES 
      ADA .-4       NO, 
      SSA             ARRAY?
      JMP VALU5     YES 
*                                *
**  INITIALIZE SIMPLE VARIABLE  **
*                                *
      LDA VLFLG     SIMPLE VARIABLE 
      SZA,RSS       STORAGE ALLOCATED?
      JMP VALU3     NO
      LDA 1,I       YES 
      CMA,INA       VARIABLE
      ADA 1           IN
      SSA,RSS           COMMON? 
      JMP VALU1     YES 
      LDA 1,I       NO
VALU2 STA VTMP1     SAVE POINTER TO VALUE 
      CCA           SET 
      STA VTMP1,I     VALUE TO
      JMP VALU1         UNDEFINED 
VALU3 LDA 1,I       VARIABLE
      SSA             IN COMMON?
      JMP VAL31     YES 
      LDA .+2       NO--ALLOCATE
      JSB CUSP        STORAGE 
      STA PBPTR         FOR VALUE 
      ADA .-2       PUT VALUE POINTER 
      STA 1,I         INTO SYMBOL TABLE 
      JMP VALU2 
VAL31 LDA COMPT     ALLOCATE STORAGE
      STA 1,I         IN COMMON 
      ADA .+2       UPDATE COMMON 
      STA COMPT       POINTER 
      JMP VALU1 
*                    *
**  CHECK FUNCTION  **
*                    *
VALU4 LDA 1,I       WAS FUNCTION
      SZA             DEFINED?
      JMP VALU1     YES 
      JSB DCMPL     NO, DECOMPILE 
      JSB RERRS+7,I UNDEFINED FUNCTION
*                      *
**  INITIALIZE ARRAY  **
*                      *
VALU5 CPA .-1       IS ARRAY TYPE "DON'T KNOW" ?
      JMP VAL13     YES 
      STB VTMP1     NO, SAVE POINTER TO SYMBOL TABLE
      INA           SAVE INFORMATION ON 
      STA VTMP2       NUMBER OF DIMENSIONS
      LDA VLFLG     STORAGE 
      SZA             ALLOCATED?
      JMP VAL12     YES 
      LDA 1,I       NO
      SSA           IN COMMON?
      JMP VAL51     YES 
      LDB VTMP1,I   NO, LOAD POINTER TO DIMENSIONS
      LDA PBPTR     SET POINTER TO
      STA VTMP3       DIMENSION ENTRY 
      LDA .+4       ALLOCATE
      JSB CUSP        SPACE 
      STA PBPTR         FOR ENTRY 
      STA VTMP1,I   SYMBOL TABLE POINTER TO ARRAY 
      SZB,RSS       DEFAULT DIMENSIONS? 
      JMP VAL11     YES 
      LDA 1,I       NO, LOAD ROW DIMENSION
      ADB .+2       BUMP POINTER
VALU6 ISZ VTMP2     TWO DIMENSIONAL?
      CLB,INB,RSS   NO, SET COLUMN DIMENSION TO 1 
      LDB 1,I       YES, LOAD COLUMN DIMENSION
      STA VTMP3,I   PUT 
      ISZ VTMP3       DECLARED DIMENSIONS 
      STB VTMP3,I       IN VALUE TABLE
VALU7 ISZ VTMP3     PUT 
      STA VTMP3,I     DYNAMIC DIMENSIONS
      ISZ VTMP3         IN
      STB VTMP3,I         VALUE TABLE 
      MPY VTMP3,I   COMPUTE NUMBER OF ARRAY ELEMENTS
      SZB,RSS       TOO 
      SSA             LARGE?
      JMP VAL10     YES 
      STA VTMP4     SAVE POSITIVE 
      CMA,INA         AND NEGATIVE
      STA VTMP2         COUNT 
      LDB VTMP3     HAS 
      INB             ARRAY BEEN
      CPB PBPTR         ALLOCATED?
      JMP VALU9     NO
VALU8 CCA           INITIALIZE
      STA 1,I         ARRAY ELEMENT 
      ADB .+2           TO 'UNDEFINED'
      ISZ VTMP2     DONE? 
      JMP VALU8     NO
      LDB VTMP1     YES 
      JMP VALU1 
VALU9 EQU * 
      ADA .5000     ARRAY 
      SSA             TOO LARGE?
      JMP VAL10     YES 
      LDA VTMP4     NO
      ALS           ALLOCATE
      JSB CUSP        SPACE 
      STA PBPTR         FOR ARRAY 
      JMP VALU8 
VAL10 JSB DCMPL     DECOMPILE 
      JSB RERRS+8,I ARRAY TOO LARGE 
VAL11 LDA .+10      LOAD (A) WITH 10
      LDB A.10      LOAD (B) WITH 
      JMP VALU6       ADDRESS OF 10 
VAL12 LDA 1,I       IS ARRAY
      CMA,INA 
      ADA 1           IN COMMON?
      SSA,RSS 
      JMP VALU1     YES 
      LDA VTMP1,I   NO--LOAD
      ADA .-4 
      STA VTMP3       DECLARED
      LDA VTMP3,I 
      ISZ VTMP3         DIMENSIONS
      LDB VTMP3,I 
      JMP VALU7 
VAL51 LDB VTMP1,I   SET 
      CMB,INB         DIMENSION 
      STB VTMP5         POINTER 
      STB VTMP1,I         POSITIVE
      LDA COMPT     SET 
      STA VTMP3       POINTER 
      ADA .+4           IN SYMBOL 
      STA VTMP1,I         TABLE 
      LDA 1,I       PHYSICAL ROW DIMENSION
      CPA VTMP3,I     SAME AS DECLARED DIMENSION? 
      RSS           YES 
      JMP VAL52     NO
      ADB .+2       B=> SECOND DIMENSION
      LDA VTMP2     TWO 
      CPA .-2         DIMENSIONAL?
      CLB,INB,RSS   NO--SET COLUMN DIMENSION TO 1 
      LDB 1,I       YES--LOAD COLUMN DIMENSION
      ISZ VTMP3     PHYSICAL COLUMN DIMENSION 
      CPB VTMP3,I     SAME AS DECLARED DIMENSION
      RSS           YES 
      JMP VAL52     NO
      LDA COMPT,I   COMPUTE SIZE OF 
      MPY VTMP3,I     ARRAY AS DECLARED 
      SZB,RSS       TOO 
      SSA             LARGE?
      JMP VAL52     YES 
      STA VTMP4     NO--SAVE SIZE 
      ADA .5000     TOO 
      SSA             LARGE?
      JMP VAL52     YES 
      ISZ VTMP3     NO
      LDA VTMP3,I   COMPUTE SIZE
      ISZ VTMP3       AS SPECIFIED BY 
      MPY VTMP3,I       DYNAMIC DIMENSIONS
      SZB,RSS       TOO 
      SSA             LARGE?
      JMP VAL52     YES 
      CMA,INA,SZA,RSS 
      JMP VAL52     CHEESE IT! DYNAMIC DIM = 0
      ADA VTMP4     DYNAMIC SIZE
      SSA             > DECLARED SIZE 
      JMP VAL52     YES 
      LDA VTMP1,I   = COMPT+4 
      ADA VTMP4 
      ADA VTMP4     UPDATE
      STA COMPT       COMMON POINTER
      LDB VTMP1     RESTORE (B) 
      JMP VALU1 
VAL52 LDB VTMP5     => ROW DIMENSION
      LDA 1,I 
      ADB .+2       => COLUMN DIMENSION 
      ISZ VTMP2     TWO-DIMENSIONAL?
      CLB,INB,RSS   NO--LOAD DEFAULT DIMENSION
      LDB 1,I       PUT 
      STA COMPT,I     DECLARED
      ISZ COMPT         DIMENSIONS IN 
      STB COMPT,I         COMMON AREA 
      ISZ COMPT     PUT 
      STA COMPT,I     DYNAMIC 
      ISZ COMPT         DIMENSIONS IN 
      STB COMPT,I         COMMON AREA 
      MPY COMPT,I   COMPUTE NUMBER OF ARRAY ELEMENTS
      SZB,RSS       TOO 
      SSA             LARGE?
      JMP VAL10     YES 
      CMA,INA       NO--SAVE COMPLEMENT 
      STA VTMP2       OF NUMBER OF ELEMENTS 
      CMA,INA       ARRAY 
      ADA .5000       TOO 
      SSA               LARGE?
      JMP VAL10     YES 
      ISZ COMPT     NO
      LDB COMPT     INITIALIZE
      CCA             ALL 
VAL53 STA 1,I           ELEMENTS
      ADB .+2             TO
      ISZ VTMP2             UNDEFINED 
      JMP VAL53 
      STB COMPT     UPDATE COMMON POINTER 
      LDB VTMP1     RESTORE (B) 
      JMP VALU1 
VAL13 LDA VLFLG     STORAGE 
      SZA             ALLOCATED?
      JMP VALU1     YES 
      LDA 1,I       NO, GET 
      LDA 0,I         AND STORE 
      STA 1,I           POINTER TO
      JMP VALU1           VALUE TABLE 
VAL14 JSB DCMPL     DECOMPILE 
      JSB RERRS+9,I NUMBER OF DIMENSIONS NOT KNOWN
      SKP 
*                                *
**  INITIALIZE STRING VARIABLE  **
*                                *
VAL15 STB VTMP1     SAVE (B)
      LDA VLFLG     STORAGE 
      SZA             ALLOCATED?
      JMP VAL17     YES 
      LDA 1,I       NO
      SSA           IN COMMON?
      JMP VAL18     YES 
      LDB VTMP1,I   NO, SAVE LENGTH POINTER 
      LDA PBPTR     SET POINTER TO
      STA VTMP3       LENGTH ENTRY
      INA           MORE
      CPA LWAUS       USER SPACE? 
      JSB RERRS+10,I  NO
      STA PBPTR     YES, SET POINTER TO STRING
      STA VTMP1,I     INTO SYMBOL TABLE ENTRY 
      SZB,RSS       DEFAULT LENGTH? 
      CLA,INA,RSS   YES, SET (A) = 1
      LDA 1,I       NO, LOAD DECLARED LENGTH
      ALF,ALF       STORE PHYSICAL LENGTH 
      STA VTMP3,I     ALONG WITH ZERO 
      ALF,ALF           LOGICAL LENGTH
      INA           ALLOCATE
      ARS             SPACE 
      JSB CUSP          FOR 
      STA PBPTR           STRING
VAL16 LDB VTMP1     RESTORE 
      JMP VALU1       (B) 
VAL17 LDA 1,I 
      CMA,INA       STRING
      ADA 1           IN
      SSA,RSS           COMMON? 
      JMP VALU1     YES 
      CCB           NO--RESET 
      ADB VTMP1,I 
      LDA 1,I         LOGICAL LENGTH
      AND M256
      STA 1,I           TO ZERO 
      JMP VAL16 
VAL18 CMA,INA       SET POINTER POSITIVE
      STA VTMP3     => DIMENSION INFORMATION
      LDA COMPT     SET VALUE 
      INA             POINTER IN
      STA 1,I           SYMBOL TABLE
      LDA COMPT,I   EXTRACT PHYSICAL
      ALF,ALF         LENGTH FROM 
      AND B377          COMMON AREA 
      CPA VTMP3,I   SAME AS DECLARED LENGTH?
      RSS           YES 
      JMP VAL20     NO
      LDA COMPT,I   LOGICAL 
      AND B377
      CMA,INA         LENGTH <= 
      ADA VTMP3,I 
      SSA               PHYSICAL LENGTH?
      JMP VAL20     NO
      LDA VTMP3,I   LOAD PHYSICAL LENGTH
      JMP VAL19 
VAL20 LDA VTMP3,I   RESET PHYSICAL LENGTH TO
      ALF,ALF         DECLARED LENGTH AND 
      STA COMPT,I       LOGICAL LENGTH TO ZERO
      ALF,ALF 
VAL19 INA           UPDATE
      ARS 
      INA             COMMON
      ADA COMPT 
      STA COMPT         POINTER 
      JMP VALU1 
VAL99 EQU * 
      LDA VLFLG     HAS STORAGE 
      SZA             BEEN ALLOCATED? 
      JMP VAL98     YES 
      LDA USESN     NO, ANY 'PRINT
      SZA,RSS         USING' STATEMENTS?
      JMP VAL98     NO
      LDA PBPTR     YES,
      STA IFSS        ALLOCATE
      LDA .72            SPACE FOR
      JSB CUSP            FORMAT
      STA PBPTR             STACK 
VAL98 EQU * 
      CLA,INA       SAY STORAGE 
      STA VLFLG       ALLOCATED 
      LDA PBPTR     POINTER TO END
      STA FCORE       OF FIXED TABLES 
      JMP XEC 
      END 
