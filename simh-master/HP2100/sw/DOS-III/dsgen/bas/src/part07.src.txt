ASMB,R,B,L,X
      NAM LSUB,7
      SPC 2 
      ENT LTYPR,LTYPE,LCHAR,LLEND,MOVEW,MOVEB,ILFER 
      ENT DLOOK,SEMIC 
      ENT LIBER 
      SPC 2 
      COM PBPTR,NEG(26),.(52),MAIN,SPROG,SYMTB,ERRCT
      COM SBPTR,SBUFA,SSTAK,SYNTQ,SERRS(36),RERRS(50) 
      COM FERRS(15),WERRS(10),MAXCR,MSFLG,PFLAG,SFLAG 
      COM DFLAG,TEMP(3),CDFLG,ARYAD,GFLAG,SIGN,UFLAG
      COM PINTG(2),TABLE,LNGTH,SMBGN,SLENG,COUNT
      COM TBLPT,TSPTR,SBT0
      COM EXP,MANT1,MANT2,EXPON,DPFLG,NT0,ENOUF 
      COM LNAME,CHRCT,OCTMP,SPTR,FILTB,NSPTR,INFST
      COM DCLC1,DEST,DCLC2,STEND,DFILT,FILPT,COMSN
      COM MVEND 
      COM STYPE,USESN,FILCT,.LNUM 
      COM PRGCT,STCT1,STCT2,NUMPT,STCT3,FLINK 
      COM STMP1,STMP2,VLFLG,VALTB,FCORE,COMPT,VTMP1 
      COM VTMP2,VTMP3,VTMP4,VTMP5,IFSS
      COM CU1,APTR,DCFLG,TEMP2,LT1,LT2,FCNTR,RTNST
      COM ASINP,RTRNQ,FORQ,TEMP1,FILE#
      COM INTMP,TMPST,TPRME,TNULL,PS1,DMY3,TEMP5
      COM PRIST,FBASE,RQ3,EOL,GTMP,FORST,EFN0,FVT 
      COM EFN1,EFN2,EFN3,MCNT,INITF,IFCNT,OPDST 
      COM FFLG,TEMP4,EORFL,NCH,TEMP6,STRLN,ATIM,LT5 
      COM ASTYP,ASBFP,ORDNO,ATMP(2),RETCD 
      COM DCCNT,NXTDT,VL0,RCRD#,PMASK,ITEMP 
      COM OPTRQ,EST3,EST2,EST1,TT1,TT2,DMY1 
      COM DMY2,TT3,TT4,CP0,CP1,PS0,MPT,NQT,RT0
      COM RT1,TRFCH,TRS0,A1,A2,C1,EOPF,NUMBF(6),FD0 
      COM OT1,OT2,OT3,LBTMP,REPCT,RNDX1,RNDX2 
      COM X2TMP(2),CTMP,DTMP(2),BTMP(2),XTEMP(2),YTEMP(2) 
      COM UTEMP(2),LT0,LT8,LT3,LT6,LT7,LT4,DIGCT
      COM NMPTR,NMTMP,FFLAG,DGCNT 
      COM IFSTR,EC,CC,DP,CONTR,CC1,CC2,PC1,PC2
      COM SFLG,FST,EFLAG,NUM1,NUM2,SBD,SAD,SNFLG
      COM NAD,NBD,FSP,EST,NUMW1,NUMW2,EXPW
      COM IHB,HBP,NHBW,NBLK,TOTDG,DCTR
      COM EDSTA,LCH,ELCNT 
      COM STPTR,RSPTR,TEMP3 
      COM MT1,MT0,MT3,MT2,MEXIT,DMY4,MOP,BS2,BS3
      COM MMT0,MMT1,MMT2,MMT6(2),MMT7(2),MMT3,MMT4,MMT5 
      COM MMT8(2),SCALR(2),ID0,ID1,MAXE(2),TOL(2),PIVEL 
      COM VT0,RD0 
      COM SOURC,TAP0,TAP1 
      COM STIME(5)
      COM LTEMP(16),LTYP1,LTYP2,LCHCR,MOVES,MOVED 
      COM ERSEC(77),DRFLG,DIREC(256),DTEMP,DCNT 
      COM DTRAK,DSECT 
      SPC 2 
      EXT OUTCH,S14SC,SCHEQ 
      EXT PBUFF 
      EXT EXEC,MLINB
      SPC 2 
A     EQU 0 
B     EQU 1 
      SPC 2 
LOUT  EQU OUTCH 
?ABP2 DEF CRLF
CRLF  OCT 6412
M96   OCT -140
M32   DEC -32 
.140  OCT 140 
GTC   OCT 40000 
LIBSC EQU LTEMP+8 
LIBSP EQU LTEMP+9 
LIBPB EQU LTEMP+13
?LINK EQU 15B 
CFLAG EQU .+2 
SECTR EQU 116B
* 
LTYPR NOP           OUTPUT -A CHARS TO USER'S TTY;
      STA LTYP1  B POINTS TO BUFFER.
      STB LTYP2 
LTYP3 LDA LTYP2,I   GET FIRST 
      ALF,ALF        CHARACTER OF WORD
      JSB LOUT        OUT.
      ISZ LTYP1     ANY MORE? 
      RSS            YES
      JMP LTYPR,I   NO. 
      LDA LTYP2,I   SEND 2ND
      JSB LOUT       CHAR.
      ISZ LTYP2     BUMP POINTER. 
      ISZ LTYP1     ANY MORE? 
      JMP LTYP3     YES 
      JMP LTYPR,I 
LTYPE NOP           SAME AS LTYPR BUT WITH CRLF.
      JSB LTYPR 
      LDA .-2 
      LDB ?ABP2 
      JSB LTYPR 
      JMP LTYPE,I 
* 
LCHAR NOP      GET NEXT INPUT CHAR.--SKIP RETURN
      LDA LCHCR     GET CARRIAGE RETURN FLAG
      CPA .+15B     PREVIOUS RETURN?
      JMP LCHAR,I   YES 
LCHR1 LDA GTC 
      JSB S14SC 
      STA LCHCR     SET CARRIAGE RETURN FLAG
      CPA .+40B     BLANK?
LCHR2 JMP LCHR1     YES, IGNORE IT
      CPA .+15B     NO, CARRIAGE RETURN 
      JMP LCHAR,I   YES--EXIT 
      ADA M96 
      SSA,RSS       LOWER CASE? 
      ADA M32       YES, CONVERT
      ADA .140      NO
      ISZ LCHAR     NO--EXIT
      JMP LCHAR,I     TO (P+2)
LLEND LDA .+12B 
      JSB LOUT
      JMP SCHEQ 
* 
MOVEB NOP           MOVE BACKWARD -B WORDS FROM 
      SSB,INB,RSS    MOVES TO MOVED.
      JMP MOVEB,I 
      LDA MOVES,I 
      STA MOVED,I 
      CCA           UPDATE POINTERS.
      ADA MOVED 
      STA MOVED 
      CCA 
      ADA MOVES 
      STA MOVES 
      JMP MOVEB+1 
* 
MOVEW NOP           MOVES -B WORDS FROM MOVES,I TO
      SSB,INB,RSS    MOVED,I
      JMP MOVEW,I 
      LDA MOVES,I   GET A WORD
      STA MOVED,I   STORE IT. 
      ISZ MOVES     BUMP
      ISZ MOVED      POINTERS.
      JMP MOVEW+1   NO. 
* 
LFRDF DEF *+1 
      OCT 5111
      ASC 7,LLEGAL FORMAT 
ILFER LDA .-15      OTHERWISE PRINT IT ON 
      LDB LFRDF     USER TELETYPE.
LIBER JSB LTYPE 
      LDA PRIST 
      SZA,RSS 
      JMP SCHEQ 
      JMP LLEND 
      SPC 2 
DLOOK NOP 
      LDA DRFLG    GET DIRECTORY FLAG 
      SZA          FIRST ENTRY? 
      JMP DSRCH    NO. SEARCH DIRECTORY 
      JSB EXEC     YES INITIALIZE DIRECTORY 
      DEF *+4 
      DEF .+18
      DEF FILA
      DEF NSECT 
      LDB NSECT    GET # SECTORS IN $FILS 
      SZB,RSS      DOES $FILS EXIST?
      JMP DLOOK,I  NO. RETURN 
      STA DTRAK    YES. SAVE START. TRACK/SECTOR
      AND =B377 
      STA DSECT 
      LDA DTRAK 
      ALF,ALF 
      AND =B377 
      STA DTRAK 
      JSB RDIRC 
      JMP DLOK1 
      SPC 1 
RDIRC NOP 
      JSB EXEC     READ IN DIRECTORY
      DEF *+7 
      DEF .-1 
      DEF .103
      DEF DIREC 
      DEF D256
      DEF DTRAK 
      DEF DSECT 
      JMP RDIRC,I 
      SPC 1 
DLOK1 EQU * 
      LDA DIREC    GET FIRST WORD OF DIRECT.
      CPA =A$F     ="$F"? 
      RSS          YES CONTINUE 
      JMP DLOOK,I  NO. RETURN 
      LDA DIREC+3  GET # SECTORS FROM DIRECT. 
      CPA NSECT    = # SHOWN BY SYSTEM? 
      ISZ DRFLG    YES. SET DIRECTORY FLAG
      JMP DLOOK,I  NO. RETURN 
      SPC 2 
DSRCH LDB DIRAD 
      CLA,INA 
      STA DCNT
DSR0  CPA DIREC+5 
      JMP DSR9
      ISZ DCNT
      LDA LTEMP 
      CPA B,I 
      JMP DSR2
      ADB .+8 
DSR1  LDA DCNT
      JMP DSR0
DSR2  LDA LTEMP+1 
      INB 
      CPA B,I 
      JMP DSR4
      ADB .+7 
      JMP DSR1
DSR4  LDA LTEMP+2 
      INB 
      CPA B,I 
      JMP DSR3
      ADB .+6 
      JMP DSR1
DSR3  INB 
      LDA B,I 
      STB DTEMP 
      ADA DSECT 
      CLB 
      DIV SECTR 
      ADA DTRAK 
      ALF,ALF 
      ADA B 
      LDB DTEMP 
      INB 
      JMP DLOOK,I 
      SPC 1 
DSR9  ISZ DLOOK 
      JMP DLOOK,I 
FILA  ASC 3,$FILS 
NSECT NOP 
.103  OCT 103 
D256  DEC 256 
DIRAD DEF DIREC+8 
* 
*  CHECK IF THE PROGRAM WHICH HAS JUST BEEN LOADED FROM THE USER
*  LIBRARY IS SEMI-COMPILED, AND SET THE NECESSARY COMPILER 
*  VARIABLES.  LIBSC, LIBSP, AND LIBPB ARE PASSED TO THIS ROUTINE 
*  FROM THE LIBRARY ROUTINE WHICH CALLS IT (CHAIN, GET, OR HELLO) 
* 
SEMIC NOP 
      LDA LIBSC 
      SSA           SEMI-COMPILED?
      JMP SEMI1     YES 
      CLA           NO--CLEAR OUT-OF- 
      STA SYMTB       STORAGE FLAG
      LDA LIBPB     SET LENGTH
      STA PBPTR       POINTER 
      LDB MLINB    SET
      ADB .-?LINK     UNCOMPILED
      LDA CFLAG         BIT 
      CMA 
      AND 1,I 
      JMP SEMI3 
SEMI1 LDA LIBPB     SET 
      ADA .-7         LENGTH
      STA PBPTR         POINTER 
      STA FILTB 
      LDB 0,I       SET END-OF- 
      ADB PBUFF 
      STB SYMTB       PROGRAM POINTER 
      INA           SET <FILES
      LDB 0,I         STATEMENT>
      STB FILCT         COUNTER 
      LDB DFILT     POINTER TO
      STB FILPT       <FILES STATEMENTS>
      LDB .-4       4 <FILES
      STB SPTR        STATEMENTS> POSSIBLE
SEMI2 INA           STORE 
      LDB 0,I         POINTER 
      ADB PBUFF 
      STB FILPT,I       TO <FILES 
      ISZ FILPT           STATEMENT>
      ISZ SPTR      ALL 4 DONE? 
      JMP SEMI2     NO
      INA           SAVE
      LDB 0,I         'USING
      STB USESN         SEEN' FLAG
      LDB MLINB    SET
      ADB .-?LINK     COMPILED
      LDA 1,I           BIT 
      IOR CFLAG 
SEMI3 STA 1,I       SET 
      STB MAIN        MAIN
      LDB LIBSP     SET START-OF- 
      STB SPROG       PROGRAM POINTER 
      JMP SEMIC,I 
      END 
