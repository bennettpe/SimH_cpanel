ASMB,R,B,L,X
      NAM ERR1,7
      SPC 2 
      ENT TAPER 
      SPC 2 
      COM PBPTR,NEG(26),.(52),MAIN,SPROG,SYMTB,ERRCT
      COM SBPTR,SBUFA,SSTAK,SYNTQ,SERRS(36),RERRS(50) 
      COM FERRS(15),WERRS(10),MAXCR,MSFLG,PFLAG,SFLAG 
      COM DFLAG,TEMP(3),CDFLG,ARYAD,GFLAG,SIGN,UFLAG
      COM PINTG(2),TABLE,LNGTH,SMBGN,SLENG,COUNT
      COM TBLPT,TSPTR,SBT0
      COM EXP,MANT1,MANT2,EXPON,DPFLG,NT0,ENOUF 
      COM LNAME,CHRCT,OCTMP,SPTR,FILTB,NSPTR,INFST
      COM DCLC1,DEST,DCLC2,STEND,DFILT,FILPT,COMSN
      COM MVEND 
      COM STYPE,USESN,FILCT,.LNUM 
      COM PRGCT,STCT1,STCT2,NUMPT,STCT3,FLINK 
      COM STMP1,STMP2,VLFLG,VALTB,FCORE,COMPT,VTMP1 
      COM VTMP2,VTMP3,VTMP4,VTMP5,IFSS
      COM CU1,APTR,DCFLG,TEMP2,LT1,LT2,FCNTR,RTNST
      COM ASINP,RTRNQ,FORQ,TEMP1,FILE#
      COM INTMP,TMPST,TPRME,TNULL,PS1,DMY3,TEMP5
      COM PRIST,FBASE,RQ3,EOL,GTMP,FORST,EFN0,FVT 
      COM EFN1,EFN2,EFN3,MCNT,INITF,IFCNT,OPDST 
      COM FFLG,TEMP4,EORFL,NCH,TEMP6,STRLN,ATIM,LT5 
      COM ASTYP,ASBFP,ORDNO,ATMP(2),RETCD 
      COM DCCNT,NXTDT,VL0,RCRD#,PMASK,ITEMP 
      COM OPTRQ,EST3,EST2,EST1,TT1,TT2,DMY1 
      COM DMY2,TT3,TT4,CP0,CP1,PS0,MPT,NQT,RT0
      COM RT1,TRFCH,TRS0,A1,A2,C1,EOPF,NUMBF(6),FD0 
      COM OT1,OT2,OT3,LBTMP,REPCT,RNDX1,RNDX2 
      COM X2TMP(2),CTMP,DTMP(2),BTMP(2),XTEMP(2),YTEMP(2) 
      COM UTEMP(2),LT0,LT8,LT3,LT6,LT7,LT4,DIGCT
      COM NMPTR,NMTMP,FFLAG,DGCNT 
      COM IFSTR,EC,CC,DP,CONTR,CC1,CC2,PC1,PC2
      COM SFLG,FST,EFLAG,NUM1,NUM2,SBD,SAD,SNFLG
      COM NAD,NBD,FSP,EST,NUMW1,NUMW2,EXPW
      COM IHB,HBP,NHBW,NBLK,TOTDG,DCTR
      COM EDSTA,LCH,ELCNT 
      COM STPTR,RSPTR,TEMP3 
      COM MT1,MT0,MT3,MT2,MEXIT,BS1,MOP,BS2,BS3 
      COM MMT0,MMT1,MMT2,MMT6(2),MMT7(2),MMT3,MMT4,MMT5 
      COM MMT8(2),SCALR(2),ID0,ID1,MAXE(2),TOL(2),PIVEL 
      COM VT0,RD0 
      COM SOURC,TAP0,TAP1 
      SPC 2 
      EXT PBUFF,MOVER,LWAUS,SERR,WERRA,FERRA
      EXT SERRB,SCHLB,ERSTS 
      EXT ABFLG 
      SPC 2 
TERR  EQU .+1 
OPMSK OCT 77000 
* 
*  WHILE READING A PROGRAM IN 'TAPE' MODE, ERRONEOUS STATEMENTS 
*  ARE REPLACED WITH ERROR PSUEDO-STATEMENTS.  THESE ARE THREE
*  WORD 'STATEMENTS':  THE STATEMENT NUMBER, THE LENGTH (ALWAYS 
*  3), AND THE ERROR NUMBER.  SINCE BITS 15-9 ARE CLEAR IN WORD 
*  THREE, ERRORS HAVE A STATEMENT TYPE OF 0.  ERRCT HOLDS A 
*  COUNT OF THE EMBEDDED ERRORS AND THE USER'S BIT OF TERR IS 
*  SET IF ANY EMBEDDED ERRORS EXIST.  ADDITIONALLY, THE 'OUT-OF-
*  STORAGE' ERROR SETS SYMTB = 1 TO ASSIST SYNTAX.  ALL STATEMENTS
*  WITH A SEQUENCE NUMBER OF ZERO WILL BE COLLAPSED INTO A SINGLE 
*  ERROR AND UNDER/OVERFLOWS IN NUMERICAL CONSTANTS ARE NOT 
*  REPORTED.
* 
**                             ** 
***  OUTPUT TAPE MODE ERRORS  *** 
**                             ** 
* 
*  UPON ENTRY ALL EMBEDDED ERRORS ARE STRIPPED FROM THE PROGRAM 
*  AND STORED BELOW IT AS TWO-WORD QUANTITIES (THE LENGTH WORD
*  IS DROPPED).  FOLLOWING THIS THE ERRORS ARE PRINTED ONE BY 
*  ONE WITH LINE NUMBERS.  AFTER PRINTING ALL ERRORS (OR, IF THE
*  USER ABORTS THE ERROR PRINTING, AFTER THE USER TYPES THE NEXT
*  LINE) EVERYTHING IS CLEANED UP AND A MESSAGE PRINTED TO SAY
*  THE LAST RECEIVED INPUT HAS BEEN IGNORED.
* 
TAPER CLA           FIRST 
      CPA ERRCT       ENTRY?
      JMP TAPE5     NO
      STA SYMTB     YES, RESET 'OUT OF STORAGE' FLAG
      LDA PBPTR     INITIALIZE
      STA SPTR
      JSB ERSTS 
      LDB PBUFF       PROGRAM 
      STB DEST
      STB SOURC         POINTERS
*                               * 
**  STRIP OUT EMBEDDED ERRORS  ** 
*                               * 
TAPE1 INB           SET (B) 
     LDA 1           TO FIRST WORD
      ADB 1,I           OF NEXT 
      ADB .-1             PROGRAM STATEMENT 
      INA           IS THE
      LDA 0,I         CURRENT STATEMENT 
      AND OPMSK         OF TYPE 
      SZA                 'ERROR' ? 
      JMP TAPE1     NO
      LDA SOURC     YES, LOAD SOURCE ADDRESS
      STB SOURC     SET SOURCE TO NEW VALUE 
      ADB .-3       JUXTAPOSED
      CPA 1           ERRORS? 
      JMP TAPE2     YES, NO MOVE NEEDED 
      CPA DEST      NO, FIRST ERROR ENCOUNTERED?
      JMP TAPE6     YES 
      JSB MOVER     NO, DELETE PRIOR ERROR(S) 
TAPE2 LDB PBPTR     ENOUGH
      STB TAP0
      INB             USER SPACE
      CPB LWAUS 
      JMP TAPE7         TO TRANSFER 
      INB 
      CPB LWAUS           ERROR?
      JMP TAPE7     NO
      STB PBPTR     YES, APPEND TWO WORDS 
      LDB 0,I       TRANSFER
      STB TAP0,I      LINE NUMBER 
      ISZ TAP0
      ADA .+2       TRANSFER
      LDB 0,I         ERROR 
      STB TAP0,I        NUMBER
      LDB SOURC     RETRIEVE POINTER TO STATEMENT 
      CCA           DECREMENT 
      ADA ERRCT       ERROR 
      STA ERRCT         COUNTER 
      SZA           ALL ERRORS DELETED? 
      JMP TAPE1     NO
      CPB SPTR      YES, PROGRAM REMAINING? 
      JMP TAPE3     NO
      LDA SOURC     YES, SLIDE UP 
      LDB SPTR        OVER LAST 
      JSB MOVER         ERROR(S)
*                           * 
**  OUTPUT ERROR MESSAGES  ** 
*                           * 
TAPE3 CLA,INA 
      STA ABFLG 
      LDA RETAD      SET
      STA SERR        RETURN ADDRESS
      LDA WERRA     FAKE
      ADA FERRA 
      CMA,INA         'WARNING ONLY'
      STA LT5           ERROR MODE
TAPE4 CCB           FORCE 
      STB LT6         LINE NUMBER 
      LDB SPTR,I    MAKE LINE NUMBER OF 
      STB .LNUM       CURRENT ERROR ACCESSIBLE
      ISZ SPTR      LOAD
      LDA SPTR,I      ERROR NUMBER
      STA LT3        SAVE.
      JMP SERRB 
      SPC 1 
RETAD DEF *+1 
      LDA FERRA     RESTORE 
      CMA,INA       'WARNING
      ADA LT5           ONLY' 
      STA LT5             MODE
      ISZ SPTR      MORE
      LDA SPTR
      CPA PBPTR       ERRORS? 
      RSS           NO
      JMP TAPE4     YES 
TAPE5 LDA DEST      CORRECT POINTER TO
      STA PBPTR       LAST WORD +1 OF PROGRAM 
      LDA TERR      TURN
      CMA             ERROR 
      AND MAIN,I        FLAG
      STA MAIN,I          OFF 
      JSB RERRS+33,I  EMIT PARTING SHOT 
* 
TAPE6 STB DEST      SET DESTINATION POINTER 
      LDA 1           TO FIRST ERROR ENCOUNTERED
      JMP TAPE2 
TAPE7 STA TAP1      SAVE SOURCE ADDRESS 
      CMA,INA       COMPUTE SIZE OF AREA
      ADA DEST        TO BE RECLAIMED 
      STA TAP0          AND SAVE IT 
      ADA SPTR      RESET POINTER TO
      STA SPTR        LAST WORD +1 OF PROGRAM 
      LDB SOURC     SET POINTER TO
      ADB TAP0        NEXT STATEMENT
      STB SOURC         TO NEW VALUE
      LDA TAP1      RETRIEVE SOURCE ADDRESS 
      LDB PBPTR     RECLAIM 
      JSB MOVER       SPACE 
      LDB DEST      SET NEW POINTER TO
      STB PBPTR       PROTECTED AREA
      LDA SOURC     COMPUTE POINTER TO
      ADA .-3         CURRENT ERROR STATEMENT 
      STA DEST      SET NEW DESTINATION POINTER 
      JMP TAPE2+1 
      END 
