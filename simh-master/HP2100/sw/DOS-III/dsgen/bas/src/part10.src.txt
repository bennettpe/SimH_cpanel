ASMB,R,B,L,X
      HED DECOMPILE ROUTINE 
      NAM MISC1,7 
      SPC 2 
      ENT DCMPL,PRNS1,PRNS2,PRNSB,PRNSC,PRNST 
      SPC 2 
      COM PBPTR,NEG(26),.(52),MAIN,SPROG,SYMTB,ERRCT
      COM SBPTR,SBUFA,SSTAK,SYNTQ,SERRS(36),RERRS(50) 
      COM FERRS(15),WERRS(10),MAXCR,MSFLG,PFLAG,SFLAG 
      COM DFLAG,TEMP(3),CDFLG,ARYAD,GFLAG,SIGN,UFLAG
      COM PINTG(2),TABLE,LNGTH,SMBGN,SLENG,COUNT
      COM TBLPT,TSPTR,SBT0
      COM EXP,MANT1,MANT2,EXPON,DPFLG,NT0,ENOUF 
      COM LNAME,CHRCT,OCTMP,SPTR,FILTB,NSPTR,INFST
      COM DCLC1,DEST,DCLC2,STEND,DFILT,FILPT,COMSN
      COM MVEND 
      COM STYPE,USESN,FILCT,.LNUM 
      SPC 2 
      EXT MLINB,PBUFF,MOVER,ABCHK,CM10B,CMPL7 
      SPC 2 
OPMSK OCT 77000 
DIMOP OCT 47000 
COMOP OCT 45000 
REMOP OCT 51000 
DATOP OCT 62000 
IMGOP OCT 44000 
FILOP OCT 70000 
MATOP OCT 67000 
PRTOP OCT 65000 
USEOP OCT 43000 
B1000 OCT 1000
B     EQU 1 
CFLAG EQU .+2 
?LINK EQU 15B 
**                                      **
***  DECOMPILE ALL OR PART OF PROGRAM  ***
**                                      **
* 
*  IF CFLAG[I] = 0 PROGRAM IS IN SOURCE, EXIT IMMEDIATELY;
*  ELSE SET CFLAG[I] = 0 AND DECOMPILE PROGRAM.  SPTR POINTS
*  INITIALLY TO LAST WORD+1 OF COMPILED PROGRAM.  ABSOLUTE
*  ADDRESSES ARE REPLACED BY THE SEQUENCE NUMBERS TO WHICH
*  THEY POINT.  VARIABLE OPERAND POINTERS ARE REPLACED BY 
*  THEIR SYMBOL.  PBPTR IS SET TO LAST WORD+1 OF PROGRAM. 
* 
DCMPL NOP 
#DCMP LDA CFLAG     PROGRAM 
      LDB MLINB 
      ADB .-?LINK 
      AND 1,I         COMPILED? 
      SZA,RSS 
      JMP DCMP4     NO
      XOR 1,I       SET PROGRAM MODE
      STA 1,I         TO 'UNCOMPILED' 
      LDA PBPTR     NULL
      CPA PBUFF       PROGRAM?
      JMP DCMP3+2   YES 
      LDA SPTR      SPTR=0 TO FLAG
      SZA,RSS         SEMI-COMPILED ? 
      LDA SYMTB     YES--RESET IT TO CORRECT VALUE
      STA SPTR      SET TERMINATION 
      STA FILTB       ADDRESS 
      JSB PRNST     INITIALIZE
      DEF PRNS1       DECOMPILATION 
      CLB,SEZ,RSS   WAS FLAG BIT SET? 
      JMP DCMP2     NO
*                                  *
**  PROCESS NON-VARIABLE OPERAND  **
*                                  *
      ADA .-4       PROGRAM 
      SSA,RSS         INTEGER?
      JMP PRNS2     NO
DCMP1 ISZ SPTR      YES, MOVE TO
      LDB SPTR        NEXT WORD 
      CPB FILTB     DONE? 
      JMP DCMP3     YES 
      CPB NSPTR     NO, STATEMENT DONE? 
      JMP PRNS1+1   YES 
      LDA SPTR,I    NO, REPLACE 
      LDA 0,I         ABSOLUTE ADDRESS
      STA SPTR,I        WITH SEQUENCE NUMBER
      ISZ INFST     IN <USING STATEMENT>? 
      JMP DCMP1     NO
      JMP PRNS2     YES 
*                              *
**  PROCESS VARIABLE OPERAND  **
*                              *
DCMP2 ADA .-1       COMPUTE 
      CLE,ELA 
      STA 1 
      ADB SYMTB         ADDRESS 
      LDA SPTR,I    EXTRACT 
      AND OPMSK       OPERATOR
      IOR 1,I       REPLACE OPERATOR- 
      STA SPTR,I      OPERAND PAIR IN CODE
      LDB STYPE 
      CPB DIMOP     'DIM' ? 
      JMP DCMP6     YES 
      CPB COMOP     NO, 'COM'?
      RSS           YES 
      JMP PRNS2     NO
DCMP6 LDB SPTR
      INB 
      CPB FILTB     DONE? 
      JMP DCMP3     YES 
      INB           NO
      AND .+17B     STRING
      ADA .-4       SIMPLE
      SSA,RSS         VARIABLE? 
      JMP PRNS2     YES 
      ADA .+4       NO, STRING
      SZA,RSS         VARIABLE? 
      INA           YES, SET TO SINGLE SUBSCRIPT MODE 
      JMP CM10B 
DCMP3 LDA SYMTB     SET ACTIVE USER AREA POINTER
      STA PBPTR       TO LAST WORD+1 OF PROGRAM 
      CLA           ZERO
      STA SYMTB       POINTER 
DCMP4 STA DCLC1,I   BLOCK CLOCK 
      LDB PBUFF 
      CPB SPROG     COMMON ALLOCATED? 
      JMP DCMP5     NO
      CPB PBPTR     YES, NULL PROGRAM?
      JMP DCMP5     YES 
      STB DEST      NO
     LDA SPROG     SET UP 
      STB SPROG       POINTERS
      LDB PBPTR         FOR MOVE
      JSB MOVER     REMOVE COMMON AREA
      LDB DEST      RESET END-OF- 
      STB PBPTR       PROGRAM POINTER 
DCMP5 JSB ABCHK    ABORT ATTEMPT DURING COMPILE?
      LDA DCLC2,I   NO--UNBLOCK 
      STA DCLC1,I     CLOCK 
      JMP DCMPL,I 
      SKP 
**                                       ** 
***  PROCESS NEXT STATEMENT OF PROGRAM  *** 
**                                       ** 
* 
*  USED BY CMPLE AND DCMPL TO SCAN THROUGH THE PROGRAM. 
*  A 'JSB PRNST' INITIALIZES THE SCAN: (P+1) IS A POINTER 
*  TO THE CODE FOR HANDLING THE END-OF-STATEMENT CONDITION; 
*  .LNUM HOLDS THE SEQUENCE NUMBER OF THE STATEMENT BEING 
*  PROCESSED; SPTR POINTS TO THE WORD OF THE PROGRAM BEING
*  PROCESSED.  PRNST HANDLES <REM STATEMENT>, <DATA STATEMENT>, 
*  STRING CONSTANTS, NULL OPERANDS, NUMERICAL CONSTANTS, AND
*  <FILES STATEMENT>.  OTHER CASES EXIT TO (P+2).  PRNST IS 
*  RE-ENTERED DIRECTLY, LEAVING THE INITIALIZED EXIT ADDRESSES
*  UNCHANGED THROUGHOUT PROCESSING OF THE PROGRAM.
* 
PRNST NOP 
#PNST LDA PRNST,I   SET POINTER TO
      STA STEND       END-OF-STATEMENT
      ISZ PRNST         PROCESSING ROUTINE
      LDA DFILT     INITIALIZE POINTER TO 
      STA FILPT       <FILES STATEMENT> TABLE 
      CLA           INITIALIZE
      STA COMSN       COM FLAG
      STA USESN         AND USING FLAG
      LDA .-5       INITIALIZE <FILES 
      STA FILCT       STATEMENT> COUNTER
      LDB SPROG     INITIAL PROGRAM POINTER 
PRNS1 STB SPTR      SET PROGRAM POINTER TO STATEMENT
      LDA SPTR,I    SAVE STATEMENT
      STA .LNUM       SEQUENCE NUMBER 
      ISZ SPTR      COMPUTE 
      ADB SPTR,I      LENGTH
      STB NSPTR     SAVE POINTER TO NEXT STATEMENT
      ISZ SPTR      EXTRACT 
      LDA SPTR,I      STATEMENT 
      AND OPMSK         TYPE
      STA STYPE     SAVE IT 
      CPA COMOP     'COM' ? 
      JMP *+3       YES 
      STB COMSN     NO--CLEAR COM FLAG. 
      JMP PRNS4 
      LDB COMSN     NON-COM 
      SZB,RSS         STATEMENT SEEN? 
      JMP PRNS2+1   NO
      LDB SPTR      YES, RESET
      ADB .-2         STATEMENT 
      STB SPTR         POINTER
      JSB DCMPL     ERROR 
      JSB RERRS+42,I  'COM' OUT OF ORDER
PRNS4 CPA REMOP     'REM' ? 
      JMP PRNS2+2   YES 
      CPA DATOP     NO, DATA? 
      JMP PRNS2+2   YES 
      CPA IMGOP     NO, IMAGE?
      JMP PRNS2+2   YES 
      CPA FILOP     NO, <FILES STATEMENT> ? 
      RSS           YES 
      JMP PRNS5     NO
      LDB SPTR
      ADB .-2 
      ISZ FILCT     TOO MANY <FILES STATEMENTS>?
      JMP *+4       NO
      STB SPTR      YES--RESET STATEMENT POINTER
      JSB DCMPL 
      JSB RERRS+34,I EXTRA <FILES STATEMENT>
      INB 
      STB FILPT,I   SAVE POINTER TO <FILES STATEMENT
      ISZ FILPT 
      LDB NSPTR     SKIP OVER REST
      JMP PRNS2+2     OF STATEMENT
PRNS5 LDB SPTR
      CPA MATOP     'MAT' STATEMENT?
      INB,RSS       YES, BUMP TO NEXT WORD
      JMP *+3       NO
      LDA B,I       EXTRACT 
      AND OPMSK       OPERATOR
      CPA PRTOP     'PRINT' STATEMENT?
      INB,RSS       YES, BUMP TO NEXT WORD
      JMP PRNS6     NO
      LDA 1,I       EXTRACT 
      AND OPMSK       OPERATOR
      CPA USEOP     'USING' STATEMENT?
      CCA,RSS       YES, SET (A)
      RSS           NO
      STA USESN     SET 'USING SEEN' FLAG 
PRNS6 STA INFST     SET INTEGER FOLLOWS FLAG
      RSS 
*                                    *
**  PROCESS NEXT WORD OF STATEMENT  **
*                                    *
PRNS2 ISZ SPTR      MOVE TO 
PRNSB EQU PRNS2+1 
PRNSC EQU PRNS2+2 
      LDB SPTR        NEXT WORD 
      CPB FILTB     DECOMPILE FINISHED? 
      JMP DCMP3     YES 
      CPB NSPTR     NO, STATEMENT FINISHED? 
      JMP STEND,I   YES 
      LDA SPTR,I    NO, ISOLATE 
      AND OPMSK       OPERATOR
      CPA B1000     " ? 
      JMP PRNS3     YES 
      XOR SPTR,I    NO, GET OPERAND 
      SZA,RSS       NULL OPERAND? 
      JMP PRNS2     YES 
      RAL,CLE,ERA   NO, PUT FLAG BIT IN (E) 
      SZA,RSS       NUMBER? 
      JMP CMPL7     YES 
      JMP PRNST,I   NO
PRNS3 XOR SPTR,I    EXTRACT LENGTH
      ADA .+3       COMPUTE 
      ARS             POINTER 
      ADA SPTR          TO CLOSING
      STA SPTR            QUOTE 
      JMP PRNS2+1 
      END 
