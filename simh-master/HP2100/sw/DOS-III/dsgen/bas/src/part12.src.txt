ASMB,R,B,L,X
      HED SYNTAX PROCESSOR SUBROUTINES
      NAM SYNP6,7 
      SPC 2 
      ENT VAROP,CHRST,DELPR,FNDPS,GETPF,PRGIN 
      ENT PGINB 
      SPC 2 
      COM PBPTR,NEG(26),.(52),MAIN,SPROG,SYMTB,ERRCT
      COM SBPTR,SBUFA,SSTAK,SYNTQ,SERRS(36),RERRS(50) 
      COM FERRS(15),WERRS(10),MAXCR,MSFLG,PFLAG,SFLAG 
      COM DFLAG,TEMP(3),CDFLG,ARYAD,GFLAG,SIGN,UFLAG
      SPC 2 
      EXT LTR,DIGCK,STROP,GETCR,STRID,SBSCK 
      EXT DCOM0,BLANK,SBPUD,STLCK 
      EXT FRCUR,LPCK,FSC,RPCK,FPOP,BLDIN
      SPC 2 
A     EQU 0 
B     EQU 1 
BB133 OCT 133 
B777  OCT 777 
MNEG  OCT 100000
OPMSK OCT 77000 
INTFL OCT 100003
FLGBT EQU MNEG
TERR  EQU .+1 
      HED SYNTAX SUBROUTINES
**                             ** 
***  SEEK A VARIABLE OPERAND  *** 
**                             ** 
* 
*  VAROP SCANS FOR AND RECORDS A VARIABLE OPERAND.  IF
*  THE FIRST CHARACTER IS NOT A LETTER, EXIT IS TO (P+1)
*  WITH THE CHARACTER IN (A).  OTHERWISE A VARIABLE 
*  OPERAND IS RECORDED AND UPON EXIT (A) CONTAINS THE 
*  FOLLOWING CHARACTER.  EXIT IS TO (P+2) AFTER FINDING 
*  AN ARRAY OR STRING VARIABLE ALONG WITH ANY FOLLOWING 
*  SUBSCRIPT.  IF A STRING VARIABLE IS FOUND AND SFLAG =
*  SBPTR, SET SFLAG = -1; IF SFLAG # SBPTR, NO STRING 
*  VARIABLE IS PERMITTED AT THIS POINT: EXIT TO ERROR.
*  AFTER FINDING A SIMPLE VARIABLE EXIT TO (P+3) WITH 
*  TEMP+2 = (A) AND THE LAST CHARACTER OF THE SIMPLE
*  VARIABLE IN TEMP+1.  IF INSIDE A <DEF STATEMENT>,
*  SIMPLE VARIABLES ARE COMPARED WITH THE PARAMETER AND 
*  MATCHES ARE MARKED.
* 
VAROP NOP 
#VROP JSB LTR       LETTER? 
      JMP VAROP,I   NO, EXIT VIA (P+1)
      ISZ VAROP     YES 
      CPA .+50B     '(' ? 
      JMP VARO4     YES 
      CPA BB133     NO, '[' ? 
      JMP VARO4     YES 
      CPA .+44B     NO, '$' ? 
      JMP VARO4     YES 
      ISZ VAROP     NO
      JSB DIGCK     DIGIT NEXT? 
      JMP VARO1     NO
      LDA TEMP+1    YES, LOAD LETTER, 
      ADB .+48        RESTORE DIGIT,
      STB TEMP+1        AND RECORD
      JSB STROP           SIMPLE VARIABLE 
      JSB GETCR     FETCH 
      NOP             AND SAVE
      STA TEMP+2        NEXT
      JMP VARO2           CHARACTER 
VARO4 JSB STRID     RECORD ARRAY OR STRING VARIABLE 
      JSB SBSCK     FETCH THE SUBSCRIPT 
      RSS           NO SUBSCRIPT
      JMP VAROP,I   EXIT VIA (P+2)
      LDB VAROP     WAS VAROP CALLED FOR
      CPB DCOM0       DIM OR COM SYNTAX?
      JSB SERRS+5,I YES--ERROR
      JMP VAROP,I   NO--EXIT
VARO1 LDA TEMP+1    RETRIEVE LETTER,
      LDB .+57B       SET 'NO DIGIT', 
      JSB STROP         AND RECORD
      LDA TEMP+2          SIMPLE VARIABLE 
VARO2 CLB           INSIDE A
      CPB PFLAG       'DEF' STATEMENT?
      JMP VAROP,I   NO, EXIT VIA (P+3)
      CCB           YES,
      ADB SBPTR       ISOLATE 
      LDA 1,I           LATEST
      AND B777            OPERAND 
      CPA PFLAG     IS IT THE PARAMETER?
      JMP *+3       YES 
VARO3 LDA TEMP+2    NO, RETRIEVE CHARACTER
      JMP VAROP,I     AND EXIT VIA (P+3)
      LDA 1,I       FLAG
      IOR FLGBT       OPERAND 
      STA 1,I           AS
      JMP VARO3           PARAMETER 
**                              **
***  PROCESS CHARACTER STRING  ***
**                              **
* 
*  UPON ENTRY (A) CONTAINS THE STRING DELIMITER AND (B) 
*  INDICATES WHETHER THE FIRST CHARACTER IS TO BE STORED
*  IN THE LOWER HALF OF THE CURRENT BUFFER WORD ( (B) = 1)
*  OR THE UPPER HALF OF THE NEXT BUFFER WORD ( (B) = 0).
*  EXIT TO (P+1) ON EMPTYING THE INPUT STRING. EXIT TO
*  (P+2) ON FINDING THE STRING DELIMITER.  BLANKS ARE NOT 
*  STRIPPED OUT OF THE INPUT STRING IF (A) # 0 UPON ENTRY.  UPON
*  EXIT SBPTR POINTS TO THE FIRST BUFFER WORD NOT CONTAINING PART OF
*  THE STRING WHILE TEMP+1 CONTAINS A COUNT OF THE STRING 
*  CHARACTERS BIASED BY THE VALUE OF (B) UPON ENTRY.
* 
CHRST NOP 
#CRST STB TEMP+1    SET CHARACTER FLAG AND COUNTER
      STA TEMP+2    NOTE TERMINATOR CHARACTER 
      LDB .+10      IF (A) # 0
      SZA             STOP BLANK
      STB BLANK         SUPPRESSION 
CHRS1 JSB GETCR     FETCH CHARACTER 
      JMP CHRS3+1   NONE FOUND
      LDA B         ALLOW LOWER CASE
      CPA TEMP+2    TERMINATOR? 
      JMP CHRS3     YES 
      LDB TEMP+1    NO, COUNT CHARACTER 
      SLB,INB         AND SELECT WORD HALF
      JMP CHRS2     LOW HALF
      JSB SBPUD     HIGH HALF, MOVE TO NEXT WORD
      ALF,SLA,ALF   POSITION CHARACTER AND SKIP 
CHRS2 IOR SBPTR,I   COMBINE WITH PREVIOUS CHARACTER 
      STA SBPTR,I 
      STB TEMP+1    SAVE FLAG/COUNTER 
      JMP CHRS1 
CHRS3 ISZ CHRST     SET EXIT TO (P+2) 
      JSB SBPUD     ADVANCE POINTER 
      LDB .+40B     RESTORE BLANK 
      STB BLANK       SUPPRESSION 
      JMP CHRST,I 
      SKP 
**                         ** 
***  DELETE SOME PROGRAM  *** 
**                         ** 
* 
*  THAT PART OF THE PROGRAM REFERENCED BY CORE LOCATIONS
*  (TEMP+1)+(A) THROUGH (TEMP+1)+(B)-1 INCLUSIVE IS 
*  DELETED BY SLIDING UP ALL OF THE PROGRAM FROM
*  (TEMP+1)+(B) TO (PBPTR)-1 (I.E., THE REST OF THE 
*  PROGRAM FOLLOWING THE 'GAP').  PBPTR IS THEN 
*  UPDATED TO POINT TO LAST WORD +1 OF THE PROGRAM. 
* 
DELPR NOP 
#DLPR ADA TEMP+1    COMPUTE INITIAL 
      STA TEMP+2      DESTINATION ADDRESS 
      ADB TEMP+1    COMPUTE INITIAL SOURCE ADDRESS
DELP1 CPB PBPTR     DONE? 
      JMP DELP2     YES 
      LDA 1,I       NO, TRANSFER
      STA TEMP+2,I    A WORD
      ISZ TEMP+2    BUMP
      INB             POINTERS
      JMP DELP1 
DELP2 LDA TEMP+2    UPDATE
      STA PBPTR       END-OF-PROGRAM
      JMP DELPR,I       POINTER 
**                                            **
***  FIND A STATEMENT'S SEQUENTIAL POSITION  ***
**                                            **
* 
*  UPON ENTRY (A) POINTS TO THE LAST WORD+1 OF THE PROGRAM
*  AND (B) HOLDS A SEQUENCE NUMBER.  IF (B) IS LARGER THAN
*  ANY SEQUENCE NUMBER IN THE PROGRAM, EXIT TO (P+1) WITH 
*  (B) POINTING TO THE LAST WORD+1 OF THE PROGRAM.  IF (B)
*  FALLS BETWEEN TWO SEQUENCE NUMBERS, EXIT TO (P+2) WITH 
*  (B) POINTING TO THE STATEMENT WITH A LARGER SEQUENCE 
*  NUMBER.  IF A STATEMENT IN THE PROGRAM HAS THE SEQUENCE
*  NUMBER IN (B), EXIT TO (P+3) WITH (B) POINTING TO THIS 
*  STATEMENT (IF IT IS AN EMBEDDED ERROR MESSAGE, STATEMENT 
*  TYPE = 0, DECREMENT THE ERROR COUNT). IN ALL CASES TEMP+1
*  = (B) UPON EXIT. 
* 
FNDPS NOP 
#FDPS STB TEMP+1    SAVE TEST SEQUENCE NUMBER 
      STA TEMP+3    SAVE TERMINATION POINTER
      LDB SPROG     START WITH FIRST WORD OF PROGRAM
FNDP1 CPB TEMP+3    PROGRAM EXHAUSTED?
      JMP FNDP3+2   YES, EXIT TO (P+1)
      LDA 1,I       NO, IS
      CMA,INA         PROGRAM 
      ADA TEMP+1        SEQUENCE NUMBER 
      SZA,RSS             THE SAME? 
      JMP FNDP2     YES, EXIT TO (P+3)
      SSA           NO, GREATER?
      JMP FNDP3+1   YES, EXIT TO (P+2)
      LDA B         NO, CHECK 
      INA             STATEMENT 
      LDA A,I           LENGTH AND
      ADB A               SET (B) TO
      JSB STLCK             POINT TO NEXT 
      JMP FNDP1               STATEMENT 
FNDP2 LDA 1         LOAD
      ADA .+2         STATEMENT 
      LDA 0,I       ERROR 
      AND OPMSK 
      SZA             STATEMENT?
      JMP FNDP3     NO
      CCA           YES,
      ADA ERRCT       DECREMENT 
      STA ERRCT         ERROR COUNT 
      SZA           ONLY ERROR? 
      JMP FNDP3     NO
      LDA TERR      YES-- 
      CMA             SET FLAG
      AND MAIN,I        TO SAY
      STA MAIN,I          'NO EMBEDDED ERRORS'
FNDP3 ISZ FNDPS 
      ISZ FNDPS 
      STB TEMP+1    SAVE POINTER TO 
      JMP FNDPS,I     FINAL STATEMENT SEEN
**                                 ** 
***  FETCH PARENTHESIZED FORMULA  *** 
**                                 ** 
* 
*  AN END-OF-FORMULA OPERATOR FOLLOWS THE FORMULA 
* 
GETPF NOP 
#GTPF LDB .+5       SAVE FSC
      JSB FRCUR       LOCAL VARIABLES 
      JSB SBPUD     UPDATE POINTER
      JSB GETCR     RECORD
      JSB SERRS+22,I  LEFT
      JSB LPCK          PARENTHESIS 
      JSB FSC       DEMAND FORMULA
      JSB SBPUD     RECORD END-OF-FORMULA OPERATOR
      JSB RPCK      RECORD RIGHT PARENTHESIS
      JSB FPOP      RESTORE FSC 
      JMP GETPF,I     LOCAL VARIABLES 
**                       ** 
***  RECORD AN INTEGER  *** 
**                       ** 
* 
*  PRGIN FLAGS THE PREVIOUS OPERATOR TO SAY 'INTEGER FOLLOWS'.
*  STORE THE INTEGER AND EXIT WITH IT IN (B) AND THE FOLLOWING
*  CHARACTER IN (A).
* 
PRGIN NOP 
#PGIN LDA SBPTR,I   SET 
      IOR INTFL       'INTEGER FOLLOWS' 
      STA SBPTR,I       FLAG
      JSB SBPUD     ADVANCE POINTER 
      JSB BLDIN     BUILD INTEGER 
      STB SBPTR,I   RECORD INTEGER
      JSB SBPUD     ADVANCE POINTER 
PGINB JMP PRGIN,I 
      END 
