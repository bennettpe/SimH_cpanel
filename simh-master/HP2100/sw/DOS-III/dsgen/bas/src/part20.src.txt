ASMB,R,B,L,X
      HED COMPILE/DECOMPILE SUBROUTINES 
      NAM CDS0,7
      SPC 2 
      ENT ALCOM,CUSP,SSYMT,ASYMT,RSTPT
      SPC 2 
      COM PBPTR,NEG(26),.(52),MAIN,SPROG,SYMTB,ERRCT
      COM SBPTR,SBUFA,SSTAK,SYNTQ,SERRS(36),RERRS(50) 
      COM FERRS(15),WERRS(10),MAXCR,MSFLG,PFLAG,SFLAG 
      COM DFLAG,TEMP(3),CDFLG,ARYAD,GFLAG,SIGN,UFLAG
      COM PINTG(2),TABLE,LNGHT,SMBGN,SLENG,COUNT
      COM TBLPT,TSPTR,SBT0
      COM EXP,MANT1,MANT2,EXPON,DPFLG,NT0,ENOUF 
      COM LNAME,CHRCT,OCTMP,SPTR,FILTB,NSPTR,INFST
      COM DCLC1,DEST,DCLC2,STEND,DFILT,FILPT,COMSN
      COM MVEND 
      COM STYPE,USESN,FILCT,.LNUM 
      COM PRGCT,STCT1,STCT2,NUMPT,STCT3,FLINK 
      COM STMP1,STMP2,VLFLG,VALTB,FCORE,COMPT,VTMP1 
      COM VTMP2,VTMP3,VTMP4,VTMP5,IFSS
      COM CU1,APTR,DCFLG
      COM ZZ(146),STPTR 
      SPC 2 
      EXT LWAUS,DCMPL,PBUFF 
      SPC 2 
OPMSK OCT 77000 
COMOP OCT 45000 
SCOMM OCT 16000 
.100  DEC 100 
DIMOP OCT 47000 
OPDMK OCT 100777
      SPC 2 
APTR1 DEF SYMT6 
APTR2 DEF SYMT7 
**                          **
***  ALLOCATE COM STORAGE  ***
**                          **
* 
* THE BEGINNING OF THE PROGRAM IS SCANNED FOR <COM STATEMENTS>. THE 
* AMOUNT OF COM STORAGE NEEDED IS COMPUTED. A POINTER (SPROG) TO
* THE START OF THE PROGRAM IS CREATED AND THE PROGRAM IS SHIFTED TO 
* HIGHER CORE TO ALLOW FOR THE COM STORAGE. 
* 
ALCOM NOP 
#ALCO CLB           SAY NO COMMON 
      STB DEST        ALLOCATED YET.
      LDB PBUFF 
      STB STPTR     POINTER TO FIRST STATEMENT
ALCO1 LDA STPTR,I   SAVE STATEMENT
      STA .LNUM       NUMBER
      ISZ STPTR 
      ADB STPTR,I 
      STB NSPTR     POINTER TO NEXT STATEMENT 
      ISZ STPTR 
      LDA STPTR,I   EXTRACT 
      AND OPMSK       OPERATOR
      CPA COMOP     COM STATEMENT?
      JMP ALCO2     YES 
ALCO6 LDA DEST      GET TOTAL COMMON ALLOCATED
      SZA,RSS       EXIT IF THERE WERE
      JMP ALCOM,I     NO COM STATEMENTS 
      ADA PBUFF     PROGRAM BEGINNING MOVES BY
      STA SPROG       AMOUNT OF COMMON ALLOCATED. 
      CCB           POINTER TO FIRST
      ADB PBPTR       WORD TO BE MOVED
      LDA 1         POINTER TO
      ADA DEST        FIRST DESTINATION 
      STA DEST          LOCATION
      INA           RESET END OF
      STA PBPTR       PROGRAM POINTER.
ALCO0 LDA 1,I       MOVE A
      STA DEST,I      WORD
      CPB PBUFF     DONE? 
      JMP ALCOM,I   EXIT
      ADB .-1       NO--BUMP
      CCA 
      ADA DEST        POINTERS
      STA DEST
      JMP ALCO0         AND LOOP
ALCO2 LDA STPTR,I   EXTRACT 
      AND .+17B       OPERAND 
      SZA           STRING? 
      JMP ALCO3     NO
      ISZ STPTR     YES-- 
      ISZ STPTR       EXTRACT 
      LDA STPTR,I       LENGTH
      INA           COMPUTE 
      ARS             STORAGE 
      INA               REQUIRED
      ISZ STPTR     BUMP PAST RIGHT BRACKET 
      JMP ALCO7+1 
ALCO3 ADA .-4 
      SSA           SIMPLE VARIABLE?
      JMP ALCO4     NO
      CLA,INA       YES-- ALLOW TWO WORDS 
      JMP ALCO7 
ALCO4 ISZ STPTR     MUST BE ARRAY 
      ISZ STPTR 
      LDB STPTR,I   EXTRACT LENGTH
      ISZ STPTR 
      LDA STPTR,I   GET NEXT
      AND OPMSK       OPERATOR
      CPA SCOMM     SUBSCRIPT COMMA?
      JMP *+3       YES 
      LDA 1         NO
      JMP ALCO5+1 
      LDA 1         COMPUTE 
      ISZ STPTR       ARRAY 
      MPY STPTR,I       SIZE
      SZB           TOO BIG?
      JMP CUS1A,I   YES 
ALCO5 ISZ STPTR     BUMP PAST 
      CLE,ELA 
      SEZ,SSA,RSS   TOO BIG?
      SLA,ERA       NO
      JMP CUS1A,I   YES 
      ADA .+2       ALLOW 4 WORDS FOR DIMENSIONS
ALCO7 ALS           DOUBLE EVERYTHING 
      ADA DEST      UPDATE
      STA DEST        POINTER 
      ADA .100
      JSB CUSP      CHECK FOR STORAGE OVERFLOW
      ISZ STPTR 
      LDB STPTR 
      CPB NSPTR     END OF STATEMENT
      RSS           YES 
      JMP ALCO2     NO
      CPB PBPTR     END OF PROGRAM? 
      JMP ALCO6     YES 
      JMP ALCO1     NO
* 
CUS1A DEF CUSP1 
**                                **
***  INSURE SPACE FOR NEW ENTRY  ***
**                                **
* 
*  A CHECK IS MADE THAT THE UNUSED USER SPACE IS AT 
*  LEAST AS LARGE AS THE NUMBER OF WORDS SPECIFIED BY 
*  (A).  EXIT TO ERROR IF NOT SO.  (B) IS NOT CHANGED.
*  ON NORMAL EXIT (A) CONTAINS ITS ENTRY VALUE + (PBPTR). 
* 
CUSP  NOP 
#CUSP ADA PBPTR     AT LEAST
      STA CU1         (A) WORDS 
      CMA               OF AVAILABLE
      ADA LWAUS           USER
      SSA,RSS               SPACE?
      JMP *+3       YES 
CUSP1 JSB DCMPL     NO, DECOMPILE 
      JSB RERRS+10,I  OUT OF STORAGE
      LDA CU1       RETURN WITH NEW 
      JMP CUSP,I      VALUE OF PBPTR
**                        **
***  'COMPILE' A SYMBOL  ***
**                        **
* 
*  ENTER WITH A SYMBOLIC NAME IN STMP1 AND SEARCH THE 
*  SYMBOL TABLE FOR A MATCHING ENTRY.  IF NO ENTRY IS 
*  FOUND, APPEND A NEW TWO WORD ENTRY WITH THE SYMBOL 
*  IN THE FIRST WORD AND 0 IN THE SECOND.  THE SYMBOL IN
*  THE PROGRAM IS REPLACED WITH THE ORDINAL NUMBER OF 
*  ITS SYMBOL TABLE ENTRY.  EXIT WITH THE NEW PROGRAM 
*  WORD IN (A), A POINTER TO THE SECOND WORD OF THE 
*  TABLE ENTRY IN STMP2, AND THE STATEMENT TYPE IN (B). 
* 
SSYMT NOP 
#SSYM LDA .+4       INSURE SPACE
      JSB CUSP        FOR NEW ENTRY 
      LDA STMP1     RETRIEVE SYMBOL 
      LDB SYMTB 
SYMT1 CPB PBPTR     SYMBOL TABLE EXHAUSTED? 
      JMP SYMT3     YES 
      CPA 1,I       NO, IS NEXT SYMBOL A MATCH? 
      JMP SYMT5     YES 
      ADB .+2       NO, MOVE
      JMP SYMT1       TO NEXT ENTRY 
*                                   * 
**  HANDLE UNMATCHED ARRAY SYMBOL  ** 
*                                   * 
SYMT2 CPA STMP1     "DON'T KNOW" SYMBOL?
      RSS           YES 
      JMP SYMT3     NO, MAKE NORMAL TABLE ENTRY 
      ISZ PBPTR     ALLOCATE SPACE
      ISZ PBPTR       FOR NEW ENTRY 
      LDA STMP2     WAS A SINGLE OR DOUBLE
      INA,SZA         SUBSCRIPTED ENTRY FOUND?
      JMP SYMT4     YES, INCLUDE POINTER IN ENTRY 
      STA 1,I       NO, SAVE SPACE FOR LATER ENTRY
      ADB .+2         WITH NUMBER OF DIMENSIONS 
*                              *
**  CREATE A NEW TABLE ENTRY  **
*                              *
SYMT3 ISZ PBPTR     ALLOCATE SPACE
      ISZ PBPTR       FOR NEW ENTRY 
      CLA           INITIALIZE
SYMT4 INB             SECOND
      STA 1,I           WORD
      ADB .-1       PUT SYMBOL
      LDA STMP1       IN FIRST
      STA 1,I           WORD
*                            *
**  'COMPILE' PROGRAM WORD  **
*                            *
SYMT5 INB           COMPUTE 
      STB STMP2 
      CMB             RELATIVE
      ADB SYMTB 
      CMB,INB           ADDRESS 
      BRS 
      LDA SPTR,I    REPLACE SYMBOL
      AND OPMSK       IN PROGRAM
      IOR 1             WITH RELATIVE 
      STA SPTR,I          ADDRESS 
      LDB STYPE     LOAD STATEMENT TYPE 
      JMP SSYMT,I 
      SKP 
**                          **
***  PROCESS ARRAY SYMBOL  ***
**                          **
* 
*  ENTER WITH AN ARRAY NAME IN STMP1.  IF A MATCHING
*  SYMBOL TABLE ENTRY EXISTS, PROCEED AS IN SSYMT.  ELSE IF 
*  THE ARRAY IS SINGLY OR DOUBLY SUBSCRIPTED (LAST FOUR 
*  BITS OF NAME ARE 0001 OR 0010): EXIT IS TO ERROR ON
*  FINDING A CONFLICTING ENTRY; ON FINDING ONLY A "DON'T
*  KNOW" ENTRY (LAST FOUR BITS 0011), PROCEED AS IN SSYMT,
*  PLACING THE APPROPRIATE ENTRY IN THE TWO WORDS ABOVE 
*  THE "DON'T KNOW" ENTRY AND SETTING A POINTER TO ITS
*  SECOND WORD INTO THE SECOND WORD OF THE "DON'T KNOW" 
*  ENTRY.  IF THE SYMBOL IS AN UNMATCHED "DON'T KNOW" 
*  ARRAY NAME, APPEND A SYMBOL TABLE ENTRY: IF A SINGLY 
*  OR DOUBLY SUBSCRIPTED VERSION OF THE ARRAY HAS BEEN
*  PREVIOUSLY FOUND, PLACE A POINTER TO THE SECOND WORD 
*  OF THE PREVIOUS ENTRY INTO THE SECOND WORD OF THE NEW
*  "DON'T KNOW" ENTRY; OTHERWISE LEAVE TWO WORDS ABOVE
*  THE NEW ENTRY. 
* 
ASYMT NOP 
#ASYM LDA ASYMT     SET RETURN
      STA SSYMT       ADDRESS 
      CCA           SET MATCH 
      STA STMP2       FLAG FALSE
      LDA APTR1     INTIALIZE 
      STA ASYMT       SEARCH LOOP 
      LDA .+4       INSURE SPACE
      JSB CUSP        FOR NEW ENTRY 
      LDB SYMTB 
      LDA STMP1     RETRIEVE SYMBOL 
      IOR .+3       SET ARRAY SYMBOL
      JMP SYMT7+3     TO "DON'T KNOW" 
SYMT6 ADA .-2       MATCH AS
      CPA 1,I         'SINGLE SUBSCRIPT'? 
      JMP SYMT8     YES 
      INA           NO, MATCH AS
      CPA 1,I         'DOUBLE SUBSCRIPT'? 
      JMP SYMT8     YES 
      INA           NO, MATCH AS
SYMT7 CPA 1,I         "DON'T KNOW"? 
      JMP SYMT9     YES 
      ADB .+2       NO, MORE SYMBOL 
      CPB PBPTR       TABLE ENTRIES?
      JMP SYMT2     NO
      JMP ASYMT,I   YES 
SYMT8 CPA STMP1     DOES ENTRY MATCH SYMBOL?
      JMP SYMT5     YES 
      IOR .+3       NO, IS SYMBOL OF
      CPA STMP1       TYPE "DON'T KNOW"?
      JMP *+3       YES 
      JSB DCMPL     NO, DECOMPILE 
      JSB RERRS+11,I  SUBSCRIPT CONFLICT
      STB STMP2     SAVE POINTER TO ENTRY 
      LDB APTR2     CONTINUE SEARCH 
      STB ASYMT       FOR POSSIBLE
      LDB STMP2         "DON'T KNOW"
      JMP SYMT7+2         ENTRY 
SYMT9 CPA STMP1     DOES ENTRY MATCH SYMBOL?
      JMP SYMT5     YES 
      INB           NO, NEW ENTRY TO BE MADE
      LDA 1         SET POINTER TO
      ADB .-2         NEW ENTRY INTO
      STB 0,I           "DON'T KNOW" ENTRY
      CLA           MAKE NEW
      JMP SYMT4+1     ENTRY 
**                                   ** 
***  RESTORE SYMBOL TABLE POINTERS  *** 
**                                   ** 
* 
*  USED BY CSAVE TO RESTORE THE SYMBOL TABLE TO ITS APPEARAMCE
*  BEFORE VALUE HAS BEEN RUN, I.E. THE POINTERS TO DIM AND COM
*  STATEMENTS ARE PLACED IN THE SECOND WORD OF ARRAY AND STRING 
*  ENTRIES IN THE SYMBOL TABLE, 'DON'T KNOW' ENTRIES ARE LINKED 
*  TO THE CORRESPONDING KNOWN ONE AND THE SECOND WORD OF DEFAULT
*  ENTRIES IS SET TO ZERO.
* 
RSTPT NOP 
#RSTP LDB SPROG     INITIALIZE PROGRAM
      STB SPTR        POINTER 
      CPB SYMTB     FINISHED PROGRAM SCAN?
      JMP RSTP5     YES 
      ISZ SPTR      NO--COMPUTE 
      ADB SPTR,I      NEXT STATMENT 
      STB NSPTR         POINTER 
      ISZ SPTR
      LDA SPTR,I    EXTRACT 
      AND OPMSK       OPERATOR
      CPA COMOP     'COM'?
      JMP RSTP1+1   YES 
      CPA DIMOP     NO, 'DIM'?
      RSS           YES 
      JMP #RSTP+1   NO
RSTP1 CLB 
      STB DCFLG     SET COM-DIM FLAG
RSTP2 LDA SPTR,I    COMPUTE 
      AND OPDMK       POINTER 
      ADA .-1           INTO
      ALS                 SYMBOL
      ADA SYMTB             TABLE 
      STA STMP1 
      LDA 0,I       EXTRACT 
      AND .+17B       SYMBOL
      ADA .-4       SIMPLE
      SSA             VARIABLE? 
      JMP RSTP4     NO
      CCA           YES 
      LDB STMP1     FLAG
      INB             AS 'IN
      STA 1,I           COMMON' 
      LDB SPTR      UPDATE
RSTP3 INB             STATEMENT 
      STB SPTR          POINTER 
      CPB NSPTR     END OF STATEMENT? 
      JMP #RSTP+1   YES 
      JMP RSTP2     NO
RSTP4 LDB SPTR      SET POINTER 
      ADB .+2         TO DIMENSION
      LDA DCFLG 
      SZA           'COM'?
      CMB,INB       YES--COMPLEMENT POINTER 
      LDA STMP1     STORE 
      INA             IN SYMBOL 
      STB 0,I           TABLE 
      LDB SPTR      FINISHED
      ADB .+4 
      CPB NSPTR       STATEMENT?
      JMP #RSTP+1   YES 
      ADB .-1       NO, TWO-
      LDA 1,I 
      AND OPMSK       DIMENSIONAL?
      CPA SCOMM 
      ADB .+2       YES--BUMP PAST SECOND DIMENSION 
      JMP RSTP3     NO
* 
*  SCAN SYMBOL TABLE FOR 'DON'T KNOW' ENTRIES AND 
*  DEFAULT DIMENSION ENTRIES
* 
RSTP5 LDB SYMTB     INITIALIZE TABLE POINTER
      CPB FILTB     FINISHED SYMBOL TABLE SCAN? 
      JMP RSTP9     YES 
      STB STMP1     NO--SAVE POINTER
      LDA 1,I       DON'T 
      AND .+17B       KNOW
      STA RTEMP 
      CPA .+3           ENTRY?
      JMP RSTP7     YES 
      ADA .-3       NO, STRING
      SSA,RSS         OR ARRAY? 
      JMP RSTP6     NO
      INB           YES 
      LDA 1,I       DEFAULT 
      SSA,RSS       STRING IN COMMON? 
      JMP RST55     NO
      LDA RTEMP     MAYBE 
      SZA,RSS       STRING IN COMMON? 
      JMP RSTP6     YES 
      LDA 1,I       NO
RST55 CMA,INA 
      ADA SYMTB       DIMENSIONS? 
      SSA,RSS 
      JMP RSTP6     NO
      CLA           YES--STORE A ZERO 
      STA 1,I         IN SYMBOL TABLE 
RSTP6 LDB STMP1     BUMP TO 
      ADB .+2         NEXT SYMBOL 
      JMP RSTP5+1 
* 
*  PROCESS 'DON'T KNOW' ENTRY 
* 
RSTP7 STB STMP2 
      LDB SYMTB     IS THERE
      CCA             A MATCHING
      ADA STMP2,I       TWO-DIMENSIONAL 
      CPA 1,I             ENTRY?
      JMP RSTP8     YES 
      ADA .-1       NO, MATCHING ONE- 
      CPA 1,I         DIMENSIONAL ENTRY?
      JMP RSTP8     YES 
      ADB .+2       NO--BUMP TO 
      JMP RSTP7+2     NEXT SYMBOL 
RSTP8 INB           LINK 'DON'T 
      LDA STMP1       KNOW' ENTRY 
      INA               WITH MATCHING 
      STB 0,I             KNOWN ONE 
      JMP RSTP6 
RSTP9 CLA           SET STORAGE 
      STA VLFLG     UNALLOCATED FLAG
      STB PBPTR     RESET END-OF-PROGRAM POINTER
      JMP RSTPT,I 
RTEMP NOP 
      END 
