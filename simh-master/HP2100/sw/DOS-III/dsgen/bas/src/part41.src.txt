ASMB,R,B,L,X
      NAM CSAVE,5 
      SPC 2 
      COM PBPTR,NEG(26),.(52),MAIN,SPROG,SYMTB,ERRCT
      COM SBPTR,SBUFA,SSTAK,SYNTQ,SERRS(36),RERRS(50) 
      COM FERRS(15),WERRS(10),MAXCR,MSFLG,PFLAG,SFLAG 
      COM DFLAG,TEMP(3),CDFLG,ARYAD,GFLAG,SIGN,UFLAG
      COM PINTG(2),TABLE,LNGTH,SMBGN,SLENG,COUNT
      COM TBLPT,TSPTR,SBT0
      COM EXP,MANT1,MANT2,EXPON,DPFLG,NT0,ENOUF 
      COM LNAME,CHRCT,OCTMP,SPTR,FILTB,NSPTR,INFST
      COM DCLC1,DEST,DCLC2,STEND,DFILT,FILPT,COMSN
      COM MVEND 
      COM STYPE,USESN,FILCT,.LNUM 
      COM PRGCT,STCT1,STCT2,NUMPT,STCT3,FLINK 
      COM STMP1,STMP2,VLFLG,VALTB,FCORE,COMPT,VTMP1 
      COM VTMP2,VTMP3,VTMP4,VTMP5,IFSS
      COM CU1,APTR,DCFLG,TEMP2,LT1,LT2,FCNTR,RTNST
      COM ASINP,RTRNQ,FORQ,TEMP1,FILE#
      COM INTMP,TMPST,TPRME,TNULL,PS1,DMY3,TEMP5
      COM PRIST,FBASE,RQ3,EOL,GTMP,FORST,EFN0,FVT 
      COM EFN1,EFN2,EFN3,MCNT,INITF,IFCNT,OPDST 
      COM FFLG,TEMP4,EORFL,NCH,TEMP6,STRLN,ATIM,LT5 
      COM ASTYP,ASBFP,ORDNO,ATMP(2),RETCD 
      COM DCCNT,NXTDT,VL0,RCRD#,PMASK,ITEMP 
      COM OPTRQ,EST3,EST2,EST1,TT1,TT2,DMY1 
      COM DMY2,TT3,TT4,CP0,CP1,PS0,MPT,NQT,RT0
      COM RT1,TRFCH,TRS0,A1,A2,C1,EOPF,NUMBF(6),FD0 
      COM OT1,OT2,OT3,LBTMP,REPCT,RNDX1,RNDX2 
      COM X2TMP(2),CTMP,DTMP(2),BTMP(2),XTEMP(2),YTEMP(2) 
      COM UTEMP(2),LT0,LT8,LT3,LT6,LT7,LT4,DIGCT
      COM NMPTR,NMTMP,FFLAG,DGCNT 
      COM IFSTR,EC,CC,DP,CONTR,CC1,CC2,PC1,PC2
      COM SFLG,FST,EFLAG,NUM1,NUM2,SBD,SAD,SNFLG
      COM NAD,NBD,FSP,EST,NUMW1,NUMW2,EXPW
      COM IHB,HBP,NHBW,NBLK,TOTDG,DCTR
      COM EDSTA,LCH,ELCNT 
      COM STPTR,RSPTR,TEMP3 
      COM MT1,MT0,MT3,MT2,MEXIT,DMY4,MOP,BS2,BS3
      COM MMT0,MMT1,MMT2,MMT6(2),MMT7(2),MMT3,MMT4,MMT5 
      COM MMT8(2),SCALR(2),ID0,ID1,MAXE(2),TOL(2),PIVEL 
      COM VT0,RD0 
      COM SOURC,TAP0,TAP1 
      COM STIME(5)
      COM LTEMP(16),LTYP1,LTYP2,LCHCR,MOVES,MOVED 
      COM ERSEC(77),DRFLG,DIREC(256),DTEMP,DCNT 
      COM DTRAK,DSECT 
      SPC 2 
      ENT CSAV2 
      SPC 2 
      EXT MLINB,PBUFF,DCMPL,ALCOM,LIBER,MOVEW,DLOOK 
      EXT LLEND 
      EXT EXEC
      EXT BLANK,CMP00,RSTPT,LWAUS 
      SPC 2 
B     EQU 1 
?ID   EQU 4 
?LINK EQU 15B 
ASCBB ASC 1,
CFLAG EQU .+2 
SAVWD EQU LTEMP+8 
SAVLN EQU LTEMP+11
SAVP  EQU LTEMP+10
SAVI  EQU LTEMP+4 
.103  OCT 103 
D256  DEC 256 
SECTR EQU 116B
SAVC  EQU LTEMP+9 
SAVDF EQU LTEMP+12
DLTEM DEF LTEMP 
      HED SAVE
* THE SAVE COMMAND IS USED TO SAVE PROGRAMS IN THE USER LIBRARY.
* THE PROCEDURE IS AS FOLLOWS:
*     1) CHECK THAT PROGRAM IS LISTABLE (OR ID=A000), HAS A NAME, 
*        AND ISN'T NULL.
*     2) DECOMPILE. 
*     3) CHECK FOR IDT OR ADT OVERFLOW. 
*     4) CHECK FOR DUPLICATELY NAMED PROGRAM. 
*     5) UPDATE DIRECTORY.
*     6) UPDATE IDT AND ADT.
*     7) MOVE PROGRAM TO LIBRARY AREA.
* 
* STEP 5 IS WRITTEN AS AN OVERLAY, WHICH IS CALLED WHENEVER THE PAR-
* TICULAR DIRECTORY TRACK NEEDED IS ALREADY FULL. ITS JOB IS TO GAR-
* BAGE COLLECT THE DIRECTORY TRACKS.
      SPC 2 
CSAVE LDA DRFLG    CHECK FOR $FILS
      SZA 
      JMP SAV 
      LDA .-22
      LDB *+2 
      JMP LIBER 
      DEF *+1 
      OCT 5044
      ASC 10,FILS NOT INITIALIZED 
      SPC 1 
SAV   LDB MLINB 
      ADB .+?ID-?LINK  ID LOCN. 
      STB MOVES 
      DLD MOVES,I   A=ID,B=1ST WORD OF NAME.
      SZB           TEST FOR NO PROGRAM NAME
      CPB ASCBB 
      JMP SAV3
      LDB PBPTR 
      LDA .-11
      CPB PBUFF 
      JMP SAV4
* 
      LDA MAIN,I
      AND CFLAG 
      SZA          COMPILED?
      JMP CSAV1    YES. 
      LDB SPROG    NO. COMMON ALLOCATED?
      CPB PBUFF 
      JSB ALCOM    NO. DO IT
      LDB SPROG    SET PROGRAM
      STB PRGCT       COUNTER 
      LDA .+40B    TURN ON BLANK
      STA BLANK        SUPPRESSION
      LDA DRFLG 
      ADA =B100000
      STA DRFLG 
      CLA          CLEAR OUT-OF-
      STA SYMTB       STORAGE FLAG
      JMP *+1,I    GO COMPILE PROGRAM 
      DEF CMP00 
CSAV1 LDA SPTR
      SZA          SEMI-COMPILED? 
      JSB RSTPT    RESTORE SYMBOL TABLE POINTER 
CSAV2 CLA          FLAG AS
      STA SPTR         SEMI-COMPILED
      LDB FILTB 
      ADB .+7 
      CMB,INB 
      ADB LWAUS 
      SSB,RSS      TOO BIG? 
      JMP CSAV4    NO.
      LDA .-18
      LDB *+2 
      JMP LIBER 
      DEF *+1 
      OCT 5120     LF-P 
      ASC 8,ROGRAM TOO LARGE
CSAV4 LDB FILTB 
      ADB .+7 
      CMB,INB         PROGRAM 
      ADB SPROG         LENGTH
      STB SAVWD     SAVE IN 
      CMB,INB 
      INB 
      BRS,BRS 
      BRS,BRS 
      BRS,BRS 
      BRS 
      INB 
      STB SAVLN        SECTORS
      LDB SPROG     SAVE START-OF-
      STB SAVP        PROGRAM POINTER 
      STB BUFAD 
* 
      LDA DIREC+3 
      CMA,INA 
      ADA DIREC+4 
      ADA SAVLN 
      SSA 
      JMP SAV6      OK. 
      LDB *+3 
SAV9  LDA .-19
      JMP LIBER 
      DEF *+1 
      OCT 5114      LF-L
      ASC 9,IBRARY SPACE FULL 
* 
* SEARCH ADT FOR SPACE TO PUT THE PROGRAM.
* 
SAV6  EQU * 
      LDA DIREC+5 
      CPA .+32
      RSS 
      JMP SAV7
      LDA .-14
      LDB *+2 
      JMP LIBER 
      DEF *+1 
      OCT 5104
      ASC 6,IRECTORY FULL 
      SPC 1 
SAV12 LDA .-16
      LDB *+2       PRINT "DUPLICATE ENTRY" 
      JMP LIBER 
      DEF *+1 
      OCT 5104      LF-D
      ASC 7,UPLICATE ENTRY
* 
SAV7  EQU * 
      ISZ MOVES 
      LDA DLTEM     MOVE ID/NAME ENTRY TO 
      STA MOVED      LTEMP(0:3).
      LDB .-3 
      JSB MOVEW 
* 
SAV11 EQU * 
      JSB DLOOK 
      JMP SAV12     ENTRY FOUND--ILLEGAL. 
* 
      ISZ DIREC+5  INCR. LAST ENTRY INDEX IN DIREC. 
      LDA DIREC+4  GET LAST SECTOR USED 
      STA SAVI       AND SAVE 
      ADA SAVLN    ADD # SECTORS IN CURRENT PROGRAM 
      STA DIREC+4    AND SAVE 
      LDA LTEMP    GET FIRST WORD OF FILENAME 
      STA B,I        AND STORE IN DIREC.
      INB 
      LDA LTEMP+1 
      STA B,I 
      INB 
      LDA LTEMP+2 
      STA B,I 
      INB 
      LDA SAVI     GET PREVIOUS LAST USED SECTOR
      INA          MAKE START OF NEW FILE 
      STA B,I      STORE IN DIREC.
      INB 
      LDA SAVWD    GET PROG. LENGTH 
      STA B,I      STORE IN DIREC.
      INB 
      LDA PBUFF    GET START ADDR. OF USER PROG. AREA 
      CMA,INA 
      ADA SAVP     GET RELATIVE PROG. POINTER 
      STA B,I      STORE IN DIREC.
      INB 
      LDA =B100000
      STA B,I 
      INB 
      CLA 
      STA B,I 
      SPC 1 
      JSB EXEC     WRITE OUT DIRECTORY
      DEF *+7 
      DEF .-2 
      DEF .103
      DEF DIREC 
      DEF D256
      DEF DTRAK 
      DEF DSECT 
      SPC 1 
      LDA SAVI     GET START SECTOR FOR FILE
      INA 
      ADA DSECT    ADD START SECTOR # OF $FILS
      CLB 
      DIV SECTR    DIVIDE BY # SECTORS/TRACK
      ADA DTRAK    ADD $FILS STA9T TRACK
      STA SAVC       AND SAVE TRACK # 
      STB SAVDF        AND SECTOR # 
      LDA SAVWD    MAKE PROG. LENGTH POSITIVE 
      CMA,INA 
      STA SAVWD 
      LDA PBUFF 
      CMA,INA 
      STA DTEMP 
      LDA FILTB    => FIRST WD AFTER SYMBOL TABLE 
      LDB SYMTB    SAVE END-OF-PROGRAM POINTER
      ADB DTEMP 
      STB 0,I 
      INA 
      LDB FILCT    SAVE # OF <FILES> STATEMENTS 
      STB 0,I 
      LDB DFILT 
      STB FILPT 
      LDB .-4 
      STB SPTR
CSAV3 INA 
      LDB FILPT,I 
      ADB DTEMP 
      STB 0,I 
      ISZ FILPT 
      ISZ SPTR
      JMP CSAV3 
      INA 
      LDB USESN 
      STB 0,I 
      SPC 1 
      JSB EXEC     WRITE PROGRAM TO $FILS 
      DEF *+7 
      DEF .-2 
      DEF .103
BUFAD NOP 
      DEF SAVWD 
      DEF SAVC
      DEF SAVDF 
      SPC 1 
      JMP LLEND 
SAV3  LDA .-16
SAV4  LDB *+2 
      JMP LIBER 
      DEF *+1 
      OCT 5116      LF-N
      ASC 7,O PROGRAM NAME
      END CSAVE 
