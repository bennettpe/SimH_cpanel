ASMB,R,B,L,X
      NAM FILES,5 
      SPC 2 
      COM PBPTR,NEG(26),.(52),MAIN,SPROG,SYMTB,ERRCT
      COM SBPTR,SBUFA,SSTAK,SYNTQ,SERRS(36),RERRS(50) 
      COM FERRS(15),WERRS(10),MAXCR,MSFLG,PFLAG,SFLAG 
      COM DFLAG,TEMP(3),CDFLG,ARYAD,GFLAG,SIGN,UFLAG
      COM PINTG(2),TABLE,LNGTH,SMBGN,SLENG,COUNT
      COM TBLPT,TSPTR,SBT0
      COM EXP,MANT1,MANT2,EXPON,DPFLG,NT0,ENOUF 
      COM LNAME,CHRCT,OCTMP,SPTR,FILTB,NSPTR,INFST
      COM DCLC1,DEST,DCLC2,STEND,DFILT,FILPT,COMSN
      COM MVEND 
      COM STYPE,USESN,FILCT,.LNUM 
      COM PRGCT,STCT1,STCT2,NUMPT,STCT3,FLINK 
      COM STMP1,STMP2,VLFLG,VALTB,FCORE,COMPT,VTMP1 
      COM VTMP2,VTMP3,VTMP4,VTMP5,IFSS
      COM CU1,APTR,DCFLG,TEMP2,LT1,LT2,FCNTR,RTNST
      COM ASINP,RTRNQ,FORQ,TEMP1,FILE#
      COM INTMP,TMPST,TPRME,TNULL,PS1,DMY3,TEMP5
      COM PRIST,FBASE,RQ3,EOL,GTMP,FORST,EFN0,FVT 
      COM EFN1,EFN2,EFN3,MCNT,INITF,IFCNT,OPDST 
      COM FFLG,TEMP4,EORFL,NCH,TEMP6,STRLN,ATIM,LT5 
      COM ASTYP,ASBFP,ORDNO,ATMP(2),RETCD 
      COM DCCNT,NXTDT,VL0,RCRD#,PMASK,ITEMP 
      COM OPTRQ,EST3,EST2,EST1,TT1,TT2,DMY1 
      COM DMY2,TT3,TT4,CP0,CP1,PS0,MPT,NQT,RT0
      COM RT1,TRFCH,TRS0,A1,A2,C1,EOPF,NUMBF(6),FD0 
      COM OT1,OT2,OT3,LBTMP,REPCT,RNDX1,RNDX2 
      COM X2TMP(2),CTMP,DTMP(2),BTMP(2),XTEMP(2),YTEMP(2) 
      COM UTEMP(2),LT0,LT8,LT3,LT6,LT7,LT4,DIGCT
      COM NMPTR,NMTMP,FFLAG,DGCNT 
      COM IFSTR,EC,CC,DP,CONTR,CC1,CC2,PC1,PC2
      COM SFLG,FST,EFLAG,NUM1,NUM2,SBD,SAD,SNFLG
      COM NAD,NBD,FSP,EST,NUMW1,NUMW2,EXPW
      COM IHB,HBP,NHBW,NBLK,TOTDG,DCTR
      COM EDSTA,LCH,ELCNT 
      COM STPTR,RSPTR,TEMP3 
      COM MT1,MT0,MT3,MT2,MEXIT,DMY4,MOP,BS2,BS3
      COM MMT0,MMT1,MMT2,MMT6(2),MMT7(2),MMT3,MMT4,MMT5 
      COM MMT8(2),SCALR(2),ID0,ID1,MAXE(2),TOL(2),PIVEL 
      COM VT0,RD0 
      COM SOURC,TAP0,TAP1 
      COM STIME(5)
      COM LTEMP(16),LTYP1,LTYP2,LCHCR,MOVES,MOVED 
      COM ERSEC(77),DRFLG,DIREC(256),DTEMP,DCNT 
      COM DTRAK,DSECT,FLSTS(4)
      SPC 2 
      EXT DCMPL,DLOOK,LWAUS,OUTCH 
      SPC 2 
B377  OCT 377 
B     EQU 1 
B177  OCT 177 
M96   DEC -96 
M32   DEC -32 
.140  OCT 140 
SCHLQ NOP 
B400  OCT 400 
SECTR EQU 116B
FTEL  EQU 15
      HED FILES 
* THE FILES ROUTINE IS USED BY THE BASIC COMPILER TO PROCESS FILES
* STATEMENTS DURING PHASE II.  THE PURPOSE OF THE ROUTINE IS TO PRO-
* VIDE THE COMPILER WITH INFORMATION ABOUT THE REQUESTED FILES. THIS
* INFORMATION CONSISTS OF THE FILE'S DISC ADDRESS AND DRUM
* ADDRESS (IF ANY), ITS LENGTH, AND ITS RECORD SIZE.
* THE COMPILER PASSES PARAMETERS TO THE FILES ROUTINE AS FOLLOWS: 
* 
*     FILCT=-5+# OF FILES STATEMENTS
*     FILTB=>BEGINNING OF TABLE AREA FOR FILE INFO. 
*     SCHLB,I=>FIRST POSSIBLE RETURN ADDRESS. 
* 
* THE CALLING SEQUENCE TO THE FILES ROUTINE IS AS FOLLOWS:
* 
*     JSB SCHLB,I 
*     DEF FILIB 
*     <ERROR EXIT FOR BAD FORMAT IN FILES STATEMENT>
*     <ERROR EXIT IF A FILE IS UNACCESSIBLE>
*     <ERROR EXIT IF PROGRAM OVERFLOW>
*     <NORMAL EXIT> 
      SPC 2 
FILES LDA B,I 
      STA SCHLQ 
      LDA DRFLG 
      SZA 
      JMP FLB 
      ISZ SCHLQ 
      JMP FLB8
FLB   LDA FILBP 
      STA FLBUF     SAVE BUFFER POINTER.
      STA FLBFP 
      LDA .-17      SET COUNTER FOR MAXIMUM NUMBER
      STA FLBC1      OF FILES ALLOWED.
      LDA FILCT     GET COUNT - 5 OF FILES STATEMENTS 
      ADA .+5       GET COUNT 
      CMA,INA       GET NEGATIVE
      STA FLBFC     SAVE COUNT
      LDA DFILT     GET POINTER TO FILES
      STA FLBFF     STATEMENT TABLE 
FLBA  EQU * 
      LDB FLBFF,I   GET POINTER TO FILES STATEMENTS 
      CCA           SET POINTER TO
      ADA 1,I        LAST CHAR + 1 OF 
      ADA 1           FILES STATEMENT.
      RAL 
      STA FLBP
      INB          INITIALIZE POINTER TO
      RBL 
      STB FLBCP    FILES STATEMENT. 
* 
FLB1  LDA .-3       SET FILC2 TO SAY 3 WORDS
      STA FLBC2      ALLOWED. 
      CLA 
      STA FLBCM     CLEAR COMMA FLAG. 
      JSB FLBCH     GET FIRST CHAR. 
      CPA .+44B     TEST FOR DOLLAR SIGN. 
      JMP FLB2
      CPA .+52B     TEST FOR SNOWFLAKE
      JMP FLB22 
FLB5  CPA .+40B     BETTER NOT BE A BLANK.
      JMP FLB8
FLB3  ALF,ALF       POSITION ON LEFT
      STA FLBUF,I    AND STORE IN BUFFER. 
      JSB FLBCH     GET RIGHT CHARACTER 
      IOR FLBUF,I    AND PACK IN. 
      STA FLBUF,I 
      ISZ FLBUF     BUMP BUFFER POINTER.
      JSB FLBCH     GET NEXT CHARACTER. 
      ISZ FLBC2     TEST FOR END OF FILE NAME.
      JMP FLB3
* 
      CPA .+40B     IF END OF FILE NAME, CHAR MUST
      JMP FLB4       BE A BLANK.
      JMP FLB8
FLB2  JSB FLBCH 
      JMP FLB5
FLB22 JSB FLBCH 
      CPA .+40B     IS IT BLANK?
      CLA,RSS       YES, * IS PLACE HOLDER
      JMP FLB5
      LDB .-7       CLEAR BUFFER
      STA FLBUF,I     SINCE NO
      ISZ FLBUF         FILE NOW
      INB,SZB 
      JMP *-3 
      LDB B400      RESERVE 256 WORDS 
      STB FLBUF,I     IN CORE FOR FUTURE FILE 
      INA 
      JMP FLB26 
* 
FLB4  LDA .+5       LEAVE ROOM FOR STORAGE
FLB26 EQU * 
      ADA FLBUF       OF FILE INFORMATION 
      STA FLBUF         FROM THE DIRECTORY
      ISZ FLBC1     TEST FOR TOO MANY FILES.
      RSS 
      JMP FLB8
      LDA FLBCM     TEST FOR ANY MORE REQUESTED.
      SZA 
      JMP FLB1      YES IF COMMA WAS SEEN.
      ISZ FLBFF     COUNT UP POINTER INTO TABLE 
      ISZ FLBFC     CHECK COUNTER 
      JMP FLBA      PROCESS ANOTHER FILES STATEMENT.
* 
      LDA FLBC1     SET FILC1 TO EQUAL
      ADA .+17        -# OF FILES REQUESTED 
      CMA,INA 
      STA FLBC1 
      STA FLBC2 
* 
      ISZ SCHLQ     BUMP RETURN ADDRESS SINCE WE'VE 
      LDA FLBFP      NOW CHECKED FOR TYPE I ERRORS. 
      STA FLBUF     SET POINTER TO BUFFER AGAIN.
* 
FLB6  LDB FLBUF,I   GET FIRST WORD OF FILE NAME.
      SZB 
      JMP FLB23 
* 
FLB27 EQU * 
      LDB FLBUF     BUMP POINTER
      ADB .+8       TO NEXT TEMP
      STB FLBUF         BUFFER ENTRY
      JMP FLB28 
* 
FLB23 STB LTEMP 
      ISZ FLBUF     GET NEXT 2 WORDS ALSO.
      DLD FLBUF,I 
      DST LTEMP+1 
      JSB DLOOK 
      JMP FLB7      FOUND IT. 
* 
FLB8  JSB DCMPL 
      JMP SCHLQ,I 
* 
FLB7  STA FLBFS 
      ISZ FLBUF 
      ISZ FLBUF 
      CLA 
      STA FLBUF,I 
      LDA FLBFS 
      ALF,ALF 
      AND B377
      ISZ FLBUF 
      STA FLBUF,I 
      ISZ FLBUF 
      LDA FLBFS 
      AND B377
      STA FLBUF,I 
      ISZ FLBUF 
      DLD B,I 
      SSA 
      JMP FLB8
      DST FLBUF,I 
      ISZ FLBUF 
      ISZ FLBUF 
* 
FLB28 EQU * 
      ISZ FLBC1     TEST FOR ANY MORE FILES.
      JMP FLB6
FLB29 EQU * 
      ISZ SCHLQ     BUMP TO NEXT ERROR EXIT.
      LDA FLBC2     GET # OF FILES. 
      STA FLBC1 
      CMA,INA 
      MPY .+FTEL    COMPUTE NEW VALUE OF PBPTR
      ADA PBPTR 
      CMA 
      ADA LWAUS     TEST FOR OVERFLOW.
      SSA 
      JMP FLB8      FAIL--PROGRAM TOO LARGE.
* 
      ISZ SCHLQ     BUMP TO NORMAL RETURN ADDRESS.
      LDA FILTB 
      STA VALTB 
      LDB FLBFP     GET BUFFER POINTER
FLB16 EQU * 
      ADB .+6       BUMP TO LENGTH WORD 
      DLD B,I       GET LENGTH WORD AND RECORD SIZE 
      DST VALTB,I   STORE THEM IN FILE TABLE
      ISZ VALTB     BUMP FILE 
      ISZ VALTB       TABLE POINTER 
FLB20 LDB FLBFP     NOT SANCTIFIED: GET ADDRESS 
      ADB .+4         OF HIGH DISC ADDRESS
      STB FUSCH         AND SAVE IT 
      INB           GET POINTER TO LOW DISC ADD WD. 
      ADA .-1 
      RAL 
      ADA B,I 
      CLB 
      DIV SECTR 
      ADA FUSCH,I 
      DST VALTB,I     OF DISC ADDRESS 
      LDA .+4 
      ADA VALTB 
      STA VALTB 
      DLD FUSCH,I     BASE DISC ADDRESS 
      DST VALTB,I       INTO FILE TABLE 
      ISZ VALTB     ADJUST POINTER
FLB21 LDA VALTB     BUMP POINTERS.
      ADA .+4 
      STA VALTB 
      LDB FLBFP,I   MOVE
      STB VALTB,I 
      ISZ FLBFP      FILE 
      ISZ VALTB 
      DLD FLBFP,I     NAME
      DST VALTB,I 
      LDA VALTB        INTO 
      ADA .+FTEL-12 
      STA VALTB         TABLE 
      LDB FLBFP 
      ADB .+7 
      STB FLBFP 
      ISZ FLBC2     TEST FOR ANY MORE.
      JMP FLB16 
      STA PBPTR     ADVANCE PBPTR TO
*                                     FIRST UNUSED WORD 
* 
      JMP SCHLQ,I 
* 
* FLBCH GETS THE NEXT CHARACTER OUT OF THE FILES
* STATEMENT. IF FLBCM=1, IT ASSUMES A COMMA HAS BEEN
* SEEN AND RETURNS A BLANK. OTHERWISE IF THE CHARAC-
* TER IS A COMMA, IT SETS FLBCM AND RETURNS A BLANK.
* IT ALSO RETURNS BLANKS AT THE END OF THE CODE.
* 
FLBCH NOP 
      LDA .+40B     RETURN BLANK IF 
      LDB FLBCM     FLBCM IS SET. 
      SZB 
      JMP FLBCH,I 
      LDB FLBCP     GET CHAR. POINTER.
      INB           OTHERWISE BUMP
      CPB FLBP       IF END OF STATEMENT, 
      JMP FLBCH,I   RETURN A BLANK. 
      STB FLBCP      POINTER. 
      CLE,ERB       GET NEXT CHAR.
      LDA 1,I 
      SEZ,RSS 
      ALF,ALF       ROTATE IF NECESSARY.
      AND B177      MASK. 
      SZA,RSS       SKIP 0'S. 
      JMP FLBCH+1 
      ADA M96 
      SSA,RSS       LOWER CASE? 
      ADA M32       YES, MAKE INTO UPPER CASE 
      ADA .140      NO
      CPA .+54B     TEST FOR COMMA. 
      RSS 
      JMP FLBCH,I   NOT A COMMA.
      ISZ FLBCM     IF COMMA, SET FLAG AND GO 
      JMP FLBCH+1    RETURN A BLANK.
* 
FLBCM EQU LTEMP+1 
FLBUF EQU LTEMP+6 
FLBFP EQU LTEMP+7 
FLBC1 EQU LTEMP+8 
FLBC2 EQU LTEMP+9 
FLBP  EQU LTEMP+10
FLBCP EQU LTEMP+11
FLBFS EQU LTEMP+13
FLBFC EQU LTEMP+14
FLBFF EQU LTEMP+15
FILBP DEF FILBF 
FILBF BSS 131 
FUSCH BSS 1 
      END FILES 
