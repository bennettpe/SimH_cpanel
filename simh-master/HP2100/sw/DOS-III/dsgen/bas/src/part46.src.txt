ASMB,R,B,L,X
      NAM ASSIG,5 
      SPC 2 
      COM PBPTR,NEG(26),.(52),MAIN,SPROG,SYMTB,ERRCT
      COM SBPTR,SBUFA,SSTAK,SYNTQ,SERRS(36),RERRS(50) 
      COM FERRS(15),WERRS(10),MAXCR,MSFLG,PFLAG,SFLAG 
      COM DFLAG,TEMP(3),CDFLG,ARYAD,GFLAG,SIGN,UFLAG
      COM PINTG(2),TABLE,LNGTH,SMBGN,SLENG,COUNT
      COM TBLPT,TSPTR,SBT0
      COM EXP,MANT1,MANT2,EXPON,DPFLG,NT0,ENOUF 
      COM LNAME,CHRCT,OCTMP,SPTR,FILTB,NSPTR,INFST
      COM DCLC1,DEST,DCLC2,STEND,DFILT,FILPT,COMSN
      COM MVEND 
      COM STYPE,USESN,FILCT,.LNUM 
      COM PRGCT,STCT1,STCT2,NUMPT,STCT3,FLINK 
      COM STMP1,STMP2,VLFLG,VALTB,FCORE,COMPT,VTMP1 
      COM VTMP2,VTMP3,VTMP4,VTMP5,IFSS
      COM CU1,APTR,DCFLG,TEMP2,LT1,LT2,FCNTR,RTNST
      COM ASINP,RTRNQ,FORQ,TEMP1,FILE#
      COM INTMP,TMPST,TPRME,TNULL,PS1,DMY3,TEMP5
      COM PRIST,FBASE,RQ3,EOL,GTMP,FORST,EFN0,FVT 
      COM EFN1,EFN2,EFN3,MCNT,INITF,IFCNT,OPDST 
      COM FFLG,TEMP4,EORFL,NCH,TEMP6,STRLN,ATIM,LT5 
      COM ASTYP,ASBFP,ORDNO,ATMP(2),RETCD 
      COM DCCNT,NXTDT,VL0,RCRD#,PMASK,ITEMP 
      COM OPTRQ,EST3,EST2,EST1,TT1,TT2,DMY1 
      COM DMY2,TT3,TT4,CP0,CP1,PS0,MPT,NQT,RT0
      COM RT1,TRFCH,TRS0,A1,A2,C1,EOPF,NUMBF(6),FD0 
      COM OT1,OT2,OT3,LBTMP,REPCT,RNDX1,RNDX2 
      COM X2TMP(2),CTMP,DTMP(2),BTMP(2),XTEMP(2),YTEMP(2) 
      COM UTEMP(2),LT0,LT8,LT3,LT6,LT7,LT4,DIGCT
      COM NMPTR,NMTMP,FFLAG,DGCNT 
      COM IFSTR,EC,CC,DP,CONTR,CC1,CC2,PC1,PC2
      COM SFLG,FST,EFLAG,NUM1,NUM2,SBD,SAD,SNFLG
      COM NAD,NBD,FSP,EST,NUMW1,NUMW2,EXPW
      COM IHB,HBP,NHBW,NBLK,TOTDG,DCTR
      COM EDSTA,LCH,ELCNT 
      COM STPTR,RSPTR,TEMP3 
      COM MT1,MT0,MT3,MT2,MEXIT,DMY4,MOP,BS2,BS3
      COM MMT0,MMT1,MMT2,MMT6(2),MMT7(2),MMT3,MMT4,MMT5 
      COM MMT8(2),SCALR(2),ID0,ID1,MAXE(2),TOL(2),PIVEL 
      COM VT0,RD0 
      COM SOURC,TAP0,TAP1 
      COM STIME(5)
      COM LTEMP(16),LTYP1,LTYP2,LCHCR,MOVES,MOVED 
      COM ERSEC(77),DRFLG,DIREC(256),DTEMP,DCNT 
      COM DTRAK,DSECT,FLSTS(4)
      SPC 2 
      EXT LIBER,DLOOK,ABCHK 
      SPC 2 
B     EQU 1 
SCHLQ NOP 
FTEL  EQU 15
B377  OCT 377 
SECTR EQU 116B
BIT15 OCT 100000
* THE ASSIGN ROUTINE IS USED BY THE BASIC STATEMENT EXECUTION PROCESSOR 
* (PHASE III) TO PROCESS AN ASSIGN STATEMENT. THE PURPOSE OF THE ROU- 
* TINE IS TO REPLACE THE INFORMATION CURRENTLY IN THE FILE CONTROL
* BLOCK REFERENCED BY A SPECIFIED ORDINAL NUMBER WITH INFORMATION ABOUT 
* THE NEW FILE BEING ASSIGNED TO THAT ORDINAL NUMBER. INPUT PARAMETERS
* TO THE ASSIGN ROUTINE ARE AS FOLLOWS: 
* 
*     ASBFP: > TO BUFFER CONTAINING FILE NAME 
*     ASNID: 0= USER LIBRARY, 1= SYSTEM LIBRARY, 2= GROUP LIBRARY 
*     ORDNO: SPECIFIED ORDINAL NUMBER 
*     FILTB: => FILE TABLE
* 
* THE CALLING SEQUENCE TO THE ASSIGN ROUTINE IS AS FOLLOWS: 
* 
*     JSB SCHLB,I 
*     DEF ASNIB 
*     <EXIT FOR NON-EXISTENT FILE>
*     <EXIT FOR 'READ-ONLY' (GROUP OR SYSTEM LIB.) FILE>
*     <EXIT FOR 'READ-ONLY' (IN USE) FILE>
*     <NORMAL EXIT> 
ASSIG LDA B,I 
      STA SCHLQ 
      LDA DRFLG 
      SZA 
      JMP ASSI
      LDA .-22
      LDB *+2 
      JMP LIBER 
      DEF *+1 
      OCT 5044
      ASC 10,FILS NOT INITIALIZED 
ASSI  LDA ASFBF 
      STA ASBUF       BUFFER POINTER
* 
* 
ASN2  LDA ORDNO     SAVE SPECIFIED
      STA ASORD       ORDINAL NUMBER
      MPY .+FTEL    SAVE POINTER
      ADA FILTB       TO FILE TABLE 
      STA ASFCB         ENTRY 
      INA 
      LDB 0,I 
      CLE,ELB 
      CLE,ELB 
      RBR,RBR 
      STB ASSAV     SAVE OLD RECORD SIZE
ASN21 LDB ASBFP 
      LDA 1,I           FILE NAME 
      STA LTEMP 
      INB                 IN
      DLD 1,I 
      DST LTEMP+1 
      JSB DLOOK 
      JMP ASN4        GO CHECK IT OUT 
ASN24 ISZ SCHLQ 
      JMP ASN14 
ASN4  STA LTEMP+5 
      LDA B,I           FOUND 
      SSA 
      JMP ASN24     NO, FAIL
      STA LTEMP+4 
ASN25 INB 
      LDA B,I         RECORD SIZE 
      STA ASBUF,I       AND SAVE IT 
      CMA,INA       IS IT LARGER
      ADA ASSAV       THAN THE ALLOCATED
      SSA               BUFFER? 
      JMP ASN14 
      ISZ SCHLQ     NO
      ISZ ASBUF 
ASN5  LDA LTEMP+5 
      ALF,ALF 
      AND B377
      STA ASBUF,I 
      ISZ ASBUF 
      LDA LTEMP+5 
      AND B377
      STA ASBUF,I 
      ISZ ASBUF 
      LDA LTEMP+4 
      STA ASBUF,I 
* 
ASN50 ISZ SCHLQ     FILE EXISTS--BUMP RETURN ADDRESS
* 
      ISZ SCHLQ     NO, BUMP TWICE
ASN31 EQU * 
      ISZ SCHLQ 
ASN32 EQU * 
      LDB ASBUF 
      LDA 1,I       GET LENGTH WORD 
      STA ASFCB,I     AND STORE IT
      ISZ ASFCB 
      ADB .-3 
      LDB 1,I       GET NEW RECORD SIZE 
      STB ASFCB,I     AND STORE IT
      ISZ ASFCB 
      ELA,CLE,ERA   REMOVE BIT 15 FROM LENGTH 
      LDB ASBUF 
      ADB .-2 
      ADA .-1 
      RAL 
      STB ASSCH 
      INB 
      ADA B,I 
      CLB 
      DIV SECTR 
      ADA ASSCH 
      DST ASFCB,I 
      LDA ASFCB 
      ADA .+4 
      STA ASFCB 
      DLD ASSCH,I   STORE BASE DISC ADDRESS 
      DST ASFCB,I     INTO FILE TABLE 
      ISZ ASFCB     ADJUST POINTER
ASN13 LDA ASFCB     SET 
      ADA .-3         'NULL RECORD' 
      LDB BIT15         CONDITION 
      STB 0,I 
      LDA ASBUF 
      ADA .-3 
      LDB ASSAV 
      CMB,INB       COMPUTE DIFFERENCE BETWEEN
      ADB 0,I         OLD AND NEW BUFFER SIZES
      ISZ ASFCB 
      LDA ASFCB,I 
      ADA 1         ADJUST BUFFER 
      STA ASFCB,I     ADDRESS 
      ISZ ASFCB 
      STA ASFCB,I   SET 'RECORD FULL' CONDITION 
      ISZ ASFCB 
      CLA           SET 'NO EOF EXIT' 
      STA ASFCB,I     CONDITION 
      ISZ ASFCB 
      LDA ASBFP     MOVE
      LDB 0,I         FILE NAME 
      STB ASFCB,I       TO
      INA                 FILE TABLE
      ISZ ASFCB 
      DLD 0,I 
      DST ASFCB,I 
* 
ASN14 EQU * 
      JSB ABCHK 
      JMP SCHLQ,I 
ASFCB EQU LTEMP+6 
ASORD EQU LTEMP+7 
ASNFS EQU LTEMP+8 
ASSCH BSS 1 
ASSAV BSS 1 
ASBUF BSS 1 
ASFBF DEF *+1 
      BSS 6 
      END ASSIG 
