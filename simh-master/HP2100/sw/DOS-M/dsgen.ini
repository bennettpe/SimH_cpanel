
set console -q -n log=log.txt 

; set debug -n -q debug.txt
; set debug stdout

; set clk debug=CSRW;PSERV;IOBUS
; set tty debug=CSRW;SERV;PSERV;XFER;IOBUS
; set ptr debug=SERV;XFER;IOBUS
; set ptp debug=CSRW;SERV;XFER;IOBUS
; set cpu debug=INSTR;DATA;FETCH;REG;OPNDEXEC;NOOS
; set mp  debug=IOBUS
; set drc debug=IOBUS

echo
echo ***
echo *** DOS-M Disk Operating System (1971) 
echo *** Generation
echo ***
echo

; generates a new DOS-M system
;
; sw Installed:
;   FMP        - File manager
;   EDIT       - Editor
;   ALGOL      - Algol Compiler
;   ASMB, XREF - Assembler
;   FTN        - Fortran II
;   FTN4       - Fortran IV
;   BASIC      - SUPER BASIC
;

set cpu 2116
set cpu 32k
SET CPU EAU

set tty sc=11
set clk sc=12
set ptr sc=13
set tbg sc=17
set ptp sc=20

set tty autolf
send after=200k
send delay=30k

; 2870 DISC
set dpc 12557A
set dpc sc=22
set dpc ena
att dpc -q -n tmp.DOS-M.disc

; generate configured bootstrap

att ptp -q -n dsgen/tmp.conf_bootstrap.abs
att ptr -q dsgen/sio16k11.abs
boot ptr
att ptr -q dsgen/bootstrap.abs
boot ptr

; 22 -> is the select code for disc (from set dpc sc=22)

reset
d s 100022
go 2
det -q ptp
det -q ptr

; load DSGEN (DOS-M SYSTEM GENERATOR   BINARY   24225-60001 REV F)

d s 0
att ptr -q dsgen/sio16k11.abs
boot ptr
att ptr -q dsgen/dsgen.abs
boot ptr

echo
; format disc

reset
d s 100000
d p 100

go until "SYS GEN CODE?" 
send "0102\r"
go until "SYS DISC CHNL?" 
send "22\r"
go until "SECTORS/TRACK?" 
send "12\r"
go until "USER DISC SUBCHNL?" 
send "0\r"
go

echo
; initialization phase

d s 0
d p 100

call type2 "SYS GEN CODE?"        "0102"
call type2 "SYS DISC CHNL?"       "22"
call type2 "SECTORS/TRACK?"       "12"
call type2 "SYS DISC SIZE?"       "200"
call type2 "# DRIVES?"            "1"
call type2 "FIRST SYSTEM TRACK?"  "0"
call type2 "FIRST SYSTEM SECTOR?" "3"
call type2 "SYS DISC SUBCHNL?"    "0"
call type2 "USER DISC SUBCHNL?"   "0"
call type2 "TIME BASE GEN CHNL?"  "17"
call type2 "IS 2114?"             "NO"
call type2 "LWA MEM?"             "77677"
call type2 "ALLOW :SS?"           "YES"
call type2 "PRGM INPT?"           "PT"
call type2 "LIBR INPT?"           "PT"
call type2 "PRAM INPT?"           "TY"
go

; program input phase: Now load rel files for DOS-M

goto start_module_load

:load_module
echo ---> Load Module %1
att ptr -q dsgen/%1
d s 0
expect "ERR" goto load_err
go
noexpect
return

:load_err
go until "\n"
echo
echo ERROR! *** Paper tape load error
echo .      *** Press Enter to quit
set env -p "      " a
echo
bye
return

:start_module_load

; Should explode 24225-03_EX.rel in each one of its exported functions
; modules in dos/ subdir are from DOS version, not DOS-M specific
; modules in dos-iii/ subdir are from DOS-III version, not DOS-M specific

; DOS CORE-RESIDENT SYSTEM (DISCM) and DOS DISC-RESIDENT EXEC MODULES ($EX01 thru $EX16)

call load_module 24225-02_DISCM.rel 	; DOS-M CORE-RESIDENT SYSTEM                  BINARY   24225-60002 REV F
call load_module 24225-03_EX1.rel	; DOS-M EXEC MODULES                          BINARY   24225-60003 REV F
call load_module 24225-03_EX2.rel	
call load_module 24225-03_EX3.rel	
call load_module 24225-03_EX4.rel	
call load_module 24225-03_EX5.rel	
call load_module 24225-03_EX6.rel	
call load_module 24225-03_EX7.rel	
call load_module 24225-03_EX8.rel	
call load_module 24225-03_EX9.rel	
call load_module 24225-03_EX10.rel	
call load_module 24225-03_EX11.rel	
call load_module 24225-03_EX12.rel	
call load_module 24225-03_EX13.rel	
call load_module 24225-03_EX14.rel	
call load_module 24225-03_EX15.rel	
call load_module 24225-03_EX16.rel	
call load_module 24225-03_EX17.rel	
call load_module 24225-03_EX18.rel	
call load_module 24225-03_EX19.rel	
call load_module 24225-03_EX20.rel	
call load_module 24225-03_EX_LBL.rel
call load_module 24225-03_EX_SRCH.rel
call load_module 24225-03_EX_ADDR.rel
call load_module 24225-03_EX_CN.rel
call load_module 24225-03_EX_DUMRX.rel

; I/O Drivers - load required device drivers if they are included in the system

; mandatory: Choose one System Console Driver driver
call load_module dos/20985-01_DVR00.rel		; DOS TTY DRIVER (DVR00)                      BINARY   20985-60001 REV 1419

; paper tape drivers
call load_module dos/20987-01_DVR01.rel		; DOS PAPER TAPE READER (DVR01)               BINARY   20987-60001 REV C
call load_module dos/20989-01_DVR02.rel		; DOS PUNCH TAPE READER DRIVER (DVR02)        BINARY   20989-60001 REV B

; choose line printer
; call load_module dos/24168-01_DVR12.rel	; DOS 2767 LINE PRINTR (DVR12)                BINARY   24168-60001 REV 1419
; call load_module dos/24307-11_DVR12.rel	; DOS LINE PRINTER HP2607,2610,2613,2614,1618 BINARY   24307-16011 REV 1446

; mandatory: disc device driver
call load_module 24156-01_DVR31.rel	   	; DOS-M 2870/7900/7901 DISC/DRUM (DVR31)      BINARY   24156-60001 REV D
; call load_module 24226-01_DVR31.rel	  	; DOS-M 2883 DISC DRIVER (DVR31)              BINARY   24226-60001 REV C

; other I/O drivers
; call load_module dos/72006-01_DVR10.rel	; DOS COMPLETE HP7210A PLOTTER DRVR (DVR10)   BINARY   72006-60001 REV A
; call load_module dos/24272-01_DVR11.rel	; DOS HP2892A CARD READER DRIVER (DVR11)      BINARY   24272-60001 REV C
; call load_module dos/24182-01_DVR11.rel	; DOS HP2891A CARD READER DRIVER (DVR11)      BINARY   24182-60001 REV B 
; call load_module dos/13024-1A_DVR23.rel	; DOS HP7970A MT DRIVER (DVR23)               BINARY   13024-60001 REV A
; call load_module dos/20997-01_DVR22.rel	; DOS HP3030 MT DRIVER (DVR22)                BINARY   20997-60001 REV C
; call load_module dos/22208-01_DVR22.rel	; HP3030G MAG TAPE DVR                        BINARY   22208-60001 REV A
; call load_module 22320-01_DVR22.rel  		; DOS/DOS-M HP 2020/3030 MAG TAPE CONTROL PROGRAM   BINARY   22320-60001
; call load_module 22319-01_DVR22.rel  		; DOS/DOS-M HP2020 DVR MAG TAPE DVR                 BINARY   22319-60001 REV A
; call load_module dos/20823-01_DVR15.rel	; DOS MARK SENSE DRVR (DVR15) 12602B KIT      BINARY   20823-60001 REV C

; mandatory: job processor
call load_module 24225-04_JOBPR.rel		; DOS-M JOB PROCESSOR                         BINARY   24225-60004 REV F

; SW developement

; relocating Linker/Loader
call load_module 24155-01_LOADR.rel		; DOS-M RELOCATING LOADER                     BINARY   24155-60001 REV D

; assembler
call load_module 24158-01_ASMB.rel	        ; DOS-M ASSEMBLER MAIN CONTROL                BINARY   24158-60001 REV B
call load_module 24158-02_AS_DG_D.rel	        ; DOS-M ASSEMBLER SEGMENT D                   BINARY   24158-60002 REV B
call load_module 24158-03_AS_SG_1.rel	        ; DOS-M ASSEMBLER SEGMENT 1                   BINARY   24158-60003 REV B
call load_module 24158-04_AS_SG_2.rel	        ; DOS-M ASSEMBLER SEGMENT 2                   BINARY   24158-60004 REV B
call load_module 24158-05_AS_SG_3.rel	        ; DOS-M ASSEMBLER SEGMENT 3                   BINARY   24158-60005 REV B
call load_module 24158-06_AS_SG_4.rel	        ; DOS-M ASSEMBLER SEGMENT 4                   BINARY   24158-60006 REV B
call load_module 24158-07_AS_SG_5.rel	        ; DOS-M ASSEMBLER SEGMENT 5                   BINARY   24158-60007 REV B

; Fortran II compiler
call load_module 24159-01_FTN.rel	        ; DOS-M FORTRAN MAIN CONTROL                  BINARY   24159-60001 REV B
call load_module 24159-02_FTN.rel	        ; DOS-M FORTRAN PASS 1                        BINARY   24159-60002 REV B
call load_module 24159-03_FTN.rel	        ; DOS-M FORTRAN PASS 2                        BINARY   24159-60003 REV B
call load_module 24159-04_FTN.rel               ; DOS-M FORTRAN PASS 3                        BINARY   24159-60004 REV B
call load_module 24159-05_FTN.rel	        ; DOS-M FORTRAN PASS 4                        BINARY   24159-60005 REV B
; call load_module 24153-60001_FF.C.rel	        ; FORTRAN FORMATTER				       24153-60001  C  

; choose one: F2E (if EAU present), or F2F (if Floating Point Arithmetic)             BINARY   24151-60001 REV D    
call load_module dos/24151-01_F2E.rel	        ; DOS RELOCATABLE LIBRARY-F2E (EAU)           BINARY   24151-60001 REV D    	

; FMP - Extended File Manager
call load_module 24227-01_EFMG.rel	        ; DOS-M EXTENDED FILE MGR (EXEC MODULES)      BINARY   24227-60001 REV D
call load_module 24227-02_EFMG.rel	        ; DOS-M EXTENDED FILE MGR (UTIL)              BINARY   24227-60002 REV C
call load_module dos-iii/File_25_F4D.C.rel 	; F4D.N 24152-60001 rev C    RELOCATABLE SUBR LIBR (FTN4)
; NOTE: if FTN is used and FMP is used, coment call load_module 24153-60001_FF.C.rel to 
; avoid collision with call load_module dos-iii/File_25_F4D.C.rel

; Cross Reference Table Generator
call load_module dos/24223-01_XREF.rel	        ; DOS CROSS REFERENCE ROUTINE                 BINARY   24223-60001 REV B

; Load .rel files terminated. 

; terminate program input phase: check undefined externals

; Parameter input phase

d s 01

go until   "ENTER PROG PARAMETERS" 
call type  "/E"
call type2 "# SYSTEM LINKS?"      "400"
call type2 "# USER LINKS?"        "400"

go until   "EQUIPMENT TABLE ENTRY" 
call type  "11,DVR00,R"
call type  "13,DVR01"
call type  "20,DVR02"
call type  "22,DVR31,R,D"
call type  "/E"

go until   "DEVICE REFERENCE TABLE" 
call type2 "1 = EQT #?"  "1"
call type2 "2 = EQT #?"  "4"
call type2 "3 = EQT #?"  "4"
call type2 "4 = EQT #?"  "3"
call type2 "5 = EQT #?"  "2"
call type2 "6 = EQT #?"  "1"
call type2 "7 = EQT #?"  "0"
call type2 "8 = EQT #?"  "/E"

go until   "INTERRUPT TABLE" 
call type  "11,1"
call type  "13,2"
call type  "20,3"
call type  "23,4"
call type  "/E"

go until "FWA USER?" 
send "26000\r"
go

det -q all

; system generated in tmp.DOS-M.disc 
; PaperTape tmp.conf_bootstrap.abs created and prepared

echo
echo ***
echo *** System generated 
echo *** Boot, label the disk, Install SUPER BASIC and test the system
echo ***
echo

reset
dep s 0

; DOS prompt is "@" + BEL -> to remove the bell char issue this scp command
set console pchar=23400

; the prompt after some commands is "@" + BEL + CR/LF, but for some others
; commands is "@" + BEL withput CR/LF. Be aware!

att dpc -q tmp.DOS-M.disc

att ptr -q dsgen/tmp.conf_bootstrap.abs
boot ptr
echo

; first off all: set date

go until "@" 

call typecmd ":DATE,10JULY1971"
call typecmd ":JOB"

; give label to disk
call typecmd ":IN,SYS01"

; display local unit and equipement tables: 
; in this system, LU2 is paper tape reader
call typecmd ":LU"
call typecmd ":EQ"
call typecmd ":EJOB"

goto start_user_module_load

:user_module
echo
echo ---> Load User Module %1
att ptr -q dsgen/%1
send ":GO\r"
go until "@" 
return

:start_user_module_load

; fortran II test run

att ptp -q NUL

call typecmd ":JOB"
; same as COPY CON: SOURC (in MSDOS). Copies from console, saves 
; file in disk 1 with given name (5 chars max)
send ":STORE,S,SOURC,1\r"
go until "\n"
go until "\n"
call type 'FTN,B,L '
call type 'C '
call type '      PROGRAM HELLO '
call type '      WRITE(1,99) '
call type 'C '
send      '   99 FORMAT("THIS IS A FORTRAN-II HOLA") \r'
call type '      STOP'
call type '      END'
call type '      END$'
call type '\r'
call type "::"
go until "@"
; same as TYPE SOURC (in MSDOS). file is Source type (S) and lives in disk 1 

call typecmd ":LIST,S,1,SOURC"
; read the file to simulate the paper tape input for next program (the compiler)
call typecmd ":JFILE,SOURC"
call type    ":PROG,FTN,2,6,4,56,99"
; run the compiler: 2=input from disc JFILE prepared data, 
;                   6=list to printer in LU6 (printer, that is redirected to console)
;                   4=LU to punch out the compiled program 
;                   56=define listing on pages of these lines long 
;                   99=compiled prog stored in disc binary work area
go until "$END,FTN"
go until "@" 
send ":PROG,LOADR\r"
go until "@" 
send ":RUN,HELLO\r"
go until "@" 

; delete HELLO and SOURC file as a precaution. STORE fails if file already exists
call typecmd ":PURGE,SOURC"
call typecmd ":PURGE,HELLO"
call typecmd ":EJOB"

; assembler test run

call typecmd ":JOB"
send ":STORE,S,SOURC,1\r"
go until "\n"
go until "\n"
send 'ASMB,R,L\r'
send '      NAM HELLO,3\r'
send '      EXT EXEC\r'
send '*\r'
send 'START NOP\r'
send '      JSB EXEC\r'
send '      DEF *+5\r'
send '      DEF RCODE\r'
send '      DEF CONWD\r'
send '      DEF BUFFR\r'
send '      DEF BUFLN\r'
send '*\r'
send '      JSB EXEC\r'
send '      DEF *+2\r'
send '      DEF *+1\r'
send '      DEC 6\r'
send '*\r'
send 'RCODE DEC 2\r'
send 'CONWD OCT 1\r'
send 'BUFFR ASC 7,ASMB HOLA TST\r'
send 'BUFLN DEC -13\r'
send '      END START\r'
send '\r'
send "::\r"
go until "@" 

call typecmd ":LIST,S,1,SOURC"
call typecmd ":JFILE,SOURC"

send ":PROG,ASMB,2,6,4,56,99\r"
go until "@" 
send ":PROG,LOADR\r"
go until "@" 
send ":RUN,HELLO\r"
go until "@" 

call typecmd ":PURGE,SOURC"
call typecmd ":PURGE,HELLO"
call typecmd ":EJOB"

; Load RTE/DOS Fortran IV

call typecmd ":JOB"
send ":PROG,LOADR,5\r"
go until "ENTER FILE NAME(S) OR /E" 
send "/E\r"
; RTE/DOS FORTRAN IV COMPILER 1 OF 3          BINARY   24170-60001 REV C
; RTE/DOS FORTRAN IV COMPILER 2 OF 3          BINARY   24170-60002 REV C
; RTE/DOS FORTRAN IV COMPILER 3 OF 3          BINARY   24170-60003 REV C
; RTE/DOS FORTRAN IV LIBRARY                  BINARY   24152-60001 REV C
; RTE/DOS FORTRAN FORMATTER                   BINARY   24153-60001 REV C -> not needed if FMP or FTN are used
; RTE/DOS LIB (RLIB) 1 Of 2                   BINARY   24993-16001 REV 1610
; RTE/DOS LIB (RLIB) 2 Of 2                   BINARY   24998-16001 REV 1610
go until "@" 
call user_module dos/24170-01_FTN4.rel
send ":UP,2\r"
go until "@" 
call user_module dos/24170-02_FTN4.rel
send ":UP,2\r"
go until "@" 
call user_module dos/24170-03_FTN4.rel
send ":UP,2\r"
go until "@" 
; Fortran Formatter not needed. Already loaded if FMP or FTN are used
; expect "@" call user_module dos/24153-01_FF4.rel
; expect "@" send ":UP,2\r"
; externals resolved, fortran generated, now save it on disc
send ":GO,1\r"
go until "@" 
; set loaded files as permanent (they were temporary)
send ":STORE,P,FTN4,FTN40,FTN41,FTN42,FTN43\r"
go until "@" 
send ":STORE,P,FTN44,FTN45,FTN46,FTN47,FTN48\r"
go until "@" 
send ":STORE,P,FTN49,FTN4A,FTN4B,FTN4C,FTN4D\r"
go until "@" 
send ":STORE,P,FTN4E,FTN4F,FTN4G,FTN4H\r"
go until "@" 
; list loaded files (they are user files)
call typecmd ":LIST,U,1"

; fortran IV test run

send ":STORE,S,SOURC,1\r"
go until "\n"
go until "\n"
send 'FTN4,B,L \r'
send 'C \r'
send '      PROGRAM HELLO \r'
send '      WRITE(1,99) \r'
send 'C \r'
send '   99 FORMAT("TST FTN4 SAY HOLA")\r'
send '      STOP\r'
send '      END\r'
send '      END$\r'
send '\r'
send "::\r"
go until "@" 

call typecmd ":LIST,S,1,SOURC"
call typecmd ":JFILE,SOURC"

send ":PROG,FTN4,2,6,4,56,99\r"
go until "@" 
send ":PROG,LOADR\r"
go until "@" 
send ":RUN,HELLO\r"
go until "@" 

call typecmd ":PURGE,SOURC"
call typecmd ":PURGE,HELLO"
call typecmd ":EJOB"

; Load RTE/DOS Algol

call typecmd ":JOB"
send ":PROG,LOADR,5\r"
go until "ENTER FILE NAME(S) OR /E" 
send "/E\r"
go until "@" 
; RTE/DOS ALGOL MAIN CONTROL                  BINARY   24129-60001 REV C
; RTE/DOS ALGOL SEGMENT 1                     BINARY   24129-60002 REV C
call user_module dos/24129-01_ALGOL.rel
send ":UP,2\r"
go until "@" 
call user_module dos/24129-02_ALGOL.rel
send ":UP,2\r"
go until "@" 
send ":GO,1\r"
go until "@" 
; externals resolved, basic generated, now save it on disc
send ":STORE,P,ALGOL,ALGL1\r"
go until "@" 
; list loaded files (they are user files)
call typecmd ":LIST,U,1"

; algol test run

send ":STORE,S,SOURC,1\r"
go until "\n"
go until "\n"
send 'HPAL,L,B,"HELLO"\r'
send '\r'
send 'BEGIN\r'
send '   WRITE(1,#("TST ALGOL HOLA"))\x3B\r'
send 'END$\r'
send '::\r'
go until "@" 

call typecmd ":LIST,S,1,SOURC"
call typecmd ":JFILE,SOURC"

send ":PROG,ALGOL,2,6,4,56,99\r"
go until "@" 
send ":PROG,LOADR\r"
go until "@" 
send ":RUN,HELLO\r"
go until "@" 

call typecmd ":PURGE,SOURC"
call typecmd ":PURGE,HELLO"
call typecmd ":EJOB"

; Load SUPER BASIC 

call typecmd ":JOB"
; load DOS-M SUPER BASIC BINARY   22417-60001 REV B (it's a program file not to be included in system genration)
; load from LU5 that is papertape reader
send ":PROG,LOADR,5\r"
go until "ENTER FILE NAME(S) OR /E" 
send "/E\r"
go until "@" 
call user_module 22417-01_BASIC.rel
; Input ends with EQT#2 error (papertape). Must set up ready again
send ":UP,2\r"
go until "@" 
; No more papertapes input, now resolve externals
send ":GO,1\r"
go until "@" 
; externals resolved, basic generated, now save it on disc
send ":STORE,P,BASIC\r"
go until "@" 

; basic test run to check everything is ok

send ":RU,BASIC\r"
go until "!" 
send '10 PRINT "BASIC HOLA"\r'
go until "!" 
send "20 END\r"
go until "!" 
send "RUN\r"
go until "!" 
send "BYE\r"
go until "@" 

call typecmd ":EJOB"

; list files on disc: system generation files and user files

call typecmd ":JOB"
; list system files
call typecmd ":LIST,X,1"
; list user generated files
call typecmd ":LIST,U,1"
call typecmd ":EJOB"

; Successfull test. Copy as production disk

det -q all
copy -q tmp.DOS-M.disc                 DOS-M.disc
copy -q mtgen/tmp.conf_bootstrap.abs   mtgen/conf_bootstrap.abs
del  -q tmp.DOS-M.disc
del  -q mtgen/tmp.conf_bootstrap.abs   

echo
echo
echo ***
echo *** Generation finished 
echo ***

if "%1"=="QUIT" quit
echo
echo *** Press Enter to quit
set env -p "   " a
echo
 
echo
quit
goto end

:type
; simulate typing on tty. 
; %1 (parameter one) is the text to type 
send "%1"
send "\r"
go until "\n"
return

:type2
; simulate typing on tty. 
; %1 (parameter one) is the question to be replied with %2 (param two)
go until "%1"
send "%2"
send "\r"
go until "\n"
return

:typecmd
; simulate typing on tty command for DOS. 
; %1 (parameter one) is the text to type 
send "%1"
send "\r"
go until "@"
go until "\n"
return

:end



