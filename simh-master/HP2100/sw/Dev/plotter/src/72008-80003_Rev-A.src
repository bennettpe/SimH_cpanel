      HED CHARACTER GENERATION - COMPLETE RTE DVR10 FOR HP7210Š***** CHARACTER GENERATION - COMPLETE RTE DVR10 FOR HP7210 *****Š* Š* Š***** THE CODE AND DATA REQUIRED BY THE COMPLETE RTE DVR10 TO Š*     CONVERT CHARACTER CODES INTO SEQUENCES OF PROPERLY SCALED Š*     PEN MOVEMENTS APPEARS UNDER THE HEADING Š* Š*           CHARACTER GENERATION - COMPLETE RTE DVR10 FOR HP7210Š* Š***** THE CHARACTER GENERATION HEADING MAKES UP THE REMAINDER OFŠ*     THIS DRIVER AND IS IN 4 SECTIONS WHICH AREŠ* Š*        INIATIATION OF LETTERING CALLS Š*        CONTINUATION OF LETTERING CALLSŠ*        CONSTANTS AND VARIABLESŠ*        CHARACTER SET TABLES Š* Š* Š* Š***** INITIATION OF LETTERING CALLS ***** Š* Š* Š* Š***** WHEN THE INITIATOR SECTION OF THIS DRIVER DETECTS A VALID Š*     LETTERING CALL CONTROL IS TRANSFERRED TO 'CHSET' TO FINISHŠ*     THE INITIATION OF THIS LETTERING CALL.Š* Š*     ON TRANSFERRING TO 'CHSET'Š* Š*     A CONTAINS THE PARTIALLY ENCODED DRIVER CONTROL WORD (EQT06)Š*     E CONTAINS THE OLD SIZE BIT (BIT9 OF THE I/O REQUEST CNTRL WD)Š*     AND B IS MEANINGLESSŠ* Š* ŠCHSET IOR MASK4     BIT11=1 FOR DRIVER CONTROL WORD Š      STA EQT06,I   EQT06=DRIVER CONTROL WORD Š      LDA EQT07,I   A=ADDRESS OF 1ST WORD OF BUFFER Š* Š***** PROCESS OLD SIZE BIT IN E Š* Š      SEZ,RSS       IF OLD SIZE BIT=0 THENŠ      JMP *+5       PROCESS NEW LETTERING SIZE SPEC Š      LDA PTIME     ELSE SKIP SIZE SPEC Š      ADA EQT09,I   A=NEW CURRENT CHARACTER ADDRESS Š      STA EQT09,I   EQT09=NEW CURRENT CHAR ADDRESSŠ      JMP START     AND INITIALIZE USING OLD SIZE Š* Š***** PROCESS LETTERING SIZE SPEC Š* Š      STA TEMP5     (TEMP5)=ADD FOR FRACTION STORAGEŠ      LDA 0B,I      A=1ST BUFFER WD=SIZE SPEC TYPEŠ      STA TEMP2     (TEMP2)=SIZE SPEC TYPE FOR DIVDRŠ      CMA,SZA,RSS   IF SIZE SPEC TYPE=-1 THEN Š      JSB NXTBW     SKIP 1ST WORD OF BUFFER ELSEŠ      SKP Š***** AXX (1ST SIZE PARAMETER) IS X COMPONENT OF CHARACTER WIDTHŠ* Š      LDA MXMAX     A=WIDTH NORMALIZING FACTORŠ      JSB DIVDR     NORMALIZE AYX Š      STB TEMP5,I   1ST BUFFER WORD=FRACTION(AXX) Š      ALF,ALF       POSITION SHIFT(AXX) Š      ALF           SHIFT(AXX)=BIT15-BIT12Š      STA TEMP4     SAVE PARTIAL SHIFT WORD Š* Š*****AYX (2ND SIZE PARAMETER) IS Y COMPONANT OF CHARECTER WIDTH Š* Š      LDA MXMAX     A=WIDTH NORMALIZING FACTORŠ      JSB DIVDR     NORMALIZE AYX Š      ALF           SHIFT (AYX) = BIT7-BIT4 Š      IOR TEMP4     MERGE WITH PARTIAL SHIFT WORD Š      STA TEMP4     SAVE NEW PARTIAL SHIFT WORD Š      ISZ TEMP5     (TEMP5)=ADD OF 2ND BUFFER WORDŠ      ISZ TEMP5     (TEMP5)=ADD OF 3RD BUFFER WORDŠ      STB TEMP5,I   3RD BUFFER WORD=FRACTION(AYX) Š* Š***** AXY (3RD SIZE PARAMETER) IS X COMPONENT OF CHARACTER HEIGHT Š* Š      LDA MYMAX     A=HEIGHT NORMALIZING FACTOR Š      JSB DIVDR     NORMALIZE AXY Š      ALF,ALF       SHIFT(AXY)=BIT11-BIT8 Š      IOR TEMP4     MERGE WITH PARTIAL SHIFT WORD Š      STA TEMP4     SAVE NEW PARTIAL SHIFT WORD Š      CCA           A=-1Š      ADA TEMP5     A=ADDRESS OF 2ND BUFFER WORDŠ      STB 0B,I      2ND BUFFER WORD=FRACTION(AXY) Š      ISZ TEMP5     (TEMP5)=ADD OF 4TH BUFFER WORDŠ* Š***** AYY (4TH SIZE PARAMETER) IS Y COMPONENT OF CHARACTER HEIGHT Š* Š      LDA MYMAX     A=HEIGHT NORMALIZING FACTOR Š      JSB DIVDR     NORMALIZE AYY Š      STB TEMP5,I   4TH BUFFER WORD=FRACTION(AYY) Š      LDB CMSK5     B=4 Š      ADB EQT07,I   B=ADDRESS OF 5TH BUFFER WORDŠ      IOR TEMP4     MERGE SHIFT(AYY)=BIT3-BIT0 ANDŠ      STA 1B,I      SET 5TH BUFFER WORD=SHIFT WORDŠ* Š***** INITIATE LETTERING CALL PROCESSING BY TRANSFER TO CONTINUATOR Š* ŠSTART LDA IEXAD     A=INITIATOR EXIT ADDRESSŠ      STA C.10      CET CONTINUATOR RETURN ADDRESSŠ      JMP TESTC     TRANSFER TO CONTINUATOR Š      SKP Š***** SUBROUTINE DIVDR - SIZE PARAMETER PROCESSING AND NORMALIZATIONŠ* Š* Š***** THIS SUBROUTINE CONVERTS AND NORMALIZES THE CHARACTER SIZEŠ*     SPECIFICATIONS APPEARING AT THE HEAD OF ASCII AND BINARYŠ*     LETTERING CALL BUFFERS TO OBTAIN THE INTERNAL DATA WORDSŠ*     THAT WILL BE STORED IN THE 1ST 5 WORDS OF THE BUFFERŠ*     FOR USE BY THE CONTINUATOR. Š* Š*     ON ENTRYŠ* Š*     A=NORMALIZING FACTORŠ*     (TEMP2)=BUFFER TYPE (177777B FOR BINARY)Š*     AND SUBROUTINES NXTBW AND CHREF ARE PROPERLY INITIALIZEDŠ* Š*     ON RETURN Š* Š*     A=4 BIT EXPONENT IN BIT3-0Š*     B=COEFFICIENT FACTOR (BIT15 IS SIGN, BIT14-0 IS MAGNITUDE)Š* Š* ŠDIVDR NOP           ENTRY POINT AND RETURN ADDRESSŠ      STA RNDER     SAVE CURRENT NORMALIZING FACTOR Š      LDA TEMP2     A=1ST WORD OF SPECŠ      CMA,SZA       IF A#177777B THEN Š      JMP *+7       PROCESS ASCII PARAMETER ELSEŠ      JSB NXTBW     GET CURRENT BINARY PARAMETERŠ      STB 0B        SAVE IN A FOR MAGNITUDE Š      STA TEMP3     AND SAVE SIGN IN TEMP3Š      SSA           IF PARAMETER IS NEGATIVE THEN Š      CMA,INA       NEGATE TO FORM MAGNITUDE ELSE Š      JMP SHFTR     PROCESS SIGN AND MAGNITUDEŠ* Š***** ASCII SIZE PARAMETER CONVERSION Š* Š      CLA           A=0 Š      STA CMPGT     CLEAR PARAMETER MAGNITUDE Š      STA TEMP3     SET PARAMETER SIGN TO POS.Š      LDA DIGNO     A=-5=-(ASCII FIELD LENGTH)Š      STA BCNTR     INITIALIZE CHARACTER COUNTERŠ* ŠDIGET JSB CHREF     GET NEXT CHAR IN ASCII PARAMETERŠ      CPA SPCCD     IF CHAR=SPACE THENŠ      JMP *+7       ADVANCE TO NEXT CHARACTER ELSEŠ      CPA MSCCD     IF CHAR=MINUS THEN CHANGE Š      JMP *+3       SIGN OF PARAMETER TO NEGATIVE Š      AND IMSK4     EXTRACT 4 BIT BCD DIGIT AND Š      JMP *+5       PROCESS DIGIT TO GET MAGNITUDEŠ      CCA           A=177777B=-1 FOR NEGATIVE Š      STA TEMP3     SET PARAMETER SIGN TO NEGATIVEŠ      ISZ BCNTR     COUNT SPECIAL CHARACTER AND Š      JMP DIGET     PROCESS NEXT CHARACTERŠ*                                   ON NULL PARAMETER(SAY 5 SPACES) Š*                                   ISZ NXTBW WILL FALL THROUGH Š*                                   DISASTEROUSLY - THIS SHOULD BEŠ*                                   FIXED ON REV B!!! Š      ADA CMPGT     ADD PARTIAL MAGNITUDE TO DIGITŠ      ISZ BCNTR     COUNT DIGIT.  IF CNTR<0 THENŠ      JMP *+2       MULTIPLY PARTIAL MAGNITUDE BY 10Š      JMP *+7       ELSE PROCESS COMPLETED MAGNITUDEŠ      STA CMPGT     SAVE CURRENT MAGNITUDEŠ      ALS,ALS       A=4*(CURRENT MAGNITUDE) Š      ADA CMPGT     A=5*(CURRENT MAGNITUDE) Š      ALS           A=10*(CURRENT MAGNITUDE)Š      STA CMPGT     SAVE NEW PARTIAL MAGNITUDE ANDŠ      JMP DIGET     PROCESS NEXT DIGITŠ* Š***** LEFT JUSTIFY DIVIDEND AND GET EXPONENT FOR COEFFICIENTŠ* ŠSHFTR SZA,RSS       IF A=0 THEN SPECIAL CASE SO Š      JMP *+7       SKIP JUSTIFICATION (COEF=0) Š      CLB,RSS       ELSE SET SHIFT CNT=0 AND STARTŠ      INB           INCREMENT SHIFT AND TRY AGAIN Š      RAL           SHIFT MAGNITUDE LEFT 1 BITŠ      SSA,RSS       IF BIT15=0 THEN Š      JMP *-3       COUNT SHIFT AND TRY AGAIN ELSEŠ      SZB,RSS       IF SHIFT CNTR=0 (B=0) THENŠ      CCB,RSS       SET SHIFT CNTR =-1 ELSE Š      CMB,INB       NEGATE SHIFT CNTR Š      STB TEMP1     AND SAVE NEGATED SHIFT CNTR Š      RAR           A=SIGNED MAGNITUDE (BIT15=0)Š      STA TEMP6     SAVE SIGNED MAGNITUDE Š* Š***** DIVIDE BINARY CONTROL VALUE BY NORMALIZING FACTOR TO GET COEF.Š* Š      LDA BITNO     A=BIT COUNT FOR DIVISIONŠ      STA BCNTR     INITIALIZE BIT COUNTERŠ      CLB           INITIALIZE QUOTIENT Š      LDA TEMP6     A=PARTIAL REMAINDER Š      ADA RNDER     ADD NEGATED SHIFTED DIVISOR Š      SSA           IF A<0 THEN THIS BIT=0 ANDŠ      JMP *+3       PARTIAL REMAINDER IS UNCHANGEDŠ      STA TEMP6     ELSE SAVE NEW PARTIAL REMAINDER Š      INB           AND SET THIS BIT OF QUOTIENT=1Š      LDA RNDER     A=NEGATED SHIFTED DIVISOR Š      ARS           A=NEW NEGATED SHIFTED DIVISOR Š      STA RNDER     SAVE NEW DIVISOR FOR NEXT BIT Š      RBL           SHIFT QUOTIENT FOR NEXT BIT Š      ISZ BCNTR     COUNT BIT AND IF BIT CNT<0 THEN Š      JMP *-11      TRY AGAIN ELSE PROCESS COEF.Š* Š***** SET COEF. SIGN AND STORE VALUE AND EXPONENT IN PROPER LOCATIONS Š* Š      LDA TEMP3     BIT15 OF A=SIGN OF COEFFICIENTŠ      ELA           E=SIGN OF COEFFICIENT Š      ERB           BIT15=SIGN, BIT14-BIT0=MAGNITUDEŠ      LDA TEMP1     A=16 BIT SHIFT COUNTŠ      AND IMSK4     A=4 BIT EXPONENT IN BIT3-BIT0 Š      JMP DIVDR,I   RETURN COMPLETE Š      SKP Š***** CONTINUATION OF LETTERING CALLS ***** Š* Š* Š***** WHEN THE CONTINUATOR OF THIS DRIVER IS ENTERED TO PROCESS Š*     A LETTERING CALL AND ADDITIONAL POSITION AND PEN CONTROLŠ*     INFORMATION IS NEEDED TO CONTINUE THE CURRENT CHARACTER ORŠ*     START THE NEXT CHARACTER IF ANY THEN CONTROL IS TRANSFERRED Š*     TO THIS SECTION OF THE CHARACTER GENERATION CODE WHICHŠ*     THEN TRANSFERS CONTROL TO ONE OF THE FOLLOWING- Š* Š*     CHARX TO GET CHARACTER MOVE COMPONENTSŠ*     RETNX TO GET CARRIAGE RETURN COMPONENTS Š*     CHCNT TO START THE NEXT MOVE OR THE NEXT CHARACTER IF ANY Š*     RETNC TO FINISH A CARRIAGE RETURN Š* Š* Š**** TEST FOR LAST CHARECTER AND PROCESS NEXT CHARECTER IF ANYŠ* Š* ŠCHCNT LDA EQT06,I   A=CURRENT DRIVER CONTROL WORD Š      ALF,CLE,ERA   CLEAR BIT12 (F BIT/SET FOR LF)Š      ALF,CLE,RAR   MOVE CNT TO BIT15-BIT11 AND E=0 Š      ADA MASK4     ADD 1 TO MOVE COUNT(TO BIT11) Š      ALF,ALF       SHIFT NEW MOVE COUNT BACK TOŠ      RAL,RAL       BIT9-BIT5 FOR NEW DVR CNTRL WDŠ      STA EQT06,I   EQT06=DVR CNTRL WD FOR NEXT MOVEŠ      SEZ,RSS       IF E=0(NEW MOVE CNT<0) THEN Š      JMP MVGET     PROCESS NEXT MOVE FOR THIS CHAR Š*                                   ELSE REQUEST NEXT CHAR IF ANY Š* Š* ŠTESTC LDB EQT09,I   B=CURRENT CHARACTER ADDRESS Š      ADB EQT08,I   B=B-FINAL CHARACTER ADDRESS Š* Š      CLE,SSB,INB,RSS    IF B>=0 THEN Š      JMP *+6            PERFORM LAST CHAR PROCEDUREŠ*                                   ELSE B=0 IF LAST CHAR IS NEXT Š      JSB CHREF     GET NEXT CHARACTERŠ      CPA BACCD     IF NEXT CHAR IS BACK ARROW THEN Š      SZB           IF BACK ARROW NOT LAST CHAR THENŠ      JMP ANYCH     PROCESS AS NEXT CHARACTER Š      JMP EXIT7     ELSE BACK ARROW IS LAST CHAR SO Š*                                   RETURN COMPLETE WITH OUT DRAWINGŠ*                                   BACK ARROW OR APPENDING CR-LF Š* Š***** LAST CHARACTER PROCEDURE FOR GENERATION OF CR AND LFŠ* Š      CLO           INITIALIZE O TO DETECT EE=01Š      LDB EQT06,I   B=CURRENT DRIVER CONTROL WORD Š      ADB MASK3     EE=EE+01(EE IS END OF LINE CNTR)Š      STB EQT06,I   SAVE NEW DRIVER CONTROL WORDŠ      SSB,RSS       IF NEW EE=01 THEN Š      JMP CRGET     APPEND CR AT EOL (END OF LINE)Š      SOS           ELSE IF O=0 (NEW EE=11) THENŠ      JMP EXIT7     RETURN COMPLETE AFTER LF AT EOL Š      JMP LFGET     ELSE APPEND LF AT EOL(NEW EE=10)Š      SKP Š***** PROCESS NEXT CHARACTER IN BUFFERŠ* ŠANYCH CPA CRCCD     IF IMBEDDED CARRIAGE RETURN THENŠ      JMP CRGET     GENERATE CARRIAGE RETURN  ELSEŠ      CPA LFCCD     IF IMBEDDED LINE FEED THENŠ      JMP LFGET     GENERATE LINE FEED ELSE Š      AND IMSK0     EXTRACT 6 BIT CHAR CODE Š      ADA CHTAD     A=ABSOLUTE CHARACTER TABLE ADDŠ      JMP CHGET     PROCESS CHARACTER TABLE ENTRY Š* Š***** PROCESS CARRIAGE RETURN Š* ŠCRGET LDA CMSK3     BIT4=1 TO INDICATE CR Š      IOR EQT06,I   SET DRIVER CONTROL WORD FOR CRŠ      STA EQT06,I   SET NEW EQT06 WITH R BIT=1Š      JMP SENDP     PROCESS PEN CONTROL FOR CRŠ* ŠRETNX LDB EQT12,I   B=S XXX XXX XXX XXX XX.X=X LNGTHŠ      BRS           B=S SXX XXX XXX XXX XXX=X CMPNT Š      CMB,INB       NEGATE X COMPONENT OF LINE LNGTHŠ      JSB SENDX     TRANSMIT X COMPONENT FOR CR Š* Š      LDB EQT13,I   B=S YYY YYY YYY YYY YY.Y=Y LNGTHŠ      BRS           B=S SYY YYY YYY YYY YYY=Y CMPNT Š      CMB,INB       NEGATE Y COMPONENT OF LINE LNGTHŠ      JMP SENDY     TRANSMIT Y COMPONENT FOR CR Š* ŠRETNC LDA CMSK3     BIT4=1 TO RESET EQT06 Š      XOR EQT06,I   A=EQT06 WITH BIT4=0 Š      STA EQT06,I   RESET DRIVER CNTRL WORD IN EQT06Š      CLA           A=0 TO ZERO LINE LENGTH Š      STA EQT12,I   CLEAR X LENGTH FOR NEXT LINEŠ      STA EQT13,I   CLEAR Y LENGTH FOR NEXT LINEŠ      JMP TESTC     PROCESS NEXT CHARACTER IF ANY Š* Š***** PROCESS LINE FEED Š* ŠLFGET LDA CMSK4     DISABLE LINE LENGTH ACCUMULATIONŠ      IOR EQT06,I   BY SETTING BIT12 OF EQT06=1 Š      STA EQT06,I   EQT06=NEW DRIVER CONTROL WORD Š      LDA LFCAD     A=ABS CH TAB ADDRESS FOR LF Š*                                   AND PROCESS CHTAB ENTRY FOR LFŠ      SKP Š***** PROCESS CHARACTER TABLE ENTRY Š* Š*     ON ENTRY A=ADDRESS OF CHARACTER TABLE ENTRY Š* Š* ŠCHGET LDA 0B,I      A=NEW CHARACTER TABLE ENTRY Š      STA 1B        B=NEW CHARACTER TABLE ENTRY Š      AND CMSK1     EXTRACT BLOCK ADDRESS IN BIT6-0 Š      STA TEMP3     AND SAVE FOR WORD ADDRESS Š      BLF,RBL       SHIFT MOVE CNT TO BIT4-0Š      LDA 1B        A=RIGHT JUSTIFIED MOVE COUNTŠ      AND CMSK2     EXTRACT MOVE COUNT IN BIT4-0Š      CMA,INA       AND NEGATEŠ      AND CMSK2     EXTRACT 5 BIT NEGATED MOVE CNTŠ      ALF,RAL       SHIFT NGTD MOVE CNT TO BIT9-5 Š      IOR EQT06,I   INSERT IN DRIVER CNTRL WORD Š      STA EQT06,I   AND SAVE NEW DRIVER CONTROL WORDŠ* Š      BLF           SHIFT BIT ADDRESS TO BIT3-0 Š      LDA 1B        A=RIGHT JUSTIFIED BIT ADDRESS Š      AND IMSK4     EXTRACT BIT ADDRESS IN BIT3-0 Š      CMA           A=BIT ADD+1 (NEGATED FOR SHFT)Š      CLB,INB       B=BIT MASK FOR BIT ADDRESS=-1 Š      RBR           SHIFT BIT MASK FOR NEXT ADDRESS Š      INA,SZA       IF A#0 THEN Š      JMP *-2       SHIFT AGAIN ELSEŠ      STB EQT11,I   EQT11=MASK FOR BIT ADDRESSŠ* Š      LDB MVTAD     B=WORD ADD FOR BLOCK 0 WORD 0 Š      LDA BLKLN     A=BLOCK LENGTH FOR CHAR SET Š      CMA,INA       NEGATE TO ACCUMULATE PRPODUCT Š      ADB TEMP3     ACCUMULATE 1 BLOCK ADDŠ      INA,SZA       IF A#0 PRODUCT NOT DONE SOŠ      JMP *-2       ACCUMULATE MORE PRODUCT ELSEŠ      STB EQT10,I   EQT10=CHAR MOVE WORD ADDRESSŠ      SKP Š***** PROCESS NEXT MOVE OF CURRENT CHARACTERŠ* ŠMVGET CCA           A=-1 FOR PEN CNTRL ADDRESSŠ      ADA EQT10,I   A=PREVIOUS PEN CNTRL ADDRESSŠ      ADA BLKLN     A=CURRENT PEN CNTRL ADDRESS Š      LDA 0B,I      A=CURRENT PEN CONTROL WORDŠ      AND EQT11,I   EXTRACT CURRENT PEN CNTRL BIT Š      JMP SENDP     PROCESS PEN CNTRL BIT FOR MOVEŠ* ŠCHARX LDA CMSK5     A=+4 FOR SHIFT WORD ADDRESS Š      ADA EQT07,I   A=SHIFT WORD ADDRESSŠ      STA TEMP5     (TEMP5)=CURRENT SHIFT WORD ADDŠ      ADA DIGNO     A=FRACTION STARTING ADDRESS Š      STA REXIT     (REXIT)=FRACTION STARTING ADD Š* Š      JSB CMPGT     EXTRACT AND SCALE X COMPONENT Š      LDA EQT12,I   A=X COMPONENT OF LINE LENGTHŠ      JSB RNDER     UPDATE X LENGTH FOR THIS MOVE Š      STA EQT12,I   EQT12=NEW LINE LENGTH FOR X Š      JSB SENDX     TRANSMIT X COMPONENT OF MOVEŠ* Š      JSB CMPGT     EXTRACT AND SCALE Y COMPONENT Š      LDA EQT13,I   A=Y COMPONENT OF LINE LENGTHŠ      JSB RNDER     UPDATE Y LENGTH FOR THIS MOVE Š      STA EQT13,I   EQT13=NEW LINE LENGTH FOR Y Š      JMP SENDY     TRANSMIT Y COMPONENT OF MOVEŠ*                                   AND RETURN - CONTINUATION Š* Š***** SET UP EQT10 AND EQT11 FOR NEXT MOVE IF ANY Š* ŠNMOVE LDA EQT11,I   A=CHARACTER MOVE BIT ADDRESSŠ      LDB EQT10,I   B=CHARACTER MOVE WORD ADDRESS Š      SLA,RAR       IF BIT0=0 THEN SAME BLOCK Š      ADB BLKLN     ELSE ADVANCE TO NEXT BLOCKŠ      STA EQT11,I   EQT11=NEW BIT ADDRESS Š      STB EQT10,I   EQT10=NEW WORD ADDRESSŠ      JMP CHCNT     START NEXT MOVE OR CHAR IF ANYŠ      SKP Š***** SUBROUTINE SCALE - SCALES CHARACTER MOVE COMPONENTS Š* Š* Š***** THIS SUBROUTINE PROCESSES THE UNSCALED CHARACTER MOVE Š*     COMPONENTS CONTAINED IN THE CHARACTER MOVE TABLE BY USING Š*     THE SIZE INFORMATION STORED BY THE INITIATOR IN THE 1ST 5 Š*     WORDS OF THE BUFFER.Š* Š***** ON ENTRY (FROM SUBROUTINE CHMPT)Š* Š*     A=NEGATED BIT COUNT FOR COMPONENT TO BE SCALEDŠ*     (CHMPT)=1ST MOVE TABLE WORD ADDRESS FOR CURRENT COMPONENT Š*     (EQT11)=MASK GIVING BIT ADDRESS OF CURRENT COMPONENTŠ*     (REXIT)=ADDRESS PRECEEDING CURRENT COEF. FACTOR Š*     (TEMP5)=ADDRESS OF SIZE SPEC SHIFT WORD (PROPERLY ROTATED)Š* Š***** ON RETURN Š* Š*     A IS MEANINGLESSŠ*     B=SCALED COMPONENT IN FORM S CCC CCC CCC CCC CC.C Š*     (REXIT) IS ADVANCED TO NEXT COEFFICIENT Š*     (CHMPT) IS ADVANCED TO NEXT COMPONENT IF ANYŠ*     AND THE EXPONENT WORD IS ROTATED FOR NEXT COEFFICIENT Š* Š* ŠSCALE NOP           ENTRY POINT AND RETURN ADDRESSŠ      STA BCNTR     SAVE NEGATED BIT COUNTŠ      CLA,CLE       A=0, E=0 (CLEARS SIGN OF COEF)Š      STA RNDER     INITIALIZE PRODUCTŠ      ISZ REXIT     (REXIT)=ADDRESS OF CURRENT COEF Š      LDB REXIT,I   B=SIGN AND MAGNITUDE OF COEFŠ      ELB,RBR       E=SIGN, B=MAGNITUDE (BIT15=0) Š* Š***** EXTRACT AND COUNT COMPONENT BITSŠ* ŠNEXTB LDA CHMPT,I   A=CURRENT WORD FOR CURRENT BLOCKŠ      AND EQT11,I   EXTRACT CURRENT BIT OF COMPONENTŠ      ISZ CHMPT     SET WORD ADDRESS FOR NEXT BIT Š      ISZ BCNTR     COUNT BIT. IF CNTR<0 THEN ADD Š      JMP ADDER     CURRENT TERM TO PARTIAL PRODUCT Š* Š***** DETERMINE SIGN OF FINAL PRODUCT Š* Š      LDB RNDER     B=FINAL PRODUCT,A=COMPONENT SIGNŠ      SZA           IF COMPONENT SIGN=- THENŠ      CLA,CME       A=0, E=COMPLEMENT OF COEF SIGNŠ      SEZ,RSS       IF E=0 (BOTH SIGNS ARE SAME)Š      CMA           THEN A=177777B(-1) ELSE(A=0)Š      STA RNDER     SAVE SIGN OF PRODUCT(-1=+,0=-)Š      SKP Š***** SHIFT PRODUCT FOR EXPONENT AND ROUNDŠ* Š      LDA TEMP5,I   A=EXPONENT WORD FOR COEFŠ      ALF           SHIFT EXPONENT TO CURRENT COEFŠ      STA TEMP5,I   SAVE SHIFTED EXPONENT WORDŠ      IOR IMSK6     A=NEGATIVE 16 BIT COUNT Š      CLE,RSS       SET E=0 AND START SHIFTINGŠ      CLE,ERB       0 TO BIT15,  BIT0 TO EŠ      ISZ 0B        COUNT SHIFT (SAVE E) IF CNT<0 Š      JMP *-2       THEN TRY AGAIN ELSE Š      SEZ           IF E=1 (.1 BIT =1) THEN Š      INB           ROUND UP TO BIT0 OF PRODUCT Š      ISZ RNDER     IF RNDER#-1 (=0) THEN Š      CMB,INB       NEGATE PRODUCT ELSE Š      JMP SCALE,I   RETURN COMPLETE Š* Š***** ACCUMULATE PARTIAL PRODUCTS Š* ŠADDER SZA           IF CURRENT BIT#0 THEN Š      LDA 1B        A=SHIFTED MAGNITUDE ELSE A=0Š      ADA RNDER     ACCUMULATE PARTIAL PRODUCTŠ      STA RNDER     SAVE NEW PARTIAL PRODUCTŠ      BRS           SHIFT MAGNITUDE FOR NEXT BITŠ      JMP NEXTB     AND PROCESS NEXT BITŠ      SKP Š***** SUBROUTINE CMPGT - EXTRACTS AND SCALES MOVE COMPONENTSŠ* Š* Š***** THIS SUBROUTINE OBTAINS AND COMBINES THE 2 X OR THE 2 Y Š*     COMPONENTS OBTAINED WHEN THE X AND THE Y COMPONENTS OF THEŠ*     REFFERENCE MOVE IN THE MOVE TABLE ARE SCALED TO PRODUCE A Š*     SINGLE X OR Y COMPONENT FOR TRANSMISSION TO THE PLOTTER.Š* Š*     ON ENTRYŠ* Š*     (EQT10)=ADDRESS OF WORD CONTAINING 1ST BIT OF CURRENT MOVEŠ*     (TEMP5)=ADDRESS OF SHIFT WORD Š*     (REXIT)=ADDRESS PRECEEDING 1ST SIZE SPEC FRACTION Š* Š*     ON RETURN Š* Š*     B=COMPONENT FOR TRANSMISSIONŠ*     E=LINE FEED BIT (BIT12 OF EQT06) FOR SUBROUTINE RNDER Š* Š* ŠCMPGT NOP           ENTRY POINT AND RETURN ADDRESSŠ      LDA EQT10,I   A=1ST WORD ADDRESS FOR MOVE Š      STA CHMPT     (CHMPT)=STARTING ADD FOR SCALEŠ      LDA XCNST     A=X MOVE BIT COUNTŠ      JSB SCALE     GET A#X*(X MOVE)Š      STB CWORD     SAVE A#X*(X MOVE) Š* Š      LDA YCNST     A=Y MOVE BIT COUNTŠ      JSB SCALE     GET A#Y*(Y MOVE)Š      ADB CWORD     B=A#X*(X MOVE)+A#Y*(Y MOVE)=CMP Š      LDA EQT06,I   A=CURRENT DRIVER CONTROL WORD Š      ALF,ERA       E=LINE FEED BIT(BIT12) FOR RNDERŠ      JMP CMPGT,I   RETURN TO CALLŠ      SKP Š***** SUBROUTINE RNDER - UPDADES LINE LENGTH AND PROPAGATES CARYŠ* Š*     ON ENTRYŠ* Š*     A=LINE LENGTH COMPONENT IN FORM S LLL LLL LLL LLL LL.O(OLD.C) Š*     B=CURRENT MOVE COMPONENT IN FORM S CCC CCC CCC CCC CC.C Š*     E=LINE FEED BIT TO DISABLE RETURN DISTANCE ACCUMULATION Š* Š*     ON RETURN Š* Š*     A=UPDATED RETURN DISTANCE COMPONENT AND CARY BITŠ*     B=COMPONENT FOR TRANSMISSION IN FORM S SCC CCC CCC CCC CCCŠ* Š* ŠRNDER NOP           ENTRY POINT AND RETURN ADDRESSŠ      SEZ           IF E(BIT12 OF EQT13)=1 THEN Š      JMP *+5       CARY DISABLED ELSEŠ      SLA           IF OLD .C=1 THENŠ      INB           ADD TO NEW .C TO CARY ELSEŠ      ERA,CLE,ELA   REMOVE OLD .C FROM LENGTH CMPNT Š      ADA 1B        A=UPDATED LINE LENGTH AND NEW .CŠ      BRS           B=S SCC CCC CCC CCC CCC FOR MOVEŠ      JMP RNDER,I   RETURN TO CALLŠ* Š* Š***** SUBROUTINE CHREF - RETURNS NEXT CHARACTER AND UPDATES EQT09 Š* Š*     ON ENTRYŠ* Š*     (EQT09)=CURRENT CHARACTER ADDRESS (IN REQUEST BUFFER) Š* Š*     ON RETURN Š* Š*     A=CURRENT CHARACTER (7 BITS IN BIT6-0)Š*     B IS UNCHANGEDŠ*     (EQT09)=NEXT CHARACTER ADDRESSŠ* Š* ŠCHREF NOP           ENTRY POINT AND RETURN ADDRESSŠ      LDA EQT09,I   A=CURRENT CHARACTER ADDRESS Š      CLE,ERA       A=WORD ADD AND E=CHAR DESIGNATORŠ      LDA 0B,I      A=CURRENT BUFFER WORD Š      SEZ,RSS       IF E=0 (CHAR IN BIT15-BIT8) THENŠ      ALF,ALF       MOVE CHARACTER TO BIT7-BIT0 ELSEŠ      AND CMSK1     EXTRACT 7 BIT CHAR IN BIT6-BIT0 Š      ISZ EQT09,I   EQT09=NEXT CHARACTER ADDRESSŠ      JMP CHREF,I   RETURN TO CALLŠ      SKP Š      SKP Š***** CONSTANTS AND VARIABLES ***** Š* Š* Š***** THE FOLLOWING CONSTANTS AND VARIABLES ARE REQUIRED FORŠ*     CHARACTER GENERATION. Š* ŠBACCD OCT 000137    BACK ARROW CHAR CODEŠSPCCD OCT 000040    SPACE (BLANK) CHAR CODE ŠMSCCD OCT 000055    MINUS SIGN (-) CHAR CODEŠCRCCD OCT 000015    CARRIAGE RETURN CHARACTER CODEŠLFCCD OCT 000012    LINE FEED CHARACTER CODEŠCMSK1 OCT 000177    EXTRACTS 7 BIT CHAR CODEŠCMSK2 OCT 000037    EXTRACTS BIT4-0 ŠCMSK3 OCT 000020    SETS AND CLEARS BIT4 IN EQT06 ŠCMSK4 OCT 010000    SETS BIT12 OF EQT06 FOR LF GEN. ŠCMSK5 OCT 000004    +4 FOR CHARACTER GENERATION ŠMASK3 OCT 040000    INCREMENTS END OF LINE CNTR(EE) ŠCMSK7 OCT 020014    SETS BITS 13,3,2 IN DVR CNTRL WDŠCMSK8 OCT 000010    CLEARS BIT3 IN DVR CNTRL WORD ŠCMSK9 OCT 020000    CLEARS BIT13 (Z) IN DVR CNTRL WDŠBITNO DEC -15       NEG BIT CNT FOR DIVIDE IN SCALE ŠDIGNO DEC -5        NEGATIVE ASCII CHAR COUNT ŠCHTAD DEF CHTAB     CHAR TABLE ADD FOR CH CODE 000ŠMVTAD DEF MVTAB     MOVE TABLE ADD FOR BLOCK 0 WD 0 ŠLFCAD DEF MVTAB-1   CH TAB ADD FOR LINE FEED (012B) ŠCHMPT OCT 000000    TEMPORARY FOR CHAR GENERATION ŠBCNTR OCT 000000    TEMPORARY FOR CHAR GENERATION ŠTEMP1 NOP           TEMPORARY FOR CHAR GENERATION ŠTEMP2 OCT 000000    TEMPORARY FOR CHAR GENERATION ŠTEMP3 OCT 000000    TEMPORARY FOR CHAR GENERATION ŠTEMP4 OCT 000000    TEMPORARY FOR CHAR GENERATION ŠTEMP5 OCT 000000    TEMPORARY FOR CHAR GENERATION ŠTEMP6 OCT 000000    TEMPORARY FOR CHAR GENERATION ŠREXIT NOP           TEMPORARY FOR CHAR GENERATION Š      SKP Š***** CHARACTER SET TABLES *****Š* Š* Š***** THE CHARACTER SET TABLES WHICH START ON THE NEXT PAGE AND Š*     CONSTITUTE THE REMAINDER OF THIS DRIVER ARE GIVEN ONŠ*     SOURCE TAPE 4 (P/N 72008-80004). THE SOURCE TAPES FOR Š*     THIS DRIVER ARE ARRANGED TO EXPEDITE THE IMPLEMENTATION Š*     OF ALTERNATE CHARACTER SETS. TO IMPLEMENT AN ALTERNATEŠ*     CHARACTER SET THIS DRIVER IS ASSEMBLED USING THEŠ*     VERSION OF TAPE 4 WHICH CORRESPONDS TO THE DESIREDŠ*     CHARACTER SET.Š* Š*     THESE CHARACTER SET TABLES WERE PUNCHED BY USING A CHARACTERŠ*     SET GENERATING PROGRAM. BECAUSE OF THE BIT PACKING USED IN THESEŠ*     CHARACTER SET TABLES SUCH A PROGRAM SHOULD ALWAYS BE USED TOŠ*     SET UP ALTERNATE CHARACTER SETS.Š* Š*     FOR INFORMATION ON ALTERNATE CHARACTER SETS CONTACT YOURŠ*     NEAREST HEWLETT-PACKARD SALES AND SERVICE OFFICE. Š      SKP Š                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    