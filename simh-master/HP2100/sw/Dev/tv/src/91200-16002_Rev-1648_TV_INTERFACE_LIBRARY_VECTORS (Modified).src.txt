ASMB,L,C
      HED VIDEO SUBROUTINES VECTR, AREA, VEND     A-91200-16002-2 
* 
*     NAME:   VECTOR GENERATOR, ETC. OF VIDEO DISPLAY LIBRARY.
*     SOURCE: 91200-18002 (FILE 5)
*     BINARY: 91200-16002 (MODULE 5)
*     PGMR:   R.M.C. REV.C(1648) MADE BY DENTON ANDERSON
*               REV.B(1603) IS FOR COLOR OPERATION. 
*               REV.C(1648) IS FOR POWER FAIL - AUTO RESTART. 
* 
* 
      NAM VECTR,7 91200-16002 REV 1648 -- 761124
      SPC 1 
      ENT VECTR,VEND,VAREA,PSET,PLINE
      EXT .ENTR,POINT 
      SPC 1 
XV    NOP           X ORIGIN OF VECTOR. 
YV    NOP           Y ORIGIN OF VECTOR. 
ROT   NOP           ROTATION 0:7. 
LEN   NOP           VECTOR LENGTH (POINTS-1). 
TYPE  DEF B2        VECTOR CONTROL WORD:
*                                    0 NON-WRITING. 
*                                    1 SUPPRESS FIRST POINT.
*                                    2 WRITE ALL POINTS.
*                                    3 SUPPRESS FIRST & LAST POINTS.
VMODE DEF ZERO      DEFAULTS TO WHITE (0).
DU\LO DEF ZERO      0/NON 0 =LOAD/LOAD & DUMP PBUFR.
PF    NOP           POWER FAIL INDICATOR. 
      SPC 1 
VECTR NOP           ENTRY POINT.
      JSB .ENTR     TRANSFER THE PARAMETER ADDRESSES. 
       DEF XV 
      LDA VMODE,I   TRANSFER MODE ADDRESS AND 
      STA NMODE      POWER FAIL 
      LDA PF          INDICATOR 
      STA PFAIL        FOR POINT CALL 
      LDB LEN,I     CHECK FIRST FOR LEN=100000B,
      CLE,ELB        AND IF SO, DUMP WITHOUT
      SEZ,RSS         VECTOR GENERATION.
      JMP *+3 
      SZB,RSS 
      JMP EXIT1 
      SKP 
      LDA XV,I      IF X IS -VE, IGNORE X AND Y 
      SSA            AND APPEND VECTOR. 
      JMP ADDTO 
      ALF,ALF       "X" COORDINATE TO BITS 15-8.
      XOR YV,I      "Y" COORDINATE INTO BITS 7-0. 
      ALF,ALF 
      STA LOC       SAVE THE NEXT DISPLAY LOCATION. 
ADDTO LDB TYPE,I
      RBR           MOVE TYPE INTO BITS 15
      STB TYPE       AND 0 FOR EASY TESTING 
      LDA ROT,I 
      LDB LEN,I 
      SZB,RSS       IF LENGTH IS ZERO,
      JMP NOL        GO CHECK SINGLE POINT CASE.
      CCE,SSB,RSS 
      CMB,CLE,INB   NEGATE FOR COUNTING.
      STB LEN 
      SEZ           IF LEN WAS -VE, REVERSE VECTOR
      ADA B4         DIRECTION. 
      AND B7        MOD 8 
      ADA DBASE     ADDRESS OF DISPLACEMENT CONSTANT. 
      LDA A,I       LOAD THE DISPLACEMENT CONSTANT. 
      STA DISP      SAVE FOR MODIFICATION WITH "LOC". 
      LDA LOC       LOAD THE CURRENT "GUN" LOCATION.
      LDB TYPE
      SSB,RSS       NON-WRITE OR WRITE 1ST POINT? 
      JMP TRAW      YES 
      ADA DISP      SKIP THE FIRST POINT. 
      STA LOC       STORE "GUN" LOCATION IN "LOC".
NPT   ISZ LEN       IS THIS THE LAST POINT? 
      JMP EMIT      NO, EMIT THE POINT AND CONTINUE.
      LDB TYPE
      SLB           SUPPRESS LAST POINT?
      JSB .PPNT     NO, SO DISPLAY THE POINT. 
      JMP EXIT
      SPC 2 
DISP  NOP 
LOC   NOP           LOCATION OF NEXT DISPLAY POINT. 
B4    OCT 4 
B7    OCT 7 
      SKP 
EMIT  JSB .PPNT     DISPLAY POINT AT "LOC". 
      LDA LOC       LOAD THE CURRENT "GUN" LOCATION.
      ADA DISP      ADD IN THE DISPLACEMENT.
      STA LOC       STORE "LOC" TO SAVE IT FOR LATER. 
      JMP NPT       GO SEE IF THIS IS THE LAST POINT. 
      SPC 1 
TRAW  SLB           IS THIS A WRITE?
      JMP EMIT      YES, GO DISPLAY THE FIRST POINT.
LOOP2 ADA DISP      NON-WRITE, "LOC" IS IN "A". 
      ISZ LEN       ARE THERE MORE DISPLACEMENTS? 
      JMP LOOP2     YES, REPEAT THE ADD.
      STA LOC 
      JMP EXIT
      SPC 1 
NOL   LDA LOC       LOAD THE CURRENT "GUN" LOCATION.
      LDB TYPE      CHECK FOR TYPE 2. 
      SLB 
      JSB .PPNT     DISPLAY THE FIRST POINT.
      SPC 1 
EXIT  LDA DU\LO,I   IF OUTPUT IS NOT FORCED 
      SZA,RSS        BY THE CALLER, 
      JMP EXIT2       DON'T DUMP THE BUFFER.
EXIT1 LDA PLEN      WHEN OUTPUT IS FORCED,
      SZA            DUMP ONLY IF BUFFER
      JSB DUMP        HAS SOME POINTS.
EXIT2 LDA DZERO     RESTORE DEFAULT PARAMETERS
      STA DU\LO      FOR NEXT ENTRY BY
      STA VMODE       CALLER. 
      LDA DEFB2 
      STA TYPE
      CLA 
      STA PF
      JMP VECTR,I 
      SPC 2 
PBLEN ABS -BLEN 
.POUT DEF PBUFR     CURRENT POINTER 
.PBUF DEF PBUFR     FIXED POINTER TO START
PLEN  OCT 0         ACCUMULATOR 
PCTR  ABS -BLEN     OVERFILL PREVENTER
      SKP 
.PPNT NOP 
      STA ALOC      SAVE POINT
      LDB NMODE     IS THE NEW MODE 
      CPB MODE        THE SAME AS OLD MODE? 
      JMP .VPNT         YES - GO ON 
      LDB PLEN
      SZB           IS THE BUFFER EMPTY?
      JSB DUMP        NO - SO DUMP WITH OLD MODE
      LDB NMODE     ESTABLISH 
      STB MODE        NEW MODE
.VPNT STA .POUT,I 
      ISZ .POUT 
      ISZ PLEN
      ISZ PCTR
      JMP .PPNT,I 
      JSB DUMP      PBUFR IS FULL 
      JMP .PPNT,I 
      SPC 1 
DUMP NOP
      JSB POINT 
       DEF RSTR 
       DEF PBUFR
       DEF PLEN 
       DEF MODE 
PFAIL  NOP
RSTR  LDB .PBUF 
      STB .POUT 
      LDB PBLEN 
      STB PCTR
      CLB 
      STB PLEN
      LDA ALOC      RESTORE POINT 
      JMP DUMP,I
      SPC 2 
MODE  NOP 
NMODE NOP 
      SKP 
*     CURRENT LOCATION ROUTINE. 
      SPC 1 
IX    NOP           ADDRESS FOR THE "X" COORDINATE. 
IY    NOP           ADDRESS FOR THE "Y" COORDINATE. 
VEND  NOP           ENTRY POINT.
      JSB .ENTR     CALL WITH TWO(2) PARAMETERS.
       DEF IX 
      LDA LOC       LOAD THE LAST POINT ADDRESS.
      AND B377      EXTRACT THE X COORDINATE
       STA IX,I       & STORE IT IN THE PARAMETER.
      LDA LOC       LOAD THE LAST POINT ADDRESS.
      ALF,ALF       SHIFT THE "Y" COORDINATE. 
      AND B377      EXTRACT THE Y COORDINATE
       STA IY,I       & STORE IT IN THE PARAMETER.
      JMP VEND,I
      SPC 2 
A     EQU 0 
BLEN  EQU 350       LENGTH OF PBUFR 
      SPC 1 
VLEN  NOP           STORE AREA VECTOR LENGTH
ZERO  OCT 0 
B2    OCT 2 
B3    OCT 3 
      SPC 1 
DZERO DEF ZERO
DEFB1 DEF B1
DEFB2 DEF B2
      SPC 2 
*         ROTATION OFF-SET VALUES (45 DEGREE).
      SPC 1 
DBASE DEF *+1 
B1    OCT 1,401,400 
B377  OCT 377,-1,177377    ROTATIONS 3,4,5
M400  OCT 177400,177401    ROTATIONS 6,7
      SKP 
*     AREA ERASE OR WRITE SUBROUTINE. 
* 
*     THE AREA DEFINED IN THE CALL IS 'WRITTEN' FROM THE TOP LEFT 
*     CORNER, COLUMN BY COLUMN. 
* 
* 
*     CALCULATION OF INTERNAL PARAMETERS FOR AREA:
      SPC 1 
**************************************************************
*                             VALUE OF AROT (0:3)            *
*                *   00     *   01     *   10     *   11     *
**************************************************************
* X ORIGIN       * XA       * XA-DELTY * XA-DELTX * XA       *
* Y ORIGIN       * YA+DELTY * YA+DELTX * YA       * YA       *
* LENGTH         * DELTY    * DELTX    * DELTY    * DELTX    *
* # OF VECTORS   * DELTX+1  * DELTY+1  * DELTX+1  * DELTY+1  *
**************************************************************
      SPC 1 
XA    NOP 
YA    NOP 
DELTX NOP           INTERNAL USE AS VECTOR COUNTER. 
DELTY NOP           INTERNAL USE AS LENGTH COUNTER. 
AROT  DEF ZERO      DEFAULT L-TO-R FROM LOWER LHC.
AMODE DEF B1        DEFAULT BLACK (1).
PFL   NOP           POWER FAIL INDICATOR. 
      SPC 1 
VAREA NOP           ENTRY POINT 
      JSB .ENTR 
       DEF XA 
      LDA AMODE,I   TRANSFER MODE ADDRESS AND 
      STA NMODE      POWER FAIL 
      LDA PFL         INDICATOR 
      STA PFAIL        FOR POINT CALL.
      LDA AROT,I
      AND B3        MOD 4 
      STA AROT
      LDB DELTY,I 
      SLA,RAR 
      LDB DELTX,I 
      SSB           NEG. LENGTH?
      JMP EAREA       YES -- DON'T DO IT! 
      CMB           SAVE AS PRESET FOR
      STB VLEN       LENGTH COUNTER.
      CMB           RESTORE FOR YA CALCULATION. 
      SLA 
      CLB 
      ADB YA,I
      STB YA
      SKP 
      LDA AROT
      LDB DELTX,I 
      SLA 
      LDB DELTY,I 
      SSB           NEG. LENGTH?
      JMP EAREA       YES -- DON'T DO IT! 
      CMB 
      STB DELTX     -(# OF VECTORS) 
      INB           ADJUST FOR X-ORIGIN USE.
      INA           ADD 1 SO THAT ROTS 0,3 CAN BE 
      RAR            SEPARATED FROM ROTS 1,2
      SLA,RSS 
      CLB 
      ADB XA,I
      STB XA
COLUM LDB VLEN
      STB DELTY 
      LDA YA
      ALF,ALF 
      XOR XA
DOTS  JSB .PPNT 
      ADA M400
      ISZ DELTY 
      JMP DOTS
      ISZ XA
      ISZ DELTX 
      JMP COLUM 
      JSB DUMP      OUTPUT PARTIAL BUFFER.
EAREA LDA DZERO     RESTORE DEFAULT PARAMETERS
      STA AROT
      STA DU\LO 
      LDA DEFB1      FOR NEXT CALL. 
      STA AMODE 
      CLA 
      STA PFL 
      JMP VAREA,I 
      SPC 2 
ALOC  NOP           CURRENT COORDINATES FOR AREA. 
PBUFR BSS BLEN
*
*
* ADDED BY ROBERTO SANCHO APR/2017
*
*     POINT SET ROUTINE. 
*
      SPC 1 
IXP   NOP           ADDRESS FOR THE "X" COORDINATE. 
IYP   NOP           ADDRESS FOR THE "Y" COORDINATE. 
PSMDE DEF ZERO      DEFAULTS TO WHITE (0).
      SPC 1
PSET  NOP           ENTRY POINT.
      JSB .ENTR     CALL WITH TWO(2) PARAMETERS.
       DEF IXP
      LDA PSMDE,I   TRANSFER MODE ADDRESS 
      STA NMODE      
      LDA IXP,I      GET IX PARAM
      AND B377      MASK LOWER 8 BITS
      STA IXP        
      LDA IYP,I      GET IY PARAM  
      AND B377      MASK
      ALF, ALF      SHIF 8 BITS TO LEFT
      IOR IXP        NOW A=IY IN BITS 8-15, IX IN BITS 0-7
      JSB .PPNT     DISPLAY POINT AT 
      JSB DUMP      DUMP POINTS BUFFER
      LDA DZERO     RESTORE DEFAULT PARAMETERS
      STA PSMDE      
      CLA 
      STA PF
      JMP PSET,I    ALL DONE !
      SKP 
*
*     LINE ROUTINE. 
*
      SPC 1 
IX1   NOP           X ORIGIN OF LINE. 
IY1   NOP           Y ORIGIN OF LINE. 
IX2   NOP           X END OF LINE. 
IY2   NOP           Y END OF LINE. 
LNMDE DEF ZERO      DEFAULTS TO WHITE (0).
      SPC 1 
PLINE NOP           ENTRY POINT.
      JSB .ENTR     TRANSFER THE PARAMETER ADDRESSES. 
       DEF IX1 
      LDA LNMDE,I   TRANSFER MODE ADDRESS 
      STA NMODE      
*
      LDA IX2,I 
      AND B377
      STA IX2 
      LDA IX1,I 
      AND B377
      STA B 
      BLF,BLF       MOVE UP TO GIVE ROOM
      STB IX1       SAVE AS GUN LOCATION
      CMA,INA       CALCULATE DIFFERENCE
      ADA IX2 
      STA DX
      SSA           AND ABSOLUTE DIFFERNCE
      CMA,INA 
      STA ADX 
* 
      LDA IY2,I 
      AND B377
      STA IY2 
      LDA IY1,I 
      AND B377
      STA B 
      BLF,BLF 
      STB IY1 
      CMA,INA 
      ADA IY2 
      STA DY        DO SAME FOR Y 
      SSA,RSS       MAKE NEGATIF
      CMA,INA 
      ADA ADX       TO SEE WHICH IS BIGGEST 
      SSA 
      JMP ONEY      DY IS BIGGEST 
      LDA DX        DX IS BIGGEST, GO CALCULATE 
      LDB DY        THE INCREMENT 
      JSB CALC
      STA DDY 
      STB DDX 
      JMP LIN1
ONEY  LDA DY
      LDB DX        DY IS BIGGEST, GET INCREMENT
      JSB CALC
      STA DDX 
      STB DDY 
* 
**   NOW WE HAVE INCREMNTS, DO THE OUTPUT 
* 
LIN1  NOP
LIN2  LDA IX1       GET AN X VALUE
      ADA DDX       ADD INCREMENT 
      STA IX1       SAVE FOR NEXT 
      ALF,ALF 
      AND B377      ISOLATE THE X VALUE 
      STA B 
      LDA IY1       DO SAME FOR Y 
      ADA DDY 
      STA IY1 
      AND M1774     ISOLATE UPPER PART
      IOR B         ADD X VALUE 
      JSB .PPNT     DISPLAY POINT AT "LOC". 
      ISZ TEL1
      JMP LIN2
      LDA PLEN      
      SZA           DUMP ONLY IF BUFFER
      JSB DUMP       HAS SOME POINTS.
      LDA DZERO     RESTORE DEFAULT PARAMETERS
      STA LNMDE      
      CLA 
      STA PF
      JMP PLINE,I   ALL DONE !
      SKP 
* 
**   ***   S U B R O U T I N E S   ***
*  
** SUBROUTINE TO DO THE CALCULATIONS OF THE INCREMENT 
** ON ENTRY : <A> = LARGEST DIFFERENCE (DL) 
**            <B> = SMALLEST DIFFERNCE (DS) 
** ON RETURN : <A> = SMALLEST INCREMENT (DDS = (DS*400B)/ABS(DL)) 
**             <B> = LARGEST INCREMENT (DDL = +/- 400B) 
* 
CALC  NOP 
      STB ADX 
      STA B 
      CMB,INB       <B> = - DL
      SZA,RSS       LARGEST = 0?
      JMP ONEP      YES, DO ONE POINT ONLY !
      CLE,SSA       NEGATIF ? 
      CCE           YES, SET E
      SSA           NEGATIF ? 
      SWP           YES, SET POSITIF IN A, NEGATIF IN B 
      STA DIVI      SAVE A AS DIVISOR 
      STB TEL1      AND B AS COUNTER
      LDB B400      GET LARGEST INCREMENT 
      SEZ           WAS POSITIF ? 
      CMB,INB       NO, SET INCREMENT NEGATIF 
      LDA ADX       GET SMALLEST AGAIN
      STB ADX       SAVE LARGEST INCREMENT
      CLB 
      SSA           NEGATIF ? 
      CCB           YES, SET B ALSO NEGATIF 
      ALF,ALF 
      DIV DIVI      DIVIDE BY LARGEST 
      LDB ADX 
      JMP CALC,I
* 
ONEP  CCA 
      STA TEL1
      CLA 
      JMP CALC,I
      SKP 
* 
**   ***   D A T A   ***
* 
* 
B     EQU 1 
* 
D2    DEC 2 
B377  OCT 377 
B400  OCT 400 
MD10  DEC -10 
M1774 OCT 177400
* 
TEL1  BSS 1 
ADX   BSS 1 
DX    BSS 1 
DY    BSS 1 
DDX   BSS 1 
DDY   BSS 1 
DIVI  EQU IY2 
*
THEND EQU * 
      SPC 2 
      END 
