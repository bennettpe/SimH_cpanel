SPL,L,O,T 
      NAME LISTN(7) 
! 
! 
!     SOURCE:    29102-80019
!     RELOC:     29102-60019
!     LISTING:   A-29102-60019-1
! 
! 
! LISTN 
! 
! LIST OR DELETE MNEMONIC NAMES FROM BRANCH AND MNEMONIC TABLES 
! 
! 
! CALLING SEQUENCE: CALL LISTN(LISTF,NAMF)
! 
!    WHERE: LISTF = 0 LIST OR DELETE CALLS
!                   1 LIST OR DELETE FUNCTIONS
!                   2 LIST OR DELETE DEVICES NAMES
! 
!           NAMF  = 0 LIST NAMES
!                   1 CALL FROM "ADDN" TO GET POSTIONS IN B&M TBL 
!                  >1 THEN ITS A STRING POINTER TO NAME 
!                     TO BE DELETED 
! 
! 
! 
! 
! 
! 
      LET INCS,IDEC,INWS,WSAW,WSAA BE PSEUDO,EXTERNAL,DIRECT
      LET STPRG,MATCS,MATCA BE SUBROUTINE,EXTERNAL,DIRECT 
      LET FWRIT BE SUBROUTINE,EXTERNAL
      LET BUFFR BE INTEGER(36),EXTERNAL 
      LET CMDLU BE INTEGER,EXTERNAL 
      LET DIAG BE SUBROUTINE,EXTERNAL,DIRECT
      LET RESET BE SUBROUTINE 
      LET ERRN BE INTEGER(8)
      INITIALIZE ERRN TO 14,"NAME NOT FOUND"
      LET DBLM,ENTM,DBLB,ENTB,EXTB BE INTEGER,EXTERNAL
      LET TREAL BE INTEGER(3) 
      INITIALIZE TREAL TO 2,"REAL"
      LET TINT BE INTEGER(5)
      INITIALIZE TINT TO 4,"INTEGER " 
      LET ERROR BE INTEGER(4) 
      INITIALIZE ERROR TO 3,",ERROR"
      LET SBTBL BE INTEGER(4) 
      INITIALIZE SBTBL TO 3,"SBTBL" 
      LET SUB  BE INTEGER(3)
      INITIALIZE SUB  TO 2,"SUB=" 
      INITIALIZE SUBA TO @SUB 
      LET MNEM,SRULE  BE INTEGER(4) 
      INITIALIZE MNEM  TO 3,"MNEM " 
      INITIALIZE SRULE TO 3,"SRULE" 
      LET FCNS,DEVTB  BE INTEGER(4) 
      INITIALIZE FCNS  TO 3,"FCNS " 
      INITIALIZE DEVTB TO 3,"DEVTB" 
      LET SBNCT BE INTEGER(4) 
      INITIALIZE SBNCT TO 3,"SBNCT" 
      LET FCNEX BE INTEGER(4) 
      INITIALIZE FCNEX TO 3,"FCNEX" 
      LET DEVEX BE INTEGER(4) 
      INITIALIZE DEVEX TO 3,"DEVEX" 
      LET FCNCT BE INTEGER(4) 
      INITIALIZE FCNCT TO 3,"FCNCT" 
      LET DEVCT BE INTEGER(4) 
      INITIALIZE DEVCT TO 3,"DEVCT" 
      LET SETLP BE INTEGER(4) 
      INITIALIZE SETLP TO 3,"SETLP" 
      LET DEVND BE INTEGER(4) 
      INITIALIZE DEVND TO 3,"DEVND" 
      LET ENTPT,PACK BE SUBROUTINE
      LET FINDN BE SUBROUTINE,DIRECT
      LET CCNT,FCNT,DCNT,LCNT BE INTEGER,GLOBAL 
      LET SPOS,EPOS,PPOS,FPOS,DPOS BE INTEGER,GLOBAL
      LET CURPT,ENTRY,DEFP,NMCNT,DLEN BE INTEGER,GLOBAL 
! 
! 
! 
LISTN:SUBROUTINE(LISTF,NAMF)GLOBAL,DIRECT 
! 
! 
! 
      IF LISTF=1 THEN[START_@FCNS;ENDN_@DEVTB;GOTO LIST0] !FUNCTIONS
      IF LISTF=2 THEN[START_@DEVTB;ENDN_@DEVND;GOTO LIST0] !DEVICES 
!IT IS SUBROUTINE CALLS 
      START_@MNEM 
      ENDN_@SRULE 
! 
! FIND POSITION OF NAMES IN MNEMONIC AND BRANCH TABLES
! 
LIST0:FINDN(START,ENTM,SPOS)    !FIND STARTING POSITION 
      FINDN(ENDN,ENTM,EPOS)     !FIND STARTING POSITION 
      FINDN(@SBTBL,ENTB,PPOS)     !FIND PARAMETER COUNT 
      FINDN(@FCNEX,ENTB,FPOS)    !FUNCTION DEF POSITION 
      FINDN(@DEVEX,ENTB,DPOS)    !DEVICE NAME DEF POSITION
      FINDN(@SBNCT,ENTM,CCNT)    !CALL COUNT POSITION 
      FINDN(@FCNCT,ENTM,FCNT)    !FUNCTION COUNT POSITION 
      FINDN(@DEVCT,ENTM,DCNT)    !DEVICE COUNT POSITION 
      FINDN(@SETLP,ENTM,LCNT)    !LINE PRINTR CHAR COUNT
! 
! 
! 
!LOOK  AT   THE NAMES BETWEEN SPOS AND EPOS 
! 
      NMCNT,MNEX_0                !NAME COUNT 
      I_SPOS
! 
!LENGTH OF MNEMONIC NAME * 2
! 
LIST1:LENTH_((INWS(DBLM,I)+1)AND 16K) 
! 
! RESEQUENCE CALL NUMBERS 
! 
      IF NAMF=1  THEN[IFNOT LISTF THEN INWS(DBLM,I)_\ 
        (INWS(DBLM,I) AND 77K)OR((NMCNT+1) -< 6)] 
      LU _((INWS(DBLM,I)+1) -> 9) AND 77K 
      DLEN_LENTH/2+1                 !LENGTH OF MNEMONIC
      I_I+2 
      NEND_I+LENTH-1
!STRING MNEX CONTAINS THE MNEXONIC
! 
      FOR I_I   TO   NEND  BY 2 DO[WSAW(MNEX)_\ 
        INWS(DBLM,I)] 
      MATCS(NAMF,MNEX,1,LENTH/2,L)  !SEE IF THERE IS A MATCH
! 
!IF DELETE THEN FLAG MNEXONIC FOR DELETION
! 
      IF L THEN[FOR J_NEND-1 TO NEND-LENTH-2 BY -1 DO[\ 
        INWS(DBLM,J)_ 77777K]]
! 
!TEST FOR CALL PARAMETERS 
! 
      IFNOT LISTF THEN[ENTPT(PPOS,DEFP);GOTO LIST4] !CALLS
      IF LISTF=1 THEN[ENTPT(FPOS,DEFP);IF(INWS(DBLB,FPOS+NMCNT*4)\
        AND 100000K) THEN WSAA(MNEX)_@ERROR]  !FUNCTION 
      IF LISTF=2 THEN[WSAW(MNEX)_" =";IDEC(MNEX,2)_LU;\ !DEV=LU#
        ENTPT(DPOS,DEFP)] 
LIST3:WSAW(MNEX)_", " 
      WSAA(MNEX)_ SUBA  !SET UP ENTRY POINT NAME
! 
!APPEND THE NAME OF THE ENTRY POINT ONTO THE LIST STRING
! 
      WSAW(MNEX)_INWS(EXTB,ENTRY+1) 
      WSAW(MNEX)_INWS(EXTB,ENTRY+2) 
      WSAW(MNEX)_(INWS(EXTB,ENTRY+3) AND 177400K)+40K 
! 
! 
!IF LIST NAME THEN PRINT ON SYSTEM DEVICE 
! 
LIST6:IFNOT NAMF THEN[J_0;WHILE[J_J+1] DO\
        [BUFFR(J)_INWS(MNEX,J)?[FWRIT(CMDLU,ERR,BUFFR,(J-1)* -2);\
          GOTO LIST7]]] 
LIST7:STPRG(MNEX) 
      NMCNT_NMCNT+1  !INCREMENT COUNT OF NAMES PROCESSED
! 
! DELETE ENTRY IF L IS TRUE 
! 
      IF L THEN[FOR J_1 TO 3 DO\
        INWS(EXTB,ENTRY+J)_ 77777K;\
          EXTC_INWS(DBLB,DEFP+3);\
            FOR J_0 TO 3 DO INWS(DBLB,DEFP+J)_ 77777K ;\
              GOTO PAK]                        !EXTC=DELETED EXTERN # 
! 
! 
      IF I+1 > EPOS THEN[IF NAMF>1 THEN[DIAG(ERRN);RETURN]\ 
        ,ELSE[CURPT_I-1; RETURN]],ELSE GOTO LIST1 
! 
! 
LIST4:PCNT_(INWS(DBLB,PPOS+NMCNT*4))->6 !NO. OF PARAMETERS
      PWORD_INWS(DBLB,NMCNT*2+2)
! 
!REMOVE PARAMETER CONVERSION IF DELETION
! 
      IF L THEN\
        [IF NAMF>1 THEN[INWS(DBLB,NMCNT*2+1)_ 77777K;\
        INWS(DBLB,NMCNT*2+2)_ 77777K;GOTO LIST3]] 
! 
      IFNOT PCNT THEN[WSAW(MNEX)_"  ";GOTO LIST3] 
      FOR J_1 TO PCNT DO THRU LIST2 
      PTYP_PWORD AND 3K 
      IFNOT PTYP THEN[WSAW(MNEX)_"R,"]!ITS "R," 
      IF PTYP=2 THEN[WSAW(MNEX)_"I,"] !ITS "I," 
      IF PTYP=3 THEN[WSAW(MNEX)_"V,"] !ITS "V," 
LIST2:PWORD_PWORD->2  !MOVE TO NEXT PAIR OF BITS
! 
!CHECK FOR FORTRAN FUNCTION PARAMETERS
! 
      FOR J_1 TO 7-PCNT DO[PWORD_PWORD->2] !FINISH SHIFT
!REMOVE TRAILING COMMA
      J_0 
LIST5:WHILE[J_J+1] DO K_INCS(MNEX,J)?[INCS(MNEX,J-1)\ 
        _")";GOTO LIST8]
LIST8:PTYP_PWORD AND 3K 
      IF PTYP=1 THEN WSAA(MNEX)_@TREAL !ITS A REAL FORTRAN FUNCT
      IF PTYP=3 THEN WSAA(MNEX)_@TINT  !ITS A INTEGER FORTRAN FUNCT 
      GOTO LIST3
! 
! 
!PACK STRING SO AS TO REMOVE ALL  77777K'S
! 
!DECREMENT COUNT OF CALLS,FUNCTIONS OR DEVICES IF DELETED 
! 
! 
! 
PAK:  CALL PACK(EXTB) 
      CALL PACK(DBLB) 
      CALL PACK(DBLM) 
      CALL RESET(LISTF,-1)
! 
      RETURN
! 
      END 
!GET ENTRY POINT OFFSET 
! 
ENTPT:SUBROUTINE(STRTE,DEFX)
      DEFX_STRTE+NMCNT*4-1
      ENTRY_(INWS(DBLB,DEFX+3)-1)*3 
      RETURN
      END 
! 
! 
!REMOVE DELETED ENTRIES AND PACK THEM 
! 
PACK: SUBROUTINE(STR) 
      TEMPS,I_0 
      WHILE [I_I+1] DO THRU PACK1 
      J_INWS(STR,I)?[GOTO PACK2]
      IF J= 77777K THEN GOTO PACK1
      WSAW(TEMPS)_J 
PACK1:
PACK2:STPRG(STR)
      STR_TEMPS 
      RETURN
      END 
! 
! 
!FIND ENTRY POINTS NAME AND POSITION OF IT IN STRING
! 
FINDN:SUBROUTINE(ST1,ST2,POS1)DIRECT
      MATCA(ST1,ST2,POS1) 
      POS1_INWS(ST2,POS1+3)*2+2 
      RETURN
      END 
! 
! 
! 
!RESET MNEMONIC NAME COUNT,ENTRY POINT OFFSETS, AND DEF OFSETS
! 
!     CALLING SEQUENCE: CALL RESET(LFLG,INCR) 
! 
!     WHERE:  LFLG = 0 SUBROTUINE CALL
!                    1 FUNCTION 
!                    2 DEVICE NAME
! 
!             INCR = 1   ADD A NAME 
!                    -1   DELETE A NAME 
! 
RESET:SUBROUTINE(LFLG,INCR)GLOBAL 
      IFNOT LFLG THEN[J_CCNT;MATCA(@MNEM,ENTM,I);\
        K_8;INWS(ENTB,K)_INWS(ENTB,K)+INCR;CLEN_3;GOTO RE1] 
      IF LFLG=1 THEN[J_FCNT;MATCA(@FCNS,ENTM,I);\ 
        K_28;CLEN_2;GOTO RE1] 
! 
      J_DCNT
      MATCA(@DEVTB,ENTM,I)
      K_-4
      CLEN_2
RE1:  I_I+3 
      INWS(DBLM,J)_INWS(DBLM,J)-INCR    !MODIFY COUNT OF NAMES
      WHILE[I_I+4] DO INWS(ENTM,I)_INWS(ENTM,I)?[GOTO RE2]+INCR*DLEN
! 
RE2:  WHILE[K_K+4] DO INWS(ENTB,K)_INWS(ENTB,K)?[GOTO RE3]+INCR*CLEN
! 
RE3:  IF INCR>0 THEN RETURN  !CALL FROM ADD A ROUTINE 
      IFNOT LFLG THEN I_DEFP-3,ELSE I_DEFP-1
      WHILE[I_I+4] DO \ 
       [INWS(DBLB,I)_INWS(DBLB,I)?[GOTO RE4]+INCR]
! 
RE4:  I_EXTC*3-3
      WHILE[I_I+3]DO INWS(EXTB,I)_ INWS(EXTB,I)?[RETURN]+INCR 
RE5:  I_I  !DUMMY END 
      END 
      END 
END$
