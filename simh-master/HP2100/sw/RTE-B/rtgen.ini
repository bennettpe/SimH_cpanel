
set console -q -n log=log.txt 

; set debug -n -q debug.txt
; set debug stdout

; set clk debug=CSRW;PSERV;IOBUS
; set tty debug=CSRW;SERV;PSERV;XFER;IOBUS
; set ptr debug=SERV;XFER;IOBUS
; set ptp debug=CSRW;SERV;XFER;IOBUS
; set cpu debug=INSTR;DATA;FETCH;REG;OPNDEXEC;NOOS
; set mp  debug=IOBUS
; set drc debug=IOBUS

echo
echo ***
echo *** RTE-B (RTE Basic) Operating System (1973) 
echo *** Generation

set env tv=0
set env plotter=0
set env scope=0
set env storage_scope=0
set env graphics_translator=0
:pa0
if "%1"=="" goto pa9
if "%1"!="TV" goto pa1
   echo *** with HP91200 TV Interface Card support 
   set env tv=1
   shift
   goto pa0
:pa1
if "%1"!="PLOTTER" goto pa2
   echo *** with HP7210A Plotter support 
   set env plotter=1
   shift
   goto pa0
:pa2
if "%1"!="SCOPE" goto pa3
   echo *** with HP1300A X-Y Display (Scope) support 
   set env scope=1
   shift
   goto pa0
:pa3
if "%1"!="STORAGE_SCOPE" goto pa4
   echo *** with HP1331A Storage Scope support 
   set env storage_scope=1
   shift
   goto pa0
:pa4
if "%1"!="GRAPHICS_TRANSLATOR" goto pa4
   echo *** with HP1350A Graphics Translator support 
   set env graphics_translator=1
   shift
   goto pa0
:pa4
echo
echo Invalid parameter "%1". Should be:
echo
echo TV                  to generate RTE-B with HP91200 TV Interface card support
echo PLOTTER                with HP7210A Flatbed plotter support
echo SCOPE                  with HP1300A Scope support
echo STORAGE_SCOPE          with HP1331A Storage Scope support
echo GRAPHICS_TRANSLATOR    with HP1350A Graphics Translator support
echo
goto end
:pa9

echo ***
echo

; generates a new RTE-B system

set cpu 2100
set cpu 32k
set fp

set ptr dev=12
set clk dev=11
set tty dev=16
set ptp dev=17
set lpt dev=20
if "%tv%"=="1"                   set tv      dev=45
if "%scope%"=="1"                set scope   dev=46
if "%storage_scope%"=="1"        set scope   dev=46
if "%graphics_translator%"=="1"  set scope   dev=46
if "%plotter%"=="1"              set plotter dev=50

set tty autolf
send after=200k
send delay=30k

; No disc

set dpd dis
set drc dis
set dpc dis

; Load SIO drivers

; Reload and configure 24K console SIO driver as SC 16
att ptr -q sio/29100-60017_A_24K_SIO_TTY.abs
boot ptr

deposit S 16
deposit P 2
go

; Load and configure 24K paper tape reader SIO driver as SC 12

att ptr -q sio/29100-60019_A_24K_SIO_RDR.abs
boot ptr

deposit S 12
deposit P 2
go

; Load and configure 24K paper tape punch SIO driver as SC 17
att ptr -q sio/29100-60020_A_24K_SIO_PUNCH.abs
boot ptr
 
deposit S 17
deposit P 2
go

; Load RTE-B Table Configurator

att ptr -q rtbgen/29102-60030_C_TABLE_GEN.abs

boot ptr

deposit S 0
deposit P 2

att ptp -n -q rtbgen/instrtbl.rel

; HP2313 -> analog to digital converter
go until "# OF 2313'S?" 
send "0\r"

; HP6940 -> multiprogrammer (to interface with up to 16 external devices)
go until "# OF 6940'S?" 
send "0\r"

go until "ENTER INSTRUMENT CONFIGURATION CONSTANTS" 
send "/E\r"

; generates instrument table tape

det -q ptr
go

; read the standard Branch & menmonics table and
; generates a configured one 

att ptr -r -q rtbgen/29102-60009_B_RTE-B_STD_BRANCH-MNEM_TBL_(BMTBL).rel
att ptp -n -q rtbgen/bmtbl.rel

go until "LIST B&M TABLE?" 
go until "\n-"
send "YES\r"

go until "* DELETE SUBROUTINES *" 
go until "\n-"
send "/E\r"

go until "* DELETE FUNCTIONS *" 
go until "\n-"
send "/E\r"

go until "* DELETE DEVICES *" 
go until "\n-"
send "/E\r"

go until "* ADD SUBROUTINES *" 
go until "\n-"

if "%tv%"!="1" goto endtv1
   ; Params for asmb external subroutines callable from basic
   ; for TV support
   ;    I=Integer 
   ;    R=string buf/array of words/array of integers
   ;    V=Integer set by subroutine and returned to basic
   send "VIDLU(I,I),SUB=VIDLU\r"
   go until "\n-"
   send "ERASE,SUB=ERASE\r"
   go until "\n-"
   send "VECTR(I,I,I,I,I,I,I),SUB=VECTR\r"
   go until "\n-"
   send "VAREA(I,I,I,I,I,I),SUB=VAREA\r"
   go until "\n-"
   send "VEND(V,V),SUB=VEND\r"
   go until "\n-"
   send "CHARS(I,I,R,I,I,I,I),SUB=CHARS\r"
   go until "\n-"
   send "PNTS(R,I,I),SUB=PNTS\r"
   go until "\n-"
   send "PSET(I,I,I),SUB=PSET\r"
   go until "\n-"
   send "PLINE(I,I,I,I,I),SUB=PLINE\r"
   go until "\n-"
:endtv1

if "%plotter%"!="1" goto endplt1
   send "PLTLU(I),SUB=PLTLU\r"
   go until "\n-"
   send "PLOT(I,I,I,I),SUB=PLOT\r"
   go until "\n-"
   send "PLTC(I,I,I,I,I),SUB=PLTC\r"
   go until "\n-"
   send "PLTCS(R),SUB=PLTCS\r"
   go until "\n-"
:endplt1

if "%scope%"!="1" goto endsco1
   ; scope cannot be selected at same time as TV card
   ; both adds the CHARS command to basic, there would 
   ; be a name collision
   ; scope cannot be selected at same time as storage scope 
   ; both adds the ERASE, LINES and CHARS commands
   send "PLOTB(I,R,I),SUB=PLOTB\r"
   go until "\n-"
   send "ERASE,SUB=ERASE\r"
   go until "\n-"
   send "DISPT(I,I),SUB=DISPT\r"
   go until "\n-"
   send "LINES(I,I,I,I,I),SUB=LINES\r"
   go until "\n-"
   send "CHARS(I,I,R),SUB=CHARS\r"
   go until "\n-"
:endsco1

if "%storage_scope%"!="1" goto endsto1
   ; storage scope cannot be selected at same time as TV card
   ; both adds the CHARS command to basic, there would 
   ; be a name collision
   ; storage scope cannot be selected at same time as non-storage scope 
   ; both adds the ERASE, LINES and CHARS commands
   send "ERASE(I),SUB=ERASE\r"
   go until "\n-"
   send "PSET(I,I,I),SUB=PSET\r"
   go until "\n-"
   send "LINES(I,I,I,I,I),SUB=LINES\r"
   go until "\n-"
   send "WHERE(V,V),SUB=WHERE\r"
   go until "\n-"
   send "CHARS(I,I,I,R),SUB=CHARS\r"
   go until "\n-"
:endsto1

if "%graphics_translator%"!="1" goto endgra1
   ; commands are sent to graphics translator using
   ;    PRINT #n "graphics command string"
   send "PRTCH(I,I),SUB=PRTCH\r"
   go until "\n-"
:endgra1

send "/E\r"

go until "* ADD FUNCTIONS *" 
send "/E\r"

go until "* ADD DEVICES *" 
send "/E\r"

go until "WHAT IS LIST DEVICE LINE LENGTH?" 
send "80\r"

go until "LIST B&M TABLE?" 
send "YES\r"

go

; Load RTE-C SYSTEM GENERATOR

att ptr -q rtbgen/29101-60011_B_RTSGN.abs
boot ptr

; Run

deposit S 0
deposit P 100

; attach boot papertape

att ptp -n -q rtbgen/tmp.rte-b_boot.abs
  

; initialization phase

go until "PRAM INPT?" 
send "1\r"

go until "TBG CHNL?" 
send "11\r"

go until "PRIV. INT?" 
send "0\r"

go until "FWA BP?" 
send "100\r"

go until "LWA MEM?" 
send "77677\r"

go until "FWA SYS MEM" 
send "76000\r"

go until "REL SYS MODS" 
go until "\n-"

; program input phase: Now load rel files for RTE

goto start_module_load

:load_module
echo
echo ---> Load Module %1
att ptr -q rtbgen/%1
send "RELOCATE\r"
go until "\n-"
return

:search_lib
echo
echo ---> Load Lib %1
att ptr -q rtbgen/%1
send "SEARCH\r"
go until "\n-"
return


:start_module_load

send "MAP GLOBALS,MODULES,LINKS\r"
go until "\n-"

call load_module 92000-60001_B_RTB_OS.rel
call load_module 29029-60001_RTE_DVR00.rel
if "%tv%"=="1"            call load_module tv_scope/91200-16001_Rev-1648_RTE_DRIVER_DVA13.rel
if "%plotter%"=="1"       call load_module tv_scope/72008-60001_Rev-A_RTE_DRIVER_DVR10_FOR_HP7210A_PLOTTER.rel
if "%scope%"=="1"         call load_module tv_scope/HP1300_RTE_Scope_Driver_DVR13.rel
if "%storage_scope%"=="1" call load_module tv_scope/22505-80001_Rev-A_HP1331C_STORAGE_SCOPE_DRIVER_FOR_RTE_DVR47.rel

send "DISPLAY UNDEFS\r"
go until "\n-"
send "END\r"

; Table generation phase

; equipement table
; each eqt maps a physical device at given select code address
go until "EQT TBL"

; eqt 1 is teletype (tty)
go until "1 =?" 
send "16,DVR00\r"

; eqt 2 is paper tape reader (ptr)
go until "2 =?" 
send "12,DVR01\r"

; eqt 3 is paper tape punch (ptp)
go until "3 =?" 
send "17,DVR02,B,T=1000\r"

set env eqt=4
set env eqttv=0
set env eqtplt=0
set env eqtsco=0
set env eqtstor=0
set env eqtgra=0

if "%tv%"!="1" goto endtv2
   ; eqt for tv interface
   go until "%eqt% =?" 
   send "45,DVA13,D,T=5\r"
   set env eqttv=%eqt%
   ; incr next eqt number
   set env -a eqt=eqt+1
:endtv2

if "%plotter%"!="1" goto endplt2
   ; eqt for plotter
   go until "%eqt% =?" 
   send "50,DVR10\r"
   set env eqtplt=%eqt%
   ; incr next eqt number
   set env -a eqt=eqt+1
:endplt2

if "%scope%"!="1" goto endsco2
   ; eqt for scope
   go until "%eqt% =?" 
   send "46,DVR13\r"
   set env eqtsco=%eqt%
   ; incr next eqt number
   set env -a eqt=eqt+1
:endsco2

if "%storage_scope%"!="1" goto endsto2
   ; eqt for storage scope
   go until "%eqt% =?" 
   send "46,DVR47,B\r"
   set env eqtstor=%eqt%
   ; incr next eqt number
   set env -a eqt=eqt+1
:endsto2

if "%graphics_translator%"!="1" goto endgra2
   ; eqt for graphic translator
   go until "%eqt% =?" 
   send "46,DVR00\r"
   set env eqtgra=%eqt%
   ; incr next eqt number
   set env -a eqt=eqt+1
:endgra2

go until "%eqt% =?" 
send "END\r"

:endeqt

; logical unit table
; each LU maps one eqt
; define LU1  is tty, LU4 is ptp, LU5 is ptr, 
;        LU6  is the list device (usually printer) but directed to tty
;        LU7  is TV
;        LU8  is plotter
;        LU9  is scope 
;        LU10 is storage scope
;        LU11 is graphics translator

go until "LU#"

go until "1 = EQT #?" 
send "1\r"

go until "2 = EQT #?" 
send "0\r"

go until "3 = EQT #?" 
send "0\r"

go until "4 = EQT #?" 
send "3\r"

go until "5 = EQT #?" 
send "2\r"

go until "6 = EQT #?" 
send "1\r"

go until "7 = EQT #?" 
send "%eqttv%\r"

go until "8 = EQT #?" 
send "%eqtplt%\r"

go until "9 = EQT #?" 
send "%eqtsco%\r"

go until "10 = EQT #?" 
send "%eqtstor%\r"

go until "11 = EQT #?" 
send "%eqtgra%\r"

go until "12 = EQT #?" 
send "END\r"

:endlu

; interrupt table. 
go until "INT TBL" 
go until "\n"
go until "\n"

send "12,EQT,2\r"
go until "\n"
go until "\n"

send "16,EQT,1\r"
go until "\n"
go until "\n"

send "17,EQT,3\r"
go until "\n"
go until "\n"

if "%tv%"!="1" goto eqt1
   send "45,EQT,%eqttv%\r"
   go until "\n"
   go until "\n"
:eqt1
if "%scope%"!="1" goto eqt2a
   send "46,EQT,%eqtsco%\r"
   go until "\n"
   go until "\n"
:eqt2a
if "%storage_scope%"!="1" goto eqt2b
   send "46,EQT,%eqtstor%\r"
   go until "\n"
   go until "\n"
:eqt2b
if "%graphics_translator%"!="1" goto eqt2c
   send "46,EQT,%eqtgra%\r"
   go until "\n"
   go until "\n"
:eqt2c
if "%plotter%"!="1" goto eqt3
   send "50,EQT,%eqtplt%\r"
   go until "\n"
   go until "\n"
:eqt3
send "END\r"

; program/parameter input phase

go until "#ID SEG?" 
send "1\r"

go until "STRT-UP PROG?" 
send "BSUPV\r"
go until "\n-"
send "END\r"

go until "# WDS IN COMM?"
send "100\r"
go until "\n-"

call load_module 25117-60069_C_ATS_BASIC_INTERPERT.rel
call load_module bmtbl.rel 
call load_module 29102-60012_A_RTE-B_TRAP_LIB_(TRLIB).rel
call load_module dummy6940.rel

call search_lib 29102-60001_C_RTE-B_LIB.rel
call search_lib 24151-01_F2E.rel
if "%tv%"=="1"                  call search_lib tv_scope/91200-16002_Rev-1648_TV_INTERFACE_LIBRARY.rel
if "%tv%"=="1"                  call search_lib tv_scope/RSFLG.rel
if "%plotter%"=="1"             call search_lib tv_scope/HP7210A_RTE_Plotter_Library.rel
if "%scope%"=="1"               call search_lib tv_scope/HP1300_RTE_Scope_Library.rel
if "%storage_scope%"=="1"       call search_lib tv_scope/22506-80001_Rev-A_HP1331C_STORAGE_LIB.rel
if "%graphics_translator%"=="1" call search_lib tv_scope/PRTCH.rel 

send "END\r"
go until "ENTER PRAMS"
send "0\r"
go until "\n-"
send "END\r"

go until "SNAPSHOT?"
go until "\n"
send "NO\r"
go

; RTSGN finished

det -q ptp

echo
echo ***
echo *** System generated 
echo *** Boot and test the system
echo ***
echo

reset
d 0-77677 0

set tty noautolf
send after=200k
send delay=30k

att ptr -e -q rtbgen/tmp.rte-b_boot.abs
boot ptr

d s 0
d p 2

; power on the device(s)

if "%tv%"=="1" set tv ena
if "%tv%"=="1" set tv on
if "%plotter%"=="1" set plotter ena
if "%plotter%"=="1" set plotter on
if "%scope%"=="1" set scope ena
if "%scope%"=="1" set scope on
if "%storage_scope%"=="1" set scope hp1331
if "%storage_scope%"=="1" set scope ena
if "%storage_scope%"=="1" set scope on
if "%graphics_translator%"=="1" set scope hp1350
if "%graphics_translator%"=="1" set scope ena
if "%graphics_translator%"=="1" set scope on

; start RTE-B
go until "READY"

send '10 PRINT "HOLA RTE-B"\r'
send "9999 END\r"

send "LIST\r"
go until "READY"

send "RUN\r"
go until "READY"


if "%tv%"!="1" goto endtv4

   att ptr -q test_run/Sample_TV.bas.txt
   send "LOAD\r"
   go until "READY" 

   send "RUN\r"
   go until "READY"

:endtv4

if "%plotter%"!="1" goto endplt4

   att ptr -q test_run/Sample_Plotter.bas.txt
   send "LOAD\r"
   go until "READY" 

   send "RUN\r"
   go until "READY"

:endplt4

if "%scope%"!="1" goto endsco4

   att ptr -q test_run/Sample_Scope.bas.txt
   send "LOAD\r"
   go until "READY" 

   send "RUN\r"
   go until "READY"

:endsco4

if "%storage_scope%"!="1" goto endsto4

   att ptr -q test_run/Sample_Storage_Scope.bas.txt
   send "LOAD\r"
   go until "READY" 

   send "RUN\r"
   go until "READY"

:endsto4

if "%graphics_translator%"!="1" goto endgra4

   att ptr -q test_run/Sample_Graphics_Translator.bas.txt
   send "LOAD\r"
   go until "READY" 

   send "RUN\r"
   go until "READY"

:endgra4

:endbasprog

; do a last set <dev> on to assure GUI window is refreshed
if "%tv%"=="1"                  set tv on
if "%plotter%"=="1"             set plotter on
if "%scope%"=="1"               set scope on
if "%storage_scope%"=="1"       set scope on
if "%graphics_translator%"=="1" set scope on

; System created and prepared into tmp.rte-b_boot.abs 
; Copy as production papertape

det -q all

copy -q rtbgen/tmp.rte-b_boot.abs rtbgen/rte-b_boot.abs 
if "%tv%"=="1"                  copy -q rtbgen/tmp.rte-b_boot.abs rtbgen/rte-b_tv.abs 
if "%plotter%"=="1"             copy -q rtbgen/tmp.rte-b_boot.abs rtbgen/rte-b_plotter.abs 
if "%scope%"=="1"               copy -q rtbgen/tmp.rte-b_boot.abs rtbgen/rte-b_scope.abs 
if "%storage_scope%"=="1"       copy -q rtbgen/tmp.rte-b_boot.abs rtbgen/rte-b_storage_scope.abs 
if "%graphics_translator%"=="1" copy -q rtbgen/tmp.rte-b_boot.abs rtbgen/rte-b_graphics_translator.abs 
del -q rtbgen/tmp.rte-b_boot.abs 

echo
echo
echo ***
echo *** Generation finished 
echo ***

if "%1"=="QUIT" quit
echo
echo *** Press Enter to quit
set env -p "   " a
echo
 
echo
quit
goto end


:end
