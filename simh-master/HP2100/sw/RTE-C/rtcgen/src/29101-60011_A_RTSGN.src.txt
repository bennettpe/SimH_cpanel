ASMB,R,B,L,C      RTSGN 
      HED  RTSGN  RTS SYSTEM GENERATOR
      NAM RTSGN 
**************************************************
* 
*  NAME:  RTE-C GENERATOR MAIN CONTROL
*  PROGRAMMER:  W. RAGIN
*  DATE OF ORIGINAL ISSUE:  5/18/73 
*  MODIFIED BY: 
*  MODIFIED DATE: 
* 
**************************************************
      ORB 
A     EQU 0 
B     EQU 1 
***************** - HIGH CORE - ******************
*                                                *
*             SIO DRIVERS (TTY, PT, HSP)         *
*                                                *
**************************************************
*                    - IDENTS -                  *
*                    ----------                  *
*                                                *
*                                                *
*                     -------                    *
*                     - LST -                    *
**************************************************
*                                                *
*                                                *
*           PROGRAM LOADING CONTROL              *
*                                                *
*                                                *
**************************************************
*                                                *
*               I/O TABLE GENERATION             *
*                                                *
*                  PARAMETER INPUT               *
*                                                *
****************** - 2000 - **********************
*                                                *
*                                                *
*                    DATA AREAS                  *
*                                                *
*                                                *
**************************************************
* 
*  THE TERM RTS/2100 IS SYNONYMOUS WITH RTE-C, AND
*  THE TERMS ARE USED INTERCHANGEABLY THROUGHOUT
*  THIS DOCUMENT. 
* 
* 
      SKP 
* 
* 
* 
* 
* 
*  RTSGN PROGRAM TABLE FORMAT (IDENTS)
* 
*  WORD 1:  IP1 - NAME  1,2 
*  WORD 2:  IP2 - NAME  3,4 
*  WORD 3:  IP3 - NAME  5,SC
* 
*          SC = 0  PROGRAM HAS BEEN LOADED
*             = XX (OCTAL) INT PRG
* 
* 
*  LST FORMAT 
* 
*  WORD 1: LST1 - NAME 1,2
*  WORD 2: LST2 - NAME 3,4
*  WORD 3: LST3 - NAME 5, ORDINAL 
*  WORD 4: LST4 - IDENT ADDRESS 
*  WORD 5: LST5 - BP LINK ADDRESS 
* 
* 
* 
*  ENTERNS AND EXTERNS
* 
* 
* 
      EXT LST,PLK,PLKS,?XFER,LSTA1
      EXT OPT.3,.MEM.,PRCMD,PCHX
      EXT UEXFL,SSTBL,.MEM3,LTG,LOEND 
      EXT LST4,LST5,BPAG4,LOCC,BPLOC
      EXT .MEM1,.MEM4,LINK,ASR33,LOUT 
      EXT .MEM2,.MEM5,.MEM6,NAMR.,LISTO 
* 
      ENT PNAME,PNAMA,PRAMS 
* 
* 
.XFER EQU ?XFER 
* 
* 
*    .MEM. TABLE DEFINITIONS
* 
*       .MEM1 = FWABP 
*       .MEM2 = LWABP 
*       .MEM3 = FWAM
*       .MEM4 = LWAM
*       .MEM5 = FWAC
*       .MEM6 = LWAC
* 
* 
* 
*  ERROR CODES
* 
*  TB: SYMBOL TABLE/ID SEG OVERFLOW 
*  NA: PARAMETER NAME ERROR 
*  PA: PARAMETER ERROR
*  PR: PARAMETER PRIORITY ERROR 
*  IN: PARAMETER EXECUTION INTERVAL ERROR 
*  CH: INVALID CHANNEL NUMBER 
*  DR: INVALID DRIVER NAME
*  LU: INVALID DEVICE REFERENCE NUMBER
*  EQ: INVALID EQT. NO. IN INT RECORD 
*  AD: INVALID ENTRY POINT
*  DU: DUPLICATE PROGRAM NAME 
* 
* 
START JMP BEGIN     BEGINING OF RTSGN 
DRPTR BSS 1         PT READER DRIVER ADDRESS
DRKEY BSS 1         KEYBOARD OUPUT DRIVER ADDRESS 
DRHSP BSS 1         HS PUNCH DRIVER ADDRESS 
DRTTY BSS 1         TELETYPE INPUT DRIVER ADDRESS 
FWAM  DEF LOEND 
LWAM  BSS 1         END AVAIL. MEM - SET BY DRIVERS 
      BSS 1 
* 
TRANS DEF RTSGN     TRANSFER ADDR TO RTSGN
AREAD DEF READ
AOTLY DEF OTNLY     ADDRESS OF WRITE ONLY ROUTINE 
APARS DEF PARAM     ADDRESS OF PARAMETER INPUT CODE 
AGNIO DEF GENIO     ADDR OF I/O GENERATOR CODE
AGETA DEF GETAL     ADDR OF GETAL SUB.
AGETN DEF GETNA     ADDRESS OF GETNA SUB. 
AGETO DEF GETOC     ADDRESS OF GETOC SUB. 
ACONV DEF CONVD 
      SKP 
* 
*                                   PROGRAM CONSTANT FACTORS
ZERO  OCT 0 
N1    DEC -1
N2    DEC -2
N3    DEC -3
N4    DEC -4
N5    DEC -5
N6    DEC -6
N8    DEC -8
N9    DEC -9
N10   DEC -10 
N24   DEC -24 
N28   DEC -28 
N60   DEC -60 
N64   DEC -64 
N100  DEC -100
N1020 DEC -1020 
P2    DEC 2 
P3    DEC 3 
P4    DEC 4 
P5    DEC 5 
P6    DEC 6 
P7    DEC 7 
P8    DEC 8 
P9    DEC 9 
P11   DEC 11
P12   DEC 12
P13   DEC 13
P14   DEC 14
P15   DEC 15
P18   DEC 18
P27   DEC 27
P28   DEC 28
P58   DEC 58
P64   DEC 64
P99   DEC 99
P1647 OCT 1647
L6    EQU N6
L10   EQU N8
L12   EQU N10 
L60   OCT -60 
M7    EQU P7
M4    EQU P4
M60   OCT 60
M77   OCT 77
M177  OCT 177 
M377  OCT 377 
M1600 OCT 160000
M2000 OCT 2000
M7400 OCT 177400
M7000 OCT 177000
      SKP 
DPWRS DEF *+1 
P0100 DEC 10000 
P1000 DEC 1000
P100  DEC 100 
P10   DEC 10
P1    DEC 1 
OPWRS DEF *+1 
M0100 OCT 10000 
M1000 OCT 1000
M100  OCT 100 
M10   OCT 10
      OCT 1 
* 
      SUP 
BLANK OCT 040       BLANK 
MSIGN OCT 100000    NEGATIVE SIGN 
      SPC 3 
*     STARTS AND RESTARTS FROM 100B COME HERE.
      SPC 2 
BEGIN CLF 0         CLEAR THOSE INTERRUPTS
      LDA DRTTY      SET INPUT TO TTY 
      STA PARAD 
      LIA 1         GET THE SWITCH REGISTER 
      SSA,RSS       IS BIT 15 SET ? 
      CLA           NO, CLEAR TTY PUNCH FLAG
      STA ASR33     SET PUNCH FLAG
      JSB SPACE       PUT THE WORD ON A NEW LINE
      LDA P5
      LDB MES01 
      JSB AOTLY,I   TO THE TTY
      JMP TRANS,I   YES - START THE GENERATOR 
      SPC 1 
MES01 DEF *+1 
      ASC 3,RTSGN 
      HED RTSGN   BASE PAGE ROUTINES
* 
*                                   NEW LINE (CR,LF) ON TTY 
* 
*  THE SPACE SUBROUTINE IS USED TO SPACE UP THE TELEPRINTER.
* 
*  CALLING SEQUENCE:
*    A = IGNORED
*    B = IGNORED
*    JSB SPACE
* 
*  RETURN: CONTENTS OF A AND B ARE DESTROYED. 
* 
SPACE NOP 
      CLB,INB 
      CLA           SET CHARACTER COUNT = ZERO
      JSB AOTLY,I   OUTPUT CR, LF ON TTY
      JMP SPACE,I   RETURN
* 
      SKP 
*                                   PRINT: ERR XX 
* 
*  THE ERROR SUBROUTINE IS USED TO PRINT THE DIAGNOSTICS
*  FOR ALL ERROR MESSAGES.
* 
*  CALLING SEQUENCE:
*    A = 2-CHAR ASCII ERROR CODE
*    B = IGNORED
*    JSB ERROR
* 
*  RETURN: CONTENTS OF A AND B ARE DESTROYED. 
* 
ERROR NOP           PRINT ERROR MESSAGES
      STA AMERR+3   SET ERROR CODE INTO MESSAGE 
      LDA P6
      LDB AMERR     AMERR = MESSAGE ADDRESS 
      JSB AOTLY,I   PRINT ERROR MESSAGE 
      JMP ERROR,I   RETURN
* 
*                                   IRRECOVERABLE ERROR EXIT
* 
IRERR NOP 
      JSB ERROR     PRINT ERROR MESSAGE 
HLT0  HLT 0B        WAIT - PROGRAM CAN NOT CONTINUE 
      JMP *-1       IRRECOVERABLE ERROR 
* 
AMERR DEF *+1 
      ASC 3,ERR     ERROR MESSAGE = ERR + CODE
      SKP 
* 
*                     SET DATA TO ABS TAPE
* 
*  ROUTINE TO RESERVE AND SET CORE   ON THE 
*  LOADER PRODUCED ABSOLUTE OUTPUT. 
* 
*  CALLING SEQUENCE:
*    A = FINAL STARTING ADDRES
*    B = FINAL ENDING ADDRESS 
* 
*    SETAD = ADDRESS OF THE OUTPUT DATA BUFFER
* 
*    JSB SETCR
* 
*  RETURN: A AND B ARE DESTROYED
* 
SETCR NOP 
      STA TEMP1 
      CMA,INA 
      ADA SETAD     BUFFER ADDRESS
      STA PLKS      OFFSET ADDRESS
      LDA TEMP1     STARTING ADDRESS
      JSB PLK       OUTPUT ROUTINE IN THE LOADER
      JMP SETCR,I 
* 
      SKP 
* 
* 
*  ROUTINE TO FIND THE END OF THE SYMBOL TABLE
* 
*  CALLING SEQUENCE:
*    A = IGNORED
*    B = IGNORED
*    JSB SYEND
* 
*  RETURN: A = LAST ADDRESS OF SYMBOL TABLE PLUS ONE
* 
SYEND NOP 
      LDA LST       COUNT OF SYMBOLS
      ALS,ALS       MULT BY 4 
      ADA LST       MAKE IT 5 
      ADA LSTA1     ADDRESS OF LST START
      JMP SYEND,I   RETURN, A = ADDRESS OF LAST+1 
* 
      SKP 
* 
*  THE IPX ROUTINE ADDRESSES THE CURRENT 3 WORD ENTRY 
*  IN THE INTERRUPT PROGRAM TABLE FROM THE ADDRESS OF 
*  THE CURRENT ENTRY (BIDNT) . THE TABLE START ADDRESS
*  IS LWAM
* 
*  CALLING SEQUENCE:
*    A = IGNORED
*    B = IGNORED
*    JSB IPX
* 
*  RETURN, CONTENTS OF A AND B ARE DESTROYED
* 
IPX   NOP 
      LDA BIDNT     BUILD POINTERS
      STA IP1 
      INA 
      STA IP2 
      INA 
      STA IP3 
      ADA N5
      STA BIDNT 
      JMP IPX,I 
* 
* 
* 
LSERR LDA ERRTB 
      JSB IRERR     IRRECOVERABLE ERROR EXIT
* 
ERRTB ASC 1,TB      IDENT/LST OVERFLOW
* 
*                                   CLEAR BUFFER TO CALLING SEQ+1 
* 
*  THE BUFCL SUBROUTINE STUFFS A 64 WORD BUFFER WITH CALL+1 
* 
*  CALLING SEQUENCE:
*    A = IGNORED
*    B = ADDRESS OF BUFFER
*    JSB BUFCL
*    CALL+1 = DATA TO BE STUFFED
* 
*  RETURN: CONTENTS OF A AND B ARE DESTROYED. 
* 
BUFCL NOP 
      LDA N64 
      STA WDCNT     SET BUFFER LENGTH = 64
      LDA BUFCL,I    GET STUFF DATA 
      STA B,I       CLEAR BUFFER WORD 
      INB 
      ISZ WDCNT     ALL WORDS CLEAR?
      JMP *-3       NO - CONTINUE CLEARING
      ISZ BUFCL 
      JMP BUFCL,I   RETURN
* 
*  ROUTINT TO COMPARE TWO NAME BUFFERS
* 
* 
*  CALLING SEQUENCE:
*    A = ADDRESS OF SOURCE NAME- 3 ENTRIES
*    B = ADDRESS OF TABLE 3 ENTRIES 
*    JSB NACMP
* 
*  RETURN: A AND B ARE DESTROYED
*    (N+1) NAMES DO NOT COMPARE 
*    (N+2) NAMES COMPARE
* 
NACMP NOP 
      STA TEMP1     SAVE SOURCE ADDRESS 
      STB TEMP2     SAVE TABLE ADDRESS
      LDA N2        LOOP COUNT
      STA TEMP3 
NACM1 LDA TEMP1,I   SOURCE ENTRY
      CPA TEMP2,I   TABLE COMPARE 
      RSS           YES,COMPARE, LOOK NEXT
      JMP NACMP,I   NO IT DOESN'T RETURN
      ISZ TEMP1     BUMP SOURCE 
      ISZ TEMP2     BUMP TABLE
      ISZ TEMP3 
      JMP NACM1     TRY AGAIN 
      LDA TEMP2,I   FIRST TWO COMPARE, LOOK LAST
      AND M7400     LOOK UPPER ONLY 
      STA B 
      LDA TEMP1,I 
      AND M7400 
      CPA B 
      ISZ NACMP     BUMP RETURN FOR COMPARE!
      JMP NACMP,I 
* 
* 
*                                   SET INITIAL IPX ADDRESS 
* 
*  INIPX SETS THE ADDRESS OF THE FRIST ENTRY IN THE 
*  PROGRAM IDENT TABLE AS THE CURRENT ADDRESS.
* 
* 
*  CALLING SEQUENCE:
*    A = IGNORED
*    B = IGNORED
*    JSB INIPX
* 
*  RETURN:  A AND B ARE DESTROYED 
* 
INIPX NOP 
      LDA LWAM
      ADA N2
      STA BIDNT 
      JMP INIPX,I 
      HED RTSGN  BASE PAGE WORKING LOCATIONS AND BUFFERS
* 
ALBUF DEF LBUF
ATBUF DEF TBUF
INERA DEF INERR 
APNAM DEF PNAMA 
* 
WDCNT OCT 0         TEMPORARY WORD COUNTER
BIDNT BSS 1         ADDR OF FIRST IDENT 
* 
MAXC  BSS 1         MAX CHAR COUNT
TCHAR BSS 1         TEMPORARY CHAR SAVE AREA
OCTNO BSS 1         OCTAL DIGIT 
PIOC  BSS 1         ADDR. OF PRIVILEGED I/O CARD  $$
TBCHN BSS 1         TIME BASE GENERATOR CHNL
PARAD BSS 1         PARAMETER INPUT DRIVER ADDRESS
* 
IDAA  DEF *+1 
ID5   BSS 1         PRIORITY
ID6   BSS 1         RESOLUTION CODE 
ID7   BSS 1         EXECUTION MULTIPLE
ID8   BSS 1         HOURS 
ID9   BSS 1         MINUTES 
ID10  BSS 1         SECONDS 
ID11  BSS 1         TENS OF SECONDS 
PNAMA DEF PNAME 
PNAME NOP 
      NOP 
      NOP 
      BSS 3 
PRAMS DEC 3 
      DEC 99
      REP 6 
      NOP 
* 
* 
CURAL BSS 1 
LBUF  BSS 64
SETAD BSS 1         ABSOLUTE OUTPUT BUFFER ADDRESS
* 
      SPC 1 
TEMP1 NOP 
TEMP2 NOP 
TEMP3 NOP 
IPXSV BSS 1 
SRISV BSS 1 
IP1   BSS 1 
IP2   BSS 1 
IP3   BSS 1 
WONLY OCT 0          WRITE ONLY FLAG
SYMAD OCT 0          FWASM
CURAT BSS 1         CURRENT TBUF ADDRESS
TCNT  BSS 1         CURRENT TBUF COUNT
TBUF  BSS 4         TEMPORARY BUFFER
PPREL BSS 1 
TBREL BSS 1 
* 
KEYAD BSS 1         ADDRESS OF KEY WORD TABLE 
KEYCN BSS 1         TOTAL KEYWORD COUNT 
KEYCT BSS 1         CURRENT KEYWORD COUNT          $
* 
AEQT  BSS 1         ADDRESS OF EQUIPMENT TABLE
CEQT  BSS 1         NO. ENTRIES IN EQUIPMENT TABLE
* 
ASQT  BSS 1         ADDR OF DEVICE REFERENCE TABLE
CSQT  BSS 1         NO. ENTRIES IN DEV. REF. TABLE
* 
A$CIA BSS 1         ADDRESS OF $CIC ROUTINE 
PROCT BSS 1         NO. OF INT. ENTRIES 
STRAD BSS 1         $STRT START ADDRESS 
* 
* 
IDSAD BSS 1 
SYSAD BSS 1 
IDNOS BSS 1         ACTUAL ID'S FILLED
STRPA DEF *+1 
STRPN BSS 3         START UP PROG NAME
AINT  BSS 1         ADDRESS OF INTERRUPT TABLE
CINT  BSS 1         NO. ENTRIES IN INTERRUPT TABLE
* 
* 
ERR09 ASC 1,NA      PARAMETER NAME ERROR
ERR10 ASC 1,PA      PARAMETER ERROR 
ERR12 ASC 1,IN      PARAMETER INTERVAL ERROR
ERR24 ASC 1,CH      INVALID CHANNEL NO. IN EQT REC
ERR25 ASC 1,DR      INVALID DRIVER NAME 
ERR27 ASC 1,LU      INVALID DEVICE REF. NO. 
ERR31 ASC 1,EQ      INVALID EQT NO. IN INT RECORD 
ERR33 ASC 1,AD      INVALID ENTRY POINT IN INT RECORD 
PTERM ASC 1,EN
ERRDU ASC 1,DU
COMMA OCT 54        COMMA 
IJSB  JSB 0,I       I-JSB CODE FOR INTERRUPT LOCS 
UASCZ OCT 30000     UPPER ASCII ZERO CHAR 
CHARD OCT 104       ASCII CHAR D
CHARB OCT 102       ASCII CHAR B
CHART OCT 124       ASCII CHAR T
BIT14 OCT 40000     BIT 14=1
CDEC  ASC 1,C.
CHR$C ASC 1,$C
CHRIC ASC 1,IC
CHAVR ASC 1,VR
CHRPR ASC 1,PR
REQT  ASC 1,RE
RDRT  ASC 1,RD
RINT  ASC 1,RI
CHREN ASC 1,EN
CHRAB ASC 1,AB
UTCHR ASC 1,T 
UGCHR ASC 1,G 
USCHR ASC 1,S 
ERR11 EQU CHRPR     PARAMETER PRIORITY ERROR
CHREQ EQU ERR31 
MES28 DEF MS28
* 
MES25 DEF *+1 
      ASC 4,EQT TBL 
* 
MES26 DEF *+1 
      ASC 4,DRT TBL 
      OCT 6412
      ASC 2,LU#:
* 
MES42 DEF *+1 
      ASC 4,#ID SEG?
MES41 DEF *+1 
      ASC 5,PRIV. INT?
MES2  DEF *+1 
      ASC 6,REL SYS MODS
MES3  DEF *+1 
      ASC 6,REL RES LIB 
MES12 DEF *+1 
      ASC 4,INT PRGS
MES13 DEF *+1 
      ASC 4,IGNORE? 
      HED ** SYSTEM BASE PAGE COMMUNICATION AREA ** 
*** SYSTEM BASE PAGE  COMMUNICATION  AREA *** 
* 
* 
* SYSTEM TABLE DEFINITION * 
* 
.     EQU 1650B 
EQTA  DEF .+0      FWA  OF  EQUIPMENT TABLE 
EQT#  DEF .+1       # OF EQT ENTRIES
DRT   DEF .+2      FWA  OF  DEVICE REFERENCE TABLE
LUMAX DEF .+3       # OF LOGICAL UNITS (IN DRT) 
INTBA DEF .+4      FWA  OF  INTERRUPT TABLE 
INTLG DEF .+5       # OF INTERRUPT TABLE ENTRIES
TAT   EQU .+6      FWA  OF  TRACK ASSIGNMENT TABLE
KEYWD DEF .+7      FWA  OF  KEYWORD BLOCK 
* 
* I/O MODULE/DRIVER COMMUNICATION 
* 
EQT1  EQU .+8      ADDRESSES
EQT2  EQU .+9 
EQT3  EQU .+10      OF
EQT4  EQU .+11
EQT5  EQU .+12      CURRENT 
EQT6  EQU .+13
EQT7  EQU .+14      15-WORD 
EQT8  EQU .+15
EQT9  EQU .+16      EQT 
EQT10 EQU .+17
EQT11 EQU .+18      ENTRY 
EQT12 EQU .+81
EQT13 EQU .+82
EQT14 EQU .+83
EQT15 EQU .+84
* 
CHAN  EQU .+19     CURRENT DMA CHANNEL #
TBG   DEF .+20     I/O ADDRESS OF TIME-BASE CARD
SYSTY DEF .+21     EQT ENTRY ADDRESS OF SYSTEM TTY
* 
* SYSTEM REQUEST PROCESSOR /'EXEC' COMMUNICATION *
* 
RQCNT EQU .+22     # OF REQUEST PARAMETERS -1 
RQRTN EQU .+23      RETURN POINT ADDRESS
RQP1  EQU .+24      ADDRESSES 
RQP2  EQU .+25
RQP3  EQU .+26       OF REQUEST 
RQP4  EQU .+27
RQP5  EQU .+28       PARAMETERS 
RQP6  EQU .+29
RQP7  EQU .+30       (SET FOR MAXIMUM OF
RQP8  EQU .+31        8 PARAMETERS) 
* 
* DEFINITION OF SYSTEM LISTS (QUEUES) * 
* 
DORMT DEF .+32     ADDRESS OF 'DORMANT' LIST, 
SKEDD DEF .+33      'SCHEDULE' LIST,
SUSP3 EQU .+36      'AVAILABLE MEMORY' LIST,
SUSP4 EQU .+37      'DISC ALLOCATION'  LIST,
SUSP5 EQU .+38      'OPERATOR SUSPEND' LIST 
* 
* DEFINITION OF EXECUTING PROGRAM  ID SEGMENT' *
* 
XEQT  EQU .+39     ID SEGMENT ADDR. OF CURRENT PROG.
XLINK EQU .+40       'LINKAGE'
XTEMP EQU .+41       'TEMPORARY (5-WORDS) 
XPRIO EQU .+46       'PRIORITY' WORD
XPENT EQU .+47       'PRIMARY ENTRY POINT'
XSUSP EQU .+48       'POINT OF SUSPENSION'
XA    EQU .+49       'A REGISTER' AT SUSPENSION 
XB    EQU .+50       'B REGISTER' 
XEO   EQU .+51       'E AND OVERFLOW
* 
* SYSTEM MODULE COMMUNICATION FLAGS * 
* 
OPATN EQU .+52     OPERATOR/KEYBOARD ATTENTION FLAG 
OPFLG EQU .+53     OPERATOR COMMUNICATION FLAG
SWAP  EQU .+54     RT DISC RESIDENT SWAPPING FLAG 
DUMMY DEF .+55     I/O ADDRESS OF DUMMY INT. CARD 
IDSDA EQU .+56     DISC ADDR. OF FIRST ID SEGMENT 
IDSDP EQU .+57      -POSITION WITHIN SECTOR 
* 
* DEFINITION OF MEMORY ALLOCATION BASES * 
* 
BPA1  DEF .+58     FWA R/T DISC RES. BP LINK AREA 
BPA2  EQU .+59     LWA R/T DISC RES. BP LINK AREA 
BPA3  EQU .+60     FWA BKG DISC RES. BP LINK AREA 
LBORG DEF .+61     FWA OF RESIDENT LIBRARY AREA 
RTORG DEF .+62     FWA OF REAL-TIME AREA
RTCOM DEF .+63     LENGTH OF REAL TIME COMMON AREA
RTDRA EQU .+64     FWA OF R/T DISC RESIDENT AREA
AVMEM DEF .+65     FWA OF SYSTEM AVAILABLE MEMORY 
BKORG DEF .+66     FWA OF BACKGROUND AREA 
BKCOM EQU .+67     LENGTH OF BACKGROUND COMMON AREA 
BKDRA EQU .+68     FWA OF BKG DISC RESIDENT AREA
* 
* UTILITY PARAMETERS
* 
TATLG EQU .+69     LENGTH OF TRACK ASSIGNMENT TABLE 
TATSD EQU .+70      # OF TRACKS ON SYSTEM DISC
SECT2 EQU .+71      # SECTORS/TRACK ON LU 2 (SYSTEM)
SECT3 EQU .+72      # SECTORS/TRACK ON LU 3 (AUX.)
DSCLB EQU .+73     DISC ADDR OF RES LIB ENTRY PTS 
DSCLN EQU .+74      # OF RES LIB ENTRY POINTS 
DSCUT EQU .+75     DISC ADDR OF RELOC UTILITY PROGS 
DSCUN EQU .+76      # OF RELOC UTILITY PROGS
LGOTK EQU .+77     LOAD-N-GO: LU,STG TRACK,# OF TRKS
LGOC  EQU .+78      CURRENT LGO TRACK/SECTOR ADDRESS
SFCUN EQU .+79     SOURCE FILE LU AND DISC ADDRESS
MPTFL EQU .+80      MEMORY PROTECT ON/OFF FLAG (0/1)
FENCE EQU .+85      MEM PROTECT FENCE ADDRESS 
BKLWA DEF .+87     LWA OF MEMORY IN BACKGROUND
BPCLR DEF .+44
      HED RTSGN  INITIALIZATION 
* 
*  INITIAL TRANSFER IS MADE TO RTSGN BY SETTING 100(8)
*  IN THE P REGISTER AND PRESSING RUN. IF ANY ERRORS ARE
*  DETECTED DURING RTSGN, IT MAY BE RESTARTED AT 100(8).
* 
*  IF THE TTY PUNCH IS TO BE USED, SET BIT 15 OF THE S REGISTER 
*  THEN RTSGN WILL HALT BEFORE EACH OUTPUT OPERATION AS FOLLOWS:
* 
*    HLT -7  = TURN PUNCH ON
*    HLT -70 = TURN PUNCH OFF 
* 
* 
*  THE FOLLOWING MESSAGES ARE PRINTED DURING THE INITIALIZATION 
*  PHASE, WITH THE SPECIFICATIONS FOR EACH VALID RESONSE. 
* 
* 
*  MESSAGE         RESPONSE 
* 
*  PRAM INPUT?      ENTER DEVICE LU 
* 
*  TBG CHNL?       ENTER 2 OCTAL DIGITS 
* 
*  PRIV. INT.       ENTER 2 OCTAL DIGITS    $$
* 
*  FWA BP?         ENTER 4 OCTAL DIGITS 
* 
*  LWA MEM?        ENTER 5 OCTAL DIGITS 
* 
*  FWA SYS MEM?    ENTER 5 OCTAL DIGITS 
* 
* 
RTSGN CLC 0,C       TURN OFF ALL I/O,INTERRUPTS 
      JSB SPACE     GET A NEW 
      JSB LTG       OUTPUT LEADER 
      LDA M2000     SET UP FWAM 
      STA .MEM3 
      LDA P1647 
      STA .MEM2     SET LWABP 
      CLA 
      STA LST       CLEAR THE SYMBOL TABLE COUNT
      STA NAMR. 
      LDA LISTO 
      AND N9        CLEAR BIT 3, FOR NEW HEADING
      STA LISTO 
* 
*                                   SET PARAMETER INPUT UNIT
* 
PARIN LDA P10 
      LDB MESS6     MESS6 = ADDR: PRAM INPT?
      JSB AREAD,I   PRINT MESSAGE, GET REPLY
      JSB SINIT     GET CODE, ANALYSE 
      JMP PARIN     REPEAT PARAMETER INPUT
      STA PARAD     PARAD = PRAM INPUT DRIVER ADDR
*                                   SET TIME BASE GENERATOR CHANNEL 
      JSB SPACE     NEW LINE
CHNLT LDA P9
      LDB MES30     MES30 = ADDR: TBG CHNL? 
      JSB AREAD,I   PRINT MESSAGE, GET REPLY
      LDA P2        SET FOR 2 OCTAL DIGITS INPUT
      JSB DOCON     GET DIGITS, RETURN OCTAL
      JMP CHNLT     REPEAT INPUT
      STA TBCHN     SET TBG CHANNEL NO. 
* 
*                                  GET PRIV. INT. CARD ADDR.
      JSB SPACE     NEW LINE                      $$
DUMY  LDA P10                                     $$
      LDB MES41     MES41 = ADDR: PRIV. INT. CARD?$$
      JSB AREAD,I   PRINT MESSAGE, GET REPLY      $$
      LDA P2        SET FOR 2 OCTAL DIGITS INPUT  $$
      JSB DOCON     GET DIGITS                    $$
      JMP DUMY      -ERROR, REPEAT INPUT.         $$
      STA PIOC      SET ADDR. OF DUMMY CARD.      $$
* 
* 
* 
*                                   SET FWA BP LINKAGE
FWENT JSB SPACE                                    $
      LDA P7                                      $ 
      LDB MES27     MES27 = ADDR: FWA BP LINKAGE? 
      JSB AREAD,I   PRINT AND GET REPLY 
      LDA P4
      JSB AGETO,I   GET 4 OCTAL DIGITS, CONVERT 
      JMP LNKER     INVALID DIGIT ENTERED 
      JSB AGETA,I   GET NEXT CHAR FROM LBUF 
      CPA ZERO      END OF BUFFER?
      JMP SETFB     YES - SET FWA BP LINKAGE
LNKER JSB INERA,I 
      JMP FWENT     REPEAT MESSAGE
SETFB LDB OCTNO     GET FWA BP
      SZB,RSS       SKIP - VALID (NON-ZERO) FWA BP
      JMP LNKER     REPEAT FWA BP LINKAGE INPUT 
      STB .MEM1 
      ADB N1
      STB LWABP     SAVE FOR INT PROCESSOR
      JSB SPACE     NEW LINE
* 
      LDA ALBUF     SET OFFSET ADDRESS
      STA SETAD     TO THE CLEARED BUFFER 
      LDB ALBUF     ADDRESS OF IN BUFFER
      JSB BUFCL     CLEAR BUFFER TO OCTAL ZEROS 
      OCT 0 
      LDA EQTA      START ADDR OF AREA TO BE CLEARED
      LDB BPCLR     END ADDRESS 
      JSB SETCR     CLEAR LOWER HALF
      LDA BPCLR 
      LDB BKLWA 
      JSB SETCR     CLEAR UPPER HALF
SMLWA LDA P8
      LDB MESS3     MESS3 = ADDR: LWA MEM?
      JSB AREAD,I   PRINT MESSAGE, GET REPLY
      LDA P5        SET FOR 5 OCTAL DIGITS INPUT
      JSB DOCON     GET DIGITS, RETURN OCTAL
      JMP SMLWA     REPEAT INPUT
      LDA OCTNO     GET LWAM
      STA TEMP3     SAVE FOR FWA SYS MEMORY PROCESSING
      STA SETAD,I   PUT IN BUFFER 
      LDA BKORG     ADDRESS OF BK LWAM
      LDB A         ADDRESS INTO B
      JSB SETCR     OUTPUT ABSOLUTE 
      LDA BKLWA     THE OTHER BP REFERENCE
      LDB A 
      JSB SETCR     OUTPUT TO ABS 
* 
      JSB SPACE 
GETAV LDA P11       PRINT:
      LDB MES34     "FWA SYS MEM?" 
      JSB AREAD,I   GET THE ANSWER
      LDA P5        SET FOR 5 OCTAL DIGITS. 
      JSB DOCON     CONVERT TO OCTAL. 
      JMP SYMER     -ERROR. 
      JMP SETAV     OK , SET BOUNDARY.
* 
SYMER JSB INERA,I 
      JMP GETAV     -REPEAT REQUEST 
* 
SETAV LDA OCTNO     IF NUMBER 
      STA SYMAD 
      SZA,RSS       EQ 0, LEAVE FWA 
      JMP SETA1 
      LDB TEMP3     SUBTRACT ORIG.
      CMA,INA 
      ADB A          NEW VALUE
      SSB            ERROR IF 
      JMP SYMER      NEW > LWAM 
*                                        CLEAR RTS BP AREA
      LDA SYMAD     GET START OF SYS MEMORY 
      ADA N1        ADJUST FOR LWAM 
      RSS 
SETA1 LDA TEMP3     DEFAULT TO LWAM 
      STA .MEM4     UPPER LOAD BOUNDS 
*                                         SET PRIV CHAN IN BP 
      LDA PIOC      PRIV. INT CHANNEL 
      STA SETAD,I   PUT IN BUFFER 
      LDA DUMMY     ADDRESS WHERE TO GO IN BP 
      LDB A 
      JSB SETCR     GO SET IT IN BP 
*                                        GO REL SYS MODULES 
      JSB SPACE     NEW LINE
      LDA P12       PRINT:
      LDB MES2      "REL SYS MODS"
      JSB AOTLY,I   PRINT 
*                                     RELOCATE FROM RTS/2100 LOADER 
      LDA LWAM      SET START OF INT PROG NAME TBL
      STA OPT.3     LAST ADDRESS OF LST STORAGE 
      LDA P2
      STA .XFER     NON ZERO TO LOAD SYS MODULES
      JSB CLBPL     CLEAR BASE PAGE LINKS 
      STA PNAME     CLEAR NAME FLAG 
      STA LOCC      CLEAR LOCC IN LOADER
      STA BPLOC     SAME FOR BPLOC
      JSB PRCMD     GO RELOCATE SYS MODULES 
      JMP BEGIN     ERROR FROM LOADER, TRY AGAIN
      LDA LOCC      UPDATE FWAM 
      STA .MEM3     FWAM
      LDA BPLOC     UPDATE FWABP
      STA .MEM1 
      LDA LST 
      STA LSTSV     SAVE FOR RELOCATION ERROR 
      LDA UEXFL     WERE THERE ANY UNDEFINED? 
      SZA,RSS 
      JMP *+4       NO CONTINUE 
RELSE LDA ERR33     YES,PRINT:
      JSB ERROR     "ERR AD"
      JMP BEGIN     START RTSGN OVER
      LDB A$STR 
      JSB SSTBL     WAS $STRT LOADED? 
      JMP RELSE     NO, ERROR,
      LDA LST4      YES, GET STARTING ADDRESS 
      LDA A,I 
      STA STRAD     SAVE IT FOR CLEAN-UP AT END OF RTSGN
      LDB A$CIC     $CIC NAME 
      JSB SSTBL     WAS $CIC LOADED?
      JMP RELSE     NO, ERROR, START OVER 
      LDA LST4      BUILD A BP LINK FOR $CIC
      LDA A,I 
      STA SETAD,I   OUTPUT BP LINK
      LDA .MEM1                 FOR $CIC
      LDB A 
      JSB SETCR 
      LDB LST5
      LDA .MEM1 
      STA A$CIA     SAVE FOR JSB INSTRUCTION
      STA B,I 
      ISZ .MEM1     BUMP TO NEXT LINK 
      JMP AGNIO,I   YES, GO BUILD I/O TABLES
* 
* 
* 
*                                   NUMERICAL INPUT CONTROL 
* 
*  THE DOCON SUBROUTINE ANALYZES THE INPUT FOR THE
*  CHANNEL NO., TBG CHANNEL NO., AND LAST 
*  WORD OF AVAILABLE MEMORY.
* 
*  CALLING SEQUENCE:
*    A = MAX NO. OF CHARACTERS PERMITTED IN RESPONSE. 
*        THE SIGN OF A DETERMINES THE CONVERSION FROM 
*        ASCII TO OCTAL (POS.) OR DECIMAL (NEG.). 
*    B = IGNORED
*    JSB DOCON
* 
*  RETURN:
*    (N+1): CONTENTS OF A AND B ARE DESTROYED.  AN INVALID
*           CHARACTER HAS BEEN DETECTED IN THE RESPONSE, OR 
*           THE RESPONSE CONTAINS AN INVALID NO. CHARACTERS.
*           THE MESSAGE IS TO BE REPEATED ON RETURN.
*    (N+2): A = CONVERTED RESULT
* 
DOCON NOP 
      JSB AGETO,I   GET OCTAL/DECIMAL, RETURN OCTAL 
      JMP *+4       INVALID DIGIT 
      JSB AGETA,I   GET NEXT CHAR FROM LBUF 
      CPA ZERO      CHAR = ZERO? (END OF BUFFER)
      JMP *+3       YES - CONTINUE
      JSB INERR     INVALID DIGIT ENTRY 
      JMP DOCON,I   RETURN
      ISZ DOCON     INCR RETURN ADDRESS 
      LDA OCTNO     GET CONVERTED NUMBER
      JMP DOCON,I   RETURN
      SKP 
* 
*                                   INVALID TTY RESPONSE
* 
*  THE INERR SUBROUTINE PRINTS THE DIAGNOSTIC FOR INVALID 
*  RESPONSES DURING THE INITIALIZATION SECTION. 
* 
*  CALLING SEQUENCE:
*    A = IGNORED
*    B = IGNORED
*    JSB INERR
* 
*  RETURN: CONTENTS OF A AND B ARE DESTROYED. 
* 
INERR NOP 
      LDA ERR10     SET INVALID DEVICE ERROR CODE 
      JSB ERROR     PRINT ERROR MESSAGE 
      JMP INERR,I   RETURN
* 
*                                 CLEAR BASE PAGE LINKS 
* 
*  CALLING SEQUENCE:
*    A = IGNORED
*    B = IGNORED
*    JSB CLBPL
* 
* 
*  RETURN:  A IS CLEARED, B IS DESTROYED
* 
* 
CLBPL NOP 
      LDA N1020     CLEAR 
      STA WDCNT         BASE PAGE 
      CLA 
      LDB BPAG4               LINKAGE 
      STA B,I                      AREA 
      INB                             FOR LOADER. 
      ISZ WDCNT 
      JMP *-3 
      JMP CLBPL,I   ALL DONE, RETURN
      SKP 
* 
*                                   ALPHABETIC INPUT CONTROL
* 
*  THE SINIT SUBROUTINE ANALYZES THE RESPONSE FOR THE PROGRAM,
*  LIBRARY, AND PARAMETER INPUT.
* 
*  CALLING SEQUENCE:
*    A = IGNORED
*    B = IGNORED
*    JSB SINIT
* 
*  RETURN:
*    (N+1): AN INVALID SET OF CHARACTERS (NOT 1(TTY),5(PTR))
*           OR NO. OF CHARACTERS HAS BEEN DETECTED. 
*           AFTER PRINTING THE DIAGNOSTIC, A RETURN IS MADE TO
*           PERMIT THE MESSAGE TO BE REPEATED.  THE CONTENTS
*           OF A AND B ARE DESTROYED. 
*    (N+2): A = ADDRESS OF DESIGNATED INPUT DRIVER
*           B = DESTROYED 
* 
SINIT NOP 
      CLA,INA       SET MAX NO. DIGITS FOR GETNA
      JSB AGETN,I   MOVE LBUF TO TBUF 
      JSB AGETA,I   GET NEXT CHAR FROM LBUF 
      CPA ZERO      CHAR = ZERO? (END OF BUFFER)
      JMP *+3       YES - CONTINUE
CODIN JSB INERR     INVALID TTY RESPONSE
      JMP SINIT,I   RETURN - ERROR
      LDA TBUF      GET 2-CHARACTER CODE
      CPA TYTYP     TYPE = TTY? 
      JMP TYUN      YES - UNIT IS TELETYPE
      CPA PTTYP     TYPE = PT READER? 
      JMP PTUN      SET UNIT = PT READER
      JMP CODIN     INVALID PT, MT OR TY
TYUN  LDA DRTTY     DRTTY = TTY INPUT DRIVER ADDRESS
      RSS 
PTUN  LDA DRPTR     DRPTR = PT READER DRIVER ADDR 
PT.DV ISZ SINIT     INCR RETURN ADDRESS 
      JMP SINIT,I   RETURN
* 
TYTYP OCT 61
PTTYP OCT 65
* 
MES27 DEF MS27
MES34 DEF SYMES 
SYMES ASC 6,FWA SYS MEM?
MS27  ASC 4,FWA BP? 
MESS3 DEF *+1 
      ASC 5,LWA MEM?
MESS6 DEF *+1 
      ASC 5,PRAM INPT?
MES30 DEF *+1 
      ASC 5,TBG CHNL? 
A$STR DEF *+1 
      ASC 3,$STRT 
A$CIC DEF *+1 
      ASC 3,$CIC
* 
* 
ERPNT NOP           PRINT CONTENTS OF LBUF
      LDB PARAD     GET ADDRESS OF PARAMETER UNIT 
      CPB DRTTY     DEVICE = TTY? 
      JMP *+4       YES - OMIT PRINTING ON TTY
      LDA PARNO     PARNO = PARAMETER RECORD LENGTH 
      LDB ALBUF     ALBUF = BUFFER ADDRESS
      JSB DRKEY,I   PRINT PARAMETER RECORD
      JMP ERPNT,I   RETURN
      HED RTSGN  GENERATE I/O TABLES
      ORR 
* 
*                                   GENERATE I/O TABLES 
* 
*  THIS SECTION OF CODE GENERATES THE I/O TABLES
*  FOR THE SYSTEM.  THESE INCLUDE THE EQUIPMENT TABLE (EQT),
*  STANDARD DEVICE REFERENCE TABLE (DRT), AND INTERRUPT TABLE.
* 
*  THE EQT RECORDS HAVE THE FOLLOWING FORMAT: 
* 
*    N1,DVRN2<,D><,B><,T=>
* 
*  N1 = CHANNEL NO. (2 OCTAL DIGITS)
*  N2 = DRIVER CLASS. CODE (2 OCTAL DIGITS) 
*  D = DMA FLAG (OPTIONAL)
*  B = BUFFERING FLAG (OPTIONAL)
*  T = TIME-OUT VALUE TO BE ENTERED 
* 
*    IF T= IS ENTERED, A VALUE FOR THE DEVICE'S TIME-OUT
*    CLOCK MUST NEXT BE ENTERED.
*    THE OPERATOR MUST ENTER A POSITIVE DECIMAL NUMBER
*    OF UP TO FIVE DIGITS.  THIS IS THEN THE NUMBER OF
*    TIME BASE GENERATOR INTERRUPTS (10 MSEC INTERVALS) 
*    BETWEEN THE TIME IO IS INITIATED ON THE DEVICE AND 
*    THE TIME AFTER WHICH THE DEVICE SHOULD HAVE INTERRUPTED. 
*    IF THE DEVICE HAS NOT INTERRUPTED BY THIS TIME, IT 
*    IS CONSIDERED TO HAVE TIMED-OUT. 
* 
* 
*  EACH DRT RECORD CONSISTS OF A 2-DIGIT NO. SPECIFYING THE 
*  CORRESPONDING ENTRY IN THE EQUIPMENT TABLE 
*  AND AN OPTIONAL 1-DIGIT NO. SPECIFYING A 
*  SUBCHANNEL WITHIN THAT ENTRY.  FOR EXAMPLE, IN 
*  RESPONSE TO THE MESSAGE:  5 = ?, THE RESPONSE 6 INDICATES THAT 
*  THE LOGICAL UNIT NO. 5 IS TO USE DEVICE 6 IN EQT.
*  WHEREAS THE RESPONSE 6,2 INDICATES THAT THE
*  LOGICAL UNIT NO. 5 IS TO USE SUBCHANNEL 2 OF 
*  DEVICE 6 IN EQT. 
* 
* 
*  THE INT RECORDS HAVE ONE OF THE FOLLOWING FORMATS: 
* 
*    N1,EQT,N2
*    N1,PRG,NAME
*    N1,ENT,ENTRY 
*    N1,ABS,N3
* 
*  N1 = CHANNEL NO. (2 OCTAL DIGITS - MUST BE IN INCREASING ORDER)
*        EXCEPTION:    IF N1 = 04 (POWER - FAIL), 
*        THIS ENTRY DOES NOT HAVE TO BE IN ORDER.  ALSO,
*        ONLY AN ENT OR AN ABS TYPE ENTRY IS ACCEPTED 
*        FOR N1 = 04. 
*  N2 = EQT NO. 
*  NAME = PROGRAM NAME TO BE SCHEDULED
*  ENTRY = ENTRY POINT TO WHICH TRANSFER IS TO BE MADE
*  N3 = ABSOLUTE VALUE (6 OCTAL DIGITS) 
* 
* 
GENIO CLA 
      STA IDNOS     ID'S MADE 
      STA STRPN     START UP PROGRAM FLAG 
      STA CEQT      NOS OF EQT'S
      STA PROCT     NOS OF INT PROG ENTRIES 
      JSB SPACE     NEW LINE
      LDA .MEM3     FWAM
      STA AEQT      EQT STARTING ADDRESS
      STA PPREL 
      LDA P7        PRINT:
      LDB MES25     "EQT TBL" 
      JSB AOTLY,I 
      JSB SPACE     NEW LINE
* 
SEQT  JSB SPACE 
      LDA CEQT      EQT COUNT 
      INA 
      LDB MES6A     STUFF INTO PRINT BUFFER 
      JSB STFNM 
      LDA P9        PRINT:
      LDB MES6      "EQT XX =?" 
      JSB AREAD,I   AND INPUT DRIVER REQUEST
      LDA N2
      JSB GETNA     MOVE 2 CHARS TO TBUF
      CPA PTERM     CHARS= END ?
      JMP SSQTI     YES, TRY TO END 
      CPA REQT      REPEAT? 
      JMP GENIO     YES 
* 
      JSB GINIT     INITIALIZE BUFFER SCAN
      LDA P2
      JSB GETOC     GET 2 OCTAL DIGITS, CONVERT 
      JMP IOERR     INVALID DIGIT 
      JSB GETAL     GET NEXT CHAR FROM LBUF 
      CPA BLANK     CHAR = COMMA? 
      JMP CLDBU     YES - SET CHNL NO., CLEAR D,B,U 
IOERR LDA ERR24     SET CODE = INVALID CHNL IN EQT
      JSB ERROR     PRINT DIAGNOSTIC
      JMP SEQT      GET NEXT EQT RECORD 
* 
CLDBU LDB OCTNO     GET I/O CHANNEL NO. 
      STB IOADD     SET I/O ADDRESS 
      ADB N8        IS CHAN EQ. LESS THAN 10? 
      SSB 
      JMP IOERR     YES, CHANNEL ERROR
      CLA 
      STA TIMWD     CLEAR TIME WORD 
      STA IODMA     CLEAR DMA FLAG
      STA IOBUF     CLEAR AUTOMATIC BUFFERING FLAG
      CCA 
      STA TFLAG     CLEAR TIME-OUT FLAG 
      CLA,INA 
      JSB GETNA     MOVE 1 CHAR TO RH TBUF POSITION 
      CPA CHARD     CHAR = D? 
      RSS           YES - CONTINUE
      JMP DVERR     INVALID DRIVER NAME 
      LDA N2
      JSB GETNA     MOVE 2 CHARS TO TBUF (CHARS 2,3)
      CPA CHAVR     CHARS = VR? 
      JMP STYPE     YES - GET DRIVER TYPE 
DVERR LDA ERR25     SET CODE = INVALID DRIVER NAME
      JSB ERROR     PRINT DIAGNOSTIC
      JMP SEQT      GET NEXT EQT RECORD 
STYPE LDA N2
      JSB GETNA     MOVE 2 CHARS TO TBUF
      STA ASTYP     SAVE 2 ASCII CHARS FOR I.XX,C.XX
      STA ASCYP     SAVE FOR C.XX COMPARE 
      CCA 
      ADA CURAL     ADJUST CURRENT LBUF ADDR
      STA CURAL     RESET CURAL TO CONVERT TYPE 
      LDA P2
      JSB GETOC     GET 2 OCTAL CHARS, CONVERT
      JMP DVERR     INVALID DRIVER NAME 
      LDB OCTNO     GET DRIVER TYPE 
      BLF,BLF       ROTATE TO UPPER B 
      STB IOTYP     SET DRIVER TYPE 
      JSB GETAL     GET NEXT CHAR FROM LBUF 
      CPA ZERO      END OF BUFFER?
      JMP LISCN     SCAN FOR I.XX, C.XX 
      CPA BLANK     CHAR = COMMA? 
      RSS           YES - CONTINUE
      JMP DVERR     NO - INVALID DRIVER NAME
* 
      CCA 
      STA DFLAG     SET DMA-IN FLAG 
      STA BFLAG     SET BUFFERING-IN FLAG 
* 
INDBU CCA 
      STA CMFLG     SET COMMA FLAG = NO COMMA IN
      JSB GETAL     GET NEXT CHAR FROM LBUF 
      CPA CHARD     CHAR = D? 
      JMP SEDMA     YES - SET DMA CODE
      CPA CHARB     CHAR = B? 
      JMP SETBU     YES - SET BUFFERING CODE
      CPA CHART     CHAR = T? 
      JMP SETIM      YES - SET TIME-OUT FLAG
UNERR LDA ERR10     SET CODE = INVALID D,B,T
      JSB ERROR     PRINT DIAGNOSTIC
      JMP SEQT      GET NEXT EQT RECORD 
SETIM ISZ TFLAG     SKIP - FIRST T ENTERED
      JMP UNERR     DUPLICATE T'S ENTERED 
      JSB GETAL     GET NEXT CHAR 
      CPA AEQUL     IS IT "=" ? 
      RSS           YES ACCEPT TIME VALUE 
      JMP UNERR     NO, ITS AN ERROR
      LDA N5        5 CHAR VALUE
      JSB GETOC     FETCH TIME OUT TIME 
      JMP UNERR     NUMBER IS NO GOOD 
      SZA           WAS ZERO INPUT? 
      CMA           ONE'S COMPLEMENT FOR THAT RTS 
      STA TIMWD     SAVE FOR OUTPUT 
EQTST JSB GETAL     GET NEXT CHAR FROM LBUF 
      CPA ZERO      END OF BUFFER?
      JMP LISCN     SCAN FOR I.XX, C.XX 
      CPA BLANK     CHAR = COMMA? 
      JMP INDBU     YES - GET NEXT D,B,U, ENTRY 
      JMP UNERR     NO - INVALID D,B,U CHARACTER
* 
SEDMA ISZ DFLAG     SKIP - FIRST D ENTERED
      JMP UNERR     DUPLICATE D'S ENTERED 
      LDA MSIGN     SET BIT 15 = 1 FOR DMA FLAG 
      STA IODMA     SET DMA CODE
      JMP EQTST     TEST FOR NEXT OPERAND 
* 
SETBU ISZ BFLAG     SKIP - FIRST B ENTERED
      JMP UNERR     DUPLICATE B'S ENTERED 
      LDA BIT14     SET BIT14 = 1 
      STA IOBUF     SET AUTOMATIC BUFFERING CODE
      JMP EQTST     TEST FOR NEXT OPERAND 
* 
LISCN LDB ASIDR     ADDRESS OF I.XX BUFFER
      JSB SSTBL     IS IT IN THE SYMBOL TABLE?
      JMP DVERR     NO
      LDA LST4      YES, GET THE ADDRESS
      LDA A,I 
      STA I.XX      SAVE FOR OUTPUT 
      LDB ASCDR     ADDRESS OF C.XX BUFFER
      JSB SSTBL     IS IT IN SYMBOL TABLE?
      JMP NOCXX     NO, USE ADDRESS OF I.XX 
      LDA LST4      YES, GET ADDRESS
      LDA A,I 
STCXX STA C.XX      SAVE DRIVER EXIT POINT
* 
      LDB ALBUF     CLEAR OUTPUT BUFFER 
      JSB BUFCL 
      OCT 0 
      LDA IODMA     GET DMA CODE
      IOR IOBUF     ADD BUFFERING CODE
      IOR IOADD     ADD CHANNEL NO. 
      STA LBUF+3    OUTPUT BUFFER 
      LDA I.XX
      STA LBUF+1    INT. ADDRESS
      LDA C.XX
      STA LBUF+2    COMPLETE ADDRESS
* 
      LDA IOTYP     GET EQUIPMENT TYPE CODE 
      AND M7000     ISOLATE UPPER 7 BITS
      SZA           SKIP - TYPE = 0,I 
      CLA,RSS       SET STATUS = 0, SKIP
      LDA BLANK     SET STATUS = 40(8)
      IOR IOTYP     ADD EQUIPMENT TYPE CODE 
      STA LBUF+4
      LDA TIMWD     WAS A TIME INPUT ?
      SZA 
      STA LBUF+13   YES, SAVE IT IN EQT 
      LDA PPREL     GET CURRENT EQT ADDRESS 
      LDB A 
      ADB P14       ADDRESS OF END OF EQT 
      STB PPREL 
      JSB SETCR     OUTPUT IN ABS 
      ISZ PPREL     BUMP TO NEXT EQT ENTRY
      ISZ CEQT      INCR EQT ENTRY COUNT
      JMP SEQT      PROCESS NEXT EQT RECORD 
* 
      SPC 1 
NOCXX LDA I.XX      C.XX NOT FOUND SO USE 
      JMP STCXX     I.XX ADDRESS
* 
SSQTI LDA CEQT      ANY EQT'S BEEN LOADED?
      SZA 
      JMP SSQT      YES, CAN END
      LDA ERR10     NO,AT LEAST ONE REQUIRED
      JSB ERROR     PRINT: "ERR PA" 
      JMP SEQT      START OVER
* 
* 
* 
*                                   SET DEVICE REFERENCE TABLE (SQT)
* 
SSQT  JSB SPACE     NEW LINE
      LDA CEQT      GET NO. OF EQT'S
      ALF           MULT X16
      LDB CEQT      NO. OF EQT'S
      CMB,INB 
      ADA B         SUB. FOR X15
      ADA .MEM3     ADD ORIG REL ADDRESS
      STA PPREL     UPDATE REL ADDRESS
      STA ASQT      SAVE SQT ADDRESS
      CLA,INA 
      STA CSQT      SET SQT COUNT = 1 
      LDA P13 
      LDB MES26     MES26 = ADDR: *DEV REF TABLE
      JSB AOTLY,I   PRINT: * DEVICE REFERENCE TABLE 
* 
DEVRE LDA CSQT      GET CURRENT DEV REF NO. 
      LDB MES28 
      JSB STFNM     STUFF NUM IN BUFFER 
      JSB SPACE     NEW LINE
      LDA P11 
      LDB MES28     MES28 = ADDR: XX = EQT #? 
      JSB AREAD,I   GET SQT RECORD FROM TTY 
      LDA N2
      JSB GETNA     MOVE 2 CHARS TO TBUF
      CPA PTERM     CHARS = /E? 
      JMP SINTI     YES - SET INTERRUPT TABLE 
      CPA RDRT      REPEAT DRT? 
      JMP SSQT      YES, START OVER 
      CPA REQT      REPEAT EQT? 
      JMP GENIO     YES, GO BACK
      JSB GINIT     RE-INITIALIZE LBUF SCAN 
      LDA N3
      JSB GETOC     GET 2 DECIMAL DIGITS, CONVERT 
      JMP DRERR     INVALID DIGIT ENTERED 
      STA TEMPL     SAVE DEV. REF. NO.
      SZA,RSS       IF NO CHANNEL 
      JMP NOSUB     IGNOR SUBCHANNEL
      LDA CMFLG     COMMA ENCOUNTERED?
      SZA            YES - GO GET SUBCHANNEL
      JMP NOSUB      NO - DEFAULT IT TO ZERO
      INA 
      JSB GETOC     GET ONE OCTAL DIGIT 
      JMP DRERR 
      JSB GETAL     GET NEXT CHAR 
      CPA ZERO      END OF BUFFER?
      RSS           YES 
      JMP DRERR     NO, SHOULD BE BUT ISN'T 
      LDA OCTNO     GET SUB CHANNEL 
      RSS           SKIP OVER DEFAULT 
NOSUB CLA           DEFAULT TO ZERO 
      STA TEMPS     SAVE SUB CHANNEL
      ALF,ALF       SET SUBCHANNEL NO.
      ALF,RAR        INTO BITS 13 - 11
      STA TEMPH     SAVE SUBCHANNEL NO. 
      LDA TEMPL     GET DEV. REF. NO. 
      CMA,INA       COMPLEMENT
      ADA CEQT      ADD NO. EQT ENTRIES 
      SSA           SKIP IF VALID DEV. REF NO.
      JMP DRERR     INVALID DEV. REF. NO. (NO EQT)
      LDA TEMPL     GET DEV. REF NO.
      LDB CSQT      GET CURRENT SQT NO. 
      CPB P1        FIRST ENTRY?
      RSS           YES - CONTINUE
      JMP SETQT     PUT OUT DEV REF NO. TO SQT
      SZA,RSS       SKIP IF DEV REF IS NOT ZERO 
      JMP DRERR     INVALID DEV. REF. NO. 
      CMA,INA       COMPLEMENT CURRENT DEV. REF. NO.
      LDB AEQT      GET ADDRESS OF EQT
      INA,SZA,RSS   SKIP - DEV. REF. NOT 1
      JMP *+4       SET TTY CHANNEL NO. = FIRST EQT 
      ADB P15       ADJUST CURRENT EQT ADDRESS
      INA,SZA       SKIP - EQT FOUND
      JMP *-2       CONTINUE CURRENT EQT SEARCH 
      STB LBUF+1    SET EQT ADDR IN TTY CHANNEL 
      LDA TBCHN     TBG CHANNEL 
      STA LBUF      PUT IN OUT PUT BUFFER 
      LDA TBG       ADDRESS WHERE TO GO 
      LDB SYSTY 
      JSB SETCR     OUTPUT IN ABSOLUTE
* 
SETQT LDA TEMPL     GET DEV. REF. NO. 
      IOR TEMPH     SET IN SUBCHANNEL NO. 
      STA LBUF      FOR OUTPUT
      LDA PPREL     ABS ADDRESS 
      LDB A 
      JSB SETCR     GO BUILD ABS DATA 
      ISZ PPREL     INCR CURRENT RELOC ADDRESS
      ISZ CSQT      INCR CURRENT SQT COUNT
      JMP DEVRE     GET NEXT SQT ENTRY
DRERR LDA ERR27     SET CODE = INVALID DEV. REF. NO.
      JSB ERROR     PRINT DIAGNOSTIC
      JMP DEVRE     REPEAT INPUT
* 
TEMPL NOP 
TEMPH NOP 
TEMPS NOP 
* 
SINTI LDA CSQT      HAVE ANY DRT'S BEEN ENTERED?
      ADA N1
      STA CSQT
      SSA,RSS 
      JMP SINTT     YES, GO TO INT PROCESSING 
      JMP DRERR     NO, ERROR , START OVER
* 
      SKP 
*  ROUTINE TO INPUT TO BUFFER FROM TTY
* 
* 
READ  NOP 
      JSB LOUT
      LDA WONLY     WRITE ONLY FLAG 
      SZA,RSS       WRITE ONLY REQUEST? 
      JMP *+4       NO
      CLA 
      STA WONLY     CLEAR WONLY 
      JMP OTNLY,I 
      LDA P64 
      LDB ALBUF     GET ADDRESS OF LBUF 
      JSB PARAD,I       ENTRY FROM TTY
      SZA,RSS       SKIP - DATA INPUT 
      JMP *-4       REPEAT INPUT
      STA PARNO 
      INA 
      CLE,ERA 
      ADA ALBUF     BUILD ADDRESS OF NEXT 
      CLB 
      STB A,I       RESTOR WITH BLANK (0) 
      JSB ERPNT      CHECK FOR ECHO OF INPUT
      JSB GINIT     INITIALIZE LBUF SCAN
      JMP READ,I    RETURN
* 
* 
* 
*  OUTPUT ONLY ROUTINE
* 
OTNLY NOP 
      STB WONLY     SET THE WRITE ONLY FLAG 
      JMP READ+1
* 
      HED RTSGN  I/O TABLE GENERATION SUBROUTINES 
* 
*                                   GET CHAR FROM LBUF, RETURN IN A 
* 
*  THE FOLLOWING SUBROUTINE SUPPLIES THE CHARACTERS FOR 
*  GETNA AND GETOC. 
* 
*  CALLING SEQUENCE:
*    A = IGNORED
*    B = IGNORED
*    JSB GETAL
* 
*  RETURN:
*    A = CURRENT CHARACTER
*    B = DESTROYED
* 
GETAL NOP 
      LDA CMFLG     CMFLG = COMMA-IN FLAG 
      SZA,RSS       SKIP IF NO COMMA IN 
      JMP BLRET     RETURN BLANK
      LDB BUFUL     GET U/L FLAG
IGNOR LDA CURAL,I   GET CHAR FROM LBUF
      SZB           SKIP IF LOWER CHAR
      ALF,ALF       ROTATE TO LOWER 
      AND M377      ISOLATE LOWER CHAR
      CPA ZERO      END OF BUFFER?
      JMP GETAL,I   YES - RETURN WITH ZERO
      CMB,SZB       RESET U/L, SKIP IF UPPER CHAR 
      ISZ CURAL     INCR LBUF ADDRESS 
      CPA BLANK     CHAR = BLANK? 
      JMP IGNOR     IGNORE BLANKS 
      STB BUFUL     SAVE U/L FLAG 
      CPA COMMA     CHAR = COMMA? 
      ISZ CMFLG     RESET FLAG TO SHOW COMMA IN 
      JMP GETAL,I   RETURN WITH NON-BLANK CHAR
BLRET LDA BLANK     REPLACE WITH BLANK CHAR 
      JMP GETAL,I   RETURN WITH BLANK 
      SKP 
* 
*                                   MOVE ALPHA FROM LBUF TO TBUF
* 
*  THE FOLLOWING SUBROUTINE MOVES THE CHARACTERS FROM LBUF
*  TO TBUF. 
* 
*  CALLING SEQUENCE:
*    A = MAX. NO. OF CHARACTERS TO BE MOVED.  THE SIGN OF A 
*        DESIGNATES THE POSITION OF THE FIRST CHARACTER.
*        IF THE SIGN OF A IS POSITIVE, THE FIRST CHAR IS TO 
*        BE MOVED TO THE LOW CHAR IN TBUF.  IF A IS NEGATIVE, THE 
*        FIRST CHARACTER IS TO BE MOVED TO THE UPPER CHAR IN TBUF.
*    B = IGNORED
*    JSB GETNA
* 
*  RETURN:
*    A = FIRST CHAR (IF ONLY 1 CHAR) OR FIRST 2 CHARS MOVED.
*    B = DESTROYED
* 
GETNA NOP 
      CCE,SSA,RSS   SET E = 1 (EVEN) POSITION 
      CMA,CLE,INA   SET E = 0 (ODD) POSITION - COMP 
      STA MAXC      MAXC = MAXIMUM NO. CHARS
      LDA ATBUF     ATBUF = ADDR OF TBUF
      STA CURAT     SET CURRENT TBUF ADDRESS
      CLB 
      STB TBUF      CLEAR WORD 1 OF TBUF
      CCA 
      STA CMFLG     SET COMMA-IN FLAG 
      SEZ,RSS       SKIP - ODD POSITION 
      JMP OCHAR     BEGIN WITH ODD CHARACTER
NEXTC JSB GETAL     GET CHAR FROM LBUF
      CPA ZERO      END OF BUFFER?
      LDA BLANK     YES - REPLACE CHAR WITH BLANK 
      ALF,ALF       ROTATE TO UPPER A 
      STA CURAT,I   SET CHARACTER IN TBUF 
      ISZ MAXC      CHECK FOR ALL CHARS IN
      JMP OCHAR     GET ODD CHAR FROM LBUF
      LDA TBUF      GET FIRST 2 TRANSFERRED CHARS 
      JMP GETNA,I   YES - RETURN
OCHAR JSB GETAL     GET CHAR FROM LBUF
      CPA ZERO      END OF BUFFER?
      LDA BLANK     REPLACE ZERO CHAR WITH BLANK
      IOR CURAT,I   ADD TO UPPER CHAR IN TBUF 
      STA CURAT,I   SET CHARS IN TBUF 
      ISZ CURAT     INCR TBUF ADDRESS 
      ISZ MAXC      CHECK FOR ALL CHARS IN
      JMP NEXTC     NO - TRY NEXT UPPER CHAR
      LDA TBUF      GET FIRST 2 TRANSFERRED CHARS 
      JMP GETNA,I   RETURN
      SKP 
*                                    OUTPUT ID SEGMENT IN ABS 
* 
*  THIS ROUTINE WILL OUTPUT A 28 WORD BLOCK FROM THE
*  I/O BUFFER AREA. 
* 
*  CALLING SEQUENCE:
*    A = ABS STARTING ADDR
*    B = IGNORED
*    JSB GENID
* 
*  RETURN: A AND B ARE DESTROYED
* 
OUTID NOP 
      LDB A 
      ADB P27       SET LAST ADDRESS
      JSB SETCR     GO SET CORE 
      JMP OUTID,I   RETURN
* 
*                                    GENERATE ID SEGMENT
* 
*  THIS ROUTINE WILL BUILD AN ID SEGMENT IN THE OUTPUT
*  BUFFER (LBUF) AREA. THE BUFFER IS CLEARED AND STUFFED
*  WITH DATA (FROM THE PNAME TABLE) BEFORE BEING OUTPUT 
*  BY THE OUTID ROUTINE.
* 
*  CALLING SEQUENCE:
*    A = ABSOLUTE ADDRESS OF SEGMENT
*    B = LIST LINK ADDREESS TO NEXT SEGMENT 
*    JSB GENID
* 
* 
*  RETURN: A AND B ARE DESTROYED
* 
GENID NOP 
      STA IDSAV 
      STB LNKSV 
      LDB ALBUF     BUFFER ADDRESS
      JSB BUFCL     CLEAR BUFFER
      OCT 0 
      LDA LNKSV     GET LINK ADDRESS
      STA LBUF      PUT IN BUFFER 
      LDA PNAME+7   GET PRIORITY
      SZA,RSS 
      LDA P99       DEFAULT TO 99 
      STA LBUF+6
      LDA .XFER     ENTRY POINT 
      STA LBUF+7
      LDA PNAME     NAME 1,2
      STA LBUF+12 
      LDA PNAME+1   NAME 3,4
      STA LBUF+13 
      LDA PNAME+2   NAME 5, BLNK
      AND M7400     MASK OUT BLANK
      INA           MAKE TYPE 1 
      STA LBUF+14 
      LDA PNAME+8   RESOLUTION
      ALF,ALF 
      ALF,RAL       SHIFT INTO PLACE
      IOR PNAME+9   MURGE EXEC MULT 
      STA LBUF+17   PUT IN BUFFER 
      LDA PNAME+10  HOURS 
      SZA,RSS 
      LDA N24       DEFAULT TO 24 
      STA LBUF+21 
      LDA PNAME+11  MINUTES 
      SZA,RSS 
      LDA N60       DEFAULT TO 60 
      STA LBUF+20 
      LDA PNAME+12  SECONDS 
      SZA,RSS 
      LDA N60       DEFAULT TO 60 
      STA LBUF+19 
      LDA PNAME+13  TENS OF SEC 
      SZA,RSS 
      LDA N100      DEFAULT TO 100
      STA LBUF+18 
      LDA .MEM3     LOW MAIN
      STA LBUF+22 
      LDA LOCC      HIGH MAIN 
      STA LBUF+23 
      LDA .MEM1     LOW BASE
      STA LBUF+24 
      LDA BPLOC     HIGH BASE 
      STA LBUF+25 
      LDA LOCC      UPDATE FWAM 
      STA .MEM3     FWAM
      LDA BPLOC     UPDATE FWABP
      STA .MEM1     FWABP 
      CLA 
      STA LOCC      CLEAR LOCC
      STA BPLOC       "   BPLOC 
      LDA IDSAV     ABS ADDRESS 
      JSB OUTID     GO OUTPUT ID SEGMEMT
      JMP GENID,I   RETURN
* 
IDSAV BSS 1 
LNKSV BSS 1 
* 
* 
*                                   CONVERT OCT/DEC ASCII TO BINARY 
* 
*  THE GETOC SUBROUTINE CONVERTS THE NEXT CHARACTERS IN LBUF FROM 
*  ASCII (DECIMAL OR OCTAL) TO THEIR BINARY VALUE.
* 
*  CALLING SEQUENCE:
*    A = MAX. NO. OF CHARS IN CONVERSION REQUEST.  IF A IS
*        POSITIVE, THE REQUEST IS FOR OCTAL; IF A IS NEGATIVE,
*        THE REQUEST IS FOR DECIMAL.
*    B = IGNORED
*    JSB GETOC
* 
*  RETURN:
*    (N+1): INVALID DIGIT OR OVERFLOW IN CONVERSION 
*    (N+2): A = CONVERTED NO. 
*           B = DESTROYED 
* 
GETOC NOP 
      LDB L10       GET OCTAL RANGE 
      SSA           SKIP IF OCTAL REQUEST 
      LDB L12       GET DECIMAL RANGE 
      STB DRANG     SET DIGIT RANGE 
      SSA,RSS       SKIP IF DECIMAL REQUEST 
      CMA,INA       SET REQUEST COUNT TO NEGATIVE 
      STA MAXC      SET MAX NO. OF DIGITS 
      CCA 
      STA DIFLG     SET DATA-IN FLAG = NO DATA IN 
      STA CMFLG     SET COMMA-IN FLAG 
      CLA 
      STA OCTNO     OCTNO = OCTAL NUMBER
GETNX JSB GETAL     GET CHAR FROM LBUF
      CPA ZERO      CHAR = ZERO? (END OF BUFFER)
      JMP ENDOC     YES - RETURN
      CPA BLANK     CHAR = BLANK? (COMMA IN)
      JMP ENDOC     YES - RETURN
      ADA L60       SUBTRACT 60B FROM CHAR
      STA TCHAR     SAVE CHAR 
      SSA           SKIP IF VALID LOWER LIMIT 
      JMP DGERR     INVALID DIGIT 
      ADA DRANG     ADD DIGIT RANGE 
      CLE,SSA,RSS   CLEAR E - SKIP IF VALID DIGIT 
      JMP DGERR     INVALID DIGIT 
      ISZ DIFLG     INCR DATA-IN FLAG, SKIP 
      NOP 
      LDA OCTNO     GET PREVIOUS OCTAL NO.
      ADA A         SET A = OCTNO X 2 
      ADA A         SET A = OCTNO X 4 
      LDB DRANG     GET DIGIT RANGE 
      CPB L12       RANGE = DECIMAL?
      ADA OCTNO     SET A = OCTNO X 5 
      ADA A         SET A = OCTNO X 10/8
      ADA TCHAR     SET A = NEW OCTAL NO. 
      STA OCTNO     SAVE NEW OCTAL NO.
      SEZ           TEST FOR OVERFLOW 
      JMP DGERR     INVALID NO. 
      ISZ MAXC      SKIP IF ALL DIGITS PROCESSED
      JMP GETNX     GET NEXT DECIMAL DIGIT
      ISZ GETOC     INCR RETURN ADDRESS 
      LDA OCTNO     GET OCTAL EQUIVALENT
DGERR JMP GETOC,I   RETURN
ENDOC ISZ DIFLG     SKIP - NO DATA IN 
      JMP *-4       DATA IN - NORMAL RETURN 
      JMP GETOC,I   RETURN - ERROR
      SKP 
* 
* 
*  ROUTINE TO CONVERT THE OCTAL NUMBER IN A TO
*  ASCII AND STUFF THE 2 LOW ORDER DIGITS INTO A BUFFER 
*  ADDRESSED BY B. LEADING ZEROS ARE SUPPRESED
* 
*  CALLING SEQUENCE:
* 
*    A = OCTAL NUMBER 
*    B = BUFFER ADDRESS 
* 
*  RETURN: A AND B ARE DESTROYED
* 
STFNM NOP 
      STB STFAD     SAVE FINAL ADDRESS
      LDB ATBUF     TEMP BUFFER ADDRESS 
      CMA,INA       NEG FOR DECIMAL CONVERT 
      JSB ACONV,I 
      LDA TBUF+2    LEAST 2 DIGITS
      AND M7400     ISOLATE UPPER CHAR
      CPA UASCZ     CHAR = ASCII ZERO?
      LDA UBLNK     YES, REPLACE WITH BLANK 
      STA B         SAVE UPPER CHAR 
      LDA  TBUF+2   GET ORIG DIGITS 
      AND  M177     ISOLATE LOWER CHAR
      IOR B         MURGE 
      STA STFAD,I   STORE IN BUFFER 
      JMP STFNM,I 
* 
STFAD BSS 1 
* 
*                                   LOAD PROG NAME INTO TABLE 
* 
*  THE 3 WORD PROGRAM NAME IS PUT INTO THE RTSGN PROG 
*  TABLE. THE NAMES ARE LOADED FROM THE TOP DOWN. 
* 
*  CALLING SEQUENCE:
*    A = ADDRESS OF PROGRAM NAME
*    B = IGNORED
*    JSB LDIPX
* 
*  RETURN:  A AND B ARE DESTROYED 
* 
LDIPX NOP 
      STA IPXSV     SAVE PROG NAME ADDRESS
      JSB INIPX     INITIALIZE TO START OF TABLE
      LDA PROCT      NUMBER OF ENTRIES
      ALS            MULT X2
      ADA PROCT      PLUS ONE TO MAKE IT X3 
      CMA,INA 
      ADA BIDNT      BUILD NEXT NAME ADDRESS
      STA BIDNT      FOR SAVE 
      JSB SYEND     FIND END OF SYMBOL TABLE
      LDB A 
      LDA BIDNT     CHECH FOR OVERFLOW  INTO LST
      CMA,INA 
      ADA B 
      SSA,RSS       HAS IT OVERFLOWED?
      JMP LSERR     YES 
      LDB BIDNT    NO, UPDATE POINTERS FOR LOADER 
      ADB N1
      STB OPT.3     TOP OF LST FOR LOADER 
      JSB IPX       INITIALIZE IP POINTERS
      LDA IPXSV,I    GET N1-N2
      STA IP1,I     PUT IN TABLE
      ISZ IPXSV     BUMP POINTER
      LDA IPXSV,I   GET N3-N4 
      STA IP2,I     SAVE
      ISZ IPXSV 
      LDA IPXSV,I   GET N5-XX 
      STA IP3,I     SAVE
      ISZ PROCT     BUMP NUMBER OF NAMES
      JMP LDIPX,I   RETURN
* 
      SKP 
* 
*                                   SEARCH RTSGN PROG TABLE 
* 
*  THIS IS A MULTIPLE ENTRY ROUTINE WHICH WILL EITHER 
*  SEARCH FOR A NAME OR CONTINUE FROM THE LAST FIND.
* 
*  CALLING SEQUENCE:
*    A = ADDRESS OF NAME (3WORD)
*    B = IGNORED
*    JSB SRIPX
* 
*  RETURN:
*    (N+1) PROGRAM NAME WAS FOUND IN TABLE, IN IP1-3
*    (N+2) REACHED THE END OF THE PROGRAM TABLE 
* 
SRIPX NOP 
      LDB WDCNT     SEARCH OR CONTINUE? 
      SZB 
      JMP SRIP1     CONTINUE
      STA SRISV     INIT SEARCH 
      JSB INIPX     SET UP IP POINTERS
      LDA PROCT     NUMBER OF ENTRIES 
      CMA 
      STA WDCNT     SAVE FOR LOOPING
SRIP1 ISZ WDCNT     ALL DONE? 
      JMP *+3       NO, GO COMPARE NAMES
      ISZ SRIPX     YES, BUMP RETURN
      JMP SRIPX,I 
      JSB IPX       SET POINTERS
      LDB IP1       NAME IN TABLE 
      LDA SRISV,I   LOOK FOR NAME 
      JSB NACMP     GO COMPARE
      JMP SRIP1     DOSN'T COMPARE, LOOK NEXT 
      JMP SRIPX,I   DOES COMPARE, RETURN
* 
      SKP 
* 
*                                   INITIALIZE CHAR TRANSFER
* 
*  THE GINIT SUBROUTINE SETS THE CURRENT ADDRESS AND UPPER/LOWER
*  FLAG FOR SCANNING LBUF.
* 
*  CALLING SEQUENCE:
*    A = IGNORED
*    B = IGNORED
*    JSB GINIT
* 
*  RETURN : CONTENTS OF A AND B ARE DESTROYED 
* 
GINIT NOP 
      LDA ALBUF     ALBUF = ADDR OF LBUF
      STA CURAL     SET CURRENT LBUF ADDRESS
      CCB 
      STB BUFUL     BUFUL = BUFFER U/L FLAG 
      JMP GINIT,I   RETURN
* 
*                                   CONVERT A TO ASCII AT B 
* 
*  THE CONVD SUBROUTINE CONVERTS THE CONTENTS OF A
*  INTO ASCII (DECIMAL OR OCTAL) AT THE LOCATION SPECIFIED
*  BY B.  THE CONVERTED RESULT REQUIRES 3 WORDS, AND IS 
*  IN THE FORMAT:  XXXXX, WITH A SPACE IN THE FIRST POSITION. 
* 
*  CALLING SEQUENCE:
*    A = NO. TO BE CONVERTED.  IF THE SIGN OF A IS POS.,
*        THE CONVERSION IS TO BE IN OCTAL;  IF NEGATIVE,
*        IN DECIMAL.
*    B = ADDRESS OF CORE LOCATION FOR CONVERTED RESULT
*    JSB CONVD
* 
*  RETURN: CONTENTS OF A AND B ARE DESTOYED.
* 
CONVD NOP 
      STB CURAT     SET MESSAGE ADDRESS 
      LDB OPWRS     GET ADDR OF OCTAL POWERS
      SSA           SKIP IF OCTAL CONV REQUIRED 
      LDB DPWRS     GET ADDRESS OF DECIMAL POWERS 
      STB RANAD     SET POWER RANGE ADDRESS 
      SSA,RSS       SKIP IF NEGATIVE (DECIMAL)
      CMA,INA       CONVERT NUMBER TO NEGATIVE
      STA B         PUT NUMBER IN B (REMAINDER) 
      LDA N2
      STA TCNT      SET CONVERSION COUNTER
      JSB GETD      GET FIRST DIGIT 
      IOR UBLNK     ADD BLANK TO FIRST CHAR 
      STA CURAT,I   SAVE FIRST BLANK, CHARACTER 
      ISZ CURAT     INCR MESSAGE ADDRESS
NEXTD JSB GETD      GET NEXT DIGIT
      ALF,ALF       ROTATE TO UPPER 
      STA CURAT,I   SAVE UPPER CHARACTER
      JSB GETD      GET NEXT DIGIT
      IOR CURAT,I   ADD UPPER CHAR
      STA CURAT,I   SAVE NEXT 2 CHARACTERS
      ISZ CURAT     INCR MESSAGE ADDRESS
      ISZ TCNT      SKIP - 5 DIGITS IN
      JMP NEXTD     NO - CONTINUE WITH NEXT DIGIT 
      JMP CONVD,I   YES - RETURN
* 
*                                   SET PARAMETERS
* 
*  THE PARAMETER INPUT SECTION PERMITS ALTERATION (OR INTRODUCTION) 
*  OF THE NAME, PRIORITY, AND EXECUTION INTERVAL FOR EACH PROGRAM.
*  EACH PARAMETER RECORD HAS ONE OF THE FOLLOWING FORMATS:
* 
*    NAME 
*    NAME,PRIORITY
*    NAME,PRIORITY,EXECUTION INTERVAL 
* 
*  PRIORITY = 2 DECIMAL DIGITS (0-99) 
*  EXECUTION INTERVAL = 6 OPERANDS
*    1 - RESOLUTION CODE (2 DECIMAL DIGITS) 
*    2 - EXECUTION MULTIPLE (5 DECIMAL DIGITS)
*    3 - HOURS (2 DECIMAL DIGITS) 
*    4 - MINUTES (2 DECIMAL DIGITS) 
*    5 - SECONDS (2 DECIMAL DIGITS) 
*    6 - 10'S MULLISECONDS (2 DECIMAL DIGITS) 
* 
* 
*  RETURN: A AND B ARE DESTROYED
*    (N+1): SOME PARAMETERS WERE ENTERED
*    (N+2): NO PARAMETERS WERE ENTERED
* 
*    TBUF CONTAINS THE ENTERED NAME 
* 
* 
PARAM NOP 
      JSB AREAD,I   GET ASCII PARAMETER RECORD
      SZA,RSS       SKIP IF CHARS INPUT 
      JMP PARAM+1   REPEAT PARAMETER INPUT
      STA PARNO     SAVE PARAMETER RECORD LENGTH
      CLA 
      STA ID5 
      STA ID6 
      STA ID7 
      STA ID8 
      STA ID9 
      STA ID10
      STA ID11
      JSB GETAL 
      CPA M60 
      RSS 
      JMP *+3 
      ISZ PARAM 
      JMP PARAM,I 
      JSB GINIT     INITIALIZE BUFFER SCAN
      LDA N5
      JSB GETNA     MOVE CHARS FROM LBUF TO TBUF
      JSB GETAL     GET NEXT CHAR FROM LBUF 
      CPA BLANK     CHAR = BLANK?(DELIMITER = COMMA)
      JMP SETYP     YES - CONTINUE
      CPA ZERO
      JMP PARAM,I 
* 
PANER LDA ERR09     PARAMETER NAME ERROR
      JMP PARER 
PATER LDA ERR10     PARAMETER TYPE ERROR
      JMP PARER 
* 
*                                   SET NEW PROGRAM PRIORITY
SETYP LDA N2        SET COUNT FOR DECIMAL CONVERSION
      JSB GETOC     CONVERT TO OCTAL
      JMP PAPER     PRIORITY ERROR
      JSB GETAL     GET NEXT CHAR FROM LBUF 
      CPA ZERO      CHAR = ZERO ? (END OF BUFFER) 
      RSS           YES - CONTINUE
      CPA BLANK     CHAR = BLANK?(DELIMITER = COMMA)
      JMP SETNR     SET PRIORITY
PAPER LDA ERR11     PARAMETER PRIORITY ERROR
      JMP PARER 
* 
SETNR LDB OCTNO     GET PRIORITY
      STB ID5        SET NEW PRIORITY 
      JSB GETAL     GET NEXT CHAR FROM LBUF 
      CPA ZERO      CHAR = ZERO ? (END OF BUFFER) 
      JMP PARAM,I   YES,RETURN
* 
*                                   GET RESOLUTION CODE 
      LDA N2        SET FOR 2 DECIMAL DIGITS
      JSB EXINT     GET DIGITS FROM LBUF
      STA ID6       SET IN IDENT 6
* 
*                                   GET EXECUTION MULTIPLE
      LDA N5        SET COUNT FOR DECIMAL CONVERSION
      JSB EXINT     GET DIGITS FROM LBUF
      AND M1600     ISOLATE UPPER 3 BITS IN A 
      SZA           SKIP IF VALID MULTIPLE
      JMP PAIER     INVALID EXECUTION INTERV FORMAT 
      LDA OCTNO     GET CONVERTED NUMBER
      STA ID7 
* 
*                                   GET HOURS 
      LDA N2        SET FOR 2 DECIMAL DIGITS
      JSB EXINT     GET DIGITS FROM LBUF
      ADA N24 
      STA ID8 
* 
*                                   GET MINUTES 
      LDA N2        SET FOR 2 DECIMAL DIGITS
      JSB EXINT     GET DIGITS FROM LBUF
      ADA N60 
      STA ID9 
* 
*                                   GET SECONDS 
      LDA N2        SET FOR 2 DECIMAL DIGITS
      JSB EXINT     GET DIGITS FROM LBUF
      ADA N60 
      STA ID10
* 
*                                   GET TENS OF MILLISECONDS
      LDA N2        SET FOR DECIMAL CONVERSION
      JSB GETOC     CONVERT TO OCTAL
      JMP PAIER     INVALID DIGIT 
      JSB GETAL     GET NEXT CHAR FROM LBUF 
      CPA ZERO      CHAR = 0? (END OF BUFFER) 
      RSS           YES - CONTINUE
      JMP PAIER     NO - INVALID DELIMITER
      LDA OCTNO 
      ADA N100
      STA ID11
      JMP PARAM,I 
* 
*                                   EXECUTION INTERVAL INPUT CONTROL
EXINT NOP 
      JSB GETOC     CONVERT TO OCTAL
      JMP PAIER     INVALID DIGIT 
      JSB GETAL     GET NEXT CHAR FROM LBUF 
      CPA BLANK     CHAR = BLANK? (DELIMITER=COMMA) 
      RSS           YES - CONTINUE
      JMP PAIER     NO - INVALID DELIMITER
      LDA OCTNO     GET CONVERTED NUMBER
      JMP EXINT,I   RETURN WITH NUMBER IN A 
PAIER LDA ERR12     PARAMETER INTERVAL ERROR
* 
PARER JSB ERROR     PRINT ERROR MESSAGE 
      JSB SPACE     NEW LINE
      JMP PARAM+1   RE-READ PARAMETER RECORD
* 
*                                   GET DIGIT FOR CONVD 
* 
*  GETD PROVIDES THE ASCII CHARACTERS FOR CONVD.
* 
*  CALLING SEQUENCE:
*    A = IGNORED
*    B = REMAINDER
*    JSB GETD 
* 
*  RETURN:
*    A = ASCII DIGIT
*    B = IGNORED
* 
GETD  NOP 
      CLA 
INCRA ADB RANAD,I   ADD POWER 
      CMB,SSB,INB,SZB   SKIP - TRY NEXT HIGHER DIGIT
      JMP *+4       DIGIT FOUND 
      INA           INCR DIGIT
      CMB,INB       RESTORE REMAINDER TO NEGATIVE 
      JMP INCRA     TRY HIGHER DIGIT
      ADB RANAD,I   ADD POWER 
      CMB,INB       RESTORE REMAINDER 
      ISZ RANAD     INCR POWER LIST ADDRESS 
      IOR M60       CONVERT TO ASCII
      JMP GETD,I    RETURN WITH DIGIT IN A
* 
*                                    PNAME UPDATE 
* 
*  THIS ROUTINE WILL UPDATE THE PARAMETERS IN THE 
*  PNAME TABEL. THE SOURCE WILL BE  FROM THE
*  "ENTR PRAMS" TABLE 
* 
*  CALLING SEQUENCE:
*    A = SOURCE ADDRESS 
*    B = IGNORED
*    JSB UPNAM
* 
*  RETURN: A AND B ARE DESTROYED
* 
UPNAM NOP 
      STA TEMP1     SAVE SOURCE ADDRESS 
      LDA TEMP1,I   GET PRIORITY
      STA PNAME+7   YES 
      ISZ TEMP1 
      LDA TEMP1,I   GET RESOLUTION
      SZA 
      STA PNAME+8   UPDATE
      ISZ TEMP1 
      LDA TEMP1,I   EXEC MULT.
      SZA 
      STA PNAME+9 
      ISZ TEMP1 
      LDA TEMP1,I   HOURS 
      SZA 
      STA PNAME+10
      ISZ TEMP1 
      LDA TEMP1,I   MINUTES 
      SZA 
      STA PNAME+11
      ISZ TEMP1 
      LDA TEMP1,I   SECONDS 
      SZA 
      STA PNAME+12
      ISZ TEMP1 
      LDA TEMP1,I   TENS OF MILLISECONDS
      SZA 
      STA PNAME+13
      JMP UPNAM,I    RETURN 
* 
      HED RTSGN  PAGE PARAMETERS AND CONSTANTS
PARNO BSS 1         PARAMETER RECORD LENGTH 
* 
IOADD BSS 1         I/O ADDR (CHANNEL NO.) IN EQT 
IODMA BSS 1         I/O DMA FLAG IN EQT 
IOBUF BSS 1         I/O BUFFERING FLAG IN EQT 
IOTYP BSS 1         I/O DRIVER TYPE IN EQT (OCTAL)
ASIDR DEF *+1 
      ASC 1,I.
ASTYP BSS 1         I/O DRIVER TYPE IN EQT (ASCII)
UBLNK OCT 20000 
DFLAG BSS 1         DMA-IN FLAG FOR EQT 
BFLAG BSS 1         BUFFERING-IN FLAG FOR EQT 
TFLAG BSS 1         TIME-OUT ENTRY FLAG FOR EQT 
INTCH BSS 1         INT RECORD CHANNEL NO.
LSTSV BSS 1         LST COUNT SAVE FOR REL UPDATE 
I.XX  BSS 1         DRIVER ENTRY POINT
C.XX  BSS 1         DRIVER EXIT POINT 
JMP3I JMP 3,I 
ASCDR DEF *+1 
      ASC 1,C.
ASCYP BSS 1 
      OCT 20000 
AEQUL OCT 75
TIMWD BSS 1 
RANAD BSS 1 
* 
DRANG BSS 1         DIGIT RANGE 
LWABP BSS 1 
DIFLG BSS 1         DATA-IN FLAG = -1/0 = NOT IN/IN 
CMFLG BSS 1         COMMA FLAG = -1/0 = NOT IN/IN 
BUFUL BSS 1         BUFFER U/L FLAG 
MS28  ASC 6,   = EQT #? 
MES6A DEF MES6I 
MES6  DEF *+1 
      ASC 2,EQT 
MES6I BSS 1 
      ASC 2, =? 
MES29 DEF *+1 
      ASC 4,INT TBL 
AYES  OCT 131 
ANO   OCT 116 
MES5  DEF *+1 
      ASC 7,STRT-UP PROG? 
MES7  DEF *+1 
      ASC 7,# WDS IN COMM?
MES8  DEF *+1 
      ASC 7,REL USER PROGS
MES9  DEF *+1 
      ASC 5,SNAPSHOT? 
MES10 DEF *+1 
      ASC 6,ENTER PRAMS 
MES11 DEF *+1 
      ASC 7,RTSGN FINISHED
BNDS  DEF *+1 
      ASC 4,-BOUNDS 
MEMOT DEF *+1 
      ASC 3,FWABP=
      ASC 3,LWABP=
      ASC 3,FWAM= 
      ASC 3,LWAM= 
      ASC 3,FWAC= 
      ASC 3,LWAC= 
LBLAD BSS 1 
MEMAD BSS 1 
ASET  DEF *+1 
      ASC 6,- SET BPLOCC
ASTO  ASC 2, TO 
ASTOA DEF ASTO
ASLOC DEF *+1 
      ASC 2,LOCC
ASSTL DEF *+1 
      ASC 8,-LINKS START AT 
ASPCE OCT 40
ACOMA OCT 26000 
* 
      HED RTSGN INTERRUPT TABLE PROCESSOR 
*                           INTERRPUT TABLE PROCESSOR 
* 
* 
SINTT JSB SPACE     NEW LINE
      LDA PPREL     GET CURRENT RELOCATION ADDR 
      STA AINT      SAVE INTERRUPT TABLE ADDRESS
      LDA P7
      LDB MES29     MES29 = ADDR. * INT TABLE 
      JSB AOTLY,I   PRINT: INT TBL
      LDA A$CIA     $CIC ADDRESS
      IOR IJSB      ADD JSB 0,I CODE
      STA JSCIC     SET JSB CIC,I CODE
      LDB ALBUF     GO STUFF BUFFER WITH JSB $CIC 
      JSB BUFCL 
JSCIC OCT 0         STUFF DATA
      CLA 
      STA PROCT 
      LDA P5        PG ZERO  INT START ADDRESS
      LDB LWABP 
      CMB,INB 
      ADB P58 
      SSB 
      JMP *+3 
      LDB LWABP 
      RSS 
      LDB P58       ADDRESS FIRST HALF
      JSB SETCR     OUTPUT JSB $CIC,I 
* 
      LDA HLTB4     SET HLT 4 INTO LOC 4
      STA LBUF      TO OUTPUT BUFFER
      LDA P4        ADDRESS 
      LDB A 
      JSB SETCR     OUTPUT HLT 4
      LDB P6        GET ADDR OF FIRST INT LOCATION
      STB TBREL     SET CURRENT BP ADDRESS
* 
SETIN CLA           NEW LINE
      JSB AREAD,I   GET INT RECORD FROM TTY 
      LDA N2
      JSB GETNA     MOVE 2 CHARS TO TBUF
      CPA PTERM     CHARS = -E? 
      JMP ENDIO     YES - I/O TABLES COMPLETE 
      CPA RINT      REPEAT INTERRUPT? 
      JMP SINTT     YES 
      CPA REQT      GO BACK TO EQT? 
      JMP GENIO     YES 
      CPA RDRT      REPEAT DRT? 
      JMP SSQT      YES 
      JSB GINIT     RE-INITIALIZE LBUF SCAN 
      LDA P2
      JSB GETOC     GET 2 OCTAL DIGITS, CONVERT 
      JMP CHERR     INVALID INT CHANNEL NO. DIGIT 
      JSB GETAL     GET NEXT CHAR FROM LBUF 
      CPA BLANK     CHAR = COMMA? 
      JMP SETCH     SAVE INT CHANNEL NO.
CHERR LDA ERR10     SET CODE = INVALID INT CHNL NO. 
      JSB ERROR     PRINT DIAGNOSTIC
      JMP SETIN     REPEAT INT REC INPUT
* 
SETCH LDA OCTNO     GET INT CHANNEL NO. 
      STA INTCH     SAVE CHANNEL NO.
      ADA N4        CHAN L.T. 4?
      SSA 
      JMP CHERR     YES, CHANNEL ERROR
* 
      LDA N2
      JSB GETNA     MOVE 2 CHARS TO TBUF
      CPA CHREQ     CHARS = EQ? 
      JMP INTEQ     YES - PROCESS INT EQT RECORD
      CPA CHRPR     CHARS = PR? 
      JMP INTPR     YES - PROCESS INT PRG RECORD
      CPA CHREN     CHARS = EN? 
      JMP INTEN     YES - PROCESS INT ENT RECORD
      CPA CHRAB     CHARS = AB? 
      JMP INTAB     YES - PROCESS INT ABS RECORD
IMNEM LDA ERR09     SET CODE = INVALID INT MNEMONIC 
      JSB ERROR     PRINT DIAGNOSTIC
      JMP SETIN     REPEAT INT REC INPUT
* 
INTEQ LDA N2
      JSB GETNA     MOVE NEXT 2 CHARS TO TBUF 
      CPA UTCHR     CHARS = T,BLANK?
      RSS           YES - CONTINUE
      JMP IMNEM     NO - INVALID INT MNEMONIC 
      LDA N2
      JSB GETOC     GET 2 DECIMAL DIGITS, CONVERT 
      JMP EQUER     INVALID EQT NO. IN INT REC
      LDB OCTNO     GET EQT TABLE ENTRY NO. 
      CMB,INB,SZB,RSS  SKIP - VALID LOWER LIMIT 
      JMP EQUER     INVALID EQT REFERENCE 
      STB TCHAR     SAVE EQT NO.
      ADB CEQT      ADD UPPER EQT REF. NO.
      SSB,RSS       SKIP - INVALID UPPER LIMIT
      JMP TSTIQ     TEST FOR FIRST EQT REFERENCE
EQUER LDA ERR31     SET CODE = INVALID EQT NO.
      JSB ERROR     PRINT DIAGNOSTIC
      JMP SETIN     REPEAT INT REC INPUT
* 
TSTIQ LDB TCHAR     GET EQT REF. NO.
      LDA AEQT      GET ADDR OF EQT 
      INB,SZB,RSS   SKIP - NOT FIRST EQT REFERENCE
      JMP SEQTI     SET EQT ADDR IN INT TABLE 
      ADA P15       ADJUST FOR NEXT EQT ENTRY ADDR
      INB,SZB       SKIP - EQT ADDRESS FOUND
      JMP *-2       CONTINUE EQT SEARCH 
SEQTI LDB JSCIC     GET JSB CIC CODE
      JMP COMIN     SET INTERRUPT TABLE, LOCATION 
* 
INTPR LDA N2
      JSB GETNA     MOVE 2 CHARS TO TBUF
      CPA UGCHR     CHARS = G,BLANK?
      RSS           YES - CONTINUE
      JMP IMNEM     NO - INVALID INT MNEMONIC 
      LDA TBREL     FETCH CHANNEL 
      CMA,INA 
      ADA INTCH     ASSENDING ORDER?
      SSA,SZA 
      JMP IMNEM     NO, ERROR 
      LDA N5
      JSB GETNA     MOVE 5 CHARS TO TBUF
      LDA TBUF+2    NAME: 5 
      AND M7400     MASK OUT LOWER HALF 
      IOR INTCH     PUT IN CHN(SELECT CODE) 
      STA TBUF+2    SAVE IN TABLE 
      LDA ATBUF     ADDRESS OF NAME 
      JSB LDIPX     PUT IN TABLE
      CLA 
      LDB JSCIC 
      JMP COMIN 
* 
INTEN LDA N2
      JSB GETNA     MOVE 2 CHARS TO TBUF
      CPA UTCHR     CHARS = T, BLANK
      RSS           YES - CONTINUE
      JMP IMNEM     INVALID INT MNEMONIC
      LDA N5
      JSB GETNA     MOVE 5 CHARS TO TBUF
      LDB ATBUF     ADDR OF NAME
      JSB SSTBL     SEARCH SYMBOL TABLE 
      RSS           NOT FOUND, ERROR
      JMP SETE1     SET ENTRY POINT ADDRESS 
ENERR LDA ERR33     SET CODE = INVALID ENTRY POINT
      JSB ERROR     PRINT DIAGNOSTIC
      JMP SETIN     REPEAT INT RECORD INPUT 
* 
SETE1 LDA LST5      HAS LINK BEEN MADE? 
      LDA A,I 
      SZA,RSS 
      JMP SETEN     NO, GO MAKE ONE 
      IOR IJSB     YES, FORM THE JSB FOR BP 
      STA B 
      CLA 
      JMP COMIN 
SETEN LDA LST4      GET BP LINK ADDRESS 
      LDA A,I 
      STA SETAD,I 
      LDA .MEM1     MAKE A BP LINK
      LDB A 
      JSB SETCR 
      LDB LST5
      LDA .MEM1 
      STA B,I 
      IOR IJSB      ADD JSB 0,I CODE
      STA B 
      CLA           SET INT ENTRY = ZERO
      ISZ .MEM1 
      JMP COMIN     SET INTERRUPT TABLE, LOCATION 
* 
INTAB LDA N2
      JSB GETNA     MOVE 2 CHARS TO TBUF
  
      RSS           YES - CONTINUE
      JMP IMNEM     NO - INVALID INT MNEMONIC 
      LDA P6
      JSB GETOC     GET 6 OCTAL DIGITS, CONVERT 
      JMP IMNEM     INVALID ABS DIGIT 
      CLA 
      LDB OCTNO     GET ABSOLUTE VALUE
* 
COMIN STA TBUF      SAVE INT TABLE CODE 
      STB TBUF+1    SAVE INT LOCATION CODE
      JSB GETAL     GET NEXT CHAR FROM LBUF 
      CPA ZERO      END OF BUFFER?
      RSS           YES, CONTINUE 
      JMP ENERR     NO, BUT SHOULD BE 
      LDA INTCH     GET INT CHANNEL NO. 
      CPA P4        SPECIAL PROCESSING
      JMP PFINT      IF TRAP CELL FOUR
      CMA,INA 
      ADA TBREL     ADD CURRENT ADDRESS 
      SZA,RSS       SKIP - NOT NEXT LOCATION
      JMP STINT     SET INTERRUPT TABLES, LOCATION
      SSA           SKIP - INVALID CHANNEL NO. ORDER
      JMP FILLI     FILL IN SKIPPED VALUES
EQERR LDA ERR24     SET CODE = INVALID INT CHNL ORDR
      JSB ERROR     PRINT DIAGNOSTIC
      JMP SETIN     GET NEXT INTERRUPT RECORD 
* 
PFINT LDA TBUF      IF TRAP CELL FOUR,
      SZA            ENTRY MUST BE AN 
      JMP CHERR      'ABS' OR AN 'ENT'
      LDA P4
      LDB TBUF+1    STORE INTO
      STB SETAD,I   TRAP CELL FOUR
      LDB A 
      JSB SETCR 
      JMP SETIN     GET NEXT INTERRUPT RECORD 
* 
HLTB4 OCT 103004    TRAP CELL DEFAULT VALUE 
* 
FILLI STA TCNT      SET NO. OF FILL-INS REQUIRED
      CLA           SET INTERRUPT TABLE ENTRY = ZERO
      STA SETAD,I 
      LDA PPREL     ADDRESS 
      LDB A 
      JSB SETCR 
      ISZ PPREL     INCR CURRENT INT TABLE ADDRESS
      ISZ TBREL     INCR CURRENT INT LOCATION ADDR
      ISZ TCNT      SKIP - ALL FILL-INS COMPLETE
      JMP FILLI+1   CONTINUE INT FILL-IN
* 
STINT LDB TBUF+1    GET INT LOCATION CODE 
      STB SETAD,I   PUT INT LOCATION CODE IN INT LOC
      ISZ TBREL     INCR CURRENT BP LOCATION ADDR 
      LDB TBREL     GET INT LOCATION ADDR 
      CMB,INB 
      ADB P64       ADD ADDR OF FIRST SYS LINK
      SSB           SKIP - INT LOCATION OVERFLOW
      JMP EQERR 
* 
NOBPO LDA TBREL     INT. ADDRESS PLUS ONE 
      ADA N1        ADJUST
      LDB A         ADDRESS 
      JSB SETCR     SET CORE
      LDA TBUF      GET INT TABLE CODE
      STA SETAD,I   TO OUT BUFFER 
      LDA PPREL     ADDRESS 
      LDB A 
      JSB SETCR     OUTPUT IT 
      ISZ PPREL     INCR CURRENT RELOCATION ADDR
      JMP SETIN     GET NEXT INT TABLE RECORD 
ENDIO LDA AINT      GET ADDRESS OF INT
      CMA,INA 
      ADA PPREL     ADD CURRENT RELOCATION ADDR 
      STA CINT      SAVE NO. INT ENTRIES
      JSB SPACE     NEW LINE
      JSB SPACE     NEW LINE
* 
*                                    OUTPUT EQTA THRU INTLG 
* 
      LDA AEQT      EQT START ADDRESS 
      STA LBUF
      LDA CEQT      NUMBER OF EQTS
      STA LBUF+1
      LDA ASQT      DRT START ADDRESS 
      STA LBUF+2
      LDA CSQT      NUMBER OF DRT'S 
      STA LBUF+3
      LDA AINT      INTERRUPT TABLE ADDRESS 
      STA LBUF+4
      LDA CINT      NUMBER OF INTERRUPT ENTRIES 
      STA LBUF+5
      LDA EQTA      START ADDRESS-ABS 
      LDB INTLG     END ADDRESS 
      JSB SETCR     GO BUILD ABS
      HED  BUILD ID'S AND KEY WORD TABLE
* 
*                                    GET ID'S AND BUILD KEY WORD TABLE
* 
      LDA PPREL     KEY WORD TABLE ADDRESS
      STA LBUF
      LDA KEYWD     ABS ADDRESS 
      LDB A 
      JSB SETCR 
      LDA PPREL 
      STA KEYAD     KEY WORD ADDRESS
KEYID LDA P8        PRINT:
      LDB MES42     "# ID SEGS?"
      JSB AREAD,I 
      LDA N2        GET TWO OCTAL 
      JSB GETOC 
      JMP IDWER     BAD NUMBER
      STA KEYCN     # OF ID SEGS TO KEY COUNT 
      SZA,RSS 
      JMP IDWER     DO NOT ACCEPT ID COUNT OF ZERO! 
      CMA,INA 
      ADA P99       OR GREATER THEN 99
      SSA 
      JMP IDWER 
      LDA KEYCN     RESTOR A
      ADA PPREL     ADD TO PRESENT LOCATION 
      INA           FOR ZERO END
      STA PPREL     UPDATE PPREL
      STA SYSAD     INITIAL ID SEG ADDRESS
      STA IDSAD     FIRST ID SEG ADDRESS
      JMP *+4 
IDWER LDA ERR10     PRINT:
      JSB ERROR     "ERR-PA"
      JMP KEYID     TRY AGAIN 
      JSB GETAL 
      SZA 
      JMP IDWER     NO, ERROR 
      LDA KEYCN     NOS OF KEY WORDS
      CMA,INA 
      STA WDCNT 
      LDA SYSAD 
      STA TEMP2 
      LDA KEYAD 
      STA TEMP3 
KYBLD LDA TEMP2     ADDRESS OF NEXT ID
      STA LBUF      ID ADDRESS
      LDA TEMP3     KEY WORD ADDRESS
      LDB A         INTO B
      ISZ TEMP3     BUMP TO NEXT KEY WORD ADDR
      JSB SETCR     OUT PUT TO ABS
      LDA TEMP2     UPDATE ID ADDRESS 
      ADA P28       SEG SIZE
      STA TEMP2 
      ISZ WDCNT     ALL DONE? 
      JMP KYBLD     NOT DONE YET
      STA PPREL     NEW RELOCATE ADDRESS
      CLA 
      STA LBUF      ZERO LAST KEY ENTRY 
      LDA KEYAD 
      ADA KEYCN     NOS OF KEY WORDS
      LDB A 
      JSB SETCR 
      LDB ALBUF     CLEAR BUFFER AREA 
      JSB BUFCL 
      OCT 0 
      LDA KEYCN     GET ID SEG COUNT
      CMA,INA 
      STA WDCNT     SAVE NEG
      LDA SYSAD     ADDRESS OF FIRST ID SEG 
      STA TEMP3 
CLOOP LDA TEMP3     STARTING ADDRESS
      LDB A 
      ADB P27       BUMP TO  LAST ADDR
      STB TEMP3     UPDATE
      STB LBUF
      ISZ LBUF      POINT TO NEXT ID SEG
      ISZ TEMP3           TO NEXT ADDR
      JSB SETCR     CLEAR ID SEGMENT
      ISZ WDCNT     ALL DONE? 
      JMP CLOOP     NO, DO MORE 
      LDA TEMP3 
      ADA N28       CLEAR 
      CLB               LAST
      STB LBUF             LINK 
      LDB A                   POINTER 
      JSB SETCR 
      HED  GET START-UP PROGRAM 
* 
*                                GET START-UP PROGRAM 
* 
      JSB SPACE 
      LDA P13       PRINT:
      LDB MES5      "STRT-UP PROG?" 
      JSB APARS,I   GO GET PARAMETERS 
      RSS 
      JMP RESLB     NO PARAMS WERE INPUT
      LDA TBUF      MOVE NAME 1,2 
      STA STRPN 
      LDA TBUF+1    NAME 3,4
      STA STRPN+1 
      LDA TBUF+2    NAME 5
      STA STRPN+2 
      LDA SYSAD      SEG ONE ADDRESS
      STA LBUF      PUT SEG INTO THE SCHEDULED LIST 
      LDA SKEDD     ADDRESS IN BASE PAGE
      LDB A 
      JSB SETCR     TO ABSOLUTE 
      LDA SYSAD     SEG ONE ADDRESS 
      ADA P28        UPDATE TO NEXT 
      STA SYSAD 
      ISZ IDNOS      BUMP NOS OF ID'S 
      HED  RELOCATE  RESIDENT LIBRARY 
* 
*                                   RELOCATE RESIDENT LIBRARY 
* 
RESLB JSB SPACE     START ON NEW LINE 
      LDA SYSAD 
      STA SETAD,I   FIRST DORMENT SEGMENT 
      LDA DORMT     DORMENT LIST POINTER
      LDB A 
      JSB SETCR     SET IT IN BP
      LDA PPREL     UP LOCC FOR RELOCATE
      STA .MEM3 
      STA SETAD,I   LIBRARY ORG TO BP 
      LDA LBORG 
      LDB A 
      JSB SETCR 
      CLA 
      STA PNAME 
      LDA P11       PRINT:
      LDB MES3      "REL RES LIB" 
      JSB AOTLY,I 
      LDA P2
      STA .XFER     MAKE NON-ZERO FOR LIBRARY 
      CLA 
      STA LOCC
      STA BPLOC 
      LDA LSTSV     RESTORE SYMBOL TABLE COUNT
      STA LST       IN THE LOADER 
      JSB CLBPL     CLEAR BASE PAGE LINKS 
      JSB PRCMD     GO TO LOADER
      JMP RESLB     LOADER ERROR, TRY AGAIN 
      LDA LOCC
      SZA,RSS 
      LDA .MEM3     RESTORE WITH SELF IF LOCC IS ZERO 
      STA .MEM3 
      STA SETAD,I   PUT IN BUFFER 
      LDA RTORG     BASE PAGE LOCATION
      LDB A 
      JSB SETCR     OUTPUT TO ABS 
      LDA BPLOC 
      SZA 
      STA .MEM1     UPDATE IF NON-ZERO
      LDA .MEM1     SET BASE PAGE LOWER LIMIT 
      STA LBUF      TO BUFFER 
      LDA P1647     SET BASE PAGE UPPER LIMIT 
      STA LBUF+1    TO BUFFER 
      LDA BPA1      FIRST BP ADDRESS
      LDB A 
      INB           LAST BP ADDRESS 
      JSB SETCR     SET TO BP COMM AREA 
      LDA LST       COUNT OF SYMBOLS
      STA LSTSV     SAVE FOR UPDATE AFTER EACH RELOCATE-CORE RES PROGS
* 
*                                    SET UP COMMON AREA 
* 
WDSCM JSB SPACE     NEW LINE
      LDA P14       PRINT:
      LDB MES7      "# WDS IN COMM?"
      JSB AREAD,I 
      LDA N5
      JSB GETOC     GET 5 DIGITS
      JMP WDERR     BAD NUMBER
      JSB GETAL     LOOK FOR END OF BUFFER
      SZA 
      JMP WDERR     NOT END ERROR, TRY AGAIN
      LDA OCTNO     GET VALUE 
      SZA,RSS 
      JMP RELRS 
      STA SETAD,I 
      LDA RTCOM     COMMON SIZE TO BP 
      LDB A 
      JSB SETCR 
      LDA .MEM3     UPDATE FWAC 
      STA .MEM5 
      ADA OCTNO     UPDATE LWAC 
      STA .MEM3 
      ADA N1
      STA .MEM6     LWAC
      JMP RELRS     GO REL CORE RES PROGS 
WDERR LDA ERR10     PRINT:
      JSB ERROR     "ERR-PA"
      JMP WDSCM     TRY AGAIN 
      HED  RELOCATE CORE RESIDENT PROGRAMS
* 
*                                     RELOCATE CORE RESIDENT PROGRAMS 
* 
RELRS JSB SPACE     NEW LINE
      JSB CLBPL     CLEAR PASE PAGE LINKS 
      STA PNAME 
      STA LOCC
      STA BPLOC 
      STA .XFER     CLEAR FOR CORE RES LOAD 
      LDA LSTSV     RESTORE BEFORE EACH RELOCATE
      STA LST 
      LDA P14       PRINT:
      LDB MES8      "REL USER PROGS"
      JSB AOTLY,I 
      JSB PRCMD     GO RELOCATE!!!!!
      JMP RELRS     LOADER ERROR, TRY AGAIN 
      LDA .XFER     WAS ZERO INPUT? 
      SZA,RSS 
      JMP SNAPO     YES, GO DO SNAPSHOT 
*                               CHANGE PARAMETERS 
SRFIN JSB SPACE 
      LDA P11       PRINT:
      LDB MES10     "ENTER PRAMS" 
      JSB APARS,I   GO GET PARAMS 
      RSS           PARAMS WERE INPUT 
      JMP SRFI5     NO PARAMS INPUT, NO CHANGE
      LDA TBUF      NAME 1,2
      STA PNAME 
      LDA TBUF+1    NAME 3,4
      STA PNAME+1 
      LDA TBUF+2    NAME 5
      STA PNAME+2 
      LDA IDAA      ADDRESS OF PARAMETERS 
      JSB UPNAM     UPDATE PARAMETERS 
SRFI5 CLA 
      STA WDCNT     CLEAR FOR FIRST TIME
      LDA APNAM 
      JSB SRIPX     SEARCH FOR DUPS 
      JMP *+7       FOUND ONE 
      LDA PNAME+2   MASK OUT LOWER BLANK
      AND M7400 
      STA PNAME+2   AND RESTORE 
      LDA PNAMA     THIS NAME NOT IN TABLE
      JSB LDIPX     SO, PUT IT THERE
      JMP SRFI6     CONTINUE PROCESSING 
      LDA IP3,I     IS THIS AN INT PRG? 
      AND M77 
      SZA 
      JMP SRFI6     YES, ITS OK 
      LDA ERRDU     NO, LOOKS LIKE A DUP ENTRY
      JSB ERROR 
      JMP SRFIN     TRY AGAIN 
* 
SRFI6 LDA STRPA     ADDRESS OF START UP NAME
      LDB PNAMA     JUST LOADED NAME
      JSB NACMP     COMPARE NAMES 
      JMP SRFI2     NO COMPARE
      CLA           DOES COMPARE
      STA STRPN     CLR STRT FLAG 
      LDA IDSAD     SEGMENT ADDRESS 
      CLB           POINTS TO ADDRESS 
      JSB GENID     GO BUILD ID SEGMENT 
      LDA IDSAD     GET ID SEG ADDRESS
      INA           POINT TO TEMPORARY STORAGE
      STA SETAD,I 
      ADA P9        WORD 11 IN SEG
      LDB A 
      JSB SETCR    ADD WORD TO SEG
      CLA,INA 
      STA SETAD,I 
      LDA IDSAD 
      ADA P15       PUT A 1 INTO WORD 16 OF THE SEG 
      LDB A 
      JSB SETCR 
      LDA IDSAD     GET CORRECT ID SEG ADDRESS
      JSB SRFI3     "PROGS" WERE ENTERED, GO LOOK FOR IT
      JMP RELRS     GO RELOCATE NEXT
* 
SRFI2 LDA IDNOS     ENTERED PROGS EXCEEDED ID SEGS? 
      CMA,INA 
      ADA KEYCN 
      SSA 
      JMP LSERR     IRRECOVERABLE ERROR YES!! 
      LDA SYSAD     GET CORRECT ID SEG ADDRESS
      JSB SRFI3     GO CHECK FOR INT-PRGS 
      LDA SYSAD     BUILD SEG IN THIS ADDRESS 
      LDB A 
      ADB P28       LOOK TO NEXT SEGMENT
      STB SYSAD     DYNAMIC SEG POINTER 
      JSB GENID     BUILD ID SEG
      ISZ IDNOS     UP NOS OF ID' INPUT 
      JMP RELRS     GO GET NEXT 
* 
SRFI3 NOP 
      STA PPREL     SAVE ID SEG ADDRESS 
      CLA 
      STA WDCNT     CLEAR FOR INITIAL ENTRY 
      LDA APNAM     ADDRESS OF INPUTTED PROG NAME 
SRFI4 JSB SRIPX     GO SEARCH 
      RSS           FOUND NAME
      JMP SRFI3,I   END OF TABLE
      LDA IP3,I     COMPARES,GET SC 
      AND M77 
      SZA,RSS 
      JMP SRFI4 
      ADA AINT      ADDRESS OF INTERRUPT TABLE
      ADA N6
      LDB PPREL     SET NEG OF ID ADDRESS 
      CMB,INB       INTO THE INTERRUPT TABLE
      STB SETAD,I 
      LDB A 
      JSB SETCR 
      LDA IP3,I 
      AND M7400 
      STA IP3,I     SHOW ENTRY AS USED
      JMP SRFI4     LOOK AGAIN
      HED SNAPSHOT OUTPUT FOR LOADER RELOCATION 
* 
*                                     SNAPSHOT OUTPUT 
* 
SNAPO LDA STRPN     WAS START-UP PRG REQUESTED? 
      SZA,RSS       BUT NOT LOADED
      JMP SNAP5     NO,GO CHECK FOR INT PRGS
      JSB SPACE 
      LDA P12       YES, PRINT: 
      LDB MES5      "STAR-UP PROG"
      JSB AOTLY,I 
      JSB SPACE 
      LDA P5        PRINT:
      LDB STRPA     START-UP PROG NAME
      JSB AOTLY,I 
      JSB SPACE 
      JMP RELRS     RELOCATE START-UP PROGRAM 
* 
SNAP5 CLA 
      STA PPREL     HEADER FLAG 
      STA WDCNT 
      LDA P1        NAME ADDRESS
SNAP6 JSB SRIPX     GO SEARCH 
      RSS           FOUND SOMETHING 
      JMP SNAP7     END OF TABLE
      LDA IP3,I     IS IT AN INT PRG NAME?
      AND M77 
      SZA,RSS 
      JMP SNAP6     NO, LOOK NEXT 
      LDA PPREL     HEADER BEEN PRINTED?
      SZA 
      JMP *+7       YES 
      JSB SPACE     NO, PRINT IT
      LDA P8        PRINT:
      LDB MES12     "INT PRG" 
      STA PPREL     SET HEADER FLAG 
      JSB AOTLY,I 
      JSB SPACE     NEW LINE
      LDA P5        PRINT:
      LDB IP1        PRG NAME 
      JSB AOTLY,I 
      JMP SNAP6     LOOK NEXT 
* 
SNAP7 LDA PPREL     ANY INT PRGS PRINTED? 
      SZA,RSS 
      JMP SNAP8     NO, CONTINUE
      JSB SPACE     YES, ASK IGNORE QUESTION
      LDA P7        PRINT:
      LDB MES13     "IGNORE?" 
      JSB AREAD,I   AND GET THE REPLY 
      CCA 
      STA CMFLG 
      JSB GETAL     FRIST LETTER OF REPLY 
      CPA ANO       AN "N" ?
      JMP RELRS     YES, TRY TO RELOCATE PRGS 
      CPA AYES      NO, IS IT A "Y" ? 
      JMP SNAP8     YES, PROCESS SNAPSHOT 
      LDA ERR10     WAS NEITHER 
      JSB ERROR     PRINT: "ERR-PA" 
      JMP SNAP7     TRY AGAIN 
* 
SNAP8 LDA JMP3I     SET STARTING JMP
      STA LBUF
      LDA STRAD     SET STARTING ADDRESS
      STA LBUF+1
      LDA P2
      LDB P3
      JSB SETCR 
*                                         SET FWA SYS MEM IN BP 
      LDA SYMAD     FWA SYS MEM 
      SZA,RSS 
      LDA .MEM3     DEFAULT TO FWAM, IF FWASM EQ 0. 
      STA LBUF+1    TO BUFFER 
      LDA .MEM3 
      STA LBUF
      LDB AVMEM     BP ADDRESS
      LDA B 
      ADA N1
      JSB SETCR     SET FWA SYS MEM INTO RTS BP 
      JSB SPACE 
SNAP2 LDA P9        PRINT:
      LDB MES9      "SNAPSHOT"
      JSB AREAD,I 
      CCA 
      STA CMFLG 
      JSB GETAL     GET RESPONSE
      CPA ANO       NO????? 
      JMP ENDGN     YEP, END OF RTS GEN 
      CPA AYES      YES???????
      JMP *+4       YES 
      LDA ERR10 
      JSB ERROR 
      JMP SNAP2     TRY AGAIN 
      JSB LTG       OUTPPUT LEADER
      JSB LTG 
      LDA .MEM.      FRIST ADDRESS
      STA MEMAD     .MEM. ADDRESS 
      LDA MEMOT     ADDRESS OF LABELS 
      STA LBLAD 
      LDA N6        NUMBER OF LABELS
      STA WDCNT 
      JSB GINIT     INITIALIZE BUFFER 
      CLA 
      STA MAXC      CLEAR WORD COUNT
      STA PROCT     CLEAR TOTAL COUNT 
SNAP1 LDA N4        NO OF CHARS 
      LDB BNDS      ADDRESS OF "-BOUNDS"
      JSB BUFUP    PUNCH ON TAPE
      JSB LBOUT     PUNCH LABELS
      LDA MEMAD,I  NEXT VALUE 
      LDB ATBUF    BUFFER TEMP STORAGE
      JSB ACONV,I  CONVERT TO OCTAL 
      LDA N3
      LDB ATBUF 
      JSB BUFUP     PUNCH VALUE 
      LDB MES25    FINISH LINE WITH "CRLF"
      JSB BUFUP 
      ISZ MEMAD    BUMP TO NEXT VALUE 
      ISZ WDCNT    MORE?
      JMP SNAP1    YES
* 
      LDA LST       NUMBER OF SYMBOLS 
      CMA,INA 
      STA WDCNT 
      LDA LSTA1     SYMBOL TABLE ADDRESS
      STA MEMAD 
SNAP4 LDA N3
      LDB ASET
      JSB BUFUP     PUNCH "-SET"
      LDA N2
      LDB MEMAD 
      JSB BUFUP     PUNCH SYMBOL NAME 
      ISZ MEMAD 
      ISZ MEMAD     MOVE TO END OF NAME 
      LDA MEMAD,I   GET LAST CHAR 
      AND M7400     MASK OUT LOWER
      IOR ASPCE     INSERT SPACE AS LAST CHAR 
      STA MEMAD,I   RESTORE 
      LDA N1
      LDB MEMAD 
      JSB BUFUP     PUNCH LAST CHAR 
      LDA N2
      LDB ASTOA     PUNCH " TO "
      JSB BUFUP 
      ISZ MEMAD     BUMP TO LST4
      LDA MEMAD,I 
      LDB ATBUF 
      JSB ACONV,I   CONVERT LST4 TO OCTAL 
      LDA N3
      LDB ATBUF 
      JSB BUFUP     PUNCH LST4
      LDB MES25 
      JSB BUFUP     FINISH WITH CRLF
      ISZ MEMAD 
      LDA MEMAD,I   GET LST5
      SZA,RSS       IS LST5 EQ. 0?
      JMP SNAP3     YES, SKIP LINKS 
      LDA N8
      LDB ASSTL 
      JSB BUFUP     PUNCH "-LINKS START AT" 
      LDA MEMAD,I 
      LDB IDAA      BUFFER ADDRESS
      JSB ACONV,I   CONVERT LST5
      LDA TBUF
      AND M377      MASK OUT SPACE AS FIRST CHAR
      IOR ACOMA     INSERT A COMMA
      STA TBUF      RESTORE, COMMA AS FIRST 
      LDA N3
      LDB IDAA
      JSB BUFUP     PUNCH LST5
      LDA N3
      LDB ATBUF 
      JSB BUFUP     PUNCH LST4
      LDB MES25 
      JSB BUFUP     FINISH WITH "CRLF"
SNAP3 ISZ MEMAD     UP TO NEXT SYMBOL 
      ISZ WDCNT     DONE? 
      JMP SNAP4     NO, DO NEXT 
* 
      LDA N8
      LDB ASET
      JSB BUFUP     PUNCH "-SET BPLOCC TO"
      LDA .MEM1 
      LDB ATBUF 
      JSB ACONV,I 
      LDA N3
      LDB ATBUF 
      JSB BUFUP     PUNCH BPLOC 
      LDB MES25     DUMP BUFFER 
      JSB BUFUP 
      LDA N3        END LINE WITH CRLF
      LDB ASET      ADDRESS OF "SET"
      JSB BUFUP     PUNCH"-SET" 
      LDA N2
      LDB ASLOC     ADDRESS OF "LOCC" 
      JSB BUFUP     PUNCH "LOCC"
      LDA N2
      LDB ASTOA 
      JSB BUFUP     PUNCH " TO "
      LDA .MEM3     FETCH FWAM
      LDB ATBUF 
      JSB ACONV,I   CONVERT TO ASCII
      LDA N3
      LDB ATBUF 
      JSB BUFUP     PUNCH VALUE OF FWAM 
      LDB MES25 
      JSB BUFUP    END LINE WITH CRLF 
      JMP ENDGN    GO TO END RTSGN ROUTINE
      HED  SNAPSHOT GENERATION SUBROUTINES
* 
* 
*                                OUTPUT LABEL ROUTINE 
* 
* 
*  CALLING SEQUENCE:
*    A AND B ARE IGNORED
*    JSB LBOUT
* 
*  RETURN: A AND B ARE DESTROYED
* 
LBOUT NOP 
      LDA N3
      LDB LBLAD     ADDRESS OF LABEL
      JSB BUFUP    PUNCH LABEL
      LDA LBLAD    UPDATE LABEL POINTER 
      ADA P3
      STA LBLAD 
      JMP LBOUT,I  RETURN 
* 
* 
*                                 LOAD AND DUMP THE PUNCH BUFFER
* 
* 
*  CALLING SEQUENCE:
*    A = NEG OF NO. OF WORDS TO LOAD
*    B = ADDRESS TO LOAD FROM 
*    JSB BUFUP
* 
*  RETURN:  A AND B ARE DESTROYED 
* 
BUFUP NOP 
      CPB MES25     DUMP BUFFER REQUEST?
      JMP BUFDN     YES 
      STA MAXC      NO, SAVE NO OF WORDS TO GO
      ADA PROCT     ACCUMULATE THE TOTAL
      STA PROCT 
      LDA B,I       GET THE WORD
      STA CURAL,I   PUT IN BUFFER 
      INB           BUMP SOURCE POINTER 
      ISZ CURAL     UP BUFFER POINTER 
      ISZ MAXC      ALL DONE? 
      JMP *-5 
      JMP BUFUP,I   ALL DONE, RETURN
* 
BUFDN LDA PROCT     GET NEG OF WORD COUNT 
      CMA,INA       MAKE POSITIVE 
      RAL           MULT BY TWO 
      LDB ALBUF     START ADDRESS OF BUFFER 
      JSB PCHX      GO PUNCH THE BUFFER 
      JSB GINIT     INITIALIZE BUFFER POINTERS
      CLA 
      STA MAXC
      STA PROCT 
      JMP BUFUP,I    RETURN 
* 
* 
* 
* 
ENDGN JSB SPACE     NEW LINE
      LDA P14       PRINT:
      LDB MES11    "RTSGN FINISHED" 
      JSB AOTLY,I 
      JSB LTG 
      HLT 77B 
      JMP *-1       GO NO FUTHER!!!!!!!!!!!!!!
      END START 
* 
