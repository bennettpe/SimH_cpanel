      STA MAXC      MAXC = MAXIMUM NO. CHARS
      LDA ATBUF     ATBUF = ADDR OF TBUF
      STA CURAT     SET CURRENT TBUF ADDRESS
      CLB 
      STB TBUF      CLEAR WORD 1 OF TBUF
      CCA 
      STA CMFLG     SET COMMA-IN FLAG 
      SEZ,RSS       SKIP - ODD POSITION 
      JMP OCHAR     BEGIN WITH ODD CHARACTER
NEXTC JSB GETAL     GET CHAR FROM LBUF
      CPA ZERO      END OF BUFFER?
      LDA BLANK     YES - REPLACE CHAR WITH BLANK 
      ALF,ALF       ROTATE TO UPPER A 
      STA CURAT,I   SET CHARACTER IN TBUF 
      ISZ MAXC      CHECK FOR ALL CHARS IN
      JMP OCHAR     GET ODD CHAR FROM LBUF
      LDA TBUF      GET FIRST 2 TRANSFERRED CHARS 
      JMP GETNA,I   YES - RETURN
OCHAR JSB GETAL     GET CHAR FROM LBUF
      CPA ZERO      END OF BUFFER?
      LDA BLANK     REPLACE ZERO CHAR WITH BLANK
      IOR CURAT,I   ADD TO UPPER CHAR IN TBUF 
      STA CURAT,I   SET CHARS IN TBUF 
      ISZ CURAT     INCR TBUF ADDRESS 
      ISZ MAXC      CHECK FOR ALL CHARS IN
      JMP NEXTC     NO - TRY NEXT UPPER CHAR
      LDA TBUF      GET FIRST 2 TRANSFERRED CHARS 
      JMP GETNA,I   RETURN
      SKP 
*                                    OUTPUT ID SEGMENT IN ABS 
* 
*  THIS ROUTINE WILL OUTPUT A 28 WORD BLOCK FROM THE
*  I/O BUFFER AREA. 
* 
*  CALLING SEQUENCE:
*    A = ABS STARTING ADDR
*    B = IGNORED
*    JSB GENID
* 
*  RETURN: A AND B ARE DESTROYED
* 
OUTID NOP 
      LDB A 
      ADB P27       SET LAST ADDRESS
      JSB SETCR     GO SET CORE 
      JMP OUTID,I   RETURN
* 
*                                    GENERATE ID SEGMENT
* 
*  THIS ROUTINE WILL BUILD AN ID SEGMENT IN THE OUTPUT
*  BUFFER (LBUF) AREA. THE BUFFER IS CLEARED AND STUFFED
*  WITH DATA (FROM THE PNAME TABLE) BEFORE BEING OUTPUT 
*  BY THE OUTID ROUTINE.
* 
*  CALLING SEQUENCE:
*    A = ABSOLUTE ADDRESS OF SEGMENT
*    B = LIST LINK ADDREESS TO NEXT SEGMENT 
*    JSB GENID
* 
* 
*  RETURN: A AND B ARE DESTROYED
* 
GENID NOP 
      STA IDSAV 
      STB LNKSV 
      LDB ALBUF     BUFFER ADDRESS
      JSB BUFCL     CLEAR BUFFER
      OCT 0 
      LDA LNKSV     GET LINK ADDRESS
      STA LBUF      PUT IN BUFFER 
      LDA PNAME+7   GET PRIORITY
      SZA,RSS 
      LDA P99       DEFAULT TO 99 
      STA LBUF+6
      LDA .XFER     ENTRY POINT 
      STA LBUF+7
      LDA PNAME     NAME 1,2
      STA LBUF+12 
      LDA PNAME+1   NAME 3,4
      STA LBUF+13 
      LDA PNAME+2   NAME 5, BLNK
      AND M7400     MASK OUT BLANK
      INA           MAKE TYPE 1 
      STA LBUF+14 
      LDA PNAME+8   RESOLUTION
      ALF,ALF 
      ALF,RAL       SHIFT INTO PLACE
      IOR PNAME+9   MURGE EXEC MULT 
      STA LBUF+17   PUT IN BUFFER 
      LDA PNAME+10  HOURS 
      SZA,RSS 
      LDA N24       DEFAULT TO 24 
      STA LBUF+21 
      LDA PNAME+11  MINUTES 
      SZA,RSS 
      LDA N60       DEFAULT TO 60 
      STA LBUF+20 
      LDA PNAME+12  SECONDS 
      SZA,RSS 
      LDA N60       DEFAULT TO 60 
      STA LBUF+19 
      LDA PNAME+13  TENS OF SEC 
      SZA,RSS 
      LDA N100      DEFAULT TO 100
      STA LBUF+18 
      LDA .MEM3     LOW MAIN
      STA LBUF+22 
      LDA LOCC      HIGH MAIN 
      STA LBUF+23 
      LDA .MEM1     LOW BASE
      STA LBUF+24 
      LDA BPLOC     HIGH BASE 
      STA LBUF+25 
      LDA LOCC      UPDATE FWAM 
      STA .MEM3     FWAM
      LDA BPLOC     UPDATE FWABP
      STA .MEM1     FWABP 
      CLA 
      STA LOCC      CLEAR LOCC
      STA BPLOC       "   BPLOC 
      LDA IDSAV     ABS ADDRESS 
      JSB OUTID     GO OUTPUT ID SEGMEMT
      JMP GENID,I   RETURN
* 
IDSAV BSS 1 
LNKSV BSS 1 
* 
* 
*                                   CONVERT OCT/DEC ASCII TO BINARY 
* 
*  THE GETOC SUBROUTINE CONVERTS THE NEXT CHARACTERS IN LBUF FROM 
*  ASCII (DECIMAL OR OCTAL) TO THEIR BINARY VALUE.
* 
*  CALLING SEQUENCE:
*    A = MAX. NO. OF CHARS IN CONVERSION REQUEST.  IF A IS
*        POSITIVE, THE REQUEST IS FOR OCTAL; IF A IS NEGATIVE,
*        THE REQUEST IS FOR DECIMAL.
*    B = IGNORED
*    JSB GETOC
* 
*  RETURN:
*    (N+1): INVALID DIGIT OR OVERFLOW IN CONVERSION 
*    (N+2): A = CONVERTED NO. 
*           B = DESTROYED 
* 
GETOC NOP 
      LDB L10       GET OCTAL RANGE 
      SSA           SKIP IF OCTAL REQUEST 
      LDB L12       GET DECIMAL RANGE 
      STB DRANG     SET DIGIT RANGE 
      SSA,RSS       SKIP IF DECIMAL REQUEST 
      CMA,INA       SET REQUEST COUNT TO NEGATIVE 
      STA MAXC      SET MAX NO. OF DIGITS 
      CCA 
      STA DIFLG     SET DATA-IN FLAG = NO DATA IN 
      STA CMFLG     SET COMMA-IN FLAG 
      CLA 
      STA OCTNO     OCTNO = OCTAL NUMBER
GETNX JSB GETAL     GET CHAR FROM LBUF
      CPA ZERO      CHAR = ZERO? (END OF BUFFER)
      JMP ENDOC     YES - RETURN
      CPA BLANK     CHAR = BLANK? (COMMA IN)
      JMP ENDOC     YES - RETURN
      ADA L60       SUBTRACT 60B FROM CHAR
      STA TCHAR     SAVE CHAR 
      SSA           SKIP IF VALID LOWER LIMIT 
      JMP DGERR     INVALID DIGIT 
      ADA DRANG     ADD DIGIT RANGE 
      CLE,SSA,RSS   CLEAR E - SKIP IF VALID DIGIT 
      JMP DGERR     INVALID DIGIT 
      ISZ DIFLG     INCR DATA-IN FLAG, SKIP 
      NOP 
      LDA OCTNO     GET PREVIOUS OCTAL NO.
      ADA A         SET A = OCTNO X 2 
      ADA A         SET A = OCTNO X 4 
      LDB DRANG     GET DIGIT RANGE 
      CPB L12       RANGE = DECIMAL?
      ADA OCTNO     SET A = OCTNO X 5 
      ADA A         SET A = OCTNO X 10/8
      ADA TCHAR     SET A = NEW OCTAL NO. 
      STA OCTNO     SAVE NEW OCTAL NO.
      SEZ           TEST FOR OVERFLOW 
      JMP DGERR     INVALID NO. 
      ISZ MAXC      SKIP IF ALL DIGITS PROCESSED
      JMP GETNX     GET NEXT DECIMAL DIGIT
      ISZ GETOC     INCR RETURN ADDRESS 
      LDA OCTNO     GET OCTAL EQUIVALENT
DGERR JMP GETOC,I   RETURN
ENDOC ISZ DIFLG     SKIP - NO DATA IN 
      JMP *-4       DATA IN - NORMAL RETURN 
      JMP GETOC,I   RETURN - ERROR
      SKP 
* 
* 
*  ROUTINE TO CONVERT THE OCTAL NUMBER IN A TO
*  ASCII AND STUFF THE 2 LOW ORDER DIGITS INTO A BUFFER 
*  ADDRESSED BY B. LEADING ZEROS ARE SUPPRESED
* 
*  CALLING SEQUENCE:
* 
*    A = OCTAL NUMBER 
*    B = BUFFER ADDRESS 
* 
*  RETURN: A AND B ARE DESTROYED
* 
STFNM NOP 
      STB STFAD     SAVE FINAL ADDRESS
      LDB ATBUF     TEMP BUFFER ADDRESS 
      CMA,INA       NEG FOR DECIMAL CONVERT 
      JSB ACONV,I 
      LDA TBUF+2    LEAST 2 DIGITS
      AND M7400     ISOLATE UPPER CHAR
      CPA UASCZ     CHAR = ASCII ZERO?
      LDA UBLNK     YES, REPLACE WITH BLANK 
      STA B         SAVE UPPER CHAR 
      LDA  TBUF+2   GET ORIG DIGITS 
      AND  M177     ISOLATE LOWER CHAR
      IOR B         MURGE 
      STA STFAD,I   STORE IN BUFFER 
      JMP STFNM,I 
* 
STFAD BSS 1 
* 
*                                   LOAD PROG NAME INTO TABLE 
* 
*  THE 3 WORD PROGRAM NAME IS PUT INTO THE RTSGN PROG 
*  TABLE. THE NAMES ARE LOADED FROM THE TOP DOWN. 
* 
*  CALLING SEQUENCE:
*    A = ADDRESS OF PROGRAM NAME
*    B = IGNORED
*    JSB LDIPX
* 
*  RETURN:  A AND B ARE DESTROYED 
* 
LDIPX NOP 
      STA IPXSV     SAVE PROG NAME ADDRESS
      JSB INIPX     INITIALIZE TO START OF TABLE
      LDA PROCT      NUMBER OF ENTRIES
      ALS            MULT X2
      ADA PROCT      PLUS ONE TO MAKE IT X3 
      CMA,INA 
      ADA BIDNT      BUILD NEXT NAME ADDRESS
      STA BIDNT      FOR SAVE 
      JSB SYEND     FIND END OF SYMBOL TABLE
      LDB A 
      LDA BIDNT     CHECH FOR OVERFLOW  INTO LST
      CMA,INA 
      ADA B 
      SSA,RSS       HAS IT OVERFLOWED?
      JMP LSERR     YES 
      LDB BIDNT    NO, UPDATE POINTERS FOR LOADER 
      ADB N1
      STB OPT.3     TOP OF LST FOR LOADER 
      JSB IPX       INITIALIZE IP POINTERS
      LDA IPXSV,I    GET N1-N2
      STA IP1,I     PUT IN TABLE
      ISZ IPXSV     BUMP POINTER
      LDA IPXSV,I   GET N3-N4 
      STA IP2,I     SAVE
      ISZ IPXSV 
      LDA IPXSV,I   GET N5-XX 
      STA IP3,I     SAVE
      ISZ PROCT     BUMP NUMBER OF NAMES
      JMP LDIPX,I   RETURN
* 
      SKP 
* 
*                                   SEARCH RTSGN PROG TABLE 
* 
*  THIS IS A MULTIPLE ENTRY ROUTINE WHICH WILL EITHER 
*  SEARCH FOR A NAME OR CONTINUE FROM THE LAST FIND.
* 
*  CALLING SEQUENCE:
*    A = ADDRESS OF NAME (3WORD)
*    B = IGNORED
*    JSB SRIPX
* 
*  RETURN:
*    (N+1) PROGRAM NAME WAS FOUND IN TABLE, IN IP1-3
*    (N+2) REACHED THE END OF THE PROGRAM TABLE 
* 
SRIPX NOP 
      LDB WDCNT     SEARCH OR CONTINUE? 
      SZB 
      JMP SRIP1     CONTINUE
      STA SRISV     INIT SEARCH 
      JSB INIPX     SET UP IP POINTERS
      LDA PROCT     NUMBER OF ENTRIES 
      CMA 
      STA WDCNT     SAVE FOR LOOPING
SRIP1 ISZ WDCNT     ALL DONE? 
      JMP *+3       NO, GO COMPARE NAMES
      ISZ SRIPX     YES, BUMP RETURN
      JMP SRIPX,I 
      JSB IPX       SET POINTERS
      LDB IP1       NAME IN TABLE 
      LDA SRISV,I   LOOK FOR NAME 
      JSB NACMP     GO COMPARE
      JMP SRIP1     DOSN'T COMPARE, LOOK NEXT 
      JMP SRIPX,I   DOES COMPARE, RETURN
* 
      SKP 
* 
*                                   INITIALIZE CHAR TRANSFER
* 
*  THE GINIT SUBROUTINE SETS THE CURRENT ADDRESS AND UPPER/LOWER
*  FLAG FOR SCANNING LBUF.
* 
*  CALLING SEQUENCE:
*    A = IGNORED
*    B = IGNORED
*    JSB GINIT
* 
*  RETURN : CONTENTS OF A AND B ARE DESTROYED 
* 
GINIT NOP 
      LDA ALBUF     ALBUF = ADDR OF LBUF
      STA CURAL     SET CURRENT LBUF ADDRESS
      CCB 
      STB BUFUL     BUFUL = BUFFER U/L FLAG 
      JMP GINIT,I   RETURN
* 
*                                   CONVERT A TO ASCII AT B 
* 
*  THE CONVD SUBROUTINE CONVERTS THE CONTENTS OF A
*  INTO ASCII (DECIMAL OR OCTAL) AT THE LOCATION SPECIFIED
*  BY B.  THE CONVERTED RESULT REQUIRES 3 WORDS, AND IS 
*  IN THE FORMAT:  XXXXX, WITH A SPACE IN THE FIRST POSITION. 
* 
*  CALLING SEQUENCE:
*    A = NO. TO BE CONVERTED.  IF THE SIGN OF A IS POS.,
*        THE CONVERSION IS TO BE IN OCTAL;  IF NEGATIVE,
*        IN DECIMAL.
*    B = ADDRESS OF CORE LOCATION FOR CONVERTED RESULT
*    JSB CONVD
* 
*  RETURN: CONTENTS OF A AND B ARE DESTOYED.
* 
CONVD NOP 
      STB CURAT     SET MESSAGE ADDRESS 
      LDB OPWRS     GET ADDR OF OCTAL POWERS
      SSA           SKIP IF OCTAL CONV REQUIRED 
      LDB DPWRS     GET ADDRESS OF DECIMAL POWERS 
      STB RANAD     SET POWER RANGE ADDRESS 
      SSA,RSS       SKIP IF NEGATIVE (DECIMAL)
      CMA,INA       CONVERT NUMBER TO NEGATIVE
      STA B         PUT NUMBER IN B (REMAINDER) 
      LDA N2
      STA TCNT      SET CONVERSION COUNTER
      JSB GETD      GET FIRST DIGIT 
      IOR UBLNK     ADD BLANK TO FIRST CHAR 
      STA CURAT,I   SAVE FIRST BLANK, CHARACTER 
      ISZ CURAT     INCR MESSAGE ADDRESS
NEXTD JSB GETD      GET NEXT DIGIT
      ALF,ALF       ROTATE TO UPPER 
      STA CURAT,I   SAVE UPPER CHARACTER
      JSB GETD      GET NEXT DIGIT
      IOR CURAT,I   ADD UPPER CHAR
      STA CURAT,I   SAVE NEXT 2 CHARACTERS
      ISZ CURAT     INCR MESSAGE ADDRESS
      ISZ TCNT      SKIP - 5 DIGITS IN
      JMP NEXTD     NO - CONTINUE WITH NEXT DIGIT 
      JMP CONVD,I   YES - RETURN
* 
*                                   SET PARAMETERS
* 
*  THE PARAMETER INPUT SECTION PERMITS ALTERATION (OR INTRODUCTION) 
*  OF THE NAME, PRIORITY, AND EXECUTION INTERVAL FOR EACH PROGRAM.
*  EACH PARAMETER RECORD HAS ONE OF THE FOLLOWING FORMATS:
* 
*    NAME 
*    NAME,PRIORITY
*    NAME,PRIORITY,EXECUTION INTERVAL 
* 
*  PRIORITY = 2 DECIMAL DIGITS (0-99) 
*  EXECUTION INTERVAL = 6 OPERANDS
*    1 - RESOLUTION CODE (2 DECIMAL DIGITS) 
*    2 - EXECUTION MULTIPLE (5 DECIMAL DIGITS)
*    3 - HOURS (2 DECIMAL DIGITS) 
*    4 - MINUTES (2 DECIMAL DIGITS) 
*    5 - SECONDS (2 DECIMAL DIGITS) 
*    6 - 10'S MULLISECONDS (2 DECIMAL DIGITS) 
* 
* 
*  RETURN: A AND B ARE DESTROYED
*    (N+1): SOME PARAMETERS WERE ENTERED
*    (N+2): NO PARAMETERS WERE ENTERED
* 
*    TBUF CONTAINS THE ENTERED NAME 
* 
* 
PARAM NOP 
      JSB AREAD,I   GET ASCII PARAMETER RECORD
      SZA,RSS       SKIP IF CHARS INPUT 
      JMP PARAM+1   REPEAT PARAMETER INPUT
      STA PARNO     SAVE PARAMETER RECORD LENGTH
      CLA 
      STA ID5 
      STA ID6 
      STA ID7 
      STA ID8 
      STA ID9 
      STA ID10
      STA ID11
      JSB GETAL 
      CPA M60 
      RSS 
      JMP *+3 
      ISZ PARAM 
      JMP PARAM,I 
      JSB GINIT     INITIALIZE BUFFER SCAN
      LDA N5
      JSB GETNA     MOVE CHARS FROM LBUF TO TBUF
      JSB GETAL     GET NEXT CHAR FROM LBUF 
      CPA BLANK     CHAR = BLANK?(DELIMITER = COMMA)
      JMP SETYP     YES - CONTINUE
      CPA ZERO
      JMP PARAM,I 
* 
PANER LDA ERR09     PARAMETER NAME ERROR
      JMP PARER 
PATER LDA ERR10     PARAMETER TYPE ERROR
      JMP PARER 
* 
*                                   SET NEW PROGRAM PRIORITY
SETYP LDA N2        SET COUNT FOR DECIMAL CONVERSION
      JSB GETOC     CONVERT TO OCTAL
      JMP PAPER     PRIORITY ERROR
      JSB GETAL     GET NEXT CHAR FROM LBUF 
      CPA ZERO      CHAR = ZERO ? (END OF BUFFER) 
      RSS           YES - CONTINUE
      CPA BLANK     CHAR = BLANK?(DELIMITER = COMMA)
      JMP SETNR     SET PRIORITY
PAPER LDA ERR11     PARAMETER PRIORITY ERROR
      JMP PARER 
* 
SETNR LDB OCTNO     GET PRIORITY
      STB ID5        SET NEW PRIORITY 
      JSB GETAL     GET NEXT CHAR FROM LBUF 
      CPA ZERO      CHAR = ZERO ? (END OF BUFFER) 
      JMP PARAM,I   YES,RETURN
* 
*                                   GET RESOLUTION CODE 
      LDA N2        SET FOR 2 DECIMAL DIGITS
      JSB EXINT     GET DIGITS FROM LBUF
      STA ID6       SET IN IDENT 6
* 
*                                   GET EXECUTION MULTIPLE
      LDA N5        SET COUNT FOR DECIMAL CONVERSION
      JSB EXINT     GET DIGITS FROM LBUF
      AND M1600     ISOLATE UPPER 3 BITS IN A 
      SZA           SKIP IF VALID MULTIPLE
      JMP PAIER     INVALID EXECUTION INTERV FORMAT 
      LDA OCTNO     GET CONVERTED NUMBER
      STA ID7 
* 
*                                   GET HOURS 
      LDA N2        SET FOR 2 DECIMAL DIGITS
      JSB EXINT     GET DIGITS FROM LBUF
      ADA N24 
      STA ID8 
* 
*                                   GET MINUTES 
      LDA N2        SET FOR 2 DECIMAL DIGITS
      JSB EXINT     GET DIGITS FROM LBUF
      ADA N60 
      STA ID9 
* 
*                                   GET SECONDS 
      LDA N2        SET FOR 2 DECIMAL DIGITS
      JSB EXINT     GET DIGITS FROM LBUF
      ADA N60 
      STA ID10
* 
*                                   GET TENS OF MILLISECONDS
      LDA N2        SET FOR DECIMAL CONVERSION
      JSB GETOC     CONVERT TO OCTAL
      JMP PAIER     INVALID DIGIT 
      JSB GETAL     GET NEXT CHAR FROM LBUF 
      CPA ZERO      CHAR = 0? (END OF BUFFER) 
      RSS           YES - CONTINUE
      JMP PAIER     NO - INVALID DELIMITER
      LDA OCTNO 
      ADA N100
      STA ID11
      JMP PARAM,I 
* 
*                                   EXECUTION INTERVAL INPUT CONTROL
EXINT NOP 
      JSB GETOC     CONVERT TO OCTAL
      JMP PAIER     INVALID DIGIT 
      JSB GETAL     GET NEXT CHAR FROM LBUF 
      CPA BLANK     CHAR = BLANK? (DELIMITER=COMMA) 
      RSS           YES - CONTINUE
      JMP PAIER     NO - INVALID DELIMITER
      LDA OCTNO     GET CONVERTED NUMBER
      JMP EXINT,I   RETURN WITH NUMBER IN A 
PAIER LDA ERR12     PARAMETER INTERVAL ERROR
* 
PARER JSB ERROR     PRINT ERROR MESSAGE 
      JSB SPACE     NEW LINE
      JMP PARAM+1   RE-READ PARAMETER RECORD
* 
*                                   GET DIGIT FOR CONVD 
* 
*  GETD PROVIDES THE ASCII CHARACTERS FOR CONVD.
* 
*  CALLING SEQUENCE:
*    A = IGNORED
*    B = REMAINDER
*    JSB GETD 
* 
*  RETURN:
*    A = ASCII DIGIT
*    B = IGNORED
* 
GETD  NOP 
      CLA 
INCRA ADB RANAD,I   ADD POWER 
      CMB,SSB,INB,SZB   SKIP - TRY NEXT HIGHER DIGIT
      JMP *+4       DIGIT FOUND 
      INA           INCR DIGIT
      CMB,INB       RESTORE REMAINDER TO NEGATIVE 
      JMP INCRA     TRY HIGHER DIGIT
      ADB RANAD,I   ADD POWER 
      CMB,INB       RESTORE REMAINDER 
      ISZ RANAD     INCR POWER LIST ADDRESS 
      IOR M60       CONVERT TO ASCII
      JMP GETD,I    RETURN WITH DIGIT IN A
* 
*                                    PNAME UPDATE 
* 
*  THIS ROUTINE WILL UPDATE THE PARAMETERS IN THE 
*  PNAME TABEL. THE SOURCE WILL BE  FROM THE
*  "ENTR PRAMS" TABLE 
* 
*  CALLING SEQUENCE:
*    A = SOURCE ADDRESS 
*    B = IGNORED
*    JSB UPNAM
* 
*  RETURN: A AND B ARE DESTROYED
* 
UPNAM NOP 
      STA TEMP1     SAVE SOURCE ADDRESS 
      LDA TEMP1,I   GET PRIORITY
      STA PNAME+7   YES 
      ISZ TEMP1 
      LDA TEMP1,I   GET RESOLUTION
      SZA 
      STA PNAME+8   UPDATE
      ISZ TEMP1 
      LDA TEMP1,I   EXEC MULT.
      SZA 
      STA PNAME+9 
      ISZ TEMP1 
      LDA TEMP1,I   HOURS 
      SZA 
      STA PNAME+10
      ISZ TEMP1 
      LDA TEMP1,I   MINUTES 
      SZA 
      STA PNAME+11
      ISZ TEMP1 
      LDA TEMP1,I   SECONDS 
      SZA 
      STA PNAME+12
      ISZ TEMP1 
      LDA TEMP1,I   TENS OF MILLISECONDS
      SZA 
      STA PNAME+13
      JMP UPNAM,I    RETURN 
* 
      HED RTSGN  PAGE PARAMETERS AND CONSTANTS
PARNO BSS 1         PARAMETER RECORD LENGTH 
* 
IOADD BSS 1         I/O ADDR (CHANNEL NO.) IN EQT 
IODMA BSS 1         I/O DMA FLAG IN EQT 
IOBUF BSS 1         I/O BUFFERING FLAG IN EQT 
IOTYP BSS 1         I/O DRIVER TYPE IN EQT (OCTAL)
ASIDR DEF *+1 
      ASC 1,I.
ASTYP BSS 1         I/O DRIVER TYPE IN EQT (ASCII)
UBLNK OCT 20000 
DFLAG BSS 1         DMA-IN FLAG FOR EQT 
BFLAG BSS 1         BUFFERING-IN FLAG FOR EQT 
TFLAG BSS 1         TIME-OUT ENTRY FLAG FOR EQT 
INTCH BSS 1         INT RECORD CHANNEL NO.
LSTSV BSS 1         LST COUNT SAVE FOR REL UPDATE 
I.XX  BSS 1         DRIVER ENTRY POINT
C.XX  BSS 1         DRIVER EXIT POINT 
JMP3I JMP 3,I 
ASCDR DEF *+1 
      ASC 1,C.
ASCYP BSS 1 
      OCT 20000 
AEQUL OCT 75
TIMWD BSS 1 
RANAD BSS 1 
* 
DRANG BSS 1         DIGIT RANGE 
LWABP BSS 1 
DIFLG BSS 1         DATA-IN FLAG = -1/0 = NOT IN/IN 
CMFLG BSS 1         COMMA FLAG = -1/0 = NOT IN/IN 
BUFUL BSS 1         BUFFER U/L FLAG 
MS28  ASC 6,   = EQT #? 
MES6A DEF MES6I 
MES6  DEF *+1 
      ASC 2,EQT 
MES6I BSS 1 
      ASC 2, =? 
MES29 DEF *+1 
      ASC 4,INT TBL 
AYES  OCT 131 
ANO   OCT 116 
MES5  DEF *+1 
      ASC 7,STRT-UP PROG? 
MES7  DEF *+1 
      ASC 7,# WDS IN COMM?
MES8  DEF *+1 
      ASC 7,REL USER PROGS
MES9  DEF *+1 
      ASC 5,SNAPSHOT? 
MES10 DEF *+1 
      ASC 6,ENTER PRAMS 
MES11 DEF *+1 
      ASC 7,RTSGN FINISHED
BNDS  DEF *+1 
      ASC 4,-BOUNDS 
MEMOT DEF *+1 
      ASC 3,FWABP=
      ASC 3,LWABP=
      ASC 3,FWAM= 
      ASC 3,LWAM= 
      ASC 3,FWAC= 
      ASC 3,LWAC= 
LBLAD BSS 1 
MEMAD BSS 1 
ASET  DEF *+1 
      ASC 6,- SET BPLOCC
ASTO  ASC 2, TO 
ASTOA DEF ASTO
ASLOC DEF *+1 
      ASC 2,LOCC
ASSTL DEF *+1 
      ASC 8,-LINKS START AT 
ASPCE OCT 40
ACOMA OCT 26000 
* 
      HED RTSGN INTERRUPT TABLE PROCESSOR 
*                           INTERRPUT TABLE PROCESSOR 
* 
* 
