Logging to file "log.txt"

***
*** Build RTE Operating System
***


HALT instruction 102077, P: 77712 (NOP)

HALT instruction 102011, P: 00067 (JMP 14)

SET TIME

*LG,10

*--> Compile ALGOL program STATS (WHZAT like)

ON,ALGOL,5,1,99






PAGE  001


001 00000 HPAL,L,B,"STATS",0,3,99
002 00000     BEGIN
003 00001   INTEGER LU := 1 ;
004 00003   INTEGER OUT := 2 ;
005 00004   INTEGER TIMECALL := 11 ;
006 00005   INTEGER ASTERISKS := "**" ;
007 00006   INTEGER COLON := "::" ;
008 00007   INTEGER ZERO := "00" ;
009 00010   INTEGER SPACES := "  " ;
010 00011   INTEGER COMMA := ",," ;
011 00012   INTEGER EQTA := @1650 ;
012 00013   INTEGER NUMBEROFEQTS := @1651 ;
013 00014   INTEGER KEYWD := @1657 ;
014 00015   INTEGER EQTADDRESS ;
015 00016   INTEGER I ;
016 00017   INTEGER CHARACTERS ;
017 00020   INTEGER STATUS ;
018 00021   INTEGER INDEX ;
019 00022   INTEGER TLIST ;
020 00023     LABEL START1,START2,
021 00025           IOSUSPEND,
022 00026           TIMELIST,
023 00027           FINIS ;
024 00030   INTEGER 
025 00030     ARRAY TIMEARRAY[1:5] ;
026 00041   INTEGER 
027 00041     ARRAY TIME[18:21] := 100,60,60,24 ;
028 00051   INTEGER 
029 00051     ARRAY DATA[-1:35] := @16436,@17036,@17036 ;
030 00122   INTEGER 
031 00122     ARRAY HEADER[0:35] := @17036,@17036,"*N","AM","ES",",T",",P","R*",
032 00136                           "DO","RM","T*","SC","HE","D*"," I","/O"," ,",
033 00147                           "EQ","T ","#*","ME","MR","Y*","DI","SC"," *",
034 00160                           "OP","ER"," *"," N","EX","T ","TI","ME","  ",
035 00171                           " *" ;
036 00172 PROCEDURE EXEC2(NO1,NO2) ;
037 00173   INTEGER NO1,NO2 ;
038 00173      CODE ;
039 00172 PROCEDURE EXEC4(NO1,NO2,NO3,NO4) ;
040 00173   INTEGER NO1,NO2,NO3,NO4 ;
041 00173      CODE ;
042 00172   INTEGER
043 00172 PROCEDURE IGET(ADDRESS) ;
044 00174   INTEGER ADDRESS ;
045 00174      CODE ;
046 00172   INTEGER
047 00172 PROCEDURE CONVERT(NUMBER) ;
048 00174     VALUE NUMBER ;
049 00174   INTEGER NUMBER ;
050 00174     BEGIN
051 00177   CONVERT := ZERO ;
052 00201   CONVERT :=   CONVERT + ROTATE(NUMBER\10)
053 00234                        + NUMBER MOD 10 ;
054 00250       END CONVERT ;
055 00251   INTEGER
056 00251 PROCEDURE KEYWORD(NUMBER) ;






PAGE  002


057 00253     VALUE NUMBER ;
058 00253   INTEGER NUMBER ;
059 00253     BEGIN
060 00256   INTEGER ADDRESS ;
061 00260           ADDRESS := IGET(KEYWD)+NUMBER ;
062 00265   KEYWORD := IGET(ADDRESS) ;
063 00271       END KEYWORD ;
064 00272   INTEGER
065 00272 PROCEDURE ID(ELEMENT) ;
066 00274     VALUE ELEMENT ;
067 00274   INTEGER ELEMENT ;
068 00274     BEGIN
069 00277   INTEGER ADDRESS ;
070 00301           ADDRESS := KEYWORD(INDEX)+ELEMENT ;
071 00306        ID := IGET(ADDRESS) ;
072 00312       END ID ;
073 00313   INTEGER
074 00313 PROCEDURE ASTERISK ;
075 00315     BEGIN FOR I := 2 STEP 1 UNTIL 35
076 00321           DO DATA[I] := ASTERISKS ;
077 00340       END ASTERISK ;
078 00342 PROCEDURE DISPLAY(INFORMATION) ;
079 00343   INTEGER INFORMATION ;
080 00343     BEGIN EXEC4(OUT,LU,INFORMATION,CHARACTERS) ;
081 00354       END DISPLAY ;
082 00355   BOOLEAN
083 00355 PROCEDURE LISTSEARCH(LISTADDRESS,IDSEGMENT) ;
084 00357     VALUE LISTADDRESS,IDSEGMENT ;
085 00357   INTEGER LISTADDRESS,IDSEGMENT ;
086 00357     BEGIN
087 00363     LABEL S0 ;
088 00365 S0:       IF LISTADDRESS=IDSEGMENT
089 00365           THEN LISTADDRESS := TRUE
090 00372           ELSE IF LISTADDRESS#0
091 00375                THEN BEGIN
092 00400                     LISTADDRESS := IGET (LISTADDRESS) ;
093 00404                     GO TO S0 ;
094 00405                     END 
095 00405                ELSE LISTADDRESS := FALSE ;
096 00410       END LISTSEARCH ;
097 00412 PROCEDURE CONVERTTIME(WHERE) ;
098 00413     VALUE WHERE ;
099 00413   INTEGER WHERE ;
100 00413     BEGIN FOR I := 0 STEP 1 UNTIL 1
101 00420           DO BEGIN
102 00424              DATA[WHERE+3*I] := CONVERT(TIMEARRAY[4-2*I]) ;
103 00455              DATA[WHERE+2+3*I] := CONVERT(TIMEARRAY[3-2*I]) ;
104 00511              DATA[WHERE+1+3*I] := COLON AND @177400
105 00526                                  OR ROTATE(DATA[WHERE+2+3*I]
106 00541                                  AND @177400 ) ;
107 00551              DATA[WHERE+2+3*I] := ROTATE(DATA[WHERE+2+3*I]
108 00576                                  AND @377) OR COLON AND @377 ;
109 00611              END ;
110 00615           DATA[WHERE+5] := DATA[WHERE+5] AND @177400
111 00634                     OR ZERO AND @377 ;
112 00642       END CONVERTTIME ;






PAGE  003


113 00643 PROCEDURE TIMEOFDAY ;
114 00644     BEGIN EXEC2(TIMECALL,TIMEARRAY[1]) ;
115 00657           DATA[2] := HEADER[32] ;
116 00671           DATA[3] := HEADER[33] ;
117 00703           DATA[4] := SPACES ;
118 00712           CONVERTTIME(5) ;
119 00715       END TIMEOFDAY ;
120 00716 COMMENT   DISPLAY
121 00716 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 
122 00716 ********************************************************************
123 00716 *NAMES,T,PR*DORMT*SCHED* I/O ,EQT #*MEMRY*DISC *OPER * NEXT TIME  **
124 00716 ********************************************************************
125 00716 NAME ,T,PR**  00 *  01 *  02 *  EQ *  04 *  05 *  06 *HH:MM:SS:MM0**
126 00716           HEADER ;
127 00716 START1:   TIMEOFDAY ;
128 00720           CHARACTERS := -24 ;
129 00722           DISPLAY(DATA[-1]) ;
130 00757           ASTERISK;
131 00761           CHARACTERS := -72 ;
132 00763           DISPLAY(DATA[0]) ;
133 00773           DISPLAY(HEADER[0]) ;
134 01003           DISPLAY(DATA[0]) ;
135 01013           INDEX := 0 ;
136 01015           WHILE KEYWORD(INDEX) # 0
137 01020           DO BEGIN
138 01022 START2:      STATUS := ID(15) AND @7 ;
139 01027              TLIST := ID(17) AND @10000 ;
140 01034              IF (STATUS OR TLIST) # 0
141 01036              THEN BEGIN
142 01040                   ASTERISK ;
143 01042                   DATA[2] := ID(12) ;
144 01053                   DATA[3] := ID(13) ;
145 01064                   DATA[4] := ID(14) AND @177400
146 01074                              OR COMMA AND @377 ;
147 01102                   DATA[5] := ROTATE(CONVERT(ID(14) AND @7) AND @377)
148 01120                             OR COMMA AND @377 ;
149 01126                   DATA[6] := CONVERT(ID(6) AND @177) ;
150 01144                   DATA[7] := SPACES AND @177400
151 01151                             OR ASTERISKS AND @377 ;
152 01160                   I := 3*STATUS ;
153 01164                   DATA[I+8] := SPACES ;
154 01175                   DATA[I+9] := CONVERT(STATUS) ;
155 01211                   DATA[I+10] := SPACES AND @177400
156 01221                             OR ASTERISKS AND @377 ;
157 01230                   CHARACTERS := -2*(I+11) ;
158 01235 IOSUSPEND:        IF STATUS=2
159 01235                   THEN BEGIN
160 01241                        FOR EQTADDRESS := IGET(EQTA) STEP 15 UNTIL
161 01245                                          IGET(EQTA)+15*
162 01250                                         (IGET(NUMBEROFEQTS) -1)
163 01255                        DO IF LISTSEARCH(EQTADDRESS,
164 01266                                         KEYWORD(INDEX))=TRUE
165 01276                           THEN BEGIN
166 01301                                DATA[16] := SPACES AND @177400
167 01306                                           OR COMMA AND @377 ;
168 01315                                DATA[17] := SPACES;






PAGE  004


169 01324                                DATA[18] := CONVERT((EQTADDRESS-
170 01331                                            IGET(EQTA))\15+1);
171 01351                                DATA[19] := SPACES AND @177400
172 01356                                           OR ASTERISKS AND @377 ;
173 01365                                CHARACTERS := -40 ;
174 01414                                GO TO TIMELIST ;
175 01415                                END ;
176 01421                        GO TO START2 ;
177 01422                        END ;
178 01422 TIMELIST:         IF TLIST#0
179 01422                   THEN BEGIN
180 01425                        FOR I := 1 STEP 1 UNTIL 4
181 01427                        DO TIMEARRAY[I] := TIME[17+I]+ID(17+I) ;
182 01464                        CONVERTTIME(29) ;
183 01467                        CHARACTERS := -72
184 01467                        END ;
185 01471                   DISPLAY(DATA[0]) ;
186 01501                   END ;
187 01501              INDEX := INDEX + 1 ; 
188 01504              END ;
189 01505 FINIS:    TIMEOFDAY ;
190 01507           DATA[2] := "T." ;
191 01516           DATA[3] := "EN" ;
192 01525           DATA[4] := "D " ;
193 01534           CHARACTERS := -22 ;
194 01536           DISPLAY(DATA[0]) ;
195 01546       END ;

PROGRAM= 001552  ERRORS=000
$END ALGOL

*
--> Assemble stats/iget
ON,ASMB,99







 PAGE 0001


0001                ASMB,R,L,B
**  NO ERRORS*





























































 PAGE 0002 #01


0001                ASMB,R,L,B
0002  00000               NAM IGET,7
0003                      ENT IGET
0004  00000 000000  IGET  NOP 
0005  00001 104200        DLD IGET,I
      00002 100000R 
0006  00003 101100        SWP 
0007  00004 160000        LDA 0,I 
0008  00005 160000        LDA 0,I 
0009  00006 124001        JMP 1,I 
0010                      END 
**  NO ERRORS*












































$END ASMB     

*
--> Assemble stats/exec0
ON,ASMB,99







 PAGE 0001


0001                ASMB,R,L,B
**  NO ERRORS*





























































 PAGE 0002 #01


0001                ASMB,R,L,B
0002  00000               NAM EXEC0,7 
0003* USED TO FIX ALGOL EXEC CALLS
0004                      EXT EXEC
0005                      ENT EXEC1,EXEC2,EXEC3,EXEC4,EXEC5 
0006                      ENT EXEC6,EXEC7,EXEC8,EXEC9 
0007  00000         EXEC1 EQU * 
0008  00000         EXEC2 EQU * 
0009  00000         EXEC3 EQU * 
0010  00000         EXEC4 EQU * 
0011  00000         EXEC5 EQU * 
0012  00000         EXEC6 EQU * 
0013  00000         EXEC7 EQU * 
0014  00000         EXEC8 EQU * 
0015  00000         EXEC9 EQU * 
0016* 
0017  00000 000000  EXEC0 NOP          EXTRY POINT
0018  00001 072011R       STA SAVE     SAVE A REG 
0019  00002 003400        CCA 
0020  00003 042000R       ADA EXEC0    A REG POINTS TO EXEC CALL
0021  00004 072000R       STA EXEC0 
0022  00005 062012R       LDA JSBEX    LOAD A REG WITH REAL EXEC CALL 
0023  00006 172000R       STA EXEC0,I  REPLACE JSB INSTRUCTION
0024  00007 062011R       LDA SAVE     RESTORE A REG
0025  00010 126000R       JMP EXEC0,I  RETURN 
0026* 
0027  00011 000000  SAVE  BSS 1        SAVE AREA FOR A REG
0028  00012 016001X JSBEX JSB EXEC     REPLACING INSTR
0029                      END 
**  NO ERRORS*


























$END ASMB     

*


ON,FMGR
:PU,FIL1
FMGR-006
:SA,LG,FIL1
:DU,FIL1,4
:PU,FIL1
:EX
 $END FMGR

*LG,40

*
--> Assemble fmp/92002-18006_Rev-1631_J.PUT
ON,ASMB,99







 PAGE 0001


0001                ASMB,B,R,L
**  NO ERRORS*





























































 PAGE 0002 #01  J.PUT 


0001                ASMB,B,R,L
0003*     NAME:   J.PUT 
0004*     SOURCE: 92002-18006 
0005*     RELOC:  92002-16006 - %BMLIB BATCH MONITOR LIB  
0006*     PGMR:   G.A.A.
0007* 
0008*  ***************************************************************
0009*  * (C) COPYRIGHT HEWLETT-PACKARD COMPANY 1975.  ALL RIGHTS     *
0010*  * RESERVED.  NO PART OF THIS PROGRAM MAY BE PHOTOCOPIED,      *
0011*  * REPRODUCED OR TRANSLATED TO ANOTHER PROGRAM LANGUAGE WITHOUT*
0012*  * THE PRIOR WRITTEN CONSENT OF HEWLETT-PACKARD COMPANY.       *
0013*  ***************************************************************
0014* 
0015  00000               NAM J.PUT,8 92002-16006  740801 
0016                      ENT J.PUT 
0017                      EXT $LIBR,$LIBX 
0018                      EXT .ENTR 
0019* 
0020*     J.PUT IS CALLED TO REQUEST A TRACK FOR THE FMGR 
0021* 
0022*     THE CALL IS:
0023* 
0024*     CALL J.PUT(TAT1,CD,ER)
0025* 
0026*     W H E R E:
0027* 
0028*     TATA1   IS THE ADDRESS OF THE TAT WORD FOR THE DESIRED TRACK
0029*     CD      IS THE CODE TO BE SET IN THE TAT. 
0030*     ER      IS 0 IF SUCCESSFUL OR NON-ZERO IF NOT.
0031* 
0032*     IF THE ERROR RETURN IS MADE NO TRACK WILL BE ASSIGNED.
0033* 
0034* 
0035  00000 000000  TATA1 NOP 
0036  00001 000000  CD    NOP 
0037  00002 000000  ER    NOP 
0038  00003 000000  JPUT  NOP 
0039  00004 016003X       JSB .ENTR     DO ENTRY
0040  00005 000000R       DEF TATA1 
0041  00006 016001X       JSB $LIBR     INHIBIT CHANGES 
0042  00007 000000        NOP           WHILE WE WORK 
0043  00010 166000R       LDB TATA1,I   GET HIGH END OF TAT 
0044  00011 160001  NEX   LDA B,I       GET CURRENT ASSIGNMENT
0045  00012 002002        SZA           IF AVAILABLE
0046  00013 052024R       CPA GLOBL     OR GLOBAL 
0047  00014 003401        CCA,RSS       SKIP A _ -1 
0048  00015 026021R       JMP EXIT      ELSE ERROR RETURN 
0049  00016 162001R       LDA CD,I      GET THE DESIRED CODE
0050  00017 170001        STA B,I       SET IN TAT
0051  00020 006400  EXIT1 CLB           SET B FOR GOOD ASSIGNMENT 
0052  00021 176002R EXIT  STB ER,I      IT IS TRACK ON LU3 - SO SET IT
0053  00022 016002X       JSB $LIBX     EXIT
0054  00023 000003R       DEF JPUT      TO CALLER 


0056  00024 077776  GLOBL OCT 77776 







 PAGE 0003 #01  J.PUT 


0058  00003         J.PUT EQU JPUT
0059  00000         A     EQU 0 
0060  00001         B     EQU 1 

0062  00025         ENQ   EQU * 

0064                      END 
**  NO ERRORS*
















































$END ASMB     

*
--> Assemble fmp/29033-80001_Rev-A
ON,ASMB,99







 PAGE 0001


0001                ASMB,B,R,L,C
**  NO ERRORS*





























































 PAGE 0002 #01  RTE FILE MANAGER DIRECTORY ROUTINE **************** 


0001                ASMB,B,R,L,C
0003  00000               NAM D.RTR,2,1 
0004                      EXT EXEC,PRTN,P.PAS 
0005                      SUP 
0006*            RTE FMP DIRECTORY ROUTINE    NOV/72**GAA 
0007* 
0008* THIS PROGRAM IS THE CENTRAL MANAGER OF THE RTE FILE MANAGEMENT
0009* SYSTEM. IT OWNS THE DIRECTORY AND PERFORMS ALL WRITES 
0010* ON IT.
0011* 
0012* PROGRAM WISHING TO ACCESS THE DIRECTORY 
0013* SCHEDULE (WITH WAIT) THIS PROGRAM.
0014* 
0015* CALLS ARE AS FOLLOWS (P1,P2,P3,P4,P5 ARE THE PASSED PARAMETERS):
0016* 
0017* 
0018* 1. OPEN 
0019*     P1. 1,ID      CALLER'S ID SEGMENT ADDRESS WITH SIGN BIT SET 
0020*     P2. E,NAME(1,2) E(BIT 15) INDICATES EXCLUSIVE OPEN IF SET 
0021*     P3. 0,NAME(3,4) 
0022*     P4. 0,NAME(5,6) 
0023*     P5. -LU,+CARTRIDGE LABEL,0   IF ZERO SEARCH ALL MOUNTED CARTRI
0024* 
0025* 2. CLOSE
0026*     P1. ID        CALLER'S ID SEGMENT ADDRESS 
0027*     P2. 0,-(NO. SECTORS TO BE DELETED),+ PURGE EXTENTS ONLY 
0028*     P3. TR,LU 
0029*     P4. OFFSET,SECTOR  / DIRECTORY ADDRESS
0030*     P5. 0         INDICATES CLOSE 
0031* 
0032* 3. CREAT
0033*     P1. ID
0034*     P2. TR,LU     DATA TRACK ADDRESS
0035*     P3. -LU,+CARTRIDGE,0    SEE 1.P5. 
0036*     P4. 
0037*     P5. 1         INDICATES CREAT 
0038* 
0039* 4. CHANGE NAME
0040*     P1. ID
0041*     P2. TR,LU     DATA TRACK ADDRESS
0042*     P3. TR,LU         \ 
0043*     P4. OFFSET,SECTOR \ DIRECTORY ADDRESS OF FILE BEING RENAMED 
0044*     P5. 2         INDICATES NAME CHANGE CALL
0045* 
0046* 6. SET,CLEAR LOCK ON DISC 
0047*     P1. ID
0048*     P2. 
0049*     P3. -LU,+CARTRIDGE  (0 NOT LEGAL)  DISC TO BE LOCKED
0050*     P4. 
0051*     P5. 3 FOR SET  5 FOR CLEAR
0052* 
0053* 7. GENERATE,PACK,UPDATE CALL
0054*     P1. ID
0055*     P2. TR,LU     DATA TRACK ADDRESS
0056*     P3. -LU,+CARTRIDGE  (0 NOT LEGAL)  DISC TO BE UPDATED 
0057*     P4. S,#SEC/TRACK   S(BIT 15)=1 IF DISC DIRECTORY UPDATE 







 PAGE 0003 #01  RTE FILE MANAGER DIRECTORY ROUTINE **************** 


0058*     P5. 7         INDICATES GENERATE CALL.
0059* 
0060* 8. EXTENSION OPEN 
0061*     P1. ID
0062*     P2. EXTENSION NUMBER
0063*     P3. TR,LU        \
0064*     P4. OFFSET,SECTOR \DIRECTORY ADDRESS OF MASTER ENTRY
0065*     P5. 6,8       INDICATES EXTENSION REQUEST (READ,WRITE)
0066* 
0067* 9. PACK 
0068*     P1. ID
0069*     P2. TR,LU     DATA TRACK ADDRESS
0070*     P3. -LU,+CARTRIDGE    SEE GENERATE
0071*     P4. RELATIVE DIRECTORY SECTOR (1 ONLY) TO BE CHANGED
0072*     P5. 9 
















































 PAGE 0004 #01  RTE FILE MANAGER DIRECTORY ROUTINE **************** 


0074* DATA TRACK FORMAT FOR CREAT AND CHANGE NAME 
0075*     1. NAME(1,2) \
0076*     2. NAME(3,4)  > OR NEW NAME 
0077*     3. NAME(5,6) /
0078*     4. TYPE 
0079*     5.
0080*     6.
0081*     7. #SECTORS REQUESTED OR -1 FOR REST OF DISC
0082*     8. RECORD SIZE (TYPE 2 FILES) 
0083*     9. SECURITY CODE
0084* 
0085* 
0086* WORD FORMATS FOR DOUBLE DUTY WORDS
0087* 
0088*  15...6 5..0       15...8 7...0 
0089*  TRACK ^ LU        OFFSET^SECTOR
0090*                   #SEC/TR^SECTOR
0091* 
0092* RETURN PARAMETERS 
0093*     R1. ERROR CODE    IF >0 THEN #SEC IN CREAT OR TYPE IN OPEN
0094*     R2. TR,LU        \
0095*     R3. OFFSET,SECTOR \ DIRECTORY ADDRESS - OPEN & CREATE CALLS 
0096*     R4. TR              / FILE ADDRESS ON OPEN & CREATE CALLS 
0097*     R5. #SEC/TR,SECTOR /
0098* 
0099* ERROR CODES 
0100*     0 OR POSITIVE -NO ERROR 
0101*    -1              DISC DOWN
0102*    -2              DUPLICATE NAME 
0103*    -3              FILE NOT FOUND 
0104*    -5              READ EXTENT OPEN AND EXTENT NOT FOUND
0105*    -6              CARTRIDGE NOT FOUND
0106*    -8              FILE IS CURRENTLY OPEN (ALSO FOR REJECT LOCK)
0107*    -9              FILE CURRENTLY OPEN TO THE SAME PROGRAM
0108*    -11             FILE NOT OPEN (CLOSE)
0109*    -13             DISC LOCKED
0110*    -14             DIRECTORY FULL 
0111* 
0112*    -101            ILLEGAL PARAMETERS IN CALL 
0113*    -102            ILLEGAL CALL SEQUENCE (LOCK NOT REQUESTED FIRST























 PAGE 0005 #01  RTE FILE MANAGER DIRECTORY ROUTINE **************** 


0115  00000 000000  BUF   BSS 128 
0116  00200 000206R PRAMA DEF P1


0118  00201 060001  BEGIN LDA B         PRAM ADDRESS TO A 
0119  00202 006700        CLB,CCE       SET UP TO MOVE PRAMS
0120  00203 005500        ERB           AND 
0121  00204 016003X       JSB P.PAS     GO GET THEM 
0122  00205 177773  N5    DEC -5
0123  00206 000000  P1    NOP 
0124  00207 000000  P2    NOP 
0125  00210 000000  P3    NOP 
0126  00211 000000  P4    NOP 
0127  00212 000000  P5    NOP 

0129  00213 062206R       LDA P1        GET THE FIRST PRAM
0130  00214 065657        LDB KEYWD     AND THE ADDRESS OF THE ID SEG 
0131  00215 001265        RAL,CLE,ERA   LIST; CLEAR POSSIBLE SIGN BIT 
0132  00216 073355R       STA ID        SAVE ID SEG ADDRESS 
0133  00217 160001  TEST  LDA B,I       SEARCH FOR
0134  00220 006004        INB             ID ADDRESS IN 
0135  00221 002003        SZA,RSS          KEY WORD LIST
0136  00222 026522R       JMP EXIT2         END OF LIST; ERR EXIT 
0137  00223 053355R       CPA ID             THIS ONE?
0138  00224 002005        INA, RSS             YES SKIP 
0139  00225 026217R       JMP TEST              NO; TRY NEXT ONE
0140  00226 164000        LDB A,I       FOUND; GET WAIT ID ADDRESS
0141  00227 042553R       ADA .14       A_STATUS ADDRESS
0142  00230 160000        LDA A,I        A_STATUS 
0143  00231 055717        CPB XEQT      IF WAITING ON THIS PGM
0144  00232 006400        CLB           SET B_0 
0145  00233 001710        ALF,SLA       IF WAIT BIT IS SET
0146  00234 006002        SZB            AND WAITING FOR THIS PGM SKIP
0147  00235 026522R       JMP EXIT2        ELSE EXIT - ILLEGAL CALL 


0149  00236 077356R       STB TMP1
0150  00237 062432R       LDA ABUF      SET LOCK SEARCH FOR FIRST 
0151  00240 073360R       STA DIRAD     ENTRY 

0153*     THE LOCK ROUTINE SEARCHES THE DISC DIRECTORY FOR THE
0154*     REFERENCED DISC.
0155* 
0156*     FOR THE FIRST CALL DIRAD SHOULD POINT AT THE
0157*     FIRST WORD IN ABUF.  SUBSEQUENTLY LOCK
0158*     WILL UPDATE DIRAD EACH CALL.
0159* 
0160*     WITH THE EXCEPTION OF THE DISC DIRECTORY UPDATE THE DISC
0161*     MUST BE FOUND.  IN THIS CASE, EXIT IS TO THE CREAT ROUTINE
0162* 
0163*     ON EXIT ATRAK CONTAINS THE DIRECTORY TRACK
0164*              ALU     CONTAINS THE DIRECTORY LU
0165*              A       CONTAINS THE LOCK WORD 
0166* 
0167*     ON SUBSEQUENT CALLS IF THE DISC ID WAS 0, THE NEXT
0168*     DISC IS RETURNED.  IF THE DISC ID WAS NOT 0,







 PAGE 0006 #01  RTE FILE MANAGER DIRECTORY ROUTINE **************** 


0169*     A NOT FOUND EXIT IS TAKEN.
0170* 
0171  00241 062212R NEXT  LDA P5        GET THE ID -BIT 15 INDICATE DISC
0172  00242 066206R       LDB P1        ID IN P5
0173  00243 006020        SSB           ID IN P5? 
0174  00244 026250R       JMP LOCK0     YES; SKIP 
0175  00245 002311        CCE,SLA,RSS   NO; P5 IS FUNCTION EVEN?
0176  00246 026305R       JMP LOCK3     YES; GO EXTRACT LU
0177  00247 062210R       LDA P3        NO; LU IS IN P3 
0178  00250 003324  LOCK0 CMA,CCE,SSA,INA E_0 INDICATES CARTRIDGE LABEL 
0179  00251 003104        CMA,CLE,INA     E_1 INDICATES LU(SET +) 
0180  00252 067356R       LDB TMP1      GET PREVIOUS ID 
0181  00253 073356R       STA TMP1      STORE ID
0182  00254 006202        CME,SZB       IF NOT A  ZERO, ID ON SECOND
0183  00255 027044R       JMP EX6       CALL TAKE -6 EXIT 

0185  00256 001225        RAL,ERA       SET SIGN BIT IF A LABEL SEARCH
0186  00257 073357R       STA TMP2      AND SET FOR COMPARE 

0188  00260 016360R LOCK6 JSB RDPS      READ THE PARAMETER SECTOR 
0189  00261 063357R       LDA TMP2      SET THE FOUND BIT IN E IF 
0190  00262 003104        CMA,CLE,INA   A ZERO ID 
0191  00263 067360R       LDB DIRAD     GET CURRENT DIRECTORY ADD.
0192  00264 160001  LOCK2 LDA B,I       GET FIRST WORD
0193  00265 002003        SZA,RSS       IF 0 THEN END 
0194  00266 027330R       JMP LOCK5     SO GO CHECK FOR  DIRECTORY
0195  00267 073364R       STA ALU       UPDATE; ELSE SAVE LU
0196  00270 053357R       CPA TMP2      IS THIS THE REQUIRED DISC?
0197  00271 002300        CCE           YES  SET E TO 1 TO INDICATE FOUN
0198  00272 006004        INB           STEP TO TRACK ADDRESS AND 
0199  00273 160001        LDA B,I       SET 
0200  00274 072555R       STA ATRAK     IN ATRAK
0201  00275 006004        INB           STEP TO 
0202  00276 160001        LDA B,I       LABEL AND FETCH 
0203  00277 032556R       IOR SIGN      SET SIGN FOR COMPARE
0204  00300 006045        SEZ,INB,RSS   STEP TO LOCK ADDRESS SKIP IF FOU
0205  00301 053357R       CPA TMP2      IS THIS THE REQUESTED DISC? 
0206  00302 026320R       JMP LOCK4     YES; GO EXIT
0207  00303 006004        INB           NO; STEP TO NEXT ONE
0208  00304 026264R       JMP LOCK2     AND GO CHECK IT 


0210  00305 062210R LOCK3 LDA P3        LU AND TRACK IN P3
0211  00306 013061R       AND B77       MASK TO LU
0212  00307 073357R       STA TMP2      SAVE LU 
0213  00310 070001        STA B         SAVE LU IN B FOR TEST 
0214  00311 022210R       XOR P3        MASK TO TRACK 
0215  00312 001722        ALF,RAL       ROTATE TO 
0216  00313 001227        RAL,ALF       LOW A AND 
0217  00314 073365R       STA DITR      SAVE THE TRACK
0218  00315 056360R       CPB RDPS      DO WE HAVE THIS ONE ALREADY?
0219  00316 026332R       JMP DECOD     YES  SO GO DECODE THE REQUEST 
0220  00317 026260R       JMP LOCK6     NO  SO GO LOOK FOR IT 


0222  00320 077360R LOCK4 STB DIRAD     FOUND - UPDATE CURRENT







 PAGE 0007 #01  RTE FILE MANAGER DIRECTORY ROUTINE **************** 


0223  00321 037360R       ISZ DIRAD     ADDRESS FOR NEXT TIME 
0224  00322 160001        LDA B,I       LOCK TO A 
0225  00323 002002        SZA           IF NOT LOCKED 
0226  00324 053355R       CPA ID        OR LOCKED TO CALLER 
0227  00325 026332R       JMP DECOD     SKIP
0228  00326 063356R       LDA TMP1      ELSE IF 
0229  00327 002003        SZA,RSS       MULTI-DISC SEARCH 
0230  00330 026241R       JMP NEXT      CONTINUE
0231  00331 027050R       JMP EX13      ELSE EXIT LOCKED DISC 


0233  00332 062206R DECOD LDA P1        IF OPEN 
0234  00333 002020        SSA           REQUEST 
0235  00334 026455R       JMP OPEN      GO OPEN 
0236  00335 062212R       LDA P5        ELSE
0237  00336 002020        SSA           CHECK REQUEST CODE
0238  00337 027426R       JMP EX101     NEGATIVE - EXIT 
0239  00340 042636R       ADA N10 
0240  00341 002021        SSA,RSS 
0241  00342 027426R       JMP EX101     GREATER THAN 9 - EXIT 
0242  00343 042345R       ADA TABAD     INDEX INTO THE FUNCTION 
0243  00344 124000        JMP A,I       GO EXECUTE THE FUNCTION 


0245  00345 000360R TABAD DEF TABA+10 
0246  00346 027510R TABA  JMP CLOSE     0 
0247  00347 027070R       JMP CREAT     1 
0248  00350 027436R       JMP CNAM      2 
0249  00351 027366R       JMP RLOCK     3 
0250  00352 027426R       JMP EX101     4 
0251  00353 027424R       JMP ULOCK     5 
0252  00354 026525R       JMP EXOPN     6 
0253  00355 027244R       JMP GEN       7 
0254  00356 026525R       JMP EXOPN     8 
0255  00357 027337R       JMP PACK      9 





0257* 
0258*  RDPS     READ THE DISC DIRECTORY 
0259* 
0260  00360 000000  RDPS  NOP 
0261  00361 016373R       JSB WCSR      WRITE CURRENT SECTOR BLOCK
0262  00362 002004        INA           A_2 
0263  00363 072404R       STA DRLU      SET  FOR LU2 - SYS DISC 
0264  00364 003400        CCA           COMPUTE LAST TRACK
0265  00365 041756        ADA TATSD     ADDRESS AND 
0266  00366 073361R       STA TRACK     SET 
0267  00367 002400        CLA           SET SECT ADDRESS TO 
0268  00370 073362R       STA SECT      ZERO
0269  00371 016405R       JSB RWSUB     READ THE BLOCK
0270  00372 126360R       JMP RDPS,I    RETURN









 PAGE 0008 #01  RTE FILE MANAGER DIRECTORY ROUTINE **************** 


0272* 
0273*  WCSR     WRITE CURRENT BLOCK 
0274* 
0275  00373 000000  WCSR  NOP 
0276  00374 063363R       LDA WCS       GET WRITE FLAG
0277  00375 036403R       ISZ RW        SET REQUEST CODE TO WRITE 
0278  00376 002002        SZA           IF NOT WRITTEN ON SKIP
0279  00377 016405R       JSB RWSUB     ELSE WRITE THE BLOCK
0280  00400 002404        CLA,INA       RESET REQUEST CODE TO 
0281  00401 072403R       STA RW        READ
0282  00402 126373R       JMP WCSR,I    AND EXIT (A=1)


0284  00403 000000  RW    NOP 
0285  00404 000000  DRLU  NOP 


0287* 
0288*  RWSUB     ROUTINE TO READ OR WRITE A TWO-SECTOR BLOCK
0289* 
0290  00405 000000  RWSUB NOP 
0291  00406 104200        DLD RW        FETCH THE NEW POINTERS
0292  00410 046575R       ADB PRC 
0293  00411 076652R       STB RPRM
0294  00412 002011        SLA,RSS       IF WRITE THEN 
0295  00413 026426R       JMP RWSU1     GO DO IT
0296  00414 056452R       CPB LDRLU     ELSE IF 
0297  00415 067435R       LDB N7        SAME BLOCK AS 
0298  00416 063361R       LDA TRACK     CURRENT ONE 
0299  00417 052453R       CPA LTRAC     THEN
0300  00420 006004        INB 
0301  00421 063362R       LDA SECT      NO
0302  00422 052454R       CPA LSECT     ACTION IS 
0303  00423 006104        CLE,INB 
0304  00424 056205R       CPB N5        REQUIRED SO 
0305  00425 126405R       JMP RWSUB,I   RETURN
0306  00426 016001X RWSU1 JSB EXEC      NOT SAME BLOCK  CALL EXEC 
0307  00427 000436R       DEF RTN       RETURN
0308  00430 000403R       DEF RW        READ WRITE CODE 
0309  00431 000652R       DEF RPRM      LU
0310  00432 000000R ABUF  DEF BUF       BUFFER
0311  00433 001060R       DEF .128      128 WORDS 
0312  00434 001361R       DEF TRACK     ON TRACK &
0313  00435 001362R       DEF SECT      SECTOR
0314  00436 002500  RTN   CLA,CLE       CLEAR THE WRITE 
0315  00437 073363R       STA WCS       FLAG
0316  00440 062404R       LDA DRLU      SET UP LAST POINTERS FOR NEXT TI
0317  00441 072452R       STA LDRLU 
0318  00442 063361R       LDA TRACK     SAVE THE TRACK
0319  00443 072453R       STA LTRAC     ADDRESS AND THE 
0320  00444 063362R       LDA SECT      SECTOR
0321  00445 072454R       STA LTRAC+1   ADDRESS 
0322  00446 057060R       CPB .128      DISC ERR? 
0323  00447 126405R       JMP RWSUB,I   NO - RETURN 
0324  00450 072452R       STA LDRLU     YES; SET NOT IN CORE FLAG 
0325  00451 027041R       JMP EX1       YES - TAKE DISC ERR EXIT







 PAGE 0009 #01  RTE FILE MANAGER DIRECTORY ROUTINE **************** 


0327  00452 000000  LDRLU NOP 
0328  00453 000000  LTRAC NOP 
0329  00454 000000  LSECT NOP 




























































 PAGE 0010 #01  RTE FILE MANAGER DIRECTORY ROUTINE **************** 


0331  00455 104200  OPEN  DLD P3        SET NAME WORDS 2 AND  3 
0332  00457 104400        DST NAME+1    INTO THE NAME BUFFER
0333  00461 062207R       LDA P2        SET NAME WORD1
0334  00462 001265        RAL,CLE,ERA   LESS POSSIBLE SIGN BIT
0335  00463 073216R       STA NAME      INTO THE NAME BUFFER
0336  00464 016557R       JSB SETDR     SET UP TO READ THE DIRECTORY
0337  00465 016576R       JSB N.SHR     GO FIND THE FILE
0338  00466 026241R       JMP NEXT      NOT FOUND - TRY NEXT DISC 
0339  00467 016633R       JSB SETAD     FOUND - GO SET THE ADDRESSES
0340  00470 016772R       JSB FLAG      CHECK THE OPEN FLAGS
0341  00471 067065R       LDB COUN2     IF 7 OPENS
0342  00472 057056R       CPB .7        THEN NO ROOM SO 
0343  00473 027046R       JMP EX8       EXIT
0344  00474 062207R       LDA P2        IF EXCLUSIVE OPEN 
0345  00475 002121        CLE,SSA,RSS   THEN SKIP 
0346  00476 026501R       JMP OPEN3     NON EXCLUSIVE  SKIP 
0347  00477 006302        CCE,SZB       IF ANY OPENS THEN 
0348  00500 027046R       JMP EX8       REJECT EXCLUSIVE OPEN 
0349  00501 066647R OPEN3 LDB SC        GET THE FLAG ADDRESS LESS ONE 
0350  00502 006004  OPEN5 INB           SEARCH FOR OPEN SPOT IN FLAG LIS
0351  00503 160001        LDA B,I       GET FLAG WORD 
0352  00504 002020        SSA           IF SIGN BIT SET THEN
0353  00505 027046R       JMP EX8       FILE IS EXCLUSIVELY OPEN TO SOME
0354  00506 002002        SZA           THIS WORD?
0355  00507 026502R       JMP OPEN5     NO; GO TRY NEXT ONE 
0356  00510 062206R       LDA P1        YES; GET THE ID ADDRESS 
0357  00511 001225        RAL,ERA       SET THE EXCLUSIVE/NON-EXCLUSIVE 
0358  00512 170001        STA B,I       FLAG AND PUT IN THE DIRECTORY 
0359  00513 073363R       STA WCS       SET TO WRITE THE BLOCK
0360  00514 162642R OPEN4 LDA TYPE,I   SET UP THE RETURN PARAMETERS 
0361  00515 016652R CREX  JSB RPRM      SET THE RETURN PRAMS
0362  00516 016373R EXIT  JSB WCSR      WRITE THE SECTOR
0363  00517 016002X       JSB PRTN      PASS THE RETURN PRAMS 
0364  00520 000522R       DEF *+2       AND 
0365  00521 000677R       DEF R1        THEN
0366  00522 016001X EXIT2 JSB EXEC      COMPLETE
0367  00523 000525R       DEF *+2 
0368  00524 001621R       DEF .6


0370* 
0371*     EXTENSION OPEN ROUTINE
0372* 
0373  00525 017466R EXOPN JSB DIRCK     GO READ IN THE MASTER DIRECTORY 
0374  00526 002400        CLA           CLEAR THE 
0375  00527 073355R       STA ID        OPEN FLAG WORD
0376  00530 062207R       LDA P2        SET THE 
0377  00531 002003        SZA,RSS       IF AFTER THE MAIN THEN
0378  00532 026514R       JMP OPEN4     WE HAVE IT ALREADY
0379  00533 001727        ALF,ALF       EXTENSION NO FOR POSSIBLE 
0380  00534 073242R       STA GSEC      EXTENSION CREAT 
0381  00535 017563R       JSB EXSHR     SEARCH FOR THE REQUIRED EXTENT
0382  00536 026545R       JMP EXOPT     NOT FOUND SO GO TEST IF READ
0383  00537 001727        ALF,ALF       EXTENT NO TO A
0384  00540 013434R       AND B377      MASK
0385  00541 052207R       CPA P2        THIS IT?







 PAGE 0011 #01  RTE FILE MANAGER DIRECTORY ROUTINE **************** 


0386  00542 026514R       JMP OPEN4     YES SO GO RETURN THE PRAMS
0387  00543 062642R CSER  LDA TYPE      NO SO CONTINUE
0388  00544 026624R       JMP NSHR4     THE SEARCH

0390  00545 066212R EXOPT LDB P5        IF EXTENT OPEN IS FOR 
0391  00546 056552R       CPB .8        WRITE THE GO CREAT THE EXTENT 
0392  00547 027102R       JMP CREA0     GO EXIT 
0393  00550 062205R       LDA N5        ELSE RETURN ILLEGAL RECORD ERROR
0394  00551 026515R       JMP CREX      GO EXIT 


0396  00552 000010  .8    DEC 8 
0397  00553 000016  .14   DEC 14
0398  00554 001216R ANAME DEF NAME
0399  00555 000000  ATRAK NOP 
0400  00556 100000  SIGN  OCT 100000


0402* 
0403*  SETDR     ROUTINE TO SET UP TO READ A DIRECTORY
0404* 
0405  00557 000000  SETDR NOP 
0406  00560 016373R       JSB WCSR      WRITE CURRENT SECT
0407  00561 003400        CCA           SET FIRST 
0408  00562 073063R       STA FIRST     FLAG TO INDICATE FIRST BLOCK
0409  00563 062555R       LDA ATRAK     SET THE TRACK 
0410  00564 073361R       STA TRACK     ADDRESS 
0411  00565 063364R       LDA ALU       AND THE LU
0412  00566 072404R       STA DRLU      ADDRESS 
0413  00567 053167R       CPA .2        IF LU=2 
0414  00570 002401        CLA,RSS       USE ZERO
0415  00571 062574R       LDA N14       ELSE -14 (UDAD ADDS 14) 
0416  00572 073362R       STA SECT      SET THE SECTOR
0417  00573 126557R       JMP SETDR,I   RETURN
0418  00574 177762  N14   DEC -14 
0419* 
0420* N.SHR     DIRECTORY SEARCH ROUTINE
0421*           TARGET NAME IN NAME 
0424                      LST 
0425*           RETURNS:
0426*           P+1  END OF DIRECTORY   A=NEXT ADDR. (IF A=0 END OF SPAC
0427*           P+2  FOUND RETURN   A=ENTRY ADDR. 
0428* 
0429  00576 000000  N.SHR NOP 
0430  00577 016704R       JSB RDNXB     READ THE DIRECTORY
0431  00600 126576R       JMP N.SHR,I   END OF DISC RETURN
0432  00601 062432R NSHR0 LDA ABUF      SET A TO THE BUFFER ADDRESS 
0433  00602 067062R       LDB N8        SET COUNT FOR THE NO. IN A BLOCK
0434  00603 077064R       STB COUN1 
0435  00604 002300  NSHR1 CCE           SET FOUND FLAG (E=1)
0436  00605 066554R       LDB ANAME     SET THE NAME ADDRESS
0437  00606 077357R       STB TMP2      IN TMP2 
0438  00607 067233R       LDB N3        SET FOR 3-WORD NAME 
0439  00610 077065R       STB COUN2 
0440  00611 164000  NSHR2 LDB A,I       GET A NAME WORD 
0441  00612 006003        SZB,RSS       IF ZERO - END OF DIRECTORY







 PAGE 0012 #01  RTE FILE MANAGER DIRECTORY ROUTINE **************** 


0442  00613 126576R       JMP N.SHR,I   SO EXIT 
0443  00614 157357R       CPB TMP2,I    MATCH?
0444  00615 002005        INA,RSS       YES - SET FOR NEXT WORD SKIP
0445  00616 002104        CLE,INA       NO  - SET NOT FOUND - STEP NAME 
0446  00617 037357R       ISZ TMP2      STEP LOCATIONS
0447  00620 037065R       ISZ COUN2     AND COUNT MORE NAME 
0448  00621 026611R       JMP NSHR2     YES; GO DO IT 
0449  00622 006744        CLB,SEZ,CCE,INB  NO; FOUND? 
0450  00623 026630R       JMP NSHR3     YES; GO TAKE FOUND EXIT 
0451  00624 043057R NSHR4 ADA .13       NO; SET FOR NEXT ENTRY
0452  00625 037064R       ISZ COUN1     DONE WITH BLOCK?
0453  00626 026604R       JMP NSHR1     NO; DO NEXT ENTRY 
0454  00627 026577R       JMP N.SHR+1   YES; GO READ NEXT BLOCK 
0455  00630 046576R NSHR3 ADB N.SHR     FOUND - STEP RETURN ADDRESS 
0456  00631 043233R       ADA N3        ADJUST TO START OF ENTRY
0457  00632 124001        JMP B,I       RETURN
0458* 
0459* SETAD     TO SET UP ADDRESSES FOR DIRECTORY ENTRY IN BUF AT 
0460*           ADDRESS POINTED TO BY A 
0461* 
0462* 
0463  00633 000000  SETAD NOP 
0464  00634 006500        CLB,CLE 
0465  00635 016003X       JSB P.PAS 
0466  00636 177766  N10   DEC -10 
0467  00637 000000  DIRA  NOP 
0468  00640 000000        NOP 
0469  00641 000000        NOP 
0470  00642 000000  TYPE  NOP 
0471  00643 000000  TRAKA NOP 
0472  00644 000000  SECTA NOP 
0473  00645 000000  #SEC  NOP 
0474  00646 000000  RL    NOP 
0475  00647 000000  SC    NOP 
0476  00650 000000  FLAGA NOP 
0477  00651 126633R       JMP SETAD,I 




0480  00652 000000  RPRM  NOP 
0481  00653 072677R       STA R1        SET FIRST RETURN PRAM 
0482  00654 063361R       LDA TRACK     TRACK,LU
0483  00655 100046        LSL 6         TO
0484  00656 043364R       ADA ALU       RETURN
0485  00657 072700R       STA R2        TWO 
0486  00660 062432R       LDA ABUF      OFFSET
0487  00661 003004        CMA,INA       AND 
0488  00662 042637R       ADA DIRA      SECTOR
0489  00663 001727        ALF,ALF       TO
0490  00664 043362R       ADA SECT      RETURN
0491  00665 072701R       STA R3        3 
0492  00666 162643R       LDA TRAKA,I   TRACK OF FILE TO
0493  00667 072702R       STA R4        RETURN 4
0494  00670 162644R       LDA SECTA,I   GET THE SECTOR ADDRESS
0495  00671 013434R       AND B377      ISOLATE IT







 PAGE 0013 #01  RTE FILE MANAGER DIRECTORY ROUTINE **************** 


0496  00672 066751R       LDB #SECT     GET THE NUMBER OF SECTORS /TRACK
0497  00673 005727        BLF,BLF       ROTATE AND
0498  00674 040001        ADA B         COMBINE WITH THE SECTOR 
0499  00675 072703R       STA R5        RETURN 5
0500  00676 126652R       JMP RPRM,I


0502  00677 000000  R1    NOP 
0503  00700 000000  R2    NOP 
0504  00701 000000  R3    NOP 
0505  00702 000000  R4    NOP 
0506  00703 000000  R5    NOP 


0508* 
0509* RDNXB     READ NEXT DIRECTORY BLOCK 
0510* 
0511  00704 000000  RDNXB NOP 
0512  00705 016716R       JSB UDAD      UPDATE THE ADDRESSES
0513  00706 126704R       JMP RDNXB,I   END OF DIRECTORY RETURN 
0514  00707 016405R       JSB RWSUB     READ THE BLOCK
0515  00710 036704R       ISZ RDNXB     STEP TO OK RETURN 
0516  00711 037063R       ISZ FIRST     FIRST BLOCK?
0517  00712 126704R       JMP RDNXB,I   NO; SO RETURN 

0519  00713 000040        CLE 
0520  00714 016743R       JSB DPMM
0521  00715 126704R       JMP RDNXB,I   RETURN
0522* 
0523* UDAD  --  UPDATE THE DIRECTORY ADDRESS
0524* 
0525  00716 000000  UDAD  NOP 
0526  00717 016373R       JSB WCSR      WRITE CURRENT BLOCK 
0527  00720 062553R       LDA .14       A_14
0528  00721 043362R       ADA SECT      ADD  7  TO THE SECTOR 
0529  00722 006400        CLB           PREPARE FOR DIVIDE
0530  00723 100400        DIV #SECT     DIVIDE BY THE NO OF SECTORS0TRAC
0531  00725 077362R       STB SECT      SET THE NEW SECTOR ADDRESS
0532  00726 002002        SZA           IF NO ROLLOVER OR 
0533  00727 006002        SZB           IF SECTOR IS ZERO THEN SKIP (NEW
0534  00730 026737R       JMP UDAD1     ELSE GO EXIT

0536  00731 007400        CCB           SET TO DECREMENT TRACK
0537  00732 002400        CLA           SET A FOR ERROR RETURN
0538  00733 047361R       ADB TRACK     ADDRESS 
0539  00734 056741R       CPB LTR       OUT OF DIRECTORY? 
0540  00735 126716R       JMP UDAD,I    YES SO RETURN 
0541  00736 077361R       STB TRACK     SET THE NEW TRACK 
0542  00737 036716R UDAD1 ISZ UDAD      STEP RETURN 
0543  00740 126716R       JMP UDAD,I    TAKE OR RETURN


0545  00741 000000  LTR   NOP 
0546  00742 000005R NXSCA DEF BUF+5 









 PAGE 0014 #01  RTE FILE MANAGER DIRECTORY ROUTINE **************** 


0548* DPMM  MOVE DISC PARAMETERS FOR CURRENT UNIT 
0549*           CALLING SEQUENCE
0550* 
0551*           E=0  -  SAVE PARAMETERS 
0552*           E=1  -  MOVE PARAMETERS BACK
0553* 
0554* 
0555  00743 000000  DPMM  NOP 
0556  00744 062742R       LDA NXSCA 
0557  00745 066556R       LDB SIGN
0558  00746 016003X       JSB P.PAS 
0559  00747 177765  N11   DEC -11 
0560  00750 000000  NXSEC NOP 
0561  00751 000140  #SECT DEC 96
0562  00752 000000  LASTR NOP 
0563  00753 000000  #TRK  NOP 
0564  00754 000000  NXTR  NOP 
0565  00755 000000  BAD1  NOP 
0566  00756 000000  BAD2  NOP 
0567  00757 000000  BAD3  NOP 
0568  00760 000000  BAD4  NOP 
0569  00761 000000  BAD5  NOP 
0570  00762 000000  BAD6  NOP 
0571  00763 000000        NOP 
0572  00764 066753R       LDB #TRK
0573  00765 047361R       ADB TRACK     COMPUTE THE ADDRESS OF TRACK
0574  00766 076741R       STB LTR       ELSE SET THE ADDRESS
0575  00767 066404R       LDB DRLU      SAVE THE CURRENT LU 
0576  00770 076360R       STB RDPS      FOR CORE RESIDENT SPEED 
0577  00771 126743R       JMP DPMM,I





0579* 
0580*  FLAG     CHECKS FOR OPEN FLAGS 
0581*           ASSUMES FLAGA POINTS TO THE FLAG AREA 
0582* 
0583  00772 000000  FLAG  NOP 
0584  00773 002400        CLA           CLEAR THE OPEN COUNT
0585  00774 073065R       STA COUN2     AND 
0586  00775 063435R       LDA N7        SET TO TEST 
0587  00776 073064R       STA COUN1     THE OPEN FLAGS
0588  00777 066650R       LDB FLAGA     GET THE FLAG ADDRESS
0589  01000 160001  FLAG1 LDA B,I       GET OPEN FLAG 
0590  01001 001265        RAL,CLE,ERA   REMOVE POSSIBLE EXCLUSIVE BIT 
0591  01002 017010R       JSB DORM      TEST FOR DORMANT
0592  01003 037065R       ISZ COUN2     STEP OPEN FLAG COUNT
0593  01004 006004        INB           STEP TO NEXT ENTRY
0594  01005 037064R       ISZ COUN1     STEP COUNT; END OF FLAGS? 
0595  01006 027000R       JMP FLAG1     NO; TRY NEXT ONE
0596  01007 126772R       JMP FLAG,I    YES; RETURN 










 PAGE 0015 #01  RTE FILE MANAGER DIRECTORY ROUTINE **************** 


0598* 
0599*  DORM     CHECK TO SEE IF PROGRAM IS DORMANT
0600* 
0601*                ID ADDRESS IN A
0602*                LOCATION TO BE SET TO ZERO'S ADDRESS INB 
0603*                   RETURN P+1 IF NOT DORMANT; ELSE P+2 
0604  01010 000000  DORM  NOP 
0605  01011 077357R       STB TMP2      SAVE B REG
0606  01012 002303        CCE,SZA,RSS   IF ZERO THEN JUST RETURN P+2
0607  01013 002101        CLE,RSS       SO SKIP   ELSE
0608  01014 053355R       CPA ID        IF OPEN TO THIS PGM  FORCE CLOSE
0609  01015 027032R       JMP DORM1     SO GO EXIT
0610  01016 065657        LDB KEYWD     MAKE SURE THE FLAG POINTS 
0611  01017 076405R       STB RWSUB     TO A VALID
0612  01020 166405R DORM2 LDB RWSUB,I   ID SEGMENT
0613  01021 054000        CPB A         THIS ONE? 
0614  01022 027027R       JMP DORM3     YES CONTINUE
0615  01023 036405R       ISZ RWSUB     NO TRY THE NEXT ONE 
0616  01024 006002        SZB           IF END THEN 
0617  01025 027020R       JMP DORM2 
0618  01026 027032R       JMP DORM1     NOT VALID  GO CLEAR FLAG
0619  01027 042552R DORM3 ADA .8        ADDRESS OF SUSPEND POINT
0620  01030 164000        LDB A,I       TO B
0621  01031 007107        CMB,CLE,INB,SZB,RSS   IF ZERO (DORMANT) E_1 
0622  01032 037010R DORM1 ISZ DORM              ELSE SKIP 
0623  01033 067357R       LDB TMP2      RESTORE BREG
0624  01034 002440        CLA,SEZ       CHANGE TO DORMANT 
0625  01035 170001        STA B,I       SET TO ZERO 
0626  01036 002040        SEZ           AND 
0627  01037 077363R       STB WCS       SET WRITE FLAG
0628  01040 127010R       JMP DORM,I    RETURN


0630  01041 002405  EX1   CLA,INA,RSS 
0631  01042 063167R EX2   LDA .2
0632  01043 002001        RSS 
0633  01044 063621R EX6   LDA .6
0634  01045 002001        RSS 
0635  01046 062552R EX8   LDA .8
0636  01047 002001        RSS 
0637  01050 063057R EX13  LDA .13 
0638  01051 002001        RSS 
0639  01052 062553R EX14  LDA .14 
0640  01053 003005        CMA,INA,RSS 
0641  01054 062747R EX11  LDA N11 
0642  01055 026515R       JMP CREX


0644  01056 000007  .7    DEC 7 
0645  01057 000015  .13   DEC 13
0646  01060 000200  .128  DEC 128 
0647  01061 000077  B77   OCT 77
0648  01062 177770  N8    DEC -8
0649  01063 000000  FIRST NOP 
0650  01064 000000  COUN1 NOP 
0651  01065 000000  COUN2 NOP 







 PAGE 0016 #01  RTE FILE MANAGER DIRECTORY ROUTINE **************** 


0652  01066 000755R BTRA  DEF BAD1
0653  01067 000000  BADTR NOP 





























































 PAGE 0017 #01  RTE FILE MANAGER DIRECTORY ROUTINE **************** 


0655  01070 017267R CREAT JSB RDPAS     READ THE SKELETON DIRECTORY 
0656  01071 063355R       LDA ID       SET UP EXCLUSIVE OPEN FLAG 
0657  01072 042556R       ADA SIGN     ADD THE EXCLUSIVE BIT
0658  01073 073355R       STA ID        SAVE IT 
0659  01074 002400        CLA          CLEAR THE EXTENT FLAG
0660  01075 073242R       STA GSEC      SAVE IT FOR THE DIRECTORY 
0661  01076 062432R       LDA ABUF      MOVE IT 
0662  01077 017212R       JSB MOVE1     THE SAVE AREA 
0663  01100 016557R       JSB SETDR     SET TO READ THE DIRECTORY 
0664  01101 016576R       JSB N.SHR     SEARCH FOR THE NAME 
0665  01102 002301  CREA0 CCE,RSS       NOT FOUND SKIP
0666  01103 027042R       JMP EX2       FOUND - TAKE DUP NAME EXIT
0667  01104 002003        SZA,RSS       IF DIRECTORY FULL 
0668  01105 027052R       JMP EX14      TAKE EXIT 
0669  01106 016633R       JSB SETAD     SET THE ADDRESSES 
0670  01107 002300        CCE 
0671  01110 062637R       LDA DIRA      MOVE IN 
0672  01111 017212R       JSB MOVE1 
0673  01112 063355R       LDA ID        SET THE OPEN FLAG 
0674  01113 172650R       STA FLAGA,I 
0675  01114 067066R       LDB BTRA      SET THE BAD TRACK 
0676  01115 077067R       STB BADTR     POINTER 
0677  01116 066750R       LDB NXSEC     GET THE NEXT TRACK
0678  01117 062754R       LDA NXTR      AND SECT
0679  01120 172643R CREA1 STA TRAKA,I   SET THE TRACK 
0680  01121 047242R       ADB GSEC      ADD THE EXTENT WORD 
0681  01122 176644R       STB SECTA,I   SET THE SECT/EXTENT 
0682  01123 166645R       LDB #SEC,I    GET THE REQUEST SIZE
0683  01124 163067R       LDA BADTR,I   AND THE FIRST BAD TRACK 
0684  01125 002002        SZA           IF GOOD SKIP
0685  01126 006021        SSB,RSS       ELSE IF REST OF DISC SKIP 
0686  01127 027134R       JMP CREA2     GO CALCULATE SIZE 
0687  01130 002004  CREA3 INA           BAD TRACK ON REST OF DISC RQ
0688  01131 037067R       ISZ BADTR     SET FILE ABOVE IT AND 
0689  01132 006400        CLB           TRY AGAIN 
0690  01133 027120R       JMP CREA1 


0692  01134 006020  CREA2 SSB           IF REST OF DISC 
0693  01135 027174R       JMP CREA5     JMP 
0694  01136 017551R       JSB NXT/S     COMPUTE THE NEXT TRACK AND SECTO
0695  01137 072633R       STA SETAD     SECTOR - SAVE LAST TRACK
0696  01140 163067R       LDA BADTR,I   GET LAST AVAILABLE TRACK
0697  01141 002003        SZA,RSS       IF NOT BAD
0698  01142 062752R       LDA LASTR     THE LAST ON DISC+1
0699  01143 003004        CMA,INA       SUBTRACT FROM 
0700  01144 042633R       ADA SETAD     LAST FILE TRACK 
0701  01145 002020        SSA           0 OR +? 
0702  01146 027156R       JMP CREA4     YES; IT FITS
0703  01147 163067R       LDA BADTR,I   NO; WON'T FIT 
0704  01150 002002        SZA           WAS IT A BAD TRACK? 
0705  01151 027130R       JMP CREA3     YES; TRY ABOVE IT 
0706  01152 063242R       LDA GSEC      IF EXTENT CREAT 
0707  01153 002003        SZA,RSS       THEN SKIP TO ERROR EXIT 
0708  01154 026241R       JMP NEXT      ELSE TRY NEXT DISC
0709  01155 027044R       JMP EX6       NO ROOM FOR EXTENT EXIT 







 PAGE 0018 #01  RTE FILE MANAGER DIRECTORY ROUTINE **************** 


0711  01156 062633R CREA4 LDA SETAD     IT FIT SO 
0712  01157 072754R CREA6 STA NXTR      UPDATE THE NEXT 
0713  01160 076750R       STB NXSEC     TRACK AND SECTOR
0714  01161 037363R       ISZ WCS       SET THE WRITE FLAG
0715  01162 162645R       LDA #SEC,I    GET THE RETURN PRAM 
0716  01163 016652R       JSB RPRM      AND GO SET UP THE RETURN
0717  01164 016557R       JSB SETDR     SET UP TO READ FIRST
0718  01165 073063R       STA FIRST     DIRECTORY BLOCK 
0719  01166 016704R       JSB RDNXB     READ IT 
0720  01167 000002  .2    DEC 2 
0721  01170 002300        CCE           MOVE NEW
0722  01171 016743R       JSB DPMM      NEXT TRACK AND SECT WORDS 
0723  01172 037363R       ISZ WCS       IN - SET TO WRITE 
0724  01173 026516R       JMP EXIT      AND EXIT


0726  01174 162643R CREA5 LDA TRAKA,I   REQUEST FOR REST OF DISC
0727  01175 003004        CMA,INA       COMPUTE THE 
0728  01176 042752R       ADA LASTR     NUMBER OF 
0729  01177 100200        MPY #SECT     SECTORS 
0730  01201 166644R       LDB SECTA,I   AVAILABLE 
0731  01202 007004        CMB,INB       AND 
0732  01203 040001        ADA B         SET 
0733  01204 172645R       STA #SEC,I    IN THE FILE ENTRY 
0734  01205 002003        SZA,RSS       IF ZERO 
0735  01206 026241R       JMP NEXT      TRY NEXT DISC 
0736  01207 062752R       LDA LASTR     ELSE PRESET TO CLOSE
0737  01210 006400        CLB           THE DISC
0738  01211 027157R       JMP CREA6     AND GO WRAP IT UP 


0740* 
0741* 
0742* MOVE1/2     TO MOVE DIRECTORY ENTRIES TO/FROM 
0743*             THE LOCAL SAVE AREA DEFINED 
0744*             HEREIN. 
0745* 
0746*             CALLING SEQUENCE: 
0747* 
0748*             E=0   TO THIS SAVE AREA 
0749*             E=1   FROM THIS SAVE AREA 
0750* 
0751*             A = ADDRESS OF OTHER AREA 
0752* 
0753*             MOVE1   MOVES 9 WORDS 
0754*             MOVE2   MOVES 3 WORDS 
0755* 
0756  01212 000000  MOVE1 NOP 
0757  01213 066556R       LDB SIGN      SET B TO MOVE WORDS 
0758  01214 016003X       JSB P.PAS     CALL TO MOVE
0759  01215 177767  N9    DEC -9        9 WORDS 
0760  01216 000000  NAME  BSS 9 
0761  01223         CSEC  EQU NAME+5
0762  01227 127212R       JMP MOVE1,I   RETURN









 PAGE 0019 #01  RTE FILE MANAGER DIRECTORY ROUTINE **************** 


0764  01230 000000  MOVE2 NOP 
0765  01231 066556R       LDB SIGN      SET B FOR MOVE
0766  01232 016003X       JSB P.PAS     CALL TO MOVE
0767  01233 177775  N3    DEC -3        3 
0768  01234 000000        BSS 3         WORDS 
0769  01237 127230R       JMP MOVE2,I   RETURN


0771  01240 000000  GTRK  NOP 
0772  01241 000000  GLU   NOP 
0773  01242 000000  GSEC  NOP 
0774  01243 000000  G#SEC NOP 



















































 PAGE 0020 #01  RTE FILE MANAGER DIRECTORY ROUTINE **************** 


0776  01244 017260R GEN   JSB TESTL     TEST LEGALITY OF CALL 
0777  01245 016557R       JSB SETDR     SET UP TO ACCESS THE DIRECTORY
0778  01246 017267R       JSB RDPAS     READ THE PASSED DATA
0779  01247 016716R       JSB UDAD      UPDATE DIRECTORY ACCESS 
0780  01250 026515R       JMP CREX      END GO EXIT 
0781  01251 000040        CLE           SET E FOR DPMM CALL 
0782  01252 037063R       ISZ FIRST     FIRST SECTOR? 
0783  01253 002001        RSS           NO; SKIP
0784  01254 016743R       JSB DPMM      YES; GO EXTRACT THE DISC PRAMS
0785  01255 037363R       ISZ WCS       SET TO WRITE
0786  01256 016373R       JSB WCSR      WRITE THE SECTORS 
0787  01257 027304R       JMP RDPA2     GO GET THE NEXT BLOCK 


0789  01260 000000  TESTL NOP 
0790  01261 160001        LDA B,I       GET THE LOCK
0791  01262 067356R       LDB TMP1      IF LOCKED 
0792  01263 053355R       CPA ID        TO CALLER 
0793  01264 006003        SZB,RSS       AND CORRECT DISC SPEC SKIP
0794  01265 027430R       JMP EX102     ELSE TAKE ERROR EXIT
0795  01266 127260R       JMP TESTL,I 





0797* 
0798* RDPAD     READ THE PASSED DATA
0799* 
0800  01267 000000  RDPAS NOP 
0801  01270 062207R       LDA P2        GET THE ADDRESS 
0802  01271 013061R       AND B77       ISOLATE THE LU
0803  01272 073241R       STA GLU       AND SET 
0804  01273 022207R       XOR P2        ISOLATE THE TRACK 
0805  01274 001722        ALF,RAL       ROTATE TO 
0806  01275 001227        RAL,ALF       LOW A 
0807  01276 073240R       STA GTRK      AND SET 
0808  01277 062211R       LDA P4        GET THE #SECTORS/TRACK
0809  01300 001265        RAL,CLE,ERA   ELIMINATE THE SIGN
0810  01301 073243R       STA G#SEC     AND SET 
0811  01302 002400        CLA           SET FOR SECTOR
0812  01303 073242R       STA GSEC      ZERO
0813  01304 072452R RDPA2 STA LDRLU     SHOW THE BLOCK NOT IN CORE
0814  01305 016001X       JSB EXEC      READ THE SECTORS
0815  01306 001315R       DEF GRTN
0816  01307 001671R       DEF .1
0817  01310 001241R       DEF GLU 
0818  01311 000000R       DEF BUF 
0819  01312 001060R       DEF .128
0820  01313 001240R       DEF GTRK
0821  01314 001242R       DEF GSEC
0822  01315 057060R GRTN  CPB .128      DISC ERROR? 
0823  01316 002001        RSS           NO; CONTINUE
0824  01317 027041R       JMP EX1       YES; TAKE DISC ERR EXIT 
0825  01320 063242R       LDA GSEC      UPDATE THE
0826  01321 043167R       ADA .2        DISC ADDRESS







 PAGE 0021 #01  RTE FILE MANAGER DIRECTORY ROUTINE **************** 


0827  01322 053243R       CPA G#SEC     END OF TRACK? 
0828  01323 002400        CLA           YES - USE 0 SECT. 
0829  01324 073242R       STA GSEC      SET SECTOR
0830  01325 002103        CLE,SZA,RSS   IF EOT
0831  01326 037240R       ISZ GTRK      STEP TRACK ADDRESS
0832  01327 127267R       JMP RDPAS,I   RETURN

























































 PAGE 0022 #01  RTE FILE MANAGER DIRECTORY ROUTINE **************** 


0835  01330 062211R LOCK5 LDA P4        END OF DIRECTORY
0836  01331 066212R       LDB P5        IF GEN CALL 
0837  01332 057056R       CPB .7        AND 
0838  01333 002021        SSA,RSS       SIGN BIT SET SKIP 
0839  01334 027044R       JMP EX6       ELSE - NOT FOUND EXIT 
0840  01335 017267R       JSB RDPAS     NEW DIRECTORY FOR DISCS - READ
0841  01336 027352R       JMP EXIT3     GO WRITE AND EXIT 



0843  01337 017260R PACK  JSB TESTL     TEST LEGALITY OF CALL 
0844  01340 017614R       JSB SETPR     SET UP THE DISC PARAMETERS
0845  01341 062211R       LDA P4        GET RELATIVE DOUBLE SECT
0846  01342 003007        CMA,INA,SZA,RSS  SET NEGATIVE IF ZERO 
0847  01343 027351R       JMP PACK2     SKIP
0848  01344 073064R       STA COUN1     SET COUNT 
0849  01345 016716R PACK1 JSB UDAD      BUMP ADDRESS
0850  01346 027426R       JMP EX101     END OF DIRECTORY EXIT 
0851  01347 037064R       ISZ COUN1     STEP COUNTER; DONE? 
0852  01350 027345R       JMP PACK1     NO; GO BUMP AGIN
0853  01351 017267R PACK2 JSB RDPAS     YES; READ THE NEW SECT. 
0854  01352 037363R EXIT3 ISZ WCS       SET WRITE FLAG
0855  01353 002400  EXIT4 CLA           AND TAKE
0856  01354 026515R       JMP CREX      ACCEPT EXIT 


0858  01355 000000  ID    NOP 
0859  01356 000000  TMP1  NOP 
0860  01357 000000  TMP2  NOP 
0861  01360 000000  DIRAD NOP 
0862  01361 000000  TRACK NOP 
0863  01362 000000  SECT  NOP 
0864  01363 000000  WCS   NOP 
0865  01364 000000  ALU   NOP 
0866  01365 000000  DITR  NOP 




























 PAGE 0023 #01  RTE FILE MANAGER DIRECTORY ROUTINE **************** 


0868  01366 063356R RLOCK LDA TMP1      DISC MUST BE SPECIFIED
0869  01367 002003        SZA,RSS 
0870  01370 027426R       JMP EX101     NOT SPECIFIED - EXIT
0871  01371 016557R       JSB SETDR     SET TO SEARCH FOR OPEN FLAGS
0872  01372 016704R ROCK1 JSB RDNXB     READ ENTRY
0873  01373 027416R       JMP ROCK4     END OF DIRECTORY - GRANT LOCK 
0874  01374 063062R       LDA N8        SET COUNTER FOR 8 ENTRIES 
0875  01375 073461R       STA EXSH
0876  01376 062432R       LDA ABUF      SET A_ADDRESS OF FIRST
0877  01377 164000  ROCK2 LDB A,I       END OF
0878  01400 006020        SSB           IF PURGED 
0879  01401 027412R       JMP ROCK3     IGNOR 
0880  01402 006003        SZB,RSS       DIRECTORY?
0881  01403 027416R       JMP ROCK4     YES; GRAND LOCK 
0882  01404 016633R       JSB SETAD     NO; SET ENTRY ADDRESSES 
0883  01405 016772R       JSB FLAG      TEST FOR FLAGS
0884  01406 067065R       LDB COUN2     ANY 
0885  01407 006002        SZB           SET?
0886  01410 027046R       JMP EX8       YES; REJECT LOCK
0887  01411 062637R       LDA DIRA      NO; GET ADDRESS TO A
0888  01412 043433R ROCK3 ADA .16       STEP TO NEXT ENTRY
0889  01413 037461R       ISZ EXSH      END OF BLOCK? 
0890  01414 027377R       JMP ROCK2     NO; TRY NEXT ENTRY
0891  01415 027372R       JMP ROCK1     YES; TRY NEXT BLOCK 


0893  01416 016360R ROCK4 JSB RDPS      LOCK GRANTABLE; READ DISC 
0894  01417 063355R       LDA ID        DIRECTORY AND 
0895  01420 007400        CCB           SET 
0896  01421 047360R       ADB DIRAD     THE 
0897  01422 170001  ROCK5 STA B,I       LOCK
0898  01423 027352R       JMP EXIT3     EXIT





0900  01424 002400  ULOCK CLA           UNLOCK - CLEAR
0901  01425 027422R       JMP ROCK5     AND GO SET IT 


0903  01426 063432R EX101 LDA N102
0904  01427 002005        INA,RSS 
0905  01430 063432R EX102 LDA N102
0906  01431 026515R       JMP CREX


0908  01432 177632  N102  DEC -102
0909  01433 000020  .16   DEC 16
0910  01434 000377  B377  OCT 377 
0911  01435 177771  N7    DEC -7












 PAGE 0024 #01  RTE FILE MANAGER DIRECTORY ROUTINE **************** 


0913  01436 017267R CNAM  JSB RDPAS    CHANGE NAM - READ NEW NAME 
0914  01437 062432R       LDA ABUF      MOVE IT TO
0915  01440 017230R       JSB MOVE2     LOCAL SAVE AREA 
0916  01441 062432R       LDA ABUF      SET UP THE NAME 
0917  01442 017212R       JSB MOVE1     FOR DUP CHECK 
0918  01443 016557R       JSB SETDR     SET UP TO READ THE DIRECTORY
0919  01444 016576R       JSB N.SHR     SEARCH FOR DUPLICATE NAME 
0920  01445 002001        RSS           NOT FOUND  SO SKIP
0921  01446 027042R       JMP EX2       TAKE DUP NAME EXIT
0922  01447 017466R       JSB DIRCK     GO GET DIRECTORY ENTRY
0923  01450 162650R       LDA FLAGA,I   OPEN EXCLUSIVELY
0924  01451 001265        RAL,CLE,ERA   CLEAR EXCLUSIVE BIT AND SAVE IN 
0925  01452 052206R       CPA P1        TO CALLER?
0926  01453 002341        SEZ,CCE,RSS   YES SKIP
0927  01454 027430R       JMP EX102     NO; REJECT
0928  01455 062637R CNAM1 LDA DIRA      YES; MOVE 
0929  01456 017230R       JSB MOVE2     THE NEW NAME IN 
0930  01457 017461R       JSB EXSH      SEARCH FOR EXTENT OF THIS FILE
0931  01460 027455R       JMP CNAM1     YES  GO SET NEW NAME


0933  01461 000000  EXSH  NOP           DIRECTOR SEARCH FOR EXTENTS TO M
0934  01462 037363R       ISZ WCS       SET THE WRITE FLAG
0935  01463 017563R       JSB EXSHR    SEARCH FOR EXTENT
0936  01464 027353R       JMP EXIT4     NOT FOUND SO EXIT 
0937  01465 127461R       JMP EXSH,I    FOUND RETURN





0939* 
0940* DIRCK     READ A DIRECTORY ENTRY - SET FLAGS
0941*           CHECK OPEN FLAGS ETC. 
0942* 
0943  01466 000000  DIRCK NOP 
0944  01467 063364R       LDA ALU       DO WE ALREADY 
0945  01470 052360R       CPA RDPS      HAVE THE DISC SPECS?
0946  01471 002001        RSS           YES  SO SKIP SET UP 
0947  01472 017614R       JSB SETPR     SET UP THE DISC PARAMETERS
0948  01473 063365R       LDA DITR      SET 
0949  01474 073361R       STA TRACK     TRACK 
0950  01475 062211R       LDA P4        GET THE PASSED
0951  01476 013434R       AND B377      SECTOR
0952  01477 073362R       STA SECT      AND SET IT
0953  01500 022211R       XOR P4        NOW GET THE 
0954  01501 001727        ALF,ALF       OFFSET
0955  01502 042432R       ADA ABUF      ADD THE BUFFER ADDRESS
0956  01503 016633R       JSB SETAD     SET DIRECTORY ADDRESSES 
0957  01504 016405R       JSB RWSUB     READ THE BLOCK
0958  01505 062637R       LDA DIRA      MOVE THE ENTRY TO LOCAL 
0959  01506 017212R       JSB MOVE1     STORAGE 
0960  01507 127466R       JMP DIRCK,I 










 PAGE 0025 #01  RTE FILE MANAGER DIRECTORY ROUTINE **************** 


0963  01510 017466R CLOSE JSB DIRCK     CLOSE; GET THE SECTOR 
0964  01511 063435R       LDA N7        SET FOR 7 ENTRIES 
0965  01512 166650R CLOS1 LDB FLAGA,I   FIND
0966  01513 005265        RBL,CLE,ERB   CALLERS 
0967  01514 057355R       CPB ID        FLAG
0968  01515 027522R       JMP CLOS2     FOUND 
0969  01516 036650R       ISZ FLAGA     NOT; YET TRY NEXT ONE 
0970  01517 002006        INA,SZA       MORE? 
0971  01520 027512R       JMP CLOS1     YES; OK 
0972  01521 027054R       JMP EX11      NO; ERR - NOT OPEN TO CALLER


0974  01522 002400  CLOS2 CLA           FOUND; CLEAR THE
0975  01523 172650R       STA FLAGA,I   FLAG
0976  01524 062207R       LDA P2        GET TRUNCATE CODE 
0977  01525 002002        SZA           IF ZERO THEN SKIP  NO ACTION
0978  01526 002041        SEZ,RSS       EXCLUSIVE OPEN? 
0979  01527 027352R       JMP EXIT3     NO; EXIT
0980  01530 002021        SSA,RSS       IF POSITIVE THEN
0981  01531 027667R       JMP EXPUR     GO PURGE THE EXTENTS
0982  01532 142645R       ADA #SEC,I    CALCULATE NEW FILE SIZE 
0983  01533 002011        SLA,RSS       IGNOR IF ODD SECTOR COUNT 
0984  01534 002020        SSA           IF RESULT LESS THAN ZERO
0985  01535 027352R       JMP EXIT3     THEN IGNOR IT 
0986  01536 002303        CCE,SZA,RSS   IF ZERO 
0987  01537 027622R       JMP PURGE     GO PURGE
0988  01540 073357R       STA TMP2      SAVE THE NEW SIZE 
0989  01541 017600R       JSB LAST?     LAST FILE?
0990  01542 002101        CLE,RSS       NO, CLEAR E  SKIP 
0991  01543 002300        CCE           YES; SET E
0992  01544 063357R       LDA TMP2      SET THE NEW SIZE
0993  01545 172645R       STA #SEC,I    IN THE DIRECTORY
0994  01546 002041        SEZ,RSS       IF NOT THE LAST ENTRY 
0995  01547 027667R       JMP EXPUR     GO PURGE ANY EXTENTS
0996  01550 027646R       JMP PURG8     ELSE GO UPDATE DISC PRAMS 





0998  01551 000000  NXT/S NOP           CACULATE THE NEXT TRACK AND SECT
0999  01552 166645R       LDB #SEC,I    GET THE FILE SIZE 
1000  01553 162644R       LDA SECTA,I   GET THE NO OF SECTORS IN THE FIL
1001  01554 013434R       AND B377     ISOLATE
1002  01555 044000        ADB A         SUM 
1003  01556 101020        ASR 16        EXTEND TO A 
1004  01557 100400        DIV #SECT     DIVIDE BY THE NO SECT PER TRACK 
1005  01561 142643R       ADA TRAKA,I   ADD THE CURRENT TRACK ADDRESS 
1006  01562 127551R       JMP NXT/S,I   RETURN A=NEXT TRACK,B=NEXT SECTO





1008  01563 000000  EXSHR NOP           EXTENT SEARCH ROUTINE 
1009  01564 067567R       LDB DEF       SET RETURN ADDRESS IN 







 PAGE 0026 #01  RTE FILE MANAGER DIRECTORY ROUTINE **************** 


1010  01565 076576R       STB N.SHR     NAME SEARCH ROUTINE 
1011  01566 026601R       JMP NSHR0    GO TO NAME SEARCH
1012  01567 001570R DEF   DEF *+1       RETURN ADDRESS FOR NAME SHEARCH 
1013  01570 127563R       JMP EXSHR,I   NOT FOUND SO EXIT 
1014  01571 016633R       JSB SETAD     FOUND  SET THE ADDRESSES
1015  01572 067563R       LDB EXSHR     STEP THE RETURN ADDRESS 
1016  01573 006304        CCE,INB       AND 
1017  01574 162644R       LDA SECTA,I   MAKE SURE THIS IS NOT THE MAIN
1018  01575 053223R       CPA CSEC      SAME AS MAIN? 
1019  01576 026543R       JMP CSER      YES SO TRY AGAIN
1020  01577 124001        JMP B,I       RETURN


1022  01600 000000  LAST? NOP 
1023  01601 166642R       LDB TYPE,I    IF TYPE SIX FILE
1024  01602 057621R       CPB .6        THEN TREAT
1025  01603 127600R       JMP LAST?,I   AS NOT LAST 
1026  01604 017551R       JSB NXT/S     COMPUTE THE NEXT TRACK AND SECTO
1027  01605 052754R       CPA NXTR      SAME TRACK? 
1028  01606 003400        CCA           YES; A_1
1029  01607 056750R       CPB NXSEC     SAME AS NEXT SECTOR?
1030  01610 002006        INA,SZA       YES; WAS IT SAME TRACK ALSO?
1031  01611 127600R       JMP LAST?,I   NO; NOT LAST FILE  EXIT P+1 
1032  01612 037600R       ISZ LAST?     YES; LAST FILE
1033  01613 127600R       JMP LAST?,I   EXIT P+2



1035  01614 000000  SETPR NOP           READ AND SET UP THE DISC PARAMET
1036  01615 016557R       JSB SETDR     SET UP TO ACCESS THE DIR
1037  01616 016704R       JSB RDNXB     READ AND SET PRAMS
1038  01617 177760  N16   DEC -16 
1039  01620 127614R       JMP SETPR,I   RETURN TO CALLER


1041  01621 000006  .6    DEC 6 



























 PAGE 0027 #01  RTE FILE MANAGER DIRECTORY ROUTINE **************** 


1043  01622 003400  PURGE CCA 
1044  01623 172637R PURG0 STA DIRA,I    SET PURGE FLAG
1045  01624 017600R       JSB LAST?     LAST FILE?
1046  01625 027667R       JMP EXPUR     NO; GO CHECK FOR EXTENTS
1047  01626 172637R PURG2 STA DIRA,I    MAKE ENTRY AVAILABLE
1048  01627 062637R       LDA DIRA      IS THIS THE FIRST 
1049  01630 073363R       STA WCS          SET TO WRITE CURRENT BLOCK 
1050  01631 052432R       CPA ABUF      ENTRY IN THE CURRENT BLOCK? 
1051  01632 027653R       JMP PURG5     YES; GO READ PREVIOUS BLOCK 
1052  01633 043617R PURG7 ADA N16       NO; BACK UP TO PREVIOUS 
1053  01634 016633R       JSB SETAD     ENTRY; FIND FIRST UNPURGED
1054  01635 166642R       LDB TYPE,I    CHECK TYPE
1055  01636 162637R       LDA DIRA,I    ENTRY 
1056  01637 057621R       CPB .6        IF TYPE SIX FILE
1057  01640 002300        CCE           DO NOT ATTEMPT RECOVERY 
1058  01641 006002        SZB           TYPE ZERO - IF SO SKIP
1059  01642 002047        SEZ,INA,SZA,RSS   PURGED? 
1060  01643 027626R       JMP PURG2     YES; TRY PREVIOUS ENTRY 

1062  01644 002020        SSA           FOUND ENTRY - IS IT THE 
1063  01645 027650R       JMP PURG3     DISC SPEC ENTRY? - YES JUMP 
1064  01646 017551R PURG8 JSB NXT/S     NO; CACULATE THE NEXT TRACK AND 
1065  01647 027157R       JMP CREA6     GO SET, WRITE & EXIT


1067  01650 162643R PURG3 LDA TRAKA,I  SET TO SHOW
1068  01651 006400        CLB           NEXT AVAILABLE SECT 
1069  01652 027157R       JMP CREA6     IS FIRST SECTOR 

1071  01653 016373R PURG5 JSB WCSR      WRITE CURRENT SECTOR
1072  01654 067362R       LDB SECT      GET SECTOR ADDRESS
1073  01655 006003        SZB,RSS       IF START OF TRACK 
1074  01656 037361R       ISZ TRACK     DIRECTORY TRACK 
1075  01657 046574R       ADB N14       SUBTRACT 14 SECTORS 
1076  01660 006020        SSB           IF NEGATIVE THEN
1077  01661 046751R       ADB #SECT     ADD THE NO. PER TRACK 
1078  01662 077362R       STB SECT      SET NEW SECTOR ADDRESS
1079  01663 016405R       JSB RWSUB     READ THE BLOCK
1080  01664 062432R       LDA ABUF      SET ADDRESS FOR 
1081  01665 043060R       ADA .128      LAST ENTRY
1082  01666 027633R       JMP PURG7     IN THE BLOCK


1084  01667 017461R EXPUR JSB EXSH      SEARCH FOR EXTENTS TO PURGE 
1085  01670 027622R       JMP PURGE     GO PURGE EXTENT 


















 PAGE 0028 #01  RTE FILE MANAGER DIRECTORY ROUTINE **************** 


1087* P.PAS     EXTERNAL
1088*           CALLING SEQUENCE
1089* 
1090*           E_0 FOR SETUP 
1091*           E_1 TO MOVE OUT 
1092* 
1093*           B_0 TO SET ADDRESS
1094*           B_100000 TO SET PARAMETERS
1095* 
1096*           A = ADDRESS OF FROM-TO AREA 
1097* 
1098*           JSB P.PAS 
1099*           DEC -N       NO. OF PARAMETERS TO BE MOVED
1100*           BSS N        AREA SET UP OR MOVED OUT 


1102  01671 000001  .1    DEC 1 
1103  00000         A     EQU 0 
1104  00001         B     EQU 1 
1105  01650         .     EQU 1650B 
1106  01657         KEYWD EQU .+7 
1107  01756         TATSD EQU .+70
1108  01717         XEQT  EQU .+39
1109  01672         LN    EQU * 
1110                      END BEGIN 
**  NO ERRORS*






























$END ASMB     

*
--> Assemble fmp/29033-80002_Rev-A_1
ON,ASMB,99







 PAGE 0001


0001                ASMB,B,R,L,C
**  NO ERRORS*





























































 PAGE 0002 #01  PRTN  TO RETURN PRAMETERS TO THE SCHEDULING PROGRAM 


0001                ASMB,B,R,L,C
0003  00000               NAM PRTN,6
0004                      ENT PRTM
0005                      ENT PRTN
0006                      EXT $LIBR,$LIBX 


0008*  THIS ROUTINE IS USED TO PASS FIVE PARAMETERS TO THE PROGRAM
0009*  THAT SCHEDULED THE CALLER WITH WAIT. 
0010* 
0011*  THE SCHEDULING PROGRAM MAY RECOVER THESE PARAMETERS WITH RMPAR.
0012* 
0013*  THE WAIT FLAG IS CLEARED SO THE CALLER SHOULD HAVE HIGHER
0014*  PRIORITY THAN THE SCHEDULER TO PREVENT A SWAP. 
0015* 
0016*  CALLING SEQUENCE:
0017* 
0018*     JSB PRTN
0019*     DEF *+2       STANDARD FORTRAN SEQUENCE 
0020*     DEF PRAM      ADDRESS OF THE FIVE RETURN PRAMATERS
0021*     JSB EXEC      PROGRAM SHOULD COMPLETE 
0022*     DEF *+2 
0023*     DEF SIX 



0025  00000 000000  PRTN  NOP           ENTRY POINT 
0026  00001 016001X       JSB $LIBR     GO DO PRIVLEDGE THING 
0027  00002 000000  COUNT NOP 
0028  00003 062000R       LDA PRTN      GET THE ADDRESS OF THE CALL PRAM
0029  00004 164000        LDB A,I       GET RETURN ADDRESS
0030  00005 076034R       STB RTN       SAVE IT 
0031  00006 002004        INA           STEP TO PRAM ADDRESS
0032  00007 160000        LDA A,I       GET PRAM ADDRESS
0033  00010 001275        RAL,CLE,SLA,ERA  REMOVE POSSIBLE INDIRECT 
0034  00011 026007R       JMP *-2       IF INDIRECT TRY AGAIN 
0035  00012 072000R       STA PRTN      SAVE THE PRAM ADDRESS 
0036  00013 061657        LDA KEYWD     GET HEAD OF THE KEY WORD LIST 
0037  00014 072073R       STA PRTM      SAVE IT LOCALLY 
0038  00015 026025R       JMP NEXT1+1   GO SCAN THE LIST

0040  00016 006404  NEXT  CLB,INB       ADD ONE 
0041  00017 044000        ADB A         TO IT TO GET THE WAIT ID ADDRESS
0042  00020 076035R       STB ID        ALSO THE PRAM SAVE ADDRESS SAVE 
0043  00021 164001        LDB B,I       GET THE WORD
0044  00022 055717        CPB XEQT      THIS THE SCHEDULING PROGRAM?
0045  00023 026037R       JMP FOUND     LOOKS GOOD  GO CHECK THE STATUS 
0046  00024 036073R NEXT1 ISZ PRTM      STEP KEYWORD ADDRESS
0047  00025 162073R       LDA PRTM,I    GET NEXT ENTRY
0048  00026 002002        SZA           IF END OF LIST EXIT 
0049  00027 026016R       JMP NEXT      NOT END  TRY NEXT ID

0051  00030 062066R EXIT  LDA OP1       RESET THE OPTION FOR PRTN ENTRY 
0052  00031 072046R       STA OPTIN 
0053  00032 016002X       JSB $LIBX     EXIT TO THE SYSTEM EXIT ROUTINE 
0054  00033 000034R       DEF RTN       RETURN ADDRESS







 PAGE 0003 #01  PRTN  TO RETURN PRAMETERS TO THE SCHEDULING PROGRAM 


0056  00034 000000  RTN   NOP 
0057  00035 000000  ID    NOP 
0058  00036 000000  STAT  NOP 


0060  00037 066071R FOUND LDB D5        CACULATE LAST PRAM ADDRESS
0061  00040 044000        ADB A         TO B
0062  00041 076070R       STB LAST      SAVE IT FOR TESTING 
0063  00042 046072R       ADB D10       CALCULATE THE STATUS ADDRESS
0064  00043 076036R       STB STAT      SAVE IT 
0065  00044 164001        LDB B,I       GET STATUS OF SCHEDULER 
0066  00045 005710        BLF,SLB       IS HE WAITING?
0067  00046 005576  OPTIN ERB,CLE,SLB,ELB  OR INA,RSS FOR PRTM
0068  00047 026024R       JMP NEXT1     NO TRY NEXT PGM 
0069  00050 005727        BLF,BLF       ROTATE B THE REST 
0070  00051 005700        BLF           OF THE WAY AROUND 
0071  00052 176036R       STB STAT,I    SET STATUS TO SCHEDULED 
0072  00053 002004  OVER  INA           SET TO PREM AREA
0073  00054 166000R       LDB PRTN,I    GET FIRST PRAM
0074  00055 174000        STB A,I       SET PRAM
0075  00056 036000R       ISZ PRTN      STEP ADDRESS
0076  00057 052070R       CPA LAST      LAST PRAMETER?
0077  00060 006405        CLB,INB,RSS   YES B_1 AND SKIP
0078  00061 026053R       JMP OVER      NO GO DO NEXT ONE 
0079  00062 042071R       ADA D5        YES SET TO B REG ADDRESS
0080  00063 066035R       LDB ID        GET ADDRESS OF PRAM AREA
0081  00064 174000        STB A,I       SET BREG SAVE TO POINT TO PRAMS 
0082  00065 026030R       JMP EXIT      DONE RETURN TO PGM



0084  00066 005576  OP1   ERB,CLE,SLB,ELB 
0085  00067 002005  INARS INA,RSS       PRTM ENTRY A OPTION 
0086  00070 000000  LAST  NOP 
0087  00071 000005  D5    OCT 5 
0088  00072 000012  D10   DEC 10


0090  00073 000000  PRTM  NOP           OPTIONAL ENTRY FOR FOUR 
0091  00074 016001X       JSB $LIBR     PRAMETER PASS WITH OUT CLEARING 
0092  00075 000000        NOP           THE WAIT BIT
0093  00076 062067R       LDA INARS     GET THE OPTIONAL INSTRUCTION
0094  00077 072046R       STA OPTIN     SET IT IN THE CODE
0095  00100 062073R       LDA PRTM      GET THE RETURN ADDRESS
0096  00101 072000R       STA PRTN      SET IT IN THE MAIN ENTRY POINT
0097  00102 026003R       JMP COUNT+1   GO TO MAIN LINE AND DO THE JOB


0099  00000         A     EQU 0 
0100  00001         B     EQU A+1 
0101  01657         KEYWD EQU 1657B 
0102  01717         XEQT  EQU 1717B 
0103                      END 
**  NO ERRORS*


$END ASMB     

*
--> Assemble fmp/29033-80002_Rev-A_2
ON,ASMB,99







 PAGE 0001


0001                ASMB,B,R,L,C
**  NO ERRORS*





























































 PAGE 0002 #01


0001                ASMB,B,R,L,C
0002  00000               NAM CREAT,7 
0003                      ENT CREAT 
0004                      EXT CLOSE,$OPEN,.ENTR 
0005                      EXT NAM..,RMPAR 
0006                      EXT EXEC
0007                      SUP 
0008* 
0009* 
0010*  CREAT     IS THE FILE CREATION MODULE OF THE REAL TIME 
0011*            FILE MANAGEMENT PACKAGE. 
0012* 
0013*            THE FORTRAN CALLING SEQUENCE IS: 
0014* 
0015*     CALL CREAT(IDCB,IERR,NAME,ISIZE,ITYPE,IS,ILU) 
0016*        O R
0017*     IER = CREAT(IDCB,IERR,NAME,ISIZE,ITYPE,IS,ILU)
0018* 
0019*        W H E R E: 
0020* 
0021*     IDCB     IS THE ADDRESS OF A 144-WORD ARRAY WHICH 
0022*              CREAT WILL USE AS A SCRATCH AREA.  IF
0023*              ISIZE<0 THEN THE CREATED FILE IS ALSO
0024*              OPENED TO THIS DATA CONTROL BLOCK. 
0025* 
0026*     IERR     IS THE ADDRESS TO WHICH THE ERROR CODE 
0027*              IS RETURNED.  THIS INFORMATION IS ALSO 
0028*              RETURNED IN THE A REGISTER.
0029* 
0030*              ERROR CODES ARE: 
0031* 
0032*     >0   THE CREAT WAS SUCCESSFUL - THE #SECTORS IS RETURNED
0033*     -1   THE DISC IS DOWN 
0034*     -2   DUPLICATE NAME 
0035*     -4   FILE TOO LONG
0036*     -6   CARTRIDGE NOT FOUND
0037*     -10  NOT ENOUGH PARAMETERS IN THE CALL
0038*     -13  DISC LOCKED
0039*     -14  DIRECTORY FULL 
0040*     -15  ILLEGAL NAME 
0041*     -16  ILLEGAL TYPE OR SIZE 
0042* 
0043* 
0044* 
0045*  NAME        IS A 3-WORD ARRAY CONTAINING THE NEW FILE'S NAME.
0046*              THE NAME MUST CONTAIN ONLY LEGAL ASCII 
0047*              CHARACTERS INCLUDING EMBEDDED BLANKS. COMMAS,
0048*              + SIGN, - SIGN ARE NOT ALLOWED.
0049*              IN ADDITION THE FIRST
0050*              CHARACTER MUST BE NON-NUMERIC AND NON-BLANK. 
0051* 
0052*  ISIZE       A TWO-WORD ARRAY.  WORD 1 IS THE SIZE IN 
0053*              124-WORD DOUBLE SECTORS.  WORD 2 IS USED 
0054*              ONLY FOR TYPE 2 FILES AND IS THE RECORD LENGTH.
0055* 
0056*  ITYPE       IS THE FILE TYPE--MUST BE >0.







 PAGE 0003 #01


0057* 
0058*  IS          (OPTIONAL); IS THE FILE'S SECURITY CODE. 
0059*              IF IS>0 THE FILE IS WRITE PROTECTED. 
0060*              IF IS<0 THE FILE IS OPEN PROTECTED.
0061*              IF IS=0 OR IS NOT CODED THE FILE IS PUBLIC.
0062* 
0063*  ILU         (OPTIONAL); DIRECTS THE CREAT TO:
0064*               IF ILU<0 THEN THE DISC AT LOGICAL UNIT (-ILU).
0065*               IF ILU>0 THEN THE DISC WITH LABEL ILU.
0066*               IF ILU=0 OR NOT CODED, THE FIRST AVAILABLE
0067*                 DISC WITH ENOUGH ROOM IS USED.
0068* 



















































 PAGE 0004 #01


0070  00000 000000  DCB   NOP 
0071  00001 000000  IERR  NOP 
0072  00002 000000  NAME  NOP 
0073  00003 000000  SIZE  NOP 
0074  00004 000242R TYPE  DEF ZERO
0075  00005 000242R SC    DEF ZERO
0076  00006 000242R LU    DEF ZERO

0078  00007 000000  CREAT NOP           ENTRY POINT 
0079  00010 016003X       JSB .ENTR     TRANSFER THE PARAMETERS 
0080  00011 000000R       DEF DCB 
0081  00012 062004R       LDA TYPE      MAKE SURE THERE ARE 
0082  00013 052117R       CPA DZERO     ENOUGH
0083  00014 026216R       JMP ER10      NO - ERROR EXIT 
0084  00015 016001X       JSB CLOSE     GO CLOSE THE DCR (IF OPEN)
0085  00016 000020R       DEF *+2 
0086  00017 100000R       DEF DCB,I 
0087  00020 002002        SZA           NO ERROR
0088  00021 052225R       CPA N11       AND NOT OPEN ERROR - OK 
0089  00022 002001        RSS           SO SKIP IF THIS IS THE CASE 
0090  00023 026206R       JMP EXIT      ELSE EXIT  SOME CLOSE ERROR 
0091  00024 016004X       JSB NAM..     GO CHECK THE NAME 
0092  00025 000027R       DEF *+2 
0093  00026 100002R       DEF NAME,I
0094  00027 002002        SZA           IF OK SKIP
0095  00030 026206R       JMP EXIT      ELSE EXIT ERROR 


0097  00031 162002R       LDA NAME,I    GOOD NAME SO
0098  00032 072243R       STA BUF        SET
0099  00033 036002R       ISZ NAME        UP
0100  00034 104200        DLD NAME,I       SKELETON DIRECTORY 
0101  00036 104400        DST BUF+1         ENTRY IN BUF
0102  00040 162004R       LDA TYPE,I
0103  00041 002002        SZA           TYPE MUST BE
0104  00042 002020        SSA           >0
0105  00043 026220R       JMP ER16      NOT >0 ; ERR
0106  00044 072246R       STA BUF+3 
0107  00045 166003R       LDB SIZE,I    GET THE SIZE
0108  00046 005000        BLS           DOUBLE TO GET 64-WORD SECTORS 
0109  00047 006020        SSB           MUST BE >0 OR 
0110  00050 007400        CCB           SET TO -1 
0111  00051 006003        SZB,RSS       IF ZERO 
0112  00052 026220R       JMP ER16      ERROR 
0113  00053 076251R       STB BUF+6     SET 
0114  00054 036003R       ISZ SIZE      STEP TO RECORD SIZE 
0115  00055 052231R       CPA .2        IF NOT TYPE TWO 
0116  00056 002401        CLA,RSS       THEN
0117  00057 026066R       JMP CREA4     SKIP SIZE TEST
0118  00060 103101        CLO 
0119  00061 101052        LSR 10        SHIFT TO A FOR DIVIDE 
0120  00062 100400        DIV SIZE,I    IF OVER FLOW THE RECORD SIZE TO 
0121  00064 102201        SOC           IF OK SKIP
0122  00065 026214R       JMP ER4       ELSE ERROR FILE TOO LARGE 
0123  00066 162003R CREA4 LDA SIZE,I
0124  00067 066246R       LDB BUF+3     GET TYPE







 PAGE 0005 #01


0125  00070 056230R       CPB .1        IF TYPE=1 
0126  00071 062237R       LDA .128       SET SIZE TO 128
0127  00072 056231R       CPB .2        IF TYPE TWO SIZE MUST BE GIVEN
0128  00073 002021        SSA,RSS       SIZE GIVEN? 
0129  00074 002001        RSS           YES; OR NOT TYPE TWO  SKIP
0130  00075 026214R       JMP ER4       ELSE ERROR
0131  00076 072252R CREA3 STA BUF+7     SET RECORD SIZE 
0132  00077 162005R       LDA SC,I      SET 
0133  00100 072253R       STA BUF+8      SECURITY CODE


0135  00101 016006X       JSB EXEC      GET 
0136  00102 000110R       DEF TRRQ       ONE
0137  00103 000233R       DEF .4          TRACK 
0138  00104 000230R       DEF .1           FROM 
0139  00105 000241R       DEF TRACK         THE 
0140  00106 000240R       DEF DLU            SYSTEM 
0141  00107 000222R       DEF TMP 
0142  00110 016006X TRRQ  JSB EXEC      WRITE 
0143  00111 000120R       DEF WRRTN      THE
0144  00112 000231R       DEF .2          DIRECTORY 
0145  00113 000240R       DEF DLU          ENTRY
0146  00114 000243R       DEF BUF           ON
0147  00115 000237R       DEF .128           THE
0148  00116 000241R       DEF TRACK           TRACK 
0149  00117 000242R DZERO DEF ZERO             AT SECTOR ZERO 
0150  00120 003400  WRRTN CCA           SET TO DISC ERROR CODE
0151  00121 056237R       CPB .128      DISC ERROR
0152  00122 002001        RSS           NO; SKIP
0153  00123 026206R       JMP EXIT      YES; EXIT 
0154  00124 062241R       LDA TRACK     COMBINE 
0155  00125 100046        LSL 6          TRACK
0156  00126 042240R       ADA DLU         AND LU
0157  00127 072222R       STA TMP          FOR D.RTR
0158  00130 016006X SCHLP JSB EXEC      SCHEDULE
0159  00131 000141R       DEF SCHRT      D.RTR
0160  00132 000234R       DEF .9          TO
0161  00133 000254R       DEF D.RTR        CREAT
0162  00134 001717        DEF XEQT          THE 
0163  00135 000222R       DEF TMP            FILE 
0164  00136 100006R       DEF LU,I            PASSING 
0165  00137 000222R       DEF TMP              THE
0166  00140 000230R       DEF .1                TRACK 
0167  00141 002002  SCHRT SZA           SCHEDULE OK 
0168  00142 026130R       JMP SCHLP      NO; TRY AGAIN


0170  00143 016005X       JSB RMPAR     YES;
0171  00144 000146R       DEF *+2        CALL RMPAR 
0172  00145 000247R       DEF BUF+4       TO GET RETURN CODES 
0173  00146 016006X       JSB EXEC      RELEASE 
0174  00147 000154R       DEF RTRTN      THE
0175  00150 000235R       DEF .5          SYSTEM
0176  00151 000230R       DEF .1           TRACK
0177  00152 000241R       DEF TRACK 
0178  00153 000240R       DEF DLU 







 PAGE 0006 #01


0179  00154 062247R RTRTN LDA BUF+4     GET D.RTR COMPLETION
0180  00155 002020        SSA            CODE - OK
0181  00156 026206R       JMP EXIT      NO; TAKE EXIT 
0182  00157 062250R       LDA BUF+5      YES; SET UP
0183  00160 172000R       STA DCB,I     TO CALL 
0184  00161 066000R       LDB DCB        $OPEN
0185  00162 006104        CLE,INB         TO
0186  00163 062251R       LDA BUF+6        OPEN 
0187  00164 170001        STA B,I           THE 
0188  00165 062000R       LDA DCB            FILE 
0189  00166 166005R       LDB SC,I
0190  00167 103101        CLO 
0191  00170 016002X       JSB $OPEN     SET UP REST OF DCB
0192  00171 000253R       DEF BUF+8     ADDRESS OF NO OF SECTORS/TRACK
0193  00172 026206R       JMP EXIT      DISC ERROR - EXIT 
0194  00173 162004R       LDA TYPE,I    GET TYPE
0195  00174 042226R       ADA N3        IF 3 OR MORE
0196  00175 002020        SSA           SKIP TO WRITE EOF 
0197  00176 026205R       JMP EXIT0     NOT RANDOM ACCESS FILE
0198  00177 003400        CCA           SET WRITTEN ON AND EOF FLAG IN D
0199  00200 066000R       LDB DCB       GET WRITE FLAG
0200  00201 046236R       ADB .13       ADDRESS 
0201  00202 170001        STA B,I       SET WRITTEN ON FLAG 
0202  00203 046232R       ADB .3        STEP TO THE BUFFER  AND SET EOF 
0203  00204 170001        STA B,I       IN FIRST WORD OF BUFFER 
0204  00205 062247R EXIT0 LDA BUF+4     NO; USE D.RTR RETURN FOR ERROR
0205  00206 066117R EXIT  LDB DZERO      CODE 
0206  00207 076005R       STB SC        RESTORE 
0207  00210 076006R       STB LU         CALL WORDS 
0208  00211 076004R       STB TYPE        FOR NEXT CALL 
0209  00212 172001R       STA IERR,I    SET ERROR CODE
0210  00213 126007R       JMP CREAT,I   AND EXIT



0212  00214 062227R ER4   LDA N4        SET ERROR 
0213  00215 026206R       JMP EXIT       CODE 
0214  00216 062224R ER10  LDA N10         AND 
0215  00217 026206R       JMP EXIT         EXIT 



0217  00220 062223R ER16  LDA N16       GET THE ERROR CODE
0218  00221 026206R       JMP EXIT      TAKE EXIT 



0220  00222 000000  TMP   NOP 
0221  00223 177760  N16   DEC -16 
0222  00224 177766  N10   DEC -10 
0223  00225 177765  N11   DEC -11 
0224  00226 177775  N3    OCT -3
0225  00227 177774  N4    OCT -4
0226  00230 000001  .1    OCT 1 
0227  00231 000002  .2    DEC 2 
0228  00232 000003  .3    OCT 3 







 PAGE 0007 #01


0229  00233 000004  .4    DEC 4 
0230  00234 000011  .9    DEC 9 
0231  00235 000005  .5    DEC 5 
0232  00236 000015  .13   DEC 13
0233  00237 000200  .128  DEC 128 
0234  00240 000000  DLU   NOP 
0235  00241 000000  TRACK NOP 
0236  00242 000000  ZERO  NOP 
0237  00243         COUNT EQU * 
0238  00243 000000  BUF   BSS 9 
0239  00254 042056  D.RTR ASC 3,D.RTR 



0241  00000         A     EQU 0 
0242  00001         B     EQU 1 
0243  01717         XEQT  EQU 1717B 

0245  00257         END   EQU * 

0247                      END 
**  NO ERRORS*


































$END ASMB     

*
--> Assemble fmp/29033-80002_Rev-A_3
ON,ASMB,99







 PAGE 0001


0001                ASMB,B,R,L,C
**  NO ERRORS*





























































 PAGE 0002 #01


0001                ASMB,B,R,L,C
0002  00000               NAM OPEN,7
0003                      ENT OPEN
0004                      EXT EXEC,CLOSE,RMPAR,$OPEN
0005                      EXT .ENTR 
0006                      SUP 
0007* 
0008*  OPEN    IS THE FILE OPEN ROUTINE OF THE REAL TIME
0009*          FILE MANAGEMENT PACKAGE
0010* 
0011*       THE FORTRAN CALLING SEQUENCE IS:
0012* 
0013*     CALL OPEN (IDCB,IERR,NAME,IOP,IS,ILU) 
0014* 
0015*  W H E R E: 
0016* 
0017*     IDCB          IS A 144-WORD DATA CONTROL BLOCK (ARRAY)
0018*                   TO BE USED WITH ALL ACCESS TO THE FILE
0019*                   UNDER THIS OPEN.
0020* 
0021*     IERR          IS THE RETURN ERROR CODE (ALSO RETURNED IN A) 
0022* 
0023*     NAME          IS THE 6-CHARACTER (3 WORD) NAME ARRAY. 
0024* 
0025*     IOP           (OPTIONAL); IS THE OPEN OPTION FLAG WORD
0026*                    OPTIONS ARE: 
0027*                     BIT   MEANING IF SET
0028*                     0     NON-EXCLUSIVE OPEN
0029*                     1     UPDATE OPEN 
0030*                     2     FORCE TO TYPE 1 OPEN
0031* 
0032*     IS            (OPTIONAL); IS THE EXPECTED SECURITY CODE.
0033* 
0034*     ILU           (OPTIONAL); IS THE DISC SPECIFIED.
0035*                     IF ILU >0 THEN USE DISC LABELED ILU 
0036*                     IF ILU <0 THEN USE DISC AT LOGICAL UNIT (-ILU)
0037* 
0038*       OPEN ERRORS ARE AS FOLLOWS: 
0039* 
0040*     -1    DISC ERROR
0041*     -6    FILE NOT FOUND
0042*     -7    WRONG SECURITY CODE 
0043*     -8    FILE IS CURRENTLY OPEN (IF EXCLUSIVE REQUEST) OR
0044*                IS CURRENTLY OPEN TO 7 OTHER PROGRAMS
0045*     -9    ATTEMPT TO OPEN TYPE 0 AS TYPE 1
0046*     -10   NOT ENOUGH PARAMETERS 
0047*     -13   DISC LOCKED 
0048* 
0049* 














 PAGE 0003 #01


0051  00000 000000  DCB   NOP 
0052  00001 000000  ERR   NOP 
0053  00002 000153R NAME  DEF ZERO
0054  00003 000153R OP    DEF ZERO
0055  00004 000153R SC    DEF ZERO
0056  00005 000153R LU    DEF ZERO

0058  00006 000000  OPEN  NOP           ENTRY POINT 
0059  00007 016005X       JSB .ENTR     TRANSFER PARAMETERS 
0060  00010 000000R       DEF DCB       TO LOCAL AREA 
0061  00011 062143R       LDA N10 
0062  00012 066002R       LDB NAME      DID WE GET
0063  00013 056142R       CPB DZERO      ENOUGH PARAMETERS? 
0064  00014 026133R       JMP EXIT        NO; ERROR - EXIT

0066  00015 016002X       JSB CLOSE     CLOSE 
0067  00016 000020R       DEF *+2        IF 
0068  00017 100000R       DEF DCB,I      OPEN 
0069  00020 002002        SZA           SKIP IF NO ERRORS 
0070  00021 052144R       CPA N11        OR IF NOT OPEN 
0071  00022 002101        CLE,RSS 
0072  00023 026133R       JMP EXIT      ELSE TAKE ERR EXIT
0073  00024 162002R       LDA NAME,I    GET NAME WORD1
0074  00025 166003R       LDB OP,I       AND OPTION 
0075  00026 005500        ERB             EXCLUSIVE BIT TO E
0076  00027 002200        CME              INVERT AND 
0077  00030 001225        RAL,ERA           SET IN SIGN OF A
0078  00031 072146R       STA NAME1     SET FOR CALL TO D.RTR 
0079  00032 036002R       ISZ NAME      GET 
0080  00033 104200        DLD NAME,I     REST OF
0081  00035 104400        DST NAME1+1     NAME AND SET FOR D.RTR CALL 
0082  00037 061717        LDA XEQT      GET ID
0083  00040 002300        CCE            AND
0084  00041 001225        RAL,ERA         SET 
0085  00042 072145R       STA ID           SIGN FOR D.RTR CALL
0086  00043 016001X SCDRT JSB EXEC      SCHEDULE
0087  00044 000054R       DEF SCRTN      D.RTR
0088  00045 000162R       DEF .9          WITH WAIT 
0089  00046 000154R       DEF D.RTR        TO OPEN
0090                X     REP 4             THE FILE
0091  00047 000145R       DEF ID+*-X
0091  00050 000146R       DEF ID+*-X
0091  00051 000147R       DEF ID+*-X
0091  00052 000150R       DEF ID+*-X
0092  00053 100005R       DEF LU,I
0093  00054 002002  SCRTN SZA           SCHEDULE OK?
0094  00055 026043R       JMP SCDRT     NO; TRY AGAIN 
0095  00056 016003X       JSB RMPAR     YES; GET THE RETURN 
0096  00057 000061R       DEF *+2        CODES
0097  00060 000145R       DEF ID          TO LOCAL AREA 
0098  00061 062145R       LDA ID        GET ERROR WORD
0099  00062 002020        SSA            IF ERROR 
0100  00063 026133R       JMP EXIT        EXIT
0101  00064 104200        DLD ID+1      ELSE SET
0102  00066 104400        DST DCB,I      THE DCB FOR $OPEN
0103  00070 103101        CLO           SET O 







 PAGE 0004 #01


0104  00071 162003R       LDA OP,I       TO 
0105  00072 001333        RAR,SLA,RAR     INDICATE
0106  00073 102101        STO              UPDATE OPTION
0107  00074 001500        ERA               AND E FOR TYPE 1 OVER-RIDE
0108  00075 072005R       STA LU        SAVE FLAG 
0109  00076 062000R       LDA DCB       GET DCB ADDRESS 
0110  00077 166004R       LDB SC,I       AND SECURITY CODE
0111  00100 016004X       JSB $OPEN       AND GO SET UP THE DCB 
0112  00101 000151R       DEF ID+4      ADDRESS OF NO OF SECTORS PER TRA
0113  00102 026107R       JMP OPEN1     ERROR - CLOSE AND EXIT
0114  00103 002020        SSA           IF OPEN PROTECT 
0115  00104 006020        SSB            AND CODE MISMATCH THEN SKIP
0116  00105 026113R       JMP OPEN2       ELSE GO EXIT - GOOD OPEN


0118  00106 062152R       LDA N7        SET EXIT CODE 
0119  00107 072145R OPEN1 STA ID        IN ID 
0120  00110 016002X       JSB CLOSE     ILLEGAL OPEN SO CLOSE 
0121  00111 000113R       DEF *+2        THE
0122  00112 100000R       DEF DCB,I       FILE
0123  00113 062145R OPEN2 LDA ID        SEND ERROR CODE 
0124  00114 066005R       LDB LU        GET SUB FUNCTION FLAG 
0125  00115 004010        SLB           IF NOT SET
0126  00116 002002        SZA           OR NOT TYPE ZERO
0127  00117 026133R       JMP EXIT      THEN EXIT 

0129  00120 066000R       LDB DCB       CACULATE DCB SUB FUNCTION 
0130  00121 046157R       ADB .3        ADDRESS 
0131  00122 076000R       STB DCB       SAVE IT 
0132  00123 162003R       LDA OP,I      GET THE OPTIN SUB FUNCTION
0133  00124 012160R       AND B3700     MASK IT OFF 
0134  00125 070001        STA B         AND SAVE IT 
0135  00126 162000R       LDA DCB,I     GET THE CURRENT WORD
0136  00127 012161R       AND B77       SAVE THE LU 
0137  00130 040001        ADA B         ADD IN THE NEW SUB FUNCTION 
0138  00131 172000R       STA DCB,I     SET IT IN THE DCB 
0139  00132 002400        CLA           CLEAR A AND EXIT

0141  00133 066142R EXIT  LDB DZERO     RESET THE 
0142                Y     REP 4          DEFAULT
0143  00134 076002R       STB NAME+*-Y    PARAMETERS
0143  00135 076003R       STB NAME+*-Y    PARAMETERS
0143  00136 076004R       STB NAME+*-Y    PARAMETERS
0143  00137 076005R       STB NAME+*-Y    PARAMETERS
0144  00140 172001R       STA ERR,I     SET THE ERROR CODE
0145  00141 126006R       JMP OPEN,I     AND RETURN 





0148  00142 000153R DZERO DEF ZERO
0149  00143 177766  N10   DEC -10 
0150  00144 177765  N11   DEC -11 
0151  00145 000000  ID    NOP 
0152  00146 000000  NAME1 BSS 4 







 PAGE 0005 #01


0153  00152 177771  N7    DEC -7
0154  00153 000000  ZERO  NOP 
0155  00154 042056  D.RTR ASC 3,D.RTR 
0156  00157 000003  .3    DEC 3 
0157  00160 003700  B3700 OCT 3700
0158  00161 000077  B77   OCT 77
0159  00162 000011  .9    DEC 9 



0161  00000         A     EQU 0 
0162  00001         B     EQU 1 
0163  01717         XEQT  EQU 1717B 



0165  00163         END   EQU * 
0166                      END 
**  NO ERRORS*





































$END ASMB     

*
--> Assemble fmp/29033-80002_Rev-A_4
ON,ASMB,99







 PAGE 0001


0001                ASMB,B,R,L,C
**  NO ERRORS*





























































 PAGE 0002 #01


0001                ASMB,B,R,L,C
0002  00000               NAM PURGE,7 
0003                      ENT PURGE 
0004                      EXT OPEN,EXEC 
0005                      EXT .ENTR,CLOSE 
0006* 
0007* 
0008                      SUP 
0009* 
0010*  PURGE  IS THE FILE DELETION ROUTINE FOR THE RTE
0011*         FILE MANAGEMENT PACKAGE 
0012* 
0013*       THE FORTRAN CALLING SEQUENCE IS:
0014* 
0015*     CALL PURGE(IDCB,IERR,NAME,IS,ILU) 
0016* 
0017*  W H E R E: 
0018* 
0019*     IDCB          IS A 144-WORD DATA CONTROL BLOCK
0020*                   WHICH IS USED BY PURGE AS A 
0021*                   WORKING BUFFER.  IDCB IS FREE 
0022*                   FOR OTHER USE AFTER A PURGE.
0023* 
0024*     IERR          IS THE ERROR RETURN LOCATION. 
0025* 
0026*     NAME          IS THE NAME OF THE FILE TO BE PURGED. 
0027* 
0028*     IS            IS THE FILE'S SECURITY CODE.
0029* 
0030*     ILU           IS THE DISC THAT THE FILE IS ON.
0031*                     IF ILU >0 THEN ON DISC LABELED ILU
0032*                     IF ILU <0 THEN ON DISC AT LOGICAL UNIT (-ILU) 
0033* 
0034*       ERRORS RETURNED BY PURGE ARE: 
0035* 
0036*     CODE    REASON
0037*     0       NO ERRORS 
0038*     -1      DISC READ/WRITE ERROR 
0039*     -6      FILE (OR DISC) NOT FOUND
0040*     -7      ILLEGAL SECURITY CODE 
0041*     -8      FILE IS OPEN TO SOME OTHER PROGRAM
0042*     -10     NOT ENOUGH PARAMETERS 
0043*     -13     DISC LOCKED 
0044*     -16     ATTEMPT TO PURGE A TYPE 0 FILE
0045* 
0046* 

















 PAGE 0003 #01


0048  00000 000000  DCB   NOP 
0049  00001 000000  IERR  NOP 
0050  00002 000073R NAME  DEF ZERO
0051  00003 000073R SC    DEF ZERO
0052  00004 000073R LU    DEF ZERO

0054  00005 000000  PURGE NOP           ENTRY POINT 
0055  00006 016003X       JSB .ENTR     DO ENTRY ROUTINE
0056  00007 000000R       DEF DCB 
0057  00010 062067R       LDA N10       NOT ENOUGH PRAM 
0058  00011 066002R       LDB NAME      ERROR 
0059  00012 056023R       CPB DZERO     ? 
0060  00013 026053R       JMP EXIT      YES-EXIT
0061  00014 002400        CLA           CLEAR THE TRUNCATE WORD 
0062  00015 072072R       STA LNG       AND 

0064  00016 016001X       JSB OPEN      NO; GO
0065  00017 000026R       DEF OPRTN      OPEN 
0066  00020 100000R       DEF DCB,I       EXCLUSIVELY 
0067  00021 100001R       DEF IERR,I       TO 
0068  00022 100002R       DEF NAME,I        CALLER
0069  00023 000073R DZERO DEF ZERO
0070  00024 100003R       DEF SC,I      PASS THE SECURITY CODE
0071  00025 100004R       DEF LU,I       AND THE DISC ID
0072  00026 002020  OPRTN SSA           OPEN ERROR? 
0073  00027 026053R       JMP EXIT       YES; EXIT
0074  00030 002003        SZA,RSS         NO; TYPE ZERO 
0075  00031 026063R       JMP EX16         YES - ILLEGAL PURGE

0077  00032 062000R       LDA DCB       GET ADDRESS 
0078  00033 042070R       ADA .7         OF 
0079  00034 164000        LDB A,I         SECURITY
0080  00035 006021        SSB,RSS           IF MISMATCH 
0081  00036 026061R       JMP EX7            GO SET ERROR EXIT

0083  00037 042066R       ADA N2        ADDRESS OF FILE LENGTH
0084  00040 160000        LDA A,I       GET FILE LENGTH 
0085  00041 001100        ARS           SET TO BLOCK LENGTH 
0086  00042 072072R       STA LNG       SET FOR TRUNCATE CODE 

0088  00043 016004X CLOS  JSB CLOSE     CLOSE THE FILE AND TRUNCATE TO Z
0089  00044 000050R       DEF *+4        (I.E. PURGE IT)
0090  00045 100000R       DEF DCB,I       FILE
0091  00046 000004R       DEF LU           DUMMY ERROR RETURN 
0092  00047 000072R       DEF LNG           TRUNCATE WORD ADDRESS 
0093  00050 166001R       LDB IERR,I    GET CURRENT ERROR CODE
0094  00051 006020        SSB           IF NONE SKIP
0095  00052 060001        LDA B         ELSE USE IT 
0096  00053 172001R EXIT  STA IERR,I    SET THE ERROR CODE
0097  00054 066023R       LDB DZERO        RESET
0098                X     REP 3             THE 
0099  00055 076002R       STB NAME+*-X       ENTRY
0099  00056 076003R       STB NAME+*-X       ENTRY
0099  00057 076004R       STB NAME+*-X       ENTRY
0100  00060 126005R       JMP PURGE,I         AND EXIT








 PAGE 0004 #01


0102  00061 062070R EX7   LDA .7        SET ERROR 
0103  00062 003005        CMA,INA,RSS    CODE AND SKIP
0104  00063 062071R EX16  LDA N16 
0105  00064 172001R       STA IERR,I    SET CODE IN USER AREA 
0106  00065 026043R       JMP CLOS      GO CLOSE THE FILE 



0108  00066 177776  N2    DEC -2
0109  00067 177766  N10   DEC -10 
0110  00070 000007  .7    DEC 7 
0111  00071 177760  N16   DEC -16 
0112  00072 000000  LNG   NOP 
0113  00073 000000  ZERO  NOP 
0114  00074 042056  D.RTR ASC 3,D.RTR 


0116  01717         XEQT  EQU 1717B 
0117  00000         A     EQU 0 
0118  00001         B     EQU 1 


0120  00077         END   EQU * 
0121                      END 
**  NO ERRORS*































$END ASMB     

*
--> Assemble fmp/29033-80003_Rev-A_1
ON,ASMB,99







 PAGE 0001


0001                ASMB,B,R,L,C
**  NO ERRORS*





























































 PAGE 0002 #01


0001                ASMB,B,R,L,C
0002  00000               NAM NAMF,7
0003                      EXT EXEC,.ENTR,CLOSE,NAM..,OPEN 
0004                      ENT NAMF
0005* 
0006*     NAMF IS THE FILE NAME CHANGE MODULE OF THE
0007*     RTE FILE MANAGEMENT PACKADGE. 
0008* 
0009*     CALLING SEQUENCE: 
0010* 
0011*     CALL NAMF(IDCB,IERR,NAME,NNAME,IS,ILU)
0012* 
0013*     WHERE:
0014*         IDCB  IS A 144 WORD DATA CONTROL BLOCK
0015*               THIS AREA IS FREE AFTER THE CALL. 
0016* 
0017*         IERR  IS THE  ERROR RETURN LOCATION 
0018*               ERRORS  ARE RETURNED HERE AND IN
0019*               THE A REGISTER. 
0020*               DEFINED ERRORS ARE: 
0021* 
0022* 
0023*               0   NO ERROR
0024*              -1   DISC DOWN 
0025*              -2   DUPLICATE NAME
0026*              -6   CARTRIDGE OR FILE NOT FOUND 
0027*              -7   INVALID SECURITY CODE 
0028*              -8   FILE CURRENTLY OPEN 
0029*              -10  NOT ENOUGH PARAMETERS 
0030*              -13  THE REQUIRED DISC IS LOCKED 
0031*              -15  ILLEGAL NEW NAME
0032* 
0033*         NNAME THE NEW 6 CHARACTER FILE NAME 
0034* 
0035*         IS    OPTIONAL - THE FILE SECURITY CODE 
0036* 
0037*         ILU   OPTIONAL - THE FILES DISC ID. 
0038* 
0039*     PRECEEDING CONSTANTS
0040* 
0041  00000 177771  N7    DEC -7
0042  00001 000007  .7    DEC 7 
0043  00002 177766  N10   DEC -10 



0045  00003 000137R DCB   DEF ZERO      DEFINE
0046  00004 000137R IERR  DEF ZERO       PARAMATER
0047  00005 000137R NAME  DEF ZERO        ADDRESSES 
0048  00006 000137R NNAME DEF ZERO
0049  00007 000137R IS    DEF ZERO
0050  00010 000137R ILU   DEF ZERO

0052  00011 000000  NAMF  NOP           ENTRY POINT 
0053  00012 016002X       JSB .ENTR     FETCH PARAM ADDRESSES 
0054  00013 000003R       DEF DCB        TO LOCAL LIST







 PAGE 0003 #01


0056  00014 062002R       LDA N10       LOAD FOR NOT ENOUGH PRAM REJECT 
0057  00015 066006R       LDB NNAME     NEW NAME SUPPLIED?
0058  00016 056140R       CPB DZERO 
0059  00017 026126R       JMP EXIT      NO; GO EXIT 

0061  00020 016004X       JSB NAM..     YES;NEW NAME
0062  00021 000023R       DEF NAM.R     LEGAL 
0063  00022 100006R       DEF NNAME,I    FOR A FILE NAME? 
0064  00023 002002  NAM.R SZA 
0065  00024 026126R       JMP EXIT      NO; EXIT
0066  00025 016005X       JSB OPEN      CALL
0067  00026 000035R       DEF OPRTN      TO 
0068  00027 100003R       DEF DCB,I       OPEN
0069  00030 100004R       DEF IERR,I       THE
0070  00031 100005R       DEF NAME,I        FILE
0071  00032 000137R       DEF ZERO           EXCLUSIVELY
0072  00033 100007R       DEF IS,I            WITH
0073  00034 100010R       DEF ILU,I            USER PRAMS 
0074  00035 002020  OPRTN SSA           SUCESSFUL  OPEN?
0075  00036 026126R       JMP EXIT      NO; EXIT
0076  00037 062003R       LDA DCB       YES; CHECK
0077  00040 042001R       ADA .7              THE 
0078  00041 164000        LDB A,I              SECURITY 
0079  00042 062000R       LDA N7                CODE
0080  00043 006021        SSB,RSS                MATCH? 
0081  00044 026117R       JMP CLOEX               NO; CLOSE AND EXIT
0082  00045 016001X       JSB EXEC      GET 
0083  00046 000054R       DEF EXR1       A
0084  00047 000143R       DEF .4          SYSTEM
0085  00050 000141R       DEF .1           TRACK
0086  00051 000136R       DEF TRACK 
0087  00052 000135R       DEF LU
0088  00053 000134R       DEF DCB2
0089  00054 016001X EXR1  JSB EXEC      WRITE 
0090  00055 000064R       DEF EXR2       THE
0091  00056 000142R       DEF .2          NEW 
0092  00057 000135R       DEF LU           NAME 
0093  00060 100006R       DEF NNAME,I       ON
0094  00061 000146R       DEF .128           THE
0095  00062 000136R       DEF TRACK           TRACK 
0096  00063 000137R       DEF ZERO             SECTOR ZERO
0097  00064 104200  EXR2  DLD DCB,I     GET DCB2 TO B 
      00065 100003R 
0098  00066 076134R       STB DCB2       AND SAVE IT
0099  00067 062136R       LDA TRACK     FORM TRACK/LU 
0100  00070 100046        LSL 6          WORD 
0101  00071 042135R       ADA LU          FOR 
0102  00072 072005R       STA NAME         D.RTR CALL 
0103  00073 016001X SCH   JSB EXEC      CALL
0104  00074 000104R       DEF EXR3       D.RTR
0105  00075 000145R       DEF .9          TO
0106  00076 000147R       DEF D.RTR        CHANGE 
0107  00077 001717        DEF XEQT          THE 
0108  00100 000005R       DEF NAME           FILE 
0109  00101 100003R       DEF DCB,I           NAME
0110  00102 000134R       DEF DCB2







 PAGE 0004 #01


0111  00103 000142R       DEF .2
0112  00104 002002  EXR3  SZA           SCHEDULE
0113  00105 026073R       JMP SCH        CONFLICT- THEN TRY AGAIN 
0114  00106 160001        LDA B,I       ERROR FLAG TO A 
0115  00107 072005R       STA NAME      SAVE IT 
0116  00110 016001X       JSB EXEC      RETURN
0117  00111 000116R       DEF EXR4       THE
0118  00112 000144R       DEF .5          SYSTEM
0119  00113 000141R       DEF .1           TRACK
0120  00114 000136R       DEF TRACK 
0121  00115 000135R       DEF LU

0123  00116 002001  EXR4  RSS           SKIP ERROR ENTRY
0124  00117 072005R CLOEX STA NAME       SAVE ERROR CODE
0125  00120 016003X       JSB CLOSE     CLOSE 
0126  00121 000123R       DEF CLOR1      THE
0127  00122 100003R       DEF DCB,I       FILE
0128  00123 066005R CLOR1 LDB NAME      GET ERROR CODE
0129  00124 006002        SZB            IF NONE SKIP 
0130  00125 060001        LDA B         ELSE USE IT 
0131  00126 172004R EXIT  STA IERR,I    SET RETURN ERROR
0132  00127 066140R       LDB DZERO     RESET 
0133                X     REP 3          THE
0134  00130 076006R       STB *-X+NNAME   ADDRESSES 
0134  00131 076007R       STB *-X+NNAME   ADDRESSES 
0134  00132 076010R       STB *-X+NNAME   ADDRESSES 
0135  00133 126011R       JMP NAMF,I    EXIT TO USER



0137*     FOLLOWING CONSTANTS 

0139  00134 000000  DCB2  NOP 
0140  00135 000000  LU    NOP 
0141  00136 000000  TRACK NOP 
0142  00137 000000  ZERO  NOP 
0143  00140 000137R DZERO DEF ZERO


0145*     TEMPS REFERENCED ONLY BY DEFS 

0147  00141 000001  .1    DEC 1 
0148  00142 000002  .2    DEC 2 
0149  00143 000004  .4    DEC 4 
0150  00144 000005  .5    DEC 5 
0151  00145 000011  .9    DEC 9 
0152  00146 000200  .128  DEC 128 
0153  00147 042056  D.RTR ASC 3,D.RTR 
      00150 051124  
      00151 051040  


0155*     ASSEMBLY AIDS 

0157  00000         A     EQU 0 
0158  00001         B     EQU 1 







 PAGE 0005 #01


0159  01717         XEQT  EQU 1717B 

0161  00152         END   EQU *         PROG. LENGTH

0163                      END 
**  NO ERRORS*


















































$END ASMB     

*
--> Assemble fmp/29033-80003_Rev-A_2
ON,ASMB,99







 PAGE 0001


0001                ASMB,B,R,L,C
**  NO ERRORS*





























































 PAGE 0002 #01


0001                ASMB,B,R,L,C
0002  00000               NAM READF,7 
0003                      ENT READF,WRITF 
0004                      EXT EXEC,R/W$,.ENTR,P.PAS 
0005                      EXT RW$UB,$KIP
0006                      EXT RFLG$ 
0007                      SUP 
0008* 
0009* 
0010*     THIS IS THE RTE FILE MANAGEMENT PACKAGE 
0011*     READ/WRITE SUBROUTINE.
0012* 
0013*     THIS ROUTINE WILL READ OR WRITE ANY TYE FILE. 
0014* 
0015* 
0016*     CALLING SEQUENCE: 
0017* 
0018*     CALL READF(IDCB,IERR,IBUF,IL,L,N) 
0019* 
0020*     O R 
0021* 
0022*     IER = READF(IDCB,IERR,IBUF,IL,L,N)
0023* 
0024*     TO READ,  O R 
0025* 
0026*     CALL WRITF(IDCB,IERR,IBUF,IL,N) 
0027* 
0028*     O R 
0029* 
0030*     IER = WRITF(IDCB,IERR,IBUF,IL,N)
0031* 
0032*     TO WRITE. 
0033* 
0034* 
0035*     W H E R E:
0036* 
0037*     IDCB     IS THE 144 WORD DATA CONTROL BLOCK 
0038*              FOR THE REFERENCED FILE. 
0039* 
0040*     IERR     IS THE ERROR RETURN LOCATION 
0041*              ERRORS ARE AS FOLLOWS: 
0042* 
0043*                   CODE     ERROR CONDITION
0044*                   0 OR >0  NO ERROR 
0045*                   -1       A REQUIRED DISC OR DEVICE IS DOWN
0046*                   -5       ILLEGAL RECORD NUMBER OR 
0047*                             ATTEMPT TO READ A RECORD NOT WRITTEN
0048*                   -7       INVALID SECURITY CODE FOR
0049*                 `           WRITE (FILE IS READ ONLY) 
0050*                   -10      A REQUIRED PARAMETER IS MISSING
0051*                   -11      THE DCB IS NOT OPEN
0052*                   -12      SOF OR EOF SENSED ON READ
0053*                   -17      ILLEGAL REQUEST TO A TYPE ZERO FILE
0054* 
0055*     IER      SEE IERR - RETURNED AS FUNCTION
0056* 







 PAGE 0003 #01


0057*     IBUF     IS THE BUFFER TO BE USED TO READ OR WRITE. 
0058* 
0059*     IL       IS THE REQUESTED TRANSFER LENGTH IN WORDS. 
0060* 
0061*     L        IS THE LENGTH AS READ IN WORDS.
0062* 
0063*     N        IS THE REQUESTED RECORD NUMBER 
0064*              IF N>0 OV IF N<0 THE RELATIVE RECORD 
0065*              NUMBER FROM THE CURRENT POSITION.
0066*              N IS LEGAL ON TYPE 1 AND 2 FILES ONLY. 
0067* 
0068* 
0069*     O P T I O N S:
0070* 
0071*     IL       IS OPTIONAL ON TYPE 1 AND 2 FILES. 
0072*              ON TYPE 1 FILES, 128 IS USED;
0073*              ON TYPE 2 FILES THE RECORD LENGTH IS USED. 
0074* 
0075*     L        IS OPTIONAL AT ALL TIMES.
0076* 
0077*     N        IS OPTIONAL AND IS IGNORED ON FILES
0078*              OF TYPES OTHER THAN 1 AND 2.  IF NOT 
0079*              SUPPLIED, ZERO IS USED.
0080*              THE FIRST RECORD IN A FILE IS RECORD #1. 
0081* 
0082* 
0083*     E X T E R N A L S:
0084* 
0085*     RW$UB         IS USED TO READ OR WRITE WORDS
0086*                   FROM OR TO FILES OF TYPE 2 OR 
0087*                   ABOVE.  IT HANDLES ALL SECTOR,
0088*                   TRACK, AND EXTENT SWITCHING FOR 
0089*                   THESE FILES AND ALSO WRITES AND/OR
0090*                   READS BLOCKS FROM THE FILE AS 
0091*                   REQUIRED.  READS ARE CONDITIONAL
0092*                   ON RFLG$.  A GLOBAL FLAG WHICH
0093*                   MUST BE NON-ZERO BEFORE A READ
0094*                   IS EXECUTED.
0095* 
0096*     RW$UB CALLING SEQUENCE IS:
0097* 
0098*     LDB #WORDS
0099*     LDA DCB ADDRESS 
0100*     CLE/CCE       WRITE/READ
0101*     JSB RW$UB CALL
0102*     DEF UBUF      ADDRESS OF USER'S BUFFER
0103*     JMP ERROR     ERROR RETURN (A = CONDITION)
0104*     --            NORMAL RETURN 
0105* 
0106*     SPC 2 
0107* 
0108* 
0109*     PO$N          IS USED TO CALCULATE THE POSITION 
0110*                   OF TYPE 1 AND 2 FILES.
0111* 
0112*     PO$N CALLING SEQUENCE IS: 







 PAGE 0004 #01


0113* 
0114*     LDA DCB ADDRESS 
0115*     LDB RECORD NUMBER 
0116*     JSB PO$N      CALL
0117*     NOP           BUFFER OFFSET RETURNED HERE 
0118*     JMP ERR       EOF RETURN
0119*     --            NORMAL RETURN 
0120*                   A = TRACK  B = SECT 
0121* 
0122* 
0123* 
0124  00000 177777  WRITF DEC -1        WRITE ENTRY POINT 
0125  00001 062000R       LDA WRITF     TRANSFER RETURN ADDRESS 
0126  00002 072012R       STA READF     TO READ ENTRY 
0127  00003 026013R       JMP READF+1   AND GO TO READ ENTRY



0129  00004 000000  DCB   NOP           DCB POINTER 
0130  00005 000000  IERR  NOP           ERROR BOX 
0131  00006 177761  BUF   OCT -17       USER BUFFER ADDRESS 
0132  00007 000546R IL    DEF DM        REQUEST LENGTH
0133  00010 000544R L     DEF ZER0      RETURN LENGTH 
0134  00011 000544R N     DEF ZER0      RECORD NUMBER 
0135  00012 000000  READF NOP           READ ENTRY POINT
0136  00013 016003X       JSB .ENTR     TRANSFER THE
0137  00014 000004R       DEF DCB        PARAMETERS 
0138  00015 062004R       LDA DCB       SET UP THE
0139  00016 006500        CLB,CLE        DCB
0140  00017 016004X       JSB P.PAS       ADDRESSES 
0141  00020 177757  N17   DEC -17 
0142  00021 000000  TMP   NOP           USE FIRST TWO AS
0143  00022 000000  TMP1  NOP            TEMP STORAGE 
0144  00023 000000  TYPE  NOP           ADDRESS OF TYPE 
0145  00024 000000  LU0   NOP            LU (FOR 0 FILE)
0146  00024         TRACK EQU LU0       ALSO TRACK
0147  00025 000000  EOF0  NOP             EOF CODE (0 FILE) 
0148  00025         BSECT EQU EOF0         ALSO SECTOR
0149  00026 000000  SPAC  NOP              SPACING CODE (0 FILE)
0150  00026         SIZE  EQU SPAC          ALSO FILE SIZE
0151  00027 000000  RL    NOP               RECORD LENGTH 
0152  00030 000000  SCMO  NOP           SECURITY/OPEN MODE
0153  00031 000000  #SC/T NOP            SECTORS/TRACK
0154  00032 000000  OCFLG NOP             OPEN FLAG 
0155  00033 000000  TR    NOP              CURRENT TRACK
0156  00034 000000  SECT  NOP               CURRENT SECTOR
0157  00035 000000  BUFPT NOP                CURRENT POSITION 
0158  00036 000000  RWFLG NOP                 READ/WRITE FLAG 
0159  00037 000000  RC    NOP                  RECORD COUNT 
0160  00040 000000  TMP2  NOP 
0161  00041 000000  BUFD  NOP 


0163  00042 062550R       LDA N10       PRESET FOR MISSING PRAM ERROR 
0164  00043 066006R       LDB BUF       BUFFER MUST BE
0165  00044 006020        SSB            SUPPLIED 







 PAGE 0005 #01


0166  00045 026061R       JMP EXIT      ELSE MISSING PRAM 
0167  00046 166032R       LDB OCFLG,I   IF NOT OPEN 
0168  00047 062547R       LDA N11 
0169  00050 055717        CPB XEQT      THEN
0170  00051 002001        RSS 
0171  00052 026061R       JMP EXIT      EXIT FILE NOT OPEN
0172  00053 066000R       LDB WRITF     GET READ WRITE FLAG 
0173  00054 162030R       LDA SCMO,I    AND SECURITY CODE 
0174  00055 006021        SSB,RSS       IF WRITE
0175  00056 002020        SSA            AND
0176  00057 026077R       JMP SCOK        BAD SECURITY
0177  00060 062551R       LDA N7           THEN 
0178  00061 066020R EXIT  LDB N17           EXIT
0179  00062 076006R       STB BUF       RESTORE 
0180  00063 066545R       LDB DMBUF      OPTIONAL 
0181  00064 076007R       STB IL          PARAMETER 
0182  00065 066543R       LDB DZER0     ADDRESS 
0183  00066 076010R       STB L             FOR 
0184  00067 076011R       STB N              NEXT 
0185  00070 006400        CLB                 CALL
0186  00071 076544R       STB ZER0
0187  00072 076546R       STB DM
0188  00073 007400        CCB 
0189  00074 076000R       STB WRITF     RESET READ WRITE FLAG AND 
0190  00075 172005R       STA IERR,I    SET THE ERROR CODE
0191  00076 126012R       JMP READF,I    RETURN 


0193  00077 100101  SCOK  RRL 1         SHIFT SIGN TO LOW A 
0194  00100 072007X       STA RFLG$     USE A READ FLAG 
0195  00101 166010R       LDB L,I       GET N FOR WRITE 
0196  00102 000010        SLA           IF READ 
0197  00103 166011R       LDB N,I       GET READ N
0198  00104 162023R       LDA TYPE,I    GET TYPE
0199  00105 052537R       CPA .2          TWO 
0200  00106 026115R       JMP LTEST     GO TEST FOR EOF 
0201  00107 052536R       CPA .1        IF TYPE ONE 
0202  00110 002401        CLA,RSS       SKIP
0203  00111 026175R       JMP EOFTS     ELSE GO TO EOF TEST 
0204*                             RANDOM ACCESS FILE

0206  00112 172036R       STA RWFLG,I   INHIBIT R/W$ WRITE FOR TYPE ONE 
0207  00113 062541R       LDA .128      FOURCE LENGTH TO 128 FOR TYPE 1 
0208  00114 172027R       STA RL,I      FOR THE POSITION ROUTINE

0210  00115 162007R LTEST LDA IL,I      GET THE REQUEST LENGTH
0211  00116 002020        SSA           IF EOF REQUEST THEN 
0212  00117 026345R       JMP EXIOK     GO EXIT  NO ACTION
0213  00120 006002        SZB           POSITION OPTION?
0214  00121 006020        SSB           YES  IF <0
0215  00122 146037R       ADB RC,I      ADD CURRENT POSITION
0216  00123 076040R       STB TMP2      SAVE RESULT 
0217  00124 003400        CCA 
0218  00125 040001        ADA B         MULTIPLY RECORD LENGTH
0219  00126 002020        SSA           IF NEG RECORD NO
0220  00127 026237R       JMP EOFEX     TAKE ERROR EXIT 







 PAGE 0006 #01


0221  00130 100200        MPY RL,I      BY THE DESIRED RECORD 
0222  00132 072021R       STA TMP       SAVE LOW PART 
0223  00133 012554R       AND B177      MASK TO 128 OFFSET
0224  00134 072032R       STA OCFLG     SET THE OFFSET
0225  00135 022021R       XOR TMP       RESTORE THE HIGH PART 
0226  00136 101026        ASR 6         EVEN SECT ADDRESS TO A
0227  00137 072021R       STA TMP       SAVE
0228  00140 003000        CMA           CHECK FOR 
0229  00141 142026R       ADA SIZE,I     EOF
0230  00142 002020        SSA             IF NOT EOF SKIP 
0231  00143 026237R       JMP EOFEX     TAKE ERROR EXIT 
0232  00144 062021R       LDA TMP       RESTORE A 
0233  00145 142025R       ADA BSECT,I    ADD THE BASE SECTOR
0234  00146 100400        DIV #SC/T,I    DIVIDE BY NO. SECT/TRACK 
0235  00150 142024R       ADA TRACK,I   ADD BASE TRACK-A = TRACK
0236  00151 104400        DST TMP       SAVE NEW TR/SECTOR ADDRESS
0237  00153 152033R       CPA TR,I      IF SAME 
0238  00154 003400        CCA            AS 
0239  00155 156034R       CPB SECT,I      CURRENT 
0240  00156 064000        LDB 0         POSITION
0241  00157 006120        CLE,SSB       THEN
0242  00160 026170R       JMP RACS           SKIP 
0243  00161 066004R       LDB DCB       ELSE
0244  00162 016002X       JSB R/W$       WRITE THE CURRENT BLOCK
0245  00163 026061R       JMP EXIT        IF NECESSARY
0246  00164 104200        DLD TMP       THEN SET
0247  00166 104400        DST TR,I       THE NEW


0249  00170 062032R RACS  LDA OCFLG     SET THE OFFSET
0250  00171 042041R       ADA BUFD      ADD BUFFER ADDRESS
0251  00172 172035R       STA BUFPT,I    AND SET THE POINTER
0252  00173 062040R       LDA TMP2      SET THE 
0253  00174 172037R       STA RC,I      NEW RECORD NUMBER 


0255  00175 062035R EOFTS LDA BUFPT     SET THE INDIRECT
0256  00176 042542R       ADA MSIGN     BIT ON
0257  00177 072035R       STA BUFPT     THE BUFFER POINTER
0258  00200 162023R       LDA TYPE,I    GET FILE TYPE 
0259  00201 003007        CMA,INA,SZA,RSS   IF 0
0260  00202 026513R       JMP TYP00          OR 1 
0261  00203 002007        INA,SZA,RSS   GO DO 0/1 THING 
0262  00204 026356R       JMP .1TYP 
0263  00205 002007        INA,SZA,RSS   IF TYPE 2 
0264  00206 026352R       JMP TWOTY     GO DO READ TEST 
0265  00207 162036R INTS  LDA RWFLG,I   GET THE IN CORE FLAG
0266  00210 002302        CCE,SZA       IF IN CORE
0267  00211 026215R       JMP TWOSP      GO TEST FOR TWO
0268  00212 066004R       LDB DCB       ELSE READ 
0269  00213 016002X       JSB R/W$       THE BLOCK
0270  00214 026061R       JMP EXIT      ERROR EXIT


0272  00215 162023R TWOSP LDA TYPE,I    GET THE TYPE AGAIN
0273  00216 166027R TWORW LDB RL,I      GET THE RECORD LENGTH (TYPE 2)







 PAGE 0007 #01


0274  00217 052537R       CPA .2        IF TYPE 2 
0275  00220 026271R       JMP .2RW       GO DO READ WRITE 


0277* 
0278*     TYPE 3 AND ABOVE READ/WRITE LOOP
0279* 
0280  00221 062000R       LDA WRITF     SET READ WRITE FLAG 
0281  00222 001600        ELA            IN E  0=> WRITE  1=>READ 
0282  00223 166035R       LDB BUFPT,I   GET CURRENT WORD
0283  00224 006021        SSB,RSS       IF <0 THEN EOF
0284  00225 026244R       JMP RDLEN     NO <0 - SKIP
0285  00226 006441        CLB,SEZ,RSS     IF EOF AND WRITE
0286  00227 026243R       JMP SWRI      GO CLEAR THE READ FLAG
0287  00230 162036R EOF   LDA RWFLG,I    EOF AND READ 
0288  00231 001323        RAR,RAR       SET 
0289  00232 001622        ELA,RAL        EOF
0290  00233 172036R       STA RWFLG,I     BIT IN DCB
0291  00234 003400  EOFT0 CCA           SET RETURN LENGTH 
0292  00235 172010R       STA L,I        FOR EOF
0293  00236 002440        CLA,SEZ       IF FIRST EOF SKIP 
0294  00237 062552R EOFEX LDA N12       ELSE EOF ERROR
0295  00240 002021        SSA,RSS       IF FIRST EOF THEN 
0296  00241 136037R       ISZ RC,I      STEP THE RECORD COUNT 
0297  00242 026061R       JMP EXIT      GO EXIT 

0299  00243 076007X SWRI  STB RFLG$     CLEAR THE READ FLAG 
0300  00244 007440  RDLEN CCB,SEZ       IF READ 
0301  00245 026260R       JMP RDLE1     SKIP WRITE CHECKS 
0302  00246 162007R       LDA IL,I      GET REQUEST LENGTH
0303  00247 003025        CMA,SSA,INA,RSS   IF WRITE EOF
0304  00250 026347R       JMP EOFWR          GO WRITE EOF 
0305  00251 142035R       ADA BUFPT,I   COMPARE NEW LENGTH TO OLD 
0306  00252 066007X       LDB RFLG$     GET READ FLAG 
0307  00253 002102        CLE,SZA       IF NEW LENGTH = OLD 
0308  00254 006003        SZB,RSS        OR IF NOT UPDATE 
0309  00255 026261R       JMP RDLE2     CONTINUE WRITE

0311  00256 062553R ERR5  LDA N5        ELSE UPDATE ERROR 
0312  00257 026061R       JMP EXIT      GO EXIT 

0314  00260 062545R RDLE1 LDA DMBUF     GET LENGTH RETURN ADDRESS 
0315  00261 006445  RDLE2 CLB,SEZ,INB,RSS   IF WRITE
0316  00262 062007R       LDA IL        USE REQUEST LENGTH
0317  00263 072266R       STA BUA       SET ADDRESS OF BUFFER 
0318  00264 062004R       LDA DCB       SET THE DCB ADDRESS 
0319  00265 016005X       JSB RW$UB     GO READ FIRST LENGTH WORD 
0320  00266 100010R BUA   DEF L,I 
0321  00267 026061R       JMP EXIT      ERROR EXIT
0322  00270 064000        LDB A 
0323  00271 062000R .2RW  LDA WRITF     GET READ/WRITE FLAG 
0324  00272 001600        ELA            TO E 
0325  00273 002441        CLA,SEZ,RSS   IF WRITE THEN SKIP
0326  00274 026306R       JMP WRIT      WRITE SO SKIP 
0327  00275 062007R       LDA IL        CHECK IF LENGTH SUPPLIED
0328  00276 052545R       CPA DMBUF     IF COMPARE THEN NO LENGTH 







 PAGE 0008 #01


0329  00277 002401        CLA,RSS       NOT SUPPLIED SO FORCE TRANSFER
0330  00300 060001        LDA B         SUPPLIED SO CHECK FOR RECORD
0331  00301 003004        CMA,INA       TOO LONG FOR
0332  00302 142007R       ADA IL,I      BUFFER
0333  00303 002020        SSA           SKIP IF OK
0334  00304 166007R       LDB IL,I      TOO LONG SO USE SUPPIED LENGTH
0335  00305 176010R       STB L,I       SET AS RETURN LENGTH
0336  00306 072561R WRIT  STA SKIP      SAVE RESIDUE FOR SKIP AFTER READ
0337  00307 062004R       LDA DCB       DCB TO A
0338  00310 016005X       JSB RW$UB     READ THE RECORD 
0339  00311 100006R       DEF BUF,I      TO USER BUFFER 
0340  00312 026061R       JMP EXIT      ERROR EXIT
0341  00313 166023R       LDB TYPE,I    GET FILE TYPE 
0342  00314 056537R       CPB .2        IF 2
0343  00315 026344R       JMP EXIOK-1   THEN DONE - GO EXIT 
0344  00316 062004R       LDA DCB       SET UP TO SKIP
0345  00317 066561R       LDB SKIP      THE RESIDUE 
0346  00320 007024        CMB,SSB,INB   SET + NO WORDS  SKIP IF >0
0347  00321 026324R       JMP NOSKP     <0 SO DON'T SKIP
0348  00322 016006X       JSB $KIP      GO SKIP THE WORDS 
0349  00323 026061R       JMP EXIT      ERROR EXIT
0350  00324 062000R NOSKP LDA WRITF     ELSE
0351  00325 001600        ELA           SET TO
0352  00326 002441        CLA,SEZ,RSS   READ /WRITE THE 
0353  00327 062007R       LDA IL        TWIN WORD 
0354  00330 072334R       STA BUFAA     WORD
0355  00331 062004R       LDA DCB       TO DUM
0356  00332 006404        CLB,INB       OR FROM 
0357  00333 016005X       JSB RW$UB     USER. 
0358  00334 000000  BUFAA NOP 
0359  00335 026061R       JMP EXIT      ERROR - EXIT
0360  00336 152266R       CPA BUA,I     IF TWIN MISMATCH
0361  00337 007401        CCB,RSS 
0362  00340 026256R       JMP ERR5       THEN BAD RECORD - EXIT 
0363  00341 062007X       LDA RFLG$     GET READ FLAG 
0364  00342 002003        SZA,RSS       IF NOT READING
0365  00343 026347R       JMP EOFWR     GO SET EOF IN FILE
0366  00344 136037R EXT0  ISZ RC,I      STEP THE RECORD COUNT 
0367  00345 002400  EXIOK CLA           DONE - OK SO
0368  00346 026061R       JMP EXIT       EXIT 


0370  00347 176035R EOFWR STB BUFPT,I   SET EOF IN DCB
0371  00350 176036R       STB RWFLG,I   WRITTEN ON AND EOF FLAG IN THE D
0372  00351 026344R       JMP EXIOK-1   GO EXIT 


0374  00352 066007X TWOTY LDB RFLG$     GET READ WRITE FLAG 
0375  00353 006002        SZB           IF READING
0376  00354 026207R       JMP INTS      GO TEST FOR IN CORE 
0377  00355 026215R       JMP TWOSP     ELSE GO WRITE.


0379* 
0380*     TYPE 0 OR 1 FILE -- TRANSFER FROM CORE
0381* 







 PAGE 0009 #01


0382  00356 062007R .1TYP LDA IL        GET LENGTH ADDRESS
0383  00357 164000        LDB A,I       GET LENGTH
0384  00360 052545R       CPA DMBUF     IF NOT SUPPLIED THEN
0385  00361 066541R       LDB .128      USE 128 
0386  00362 076007R       STB IL        SAVE LOCALLY
0387  00363 046554R       ADB B177      ROUND UP
0388  00364 101047        LSR 7         GET # OF SECTORS COVERED
0389  00365 076561R       STB SKIP      SAVE ROUNDED LENGTH 
0390  00366 146037R       ADB RC,I      = # OF 128 WORD RECORDS 
0391  00367 076021R       STB TMP       SAVE NEW RECORD # 
0392  00370 046535R       ADB N1        SUBTRACT 1 (RECORD #'S START AT 
0393  00371 005000        BLS           CONVERT TO 64 WORD SECTORS
0394  00372 007004        CMB,INB       SUBTRACT
0395  00373 146026R       ADB SPAC,I    FROM FILE SIZE
0396  00374 006020        SSB           IF OUT OF FILE
0397  00375 026237R       JMP EOFEX     TAKE EOF EXIT 


0399  00376 062561R       LDA SKIP      GET ROUNDED LENGTH
0400  00377 100047        LSL 7         SET TO CORRECT POSITION 
0401  00400 066000R       LDB WRITF     AND 
0402  00401 006021        SSB,RSS       RESET IF
0403  00402 072007R       STA IL        WRITE 

0405  00403 162004R       LDA DCB,I 
0406  00404 012557R       AND B77 
0407  00405 042502R       ADA PRC 
0408  00406 072563R       STA LUR 

0410  00407 162034R NEXTR LDA SECT,I    COMPUTE THE 
0411  00410 003004        CMA,INA       MAX RECORD FOR THIS 
0412  00411 142031R       ADA #SC/T,I   ACCESS
0413  00412 100046        LSL 6         AND 
0414  00413 072564R       STA LOCLN     SET FOR XFER
0415  00414 003004        CMA,INA       SUBTRACT
0416  00415 066007R       LDB IL        FROM
0417  00416 040001        ADA B         IL
0418  00417 002020        SSA           IF TOO MUCH 
0419  00420 076564R       STB LOCLN     RESET TRANSFER TO JUST IL 
0420  00421 072007R       STA IL        SET NUMBER LEFT TO DO 
0421  00422 062000R CALEX LDA WRITF     SET UP
0422  00423 072334R       STA BUFAA     SET THE WRITE SKIP FLAG 
0423  00424 006404        CLB,INB       THE 
0424  00425 002021        SSA,RSS       REQUEST 
0425  00426 006004        INB           CODE
0426  00427 076562R       STB RQ        AND 
0427  00430 016001X       JSB EXEC      CALL
0428  00431 000440R       DEF RTN       THE 
0429  00432 000562R       DEF RQ        EXEC
0430  00433 000563R       DEF LUR       FOR 
0431  00434 100006R       DEF BUF,I     I/O 
0432  00435 000564R       DEF LOCLN     TO/ 
0433  00436 100033R       DEF TR,I      FROM
0434  00437 100034R       DEF SECT,I    USER
0435  00440 036334R RTN   ISZ BUFAA     TEST READ/WRITE 
0436  00441 002001        RSS           WRITE SO SKIP THE SETTING OF L







 PAGE 0010 #01


0437  00442 176010R       STB L,I       SET THE RETURN LENGTH 
0438  00443 036561R       ISZ SKIP      DISC XFER?? 
0439  00444 026463R       JMP DISC      YES; GO DO DISC ERROR CHECK 
0440  00445 036021R       ISZ TMP       IF WRITE
0441  00446 026344R       JMP EXT0      SKIP EOF TESTS

0443  00447 001266        RAL,CLE,ELA   PUT THE DOWN BIT IN  E
0444  00450 001722        ALF,RAL       SHIFT THE EOF BIT 
0445  00451 001200        RAL           TO BIT 15 
0446  00452 002020        SSA           IF EOF BIT SET
0447  00453 026461R       JMP EOF00     GO DO EOF THING 
0448  00454 006002        SZB           IF ZERO WORDS READ THEN SKIP
0449  00455 026344R       JMP EXT0      ELSE GO EXIT GOOD XFER
0450  00456 012556R       AND B70       MASK THE HIGH ORDER TYPE BIT
0451  00457 002342        SEZ,CCE,SZA      IF NOT DOWN OR IF TYPE <10 TH
0452  00460 026513R       JMP TYP00     ELSE RETRY THE XFER 

0454  00461 000040  EOF00 CLE 
0455  00462 026234R       JMP EOFT0     DO EOF TYPE ZERO EXIT 


0457  00463 003400  DISC  CCA           PRESET FOR ERROR
0458  00464 056564R       CPB LOCLN     DISC ERROR? 
0459  00465 002001        RSS           NO; SKIP
0460  00466 026061R       JMP EXIT      YES; EXIT 
0461  00467 046006R       ADB BUF       UPDATE THE
0462  00470 076006R       STB BUF       BUFFER ADDRESS
0463  00471 002400        CLA           SET UP FOR POSSIBLE TRACK SWITCH
0464  00472 172034R       STA SECT,I    SET SECTOR
0465  00473 136033R       ISZ TR,I      STEP THE TRACK ADDRESS
0466  00474 062007R       LDA IL        GET REMAINING LENGTH
0467  00475 003026        CMA,SSA,INA,SZA   SKIP IF NOT GREATER THEN ZER
0468  00476 026407R       JMP NEXTR     MORE SO GO DO THE NEXT BLOCK

0470  00477 062021R       LDA TMP       DONE  UPDATE
0471  00500 172037R       STA RC,I      THE RECORD COUNT
0472  00501 026345R       JMP EXIOK     AND EXIT
0475                      LST 



0477  00503 016001X EOFW0 JSB EXEC      WRITE TYPE ZERO EOF 
0478  00504 000510R       DEF EOFRT     RETURN ADDRESS
0479  00505 000540R       DEF .3
0480  00506 100025R       DEF EOF0,I
0481  00507 000535R       DEF N1
0482  00510 026345R EOFRT JMP EXIOK 



0484  00511 062020R EX17  LDA N17       SET UP ILLEGAL REQUEST FLAG 
0485  00512 026061R       JMP EXIT      GO EXIT 


0487  00513 066000R TYP00 LDB WRITF     IF READ 
0488  00514 076021R       STB TMP       SET READ WRITE FLAG FOR EOF TEST







 PAGE 0011 #01


0489  00515 162027R       LDA RL,I      GET THE READ WRITE LEGAL FLAG 
0490  00516 006021        SSB,RSS       IF WRITE
0491  00517 001300        RAR           SHIFT THE WRITE FLAG TO BIT 15
0492  00520 002021        SSA,RSS       TEST THE FLAG 
0493  00521 026511R       JMP EX17      ILLEGAL REQUEST   GO EXIT 

0495  00522 003400        CCA           IF READ 
0496  00523 006020        SSB           THEN
0497  00524 026527R       JMP TYP01     SKIP
0498  00525 152007R       CPA IL,I      EOF?
0499  00526 026503R       JMP EOFW0     YES; GO MAKE CONTROL RQ 

0501  00527 072561R TYP01 STA SKIP      SET TYPE 0 FLAG 
0502  00530 162024R       LDA LU0,I     GET LOGICAL 
0503  00531 072563R       STA LUR       UNIT AND SET
0504  00532 162007R       LDA IL,I      GET REQUEST LENGTH
0505  00533 072564R       STA LOCLN     AND SET 
0506  00534 026422R       JMP CALEX     GO CALL EXEC
0507* 
0508* 
0509*     C O N S T A N T S 
0510  00535 177777  N1    OCT -1
0511  00536 000001  .1    OCT 1 
0512  00537 000002  .2    OCT 2 
0513  00540 000003  .3    OCT 3 
0514  00541 000200  .128  DEC 128 
0515  00542 100000  MSIGN DEF 0,I 
0516  00543 000544R DZER0 DEF ZER0
0517  00544 000000  ZER0  NOP 
0518  00545 000546R DMBUF DEF DM
0519  00546 000000  DM    NOP 
0520  00547 177765  N11   DEC -11 
0521  00550 177766  N10   DEC -10 
0522  00551 177771  N7    OCT -7
0523  00552 177764  N12   DEC -12 
0524  00553 177773  N5    OCT -5
0525  00554 000177  B177  OCT 177 
0526  00555 177600  B1776 OCT 177600
0527  00556 000070  B70   OCT 70
0528  00557 000077  B77   OCT 77
0529  00560 000240  B240  OCT 240 





0531  00561 000000  SKIP  NOP 
0532  00562 000000  RQ    NOP 
0533  00563 000000  LUR   NOP 
0534  00564 000000  LOCLN NOP 



0536  00000         A     EQU 0 
0537  00001         B     EQU 1 
0538  01717         XEQT  EQU 1717B 







 PAGE 0012 #01


0540  00565         PLENG EQU * 
0541                      END 
**  NO ERRORS*





















































$END ASMB     

*
--> Assemble fmp/29033-80003_Rev-A_3
ON,ASMB,99







 PAGE 0001


0001                ASMB,B,R,L,C
**  NO ERRORS*





























































 PAGE 0002 #01


0001                ASMB,B,R,L,C
0002  00000               NAM FSTAT,7 
0003                      ENT FSTAT 
0004                      EXT EXEC,.ENTR

0006*     FSTAT READS THE DIRECTORY OF DISCS TO THE 
0007*     USER SPECIFIED 125 WORD BUFFER
0008* 
0009*     CALLING SEQUENCE: 

0011*     CALL FSTAT(ISTAT) 

0013*     WHERE: ISTAT IS A 125 WORD BUFFER INTO
0014*            WHICH THE DIRECTORY WILL BE READ.





0016  00000 000000  ISTAT NOP 

0018  00001 000000  FSTAT NOP           ENTRY POINT 
0019  00002 016002X       JSB .ENTR     FETCH THE 
0020  00003 000000R       DEF ISTAT     ADDRESS 

0022  00004 003400        CCA           COMPUTE LAST
0023  00005 041756        ADA TATSD     SYSTEM DISC 
0024  00006 072024R       STA TRACK     TRACK NUMBER
0025  00007 016001X       JSB EXEC      CALL EXEC 
0026  00010 000017R       DEF RTN       TO
0027  00011 000020R       DEF .1        READ
0028  00012 000021R       DEF .2        FROM LU 2 
0029  00013 100000R       DEF ISTAT,I   TO THE USER BUFFER
0030  00014 000022R       DEF .125      125 WORDS 
0031  00015 000024R       DEF TRACK     FROM THE LAST TRACK 
0032  00016 000023R       DEF .0        SECTOR 0
0033  00017 126001R RTN   JMP FSTAT,I   RETURN



0035  00020 000001  .1    DEC 1 
0036  00021 000002  .2    DEC 2 
0037  00022 000175  .125  DEC 125 
0038  00023 000000  .0    NOP 
0039  00024 000000  TRACK NOP 1756B 


0041  00000         A     EQU 0 
0042  00001         B     EQU 1 
0043  01756         TATSD EQU 1756B 

0045  00025         END   EQU * 

0047                      END 
**  NO ERRORS*

$END ASMB     

*
--> Assemble fmp/29033-80004_Rev-A_1
ON,ASMB,99







 PAGE 0001


0001                ASMB,B,R,L,C
**  NO ERRORS*





























































 PAGE 0002 #01


0001                ASMB,B,R,L,C
0002  00000               NAM RWNDF,7 
0003                      ENT RWNDF 
0004                      EXT .ENTR,RWND$,EXEC
0005                      EXT R/W$
0006*     THE MODULE OF THE RTE FILE MANAGER PERFORMS 
0007*     THE REWIND OR RESET FUNCTION
0008* 
0009*     A FILE IS RESET TO EXTENT 0 RECORD 1 VIA RWND$
0010*     A TYPE ZERO UNIT IS REWOUND VIA AND EXEC CALL 
0011* 
0012* 
0013*     CALLING   SEQUENCE
0014* 
0015*     CALL RWNDF(IDCB,IER)
0016* 
0017*         WHERE:
0018* 
0019*         IDCB  IS THE FILES DATA CONTROL BLOCK ARRAY 
0020* 
0021*         IER   IS THE ERROR RETURN LOCATION. 
0022*               ERRORS ARE RETURNED IN THE A REG
0023*               ALSO. 
0024*               ERRORS  CODES ARE:
0025*             0   NO ERROR
0026*            -11 DCB NOT OPEN 
0027* 
0028* 


0030*     PRE CONSTANT AREA 

0032  00000 000003  .3    DEC 3 
0033  00001 000000  TYPE  NOP 
0034  00002 000002  .2    OCT 2 
0035  00003 000007  .7    DEC 7 
0036  00004 000005  .5    DEC 5 



0038  00005 000005R DCB   DEF DCB 
0039  00006 000005R IER   DEF DCB 

0041  00007 000000  RWNDF NOP           ENTRY  POINT
0042  00010 016001X       JSB .ENTR      FETCH
0043  00011 000005R DFDM  DEF DCB         PRAM ADDRESSES

0045  00012 066005R       LDB DCB       GET DCB ADDRESS 
0046  00013 046002R       ADB .2         INDEX TO TYPE AND
0047  00014 076001R       STB TYPE        SET ADDRESS 
0048  00015 046003R       ADB .7           INDEX TO OPEN FLAG AND 
0049  00016 160001        LDA B,I           FETCH 
0050  00017 051717        CPA XEQT      OPEN? 
0051  00020 002405        CLA,INA,RSS    YES; SET AWRWND RECORD COUNT/SK
0052  00021 026041R       JMP NOOPN      NO; TAKE ERROR  EXIT 
0053  00022 046004R       ADB .5        INDEX TO RECORD COUNT AND 







 PAGE 0003 #01


0054  00023 170001        STA B,I       SET RECORD COUNT
0055  00024 162001R       LDA TYPE,I    GET TYPE
0056  00025 002102        CLE,SZA        IF NOT ZERO
0057  00026 026052R       JMP DISC        GO DO DISC THING

0059  00027 036001R       ISZ TYPE      TYPE =0 -STEP TO LU 
0060  00030 162001R       LDA TYPE,I     FETCH LU AND 
0061  00031 012047R       AND B77         ISOLATE IT THEN 
0062  00032 042050R       ADA B400         ADD THE REWIND BIT 
0063  00033 072001R       STA TYPE          AND  SAVE  FOR EXEC 

0065  00034 016003X       JSB EXEC      CALL EXEC TO
0066  00035 000040R       DEF EXRTN      REWIND 
0067  00036 000000R       DEF .3          TYPE
0068  00037 000001R       DEF TYPE         ZERO  FILE 
0069  00040 002401  EXRTN CLA,RSS       SET ERROR CODE AND SKIP TO EXIT 
0070  00041 062051R NOOPN LDA N11       NOT OPEN- EXIT -11
0071  00042 172006R EXIT  STA IER,I     SET ERROR CODE
0072  00043 066011R       LDB DFDM       RESET ENTRY ADDRESSES
0073  00044 076005R       STB DCB         AND 
0074  00045 076006R       STB IER          THEN 
0075  00046 126007R       JMP RWNDF,I       RETURN


0077*     MID CONSTANT AREA 

0079  00047 000077  B77   OCT 77
0080  00050 000400  B400  OCT 400 
0081  00051 177765  N11   DEC -11 



0083  00052 066005R DISC  LDB DCB       SET UP AND
0084  00053 016004X       JSB R/W$      WRITE THE BLOCK IF NECESSARY
0085  00054 026042R       JMP EXIT      IF ERROR EXIT 

0087  00055 066005R       LDB DCB       DISC  FILE-CALL 
0088  00056 002400        CLA            RWND$
0089  00057 016002X       JSB RWND$       TO SET UP  DCB
0090  00060 026042R       JMP EXIT         ERROR RETURN 
0091  00061 026040R       JMP EXRTN         NORMAL RETURN 


0093*     POST  CONSTANT AREA 

0095  00000         A     EQU 0 
0096  00001         B     EQU 1 
0097  01717         XEQT  EQU 1717B 

0099  00062         END   EQU * 

0101                      END 
**  NO ERRORS*



$END ASMB     

*
--> Assemble fmp/29033-80004_Rev-A_2
ON,ASMB,99







 PAGE 0001


0001                ASMB,B,R,L,C
**  NO ERRORS*





























































 PAGE 0002 #01


0001                ASMB,B,R,L,C
0002  00000              NAM POSNT,7
0003                     ENT POSNT
0004                      EXT EXEC,.ENTR,RFLG$,P.PAS,READF,$KIP 
0005* 
0006*     POSNT  IS THE  FILE  POSITION ROUTINE  FOR THE
0007*            RTE  FILE  MANAGEMENT PACKAGE
0008* 
0009*     CALLING  SEQUENCE:
0010*     CALL POSNT (IDCB,IERR,NP,IR)
0011*         WHERE:
0012*           IDCB  IS THE FILES DATA CONTROL BLOCK 
0013*                 ADDRESS 
0014*           IERR  IS THE  ERROR RETURN ADDRESS
0015*                 POSNT ERRORS ARE: 
0016*              0  NONE
0017*             -1  DISC DOWN 
0018*             -5  AN ILLEGAL RECORD WASENCOUNTERED
0019*                 (LENGTHS AT EACH END DID NOT MATCH
0020*             -10 NOT ENOUGH PARAMETERS 
0021*             -11 DCB NOT OPEN
0022*             -12 EOF OR SOF SENSED 
0023*           NP    IF >0  THEN SKIP NP RECORDS 
0024*                 IF <0  THEN BACK SPACE NP RECORDS 
0025*                 IF =0  THEN  NO  OPERATION
0026*           IR  (OPTIONAL) IF NOT CODED OR ZERO 
0027*                 NP  IS RELATIVE  OTHERWIZE
0028*                 NP IS ABSOLUTE (NP MUST BE>0) 



0030*     PRE  STORAGE

0032  00000 177766  N10   DEC -10 
0033  00001 177765  N11   DEC -11 
0034  00002 000003R DFZER DEF ZERO
0035  00003 000000  ZERO  NOP 
0036  00004 000000  DCB   NOP 
0037  00005 000000  ER    NOP 
0038  00006 000003R NP    DEF ZERO
0039  00007 000003R IR    DEF ZERO

0041  00010 000000  POSNT NOP           ENTRY POINT 
0042  00011 016002X       JSB .ENTR      FETCH
0043  00012 000004R       DEF DCB         ADDRESSES 
0044  00013 062000R       LDA N10       ENOUGH
0045  00014 066006R       LDB NP         PRAMS
0046  00015 056002R       CPB DFZER       SUPPLIED? 
0047  00016 026225R       JMP EXIT         NO,EXIT
0048  00017 076003X       STB RFLG$     FOURCE READS WHILE SPACING
0049  00020 006500        CLB,CLE       SET 
0050  00021 062004R       LDA DCB       UP
0051  00022 016004X       JSB P.PAS       LOCAL 
0052  00023 177761        DEC -15          DCB
0053  00024 000000  RCOU  NOP               ADDRESSES 
0054  00025 000000  DUM   NOP 







 PAGE 0003 #01


0055  00026 000000  TYPE  NOP           TYPE
0056  00027 000000  LU    NOP           LU FOR TYPE 0 
0057  00030 000000  EOF   NOP           EOF CODE FOR TYPE 0 
0058  00031 000000  SPACE NOP           SPACING LEGAL FLAGE TYPE 0
0059  00032 000000  CONND NOP 
0060  00033 000000  LN    NOP 
0061  00034 000000        NOP 
0062  00035 000000  OPEN  NOP           OPEN FLAG 
0063  00036 000000  ABRC  NOP 
0064  00037 000000  RCLN  NOP 
0065  00040 000000  BFPT  NOP           BUFFER POINTER TYPE 3AND ABOVE
0066  00041 000000  RWFLG NOP           READ/WRIE /EOF  FLAG
0067  00042 000000  RC    NOP           RECORD  COUNT 
0068  00043 062001R       LDA N11       GET NOT OPEN ERROR.CODE TO A
0069  00044 166035R       LDB OPEN,I    GET OPEN FLAG TO B
0070  00045 055717        CPB XEQT      OPEN
0071  00046 002301        CCE,RSS       YES; SKIP;SET E 
0072  00047 026225R       JMP EXIT      NO;  EXIT OPEN ERROR
0073  00050 062040R       LDA BFPT      GET BUFFER POINTER ADDRESS
0074  00051 001225        RAL,ERA       SET INDIRECT BIT
0075  00052 072040R       STA BFPT      RESET POINTER 
0076  00053 162007R       LDA IR,I      GET RELATIVE /ABSOLUTE  FLAG
0077  00054 006400        CLB           ASSUME ABSOLUTE 
0078  00055 002003        SZA,RSS       RELATIVE? 
0079  00056 166042R       LDB RC,I      YES; GET CURRENT RECORD NO. 
0080  00057 146006R       ADB NP,I      ADD THE  REQUESTED  MOVEMENT
0081  00060 076036R       STB ABRC      SAVE NEW ABSOLUTE ADDRESS 
0082  00061 007004        CMB,INB       SET NEGATIVE AND
0083  00062 146042R       ADB RC,I      COMPUTE RELATIVE RECORD NUMBER
0084  00063 007007        CMB,INB,SZB,RSS SET TO RIGHT  SIGN - ZERO?
0085  00064 026223R       JMP EXOK      YES - GO EXIT 
0086  00065 076024R       STB RCOU      NO;  SET COUNT

0088  00066 162026R       LDA TYPE,I    GET TYPE  OF  FILE
0089  00067 003007        CMA,INA,SZA,RSS TYPE ZERO?
0090  00070 026154R       JMP TYP0      YES; GO TO TYPE ZERO ROUTINE
0091  00071 002006        INA,SZA       TYPE; 1 
0092  00072 002007        INA,SZA,RSS    OR 2 
0093  00073 026215R       JMP TY1/2     YES; GO TO RANDOM ACESS POSITION

0095  00074 007024        CMB,SSB,INB     TYPE 3 OR  ABOVE - FORWARD
0096  00075 026133R       JMP FSRC          SPACE - YES  GO  DO IT. 


0098*     TYPE 3 AND ABOVE BACKSPACE ROUTINE

0100  00076 162040R BSRC  LDA BFPT,I    GET CURRENT POSITION
0101  00077 002006        INA,SZA       IS IT EOF?
0102  00100 026107R       JMP BSRC3     NO; GO BACKSPACE
0103  00101 162041R       LDA RWFLG,I   YES; GET THE READ/WRITE 
0104  00102 001363        RAR,CLE,RAR   FLAG AND CLEAR THE EOF BIT
0105  00103 001622        ELA,RAL       THEN
0106  00104 172041R       STA RWFLG,I   RESTORE THE FLAG
0107  00105 002040        SEZ           WAS IT SET? 
0108  00106 026124R       JMP BSRC5     YES; COUNT AS A RECORD
0109  00107 007400  BSRC3 CCB           NO; BACKSPACE 1 







 PAGE 0004 #01


0110  00110 062004R       LDA DCB       WORD
0111  00111 016006X       JSB $KIP      WITH THE
0112  00112 026225R       JMP EXIT      SKIP ROUTINE
0113  00113 162040R       LDA BFPT,I    GET THE RECORD LENGTH 
0114  00114 072037R       STA RCLN      SAVE IT 
0115  00115 003000        CMA           BACK SPACE TO 
0116  00116 070001        STA B         THE 
0117  00117 062004R       LDA DCB       TWIN
0118  00120 016006X       JSB $KIP      WITH THE
0119  00121 026225R       JMP EXIT      SKIP ROUTINE
0120  00122 162040R       LDA BFPT,I    GET TWIN
0121  00123 052037R       CPA RCLN      TWINS MATCH?
0122  00124 003401  BSRC5 CCA,RSS       YES; SKIP 
0123  00125 026213R       JMP ER5       NO; ERROR -5
0124  00126 142042R       ADA RC,I      DECREMENT THE 
0125  00127 172042R       STA RC,I      RECORD  COUNT 
0126  00130 036024R       ISZ RCOU      STEP BACKSPACE COUNT ; DONE?
0127  00131 026107R       JMP BSRC3     NO; DO THE NEXT ONE 
0128  00132 026223R       JMP EXOK
0129*     FORWARD SPACE TYPE ZERO AND 3 AND ABOVE FILES 
0130* 
0131  00133 076024R FSRC  STB RCOU      SET COUNT 
0132  00134 016005X FSRC1 JSB READF     READ
0133  00135 000143R       DEF REART      A
0134  00136 100004R       DEF DCB,I       RECORD
0135  00137 100005R       DEF ER,I         TO 
0136  00140 000025R       DEF DUM           LOCAL DUMMY 
0137  00141 000233R       DEF .1             ONE WORD BUFFER
0138  00142 000033R       DEF LN
0139  00143 002020  REART SSA           IF ERROR
0140  00144 026225R       JMP EXIT      EXIT
0141  00145 066033R       LDB LN
0142  00146 006020        SSB 
0143  00147 026224R       JMP EOFEX 
0144  00150 036024R       ISZ RCOU
0145  00151 026134R       JMP FSRC1 
0146  00152 026225R       JMP EXIT


0148  00153 177775  N3    DEC -3


0150*     TYPE ZERO  SPACE  ROUTINE 

0152  00154 007024  TYP0  CMB,SSB,INB     IF FORWARD  SPACE 
0153  00155 026133R       JMP FSRC      GO TO READ ROUTINE

0155  00156 062153R       LDA N3        PRESET FOR ERROR
0156  00157 166031R       LDB SPACE,I   BACK SPACE  GET 
0157  00160 006021        SSB,RSS       LEGAL CODE
0158  00161 026225R       JMP EXIT      BACK SPACE NOT LEGAL-EXIT 

0160  00162 162027R       LDA LU,I      GET AND 
0161  00163 012212R       AND B77       ISOLALE  LU 
0162  00164 042211R       ADA B200      ADD BACK SPACE FUNCTION 
0163  00165 072032R       STA CONND     SET FOR CALL







 PAGE 0005 #01


0164  00166 003400        CCA           SET FIRST EOF RECORD FLAG 
0165  00167 072035R SPC0  STA OPEN      IN OPEN 
0166  00170 016001X       JSB EXEC      CALL EXEC 
0167  00171 000174R       DEF EXRTN      TO 
0168  00172 000234R       DEF .3          BACK
0169  00173 000032R       DEF CONND         SPACE 
0170  00174 012211R EXRTN AND B200      MASK  EOF BIT 
0171  00175 007400        CCB           DECREMENT 
0172  00176 146042R       ADB RC,I      THE RECORD COUNT
0173  00177 176042R       STB RC,I
0174  00200 007400        CCB           SET  B  TO FORWARD SPACE 1
0175  00201 002003        SZA,RSS       IF  EOF TEST FOR FIRST
0176  00202 026205R       JMP *+3       ELSE SKIP TO COUNT THE RECORD 
0177  00203 036035R       ISZ OPEN      SKIP IF EOF ON FIRST RECORD 
0178  00204 026133R       JMP FSRC      ELSE  GO  FORWARD  SPACE
0179  00205 036024R       ISZ RCOU      DONE? 
0180  00206 026167R       JMP SPC0      NO;  DO NEXT ONE
0181  00207 026223R       JMP EXOK      YES;  GO  EXIT


0183  00210 177773  N5    DEC -5
0184  00211 000200  B200  OCT 200 
0185  00212 000077  B77   OCT 77


0187  00213 062210R ER5   LDA N5        LENGTH MISMATCH ERROR 
0188  00214 026225R       JMP EXIT      SEND ERROR CODE 

0190*     TYPE  1 AND  TWO  SPACE  ROUTINE
0191*           THE   NEW  RECORD  NO. IS SET ONLY
0192*             NO EOF CHECK IS DONE
0193*               NEGATIVE  OR  ZERO  RECORD
0194*                 NUMBERS  ARE  REPLACED
0195*                 WITH  1  AND  SOF  ERROR SENT 
0196* 
0197  00215 062036R TY1/2 LDA ABRC      GET THE ABSOLUTE RECORD NO. 
0198  00216 002302        CCE,SZA       IF ZERO 
0199  00217 002020        SSA            OR NEGATIVE
0200  00220 002504        CLA,CLE,INA     SET TO ONE
0201  00221 172042R       STA RC,I      SET NEW RECORD NO.
0202  00222 002040        SEZ           IF FOURCED TO ONE TAKE SOF EXIT 


0204  00223 002401  EXOK  CLA,RSS       GOOD EXIT 
0205  00224 062232R EOFEX LDA N12       EOF/SOF EXIT

0207  00225 066002R EXIT  LDB DFZER     EXIT-RESET
0208  00226 076006R       STB NP         OPTIONAL 
0209  00227 076007R       STB IR          ADDRESSES 
0210  00230 172005R       STA ER,I      SET ERROR AND 
0211  00231 126010R       JMP POSNT,I   RETURN


0213  00232 177764  N12   DEC -12 
0214*     POST   STORAGE








 PAGE 0006 #01


0216  00233 000001  .1    DEC 1 
0217  00234 000003  .3    DEC 3 


0219  00000         A     EQU 0 
0220  00001         B     EQU 1 
0221  01717         XEQT  EQU 1717B 

0223  00235         END   EQU * 

0225                      END 
**  NO ERRORS*












































$END ASMB     

*
--> Assemble fmp/29033-80004_Rev-A_3
ON,ASMB,99







 PAGE 0001


0001                ASMB,B,R,L,C
**  NO ERRORS*





























































 PAGE 0002 #01


0001                ASMB,B,R,L,C
0002  00000               NAM APOSN,7 
0003                      ENT APOSN 
0004                      EXT $KIP,NX$EC,RFLG$,.ENTR,LOCF 

0006*     THE APOSN ROUTINE DOES ABSOLUTE FILE POSITIONING
0007*     OF  RTE FILES 
0008* 
0009*     CALLING  SEQUENCE:
0010* 
0011*     CALL APOSN(IDCB,IERR,IREC,IRS,IOFF) 

0013*     WHERE:
0014* 
0015*         IDCB  IS THE FILES DATA CONTROL BLOCK 
0016* 
0017*         IERR  IS AN ERROR RETURN FLAG. POSSIBLE ERRORS, 
0018*           0   NO ERROR
0019*          -1   DISC DOWN 
0020*          -5   SPACING BEYOND END OF DEFINED EXTENT
0021*          -9   ATTEMPT TO POSITION TYPE ZERO FILE
0022*          -10  NOT ENOUGH PARAMETERS 
0023*          -11  DCB NOT OPEN
0024*          -12  SOF  IE IREC <1 
0025* 
0026*         IREC  THE RECORD NUMBER TO BE READ NEXT 
0027* 
0028*         IRS   (REQUIRED FOR 3 & ABOVE ONLY) THE 
0029*               RELATIVE BLOCK OF THE NEXT RECORD 
0030* 
0031* 
0032*         IOFF   THE BLOCK OFFSET OF THE NEXT 
0033*                RECORD (REQUIRED FOR TYPE 3 AND
0034*                   ABOVE ONLY) 
0035* 





0037*     PRE  CONSTANT STORAGE 


0039  00000 000000  TYPE  NOP 
0040  00001 000002  .2    DEC 2 
0041  00002 000007  .7    DEC 7 
0042  00003 177765  N11   DEC -11 
0043  00004 177775  N3    DEC -3
0044  00000         RC    EQU TYPE





0046  00005 000000  DCB   NOP 
0047  00006 000000  ER    NOP 







 PAGE 0003 #01


0048  00007 000000  IRC   NOP 
0049  00010 000000  IRS   NOP 
0050  00011 000000  IOFF  NOP 

0052  00012 000000  APOSN NOP           ENTRY POINT 
0053  00013 016004X       JSB .ENTR      FETCH PRAM 
0054  00014 000005R       DEF DCB         ADDRESSES 

0056  00015 006404        CLB,INB       SET THE READ
0057  00016 076003X       STB RFLG$     FLAG
0058  00017 066005R       LDB DCB       COMPUTE 
0059  00020 046001R       ADB .2        TYPE
0060  00021 076000R       STB TYPE      AND 
0061  00022 046002R       ADB .7         OPEN FLAG ADDRESSES
0062  00023 062003R       LDA N11       IS
0063  00024 164001        LDB B,I        DCB
0064  00025 055717        CPB XEQT        OPEN? 
0065  00026 002005        INA,RSS       YES; SKIP 
0066  00027 026103R       JMP EXIT      NO; EXIT
0067  00030 002004        INA           SET A= 9
0068  00031 166000R       LDB TYPE,I    IS FILE TYPE
0069  00032 006003        SZB,RSS        ZERO?
0070  00033 026103R       JMP EXIT      YES; EXIT 
0071  00034 046004R       ADB N3        IF TYPE 1 OR 2
0072  00035 062007R       LDA IRC       TEST FOR RECORD PRAM
0073  00036 006021        SSB,RSS       ELSE TEST 
0074  00037 062011R       LDA IOFF      FOR FULL PRAM 
0075  00040 002003        SZA,RSS        LIST 
0076  00041 026102R       JMP ER10      NOT ENOUGH PRAMS - EXIT 
0077  00042 006020        SSB           IF 1 OR 2 
0078  00043 026065R       JMP RCSET     GO SET RECORD NO. 

0080  00044 016005X       JSB LOCF      USE LOCF TO 
0081  00045 000052R       DEF LOCRT      GET
0082  00046 100005R       DEF DCB,I       CURRENT 
0083  00047 100006R       DEF ER,I         RELATIVE 
0084  00050 000000R       DEF RC            SECTOR
0085  00051 000116R       DEF CIRS           ADDRESS
0086  00052 006400  LOCRT CLB           CALL
0087  00053 062005R       LDA DCB       SKIP
0088  00054 016001X       JSB $KIP       TO 
0089  00055 026103R       JMP EXIT         SET UP NX$EC 
0090  00056 066116R       LDB CIRS      GET CURRENT BLOCK 
0091  00057 007004        CMB,INB        SUBTRACT FROM
0092  00060 146010R       ADB IRS,I     DESIRED BLOCK 
0093  00061 006003        SZB,RSS       IF ALREADY THERE
0094  00062 026065R       JMP RCSET     SKIP POSITION CALL
0095  00063 016002X       JSB NX$EC     POSITION WITH NX$EC 
0096  00064 026103R       JMP EXIT      ERROR - EXIT
0097  00065 066005R RCSET LDB DCB       GET DCB 
0098  00066 046114R       ADB .12       COMPUTE BUFFER POINTER ADDRESS
0099  00067 074000        STB A         SAVE
0100  00070 146011R       ADB IOFF,I    COMPUTE DESIREDED 
0101  00071 046113R       ADB .4        CONTENTS
0102  00072 174000        STB A,I       AND SET 
0103  00073 042001R       ADA .2        STEP TO THE RECORD ADDRESS







 PAGE 0004 #01


0104  00074 166007R       LDB IRC,I     SET RECORD NUMBER 
0105  00075 006002        SZB            ZERO 
0106  00076 006020        SSB             OR NEG
0107  00077 026110R       JMP ER12         EXIT ERROR 
0108  00100 174000        STB A,I       SET RECORD NUMBER 
0109  00101 002401        CLA,RSS       OK - EXIT 
0110  00102 062115R ER10  LDA N10 
0111  00103 006400  EXIT  CLB           CLEAR 
0112  00104 076007R       STB IRC        PRAM 
0113  00105 076011R       STB IOFF        ADDRESSES FOR NEXT TIME 
0114  00106 172006R       STA ER,I      SET ERROR CODE
0115  00107 126012R       JMP APOSN,I   RETURN. 


0117  00110 062112R ER12  LDA N12       SEND EOF ERROR
0118  00111 026103R       JMP EXIT


0120*     POST  CONSTANTS 

0122  00112 177764  N12   DEC -12 
0123  00113 000004  .4    DEC 4 
0124  00114 000014  .12   DEC 12
0125  00115 177766  N10   DEC -10 
0126  00116 000000  CIRS  NOP 


0128  00000         A     EQU 0 
0129  00001         B     EQU 1 
0130  01717         XEQT  EQU 1717B 

0132  00117         END   EQU * 

0134                      END 
**  NO ERRORS*





















$END ASMB     

*
--> Assemble fmp/29033-80004_Rev-A_4
ON,ASMB,99







 PAGE 0001


0001                ASMB,B,R,L,C
**  NO ERRORS*





























































 PAGE 0002 #01


0001                ASMB,B,R,L,C
0002  00000               NAM FCONT,7 
0003                      ENT FCONT 
0004                      EXT .ENTR,EXEC
0005* 
0006*     THIS IS THE TYPE ZERO CONTROL ROUTINE OF
0007*     THE RTE FILE MANAGEMENT PACKAGE.
0008* 
0009*     A STANDAD  RTE  CONTROL  REQUEST IS ISSUED
0010*     TO THE  DEVICE  VIA  THE EXEC  IF THE 
0011*     PCB  IS  OPEN  TO A TYPE  ZERO FILE.
0012*     CALLING  SEQUENCE 
0013*     CALL FCONT(IDCB,IERR,ICON1,ICON2) 
0014*       WHERE:
0015*         IDCB   IS THE DATA CONTROL BLOCK FOR
0016*                 THE FILE. 
0017*         IERR   IS THE LOCATION FOR RETURNED 
0018*                 ERRORS. 
0019*                 POSSIBLE ERRORS ARE:
0020*              0 NO  ERRORS 
0021*              -11 DCB NOT OPEN 
0022*              -12       EOF SENSED 
0023*              >0  NOT A TYPE ZERO FILE (IERR=TYPE) 
0024*     ICON1   IS CONTROL WORD #1 - THE DEVICE 
0025*              LU IS MURGED INTO THE LOW
0026*              6 BITS  OF  THIS WORD
0027*     ICON2   IS CONTROL WORD TWO - OPTIONAL
0028*               ZERO  IS USED IF NOT SPECIFIED
0029*     ON   RETURN     A =  IERR 
0030*                     B =  DEVICE STATUS



0032*     PRE  CONSTANT  AREA 
0033  00000 000002  .2    OCT 2 
0034  00001 000003  .3    OCT 3 
0035  00002 000000  TYPE  NOP 
0036  00003 000007  .7    OCT 7 



0038  00004 000037R IDCB  DEF ZERO      PARAMETER 
0039  00005 000037R IERR  DEF ZERO       ADDRESS
0040  00006 000037R ICON1 DEF ZERO        AREA
0041  00007 000037R ICON2 DEF ZERO

0043  00010 000000  FCONT NOP           ENTRY POINT 
0044  00011 016001X       JSB .ENTR      FETCH PARAMETERS 
0045  00012 000004R       DEF IDCB
0046  00013 066004R       LDB IDCB      GET DCB 
0047  00014 046000R       ADB .2         ADDRESS
0048  00015 076002R       STB TYPE        OF TYPE 
0049  00016 046003R       ADB .7           AND
0050  00017 164001        LDB B,I           OPEN FLAG 
0051  00020 055717        CPB XEQT      OPEN? 
0052  00021 026042R       JMP OK        YES, CONTINUE 







 PAGE 0003 #01


0053  00022 062035R       LDA N11       NO; SEND NOT OPEN ERROR 
0054  00023 172005R EXIT  STA IERR,I    TO CALLER 
0055  00024 066036R       LDB DZERO     RESET 
0056                X     REP 4         ENTRY 
0057  00025 076004R       STB *-X+IDCB  ADDRESS 
0057  00026 076005R       STB *-X+IDCB  ADDRESS 
0057  00027 076006R       STB *-X+IDCB  ADDRESS 
0057  00030 076007R       STB *-X+IDCB  ADDRESS 
0058  00031 006400        CLB           CLEAR DUMMY 
0059  00032 076037R       STB ZERO      ZERO
0060  00033 066040R       LDB STAT      STATUS TO B AND 
0061  00034 126010R       JMP FCONT,I   RETURN


0063*     MID  CONSTANT  AREA 

0065  00035 177765  N11   DEC -11 
0066  00036 000037R DZERO DEF ZERO
0067  00037 000000  ZERO  NOP 
0068  00040 000000  STAT  NOP 

0070  00041 000077  B77   OCT 77



0072  00042 162002R OK    LDA TYPE,I    GET FILE TYPE 
0073  00043 002002        SZA           ZERO? 
0074  00044 026023R       JMP EXIT      NO;  EXIT : TYPE IN A 

0076  00045 036002R       ISZ TYPE      YES;  STEP  TO  WORD  WITH LU 
0077  00046 162002R       LDA TYPE,I    GET LU
0078  00047 012041R       AND B77        AND ISOLATE  THEN
0079  00050 070001        STA B         SAVE
0080  00051 162006R       LDA ICON1,I   GET THE FUNCTION
0081  00052 012067R       AND B1777     MAKE SURE THE LOW END IS ZERO 
0082  00053 030001        IOR B         PUT THEM TOGETHER 
0083  00054 072006R       STA ICON1     SET FOR CALL
0084  00055 016002X       JSB EXEC      CALL EXEC TO
0085  00056 000062R       DEF EXRTN      DO 
0086  00057 000001R       DEF .3          THE 
0087  00060 000006R       DEF ICON1        CONTROL
0088  00061 100007R       DEF ICON2,I       FUNCTION
0089  00062 072040R EXRTN STA STAT      SAVE STATUS FOR RETURN
0090  00063 012070R       AND B200      MASK  EOF  BIT
0091  00064 002002        SZA           EOF ? 
0092  00065 062071R       LDA N12       YES; SEND EOF CONDITION 
0093  00066 026023R       JMP EXIT      GO; EXIT



0095*     POST   CONSTANT AREA

0097  00067 177700  B1777 OCT 177700
0098  00070 000200  B200  OCT 200 
0099  00071 177764  N12   DEC -12 








 PAGE 0004 #01


0101  00000         A     EQU 0 
0102  00001         B     EQU 1 
0103  01717         XEQT  EQU 1717B 

0105  00072         END   EQU * 

0107                      END 
**  NO ERRORS*
















































$END ASMB     

*
--> Assemble fmp/29033-80004_Rev-A_5
ON,ASMB,99







 PAGE 0001


0001                ASMB,B,R,L,C
**  NO ERRORS*





























































 PAGE 0002 #01


0001                ASMB,B,R,L,C
0002  00000               NAM LOCF,7
0003                      ENT LOCF
0004                      EXT P.PAS,.ENTR 


0006* 
0007* 
0008*     LOCF     RETURNS THE CURRENT STATUS OF A
0009*              RTE FILE TO THE CALLER.
0010* 

0012* 
0013*     THE FORTRAN CALLING SEQUENCE IS:
0014* 

0016*     CALL LOCF(IDCB,IERR,IREC,IRS,IOFF,JSEC,JLU,JTY,JREC)
0017* 

0019* 
0020*     W H E R E:
0021* 

0023*     IDCB     IS THE DATA CONTROL BLOCK FOR THE FILE.
0024* 
0025*     IERR     IS THE ERROR CODE RETURN.
0026*              POSSIBLE CODES ARE:
0027*            0  -  NO ERROR 
0028*          -11  -  DCB NOT OPEN 
0029*          -10  -  NOT ENOUGH PARAMETERS
0030* 
0031*     IREC     IS THE RECORD NUMBER OF THE NEXT RECORD. 
0032* 
0033*     IRS      IS THE RELATIVE SECTOR OF THE NEXT RECORD./2 
0034* 
0035*     IOFF     IS THE OFFSET IN THE SECTOR OF THE NEXT RECORD.
0036* 
0037*     JSEC     IS THE NO. OF SECTORS IN THE FILE (OR EXTENT). 
0038* 
0039*     JLU      IS THE FILE'S LOGICAL UNIT.
0040* 
0041*     JTY      IS THE FILE'S TYPE.
0042* 
0043*     JREC     IS THE RECORD SIZE.
0044* 

0046*     ALL PARAMETERS AFTER IREC ARE OPTIONAL. 
0047* 















 PAGE 0003 #01


0049  00000 000000  DCB   NOP 
0050  00001 000157R IER   DEF DM
0051  00002 000157R IREC  DEF DM
0052  00003 000157R IRS   DEF DM
0053  00004 000157R IOFF  DEF DM
0054  00005 000157R JSEC  DEF DM
0055  00006 000157R JLU   DEF DM
0056  00007 000157R JTY   DEF DM
0057  00010 000157R JREC  DEF DM
0058  00011 000000  LOCF  NOP           ENTRY 
0059  00012 016002X       JSB .ENTR     GET 
0060  00013 000000R DFDCB DEF DCB       PARAMETERS ADDRESSES
0061  00014 062152R       LDA N10       NOT ENOUGH
0062  00015 066002R       LDB IREC      PRAM
0063  00016 056156R       CPB DFDM      TEST
0064  00017 026051R       JMP EXIT      NOT ENOUGH - EXIT 
0065  00020 062000R       LDA DCB       SET A TO GET DCB
0066  00021 006700        CLB,CCE       SET TO GET
0067  00022 005540        ERB,CLE       ACTUAL WORDS
0068  00023 016001X       JSB P.PAS     CALL TO PASS
0069  00024 177760  N16   DEC -16       DCB 
0070  00025 000000  LU    NOP            PARAMETERS 
0071  00026 000000  AD    NOP 
0072  00027 000000  TYP   NOP 
0073  00030 000000  TRK   NOP 
0074  00031 000000  SEC   NOP 
0075  00032 000000  #SEC  NOP 
0076  00033 000000  SIZE  NOP 
0077  00034 000000  COUNT NOP 
0078  00035 000000  SEC/T NOP 
0079  00036 000000  OPCLS NOP 
0080  00037 000000  CTRK  NOP 
0081  00040 000000  CSEC  NOP 
0082  00041 000000  BUFPT NOP 
0083  00042 000000  TMP   NOP 
0084  00043 000000  REC   NOP 
0085  00044 000000  EXNO  NOP 
0086  00045 066036R       LDB OPCLS     IS
0087  00046 062153R       LDA N11        FILE 
0088  00047 055717        CPB XEQT        OPEN? 
0089  00050 026064R       JMP OK           YES; JUMP
0090  00051 172001R EXIT  STA IER,I     NO; SET EXIT CODE 
0091  00052 066154R       LDB N9        SET UP
0092  00053 076034R       STB COUNT      AND
0093  00054 066013R       LDB DFDCB       RESTORE 
0094  00055 076026R       STB AD           DUMMY
0095  00056 066156R       LDB DFDM          PARAMETER 
0096  00057 176026R       STB AD,I           ADDRESSES
0097  00060 036026R       ISZ AD
0098  00061 036034R       ISZ COUNT           IN
0099  00062 026057R       JMP *-3              CALL 
0100  00063 126011R       JMP LOCF,I    EXIT



0102  00064 066043R OK    LDB REC       GET AND 







 PAGE 0004 #01


0103  00065 176002R       STB IREC,I    SET RECORD NO.
0104  00066 066032R       LDB #SEC      SET 
0105  00067 176005R       STB JSEC,I    THE FILE SIZE IN SECTORS
0106  00070 062027R       LDA TYP       GET THE TYPE
0107  00071 003007        CMA,INA,SZA,RSS    SET NET AND TEST FOR ZERO
0108  00072 026135R       JMP TYPST     ZERO SO JUMP
0109  00073 042151R       ADA .2        IF THREE OR GREATER 
0110  00074 002020        SSA           THEN
0111  00075 026110R       JMP NOTRA     JUMP  NOT RANDOM ACCESS 
0112  00076 003400        CCA           COMPUTE THE OFFSET
0113  00077 040001        ADA B         AND  BLOCK
0114  00100 100200        MPY SIZE      FOR 
      00101 000033R 
0115  00102 072042R       STA TMP       TYPE
0116  00103 012150R       AND B177      ONE AND 
0117  00104 172004R       STA IOFF,I    TWO 
0118  00105 022042R       XOR TMP       FILES 
0119  00106 101027        ASR 7         NOW 
0120  00107 026134R       JMP STRS      GO STORE IT 
0121  00110 062000R NOTRA LDA DCB       COMPUTE 
0122  00111 003004        CMA,INA       CURRENT 
0123  00112 042041R       ADA BUFPT     BUFFER OFFSET 
0124  00113 042024R       ADA N16       ADJUST FOR BUFFER ADDRESS 
0125  00114 172004R       STA IOFF,I    RETURN OFFSET 
0126  00115 062032R       LDA #SEC      GET AND 
0127  00116 100200        MPY EXNO      COMPUTE EXTENT OFFSET 
      00117 000044R 
0128  00120 072042R       STA TMP         AND SAVE
0129  00121 062030R       LDA TRK       COMPUTE RELATIVE
0130  00122 003004        CMA,INA       SECTOR
0131  00123 042037R       ADA CTRK      CTRK-TRK
0132  00124 100200        MPY SEC/T     (CTRK-TRK)*#SEC/TRACK 
      00125 000035R 
0133  00126 066031R       LDB SEC 
0134  00127 007004        CMB,INB 
0135  00130 040001        ADA B         (CTRK-TRK)*#S/TR-SEC
0136  00131 042040R       ADA CSEC      (CTRK-TRK)*#S/TR-SEC+CSEC 
0137  00132 042042R       ADA TMP       ADD #SECTORS IN PREVIOUS EXTENTS
0138  00133 001100        ARS           DIVIDE BY TWO 
0139  00134 172003R STRS  STA IRS,I     AND PASS TO CALLER
0140  00135 066027R TYPST LDB TYP       GET AND SET 
0141  00136 176007R       STB JTY,I     TYPE
0142  00137 062025R       LDA LU        GET LU (DISC FILE)
0143  00140 006003        SZB,RSS       IS IT A DISC FILE?
0144  00141 062030R       LDA TRK       NO; USE TYPE 0 LU 
0145  00142 012155R       AND B77       MASK
0146  00143 172006R       STA JLU,I     AND SET 
0147  00144 062033R       LDA SIZE      GET THE RECORD
0148  00145 172010R       STA JREC,I    SIZE AND SET IT 
0149  00146 002400        CLA           NO ERRORS 
0150  00147 026051R       JMP EXIT      RETURN




0152  00150 000177  B177  OCT 177 







 PAGE 0005 #01


0153  00151 000002  .2    DEC 2 
0154  00152 177766  N10   DEC -10 
0155  00153 177765  N11   DEC -11 
0156  00154 177767  N9    DEC -9
0157  00155 000077  B77   OCT 77
0158  00156 000157R DFDM  DEF *+1 
0159  00157 000000  DM    NOP 
0160  00000         A     EQU 0 
0161  00001         B     EQU 1 
0162  01717         XEQT  EQU 1717B 

0164  00160         END   EQU * 

0166                      END 
**  NO ERRORS*









































$END ASMB     

*
--> Assemble fmp/29033-80005_Rev-A_1
ON,ASMB,99







 PAGE 0001


0001                ASMB,B,R,L,C
**  NO ERRORS*





























































 PAGE 0002 #01


0001                ASMB,B,R,L,C
0002  00000               NAM CLOSE,7 
0003                      ENT CLOSE 
0004                      EXT EXEC,.ENTR,R/W$ 
0005                      SUP 
0006* 
0007*  THIS IS THE CLOSE SUBROUTINE--A PART OF THE
0008*  REAL-TIME FILE MANAGEMENT PACKAGE
0009* 
0010*  THE ASSEMBLY CALL TO CLOSE A FILE IS:
0011* 
0012*     JSB CLOSE 
0013*     DEF RTN       RETURN ADDRESS
0014*     DEF IDCB      DATA CONTROL BLOCK ADDRESS
0015*     DEF IERR      (OPTIONAL) ERROR CODE RETURNED HERE AND IN A REG
0016*     DEF IRX       (OPTIONAL) NO. OF 128 WORD DOUBLE 
0017*RTN                SECTORS TO BE DELETED FROM THE FILE 
0018* 
0019*     ERRORS ARE: 
0020*     0       NONE
0021*    -1       DISC DOWN 
0022*    -10      NOT ENOUGH PARAMETERS 
0023*    -11      FILE NOT OPEN 
0024*    -13      DISC LOCKED 
0025* 
0026* 
0027* 




































 PAGE 0003 #01


0029  00000 000103R IDCB  DEF ZERO      DCB ADDRESS 
0030  00001 000000R IERR  DEF IDCB      ERROR CODE ADDRESS
0031  00002 000103R IRX   DEF ZERO      TRUNICATE CODE ADDRESS

0033  00003 000000  CLOSE NOP           ENTRY POINT 
0034  00004 016002X       JSB .ENTR     TRANSFER THE ADDRESSES
0035  00005 000000R DM    DEF IDCB
0036  00006 062000R       LDA IDCB      IF NO PARAMETERS
0037  00007 052055R       CPA DZ        THEN
0038  00010 026072R       JMP ER10      ERROR EXIT
0039  00011 002004        INA           STEP TO WORD TWO
0040  00012 072054R       STA DCB2      SAVE FOR D.RTR CALL 
0041  00013 042076R       ADA .8        ADD 8 TO GET THE THE OPEN FLAG
0042  00014 072102R       STA OPNFL     SAVE THE OPEN FLAG ADDRESS
0043  00015 164000        LDB A,I       GET THE OPEN FLAG 
0044  00016 042075R       ADA N2        BACK UP TO THE
0045  00017 072101R       STA SC        SAVE THE SECURITY CODE ADDRESS
0046  00020 055717        CPB XEQT      FILE OPEN?
0047  00021 002101        CLE,RSS       YES SKIP
0048  00022 026071R       JMP ER11      NO; ERROR EXIT
0049  00023 066000R       LDB IDCB      GET THE DCB ADDRESS 
0050  00024 016003X       JSB R/W$      CALL TO FLUSH THE BUFFER
0051  00025 026062R       JMP EXIT      DISC ERROR EXIT 
0052  00026 066054R       LDB DCB2      GET THE TYPE FLAG 
0053  00027 006004        INB           TO
0054  00030 160001        LDA B,I       A 
0055  00031 002002        SZA           IF ZERO NO TRUNCATE 
0056  00032 162002R       LDA IRX,I     DISC FILE SET TRUNCATE CODE 
0057  00033 001000        ALS           ADJUST FOR 64 WORD SECTORS
0058  00034 046100R       ADB .13       STEP TO EXTENT WORD 
0059  00035 164001        LDB B,I       IF NOT
0060  00036 006002        SZB           FIRST EXTENT
0061  00037 002400        CLA           DO NOT ALLOW TRUNCATION 
0062  00040 166101R       LDB SC,I      GET THE SECURITY FLAG 
0063  00041 006021        SSB,RSS       IF BAD SC 
0064  00042 002400        CLA           DIS ALLOW TRUNCATION
0065  00043 003004        CMA,INA       SET NEGATIVE
0066  00044 072002R       STA IRX       SAVE
0067  00045 016001X SCHED JSB EXEC      CALL EXEC 
0068  00046 000056R       DEF SCHRT     TO
0069  00047 000077R       DEF .9        SCHEDULE WITH WAIT
0070  00050 000104R       DEF D.RTR     D.RTR 
0071  00051 001717        DEF XEQT      WITH THE ID 
0072  00052 000002R       DEF IRX       THE TRUNCATE WORD 
0073  00053 100000R       DEF IDCB,I    THE FIRST DCB WORD
0074  00054 000000  DCB2  NOP           THE SECOND DCB WORD 
0075  00055 000103R DZ    DEF ZERO      AND THE CLOSE CODE
0076  00056 002002  SCHRT SZA           SCHEDULE OK 
0077  00057 026045R       JMP SCHED     NO; TRY AGAIN 


0079  00060 172102R       STA OPNFL,I   CLEAR THE OPEN FLAG 
0080  00061 160001        LDA B,I       YES; GET ERROR RETURN 
0081  00062 172001R EXIT  STA IERR,I    SET THE ERROR CODE
0082  00063 066005R       LDB DM        RESET 
0083  00064 076001R       STB IERR      THE CALL WORDS







 PAGE 0004 #01


0084  00065 066055R       LDB DZ        FOR THE 
0085  00066 076002R       STB IRX       NEXT CALL 
0086  00067 076000R       STB IDCB      AND 
0087  00070 126003R       JMP CLOSE,I   EXIT ERROR CODE IN A



0089  00071 003400  ER11  CCA           FILE NOT OPEN - ERROR 11
0090  00072 042074R ER10  ADA N10       NOT ENOUGH PRAMS - ERROR 10 
0091  00073 026062R       JMP EXIT      GO EXIT 



0093  00074 177766  N10   DEC -10 
0094  00075 177776  N2    DEC -2
0095  00076 000010  .8    DEC 8 
0096  00077 000011  .9    DEC 9 
0097  00100 000015  .13   DEC 13
0098  00101 000000  SC    NOP 
0099  00102 000000  OPNFL NOP 
0100  00103 000000  ZERO  NOP 
0101  00104 042056  D.RTR ASC 3,D.RTR 





0104  00000         A     EQU 0 
0105  00001         B     EQU 1 
0106  01717         XEQT  EQU 1717B 

0108  00107         END   EQU * 

0110                      END 
**  NO ERRORS*





















$END ASMB     

*
--> Assemble fmp/29033-80005_Rev-A_2
ON,ASMB,99







 PAGE 0001


0001                ASMB,B,R,L,C
**  NO ERRORS*





























































 PAGE 0002 #01


0001                ASMB,B,R,L,C
0002  00000               NAM NAM..,6 
0003                      ENT NAM.. 
0004                      EXT $LIBR,$LIBX,.ENTP 



0006*     THIS ROUTINE CHECK FOR A LEGAL FILE NAME
0007*     CALLING SEQUENCE: 
0008* 
0009*     JSB NAM.. 
0010*     DEF *+2 
0011*     DEF NAME
0012* 
0013*     ON RETURN A=0 IF A LEGAL NAME  -15 IF NOT LEGAL 
0014* 
0015*     LEGAL NAMES MUST START WITH A NON NUMERIC NON BLANK 
0016*     ASCII CHARACTER 
0017*     AND MUST NOT CONTAIN +, OR - AS ANY CHARACTER 



0019  00000 000000  NAME  NOP           ADDRESS OF THE NAME 
0020  00001 000000  NAM.. NOP           ENTRY POINT 
0021  00002 016001X       JSB $LIBR     PRIVLEDGED
0022  00003 000000        NOP 
0023  00004 016003X       JSB .ENTP     GET THE PRAMS 
0024  00005 000000R       DEF NAME
0025  00006 066072R       LDB N6        SET TO CHECK
0026  00007 076061R       STB COUNT      6 CHARACTERS 
0027  00010 066000R       LDB NAME
0028  00011 005200        RBL 
0029  00012 162000R       LDA NAME,I    DO SPECIAL EXTRA CHECK
0030  00013 001767        ALF,CLE,ALF    ON 
0031  00014 012067R       AND B377        FIRST CHARACTER 
0032  00015 042071R       ADA N60B       IF NUMERIC OR BLANK
0033  00016 002240        SEZ,CME         THEN
0034  00017 042073R       ADA N10          TAKE 
0035  00020 002040        SEZ               THE 
0036  00021 052070R       CPA N20B          ERR 
0037  00022 026053R       JMP ER15           EXIT 
0038  00023 004065  CREA1 CLE,ERB        GET THE NAME ADDRESS 
0039  00024 160001        LDA B,I        GET A NAME WORD
0040  00025 005600        ELB           RESTORE ADDRESS FOR NEXT TIME 
0041  00026 006015        SLB,INB,RSS   INCREMENT SKIP IF ODD ELSE
0042  00027 001727        ALF,ALF        ROTATE 
0043  00030 012067R       AND B377        MASK IT 
0044  00031 052062R       CPA COLON     IF COLON
0045  00032 002400        CLA           FOURCE ERROR
0046  00033 042066R       ADA N40B      BETWEEN " " 
0047  00034 002003        SZA,RSS       IF BLANK THEN 
0048  00035 026056R       JMP BLNK      TAKE NOTE 
0049  00036 002240        SEZ,CME        AND
0050  00037 042065R       ADA N13B        "*" 
0051  00040 002141        SEZ,CLE,RSS      INCLUSIVE? 
0052  00041 026045R       JMP CREA2         YES - OK







 PAGE 0003 #01


0053  00042 042064R       ADA N3        NO;  BETWEEN
0054  00043 002240        SEZ,CME        "." AND
0055  00044 042063R       ADA N62B        "_" 
0056  00045 036000R CREA2 ISZ NAME      CHARACTER AFTER BLANK?? 
0057  00046 002040        SEZ           NO; LEGAL OTHER WISE??
0058  00047 026053R       JMP ER15      NO GO TAKE ERROR EXIT 
0059  00050 036061R CREA3 ISZ COUNT      DONE?
0060  00051 026023R       JMP CREA1       NO; DO NEXT CHARACTER 
0061  00052 002401        CLA,RSS       GOOD NAME EXIT
0062  00053 062074R ER15  LDA N15       ERROR EXIT
0063  00054 016002X       JSB $LIBX 
0064  00055 000001R       DEF NAM.. 

0066  00056 003400  BLNK  CCA           SET BLANK FLAG
0067  00057 072000R       STA NAME      SO WE CAN DETECT
0068  00060 026050R       JMP CREA3     INBEDDED BLANKS 


0070  00061 000000  COUNT NOP 
0071  00062 000072  COLON OCT 72
0072  00063 177716  N62B  OCT -62 
0073  00064 177775  N3    DEC -3
0074  00065 177765  N13B  OCT -13 
0075  00066 177740  N40B  OCT -40 
0076  00067 000377  B377  OCT 377 
0077  00070 177760  N20B  OCT -20 
0078  00071 177720  N60B  OCT -60 
0079  00072 177772  N6    DEC -6
0080  00073 177766  N10   DEC -10 
0081  00074 177761  N15   DEC -15 
0082  00000         A     EQU 0 
0083  00001         B     EQU 1 
0084                      END 
**  NO ERRORS*






















$END ASMB     

*
--> Assemble fmp/29033-80005_Rev-A_3
ON,ASMB,99







 PAGE 0001


0001                ASMB,B,R,L,C
**  NO ERRORS*





























































 PAGE 0002 #01


0001                ASMB,B,R,L,C
0002  00000               NAM $OPEN,7 
0003                      EXT EXEC
0004                      EXT RWND$ 
0005                      ENT $OPEN 
0006                      SUP 
0007* 
0008*  $OPEN   IS A ROUTINE OF THE RTE FILE MANAGEMENT PACKAGE. 
0009* 
0010*  $OPEN   IS CALLLED BY OPEN AND CREAT TO SET UP THE 
0011*          DCB.  IT READS THE DIRECTORY INFORMATION 
0012*          AND TRANSFERS THE INFORMATION FROM THERE 
0013*          TO THE DCB.  IT ALSO INITIALIZES THE REST
0014*          OF THE DCB.
0015* 
0016*   CALLING SEQUENCE: 
0017*        (IT IS ASSUMED THAT WORDS 1 & 2 OF THE DCB ARE SET UP.)
0018* 
0019*     A  =  DCB ADDRESS 
0020*     B  =  SECURITY CODE (EXPECTED)
0021*     E  =  1 IF TYPE 1 OVERRIDE
0022*     O  =  1 IF AN UPDATE OPEN 
0023* 
0024*     JSB $OPEN 
0025*     DEF #SECT     DEF OF WORD CONTAINING #SEC/TRACK 
0026*                   IN THE HIGH HALF (PASSED FROM D.RTR)
0027*     JMP ERR       ERROR RETURN
0028*                   NORMAL RETURN 
0029*     ON A NORMAL RETURN: 
0030*        A = FILE SECURITY CODE 
0031*       B = SECURITY CODE/UPDATE FLAG 
0032* 
0033*     ON AN ERROR RETURN, EITHER
0034*       A = -1  DISC ERROR OR 
0035*       A = -9  TYPE ZERO OVERRIDE ERROR
0036*         IN EITHER CASE THE DCB IS NOT SET UP. 
0037* 
0038* 
0039  00000 000000  $OPEN NOP           ENTRY 
0040  00001 076134R       STB SC        SAVE THE SECURITY CODE
0041  00002 006020        SSB           IF NEGATIVE 
0042  00003 007004        CMB,INB       SET POS 
0043  00004 076133R       STB SC2       AND SAVE
0044  00005 072135R       STA DCB       AND THE DCB ADDRESS 
0045  00006 072136R       STA DCB2
0046  00007 160000        LDA A,I       GET THE DIRECTORY 
0047  00010 012141R       AND B77        ADDRESS
0048  00011 072137R       STA LU          AND SET 
0049  00012 122135R       XOR DCB,I        TO 
0050  00013 001727        ALF,ALF           READ
0051  00014 001222        RAL,RAL            THE
0052  00015 072140R       STA TRACK           DIRECTORY 
0053  00016 036135R       ISZ DCB              BLOCK
0054  00017 162135R       LDA DCB,I     GET THE SECTOR
0055  00020 012142R       AND B377       MASK 
0056  00021 072143R       STA SECT        AND 







 PAGE 0003 #01


0057  00022 122135R       XOR DCB,I        SET
0058  00023 001727        ALF,ALF           GET THE 
0059  00024 066135R       LDB DCB            OFFSET 
0060  00025 046145R       ADB .15             AND 
0061  00026 076044R       STB BUF              COMPUTE BUFFER ADDRESS 
0062  00027 046146R       ADB .3                AND 
0063  00030 044000        ADB A                  OFFSET 
0064  00031 076147R       STB PRMA                TO
0065  00032 036135R       ISZ DCB                  THE PRAMS
0066  00033 006444        CLB,SEZ,INB      IF TYPE 1 OVERRIDE 
0067  00034 176135R       STB DCB,I         SET TYPE
0068  00035 002040        SEZ                 AND 
0069  00036 007400        CCB                  THE
0070  00037 076150R       STB TPFLG             OVERRIDE SKIP FLAG
0071  00040 016001X       JSB EXEC      READ
0072  00041 000050R       DEF RTN        THE
0073  00042 000151R       DEF .1          BLOCK 
0074  00043 000137R       DEF LU          TO
0075  00044 000000  BUF   NOP               THE 
0076  00045 000152R       DEF .128           DCB
0077  00046 000140R       DEF TRACK 
0078  00047 000143R       DEF SECT
0079  00050 003400  RTN   CCA           SET A FOR DISC ERROR
0080  00051 056152R       CPB .128      DISC ERROR? 
0081  00052 006401        CLB,RSS       NO SKIP 
0082  00053 026131R       JMP EREX      EXIT - ERROR
0083  00054 042044R       ADA BUF       COMPUTE THE EXTENT ADDRESS
0084  00055 174000        STB A,I       AND SET THE EXTENT TO ZERO
0085  00056 062144R       LDA N9
0086  00057 166147R       LDB PRMA,I    GET FILE TYPE 
0087  00060 006003        SZB,RSS       IF ZERO 
0088  00061 036150R       ISZ TPFLG      AND OVERRIDE FLAG SET
0089  00062 002001        RSS 
0090  00063 026131R       JMP EREX      EXIT - ERROR

0092  00064 066153R       LDB N5        OF - SET TO MOVE 5
0093  00065 162147R NXT   LDA PRMA,I     PARAMETERS 
0094  00066 036150R       ISZ TPFLG     IF OVERRIDE SET SKIP
0095  00067 172135R       STA DCB,I     SET PARAMETER 
0096  00070 036135R       ISZ DCB       STEP ADDRESS
0097  00071 036147R       ISZ PRMA      STEP SOURCE 
0098  00072 006006        INB,SZB       AND COUNT - DONE? 
0099  00073 026065R       JMP NXT       NO; DO NEXT ONE 
0100  00074 162147R       LDA PRMA,I
0101  00075 002102        CLE,SZA 
0102  00076 052134R       CPA SC
0103  00077 002300        CCE           MATCH SO SET E
0104  00100 052133R       CPA SC2       MATCH WITH POS OF NEG 
0105  00101 002300        CCE           YES SO SET E
0106  00102 005500        ERB           MATCH - SET FLAG
0107  00103 102201        SOC           SET UPDATE
0108  00104 006004        INB           FLAG
0109  00105 176135R       STB DCB,I     SET IN DCB
0110  00106 076134R       STB SC        SAVE SECURITY CODE
0111  00107 036135R       ISZ DCB       SET NUMBER OF SECTORS / TRACK AD
0112  00110 166000R       LDB $OPEN,I   GET THE WORD







 PAGE 0004 #01


0113  00111 164001        LDB B,I       FROM THE CALL 
0114  00112 101050        LSR 8         SET TO LOW B
0115  00113 176135R       STB DCB,I     PUT IT IN THE DCB 
0116  00114 036000R       ISZ $OPEN     STEP RETURN ADDRESS 
0117  00115 002400        CLA           OPEN EXTENT ZERO
0118  00116 066136R       LDB DCB2      GET THE DCB ADDRESS 
0119  00117 016002X       JSB RWND$     SET REST OF DCB 
0120  00120 126000R       JMP $OPEN,I   ERROR EXIT
0121  00121 046154R       ADB N2        SET B TO THE RECORD NO ADDRESS
0122  00122 002404        CLA,INA       SET THE RECORD NO 
0123  00123 170001        STA B,I       TO 1. 
0124  00124 036135R       ISZ DCB       STEP TO THE OPEN FLAG ADDRESS 
0125  00125 061717        LDA XEQT      GET THE CURRENT ID ADDRESS
0126  00126 172135R       STA DCB,I     SET THE OPEN FLAG 
0127  00127 162147R       LDA PRMA,I      RESTORE SECURITY CODE 
0128  00130 066134R       LDB SC        AND MATCH - UPDATE FLAG 
0129  00131 036000R EREX  ISZ $OPEN     STEP AND
0130  00132 126000R       JMP $OPEN,I   AND RETURN



0132  00133 000000  SC2   NOP 
0133  00134 000000  SC    NOP 
0134  00135 000000  DCB   NOP 
0135  00136 000000  DCB2  NOP 
0136  00137 000000  LU    NOP 
0137  00140 000000  TRACK NOP 
0138  00141 000077  B77   OCT 77
0139  00142 000377  B377  OCT 377 
0140  00143 000000  SECT  NOP 
0141  00144 177767  N9    DEC -9
0142  00145 000017  .15   DEC 15
0143  00146 000003  .3    DEC 3 
0144  00147 000000  PRMA  NOP 
0145  00150 000000  TPFLG NOP 
0146  00151 000001  .1    DEC 1 
0147  00152 000200  .128  DEC 128 
0148  00153 177773  N5    DEC -5
0149  00154 177776  N2    OCT -2


0151  01717         XEQT  EQU 1717B 
0152  00000         A     EQU 0 
0153  00001         B     EQU 1 

0155  00155         END   EQU * 

0157                      END 
**  NO ERRORS*







$END ASMB     

*
--> Assemble fmp/29033-80005_Rev-A_4
ON,ASMB,99







 PAGE 0001


0001                ASMB,B,R,L,Z,C
**  NO ERRORS*





























































 PAGE 0002 #01


0001                ASMB,B,R,L,Z,C
0002                      IFN 
0003                      NAM P.PAS,6 
0004                      EXT $LIBR,$LIBX 
0005                      XIF 
0006                      IFZ 
0007  00000               NAM P.PAS,7 
0008                      ENT P.PAS 
0009                      XIF 
0010*  P.PAS IS USED TO SET UP ADDRESS OR TO MOVE 
0011*  INFORMATION FROM THE CALL AREA 
0012* 
0013*     CALLING SEQUENCE: 
0014* 
0015*     E=0     SET UP CALL AREA
0016*     E=1     MOVE FROM CALL AREA 
0017*     B=0     SET ADDRESSES ONLY
0018*     B=100000   MOVE PARAMETERS
0019*     A   =   ADDRESS OF OTHER AREA OR FIRST ADDRESS
0020* 
0021*     JSB P.PAS 
0022*     DEC -N        N= NO. OF WORDS TO BE SET UP
0023*     BSS N         CALL AREA BUFFER
0024*                   IF B IS 0, THIS WILL BE A 
0025*                   LIST OF ADDRESSES; IF B=100000, 
0026*                   THIS WILL BE THE WORDS AT THE 
0027*                   ADDRESS PROVIDED IN A.
0028* 
0029* 
0030  00000 000000  P.PAS NOP 
0031                      IFN 
0032                      JSB $LIBR     CALL FOR PRIVILEGE
0033                      NOP 
0034                      XIF 
0035  00001 046025R       ADB LOAD      CONFIGURE THE LOAD
0036  00002 076012R       STB NEXT      AND SET IT
0037  00003 166000R       LDB P.PAS,I   GET THE COUNT 
0038  00004 076023R       STB COUNT     AND SET 
0039  00005 036000R       ISZ P.PAS     STEP TO PRAM AREA 
0040  00006 066000R       LDB P.PAS     ADDRESS TO B
0041  00007 002040        SEZ           IF FROM 
0042  00010 101100        SWP           SWAP ADDRESSES
0043  00011 076024R       STB DEST      SAVE THE DESTINATION ADDRESS
0044  00012 064000  NEXT  LDB A         GET ADDRESS OR IF LDB A,I 
0045  00013 176024R       STB DEST,I    A WORD - SET IF 
0046  00014 036024R       ISZ DEST      STEP DESTINATION
0047  00015 002004        INA           STEP FROM 
0048  00016 036023R       ISZ COUNT     STEP COUNT - DONE?
0049  00017 026012R       JMP NEXT      NO; GET NEXT ONE
0050                      IFZ 
0051  00020 002040        SEZ           YES; EXIT TO
0052  00021 124000        JMP A,I       END OF CALL 
0053  00022 126024R       JMP DEST,I    SEQUENCE
0054                      XIF 
0055                      IFN 
0056                      SEZ,RSS       PRIVILEGE - COMPUTE 







 PAGE 0003 #01


0057                      LDA DEST      RETURN ADDRESS AND
0058                      STA P.PAS     SET IT
0059                      JSB $LIBX     CALL SYSTEM 
0060                      DEF P.PAS     TO RETURN 
0061                      XIF 





0063                      IFN 
0064                COUNT EQU P.PAS+2 
0065                      XIF 
0066                      IFZ 
0067  00023 000000  COUNT NOP 
0068                      XIF 
0069  00024 000000  DEST  NOP 
0070  00025 064000  LOAD  LDB A 
0071  00026 000000  TEST  NOP 


0073  00000         A     EQU 0 
0074  00001         B     EQU 1 
0075  00027         END EQU * 
0076                      END 
**  NO ERRORS*






























$END ASMB     

*
--> Assemble fmp/29033-80005_Rev-A_5
ON,ASMB,99







 PAGE 0001


0001                ASMB,B,L,R,C
**  NO ERRORS*





























































 PAGE 0002 #01


0001                ASMB,B,L,R,C
0002  00000               NAM RW$UB,7 
0003* 
0004*     RW$UB READS AND WRITES A WORD OR BLOCK OF WORDS ON A RTE FILE 
0005*     CALLING SEQUENCE: 
0006*     SET E=1  FOR READ 
0007*         E=0  FOR WRITE
0008*     LDA DCB       SET A TO DCB ADDRESS
0009*     LDB COUNT     SET B TO THE NO OF WORDS TO BE XFERED 
0010*     JSB RW$SUB    CALL
0011*     DEF BUF       BUFFER CONTAING (WRITE) OR RECIEVING (READ) 
0012*     JMP ERROR     ERROR RETURN  CODE IN A 
0013*     ---    NORMAL RETURN
0014* 
0015                      EXT RWND$,R/W$
0016                      EXT EXEC,P.PAS
0017                      ENT RFLG$ 
0018                      ENT RW$UB,NX$EC 
0019                      ENT $KIP
0020  00000 000000  RW$UB NOP           ENTRY 
0021  00001 007007        CMB,INB,SZB,RSS  SET NEGATIVE SKIP IF NOT ZERO
0022  00002 026044R       JMP ZER0      ZERO GO RETURN
0023  00003 076070R       STB COUNT       NEGATIVE
0024  00004 006441        CLB,SEZ,RSS          COUNTER
0025  00005 066032R       LDB RSS       SET READ/WRITE SWITCH 
0026  00006 076023R       STB NEXTW     RSS IF WRITE, ELSE NOP
0027  00007 016123R       JSB PRAM      GO GET THE PRAMETERS
0028  00010 042073R       ADA .128      CALCULATE 
0029  00011 003004        CMA,INA       THE # 
0030  00012 142143R       ADA BUFPT,I   OF REMAINING
0031  00013 072140R       STA LEFT      WORDS AND SET 
0032  00014 166143R       LDB BUFPT,I   GET THE POINTER TO B
0033  00015 062000R       LDA RW$UB     GET USER BUFFER 
0034  00016 160000        LDA A,I       GET ADDRESS 
0035  00017 001275        RAL,CLE,SLA,ERA   IF INDIRECT 
0036  00020 026016R       JMP *-2       TRY AGAIN 
0037  00021 036000R       ISZ RW$UB     STEP RETURN 
0038  00022 072136R       STA PTR       SET USER POINTER
0039  00023 002001  NEXTW RSS OR NOP IF WRIT
0040  00024 026065R       JMP READ      DO READ THING 
0041  00025 162136R       LDA PTR,I     WRITE; GET WORD 
0042  00026 170001        STA B,I       SET IT IN DCB 
0043  00027 036136R RDW   ISZ PTR       STEP POINTER
0044  00030 006004        INB           STEP DCB ADDRESS
0045  00031 036140R       ISZ LEFT      ANY ROOM LEFT?
0046  00032 002001  RSS   RSS           YES; SKIP 
0047  00033 026046R       JMP ENDBL     NO; GO WRITE IT OUT 
0048  00034 036070R CONT  ISZ COUNT     STEP WORD COUNT-DONE? 
0049  00035 026023R       JMP NEXTW     NO; DO NEXT WORD
0050  00036 176143R       STB BUFPT,I   RESET THE BUFFER POINTER
0051  00037 066023R       LDB NEXTW     IF WRITE
0052  00040 006002        SZB           THEN
0053  00041 176144R       STB FLAG,I    SET THE WRITTEN ON FLAG 
0054  00042 036000R EX    ISZ RW$UB     YES; STEP THE RETURN ADDRESS
0055  00043 126000R       JMP RW$UB,I   RETURN








 PAGE 0003 #01


0057  00044 036000R ZER0  ISZ RW$UB     STEP FOR GOOD RETURN
0058  00045 026042R       JMP EX        EXIT


0060  00046 166131R ENDBL LDB TYPE,I    IF TYPE TWO 
0061  00047 056243R       CPB .2        THEN
0062  00050 066070R       LDB COUNT     IF COUNT IS 
0063  00051 006007        INB,SZB,RSS   EXAUSTED
0064  00052 026034R       JMP CONT      JUST CONTINUE 
0065  00053 066023R       LDB NEXTW     GET THE READ WRITE FLAG 
0066  00054 006002        SZB           IF WRITE THEN 
0067  00055 176144R       STB FLAG,I    SET THE BIT IN THE DCB
0068  00056 006404        CLB,INB       SET FOR NEXT BLOCK
0069  00057 016151R       JSB NX$EC     GO GET IT 
0070  00060 126000R       JMP RW$UB,I   ERROR - RETURN
0071  00061 066072R       LDB N128      OK - RESET
0072  00062 076140R       STB LEFT      LEFT COUNTER
0073  00063 066071R       LDB BUFA      AND BUFFER POINTER
0074  00064 026034R       JMP CONT      AND CONTINUE

0076  00065 160001  READ  LDA B,I       GET THE WORD
0077  00066 172136R       STA PTR,I     SET IN USER BUFFER
0078  00067 026027R       JMP RDW       RETURN TO WRITE CODE


0080  00070 000000  COUNT NOP 
0081  00071 000000  BUFA  NOP 
0082  00072 177600  N128  DEC -128
0083  00073 000200  .128  DEC 128 


0085  00074 000000  $KIP  NOP           SKIP ENTRY
0086  00075 076070R       STB COUNT     SAVE THE WORD COUNT 
0087  00076 016123R       JSB PRAM      GO SET THE PRAMS
0088  00077 003004        CMA,INA       COMPUTE THE BUFFER
0089  00100 142143R       ADA BUFPT,I   OFFSET
0090  00101 042070R       ADA COUNT     ADD THE COUNT 
0091  00102 070001        STA B         SET UP FOR DIVID
0092  00103 101020        ASR 16        EXTENT THE SIGN 
0093  00104 100400        DIV .128      DIVID BY BLOCK LENGTH 
      00105 000073R 
0094  00106 006020        SSB           SKIP IF POSITIVE
0095  00107 042242R       ADA N1        ELSE ADDJUST THE BLOCK
0096  00110 006020        SSB           IF NEGATIVE 
0097  00111 046073R       ADB .128      ADJUST TO POSITIVE
0098  00112 046071R       ADB BUFA      COMPUTE THE NEW BUFFER ADDRESS
0099  00113 101100        SWP           PUT BUFFER ADDRESS IN A BLOCK IN
0100  00114 002003        SZA,RSS       IF ZERO THE GO TO EXIT
0101  00115 026120R       JMP *+3 
0102  00116 016151R       JSB NX$EC     GO GET THE BLOCK
0103  00117 126074R       JMP $KIP,I    ERROR RETURN
0104  00120 172143R       STA BUFPT,I   SET THE BUFFER ADDRESS IN THE DC
0105  00121 036074R       ISZ $KIP      SET TO NORMAL RETURN
0106  00122 126074R       JMP $KIP,I    MAKE NORMAL RETURN

0108  00123 000000  PRAM  NOP           FETCH DCB ADDRESS SUBROUTINE







 PAGE 0004 #01


0109  00124 006500        CLB,CLE       SET UP
0110  00125 016004X       JSB P.PAS     AND 
0111  00126 177760        DEC -16       FETCH 
0112  00127 000000  DCB   NOP           DCB 
0113  00130 000000  TMP   NOP 
0114  00131 000000  TYPE  NOP 
0115  00132 000000  TR    NOP 
0116  00133 000000  SEC   NOP 
0117  00134 000000  #SEC  NOP 
0118  00135 000000  SAV   NOP 
0119  00136 000000  PTR   NOP           USED AS LOCAL 
0120  00137 000000  SEC/T NOP 
0121  00140 000000  LEFT  NOP           USED AS LOCAL ONLY
0122  00141 000000  CTRK  NOP 
0123  00142 000000  CSEC  NOP 
0124  00143 000000  BUFPT NOP 
0125  00144 000000  FLAG  NOP 
0126  00145 000000        NOP 
0127  00146 000000  EXT#  NOP 
0128  00147 072071R       STA BUFA      SET THE BUFFER ADDRESS
0129  00150 126123R       JMP PRAM,I    RETURN TO CALLER










































 PAGE 0005 #01


0131*     NX$EC  COMPUTES THE ADDRESS OF THE NEXT SECTOR
0132*            FOR ALL READ/WRITE ACCESSES AND FOR
0133*            SEQUENTIAL POSITIONING.
0134* 
0135*     CALLING SEQUENCE: 
0136* 
0137*     LDB RELATIVE BLOCK NO.
0138*     JSB NX$EC 
0139*     DISCERR/EOF RETURN (ON EXTENDABLE FILES EODISC) 
0140*          NORMAL RETURN
0141* 
0142*     NX$EC  WRITES THE CURRENT SECTOR BUT DOES NOT 
0143*            SET THE RELATIVE POSITION POINTERS 
0144*            THE TARGET BLOCK IS READ.
0145*            IF RFLG$ IS NON 0. 
0146* 
0147* 
0148* 
0149  00151 000000  NX$EC NOP 
0150  00152 072135R       STA SAV       SAVE THE A REG
0151  00153 005040        BLS,CLE       CONVERT BLOCKS TO 
0152  00154 076240R       STB SECOF     SECTORS AND SAVE
0153  00155 066127R       LDB DCB       GO WRITE THE CURRENT
0154  00156 016002X       JSB R/W$      BLOCK 
0155  00157 126151R       JMP NX$EC,I   IF ERROR RETURN 
0156  00160 162132R       LDA TR,I      COMPUTE THE 
0157  00161 003004        CMA,INA       RELATIVE SECTOR 
0158  00162 142141R       ADA CTRK,I    ADDRESS 
0159  00163 100200        MPY SEC/T,I   IN THE FILE 
      00164 100137R 
0160  00165 166133R       LDB SEC,I     AND 
0161  00166 007004        CMB,INB       THEN
0162  00167 044000        ADB A         ADD 
0163  00170 146142R       ADB CSEC,I    THE 
0164  00171 046240R       ADB SECOF     CHANGE
0165  00172 101020        ASR 16        EXTEND TO A 
0166  00173 100400        DIV #SEC,I    DIVIDE BY FILE SIZE 
      00174 100134R 
0167  00175 006020        SSB           IF NEGATIVE 
0168  00176 042242R       ADA N1        REMAINDER 
0169  00177 006020        SSB           CORRECT 
0170  00200 146134R       ADB #SEC,I    RESULT
0171  00201 002002        SZA           IF DIFFERENT EXTENT 
0172  00202 026223R       JMP EXTND     GO GET ITS ADDRESS
0173  00203 146133R NX$E1 ADB SEC,I     COMPUTE THE NEW 
0174  00204 101020        ASR 16        TRACK AND 
0175  00205 100400        DIV SEC/T,I   SECTOR
      00206 100137R 
0176  00207 142132R       ADA TR,I      ADDRESSES 
0177  00210 172141R       STA CTRK,I    AND SET THEM
0178  00211 176142R       STB CSEC,I    IN THE DCB
0179  00212 062241R       LDA RFLG$     IF FLAG CLEARED 
0180  00213 002303        CCE,SZA,RSS   THEN DO NOT 
0181  00214 026220R       JMP NORD      READ
0182  00215 066127R       LDB DCB       SET UP TO 
0183  00216 016002X       JSB R/W$      READ  AND DO IT 







 PAGE 0006 #01


0184  00217 126151R       JMP NX$EC,I   ERROR RETURN
0185  00220 036151R NORD  ISZ NX$EC     STEP AND
0186  00221 062135R       LDA SAV       RESTOR A
0187  00222 126151R       JMP NX$EC,I   RETURN





0189  00223 076130R EXTND STB TMP       SAVE THE RELATIVE SECTOR
0190  00224 142146R       ADA EXT#,I    ADD CURRENT EXTENT NUMBER 
0191  00225 166131R       LDB TYPE,I    GET THE TYPE
0192  00226 002021        SSA,RSS       IF LESS THAN ZERO 
0193  00227 056243R       CPB .2        OR IFIF TYPE 2 THEN 
0194  00230 026236R       JMP SOF       END OF FILE 
0195  00231 066127R       LDB DCB       GO SET UP 
0196  00232 016001X       JSB RWND$     THE EXTENT
0197  00233 126151R       JMP NX$EC,I   ERROR RETURN
0198  00234 066130R       LDB TMP       GET THE SECTOR OFFSET 
0199  00235 026203R       JMP NX$E1     AND GO COMPUTE THE ADDRESS
0200  00236 062244R SOF   LDA N12       ELSE EOF
0201  00237 126151R       JMP NX$EC,I   RETURN
0202  00240 000000  SECOF NOP 


0204  00241 000000  RFLG$ NOP           GLOBAL READ WRITE FLAG
0205  00242 177777  N1    OCT -1
0206  00243 000002  .2    DEC 2 
0207  00244 177764  N12   DEC -12 
0208  00245 100000  SIGN  OCT 100000


0210  00000         A     EQU 0 
0211  00001         B     EQU 1 

0213  00246         END   EQU * 

0215                      END 
**  NO ERRORS*

















$END ASMB     

*
--> Assemble fmp/29033-80005_Rev-A_6
ON,ASMB,99







 PAGE 0001


0001                ASMB,B,R,L,C
**  NO ERRORS*





























































 PAGE 0002 #01


0001                ASMB,B,R,L,C
0002  00000               NAM RWND$,7 
0003                      ENT RWND$ 
0004                      EXT EXEC,RFLG$
0005* 
0006*     RWND$         IS A MODULE OF THE REAL TIME FILE 
0007*                   MANAGEMENT PACKAGE.  IT IS INVOKED
0008*                   TO SET OR RESET WORDS 11 THROUGH 16 
0009*                   OF THE DCB.  THE RECORD COUNT IS RESET IF EXTENT
0010* 
0011*     CALLING SEQUENCE: 
0012* 
0013*     LDA EXTENT#   SET A TO DESIRED EXTENT 
0014*     LDB DCB       SET B TO DCB ADDRESS
0015*     JSB RWND$     CALL
0016*     JMP ERR       ERROR EXIT (A=CODE) 
0017*     ---           NORMAL RETURN 
0018* 



0020  00000 000000  TMP   NOP 
0021  00001 000000  TMP2  NOP 
0022  00002 000000  RWND$ NOP           ENTRY POINT 
0023  00003 076027R       STB DCB       SAVE THE DCB
0024  00004 006004        INB           ADDRESS 
0025  00005 076030R       STB OF/SC     FOR THE D.RTR CALL
0026  00006 046075R       ADB .2        SAVE THE
0027  00007 076000R       STB TMP       TRACK ADDRESS 
0028  00010 072001R       STA TMP2      AND THE EXTENT
0029  00011 046102R       ADB .12       INDEX TO THE EXTENT#
0030  00012 150001        CPA B,I       IF SAME - CONTINUE
0031  00013 026050R       JMP SETUP     WITH SETUP
0032  00014 062002X       LDA RFLG$     GET READ WRITE FLAG 
0033  00015 066101R       LDB .6        GET READ EXTENT OPEN REQUEST COD
0034  00016 002003        SZA,RSS       IF WRITE
0035  00017 046075R       ADB .2        ADD TWO TO GET WRITE EXTENT OPEN
0036  00020 076071R       STB SET       SET IT FOR CALL TO D.RTR
0037  00021 016001X AGAIN JSB EXEC      ELSE
0038  00022 000032R       DEF STEST     CALL
0039  00023 000103R       DEF .9        D.RTR 
0040  00024 000105R       DEF D.RTR     TO
0041  00025 001717        DEF XEQT      OPEN
0042  00026 000001R       DEF TMP2      THE 
0043  00027 000000  DCB   NOP           EXTENT. 
0044  00030 000000  OF/SC NOP 
0045  00031 000071R       DEF SET 
0046  00032 002002  STEST SZA           SCHEDULE OK?
0047  00033 026021R       JMP AGAIN     NO; TRY AGAIN 

0049  00034 160001        LDA B,I       YES; ANY ERRORS?
0050  00035 002020        SSA           FROM D.RTR? 
0051  00036 126002R       JMP RWND$,I   YES; RETURN 

0053  00037 046076R       ADB .3        NO; STEP TO TRACK 
0054  00040 160001        LDA B,I       GET TRACK 







 PAGE 0003 #01


0055  00041 172000R       STA TMP,I     SET IN DCB
0056  00042 006004        INB           STEP TO SECTOR
0057  00043 160001        LDA B,I       GET AND 
0058  00044 012104R       AND B377      MASK
0059  00045 066000R       LDB TMP       GET DCB ADDRESS 
0060  00046 006004        INB           SET 
0061  00047 170001        STA B,I       SECTOR IN DCB 
0062  00050 066000R SETUP LDB TMP       SET THE DCB FROM THE
0063  00051 046100R       ADB .7        TRACK & SECTOR WORDS
0064  00052 162000R       LDA TMP,I     SET 
0065  00053 016071R       JSB SET       TRACK 
0066  00054 036000R       ISZ TMP       AND 
0067  00055 162000R       LDA TMP,I     SECTOR
0068  00056 016071R       JSB SET       WORDS.
0069  00057 060001        LDA B         SET THE 
0070  00060 042077R       ADA .4        BUFFER
0071  00061 016071R       JSB SET       ADDRESS.
0072  00062 002400        CLA           CLEAR THE READ/ 
0073  00063 016071R       JSB SET       WRITE FLAGS 
0074  00064 062001R       LDA TMP2      GET EXTENT# 
0075  00065 006004        INB           SKIP
0076  00066 016071R       JSB SET       SET THE EXTENT #
0077  00067 036002R       ISZ RWND$     STEP
0078  00070 126002R       JMP RWND$,I   AND RETURN



0080  00071 000000  SET   NOP 
0081  00072 170001        STA B,I       SET THE WORD IN THE DCB 
0082  00073 006004        INB           STEP DCB ADDRESS
0083  00074 126071R       JMP SET,I     RETURN



0085  00075 000002  .2    OCT 2 
0086  00076 000003  .3    OCT 3 
0087  00077 000004  .4    OCT 4 
0088  00100 000007  .7    OCT 7 
0089  00101 000006  .6    DEC 6 
0090  00102 000014  .12   DEC 12
0091  00103 000011  .9    DEC 9 
0092  00104 000377  B377  OCT 377 
0093  00105 042056  D.RTR ASC 3,D.RTR 
      00106 051124  
      00107 051040  
0094  01717         XEQT  EQU 1717B 
0095  00000         A     EQU 0 
0096  00001         B     EQU 1 

0098  00110         END   EQU * 

0100                      END 
**  NO ERRORS*



$END ASMB     

*
--> Assemble fmp/29033-80005_Rev-A_7
ON,ASMB,99







 PAGE 0001


0001                ASMB,B,R,L,C
**  NO ERRORS*





























































 PAGE 0002 #01


0001                ASMB,B,R,L,C
0002  00000               NAM R/W$,7
0003                      EXT EXEC
0004                      ENT R/W$
0005* 
0006*  R/W$        WRITES THE CURRENT SECTOR BLOCK IF IT HAS
0007*              BEEN WRITTEN ON OR READS UNCONDITIONALLY.
0008* 
0009*        CALL SEQUENCE: 
0010* 
0011*                   SET E=0 FOR WRITE  E=1 FOR READ 
0012*     LDB DCB       SET B TO DCB ADDRESS
0013*     JSB R/W$
0014*     JMP DERR      ERROR RETURN (A = -1) 
0015*                   NORMAL RETURN 
0016* 
0017  00000 000000  R/W$  NOP 
0018  00001 160001        LDA B,I       GET THE LU WORD 
0019  00002 012055R       AND B77       ISOLATE THE LU AND
0020  00003 042056R       ADA PRC 
0021  00004 072052R       STA LU        SAVE IT 
0022  00005 046047R       ADB .10       INDEX TO THE
0023  00006 076031R       STB TRACK     TRACK ADDRESS AND SET 
0024  00007 006004        INB           SET THE SECTOR ADDRESS
0025  00010 076032R       STB SECT
0026  00011 046050R       ADB .2        GET THE WRITTEN 
0027  00012 076053R       STB WOFLG     ON FLAG ADDRESS AND SAVE
0028  00013 160001        LDA B,I       GET THE FLAG
0029  00014 002051        SEZ,SLA,RSS   IF NOT WRITTEN ON (SKIP ON READ)
0030  00015 026041R       JMP EXIT      EXIT
0031  00016 046051R       ADB .3        INDEX TO THE BUFFER 
0032  00017 076027R       STB BUF       SET THE BUFFER ADDRESS
0033  00020 002445        CLA,SEZ,INA,RSS  SET A=1 IF READ
0034  00021 002004        INA           ELSE A=2 SKIP 
0035  00022 072046R       STA RC        SET THE REQUEST CODE
0036  00023 016001X       JSB EXEC      WRITE THE 
0037  00024 000033R       DEF RTN       BLOCK 
0038  00025 000046R       DEF RC
0039  00026 000052R       DEF LU        ON LU 
0040  00027 000000  BUF   NOP           FROM BUFFER 
0041  00030 000054R       DEF .128
0042  00031 000000  TRACK NOP           AT TRACK
0043  00032 000000  SECT  NOP           AND SECTOR
0044  00033 003400  RTN   CCA           SET A FOR DISC ERROR
0045  00034 056054R       CPB .128      DISC ERROR? 
0046  00035 002001        RSS           NO; SKIP
0047  00036 126000R       JMP R/W$,I    YES; TAKE ERROR EXIT
0048  00037 162053R       LDA WOFLG,I   GET THE WRITTEN ON FLAG 
0049  00040 002041        SEZ,RSS       IF THIS IS A WRITE CALL 
0050  00041 002500  EXIT  CLA,CLE       CLEAR THE IN CORE FLAGS 
0051  00042 001520        ERA,ALS       CLEAR WRITTEN ON FLAG AND SET IF
0052  00043 172053R       STA WOFLG,I   RESET 
0053  00044 036000R       ISZ R/W$      TAKE OK 
0054  00045 126000R       JMP R/W$,I    EXIT
0055  00046 000000  RC    NOP 








 PAGE 0003 #01


0057  00047 000012  .10   DEC 10
0058  00050 000002  .2    DEC 2 
0059  00051 000003  .3    DEC 3 
0060  00052 000000  LU    NOP 
0061  00053 000000  WOFLG NOP 
0062  00054 000200  .128  DEC 128 
0063  00055 000077  B77   OCT 77


0065  00000         A     EQU 0 
0066  00001         B     EQU 1 
0069                      LST 

0071  00057         END   EQU * 

0073                      END 
**  NO ERRORS*







































$END ASMB     

*
--> Assemble fmp/29033-80006_Rev-A_1
ON,ASMB,99







 PAGE 0001


0001                ASMB,B,R,L,C
**  NO ERRORS*





























































 PAGE 0002 #01  RTE -FMGR  MAIN 


0001                ASMB,B,R,L,C
0003  00000               NAM FMGR,3,90 
0004                      EXT FM.ER,CLOS.,EXEC,MSS.,C.BUF 
0005                      ENT IFLG.,CAD.,FM.AB,D.,CUSE.,PARS. 
0006                      ENT SEG.R,P.SEG,INI1.,INI2.,I.BUF,O.BUF 
0007                      ENT N.OPL,P.RAM,TTY.,NO.RD,NOCM.



0009  00000 000000  O.BUF BSS 144       GENERAL OUTPUT DCB
0010  00220 000000  I.BUF BSS 144       GENERAL INPUT DCB 
0011  00000               ORG O.BUF     PUT INITIALIZE CODE IN DCB
0012  00000 061717  FMGR  LDA XEQT      GET THE 
0013  00001 042040R       ADA .12       FIRST TWO 
0014  00002 160000        LDA A,I       CHARACTERS  OF PGMS 
0015  00003 072634R       STA SEG       NAME AND SET FOR SEGMENT CALLS. 
0016  00004 026030R       JMP ITCAL     GO LOAD THE INITILIZE SEGMENT 
0017  00005 016004X INI1. JSB MSS.      INIT SEGMENT COMES HERE IF
0018  00006 000010R       DEF *+2        SYSTEM INITILIZE IS NEEDED 
0019  00007 000510R       DEF IFLG.       SEND  FMGR 00X (5 OR 3) MESSAG
0020  00010 062637R       LDA AS1BL     SET TO LOAD 
0021  00011 026451R       JMP PSEGC     AND LOAD THE PARSE SEGMENT
0022  00012 056035R INI2. CPB ASIN      SEGMENT  RETURNS HERE AFTER 
0023  00013 026452R       JMP SEGLD     READING AND PARSING-EXPECTED INP
0024  00014 056034R       CPB AS??      WAS ??  INPUT?
0025  00015 026021R       JMP CAL??     YES -GO SET UP AND CALL ?? ROUTI
0026  00016 016004X       JSB MSS.      NO! ILLEGAL RESPONCE
0027  00017 000021R       DEF *+2        SEND  FMGR 004 
0028  00020 000037R       DEF .4
0029  00021 062037R CAL?? LDA .4        ?? CALL FROM INIT-SET MS TO 4 
0030  00022 072507R       STA MS          TO FOURCE FMGR 004 MESSAGE
0031  00023 026452R       JMP SEGLD     GO TO GENERAL  CALL ROUTINE 
0032  00024 026005R       JMP INI1.     TRY AGAIN 

0034  00025 062507R INIT2 LDA MS        HERE AFTER  INIT CALL ON IN 
0035  00026 002002        SZA            SKIP IF  OK
0036  00027 026005R       JMP INI1.     NO - TRY AGAIN

0038  00030 002400  ITCAL CLA           SET UP TO CALL THE INITIALIZE 
0039  00031 072626R       STA CAD.      ROUTINE 
0040  00032 062036R       LDA AS2BL     FIRST ROUTINE IN SEGMENT TWO
0041  00033 026451R       JMP PSEGC     GO LOAD THE SEGMENT AND CALL IT 

0043  00034 037477  AS??  ASC 1,??
0044  00035 044516  ASIN  ASC 1,IN
0045  00036 031040  AS2BL ASC 1,2 
0046  00037 000004  .4    OCT 4 
0047  00040 000014  .12   DEC 12
0048  00157         TEST  EQU I.BUF-*   MAKE SURE ABOVE CODE IS IN O.BUF
0049  00440               ORR 
0050  00440 016002X FM.AB JSB CLOS.     COMMAND LOOP - ENTRY
0051  00441 000443R       DEF *+2           CLOSE 
0052  00442 000220R       DEF I.BUF         INPUT FILE
0053  00443 016002X       JSB CLOS.         CLOSE 
0054  00444 000446R       DEF *+2 
0055  00445 000000R       DEF O.BUF         OUTPUT FILE 







 PAGE 0003 #01  RTE -FMGR  MAIN 


0056  00446 062637R INIT0 LDA AS1BL     INITILIZE SEGMENT CALL ENTRY POI
0057  00447 052636R       CPA CUSE.         IF PARSE SEGMENT STILL IN 
0058  00450 026456R       JMP P.SEG         CORE THEN SKIP SEGMENT CALL 
0059  00451 072636R PSEGC STA CUSE.         ELSE SET UP 
0060  00452 016003X SEGLD JSB EXEC          AND 
0061  00453 000456R       DEF *+3           LOAD
0062  00454 000630R       DEF .8            PARSE 
0063  00455 000634R       DEF SEG           SEGMENT 
0064  00456 002400  P.SEG CLA           NORMAL PARSE SEGMENT RETURN POIN
0065  00457 072507R       STA MS            CLEAR THE ERROR FLAG
0066  00460 116627R       JSB PARS.,I       CALL TO READ & PARSE A COMMA
0067  00461 000462R       DEF *+1 
0068  00462 002041        SEZ,RSS           E=I = SEGMENT ABSENT
0069  00463 026470R       JMP CALLR         E=0 = ROUTINE IN CORE 
0070  00464 026452R       JMP SEGLD         SEGMENT ABSENT SO GO LOAD 
0071  00465 042626R SEG.R ADA CAD.      ALL SEGMENTS OTHER THAN PARSE 
0072  00466 160000        LDA A,I 
0073  00467 072626R       STA CAD.       RETURN HERE WITH A= DEF TABLE A
0074  00470 116626R CALLR JSB CAD.,I        CALL THE ROUTINE
0075  00471 000475R       DEF *+4          PASSING
0076  00472 000625R       DEF NOCM.         THE NUMBER OF PARAMETRS 
0077  00473 000525R       DEF P.RAM         THE TABLE ADDRESS 
0078  00474 000507R       DEF MS            THE ERROR FLAG ADDRESS
0079  00475 062507R       LDA MS            IF THERE IS NO
0080  00476 002003        SZA,RSS           ERROR THEN
0081  00477 026503R       JMP IFTST         JUMP
0082  00500 016004X       JSB MSS.          ELSE
0083  00501 000503R       DEF *+2            PRINT
0084  00502 000507R       DEF MS            FMGR MS 
0085  00503 062510R IFTST LDA IFLG.         IF INITILIZE ROUTINE
0086  00504 002002        SZA               IN CONTROL
0087  00505 026025R       JMP INIT2         GO CONTINUE SYSTEM INITIALIZ
0088  00506 026440R       JMP FM.AB         ELSE  READ  THE  NEXT COMMAN


0090  00507 000000  MS    NOP 
0091  00510 000000  IFLG. NOP 
0092  00511 000000  NO.RD NOP 
0093  00512 000001  TTY.  OCT 1 
0094  00513 000000  N.OPL BSS 10
0095  00525 000000  P.RAM BSS 64
0096  00625 000000  NOCM. NOP 
0097  00626 000000  CAD.  NOP 
0098  00627 000000  PARS. NOP 
0099  00630 000010  .8    DEC 8 
0100  00631 020044  ENDMS ASC 3, $END 
      00632 042516  
      00633 042040  
0101  00634 043115  SEG   ASC 2,FMGR
      00635 043522  
0102  00636 020040  CUSE. ASC 1,
0103  00637 030440  AS1BL ASC 1,1 
0104  00640 042056  D.    ASC 3,D.RTR 
      00641 051124  
      00642 051040  
0105  00000         A     EQU 0 







 PAGE 0004 #01  RTE -FMGR  MAIN 


0106  00001         B     EQU 1 
0107  01717         XEQT  EQU 1717B 



0109  00643               ORG *         LENGTH OF ROUTINE 
0110                      END FMGR
**  NO ERRORS*
















































$END ASMB     

*
--> Assemble fmp/29033-80006_Rev-A_2
ON,ASMB,99







 PAGE 0001


0001                ASMB,B,X,L
**  NO ERRORS*





























































 PAGE 0002 #01


0001                ASMB,B,X,L
0002*001  SPL, M, O, L
0003*002        NAME FM.CM(8) 
0004  00000                 NAM FM.CM,8 
0005  00000         .A.     EQU  0
0006  00001         .B.     EQU  1
0007                        ENT FM.ER 
0008                        ENT OPEN. 
0009                        ENT CLOS. 
0010                        ENT IER.
0011                        ENT MSS.
0012                        ENT EC.HO 
0013                        ENT CONV. 
0014                        ENT CAMS. 
0015                        ENT C.BUF 
0016                        ENT .TTY
0017                        ENT CAM.I 
0018                        ENT CAM.O 
0019                        ENT ECH.
0020                        ENT BUF.
0021                        ENT .E.R. 
0022                        ENT .R.E. 
0023                        ENT P.TR
0024                        ENT TMP.
0025                        ENT D.AD
0026                        EXT .ENTR 
0027                        EXT .DIV
0028                        EXT .DRCT 
0029                        EXT EXEC
0030                        EXT WRITF 
0031                        EXT CLOSE 
0032                        EXT OPEN
0033                        EXT TTY.
0034                        EXT N.OPL 
0035                        EXT I.BUF 
0036                        EXT O.BUF 
0037                        EXT FM.AB 
0038  00000 000000  CAMS.   BSS    40 
0039  00050 000000  C.BUF   BSS    40 
0040  00120 000000  CAM.I   BSS   144 
0041  00340 000000  CAM.O   BSS 1 
0042  00341 000000  ECH.    BSS 1 
0043  00342 000000  BUF.    BSS   129 
0044  00543 000000  .E.R.   BSS 1 
0045  00544 000000  SVCOD   BSS 1 
0046  00545 000000  .R.E.   BSS 1 
0047  00546 000000R P.TR    DEF CAMS. 
0048  00547 000000  TMP.    BSS 1 
0049  00550 000000  LST     BSS     2 
0050  00552 000000  SVCO    BSS 1 
0051  00553 000000  S       BSS 1 
0052  00554 000000  LSSC    BSS 1 
0053  00555 000000  SCOD    BSS 1 
0054  00556 000000  NFA     BSS 1 
0055  00557 000000  ECH     BSS 1 
0056  00560 000000  LSDIS   BSS 1 







 PAGE 0003 #01


0057  00561 043115  FM      OCT 043115
0058  00562 043522          OCT 043522
0059  00563 020060  MS1     OCT 020060
0060  00564 030060  MS2     OCT 030060
0061  00565 000000  NO      BSS 1 
0062  00566 020040  .1      OCT 020040
0063  00567 026400  .3      OCT 026400
0064  00570 001750  .4      OCT 001750
0065  00571 000001  .5      OCT 000001
0066  00572 000003  .6      OCT 000003
0067  00573 177776  .9      OCT 177776
0068  00574 000002  .10     OCT 000002
0069  00575 000000  .11     BSS 1 
0070  00576 000004  .12     OCT 000004
0071  00577 000000  .15     OCT 000000
0072  00600 000000          OCT 000000
0073  00601 000410  .16     OCT 000410
0074  00602 000000  DCB14   BSS 1 
0075  00603 000000  DCB9    BSS 1 
0076  00604 000000  DCB7    BSS 1 
0077  00605 000000  DCB6    BSS 1 
0078  00606 000000  DCB5    BSS 1 
0079  00607 000000  DCB4    BSS 1 
0080  00610 000000  DCB3    BSS 1 
0081  00611 000000  DCB2    BSS 1 
0082  00612 000005  .17     OCT 000005
0083  00613 000120R .18     DEF CAM.I 
0084  00614 000000  .21     OCT 000000
0085  00615 000000  T       BSS 1 
0086  00616 157777  .28     OCT 157777
0087  00617 000000  .29     BSS 1 
0088  00620 177774  .30     OCT 177774
0089  00621 000000  EQT5    BSS 1 
0090  00622 000015  .31     OCT 000015
0091  00623 000000  EOF     BSS 1 
0092  00624 037400  .36     OCT 037400
0093  00625 170777  .37     OCT 170777
0094  00626 000100  .38     OCT 000100
0095  00627 000110  .39     OCT 000110
0096  00630 001000  .40     OCT 001000
0097  00631 001100  .41     OCT 001100
0098  00632 003700  .42     OCT 003700
0099  00633 100001  .43     OCT 100001
0100  00634 001717  .44     OCT 001717
0101  00635 177777  .48     OCT 177777
0102  00636 000077  .51     OCT 000077
0103  00637 000700  .52     OCT 000700
0104  00640 000000  .53     BSS 1 
0105  00641 177400  .56     OCT 177400
0106  00642 000011  .57     OCT 000011
0107  00643 000000  ILOGV   BSS 1 
0108  00644 000006  .58     OCT 000006
0109  00645 000000  .62     BSS 1 
0110  00646 000000  PR      BSS 1 
0111  00647 000012  .63     OCT 000012
0112  00650 000000  EV      BSS 1 







 PAGE 0004 #01


0113  00651 000000  BF      BSS 1 
0114  00652 000000  NUM     BSS 1 
0115  00653 000000  I       BSS 1 
0116  00654 000000  DI      BSS 1 
0117  00655 000060  .67     OCT 000060
0118  00656 000377  .70     OCT 000377
0119  00657 000000  .TTYV   BSS 1 
0120  00660 002400  .75     OCT 002400
0121  00661 000000  D.ADV   BSS 1 
0122*003        LET EXEC,WRITF,READF BE SUBROUTINE,EXTERNAL 
0123*004        LET CLOSE,OPEN         BE SUBROUTINE,EXTERNAL 
0124*005        LET FM.ER,OPEN.,CLOS.,\ 
0125*                 IER.,CLO BE SUBROUTINE
0126*006        LET MSS.                BE SUBROUTINE 
0127*007        LET EC.HO,CONV.     BE SUBROUTINE 
0128*008        LET ILOG      BE FUNCTION 
0129*009        LET CAMS.(40) BE INTEGER,GLOBAL 
0130*010        LET C.BUF(40) BE INTEGER,GLOBAL 
0131*011        LET TTY.,N.OPL,I.BUF,O.BUF BE INTEGER,EXTERNAL
0132*012        LET .TTY            BE FUNCTION 
0133*013        LET CAM.I              BE INTEGER(144),GLOBAL 
0134*014        LET CAM.O,ECH.,BUF.(129)  BE INTEGER ,GLOBAL
0135*015        LET .E.R.     BE INTEGER,GLOBAL  !DEFINE THE ERROR WORD 
0136*016        LET SVCOD     BE INTEGER
0137*017        LET .R.E.,P.TR BE INTEGER ,GLOBAL 
0138*018        LET TMP.      BE INTEGER,GLOBAL 
0139*019        LET LST(2)    BE INTEGER
0140*020        LET SVCO      BE INTEGER
0141*021        LET S,LSSC,SCOD,NFA,ECH,LSDIS BE INTEGER
0142*022        LET FM.AB    BE LABEL,EXTERNAL
0143*023        LET XEQT      BE CONSTANT (1717K) 
0144*024        LET FM(2),MS1,MS2 BE INTEGER
0145*025        INITIALIZE FM ,  MS1,MS2 TO "FMGR 000"
0146*026        LET A        BE CONSTANT(0) 
0147*027        LET B        BE CONSTANT(1) 
0148*028        INITIALIZE P.TR TO @CAMS. 
0149*029  ! 
0150*030  MSS.:  SUBROUTINE(ER,NX)GLOBAL
0151  00662 000000  ER      NOP 
0152  00663 000000  NX      NOP 
0153  00664 000000  MSS.    NOP 
0154  00665 016001X         JSB .ENTR 
0155  00666 000662R         DEF ER
0156*031  ! 
0157*032  !     MESSAGE FORMAT: 
0158*033  !     FMGR XXX
0159*034  ! 
0160*035  !     MESSAGE ERROR WORD FORMAT 
0161*036  !     THE THOUSANDS DIGIT IS USED AS FOLLOWS: 
0162*037  !     IF ONE OR  THREE THEN TWO MESSAGES ARE TO BE PRINTED
0163*038  ! 
0164*039  !     IF ZERO OR TWO THEN ONLY ONE MESSAGE IS PRINTED 
0165*040  ! 
0166*041  !     IF ZERO OR ONE THEN SEND THE INPUT DEVICE TO THE LOG UNI
0167*042  !     IF 2 OR 3 LEAVE THE LOG AND INPUT DEVICES AS IT IS
0168*043        .R.E.,NO_ER  !SAVE ERROR FOR DIAGNOSTIC 







 PAGE 0005 #01


0169  00667 162662R         LDA ER,I
0170  00670 072545R         STA .R.E. 
0171  00671 072565R         STA NO
0172*044        MS1_20040K !SET SIGN FOR  PLUS
0173  00672 062566R         LDA .1
0174  00673 072563R         STA MS1 
0175*045        IF NO<0 THEN [NO_ -NO;MS1_26400K]!IF NEG SET TO GIVE SIG
0176  00674 066565R         LDB NO
0177  00675 006021          SSB,RSS 
0178  00676 026704R         JMP MSS01 
0179  00677 066565R         LDB NO
0180  00700 007004          CMB,INB 
0181  00701 076565R         STB NO
0182  00702 062567R         LDA .3
0183  00703 072563R         STA MS1 
0184*046  MSS01:DO[S_NO/1000;NO_$B] 
0185  00704 062565R MSS01   LDA NO
0186  00705 006400          CLB 
0187  00706 002020          SSA 
0188  00707 007000          CMB 
0189  00710 016002X         JSB .DIV
0190  00711 000570R         DEF .4
0191  00712 072553R         STA S 
0192  00713 162571R         LDA .5,I
0193  00714 072565R         STA NO
0194*047  MSS00:CONV.(NO,MS2,3)  !CONVERT THE NUMBER
0195  00715 017460R MSS00   JSB CONV. 
0196  00716 000722R         DEF *+4 
0197  00717 000565R         DEF NO
0198  00720 000564R         DEF MS2 
0199  00721 000572R         DEF .6
0200*048        FM.ER([IF S>1 THEN 1,ELSE 2],FM,4)
0201  00722 066553R         LDB S 
0202  00723 046573R         ADB .9
0203  00724 006020          SSB 
0204  00725 026730R         JMP .7
0205  00726 062571R         LDA .5
0206  00727 026731R         JMP .8
0207  00730 062574R .7      LDA .10 
0208  00731 072575R .8      STA .11 
0209  00732 016757R         JSB FM.ER 
0210  00733 000737R         DEF *+4 
0211  00734 000575R         DEF .11 
0212  00735 000561R         DEF FM
0213  00736 000576R         DEF .12 
0214*049        IF S AND 1 THEN [S_S-1;NO_NX;MS1_20040K;GOTO MSS00]!DO S
0215  00737 062553R         LDA S 
0216  00740 012571R         AND .5
0217  00741 002003          SZA,RSS 
0218  00742 026753R         JMP .13 
0219  00743 003400          CCA 
0220  00744 042553R         ADA S 
0221  00745 072553R         STA S 
0222  00746 162663R         LDA NX,I
0223  00747 072565R         STA NO
0224  00750 062566R         LDA .1







 PAGE 0006 #01


0225  00751 072563R         STA MS1 
0226  00752 026715R         JMP MSS00 
0227*050        RETURN
0228  00753 126664R .13     JMP MSS.,I
0229*051        END 
0230*052  ! 
0231*053  !     COMMAND OUTPUT (ERROR) SUBROUTINE 
0232*054  ! 
0233*055  FM.ER:SUBROUTINE(SCCOD,BFMS,LN)GLOBAL 
0234  00754 000000  SCCOD   NOP 
0235  00755 000000  BFMS    NOP 
0236  00756 000000  LN      NOP 
0237  00757 000000  FM.ER   NOP 
0238  00760 016001X         JSB .ENTR 
0239  00761 000754R         DEF SCCOD 
0240*056  ! 
0241*057  !     FM.ER PRINTS ONLY IF SCCOD IS GREATER THAN OR EQUAL TO
0242*058  !     THE  SVCOD ENTERED AT TURN ON TIME
0243*059  ! 
0244*060  !     IN ADDITION IF THE SCCOD IS IS GREATER THAN 1 CONTROL IS
0245*061  !     TO THE LOG CHANNEL
0246*062  ! 
0247*063        IF SCCOD<SVCOD THEN RETURN !IGNOR IF CODE TOO SMALL 
0248  00762 066544R         LDB SVCOD 
0249  00763 007004          CMB,INB 
0250  00764 146754R         ADB SCCOD,I 
0251  00765 006020          SSB 
0252  00766 126757R         JMP FM.ER,I 
0253*064        IF SCCOD   THEN EC.HO  ! IF ERROR TO BE PRINTED ECHO THE
0254  00767 162754R         LDA SCCOD,I 
0255  00770 002003          SZA,RSS 
0256  00771 026774R         JMP .14 
0257  00772 017363R         JSB EC.HO 
0258  00773 000774R         DEF *+1 
0259*065        CALL EXEC(2,CAM.O,BFMS,LN)  !PRINT THE ERROR MESSAGE
0260  00774 016004X .14     JSB EXEC
0261  00775 001002R         DEF *+5 
0262  00776 000574R         DEF .10 
0263  00777 000340R         DEF CAM.O 
0264  01000 100755R         DEF BFMS,I
0265  01001 100756R         DEF LN,I
0266*066        IF SCCOD<2   THEN RETURN
0267  01002 166754R         LDB SCCOD,I 
0268  01003 046573R         ADB .9
0269  01004 006020          SSB 
0270  01005 126757R         JMP FM.ER,I 
0271*067        IF ILOG() THEN RETURN !IF ALREADY ON THE LOG RETURN 
0272  01006 017406R         JSB ILOG
0273  01007 001010R         DEF *+1 
0274  01010 002002          SZA 
0275  01011 126757R         JMP FM.ER,I 
0276*068  ! 
0277*069        OPEN.(CAM.I,CAM.O,0.0,410K)!OPEN THE INPUT TO THE LOG DE
0278  01012 017025R         JSB OPEN. 
0279  01013 001020R         DEF *+5 
0280  01014 000120R         DEF CAM.I 







 PAGE 0007 #01


0281  01015 000340R         DEF CAM.O 
0282  01016 000577R         DEF .15 
0283  01017 000601R         DEF .16 
0284*070        RETURN
0285  01020 126757R         JMP FM.ER,I 
0286*071        END 
0287*072  ! 
0288*073  ! 
0289*074  OPEN.:SUBROUTINE(DCBRF,LURF,PLIS,OPLST) GLOBAL
0290  01021 000000  DCBRF   NOP 
0291  01022 000000  LURF    NOP 
0292  01023 000000  PLIS    NOP 
0293  01024 000000  OPLST   NOP 
0294  01025 000000  OPEN.   NOP 
0295  01026 016001X         JSB .ENTR 
0296  01027 001021R         DEF DCBRF 
0297*075        DCB14_[DCB9_[DCB7_[DCB6_[DCB5_[DCB4_[DCB3_[DCB2_@DCBRF+2
0298*          +1]+1]+1]+2]+5 
0299  01030 063021R         LDA DCBRF 
0300  01031 042574R         ADA .10 
0301  01032 072611R         STA DCB2
0302  01033 002004          INA 
0303  01034 072610R         STA DCB3
0304  01035 002004          INA 
0305  01036 072607R         STA DCB4
0306  01037 002004          INA 
0307  01040 072606R         STA DCB5
0308  01041 002004          INA 
0309  01042 072605R         STA DCB6
0310  01043 002004          INA 
0311  01044 072604R         STA DCB7
0312  01045 042574R         ADA .10 
0313  01046 072603R         STA DCB9
0314  01047 042612R         ADA .17 
0315  01050 072602R         STA DCB14 
0316*076        IFNOT @DCBRF=@CAM.I THEN GOTO OPN3 ! NOT INPUT UNIT 
0317  01051 063021R         LDA DCBRF 
0318  01052 052613R         CPA .18 
0319  01053 002001          RSS 
0320  01054 027114R         JMP OPN3
0321*077        TTY._0  !SET TTY FLAG  TO INDICATE NOT TTY
0322  01055 002400          CLA 
0323  01056 072010X         STA TTY.
0324*078        $P.TR_[IF $DCB2 THEN $DCB14,ELSE 0]!SAVE RECORD COUNT IF
0325  01057 162611R         LDA DCB2,I
0326  01060 002003          SZA,RSS 
0327  01061 027064R         JMP .19 
0328  01062 162602R         LDA DCB14,I 
0329  01063 027065R         JMP .20 
0330  01064 062614R .19     LDA .21 
0331  01065 172546R .20     STA P.TR,I
0332*079        P.TR_P.TR+1!    SET THE NEXT ADDRESS
0333  01066 062546R         LDA P.TR
0334  01067 002004          INA 
0335  01070 072546R         STA P.TR
0336*080        FOR T_@LURF TO  @LURF+2 DO[$P.TR_$T;P.TR_P.TR+1]!STACK T







 PAGE 0008 #01


0337  01071 063022R         LDA LURF
0338  01072 072615R         STA T 
0339  01073 027077R         JMP .23 
0340  01074 062615R .22     LDA T 
0341  01075 002004          INA 
0342  01076 072615R         STA T 
0343  01077 063022R .23     LDA LURF
0344  01100 042574R         ADA .10 
0345  01101 003004          CMA,INA 
0346  01102 042615R         ADA T 
0347  01103 003004          CMA,INA 
0348  01104 002020          SSA 
0349  01105 027114R         JMP OPN3
0350  01106 162615R         LDA T,I 
0351  01107 172546R         STA P.TR,I
0352  01110 062546R         LDA P.TR
0353  01111 002004          INA 
0354  01112 072546R         STA P.TR
0355  01113 027074R         JMP .22 
0356*081  OPN3: CLO (DCBRF) !CLOSE THE OLD ONE
0357  01114 017343R OPN3    JSB CLO 
0358  01115 001117R         DEF *+2 
0359  01116 101021R         DEF DCBRF,I 
0360*082        IF LURF>20000K THEN [OPEN(DCBRF,.E.R.,LURF,OPLST,\ IF FI
0361*                  PLIS,$(@PLIS+1));IF .E.R.<0 THEN [IF @DCBRF=@CAM.
0362*          THEN[P.TR_P.TR-4;$DCB14_$P.TR]];IER.;GO TO OPN2]!OPEN IT 
0363  01117 167022R         LDB LURF,I
0364  01120 046616R         ADB .28 
0365  01121 006020          SSB 
0366  01122 027155R         JMP .27 
0367  01123 063023R         LDA PLIS
0368  01124 002004          INA 
0369  01125 072617R         STA .29 
0370  01126 016007X         JSB OPEN
0371  01127 001136R         DEF *+7 
0372  01130 101021R         DEF DCBRF,I 
0373  01131 000543R         DEF .E.R. 
0374  01132 101022R         DEF LURF,I
0375  01133 101024R         DEF OPLST,I 
0376  01134 101023R         DEF PLIS,I
0377  01135 100617R         DEF .29,I 
0378  01136 066543R         LDB .E.R. 
0379  01137 006021          SSB,RSS 
0380  01140 027152R         JMP .26 
0381  01141 063021R         LDA DCBRF 
0382  01142 052613R         CPA .18 
0383  01143 002001          RSS 
0384  01144 027152R         JMP .26 
0385  01145 062546R         LDA P.TR
0386  01146 042620R         ADA .30 
0387  01147 072546R         STA P.TR
0388  01150 162546R         LDA P.TR,I
0389  01151 172602R         STA DCB14,I 
0390  01152 017443R .26     JSB IER.
0391  01153 001154R         DEF *+1 
0392  01154 027232R         JMP OPN2







 PAGE 0009 #01


0393*083        EXEC(13,LURF,EQT5)!  GET STATUS WORD  TYPE CODE 
0394  01155 016004X .27     JSB EXEC
0395  01156 001162R         DEF *+4 
0396  01157 000622R         DEF .31 
0397  01160 101022R         DEF LURF,I
0398  01161 000621R         DEF EQT5
0399*084        EOF_[IF[EQT5_EQT5 AND 37400K]>7000K THEN 100K,ELSE[\
0400*          IF EQT5=1000K OR ((OPLST AND 110K)=110K) THEN 1000K,\
0401*                 ELSE 1100K]]
0402  01162 062621R         LDA EQT5
0403  01163 012624R         AND .36 
0404  01164 072621R         STA EQT5
0405  01165 042625R         ADA .37 
0406  01166 002020          SSA 
0407  01167 027172R         JMP .34 
0408  01170 062626R         LDA .38 
0409  01171 027211R         JMP .35 
0410  01172 066621R .34     LDB EQT5
0411  01173 163024R         LDA OPLST,I 
0412  01174 012627R         AND .39 
0413  01175 052627R         CPA .39 
0414  01176 003401          CCA,RSS 
0415  01177 002400          CLA 
0416  01200 056630R         CPB .40 
0417  01201 007401          CCB,RSS 
0418  01202 006400          CLB 
0419  01203 030001          IOR .B. 
0420  01204 002003          SZA,RSS 
0421  01205 027210R         JMP .32 
0422  01206 062630R         LDA .40 
0423  01207 027211R         JMP .35 
0424  01210 062631R .32     LDA .41 
0425  01211 072623R .35     STA EOF 
0426*085  ! 
0427*086  ! 
0428*087        $DCB2,$DCB5,DCBRF_0 
0429  01212 002400          CLA 
0430  01213 172611R         STA DCB2,I
0431  01214 172606R         STA DCB5,I
0432  01215 173021R         STA DCBRF,I 
0433*088        $DCB3_(OPLST AND 3700K) OR LURF 
0434  01216 163024R         LDA OPLST,I 
0435  01217 012632R         AND .42 
0436  01220 133022R         IOR LURF,I
0437  01221 172610R         STA DCB3,I
0438*089        $DCB4_EOF OR LURF 
0439  01222 062623R         LDA EOF 
0440  01223 133022R         IOR LURF,I
0441  01224 172607R         STA DCB4,I
0442*090        $DCB6,$DCB7_100001K 
0443  01225 062633R         LDA .43 
0444  01226 172605R         STA DCB6,I
0445  01227 172604R         STA DCB7,I
0446*091        $DCB9_$XEQT 
0447  01230 162634R         LDA .44,I 
0448  01231 172603R         STA DCB9,I







 PAGE 0010 #01


0449*092  OPN2: IF $DCB2 THEN RETURN   !IF NOT TYPE ZERO THEN RETURN
0450  01232 162611R OPN2    LDA DCB2,I
0451  01233 002002          SZA 
0452  01234 127025R         JMP OPEN.,I 
0453*093        IF  @DCBRF=@O.BUF THEN[\
0454*       IF($DCB4 AND 3700K)=1000K THEN[IF OPLST<0 THEN[\
0455*          WRITF(DCBRF,.E.R.,T,-1);IER.]]]!END FILE IF REASONABLE 
0456  01235 063021R         LDA DCBRF 
0457  01236 072617R         STA .29 
0458  01237 016003X         JSB .DRCT 
0459  01240 000013X         DEF O.BUF 
0460  01241 052617R         CPA .29 
0461  01242 002001          RSS 
0462  01243 027264R         JMP .47 
0463  01244 162607R         LDA DCB4,I
0464  01245 012632R         AND .42 
0465  01246 052630R         CPA .40 
0466  01247 002001          RSS 
0467  01250 027264R         JMP .47 
0468  01251 167024R         LDB OPLST,I 
0469  01252 006021          SSB,RSS 
0470  01253 027264R         JMP .47 
0471  01254 016005X         JSB WRITF 
0472  01255 001262R         DEF *+5 
0473  01256 101021R         DEF DCBRF,I 
0474  01257 000543R         DEF .E.R. 
0475  01260 000615R         DEF T 
0476  01261 000635R         DEF .48 
0477  01262 017443R         JSB IER.
0478  01263 001264R         DEF *+1 
0479*094        IF @DCBRF=@CAM.I THEN[\ 
0480*                        TTY._.TTY($DCB3);GO TO OPN4] 
0481  01264 063021R .47     LDA DCBRF 
0482  01265 052613R         CPA .18 
0483  01266 002001          RSS 
0484  01267 027275R         JMP .49 
0485  01270 017552R         JSB .TTY
0486  01271 001273R         DEF *+2 
0487  01272 100610R         DEF DCB3,I
0488  01273 072010X         STA TTY.
0489  01274 027304R         JMP OPN4
0490*095        IF @DCBRF=@I.BUF THEN                  \ IF INPUT ON  A 
0491* [OPN4:    EXEC(3,700K+($DCB3 AND 77K))]  !THEN SET EOT CONDITION
0492  01275 063021R .49     LDA DCBRF 
0493  01276 072617R         STA .29 
0494  01277 016003X         JSB .DRCT 
0495  01300 000012X         DEF I.BUF 
0496  01301 052617R         CPA .29 
0497  01302 002001          RSS 
0498  01303 027314R         JMP .50 
0499  01304 162610R OPN4    LDA DCB3,I
0500  01305 012636R         AND .51 
0501  01306 042637R         ADA .52 
0502  01307 072640R         STA .53 
0503  01310 016004X         JSB EXEC
0504  01311 001314R         DEF *+3 







 PAGE 0011 #01


0505  01312 000572R         DEF .6
0506  01313 000640R         DEF .53 
0507*096        RETURN
0508  01314 127025R .50     JMP OPEN.,I 
0509*097        END 
0510*098  CLOS.:SUBROUTINE(CLSOP) GLOBAL
0511  01315 000000  CLSOP   NOP 
0512  01316 000000  CLOS.   NOP 
0513  01317 016001X         JSB .ENTR 
0514  01320 001315R         DEF CLSOP 
0515*099        IF @CLSOP THEN[CLO(CLSOP);RETURN]! IF SPECIFIED CLOSE TH
0516  01321 063315R         LDA CLSOP 
0517  01322 002003          SZA,RSS 
0518  01323 027330R         JMP .54 
0519  01324 017343R         JSB CLO 
0520  01325 001327R         DEF *+2 
0521  01326 101315R         DEF CLSOP,I 
0522  01327 127316R         JMP CLOS.,I 
0523*100        CLO(I.BUF)!  CLOSE INPUT
0524  01330 017343R .54     JSB CLO 
0525  01331 001333R         DEF *+2 
0526  01332 000012X         DEF I.BUF 
0527*101        CLO(O.BUF) ! CLOSE OUTPUT 
0528  01333 017343R         JSB CLO 
0529  01334 001336R         DEF *+2 
0530  01335 000013X         DEF O.BUF 
0531*102        CLO (CAM.I)   !CLOSE CAMMAND
0532  01336 017343R         JSB CLO 
0533  01337 001341R         DEF *+2 
0534  01340 000120R         DEF CAM.I 
0535*103        RETURN!  RETURN 
0536  01341 127316R         JMP CLOS.,I 
0537*104        END 
0538*105  ! 
0539*106  CLO:  SUBROUTINE(DCB)!CLOSE SUBROUTINE FOR INTERNAL WORK
0540  01342 000000  DCB     NOP 
0541  01343 000000  CLO     NOP 
0542  01344 016001X         JSB .ENTR 
0543  01345 001342R         DEF DCB 
0544*107        IF DCB AND 177400K THEN CLOSE(DCB,.E.R.) !IF NOT FAKE CL
0545  01346 163342R         LDA DCB,I 
0546  01347 012641R         AND .56 
0547  01350 002003          SZA,RSS 
0548  01351 027356R         JMP .55 
0549  01352 016006X         JSB CLOSE 
0550  01353 001356R         DEF *+3 
0551  01354 101342R         DEF DCB,I 
0552  01355 000543R         DEF .E.R. 
0553*108        $(@DCB+9)_0   !ELSE KILL THE OPEN FLAG
0554  01356 063342R .55     LDA DCB 
0555  01357 042642R         ADA .57 
0556  01360 006400          CLB 
0557  01361 174000          STB .A.,I 
0558*109        RETURN
0559  01362 127343R         JMP CLO,I 
0560*110        END 







 PAGE 0012 #01


0561*111  ! 
0562*112  EC.HO:SUBROUTINE GLOBAL  !TO ECHO COMMANDS
0563  01363 000000  EC.HO   NOP 
0564  01364 016001X         JSB .ENTR 
0565  01365 001363R         DEF EC.HO 
0566*113        IFNOT ECH. THEN RETURN !IF ALREADY DONE THE RETURN
0567  01366 062341R         LDA ECH.
0568  01367 002003          SZA,RSS 
0569  01370 127363R         JMP EC.HO,I 
0570*114        IF ILOG() THEN GO TO ECH0 
0571  01371 017406R         JSB ILOG
0572  01372 001373R         DEF *+1 
0573  01373 002002          SZA 
0574  01374 027403R         JMP ECH0
0575*115        CALL EXEC(2,CAM.O,C.BUF,ECH.)!ECHO THE COMMAND
0576  01375 016004X         JSB EXEC
0577  01376 001403R         DEF *+5 
0578  01377 000574R         DEF .10 
0579  01400 000340R         DEF CAM.O 
0580  01401 000050R         DEF C.BUF 
0581  01402 000341R         DEF ECH.
0582*116  ECH0: ECH._0   !SET THE ECHOED FLAG 
0583  01403 002400  ECH0    CLA 
0584  01404 072341R         STA ECH.
0585*117      RETURN
0586  01405 127363R         JMP EC.HO,I 
0587*118        END 
0588*119  ! 
0589*120  ! 
0590*121  ILOG: FUNCTION
0591  01406 000000  ILOG    NOP 
0592  01407 016001X         JSB .ENTR 
0593  01410 001406R         DEF ILOG
0594*122        DCB9_[DCB3_[DCB2_@CAM.I+2]+1]+6 !SET UP DCB ADDRESSES 
0595  01411 062613R         LDA .18 
0596  01412 042574R         ADA .10 
0597  01413 072611R         STA DCB2
0598  01414 002004          INA 
0599  01415 072610R         STA DCB3
0600  01416 042644R         ADA .58 
0601  01417 072603R         STA DCB9
0602*123        IF ($DCB3 AND 77K)=(CAM.O AND 77K) THEN[IFNOT $DCB2\
0603*                    THEN [IF$DCB9=$XEQT THEN RETURN 1 ]] 
0604  01420 162610R         LDA DCB3,I
0605  01421 012636R         AND .51 
0606  01422 072645R         STA .62 
0607  01423 062340R         LDA CAM.O 
0608  01424 012636R         AND .51 
0609  01425 052645R         CPA .62 
0610  01426 002001          RSS 
0611  01427 027441R         JMP .61 
0612  01430 162611R         LDA DCB2,I
0613  01431 002002          SZA 
0614  01432 027441R         JMP .61 
0615  01433 166603R         LDB DCB9,I
0616  01434 156634R         CPB .44,I 







 PAGE 0013 #01


0617  01435 002001          RSS 
0618  01436 027441R         JMP .61 
0619  01437 062571R         LDA .5
0620  01440 127406R         JMP ILOG,I
0621*124        RETURN   0
0622  01441 062614R .61     LDA .21 
0623  01442 127406R         JMP ILOG,I
0624*125        END 
0625*126  ! 
0626*127  IER.: SUBROUTINE GLOBAL 
0627  01443 000000  IER.    NOP 
0628  01444 016001X         JSB .ENTR 
0629  01445 001443R         DEF IER.
0630*128        IF .E.R. =>0 THEN RETURN
0631  01446 066543R         LDB .E.R. 
0632  01447 006021          SSB,RSS 
0633  01450 127443R         JMP IER.,I
0634*129        DO[MSS.(.E.R.);GO TO FM.AB] 
0635  01451 016664R         JSB MSS.
0636  01452 001454R         DEF *+2 
0637  01453 000543R         DEF .E.R. 
0638  01454 026014X         JMP FM.AB 
0639*130        END 
0640*131  ! 
0641*132  ! 
0642*133  ! 
0643*134  CONV.:SUBROUTINE (NOO,BUF,NDIG) GLOBAL
0644  01455 000000  NOO     NOP 
0645  01456 000000  BUF     NOP 
0646  01457 000000  NDIG    NOP 
0647  01460 000000  CONV.   NOP 
0648  01461 016001X         JSB .ENTR 
0649  01462 001455R         DEF NOO 
0650*135  !     ROUTINE TO CONVERT NO WITH NDIG DIGITS TO ASC 
0651*136  !     A T  BUF
0652*137  ! 
0653*138  !     BUF  WILL CONTAIN THE LOWEST DIGITS  BUF-1 THE NEXT 
0654*139  !     LOWEST ETC. 
0655*140  ! 
0656*141        PR_10 
0657  01463 062647R         LDA .63 
0658  01464 072646R         STA PR
0659*142        EV,BF_@BUF
0660  01465 063456R         LDA BUF 
0661  01466 072650R         STA EV
0662  01467 072651R         STA BF
0663*143        NUM_NOO 
0664  01470 163455R         LDA NOO,I 
0665  01471 072652R         STA NUM 
0666*144        FOR I_1 TO NDIG DO THRU COV 
0667  01472 002404          CLA,INA 
0668  01473 072653R         STA I 
0669  01474 027500R         JMP .65 
0670  01475 062653R .64     LDA I 
0671  01476 002004          INA 
0672  01477 072653R         STA I 







 PAGE 0014 #01


0673  01500 066653R .65     LDB I 
0674  01501 007004          CMB,INB 
0675  01502 147457R         ADB NDIG,I
0676  01503 006020          SSB 
0677  01504 027550R         JMP .66 
0678*145         DO[NUM_NUM/PR;DI_$B+60K] 
0679  01505 062652R         LDA NUM 
0680  01506 006400          CLB 
0681  01507 002020          SSA 
0682  01510 007000          CMB 
0683  01511 016002X         JSB .DIV
0684  01512 000646R         DEF PR
0685  01513 072652R         STA NUM 
0686  01514 162571R         LDA .5,I
0687  01515 042655R         ADA .67 
0688  01516 072654R         STA DI
0689*146               $BF_[IF EV THEN ($BF AND 177400K)+DI,\ 
0690*                    ELSE ($BF AND 377K)+(DI-<8)] 
0691  01517 062650R         LDA EV
0692  01520 002003          SZA,RSS 
0693  01521 027526R         JMP .68 
0694  01522 162651R         LDA BF,I
0695  01523 012641R         AND .56 
0696  01524 042654R         ADA DI
0697  01525 027534R         JMP .69 
0698  01526 162651R .68     LDA BF,I
0699  01527 012656R         AND .70 
0700  01530 066654R         LDB DI
0701  01531 005727          BLF,BLF 
0702  01532 044000          ADB .A. 
0703  01533 060001          LDA .B. 
0704  01534 172651R .69     STA BF,I
0705*147  COV:                   IF EV THEN EV_0, ELSE\ 
0706*                              EV,BF_BF-1 
0707  01535 062650R COV     LDA EV
0708  01536 002003          SZA,RSS 
0709  01537 027543R         JMP .71 
0710  01540 002400          CLA 
0711  01541 072650R         STA EV
0712  01542 027547R         JMP .72 
0713  01543 003400  .71     CCA 
0714  01544 042651R         ADA BF
0715  01545 072650R         STA EV
0716  01546 072651R         STA BF
0717  01547 027475R .72     JMP .64 
0718*148        RETURN
0719  01550 127460R .66     JMP CONV.,I 
0720*149        END 
0721*150  ! 
0722*151  ! 
0723*152  .TTY: FUNCTION(LURR) GLOBAL 
0724  01551 000000  LURR    NOP 
0725  01552 000000  .TTY    NOP 
0726  01553 016001X         JSB .ENTR 
0727  01554 001551R         DEF LURR
0728*153        EXEC(13,LURR,EQT5)!GET SYS EQT WORD FIVE







 PAGE 0015 #01


0729  01555 016004X         JSB EXEC
0730  01556 001562R         DEF *+4 
0731  01557 000622R         DEF .31 
0732  01560 101551R         DEF LURR,I
0733  01561 000621R         DEF EQT5
0734*154        IF[T_EQT5 AND 37400K] THEN[IF T#2400K THEN RETURN 0]
0735  01562 062621R         LDA EQT5
0736  01563 012624R         AND .36 
0737  01564 072615R         STA T 
0738  01565 002003          SZA,RSS 
0739  01566 027574R         JMP .74 
0740  01567 066615R         LDB T 
0741  01570 056660R         CPB .75 
0742  01571 027574R         JMP .74 
0743  01572 062614R         LDA .21 
0744  01573 127552R         JMP .TTY,I
0745*155        RETURN  1   !IT IS A TTY SO SET TRUE
0746  01574 062571R .74     LDA .5
0747  01575 127552R         JMP .TTY,I
0748*156        END 
0749*157  ! 
0750*158  ! 
0751*159  D.AD: FUNCTION(X)GLOBAL 
0752  01576 000000  X       NOP 
0753  01577 000000  D.AD    NOP 
0754  01600 016001X         JSB .ENTR 
0755  01601 001576R         DEF X 
0756*160        RETURN @X 
0757  01602 063576R         LDA X 
0758  01603 127577R         JMP D.AD,I
0759*161        END 
0760*162  ! 
0761*163        END 
0762                        END 
**  NO ERRORS*





















$END ASMB     

*
--> Assemble fmp/29033-80006_Rev-A_3
ON,ASMB,99







 PAGE 0001


0001                ASMB,B,R,L,C
**  NO ERRORS*





























































 PAGE 0002 #01


0001                ASMB,B,R,L,C
0002  00000               NAM .DRCT,7 

0004                      ENT .DRCT 
0005*     CALLING SEQUENCE
0006*     THIS ROUTINE TRACKS DOWN POSSIBLE INDIRECT ADDRESSES
0007* 
0008*     JSB .DRCT 
0009*     DEF ADDR
0010*     RETURN IS TO HERE WITH A THE ADDRESS
0011*      B IS UN ALTERED  E IS LOST 
0012  00000 000000  .DRCT NOP 
0013  00001 062000R       LDA .DRCT 
0014  00002 160000        LDA A,I 
0015  00003 001275        RAL,CLE,SLA,ERA 
0016  00004 026002R       JMP *-2 
0017  00005 036000R       ISZ .DRCT 
0018  00006 126000R       JMP .DRCT,I 
0019  00000         A     EQU 0 
0020                      END 
**  NO ERRORS*



































$END ASMB     

*
--> Assemble fmp/29033-80006_Rev-A_4
ON,ASMB,99







 PAGE 0001


0001                ASMB,B,R,L,C
**  NO ERRORS*





























































 PAGE 0002 #01


0001                ASMB,B,R,L,C
0002  00000               NAM FMGR0,5 
0003                      EXT SEG.R,CAD.

0005  00000 062002R FMGR0 LDA TABL
0006  00001 026001X       JMP SEG.R 

0008  00002 000003R TABL  DEF *+1 

0010                      EXT PK..
0011  00003 000003X       DEF PK..
0012                      EXT CR..
0013  00004 000004X       DEF CR..
0014                      EXT CN..
0015  00005 000005X       DEF CN..
0016                      END FMGR0 
**  NO ERRORS*







































$END ASMB     

*
--> Assemble fmp/29033-80007_Rev-A
ON,ASMB,99







 PAGE 0001


0001                ASMB,B,X,L
**  NO ERRORS*





























































 PAGE 0002 #01


0001                ASMB,B,X,L
0002*001  SPL, L, M, O
0003*002        NAME PK..(8)
0004  00000                 NAM PK..,8
0005  00000         .A.     EQU  0
0006  00001         .B.     EQU  1
0007                        ENT PK..
0008                        EXT .ENTR 
0009                        EXT .MPY
0010                        EXT .DIV
0011                        EXT .DRCT 
0012                        EXT D.RIO 
0013                        EXT DR.RD 
0014                        EXT LOCK. 
0015                        EXT MSS.
0016                        EXT IER.
0017                        EXT FM.ER 
0018                        EXT EXEC
0019                        EXT READF 
0020                        EXT WRITF 
0021                        EXT RWNDF 
0022                        EXT D.AD
0023                        EXT ID.A
0024                        EXT D.SDR 
0025                        EXT PK.DR 
0026                        EXT DS.LU 
0027                        EXT O.BUF 
0028                        EXT .E.R. 
0029                        EXT D.
0030                        EXT I.BUF 
0031                        EXT CUSE. 
0032  00000 000000  BTL     BSS     6 
0033  00006 000000  PACK    BSS 1 
0034  00007 000000  LUPT    BSS 1 
0035  00010 000000  PAKAD   BSS 1 
0036  00011 000001  .1      OCT 000001
0037  00012 000000  DIS     BSS 1 
0038  00013 000003  .5      OCT 000003
0039  00014 000000  .7      OCT 000000
0040  00015 000066  .8      OCT 000066
0041  00016 000000  FILCO   BSS 1 
0042  00017 000000  LU      BSS 1 
0043  00020 000000  DCB5    BSS 1 
0044  00021 000000  NXSEC   BSS 1 
0045  00022 000000  NXTR    BSS 1 
0046  00023 000000  DCB2    BSS 1 
0047  00024 000000  DCB     BSS 1 
0048  00025 000002  .9      OCT 000002
0049  00026 000000  DCB21   BSS 1 
0050  00027 000000  DCB20   BSS 1 
0051  00030 000000  DCB19   BSS 1 
0052  00031 000000  OBUF    BSS 1 
0053  00032 000000  DCB9    BSS 1 
0054  00033 000000  DCB8    BSS 1 
0055  00034 000000  DCB7    BSS 1 
0056  00035 000000  DCB6    BSS 1 







 PAGE 0003 #01


0057  00036 000007  .10     OCT 000007
0058  00037 000000  T       BSS 1 
0059  00040 000000  TBUF    BSS 1 
0060  00041 000040  .14     OCT 000040
0061  00042 000200  .15     OCT 000200
0062  00043 100000  .16     OCT 100000
0063  00044 000000  PKD6    BSS 1 
0064  00045 001717  .17     OCT 001717
0065  00046 000000  T1      BSS 1 
0066  00047 000020  .21     OCT 000020
0067  00050 177774  .23     OCT 177774
0068  00051 000016  .24     OCT 000016
0069  00052 000000  IDAD    BSS 1 
0070  00053 177776  .25     OCT 177776
0071  00054 000000  .26     BSS 1 
0072  00055 000000  LN      BSS 1 
0073  00056 000000  BUFAD   BSS 1 
0074  00057 001777  .27     OCT 001777
0075  00060 000027  .28     OCT 000027
0076  00061 077600  .29     OCT 077600
0077  00062 177377  .30     OCT 177377
0078  00063 000400  .31     OCT 000400
0079  00064 000000  SECSZ   BSS 1 
0080  00065 000000  PKD4    BSS 1 
0081  00066 000000  PKD9    BSS 1 
0082  00067 000000R .35     DEF BTL 
0083  00070 000005  .36     OCT 000005
0084  00071 000000  BLK     BSS 1 
0085  00072 000000  PKD     BSS 1 
0086  00073 000000  PKD3    BSS 1 
0087  00074 000000  PKD5    BSS 1 
0088  00075 000000  WRFL    BSS 1 
0089  00076 000377  .38     OCT 000377
0090  00077 177777  .39     OCT 177777
0091  00100 000000  BT      BSS 1 
0092  00101 000000  CO      BSS 1 
0093  00102 000000  XFER    BSS 1 
0094  00103 177400  .44     OCT 177400
0095  00104 000000  NTR     BSS 1 
0096  00105 000000  NSEC    BSS 1 
0097  00106 001757  .46     OCT 001757
0098  00107 001756  .49     OCT 001756
0099  00110 000000  PKD8    BSS 1 
0100  00111 000004  .51     OCT 000004
0101  00112 000017  .57     OCT 000017
0102  00113 000011  .61     OCT 000011
0103  00114 000000  AREG    BSS 1 
0104  00115 000000  BREG    BSS 1 
0105  00116 000000  LU3     BSS 1 
0106  00117 001657  .74     OCT 001657
0107  00120 000000  DMAN    BSS 1 
0108  00121 000000  NAM3    BSS 1 
0109  00122 000000  NAM2    BSS 1 
0110  00123 000000  NAM1    BSS 1 
0111  00124 000014  .75     OCT 000014
0112  00125 000000  T2      BSS 1 







 PAGE 0004 #01


0113  00126 000013  .77     OCT 000013
0114  00127 077400  .78     OCT 077400
0115*003  !     PK..  IS THE PACKING ROUTINE FOR THE
0116*004  !           RTE FMGR PROGRAM. 
0117*005  ! 
0118*006  !     IT PACKS RTE FILES AS FOLLOWS:
0119*007  ! 
0120*008  !     1.  IF DISC IS LU2 OR 3 A  CHECK IS 
0121*009  !         MADE TO INSURE NO CURRENT ID SEGMENTS 
0122*010  !         POINT TO FILE TRACKS. 
0123*011  ! 
0124*012  !     2.  EACH FILE IS MOVED DOWN (IF NECESSARY). 
0125*013  !         AFTER EACH FILE IS MOVED ITS DIRECTORY
0126*014  !         ENTRY IS UPDATED. 
0127*015  !     (THUS NO MORE THAN ONE FILE IS
0128*016  !         LOST BY A CRASH.) 
0129*017  ! 
0130*018  !     3.  AFTER ALL FILES ARE MOVED  A NEW DIRECTORY
0131*019  !         IS CREATED PACKING OUT ALL THE PURGED 
0132*020  !         ENTRIES AND THIS IS WRITTEN ON THE DISC VIA D.RTR.
0133*021  ! 
0134*022  !     THIS ROUTINE IS ENTERED BY THE COMMAND: 
0135*023  ! 
0136*024  !     PK,CR 
0137*025  ! 
0138*026  !         WHERE CR IS OPTIONAL AND RESTRICTS
0139*027  !         THE PACK TO DISC CR.
0140*028  ! 
0141*029  !     DECLARE EXTERNALS 
0142*030  ! 
0143*031        LET D.RIO,DR.RD,LOCK.,MSS.,\
0144*           IER.,FM.ER,EXEC,READF, \
0145*           WRITF,RWNDF            \
0146*                            BE SUBROUTINE,EXTERNAL 
0147*032  ! 
0148*033        LET D.AD,ID.A        BE FUNCTION,EXTERNAL 
0149*034  ! 
0150*035        LET D.SDR,PK.DR,DS.LU,O.BUF,\ 
0151*           .E.R.,D.,I.BUF,CUSE.   BE INTEGER,EXTERNAL
0152*036  ! 
0153*037  !     DECLARE INTERNAL SUBROUTINES
0154*038  ! 
0155*039        LET TRAK.,SETAD,BADTR\
0156*                         BE SUBROUTINE 
0157*040  ! 
0158*041  !     DECLARE ARRAYS
0159*042  ! 
0160*043        LET BTL(6)        BE INTEGER
0161*044  ! 
0162*045  !     DECLARE CONSTANTS 
0163*046  ! 
0164*047        LET READI     BE CONSTANT(    1)
0165*048        LET WRIT      BE CONSTANT(    2)
0166*049        LET BKLWA     BE CONSTANT(1777K)
0167*050        LET XEQT      BE CONSTANT(1717K)
0168*051        LET KEYWD     BE CONSTANT(1657K)







 PAGE 0005 #01


0169*052        LET SECT2     BE CONSTANT(1757K)
0170*053        LET SECT3     BE CONSTANT(1756K)
0171*054        LET A         BE CONSTANT(   3 )
0172*055        LET B         BE CONSTANT(   1 )
0173*056  ! 
0174*057  ! 
0175*058  PK..: SUBROUTINE(N,LIS,ER) GLOBAL  !ENTRY POINT 
0176  00130 000000  N       NOP 
0177  00131 000000  LIS     NOP 
0178  00132 000000  ER      NOP 
0179  00133 000000  PK..    NOP 
0180  00134 016001X         JSB .ENTR 
0181  00135 000130R         DEF N 
0182*059        PACK_$(@LIS+1)   !GET THE PACK
0183  00136 062131R         LDA LIS 
0184  00137 002004          INA 
0185  00140 160000          LDA .A.,I 
0186  00141 072006R         STA PACK
0187*060        LUPT_D.AD(D.SDR)
0188  00142 016017X         JSB D.AD
0189  00143 000145R         DEF *+2 
0190  00144 000021X         DEF D.SDR 
0191  00145 072007R         STA LUPT
0192*061        PAKAD_D.AD(PK.DR)  !SET DIRECTORY ADD.
0193  00146 016017X         JSB D.AD
0194  00147 000151R         DEF *+2 
0195  00150 000022X         DEF PK.DR 
0196  00151 072010R         STA PAKAD 
0197*062  PK1:  D.RIO(READI)
0198  00152 016005X PK1     JSB D.RIO 
0199  00153 000155R         DEF *+2 
0200  00154 000011R         DEF .1
0201*063  ! 
0202*064  AGAIN:DIS_[IF PACK THEN PACK,ELSE -$LUPT] 
0203  00155 062006R AGAIN   LDA PACK
0204  00156 002003          SZA,RSS 
0205  00157 026162R         JMP .2
0206  00160 062006R         LDA PACK
0207  00161 026165R         JMP .3
0208  00162 166007R .2      LDB LUPT,I
0209  00163 007004          CMB,INB 
0210  00164 060001          LDA .B. 
0211  00165 072012R .3      STA DIS 
0212*065        IFNOT DIS THEN  GOTO EXIT !END OF DISC DIRECTORY
0213  00166 002003          SZA,RSS 
0214  00167 027143R         JMP EXIT
0215*066        LOCK.(DIS,3)?[MSS.(DIS);GO TO NXDIS]
0216  00170 016007X         JSB LOCK. 
0217  00171 000174R         DEF *+3 
0218  00172 000012R         DEF DIS 
0219  00173 000013R         DEF .5
0220  00174 002041          SEZ,RSS 
0221  00175 026202R         JMP .4
0222  00176 016010X         JSB MSS.
0223  00177 000201R         DEF *+2 
0224  00200 000012R         DEF DIS 







 PAGE 0006 #01


0225  00201 027134R         JMP NXDIS 
0226*067  ! 
0227*068        DR.RD(READI,DIS,0)?[ER_54;RETURN] 
0228  00202 016006X .4      JSB DR.RD 
0229  00203 000207R         DEF *+4 
0230  00204 000011R         DEF .1
0231  00205 000012R         DEF DIS 
0232  00206 000014R         DEF .7
0233  00207 002041          SEZ,RSS 
0234  00210 026214R         JMP .6
0235  00211 062015R         LDA .8
0236  00212 172132R         STA ER,I
0237  00213 126133R         JMP PK..,I
0238*069  ! 
0239*070        FILCO_0 
0240  00214 002400  .6      CLA 
0241  00215 072016R         STA FILCO 
0242*071        SETAD 
0243  00216 017146R         JSB SETAD 
0244  00217 000220R         DEF *+1 
0245*072        LU_$$@DS.LU 
0246  00220 016004X         JSB .DRCT 
0247  00221 000023X         DEF DS.LU 
0248  00222 160000          LDA .A.,I 
0249  00223 160000          LDA .A.,I 
0250  00224 072017R         STA LU
0251*073  ! 
0252*074  !     SET UP DCBS FOR PACKING 
0253*075  ! 
0254*076                  DCB5_[NXSEC_[NXTR_[DCB2_[\
0255*                       DCB_D.AD(O.BUF)]+2]+1]+1]+1 
0256  00225 016017X         JSB D.AD
0257  00226 000230R         DEF *+2 
0258  00227 000024X         DEF O.BUF 
0259  00230 072024R         STA DCB 
0260  00231 042025R         ADA .9
0261  00232 072023R         STA DCB2
0262  00233 002004          INA 
0263  00234 072022R         STA NXTR
0264  00235 002004          INA 
0265  00236 072021R         STA NXSEC 
0266  00237 002004          INA 
0267  00240 072020R         STA DCB5
0268*077        DCB21_[DCB20_[DCB19_[OBUF_[DCB9_[DCB8_[DCB7_[DCB6_ \
0269*                       DCB5+1]+1]+1]+1]+7]+3]+1]+1 
0270  00241 002004          INA 
0271  00242 072035R         STA DCB6
0272  00243 002004          INA 
0273  00244 072034R         STA DCB7
0274  00245 002004          INA 
0275  00246 072033R         STA DCB8
0276  00247 002004          INA 
0277  00250 072032R         STA DCB9
0278  00251 042036R         ADA .10 
0279  00252 072031R         STA OBUF
0280  00253 042013R         ADA .5







 PAGE 0007 #01


0281  00254 072030R         STA DCB19 
0282  00255 002004          INA 
0283  00256 072027R         STA DCB20 
0284  00257 002004          INA 
0285  00260 072026R         STA DCB21 
0286*078        FOR T_DCB TO [TBUF_DCB+32] DO $T_0 !CLEAR THE DCB 
0287  00261 062024R         LDA DCB 
0288  00262 072037R         STA T 
0289  00263 026267R         JMP .12 
0290  00264 062037R .11     LDA T 
0291  00265 002004          INA 
0292  00266 072037R         STA T 
0293  00267 062024R .12     LDA DCB 
0294  00270 042041R         ADA .14 
0295  00271 072040R         STA TBUF
0296  00272 003004          CMA,INA 
0297  00273 042037R         ADA T 
0298  00274 003004          CMA,INA 
0299  00275 002020          SSA 
0300  00276 026302R         JMP .13 
0301  00277 002400          CLA 
0302  00300 172037R         STA T,I 
0303  00301 026264R         JMP .11 
0304*079        $DCB_LU 
0305  00302 062017R .13     LDA LU
0306  00303 172024R         STA DCB,I 
0307*080        $DCB2_1 
0308  00304 002404          CLA,INA 
0309  00305 172023R         STA DCB2,I
0310*081        $DCB6_128     !SET RECORD SIZE
0311  00306 062042R         LDA .15 
0312  00307 172035R         STA DCB6,I
0313*082        $DCB7_100000K    !SECURITY FLAG 
0314  00310 062043R         LDA .16 
0315  00311 172034R         STA DCB7,I
0316*083        $DCB8_$PKD6 
0317  00312 162044R         LDA PKD6,I
0318  00313 172033R         STA DCB8,I
0319*084        $DCB9_$XEQT   !AND OPEN FLAG
0320  00314 162045R         LDA .17,I 
0321  00315 172032R         STA DCB9,I
0322*085        FOR T_DCB TO DCB9 DO[T1_T+16;$T1_$T]
0323  00316 062024R         LDA DCB 
0324  00317 072037R         STA T 
0325  00320 026324R         JMP .19 
0326  00321 062037R .18     LDA T 
0327  00322 002004          INA 
0328  00323 072037R         STA T 
0329  00324 066037R .19     LDB T 
0330  00325 007004          CMB,INB 
0331  00326 046032R         ADB DCB9
0332  00327 006020          SSB 
0333  00330 026337R         JMP .20 
0334  00331 062037R         LDA T 
0335  00332 042047R         ADA .21 
0336  00333 072046R         STA T1







 PAGE 0008 #01


0337  00334 162037R         LDA T,I 
0338  00335 172046R         STA T1,I
0339  00336 026321R         JMP .18 
0340*086        IF LU<4 THEN TRAK.(LU)?[GO TO NXDIS]
0341  00337 066017R .20     LDB LU
0342  00340 046050R         ADB .23 
0343  00341 006021          SSB,RSS 
0344  00342 026350R         JMP .22 
0345  00343 017301R         JSB TRAK. 
0346  00344 000346R         DEF *+2 
0347  00345 000017R         DEF LU
0348  00346 002040          SEZ 
0349  00347 027134R         JMP NXDIS 
0350*087  ! 
0351*088  !     THE DISC IS LOCKED AND WE MAY START 
0352*089  !     PACKING - WE MUST HAVE A BUFFER 
0353*090  !     AND ITS SIZE.  IF WE ARE IN THE 
0354*091  !     BACKGROUND USE ALL THE REST OF
0355*092  !     CORE; ELSE USE 0.BUF+32 (256 WDS) 
0356*093  ! 
0357*094        IF ($($XEQT+14)AND 7)#3 THEN GOTO PK3 
0358  00350 162045R .22     LDA .17,I 
0359  00351 042051R         ADA .24 
0360  00352 160000          LDA .A.,I 
0361  00353 012036R         AND .10 
0362  00354 052013R         CPA .5
0363  00355 002001          RSS 
0364  00356 026410R         JMP PK3 
0365*095        IDAD_$XEQT    !SET ID ADDRESS OF MAIN 
0366  00357 162045R         LDA .17,I 
0367  00360 072052R         STA IDAD
0368*096        IDAD_ID.A($(@CUSE.-2))?[GO TO PK2]!IF SEGMENT 0 THEN USE
0369  00361 016004X         JSB .DRCT 
0370  00362 000030X         DEF CUSE. 
0371  00363 042053R         ADA .25 
0372  00364 072054R         STA .26 
0373  00365 016020X         JSB ID.A
0374  00366 000370R         DEF *+2 
0375  00367 100054R         DEF .26,I 
0376  00370 002040          SEZ 
0377  00371 026373R         JMP PK2 
0378  00372 072052R         STA IDAD
0379*097  PK2:  IF[LN_($BKLWA-[BUFAD_$(IDAD +23)+1]+1)\ 
0380*            AND 77600K]>256 THEN GO TO PK5 
0381  00373 062052R PK2     LDA IDAD
0382  00374 042060R         ADA .28 
0383  00375 160000          LDA .A.,I 
0384  00376 002004          INA 
0385  00377 072056R         STA BUFAD 
0386  00400 003004          CMA,INA 
0387  00401 142057R         ADA .27,I 
0388  00402 002004          INA 
0389  00403 012061R         AND .29 
0390  00404 072055R         STA LN
0391  00405 042062R         ADA .30 
0392  00406 002021          SSA,RSS 







 PAGE 0009 #01


0393  00407 026414R         JMP PK5 
0394*098  ! 
0395*099  PK3:  DO[LN_256;BUFAD_TBUF] 
0396  00410 062063R PK3     LDA .31 
0397  00411 072055R         STA LN
0398  00412 062040R         LDA TBUF
0399  00413 072056R         STA BUFAD 
0400*100  PK5:  SECSZ_LN-<10  !SET SECTOR COUNT.
0401  00414 062055R PK5     LDA LN
0402  00415 001727          ALF,ALF 
0403  00416 001222          RAL,RAL 
0404  00417 072064R         STA SECSZ 
0405*101  ! 
0406*102  !     BUFFER AND LENGTH ARE SET NOW 
0407*103  !     START TO PACK 
0408*104  ! 
0409*105  ! 
0410*106         DO[$NXTR_$PKD4; FOR\ 
0411*                     T_@BTL TO @BTL+5 DO[\ 
0412*                      PKD9_PKD9+1; $T_$PKD9]]
0413  00420 162065R         LDA PKD4,I
0414  00421 172022R         STA NXTR,I
0415  00422 062067R         LDA .35 
0416  00423 072037R         STA T 
0417  00424 026430R         JMP .33 
0418  00425 062037R .32     LDA T 
0419  00426 002004          INA 
0420  00427 072037R         STA T 
0421  00430 062067R .33     LDA .35 
0422  00431 042070R         ADA .36 
0423  00432 003004          CMA,INA 
0424  00433 042037R         ADA T 
0425  00434 003004          CMA,INA 
0426  00435 002020          SSA 
0427  00436 026445R         JMP .34 
0428  00437 062066R         LDA PKD9
0429  00440 002004          INA 
0430  00441 072066R         STA PKD9
0431  00442 162066R         LDA PKD9,I
0432  00443 172037R         STA T,I 
0433  00444 026425R         JMP .32 
0434*107        $NXSEC,BLK_0
0435  00445 002400  .34     CLA 
0436  00446 172021R         STA NXSEC,I 
0437  00447 072071R         STA BLK 
0438*108  NXBLK:DR.RD(READI,DIS,BLK)?[GO TO CLEAN]
0439  00450 016006X NXBLK   JSB DR.RD 
0440  00451 000455R         DEF *+4 
0441  00452 000011R         DEF .1
0442  00453 000012R         DEF DIS 
0443  00454 000071R         DEF BLK 
0444  00455 002040          SEZ 
0445  00456 026663R         JMP CLEAN 
0446*109  ! 
0447*110        FILCO_0 
0448  00457 002400          CLA 







 PAGE 0010 #01


0449  00460 072016R         STA FILCO 
0450*111  ! 
0451*112  NXFIL:SETAD?[GO TO WRBLK] 
0452  00461 017146R NXFIL   JSB SETAD 
0453  00462 000463R         DEF *+1 
0454  00463 002040          SEZ 
0455  00464 026641R         JMP WRBLK 
0456*113  ! 
0457*114  ! 
0458*115        IFNOT $PKD THEN GOTO CLEAN  !END
0459  00465 162072R         LDA PKD,I 
0460  00466 002003          SZA,RSS 
0461  00467 026663R         JMP CLEAN 
0462*116  ! 
0463*117        IF $PKD<0 THEN GOTO NXFIL  !PURGED
0464  00470 166072R         LDB PKD,I 
0465  00471 006020          SSB 
0466  00472 026461R         JMP NXFIL 
0467*118        IFNOT $PKD3  THEN GOTO NXFIL !TYPE0 
0468  00473 162073R         LDA PKD3,I
0469  00474 002003          SZA,RSS 
0470  00475 026461R         JMP NXFIL 
0471*119  ! 
0472*120  !     IF THE FILE CONTAINS A BAD TRACK
0473*121  !     PURGE IT AND CONTINUE 
0474*122  ! 
0475*123        BADTR($PKD4,[$DCB20_$PKD5 AND 377K],$PKD6)?[WRFL,$PKD_ -
0476*                     GO TO WRBLK]
0477  00476 162074R         LDA PKD5,I
0478  00477 012076R         AND .38 
0479  00500 172027R         STA DCB20,I 
0480  00501 072054R         STA .26 
0481  00502 017206R         JSB BADTR 
0482  00503 000507R         DEF *+4 
0483  00504 100065R         DEF PKD4,I
0484  00505 000054R         DEF .26 
0485  00506 100044R         DEF PKD6,I
0486  00507 002041          SEZ,RSS 
0487  00510 026515R         JMP NEWLO 
0488  00511 003400          CCA 
0489  00512 072075R         STA WRFL
0490  00513 172072R         STA PKD,I 
0491  00514 026641R         JMP WRBLK 
0492*124  ! 
0493*125  ! 
0494*126  !     COMPUTE NEW LOCATION
0495*127  ! 
0496*128  NEWLO:BADTR($NXTR,$NXSEC,$PKD6)?[\
0497*             $NXTR_$BT+1;$NXSEC_0;GO TO NEWLO] 
0498  00515 017206R NEWLO   JSB BADTR 
0499  00516 000522R         DEF *+4 
0500  00517 100022R         DEF NXTR,I
0501  00520 100021R         DEF NXSEC,I 
0502  00521 100044R         DEF PKD6,I
0503  00522 002041          SEZ,RSS 
0504  00523 026532R         JMP .40 







 PAGE 0011 #01


0505  00524 162100R         LDA BT,I
0506  00525 002004          INA 
0507  00526 172022R         STA NXTR,I
0508  00527 002400          CLA 
0509  00530 172021R         STA NXSEC,I 
0510  00531 026515R         JMP NEWLO 
0511*129  ! 
0512*130  !     IF NEW LOCATION SAME AS OLD THEN
0513*131  !     GO TO NEXT FILE 
0514*132  ! 
0515*133        IF $NXTR=$PKD4 THEN [IF $NXSEC=$PKD5 THEN\
0516*                      GO TO PK11]
0517  00532 166022R .40     LDB NXTR,I
0518  00533 156065R         CPB PKD4,I
0519  00534 002001          RSS 
0520  00535 026541R         JMP .41 
0521  00536 166021R         LDB NXSEC,I 
0522  00537 156074R         CPB PKD5,I
0523  00540 026635R         JMP PK11
0524*134  ! 
0525*135  !     FAKE OPEN THE FILES 
0526*136  ! 
0527*137        WRFL,CO,$DCB5,$DCB21_$PKD6    !# OF SECTORS 
0528  00541 162044R .41     LDA PKD6,I
0529  00542 072075R         STA WRFL
0530  00543 072101R         STA CO
0531  00544 172020R         STA DCB5,I
0532  00545 172026R         STA DCB21,I 
0533*138        $DCB19_$PKD4  !START TRACK
0534  00546 162065R         LDA PKD4,I
0535  00547 172030R         STA DCB19,I 
0536*139        RWNDF(O.BUF,.E.R.) !SET REST OF DCB 
0537  00550 016016X         JSB RWNDF 
0538  00551 000554R         DEF *+3 
0539  00552 000024X         DEF O.BUF 
0540  00553 000025X         DEF .E.R. 
0541*140        IER.
0542  00554 016011X         JSB IER.
0543  00555 000556R         DEF *+1 
0544*141        RWNDF($OBUF,.E.R.) !FOR IN AND OUT
0545  00556 016016X         JSB RWNDF 
0546  00557 000562R         DEF *+3 
0547  00560 100031R         DEF OBUF,I
0548  00561 000025X         DEF .E.R. 
0549*142        IER.
0550  00562 016011X         JSB IER.
0551  00563 000564R         DEF *+1 
0552*143  PK10: XFER_[IF CO>SECSZ THEN LN,ELSE CO-<6] 
0553  00564 066101R PK10    LDB CO
0554  00565 007004          CMB,INB 
0555  00566 046064R         ADB SECSZ 
0556  00567 006021          SSB,RSS 
0557  00570 026573R         JMP .42 
0558  00571 062055R         LDA LN
0559  00572 026576R         JMP .43 
0560  00573 062101R .42     LDA CO







 PAGE 0012 #01


0561  00574 001700          ALF 
0562  00575 001222          RAL,RAL 
0563  00576 072102R .43     STA XFER
0564*144        READF($OBUF,.E.R.,$BUFAD,XFER)
0565  00577 016014X         JSB READF 
0566  00600 000605R         DEF *+5 
0567  00601 100031R         DEF OBUF,I
0568  00602 000025X         DEF .E.R. 
0569  00603 100056R         DEF BUFAD,I 
0570  00604 000102R         DEF XFER
0571*145        IER.
0572  00605 016011X         JSB IER.
0573  00606 000607R         DEF *+1 
0574*146        WRITF(O.BUF,.E.R.,$BUFAD,XFER)
0575  00607 016015X         JSB WRITF 
0576  00610 000615R         DEF *+5 
0577  00611 000024X         DEF O.BUF 
0578  00612 000025X         DEF .E.R. 
0579  00613 100056R         DEF BUFAD,I 
0580  00614 000102R         DEF XFER
0581*147        IER.
0582  00615 016011X         JSB IER.
0583  00616 000617R         DEF *+1 
0584*148        IF [CO_CO-(XFER-<10)] THEN GOTO PK10
0585  00617 062102R         LDA XFER
0586  00620 001727          ALF,ALF 
0587  00621 001222          RAL,RAL 
0588  00622 003004          CMA,INA 
0589  00623 042101R         ADA CO
0590  00624 072101R         STA CO
0591  00625 002002          SZA 
0592  00626 026564R         JMP PK10
0593*149        DO[$PKD4_$NXTR;$PKD5_$NXSEC+($PKD5 AND 177400K)]
0594  00627 162022R         LDA NXTR,I
0595  00630 172065R         STA PKD4,I
0596  00631 162074R         LDA PKD5,I
0597  00632 012103R         AND .44 
0598  00633 142021R         ADA NXSEC,I 
0599  00634 172074R         STA PKD5,I
0600*150  PK11: DO[$NXTR_NTR;$NXSEC_NSEC]!UPDATE FOR NEXT FILE
0601  00635 062104R PK11    LDA NTR 
0602  00636 172022R         STA NXTR,I
0603  00637 062105R         LDA NSEC
0604  00640 172021R         STA NXSEC,I 
0605*151  ! 
0606*152  ! PONTERS ARE UPDATED 
0607*153  ! 
0608*154  !     FILE IS MOVED - UPDATE DIRECTORY
0609*155  !     THEN GO DO NEXT FILE. 
0610*156  ! 
0611*157  WRBLK:IF WRFL THEN[DR.RD(WRIT,DIS,BLK);WRFL_0]
0612  00641 062075R WRBLK   LDA WRFL
0613  00642 002003          SZA,RSS 
0614  00643 026653R         JMP .45 
0615  00644 016006X         JSB DR.RD 
0616  00645 000651R         DEF *+4 







 PAGE 0013 #01


0617  00646 000025R         DEF .9
0618  00647 000012R         DEF DIS 
0619  00650 000071R         DEF BLK 
0620  00651 002400          CLA 
0621  00652 072075R         STA WRFL
0622*158        IF FILCO=128 THEN[BLK_BLK+1;GOTO NXBLK],ELSE\ 
0623*            GO TO NXFIL
0624  00653 066016R .45     LDB FILCO 
0625  00654 056042R         CPB .15 
0626  00655 002001          RSS 
0627  00656 026461R         JMP NXFIL 
0628  00657 062071R         LDA BLK 
0629  00660 002004          INA 
0630  00661 072071R         STA BLK 
0631  00662 026450R         JMP NXBLK 
0632*159  CLEAN:BLK,CO_0
0633  00663 002400  CLEAN   CLA 
0634  00664 072071R         STA BLK 
0635  00665 072101R         STA CO
0636*160  PK12: DR.RD(READI,DIS,BLK)?[GO TO PK25] 
0637  00666 016006X PK12    JSB DR.RD 
0638  00667 000673R         DEF *+4 
0639  00670 000011R         DEF .1
0640  00671 000012R         DEF DIS 
0641  00672 000071R         DEF BLK 
0642  00673 002040          SEZ 
0643  00674 027024R         JMP PK25
0644*161        DO[FILCO_0;SETAD] 
0645  00675 002400          CLA 
0646  00676 072016R         STA FILCO 
0647  00677 017146R         JSB SETAD 
0648  00700 000701R         DEF *+1 
0649*162        IF BLK THEN GO TO PK16
0650  00701 062071R         LDA BLK 
0651  00702 002002          SZA 
0652  00703 026772R         JMP PK16
0653*163        DO[$PKD5_$NXSEC;$PKD9_$NXTR;$NXSEC_0] 
0654  00704 162021R         LDA NXSEC,I 
0655  00705 172074R         STA PKD5,I
0656  00706 162022R         LDA NXTR,I
0657  00707 172066R         STA PKD9,I
0658  00710 002400          CLA 
0659  00711 172021R         STA NXSEC,I 
0660*164        NSEC_$SECT2 
0661  00712 162106R         LDA .46,I 
0662  00713 072105R         STA NSEC
0663*165        IF $SECT3 THEN [IF $SECT3<$SECT2 THEN NSEC_$SECT3]
0664  00714 162107R         LDA .49,I 
0665  00715 002003          SZA,RSS 
0666  00716 026726R         JMP .48 
0667  00717 166106R         LDB .46,I 
0668  00720 007004          CMB,INB 
0669  00721 146107R         ADB .49,I 
0670  00722 006021          SSB,RSS 
0671  00723 026726R         JMP .48 
0672  00724 162107R         LDA .49,I 







 PAGE 0014 #01


0673  00725 072105R         STA NSEC
0674*166        $DCB5_-$PKD8*$PKD6+2
0675  00726 166110R .48     LDB PKD8,I
0676  00727 007004          CMB,INB 
0677  00730 060001          LDA .B. 
0678  00731 016002X         JSB .MPY
0679  00732 100044R         DEF PKD6,I
0680  00733 042025R         ADA .9
0681  00734 172020R         STA DCB5,I
0682*167        NTR_$DCB5/NSEC
0683  00735 006400          CLB 
0684  00736 002020          SSA 
0685  00737 007000          CMB 
0686  00740 016003X         JSB .DIV
0687  00741 000105R         DEF NSEC
0688  00742 072104R         STA NTR 
0689*168        IF $B THEN NTR_NTR+1
0690  00743 162011R         LDA .1,I
0691  00744 002003          SZA,RSS 
0692  00745 026751R         JMP .50 
0693  00746 062104R         LDA NTR 
0694  00747 002004          INA 
0695  00750 072104R         STA NTR 
0696*169        EXEC(4,NTR,$NXTR,$DCB,$DCB8)
0697  00751 016013X .50     JSB EXEC
0698  00752 000760R         DEF *+6 
0699  00753 000111R         DEF .51 
0700  00754 000104R         DEF NTR 
0701  00755 100022R         DEF NXTR,I
0702  00756 100024R         DEF DCB,I 
0703  00757 100033R         DEF DCB8,I
0704*170        $DCB6_16
0705  00760 062047R         LDA .21 
0706  00761 172035R         STA DCB6,I
0707*171        $DCB2_2 
0708  00762 062025R         LDA .9
0709  00763 172023R         STA DCB2,I
0710*172        RWNDF(O.BUF,.E.R.)
0711  00764 016016X         JSB RWNDF 
0712  00765 000770R         DEF *+3 
0713  00766 000024X         DEF O.BUF 
0714  00767 000025X         DEF .E.R. 
0715*173        IER.
0716  00770 016011X         JSB IER.
0717  00771 000772R         DEF *+1 
0718*174  PK16: IFNOT $PKD THEN GOTO PK25 
0719  00772 162072R PK16    LDA PKD,I 
0720  00773 002003          SZA,RSS 
0721  00774 027024R         JMP PK25
0722*175        IF $PKD+1   THEN[WRITF(O.BUF,.E.R.,$PKD);\
0723*                     IER.;CO_CO+1] 
0724  00775 162072R         LDA PKD,I 
0725  00776 002004          INA 
0726  00777 002003          SZA,RSS 
0727  01000 027013R         JMP .52 
0728  01001 016015X         JSB WRITF 







 PAGE 0015 #01


0729  01002 001006R         DEF *+4 
0730  01003 000024X         DEF O.BUF 
0731  01004 000025X         DEF .E.R. 
0732  01005 100072R         DEF PKD,I 
0733  01006 016011X         JSB IER.
0734  01007 001010R         DEF *+1 
0735  01010 062101R         LDA CO
0736  01011 002004          INA 
0737  01012 072101R         STA CO
0738*176        SETAD?[BLK_BLK+1;GOTO PK12] 
0739  01013 017146R .52     JSB SETAD 
0740  01014 001015R         DEF *+1 
0741  01015 002041          SEZ,RSS 
0742  01016 027023R         JMP .53 
0743  01017 062071R         LDA BLK 
0744  01020 002004          INA 
0745  01021 072071R         STA BLK 
0746  01022 026666R         JMP PK12
0747*177        GOTO PK16 
0748  01023 026772R .53     JMP PK16
0749*178  ! 
0750*179  PK25: FOR T_PKD TO PKD+15 DO $T_0 
0751  01024 062072R PK25    LDA PKD 
0752  01025 072037R         STA T 
0753  01026 027032R         JMP .55 
0754  01027 062037R .54     LDA T 
0755  01030 002004          INA 
0756  01031 072037R         STA T 
0757  01032 062072R .55     LDA PKD 
0758  01033 042112R         ADA .57 
0759  01034 003004          CMA,INA 
0760  01035 042037R         ADA T 
0761  01036 003004          CMA,INA 
0762  01037 002020          SSA 
0763  01040 027044R         JMP .56 
0764  01041 002400          CLA 
0765  01042 172037R         STA T,I 
0766  01043 027027R         JMP .54 
0767*180        FOR T_CO TO($DCB5-2)*4 DO[\ 
0768*                 WRITF(O.BUF,.E.R.,$PKD);IER.] 
0769  01044 062101R .56     LDA CO
0770  01045 072037R         STA T 
0771  01046 027052R         JMP .59 
0772  01047 062037R .58     LDA T 
0773  01050 002004          INA 
0774  01051 072037R         STA T 
0775  01052 162020R .59     LDA DCB5,I
0776  01053 042053R         ADA .25 
0777  01054 016002X         JSB .MPY
0778  01055 000111R         DEF .51 
0779  01056 003004          CMA,INA 
0780  01057 042037R         ADA T 
0781  01060 003004          CMA,INA 
0782  01061 002020          SSA 
0783  01062 027073R         JMP PK15
0784  01063 016015X         JSB WRITF 







 PAGE 0016 #01


0785  01064 001070R         DEF *+4 
0786  01065 000024X         DEF O.BUF 
0787  01066 000025X         DEF .E.R. 
0788  01067 100072R         DEF PKD,I 
0789  01070 016011X         JSB IER.
0790  01071 001072R         DEF *+1 
0791  01072 027047R         JMP .58 
0792*181  ! 
0793*182  PK15: EXEC(9,D.,$XEQT,($NXTR-<6)+$DCB,DIS,$DCB8,7)
0794  01073 162022R PK15    LDA NXTR,I
0795  01074 001700          ALF 
0796  01075 001222          RAL,RAL 
0797  01076 142024R         ADA DCB,I 
0798  01077 072054R         STA .26 
0799  01100 016013X         JSB EXEC
0800  01101 001111R         DEF *+8 
0801  01102 000113R         DEF .61 
0802  01103 000026X         DEF D.
0803  01104 100045R         DEF .17,I 
0804  01105 000054R         DEF .26 
0805  01106 000012R         DEF DIS 
0806  01107 100033R         DEF DCB8,I
0807  01110 000036R         DEF .10 
0808*183        DO[AREG_$0;BREG_$1;IF AREG THEN GOTO PK15]
0809  01111 162014R         LDA .7,I
0810  01112 072114R         STA AREG
0811  01113 162011R         LDA .1,I
0812  01114 072115R         STA BREG
0813  01115 062114R         LDA AREG
0814  01116 002002          SZA 
0815  01117 027073R         JMP PK15
0816*184        DO[.E.R._$BREG;IER.] !CHECK ERRORS
0817  01120 162115R         LDA BREG,I
0818  01121 072025X         STA .E.R. 
0819  01122 016011X         JSB IER.
0820  01123 001124R         DEF *+1 
0821*185        LOCK.(DIS,5)         !UNLOCK DISC 
0822  01124 016007X         JSB LOCK. 
0823  01125 001130R         DEF *+3 
0824  01126 000012R         DEF DIS 
0825  01127 000070R         DEF .36 
0826*186        EXEC(5,-1)           !RETURN TRACKS 
0827  01130 016013X         JSB EXEC
0828  01131 001134R         DEF *+3 
0829  01132 000070R         DEF .36 
0830  01133 000077R         DEF .39 
0831*187  NXDIS:IFNOT PACK THEN [LUPT_LUPT+4;GOTO AGAIN]
0832  01134 062006R NXDIS   LDA PACK
0833  01135 002002          SZA 
0834  01136 027143R         JMP EXIT
0835  01137 062007R         LDA LUPT
0836  01140 042111R         ADA .51 
0837  01141 072007R         STA LUPT
0838  01142 026155R         JMP AGAIN 
0839*188  EXIT: DO[I.BUF_0;RETURN]
0840  01143 002400  EXIT    CLA 







 PAGE 0017 #01


0841  01144 072027X         STA I.BUF 
0842  01145 126133R         JMP PK..,I
0843*189        END 
0844*190  ! 
0845*191  !     SETAD SETS THE ADDRESSES FOR THE NEXT FILES ENTRY 
0846*192  !     IN PK.DR - IF NONE THEN AN FRETURN IS MADE. 
0847*193  ! 
0848*194  SETAD:SUBROUTINE FEXIT
0849  01146 000000  SETAD   NOP 
0850  01147 016001X         JSB .ENTR 
0851  01150 001146R         DEF SETAD 
0852*195  ! 
0853*196        IF FILCO=128 THEN FRETURN 
0854  01151 066016R         LDB FILCO 
0855  01152 056042R         CPB .15 
0856  01153 002001          RSS 
0857  01154 027157R         JMP .63 
0858  01155 002300          CCE 
0859  01156 127146R         JMP SETAD,I 
0860*197        PKD9_[PKD8_[PKD6_[PKD5_[PKD4_[PKD3_[PKD_\ 
0861*                           PAKAD+FILCO]+3]+1]+1]+1]\ 
0862*                             +2]+1 
0863  01157 062010R .63     LDA PAKAD 
0864  01160 042016R         ADA FILCO 
0865  01161 072072R         STA PKD 
0866  01162 042013R         ADA .5
0867  01163 072073R         STA PKD3
0868  01164 002004          INA 
0869  01165 072065R         STA PKD4
0870  01166 002004          INA 
0871  01167 072074R         STA PKD5
0872  01170 002004          INA 
0873  01171 072044R         STA PKD6
0874  01172 042025R         ADA .9
0875  01173 072110R         STA PKD8
0876  01174 002004          INA 
0877  01175 072066R         STA PKD9
0878*198        FILCO_FILCO+16
0879  01176 062016R         LDA FILCO 
0880  01177 042047R         ADA .21 
0881  01200 072016R         STA FILCO 
0882*199        RETURN
0883  01201 000040          CLE 
0884  01202 127146R         JMP SETAD,I 
0885*200        END 
0886*201  ! 
0887*202  !     BADTR RETURNS FALSE IF THE CURRENT FILE 
0888*203  !     AREA CONTAINS A BAD TRACK.
0889*204  ! 
0890*205  BADTR:SUBROUTINE(TRAK,SECT,NOSEC)FEXIT
0891  01203 000000  TRAK    NOP 
0892  01204 000000  SECT    NOP 
0893  01205 000000  NOSEC   NOP 
0894  01206 000000  BADTR   NOP 
0895  01207 016001X         JSB .ENTR 
0896  01210 001203R         DEF TRAK







 PAGE 0018 #01


0897*206        NTR_(SECT+NOSEC)/$DCB8+TRAK  !COMPUTE 
0898  01211 163204R         LDA SECT,I
0899  01212 143205R         ADA NOSEC,I 
0900  01213 006400          CLB 
0901  01214 002020          SSA 
0902  01215 007000          CMB 
0903  01216 016003X         JSB .DIV
0904  01217 100033R         DEF DCB8,I
0905  01220 143203R         ADA TRAK,I
0906  01221 072104R         STA NTR 
0907*207        NSEC_$B       !NEXT TRACK $ SECTOR
0908  01222 162011R         LDA .1,I
0909  01223 072105R         STA NSEC
0910*208  !     CHECK EACH TRACK AGAINST THE BAD LIST.
0911*209        FOR T_TRAK TO[IF NSEC THEN 0,ELSE -1]\
0912*                               + NTR DO[\
0913*            FOR BT_@BTL TO @BTL+5 DO[  \ 
0914*          IF $BT THEN[IF  T=$BT THEN FRETURN]]]
0915  01224 163203R         LDA TRAK,I
0916  01225 072037R         STA T 
0917  01226 027232R         JMP .67 
0918  01227 062037R .66     LDA T 
0919  01230 002004          INA 
0920  01231 072037R         STA T 
0921  01232 062105R .67     LDA NSEC
0922  01233 002003          SZA,RSS 
0923  01234 027237R         JMP .64 
0924  01235 062014R         LDA .7
0925  01236 027240R         JMP .65 
0926  01237 062077R .64     LDA .39 
0927  01240 042104R .65     ADA NTR 
0928  01241 003004          CMA,INA 
0929  01242 042037R         ADA T 
0930  01243 003004          CMA,INA 
0931  01244 002020          SSA 
0932  01245 027276R         JMP .68 
0933  01246 062067R         LDA .35 
0934  01247 072100R         STA BT
0935  01250 027254R         JMP .70 
0936  01251 062100R .69     LDA BT
0937  01252 002004          INA 
0938  01253 072100R         STA BT
0939  01254 062067R .70     LDA .35 
0940  01255 042070R         ADA .36 
0941  01256 003004          CMA,INA 
0942  01257 042100R         ADA BT
0943  01260 003004          CMA,INA 
0944  01261 002020          SSA 
0945  01262 027275R         JMP .71 
0946  01263 162100R         LDA BT,I
0947  01264 002003          SZA,RSS 
0948  01265 027274R         JMP .73 
0949  01266 066037R         LDB T 
0950  01267 156100R         CPB BT,I
0951  01270 002001          RSS 
0952  01271 027274R         JMP .73 







 PAGE 0019 #01


0953  01272 002300          CCE 
0954  01273 127206R         JMP BADTR,I 
0955  01274 027251R .73     JMP .69 
0956  01275 027227R .71     JMP .66 
0957*210        RETURN
0958  01276 000040  .68     CLE 
0959  01277 127206R         JMP BADTR,I 
0960*211        END 
0961*212  ! 
0962*213  !     TRAK.  CHECKS FOR ID SEGMENTS THAT REFERENCE
0963*214  !     FILE MANAGEMENT TRACKS.  IF ANY ARE FOUND, THE
0964*215  !     NAME OF THE PROGRAM IS PRINTED, 
0965*216  !     AND AN FEXIT IS TAKEN.
0966*217  ! 
0967*218  TRAK.:SUBROUTINE(LOGUN) FEXIT 
0968  01300 000000  LOGUN   NOP 
0969  01301 000000  TRAK.   NOP 
0970  01302 016001X         JSB .ENTR 
0971  01303 001300R         DEF LOGUN 
0972*219        LU3_LOGUN AND 1 
0973  01304 163300R         LDA LOGUN,I 
0974  01305 012011R         AND .1
0975  01306 072116R         STA LU3 
0976*220        DO[NSEC,FILCO_0;NTR_($PKD4-<7)] 
0977  01307 002400          CLA 
0978  01310 072105R         STA NSEC
0979  01311 072016R         STA FILCO 
0980  01312 162065R         LDA PKD4,I
0981  01313 001700          ALF 
0982  01314 001723          ALF,RAR 
0983  01315 072104R         STA NTR 
0984*221        SETAD 
0985  01316 017146R         JSB SETAD 
0986  01317 001320R         DEF *+1 
0987*222        T_$KEYWD
0988  01320 162117R         LDA .74,I 
0989  01321 072037R         STA T 
0990*223  NEXT: DMAN_[NAM3_[NAM2_[NAM1_$T+12]+1]+1]+12
0991  01322 162037R NEXT    LDA T,I 
0992  01323 042124R         ADA .75 
0993  01324 072123R         STA NAM1
0994  01325 002004          INA 
0995  01326 072122R         STA NAM2
0996  01327 002004          INA 
0997  01330 072121R         STA NAM3
0998  01331 042124R         ADA .75 
0999  01332 072120R         STA DMAN
1000*224        IF [T2_$NAM3 AND 7]=1 THEN GOTO OK
1001  01333 162121R         LDA NAM3,I
1002  01334 012036R         AND .10 
1003  01335 072125R         STA T2
1004  01336 052011R         CPA .1
1005  01337 027411R         JMP OK
1006*225        IF T2=4 THEN GOTO OK
1007  01340 066125R         LDB T2
1008  01341 056111R         CPB .51 







 PAGE 0020 #01


1009  01342 027411R         JMP OK
1010*226        IF (($DMAN-<1)AND 1)#LU3 THEN GOTO OK 
1011  01343 162120R         LDA DMAN,I
1012  01344 001200          RAL 
1013  01345 012011R         AND .1
1014  01346 052116R         CPA LU3 
1015  01347 002001          RSS 
1016  01350 027411R         JMP OK
1017*227        IF ($DMAN AND 77600K)<NTR THEN GOTO OK
1018  01351 162120R         LDA DMAN,I
1019  01352 012061R         AND .29 
1020  01353 003004          CMA,INA 
1021  01354 042104R         ADA NTR 
1022  01355 003004          CMA,INA 
1023  01356 002020          SSA 
1024  01357 027411R         JMP OK
1025*228        IFNOT NSEC THEN MSS.(11)
1026  01360 062105R         LDA NSEC
1027  01361 002002          SZA 
1028  01362 027366R         JMP .76 
1029  01363 016010X         JSB MSS.
1030  01364 001366R         DEF *+2 
1031  01365 000126R         DEF .77 
1032*229        NSEC_1
1033  01366 002404  .76     CLA,INA 
1034  01367 072105R         STA NSEC
1035*230        $@BTL_$NAM1 
1036  01370 162123R         LDA NAM1,I
1037  01371 172067R         STA .35,I 
1038*231        $([BT_@BTL+1]+1)_($NAM3 AND 77400K)+40K 
1039  01372 162121R         LDA NAM3,I
1040  01373 012127R         AND .78 
1041  01374 042041R         ADA .14 
1042  01375 066067R         LDB .35 
1043  01376 006004          INB 
1044  01377 076100R         STB BT
1045  01400 006004          INB 
1046  01401 170001          STA .B.,I 
1047*232        $BT_$NAM2 
1048  01402 162122R         LDA NAM2,I
1049  01403 172100R         STA BT,I
1050*233        FM.ER(2,BTL,3)
1051  01404 016012X         JSB FM.ER 
1052  01405 001411R         DEF *+4 
1053  01406 000025R         DEF .9
1054  01407 000000R         DEF BTL 
1055  01410 000013R         DEF .5
1056*234  OK:   T_T+1 
1057  01411 062037R OK      LDA T 
1058  01412 002004          INA 
1059  01413 072037R         STA T 
1060*235        IF $T THEN GOTO NEXT
1061  01414 162037R         LDA T,I 
1062  01415 002002          SZA 
1063  01416 027322R         JMP NEXT
1064*236        IF NSEC THEN FRETURN







 PAGE 0021 #01


1065  01417 062105R         LDA NSEC
1066  01420 002003          SZA,RSS 
1067  01421 027424R         JMP .79 
1068  01422 002300          CCE 
1069  01423 127301R         JMP TRAK.,I 
1070*237        RETURN
1071  01424 000040  .79     CLE 
1072  01425 127301R         JMP TRAK.,I 
1073*238        END 
1074*239        END 
1075                        END 
**  NO ERRORS*












































$END ASMB     

*
--> Assemble fmp/29033-80008_Rev-A_1
ON,ASMB,99







 PAGE 0001


0001                ASMB,B,X,L
**  NO ERRORS*





























































 PAGE 0002 #01


0001                ASMB,B,X,L
0002*001  SPL, L, M, O
0003*002        NAME  CR..(8) 
0004  00000                 NAM CR..,8
0005  00000         .A.     EQU  0
0006  00001         .B.     EQU  1
0007                        ENT CR..
0008                        EXT .ENTR 
0009                        EXT .MPY
0010                        EXT .DIV
0011                        EXT .DRCT 
0012                        EXT CREA. 
0013                        EXT NAM.. 
0014                        EXT EXEC
0015                        EXT RWNDF 
0016                        EXT WRITF 
0017                        EXT IER.
0018                        EXT OPEN. 
0019                        EXT LOCK. 
0020                        EXT DR.RD 
0021                        EXT N.OPL 
0022                        EXT O.BUF 
0023                        EXT PK.DR 
0024                        EXT D.
0025                        EXT .E.R. 
0026  00000 000000  NAM     BSS 1 
0027  00001 000000  NAM1    BSS 1 
0028  00002 000000  NAM2    BSS     2 
0029  00004 000000  LUC     BSS 1 
0030  00005 000000  EF      BSS 1 
0031  00006 000000  SPLC    BSS 1 
0032  00007 000000  RW      BSS 1 
0033  00010 000000  SC      BSS     8 
0034  00020 000000  TY      BSS 1 
0035  00021 000002  .1      OCT 000002
0036  00022 000000  DCB4    BSS 1 
0037  00023 000000  DCB3    BSS 1 
0038  00024 000000  DCB2    BSS 1 
0039  00025 000000  DCB     BSS 1 
0040  00026 000000  DCB15   BSS 1 
0041  00027 000000  DCB13   BSS 1 
0042  00030 000000  DCB9    BSS 1 
0043  00031 000000  DCB8    BSS 1 
0044  00032 000000  DCB7    BSS 1 
0045  00033 000000  DCB6    BSS 1 
0046  00034 000000  DCB5    BSS 1 
0047  00035 000004  .2      OCT 000004
0048  00036 000000  LIS21   BSS 1 
0049  00037 000000  LIS20   BSS 1 
0050  00040 000000  LIS17   BSS 1 
0051  00041 000000  LIS16   BSS 1 
0052  00042 000000  LIS13   BSS 1 
0053  00043 000000  LIS9    BSS 1 
0054  00044 000000  LIS5    BSS 1 
0055  00045 000000  LIS1    BSS 1 
0056  00046 000003  .3      OCT 000003







 PAGE 0003 #01


0057  00047 000000  ADD     BSS 1 
0058  00050 000200  .4      OCT 000200
0059  00051 000000  BLK     BSS 1 
0060  00052 000000  SP      BSS 1 
0061  00053 000000  T       BSS 1 
0062  00054 000001  .5      OCT 000001
0063  00055 000000R .9      DEF NAM 
0064  00056 000017  .10     OCT 000017
0065  00057 177761  .13     OCT 177761
0066  00060 157777  .14     OCT 157777
0067  00061 177777  .15     OCT 177777
0068  00062 000000  .16     OCT 000000
0069  00063 051105  .18     OCT 051105
0070  00064 100000  .19     OCT 100000
0071  00065 053522  .21     OCT 053522
0072  00066 041117  .23     OCT 041117
0073  00067 100001  .24     OCT 100001
0074  00070 041123  .26     OCT 041123
0075  00071 043123  .28     OCT 043123
0076  00072 042517  .31     OCT 042517
0077  00073 000100  .32     OCT 000100
0078  00074 050101  .34     OCT 050101
0079  00075 001100  .35     OCT 001100
0080  00076 046105  .37     OCT 046105
0081  00077 001000  .38     OCT 001000
0082  00100 177775  .40     OCT 177775
0083  00101 000037  .41     OCT 000037
0084  00102 041111  .45     OCT 041111
0085  00103 040523  .46     OCT 040523
0086  00104 000077  .47     OCT 000077
0087  00105 000000  AREG    BSS 1 
0088  00106 177776  .48     OCT 177776
0089  00107 000000  T1      BSS 1 
0090  00110 000010R .52     DEF SC
0091  00111 001757  .53     OCT 001757
0092  00112 001760  .56     OCT 001760
0093  00113 000000  PKD8    BSS 1 
0094  00114 000000  PKD6    BSS 1 
0095  00115 000000  NTR     BSS 1 
0096  00116 001717  .58     OCT 001717
0097  00117 000000  .59     BSS 1 
0098  00120 000011  .60     OCT 000011
0099  00121 000000  BREG    BSS 1 
0100  00122 000020  .62     OCT 000020
0101  00123 000000  PKD     BSS 1 
0102  00124 000000  PKD1    BSS 1 
0103  00125 000000  PKD2    BSS 1 
0104  00126 000002R .65     DEF NAM2
0105  00127 000000  PKD15   BSS 1 
0106  00130 177764  .71     OCT 177764
0107  00131 000007  .72     OCT 000007
0108  00132 000005  .73     OCT 000005
0109  00133 000024  .74     OCT 000024
0110  00134 000067  .75     OCT 000067
0111  00135 000070  .76     OCT 000070
0112*003  !     THIS  MODULE  OF  THE  RTE  FMP 







 PAGE 0004 #01


0113*004  !     ROUTINE F M G R         CREATES EMPTY 
0114*005  !     FILES,  IT ALSO         CREATS TYPE 
0115*006  !     ZERO    FILES.
0116*007  !     COMMANDS   THIS ROUTINE HANDLES 
0117*008  !     ARE:
0118*009  !     CR,NAMR 
0119*010  !         WHERE 
0120*011  !         NAMR IS  A  NAME REFERENCE
0121*012  !           WHICH INCLUDES
0122*013  !          SC     SECURITY    CODE
0123*014  !           CR    CARTRIDGE   ID
0124*015  !          TY     TYPE
0125*016  !           SZ 1  SIZE  (NO. OF BLOCKS) 
0126*017  !           SZ 2   RECORD SIZE (ONLY IF TY=2) 
0127*018  !     OR
0128*019  !     CR,NAMR,LU,RWOP,SPOP,EOFOP,  SUBFUN OP
0129*020  !         WHERE : 
0130*021  !         NAMR IS AS ABOVE EXCEPT 
0131*022  !         TY=0
0132*023  !           (IN THIS CASE CR IS FORCED TO-2)
0133*024  !         LU    IS THE DEVICE  LOGICAL UNIT 
0134*025  !         RWOP  IS  THE  READ  WRITE  OPTION
0135*026  !             I.E. "READ", "WRITE", "BOTH"
0136*027  !         SPOP  IS THE  SPACING  OPTION 
0137*028  !              I.E. " BSPACF", "FSPACE", "BOTH" 
0138*029  !         EOF  IS THE END OF FILE OPTION
0139*030  !              I.E.  "EOF","LEADER","PAGE", 
0140*031  !                  NUMERIC SUB FUNCTION.
0141*032  !         SUBFUNOP IS THE READ/WRITE
0142*033  !                    SUB FUNCTION 
0143*034  !               (I.E. "BINARY","ASCII",NUMERIC
0144*035  !                    SUBFUNCTION. 
0145*036  !     DEFINE   EXTERNALS
0146*037  ! 
0147*038        LET CREA.,NAM..,EXEC, \ 
0148*            RWNDF,WRITF, IER.,\
0149*       OPEN.,\ 
0150*            LOCK.,DR.RD        BE SUBROUTINE,EXTERNAL
0151*039  ! 
0152*040  ! 
0153*041        LET N.OPL,O.BUF,PK.DR,D.,.E.R.  BE INTEGER,EXTERNAL 
0154*042  ! 
0155*043  !      DEFINE   LOCAL   SUBS. 
0156*044  ! 
0157*045        LET  SETAD, CR..  BE  SUBROUTINE
0158*046  ! 
0159*047  !     DEFINE  16 WORD  TYPE ZERO NAME BLOCK 
0160*048  ! 
0161*049        LET  NAM,NAM1,NAM2(2),LUC,\ 
0162*            EF,SPLC,RW,SC(8)    BE INTEGER 
0163*050  ! 
0164*051  !     DEFINE   CONSTANTS
0165*052  ! 
0166*053        LET  XEQT     BE CONSTANT (1717K) 
0167*054        LET  SECT2    BE CONSTANT (1757K) 
0168*055        LET  SECT3    BE CONSTANT (1760K) 







 PAGE 0005 #01


0169*056        LET  EOF      BE CONSTANT (42517K)
0170*057        LET  LE       BE CONSTANT (46105K)
0171*058        LET  PA       BE CONSTANT (50101K)
0172*059        LET  AS       BE CONSTANT (40523K)
0173*060        LET  BI       BE CONSTANT (41111K)
0174*061        LET  RE       BE CONSTANT (51105K)
0175*062        LET  WR       BE CONSTANT (53522K)
0176*063        LET  BO       BE CONSTANT (41117K)
0177*064        LET  BS       BE CONSTANT (41123K)
0178*065        LET  FS       BE CONSTANT (43123K)
0179*066  CR..: SUBROUTINE(NO,LIS, ER) GLOBAL 
0180  00136 000000  NO      NOP 
0181  00137 000000  LIS     NOP 
0182  00140 000000  ER      NOP 
0183  00141 000000  CR..    NOP 
0184  00142 016001X         JSB .ENTR 
0185  00143 000136R         DEF NO
0186*067        TY_@N.OPL+2 
0187  00144 016004X         JSB .DRCT 
0188  00145 000016X         DEF N.OPL 
0189  00146 042021R         ADA .1
0190  00147 072020R         STA TY
0191*068  ! 
0192*069               DCB4 _[DCB3_[DCB2_[DCB_@O.BUF]+\ 
0193*               2]+1]+1 
0194  00150 016004X         JSB .DRCT 
0195  00151 000017X         DEF O.BUF 
0196  00152 072025R         STA DCB 
0197  00153 042021R         ADA .1
0198  00154 072024R         STA DCB2
0199  00155 002004          INA 
0200  00156 072023R         STA DCB3
0201  00157 002004          INA 
0202  00160 072022R         STA DCB4
0203*070        DCB15_[DCB13_[DCB9_[DCB8_[DCB7_[DCB6_[DCB5 _\ 
0204*                   DCB4+1]+1]+1]+1]+1]+ 4]+2 
0205  00161 002004          INA 
0206  00162 072034R         STA DCB5
0207  00163 002004          INA 
0208  00164 072033R         STA DCB6
0209  00165 002004          INA 
0210  00166 072032R         STA DCB7
0211  00167 002004          INA 
0212  00170 072031R         STA DCB8
0213  00171 002004          INA 
0214  00172 072030R         STA DCB9
0215  00173 042035R         ADA .2
0216  00174 072027R         STA DCB13 
0217  00175 042021R         ADA .1
0218  00176 072026R         STA DCB15 
0219*071  ! 
0220*072        LIS21_[LIS20_[LIS17_[LIS16_[LIS13_[LIS9_[\
0221*              LIS5_[LIS1_@LIS+1]+4]+4]+4]+3]+1]+\
0222*                   3]+1
0223  00177 062137R         LDA LIS 
0224  00200 002004          INA 







 PAGE 0006 #01


0225  00201 072045R         STA LIS1
0226  00202 042035R         ADA .2
0227  00203 072044R         STA LIS5
0228  00204 042035R         ADA .2
0229  00205 072043R         STA LIS9
0230  00206 042035R         ADA .2
0231  00207 072042R         STA LIS13 
0232  00210 042046R         ADA .3
0233  00211 072041R         STA LIS16 
0234  00212 002004          INA 
0235  00213 072040R         STA LIS17 
0236  00214 042046R         ADA .3
0237  00215 072037R         STA LIS20 
0238  00216 002004          INA 
0239  00217 072036R         STA LIS21 
0240*073  ! 
0241*074        ADD_128 
0242  00220 062050R         LDA .4
0243  00221 072047R         STA ADD 
0244*075        BLK,RW,SP,SPLC,EF_0  !INITILIZE FLAGES
0245  00222 002400          CLA 
0246  00223 072051R         STA BLK 
0247  00224 072007R         STA RW
0248  00225 072052R         STA SP
0249  00226 072006R         STA SPLC
0250  00227 072005R         STA EF
0251*076  ! 
0252*077        FOR  T_@ NAM TO @ NAM +15 DO $T_0 
0253  00230 062055R         LDA .9
0254  00231 072053R         STA T 
0255  00232 026236R         JMP .7
0256  00233 062053R .6      LDA T 
0257  00234 002004          INA 
0258  00235 072053R         STA T 
0259  00236 062055R .7      LDA .9
0260  00237 042056R         ADA .10 
0261  00240 003004          CMA,INA 
0262  00241 042053R         ADA T 
0263  00242 003004          CMA,INA 
0264  00243 002020          SSA 
0265  00244 026250R         JMP .8
0266  00245 002400          CLA 
0267  00246 172053R         STA T,I 
0268  00247 026233R         JMP .6
0269*078        IF $TY THEN [CREA.(O.BUF, $LIS1,N.OPL)?[\ 
0270*                      ER_-15];RETURN]
0271  00250 162020R .8      LDA TY,I
0272  00251 002003          SZA,RSS 
0273  00252 026265R         JMP .12 
0274  00253 016005X         JSB CREA. 
0275  00254 000260R         DEF *+4 
0276  00255 000017X         DEF O.BUF 
0277  00256 100045R         DEF LIS1,I
0278  00257 000016X         DEF N.OPL 
0279  00260 002041          SEZ,RSS 
0280  00261 026264R         JMP .11 







 PAGE 0007 #01


0281  00262 062057R         LDA .13 
0282  00263 172140R         STA ER,I
0283  00264 126141R .11     JMP CR..,I
0284*079        IF $LIS5 >20000K THEN GO TO ILLU
0285  00265 166044R .12     LDB LIS5,I
0286  00266 046060R         ADB .14 
0287  00267 006021          SSB,RSS 
0288  00270 027025R         JMP ILLU
0289*080        IF $LIS5<1       THEN GO TO ILLU
0290  00271 166044R         LDB LIS5,I
0291  00272 046061R         ADB .15 
0292  00273 006020          SSB 
0293  00274 027025R         JMP ILLU
0294*081        OPEN. (O.BUF,$LIS5,N.OPL,0)  !SET DEFAULT EOF 
0295  00275 016013X         JSB OPEN. 
0296  00276 000303R         DEF *+5 
0297  00277 000017X         DEF O.BUF 
0298  00300 100044R         DEF LIS5,I
0299  00301 000016X         DEF N.OPL 
0300  00302 000062R         DEF .16 
0301*082        IFNOT   $LIS9  THEN  GO TO  MISPM 
0302  00303 162043R         LDA LIS9,I
0303  00304 002003          SZA,RSS 
0304  00305 027030R         JMP MISPM 
0305*083  !     SET   R/W  CODE 
0306*084        IF $LIS9 = RE  THEN   RW_100000K
0307  00306 166043R         LDB LIS9,I
0308  00307 056063R         CPB .18 
0309  00310 002001          RSS 
0310  00311 026314R         JMP .17 
0311  00312 062064R         LDA .19 
0312  00313 072007R         STA RW
0313*085        IF $LIS9 = WR THEN RW_1 
0314  00314 166043R .17     LDB LIS9,I
0315  00315 056065R         CPB .21 
0316  00316 002001          RSS 
0317  00317 026322R         JMP .20 
0318  00320 002404          CLA,INA 
0319  00321 072007R         STA RW
0320*086        IF $LIS9 = BO  THEN RW_100001K
0321  00322 166043R .20     LDB LIS9,I
0322  00323 056066R         CPB .23 
0323  00324 002001          RSS 
0324  00325 026330R         JMP .22 
0325  00326 062067R         LDA .24 
0326  00327 072007R         STA RW
0327*087        IFNOT   RW    THEN  GO TO ILLPM 
0328  00330 062007R .22     LDA RW
0329  00331 002003          SZA,RSS 
0330  00332 027033R         JMP ILLPM 
0331*088  !     SET   SPACING CODE
0332*089        IFNOT $LIS13  THEN GO TO  EOFCD 
0333  00333 162042R         LDA LIS13,I 
0334  00334 002003          SZA,RSS 
0335  00335 026363R         JMP EOFCD 
0336*090        IF   $LIS13= BS  THEN   SP_100000K







 PAGE 0008 #01


0337  00336 166042R         LDB LIS13,I 
0338  00337 056070R         CPB .26 
0339  00340 002001          RSS 
0340  00341 026344R         JMP .25 
0341  00342 062064R         LDA .19 
0342  00343 072052R         STA SP
0343*091        IF $LIS13 = FS  THEN  SP_1
0344  00344 166042R .25     LDB LIS13,I 
0345  00345 056071R         CPB .28 
0346  00346 002001          RSS 
0347  00347 026352R         JMP .27 
0348  00350 002404          CLA,INA 
0349  00351 072052R         STA SP
0350*092        IF  $LIS13=BO THEN SP_100001K 
0351  00352 166042R .27     LDB LIS13,I 
0352  00353 056066R         CPB .23 
0353  00354 002001          RSS 
0354  00355 026360R         JMP .29 
0355  00356 062067R         LDA .24 
0356  00357 072052R         STA SP
0357*093        IFNOT SP THEN GOTO ILLPM !BAD SP COMMAND
0358  00360 062052R .29     LDA SP
0359  00361 002003          SZA,RSS 
0360  00362 027033R         JMP ILLPM 
0361*094  !     SET  EOF  CODE  (DEFAULT -FMGR DEFAULT) 
0362*095  ! 
0363*096  EOFCD:IF $LIS17=EOF THEN EF_100K
0364  00363 166040R EOFCD   LDB LIS17,I 
0365  00364 056072R         CPB .31 
0366  00365 002001          RSS 
0367  00366 026371R         JMP .30 
0368  00367 062073R         LDA .32 
0369  00370 072005R         STA EF
0370*097        IF   $LIS17=PA   THEN   EF_1100K
0371  00371 166040R .30     LDB LIS17,I 
0372  00372 056074R         CPB .34 
0373  00373 002001          RSS 
0374  00374 026377R         JMP .33 
0375  00375 062075R         LDA .35 
0376  00376 072005R         STA EF
0377*098        IF $LIS17=LE THEN EF_1000K
0378  00377 166040R .33     LDB LIS17,I 
0379  00400 056076R         CPB .37 
0380  00401 002001          RSS 
0381  00402 026405R         JMP .36 
0382  00403 062077R         LDA .38 
0383  00404 072005R         STA EF
0384*099        IF  $LIS16<3  THEN EF_($LIS17 AND 37K)-<6 
0385  00405 166041R .36     LDB LIS16,I 
0386  00406 046100R         ADB .40 
0387  00407 006021          SSB,RSS 
0388  00410 026416R         JMP .39 
0389  00411 162040R         LDA LIS17,I 
0390  00412 012101R         AND .41 
0391  00413 001700          ALF 
0392  00414 001222          RAL,RAL 







 PAGE 0009 #01


0393  00415 072005R         STA EF
0394*100        IFNOT  $LIS16  THEN   EF_$DCB4
0395  00416 162041R .39     LDA LIS16,I 
0396  00417 002002          SZA 
0397  00420 026423R         JMP .42 
0398  00421 162022R         LDA DCB4,I
0399  00422 072005R         STA EF
0400*101        IFNOT EF THEN GO TO ILLPM 
0401  00423 062005R .42     LDA EF
0402  00424 002003          SZA,RSS 
0403  00425 027033R         JMP ILLPM 
0404*102  ! 
0405*103  !     SET   SUB FUNCTION  (DEFAULT 00=ASCII 
0406*104  ! 
0407*105        IFNOT $LIS20  THEN GO TO SETUP
0408  00426 162037R         LDA LIS20,I 
0409  00427 002003          SZA,RSS 
0410  00430 026456R         JMP SETUP 
0411*106        IF   $LIS20<3 THEN   LUC_($LIS21 AND 37K)-<6
0412  00431 166037R         LDB LIS20,I 
0413  00432 046100R         ADB .40 
0414  00433 006021          SSB,RSS 
0415  00434 026442R         JMP .43 
0416  00435 162036R         LDA LIS21,I 
0417  00436 012101R         AND .41 
0418  00437 001700          ALF 
0419  00440 001222          RAL,RAL 
0420  00441 072004R         STA LUC 
0421*107        IF   $LIS21 = BI THEN   LUC_100K
0422  00442 166036R .43     LDB LIS21,I 
0423  00443 056102R         CPB .45 
0424  00444 002001          RSS 
0425  00445 026450R         JMP .44 
0426  00446 062073R         LDA .32 
0427  00447 072004R         STA LUC 
0428*108        IF $LIS21=AS THEN GO TO SETUP 
0429  00450 166036R .44     LDB LIS21,I 
0430  00451 056103R         CPB .46 
0431  00452 026456R         JMP SETUP 
0432*109        IFNOT LUC THEN GO TO ILLPM !IF GIVEN AND NOT SET ERROR
0433  00453 062004R         LDA LUC 
0434  00454 002003          SZA,RSS 
0435  00455 027033R         JMP ILLPM 
0436*110  ! 
0437*111  SETUP: LUC_  LUC+[T_($ LIS5 AND 77K)] 
0438  00456 162044R SETUP   LDA LIS5,I
0439  00457 012104R         AND .47 
0440  00460 072053R         STA T 
0441  00461 042004R         ADA LUC 
0442  00462 072004R         STA LUC 
0443*112        EF_EF OR T
0444  00463 062005R         LDA EF
0445  00464 032053R         IOR T 
0446  00465 072005R         STA EF
0447*113        NAM.. ($LIS1) 
0448  00466 016006X         JSB NAM.. 







 PAGE 0010 #01


0449  00467 000471R         DEF *+2 
0450  00470 100045R         DEF LIS1,I
0451*114        AREG_$0 
0452  00471 162062R         LDA .16,I 
0453  00472 072105R         STA AREG
0454*115        IF  AREG  THEN GO TO ILNAM
0455  00473 002002          SZA 
0456  00474 027036R         JMP ILNAM 
0457*116        LOCK.(-2,3)?[RETURN]  ! LOCK THE DISC 
0458  00475 016014X         JSB LOCK. 
0459  00476 000501R         DEF *+3 
0460  00477 000106R         DEF .48 
0461  00500 000046R         DEF .3
0462  00501 002040          SEZ 
0463  00502 126141R         JMP CR..,I
0464*117        T1_@NAM 
0465  00503 062055R         LDA .9
0466  00504 072107R         STA T1
0467*118        FOR T_LIS1  TO LIS1+2  DO [$T1_$T;T1_T1+1]
0468  00505 062045R         LDA LIS1
0469  00506 072053R         STA T 
0470  00507 026513R         JMP .50 
0471  00510 062053R .49     LDA T 
0472  00511 002004          INA 
0473  00512 072053R         STA T 
0474  00513 062045R .50     LDA LIS1
0475  00514 042021R         ADA .1
0476  00515 003004          CMA,INA 
0477  00516 042053R         ADA T 
0478  00517 003004          CMA,INA 
0479  00520 002020          SSA 
0480  00521 026530R         JMP .51 
0481  00522 162053R         LDA T,I 
0482  00523 172107R         STA T1,I
0483  00524 062107R         LDA T1
0484  00525 002004          INA 
0485  00526 072107R         STA T1
0486  00527 026510R         JMP .49 
0487*119        SC(1)_N.OPL    !SET THE SECURITY CODE 
0488  00530 062016X .51     LDA N.OPL 
0489  00531 172110R         STA .52,I 
0490*120  ! 
0491*121        SETAD 
0492  00532 017041R         JSB SETAD 
0493  00533 000534R         DEF *+1 
0494*122        $DCB8_$SECT2
0495  00534 162111R         LDA .53,I 
0496  00535 172031R         STA DCB8,I
0497*123        IF $SECT3 THEN [IF $SECT3<$SECT2 THEN $DCB8_$SECT3] 
0498  00536 162112R         LDA .56,I 
0499  00537 002003          SZA,RSS 
0500  00540 026550R         JMP .55 
0501  00541 166111R         LDB .53,I 
0502  00542 007004          CMB,INB 
0503  00543 146112R         ADB .56,I 
0504  00544 006021          SSB,RSS 







 PAGE 0011 #01


0505  00545 026550R         JMP .55 
0506  00546 162112R         LDA .56,I 
0507  00547 172031R         STA DCB8,I
0508*124        $DCB5_ -$PKD8*$PKD6+2 
0509  00550 166113R .55     LDB PKD8,I
0510  00551 007004          CMB,INB 
0511  00552 060001          LDA .B. 
0512  00553 016002X         JSB .MPY
0513  00554 100114R         DEF PKD6,I
0514  00555 042021R         ADA .1
0515  00556 172034R         STA DCB5,I
0516*125        NTR_$DCB5/$DCB8 
0517  00557 006400          CLB 
0518  00560 002020          SSA 
0519  00561 007000          CMB 
0520  00562 016003X         JSB .DIV
0521  00563 100031R         DEF DCB8,I
0522  00564 072115R         STA NTR 
0523*126        IF  $1  THEN  NTR_NTR+1 
0524  00565 162054R         LDA .5,I
0525  00566 002003          SZA,RSS 
0526  00567 026573R         JMP .57 
0527  00570 062115R         LDA NTR 
0528  00571 002004          INA 
0529  00572 072115R         STA NTR 
0530*127  ! 
0531*128        EXEC (4,NTR,$DCB3,$DCB,$DCB8)  !GET A TRACK 
0532  00573 016007X .57     JSB EXEC
0533  00574 000602R         DEF *+6 
0534  00575 000035R         DEF .2
0535  00576 000115R         DEF NTR 
0536  00577 100023R         DEF DCB3,I
0537  00600 100025R         DEF DCB,I 
0538  00601 100031R         DEF DCB8,I
0539*129  ! 
0540*130        EXEC (2,$DCB, NAM,128,$DCB3,0) ! WRITE DIRENT 
0541  00602 016007X         JSB EXEC
0542  00603 000612R         DEF *+7 
0543  00604 000021R         DEF .1
0544  00605 100025R         DEF DCB,I 
0545  00606 000000R         DEF NAM 
0546  00607 000050R         DEF .4
0547  00610 100023R         DEF DCB3,I
0548  00611 000062R         DEF .16 
0549*131  ! 
0550*132  SCHD: EXEC (9,D.,$XEQT,($DCB3 -<6)+$DCB,-2,0,1)!ENTER 
0551  00612 162023R SCHD    LDA DCB3,I
0552  00613 001700          ALF 
0553  00614 001222          RAL,RAL 
0554  00615 142025R         ADA DCB,I 
0555  00616 072117R         STA .59 
0556  00617 016007X         JSB EXEC
0557  00620 000630R         DEF *+8 
0558  00621 000120R         DEF .60 
0559  00622 000021X         DEF D.
0560  00623 100116R         DEF .58,I 







 PAGE 0012 #01


0561  00624 000117R         DEF .59 
0562  00625 000106R         DEF .48 
0563  00626 000062R         DEF .16 
0564  00627 000054R         DEF .5
0565*133        AREG_$0 
0566  00630 162062R         LDA .16,I 
0567  00631 072105R         STA AREG
0568*134        BREG_$1 
0569  00632 162054R         LDA .5,I
0570  00633 072121R         STA BREG
0571*135  ! 
0572*136        IF AREG THEN GO TO SCHD 
0573  00634 062105R         LDA AREG
0574  00635 002002          SZA 
0575  00636 026612R         JMP SCHD
0576*137  ! 
0577*138        IF  $BREG <0 THEN[ER_$BREG; RETURN ]
0578  00637 166121R         LDB BREG,I
0579  00640 006021          SSB,RSS 
0580  00641 026645R         JMP .61 
0581  00642 162121R         LDA BREG,I
0582  00643 172140R         STA ER,I
0583  00644 126141R         JMP CR..,I
0584*139  ! 
0585*140        DO[$DCB7_100000K;$DCB4,$DCB15,$DCB13_0;$DCB9_$XEQT] 
0586  00645 062064R .61     LDA .19 
0587  00646 172032R         STA DCB7,I
0588  00647 002400          CLA 
0589  00650 172022R         STA DCB4,I
0590  00651 172026R         STA DCB15,I 
0591  00652 172027R         STA DCB13,I 
0592  00653 162116R         LDA .58,I 
0593  00654 172030R         STA DCB9,I
0594*141        $DCB6_16               !COMPLET DCB 
0595  00655 062122R         LDA .62 
0596  00656 172033R         STA DCB6,I
0597*142        $DCB2_2                !  FAKE  OUT 
0598  00657 062021R         LDA .1
0599  00660 172024R         STA DCB2,I
0600*143        RWNDF (O.BUF,.E.R.)    ! SET UP TO WRITE
0601  00661 016010X         JSB RWNDF 
0602  00662 000665R         DEF *+3 
0603  00663 000017X         DEF O.BUF 
0604  00664 000022X         DEF .E.R. 
0605*144        IER.                   ! CHECK ERRORS 
0606  00665 016012X         JSB IER.
0607  00666 000667R         DEF *+1 
0608*145  ! 
0609*146        SPLC_SP                 !SET SPACE CODE 
0610  00667 062052R         LDA SP
0611  00670 072006R         STA SPLC
0612*147        WRITF(O.BUF,.E.R.,$PKD)      ! WRITE DISC 
0613  00671 016011X         JSB WRITF 
0614  00672 000676R         DEF *+4 
0615  00673 000017X         DEF O.BUF 
0616  00674 000022X         DEF .E.R. 







 PAGE 0013 #01


0617  00675 100123R         DEF PKD,I 
0618*148        WRITF (O.BUF,.E.R.,  NAM) ! WRITE FILENM
0619  00676 016011X         JSB WRITF 
0620  00677 000703R         DEF *+4 
0621  00700 000017X         DEF O.BUF 
0622  00701 000022X         DEF .E.R. 
0623  00702 000000R         DEF NAM 
0624*149  SETA: SETAD  ! GET NEXT ENTRY 
0625  00703 017041R SETA    JSB SETAD 
0626  00704 000705R         DEF *+1 
0627*150        IF  $PKD =  NAM THEN [IF  $ PKD1= NAM1\ 
0628*                THEN [IF $PKD2 = NAM2(1)  THEN \ 
0629*                     GO TO FILL]]
0630  00705 166123R         LDB PKD,I 
0631  00706 056000R         CPB NAM 
0632  00707 002001          RSS 
0633  00710 026720R         JMP .64 
0634  00711 166124R         LDB PKD1,I
0635  00712 056001R         CPB NAM1
0636  00713 002001          RSS 
0637  00714 026720R         JMP .64 
0638  00715 166125R         LDB PKD2,I
0639  00716 156126R         CPB .65,I 
0640  00717 026732R         JMP FILL
0641*151        WRITF (O.BUF,.E.R., $PKD) 
0642  00720 016011X .64     JSB WRITF 
0643  00721 000725R         DEF *+4 
0644  00722 000017X         DEF O.BUF 
0645  00723 000022X         DEF .E.R. 
0646  00724 100123R         DEF PKD,I 
0647*152        IER.
0648  00725 016012X         JSB IER.
0649  00726 000727R         DEF *+1 
0650*153        IF $PKD THEN GO TO SETA 
0651  00727 162123R         LDA PKD,I 
0652  00730 002002          SZA 
0653  00731 026703R         JMP SETA
0654*154  FILL: FOR  T_PKD TO PKD15      DO  $T_0 
0655  00732 062123R FILL    LDA PKD 
0656  00733 072053R         STA T 
0657  00734 026740R         JMP .67 
0658  00735 062053R .66     LDA T 
0659  00736 002004          INA 
0660  00737 072053R         STA T 
0661  00740 066053R .67     LDB T 
0662  00741 007004          CMB,INB 
0663  00742 046127R         ADB PKD15 
0664  00743 006020          SSB 
0665  00744 026750R         JMP .69 
0666  00745 002400          CLA 
0667  00746 172053R         STA T,I 
0668  00747 026735R         JMP .66 
0669*155        UNTIL  .E.R.= -12 DO[IER.;WRITF (O.BUF,.E.R.,\
0670*                                              $PKD)] 
0671  00750 066022X .69     LDB .E.R. 
0672  00751 056130R         CPB .71 







 PAGE 0014 #01


0673  00752 026763R         JMP CR1 
0674  00753 016012X         JSB IER.
0675  00754 000755R         DEF *+1 
0676  00755 016011X         JSB WRITF 
0677  00756 000762R         DEF *+4 
0678  00757 000017X         DEF O.BUF 
0679  00760 000022X         DEF .E.R. 
0680  00761 100123R         DEF PKD,I 
0681  00762 026750R         JMP .69 
0682*156  CR1:  EXEC (9,D.,$XEQT, ($DCB3-<6)+$DCB,-2,$DCB8,7) 
0683  00763 162023R CR1     LDA DCB3,I
0684  00764 001700          ALF 
0685  00765 001222          RAL,RAL 
0686  00766 142025R         ADA DCB,I 
0687  00767 072117R         STA .59 
0688  00770 016007X         JSB EXEC
0689  00771 001001R         DEF *+8 
0690  00772 000120R         DEF .60 
0691  00773 000021X         DEF D.
0692  00774 100116R         DEF .58,I 
0693  00775 000117R         DEF .59 
0694  00776 000106R         DEF .48 
0695  00777 100031R         DEF DCB8,I
0696  01000 000131R         DEF .72 
0697*157        DO[ AREG_$0;   BREG_$1; IF AREG THEN GO TO CR1] 
0698  01001 162062R         LDA .16,I 
0699  01002 072105R         STA AREG
0700  01003 162054R         LDA .5,I
0701  01004 072121R         STA BREG
0702  01005 062105R         LDA AREG
0703  01006 002002          SZA 
0704  01007 026763R         JMP CR1 
0705*158        DO[  .E.R._$BREG ; IER.]
0706  01010 162121R         LDA BREG,I
0707  01011 072022X         STA .E.R. 
0708  01012 016012X         JSB IER.
0709  01013 001014R         DEF *+1 
0710*159        LOCK.(-2,5) 
0711  01014 016014X         JSB LOCK. 
0712  01015 001020R         DEF *+3 
0713  01016 000106R         DEF .48 
0714  01017 000132R         DEF .73 
0715*160        EXEC (5,-1) 
0716  01020 016007X         JSB EXEC
0717  01021 001024R         DEF *+3 
0718  01022 000132R         DEF .73 
0719  01023 000061R         DEF .15 
0720*161        RETURN
0721  01024 126141R         JMP CR..,I
0722*162  ! 
0723*163  ILLU: DO[ ER_ 20 ; RETURN]
0724  01025 062133R ILLU    LDA .74 
0725  01026 172140R         STA ER,I
0726  01027 126141R         JMP CR..,I
0727*164  MISPM:DO[ ER_ 55 ; RETURN]
0728  01030 062134R MISPM   LDA .75 







 PAGE 0015 #01


0729  01031 172140R         STA ER,I
0730  01032 126141R         JMP CR..,I
0731*165  ILLPM:DO[ ER_ 56 ; RETURN]
0732  01033 062135R ILLPM   LDA .76 
0733  01034 172140R         STA ER,I
0734  01035 126141R         JMP CR..,I
0735*166  ILNAM:DO[ ER_-15 ; RETURN]
0736  01036 062057R ILNAM   LDA .13 
0737  01037 172140R         STA ER,I
0738  01040 126141R         JMP CR..,I
0739*167  ! 
0740*168        END 
0741*169  SETAD:SUBROUTINE   ! TO SET PACK ADDRESSES
0742  01041 000000  SETAD   NOP 
0743  01042 016001X         JSB .ENTR 
0744  01043 001041R         DEF SETAD 
0745*170  !     IF NEW BLOCK - THEN SET UP. 
0746*171        IF ADD=128 THEN[DR.RD(1,-2,BLK);BLK_BLK+1;\ 
0747*                                     ADD_0]
0748  01044 066047R         LDB ADD 
0749  01045 056050R         CPB .4
0750  01046 002001          RSS 
0751  01047 027062R         JMP .77 
0752  01050 016015X         JSB DR.RD 
0753  01051 001055R         DEF *+4 
0754  01052 000054R         DEF .5
0755  01053 000106R         DEF .48 
0756  01054 000051R         DEF BLK 
0757  01055 062051R         LDA BLK 
0758  01056 002004          INA 
0759  01057 072051R         STA BLK 
0760  01060 002400          CLA 
0761  01061 072047R         STA ADD 
0762*172  ! 
0763*173        PKD15_[PKD8_[PKD6_[PKD2_[PKD1_[PKD_@PK.DR+ADD]+\
0764*                1]+1]+4]+2]+7  ! SET   ADDRESSES 
0765  01062 016004X .77     JSB .DRCT 
0766  01063 000020X         DEF PK.DR 
0767  01064 042047R         ADA ADD 
0768  01065 072123R         STA PKD 
0769  01066 002004          INA 
0770  01067 072124R         STA PKD1
0771  01070 002004          INA 
0772  01071 072125R         STA PKD2
0773  01072 042035R         ADA .2
0774  01073 072114R         STA PKD6
0775  01074 042021R         ADA .1
0776  01075 072113R         STA PKD8
0777  01076 042131R         ADA .72 
0778  01077 072127R         STA PKD15 
0779*174  ! 
0780*175        ADD_ADD+16    ! STEP ADDRESS  FOR NEXT TIME 
0781  01100 062047R         LDA ADD 
0782  01101 042122R         ADA .62 
0783  01102 072047R         STA ADD 
0784*176        RETURN        ! DONE







 PAGE 0016 #01


0785  01103 127041R         JMP SETAD,I 
0786*177        END 
0787*178        END 
0788                        END 
**  NO ERRORS*



















































$END ASMB     

*
--> Assemble fmp/29033-80008_Rev-A_2
ON,ASMB,99







 PAGE 0001


0001                ASMB,B,X,L
**  NO ERRORS*





























































 PAGE 0002 #01


0001                ASMB,B,X,L
0002*001  SPL, L, M, O
0003*002        NAME CN..(8)
0004  00000                 NAM CN..,8
0005  00000         .A.     EQU  0
0006  00001         .B.     EQU  1
0007                        ENT CN..
0008                        EXT .ENTR 
0009                        EXT D.AD
0010                        EXT .E.R. 
0011                        EXT I.BUF 
0012                        EXT N.OPL 
0013                        EXT NAMF
0014                        EXT IER.
0015                        EXT CLOS. 
0016  00000 000000  L5      BSS 1 
0017  00001 000000  L1      BSS 1 
0018  00002 000004  .1      OCT 000004
0019  00003 000000  .2      BSS 1 
0020*003  !     THE CN ROUTINE ALLOWS THE OPERATOR TO 
0021*004  !     CHANGE FILE NAMES.
0022*005  ! 
0023*006  !     COMMAND:
0024*007  ! 
0025*008  !     CN,NAMR,NEWNAME 
0026*009  ! 
0027*010  !     WHERE NAMR IS THE FILES NAME REFERENCE
0028*011  !                  INCLUDING SECURITY CODE AND
0029*012  !                  CARTRIDGE ID IF APPROPIATE 
0030*013  ! 
0031*014  !            NEWNAME IS THE NEW FILE NAME 
0032*015  ! 
0033*016  ! 
0034*017  !     DEFINE  EXTERNAL
0035*018  ! 
0036*019        LET D.AD    BE FUNCTION, EXTERNAL 
0037*020        LET .E.R.,I.BUF,N.OPL BE INTEGER,EXTERNAL 
0038*021        LET NAMF,IER.,CLOS. BE SUBROUTINE,EXTERNAL
0039*022  CN..: SUBROUTINE (N,LI,E) GLOBAL
0040  00004 000000  N       NOP 
0041  00005 000000  LI      NOP 
0042  00006 000000  E       NOP 
0043  00007 000000  CN..    NOP 
0044  00010 016001X         JSB .ENTR 
0045  00011 000004R         DEF N 
0046*023        L5_[L1_@LI+1]+4 
0047  00012 062005R         LDA LI
0048  00013 002004          INA 
0049  00014 072001R         STA L1
0050  00015 042002R         ADA .1
0051  00016 072000R         STA L5
0052*024        CLOS.(I.BUF)
0053  00017 016010X         JSB CLOS. 
0054  00020 000022R         DEF *+2 
0055  00021 000004X         DEF I.BUF 
0056*025        NAMF(I.BUF,.E.R.,$L1,$L5,N.OPL,$(D.AD(N.OPL)+1))







 PAGE 0003 #01


0057  00022 016002X         JSB D.AD
0058  00023 000025R         DEF *+2 
0059  00024 000005X         DEF N.OPL 
0060  00025 002004          INA 
0061  00026 072003R         STA .2
0062  00027 016006X         JSB NAMF
0063  00030 000037R         DEF *+7 
0064  00031 000004X         DEF I.BUF 
0065  00032 000003X         DEF .E.R. 
0066  00033 100001R         DEF L1,I
0067  00034 100000R         DEF L5,I
0068  00035 000005X         DEF N.OPL 
0069  00036 100003R         DEF .2,I
0070*026        IER.
0071  00037 016007X         JSB IER.
0072  00040 000041R         DEF *+1 
0073*027        RETURN
0074  00041 126007R         JMP CN..,I
0075*028        END 
0076*029        END 
0077                        END 
**  NO ERRORS*


































$END ASMB     

*
--> Assemble fmp/29033-80008_Rev-A_3
ON,ASMB,99







 PAGE 0001


0001                ASMB,B,R,L,C
**  NO ERRORS*





























































 PAGE 0002 #01


0001                ASMB,B,R,L,C
0002  00000               NAM FMGR1,5 
0003                      EXT PARS.,.PARS,REA.C,IFLG.,INI2. 
0004                      EXT NO.RD,.ENTR,P.SEG 
0005  00000 062025R FMGR1 LDA PARSE    SET THE PARSE ROUTINE ADDRESS
0006  00001 072001X       STA PARS.    IN THE MAINS ADDRESS WORD
0007  00002 062004X       LDA IFLG.    IF INITILIZE 
0008  00003 002003        SZA,RSS      SKIP 
0009  00004 026010X       JMP P.SEG    ELSE RETURN TO THE MAIN
0010  00005 016010R       JSB PAR      INITILIZE SO CALL
0011  00006 000007R       DEF *+1      TO READ AND PARSE THE STATEMENT
0012  00007 026005X       JMP INI2.    RETURN TO THE INITILIZE CODE 


0014  00010 000000  PAR   NOP          READ AND PARSE ENTRY POINT 
0015  00011 016007X       JSB .ENTR 
0016  00012 000010R       DEF PAR      FETCH RETURN ADDRESS 
0017  00013 062006X       LDA NO.RD    IF NO READ FLAG SET
0018  00014 002002        SZA           THEN
0019  00015 026020R       JMP PAR2     BY PASS THE READ CALL
0020  00016 016003X       JSB REA.C    CALL TO READ A COMMAND 
0021  00017 000020R       DEF *+1 
0022  00020 002400  PAR2  CLA          CLEAR THE NO READ CALL FLAG
0023  00021 072006X       STA NO.RD 
0024  00022 016002X       JSB .PARS    PARS THE COMMAND 
0025  00023 000024R       DEF *+1 
0026  00024 126010R       JMP PAR,I    RETURN TO THE MAIN TO CALL THE SE

0028  00025 000010R PARSE DEF PAR 
0029  00026               ORG * 
0030                      END FMGR1 
**  NO ERRORS*
























$END ASMB     

*
--> Assemble fmp/29033-80009_Rev-A_1
ON,ASMB,99







 PAGE 0001


0001                ASMB,B,X,L
**  NO ERRORS*





























































 PAGE 0002 #01


0001                ASMB,B,X,L
0002*001  SPL, L, M, O
0003*002        NAME .PARS (8)
0004  00000                 NAM .PARS,8 
0005  00000         .A.     EQU  0
0006  00001         .B.     EQU  1
0007                        ENT .PARS 
0008                        EXT .ENTR 
0009                        EXT .MPY
0010                        EXT .DLD
0011                        EXT .DST
0012                        EXT .DRCT 
0013                        EXT TTY.
0014                        EXT N.OPL 
0015                        EXT P.RAM 
0016                        EXT NOCM. 
0017                        EXT CAD.
0018                        EXT C.TAB 
0019                        EXT CUSE. 
0020                        EXT C.BUF 
0021                        EXT FM.ER 
0022                        EXT MSS.
0023  00000 000000  FIRST   BSS 1 
0024  00001 000000  CBUFS   BSS 1 
0025  00002 000000  CBUF    BSS 1 
0026  00003 000665R .1      DEF IN.ER 
0027  00004 000000  GCOUN   BSS 1 
0028  00005 000000  LOW     BSS 1 
0029  00006 000000  INFL    BSS 1 
0030  00007 000000  CRONE   BSS 1 
0031  00010 000000  SUBCO   BSS 1 
0032  00011 000000  SBSCN   BSS 1 
0033  00012 000000  T       BSS 1 
0034  00013 000001  .2      OCT 000001
0035  00014 000000  LIMIT   BSS 1 
0036  00015 000000  PRAM    BSS 1 
0037  00016 000073  .6      OCT 000073
0038  00017 000000  CHAR    BSS 1 
0039  00020 000377  .9      OCT 000377
0040  00021 000040  .12     OCT 000040
0041  00022 000072  .14     OCT 000072
0042  00023 000000  POS     BSS 1 
0043  00024 000000  PO      BSS 1 
0044  00025 000054  .18     OCT 000054
0045  00026 000000  VAL     BSS 1 
0046  00027 000000  ADD     BSS 1 
0047  00030 000000  ACM     BSS 1 
0048  00031 000000  PLOC    BSS 1 
0049  00032 000002  .21     OCT 000002
0050  00033 000000  CUPAD   BSS 1 
0051  00034 000000  BASE    BSS 1 
0052  00035 000102  .23     OCT 000102
0053  00036 000010  .26     OCT 000010
0054  00037 000012  .27     OCT 000012
0055  00040 000000  MAXC    BSS 1 
0056  00041 000000  SIGN    BSS 1 







 PAGE 0003 #01


0057  00042 000060  .29     OCT 000060
0058  00043 000000  T1      BSS 1 
0059  00044 177720  .32     OCT 177720
0060  00045 000055  .33     OCT 000055
0061  00046 177777  .34     OCT 177777
0062  00047 000053  .35     OCT 000053
0063  00050 000000  .36     BSS 1 
0064  00051 000000  .37     OCT 000000
0065  00052 000000          OCT 000000
0066  00053 177775  .38     OCT 177775
0067  00054 000003  .39     OCT 000003
0068  00055 000005  .41     OCT 000005
0069  00056 000004  .42     OCT 000004
0070  00057 177776  .44     OCT 177776
0071  00060 000006  .48     OCT 000006
0072  00061 000000  .50     BSS 1 
0073  00062 000000  .51     OCT 000000
0074  00063 167777  .56     OCT 167777
0075  00064 017400  .57     OCT 017400
0076  00065 077400  .61     OCT 077400
0077  00066 000077  .62     OCT 000077
0078  00067 037440  .63     OCT 037440
0079  00070 000000  .64     BSS 1 
0080*003  ! 
0081*004  !     THE PARSE SUBROUTINE AND ITS ROUTINES SCAN AN ASCII 
0082*005  !     STRING AND PRODUCES:
0083*006  ! 
0084*007  !        A.  AN ACTION ROUTINE ADDRESS (CAD.) 
0085*008  !        B.  A PARAMETER COUNT  (NOCM.) 
0086*009  !        C.  A PARAMETER LIST WITH 4 WORDS FOR EACH PARAMETER:
0087*010  ! 
0088*011  !               1.  TYPE
0089*012  !                   (A.)  0 - NULL
0090*013  !                   (B.)  1 - NUMBER
0091*014  !                   (C.)  1 - SIGNED OR OCTAL NUMBER
0092*015  !                   (D.)  3 - ASC STRING
0093*016  ! 
0094*017  !               2.  FOR TYPE 1 THE VALUE, 
0095*018  !                   ELSE FOR TYPE 3 THE FIRST TWO CHARACTERS. 
0096*019  ! 
0097*020  !               3.  FOR TYPE 3 CHARACTERS 3 AND 4.
0098*021  ! 
0099*022  !               4.  FOR TYPE 3 CHARACTERS 5 AND 6.
0100*023  ! 
0101*024  !        D.  A 10 WORD OPTION LIST AT N.OPL 
0102*025  !               OPTIONS MAY APPEAR ON THE FIRST TWO PARAMETERS
0103*026  !               OPTIONS ARE SEPERATED FROM EACH OTHER AND FROM
0104*027  !               THE PARAMETER ITSELF BY COLONS. 
0105*028  !               EACH OPTION IS STORED IN N.OPL STARTING AT
0106*029  !               WORD ZERO FOR PRAMETER ONE AND WORD 5 FOR PARA
0107*030  !               THERE MAY BE ONLY FIVE PARAMETERS PER PARAMETE
0108*031  !               THE FIRST TWO PARAMETERS MAY BE ASCII,THE REST
0109*032  !               MUST BE NUMERIC.
0110*033  !     THE INPUT STRING IS TO BE DELIMITED BY COMMAS.
0111*034  !     BLANKS ARE IGNORED UNLESS THEY ARE WITHIN ASCII STRINGS.
0112*035  !     THE FIRST CHARACTER MUST BE ":" IF INPUT IS NOT FROM A T







 PAGE 0004 #01


0113*036  ! 
0114*037  ! 
0115*038  ! 
0116*039        LET TTY.,N.OPL,P.RAM,NOCM. BE INTEGER,EXTERNAL
0117*040        LET CAD.     BE INTEGER,EXTERNAL
0118*041        LET C.TAB BE INTEGER,EXTERNAL 
0119*042        LET  CUSE.  BE INTEGER,EXTERNAL 
0120*043        LET C.BUF BE INTEGER,EXTERNAL 
0121*044        LET FM.ER  BE SUBROUTINE ,EXTERNAL
0122*045        LET EXEC,READC,MSS.     BE SUBROUTINE,EXTERNAL
0123*046        LET IN.ER BE SUBROUTINE 
0124*047        LET COLON BE CONSTANT(72K ) 
0125*048        LET BLANK BE CONSTANT(40K ) 
0126*049        LET COMMA BE CONSTANT (54K )
0127*050        LET CHAR0 BE CONSTANT(60K ) 
0128*051        LET PSIGN    BE CONSTANT(53K) 
0129*052        LET MSIGN    BE CONSTANT(55K) 
0130*053        LET QUESH    BE CONSTANT(37440K)
0131*054        LET QUESL    BE CONSTANT(   77K)
0132*055  .PARS:SUBROUTINE GLOBAL,FEXIT 
0133  00071 000000  .PARS   NOP 
0134  00072 016001X         JSB .ENTR 
0135  00073 000071R         DEF .PARS 
0136*056  ! 
0137*057  ! 
0138*058  !     INITIALIZE SCAN 
0139*059  START:DO[FIRST,CAD._@IN.ER;CBUFS,CBUF_@C.BUF] 
0140  00074 062003R START   LDA .1
0141  00075 072000R         STA FIRST 
0142  00076 072012X         STA CAD.
0143  00077 016005X         JSB .DRCT 
0144  00100 000015X         DEF C.BUF 
0145  00101 072001R         STA CBUFS 
0146  00102 072002R         STA CBUF
0147*060        GCOUN,LOW,INFL,CRONE,SUBCO,SBSCN_0
0148  00103 002400          CLA 
0149  00104 072004R         STA GCOUN 
0150  00105 072005R         STA LOW 
0151  00106 072006R         STA INFL
0152  00107 072007R         STA CRONE 
0153  00110 072010R         STA SUBCO 
0154  00111 072011R         STA SBSCN 
0155*061        FOR T_ @N.OPL TO @NOCM. DO $T_0  !ZERO THE OPTION LIST
0156  00112 016005X         JSB .DRCT 
0157  00113 000007X         DEF N.OPL 
0158  00114 072012R         STA T 
0159  00115 026121R         JMP .4
0160  00116 062012R .3      LDA T 
0161  00117 002004          INA 
0162  00120 072012R         STA T 
0163  00121 016005X .4      JSB .DRCT 
0164  00122 000011X         DEF NOCM. 
0165  00123 003004          CMA,INA 
0166  00124 042012R         ADA T 
0167  00125 003004          CMA,INA 
0168  00126 002020          SSA 







 PAGE 0005 #01


0169  00127 026133R         JMP .5
0170  00130 002400          CLA 
0171  00131 172012R         STA T,I 
0172  00132 026116R         JMP .3
0173*062        LIMIT_[PRAM_@P.RAM]+59
0174  00133 016005X .5      JSB .DRCT 
0175  00134 000010X         DEF P.RAM 
0176  00135 072015R         STA PRAM
0177  00136 042016R         ADA .6
0178  00137 072014R         STA LIMIT 
0179*063        GO TO SCANC !GO START THE SCAN
0180  00140 026470R         JMP SCANC 
0181*064  ! 
0182*065  GETCH:CHAR_[IF LOW THEN $CBUF, ELSE($CBUF-<8)] AND 377K!GET CH
0183  00141 062005R GETCH   LDA LOW 
0184  00142 002003          SZA,RSS 
0185  00143 026146R         JMP .7
0186  00144 162002R         LDA CBUF,I
0187  00145 026150R         JMP .8
0188  00146 162002R .7      LDA CBUF,I
0189  00147 001727          ALF,ALF 
0190  00150 012020R .8      AND .9
0191  00151 072017R         STA CHAR
0192*066        IF CHAR THEN[IF LOW THEN CBUF_CBUF+1;LOW_ NOT LOW]
0193  00152 002003          SZA,RSS 
0194  00153 026165R         JMP .11 
0195  00154 062005R         LDA LOW 
0196  00155 002003          SZA,RSS 
0197  00156 026162R         JMP .10 
0198  00157 062002R         LDA CBUF
0199  00160 002004          INA 
0200  00161 072002R         STA CBUF
0201  00162 062005R .10     LDA LOW 
0202  00163 003000          CMA 
0203  00164 072005R         STA LOW 
0204*067  ! 
0205*068  ! 
0206*069  ! 
0207*070        IF INFL THEN GO TO ENDTS          !MID OPERAND-JUMP 
0208  00165 062006R .11     LDA INFL
0209  00166 002002          SZA 
0210  00167 026211R         JMP ENDTS 
0211*071        IFNOT CHAR THEN GO TO EXIT !END OF STAMENT GO CLEAN UP A
0212  00170 062017R         LDA CHAR
0213  00171 002003          SZA,RSS 
0214  00172 026611R         JMP EXIT
0215*072        IF CHAR=BLANK THEN GOTO GETCH    !SKIP BLANKS 
0216  00173 066017R         LDB CHAR
0217  00174 056021R         CPB .12 
0218  00175 026141R         JMP GETCH 
0219*073        IFNOT (TTY. OR CRONE) THEN\  TEST FOR COLON 
0220*         [IF CHAR#COLON THEN GOTO EXITF,ELSE \ 
0221*                [CRONE_1;GO TO GETCH]]!IF NOT TTY MUST START WITH :
0222  00176 062006X         LDA TTY.
0223  00177 032007R         IOR CRONE 
0224  00200 002002          SZA 







 PAGE 0006 #01


0225  00201 026211R         JMP ENDTS 
0226  00202 066017R         LDB CHAR
0227  00203 056022R         CPB .14 
0228  00204 002001          RSS 
0229  00205 026661R         JMP EXITF 
0230  00206 002404          CLA,INA 
0231  00207 072007R         STA CRONE 
0232  00210 026141R         JMP GETCH 
0233*074  ! 
0234*075  ! 
0235*076  !     A LEGAL CHARACTER OR AN IMBEDDED CHARACTER
0236*077  ! 
0237*078  ENDTS:IF CHAR THEN[IF CHAR#COMMA THEN[IF CHAR#COLON THEN[\! 
0238*        IF[POS,PO_POS+1]>LIMIT THEN GO TO EXITF,\  SET CHARACTER AN
0239*      ELSE[INFL,CRONE,$POS_CHAR; GO TO GETCH]]]]  !NOW GO GET THE N
0240  00211 062017R ENDTS   LDA CHAR
0241  00212 002003          SZA,RSS 
0242  00213 026237R         JMP .17 
0243  00214 066017R         LDB CHAR
0244  00215 056025R         CPB .18 
0245  00216 026237R         JMP .17 
0246  00217 066017R         LDB CHAR
0247  00220 056022R         CPB .14 
0248  00221 026237R         JMP .17 
0249  00222 062023R         LDA POS 
0250  00223 002004          INA 
0251  00224 072023R         STA POS 
0252  00225 072024R         STA PO
0253  00226 003004          CMA,INA 
0254  00227 042014R         ADA LIMIT 
0255  00230 002020          SSA 
0256  00231 026661R         JMP EXITF 
0257  00232 062017R         LDA CHAR
0258  00233 072006R         STA INFL
0259  00234 072007R         STA CRONE 
0260  00235 172023R         STA POS,I 
0261  00236 026141R         JMP GETCH 
0262*079  ! 
0263*080  !     A DELIMITER 0 OR COMMA OR COLON  - ENCOUNTERED
0264*081  ! 
0265*082        DO[VAL,T,INFL_0]            !CLEAR PROCESSING FLAG
0266  00237 002400  .17     CLA 
0267  00240 072026R         STA VAL 
0268  00241 072012R         STA T 
0269  00242 072006R         STA INFL
0270*083        IFNOT FIRST THEN GO TO PRMST! IF THE FIRST PRAM THEN LOO
0271  00243 062000R         LDA FIRST 
0272  00244 002003          SZA,RSS 
0273  00245 026301R         JMP PRMST 
0274*084        FIRST_0!    CLEAR THE FIRST FLAG
0275  00246 002400          CLA 
0276  00247 072000R         STA FIRST 
0277*085        DO[ADD_@C.TAB     ;ACM_($PLOC-<8)+$(PLOC+1)]
0278  00250 016005X         JSB .DRCT 
0279  00251 000013X         DEF C.TAB 
0280  00252 072027R         STA ADD 







 PAGE 0007 #01


0281  00253 162031R         LDA PLOC,I
0282  00254 001727          ALF,ALF 
0283  00255 066031R         LDB PLOC
0284  00256 006004          INB 
0285  00257 140001          ADA .B.,I 
0286  00260 072030R         STA ACM 
0287*086            ALWAYS DO[IF $ADD=0 THEN GOTO EXITF;\ 
0288*            IF $ADD=ACM THEN[  \ 
0289*             CAD._$(ADD+1);GO TO RPLOC],\
0290*              ELSE ADD_ADD+2]!     FIND THE PROCESSOR IN TABLE 
0291  00261 166027R .19     LDB ADD,I 
0292  00262 006003          SZB,RSS 
0293  00263 026661R         JMP EXITF 
0294  00264 166027R         LDB ADD,I 
0295  00265 056030R         CPB ACM 
0296  00266 002001          RSS 
0297  00267 026275R         JMP .20 
0298  00270 062027R         LDA ADD 
0299  00271 002004          INA 
0300  00272 160000          LDA .A.,I 
0301  00273 072012X         STA CAD.
0302  00274 026504R         JMP RPLOC 
0303  00275 062027R .20     LDA ADD 
0304  00276 042032R         ADA .21 
0305  00277 072027R         STA ADD 
0306  00300 026261R         JMP .19 
0307*087  ! 
0308*088  !     NOT FIRST SO SET UP THE PARAMETER 
0309*089  ! 
0310*090  PRMST:IF POS=CUPAD THEN GOTO NULLS!NULL SO ZERO IT
0311  00301 066023R PRMST   LDB POS 
0312  00302 056033R         CPB CUPAD 
0313  00303 026421R         JMP NULLS 
0314*091  ! 
0315*092  ! 
0316*093  !     ATTEMPT NUMERIC CONVERSION
0317*094  ! 
0318*095  BLELM:IF$POS=BLANK THEN[POS_POS-1;GOTO BLELM] 
0319  00304 166023R BLELM   LDB POS,I 
0320  00305 056021R         CPB .12 
0321  00306 002001          RSS 
0322  00307 026314R         JMP .22 
0323  00310 003400          CCA 
0324  00311 042023R         ADA POS 
0325  00312 072023R         STA POS 
0326  00313 026304R         JMP BLELM 
0327*096        BASE_[IF $POS="B"   THEN 8,ELSE 10]! SET UP THE CONVERSI
0328  00314 166023R .22     LDB POS,I 
0329  00315 056035R         CPB .23 
0330  00316 002001          RSS 
0331  00317 026322R         JMP .24 
0332  00320 062036R         LDA .26 
0333  00321 026323R         JMP .25 
0334  00322 062037R .24     LDA .27 
0335  00323 072034R .25     STA BASE
0336*097        IF BASE#10 THEN POS_POS-1 







 PAGE 0008 #01


0337  00324 066034R         LDB BASE
0338  00325 056037R         CPB .27 
0339  00326 026332R         JMP .28 
0340  00327 003400          CCA 
0341  00330 042023R         ADA POS 
0342  00331 072023R         STA POS 
0343*098        IF POS=CUPAD THEN GOTO NOTNO
0344  00332 066023R .28     LDB POS 
0345  00333 056033R         CPB CUPAD 
0346  00334 026535R         JMP NOTNO 
0347*099        DO[ADD_CUPAD; MAXC_CHAR0+BASE;SIGN_1] 
0348  00335 062033R         LDA CUPAD 
0349  00336 072027R         STA ADD 
0350  00337 062042R         LDA .29 
0351  00340 042034R         ADA BASE
0352  00341 072040R         STA MAXC
0353  00342 002404          CLA,INA 
0354  00343 072041R         STA SIGN
0355*100  ! 
0356*101  ! 
0357*102  !     CONVERSION LOOP 
0358*103  ! 
0359*104  CLOOP:IF ADD=POS THEN GOTO SETNO, ELSE ADD_ADD+1
0360  00344 066027R CLOOP   LDB ADD 
0361  00345 056023R         CPB POS 
0362  00346 026415R         JMP SETNO 
0363  00347 062027R         LDA ADD 
0364  00350 002004          INA 
0365  00351 072027R         STA ADD 
0366*105        IF $ADD = BLANK THEN GOTO CLOOP 
0367  00352 166027R         LDB ADD,I 
0368  00353 056021R         CPB .12 
0369  00354 026344R         JMP CLOOP 
0370*106        IF $ADD => MAXC THEN GOTO NOTNO 
0371  00355 066040R         LDB MAXC
0372  00356 007004          CMB,INB 
0373  00357 146027R         ADB ADD,I 
0374  00360 006021          SSB,RSS 
0375  00361 026535R         JMP NOTNO 
0376*107        IF[T1_$ADD-CHAR0]<0 THEN[IF ADD=PLOC THEN[\ 
0377*          IF $ADD=MSIGN THEN [SIGN_ -1;GOTO CLOOP],ELSE[\
0378*          IF $ADD=PSIGN THEN GOTO CLOOP]],ELSE \ 
0379*                             GO TO NOTNO]
0380  00362 162027R         LDA ADD,I 
0381  00363 042044R         ADA .32 
0382  00364 072043R         STA T1
0383  00365 002021          SSA,RSS 
0384  00366 026405R         JMP .31 
0385  00367 066027R         LDB ADD 
0386  00370 056031R         CPB PLOC
0387  00371 002001          RSS 
0388  00372 026535R         JMP NOTNO 
0389  00373 166027R         LDB ADD,I 
0390  00374 056045R         CPB .33 
0391  00375 002001          RSS 
0392  00376 026402R         JMP .30 







 PAGE 0009 #01


0393  00377 003400          CCA 
0394  00400 072041R         STA SIGN
0395  00401 026344R         JMP CLOOP 
0396  00402 166027R .30     LDB ADD,I 
0397  00403 056047R         CPB .35 
0398  00404 026344R         JMP CLOOP 
0399*108        T_1   !SET CHARACTER CONVERTED FLAG 
0400  00405 002404  .31     CLA,INA 
0401  00406 072012R         STA T 
0402*109        DO[VAL_VAL*BASE+T1; GO TO CLOOP]
0403  00407 062026R         LDA VAL 
0404  00410 016002X         JSB .MPY
0405  00411 000034R         DEF BASE
0406  00412 042043R         ADA T1
0407  00413 072026R         STA VAL 
0408  00414 026344R         JMP CLOOP 
0409*110  !     SET TYPE AND NO. IN THE LIST
0410*111  SETNO:IFNOT [$CUPAD_T] THEN GOTO NOTNO !IF NO DIGITS-NOT A NUM
0411  00415 062012R SETNO   LDA T 
0412  00416 172033R         STA CUPAD,I 
0413  00417 002003          SZA,RSS 
0414  00420 026535R         JMP NOTNO 
0415*112  NULLS:$PLOC_VAL*SIGN   !SET THE VALUE IN THE LIST 
0416  00421 062026R NULLS   LDA VAL 
0417  00422 016002X         JSB .MPY
0418  00423 000041R         DEF SIGN
0419  00424 172031R         STA PLOC,I
0420*113        $[REAL](PLOC+1)_0.0   !ZERO THE EXTRA WORDS 
0421  00425 062031R         LDA PLOC
0422  00426 002004          INA 
0423  00427 072050R         STA .36 
0424  00430 016003X         JSB .DLD
0425  00431 000051R         DEF .37 
0426  00432 016004X         JSB .DST
0427  00433 100050R         DEF .36,I 
0428*114  !     SET UP FOR THE NEXT PARAMETER 
0429*115  ! 
0430*116  NXPRM:IFNOT SBSCN THEN GO TO NOTSU !SKIP IF NOT SUB SCAN
0431  00434 062011R NXPRM   LDA SBSCN 
0432  00435 002003          SZA,RSS 
0433  00436 026511R         JMP NOTSU 
0434*117        IF [SUBCO_SUBCO+1]<3 THEN GOTO STPM !SKIP ASC TEST IF FI
0435  00437 062010R         LDA SUBCO 
0436  00440 002004          INA 
0437  00441 072010R         STA SUBCO 
0438  00442 042053R         ADA .38 
0439  00443 002020          SSA 
0440  00444 026450R         JMP STPM
0441*118        IF $CUPAD=3 THEN GO TO EXITF  !SUB PRAMETERS ELSE ASC ER
0442  00445 166033R         LDB CUPAD,I 
0443  00446 056054R         CPB .39 
0444  00447 026661R         JMP EXITF 
0445*119  STPM: $(SBSCN+SUBCO)_$PLOC  !SET THE SUB PRAMETER IN THE OP LI
0446  00450 062011R STPM    LDA SBSCN 
0447  00451 042010R         ADA SUBCO 
0448  00452 166031R         LDB PLOC,I







 PAGE 0010 #01


0449  00453 174000          STB .A.,I 
0450*120  ! 
0451*121        IF CHAR=COLON THEN[IF SUBCO=5 THEN GOTO EXITF ,\ TOO M&N
0452*          ELSE GO TO RPLOC] !GO GET NEXT SUB PRAM
0453  00454 066017R         LDB CHAR
0454  00455 056022R         CPB .14 
0455  00456 002001          RSS 
0456  00457 026465R         JMP .40 
0457  00460 066010R         LDB SUBCO 
0458  00461 056055R         CPB .41 
0459  00462 002001          RSS 
0460  00463 026504R         JMP RPLOC 
0461  00464 026661R         JMP EXITF 
0462*122  ! 
0463*123        SUBCO,SBSCN_0  !ZERO THE SUB SCAN FLAGS 
0464  00465 002400  .40     CLA 
0465  00466 072010R         STA SUBCO 
0466  00467 072011R         STA SBSCN 
0467*124  SCANC:PLOC_[CUPAD_PRAM+4*NOCM.]+1 !SET THE CURENT ADDRESSES 
0468  00470 062056R SCANC   LDA .42 
0469  00471 016002X         JSB .MPY
0470  00472 000011X         DEF NOCM. 
0471  00473 042015R         ADA PRAM
0472  00474 072033R         STA CUPAD 
0473  00475 002004          INA 
0474  00476 072031R         STA PLOC
0475*125        IF PLOC>LIMIT THEN GO TO EXITF !TOO MANY PRAMS? 
0476  00477 066031R         LDB PLOC
0477  00500 007004          CMB,INB 
0478  00501 046014R         ADB LIMIT 
0479  00502 006020          SSB 
0480  00503 026661R         JMP EXITF 
0481*126  ! 
0482*127  RPLOC:DO[$[POS_CUPAD]_0;GOTO GETCH] !GO GET THE NEXT CHARACTER
0483  00504 062033R RPLOC   LDA CUPAD 
0484  00505 072023R         STA POS 
0485  00506 006400          CLB 
0486  00507 174000          STB .A.,I 
0487  00510 026141R         JMP GETCH 
0488*128  ! 
0489*129  !     PARAMETER END NOT SUB PRAM
0490*130  ! 
0491*131  NOTSU:IF CHAR=COLON THEN[IF NOCM.>1 THEN GO TO EXITF,\ILLEGAL 
0492*          ELSE     SBSCN_@TTY. +NOCM.*5] !SET UP SUB SCAN
0493  00511 066017R NOTSU   LDB CHAR
0494  00512 056022R         CPB .14 
0495  00513 002001          RSS 
0496  00514 026531R         JMP .43 
0497  00515 066011X         LDB NOCM. 
0498  00516 046057R         ADB .44 
0499  00517 006021          SSB,RSS 
0500  00520 026661R         JMP EXITF 
0501  00521 016005X         JSB .DRCT 
0502  00522 000006X         DEF TTY.
0503  00523 072050R         STA .36 
0504  00524 062011X         LDA NOCM. 







 PAGE 0011 #01


0505  00525 016002X         JSB .MPY
0506  00526 000055R         DEF .41 
0507  00527 042050R         ADA .36 
0508  00530 072011R         STA SBSCN 
0509*132  ! 
0510*133        NOCM._NOCM.+1  !STEP COUNT
0511  00531 062011X .43     LDA NOCM. 
0512  00532 002004          INA 
0513  00533 072011X         STA NOCM. 
0514*134        GO TO SCANC  !GO SCAN IT
0515  00534 026470R         JMP SCANC 
0516*135  ! 
0517*136  !     NOT A LEGAL NUMBER - TRY FOR A NAME 
0518*137  ! 
0519*138  NOTNO:$CUPAD_3      !ASSUME NAME AND SET UP 
0520  00535 062054R NOTNO   LDA .39 
0521  00536 172033R         STA CUPAD,I 
0522*139        FOR T_PO +1 TO CUPAD+6 DO $T_BLANK!PAD THE NAME 
0523  00537 062024R         LDA PO
0524  00540 002004          INA 
0525  00541 072012R         STA T 
0526  00542 026546R         JMP .46 
0527  00543 062012R .45     LDA T 
0528  00544 002004          INA 
0529  00545 072012R         STA T 
0530  00546 062033R .46     LDA CUPAD 
0531  00547 042060R         ADA .48 
0532  00550 003004          CMA,INA 
0533  00551 042012R         ADA T 
0534  00552 003004          CMA,INA 
0535  00553 002020          SSA 
0536  00554 026560R         JMP .47 
0537  00555 062021R         LDA .12 
0538  00556 172012R         STA T,I 
0539  00557 026543R         JMP .45 
0540*140        T,ADD_PLOC
0541  00560 062031R .47     LDA PLOC
0542  00561 072012R         STA T 
0543  00562 072027R         STA ADD 
0544*141        REPEAT 3 TIMES DO[\ PACK THE NAME 
0545*         $T_($ADD-<8)+$(ADD+1);ADD_ADD+2;T_T+1]
0546  00563 062054R         LDA .39 
0547  00564 072061R         STA .50 
0548  00565 003400  .49     CCA 
0549  00566 042061R         ADA .50 
0550  00567 072061R         STA .50 
0551  00570 066061R         LDB .50 
0552  00571 006020          SSB 
0553  00572 026610R         JMP .52 
0554  00573 162027R         LDA ADD,I 
0555  00574 001727          ALF,ALF 
0556  00575 066027R         LDB ADD 
0557  00576 006004          INB 
0558  00577 140001          ADA .B.,I 
0559  00600 172012R         STA T,I 
0560  00601 062027R         LDA ADD 







 PAGE 0012 #01


0561  00602 042032R         ADA .21 
0562  00603 072027R         STA ADD 
0563  00604 062012R         LDA T 
0564  00605 002004          INA 
0565  00606 072012R         STA T 
0566  00607 026565R         JMP .49 
0567*142        GO TO NXPRM!         ASSUME A NAME  AND CONTINUE
0568  00610 026434R .52     JMP NXPRM 
0569*143  ! 
0570*144  !     NORMAL EXIT ROUTINE   CLEAR END OF LIST AND CHECK FOR SE
0571*145  ! 
0572*146  EXIT: FOR T_CUPAD TO LIMIT DO $T_0 !ZAP THE LIST
0573  00611 062033R EXIT    LDA CUPAD 
0574  00612 072012R         STA T 
0575  00613 026617R         JMP .54 
0576  00614 062012R .53     LDA T 
0577  00615 002004          INA 
0578  00616 072012R         STA T 
0579  00617 066012R .54     LDB T 
0580  00620 007004          CMB,INB 
0581  00621 046014R         ADB LIMIT 
0582  00622 006020          SSB 
0583  00623 026627R         JMP .55 
0584  00624 002400          CLA 
0585  00625 172012R         STA T,I 
0586  00626 026614R         JMP .53 
0587*147        IF CAD.<0 THEN GO TO EXIT1 !IF LOCAL GO EXIT
0588  00627 066012X .55     LDB CAD.
0589  00630 006020          SSB 
0590  00631 026650R         JMP EXIT1 
0591*148        IF CAD.>10000K THEN GO TO EXIT1 !IF LOCAL GO TO EXIT. 
0592  00632 066012X         LDB CAD.
0593  00633 046063R         ADB .56 
0594  00634 006021          SSB,RSS 
0595  00635 026650R         JMP EXIT1 
0596*149        T_0   !SET SEGMENT LOAD FLAG
0597  00636 002400          CLA 
0598  00637 072012R         STA T 
0599*150        CUSE._(CAD. AND 377K)-<8
0600  00640 062012X         LDA CAD.
0601  00641 012020R         AND .9
0602  00642 001727          ALF,ALF 
0603  00643 072014X         STA CUSE. 
0604*151  ! 
0605*152        CAD._((CAD. AND 17400K)-<8)  !SET ROUTINE NUMBER IN CAD.
0606  00644 062012X         LDA CAD.
0607  00645 012064R         AND .57 
0608  00646 001727          ALF,ALF 
0609  00647 072012X         STA CAD.
0610*153  EXIT1:$1_ACM !SET ASCII COMMAND IN B FOR MAIN 
0611  00650 062030R EXIT1   LDA ACM 
0612  00651 172013R         STA .2,I
0613*154        IF T THEN RETURN,ELSE FRETURN 
0614  00652 062012R         LDA T 
0615  00653 002003          SZA,RSS 
0616  00654 026657R         JMP .58 







 PAGE 0013 #01


0617  00655 000040          CLE 
0618  00656 126071R         JMP .PARS,I 
0619  00657 002300  .58     CCE 
0620  00660 126071R         JMP .PARS,I 
0621*155  ! 
0622*156  EXITF:DO[T,CAD._@IN.ER;GO TO EXIT1] 
0623  00661 062003R EXITF   LDA .1
0624  00662 072012R         STA T 
0625  00663 072012X         STA CAD.
0626  00664 026650R         JMP EXIT1 
0627*157        END 
0628*158  ! 
0629*159  IN.ER:SUBROUTINE
0630  00665 000000  IN.ER   NOP 
0631  00666 016001X         JSB .ENTR 
0632  00667 000665R         DEF IN.ER 
0633*160        MSS.(10)  !FOURCE ECHO AND PRINT ERROR
0634  00670 016017X         JSB MSS.
0635  00671 000673R         DEF *+2 
0636  00672 000037R         DEF .27 
0637*161        $CBUF_[IF LOW THEN($CBUF AND 77400K)+QUESL,ELSE QUESH]
0638  00673 062005R         LDA LOW 
0639  00674 002003          SZA,RSS 
0640  00675 026702R         JMP .59 
0641  00676 162002R         LDA CBUF,I
0642  00677 012065R         AND .61 
0643  00700 042066R         ADA .62 
0644  00701 026703R         JMP .60 
0645  00702 062067R .59     LDA .63 
0646  00703 172002R .60     STA CBUF,I
0647*162        FM.ER(1,C.BUF ,CBUF-CBUFS+1)
0648  00704 062001R         LDA CBUFS 
0649  00705 003004          CMA,INA 
0650  00706 042002R         ADA CBUF
0651  00707 002004          INA 
0652  00710 072070R         STA .64 
0653  00711 016016X         JSB FM.ER 
0654  00712 000716R         DEF *+4 
0655  00713 000013R         DEF .2
0656  00714 000015X         DEF C.BUF 
0657  00715 000070R         DEF .64 
0658*163        RETURN
0659  00716 126665R         JMP IN.ER,I 
0660*164        END 
0661*165        END 
0662                        END 
**  NO ERRORS*









$END ASMB     

*
--> Assemble fmp/29033-80009_Rev-A_2
ON,ASMB,99







 PAGE 0001


0001                ASMB,B,X,L
**  NO ERRORS*





























































 PAGE 0002 #01


0001                ASMB,B,X,L
0002*001  SPL, L, M, O
0003*002        NAME REA.C(8) 
0004  00000                 NAM REA.C,8 
0005  00000         .A.     EQU  0
0006  00001         .B.     EQU  1
0007                        ENT REA.C 
0008                        EXT .ENTR 
0009                        EXT .DRCT 
0010                        EXT READF 
0011                        EXT EC.HO 
0012                        EXT WRITF 
0013                        EXT .E.R. 
0014                        EXT CAM.I 
0015                        EXT TTY.
0016                        EXT ECH.
0017                        EXT C.BUF 
0018  00000 035137  .2      OCT 035137
0019  00001 000001  .3      OCT 000001
0020  00002 000044  .4      OCT 000044
0021  00003 052122  .5      OCT 052122
0022*003    !      READ A COMMAND SUBROUTINE
0023*004  ! 
0024*005        LET READF,EC.HO,WRITF  BE SUBROUTINE,EXTERNAL 
0025*006        LET .E.R.,CAM.I,TTY.,ECH.,C.BUF  BE INTEGER,EXTERNAL
0026*007  ! 
0027*008  REA.C:SUBROUTINE GLOBAL 
0028  00004 000000  REA.C   NOP 
0029  00005 016001X         JSB .ENTR 
0030  00006 000004R         DEF REA.C 
0031*009  !     IF TTY THEN PROMPT
0032*010  READ1:IF TTY. THEN WRITF(CAM.I,.E.R.,35137K,1)!WRITE ":"
0033  00007 062010X READ1   LDA TTY.
0034  00010 002003          SZA,RSS 
0035  00011 026020R         JMP .1
0036  00012 016005X         JSB WRITF 
0037  00013 000020R         DEF *+5 
0038  00014 000007X         DEF CAM.I 
0039  00015 000006X         DEF .E.R. 
0040  00016 000000R         DEF .2
0041  00017 000001R         DEF .3
0042*011  ! 
0043*012  ! 
0044*013        READF(CAM.I,.E.R.,C.BUF,36,ECH.)!READ THE COMMAND 
0045  00020 016003X .1      JSB READF 
0046  00021 000027R         DEF *+6 
0047  00022 000007X         DEF CAM.I 
0048  00023 000006X         DEF .E.R. 
0049  00024 000012X         DEF C.BUF 
0050  00025 000002R         DEF .4
0051  00026 000011X         DEF ECH.
0052*014  ! 
0053*015        IF .E.R. THEN GO TO READ1 
0054  00027 062006X         LDA .E.R. 
0055  00030 002002          SZA 
0056  00031 026007R         JMP READ1 







 PAGE 0003 #01


0057*016  ! 
0058*017        IFNOT ECH.  THEN GOTO READ1 
0059  00032 062011X         LDA ECH.
0060  00033 002003          SZA,RSS 
0061  00034 026007R         JMP READ1 
0062*018        IF ECH. <0 THEN[C.BUF_"TR";ECH. ,TTY._1]  !FAKE A TR COM
0063  00035 066011X         LDB ECH.
0064  00036 006021          SSB,RSS 
0065  00037 026045R         JMP .6
0066  00040 062003R         LDA .5
0067  00041 072012X         STA C.BUF 
0068  00042 002404          CLA,INA 
0069  00043 072011X         STA ECH.
0070  00044 072010X         STA TTY.
0071*019  ! 
0072*020        $(@C.BUF+ECH.)_0 !SET THE END OF COMMAND MARK 
0073  00045 016002X .6      JSB .DRCT 
0074  00046 000012X         DEF C.BUF 
0075  00047 042011X         ADA ECH.
0076  00050 006400          CLB 
0077  00051 174000          STB .A.,I 
0078*021        IFNOT $(@.E.R.+1) THEN EC.HO !ECHO IF DESIRED 
0079  00052 016002X         JSB .DRCT 
0080  00053 000006X         DEF .E.R. 
0081  00054 002004          INA 
0082  00055 160000          LDA .A.,I 
0083  00056 002002          SZA 
0084  00057 026062R         JMP .7
0085  00060 016004X         JSB EC.HO 
0086  00061 000062R         DEF *+1 
0087*022  ! 
0088*023        RETURN
0089  00062 126004R .7      JMP REA.C,I 
0090*024        END 
0091*025  ! 
0092*026        END 
0093                        END 
**  NO ERRORS*


















$END ASMB     

*
--> Assemble fmp/29033-80009_Rev-A_3
ON,ASMB,99







 PAGE 0001


0001                ASMB,B,R,L,C
**  NO ERRORS*





























































 PAGE 0002 #01


0001                ASMB,B,R,L,C
0002  00000               NAM C.TAB,8 
0003                      ENT C.TAB 
0004* 
0005*     SET UP SEGMENT AND ROUTINE NUMBERS. 
0006* 
0007  00000         R0    EQU 0 
0008  00400         R1    EQU 400B
0009  01000         R2    EQU R1+R1 
0010  01400         R3    EQU R2+R1 
0011  02000         R4    EQU R3+R1 
0012  02400         R5    EQU R4+R1 
0013  03000         R6    EQU R5+R1 
0014  03400         R7    EQU R6+R1 
0015  04000         R8    EQU R7+R1 
0016  04400         R9    EQU R8+R1 
0017  05000         R10   EQU R9+R1 


0019  00060         S0    EQU 60B 
0020  00061         S1    EQU S0+1
0021  00062         S2    EQU S0+2
0022  00063         S3    EQU S0+3
0023  00064         S4    EQU S0+4
0024  00065         S5    EQU S0+5


0026  00000         C.TAB EQU * 
0027  00000 050113        ASC 1,PK
0028  00001 000060        ABS S0+R0 
0029  00002 041522        ASC 1,CR
0030  00003 000460        ABS S0+R1 
0031  00004 051116        ASC 1,RN
0032  00005 001060        ABS S0+R2 
0033  00006 042530        ASC 1,EX
0034                      EXT EE..
0035  00007 000001X       DEF EE..
0036  00010 052122        ASC 1,TR
0037                      EXT TR..
0038  00011 000002X       DEF TR..
0039  00012 051501        ASC 1,SA
0040                      EXT SA..
0041  00013 000003X       DEF SA..
0042  00014 046522        ASC 1,MR
0043                      EXT MR..
0044  00015 000004X       DEF MR..
0045  00016 044516        ASC 1,IN
0046  00017 000462        ABS S2+R1 
0047  00020 046503        ASC 1,MC
0048  00021 001062        ABS S2+R2 
0049  00022 042103        ASC 1,DC
0050  00023 001462        ABS S2+R3 
0051  00024 046111        ASC 1,LI
0052  00025 000063        ABS S3+R0 
0053  00026 042114        ASC 1,DL
0054  00027 000463        ABS S3+R1 







 PAGE 0003 #01


0055  00030 050125        ASC 1,PU
0056  00031 001063        ABS S3+R2 
0057  00032 041517        ASC 1,CO
0058  00033 000064        ABS S4+R0 
0059  00034 051524        ASC 1,ST
0060  00035 000464        ABS S4+R1 
0061  00036 042125        ASC 1,DU
0062  00037 001064        ABS S4+R2 
0063  00040 051520        ASC 1,SP
0064  00041 001464        ABS S4+R3 
0065  00042 037477        ASC 1,??
0066  00043 000065        ABS S5+R0 
0067  00044 046523        ASC 1,MS
0068  00045 000465        ABS S5+R1 
0069  00046 051120        ASC 1,RP
0070  00047 001065        ABS S5+R2 
0071  00050 041514        ASC 1,CL
0072  00051 001465        ABS S5+R3 
0073  00052 046117        ASC 1,LO
0074  00053 002065        ABS S5+R4 
0075  00054 051526        ASC 1,SV
0076  00055 002465        ABS S5+R5 
0077  00056 046114        ASC 1,LL
0078  00057 003065        ABS S5+R6 
0079  00060 000000        NOP 
0080                      IFN 
0081                      ABS S3+R3 
0082                      ABS S5+R4 
0083                      ABS S2+R5 
0084                      ABS S2+R6 
0085                      ABS S2+R4 
0086                      ABS S0+R3 
0087                      ABS S3+R4 
0088                      ABS S2+R0 
0089                      ABS S1+R3 
0090                      ABS S2+R7 
0091                      XIF 
0092                      END 
**  NO ERRORS*

















$END ASMB     

*
--> Assemble fmp/29033-80009_Rev-A_4
ON,ASMB,99







 PAGE 0001


0001                ASMB,B,X,L
**  NO ERRORS*





























































 PAGE 0002 #01


0001                ASMB,B,X,L
0002*001  SPL, L, M, O
0003*002        NAME EE..(8)
0004  00000                 NAM EE..,8
0005  00000         .A.     EQU  0
0006  00001         .B.     EQU  1
0007                        ENT EE..
0008                        EXT .ENTR 
0009                        EXT .DRCT 
0010                        EXT FM.ER 
0011                        EXT CLOS. 
0012                        EXT EXEC
0013                        EXT CUSE. 
0014  00000 000000  ENDMS   BSS 1 
0015  00001 177773  .1      OCT 177773
0016  00002 000000  .2      OCT 000000
0017  00003 000005  .3      OCT 000005
0018  00004 000000  A       BSS 1 
0019  00005 177777  .4      OCT 177777
0020  00006 000006  .5      OCT 000006
0021*003  EE..: SUBROUTINE GLOBAL 
0022  00007 000000  EE..    NOP 
0023  00010 016001X         JSB .ENTR 
0024  00011 000007R         DEF EE..
0025*004        LET FM.ER,CLOS.,EXEC      BE SUBROUTINE,EXTERNAL
0026*005        LET CUSE.   BE INTEGER,EXTERNAL 
0027*006        ENDMS_@CUSE.-5
0028  00012 016002X         JSB .DRCT 
0029  00013 000006X         DEF CUSE. 
0030  00014 042001R         ADA .1
0031  00015 072000R         STA ENDMS 
0032*007        FM.ER(0,$ENDMS,5) 
0033  00016 016003X         JSB FM.ER 
0034  00017 000023R         DEF *+4 
0035  00020 000002R         DEF .2
0036  00021 100000R         DEF ENDMS,I 
0037  00022 000003R         DEF .3
0038*008        CLOS.($A) 
0039  00023 016004X         JSB CLOS. 
0040  00024 000026R         DEF *+2 
0041  00025 100004R         DEF A,I 
0042*009        EXEC (5,-1) 
0043  00026 016005X         JSB EXEC
0044  00027 000032R         DEF *+3 
0045  00030 000003R         DEF .3
0046  00031 000005R         DEF .4
0047*010        EXEC(6) 
0048  00032 016005X         JSB EXEC
0049  00033 000035R         DEF *+2 
0050  00034 000006R         DEF .5
0051*011        END 
0052*012        END 
0053                        END 
**  NO ERRORS*


$END ASMB     

*
--> Assemble fmp/29033-80010_Rev-A_1
ON,ASMB,99







 PAGE 0001


0001                ASMB,B,X,L
**  NO ERRORS*





























































 PAGE 0002 #01


0001                ASMB,B,X,L
0002*001  SPL, L, M, O
0003*002        NAME TR..(8)
0004  00000                 NAM TR..,8
0005  00000         .A.     EQU  0
0006  00001         .B.     EQU  1
0007                        ENT TR..
0008                        EXT .ENTR 
0009                        EXT .DRCT 
0010                        EXT OPEN. 
0011                        EXT READF 
0012                        EXT IER.
0013                        EXT EE..
0014                        EXT P.TR
0015                        EXT CAMS. 
0016                        EXT TMP.
0017                        EXT I.BUF 
0018                        EXT N.OPL 
0019                        EXT CAM.O 
0020                        EXT .E.R. 
0021                        EXT FM.AB 
0022                        EXT CAM.I 
0023  00000 000000  DCB14   BSS 1 
0024  00001 000016  .1      OCT 000016
0025  00002 000000  RC      BSS 1 
0026  00003 000000  NFA     BSS 1 
0027  00004 000000  PR      BSS 1 
0028  00005 000000  .5      OCT 000000
0029  00006 000000  .6      OCT 000000
0030  00007 000000          OCT 000000
0031  00010 000000  NFI     BSS 1 
0032  00011 177771  .9      OCT 177771
0033  00012 000000  RS      BSS 1 
0034  00013 000000  PTRAD   BSS 1 
0035  00014 177774  .11     OCT 177774
0036  00015 177770  .12     OCT 177770
0037  00016 000410  .14     OCT 000410
0038  00017 177733  .17     OCT 177733
0039  00020 000015  .18     OCT 000015
0040  00021 000000  C.BUF   BSS 1 
0041  00022 000001  .22     OCT 000001
0042*003  !    THE GRAND TR ROUTINE 
0043*004        LET OPEN.,READF,IER.,EE.. BE SUBROUTINE ,EXTERNAL 
0044*005        LET P.TR,CAMS.,TMP.,I.BUF,N.OPL,CAM.O BE INTEGER,EXTERNA
0045*006        LET P.TR,CAMS.,.E.R.  BE INTEGER,EXTERNAL 
0046*007        LET FM.AB     BE LABEL,EXTERNAL 
0047*008  ! 
0048*009  TR..: SUBROUTINE(N,LIS,ERR)GLOBAL!TRANSFER SUBROUTINE 
0049  00023 000000  N       NOP 
0050  00024 000000  LIS     NOP 
0051  00025 000000  ERR     NOP 
0052  00026 000000  TR..    NOP 
0053  00027 016001X         JSB .ENTR 
0054  00030 000023R         DEF N 
0055*010        LET CAM.I     BE INTEGER,EXTERNAL 
0056*011  ! 







 PAGE 0003 #01


0057*012        DCB14_@CAM.I+14 
0058  00031 016002X         JSB .DRCT 
0059  00032 000017X         DEF CAM.I 
0060  00033 042001R         ADA .1
0061  00034 072000R         STA DCB14 
0062*013        RC_0          !SET THE RECORD COUNT TO ZERO 
0063  00035 002400          CLA 
0064  00036 072002R         STA RC
0065*014        NFA_@LIS+1    !GET THE ADDRESS OF THE NEW INPUT DEVICE
0066  00037 062024R         LDA LIS 
0067  00040 002004          INA 
0068  00041 072003R         STA NFA 
0069*015        IF $NFA<0 THEN[PR_$NFA;UNTIL PR=0 DO[TR..(0,0.0);\
0070*                               PR_PR+1];GOTO FM.AB]
0071  00042 166003R         LDB NFA,I 
0072  00043 006021          SSB,RSS 
0073  00044 026063R         JMP .4
0074  00045 162003R         LDA NFA,I 
0075  00046 072004R         STA PR
0076  00047 066004R .2      LDB PR
0077  00050 006003          SZB,RSS 
0078  00051 026062R         JMP .3
0079  00052 016026R         JSB TR..
0080  00053 000056R         DEF *+3 
0081  00054 000005R         DEF .5
0082  00055 000006R         DEF .6
0083  00056 062004R         LDA PR
0084  00057 002004          INA 
0085  00060 072004R         STA PR
0086  00061 026047R         JMP .2
0087  00062 026016X .3      JMP FM.AB 
0088*016        NFI_[IF $NFA THEN NFA,ELSE P.TR-7]!SET ADDRESS OF NEXT F
0089  00063 162003R .4      LDA NFA,I 
0090  00064 002003          SZA,RSS 
0091  00065 026070R         JMP .7
0092  00066 062003R         LDA NFA 
0093  00067 026072R         JMP .8
0094  00070 062007X .7      LDA P.TR
0095  00071 042011R         ADA .9
0096  00072 072010R .8      STA NFI 
0097*017  ! 
0098*018        IFNOT $NFA THEN[RC_$(P.TR-4);$(P.TR+1)_0;RS_$[P.TR,PTRAD
0099  00073 162003R         LDA NFA,I 
0100  00074 002002          SZA 
0101  00075 026114R         JMP .10 
0102  00076 062007X         LDA P.TR
0103  00077 042014R         ADA .11 
0104  00100 160000          LDA .A.,I 
0105  00101 072002R         STA RC
0106  00102 062007X         LDA P.TR
0107  00103 002004          INA 
0108  00104 006400          CLB 
0109  00105 174000          STB .A.,I 
0110  00106 062007X         LDA P.TR
0111  00107 042015R         ADA .12 
0112  00110 072007X         STA P.TR







 PAGE 0004 #01


0113  00111 072013R         STA PTRAD 
0114  00112 160000          LDA .A.,I 
0115  00113 072012R         STA RS
0116*019  ! 
0117*020        IF P.TR<@CAMS. THEN EE.. ! TR ON FIRST FILE IS END
0118  00114 016002X .10     JSB .DRCT 
0119  00115 000010X         DEF CAMS. 
0120  00116 003004          CMA,INA 
0121  00117 042007X         ADA P.TR
0122  00120 002021          SSA,RSS 
0123  00121 026124R         JMP .13 
0124  00122 016006X         JSB EE..
0125  00123 000124R         DEF *+1 
0126*021        OPEN.(CAM.I,$NFI,N.OPL,410K)!OPEN THE NEW INPUT FILE
0127  00124 016003X .13     JSB OPEN. 
0128  00125 000132R         DEF *+5 
0129  00126 000017X         DEF CAM.I 
0130  00127 100010R         DEF NFI,I 
0131  00130 000013X         DEF N.OPL 
0132  00131 000016R         DEF .14 
0133*022        IFNOT $NFA THEN $PTRAD_RS !RESET RECORD COUNT IF NEEDED 
0134  00132 162003R         LDA NFA,I 
0135  00133 002002          SZA 
0136  00134 026137R         JMP .15 
0137  00135 062012R         LDA RS
0138  00136 172013R         STA PTRAD,I 
0139*023        IF P.TR-@CAMS.>36 THEN[ERR_13;RETURN] 
0140  00137 016002X .15     JSB .DRCT 
0141  00140 000010X         DEF CAMS. 
0142  00141 003004          CMA,INA 
0143  00142 042007X         ADA P.TR
0144  00143 042017R         ADA .17 
0145  00144 002020          SSA 
0146  00145 026151R         JMP .16 
0147  00146 062020R         LDA .18 
0148  00147 172025R         STA ERR,I 
0149  00150 126026R         JMP TR..,I
0150*024        IF RC THEN[\
0151*          UNTIL $DCB14=RC DO[READF(CAM.I,.E.R.,C.BUF,1);IER. ]]
0152  00151 062002R .16     LDA RC
0153  00152 002003          SZA,RSS 
0154  00153 026170R         JMP .21 
0155  00154 166000R .19     LDB DCB14,I 
0156  00155 056002R         CPB RC
0157  00156 026170R         JMP .21 
0158  00157 016004X         JSB READF 
0159  00160 000165R         DEF *+5 
0160  00161 000017X         DEF CAM.I 
0161  00162 000015X         DEF .E.R. 
0162  00163 000021R         DEF C.BUF 
0163  00164 000022R         DEF .22 
0164  00165 016005X         JSB IER.
0165  00166 000167R         DEF *+1 
0166  00167 026154R         JMP .19 
0167*025        RETURN
0168  00170 126026R .21     JMP TR..,I







 PAGE 0005 #01


0169*026        END 
0170*027  ! 
0171*028        END 
0172                        END 
**  NO ERRORS*



















































$END ASMB     

*
--> Assemble fmp/29033-80010_Rev-A_2
ON,ASMB,99







 PAGE 0001


0001                ASMB,B,X,L
**  NO ERRORS*





























































 PAGE 0002 #01


0001                ASMB,B,X,L
0002*001  SPL, L, M, O
0003*002        NAME SA..(8)
0004  00000                 NAM SA..,8
0005  00000         .A.     EQU  0
0006  00001         .B.     EQU  1
0007                        ENT SA..
0008                        EXT .ENTR 
0009                        EXT .MPY
0010                        EXT .DIV
0011                        EXT .E.R. 
0012                        EXT N.OPL 
0013                        EXT O.BUF 
0014                        EXT I.BUF 
0015                        EXT BUF.
0016                        EXT CUSE. 
0017                        EXT CREA. 
0018                        EXT OPEN. 
0019                        EXT IER.
0020                        EXT WRITF 
0021                        EXT LOCF
0022                        EXT CLOSE 
0023                        EXT READ. 
0024                        EXT READF 
0025                        EXT RWNDF 
0026                        EXT MSS.
0027                        EXT CK.SM 
0028                        EXT D.AD
0029  00000 000000  LIS5    BSS 1 
0030  00001 000000  LIS1    BSS 1 
0031  00002 000004  .1      OCT 000004
0032  00003 000000  SZ      BSS 1 
0033  00004 000000  RS      BSS 1 
0034  00005 000000  SC      BSS 1 
0035  00006 000005  .2      OCT 000005
0036  00007 000002  .3      OCT 000002
0037  00010 177776  .5      OCT 177776
0038  00011 000062  .6      OCT 000062
0039  00012 046107  .7      OCT 046107
0040  00013 046123  .9      OCT 046123
0041  00014 000070  .10     OCT 000070
0042  00015 000000  OPFL    BSS 1 
0043  00016 101010  .11     OCT 101010
0044  00017 000000  T1      BSS 1 
0045  00020 000000  SIZE    BSS 1 
0046  00021 000000  RD      BSS 1 
0047  00022 001757  .12     OCT 001757
0048  00023 000353R .13     DEF LSRD
0049  00024 000000  TYPE    BSS 1 
0050  00025 000000  FIRST   BSS 1 
0051  00026 000000  L       BSS 1 
0052  00027 000000  IL      BSS 1 
0053  00030 177777  .19     OCT 177777
0054  00031 177772  .21     OCT 177772
0055  00032 000000  T       BSS 1 
0056  00033 000000  .22     BSS 1 







 PAGE 0003 #01


0057  00034 000000  TY      BSS 1 
0058  00035 101110  .23     OCT 101110
0059  00036 000072  .25     OCT 000072
0060  00037 000003  .26     OCT 000003
0061  00040 000365R .27     DEF LGRD
0062  00041 000106  .28     OCT 000106
0063  00042 000000  BUF1    BSS 1 
0064  00043 000000  BUF     BSS 1 
0065  00044 000000  IBUF4   BSS 1 
0066  00045 000000  IBUF3   BSS 1 
0067  00046 000000  IBUF2   BSS 1 
0068  00047 000000  IBUF    BSS 1 
0069  00050 000000  IBU15   BSS 1 
0070  00051 000000  IBUF9   BSS 1 
0071  00052 000000  IBUF8   BSS 1 
0072  00053 000000  IBUF7   BSS 1 
0073  00054 000000  IBUF6   BSS 1 
0074  00055 000000  IBUF5   BSS 1 
0075  00056 000006  .29     OCT 000006
0076  00057 001765  .32     OCT 001765
0077  00060 077600  .33     OCT 077600
0078  00061 000000  MXRC    BSS 1 
0079  00062 000100  .34     OCT 000100
0080  00063 001760  .37     OCT 001760
0081  00064 001717  .38     OCT 001717
0082  00065 000000  RC      BSS 1 
0083  00066 000000  ENFLG   BSS 1 
0084  00067 000001  .40     OCT 000001
0085  00070 000000  ADD     BSS 1 
0086  00071 000000  .42     BSS 1 
0087  00072 160000  .44     OCT 160000
0088  00073 120000  .45     OCT 120000
0089  00074 000007  .46     OCT 000007
0090  00075 000017  .47     OCT 000017
0091  00076 000000  ED      BSS 1 
0092  00077 000000  I       BSS 1 
0093  00100 000000  ENADD   BSS 1 
0094  00101 000000  LG.SV   BSS 1 
0095  00102 001766  .54     OCT 001766
0096  00103 000000  .55     BSS 1 
0097  00104 000000  .56     BSS 1 
0098  00105 000000  .57     BSS 1 
0099  00106 000177  .58     OCT 000177
0100*003  !     THIS ROUTINE IS TO SAVE LS/LG ROUTINE FOR THE 
0101*004  !     RTE FMGR PROGRAM.  IT IS ENTERED BY ENTERING
0102*005  !     A COMMAND OF THE FORM:
0103*006  ! 
0104*007  !     SA,LS/LG,NAMR 
0105*008  !PRAM LOC 1     5 
0106*009  ! 
0107*010  !     W H E R E:
0108*011  ! 
0109*012  !     SA       IS THE COMMAND NAME. 
0110*013  ! 
0111*014  !     LS/LG    IS LS TO SAVE THE LS FILE, 
0112*015  !              OR LG TO SAVE THE LOAD & GO FILE.







 PAGE 0004 #01


0113*016  ! 
0114*017  !     NAMR     IS TO BE THE NEW FILE'S NAME REFERENCE.
0115*018  ! 
0116*019  ! 
0117*020  !     THE FOLLOWING NAMR PARAMETERS ARE OPTIONAL: 
0118*021  ! 
0119*022  !     CR       IS THE CARTRIDGE TO BE USED TO SAVE
0120*023  !              (ZERO IF NOT GIVEN). 
0121*024  ! 
0122*025  !     SC       IS THE FILE'S SECURITY CODE
0123*026  !              (ZERO IF NOT GIVEN). 
0124*027  ! 
0125*028  !     TY       IS THE FILE'S TYPE (4 FOR LS OR
0126*029  !              5 FOR LG IF NOT GIVEN).
0127*030  ! 
0128*031  !     SZ1      IS THE FILES SIZE ESTIMATE USED FOR LS FILES ON
0129*032  !              IF NOT GIVEN THE THE FILE IS ESTIMATED TO FILL 
0130*033  !              LESS THAN HALF A TRACK. EXCESS  THEN GENERATES 
0131*034  !              IF LESS THAN THE ESTIMATED SIZE IS USED THE
0132*035  !              EXCESS IS RETURNED TO THE SYSTEM 
0133*036  ! 
0134*037  !     CONSTANT DECLARATIONS 
0135*038  ! 
0136*039        LET A         BE CONSTANT(0    )
0137*040        LET B         BE CONSTANT (1    ) 
0138*041        LET XEQT      BE CONSTANT (1717K) 
0139*042        LET SECT2     BE CONSTANT (1757K) 
0140*043        LET SECT3     BE CONSTANT (1760K) 
0141*044        LET LGOTK     BE CONSTANT (1765K) 
0142*045        LET LGOC      BE CONSTANT (1766K) 
0143*046        LET LG        BE CONSTANT (46107K)
0144*047        LET LS        BE CONSTANT (46123K)
0145*048  ! 
0146*049  !     DECLARE THE ERROR WORD LOCATION 
0147*050  ! 
0148*051        LET .E.R.,N.OPL BE INTEGER,EXTERNAL 
0149*052  ! 
0150*053  !     ARRAY DECLARATIONS
0151*054  ! 
0152*055        LET O.BUF,I.BUF,BUF.,CUSE. BE INTEGER,EXTERNAL
0153*056  ! 
0154*057  ! 
0155*058  !     SUBROUTINE DECLARATIONS 
0156*059  ! 
0157*060        LET CREA.,OPEN.,IER.,\
0158*           WRITF,LOCF,CLOSE,\
0159*           READ.,READF,RWNDF,\ 
0160*           MSS.,EXEC,CK.SM    BE SUBROUTINE,EXTERNAL 
0161*061  ! 
0162*062        LET LSRD,LGRD,READR,\ 
0163*           GET                BE SUBROUTINE
0164*063  ! 
0165*064        LET D.AD               BE FUNCTION,EXTERNAL 
0166*065        LET LG.S               BE FUNCTION
0167*066  SA..: SUBROUTINE(NCAM,PLIST,MSNO)GLOBAL 
0168  00107 000000  NCAM    NOP 







 PAGE 0005 #01


0169  00110 000000  PLIST   NOP 
0170  00111 000000  MSNO    NOP 
0171  00112 000000  SA..    NOP 
0172  00113 016001X         JSB .ENTR 
0173  00114 000107R         DEF NCAM
0174*067        LET NCAM,PLIST,MSNO BE INTEGER
0175*068        LIS5_[LIS1_@PLIST+1]+4  !SET LIST ADDRESSES 
0176  00115 062110R         LDA PLIST 
0177  00116 002004          INA 
0178  00117 072001R         STA LIS1
0179  00120 042002R         ADA .1
0180  00121 072000R         STA LIS5
0181*069        SZ_[RS _[SC_D.AD(N.OPL)+5]+2]+1  !SET OPTION LIST ADDRES
0182  00122 016025X         JSB D.AD
0183  00123 000125R         DEF *+2 
0184  00124 000005X         DEF N.OPL 
0185  00125 042006R         ADA .2
0186  00126 072005R         STA SC
0187  00127 042007R         ADA .3
0188  00130 072004R         STA RS
0189  00131 002004          INA 
0190  00132 072003R         STA SZ
0191*070  ! 
0192*071        IF NCAM<2 THEN[MSNO_50;RETURN]
0193  00133 166107R         LDB NCAM,I
0194  00134 046010R         ADB .5
0195  00135 006021          SSB,RSS 
0196  00136 026142R         JMP .4
0197  00137 062011R         LDA .6
0198  00140 172111R         STA MSNO,I
0199  00141 126112R         JMP SA..,I
0200*072        IF $LIS1=LG THEN GO TO SALG 
0201  00142 166001R .4      LDB LIS1,I
0202  00143 056012R         CPB .7
0203  00144 026317R         JMP SALG
0204*073        IF $LIS1#LS THEN [MSNO_56; RETURN]  !NOT LS OR LG SO ABO
0205  00145 166001R         LDB LIS1,I
0206  00146 056013R         CPB .9
0207  00147 026153R         JMP .8
0208  00150 062014R         LDA .10 
0209  00151 172111R         STA MSNO,I
0210  00152 126112R         JMP SA..,I
0211*074        CUSE._0       !SHOW SEGMENT NOT IN CORE FOR NEXT TIME 
0212  00153 002400  .8      CLA 
0213  00154 072011X         STA CUSE. 
0214*075        OPFL_101010K  !SET PUNCH OPTION FLAG
0215  00155 062016R         LDA .11 
0216  00156 072015R         STA OPFL
0217*076        DO[T1_4;SIZE_$SECT2/4;RD_@LSRD]!SET UP DEFAULT SIZE 
0218  00157 062002R         LDA .1
0219  00160 072017R         STA T1
0220  00161 162022R         LDA .12,I 
0221  00162 006400          CLB 
0222  00163 002020          SSA 
0223  00164 007000          CMB 
0224  00165 016003X         JSB .DIV







 PAGE 0006 #01


0225  00166 000002R         DEF .1
0226  00167 072020R         STA SIZE
0227  00170 062023R         LDA .13 
0228  00171 072021R         STA RD
0229*077  SA02: IFNOT $SZ THEN $SZ_SIZE    !SET DEFAULT SIZE IF NOT SUPP
0230  00172 162003R SA02    LDA SZ,I
0231  00173 002002          SZA 
0232  00174 026177R         JMP .14 
0233  00175 062020R         LDA SIZE
0234  00176 172003R         STA SZ,I
0235*078        IFNOT $RS  THEN $RS _T1   !SET DEFAULT TYPE 
0236  00177 162004R .14     LDA RS,I
0237  00200 002002          SZA 
0238  00201 026204R         JMP .15 
0239  00202 062017R         LDA T1
0240  00203 172004R         STA RS,I
0241*079        TYPE_$RS   !SET TYPE FOR LATER
0242  00204 162004R .15     LDA RS,I
0243  00205 072024R         STA TYPE
0244*080        CREA.(O.BUF,$LIS5,$SC)?[TYPE_0;\!CREAT THE FILE 
0245*       OPEN.(O.BUF,$LIS5,$SC,OPFL)]!OPEN IF NOT A FILE NAME
0246  00206 016012X         JSB CREA. 
0247  00207 000213R         DEF *+4 
0248  00210 000006X         DEF O.BUF 
0249  00211 100000R         DEF LIS5,I
0250  00212 100005R         DEF SC,I
0251  00213 002041          SEZ,RSS 
0252  00214 026225R         JMP .16 
0253  00215 002400          CLA 
0254  00216 072024R         STA TYPE
0255  00217 016013X         JSB OPEN. 
0256  00220 000225R         DEF *+5 
0257  00221 000006X         DEF O.BUF 
0258  00222 100000R         DEF LIS5,I
0259  00223 100005R         DEF SC,I
0260  00224 000015R         DEF OPFL
0261*081        FIRST_1 
0262  00225 002404  .16     CLA,INA 
0263  00226 072025R         STA FIRST 
0264*082  LOOP: CALL $RD      !READ A RECORD
0265  00227 116021R LOOP    JSB RD,I
0266  00230 000231R         DEF *+1 
0267*083        L_IL
0268  00231 062027R         LDA IL
0269  00232 072026R         STA L 
0270*084        IFNOT IL THEN[IFNOT TYPE THEN L_-1] 
0271  00233 062027R         LDA IL
0272  00234 002002          SZA 
0273  00235 026243R         JMP .18 
0274  00236 062024R         LDA TYPE
0275  00237 002002          SZA 
0276  00240 026243R         JMP .18 
0277  00241 003400          CCA 
0278  00242 072026R         STA L 
0279*085        WRITF(O.BUF,.E.R.,BUF.,L)   !WRITE IT 
0280  00243 016015X .18     JSB WRITF 







 PAGE 0007 #01


0281  00244 000251R         DEF *+5 
0282  00245 000006X         DEF O.BUF 
0283  00246 000004X         DEF .E.R. 
0284  00247 000010X         DEF BUF.
0285  00250 000026R         DEF L 
0286*086        IF .E.R.= -6 THEN[MSS.(.E.R.);GOTO ABOR]!PURGE FILE 
0287  00251 066004X         LDB .E.R. 
0288  00252 056031R         CPB .21 
0289  00253 002001          RSS 
0290  00254 026261R         JMP .20 
0291  00255 016023X         JSB MSS.
0292  00256 000260R         DEF *+2 
0293  00257 000004X         DEF .E.R. 
0294  00260 026602R         JMP ABOR
0295*087        IER.          ! ANY ERRORS? 
0296  00261 016014X .20     JSB IER.
0297  00262 000263R         DEF *+1 
0298*088        IF IL=>0 THEN GO TO LOOP  ! IF NOT EOF CONTINUE 
0299  00263 066027R         LDB IL
0300  00264 006021          SSB,RSS 
0301  00265 026227R         JMP LOOP
0302*089  ! 
0303*090        IFNOT TYPE THEN RETURN
0304  00266 062024R         LDA TYPE
0305  00267 002003          SZA,RSS 
0306  00270 126112R         JMP SA..,I
0307*091        LOCF(O.BUF,.E.R.,T,RS)      !GET CURRENT POSITION 
0308  00271 016016X         JSB LOCF
0309  00272 000277R         DEF *+5 
0310  00273 000006X         DEF O.BUF 
0311  00274 000004X         DEF .E.R. 
0312  00275 000032R         DEF T 
0313  00276 000004R         DEF RS
0314*092        IER.
0315  00277 016014X         JSB IER.
0316  00300 000301R         DEF *+1 
0317*093  TRUN: CLOSE(O.BUF,.E.R.,$SZ  -RS-1)!CLOSE & TRUNCATE
0318  00301 062004R TRUN    LDA RS
0319  00302 003004          CMA,INA 
0320  00303 142003R         ADA SZ,I
0321  00304 007400          CCB 
0322  00305 044000          ADB .A. 
0323  00306 076033R         STB .22 
0324  00307 016017X         JSB CLOSE 
0325  00310 000314R         DEF *+4 
0326  00311 000006X         DEF O.BUF 
0327  00312 000004X         DEF .E.R. 
0328  00313 000033R         DEF .22 
0329*094        IER.
0330  00314 016014X         JSB IER.
0331  00315 000316R         DEF *+1 
0332*095  EXIT: RETURN                   !DONE RETURN 
0333  00316 126112R EXIT    JMP SA..,I
0334*096  SALG: TY_0  !SET LOAD & GO FLAG 
0335  00317 002400  SALG    CLA 
0336  00320 072034R         STA TY







 PAGE 0008 #01


0337*097        T1_5  !SET DEFAULT TYPE 
0338  00321 062006R         LDA .2
0339  00322 072017R         STA T1
0340*098        OPFL_101110K  !SET THE OPTION FLAG
0341  00323 062035R         LDA .23 
0342  00324 072015R         STA OPFL
0343*099        SIZE  _(([T_LG.S() ?[MSNO_58;RETURN]]+3)>-1)+T/5 !SIZE E
0344  00325 016700R         JSB LG.S
0345  00326 000327R         DEF *+1 
0346  00327 002041          SEZ,RSS 
0347  00330 026334R         JMP .24 
0348  00331 062036R         LDA .25 
0349  00332 172111R         STA MSNO,I
0350  00333 126112R         JMP SA..,I
0351  00334 072032R .24     STA T 
0352  00335 042037R         ADA .26 
0353  00336 001100          ARS 
0354  00337 072033R         STA .22 
0355  00340 062032R         LDA T 
0356  00341 006400          CLB 
0357  00342 002020          SSA 
0358  00343 007000          CMB 
0359  00344 016003X         JSB .DIV
0360  00345 000006R         DEF .2
0361  00346 042033R         ADA .22 
0362  00347 072020R         STA SIZE
0363*100        RD_@LGRD  !SET THE READ ROUTINE ADDRESS 
0364  00350 062040R         LDA .27 
0365  00351 072021R         STA RD
0366*101        GO TO SA02  !GO DO IT 
0367  00352 026172R         JMP SA02
0368*102        END 
0369*103  LSRD: SUBROUTINE
0370  00353 000000  LSRD    NOP 
0371  00354 016001X         JSB .ENTR 
0372  00355 000353R         DEF LSRD
0373*104        READ.(2,BUF.,70,IL) 
0374  00356 016020X         JSB READ. 
0375  00357 000364R         DEF *+5 
0376  00360 000007R         DEF .3
0377  00361 000010X         DEF BUF.
0378  00362 000041R         DEF .28 
0379  00363 000027R         DEF IL
0380*105        RETURN
0381  00364 126353R         JMP LSRD,I
0382*106        END 
0383*107  ! 
0384*108  LGRD: SUBROUTINE
0385  00365 000000  LGRD    NOP 
0386  00366 016001X         JSB .ENTR 
0387  00367 000365R         DEF LGRD
0388*109        BUF1_[BUF_D.AD(BUF.)]+1 
0389  00370 016025X         JSB D.AD
0390  00371 000373R         DEF *+2 
0391  00372 000010X         DEF BUF.
0392  00373 072043R         STA BUF 







 PAGE 0009 #01


0393  00374 002004          INA 
0394  00375 072042R         STA BUF1
0395*110        IFNOT FIRST THEN GOTO XFER
0396  00376 062025R         LDA FIRST 
0397  00377 002003          SZA,RSS 
0398  00400 026506R         JMP XFER
0399*111           IBUF4_[IBUF3_[IBUF2_[IBUF_D.AD(I.BUF)]+2]+1]+1 
0400  00401 016025X         JSB D.AD
0401  00402 000404R         DEF *+2 
0402  00403 000007X         DEF I.BUF 
0403  00404 072047R         STA IBUF
0404  00405 042007R         ADA .3
0405  00406 072046R         STA IBUF2 
0406  00407 002004          INA 
0407  00410 072045R         STA IBUF3 
0408  00411 002004          INA 
0409  00412 072044R         STA IBUF4 
0410*112        IBU15 _[IBUF9_[IBUF8_[IBUF7_[IBUF6_[IBUF5_ \ SET UP BUFF
0411*       IBUF4+1    ]+1]+1]+1]+1]+6
0412  00413 002004          INA 
0413  00414 072055R         STA IBUF5 
0414  00415 002004          INA 
0415  00416 072054R         STA IBUF6 
0416  00417 002004          INA 
0417  00420 072053R         STA IBUF7 
0418  00421 002004          INA 
0419  00422 072052R         STA IBUF8 
0420  00423 002004          INA 
0421  00424 072051R         STA IBUF9 
0422  00425 042056R         ADA .29 
0423  00426 072050R         STA IBU15 
0424*113        $IBUF_[IF $LGOTK<0 THEN 3,ELSE 2] 
0425  00427 166057R         LDB .32,I 
0426  00430 006021          SSB,RSS 
0427  00431 026434R         JMP .30 
0428  00432 062037R         LDA .26 
0429  00433 026435R         JMP .31 
0430  00434 062007R .30     LDA .3
0431  00435 172047R .31     STA IBUF,I
0432*114        $(IBUF2 )_2 
0433  00436 062007R         LDA .3
0434  00437 172046R         STA IBUF2,I 
0435*115        $(IBUF3 )_($LGOTK AND 77600K)-<9
0436  00440 162057R         LDA .32,I 
0437  00441 012060R         AND .33 
0438  00442 001727          ALF,ALF 
0439  00443 001200          RAL 
0440  00444 172045R         STA IBUF3,I 
0441*116        $IBUF4,$IBUF7,$IBU15_0
0442  00445 002400          CLA 
0443  00446 172044R         STA IBUF4,I 
0444  00447 172053R         STA IBUF7,I 
0445  00450 172050R         STA IBU15,I 
0446*117        $(IBUF5)_([MXRC_LG.S()]+3)
0447  00451 016700R         JSB LG.S
0448  00452 000453R         DEF *+1 







 PAGE 0010 #01


0449  00453 072061R         STA MXRC
0450  00454 042037R         ADA .26 
0451  00455 172055R         STA IBUF5,I 
0452*118        $IBUF6_64 
0453  00456 062062R         LDA .34 
0454  00457 172054R         STA IBUF6,I 
0455*119        $(IBUF8 )_[IF IBUF=3 THEN $SECT3,ELSE $SECT2] 
0456  00460 066047R         LDB IBUF
0457  00461 056037R         CPB .26 
0458  00462 002001          RSS 
0459  00463 026466R         JMP .35 
0460  00464 162063R         LDA .37,I 
0461  00465 026467R         JMP .36 
0462  00466 162022R .35     LDA .12,I 
0463  00467 172052R .36     STA IBUF8,I 
0464*120        $(IBUF9 )_$XEQT 
0465  00470 162064R         LDA .38,I 
0466  00471 172051R         STA IBUF9,I 
0467*121        RWNDF(I.BUF,.E.R.)
0468  00472 016022X         JSB RWNDF 
0469  00473 000476R         DEF *+3 
0470  00474 000007X         DEF I.BUF 
0471  00475 000004X         DEF .E.R. 
0472*122        IER.
0473  00476 016014X         JSB IER.
0474  00477 000500R         DEF *+1 
0475*123        DO[RC,FIRST,ENFLG_0;READR]
0476  00500 002400          CLA 
0477  00501 072065R         STA RC
0478  00502 072025R         STA FIRST 
0479  00503 072066R         STA ENFLG 
0480  00504 016656R         JSB READR 
0481  00505 000506R         DEF *+1 
0482*124  XFER: IFNOT ENFLG THEN GOTO LGRD2 
0483  00506 062066R XFER    LDA ENFLG 
0484  00507 002003          SZA,RSS 
0485  00510 026540R         JMP LGRD2 
0486*125        IF ENFLG=1 THEN[ENFLG_2;IL_0;RETURN]
0487  00511 066066R         LDB ENFLG 
0488  00512 056067R         CPB .40 
0489  00513 002001          RSS 
0490  00514 026522R         JMP LGRD1 
0491  00515 062007R         LDA .3
0492  00516 072066R         STA ENFLG 
0493  00517 002400          CLA 
0494  00520 072027R         STA IL
0495  00521 126365R         JMP LGRD,I
0496*126  LGRD1:DO[ENFLG_0;IF ADD#@PLIST THEN READR;IL_-1;\ 
0497*                  IF RC>MXRC THEN RETURN]
0498  00522 002400  LGRD1   CLA 
0499  00523 072066R         STA ENFLG 
0500  00524 062110R         LDA PLIST 
0501  00525 052070R         CPA ADD 
0502  00526 026531R         JMP .41 
0503  00527 016656R         JSB READR 
0504  00530 000531R         DEF *+1 







 PAGE 0011 #01


0505  00531 003400  .41     CCA 
0506  00532 072027R         STA IL
0507  00533 066065R         LDB RC
0508  00534 007004          CMB,INB 
0509  00535 046061R         ADB MXRC
0510  00536 006020          SSB 
0511  00537 126365R         JMP LGRD,I
0512*127  LGRD2:GET(BUF.,1) 
0513  00540 016616R LGRD2   JSB GET 
0514  00541 000544R         DEF *+3 
0515  00542 000010X         DEF BUF.
0516  00543 000067R         DEF .40 
0517*128        IFNOT $BUF THEN GO TO LGRD1 
0518  00544 162043R         LDA BUF,I 
0519  00545 002003          SZA,RSS 
0520  00546 026522R         JMP LGRD1 
0521*129        GET ( $BUF1  ,[IL_$BUF-<8]-1) 
0522  00547 162043R         LDA BUF,I 
0523  00550 001727          ALF,ALF 
0524  00551 072027R         STA IL
0525  00552 007400          CCB 
0526  00553 044000          ADB .A. 
0527  00554 076071R         STB .42 
0528  00555 016616R         JSB GET 
0529  00556 000561R         DEF *+3 
0530  00557 100042R         DEF BUF1,I
0531  00560 000071R         DEF .42 
0532*130        CK.SM(BUF.,1)?[GOTO ABORT]
0533  00561 016024X         JSB CK.SM 
0534  00562 000565R         DEF *+3 
0535  00563 000010X         DEF BUF.
0536  00564 000067R         DEF .40 
0537  00565 002040          SEZ 
0538  00566 026577R         JMP ABORT 
0539*131        IF ( $BUF1   AND 160000K)=120000K THEN ENFLG_1
0540  00567 162042R         LDA BUF1,I
0541  00570 012072R         AND .44 
0542  00571 052073R         CPA .45 
0543  00572 002001          RSS 
0544  00573 026576R         JMP .43 
0545  00574 002404          CLA,INA 
0546  00575 072066R         STA ENFLG 
0547*132        RETURN
0548  00576 126365R .43     JMP LGRD,I
0549*133  ABORT:MSS.(7) 
0550  00577 016023X ABORT   JSB MSS.
0551  00600 000602R         DEF *+2 
0552  00601 000074R         DEF .46 
0553*134  ABOR: IFNOT TYPE THEN GO TO EXIT  ! IF TYPE ZERO THE EXIT 
0554  00602 062024R ABOR    LDA TYPE
0555  00603 002003          SZA,RSS 
0556  00604 026316R         JMP EXIT
0557*135        DO[$(O.BUF+15)_0;RS_-1;GO TO TRUN]
0558  00605 062006X         LDA O.BUF 
0559  00606 042075R         ADA .47 
0560  00607 006400          CLB 







 PAGE 0012 #01


0561  00610 174000          STB .A.,I 
0562  00611 003400          CCA 
0563  00612 072004R         STA RS
0564  00613 026301R         JMP TRUN
0565*136        END 
0566*137  ! 
0567*138  ! 
0568*139  GET:  SUBROUTINE(DS,NO) 
0569  00614 000000  DS      NOP 
0570  00615 000000  NO      NOP 
0571  00616 000000  GET     NOP 
0572  00617 016001X         JSB .ENTR 
0573  00620 000614R         DEF DS
0574*140        ED_@DS+NO-1 
0575  00621 062614R         LDA DS
0576  00622 142615R         ADA NO,I
0577  00623 007400          CCB 
0578  00624 044000          ADB .A. 
0579  00625 076076R         STB ED
0580*141        FOR I_@DS TO ED DO THRU GET0
0581  00626 062614R         LDA DS
0582  00627 072077R         STA I 
0583  00630 026634R         JMP .49 
0584  00631 062077R .48     LDA I 
0585  00632 002004          INA 
0586  00633 072077R         STA I 
0587  00634 066077R .49     LDB I 
0588  00635 007004          CMB,INB 
0589  00636 046076R         ADB ED
0590  00637 006020          SSB 
0591  00640 026655R         JMP .50 
0592*142        $I_$ADD 
0593  00641 162070R         LDA ADD,I 
0594  00642 172077R         STA I,I 
0595*143        ADD_ADD+1 
0596  00643 062070R         LDA ADD 
0597  00644 002004          INA 
0598  00645 072070R         STA ADD 
0599*144  GET0: IF ADD=ENADD THEN READR 
0600  00646 066070R GET0    LDB ADD 
0601  00647 056100R         CPB ENADD 
0602  00650 002001          RSS 
0603  00651 026654R         JMP .51 
0604  00652 016656R         JSB READR 
0605  00653 000654R         DEF *+1 
0606  00654 026631R .51     JMP .48 
0607*145        RETURN
0608  00655 126616R .50     JMP GET,I 
0609*146        END 
0610*147  ! 
0611*148  READR:SUBROUTINE
0612  00656 000000  READR   NOP 
0613  00657 016001X         JSB .ENTR 
0614  00660 000656R         DEF READR 
0615*149        DO[READF(I.BUF,.E.R.,PLIST);IER.] 
0616  00661 016021X         JSB READF 







 PAGE 0013 #01


0617  00662 000666R         DEF *+4 
0618  00663 000007X         DEF I.BUF 
0619  00664 000004X         DEF .E.R. 
0620  00665 100110R         DEF PLIST,I 
0621  00666 016014X         JSB IER.
0622  00667 000670R         DEF *+1 
0623*150        ENADD_[ADD_@PLIST]+64 
0624  00670 062110R         LDA PLIST 
0625  00671 072070R         STA ADD 
0626  00672 042062R         ADA .34 
0627  00673 072100R         STA ENADD 
0628*151        RC_RC+1 
0629  00674 062065R         LDA RC
0630  00675 002004          INA 
0631  00676 072065R         STA RC
0632*152        RETURN
0633  00677 126656R         JMP READR,I 
0634*153        END 
0635*154  ! 
0636*155  LG.S: FUNCTION FEXIT
0637  00700 000000  LG.S    NOP 
0638  00701 016001X         JSB .ENTR 
0639  00702 000700R         DEF LG.S
0640*156        LG.SV_((($LGOC AND 77600K)-($LGOTK AND 77600K))\
0641*             -<9)*[IF $LGOTK<0 THEN $SECT3,ELSE $SECT2]\ 
0642*                 +($LGOC AND 177K) 
0643  00703 162102R         LDA .54,I 
0644  00704 012060R         AND .33 
0645  00705 072103R         STA .55 
0646  00706 162057R         LDA .32,I 
0647  00707 012060R         AND .33 
0648  00710 003004          CMA,INA 
0649  00711 042103R         ADA .55 
0650  00712 001727          ALF,ALF 
0651  00713 001200          RAL 
0652  00714 072104R         STA .56 
0653  00715 166057R         LDB .32,I 
0654  00716 006021          SSB,RSS 
0655  00717 026722R         JMP .52 
0656  00720 162063R         LDA .37,I 
0657  00721 026723R         JMP .53 
0658  00722 162022R .52     LDA .12,I 
0659  00723 016002X .53     JSB .MPY
0660  00724 000104R         DEF .56 
0661  00725 072105R         STA .57 
0662  00726 162102R         LDA .54,I 
0663  00727 012106R         AND .58 
0664  00730 042105R         ADA .57 
0665  00731 072101R         STA LG.SV 
0666*157        IF LG.SV THEN RETURN,ELSE FRETURN 
0667  00732 002003          SZA,RSS 
0668  00733 026737R         JMP .59 
0669  00734 062101R         LDA LG.SV 
0670  00735 000040          CLE 
0671  00736 126700R         JMP LG.S,I
0672  00737 062101R .59     LDA LG.SV 







 PAGE 0014 #01


0673  00740 002300          CCE 
0674  00741 126700R         JMP LG.S,I
0675*158        END 
0676*159        END 
0677                        END 
**  NO ERRORS*


















































$END ASMB     

*
--> Assemble fmp/29033-80010_Rev-A_3
ON,ASMB,99







 PAGE 0001


0001                ASMB,B,X,L
**  NO ERRORS*





























































 PAGE 0002 #01


0001                ASMB,B,X,L
0002*001  SPL, L, M, O
0003*002        NAME MR..(8)
0004  00000                 NAM MR..,8
0005  00000         .A.     EQU  0
0006  00001         .B.     EQU  1
0007                        ENT MR..
0008                        EXT .ENTR 
0009                        EXT I.BUF 
0010                        EXT BUF.
0011                        EXT N.OPL 
0012                        EXT .E.R. 
0013                        EXT CK.SM 
0014                        EXT READF 
0015                        EXT OPEN. 
0016                        EXT MSS.
0017                        EXT EXEC
0018                        EXT IER.
0019                        EXT WRLG. 
0020                        EXT EFLG. 
0021                        EXT D.AD
0022  00000 000062  .2      OCT 000062
0023  00001 000000  .3      BSS 1 
0024  00002 000311  .4      OCT 000311
0025  00003 000000  FLG     BSS 1 
0026  00004 000000  L       BSS 1 
0027  00005 000100  .5      OCT 000100
0028  00006 177777  .6      OCT 177777
0029  00007 000001  .8      OCT 000001
0030  00010 000007  .9      OCT 000007
0031  00011 160000  .10     OCT 160000
0032  00012 120000  .11     OCT 120000
0033  00013 000006  .13     OCT 000006
0034*003  ! 
0035*004  ! 
0036*005  ! 
0037*006  !     THIS PORTION OF THE FILE MANAGER RESTORES 
0038*007  !     A FILE TO THE SYSTEM LOAD AND GO AREA.
0039*008  ! 
0040*009  ! 
0041*010  !     THE COMMAND IS: 
0042*011  ! 
0043*012  !     LG,NAMR 
0044*013  ! 
0045*014  ! 
0046*015  !     W H E R E:
0047*016  ! 
0048*017  !     NAMR     IS THE FILE NAME WHICH MAY CONTAIN THE:
0049*018  !     CR       IS ITS CARTRIDGE ID (OPTIONAL).
0050*019  !     SC       IS ITS SECURITY CODE (OPTIONAL). 
0051*020  ! 
0052*021  ! 
0053*022  !     ARRAY DECLARATIONS: 
0054*023  ! 
0055*024        LET I.BUF,BUF.,N.OPL   BE INTEGER,EXTERNAL
0056*025  ! 







 PAGE 0003 #01


0057*026  !     DECLARE THE ERROR WORD LOCATION 
0058*027  ! 
0059*028        LET .E.R.     BE INTEGER,EXTERNAL 
0060*029  ! 
0061*030  ! 
0062*031  !     EXTERNAL SUBROUTINE DECLARATIONS: 
0063*032  ! 
0064*033        LET CK.SM,READF,OPEN.,\ 
0065*           MSS.,EXEC,        \ 
0066*           IER.,WRLG.,EFLG.   BE SUBROUTINE,EXTERNAL 
0067*034        LET D.AD               BE FUNCTION,EXTERNAL 
0068*035  MR..: SUBROUTINE(NCAM,PLIST,MSNO)GLOBAL 
0069  00014 000000  NCAM    NOP 
0070  00015 000000  PLIST   NOP 
0071  00016 000000  MSNO    NOP 
0072  00017 000000  MR..    NOP 
0073  00020 016001X         JSB .ENTR 
0074  00021 000014R         DEF NCAM
0075*036        IFNOT NCAM THEN[MSNO_50;RETURN] 
0076  00022 162014R         LDA NCAM,I
0077  00023 002002          SZA 
0078  00024 026030R         JMP .1
0079  00025 062000R         LDA .2
0080  00026 172016R         STA MSNO,I
0081  00027 126017R         JMP MR..,I
0082*037        OPEN.(I.BUF,$(@PLIST+1),N.OPL,311K) !NON-EXCLUSIVE OPEN 
0083  00030 062015R .1      LDA PLIST 
0084  00031 002004          INA 
0085  00032 072001R         STA .3
0086  00033 016010X         JSB OPEN. 
0087  00034 000041R         DEF *+5 
0088  00035 000002X         DEF I.BUF 
0089  00036 100001R         DEF .3,I
0090  00037 000004X         DEF N.OPL 
0091  00040 000002R         DEF .4
0092*038        FLG_0 
0093  00041 002400          CLA 
0094  00042 072003R         STA FLG 
0095*039  LG1:  READF(I.BUF,.E.R.,BUF.,64,L) !READ A RECORD 
0096  00043 016007X LG1     JSB READF 
0097  00044 000052R         DEF *+6 
0098  00045 000002X         DEF I.BUF 
0099  00046 000005X         DEF .E.R. 
0100  00047 000003X         DEF BUF.
0101  00050 000005R         DEF .5
0102  00051 000004R         DEF L 
0103*040        IER.
0104  00052 016013X         JSB IER.
0105  00053 000054R         DEF *+1 
0106*041        IF L<1 THEN GOTO LG2
0107  00054 066004R         LDB L 
0108  00055 046006R         ADB .6
0109  00056 006020          SSB 
0110  00057 026121R         JMP LG2 
0111*042        CK.SM(BUF.,1)?[MSNO_7;RETURN] 
0112  00060 016006X         JSB CK.SM 







 PAGE 0004 #01


0113  00061 000064R         DEF *+3 
0114  00062 000003X         DEF BUF.
0115  00063 000007R         DEF .8
0116  00064 002041          SEZ,RSS 
0117  00065 026071R         JMP .7
0118  00066 062010R         LDA .9
0119  00067 172016R         STA MSNO,I
0120  00070 126017R         JMP MR..,I
0121*043        FLG_1 
0122  00071 002404  .7      CLA,INA 
0123  00072 072003R         STA FLG 
0124*044        WRLG.(BUF.,(BUF.-<8)) 
0125  00073 062003X         LDA BUF.
0126  00074 001727          ALF,ALF 
0127  00075 072001R         STA .3
0128  00076 016014X         JSB WRLG. 
0129  00077 000102R         DEF *+3 
0130  00100 000003X         DEF BUF.
0131  00101 000001R         DEF .3
0132*045        IFNOT($(D.AD(BUF.)+1) AND 160000K) = 120000K THEN\
0133*           GOTO LG1, ELSE[FLG_0;EFLG.(L);GO TO LG1]
0134  00102 016016X         JSB D.AD
0135  00103 000105R         DEF *+2 
0136  00104 000003X         DEF BUF.
0137  00105 002004          INA 
0138  00106 160000          LDA .A.,I 
0139  00107 012011R         AND .10 
0140  00110 052012R         CPA .11 
0141  00111 002001          RSS 
0142  00112 026043R         JMP LG1 
0143  00113 002400          CLA 
0144  00114 072003R         STA FLG 
0145  00115 016015X         JSB EFLG. 
0146  00116 000120R         DEF *+2 
0147  00117 000004R         DEF L 
0148  00120 026043R         JMP LG1 
0149*046  ! 
0150*047  LG2:  IF FLG THEN[MSS.(6);EXEC(7);GOTO LG1] 
0151  00121 062003R LG2     LDA FLG 
0152  00122 002003          SZA,RSS 
0153  00123 026133R         JMP .12 
0154  00124 016011X         JSB MSS.
0155  00125 000127R         DEF *+2 
0156  00126 000013R         DEF .13 
0157  00127 016012X         JSB EXEC
0158  00130 000132R         DEF *+2 
0159  00131 000010R         DEF .9
0160  00132 026043R         JMP LG1 
0161*048        IFNOT L THEN GO TO LG1
0162  00133 062004R .12     LDA L 
0163  00134 002003          SZA,RSS 
0164  00135 026043R         JMP LG1 
0165*049        RETURN
0166  00136 126017R         JMP MR..,I
0167*050        END 
0168*051        END 







 PAGE 0005 #01


0169                        END 
**  NO ERRORS*






















































$END ASMB     

*
--> Assemble fmp/29033-80010_Rev-A_4
ON,ASMB,99







 PAGE 0001


0001                ASMB,B,R,L,C
**  NO ERRORS*





























































 PAGE 0002 #01


0001                ASMB,B,R,L,C
0002  00000               NAM READ.,7 
0003                      ENT READ. 
0004                      EXT %READ,.ENTR 
0005* 
0006* 
0007*     READ.    IS AN INTERFACE ROUTINE TO CALL THE
0008*              READS ROUTINE FROM FORTRAN.
0009* 
0010*     THE CALL IS:
0011* 
0012*     CALL READ.(LU,BUF,RQLN,RTNLN) 
0013* 
0014*     W H E R E:
0015* 
0016*     LN       IS THE LOGICAL UNIT. 
0017*     BUF      IS THE USER'S BUFFER 
0018*     RQLN     IS THE REQUEST LENGTH IN WORDS.
0019*     RTNLN    IS THE RETURN LENGTH IN WORDS. 
0020* 
0021*     ON END OF FILE RTNLN IS SET TO -1.
0022* 
0023* 
0024  00000 000000  LU    NOP 
0025  00001 000000  BUF   NOP 
0026  00002 000000  LN    NOP 
0027  00003 000000  L     NOP 
0028  00004 000000  READ. NOP 
0029  00005 016002X       JSB .ENTR     GET PARAMETERS
0030  00006 000000R       DEF LU
0031  00007 162002R       LDA LN,I      SET LENGTH
0032  00010 003004        CMA,INA       TO NEGATIVE 
0033  00011 001000        ALS           CHARACTERS
0034  00012 072002R       STA LN        AND STORE 
0035  00013 016001X       JSB %READ     CALL READS ROUTINE
0036  00014 000021R       DEF *+5       NORMAL RETURN 
0037  00015 100000R       DEF LU,I      LU
0038  00016 100001R       DEF BUF,I     BUFFER
0039  00017 000002R       DEF LN        LENGTH
0040  00020 007401        CCB,RSS       EOF RETURN - SET TLOG TO -1 
0041  00021 006004        INB           NORMAL RETURN ROUND UP
0042  00022 005100        BRS           CONVERT TO WORDS
0043  00023 176003R       STB L,I       STORE IN USER AREA
0044  00024 126004R       JMP READ.,I   RETURN
0045                      END 
**  NO ERRORS*










$END ASMB     

*
--> Assemble fmp/29033-80010_Rev-A_5
ON,ASMB,99







 PAGE 0001


0001                ASMB,B,R,L,C
**  NO ERRORS*





























































 PAGE 0002 #01


0001                ASMB,B,R,L,C
0002  00000               NAM WRLG,7
0003                      ENT WRLG.,EFLG. 
0004                      EXT %WRIT,%WRIF,.ENTR 
0005* 
0006* 
0007*     PATCH TO CALL %WRIT & WRIF
0008* 
0009* 
0010  00000 000000  X     NOP 
0011  00001 000000        NOP 
0012  00002 000000  WRLG. NOP 
0013  00003 016003X       JSB .ENTR 
0014  00004 000000R       DEF X 
0015  00005 016001X       JSB %WRIT 
0016  00006 000011R       DEF *+3 
0017  00007 100000R       DEF X,I 
0018  00010 100001R       DEF X+1,I 
0019  00011 126002R       JMP WRLG.,I 



0021  00012 000000  EFLG. NOP 
0022  00013 016002X       JSB %WRIF 
0023  00014 162012R       LDA EFLG.,I 
0024  00015 124000        JMP A,I 
0025  00000         A     EQU 0 
0026  00001         B     EQU 1 
0027                      END 
**  NO ERRORS*


























$END ASMB     

*
--> Assemble fmp/29033-80011_Rev-A_1
ON,ASMB,99







 PAGE 0001


0001                ASMB,B,R,L,C
**  NO ERRORS*





























































 PAGE 0002 #01


0001                ASMB,B,R,L,C
0002  00000               NAM FMGR2,5 
0003                      EXT SEG.R,CAD.

0005  00000 062002R FMGR2 LDA TABL
0006  00001 026001X       JMP SEG.R 


0008  00002 000003R TABL  DEF *+1 

0010                      EXT IN.IT 
0011  00003 000003X       DEF IN.IT 
0012                      EXT IN..
0013  00004 000004X       DEF IN..
0014                      EXT MC..
0015  00005 000005X       DEF MC..
0016                      EXT RC..
0017  00006 000006X       DEF RC..
0018                      END FMGR2 
**  NO ERRORS*




































$END ASMB     

*
--> Assemble fmp/29033-80011_Rev-A_2
ON,ASMB,99







 PAGE 0001


0001                ASMB,B,X,L
**  NO ERRORS*





























































 PAGE 0002 #01


0001                ASMB,B,X,L
0002*001  SPL, L, M, O
0003*002        NAME IN.IT(8) 
0004  00000                 NAM IN.IT,8 
0005  00000         .A.     EQU  0
0006  00001         .B.     EQU  1
0007                        ENT IN.IT 
0008                        EXT .ENTR 
0009                        EXT .DRCT 
0010                        EXT OPEN. 
0011                        EXT D.RIO 
0012                        EXT MSS.
0013                        EXT TTY.
0014                        EXT PK.DR 
0015                        EXT D.SDR 
0016                        EXT FM.AB 
0017                        EXT INI1. 
0018                        EXT TMP.
0019                        EXT .E.R. 
0020                        EXT CAM.I 
0021                        EXT CAM.O 
0022                        EXT D.LT
0023                        EXT EXEC
0024                        EXT IPUT
0025                        EXT FID.
0026                        EXT .TTY
0027                        EXT IFLG. 
0028                        EXT D.
0029  00000 000000  ADD     BSS 1 
0030  00001 001717  .1      OCT 001717
0031  00002 000000  T1      BSS 1 
0032  00003 000000  T       BSS 1 
0033  00004 000000  .3      BSS 1 
0034  00005 000001  .4      OCT 000001
0035  00006 000000  .5      OCT 000000
0036  00007 000005  .7      OCT 000005
0037  00010 000003  .10     OCT 000003
0038  00011 177775  .11     OCT 177775
0039  00012 000002  .12     OCT 000002
0040  00013 000000  .13     BSS 1 
0041  00014 000401  .14     OCT 000401
0042  00015 000010  .15     OCT 000010
0043  00016 000000  PKDR    BSS 1 
0044  00017 000000  Y       BSS 1 
0045  00020 001657  .16     OCT 001657
0046  00021 000000  D.RTR   BSS 1 
0047  00022 000014  .19     OCT 000014
0048  00023 000015  .20     OCT 000015
0049  00024 051124  .21     OCT 051124
0050  00025 000016  .22     OCT 000016
0051  00026 177400  .23     OCT 177400
0052  00027 051000  .24     OCT 051000
0053  00030 001755  .26     OCT 001755
0054  00031 177777  .27     OCT 177777
0055  00032 003730  .28     OCT 003730
0056  00033 001656  .29     OCT 001656







 PAGE 0003 #01


0057  00034 001756  .30     OCT 001756
0058  00035 000000  .38     OCT 000000
0059  00036 000000          OCT 000000
0060  00037 000410  .39     OCT 000410
0061  00040 000000  KSUM    BSS 1 
0062  00041 001650  .43     OCT 001650
0063  00042 176120  .44     OCT 176120
0064  00043 001742  .48     OCT 001742
0065  00044 176013  .49     OCT 176013
0066  00045 000000  GENWD   BSS 1 
0067  00046 000175  .50     OCT 000175
0068  00047 000000  LU      BSS 1 
0069  00050 000000  I       BSS 1 
0070  00051 177776  .53     OCT 177776
0071  00052 000004  .55     OCT 000004
0072  00053 000000  .57     BSS 1 
0073  00054 000007  .59     OCT 000007
0074  00055 077776  .60     OCT 077776
0075  00056 000000  .62     BSS 1 
0076  00057 000006  .65     OCT 000006
0077  00060 157777  .68     OCT 157777
0078  00061 000000  MS      BSS 1 
0079  00062 160000  .75     OCT 160000
0080  00063 000000  .79     BSS 1 
0081*003        LET OPEN.,D.RIO,DR.RD,            CLOS.,MSS.,\
0082*           EE..      BE SUBROUTINE,EXTERNAL
0083*004        LET TATPU    BE SUBROUTINE
0084*005        LET TTY.               BE INTEGER,EXTERNAL
0085*006        LET PK.DR,D.SDR                  BE INTEGER,EXTERNAL
0086*007        LET FM.AB     BE LABEL,EXTERNAL 
0087*008        LET INI1.   BE LABEL,EXTERNAL 
0088*009        LET TMP.,.E.R.                   BE INTEGER,EXTERNAL
0089*010        LET CAM.I,CAM.O,D.LT             BE INTEGER,EXTERNAL
0090*011         LET  EXEC,IPUT      BE SUBROUTINE,EXTERNAL 
0091*012        LET FID. BE FUNCTION,EXTERNAL 
0092*013        LET .TTY               BE FUNCTION,EXTERNAL 
0093*014        LET FM.AB    BE LABEL,EXTERNAL
0094*015        LET IFLG.              BE INTEGER,EXTERNAL
0095*016        LET D.        BE INTEGER,EXTERNAL 
0096*017        LET RT                  BE CONSTANT(51124K) 
0097*018        LET RNULL               BE CONSTANT(51000K) 
0098*019        LET A                   BE CONSTANT(0    )
0099*020         LET B                  BE CONSTANT(1    )
0100*021         LET READI              BE CONSTANT(1    )
0101*022        LET TAT                 BE CONSTANT(1656K)
0102*023        LET TATLG               BE CONSTANT(1755K)
0103*024        LET TATSD               BE CONSTANT(1756K)
0104*025        LET XEQT                BE CONSTANT(1717K)
0105*026         LET WRIT               BE CONSTANT(2    )
0106*027        LET KEYWD               BE CONSTANT(1657K)
0107*028        LET BPA1                BE CONSTANT(1742K)
0108*029        LET DSCUN               BE CONSTANT(1764K)
0109*030        LET SYSTY               BE CONSTANT(1     ) 
0110*031        LET EQTA       BE CONSTANT(1650K) 
0111*032  IN.IT:SUBROUTINE GLOBAL 
0112  00064 000000  IN.IT   NOP 







 PAGE 0004 #01


0113  00065 016001X         JSB .ENTR 
0114  00066 000064R         DEF IN.IT 
0115*033        IF IFLG. THEN GO TO INITL  !MID LOOP JUMP 
0116  00067 062024X         LDA IFLG. 
0117  00070 002002          SZA 
0118  00071 026150R         JMP INITL 
0119*034  ! 
0120*035  !     SAVE THE PARAMETERS 
0121*036  ! 
0122*037        ADD_$XEQT+1  ! SET PARAMETER ADDRESS
0123  00072 162001R         LDA .1,I
0124  00073 002004          INA 
0125  00074 072000R         STA ADD 
0126*038        T1,T_@TMP.!SET UP AND GET THE PRAMS 
0127  00075 016002X         JSB .DRCT 
0128  00076 000013X         DEF TMP.
0129  00077 072002R         STA T1
0130  00100 072003R         STA T 
0131*039         REPEAT 5 TIMES DO[$T_$ADD;T_T+1;ADD_ADD+1] 
0132  00101 062007R         LDA .7
0133  00102 072004R         STA .3
0134  00103 003400  .2      CCA 
0135  00104 042004R         ADA .3
0136  00105 072004R         STA .3
0137  00106 066004R         LDB .3
0138  00107 006020          SSB 
0139  00110 026122R         JMP .6
0140  00111 162000R         LDA ADD,I 
0141  00112 172003R         STA T,I 
0142  00113 062003R         LDA T 
0143  00114 002004          INA 
0144  00115 072003R         STA T 
0145  00116 062000R         LDA ADD 
0146  00117 002004          INA 
0147  00120 072000R         STA ADD 
0148  00121 026103R         JMP .2
0149*040        $(@.E.R.+1)_[IF [T_$(T1+3)]<3 THEN T,ELSE 2]
0150  00122 062002R .6      LDA T1
0151  00123 042010R         ADA .10 
0152  00124 160000          LDA .A.,I 
0153  00125 072003R         STA T 
0154  00126 042011R         ADA .11 
0155  00127 002021          SSA,RSS 
0156  00130 026133R         JMP .8
0157  00131 062003R         LDA T 
0158  00132 026134R         JMP .9
0159  00133 062012R .8      LDA .12 
0160  00134 072013R .9      STA .13 
0161  00135 016002X         JSB .DRCT 
0162  00136 000014X         DEF .E.R. 
0163  00137 002004          INA 
0164  00140 066013R         LDB .13 
0165  00141 174000          STB .A.,I 
0166*041        CAM.O_401K  !SET OUT PUT LU FOR ERRORS
0167  00142 062014R         LDA .14 
0168  00143 072016X         STA CAM.O 







 PAGE 0005 #01


0169*042        $(T1+8)_0 
0170  00144 062002R         LDA T1
0171  00145 042015R         ADA .15 
0172  00146 006400          CLB 
0173  00147 174000          STB .A.,I 
0174*043  INITL:PKDR_@PK.DR 
0175  00150 016002X INITL   JSB .DRCT 
0176  00151 000007X         DEF PK.DR 
0177  00152 072016R         STA PKDR
0178*044  ! 
0179*045  !     IS THE DIRECTORY TRACK ASSIGNED TO D.RTR? 
0180*046  ! 
0181*047        Y_$KEYWD      !SET UP TO SEARCH THE ID SEGS 
0182  00153 162020R         LDA .16,I 
0183  00154 072017R         STA Y 
0184*048  NEXT: D.RTR_$Y     !SET CURRENT ADDRESS 
0185  00155 162017R NEXT    LDA Y,I 
0186  00156 072021R         STA D.RTR 
0187*049        IF $(D.RTR+12)=D. THEN[\  !CHECK FOR D.RTR
0188*          IF $(D.RTR+13)=RT THEN[\ 
0189*              IF($(D.RTR+14) AND 177400K)=RNULL\ 
0190*                   THEN GO TO FOUND ]] 
0191  00157 042022R         ADA .19 
0192  00160 160000          LDA .A.,I 
0193  00161 052025X         CPA D.
0194  00162 002001          RSS 
0195  00163 026200R         JMP .18 
0196  00164 062021R         LDA D.RTR 
0197  00165 042023R         ADA .20 
0198  00166 160000          LDA .A.,I 
0199  00167 052024R         CPA .21 
0200  00170 002001          RSS 
0201  00171 026200R         JMP .18 
0202  00172 062021R         LDA D.RTR 
0203  00173 042025R         ADA .22 
0204  00174 160000          LDA .A.,I 
0205  00175 012026R         AND .23 
0206  00176 052027R         CPA .24 
0207  00177 026222R         JMP FOUND 
0208*050        IF $[Y_Y+1] THEN GO TO NEXT ! CHECK FOR NEXT ID SEG 
0209  00200 062017R .18     LDA Y 
0210  00201 002004          INA 
0211  00202 072017R         STA Y 
0212  00203 160000          LDA .A.,I 
0213  00204 002002          SZA 
0214  00205 026155R         JMP NEXT
0215*051         IF $TATLG= -1 THEN IPUT(TATLG,TMP.)
0216  00206 166030R         LDB .26,I 
0217  00207 056031R         CPB .27 
0218  00210 002001          RSS 
0219  00211 026216R         JMP .25 
0220  00212 016021X         JSB IPUT
0221  00213 000216R         DEF *+3 
0222  00214 000030R         DEF .26 
0223  00215 000013X         DEF TMP.
0224*052        MSS.(2008)     ! D.RTR NOT FOUND  GIVE UP 







 PAGE 0006 #01


0225  00216 016005X .25     JSB MSS.
0226  00217 000221R         DEF *+2 
0227  00220 000032R         DEF .28 
0228*053        GO TO EXITA   !TERMIMATE
0229  00221 026505R         JMP EXITA 
0230*054  ! 
0231*055  FOUND:IF  $($TAT+$TATSD-1)=D.RTR\  !TRACK ASSIGNED TO D.RTR?? 
0232*           THEN GO TO PLIST   !YES GO TO PLIST 
0233  00222 162033R FOUND   LDA .29,I 
0234  00223 142034R         ADA .30,I 
0235  00224 007400          CCB 
0236  00225 044000          ADB .A. 
0237  00226 164001          LDB .B.,I 
0238  00227 056021R         CPB D.RTR 
0239  00230 026514R         JMP PLIST 
0240*056  ! 
0241*057  !     FIRST ENTRY AFTER DISC LOAD SO ASSIGN ALL TRACKS TO ME
0242*058  ! 
0243*059         T_$TAT-[IF $TATLG= -1 THEN $@TMP.,ELSE $TATLG] 
0244  00231 166030R         LDB .26,I 
0245  00232 056031R         CPB .27 
0246  00233 002001          RSS 
0247  00234 026241R         JMP .31 
0248  00235 016002X         JSB .DRCT 
0249  00236 000013X         DEF TMP.
0250  00237 160000          LDA .A.,I 
0251  00240 026242R         JMP .32 
0252  00241 162030R .31     LDA .26,I 
0253  00242 003004  .32     CMA,INA 
0254  00243 142033R         ADA .29,I 
0255  00244 072003R         STA T 
0256*060  ! 
0257*061        FOR ADD_$TAT TO T DO[IFNOT $ADD THEN\  ASSIGN 
0258*           IPUT(ADD,$XEQT)] !ALL UNASSIGNED TRACKS 
0259  00245 162033R         LDA .29,I 
0260  00246 072000R         STA ADD 
0261  00247 026253R         JMP .34 
0262  00250 062000R .33     LDA ADD 
0263  00251 002004          INA 
0264  00252 072000R         STA ADD 
0265  00253 066000R .34     LDB ADD 
0266  00254 007004          CMB,INB 
0267  00255 046003R         ADB T 
0268  00256 006020          SSB 
0269  00257 026270R         JMP .35 
0270  00260 162000R         LDA ADD,I 
0271  00261 002002          SZA 
0272  00262 026267R         JMP .36 
0273  00263 016021X         JSB IPUT
0274  00264 000267R         DEF *+3 
0275  00265 000000R         DEF ADD 
0276  00266 100001R         DEF .1,I
0277  00267 026250R .36     JMP .33 
0278*062  !     ALL TRACKS ASSIGNED SO IF TATLG IS -1 
0279*063  !       RESET IT
0280*064  ! 







 PAGE 0007 #01


0281*065         IF $TATLG= -1 THEN IPUT(TATLG,TMP.)
0282  00270 166030R .35     LDB .26,I 
0283  00271 056031R         CPB .27 
0284  00272 002001          RSS 
0285  00273 026300R         JMP .37 
0286  00274 016021X         JSB IPUT
0287  00275 000300R         DEF *+3 
0288  00276 000030R         DEF .26 
0289  00277 000013X         DEF TMP.
0290*066  ! 
0291*067  !     READ THE DISC DIRECTORY 
0292*068  ! 
0293*069         D.RIO(READI) 
0294  00300 016004X .37     JSB D.RIO 
0295  00301 000303R         DEF *+2 
0296  00302 000005R         DEF .4
0297*070        OPEN.(CAM.I,SYSTY,0.0,410K)   !OPEN TO SYSTY
0298  00303 016003X         JSB OPEN. 
0299  00304 000311R         DEF *+5 
0300  00305 000015X         DEF CAM.I 
0301  00306 000005R         DEF .4
0302  00307 000035R         DEF .38 
0303  00310 000037R         DEF .39 
0304*071  ! 
0305*072  !     FORM THE KEY SUM
0306*073  ! 
0307*074  ! 
0308*075        KSUM_0
0309  00311 002400          CLA 
0310  00312 072040R         STA KSUM
0311*076         FOR ADD_EQTA TO KEYWD DO[KSUM_KSUM+$ADD] 
0312  00313 062041R         LDA .43 
0313  00314 072000R         STA ADD 
0314  00315 026321R         JMP .41 
0315  00316 062000R .40     LDA ADD 
0316  00317 002004          INA 
0317  00320 072000R         STA ADD 
0318  00321 066000R .41     LDB ADD 
0319  00322 046042R         ADB .44 
0320  00323 006021          SSB,RSS 
0321  00324 026331R         JMP .42 
0322  00325 062040R         LDA KSUM
0323  00326 142000R         ADA ADD,I 
0324  00327 072040R         STA KSUM
0325  00330 026316R         JMP .40 
0326*077        FOR ADD_BPA1 TO DSCUN DO[KSUM_KSUM+$ADD]
0327  00331 062043R .42     LDA .48 
0328  00332 072000R         STA ADD 
0329  00333 026337R         JMP .46 
0330  00334 062000R .45     LDA ADD 
0331  00335 002004          INA 
0332  00336 072000R         STA ADD 
0333  00337 066000R .46     LDB ADD 
0334  00340 046044R         ADB .49 
0335  00341 006021          SSB,RSS 
0336  00342 026347R         JMP .47 







 PAGE 0008 #01


0337  00343 062040R         LDA KSUM
0338  00344 142000R         ADA ADD,I 
0339  00345 072040R         STA KSUM
0340  00346 026334R         JMP .45 
0341*078        GENWD_@D.SDR+125
0342  00347 016002X .47     JSB .DRCT 
0343  00350 000010X         DEF D.SDR 
0344  00351 042046R         ADA .50 
0345  00352 072045R         STA GENWD 
0346*079        IF IFLG. THEN GO TO INCH !IF MID OPERATION GO CHECK 
0347  00353 062024X         LDA IFLG. 
0348  00354 002002          SZA 
0349  00355 026364R         JMP INCH
0350*080  ! 
0351*081  !     WAS A SYSTEM SET UP ON THIS DISC? 
0352*082  ! 
0353*083        IF KSUM=$GENWD THEN GO TO TATUP !INITILIZED  GO  SET UP 
0354  00356 066040R         LDB KSUM
0355  00357 156045R         CPB GENWD,I 
0356  00360 026407R         JMP TATUP 
0357*084  ! 
0358*085  !     NO-FIRST ENTRY- 
0359*086  !     SET INITIALIZATION FLAGS ETC. 
0360*087  ! 
0361*088  INIT0:IFLG._2        !SET UP FOR LU 2 
0362  00361 062012R INIT0   LDA .12 
0363  00362 072024X         STA IFLG. 
0364*089  ! 
0365*090  ! 
0366*091  INIT1:GO TO INI1.   ! GO TO MAIN TO CONTINUE
0367  00363 026012X INIT1   JMP INI1. 
0368*092  ! 
0369*093  INCH: IF IFLG.=2 THEN[\ 
0370*                             IF $TATLG+$TATSD THEN[ \
0371*                             IFLG._3;GOTO INIT1]]
0372  00364 066024X INCH    LDB IFLG. 
0373  00365 056012R         CPB .12 
0374  00366 002001          RSS 
0375  00367 026377R         JMP .52 
0376  00370 162030R         LDA .26,I 
0377  00371 142034R         ADA .30,I 
0378  00372 002003          SZA,RSS 
0379  00373 026377R         JMP .52 
0380  00374 062010R         LDA .10 
0381  00375 072024X         STA IFLG. 
0382  00376 026363R         JMP INIT1 
0383*094  ! 
0384*095  !     INITIALIZED - SET UP THE DISC DIRECTORY 
0385*096  ! 
0386*097         D.RIO(READI)  ! READ THE DISC DIRECTORY
0387  00377 016004X .52     JSB D.RIO 
0388  00400 000402R         DEF *+2 
0389  00401 000005R         DEF .4
0390*098        $GENWD_KSUM  !  SET THE KEYSUM
0391  00402 062040R         LDA KSUM
0392  00403 172045R         STA GENWD,I 







 PAGE 0009 #01


0393*099         D.RIO(WRIT)  !  WRITE IT OUT AGAIN 
0394  00404 016004X         JSB D.RIO 
0395  00405 000407R         DEF *+2 
0396  00406 000012R         DEF .12 
0397*100  ! 
0398*101  !     SET UP THE TRACK ASSIGNMENT TABLE 
0399*102  ! 
0400*103  ! 
0401*104  !     SET UP THE TAT USING THE DISC DIRECTORIES TO
0402*105  !     FIND WHICH TRACKS ARE TO BE ASSIGNED
0403*106  ! 
0404*107  TATUP:DO[LU_-2;I_0]!LU2 FIRST 
0405  00407 062051R TATUP   LDA .53 
0406  00410 072047R         STA LU
0407  00411 002400          CLA 
0408  00412 072050R         STA I 
0409*108  TATU1:IF FID.(LU)THEN [IF LU= -2 THEN GO TO INIT0,ELSE GO TO E
0410  00413 016022X TATU1   JSB FID.
0411  00414 000416R         DEF *+2 
0412  00415 000047R         DEF LU
0413  00416 002003          SZA,RSS 
0414  00417 026425R         JMP .54 
0415  00420 066047R         LDB LU
0416  00421 056051R         CPB .53 
0417  00422 002001          RSS 
0418  00423 026505R         JMP EXITA 
0419  00424 026361R         JMP INIT0 
0420*109          ADD_[T_$( PKDR +4)]+$TAT+I  !SET TAT ADDRESS
0421  00425 062016R .54     LDA PKDR
0422  00426 042052R         ADA .55 
0423  00427 160000          LDA .A.,I 
0424  00430 072003R         STA T 
0425  00431 142033R         ADA .29,I 
0426  00432 042050R         ADA I 
0427  00433 072000R         STA ADD 
0428*110            REPEAT $( PKDR +7)-T TIMES DO \ SET TAT 
0429*              TATPU(77776K)     !FMP TRACKS
0430  00434 062016R         LDA PKDR
0431  00435 042054R         ADA .59 
0432  00436 160000          LDA .A.,I 
0433  00437 003004          CMA,INA 
0434  00440 042003R         ADA T 
0435  00441 003004          CMA,INA 
0436  00442 072053R         STA .57 
0437  00443 003400  .56     CCA 
0438  00444 042053R         ADA .57 
0439  00445 072053R         STA .57 
0440  00446 066053R         LDB .57 
0441  00447 006020          SSB 
0442  00450 026455R         JMP .58 
0443  00451 016620R         JSB TATPU 
0444  00452 000454R         DEF *+2 
0445  00453 000055R         DEF .60 
0446  00454 026443R         JMP .56 
0447*111           REPEAT -$( PKDR +8) TIMES DO \ SET TAT 
0448*           TATPU( D.RTR)     !DIRECTORY TRACKS 







 PAGE 0010 #01


0449  00455 062016R .58     LDA PKDR
0450  00456 042015R         ADA .15 
0451  00457 160000          LDA .A.,I 
0452  00460 003004          CMA,INA 
0453  00461 072056R         STA .62 
0454  00462 003400  .61     CCA 
0455  00463 042056R         ADA .62 
0456  00464 072056R         STA .62 
0457  00465 066056R         LDB .62 
0458  00466 006020          SSB 
0459  00467 026474R         JMP .63 
0460  00470 016620R         JSB TATPU 
0461  00471 000473R         DEF *+2 
0462  00472 000021R         DEF D.RTR 
0463  00473 026462R         JMP .61 
0464*112  ! 
0465*113         IF LU= -2 THEN [LU_-3;I_$TATSD;GOTO TATU1] 
0466  00474 066047R .63     LDB LU
0467  00475 056051R         CPB .53 
0468  00476 002001          RSS 
0469  00477 026505R         JMP EXITA 
0470  00500 062011R         LDA .11 
0471  00501 072047R         STA LU
0472  00502 162034R         LDA .30,I 
0473  00503 072050R         STA I 
0474  00504 026413R         JMP TATU1 
0475*114  ! 
0476*115  !     TAT IS SET UP - RELEASE ALL UNUSED TRACKS 
0477*116  ! 
0478*117  EXITA:EXEC(5,-1)
0479  00505 016020X EXITA   JSB EXEC
0480  00506 000511R         DEF *+3 
0481  00507 000007R         DEF .7
0482  00510 000031R         DEF .27 
0483*118  ! 
0484*119        EXEC(6)      !RETURN TO SYSTEM
0485  00511 016020X         JSB EXEC
0486  00512 000514R         DEF *+2 
0487  00513 000057R         DEF .65 
0488*120  ! 
0489*121  PLIST:IFNOT TMP. THEN TMP._1
0490  00514 062013X PLIST   LDA TMP.
0491  00515 002002          SZA 
0492  00516 026521R         JMP .66 
0493  00517 002404          CLA,INA 
0494  00520 072013X         STA TMP.
0495*122        IF TMP.>20000K THEN[\ 
0496*          CAM.O_$(T1+4);TTY._0;GO TO PLIS1]
0497  00521 066013X .66     LDB TMP.
0498  00522 046060R         ADB .68 
0499  00523 006020          SSB 
0500  00524 026534R         JMP .67 
0501  00525 062002R         LDA T1
0502  00526 042052R         ADA .55 
0503  00527 160000          LDA .A.,I 
0504  00530 072016X         STA CAM.O 







 PAGE 0011 #01


0505  00531 002400          CLA 
0506  00532 072006X         STA TTY.
0507  00533 026544R         JMP PLIS1 
0508*123        TTY._.TTY(TMP.)  !CHECK IF DEVICE IS A TTY
0509  00534 016023X .67     JSB .TTY
0510  00535 000537R         DEF *+2 
0511  00536 000013X         DEF TMP.
0512  00537 072006X         STA TTY.
0513*124  ! 
0514*125        CAM.O_$(T1+1) 
0515  00540 062002R         LDA T1
0516  00541 002004          INA 
0517  00542 160000          LDA .A.,I 
0518  00543 072016X         STA CAM.O 
0519*126  PLIS1:   MS_[IF TTY. THEN TMP.,ELSE SYSTY]  !SET LOG LU 
0520  00544 062006X PLIS1   LDA TTY.
0521  00545 002003          SZA,RSS 
0522  00546 026551R         JMP .69 
0523  00547 062013X         LDA TMP.
0524  00550 026552R         JMP .70 
0525  00551 062005R .69     LDA .4
0526  00552 072061R .70     STA MS
0527*127        IFNOT CAM.O THEN CAM.O_MS 
0528  00553 062016X         LDA CAM.O 
0529  00554 002002          SZA 
0530  00555 026560R         JMP .71 
0531  00556 062061R         LDA MS
0532  00557 072016X         STA CAM.O 
0533*128  ! 
0534*129        IFNOT .TTY(CAM.O)THEN CAM.O_MS    !RESET LOG IF NOT A TT
0535  00560 016023X .71     JSB .TTY
0536  00561 000563R         DEF *+2 
0537  00562 000016X         DEF CAM.O 
0538  00563 002002          SZA 
0539  00564 026567R         JMP .72 
0540  00565 062061R         LDA MS
0541  00566 072016X         STA CAM.O 
0542*130        OPEN.(CAM.I,TMP.,0.0,410K) ! OPEN INPUT DEVICE
0543  00567 016003X .72     JSB OPEN. 
0544  00570 000575R         DEF *+5 
0545  00571 000015X         DEF CAM.I 
0546  00572 000013X         DEF TMP.
0547  00573 000035R         DEF .38 
0548  00574 000037R         DEF .39 
0549*131  ! 
0550*132        TMP._[IF (TMP.<20000K) AND (NOT [T_$(T1+2)]) THEN 6,ELSE
0551  00575 066013X         LDB TMP.
0552  00576 046062R         ADB .75 
0553  00577 062002R         LDA T1
0554  00600 042012R         ADA .12 
0555  00601 160000          LDA .A.,I 
0556  00602 072003R         STA T 
0557  00603 003000          CMA 
0558  00604 006021          SSB,RSS 
0559  00605 006401          CLB,RSS 
0560  00606 007400          CCB 







 PAGE 0012 #01


0561  00607 010001          AND .B. 
0562  00610 002003          SZA,RSS 
0563  00611 026614R         JMP .73 
0564  00612 062057R         LDA .65 
0565  00613 026615R         JMP .74 
0566  00614 062003R .73     LDA T 
0567  00615 072013X .74     STA TMP.
0568*133  ! 
0569*134        GO TO FM.AB 
0570  00616 026011X         JMP FM.AB 
0571*135        END 
0572*136  ! 
0573*137  TATPU:SUBROUTINE(ID)
0574  00617 000000  ID      NOP 
0575  00620 000000  TATPU   NOP 
0576  00621 016001X         JSB .ENTR 
0577  00622 000617R         DEF ID
0578*138        IF $ADD#ID     THEN[IF $ADD#$XEQT THEN MSS.(1005,ADD-$TA
0579*           , ELSE IPUT(ADD,ID)]
0580  00623 166000R         LDB ADD,I 
0581  00624 156617R         CPB ID,I
0582  00625 026646R         JMP .78 
0583  00626 166000R         LDB ADD,I 
0584  00627 156001R         CPB .1,I
0585  00630 026642R         JMP .76 
0586  00631 162033R         LDA .29,I 
0587  00632 003004          CMA,INA 
0588  00633 042000R         ADA ADD 
0589  00634 072063R         STA .79 
0590  00635 016005X         JSB MSS.
0591  00636 000641R         DEF *+3 
0592  00637 000030R         DEF .26 
0593  00640 000063R         DEF .79 
0594  00641 026646R         JMP .78 
0595  00642 016021X .76     JSB IPUT
0596  00643 000646R         DEF *+3 
0597  00644 000000R         DEF ADD 
0598  00645 100617R         DEF ID,I
0599*139        ADD_ADD+1 !SEND ERROR MESSAGE 
0600  00646 062000R .78     LDA ADD 
0601  00647 002004          INA 
0602  00650 072000R         STA ADD 
0603*140        RETURN
0604  00651 126620R         JMP TATPU,I 
0605*141        END 
0606*142        END 
0607                        END 
**  NO ERRORS*








$END ASMB     

*
--> Assemble fmp/29033-80012_Rev-A
ON,ASMB,99







 PAGE 0001


0001                ASMB,B,X,L  
**  NO ERRORS*





























































 PAGE 0002 #01


0001                ASMB,B,X,L  
0002*001  SPL, L, M, O  
0003*002        NAME IN..(8)
0004  00000                 NAM IN..,8
0005  00000         .A.     EQU  0
0006  00001         .B.     EQU  1
0007                        ENT IN..
0008                        EXT .ENTR 
0009                        EXT .MPY
0010                        EXT .DIV
0011                        EXT .DRCT 
0012                        EXT DR.RD 
0013                        EXT D.RIO 
0014                        EXT MSS.
0015                        EXT NAM.. 
0016                        EXT EXEC
0017                        EXT J.PUT 
0018                        EXT IPUT
0019                        EXT PK.DR 
0020                        EXT D.SDR 
0021                        EXT IFLG. 
0022                        EXT D.LT
0023                        EXT D.LB
0024                        EXT C.BUF 
0025                        EXT DS.DF 
0026                        EXT D.
0027                        EXT DS.LU 
0028                        EXT .E.R. 
0029                        EXT CAM.O 
0030                        EXT NO.RD 
0031                        EXT LOCK. 
0032                        EXT FID.
0033                        EXT MSC.
0034  00000 000000  DDIR    BSS 1 
0035  00001 000000  PDIR2   BSS 1 
0036  00002 000000  PDIR1   BSS 1 
0037  00003 000000  PDIR    BSS 1 
0038  00004 000000  PDIR9   BSS 1 
0039  00005 000000  PDIR8   BSS 1 
0040  00006 000000  PDIR7   BSS 1 
0041  00007 000000  PDIR6   BSS 1 
0042  00010 000000  PDIR5   BSS 1 
0043  00011 000000  PDIR4   BSS 1 
0044  00012 000000  PDIR3   BSS 1 
0045  00013 000000  LIS29   BSS 1 
0046  00014 000000  LIS21   BSS 1 
0047  00015 000000  LIS17   BSS 1 
0048  00016 000000  LIS13   BSS 1 
0049  00017 000000  LIST9   BSS 1 
0050  00020 000000  LIST5   BSS 1 
0051  00021 000005  #1      OCT 000005
0052  00022 000004  #2      OCT 000004
0053  00023 000010  #3      OCT 000010
0054  00024 177774  #4      OCT 177774
0055  00025 000001  #5      OCT 000001
0056  00026 000002  #6      OCT 000002







 PAGE 0003 #01


0057  00027 026455  #7      OCT 026455
0058  00030 000000  T       BSS 1 
0059  00031 000003  #10     OCT 000003
0060  00032 077400  #11     OCT 077400
0061  00033 020000  #12     OCT 020000
0062  00034 000000  #13     OCT 000000
0063  00035 000176  #14     OCT 000176
0064  00036 000065  #15     OCT 000065
0065  00037 000062  #16     OCT 000062
0066  00040 000064  #20     OCT 000064
0067  00041 000000  LIS9    BSS 1 
0068  00042 000014  #22     OCT 000014
0069  00043 000000  AREG    BSS 1 
0070  00044 177762  #26     OCT 177762
0071  00045 000000  #27     BSS 1 
0072  00046 000000  #28     BSS 1 
0073  00047 177603  #35     OCT 177603
0074  00050 000000  LTR     BSS 1 
0075  00051 001756  #38     OCT 001756
0076  00052 001755  #39     OCT 001755
0077  00053 000066  #41     OCT 000066
0078  00054 000000  T1      BSS 1 
0079  00055 000000  T2      BSS 1 
0080  00056 000000  T3      BSS 1 
0081  00057 000015  #43     OCT 000015
0082  00060 000077  #44     OCT 000077
0083  00061 000031  #45     OCT 000031
0084  00062 001757  #49     OCT 001757
0085  00063 001760  #50     OCT 001760
0086  00064 000000  NEW     BSS 1 
0087  00065 000000  TN      BSS 1 
0088  00066 000000  FTR     BSS 1 
0089  00067 000000  ND      BSS 1 
0090  00070 000000  LIS49   BSS 1 
0091  00071 000024  #51     OCT 000024
0092  00072 000006  #59     OCT 000006
0093  00073 000000  SWP     BSS 1 
0094  00074 000000  LAST    BSS 1 
0095  00075 000000  DLB     BSS 1 
0096  00076 000000  TX      BSS 1 
0097  00077 000000  ENDBL   BSS 1 
0098  00100 177777  #67     OCT 177777
0099  00101 001656  #69     OCT 001656
0100  00102 100000  #71     OCT 100000
0101  00103 000016  #72     OCT 000016
0102  00104 000017  #73     OCT 000017
0103  00105 000012  #78     OCT 000012
0104  00106 177760  #79     OCT 177760
0105  00107 000023  #80     OCT 000023
0106  00110 000020  #85     OCT 000020
0107  00111 177600  #86     OCT 177600
0108  00112 000000  BL      BSS 1 
0109  00113 000074  #92     OCT 000074
0110  00114 035137  #93     OCT 035137
0111  00115 000400  #94     OCT 000400
0112  00116 000044  #95     OCT 000044







 PAGE 0004 #01


0113  00117 000000  LN      BSS 1 
0114  00120 037477  #96     OCT 037477
0115  00121 054505  #99     OCT 054505
0116  00122 047117  #100    OCT 047117
0117  00123 000070  #101    OCT 000070
0118  00124 000067  #102    OCT 000067
0119  00125 000071  #103    OCT 000071
0120  00126 000063  #104    OCT 000063
0121  00127 000000  ADD     BSS 1 
0122  00130 077776  #109    OCT 077776
0123  00131 001717  #110    OCT 001717
0124  00132 000000  JER     BSS 1 
0125  00133 000000  X       BSS 1 
0126  00134 002043  #124    OCT 002043
0127*003  ! 
0128*004  !     IN.. IS THE RTE FILE MANAGER ACTION ROUTINE 
0129*005  !     FOR THE IN DIRECTIVE. 
0130*006  ! 
0131*007  !     THE IN DIRECTIVE HAS THE FORM:
0132*008  ! 
0133*009  !     IN,MSC,CR,LABEL,ILAB,#FT,#DTR,#SEC/TR,BTL 
0134*010  !PARAMETER 1  5   9    13   17   21    25    29 
0135*011  ! 
0136*012  !     OR
0137*013  ! 
0138*014  !     IN,MSC--NMSC
0139*015  ! 
0140*016  !     W H E R E:
0141*017  ! 
0142*018  !     MSC          IS THE TWO CHARACTER MASTER SECURITY CODE
0143*019  ! 
0144*020  !     CR           IS EITHER THE CARTRIDGE LABEL(+) OR ITS
0145*021  !                  LOGICAL UNIT(-)   (MUST BE NUMERIC)
0146*022  ! 
0147*023  !     LABEL        IS THE NEW CARTRIDGE LABEL (MUST BE NUMERIC
0148*024  ! 
0149*025  !     ILAB         IS THE CARTRIDGE INFORMATION LABEL (MUST BE
0150*026  ! 
0151*027  !     #FT          IS THE FIRST FMP TRACK.
0152*028  ! 
0153*029  !     #DTR         IS THE NUMBER OF DIRECTORY TRACK 
0154*030  !                  (NULL (SET TO 1) OR NUMERIC) 
0155*031  ! 
0156*032  !     #SEC/TR      IS THE NUMBER OF 64 WORD SECTORS 
0157*033  !                  PER TRACK (NUMERIC (MAY BE NULL FOR LU2 AND
0158*034  ! 
0159*035  !     BTL          IS A BAD TRACK LIST - UP TO 6 BAD TRACK NUM
0160*036  ! 
0161*037  !     NMSC         IS A NEW MASTER SECURITY CODE. 
0162*038  ! 
0163*039  !     THE MASTER SECURITY CODE IS SET WHEN LU2 IS FIRST 
0164*040  !     INITIALIZED AND MUST MATCH THEREAFTER.
0165*041  ! 
0166*042        LET DR.RD,D.RIO,MSS.,NAM..,READC,EXEC \ 
0167*       ,READF,WRITF \
0168*       ,J.PUT,IPUT,.PARS\







 PAGE 0005 #01


0169*                    BE SUBROUTINE,EXTERNAL 
0170*043        LET PK.DR,D.SDR,IFLG.,D.LT,D.LB,C.BUF, \
0171*       DS.DF,  \ 
0172*       D.,DS.LU,.E.R.     BE INTEGER,EXTERNAL
0173*044        LET CAM.O,NO.RD,.E.R.   BE INTEGER,EXTERNAL 
0174*045        LET PDIRS     BE SUBROUTINE 
0175*046        LET PTST,GT BE SUBROUTINE 
0176*047        LET BADTR  BE SUBROUTINE
0177*048        LET LOCK.     BE SUBROUTINE,EXTERNAL
0178*049        LET FID.     BE FUNCTION,EXTERNAL 
0179*050        LET MSC.     BE FUNCTION,EXTERNAL 
0180*051  ! 
0181*052  !     CONSTANTS 
0182*053  ! 
0183*054        LET YE       BE CONSTANT(54505K)
0184*055        LET NO       BE CONSTANT(47117K)
0185*056        LET A        BE CONSTANT(0     )
0186*057        LET B        BE CONSTANT(1     )
0187*058        LET WRIT     BE CONSTANT(2     )
0188*059        LET READI    BE CONSTANT(1     )
0189*060        LET XEQT     BE CONSTANT(1717K) 
0190*061        LET SECT2    BE CONSTANT(1757K )
0191*062        LET SECT3    BE CONSTANT(1760K )
0192*063        LET TAT      BE CONSTANT(1656K )
0193*064        LET TATLG    BE CONSTANT(1755K )
0194*065        LET TATSD    BE CONSTANT(1756K )
0195*066        LET DMSIN    BE CONSTANT(26455K)
0196*067  IN..: SUBROUTINE(NCAM,PLIST,MSNO)GLOBAL 
0197  00135 000000  NCAM    NOP 
0198  00136 000000  PLIST   NOP 
0199  00137 000000  MSNO    NOP 
0200  00140 000000  IN..    NOP 
0201  00141 016001X         JSB .ENTR 
0202  00142 000135R         DEF NCAM
0203*068        LET NCAM,PLIST,MSNO BE INTEGER
0204*069        DDIR_@D.SDR 
0205  00143 016004X         JSB .DRCT 
0206  00144 000015X         DEF D.SDR 
0207  00145 072000R         STA DDIR
0208*070        PDIR2_[PDIR1_[PDIR_@PK.DR]+1]+1 
0209  00146 016004X         JSB .DRCT 
0210  00147 000014X         DEF PK.DR 
0211  00150 072003R         STA PDIR
0212  00151 002004          INA 
0213  00152 072002R         STA PDIR1 
0214  00153 002004          INA 
0215  00154 072001R         STA PDIR2 
0216*071        PDIR9_[PDIR8_[PDIR7_[PDIR6_[PDIR5_[PDIR4_[PDIR3_\ 
0217*          PDIR2+1]+1]+1]+1]+1]+1]+1
0218  00155 002004          INA 
0219  00156 072012R         STA PDIR3 
0220  00157 002004          INA 
0221  00160 072011R         STA PDIR4 
0222  00161 002004          INA 
0223  00162 072010R         STA PDIR5 
0224  00163 002004          INA 







 PAGE 0006 #01


0225  00164 072007R         STA PDIR6 
0226  00165 002004          INA 
0227  00166 072006R         STA PDIR7 
0228  00167 002004          INA 
0229  00170 072005R         STA PDIR8 
0230  00171 002004          INA 
0231  00172 072004R         STA PDIR9 
0232*072        LIS29_[LIS21_[LIS17_[LIS13_[LIST9_[LIST5_@PLIST+5]+4]+4]
0233  00173 062136R         LDA PLIST 
0234  00174 042021R         ADA #1
0235  00175 072020R         STA LIST5 
0236  00176 042022R         ADA #2
0237  00177 072017R         STA LIST9 
0238  00200 042022R         ADA #2
0239  00201 072016R         STA LIS13 
0240  00202 042022R         ADA #2
0241  00203 072015R         STA LIS17 
0242  00204 042022R         ADA #2
0243  00205 072014R         STA LIS21 
0244  00206 042023R         ADA #3
0245  00207 072013R         STA LIS29 
0246*073        MSNO_0!    INITILIZE FOR NO ERRORS
0247  00210 002400          CLA 
0248  00211 172137R         STA MSNO,I
0249*074  ! 
0250*075  !     TEST FOR LEGAL PARAMETERS 
0251*076  ! 
0252*077        IF NCAM>3 THEN GO TO IN2
0253  00212 162135R         LDA NCAM,I
0254  00213 042024R         ADA #4
0255  00214 002021          SSA,RSS 
0256  00215 026270R         JMP IN2 
0257*078        IF NCAM#1 THEN GOTO NOPRM 
0258  00216 162135R         LDA NCAM,I
0259  00217 052025R         CPA #5
0260  00220 002001          RSS 
0261  00221 026265R         JMP NOPRM 
0262*079        IF IFLG. THEN GOTO NOPRM
0263  00222 062016X         LDA IFLG. 
0264  00223 002002          SZA 
0265  00224 026265R         JMP NOPRM 
0266*080  !     MSC CHANGE? 
0267*081  ! 
0268*082        IFNOT MSC.(PLIST) THEN GOTO SCER
0269  00225 016032X         JSB MSC.
0270  00226 000230R         DEF *+2 
0271  00227 100136R         DEF PLIST,I 
0272  00230 002003          SZA,RSS 
0273  00231 027376R         JMP SCER
0274*083  ! 
0275*084        IF $(@PLIST+2)#DMSIN THEN GOTO NOPRM
0276  00232 062136R         LDA PLIST 
0277  00233 042026R         ADA #6
0278  00234 160000          LDA .A.,I 
0279  00235 052027R         CPA #7
0280  00236 002001          RSS 







 PAGE 0007 #01


0281  00237 026265R         JMP NOPRM 
0282*085  ! 
0283*086        $(DDIR+126)_[IF([T_$(@PLIST+3)]AND 77400K)=20000K THEN 0
0284  00240 062136R         LDA PLIST 
0285  00241 042031R         ADA #10 
0286  00242 160000          LDA .A.,I 
0287  00243 072030R         STA T 
0288  00244 012032R         AND #11 
0289  00245 052033R         CPA #12 
0290  00246 002001          RSS 
0291  00247 026252R         JMP #8
0292  00250 062034R         LDA #13 
0293  00251 026253R         JMP #9
0294  00252 062030R #8      LDA T 
0295  00253 066000R #9      LDB DDIR
0296  00254 046035R         ADB #14 
0297  00255 170001          STA .B.,I 
0298*087        D.RIO(WRIT)              !WRITE IT OUT
0299  00256 016006X         JSB D.RIO 
0300  00257 000261R         DEF *+2 
0301  00260 000026R         DEF #6
0302*088        RETURN                   !RETURN
0303  00261 126140R         JMP IN..,I
0304*089  ! 
0305*090  LABER:DO[MSNO_53;RETURN]
0306  00262 062036R LABER   LDA #15 
0307  00263 172137R         STA MSNO,I
0308  00264 126140R         JMP IN..,I
0309*091  ! 
0310*092  NOPRM:DO[MSNO_50;RETURN]       !NOT ENOUGH PRAMS - EXIT 
0311  00265 062037R NOPRM   LDA #16 
0312  00266 172137R         STA MSNO,I
0313  00267 126140R         JMP IN..,I
0314*093  ! 
0315*094  IN2:  IFNOT IFLG. THEN GOTO IN5!NOT INITIALIZING -JMP 
0316  00270 062016X IN2     LDA IFLG. 
0317  00271 002003          SZA,RSS 
0318  00272 026336R         JMP IN5 
0319*095        IF IFLG.=2 THEN[\ 
0320*       IF PLIST THEN[IF PLIST#3 THEN GOTO SCER] ;\ 
0321*       $(DDIR+126)_$[DS.DF_@PLIST+1];\SET THE MASTER SECURITY CODE 
0322*       IFNOT $LIS17 THEN GO TO MSPRM]       !TRACK MUST BE SUPPLIED
0323  00273 062016X         LDA IFLG. 
0324  00274 052026R         CPA #6
0325  00275 002001          RSS 
0326  00276 026320R         JMP #18 
0327  00277 162136R         LDA PLIST,I 
0328  00300 002003          SZA,RSS 
0329  00301 026306R         JMP #17 
0330  00302 162136R         LDA PLIST,I 
0331  00303 052031R         CPA #10 
0332  00304 002001          RSS 
0333  00305 027376R         JMP SCER
0334  00306 062136R #17     LDA PLIST 
0335  00307 002004          INA 
0336  00310 072022X         STA DS.DF 







 PAGE 0008 #01


0337  00311 066000R         LDB DDIR
0338  00312 046035R         ADB #14 
0339  00313 160000          LDA .A.,I 
0340  00314 170001          STA .B.,I 
0341  00315 162015R         LDA LIS17,I 
0342  00316 002003          SZA,RSS 
0343  00317 027370R         JMP MSPRM 
0344*096  ! 
0345*097  ! 
0346*098        IF IFLG.# -$(LIST5   )THEN[MSNO_52;RETURN]
0347  00320 162020R #18     LDA LIST5,I 
0348  00321 003004          CMA,INA 
0349  00322 052016X         CPA IFLG. 
0350  00323 026327R         JMP #19 
0351  00324 062040R         LDA #20 
0352  00325 172137R         STA MSNO,I
0353  00326 126140R         JMP IN..,I
0354*099        IF IFLG.=3 THEN[IFNOT$LIS9  THEN  RETURN] !NO LU 3 RETUR
0355  00327 062016X #19     LDA IFLG. 
0356  00330 052031R         CPA #10 
0357  00331 002001          RSS 
0358  00332 026336R         JMP IN5 
0359  00333 162041R         LDA LIS9,I
0360  00334 002003          SZA,RSS 
0361  00335 126140R         JMP IN..,I
0362*100  IN5:  IFNOT MSC.(PLIST)THEN GO TO SCER   !CHECK SECURITY
0363  00336 016032X IN5     JSB MSC.
0364  00337 000341R         DEF *+2 
0365  00340 100136R         DEF PLIST,I 
0366  00341 002003          SZA,RSS 
0367  00342 027376R         JMP SCER
0368*101  ! 
0369*102  !     CHECK LABEL PARAMETERS
0370*103  ! 
0371*104  ! 
0372*105  IN6:  IFNOT $(LIST9   )>0 THEN GO TO LABER
0373  00343 162017R IN6     LDA LIST9,I 
0374  00344 003004          CMA,INA 
0375  00345 002021          SSA,RSS 
0376  00346 026262R         JMP LABER 
0377*106  ! 
0378*107        IF $(@PLIST+12)#3 THEN GO TO LABER
0379  00347 062136R         LDA PLIST 
0380  00350 042042R         ADA #22 
0381  00351 160000          LDA .A.,I 
0382  00352 052031R         CPA #10 
0383  00353 002001          RSS 
0384  00354 026262R         JMP LABER 
0385*108        NAM..($(LIS13    )) 
0386  00355 016010X         JSB NAM.. 
0387  00356 000360R         DEF *+2 
0388  00357 100016R         DEF LIS13,I 
0389*109        DO[AREG_$A; IF AREG THEN GO TO LABER] 
0390  00360 162034R         LDA #13,I 
0391  00361 072043R         STA AREG
0392  00362 002002          SZA 







 PAGE 0009 #01


0393  00363 026262R         JMP LABER 
0394*110  ! 
0395*111  !     SET UP TO TEST THE REST OF THE PRAMS. 
0396*112  ! 
0397*113         FOR T_4 TO 13 DO[PTST($(@PLIST+T*4))]
0398  00364 062022R         LDA #2
0399  00365 072030R         STA T 
0400  00366 026372R         JMP #24 
0401  00367 062030R #23     LDA T 
0402  00370 002004          INA 
0403  00371 072030R         STA T 
0404  00372 062030R #24     LDA T 
0405  00373 042044R         ADA #26 
0406  00374 002021          SSA,RSS 
0407  00375 026411R         JMP #25 
0408  00376 062136R         LDA PLIST 
0409  00377 072045R         STA #27 
0410  00400 062030R         LDA T 
0411  00401 016002X         JSB .MPY
0412  00402 000022R         DEF #2
0413  00403 042045R         ADA #27 
0414  00404 072046R         STA #28 
0415  00405 017402R         JSB PTST
0416  00406 000410R         DEF *+2 
0417  00407 100046R         DEF #28,I 
0418  00410 026367R         JMP #23 
0419*114  ! 
0420*115         IFNOT$[T_(LIS21    )]THEN $T_1  !MUST HAVE DRTRK 
0421  00411 062014R #25     LDA LIS21 
0422  00412 072030R         STA T 
0423  00413 160000          LDA .A.,I 
0424  00414 002002          SZA 
0425  00415 026420R         JMP #29 
0426  00416 002404          CLA,INA 
0427  00417 172030R         STA T,I 
0428*116         IFNOT IFLG. THEN GOTO IN7       !IF NOT INIT SKIP
0429  00420 062016X #29     LDA IFLG. 
0430  00421 002003          SZA,RSS 
0431  00422 026503R         JMP IN7 
0432*117           IF IFLG.=2 THEN [FOR T_2 TO 124 DO $(DDIR+T)_0;\ 
0433*              $DDIR_2],ELSE $(DDIR+4)_3 !SET LU IN DISC DIRECTORY
0434  00423 062016X         LDA IFLG. 
0435  00424 052026R         CPA #6
0436  00425 002001          RSS 
0437  00426 026451R         JMP #33 
0438  00427 062026R         LDA #6
0439  00430 072030R         STA T 
0440  00431 026435R         JMP #31 
0441  00432 062030R #30     LDA T 
0442  00433 002004          INA 
0443  00434 072030R         STA T 
0444  00435 062030R #31     LDA T 
0445  00436 042047R         ADA #35 
0446  00437 002021          SSA,RSS 
0447  00440 026446R         JMP #32 
0448  00441 062000R         LDA DDIR







 PAGE 0010 #01


0449  00442 042030R         ADA T 
0450  00443 006400          CLB 
0451  00444 174000          STB .A.,I 
0452  00445 026432R         JMP #30 
0453  00446 062026R #32     LDA #6
0454  00447 172000R         STA DDIR,I
0455  00450 026455R         JMP #34 
0456  00451 062000R #33     LDA DDIR
0457  00452 042022R         ADA #2
0458  00453 066031R         LDB #10 
0459  00454 174000          STB .A.,I 
0460*118               LTR_[IF IFLG.=2 THEN [$(DDIR+1)_$TATSD-1],\
0461*                    ELSE[$(DDIR+5)_ -$TATSD -$TATLG-1]]
0462  00455 062016X #34     LDA IFLG. 
0463  00456 052026R         CPA #6
0464  00457 002001          RSS 
0465  00460 026467R         JMP #36 
0466  00461 003400          CCA 
0467  00462 142051R         ADA #38,I 
0468  00463 066000R         LDB DDIR
0469  00464 006004          INB 
0470  00465 170001          STA .B.,I 
0471  00466 026502R         JMP #37 
0472  00467 162051R #36     LDA #38,I 
0473  00470 003004          CMA,INA 
0474  00471 003004          CMA,INA 
0475  00472 142052R         ADA #39,I 
0476  00473 003004          CMA,INA 
0477  00474 007400          CCB 
0478  00475 044000          ADB .A. 
0479  00476 062000R         LDA DDIR
0480  00477 042021R         ADA #1
0481  00500 174000          STB .A.,I 
0482  00501 060001          LDA .B. 
0483  00502 072050R #37     STA LTR 
0484*119  ! 
0485*120  IN7:  DR.RD(READI,$LIST5     ,0)?[MSNO_54;RETURN] 
0486  00503 016005X IN7     JSB DR.RD 
0487  00504 000510R         DEF *+4 
0488  00505 000025R         DEF #5
0489  00506 100020R         DEF LIST5,I 
0490  00507 000034R         DEF #13 
0491  00510 002041          SEZ,RSS 
0492  00511 026515R         JMP #40 
0493  00512 062053R         LDA #41 
0494  00513 172137R         STA MSNO,I
0495  00514 126140R         JMP IN..,I
0496*121  ! 
0497*122        DO[EXEC(13,$$@DS.LU,T,T1);T1_T1 AND 77K\GET UNIT SELECT 
0498*         ;EXEC(13,2,T,T2);T3_0;IF $TATLG+$TATSD THEN EXEC(13,3,T,T3
0499  00515 016004X #40     JSB .DRCT 
0500  00516 000024X         DEF DS.LU 
0501  00517 160000          LDA .A.,I 
0502  00520 072045R         STA #27 
0503  00521 016011X         JSB EXEC
0504  00522 000527R         DEF *+5 







 PAGE 0011 #01


0505  00523 000057R         DEF #43 
0506  00524 100045R         DEF #27,I 
0507  00525 000030R         DEF T 
0508  00526 000054R         DEF T1
0509  00527 062054R         LDA T1
0510  00530 012060R         AND #44 
0511  00531 072054R         STA T1
0512  00532 016011X         JSB EXEC
0513  00533 000540R         DEF *+5 
0514  00534 000057R         DEF #43 
0515  00535 000026R         DEF #6
0516  00536 000030R         DEF T 
0517  00537 000055R         DEF T2
0518  00540 002400          CLA 
0519  00541 072056R         STA T3
0520  00542 162052R         LDA #39,I 
0521  00543 142051R         ADA #38,I 
0522  00544 002003          SZA,RSS 
0523  00545 026554R         JMP #42 
0524  00546 016011X         JSB EXEC
0525  00547 000554R         DEF *+5 
0526  00550 000057R         DEF #43 
0527  00551 000031R         DEF #10 
0528  00552 000030R         DEF T 
0529  00553 000056R         DEF T3
0530*123  ! 
0531*124        T_@PLIST+25   !SET NO OF SECTORS ADDRESS
0532  00554 062136R #42     LDA PLIST 
0533  00555 042061R         ADA #45 
0534  00556 072030R         STA T 
0535*125        IF T1=(T2 AND 77K) THEN \ 
0536*         $T_$SECT2,ELSE[IF T1=(T3 AND 77K   ) THEN \ 
0537*             $T_$SECT3]   !IF WE DID NOT GET A SECT/TRACK BY NOW 
0538  00557 062055R         LDA T2
0539  00560 012060R         AND #44 
0540  00561 052054R         CPA T1
0541  00562 002001          RSS 
0542  00563 026567R         JMP #47 
0543  00564 162062R         LDA #49,I 
0544  00565 172030R         STA T,I 
0545  00566 026576R         JMP #48 
0546  00567 062056R #47     LDA T3
0547  00570 012060R         AND #44 
0548  00571 052054R         CPA T1
0549  00572 002001          RSS 
0550  00573 026576R         JMP #48 
0551  00574 162063R         LDA #50,I 
0552  00575 172030R         STA T,I 
0553*126        IFNOT $T THEN GOTO MSPRM   ! THEN ERROR 
0554  00576 162030R #48     LDA T,I 
0555  00577 002003          SZA,RSS 
0556  00600 027370R         JMP MSPRM 
0557*127          LTR_$$@D.LT 
0558  00601 016004X         JSB .DRCT 
0559  00602 000017X         DEF D.LT
0560  00603 160000          LDA .A.,I 







 PAGE 0012 #01


0561  00604 160000          LDA .A.,I 
0562  00605 072050R         STA LTR 
0563*128        NEW,TN_LTR-[FTR_$LIS17]+1  !SET FIRST TRACK,TOTAL NO. TR
0564  00606 162015R         LDA LIS17,I 
0565  00607 072066R         STA FTR 
0566  00610 003004          CMA,INA 
0567  00611 042050R         ADA LTR 
0568  00612 002004          INA 
0569  00613 072064R         STA NEW 
0570  00614 072065R         STA TN
0571*129        IF TN<[ND_$LIS21      ]THEN GOTO BADPM
0572  00615 162014R         LDA LIS21,I 
0573  00616 072067R         STA ND
0574  00617 003004          CMA,INA 
0575  00620 042065R         ADA TN
0576  00621 002020          SSA 
0577  00622 027365R         JMP BADPM 
0578*130  ! 
0579*131  ! 
0580*132  !     CHECK THE BAD TRACKS AND ARRANGE IN ASCENDING ORDER 
0581*133  ! 
0582*134        LIS49_[T1_LIS29]+20 
0583  00623 062013R         LDA LIS29 
0584  00624 072054R         STA T1
0585  00625 042071R         ADA #51 
0586  00626 072070R         STA LIS49 
0587*135        FOR T_LIS29 TO LIS49 BY 4 DO[\
0588*          IF $T THEN[$T1_$T;T1_T1+1]]
0589  00627 062013R         LDA LIS29 
0590  00630 072030R         STA T 
0591  00631 026635R         JMP #53 
0592  00632 062030R #52     LDA T 
0593  00633 042022R         ADA #2
0594  00634 072030R         STA T 
0595  00635 062030R #53     LDA T 
0596  00636 003004          CMA,INA 
0597  00637 042070R         ADA LIS49 
0598  00640 002020          SSA 
0599  00641 026653R         JMP #54 
0600  00642 162030R         LDA T,I 
0601  00643 002003          SZA,RSS 
0602  00644 026652R         JMP #55 
0603  00645 162030R         LDA T,I 
0604  00646 172054R         STA T1,I
0605  00647 062054R         LDA T1
0606  00650 002004          INA 
0607  00651 072054R         STA T1
0608  00652 026632R #55     JMP #52 
0609*136        FOR T_T1 TO LIS29+6 DO[$T_0] ! ZERO THE END OF THE LIST 
0610  00653 062054R #54     LDA T1
0611  00654 072030R         STA T 
0612  00655 026661R         JMP #57 
0613  00656 062030R #56     LDA T 
0614  00657 002004          INA 
0615  00660 072030R         STA T 
0616  00661 062013R #57     LDA LIS29 







 PAGE 0013 #01


0617  00662 042072R         ADA #59 
0618  00663 003004          CMA,INA 
0619  00664 042030R         ADA T 
0620  00665 003004          CMA,INA 
0621  00666 002020          SSA 
0622  00667 026673R         JMP IN10
0623  00670 002400          CLA 
0624  00671 172030R         STA T,I 
0625  00672 026656R         JMP #56 
0626*137  IN10: SWP,LAST_0   !INITILIZE THE SORT
0627  00673 002400  IN10    CLA 
0628  00674 072073R         STA SWP 
0629  00675 072074R         STA LAST
0630*138        FOR T_LIS29 TO T1-1 DO[\   SWAP LOOP
0631*          IF $T<LAST THEN[SWP,$(T-1)_$T;$T_LAST];LAST_$T]!SWAP 
0632  00676 062013R         LDA LIS29 
0633  00677 072030R         STA T 
0634  00700 026704R         JMP #61 
0635  00701 062030R #60     LDA T 
0636  00702 002004          INA 
0637  00703 072030R         STA T 
0638  00704 003400  #61     CCA 
0639  00705 042054R         ADA T1
0640  00706 003004          CMA,INA 
0641  00707 042030R         ADA T 
0642  00710 003004          CMA,INA 
0643  00711 002020          SSA 
0644  00712 026732R         JMP #62 
0645  00713 062074R         LDA LAST
0646  00714 003004          CMA,INA 
0647  00715 142030R         ADA T,I 
0648  00716 002021          SSA,RSS 
0649  00717 026727R         JMP #63 
0650  00720 162030R         LDA T,I 
0651  00721 072073R         STA SWP 
0652  00722 007400          CCB 
0653  00723 046030R         ADB T 
0654  00724 170001          STA .B.,I 
0655  00725 062074R         LDA LAST
0656  00726 172030R         STA T,I 
0657  00727 162030R #63     LDA T,I 
0658  00730 072074R         STA LAST
0659  00731 026701R         JMP #60 
0660*139        IF SWP THEN GO TO IN10  !IF NOT IN ORDER THEN GO DO ANOT
0661  00732 062073R #62     LDA SWP 
0662  00733 002002          SZA 
0663  00734 026673R         JMP IN10
0664*140  ! 
0665*141        IFNOT LAST THEN GOTO IN13        !IF NO BAD TRACKS SKIP 
0666  00735 062074R         LDA LAST
0667  00736 002003          SZA,RSS 
0668  00737 026755R         JMP IN13
0669*142        IF $(LIS29    )<FTR THEN GOTO BTER
0670  00740 062066R         LDA FTR 
0671  00741 003004          CMA,INA 
0672  00742 142013R         ADA LIS29,I 







 PAGE 0014 #01


0673  00743 002020          SSA 
0674  00744 027373R         JMP BTER
0675*143        IF LAST > LTR-ND THEN GO TO BTER
0676  00745 062067R         LDA ND
0677  00746 003004          CMA,INA 
0678  00747 042050R         ADA LTR 
0679  00750 003004          CMA,INA 
0680  00751 042074R         ADA LAST
0681  00752 003004          CMA,INA 
0682  00753 002020          SSA 
0683  00754 027373R         JMP BTER
0684*144  IN13: T3_$$@DS.LU  !SET LU
0685  00755 016004X IN13    JSB .DRCT 
0686  00756 000024X         DEF DS.LU 
0687  00757 160000          LDA .A.,I 
0688  00760 160000          LDA .A.,I 
0689  00761 072056R         STA T3
0690*145        DLB_D.LB      !SET THE LABEL ADDRESS
0691  00762 062020X         LDA D.LB
0692  00763 072075R         STA DLB 
0693*146        IF IFLG.=2 THEN GOTO IN20 
0694  00764 062016X         LDA IFLG. 
0695  00765 052026R         CPA #6
0696  00766 027070R         JMP IN20
0697*147  ! 
0698*148        IF $LIST9=$DLB THEN GO TO IN12!IS SAME LABEL SKIP 
0699  00767 162017R         LDA LIST9,I 
0700  00770 152075R         CPA DLB,I 
0701  00771 027012R         JMP IN12
0702*149        DR.RD(READI,$LIST9,0)?[DR.RD(READI,$LIST5,0);GO TO IN12]
0703  00772 016005X         JSB DR.RD 
0704  00773 000777R         DEF *+4 
0705  00774 000025R         DEF #5
0706  00775 100017R         DEF LIST9,I 
0707  00776 000034R         DEF #13 
0708  00777 002041          SEZ,RSS 
0709  01000 027007R         JMP #64 
0710  01001 016005X         JSB DR.RD 
0711  01002 001006R         DEF *+4 
0712  01003 000025R         DEF #5
0713  01004 100020R         DEF LIST5,I 
0714  01005 000034R         DEF #13 
0715  01006 027012R         JMP IN12
0716*150        DO[MSNO_12;RETURN]!DUPLICATE LABEL ERROR RETURN 
0717  01007 062042R #64     LDA #22 
0718  01010 172137R         STA MSNO,I
0719  01011 126140R         JMP IN..,I
0720*151  ! 
0721*152  IN12: IF [TX,NEW_FID. ($(LIST5   ))] THEN GO TO IN20
0722  01012 016031X IN12    JSB FID.
0723  01013 001015R         DEF *+2 
0724  01014 100020R         DEF LIST5,I 
0725  01015 072076R         STA TX
0726  01016 072064R         STA NEW 
0727  01017 002002          SZA 
0728  01020 027070R         JMP IN20







 PAGE 0015 #01


0729*153  ! 
0730*154        LOCK.($LIST5,3)?[RETURN]  ! REQUEST LOCK/ RETURN IF ERRO
0731  01021 016030X         JSB LOCK. 
0732  01022 001025R         DEF *+3 
0733  01023 100020R         DEF LIST5,I 
0734  01024 000031R         DEF #10 
0735  01025 002040          SEZ 
0736  01026 126140R         JMP IN..,I
0737*155  !     A DIRECTORY EXISTS - IS THE NEW PRAM SET
0738*156  !     COMPATIBLE? 
0739*157        ENDBL_ -$PDIR8*$PDIR6/2+[IF T3          =2 THEN -1 ,ELSE
0740  01027 162005R         LDA PDIR8,I 
0741  01030 003004          CMA,INA 
0742  01031 016002X         JSB .MPY
0743  01032 100007R         DEF PDIR6,I 
0744  01033 006400          CLB 
0745  01034 002020          SSA 
0746  01035 007000          CMB 
0747  01036 016003X         JSB .DIV
0748  01037 000026R         DEF #6
0749  01040 072045R         STA #27 
0750  01041 062056R         LDA T3
0751  01042 052026R         CPA #6
0752  01043 002001          RSS 
0753  01044 027047R         JMP #65 
0754  01045 062100R         LDA #67 
0755  01046 027050R         JMP #66 
0756  01047 062034R #65     LDA #13 
0757  01050 042045R #66     ADA #27 
0758  01051 072077R         STA ENDBL 
0759*158  ! 
0760*159        IF FTR>$(PDIR4 ) THEN GOTO IN15 
0761  01052 062066R         LDA FTR 
0762  01053 003004          CMA,INA 
0763  01054 142011R         ADA PDIR4,I 
0764  01055 002020          SSA 
0765  01056 027303R         JMP IN15
0766*160        IF $(PDIR9 )>(LTR-ND+1)THEN GOTO IN15 
0767  01057 062067R         LDA ND
0768  01060 003004          CMA,INA 
0769  01061 042050R         ADA LTR 
0770  01062 002004          INA 
0771  01063 003004          CMA,INA 
0772  01064 142004R         ADA PDIR9,I 
0773  01065 003004          CMA,INA 
0774  01066 002020          SSA 
0775  01067 027303R         JMP IN15
0776*161  ! 
0777*162  IN20: IF T3          =2 THEN GT($TAT)  !IF LU TWO OR THREE
0778  01070 062056R IN20    LDA T3
0779  01071 052026R         CPA #6
0780  01072 002001          RSS 
0781  01073 027077R         JMP #68 
0782  01074 017417R         JSB GT
0783  01075 001077R         DEF *+2 
0784  01076 100101R         DEF #69,I 







 PAGE 0016 #01


0785*163        IF T3=3 THEN GT($TAT+$TATSD)!GO SET THE TAT 
0786  01077 062056R #68     LDA T3
0787  01100 052031R         CPA #10 
0788  01101 002001          RSS 
0789  01102 027111R         JMP #70 
0790  01103 162101R         LDA #69,I 
0791  01104 142051R         ADA #38,I 
0792  01105 072045R         STA #27 
0793  01106 017417R         JSB GT
0794  01107 001111R         DEF *+2 
0795  01110 000045R         DEF #27 
0796*164  !     FULL SPEED AHEAD! 
0797*165        $PDIR_$(LIS13    )+100000K
0798  01111 162016R #70     LDA LIS13,I 
0799  01112 042102R         ADA #71 
0800  01113 172003R         STA PDIR,I
0801*166        $(PDIR1 )_$(@PLIST+14)
0802  01114 062136R         LDA PLIST 
0803  01115 042103R         ADA #72 
0804  01116 160000          LDA .A.,I 
0805  01117 172002R         STA PDIR1,I 
0806*167        $(PDIR2 )_$(@PLIST+15)
0807  01120 062136R         LDA PLIST 
0808  01121 042104R         ADA #73 
0809  01122 160000          LDA .A.,I 
0810  01123 172001R         STA PDIR2,I 
0811*168        $(PDIR3 )_$LIST9
0812  01124 162017R         LDA LIST9,I 
0813  01125 172012R         STA PDIR3,I 
0814*169        $(PDIR4 )_FTR 
0815  01126 062066R         LDA FTR 
0816  01127 172011R         STA PDIR4,I 
0817*170        IF NEW THEN [$(PDIR5 )_0;$(PDIR9 )_FTR] 
0818  01130 062064R         LDA NEW 
0819  01131 002003          SZA,RSS 
0820  01132 027137R         JMP #74 
0821  01133 002400          CLA 
0822  01134 172010R         STA PDIR5,I 
0823  01135 062066R         LDA FTR 
0824  01136 172004R         STA PDIR9,I 
0825*171        $(PDIR6 )_$(@PLIST+25)
0826  01137 062136R #74     LDA PLIST 
0827  01140 042061R         ADA #45 
0828  01141 160000          LDA .A.,I 
0829  01142 172007R         STA PDIR6,I 
0830*172        $(PDIR7 )_LTR-ND+1
0831  01143 062067R         LDA ND
0832  01144 003004          CMA,INA 
0833  01145 042050R         ADA LTR 
0834  01146 002004          INA 
0835  01147 172006R         STA PDIR7,I 
0836*173        $(PDIR8 )_-ND 
0837  01150 062067R         LDA ND
0838  01151 003004          CMA,INA 
0839  01152 172005R         STA PDIR8,I 
0840*174        FOR T_10 TO 15 DO $(PDIR+T)_$(@PLIST+T+19)







 PAGE 0017 #01


0841  01153 062105R         LDA #78 
0842  01154 072030R         STA T 
0843  01155 027161R         JMP #76 
0844  01156 062030R #75     LDA T 
0845  01157 002004          INA 
0846  01160 072030R         STA T 
0847  01161 062030R #76     LDA T 
0848  01162 042106R         ADA #79 
0849  01163 002021          SSA,RSS 
0850  01164 027175R         JMP #77 
0851  01165 062136R         LDA PLIST 
0852  01166 042030R         ADA T 
0853  01167 042107R         ADA #80 
0854  01170 066003R         LDB PDIR
0855  01171 046030R         ADB T 
0856  01172 160000          LDA .A.,I 
0857  01173 170001          STA .B.,I 
0858  01174 027156R         JMP #75 
0859*175        IF NEW THEN[FOR T_16 TO 127 DO $(PDIR+T)_0] 
0860  01175 062064R #77     LDA NEW 
0861  01176 002003          SZA,RSS 
0862  01177 027217R         JMP #84 
0863  01200 062110R         LDA #85 
0864  01201 072030R         STA T 
0865  01202 027206R         JMP #82 
0866  01203 062030R #81     LDA T 
0867  01204 002004          INA 
0868  01205 072030R         STA T 
0869  01206 062030R #82     LDA T 
0870  01207 042111R         ADA #86 
0871  01210 002021          SSA,RSS 
0872  01211 027217R         JMP #84 
0873  01212 062003R         LDA PDIR
0874  01213 042030R         ADA T 
0875  01214 006400          CLB 
0876  01215 174000          STB .A.,I 
0877  01216 027203R         JMP #81 
0878*176        BL_0
0879  01217 002400  #84     CLA 
0880  01220 072112R         STA BL
0881*177  ! 
0882*178  !     NOW WRITE IT OUT
0883*179  IN22: DR.RD(WRIT,$LIST5     ,BL)?[GO TO IN25] 
0884  01221 016005X IN22    JSB DR.RD 
0885  01222 001226R         DEF *+4 
0886  01223 000026R         DEF #6
0887  01224 100020R         DEF LIST5,I 
0888  01225 000112R         DEF BL
0889  01226 002040          SEZ 
0890  01227 027262R         JMP IN25
0891*180  ! 
0892*181        FOR T_0 TO 127 DO $(PDIR+T)_0 
0893  01230 002400          CLA 
0894  01231 072030R         STA T 
0895  01232 027236R         JMP #88 
0896  01233 062030R #87     LDA T 







 PAGE 0018 #01


0897  01234 002004          INA 
0898  01235 072030R         STA T 
0899  01236 062030R #88     LDA T 
0900  01237 042111R         ADA #86 
0901  01240 002021          SSA,RSS 
0902  01241 027247R         JMP #89 
0903  01242 062003R         LDA PDIR
0904  01243 042030R         ADA T 
0905  01244 006400          CLB 
0906  01245 174000          STB .A.,I 
0907  01246 027233R         JMP #87 
0908*182        IFNOT NEW THEN [BL,NEW_ENDBL;GOTO IN22]!SET TO ZERO ADDE
0909  01247 062064R #89     LDA NEW 
0910  01250 002002          SZA 
0911  01251 027256R         JMP #90 
0912  01252 062077R         LDA ENDBL 
0913  01253 072112R         STA BL
0914  01254 072064R         STA NEW 
0915  01255 027221R         JMP IN22
0916*183        DO[BL_BL+1;GO TO IN22]!ZERO THE NEXT BLOCK
0917  01256 062112R #90     LDA BL
0918  01257 002004          INA 
0919  01260 072112R         STA BL
0920  01261 027221R         JMP IN22
0921*184  ! 
0922*185  IN25: $DLB_$LIST9             !SET THE DIRECTORY LABEL WORD 
0923  01262 162017R IN25    LDA LIST9,I 
0924  01263 172075R         STA DLB,I 
0925*186  IN30: D.RIO(WRIT);
0926  01264 016006X IN30    JSB D.RIO 
0927  01265 001267R         DEF *+2 
0928  01266 000026R         DEF #6
0929*187                        IFNOT IFLG. THEN LOCK.($LIST9,5) !RELEAS
0930  01267 062016X         LDA IFLG. 
0931  01270 002002          SZA 
0932  01271 027276R         JMP #91 
0933  01272 016030X         JSB LOCK. 
0934  01273 001276R         DEF *+3 
0935  01274 100017R         DEF LIST9,I 
0936  01275 000021R         DEF #1
0937*188        EXEC(5,-1)      !RETURN ANY LEFT OVER TRACKS
0938  01276 016011X #91     JSB EXEC
0939  01277 001302R         DEF *+3 
0940  01300 000021R         DEF #1
0941  01301 000100R         DEF #67 
0942*189        RETURN                           !WE DID IT - EXIT
0943  01302 126140R         JMP IN..,I
0944*190  ! 
0945*191  IN15: MSS.(60); 
0946  01303 016007X IN15    JSB MSS.
0947  01304 001306R         DEF *+2 
0948  01305 000113R         DEF #92 
0949*192                     EXEC(2,CAM.O,35137K,1)     ; 
0950  01306 016011X         JSB EXEC
0951  01307 001314R         DEF *+5 
0952  01310 000026R         DEF #6







 PAGE 0019 #01


0953  01311 000026X         DEF CAM.O 
0954  01312 000114R         DEF #93 
0955  01313 000025R         DEF #5
0956*193                                                     \ SEND COLO
0957*                EXEC(1,CAM.O OR 400K,C.BUF,36);
0958  01314 062026X         LDA CAM.O 
0959  01315 032115R         IOR #94 
0960  01316 072045R         STA #27 
0961  01317 016011X         JSB EXEC
0962  01320 001325R         DEF *+5 
0963  01321 000025R         DEF #5
0964  01322 000045R         DEF #27 
0965  01323 000021X         DEF C.BUF 
0966  01324 000116R         DEF #95 
0967*194                                                LN_$1 
0968  01325 162025R         LDA #5,I
0969  01326 072117R         STA LN
0970*195        IF LN<1 THEN GOTO IN15
0971  01327 042100R         ADA #67 
0972  01330 002020          SSA 
0973  01331 027303R         JMP IN15
0974*196        $(@C.BUF+LN)_0    !SET UP THE       BUFFER FOR POSSIBLE 
0975  01332 016004X         JSB .DRCT 
0976  01333 000021X         DEF C.BUF 
0977  01334 042117R         ADA LN
0978  01335 006400          CLB 
0979  01336 174000          STB .A.,I 
0980*197        IF C.BUF=YE THEN[NEW_1; GO TO IN20], ELSE [   \ 
0981*                 IF C.BUF=NO THEN [IF IFLG. THEN GOTO MSPRM,\
0982*                    ELSE GOTO IN30],ELSE[IF C.BUF="??" THEN[\
0983*                                       NO.RD_1;RETURN],ELSE\ 
0984*                                          GO TO IN15]] 
0985  01337 062021X         LDA C.BUF 
0986  01340 052121R         CPA #99 
0987  01341 002001          RSS 
0988  01342 027346R         JMP #98 
0989  01343 002404          CLA,INA 
0990  01344 072064R         STA NEW 
0991  01345 027070R         JMP IN20
0992  01346 062021X #98     LDA C.BUF 
0993  01347 052122R         CPA #100
0994  01350 002001          RSS 
0995  01351 027356R         JMP #97 
0996  01352 062016X         LDA IFLG. 
0997  01353 002003          SZA,RSS 
0998  01354 027264R         JMP IN30
0999  01355 027370R         JMP MSPRM 
1000  01356 062021X #97     LDA C.BUF 
1001  01357 052120R         CPA #96 
1002  01360 002001          RSS 
1003  01361 027303R         JMP IN15
1004  01362 002404          CLA,INA 
1005  01363 072027X         STA NO.RD 
1006  01364 126140R         JMP IN..,I
1007*198  ! 
1008*199  BADPM:DO[MSNO_56;RETURN]







 PAGE 0020 #01


1009  01365 062123R BADPM   LDA #101
1010  01366 172137R         STA MSNO,I
1011  01367 126140R         JMP IN..,I
1012*200  ! 
1013*201  MSPRM:DO[MSNO_55;RETURN]
1014  01370 062124R MSPRM   LDA #102
1015  01371 172137R         STA MSNO,I
1016  01372 126140R         JMP IN..,I
1017*202  ! 
1018*203  BTER: DO[MSNO_57;RETURN]
1019  01373 062125R BTER    LDA #103
1020  01374 172137R         STA MSNO,I
1021  01375 126140R         JMP IN..,I
1022*204  SCER: MSNO_51 
1023  01376 062126R SCER    LDA #104
1024  01377 172137R         STA MSNO,I
1025*205        RETURN
1026  01400 126140R         JMP IN..,I
1027*206        END 
1028*207  PTST: SUBROUTINE(PTR) 
1029  01401 000000  PTR     NOP 
1030  01402 000000  PTST    NOP 
1031  01403 016001X         JSB .ENTR 
1032  01404 001401R         DEF PTR 
1033*208  ! 
1034*209        IF PTR=3 THEN GOTO BADPM         !MUST NOT BE ASCII 
1035  01405 163401R         LDA PTR,I 
1036  01406 052031R         CPA #10 
1037  01407 027365R         JMP BADPM 
1038*210  ! 
1039*211  ! 
1040*212        IF $(@PTR+1)<0 THEN GOTO BADPM   !IF <0 - BAD NEWS
1041  01410 063401R         LDA PTR 
1042  01411 002004          INA 
1043  01412 160000          LDA .A.,I 
1044  01413 002020          SSA 
1045  01414 027365R         JMP BADPM 
1046*213  ! 
1047*214        RETURN                           !OK !RETURN
1048  01415 127402R         JMP PTST,I
1049*215        END 
1050*216  ! 
1051*217  GT:   SUBROUTINE(TRLOC) 
1052  01416 000000  TRLOC   NOP 
1053  01417 000000  GT      NOP 
1054  01420 016001X         JSB .ENTR 
1055  01421 001416R         DEF TRLOC 
1056*218  !     SUBROUTINE TO CHECK ON TRACK ASSIGNMENTS FOR
1057*219  !     CHANGES TO THE SYSTEM OR AUX DISC FILE AREAS
1058*220  ! 
1059*221        IF IFLG. THEN RETURN  !  IF INIT THE LET MAIN DO IT 
1060  01422 062016X         LDA IFLG. 
1061  01423 002002          SZA 
1062  01424 127417R         JMP GT,I
1063*222        IF TX  THEN GO TO TRASN ! NEW SO GO GET ALL THE TRACKS
1064  01425 062076R         LDA TX







 PAGE 0021 #01


1065  01426 002002          SZA 
1066  01427 027474R         JMP TRASN 
1067*223        IF FTR<[T_$(PDIR4 )] THEN GO TO TRASN ! IF LARGER AREA G
1068  01430 162011R         LDA PDIR4,I 
1069  01431 072030R         STA T 
1070  01432 003004          CMA,INA 
1071  01433 042066R         ADA FTR 
1072  01434 002020          SSA 
1073  01435 027474R         JMP TRASN 
1074*224  ! 
1075*225  !     RETURN THE LEFT OVER TRACKS 
1076*226        FOR ADD_T TO FTR-1 DO[T1_ADD+TRLOC;\
1077*            IF $T1=77776K THEN IPUT(T1,$XEQT)] 
1078  01436 062030R         LDA T 
1079  01437 072127R         STA ADD 
1080  01440 027444R         JMP #106
1081  01441 062127R #105    LDA ADD 
1082  01442 002004          INA 
1083  01443 072127R         STA ADD 
1084  01444 003400  #106    CCA 
1085  01445 042066R         ADA FTR 
1086  01446 003004          CMA,INA 
1087  01447 042127R         ADA ADD 
1088  01450 003004          CMA,INA 
1089  01451 002020          SSA 
1090  01452 027467R         JMP #107
1091  01453 062127R         LDA ADD 
1092  01454 143416R         ADA TRLOC,I 
1093  01455 072054R         STA T1
1094  01456 162054R         LDA T1,I
1095  01457 052130R         CPA #109
1096  01460 002001          RSS 
1097  01461 027466R         JMP #108
1098  01462 016013X         JSB IPUT
1099  01463 001466R         DEF *+3 
1100  01464 000054R         DEF T1
1101  01465 100131R         DEF #110,I
1102  01466 027441R #108    JMP #105
1103*227        EXEC(5,-1)   !RETURN THE TRACKS 
1104  01467 016011X #107    JSB EXEC
1105  01470 001473R         DEF *+3 
1106  01471 000021R         DEF #1
1107  01472 000100R         DEF #67 
1108*228        RETURN    !AND RETURN 
1109  01473 127417R         JMP GT,I
1110*229  ! 
1111*230  TRASN:T1_FTR+TRLOC  !SET UP FIRST AND LAST ADDRESSES
1112  01474 062066R TRASN   LDA FTR 
1113  01475 143416R         ADA TRLOC,I 
1114  01476 072054R         STA T1
1115*231        T2_[IF TX THEN LTR,ELSE T-1]+TRLOC
1116  01477 062076R         LDA TX
1117  01500 002003          SZA,RSS 
1118  01501 027504R         JMP #111
1119  01502 062050R         LDA LTR 
1120  01503 027506R         JMP #112







 PAGE 0022 #01


1121  01504 003400  #111    CCA 
1122  01505 042030R         ADA T 
1123  01506 143416R #112    ADA TRLOC,I 
1124  01507 072055R         STA T2
1125*232        FOR ADD_T2 TO T1 BY -1 DO[J.PUT(ADD,$XEQT,JER);\
1126*         IF JER THEN BADTR]
1127  01510 072127R         STA ADD 
1128  01511 027515R         JMP #114
1129  01512 062127R #113    LDA ADD 
1130  01513 042100R         ADA #67 
1131  01514 072127R         STA ADD 
1132  01515 062054R #114    LDA T1
1133  01516 003004          CMA,INA 
1134  01517 042127R         ADA ADD 
1135  01520 002020          SSA 
1136  01521 027535R         JMP #115
1137  01522 016012X         JSB J.PUT 
1138  01523 001527R         DEF *+4 
1139  01524 000127R         DEF ADD 
1140  01525 100131R         DEF #110,I
1141  01526 000132R         DEF JER 
1142  01527 062132R         LDA JER 
1143  01530 002003          SZA,RSS 
1144  01531 027534R         JMP #116
1145  01532 017562R         JSB BADTR 
1146  01533 001534R         DEF *+1 
1147  01534 027512R #116    JMP #113
1148*233  ! 
1149*234        FOR ADD_T1 TO T2 DO[IF $ADD=$XEQT THEN IPUT(ADD,77776K)]
1150  01535 062054R #115    LDA T1
1151  01536 072127R         STA ADD 
1152  01537 027543R         JMP #118
1153  01540 062127R #117    LDA ADD 
1154  01541 002004          INA 
1155  01542 072127R         STA ADD 
1156  01543 062127R #118    LDA ADD 
1157  01544 003004          CMA,INA 
1158  01545 042055R         ADA T2
1159  01546 002020          SSA 
1160  01547 027561R         JMP #119
1161  01550 162127R         LDA ADD,I 
1162  01551 152131R         CPA #110,I
1163  01552 002001          RSS 
1164  01553 027560R         JMP #120
1165  01554 016013X         JSB IPUT
1166  01555 001560R         DEF *+3 
1167  01556 000127R         DEF ADD 
1168  01557 000130R         DEF #109
1169  01560 027540R #120    JMP #117
1170*235        RETURN
1171  01561 127417R #119    JMP GT,I
1172*236        END 
1173*237  BADTR:SUBROUTINE
1174  01562 000000  BADTR   NOP 
1175  01563 016001X         JSB .ENTR 
1176  01564 001562R         DEF BADTR 







 PAGE 0023 #01


1177*238        T_ADD-TRLOC  !CHECK IF UNAVAILABLE TRACK IS ALSO BAD
1178  01565 163416R         LDA TRLOC,I 
1179  01566 003004          CMA,INA 
1180  01567 042127R         ADA ADD 
1181  01570 072030R         STA T 
1182*239        FOR X_LIS29 TO LIS49 BY 4 DO[IF $X=T THEN RETURN] 
1183  01571 062013R         LDA LIS29 
1184  01572 072133R         STA X 
1185  01573 027577R         JMP #122
1186  01574 062133R #121    LDA X 
1187  01575 042022R         ADA #2
1188  01576 072133R         STA X 
1189  01577 062133R #122    LDA X 
1190  01600 003004          CMA,INA 
1191  01601 042070R         ADA LIS49 
1192  01602 002020          SSA 
1193  01603 027610R         JMP #123
1194  01604 162133R         LDA X,I 
1195  01605 052030R         CPA T 
1196  01606 127562R         JMP BADTR,I 
1197  01607 027574R         JMP #121
1198*240        MSS.(1059,T) !NOT FOUND SO BAD TRACK ERROR OR TRACK NOT 
1199  01610 016007X #123    JSB MSS.
1200  01611 001614R         DEF *+3 
1201  01612 000134R         DEF #124
1202  01613 000030R         DEF T 
1203*241        GO TO IN30  !GO EXIT
1204  01614 027264R         JMP IN30
1205*242        END 
1206*243        END 
1207                        END 
**  NO ERRORS*
























$END ASMB     

*
--> Assemble fmp/29033-80013_Rev-A_1
ON,ASMB,99







 PAGE 0001


0001                ASMB,B,X,L  
**  NO ERRORS*





























































 PAGE 0002 #01


0001                ASMB,B,X,L  
0002*001  SPL, L, M, O  
0003*002        NAME MC.. (8) 
0004  00000                 NAM MC..,8
0005  00000         .A.     EQU  0
0006  00001         .B.     EQU  1
0007                        ENT MC..
0008                        EXT .ENTR 
0009                        EXT .DRCT 
0010                        EXT DR.RD 
0011                        EXT D.RIO 
0012                        EXT EXEC
0013                        EXT D.SDR 
0014                        EXT DS.F1 
0015                        EXT PK.DR 
0016                        EXT FID.
0017  00000 000000  LU      BSS 1 
0018  00001 000000  LTR     BSS 1 
0019  00002 000005  #1      OCT 000005
0020  00003 000000  NLU     BSS 1 
0021  00004 000001  #3      OCT 000001
0022  00005 000000  #4      OCT 000000
0023  00006 000014  #5      OCT 000014
0024  00007 000000  DSDR    BSS 1 
0025  00010 000000  DLU     BSS 1 
0026  00011 000004  #9      OCT 000004
0027  00012 000170  #10     OCT 000170
0028  00013 000015  #11     OCT 000015
0029  00014 000000  MXTR    BSS 1 
0030  00015 000002  #13     OCT 000002
0031  00016 001756  #14     OCT 001756
0032  00017 000003  #16     OCT 000003
0033  00020 001755  #17     OCT 001755
0034  00021 000000  EQT5    BSS 1 
0035  00022 036000  #19     OCT 036000
0036  00023 014000  #20     OCT 014000
0037  00024 000064  #21     OCT 000064
0038  00025 037400  #22     OCT 037400
0039  00026 023420  #23     OCT 023420
0040  00027 000070  #26     OCT 000070
0041  00030 000067  #28     OCT 000067
0042  00031 000000  T       BSS 1 
0043  00032 000000  NEW     BSS 1 
0044  00033 000000  LB      BSS 1 
0045  00034 001717  #31     OCT 001717
0046*003  !     MOUNT CARTRIDGE DIRECTIVE 
0047*004  !     ROUTINE FOR RTE FILE
0048*005  !     MANAGER (FMGR). 
0049*006  ! 
0050*007  !     ENTERED ON COMMAND: 
0051*008  ! 
0052*009  !     MC,LU,LTR 
0053*010  ! 
0054*011  !     W H E R E:
0055*012  ! 
0056*013  !     LU     IS THE LOGICAL UNIT OF THE DISC TO BE MOUNTED. 







 PAGE 0003 #01


0057*014  ! 
0058*015  !     LTR    IS THE LAST TRACK ON THE UNIT TO BE
0059*016  !            USED BY THE FILE MANAGER.
0060*017  ! 
0061*018  MC..: SUBROUTINE(N,LIS,ER) GLOBAL  !ENTRY 
0062  00035 000000  N       NOP 
0063  00036 000000  LIS     NOP 
0064  00037 000000  ER      NOP 
0065  00040 000000  MC..    NOP 
0066  00041 016001X         JSB .ENTR 
0067  00042 000035R         DEF N 
0068*019  ! 
0069*020  !     DECLARE EXTERNALS 
0070*021  ! 
0071*022        LET DR.RD,D.RIO,LOCK.,EXEC\ 
0072*                        BE SUBROUTINE,EXTERNAL 
0073*023  ! 
0074*024        LET D.SDR,DS.F1,PK.DR                 \ 
0075*                       BE INTEGER,EXTERNAL 
0076*025  ! 
0077*026        LET       FID.  BE FUNCTION,EXTERNAL
0078*027  ! 
0079*028  !     DECLARE CONSTANTS 
0080*029  ! 
0081*030        LET XEQT      BE CONSTANT(1717K)
0082*031        LET TATSD     BE CONSTANT(1756K)
0083*032        LET TATLG     BE CONSTANT(1755K)
0084*033        LET B         BE CONSTANT(    1)
0085*034        LET READI     BE CONSTANT(    1)
0086*035        LET WRIT      BE CONSTANT(    2)
0087*036  ! 
0088*037        LU_$(@LIS+1)       !BRING IN THE
0089  00043 062036R         LDA LIS 
0090  00044 002004          INA 
0091  00045 160000          LDA .A.,I 
0092  00046 072000R         STA LU
0093*038        LTR_$(@LIS+5)      !PRAMS 
0094  00047 062036R         LDA LIS 
0095  00050 042002R         ADA #1
0096  00051 160000          LDA .A.,I 
0097  00052 072001R         STA LTR 
0098*039        DS.F1_0         !INSURE A CLEAN READ
0099  00053 002400          CLA 
0100  00054 072007X         STA DS.F1 
0101*040        IF LU>0 THEN LU_-LU 
0102  00055 062000R         LDA LU
0103  00056 003004          CMA,INA 
0104  00057 002021          SSA,RSS 
0105  00060 026064R         JMP #2
0106  00061 062000R         LDA LU
0107  00062 003004          CMA,INA 
0108  00063 072000R         STA LU
0109*041        NLU_-LU 
0110  00064 062000R #2      LDA LU
0111  00065 003004          CMA,INA 
0112  00066 072003R         STA NLU 







 PAGE 0004 #01


0113*042        DR.RD(READI,LU,0)?[GO TO OK]
0114  00067 016003X         JSB DR.RD 
0115  00070 000074R         DEF *+4 
0116  00071 000004R         DEF #3
0117  00072 000000R         DEF LU
0118  00073 000005R         DEF #4
0119  00074 002040          SEZ 
0120  00075 026101R         JMP OK
0121*043  ! 
0122*044  MC00: ER_12         !SEND DUPLICATE LU
0123  00076 062006R MC00    LDA #5
0124  00077 172037R         STA ER,I
0125*045        RETURN        !ERROR
0126  00100 126040R         JMP MC..,I
0127*046  ! 
0128*047  OK:   DSDR_@D.SDR 
0129  00101 016002X OK      JSB .DRCT 
0130  00102 000006X         DEF D.SDR 
0131  00103 072007R         STA DSDR
0132*048        FOR DLU_DSDR TO DSDR+120 BY 4 DO[\
0133*           IFNOT $DLU THEN GO TO MC01] 
0134  00104 072010R         STA DLU 
0135  00105 026111R         JMP #7
0136  00106 062010R #6      LDA DLU 
0137  00107 042011R         ADA #9
0138  00110 072010R         STA DLU 
0139  00111 062007R #7      LDA DSDR
0140  00112 042012R         ADA #10 
0141  00113 003004          CMA,INA 
0142  00114 042010R         ADA DLU 
0143  00115 003004          CMA,INA 
0144  00116 002020          SSA 
0145  00117 026124R         JMP #8
0146  00120 162010R         LDA DLU,I 
0147  00121 002003          SZA,RSS 
0148  00122 026127R         JMP MC01
0149  00123 026106R         JMP #6
0150*049        ER_13         !MORE THAN 31 DISCS?
0151  00124 062013R #8      LDA #11 
0152  00125 172037R         STA ER,I
0153*050        RETURN        !RETURN 
0154  00126 126040R         JMP MC..,I
0155*051  ! 
0156*052  MC01: MXTR_0
0157  00127 002400  MC01    CLA 
0158  00130 072014R         STA MXTR
0159*053        IF NLU=2 THEN MXTR,LTR_$TATSD-1 
0160  00131 062003R         LDA NLU 
0161  00132 052015R         CPA #13 
0162  00133 002001          RSS 
0163  00134 026141R         JMP #12 
0164  00135 003400          CCA 
0165  00136 142016R         ADA #14,I 
0166  00137 072014R         STA MXTR
0167  00140 072001R         STA LTR 
0168*054        IF NLU=3 THEN MXTR,LTR_-$TATSD-$TATLG-1 







 PAGE 0005 #01


0169  00141 062003R #12     LDA NLU 
0170  00142 052017R         CPA #16 
0171  00143 002001          RSS 
0172  00144 026156R         JMP #15 
0173  00145 162016R         LDA #14,I 
0174  00146 003004          CMA,INA 
0175  00147 003004          CMA,INA 
0176  00150 142020R         ADA #17,I 
0177  00151 003004          CMA,INA 
0178  00152 007400          CCB 
0179  00153 044000          ADB .A. 
0180  00154 076014R         STB MXTR
0181  00155 076001R         STB LTR 
0182*055        EXEC(13,NLU,EQT5) 
0183  00156 016005X #15     JSB EXEC
0184  00157 000163R         DEF *+4 
0185  00160 000013R         DEF #11 
0186  00161 000003R         DEF NLU 
0187  00162 000021R         DEF EQT5
0188*056            IF(EQT5 AND 36000K)#14000K THEN[\ 
0189*               ER_52; RETURN] !NO DISC-ERR.
0190  00163 062021R         LDA EQT5
0191  00164 012022R         AND #19 
0192  00165 052023R         CPA #20 
0193  00166 026172R         JMP #18 
0194  00167 062024R         LDA #21 
0195  00170 172037R         STA ER,I
0196  00171 126040R         JMP MC..,I
0197*057        IF MXTR THEN GOTO MC02
0198  00172 062014R #18     LDA MXTR
0199  00173 002002          SZA 
0200  00174 026231R         JMP MC02
0201*058        IF (EQT5 AND 37400K)#\
0202*            14000K THEN[EXEC(2,NLU,1,1,10000,0);\
0203*                 MXTR_$B-1],ELSE GOTO MC02 
0204  00175 062021R         LDA EQT5
0205  00176 012025R         AND #22 
0206  00177 052023R         CPA #20 
0207  00200 026231R         JMP MC02
0208  00201 016005X         JSB EXEC
0209  00202 000211R         DEF *+7 
0210  00203 000015R         DEF #13 
0211  00204 000003R         DEF NLU 
0212  00205 000004R         DEF #3
0213  00206 000004R         DEF #3
0214  00207 000026R         DEF #23 
0215  00210 000005R         DEF #4
0216  00211 003400          CCA 
0217  00212 142004R         ADA #3,I
0218  00213 072014R         STA MXTR
0219*059        IFNOT LTR THEN LTR_MXTR 
0220  00214 062001R         LDA LTR 
0221  00215 002002          SZA 
0222  00216 026221R         JMP #24 
0223  00217 062014R         LDA MXTR
0224  00220 072001R         STA LTR 







 PAGE 0006 #01


0225*060        IF LTR>MXTR THEN[ER_56;RETURN]
0226  00221 062001R #24     LDA LTR 
0227  00222 003004          CMA,INA 
0228  00223 042014R         ADA MXTR
0229  00224 002021          SSA,RSS 
0230  00225 026231R         JMP MC02
0231  00226 062027R         LDA #26 
0232  00227 172037R         STA ER,I
0233  00230 126040R         JMP MC..,I
0234*061  ! 
0235*062  MC02: IFNOT LTR THEN[ER_55;RETURN]
0236  00231 062001R MC02    LDA LTR 
0237  00232 002002          SZA 
0238  00233 026237R         JMP #27 
0239  00234 062030R         LDA #28 
0240  00235 172037R         STA ER,I
0241  00236 126040R         JMP MC..,I
0242*063  ! 
0243*064        $DLU_NLU
0244  00237 062003R #27     LDA NLU 
0245  00240 172010R         STA DLU,I 
0246*065        DLU_[T_DLU+1]+1 
0247  00241 062010R         LDA DLU 
0248  00242 002004          INA 
0249  00243 072031R         STA T 
0250  00244 002004          INA 
0251  00245 072010R         STA DLU 
0252*066        $T_LTR
0253  00246 062001R         LDA LTR 
0254  00247 172031R         STA T,I 
0255*067        IFNOT [NEW_FID.(LU)] THEN[\ 
0256*          LB_$(@PK.DR+3);   \
0257*              DR.RD(READI,LB,0)?[GOTO MC05];\
0258*                   GO TO MC00] 
0259  00250 016011X         JSB FID.
0260  00251 000253R         DEF *+2 
0261  00252 000000R         DEF LU
0262  00253 072032R         STA NEW 
0263  00254 002002          SZA 
0264  00255 026273R         JMP MC05
0265  00256 016002X         JSB .DRCT 
0266  00257 000010X         DEF PK.DR 
0267  00260 042017R         ADA #16 
0268  00261 160000          LDA .A.,I 
0269  00262 072033R         STA LB
0270  00263 016003X         JSB DR.RD 
0271  00264 000270R         DEF *+4 
0272  00265 000004R         DEF #3
0273  00266 000033R         DEF LB
0274  00267 000005R         DEF #4
0275  00270 002040          SEZ 
0276  00271 026273R         JMP MC05
0277  00272 026076R         JMP MC00
0278*068  ! 
0279*069  MC05: $DLU_LB       !SET LABEL
0280  00273 062033R MC05    LDA LB







 PAGE 0007 #01


0281  00274 172010R         STA DLU,I 
0282*070  MC04: IF NEW THEN $(DLU+1)_$XEQT !SET LOCK IF NEW 
0283  00275 062032R MC04    LDA NEW 
0284  00276 002003          SZA,RSS 
0285  00277 026304R         JMP #30 
0286  00300 062010R         LDA DLU 
0287  00301 002004          INA 
0288  00302 166034R         LDB #31,I 
0289  00303 174000          STB .A.,I 
0290*071  ! 
0291*072        D.RIO(WRIT)     !WRITE NEW DISC DIR.
0292  00304 016004X #30     JSB D.RIO 
0293  00305 000307R         DEF *+2 
0294  00306 000015R         DEF #13 
0295*073  ! 
0296*074        RETURN        !DONE 
0297  00307 126040R         JMP MC..,I
0298*075        END 
0299*076        END 
0300                        END 
**  NO ERRORS*



































$END ASMB     

*
--> Assemble fmp/29033-80013_Rev-A_2
ON,ASMB,99







 PAGE 0001


0001                ASMB,B,X,L  
**  NO ERRORS*





























































 PAGE 0002 #01


0001                ASMB,B,X,L  
0002*001  SPL, L, M, O  
0003*002        NAME RC..(8)
0004  00000                 NAM RC..,8
0005  00000         .A.     EQU  0
0006  00001         .B.     EQU  1
0007                        ENT RC..
0008                        EXT .ENTR 
0009                        EXT .DRCT 
0010                        EXT DR.RD 
0011                        EXT D.RIO 
0012                        EXT FM.ER 
0013                        EXT LOCK. 
0014                        EXT CONV. 
0015                        EXT MC..
0016                        EXT FID.
0017                        EXT D.AD
0018                        EXT D.LT
0019                        EXT DS.LU 
0020                        EXT D.SDR 
0021                        EXT DS.DF 
0022  00000 046101  MSS     OCT 046101
0023  00001 051524          OCT 051524
0024  00002 020124          OCT 020124
0025  00003 051101          OCT 051101
0026  00004 041513          OCT 041513
0027  00005 020040          OCT 020040
0028  00006 020040          OCT 020040
0029  00007 000000  MS      BSS 1 
0030  00010 000000  DIS     BSS 1 
0031  00011 000067  #2      OCT 000067
0032  00012 000001  #4      OCT 000001
0033  00013 000000  #5      OCT 000000
0034  00014 000066  #6      OCT 000066
0035  00015 000003  #8      OCT 000003
0036  00016 000000  #9      BSS 1 
0037  00017 000004  #10     OCT 000004
0038  00020 000000  I       BSS 1 
0039  00021 000000  T       BSS 1 
0040  00022 000170  #14     OCT 000170
0041  00023 177776  #15     OCT 177776
0042  00024 177775  #16     OCT 177775
0043  00025 000002  #17     OCT 000002
0044  00026 000010  #18     OCT 000010
0045*003  !     THIS IS THE REMOVE CARTRIDGE ROUTINE OF THE 
0046*004  !     RTE FILE MANAGER PROGRAM FMGR.
0047*005  !     IT IS ENTERED AS A RESULT OF A
0048*006  ! 
0049*007  !     RC,CR 
0050*008  !     WHERE CR IS THE CARTRIDGE ID
0051*009  ! 
0052*010  !     THE CARTRIDGE IS LOCKED IF IT HAS BEEN
0053*011  !     INITILIZED. 
0054*012  ! 
0055*013  !     THEN IT IS REMOVED FROM THE DIRECTORY OF DISCS. 
0056*014  ! 







 PAGE 0003 #01


0057*015  ! 
0058*016  !     DECLARE EXTERNALS 
0059*017  ! 
0060*018        LET DR.RD, D.RIO, FM.ER,\ 
0061*            LOCK., CONV.           BE SUBROUTINE, EXTERNAL 
0062*019        LET MC..    BE SUBROUTINE,EXTERNAL
0063*020  ! 
0064*021        LET FID., D.AD              BE FUNCTION, EXTERNAL 
0065*022  ! 
0066*023        LET D.LT, DS.LU, D.SDR,DS.DF BE INTEGER, EXTERNAL 
0067*024  ! 
0068*025  !     DECLARE CONSTANTS 
0069*026        LET MSS(7),MS BE INTEGER
0070*027        INITIALIZE MSS TO "LAST TRACK    "
0071*028  ! 
0072*029        LET WRIT      BE CONSTANT (   2)
0073*030        LET READI     BE CONSTANT (    1) 
0074*031        LET B        BE CONSTANT (    1 ) 
0075*032  RC..: SUBROUTINE (N,LIS,ER) GLOBAL
0076  00027 000000  N       NOP 
0077  00030 000000  LIS     NOP 
0078  00031 000000  ER      NOP 
0079  00032 000000  RC..    NOP 
0080  00033 016001X         JSB .ENTR 
0081  00034 000027R         DEF N 
0082*033        DIS_@LIS+1  !SET DISC SPEC ADDRESS
0083  00035 062030R         LDA LIS 
0084  00036 002004          INA 
0085  00037 072010R         STA DIS 
0086*034        IFNOT $DIS THEN [ER_55;RETURN] !NOT SPECIFIED ERROR 
0087  00040 162010R         LDA DIS,I 
0088  00041 002002          SZA 
0089  00042 026046R         JMP #1
0090  00043 062011R         LDA #2
0091  00044 172031R         STA ER,I
0092  00045 126032R         JMP RC..,I
0093*035        DR.RD(READI,$DIS,0)?[ER_54; RETURN] !NOT MOUNTED
0094  00046 016003X #1      JSB DR.RD 
0095  00047 000053R         DEF *+4 
0096  00050 000012R         DEF #4
0097  00051 100010R         DEF DIS,I 
0098  00052 000013R         DEF #5
0099  00053 002041          SEZ,RSS 
0100  00054 026060R         JMP #3
0101  00055 062014R         LDA #6
0102  00056 172031R         STA ER,I
0103  00057 126032R         JMP RC..,I
0104*036        IFNOT  FID.($DIS)  THEN LOCK.($DIS, 3)?[RETURN] ! LOCK
0105  00060 016011X #3      JSB FID.
0106  00061 000063R         DEF *+2 
0107  00062 100010R         DEF DIS,I 
0108  00063 002002          SZA 
0109  00064 026073R         JMP #7
0110  00065 016006X         JSB LOCK. 
0111  00066 000071R         DEF *+3 
0112  00067 100010R         DEF DIS,I 







 PAGE 0004 #01


0113  00070 000015R         DEF #8
0114  00071 002040          SEZ 
0115  00072 126032R         JMP RC..,I
0116*037        CONV. ($$@D.LT,MS,4) !SET LAST TRACK IN MESSAGE 
0117  00073 016002X #7      JSB .DRCT 
0118  00074 000013X         DEF D.LT
0119  00075 160000          LDA .A.,I 
0120  00076 072016R         STA #9
0121  00077 016007X         JSB CONV. 
0122  00100 000104R         DEF *+4 
0123  00101 100016R         DEF #9,I
0124  00102 000007R         DEF MS
0125  00103 000017R         DEF #10 
0126*038        DS.DF,$DIS_ - $$@DS.LU !SET LU FOR MOUNT CALL 
0127  00104 016002X         JSB .DRCT 
0128  00105 000014X         DEF DS.LU 
0129  00106 160000          LDA .A.,I 
0130  00107 160000          LDA .A.,I 
0131  00110 003004          CMA,INA 
0132  00111 072016X         STA DS.DF 
0133  00112 172010R         STA DIS,I 
0134*039        FOR I_DS.LU  TO D.AD(D.SDR)+120 DO[\
0135*                $I_$[T_I+4]; $T_0]  ! REMOVE FROM DIRECTORY
0136  00113 062014X         LDA DS.LU 
0137  00114 072020R         STA I 
0138  00115 026121R         JMP #12 
0139  00116 062020R #11     LDA I 
0140  00117 002004          INA 
0141  00120 072020R         STA I 
0142  00121 016012X #12     JSB D.AD
0143  00122 000124R         DEF *+2 
0144  00123 000015X         DEF D.SDR 
0145  00124 042022R         ADA #14 
0146  00125 003004          CMA,INA 
0147  00126 042020R         ADA I 
0148  00127 003004          CMA,INA 
0149  00130 002020          SSA 
0150  00131 026142R         JMP #13 
0151  00132 062020R         LDA I 
0152  00133 042017R         ADA #10 
0153  00134 072021R         STA T 
0154  00135 160000          LDA .A.,I 
0155  00136 172020R         STA I,I 
0156  00137 002400          CLA 
0157  00140 172021R         STA T,I 
0158  00141 026116R         JMP #11 
0159*040        IF $DIS = -2 THEN GO TO MOUNT 
0160  00142 162010R #13     LDA DIS,I 
0161  00143 052023R         CPA #15 
0162  00144 026161R         JMP MOUNT 
0163*041        IF $DIS = -3 THEN GO TO MOUNT  !IF SYS OR AUX THEN GO RE
0164  00145 162010R         LDA DIS,I 
0165  00146 052024R         CPA #16 
0166  00147 026161R         JMP MOUNT 
0167*042        D.RIO(WRIT)     ! RE WRITE THE DIRECTORY OF DISCS.
0168  00150 016004X         JSB D.RIO 







 PAGE 0005 #01


0169  00151 000153R         DEF *+2 
0170  00152 000025R         DEF #17 
0171*043        FM.ER (0, MSS,8)  ! SEND LAST TRACK TO LOG
0172  00153 016005X         JSB FM.ER 
0173  00154 000160R         DEF *+4 
0174  00155 000013R         DEF #5
0175  00156 000000R         DEF MSS 
0176  00157 000026R         DEF #18 
0177*044        RETURN
0178  00160 126032R         JMP RC..,I
0179*045  MOUNT:MC..(N,LIS,ER)
0180  00161 016010X MOUNT   JSB MC..
0181  00162 000166R         DEF *+4 
0182  00163 100027R         DEF N,I 
0183  00164 100030R         DEF LIS,I 
0184  00165 100031R         DEF ER,I
0185*046        RETURN
0186  00166 126032R         JMP RC..,I
0187*047        END 
0188*048        END 
0189                        END 
**  NO ERRORS*


































$END ASMB     

*
--> Assemble fmp/29033-80013_Rev-A_3
ON,ASMB,99







 PAGE 0001


0001                ASMB,B,R,L,C
**  NO ERRORS*





























































 PAGE 0002 #01


0001                ASMB,B,R,L,C
0002  00000               NAM FMGR3,5 
0003                      EXT SEG.R 

0005*** 
0006*** GUESSED BY ROBERTO SANCHO DEC/2016
0007*** 
0008  00000 062002R FMGR3 LDA TABL
0009  00001 026001X       JMP SEG.R 

0011  00002 000003R TABL  DEF *+1 

0013                      EXT LI..,DL.. 
0014  00003 000002X       DEF LI..
0015  00004 000003X       DEF DL..
0016                      EXT PU..
0017  00005 000004X       DEF PU..
0018                      END FMGR3 
**  NO ERRORS*





































$END ASMB     

*
--> Assemble fmp/29033-80013_Rev-A_4
ON,ASMB,99







 PAGE 0001


0001                ASMB,B,X,L  
**  NO ERRORS*





























































 PAGE 0002 #01


0001                ASMB,B,X,L  
0002*001  SPL, L, M, O  
0003*002        NAME FID.(8)
0004  00000                 NAM FID.,8
0005  00000         .A.     EQU  0
0006  00001         .B.     EQU  1
0007                        ENT FID.
0008                        EXT .ENTR 
0009                        EXT .DRCT 
0010                        EXT DR.RD 
0011                        EXT PK.DR 
0012                        EXT D.LT
0013                        EXT NAM.. 
0014  00000 000000  FID.V   BSS 1 
0015  00001 000001  #1      OCT 000001
0016  00002 000000  #2      OCT 000000
0017  00003 000000  PDIR8   BSS 1 
0018  00004 000000  PDIR7   BSS 1 
0019  00005 000000  PDIR6   BSS 1 
0020  00006 000000  PDIR5   BSS 1 
0021  00007 000000  PDIR3   BSS 1 
0022  00010 000000  PDIR    BSS 1 
0023  00011 000003  #3      OCT 000003
0024  00012 000002  #4      OCT 000002
0025  00013 000000  TX      BSS 1 
0026  00014 077777  #5      OCT 077777
0027  00015 000000  AREG    BSS 1 
0028*003        LET DR.RD    BE SUBROUTINE,EXTERNAL 
0029*004        LET READI    BE CONSTANT(1) 
0030*005        LET PK.DR,D.LT    BE INTEGER,EXTERNAL 
0031*006  ! 
0032*007  FID.: FUNCTION (DS)GLOBAL              !RETURNS FALSE IF A FIL
0033  00016 000000  DS      NOP 
0034  00017 000000  FID.    NOP 
0035  00020 016001X         JSB .ENTR 
0036  00021 000016R         DEF DS
0037*008                                         !EXIST ON DISC WITH ID 
0038*009                                         !DS
0039*010        LET NAM..              BE SUBROUTINE,EXTERNAL 
0040*011        DR.RD(READI,DS,0)?[GO TO RETF]   !READ THE DIRECTORY
0041  00022 016003X         JSB DR.RD 
0042  00023 000027R         DEF *+4 
0043  00024 000001R         DEF #1
0044  00025 100016R         DEF DS,I
0045  00026 000002R         DEF #2
0046  00027 002040          SEZ 
0047  00030 026115R         JMP RETF
0048*012  ! 
0049*013        PDIR8_[PDIR7_[PDIR6_[PDIR5_[PDIR3_[PDIR_@PK.DR]\
0050*          +3]+2]+1]+1]+1 
0051  00031 016002X         JSB .DRCT 
0052  00032 000004X         DEF PK.DR 
0053  00033 072010R         STA PDIR
0054  00034 042011R         ADA #3
0055  00035 072007R         STA PDIR3 
0056  00036 042012R         ADA #4







 PAGE 0003 #01


0057  00037 072006R         STA PDIR5 
0058  00040 002004          INA 
0059  00041 072005R         STA PDIR6 
0060  00042 002004          INA 
0061  00043 072004R         STA PDIR7 
0062  00044 002004          INA 
0063  00045 072003R         STA PDIR8 
0064*014        DO[TX_$PDIR;$PDIR_TX AND 77777K]
0065  00046 162010R         LDA PDIR,I
0066  00047 072013R         STA TX
0067  00050 012014R         AND #5
0068  00051 172010R         STA PDIR,I
0069*015        DO[NAM..(PK.DR);AREG_$0;$PDIR_TX]!CHECK ASC LABEL 
0070  00052 016006X         JSB NAM.. 
0071  00053 000055R         DEF *+2 
0072  00054 000004X         DEF PK.DR 
0073  00055 162002R         LDA #2,I
0074  00056 072015R         STA AREG
0075  00057 062013R         LDA TX
0076  00060 172010R         STA PDIR,I
0077*016          IF AREG THEN GOTO RETF         !IF ILLEGAL OR FLAG
0078  00061 062015R         LDA AREG
0079  00062 002002          SZA 
0080  00063 026115R         JMP RETF
0081*017        IF TX>0 THEN GOTO RETF           !NOT SET THEN NO FILE
0082  00064 062013R         LDA TX
0083  00065 003004          CMA,INA 
0084  00066 002020          SSA 
0085  00067 026115R         JMP RETF
0086*018          IF $(PDIR3 )<0 THEN GOTO RETF  !IF LABEL WORD LESS THA
0087  00070 162007R         LDA PDIR3,I 
0088  00071 002020          SSA 
0089  00072 026115R         JMP RETF
0090*019          IF $(PDIR7 )-$(PDIR8 )-1 #$D.LT THEN GOTO RETF !LTR MA
0091  00073 162003R         LDA PDIR8,I 
0092  00074 003004          CMA,INA 
0093  00075 142004R         ADA PDIR7,I 
0094  00076 007400          CCB 
0095  00077 044000          ADB .A. 
0096  00100 062005X         LDA D.LT
0097  00101 160000          LDA .A.,I 
0098  00102 054000          CPB .A. 
0099  00103 002001          RSS 
0100  00104 026115R         JMP RETF
0101*020          IF $(PDIR6 )<$(PDIR5 ) THEN GO TO RETF
0102  00105 162006R         LDA PDIR5,I 
0103  00106 003004          CMA,INA 
0104  00107 142005R         ADA PDIR6,I 
0105  00110 002020          SSA 
0106  00111 026115R         JMP RETF
0107*021        DO[FID.V_0; RETURN] 
0108  00112 002400          CLA 
0109  00113 072000R         STA FID.V 
0110  00114 126017R         JMP FID.,I
0111*022  RETF: DO[FID.V_1;RETURN]
0112  00115 002404  RETF    CLA,INA 







 PAGE 0004 #01


0113  00116 072000R         STA FID.V 
0114  00117 126017R         JMP FID.,I
0115*023        END 
0116*024  ! 
0117*025        END 
0118                        END 
**  NO ERRORS*

















































$END ASMB     

*
--> Assemble fmp/29033-80014_Rev-A
ON,ASMB,99







 PAGE 0001


0001                ASMB,B,X,L  
**  NO ERRORS*





























































 PAGE 0002 #01


0001                ASMB,B,X,L  
0002*001  SPL, L, M, O  
0003*002        NAME LI..(8)
0004  00000                 NAM LI..,8
0005  00000         .A.     EQU  0
0006  00001         .B.     EQU  1
0007                        ENT LI..
0008                        EXT .ENTR 
0009                        EXT .DIV
0010                        EXT .DRCT 
0011                        EXT D.AD
0012                        EXT .TTY
0013                        EXT O.BUF 
0014                        EXT I.BUF 
0015                        EXT D.LB
0016                        EXT BUF.
0017                        EXT .E.R. 
0018                        EXT TMP.
0019                        EXT N.OPL 
0020                        EXT OPEN. 
0021                        EXT LOCF
0022                        EXT WRITF 
0023                        EXT READF 
0024                        EXT EXEC
0025                        EXT DR.RD 
0026                        EXT CONV. 
0027                        EXT IER.
0028  00000 000000  LSTBF   BSS     2 
0029  00002 000000  LNNO    BSS 1 
0030  00003 000000  BLWD    BSS 1 
0031  00004 000000  LBF     BSS   128 
0032  00204 000000  OPFL    BSS 1 
0033  00205 000411  #1      OCT 000411
0034  00206 000000  NUL     BSS 1 
0035  00207 000000  TYPF    BSS 1 
0036  00210 000000  LIS1    BSS 1 
0037  00211 000004  #2      OCT 000004
0038  00212 177400  #3      OCT 177400
0039  00213 000040  #4      OCT 000040
0040  00214 040440  #5      OCT 040440
0041  00215 042040  #7      OCT 042040
0042  00216 041040  #9      OCT 041040
0043  00217 000311  #10     OCT 000311
0044  00220 051440  #12     OCT 051440
0045  00221 000070  #13     OCT 000070
0046  00222 000000  OPLS    BSS 1 
0047  00223 000003  #14     OCT 000003
0048  00224 000000  #15     OCT 000000
0049  00225 000000  LP      BSS 1 
0050  00226 000000  NSEC    BSS 1 
0051  00227 000000  FLU     BSS 1 
0052  00230 000000  FTYP    BSS 1 
0053  00231 000000  RECS    BSS 1 
0054  00232 000000  LLU     BSS 1 
0055  00233 000000  EQT5    BSS 1 
0056  00234 000015  #16     OCT 000015







 PAGE 0003 #01


0057  00235 000000  P36     BSS 1 
0058  00236 000000  P3      BSS 1 
0059  00237 000041  #17     OCT 000041
0060  00240 037400  #19     OCT 037400
0061  00241 173000  #20     OCT 173000
0062  00242 000000  TTY     BSS 1 
0063  00243 000000  T       BSS 1 
0064  00244 000001  #21     OCT 000001
0065  00245 020040  #25     OCT 020040
0066  00246 000000  P       BSS 1 
0067  00247 020124  #26     OCT 020124
0068  00250 036440  #27     OCT 036440
0069  00251 000002  #28     OCT 000002
0070  00252 000005  #29     OCT 000005
0071  00253 020111  #30     OCT 020111
0072  00254 047516  #31     OCT 047516
0073  00255 000000  N       BSS 1 
0074  00256 020103  #34     OCT 020103
0075  00257 051040  #35     OCT 051040
0076  00260 000000  #36     BSS 1 
0077  00261 020114  #37     OCT 020114
0078  00262 052440  #38     OCT 052440
0079  00263 020125  #40     OCT 020125
0080  00264 051511  #41     OCT 051511
0081  00265 047107  #42     OCT 047107
0082  00266 020102  #43     OCT 020102
0083  00267 046113  #44     OCT 046113
0084  00270 051075  #45     OCT 051075
0085  00271 000033  #46     OCT 000033
0086  00272 000000  TB      BSS 1 
0087  00273 000000  BF      BSS 1 
0088  00274 000000R #49     DEF LSTBF 
0089  00275 025052  #54     OCT 025052
0090  00276 000006  #56     OCT 000006
0091  00277 000000  RC      BSS 1 
0092  00300 051105  #57     OCT 051105
0093  00301 041443  #58     OCT 041443
0094  00302 000000  L       BSS 1 
0095  00303 000200  #59     OCT 000200
0096  00304 177764  #60     OCT 177764
0097  00305 000000  F       BSS 1 
0098  00306 000004R #62     DEF LBF 
0099  00307 000000  ST      BSS 1 
0100  00310 000000  WP      BSS 1 
0101  00311 000000  #65     BSS 1 
0102  00312 000044  #67     OCT 000044
0103  00313 000000  UP      BSS 1 
0104  00314 177777  #68     OCT 177777
0105  00315 000000  #70     BSS 1 
0106  00316 000010  #72     OCT 000010
0107  00317 000000  T2      BSS 1 
0108  00320 077400  #73     OCT 077400
0109  00321 120377  #74     OCT 120377
0110  00322 160000  #75     OCT 160000
0111  00323 000177  #76     OCT 000177
0112  00324 020000  #77     OCT 020000







 PAGE 0004 #01


0113  00325 177640  #79     OCT 177640
0114  00326 177740  #80     OCT 177740
0115  00327 077577  #81     OCT 077577
0116  00330 000007  #84     OCT 000007
0117  00331 030060  #85     OCT 030060
0118  00332 020060  #86     OCT 020060
0119  00333 000000  #88     BSS 1 
0120  00334 030040  #90     OCT 030040
0121  00335 000012  #91     OCT 000012
0122  00336 177733  #94     OCT 177733
0123  00337 000000  #95     BSS 1 
0124  00340 000000  #96     BSS 1 
0125*003  ! 
0126*004  !     LI.. IS THE RTE FMGR FILE LIST MODULE 
0127*005  !          IT IS ENTERED ON COMMAND 
0128*006  ! 
0129*007  !     LI,NAMR,TY
0130*008  ! 
0131*009  !        WHERE: 
0132*010  ! 
0133*011  ! 
0134*012  !         NAMR    IS THE NAME REFERENCE INCLUDING 
0135*013  !                 SECURITY CODE AND DISC ID 
0136*014  ! 
0137*015  !         TY     IS THE LISTING TYPE AND IS ASCII:
0138*016  ! 
0139*017  !             S OR A OR NULL SOURCE WITH LINE NUMBERS 
0140*018  !             B              BINARY DUMP
0141*019  !             D              DIRECTORY HEAD ONLY
0142*020  ! 
0143*021  ! 
0144*022  !     EACH LISTING WILL BE PROCEEDED BY THE HEAD: 
0145*023  ! 
0146*024  !      NAMEL T=XXXXX IS ON PK XXXXX USING XXXX BLKS R=XXXX
0147*025  ! 
0148*026  ! 
0149*027  ! 
0150*028  ! 
0151*029  ! 
0152*030  !     S FORMAT IS A BLANK FOLLOWED BY 4 DIGIT 
0153*031  !        LINE NUMBER FOLLOWED BY TWO BLANKS FOLLOWED
0154*032  !       BY THE RECORD.
0155*033  ! 
0156*034  !     B FORMAT IS : 
0157*035  !       A)THE RECORD HEAD: REC# XXXXX 
0158*036  !       B)N LINES FORMATED AS FOLLOWS 
0159*037  !         8 5-DIGIT OCTAL NUMBERS SEPERATED BY BLANKS 
0160*038  !           AND FOLLOWED BY A "*" FOLLOWED BY THE 
0161*039  !           16 ASCII CHARACTERS THE DIGITS REP. 
0162*040  !            NON-PRINTING CHARACTERS WILL BE FILLED 
0163*041  !            WITH BLANKS
0164*042  ! 
0165*043  !     D FORMAT IS THE HEAD ONLY 
0166*044  ! 
0167*045  ! 
0168*046  ! 







 PAGE 0005 #01


0169*047  !     DEFINE EXTERNALS
0170*048  ! 
0171*049        LET D.AD,.TTY BE FUNCTION,EXTERNAL
0172*050  ! 
0173*051        LET O.BUF,I.BUF,D.LB,BUF.,.E.R.,\ 
0174*           TMP.,N.OPL        BE INTEGER,EXTERNAL 
0175*052        LET OPEN.,LOCF,WRITF,READF,EXEC,\ 
0176*          DR.RD   ,\ 
0177*                 CONV.,IER. \
0178*                             BE SUBROUTINE,EXTERNAL
0179*053  ! 
0180*054  !     DEFINE INTERNAL ROUTINES
0181*055  ! 
0182*056        LET SETA,WRIT,SPACE    BE SUBROUTINE
0183*057  ! 
0184*058  !     DEFINE  CONSTANTS 
0185*059  !                                        HL 
0186*060        LET BL.T      BE CONSTANT (20124K)! T 
0187*061        LET EQ.BL     BE CONSTANT (36440K)!=
0188*062        LET BL.I      BE CONSTANT (20111K)! I 
0189*063        LET S.BL      BE CONSTANT (51440K)!S
0190*064        LET O.N       BE CONSTANT (47516K)!ON 
0191*065        LET BL.C      BE CONSTANT (20103K)! C 
0192*066        LET R.BL      BE CONSTANT (51040K)!R
0193*067        LET BL.L      BE CONSTANT (20114K)! L 
0194*068        LET U.BL      BE CONSTANT (52440K)!U
0195*069        LET BL.U      BE CONSTANT (20125K)! U 
0196*070        LET S.I       BE CONSTANT (51511K)!SI 
0197*071        LET N.G       BE CONSTANT (47107K)!NG 
0198*072        LET BL.B      BE CONSTANT (20102K)! B 
0199*073        LET L.K       BE CONSTANT (46113K)!LK 
0200*074        LET R.EQ      BE CONSTANT (51075K)!R= 
0201*075        LET A.BL      BE CONSTANT (40440K)!A
0202*076        LET B.BL      BE CONSTANT (41040K)!B
0203*077        LET D.BL      BE CONSTANT (42040K)!D
0204*078        LET R.E       BE CONSTANT (51105K)!RE 
0205*079        LET C.NO      BE CONSTANT (41443K)!C# 
0206*080        LET DST       BE CONSTANT (25052K)!** 
0207*081  ! 
0208*082  !     DEFINE BUFFER SET UP
0209*083  ! 
0210*084        LET LSTBF(2),LNNO,BLWD,LBF(128) BE INTEGER
0211*085  LI..: SUBROUTINE(NOC,LIS ,ER) GLOBAL
0212  00341 000000  NOC     NOP 
0213  00342 000000  LIS     NOP 
0214  00343 000000  ER      NOP 
0215  00344 000000  LI..    NOP 
0216  00345 016001X         JSB .ENTR 
0217  00346 000341R         DEF NOC 
0218*086  ! 
0219*087        OPFL_411K   !SET DEFAULT OPEN  OPTION 
0220  00347 062205R         LDA #1
0221  00350 072204R         STA OPFL
0222*088        NUL_0    !PRESET  NULL PRAM FLAG
0223  00351 002400          CLA 
0224  00352 072206R         STA NUL 







 PAGE 0006 #01


0225*089        TYPF_($([LIS1_@LIS +1]+4) AND 177400K)+40K
0226  00353 062342R         LDA LIS 
0227  00354 002004          INA 
0228  00355 072210R         STA LIS1
0229  00356 042211R         ADA #2
0230  00357 160000          LDA .A.,I 
0231  00360 012212R         AND #3
0232  00361 042213R         ADA #4
0233  00362 072207R         STA TYPF
0234*090        IF TYPF=A.BL THEN GO TO STYP    !CHECK FOR
0235  00363 052214R         CPA #5
0236  00364 026414R         JMP STYP
0237*091        IF TYPF=40K THEN[NUL_1;GO TO STYP]!LEGAL
0238  00365 062207R         LDA TYPF
0239  00366 052213R         CPA #4
0240  00367 002001          RSS 
0241  00370 026374R         JMP #6
0242  00371 002404          CLA,INA 
0243  00372 072206R         STA NUL 
0244  00373 026414R         JMP STYP
0245*092        IF TYPF=D.BL THEN GO TO TYPOK   !OPTIONS
0246  00374 062207R #6      LDA TYPF
0247  00375 052215R         CPA #7
0248  00376 026416R         JMP TYPOK 
0249*093        IF TYPF=B.BL THEN[OPFL_311K;GO TO TYPOK]!NULL,A,S,B,D 
0250  00377 062207R         LDA TYPF
0251  00400 052216R         CPA #9
0252  00401 002001          RSS 
0253  00402 026406R         JMP #8
0254  00403 062217R         LDA #10 
0255  00404 072204R         STA OPFL
0256  00405 026416R         JMP TYPOK 
0257*094        IF TYPF#S.BL THEN [ER_56;RETURN]!NO; RETURN 56
0258  00406 062207R #8      LDA TYPF
0259  00407 052220R         CPA #12 
0260  00410 026414R         JMP STYP
0261  00411 062221R         LDA #13 
0262  00412 172343R         STA ER,I
0263  00413 126344R         JMP LI..,I
0264*095  ! 
0265*096  STYP: TYPF_S.BL                       !FOURCE NULL,ATOS 
0266  00414 062220R STYP    LDA #12 
0267  00415 072207R         STA TYPF
0268*097  ! 
0269*098  TYPOK:OPLS_ D.AD(TMP.) +3        !GET LIST UNIT OP LIST 
0270  00416 016004X TYPOK   JSB D.AD
0271  00417 000421R         DEF *+2 
0272  00420 000013X         DEF TMP.
0273  00421 042223R         ADA #14 
0274  00422 072222R         STA OPLS
0275*099  ! 
0276*100        OPEN.(O.BUF,TMP.,$OPLS, 0) !OPEN LIST FILE
0277  00423 016015X         JSB OPEN. 
0278  00424 000431R         DEF *+5 
0279  00425 000006X         DEF O.BUF 
0280  00426 000013X         DEF TMP.







 PAGE 0007 #01


0281  00427 100222R         DEF OPLS,I
0282  00430 000224R         DEF #15 
0283*101  ! 
0284*102        OPEN.(I.BUF,$LIS1,N.OPL,OPFL) !OPEN FILE TO BE LISTED 
0285  00431 016015X         JSB OPEN. 
0286  00432 000437R         DEF *+5 
0287  00433 000007X         DEF I.BUF 
0288  00434 100210R         DEF LIS1,I
0289  00435 000014X         DEF N.OPL 
0290  00436 000204R         DEF OPFL
0291*103  ! 
0292*104        LOCF(I.BUF,.E.R.,LP,LP,LP,NSEC,FLU,FTYP,RECS) 
0293  00437 016016X         JSB LOCF
0294  00440 000452R         DEF *+10
0295  00441 000007X         DEF I.BUF 
0296  00442 000012X         DEF .E.R. 
0297  00443 000225R         DEF LP
0298  00444 000225R         DEF LP
0299  00445 000225R         DEF LP
0300  00446 000226R         DEF NSEC
0301  00447 000227R         DEF FLU 
0302  00450 000230R         DEF FTYP
0303  00451 000231R         DEF RECS
0304*105        IFNOT NUL THEN GO TO OK !IF NULL THEN CHOSE THE RIGHT OP
0305  00452 062206R         LDA NUL 
0306  00453 002003          SZA,RSS 
0307  00454 026470R         JMP OK
0308*106        IFNOT FTYP THEN GO TO OK  !TYPE ZERO DEFAULT IS ASC 
0309  00455 062230R         LDA FTYP
0310  00456 002003          SZA,RSS 
0311  00457 026470R         JMP OK
0312*107        IF FTYP=3 THEN GO TO OK  !SAME FOR TYPE 3 
0313  00460 062230R         LDA FTYP
0314  00461 052223R         CPA #14 
0315  00462 026470R         JMP OK
0316*108        IF FTYP=4 THEN GO TO OK  !SAME FOR TYPE 4 
0317  00463 062230R         LDA FTYP
0318  00464 052211R         CPA #2
0319  00465 026470R         JMP OK
0320*109  CTYP: TYPF_B.BL      !OTHERWISE USE BINARY FORMAT 
0321  00466 062216R CTYP    LDA #9
0322  00467 072207R         STA TYPF
0323*110  ! 
0324*111  OK:   LOCF(O.BUF,.E.R.,LP,LP,LP,LP,LLU) !GET LIST LU
0325  00470 016016X OK      JSB LOCF
0326  00471 000501R         DEF *+8 
0327  00472 000006X         DEF O.BUF 
0328  00473 000012X         DEF .E.R. 
0329  00474 000225R         DEF LP
0330  00475 000225R         DEF LP
0331  00476 000225R         DEF LP
0332  00477 000225R         DEF LP
0333  00500 000232R         DEF LLU 
0334*112  ! 
0335*113        EXEC(13,LLU,EQT5)  !GET LIST LU TYPE CODED
0336  00501 016021X         JSB EXEC







 PAGE 0008 #01


0337  00502 000506R         DEF *+4 
0338  00503 000234R         DEF #16 
0339  00504 000232R         DEF LLU 
0340  00505 000233R         DEF EQT5
0341*114  ! 
0342*115        P36_[P3_@LIS +4]+33  !SET UP LIST ADDRESSES 
0343  00506 062342R         LDA LIS 
0344  00507 042211R         ADA #2
0345  00510 072236R         STA P3
0346  00511 042237R         ADA #17 
0347  00512 072235R         STA P36 
0348*116        LP_1          !SET LINE PRINTER FLAG
0349  00513 002404          CLA,INA 
0350  00514 072225R         STA LP
0351*117        IF (EQT5 AND 37400K)<5000K THEN LP_0
0352  00515 062233R         LDA EQT5
0353  00516 012240R         AND #19 
0354  00517 042241R         ADA #20 
0355  00520 002021          SSA,RSS 
0356  00521 026524R         JMP #18 
0357  00522 002400          CLA 
0358  00523 072225R         STA LP
0359*118        TTY_.TTY(LLU) 
0360  00524 016005X #18     JSB .TTY
0361  00525 000527R         DEF *+2 
0362  00526 000232R         DEF LLU 
0363  00527 072242R         STA TTY 
0364*119        FOR T_ P3 TO P36 DO[$T_20040K] ! BLANK THE BUFFER 
0365  00530 062236R         LDA P3
0366  00531 072243R         STA T 
0367  00532 026536R         JMP #23 
0368  00533 062243R #22     LDA T 
0369  00534 002004          INA 
0370  00535 072243R         STA T 
0371  00536 062243R #23     LDA T 
0372  00537 003004          CMA,INA 
0373  00540 042235R         ADA P36 
0374  00541 002020          SSA 
0375  00542 026546R         JMP #24 
0376  00543 062245R         LDA #25 
0377  00544 172243R         STA T,I 
0378  00545 026533R         JMP #22 
0379*120        P_P3-1
0380  00546 003400  #24     CCA 
0381  00547 042236R         ADA P3
0382  00550 072246R         STA P 
0383*121        SETA(BL.T)     !SET BLANK T 
0384  00551 017420R         JSB SETA
0385  00552 000554R         DEF *+2 
0386  00553 000247R         DEF #26 
0387*122        SETA(EQ.BL)    !SET = BLANK 
0388  00554 017420R         JSB SETA
0389  00555 000557R         DEF *+2 
0390  00556 000250R         DEF #27 
0391*123        P_P+2 
0392  00557 062246R         LDA P 







 PAGE 0009 #01


0393  00560 042251R         ADA #28 
0394  00561 072246R         STA P 
0395*124        CONV.(FTYP,$P,5) !SET TYPE
0396  00562 016023X         JSB CONV. 
0397  00563 000567R         DEF *+4 
0398  00564 000230R         DEF FTYP
0399  00565 100246R         DEF P,I 
0400  00566 000252R         DEF #29 
0401*125        SETA(BL.I)     !SET BLANK I 
0402  00567 017420R         JSB SETA
0403  00570 000572R         DEF *+2 
0404  00571 000253R         DEF #30 
0405*126        SETA(S.BL)     !SET S BLANK 
0406  00572 017420R         JSB SETA
0407  00573 000575R         DEF *+2 
0408  00574 000220R         DEF #12 
0409*127        SETA (O.N)     !SET ON
0410  00575 017420R         JSB SETA
0411  00576 000600R         DEF *+2 
0412  00577 000254R         DEF #31 
0413*128        IF FTYP THEN[SETA(BL.C);SETA(R.BL);DR.RD(1,-FLU,\ 
0414*                     0);T_$$@D.LB;N_5],\ 
0415*               ELSE[SETA(BL.L);SETA(U.BL);T_FLU;N_2] 
0416  00600 062230R         LDA FTYP
0417  00601 002003          SZA,RSS 
0418  00602 026631R         JMP #32 
0419  00603 017420R         JSB SETA
0420  00604 000606R         DEF *+2 
0421  00605 000256R         DEF #34 
0422  00606 017420R         JSB SETA
0423  00607 000611R         DEF *+2 
0424  00610 000257R         DEF #35 
0425  00611 062227R         LDA FLU 
0426  00612 003004          CMA,INA 
0427  00613 072260R         STA #36 
0428  00614 016022X         JSB DR.RD 
0429  00615 000621R         DEF *+4 
0430  00616 000244R         DEF #21 
0431  00617 000260R         DEF #36 
0432  00620 000224R         DEF #15 
0433  00621 016003X         JSB .DRCT 
0434  00622 000010X         DEF D.LB
0435  00623 160000          LDA .A.,I 
0436  00624 160000          LDA .A.,I 
0437  00625 072243R         STA T 
0438  00626 062252R         LDA #29 
0439  00627 072255R         STA N 
0440  00630 026643R         JMP #33 
0441  00631 017420R #32     JSB SETA
0442  00632 000634R         DEF *+2 
0443  00633 000261R         DEF #37 
0444  00634 017420R         JSB SETA
0445  00635 000637R         DEF *+2 
0446  00636 000262R         DEF #38 
0447  00637 062227R         LDA FLU 
0448  00640 072243R         STA T 







 PAGE 0010 #01


0449  00641 062251R         LDA #28 
0450  00642 072255R         STA N 
0451*129        P_P + N/2 
0452  00643 062255R #33     LDA N 
0453  00644 006400          CLB 
0454  00645 002020          SSA 
0455  00646 007000          CMB 
0456  00647 016002X         JSB .DIV
0457  00650 000251R         DEF #28 
0458  00651 042246R         ADA P 
0459  00652 072246R         STA P 
0460*130        CONV.(T,$P,N) 
0461  00653 016023X         JSB CONV. 
0462  00654 000660R         DEF *+4 
0463  00655 000243R         DEF T 
0464  00656 100246R         DEF P,I 
0465  00657 000255R         DEF N 
0466*131        IFNOT FTYP THEN[N_13;GO TO WRHD]
0467  00660 062230R         LDA FTYP
0468  00661 002002          SZA 
0469  00662 026666R         JMP #39 
0470  00663 062234R         LDA #16 
0471  00664 072255R         STA N 
0472  00665 026744R         JMP WRHD
0473*132        SETA(BL.U)     !SET   USING 
0474  00666 017420R #39     JSB SETA
0475  00667 000671R         DEF *+2 
0476  00670 000263R         DEF #40 
0477*133        SETA(S.I )
0478  00671 017420R         JSB SETA
0479  00672 000674R         DEF *+2 
0480  00673 000264R         DEF #41 
0481*134        SETA(N.G )
0482  00674 017420R         JSB SETA
0483  00675 000677R         DEF *+2 
0484  00676 000265R         DEF #42 
0485*135        P_P+3 
0486  00677 062246R         LDA P 
0487  00700 042223R         ADA #14 
0488  00701 072246R         STA P 
0489*136  ! 
0490*137        CONV.(NSEC/2,$P,5)
0491  00702 062226R         LDA NSEC
0492  00703 006400          CLB 
0493  00704 002020          SSA 
0494  00705 007000          CMB 
0495  00706 016002X         JSB .DIV
0496  00707 000251R         DEF #28 
0497  00710 072260R         STA #36 
0498  00711 016023X         JSB CONV. 
0499  00712 000716R         DEF *+4 
0500  00713 000260R         DEF #36 
0501  00714 100246R         DEF P,I 
0502  00715 000252R         DEF #29 
0503*138  ! 
0504*139  ! 







 PAGE 0011 #01


0505*140        SETA(BL.B)     !SET BLKS R= 
0506  00716 017420R         JSB SETA
0507  00717 000721R         DEF *+2 
0508  00720 000266R         DEF #43 
0509*141        SETA(L.K) 
0510  00721 017420R         JSB SETA
0511  00722 000724R         DEF *+2 
0512  00723 000267R         DEF #44 
0513*142        SETA(S.BL)
0514  00724 017420R         JSB SETA
0515  00725 000727R         DEF *+2 
0516  00726 000220R         DEF #12 
0517*143        SETA(R.EQ)
0518  00727 017420R         JSB SETA
0519  00730 000732R         DEF *+2 
0520  00731 000270R         DEF #45 
0521*144  ! 
0522*145        P_P+2 
0523  00732 062246R         LDA P 
0524  00733 042251R         ADA #28 
0525  00734 072246R         STA P 
0526*146  ! 
0527*147        CONV.(RECS,$P,4)
0528  00735 016023X         JSB CONV. 
0529  00736 000742R         DEF *+4 
0530  00737 000231R         DEF RECS
0531  00740 100246R         DEF P,I 
0532  00741 000211R         DEF #2
0533*148  ! 
0534*149        N_27
0535  00742 062271R         LDA #46 
0536  00743 072255R         STA N 
0537*150  ! 
0538*151  WRHD: TB_[BF_[IF TYPF=S.BL THEN @LSTBF,ELSE D.AD (BUF.)]]+1 
0539  00744 062207R WRHD    LDA TYPF
0540  00745 052220R         CPA #12 
0541  00746 002001          RSS 
0542  00747 026752R         JMP #47 
0543  00750 062274R         LDA #49 
0544  00751 026755R         JMP #48 
0545  00752 016004X #47     JSB D.AD
0546  00753 000755R         DEF *+2 
0547  00754 000011X         DEF BUF.
0548  00755 072273R #48     STA BF
0549  00756 002004          INA 
0550  00757 072272R         STA TB
0551*152        $BF_20040K                         !BLANK FIRST WD
0552  00760 062245R         LDA #25 
0553  00761 172273R         STA BF,I
0554*153        P_LIS1
0555  00762 062210R         LDA LIS1
0556  00763 072246R         STA P 
0557*154        FOR T_TB TO TB+N DO [$T_$P;P_P+1] !MOVE LINE
0558  00764 062272R         LDA TB
0559  00765 072243R         STA T 
0560  00766 026772R         JMP #51 







 PAGE 0012 #01


0561  00767 062243R #50     LDA T 
0562  00770 002004          INA 
0563  00771 072243R         STA T 
0564  00772 062272R #51     LDA TB
0565  00773 042255R         ADA N 
0566  00774 003004          CMA,INA 
0567  00775 042243R         ADA T 
0568  00776 003004          CMA,INA 
0569  00777 002020          SSA 
0570  01000 027007R         JMP #52 
0571  01001 162246R         LDA P,I 
0572  01002 172243R         STA T,I 
0573  01003 062246R         LDA P 
0574  01004 002004          INA 
0575  01005 072246R         STA P 
0576  01006 026767R         JMP #50 
0577*155        IF LIS #3 THEN[$([P_TB+1]+1)_DST;\IF FACK FILE REPLACE N
0578*                         $P_DST;$TB_DST]! WITH "******"
0579  01007 162342R #52     LDA LIS,I 
0580  01010 052223R         CPA #14 
0581  01011 027024R         JMP #53 
0582  01012 062272R         LDA TB
0583  01013 002004          INA 
0584  01014 072246R         STA P 
0585  01015 002004          INA 
0586  01016 066275R         LDB #54 
0587  01017 174000          STB .A.,I 
0588  01020 062275R         LDA #54 
0589  01021 172246R         STA P,I 
0590  01022 062275R         LDA #54 
0591  01023 172272R         STA TB,I
0592*156        WRIT   !   WRITE THE HEAD 
0593  01024 017431R #53     JSB WRIT
0594  01025 001026R         DEF *+1 
0595*157  ! 
0596*158        IF TYPF=D.BL THEN GOTO EOF  !DONE IF HEAD ONLY
0597  01026 062207R         LDA TYPF
0598  01027 052215R         CPA #7
0599  01030 027406R         JMP EOF 
0600*159        SPACE  !SPACE A LINE
0601  01031 017465R         JSB SPACE 
0602  01032 001033R         DEF *+1 
0603*160        IF FTYP=6 THEN $(D.AD(I.BUF)+2)_1 !FOURCE TYPE 6 TO ONE 
0604  01033 062230R         LDA FTYP
0605  01034 052276R         CPA #56 
0606  01035 002001          RSS 
0607  01036 027045R         JMP #55 
0608  01037 016004X         JSB D.AD
0609  01040 001042R         DEF *+2 
0610  01041 000007X         DEF I.BUF 
0611  01042 042251R         ADA #28 
0612  01043 006404          CLB,INB 
0613  01044 174000          STB .A.,I 
0614*161        RC_1
0615  01045 002404  #55     CLA,INA 
0616  01046 072277R         STA RC







 PAGE 0013 #01


0617*162  NEXT: P_BF          !INITILIZE BUFFER POINTER 
0618  01047 062273R NEXT    LDA BF
0619  01050 072246R         STA P 
0620*163        SETA(R.E)      ! SET UP 
0621  01051 017420R         JSB SETA
0622  01052 001054R         DEF *+2 
0623  01053 000300R         DEF #57 
0624*164        SETA(C.NO)     !   REC# XXXXX 
0625  01054 017420R         JSB SETA
0626  01055 001057R         DEF *+2 
0627  01056 000301R         DEF #58 
0628*165        SETA(20040K)
0629  01057 017420R         JSB SETA
0630  01060 001062R         DEF *+2 
0631  01061 000245R         DEF #25 
0632*166        P_P+2 
0633  01062 062246R         LDA P 
0634  01063 042251R         ADA #28 
0635  01064 072246R         STA P 
0636*167        CONV.(RC,$P,5)! SET NUMBER
0637  01065 016023X         JSB CONV. 
0638  01066 001072R         DEF *+4 
0639  01067 000277R         DEF RC
0640  01070 100246R         DEF P,I 
0641  01071 000252R         DEF #29 
0642*168        READF(I.BUF,.E.R.,LBF,128,L) ! READ RECORD
0643  01072 016020X         JSB READF 
0644  01073 001101R         DEF *+6 
0645  01074 000007X         DEF I.BUF 
0646  01075 000012X         DEF .E.R. 
0647  01076 000004R         DEF LBF 
0648  01077 000303R         DEF #59 
0649  01100 000302R         DEF L 
0650*169        IF .E.R.= -12  THEN GO TO EOF !IF EOF-GO EXIT 
0651  01101 062012X         LDA .E.R. 
0652  01102 052304R         CPA #60 
0653  01103 027406R         JMP EOF 
0654*170        IER.                         !CHECK FOR ERRORS
0655  01104 016024X         JSB IER.
0656  01105 001106R         DEF *+1 
0657*171        IF L <0 THEN GO TO EOF       !SOFT EOF? 
0658  01106 062302R         LDA L 
0659  01107 002020          SSA 
0660  01110 027406R         JMP EOF 
0661*172        N_L+3 
0662  01111 062302R         LDA L 
0663  01112 042223R         ADA #14 
0664  01113 072255R         STA N 
0665*173        IF TYPF=S.BL THEN[CONV.(RC,LNNO,4);BLWD_20040K;\
0666*                    L_0;GO TO WRTIT]!JUST LISTING - GO WRIT
0667  01114 062207R         LDA TYPF
0668  01115 052220R         CPA #12 
0669  01116 002001          RSS 
0670  01117 027132R         JMP #61 
0671  01120 016023X         JSB CONV. 
0672  01121 001125R         DEF *+4 







 PAGE 0014 #01


0673  01122 000277R         DEF RC
0674  01123 000002R         DEF LNNO
0675  01124 000211R         DEF #2
0676  01125 062245R         LDA #25 
0677  01126 072003R         STA BLWD
0678  01127 002400          CLA 
0679  01130 072302R         STA L 
0680  01131 027403R         JMP WRTIT 
0681*174  ! 
0682*175        SPACE         !SPACE A LINE 
0683  01132 017465R #61     JSB SPACE 
0684  01133 001134R         DEF *+1 
0685*176        N_5           !WRITE THE RECORD NUMBER
0686  01134 062252R         LDA #29 
0687  01135 072255R         STA N 
0688*177        WRIT          ! 
0689  01136 017431R         JSB WRIT
0690  01137 001140R         DEF *+1 
0691*178        SPACE         !SPACE A LINE 
0692  01140 017465R         JSB SPACE 
0693  01141 001142R         DEF *+1 
0694*179  ! 
0695*180        F_@LBF        !SET BUFFER POINTER 
0696  01142 062306R         LDA #62 
0697  01143 072305R         STA F 
0698*181  NEXTL:IFNOT L THEN [RC_RC+1;GO TO NEXT] !IF NO DATA GET NEXT
0699  01144 062302R NEXTL   LDA L 
0700  01145 002002          SZA 
0701  01146 027153R         JMP #63 
0702  01147 062277R         LDA RC
0703  01150 002004          INA 
0704  01151 072277R         STA RC
0705  01152 027047R         JMP NEXT
0706*182        P_[ST_[WP,T_TB]+27]+1   !INITILIZE POINTERS 
0707  01153 062272R #63     LDA TB
0708  01154 072310R         STA WP
0709  01155 072243R         STA T 
0710  01156 042271R         ADA #46 
0711  01157 072307R         STA ST
0712  01160 002004          INA 
0713  01161 072246R         STA P 
0714*183        REPEAT 36 TIMES DO[ $T_20040K; T_T+1] 
0715  01162 062312R         LDA #67 
0716  01163 072311R         STA #65 
0717  01164 003400  #64     CCA 
0718  01165 042311R         ADA #65 
0719  01166 072311R         STA #65 
0720  01167 002020          SSA 
0721  01170 027177R         JMP #66 
0722  01171 062245R         LDA #25 
0723  01172 172243R         STA T,I 
0724  01173 062243R         LDA T 
0725  01174 002004          INA 
0726  01175 072243R         STA T 
0727  01176 027164R         JMP #64 
0728*184        UP_ -1        !SET UPPER FLAG TRUE







 PAGE 0015 #01


0729  01177 003400  #66     CCA 
0730  01200 072313R         STA UP
0731*185        REPEAT 8 TIMES DO THRU PTSTP
0732  01201 062316R         LDA #72 
0733  01202 072315R         STA #70 
0734  01203 003400  #69     CCA 
0735  01204 042315R         ADA #70 
0736  01205 072315R         STA #70 
0737  01206 002020          SSA 
0738  01207 027365R         JMP PREPR 
0739*186        IF[T2_ [T_$F]AND 77400K]>57400K THEN GOTO BLANK 
0740  01210 162305R         LDA F,I 
0741  01211 072243R         STA T 
0742  01212 012320R         AND #73 
0743  01213 072317R         STA T2
0744  01214 042321R         ADA #74 
0745  01215 002021          SSA,RSS 
0746  01216 027223R         JMP BLANK 
0747*187        IF T2>17777K THEN GOTO OKUP 
0748  01217 062317R         LDA T2
0749  01220 042322R         ADA #75 
0750  01221 002021          SSA,RSS 
0751  01222 027227R         JMP OKUP
0752*188  ! 
0753*189  BLANK:T_ (T AND 177K)+20000K
0754  01223 062243R BLANK   LDA T 
0755  01224 012323R         AND #76 
0756  01225 042324R         ADA #77 
0757  01226 072243R         STA T 
0758*190  ! 
0759*191  OKUP: IF [T2_($F AND 177K)]<140K THEN[IF  T2> 37K THEN\ 
0760*          GO TO OKLOW] 
0761  01227 162305R OKUP    LDA F,I 
0762  01230 012323R         AND #76 
0763  01231 072317R         STA T2
0764  01232 042325R         ADA #79 
0765  01233 002021          SSA,RSS 
0766  01234 027241R         JMP #78 
0767  01235 062317R         LDA T2
0768  01236 042326R         ADA #80 
0769  01237 002021          SSA,RSS 
0770  01240 027245R         JMP OKLOW 
0771*192  ! 
0772*193        T_ (T AND  77400K) +40K 
0773  01241 062243R #78     LDA T 
0774  01242 012320R         AND #73 
0775  01243 042213R         ADA #4
0776  01244 072243R         STA T 
0777*194  ! 
0778*195  OKLOW:DO[ $P_T AND 77577K;P_P+1]
0779  01245 062243R OKLOW   LDA T 
0780  01246 012327R         AND #81 
0781  01247 172246R         STA P,I 
0782  01250 062246R         LDA P 
0783  01251 002004          INA 
0784  01252 072246R         STA P 







 PAGE 0016 #01


0785*196  ! 
0786*197        T2_   [T_$F-<1] AND 1 
0787  01253 162305R         LDA F,I 
0788  01254 001200          RAL 
0789  01255 072243R         STA T 
0790  01256 012244R         AND #21 
0791  01257 072317R         STA T2
0792*198  ! 
0793*199        $WP_[IF UP THEN (T2-<8)+([T_T-<3] AND 7)+30060K,\ 
0794*                 ELSE T2 + 20060K] 
0795  01260 062313R         LDA UP
0796  01261 002003          SZA,RSS 
0797  01262 027276R         JMP #82 
0798  01263 062317R         LDA T2
0799  01264 001727          ALF,ALF 
0800  01265 066243R         LDB T 
0801  01266 005723          BLF,RBR 
0802  01267 076243R         STB T 
0803  01270 072260R         STA #36 
0804  01271 060001          LDA .B. 
0805  01272 012330R         AND #84 
0806  01273 042260R         ADA #36 
0807  01274 042331R         ADA #85 
0808  01275 027300R         JMP #83 
0809  01276 062317R #82     LDA T2
0810  01277 042332R         ADA #86 
0811  01300 172310R #83     STA WP,I
0812*200  ! 
0813*201        REPEAT 2 TIMES DO[ \
0814*       $[WP_WP+1]_(([T_T-<3] AND 7)-<8)+\
0815*                   ([T_T-<3] AND 7)+ 30060K] 
0816  01301 062251R         LDA #28 
0817  01302 072333R         STA #88 
0818  01303 003400  #87     CCA 
0819  01304 042333R         ADA #88 
0820  01305 072333R         STA #88 
0821  01306 002020          SSA 
0822  01307 027332R         JMP #89 
0823  01310 062243R         LDA T 
0824  01311 001723          ALF,RAR 
0825  01312 072243R         STA T 
0826  01313 012330R         AND #84 
0827  01314 001727          ALF,ALF 
0828  01315 066243R         LDB T 
0829  01316 005723          BLF,RBR 
0830  01317 076243R         STB T 
0831  01320 072260R         STA #36 
0832  01321 060001          LDA .B. 
0833  01322 012330R         AND #84 
0834  01323 042260R         ADA #36 
0835  01324 042331R         ADA #85 
0836  01325 066310R         LDB WP
0837  01326 006004          INB 
0838  01327 076310R         STB WP
0839  01330 170001          STA .B.,I 
0840  01331 027303R         JMP #87 







 PAGE 0017 #01


0841*202  ! 
0842*203        IF UP THEN GOTO PTSTP 
0843  01332 062313R #89     LDA UP
0844  01333 002002          SZA 
0845  01334 027346R         JMP PTSTP 
0846*204  ! 
0847*205        $[WP_WP+1]_(((T-<3) AND 7)-<8)+30040K 
0848  01335 062243R         LDA T 
0849  01336 001723          ALF,RAR 
0850  01337 012330R         AND #84 
0851  01340 001727          ALF,ALF 
0852  01341 042334R         ADA #90 
0853  01342 066310R         LDB WP
0854  01343 006004          INB 
0855  01344 076310R         STB WP
0856  01345 170001          STA .B.,I 
0857*206  ! 
0858*207  PTSTP:DO[WP_WP+1;UP_NOT UP;F_F+1;IFNOT [L_L-1] THEN\
0859*           GO TO PREPR]
0860  01346 062310R PTSTP   LDA WP
0861  01347 002004          INA 
0862  01350 072310R         STA WP
0863  01351 062313R         LDA UP
0864  01352 003000          CMA 
0865  01353 072313R         STA UP
0866  01354 062305R         LDA F 
0867  01355 002004          INA 
0868  01356 072305R         STA F 
0869  01357 003400          CCA 
0870  01360 042302R         ADA L 
0871  01361 072302R         STA L 
0872  01362 002003          SZA,RSS 
0873  01363 027365R         JMP PREPR 
0874  01364 027203R         JMP #69 
0875*208  ! 
0876*209  ! 
0877*210  PREPR:IF $[P_P-1]=20040K THEN GO TO PREPR  !FIND LAST 
0878  01365 003400  PREPR   CCA 
0879  01366 042246R         ADA P 
0880  01367 072246R         STA P 
0881  01370 160000          LDA .A.,I 
0882  01371 052245R         CPA #25 
0883  01372 027365R         JMP PREPR 
0884*211                                             !NON BLANK 
0885*212        N_  P-TB+1      !PRINT LENGTH 
0886  01373 062272R         LDA TB
0887  01374 003004          CMA,INA 
0888  01375 042246R         ADA P 
0889  01376 002004          INA 
0890  01377 072255R         STA N 
0891*213  ! 
0892*214        $ST_  $ST +12K  !SET THE STAR SEPERATOR 
0893  01400 162307R         LDA ST,I
0894  01401 042335R         ADA #91 
0895  01402 172307R         STA ST,I
0896*215  ! 







 PAGE 0018 #01


0897*216  WRTIT:WRIT            !TRANSMIT THE LINE
0898  01403 017431R WRTIT   JSB WRIT
0899  01404 001405R         DEF *+1 
0900*217  ! 
0901*218        GOTO NEXTL      !GO DO NEXT LINE
0902  01405 027144R         JMP NEXTL 
0903*219  ! 
0904*220  EOF:  WRITF(O.BUF,.E.R.,$BF,-1) !WRITE EOF
0905  01406 016017X EOF     JSB WRITF 
0906  01407 001414R         DEF *+5 
0907  01410 000006X         DEF O.BUF 
0908  01411 000012X         DEF .E.R. 
0909  01412 100273R         DEF BF,I
0910  01413 000314R         DEF #68 
0911*221        IER.
0912  01414 016024X         JSB IER.
0913  01415 001416R         DEF *+1 
0914*222        RETURN
0915  01416 126344R         JMP LI..,I
0916*223        END 
0917*224  ! 
0918*225  ! 
0919*226  SETA:  SUBROUTINE(PRA) !STEP P AND SET PRA IN P INDIRECT
0920  01417 000000  PRA     NOP 
0921  01420 000000  SETA    NOP 
0922  01421 016001X         JSB .ENTR 
0923  01422 001417R         DEF PRA 
0924*227        $[P_P+1]_PRA
0925  01423 062246R         LDA P 
0926  01424 002004          INA 
0927  01425 072246R         STA P 
0928  01426 167417R         LDB PRA,I 
0929  01427 174000          STB .A.,I 
0930*228        RETURN
0931  01430 127420R         JMP SETA,I
0932*229        END 
0933*230  ! 
0934*231  ! 
0935*232  WRIT: SUBROUTINE !WRITE ON O.BUF BUFFER AT BF IF LP 
0936  01431 000000  WRIT    NOP 
0937  01432 016001X         JSB .ENTR 
0938  01433 001431R         DEF WRIT
0939*233                   !OR TB IF NOT LP WITH LENGTH N+LP
0940*234                   !IF TTY -LIMIT LENGTH TO 72. 
0941*235        IF TTY THEN[IF N>36 THEN N_36]
0942  01434 062242R         LDA TTY 
0943  01435 002003          SZA,RSS 
0944  01436 027445R         JMP #93 
0945  01437 062255R         LDA N 
0946  01440 042336R         ADA #94 
0947  01441 002020          SSA 
0948  01442 027445R         JMP #93 
0949  01443 062312R         LDA #67 
0950  01444 072255R         STA N 
0951*236        WRITF(O.BUF,.E.R.,$(TB-LP),N+LP)
0952  01445 062225R #93     LDA LP







 PAGE 0019 #01


0953  01446 003004          CMA,INA 
0954  01447 042272R         ADA TB
0955  01450 066255R         LDB N 
0956  01451 046225R         ADB LP
0957  01452 072337R         STA #95 
0958  01453 076340R         STB #96 
0959  01454 016017X         JSB WRITF 
0960  01455 001462R         DEF *+5 
0961  01456 000006X         DEF O.BUF 
0962  01457 000012X         DEF .E.R. 
0963  01460 100337R         DEF #95,I 
0964  01461 000340R         DEF #96 
0965*237        IER.
0966  01462 016024X         JSB IER.
0967  01463 001464R         DEF *+1 
0968*238        RETURN
0969  01464 127431R         JMP WRIT,I
0970*239        END 
0971*240  ! 
0972*241  ! 
0973*242  SPACE:SUBROUTINE    !SPACE THE LIST DEVICE
0974  01465 000000  SPACE   NOP 
0975  01466 016001X         JSB .ENTR 
0976  01467 001465R         DEF SPACE 
0977*243        N_1           !SET LENGTH TO ONE WORD 
0978  01470 002404          CLA,INA 
0979  01471 072255R         STA N 
0980*244        DO[T_$TB;$TB_ 20040K]!SET BLANK IN BUFFER 
0981  01472 162272R         LDA TB,I
0982  01473 072243R         STA T 
0983  01474 062245R         LDA #25 
0984  01475 172272R         STA TB,I
0985*245        WRIT          !WRIT BLANK LINE
0986  01476 017431R         JSB WRIT
0987  01477 001500R         DEF *+1 
0988*246        $TB_T         !RESTORE OLD CONTENTS 
0989  01500 062243R         LDA T 
0990  01501 172272R         STA TB,I
0991*247        RETURN        !RETURN 
0992  01502 127465R         JMP SPACE,I 
0993*248        END 
0994*249        END 
0995                        END 
**  NO ERRORS*












$END ASMB     

*
--> Assemble fmp/29033-80015_Rev-A_1
ON,ASMB,99







 PAGE 0001


0001                ASMB,B,X,L
**  NO ERRORS*





























































 PAGE 0002 #01


0001                ASMB,B,X,L
0002*001  SPL, L, M, O
0003*002        NAME DL..(8)
0004  00000                 NAM DL..,8
0005  00000         .A.     EQU  0
0006  00001         .B.     EQU  1
0007                        ENT DL..
0008                        EXT .ENTR 
0009                        EXT .DIV
0010                        EXT .DRCT 
0011                        EXT PK.DR 
0012                        EXT D.SDR 
0013                        EXT TMP.
0014                        EXT O.BUF 
0015                        EXT .E.R. 
0016                        EXT BUF.
0017                        EXT MSC.
0018                        EXT .TTY
0019                        EXT DR.RD 
0020                        EXT LOCF
0021                        EXT WRITF 
0022                        EXT OPEN. 
0023                        EXT CONV. 
0024                        EXT IER.
0025                        EXT D.RIO 
0026  00000 020040  HEAD.   OCT 020040
0027  00001 020111          OCT 020111
0028  00002 046101          OCT 046101
0029  00003 041075          OCT 041075
0030  00004 054531  H1      OCT 054531
0031  00005 054531          OCT 054531
0032  00006 054531  H1.5    OCT 054531
0033  00007 020116  H2      OCT 020116
0034  00010 054124          OCT 054124
0035  00011 051075          OCT 051075
0036  00012 054130          OCT 054130
0037  00013 054130  H3      OCT 054130
0038  00014 020116  H4      OCT 020116
0039  00015 054123          OCT 054123
0040  00016 042503          OCT 042503
0041  00017 036530          OCT 036530
0042  00020 054130  H5      OCT 054130
0043  00021 020043  H6      OCT 020043
0044  00022 051505          OCT 051505
0045  00023 041457          OCT 041457
0046  00024 052122          OCT 052122
0047  00025 036530          OCT 036530
0048  00026 054130  H7      OCT 054130
0049  00027 020114  H8      OCT 020114
0050  00030 040523          OCT 040523
0051  00031 052040          OCT 052040
0052  00032 052122          OCT 052122
0053  00033 036440          OCT 036440
0054  00034 054130          OCT 054130
0055  00035 054130  H9      OCT 054130
0056  00036 020043  H10     OCT 020043







 PAGE 0003 #01


0057  00037 042122          OCT 042122
0058  00040 020124          OCT 020124
0059  00041 051075          OCT 051075
0060  00042 054130  H11     OCT 054130
0061  00043 020040  HEA.1   OCT 020040
0062  00044 047101          OCT 047101
0063  00045 046505          OCT 046505
0064  00046 020040          OCT 020040
0065  00047 020124          OCT 020124
0066  00050 054520          OCT 054520
0067  00051 042440          OCT 042440
0068  00052 021502          OCT 021502
0069  00053 046113          OCT 046113
0070  00054 051457          OCT 051457
0071  00055 046125          OCT 046125
0072  00056 020117          OCT 020117
0073  00057 050105          OCT 050105
0074  00060 047040          OCT 047040
0075  00061 052117          OCT 052117
0076  00062 020040  HEA.2   OCT 020040
0077  00063 047101          OCT 047101
0078  00064 046505          OCT 046505
0079  00065 020040          OCT 020040
0080  00066 020124          OCT 020124
0081  00067 054520          OCT 054520
0082  00070 042440          OCT 042440
0083  00071 021502          OCT 021502
0084  00072 046113          OCT 046113
0085  00073 051457          OCT 051457
0086  00074 046125          OCT 046125
0087  00075 020123          OCT 020123
0088  00076 041517          OCT 041517
0089  00077 042105          OCT 042105
0090  00100 020124          OCT 020124
0091  00101 051101          OCT 051101
0092  00102 041513          OCT 041513
0093  00103 020123          OCT 020123
0094  00104 042503          OCT 042503
0095  00105 020040          OCT 020040
0096  00106 047520          OCT 047520
0097  00107 042516          OCT 042516
0098  00110 020124          OCT 020124
0099  00111 047440          OCT 047440
0100  00112 000000  EXEND   BSS 1 
0101  00113 000000  DL      BSS 1 
0102  00114 000000  LUPT    BSS 1 
0103  00115 000000  T       BSS 1 
0104  00116 000004  .3      OCT 000004
0105  00117 000063  .4      OCT 000063
0106  00120 000001  .5      OCT 000001
0107  00121 000000  DIS     BSS 1 
0108  00122 000000  BLK     BSS 1 
0109  00123 000000  INDEX   BSS 1 
0110  00124 000003  .8      OCT 000003
0111  00125 000000  .9      OCT 000000
0112  00126 000000  T2      BSS 1 







 PAGE 0004 #01


0113  00127 000000  TTY     BSS 1 
0114  00130 000000  TB      BSS 1 
0115  00131 000000  BF      BSS 1 
0116  00132 020040  .10     OCT 020040
0117  00133 000066  .12     OCT 000066
0118  00134 000000  P       BSS 1 
0119  00135 177760  .14     OCT 177760
0120  00136 041522  .15     OCT 041522
0121  00137 036440  .16     OCT 036440
0122  00140 000000  PK3     BSS 1 
0123  00141 000000  .17     BSS 1 
0124  00142 000005  .18     OCT 000005
0125  00143 000000  PK9     BSS 1 
0126  00144 000000  PK5     BSS 1 
0127  00145 000000  PK6     BSS 1 
0128  00146 000000  PK7     BSS 1 
0129  00147 000000  PK8     BSS 1 
0130  00150 000002  .19     OCT 000002
0131  00151 000000  T6      BSS 1 
0132  00152 000000  PK      BSS 1 
0133  00153 000004R .23     DEF H1
0134  00154 000006R .24     DEF H1.5
0135  00155 077777  .25     OCT 077777
0136  00156 000042  .26     OCT 000042
0137  00157 000027  .29     OCT 000027
0138  00160 000016  .30     OCT 000016
0139  00161 000000  T5      BSS 1 
0140  00162 000000  T4      BSS 1 
0141  00163 000000  T3      BSS 1 
0142  00164 000120  .34     OCT 000120
0143  00165 000000  PK4     BSS 1 
0144  00166 000077  .38     OCT 000077
0145  00167 000012  .39     OCT 000012
0146  00170 026440  .41     OCT 026440
0147  00171 000377  .42     OCT 000377
0148  00172 025440  .45     OCT 025440
0149  00173 000000  .47     BSS 1 
0150  00174 000007  .49     OCT 000007
0151  00175 000014  .56     OCT 000014
0152  00176 177400  .57     OCT 177400
0153  00177 000055  .58     OCT 000055
0154  00200 000040  .59     OCT 000040
0155  00201 000121  .60     OCT 000121
0156  00202 000000  L       BSS 1 
0157  00203 177735  .65     OCT 177735
0158  00204 177761  .66     OCT 177761
0159  00205 000041  .67     OCT 000041
0160  00206 177777  .68     OCT 177777
0161  00207 000200  .71     OCT 000200
0162  00210 000020  .72     OCT 000020
0163  00211 000000  .73     BSS 1 
0164  00212 000000  .74     BSS 1 
0165*003  ! 
0166*004  !     RTE FMGR DIRECTORY LIST MODULE
0167*005  ! 
0168*006  !     ENTERED ON COMMAND: 







 PAGE 0005 #01


0169*007  ! 
0170*008  !     DL,CR,MSC 
0171*009  ! 
0172*010  !     WHERE:
0173*011  !           CR IF GIVEN RESTRICTS THE LIST TO 
0174*012  !               THE GIVEN CARTRIDE
0175*013  ! 
0176*014  !           MSC IF GIVEN MUST BE THE MASTER 
0177*015  !               SECURITY CODE AND CAUSES THE
0178*016  !               EXPANDED LIST FORMAT. (SEE BELOW) 
0179*017  ! 
0180*018  !     FORMATS:
0181*019  ! 
0182*020  !     HEAD: 
0183*021  ! 
0184*022  !L1   CR=XXXXX
0185*023  !L2    ILAB=YYYYYY NXTR=XXXX NXSEC=XXX #SEC/TR=XXX
0186*024  !          LAST TR= XXXX #DR TR=XX
0187*025  ! 
0188*026  ! 
0189*027  ! 
0190*028  !     WHERE: CR IS FOLLOWED BY THE CARTRIDGE ID NUMBER
0191*029  !           YYYYYY IS THE CARTRIDGE LABEL 
0192*030  !           NXTR INDICATES THE NEXT TRACK 
0193*031  !           NXSEC   THE NEXT SECTOR 
0194*032  !           #SEC/TR  THE NO. OF SECTORS/TRACK 
0195*033  !           LAST TR THE LAST TRACK AND
0196*034  !           #DR TR  THE NUMBER OF DIRECTORY TRACKS
0197*035  ! 
0198*036  !     STANDARD (MSC NOT SUPPLIED):
0199*037  !L3   NAME   TYPE #BLKS/LU OPEN TO
0200*038  ! 
0201*039  !      FOLLOWED BY THE DIRECTORY ENTRIES
0202*040  ! 
0203*041  !     EXTENDED FORMAT (MSC SUPPLIED)
0204*042  !     NAME   TYPE #BLKS/LU SCODE TRACK SEC OPEN TO
0205*043  ! 
0206*044  ! 
0207*045  !     IF THE LIST DEVICE IS A TTY (TYPE 00 OR 05) 
0208*046  !       THE EXTENDED FORMAT MAY FOURCE TWO LINES
0209*047  !       (IF 7 PROGRMS HAVE THE FILE OPEN) 
0210*048  !     IF A PROGRAM HAS A FILE OPEN EXCLUSIVELY
0211*049  !     A - (MINUS SIGN) WILL FOLLOW THE PROGRAMS NAME
0212*050  !     IF AN ENTRY IS FOR AN EXTENT A + (PLUS SIGN)
0213*051  !        WILL BE PRINTED IN THE OPEN TO FIELD 
0214*052  !        FOLLOWED BY THE EXTENT NUMBER
0215*053  ! 
0216*054  ! 
0217*055  !     DEFINE EXTERNALS
0218*056  ! 
0219*057        LET PK.DR,D.SDR,TMP.,O.BUF,.E.R.,\
0220*       BUF.    BE INTEGER,EXTERNAL 
0221*058        LET HEAD.(4),H1(2),H1.5,H2(4),H3,H4(4),H5,H6(5),H7,H8(6)
0222*           H10(4),H11    BE INTEGER
0223*059        LET HEA.1(15),HEA.2(24)  BE INTEGER 
0224*060        INITIALIZE HEAD.,H1,H1.5,H2,H3,H4,H5,H6,H7,H8,H9,H10,H11







 PAGE 0006 #01


0225*        "   ILAB=YYYYYY NXTR=XXXX NXSEC=XXX #SEC/TR=XXX LAST TR= XX
0226*           ,"XX #DR TR=XX" 
0227*061        INITIALIZE HEA.1 TO "  NAME   TYPE #BLKS/LU OPEN TO"
0228*062        INITIALIZE HEA.2 TO "  NAME   TYPE #BLKS/LU SCODE TRACK 
0229*                           "OPEN TO "
0230*063  ! 
0231*064        LET MSC.,.TTY BE FUNCTION,EXTERNAL
0232*065  ! 
0233*066        LET DR.RD,LOCF,WRITF,OPEN.,CONV.,IER.,D.RIO\
0234*                          BE SUBROUTINE,EXTERNAL 
0235*067  ! 
0236*068  !     DEFINE INTERNALS
0237*069  ! 
0238*070        LET SETAD, WRIT, SPACE BE SUBROUTINE
0239*071  ! 
0240*072  !     DEFINE CONSTANTS
0241*073  ! 
0242*074        LET BLANK     BE CONSTANT (20040K)
0243*075        LET C.R       BE CONSTANT (41522K)!CR 
0244*076        LET EQ.BL     BE CONSTANT (36440K)!=
0245*077        LET MIN.B     BE CONSTANT (26440K)!-
0246*078        LET PLS.B     BE CONSTANT (25440K)!+
0247*079        LET MIN       BE CONSTANT (   55K)! - 
0248*080  ! 
0249*081  ! 
0250*082  DL..: SUBROUTINE(N,LIS,ER) GLOBAL 
0251  00213 000000  N       NOP 
0252  00214 000000  LIS     NOP 
0253  00215 000000  ER      NOP 
0254  00216 000000  DL..    NOP 
0255  00217 016001X         JSB .ENTR 
0256  00220 000213R         DEF N 
0257*083        EXEND_0 
0258  00221 002400          CLA 
0259  00222 072112R         STA EXEND 
0260*084        DL_$(@LIS+1)      !SET DISC SPEC
0261  00223 062214R         LDA LIS 
0262  00224 002004          INA 
0263  00225 160000          LDA .A.,I 
0264  00226 072113R         STA DL
0265*085        LUPT_@D.SDR   !SET LU POINTER 
0266  00227 016003X         JSB .DRCT 
0267  00230 000005X         DEF D.SDR 
0268  00231 072114R         STA LUPT
0269*086        DO[T_    @LIS+4   ;IF $T  THEN[IFNOT[\ !CHECK 
0270*           EXEND_MSC.($T)]THEN[ER_51;RETURN]]]!SECURITY
0271  00232 062214R         LDA LIS 
0272  00233 042116R         ADA .3
0273  00234 072115R         STA T 
0274  00235 162115R         LDA T,I 
0275  00236 002003          SZA,RSS 
0276  00237 026251R         JMP .2
0277  00240 016012X         JSB MSC.
0278  00241 000243R         DEF *+2 
0279  00242 100115R         DEF T,I 
0280  00243 072112R         STA EXEND 







 PAGE 0007 #01


0281  00244 002002          SZA 
0282  00245 026251R         JMP .2
0283  00246 062117R         LDA .4
0284  00247 172215R         STA ER,I
0285  00250 126216R         JMP DL..,I
0286*087        D.RIO(1)
0287  00251 016022X .2      JSB D.RIO 
0288  00252 000254R         DEF *+2 
0289  00253 000120R         DEF .5
0290*088  AGAIN:DIS_[IF DL THEN DL,ELSE -$LUPT] !GET DISC ID
0291  00254 062113R AGAIN   LDA DL
0292  00255 002003          SZA,RSS 
0293  00256 026261R         JMP .6
0294  00257 062113R         LDA DL
0295  00260 026264R         JMP .7
0296  00261 166114R .6      LDB LUPT,I
0297  00262 007004          CMB,INB 
0298  00263 060001          LDA .B. 
0299  00264 072121R .7      STA DIS 
0300*089        IFNOT DIS THEN RETURN          !END OF DIREC-DONE 
0301  00265 002003          SZA,RSS 
0302  00266 126216R         JMP DL..,I
0303*090        BLK,INDEX_0 
0304  00267 002400          CLA 
0305  00270 072122R         STA BLK 
0306  00271 072123R         STA INDEX 
0307*091        T_ @TMP.+3
0308  00272 016003X         JSB .DRCT 
0309  00273 000006X         DEF TMP.
0310  00274 042124R         ADA .8
0311  00275 072115R         STA T 
0312*092        OPEN.(O.BUF,TMP.,$T,0) !OPEN LIST FILE
0313  00276 016017X         JSB OPEN. 
0314  00277 000304R         DEF *+5 
0315  00300 000007X         DEF O.BUF 
0316  00301 000006X         DEF TMP.
0317  00302 100115R         DEF T,I 
0318  00303 000125R         DEF .9
0319*093        LOCF(O.BUF,.E.R.,T,T,T,T,T2)    !GET LIST LU
0320  00304 016015X         JSB LOCF
0321  00305 000315R         DEF *+8 
0322  00306 000007X         DEF O.BUF 
0323  00307 000010X         DEF .E.R. 
0324  00310 000115R         DEF T 
0325  00311 000115R         DEF T 
0326  00312 000115R         DEF T 
0327  00313 000115R         DEF T 
0328  00314 000126R         DEF T2
0329*094        TTY_.TTY(T2)                  !SET TTY FLAG 
0330  00315 016013X         JSB .TTY
0331  00316 000320R         DEF *+2 
0332  00317 000126R         DEF T2
0333  00320 072127R         STA TTY 
0334*095        TB_[BF_@BUF.]+1 
0335  00321 016003X         JSB .DRCT 
0336  00322 000011X         DEF BUF.







 PAGE 0008 #01


0337  00323 072131R         STA BF
0338  00324 002004          INA 
0339  00325 072130R         STA TB
0340*096        $BF_BLANK 
0341  00326 062132R         LDA .10 
0342  00327 172131R         STA BF,I
0343*097  NXBLK:DR.RD(1, DIS,BLK)?[IFNOT BLK THEN [ER_54;RETURN]\ 
0344*                          ,ELSE GO TO CLEAN]!READ BLOCK
0345  00330 016014X NXBLK   JSB DR.RD 
0346  00331 000335R         DEF *+4 
0347  00332 000120R         DEF .5
0348  00333 000121R         DEF DIS 
0349  00334 000122R         DEF BLK 
0350  00335 002041          SEZ,RSS 
0351  00336 026345R         JMP NXFIL 
0352  00337 062122R         LDA BLK 
0353  00340 002002          SZA 
0354  00341 027104R         JMP CLEAN 
0355  00342 062133R         LDA .12 
0356  00343 172215R         STA ER,I
0357  00344 126216R         JMP DL..,I
0358*098  NXFIL:SETAD?[INDEX_0;BLK_BLK+1;GO TO NXBLK] !SET ADDRESSES
0359  00345 017122R NXFIL   JSB SETAD 
0360  00346 000347R         DEF *+1 
0361  00347 002041          SEZ,RSS 
0362  00350 026357R         JMP .13 
0363  00351 002400          CLA 
0364  00352 072123R         STA INDEX 
0365  00353 062122R         LDA BLK 
0366  00354 002004          INA 
0367  00355 072122R         STA BLK 
0368  00356 026330R         JMP NXBLK 
0369*099        P_TB
0370  00357 062130R .13     LDA TB
0371  00360 072134R         STA P 
0372*100        IF INDEX+BLK-16 THEN GO TO FILEP !NOT FIRST JUMP
0373  00361 062123R         LDA INDEX 
0374  00362 042122R         ADA BLK 
0375  00363 042135R         ADA .14 
0376  00364 002002          SZA 
0377  00365 026532R         JMP FILEP 
0378*101        $P_C.R              !SET
0379  00366 062136R         LDA .15 
0380  00367 172134R         STA P,I 
0381*102        $(P+1)   _EQ.BL     !CR=XXXXX 
0382  00370 062134R         LDA P 
0383  00371 002004          INA 
0384  00372 066137R         LDB .16 
0385  00373 174000          STB .A.,I 
0386*103                            ! 
0387*104        CONV.($PK3,$(P+3),5)!IN BUFFER
0388  00374 062134R         LDA P 
0389  00375 042124R         ADA .8
0390  00376 072141R         STA .17 
0391  00377 016020X         JSB CONV. 
0392  00400 000404R         DEF *+4 







 PAGE 0009 #01


0393  00401 100140R         DEF PK3,I 
0394  00402 100141R         DEF .17,I 
0395  00403 000142R         DEF .18 
0396*105                            ! 
0397*106        WRIT($BF,4)             !WRITE ON LIST UNIT 
0398  00404 017164R         JSB WRIT
0399  00405 000410R         DEF *+3 
0400  00406 100131R         DEF BF,I
0401  00407 000116R         DEF .3
0402*107        CONV.($PK9,H3,4) !INSERT NEXT TRACK 
0403  00410 016020X         JSB CONV. 
0404  00411 000415R         DEF *+4 
0405  00412 100143R         DEF PK9,I 
0406  00413 000013R         DEF H3
0407  00414 000116R         DEF .3
0408*108        CONV.($PK5,H5,3)        !   NEXT SECTOR 
0409  00415 016020X         JSB CONV. 
0410  00416 000422R         DEF *+4 
0411  00417 100144R         DEF PK5,I 
0412  00420 000020R         DEF H5
0413  00421 000124R         DEF .8
0414*109        CONV.($PK6,H7,3)        !   #SECTORS/TRACK
0415  00422 016020X         JSB CONV. 
0416  00423 000427R         DEF *+4 
0417  00424 100145R         DEF PK6,I 
0418  00425 000026R         DEF H7
0419  00426 000124R         DEF .8
0420*110        CONV.($PK7-$PK8-1,H9,4) !   LAST TRACK
0421  00427 162147R         LDA PK8,I 
0422  00430 003004          CMA,INA 
0423  00431 142146R         ADA PK7,I 
0424  00432 007400          CCB 
0425  00433 044000          ADB .A. 
0426  00434 076141R         STB .17 
0427  00435 016020X         JSB CONV. 
0428  00436 000442R         DEF *+4 
0429  00437 000141R         DEF .17 
0430  00440 000035R         DEF H9
0431  00441 000116R         DEF .3
0432*111        CONV.(-$PK8,H11,2)       !   #DIRICTORY TRACKS
0433  00442 166147R         LDB PK8,I 
0434  00443 007004          CMB,INB 
0435  00444 076141R         STB .17 
0436  00445 016020X         JSB CONV. 
0437  00446 000452R         DEF *+4 
0438  00447 000141R         DEF .17 
0439  00450 000042R         DEF H11 
0440  00451 000150R         DEF .19 
0441*112        FOR T6_@H1 TO @H1.5 DO[ $T6_$PK AND 77777K;\
0442*                                 PK_PK+1]
0443  00452 062153R         LDA .23 
0444  00453 072151R         STA T6
0445  00454 026460R         JMP .21 
0446  00455 062151R .20     LDA T6
0447  00456 002004          INA 
0448  00457 072151R         STA T6







 PAGE 0010 #01


0449  00460 066151R .21     LDB T6
0450  00461 007004          CMB,INB 
0451  00462 046154R         ADB .24 
0452  00463 006020          SSB 
0453  00464 026474R         JMP .22 
0454  00465 162152R         LDA PK,I
0455  00466 012155R         AND .25 
0456  00467 172151R         STA T6,I
0457  00470 062152R         LDA PK
0458  00471 002004          INA 
0459  00472 072152R         STA PK
0460  00473 026455R         JMP .20 
0461*113        WRIT(HEAD.,34)
0462  00474 017164R .22     JSB WRIT
0463  00475 000500R         DEF *+3 
0464  00476 000000R         DEF HEAD. 
0465  00477 000156R         DEF .26 
0466*114        SPACE 
0467  00500 017211R         JSB SPACE 
0468  00501 000502R         DEF *+1 
0469*115        IF EXEND THEN WRIT(HEA.2,23) ,ELSE WRIT(HEA.1,14) 
0470  00502 062112R         LDA EXEND 
0471  00503 002003          SZA,RSS 
0472  00504 026512R         JMP .27 
0473  00505 017164R         JSB WRIT
0474  00506 000511R         DEF *+3 
0475  00507 000062R         DEF HEA.2 
0476  00510 000157R         DEF .29 
0477  00511 026516R         JMP .28 
0478  00512 017164R .27     JSB WRIT
0479  00513 000516R         DEF *+3 
0480  00514 000043R         DEF HEA.1 
0481  00515 000160R         DEF .30 
0482*116        SPACE         !SPACE
0483  00516 017211R .28     JSB SPACE 
0484  00517 000520R         DEF *+1 
0485*117        T6_[T5_[T4_[T3_TB+2]+3]+3]+2   !SET POINTERS
0486  00520 062130R         LDA TB
0487  00521 042150R         ADA .19 
0488  00522 072163R         STA T3
0489  00523 042124R         ADA .8
0490  00524 072162R         STA T4
0491  00525 042124R         ADA .8
0492  00526 072161R         STA T5
0493  00527 042150R         ADA .19 
0494  00530 072151R         STA T6
0495*118        GO TO NXFIL                    !START LIST
0496  00531 026345R         JMP NXFIL 
0497*119  ! 
0498*120  FILEP:IF $PK<0 THEN GO TO NXFIL !PURGED ENTRY 
0499  00532 166152R FILEP   LDB PK,I
0500  00533 006020          SSB 
0501  00534 026345R         JMP NXFIL 
0502*121        IFNOT $PK THEN GO TO CLEAN ! END OF DIRECTORY 
0503  00535 162152R         LDA PK,I
0504  00536 002003          SZA,RSS 







 PAGE 0011 #01


0505  00537 027104R         JMP CLEAN 
0506*122        FOR T_TB TO TB+80 DO[$T_BLANK] !BLANK BUFFER
0507  00540 062130R         LDA TB
0508  00541 072115R         STA T 
0509  00542 026546R         JMP .32 
0510  00543 062115R .31     LDA T 
0511  00544 002004          INA 
0512  00545 072115R         STA T 
0513  00546 062130R .32     LDA TB
0514  00547 042164R         ADA .34 
0515  00550 003004          CMA,INA 
0516  00551 042115R         ADA T 
0517  00552 003004          CMA,INA 
0518  00553 002020          SSA 
0519  00554 026560R         JMP .33 
0520  00555 062132R         LDA .10 
0521  00556 172115R         STA T,I 
0522  00557 026543R         JMP .31 
0523*123        FOR T_TB TO T3 DO [$T_$PK;PK_PK+1]!SET NAME 
0524  00560 062130R .33     LDA TB
0525  00561 072115R         STA T 
0526  00562 026566R         JMP .36 
0527  00563 062115R .35     LDA T 
0528  00564 002004          INA 
0529  00565 072115R         STA T 
0530  00566 066115R .36     LDB T 
0531  00567 007004          CMB,INB 
0532  00570 046163R         ADB T3
0533  00571 006020          SSB 
0534  00572 026601R         JMP .37 
0535  00573 162152R         LDA PK,I
0536  00574 172115R         STA T,I 
0537  00575 062152R         LDA PK
0538  00576 002004          INA 
0539  00577 072152R         STA PK
0540  00600 026563R         JMP .35 
0541*124        CONV.($PK3,$T4,5)                       !SET TYPE 
0542  00601 016020X .37     JSB CONV. 
0543  00602 000606R         DEF *+4 
0544  00603 100140R         DEF PK3,I 
0545  00604 100162R         DEF T4,I
0546  00605 000142R         DEF .18 
0547*125        IF $PK3 THEN GO  TO NOT0    !IF TYPE ZERO 
0548  00606 162140R         LDA PK3,I 
0549  00607 002002          SZA 
0550  00610 026622R         JMP NOT0
0551*126        CONV.($PK4 AND 77K,$T5,2)   !CONVERT LU 
0552  00611 162165R         LDA PK4,I 
0553  00612 012166R         AND .38 
0554  00613 072141R         STA .17 
0555  00614 016020X         JSB CONV. 
0556  00615 000621R         DEF *+4 
0557  00616 000141R         DEF .17 
0558  00617 100161R         DEF T5,I
0559  00620 000150R         DEF .19 
0560*127        GO TO EXCK                  !ELSE 







 PAGE 0012 #01


0561  00621 026636R         JMP EXCK
0562*128  NOT0: CONV.($PK6/2,$T5,5)         !CONVERT BLOCK SIZE 
0563  00622 162145R NOT0    LDA PK6,I 
0564  00623 006400          CLB 
0565  00624 002020          SSA 
0566  00625 007000          CMB 
0567  00626 016002X         JSB .DIV
0568  00627 000150R         DEF .19 
0569  00630 072141R         STA .17 
0570  00631 016020X         JSB CONV. 
0571  00632 000636R         DEF *+4 
0572  00633 000141R         DEF .17 
0573  00634 100161R         DEF T5,I
0574  00635 000142R         DEF .18 
0575*129  ! 
0576*130  EXCK: IFNOT EXEND THEN GO TO NAMST !NOT EXTENDED JMP
0577  00636 062112R EXCK    LDA EXEND 
0578  00637 002003          SZA,RSS 
0579  00640 026711R         JMP NAMST 
0580*131  ! 
0581*132                                     !SET NAME LIST ORGIN 
0582*133  ! 
0583*134        T6_[PK_[PK6_[T2_[P_TB+10]+2]+3]+2]+2
0584  00641 062130R         LDA TB
0585  00642 042167R         ADA .39 
0586  00643 072134R         STA P 
0587  00644 042150R         ADA .19 
0588  00645 072126R         STA T2
0589  00646 042124R         ADA .8
0590  00647 072145R         STA PK6 
0591  00650 042150R         ADA .19 
0592  00651 072152R         STA PK
0593  00652 042150R         ADA .19 
0594  00653 072151R         STA T6
0595*135        IF $PK8 <0 THEN [$P_MIN.B ;$PK8_-$PK8]
0596  00654 166147R         LDB PK8,I 
0597  00655 006021          SSB,RSS 
0598  00656 026664R         JMP .40 
0599  00657 062170R         LDA .41 
0600  00660 172134R         STA P,I 
0601  00661 166147R         LDB PK8,I 
0602  00662 007004          CMB,INB 
0603  00663 176147R         STB PK8,I 
0604*136        CONV.($PK8,$T2,5)             !SET SECURITY CODE
0605  00664 016020X .40     JSB CONV. 
0606  00665 000671R         DEF *+4 
0607  00666 100147R         DEF PK8,I 
0608  00667 100126R         DEF T2,I
0609  00670 000142R         DEF .18 
0610*137        IFNOT $PK3 THEN GO TO NAMST !IF TYPE ZERO 
0611  00671 162140R         LDA PK3,I 
0612  00672 002003          SZA,RSS 
0613  00673 026711R         JMP NAMST 
0614*138        CONV.($PK4,$PK6,4)             !SKIP TRACK
0615  00674 016020X         JSB CONV. 
0616  00675 000701R         DEF *+4 







 PAGE 0013 #01


0617  00676 100165R         DEF PK4,I 
0618  00677 100145R         DEF PK6,I 
0619  00700 000116R         DEF .3
0620*139        CONV.($PK5 AND 377K,$PK,3)     !AND SECTOR
0621  00701 162144R         LDA PK5,I 
0622  00702 012171R         AND .42 
0623  00703 072141R         STA .17 
0624  00704 016020X         JSB CONV. 
0625  00705 000711R         DEF *+4 
0626  00706 000141R         DEF .17 
0627  00707 100152R         DEF PK,I
0628  00710 000124R         DEF .8
0629*140  NAMST:T2_T6         !SET WORKING ADDRESS
0630  00711 062151R NAMST   LDA T6
0631  00712 072126R         STA T2
0632*141  ! 
0633*142        IF $PK3 THEN [IF [T_($PK5 -<8)AND 377K] THEN[\
0634*           $T6_PLS.B ;CONV.(T,$(T6+1),3);GO TO PRT] ]
0635  00713 162140R         LDA PK3,I 
0636  00714 002003          SZA,RSS 
0637  00715 026737R         JMP .44 
0638  00716 162144R         LDA PK5,I 
0639  00717 001727          ALF,ALF 
0640  00720 012171R         AND .42 
0641  00721 072115R         STA T 
0642  00722 002003          SZA,RSS 
0643  00723 026737R         JMP .44 
0644  00724 062172R         LDA .45 
0645  00725 172151R         STA T6,I
0646  00726 062151R         LDA T6
0647  00727 002004          INA 
0648  00730 072141R         STA .17 
0649  00731 016020X         JSB CONV. 
0650  00732 000736R         DEF *+4 
0651  00733 000115R         DEF T 
0652  00734 100141R         DEF .17,I 
0653  00735 000124R         DEF .8
0654  00736 027022R         JMP PRT 
0655*143  ! 
0656*144        REPEAT 7 TIMES DO THRU NAMSK
0657  00737 062174R .44     LDA .49 
0658  00740 072173R         STA .47 
0659  00741 003400  .46     CCA 
0660  00742 042173R         ADA .47 
0661  00743 072173R         STA .47 
0662  00744 066173R         LDB .47 
0663  00745 006020          SSB 
0664  00746 027022R         JMP PRT 
0665*145  NAMSK:                   IF $[PK8_PK8+1]THEN[\
0666*             P_($PK8 AND 77777K)+12;FOR T_P TO P+2\
0667*                DO[ $T2_$T ;T2_T2+1];T_T2-1; \ 
0668*                  $T_($T AND 177400K)+[IF $PK8<0 THEN \
0669*                      MIN,ELSE 40K]] 
0670  00747 062147R NAMSK   LDA PK8 
0671  00750 002004          INA 
0672  00751 072147R         STA PK8 







 PAGE 0014 #01


0673  00752 160000          LDA .A.,I 
0674  00753 002003          SZA,RSS 
0675  00754 027021R         JMP .55 
0676  00755 162147R         LDA PK8,I 
0677  00756 012155R         AND .25 
0678  00757 042175R         ADA .56 
0679  00760 072134R         STA P 
0680  00761 072115R         STA T 
0681  00762 026766R         JMP .51 
0682  00763 062115R .50     LDA T 
0683  00764 002004          INA 
0684  00765 072115R         STA T 
0685  00766 062134R .51     LDA P 
0686  00767 042150R         ADA .19 
0687  00770 003004          CMA,INA 
0688  00771 042115R         ADA T 
0689  00772 003004          CMA,INA 
0690  00773 002020          SSA 
0691  00774 027003R         JMP .52 
0692  00775 162115R         LDA T,I 
0693  00776 172126R         STA T2,I
0694  00777 062126R         LDA T2
0695  01000 002004          INA 
0696  01001 072126R         STA T2
0697  01002 026763R         JMP .50 
0698  01003 003400  .52     CCA 
0699  01004 042126R         ADA T2
0700  01005 072115R         STA T 
0701  01006 162115R         LDA T,I 
0702  01007 012176R         AND .57 
0703  01010 072141R         STA .17 
0704  01011 166147R         LDB PK8,I 
0705  01012 006021          SSB,RSS 
0706  01013 027016R         JMP .53 
0707  01014 062177R         LDA .58 
0708  01015 027017R         JMP .54 
0709  01016 062200R .53     LDA .59 
0710  01017 042141R .54     ADA .17 
0711  01020 172115R         STA T,I 
0712  01021 026741R .55     JMP .46 
0713*146  PRT:  P_TB+81 
0714  01022 062130R PRT     LDA TB
0715  01023 042201R         ADA .60 
0716  01024 072134R         STA P 
0717*147  LNCK: IF $[P_P-1]=BLANK THEN GO TO LNCK 
0718  01025 003400  LNCK    CCA 
0719  01026 042134R         ADA P 
0720  01027 072134R         STA P 
0721  01030 160000          LDA .A.,I 
0722  01031 052132R         CPA .10 
0723  01032 027025R         JMP LNCK
0724*148        L_P-TB+1
0725  01033 062130R         LDA TB
0726  01034 003004          CMA,INA 
0727  01035 042134R         ADA P 
0728  01036 002004          INA 







 PAGE 0015 #01


0729  01037 072202R         STA L 
0730*149        T_BF  !SET BUFFER ADDRESS 
0731  01040 062131R         LDA BF
0732  01041 072115R         STA T 
0733*150        IF L>34 THEN[WRIT($BF,34);L_L-15;T_TB+14;\
0734*                  FOR T6_T TO TB+33 DO $T6_BLANK]
0735  01042 066202R         LDB L 
0736  01043 046203R         ADB .65 
0737  01044 006020          SSB 
0738  01045 027077R         JMP .64 
0739  01046 017164R         JSB WRIT
0740  01047 001052R         DEF *+3 
0741  01050 100131R         DEF BF,I
0742  01051 000156R         DEF .26 
0743  01052 062202R         LDA L 
0744  01053 042204R         ADA .66 
0745  01054 072202R         STA L 
0746  01055 062130R         LDA TB
0747  01056 042160R         ADA .30 
0748  01057 072115R         STA T 
0749  01060 072151R         STA T6
0750  01061 027065R         JMP .62 
0751  01062 062151R .61     LDA T6
0752  01063 002004          INA 
0753  01064 072151R         STA T6
0754  01065 062130R .62     LDA TB
0755  01066 042205R         ADA .67 
0756  01067 003004          CMA,INA 
0757  01070 042151R         ADA T6
0758  01071 003004          CMA,INA 
0759  01072 002020          SSA 
0760  01073 027077R         JMP .64 
0761  01074 062132R         LDA .10 
0762  01075 172151R         STA T6,I
0763  01076 027062R         JMP .61 
0764*151        WRIT($T,L)  !  WRITE THE LINE 
0765  01077 017164R .64     JSB WRIT
0766  01100 001103R         DEF *+3 
0767  01101 100115R         DEF T,I 
0768  01102 000202R         DEF L 
0769*152        GO TO NXFIL 
0770  01103 026345R         JMP NXFIL 
0771*153  ! 
0772*154  CLEAN:WRITF(O.BUF,.E.R.,T,-1) !END FILE 
0773  01104 016016X CLEAN   JSB WRITF 
0774  01105 001112R         DEF *+5 
0775  01106 000007X         DEF O.BUF 
0776  01107 000010X         DEF .E.R. 
0777  01110 000115R         DEF T 
0778  01111 000206R         DEF .68 
0779*155  ! 
0780*156        IFNOT DL THEN[LUPT_LUPT+4;GOTO AGAIN] 
0781  01112 062113R         LDA DL
0782  01113 002002          SZA 
0783  01114 027121R         JMP .69 
0784  01115 062114R         LDA LUPT







 PAGE 0016 #01


0785  01116 042116R         ADA .3
0786  01117 072114R         STA LUPT
0787  01120 026254R         JMP AGAIN 
0788*157  ! 
0789*158        RETURN
0790  01121 126216R .69     JMP DL..,I
0791*159        END 
0792*160  ! 
0793*161  SETAD:SUBROUTINE FEXIT ! SET PACK DIRECTORY ENTRY 
0794  01122 000000  SETAD   NOP 
0795  01123 016001X         JSB .ENTR 
0796  01124 001122R         DEF SETAD 
0797*162                         ! ADDRESSES
0798*163        IF INDEX=128 THEN FRETURN !END BLOCK EXIT 
0799  01125 066123R         LDB INDEX 
0800  01126 056207R         CPB .71 
0801  01127 002001          RSS 
0802  01130 027133R         JMP .70 
0803  01131 002300          CCE 
0804  01132 127122R         JMP SETAD,I 
0805*164        PK9_[PK8_[PK7_[PK6_[PK5_[PK4_[PK3_[PK_INDEX+@PK.DR]+\ 
0806*             3]+1]+1]+1]+1]+1]+1 !SET THE ADDRESSES
0807  01133 016003X .70     JSB .DRCT 
0808  01134 000004X         DEF PK.DR 
0809  01135 042123R         ADA INDEX 
0810  01136 072152R         STA PK
0811  01137 042124R         ADA .8
0812  01140 072140R         STA PK3 
0813  01141 002004          INA 
0814  01142 072165R         STA PK4 
0815  01143 002004          INA 
0816  01144 072144R         STA PK5 
0817  01145 002004          INA 
0818  01146 072145R         STA PK6 
0819  01147 002004          INA 
0820  01150 072146R         STA PK7 
0821  01151 002004          INA 
0822  01152 072147R         STA PK8 
0823  01153 002004          INA 
0824  01154 072143R         STA PK9 
0825*165        INDEX_INDEX+16   !STEP INDEX
0826  01155 062123R         LDA INDEX 
0827  01156 042210R         ADA .72 
0828  01157 072123R         STA INDEX 
0829*166        RETURN
0830  01160 000040          CLE 
0831  01161 127122R         JMP SETAD,I 
0832*167        END 
0833*168  ! 
0834*169  ! 
0835*170  WRIT: SUBROUTINE(BAD,NWORD) !WRITE N WORDS ON O.BUF 
0836  01162 000000  BAD     NOP 
0837  01163 000000  NWORD   NOP 
0838  01164 000000  WRIT    NOP 
0839  01165 016001X         JSB .ENTR 
0840  01166 001162R         DEF BAD 







 PAGE 0017 #01


0841*171                          !IF NOT A TTY TWO BLANKS ARE
0842*172        WRITF(O.BUF,.E.R.,$(@BAD+TTY),NWORD+1-TTY)!ADDED
0843  01167 063162R         LDA BAD 
0844  01170 042127R         ADA TTY 
0845  01171 167163R         LDB NWORD,I 
0846  01172 006004          INB 
0847  01173 007004          CMB,INB 
0848  01174 046127R         ADB TTY 
0849  01175 007004          CMB,INB 
0850  01176 072211R         STA .73 
0851  01177 076212R         STB .74 
0852  01200 016016X         JSB WRITF 
0853  01201 001206R         DEF *+5 
0854  01202 000007X         DEF O.BUF 
0855  01203 000010X         DEF .E.R. 
0856  01204 100211R         DEF .73,I 
0857  01205 000212R         DEF .74 
0858*173        IER.                                  !AT THE 
0859  01206 016021X         JSB IER.
0860  01207 001210R         DEF *+1 
0861*174        RETURN                                !FRONT
0862  01210 127164R         JMP WRIT,I
0863*175        END 
0864*176  ! 
0865*177  SPACE:SUBROUTINE
0866  01211 000000  SPACE   NOP 
0867  01212 016001X         JSB .ENTR 
0868  01213 001211R         DEF SPACE 
0869*178        $TB_BLANK     !SET A 1 WORD BLANK 
0870  01214 062132R         LDA .10 
0871  01215 172130R         STA TB,I
0872*179        WRIT($BF,1)   !WRITE IT 
0873  01216 017164R         JSB WRIT
0874  01217 001222R         DEF *+3 
0875  01220 100131R         DEF BF,I
0876  01221 000120R         DEF .5
0877*180        RETURN        !RETURN 
0878  01222 127211R         JMP SPACE,I 
0879*181        END 
0880*182  ! 
0881*183        END 
0882                        END 
**  NO ERRORS*













$END ASMB     

*
--> Assemble fmp/29033-80015_Rev-A_2
ON,ASMB,99







 PAGE 0001


0001                ASMB,B,X,L
**  NO ERRORS*





























































 PAGE 0002 #01


0001                ASMB,B,X,L
0002*001  SPL, L, M, O
0003*002        NAME PU..(8)
0004  00000                 NAM PU..,8
0005  00000         .A.     EQU  0
0006  00001         .B.     EQU  1
0007                        ENT PU..
0008                        EXT .ENTR 
0009                        EXT .MPY
0010                        EXT .DIV
0011                        EXT .DRCT 
0012                        EXT .E.R. 
0013                        EXT I.BUF 
0014                        EXT N.OPL 
0015                        EXT PK.DR 
0016                        EXT IER.
0017                        EXT DR.RD 
0018                        EXT LOCK. 
0019                        EXT PURGE 
0020  00000 000000  T       BSS 1 
0021  00001 000000  BLK     BSS 1 
0022  00002 177772  .2      OCT 177772
0023  00003 174052  .3      OCT 174052
0024  00004 177760  .4      OCT 177760
0025  00005 000000  X       BSS 1 
0026  00006 000377  .5      OCT 000377
0027  00007 000000  TI      BSS 1 
0028  00010 000016  .6      OCT 000016
0029  00011 001757  .7      OCT 001757
0030  00012 000001  .8      OCT 000001
0031  00013 000100  .9      OCT 000100
0032  00014 001756  .10     OCT 001756
0033  00015 000000  LOC     BSS 1 
0034  00016 000400  .11     OCT 000400
0035  00017 000000  .12     BSS 1 
0036  00020 177776  .13     OCT 177776
0037  00021 000003  .14     OCT 000003
0038  00022 000010  .17     OCT 000010
0039  00023 177771  .18     OCT 177771
0040  00024 177777  .19     OCT 177777
0041  00025 000002  .20     OCT 000002
0042  00026 000005  .21     OCT 000005
0043*003  ! 
0044*004  !     PURGE FILE ROUTINE FOR THE RTE FILE MANAGER 
0045*005  ! 
0046*006  !     ENTERED AFTER A:
0047*007  ! 
0048*008  !     PU,NAMR 
0049*009  ! 
0050*010  !     W H E R E:
0051*011  ! 
0052*012  !     NAMR     IS THE FILE'S NAMR WHICH CAN CONTAIN:
0053*013  ! 
0054*014  !     CR       (OPTIONAL) IS THE CARTRIDGE ID.
0055*015  ! 
0056*016  !     SC       (OPTIONAL) IS THE FILE SECURITY CODE.







 PAGE 0003 #01


0057*017  ! 
0058*018  ! 
0059*019  !     DEFINE EXTERNAL ADDRESSES 
0060*020  ! 
0061*021        LET .E.R.,I.BUF,N.OPL,PK.DR      BE INTEGER,EXTERNAL
0062*022  ! 
0063*023        LET IER.,DR.RD,LOCK.,PURGE BE SUBROUTINE,EXTERNAL 
0064*024  ! 
0065*025  ! 
0066*026        LET TATSD                        BE CONSTANT (1756K)
0067*027        LET SECT2                        BE CONSTANT (1757K)
0068*028        LET WRIT                         BE CONSTANT (2)
0069*029        LET READI                        BE CONSTANT (1)
0070*030  PU..: SUBROUTINE(NCAM,PLIST,ER) GLOBAL  ! ENTRY POINT 
0071  00027 000000  NCAM    NOP 
0072  00030 000000  PLIST   NOP 
0073  00031 000000  ER      NOP 
0074  00032 000000  PU..    NOP 
0075  00033 016001X         JSB .ENTR 
0076  00034 000027R         DEF NCAM
0077*031  ! 
0078*032        LET NCAM,PLIST,ER  BE INTEGER 
0079*033  ! 
0080*034        DO[T_@N.OPL+1;BLK_@PLIST+1] 
0081  00035 016004X         JSB .DRCT 
0082  00036 000007X         DEF N.OPL 
0083  00037 002004          INA 
0084  00040 072000R         STA T 
0085  00041 062030R         LDA PLIST 
0086  00042 002004          INA 
0087  00043 072001R         STA BLK 
0088*035  ! 
0089*036        PURGE(I.BUF,.E.R.,$BLK,N.OPL,$T)
0090  00044 016014X         JSB PURGE 
0091  00045 000053R         DEF *+6 
0092  00046 000006X         DEF I.BUF 
0093  00047 000005X         DEF .E.R. 
0094  00050 100001R         DEF BLK,I 
0095  00051 000007X         DEF N.OPL 
0096  00052 100000R         DEF T,I 
0097*037  ! 
0098*038        IF .E.R.= -6 THEN .E.R._ -2006 !SET UNDEFINED MESSAGE 
0099  00053 066005X         LDB .E.R. 
0100  00054 056002R         CPB .2
0101  00055 002001          RSS 
0102  00056 026061R         JMP .1
0103  00057 062003R         LDA .3
0104  00060 072005X         STA .E.R. 
0105*039  ! 
0106*040        IF .E.R. = -16 THEN GO TO ZPURG 
0107  00061 066005X .1      LDB .E.R. 
0108  00062 056004R         CPB .4
0109  00063 026067R         JMP ZPURG 
0110*041  ! 
0111*042        IER.
0112  00064 016011X         JSB IER.







 PAGE 0004 #01


0113  00065 000066R         DEF *+1 
0114*043        RETURN
0115  00066 126032R         JMP PU..,I
0116*044  ! 
0117*045  ZPURG:X_$[T_@I.BUF+1] AND 377K !SET X TO THE SECTOR ADDRESS 
0118  00067 016004X ZPURG   JSB .DRCT 
0119  00070 000006X         DEF I.BUF 
0120  00071 002004          INA 
0121  00072 072000R         STA T 
0122  00073 160000          LDA .A.,I 
0123  00074 012006R         AND .5
0124  00075 072005R         STA X 
0125*046        TI,BLK_0    !START WITH BLK ZERO
0126  00076 002400          CLA 
0127  00077 072007R         STA TI
0128  00100 072001R         STA BLK 
0129*047  TEST: IF TI=X THEN GO TO FOUND  !IF MATCH THEN STOP SEARCH
0130  00101 066007R TEST    LDB TI
0131  00102 056005R         CPB X 
0132  00103 026122R         JMP FOUND 
0133*048        BLK_BLK+1   !STEP THE BLOCK ADDRESS 
0134  00104 062001R         LDA BLK 
0135  00105 002004          INA 
0136  00106 072001R         STA BLK 
0137*049        TI_(TI+14)/$SECT2  !COMPUTE THE NEXT LOGICAL
0138  00107 062007R         LDA TI
0139  00110 042010R         ADA .6
0140  00111 006400          CLB 
0141  00112 002020          SSA 
0142  00113 007000          CMB 
0143  00114 016003X         JSB .DIV
0144  00115 100011R         DEF .7,I
0145  00116 072007R         STA TI
0146*050        TI_$1              !BLOCK ADDRESS  IN TI
0147  00117 162012R         LDA .8,I
0148  00120 072007R         STA TI
0149*051        GO TO TEST  !GO SEE IF THIS IS IT 
0150  00121 026101R         JMP TEST
0151*052  ! 
0152*053  FOUND:BLK_BLK+(-(I.BUF/64)+$TATSD-1)*$SECT2-1       ! 
0153  00122 062006X FOUND   LDA I.BUF 
0154  00123 006400          CLB 
0155  00124 002020          SSA 
0156  00125 007000          CMB 
0157  00126 016003X         JSB .DIV
0158  00127 000013R         DEF .9
0159  00130 003004          CMA,INA 
0160  00131 142014R         ADA .10,I 
0161  00132 007400          CCB 
0162  00133 044000          ADB .A. 
0163  00134 060001          LDA .B. 
0164  00135 016002X         JSB .MPY
0165  00136 100011R         DEF .7,I
0166  00137 042001R         ADA BLK 
0167  00140 007400          CCB 
0168  00141 044000          ADB .A. 







 PAGE 0005 #01


0169  00142 076001R         STB BLK 
0170*054        LOC_$T/400K+@PK.DR    !COMPUTE ADDRESS IN BUFFER
0171  00143 162000R         LDA T,I 
0172  00144 006400          CLB 
0173  00145 002020          SSA 
0174  00146 007000          CMB 
0175  00147 016003X         JSB .DIV
0176  00150 000016R         DEF .11 
0177  00151 072017R         STA .12 
0178  00152 016004X         JSB .DRCT 
0179  00153 000010X         DEF PK.DR 
0180  00154 042017R         ADA .12 
0181  00155 072015R         STA LOC 
0182*055        LOCK.(-2,3)?[RETURN]       !LOCK DISC 
0183  00156 016013X         JSB LOCK. 
0184  00157 000162R         DEF *+3 
0185  00160 000020R         DEF .13 
0186  00161 000021R         DEF .14 
0187  00162 002040          SEZ 
0188  00163 126032R         JMP PU..,I
0189*056        DR.RD(READI,-2,BLK)        !READ THE BLOCK
0190  00164 016012X         JSB DR.RD 
0191  00165 000171R         DEF *+4 
0192  00166 000012R         DEF .8
0193  00167 000020R         DEF .13 
0194  00170 000001R         DEF BLK 
0195*057        IF[T_$(LOC+8)]THEN[IF T-N.OPL THEN [ER_-7;GO TO EXIT]] !
0196  00171 062015R         LDA LOC 
0197  00172 042022R         ADA .17 
0198  00173 160000          LDA .A.,I 
0199  00174 072000R         STA T 
0200  00175 002003          SZA,RSS 
0201  00176 026207R         JMP .16 
0202  00177 062007X         LDA N.OPL 
0203  00200 003004          CMA,INA 
0204  00201 042000R         ADA T 
0205  00202 002003          SZA,RSS 
0206  00203 026207R         JMP .16 
0207  00204 062023R         LDA .18 
0208  00205 172031R         STA ER,I
0209  00206 026216R         JMP EXIT
0210*058
0211*059        $LOC _ -1                  !PURGE THE FILE
0212  00207 003400  .16     CCA 
0213  00210 172015R         STA LOC,I 
0214*060        DR.RD(WRIT,-2,BLK)         !WRITE THE BLOCK 
0215  00211 016012X         JSB DR.RD 
0216  00212 000216R         DEF *+4 
0217  00213 000025R         DEF .20 
0218  00214 000020R         DEF .13 
0219  00215 000001R         DEF BLK 
0220*061  EXIT: LOCK.(-2,5)                !UNLOCK
0221  00216 016013X EXIT    JSB LOCK. 
0222  00217 000222R         DEF *+3 
0223  00220 000020R         DEF .13 
0224  00221 000026R         DEF .21 







 PAGE 0006 #01


0225*062        RETURN                     !RETURN
0226  00222 126032R         JMP PU..,I
0227*063        END 
0228*064        END 
0229                        END 
**  NO ERRORS*


















































$END ASMB     

*
--> Assemble fmp/29033-80016_Rev-A_1
ON,ASMB,99







 PAGE 0001


0001                ASMB,B,R,L,C
**  NO ERRORS*





























































 PAGE 0002 #01


0001                ASMB,B,R,L,C
0002  00000               NAM FMGR4,5 
0003                      EXT SEG.R 

0005  00000 062002R FMGR4 LDA TABL
0006  00001 026001X       JMP SEG.R 

0008  00002 000003R TABL  DEF *+1 

0010                      EXT DU..,ST..,CO..
0011  00003 000004X       DEF CO..
0012  00004 000003X       DEF ST..
0013  00005 000002X       DEF DU..
0014                      EXT SP..
0015  00006 000005X       DEF SP..
0016                      END FMGR4 
**  NO ERRORS*







































$END ASMB     

*
--> Assemble fmp/29033-80016_Rev-A_2
ON,ASMB,99







 PAGE 0001


0001                ASMB,B,X,L
**  NO ERRORS*





























































 PAGE 0002 #01


0001                ASMB,B,X,L
0002*001  SPL, L, M, O
0003*002        NAME   ST.DU(8) 
0004  00000                 NAM ST.DU,8 
0005  00000         .A.     EQU  0
0006  00001         .B.     EQU  1
0007                        ENT DU..
0008                        ENT ST..
0009                        EXT .ENTR 
0010                        EXT I.BUF 
0011                        EXT O.BUF 
0012                        EXT BUF.
0013                        EXT N.OPL 
0014                        EXT .E.R. 
0015                        EXT CREA. 
0016                        EXT OPEN. 
0017                        EXT LOCF
0018                        EXT EXEC
0019                        EXT READF 
0020                        EXT WRITF 
0021                        EXT MSS.
0022                        EXT IER.
0023                        EXT CK.SM 
0024                        EXT CLOSE 
0025                        EXT D.AD
0026  00000 177777  .1      OCT 177777
0027  00001 000000  LI12    BSS 1 
0028  00002 000000  LIS8    BSS 1 
0029  00003 000000  LIS4    BSS 1 
0030  00004 000004  .2      OCT 000004
0031  00005 000000  LIS21   BSS 1 
0032  00006 000000  LIS17   BSS 1 
0033  00007 000000  LIS13   BSS 1 
0034  00010 000000  LIS9    BSS 1 
0035  00011 000000  LIS5    BSS 1 
0036  00012 000000  LIS1    BSS 1 
0037  00013 000000  OBUF    BSS 1 
0038  00014 000000  SPDCB   BSS 1 
0039  00015 000000  IBUF    BSS 1 
0040  00016 000000  BUFF    BSS 1 
0041  00017 000000  BUFA    BSS 1 
0042  00020 000000  BF      BSS 1 
0043  00021 000000  F1      BSS 1 
0044  00022 000000  SIOI    BSS 1 
0045  00023 000000  EOFF    BSS 1 
0046  00024 000000  CK      BSS 1 
0047  00025 000000  SIO     BSS 1 
0048  00026 000000  FLG     BSS 1 
0049  00027 000000  LDR     BSS 1 
0050  00030 100000  .3      OCT 100000
0051  00031 000000  SUBF    BSS 1 
0052  00032 000000  F2      BSS 1 
0053  00033 000000  TYP     BSS 1 
0054  00034 000000  DUMP    BSS 1 
0055  00035 000400  .4      OCT 000400
0056  00036 177776  .7      OCT 177776







 PAGE 0003 #01


0057  00037 000067  .8      OCT 000067
0058  00040 000000  DT      BSS 1 
0059  00041 000003  .9      OCT 000003
0060  00042 046523  .11     OCT 046523
0061  00043 020040  .12     OCT 020040
0062  00044 040523  .13     OCT 040523
0063  00045 041122  .15     OCT 041122
0064  00046 000300  .16     OCT 000300
0065  00047 000005  .17     OCT 000005
0066  00050 041116  .19     OCT 041116
0067  00051 041101  .21     OCT 041101
0068  00052 002300  .22     OCT 002300
0069  00053 000007  .23     OCT 000007
0070  00054 046524  .24     OCT 046524
0071  00055 051501  .26     OCT 051501
0072  00056 044510  .28     OCT 044510
0073  00057 000070  .29     OCT 000070
0074  00060 000011  .32     OCT 000011
0075  00061 000000  .33     BSS 1 
0076  00062 000000  ID      BSS 1 
0077  00063 000000  ISZ     BSS 1 
0078  00064 000000  ILU     BSS 1 
0079  00065 000000  INTY    BSS 1 
0080  00066 000000  ISZ2    BSS 1 
0081  00067 023417  .39     OCT 023417
0082  00070 000100  .42     OCT 000100
0083  00071 000010  .43     OCT 000010
0084  00072 177775  .44     OCT 177775
0085  00073 000000  .45     OCT 000000
0086  00074 177677  .47     OCT 177677
0087  00075 000000  SZ1     BSS 1 
0088  00076 000000  SZ      BSS 1 
0089  00077 000000  TY      BSS 1 
0090  00100 000000  OPLS    BSS 1 
0091  00101 000002  .48     OCT 000002
0092  00102 001757  .56     OCT 001757
0093  00103 000000  OLU     BSS 1 
0094  00104 000000  OUTY    BSS 1 
0095  00105 000006  .60     OCT 000006
0096  00106 000000  ALN     BSS 1 
0097  00107 000001  .67     OCT 000001
0098  00110 000200  .68     OCT 000200
0099  00111 177764  .70     OCT 177764
0100  00112 177772  .85     OCT 177772
0101  00113 000000  EQT5    BSS 1 
0102  00114 000015  .87     OCT 000015
0103  00115 037400  .89     OCT 037400
0104  00116 000000  T       BSS 1 
0105*003  !     THIS IS THE RTE FMP FMGR ROUTINE TO STORE 
0106*004  !     AND DUMP FILES. 
0107*005  ! 
0108*006  !     DU,NAME,LU,OP1,OP2,OP3
0109*007  ! 
0110*008  !        O R
0111*009  ! 
0112*010  !     ST,LU,NAME,OP1,OP2,OP3,OP4







 PAGE 0004 #01


0113*011  ! 
0114*012  ! 
0115*013  !     W H E R E:
0116*014  ! 
0117*015  !     ST            IS STORE. 
0118*016  !     DU            IS DUMP.
0119*017  ! 
0120*018  !     NAME
0121*019  !     NAME          IS THE FILE TO BE STORED OR DUMPED. 
0122*020  ! 
0123*021  !     LU            IS EITHER THE SOURCE OR DESTINATION 
0124*022  !                   DEVICE AND MAY BE A FILE REFERENCE. 
0125*023  ! 
0126*024  !     OP1           IS A MEDIUM ASC CODE AS FOLLOWS:
0127*025  !                     AS   ASCII DATA 
0128*026  !                     BR   BINARY RELOCATABLE DATA
0129*027  !                     BA   BINARY ABSOLUTE DATA 
0130*028  !                     MT   MAG TAPE NORMAL FORMAT 
0131*029  !                     MS   MAG TAPE SIO FORMAT
0132*030  ! 
0133*031  !     OP2           IS AN END OF FILE OPTION
0134*032  !                   FLAG -- TWO ASC CHARACTERS: 
0135*033  !                     SA   SAVE END OF FILES IN THE 
0136*034  !                          NEW FILE.
0137*035  !                     IN   INHIBIT ALL LEADER, TRAILER, 
0138*036  !                          END OF FILE TRANSFERS; 
0139*037  !                          DOES NOT APPLY TO FINAL
0140*038  !                          EOF ON A DISC FILE.
0141*039  ! 
0142*040  !     OP3           IS THE NUMBER OF THE FIRST FILE 
0143*041  !                   TO BE TRANSFERRED (APPLIES TO 
0144*042  !                   FILES OF TYPE ZERO) (DEFAULT=1) 
0145*043  ! 
0146*044  !     OP4           IS THE NUMBER OF FILES TO BE
0147*045  !                   TRANSFERRED (APPLIES TO FILES 
0148*046  !                   OF TYPE ZERO) (DEFAULT= ) 
0149*047  ! 
0150*048  !     N O T E:      OP3 AND OP4 ARE RELATIVE TO CURRENT POSITI
0151*049  ! 
0152*050  !     DEFINE EXTERNALS
0153*051  ! 
0154*052        LET I.BUF,O.BUF,BUF. BE INTEGER,EXTERNAL
0155*053  ! 
0156*054        LET N.OPL,.E.R.      BE INTEGER,EXTERNAL
0157*055  ! 
0158*056        LET CREA.,OPEN.,LOCF,\
0159*           EXEC,READF,WRITF,\
0160*           MSS.,\
0161*           IER.,CK.SM,CLOSE BE SUBROUTINE,EXTERNAL 
0162*057  ! 
0163*058        LET D.AD             BE FUNCTION,EXTERNAL 
0164*059  ! 
0165*060        LET DU..,ST..        BE SUBROUTINE
0166*061  ! 
0167*062        LET SECT2     BE CONSTANT(1757K)
0168*063        LET AS        BE CONSTANT (40523K)







 PAGE 0005 #01


0169*064        LET BR        BE CONSTANT (41122K)
0170*065        LET BN        BE CONSTANT (41116K)
0171*066        LET BA        BE CONSTANT (41101K)
0172*067        LET MT        BE CONSTANT (46524K)
0173*068        LET MS        BE CONSTANT (46523K)
0174*069        LET IH        BE CONSTANT (44510K)
0175*070        LET SA        BE CONSTANT (51501K)
0176*071  ! 
0177*072  ST..: SUBROUTINE(NPD,LISTO,ERD)  GLOBAL 
0178  00117 000000  NPD     NOP 
0179  00120 000000  LISTO   NOP 
0180  00121 000000  ERD     NOP 
0181  00122 000000  ST..    NOP 
0182  00123 016001X         JSB .ENTR 
0183  00124 000117R         DEF NPD 
0184*073        ERD_ -1  !SET DUMP FLAG 
0185  00125 003400          CCA 
0186  00126 172121R         STA ERD,I 
0187*074        DU..(NPD,LISTO,ERD) 
0188  00127 016140R         JSB DU..
0189  00130 000134R         DEF *+4 
0190  00131 100117R         DEF NPD,I 
0191  00132 100120R         DEF LISTO,I 
0192  00133 100121R         DEF ERD,I 
0193*075        RETURN
0194  00134 126122R         JMP ST..,I
0195*076        END 
0196*077  ! 
0197*078  DU..: SUBROUTINE(NPS,LISTS,ERS)  GLOBAL 
0198  00135 000000  NPS     NOP 
0199  00136 000000  LISTS   NOP 
0200  00137 000000  ERS     NOP 
0201  00140 000000  DU..    NOP 
0202  00141 016001X         JSB .ENTR 
0203  00142 000135R         DEF NPS 
0204*079        LI12_[LIS8_[LIS4_@LISTS+4]+4]+4 
0205  00143 062136R         LDA LISTS 
0206  00144 042004R         ADA .2
0207  00145 072003R         STA LIS4
0208  00146 042004R         ADA .2
0209  00147 072002R         STA LIS8
0210  00150 042004R         ADA .2
0211  00151 072001R         STA LI12
0212*080  ! 
0213*081        LIS21_[LIS17_[LIS13_[LIS9_[LIS5_[LIS1_\ 
0214*         @LISTS+1]+4]+4]+4]+4]+4 
0215  00152 062136R         LDA LISTS 
0216  00153 002004          INA 
0217  00154 072012R         STA LIS1
0218  00155 042004R         ADA .2
0219  00156 072011R         STA LIS5
0220  00157 042004R         ADA .2
0221  00160 072010R         STA LIS9
0222  00161 042004R         ADA .2
0223  00162 072007R         STA LIS13 
0224  00163 042004R         ADA .2







 PAGE 0006 #01


0225  00164 072006R         STA LIS17 
0226  00165 042004R         ADA .2
0227  00166 072005R         STA LIS21 
0228*082  ! 
0229*083  !     PRESET DEFAULT OPTIONS
0230*084  ! 
0231*085        OBUF,SPDCB_D.AD(O.BUF) !SET DCB ADDRESS FOR SPACING 
0232  00167 016021X         JSB D.AD
0233  00170 000172R         DEF *+2 
0234  00171 000003X         DEF O.BUF 
0235  00172 072013R         STA OBUF
0236  00173 072014R         STA SPDCB 
0237*086        IBUF_D.AD(I.BUF)  !SET INPUT DCB ADDRESS
0238  00174 016021X         JSB D.AD
0239  00175 000177R         DEF *+2 
0240  00176 000002X         DEF I.BUF 
0241  00177 072015R         STA IBUF
0242*087        BUFF,BUFA,BF_D.AD(BUF.) 
0243  00200 016021X         JSB D.AD
0244  00201 000203R         DEF *+2 
0245  00202 000004X         DEF BUF.
0246  00203 072016R         STA BUFF
0247  00204 072017R         STA BUFA
0248  00205 072020R         STA BF
0249*088        DO[F1,SIOI,EOFF,CK,SIO,FLG_0;LDR_100000K] 
0250  00206 002400          CLA 
0251  00207 072021R         STA F1
0252  00210 072022R         STA SIOI
0253  00211 072023R         STA EOFF
0254  00212 072024R         STA CK
0255  00213 072025R         STA SIO 
0256  00214 072026R         STA FLG 
0257  00215 062030R         LDA .3
0258  00216 072027R         STA LDR 
0259*089        DO[SUBF_400K;F2,TYP,DUMP_1] 
0260  00217 062035R         LDA .4
0261  00220 072031R         STA SUBF
0262  00221 002404          CLA,INA 
0263  00222 072032R         STA F2
0264  00223 072033R         STA TYP 
0265  00224 072034R         STA DUMP
0266*090        IFNOT ERS+1 THEN [ERS,DUMP_0;SPDCB_IBUF] !SET STORE OPTI
0267  00225 162137R         LDA ERS,I 
0268  00226 002004          INA 
0269  00227 002002          SZA 
0270  00230 026236R         JMP .5
0271  00231 002400          CLA 
0272  00232 172137R         STA ERS,I 
0273  00233 072034R         STA DUMP
0274  00234 062015R         LDA IBUF
0275  00235 072014R         STA SPDCB 
0276*091        IF NPS<2 THEN [ERS_55;RETURN] 
0277  00236 166135R .5      LDB NPS,I 
0278  00237 046036R         ADB .7
0279  00240 006021          SSB,RSS 
0280  00241 026245R         JMP .6







 PAGE 0007 #01


0281  00242 062037R         LDA .8
0282  00243 172137R         STA ERS,I 
0283  00244 126140R         JMP DU..,I
0284*092        DT_3   !SET DEFAULT TYPE
0285  00245 062041R .6      LDA .9
0286  00246 072040R         STA DT
0287*093  ! 
0288*094  !     ANALYZE OPTIONS 
0289*095  ! 
0290*096  !       FIRST THE TYPE FLAG 
0291*097  ! 
0292*098        IFNOT $LIS8 THEN GO TO ST3 !OPTION IS NULL GO TO CHECK N
0293  00247 162002R         LDA LIS8,I
0294  00250 002003          SZA,RSS 
0295  00251 026355R         JMP ST3 
0296*099        IF $LIS9 = MS THEN [SIO_1;BUFA_BF+1;\ 
0297*                              LIS9_LIS9+1] 
0298  00252 166010R         LDB LIS9,I
0299  00253 056042R         CPB .11 
0300  00254 002001          RSS 
0301  00255 026266R         JMP .10 
0302  00256 002404          CLA,INA 
0303  00257 072025R         STA SIO 
0304  00260 062020R         LDA BF
0305  00261 002004          INA 
0306  00262 072017R         STA BUFA
0307  00263 062010R         LDA LIS9
0308  00264 002004          INA 
0309  00265 072010R         STA LIS9
0310*100        IF $LIS9="  " THEN GO TO ST3
0311  00266 166010R .10     LDB LIS9,I
0312  00267 056043R         CPB .12 
0313  00270 026355R         JMP ST3 
0314*101           IF $LIS9 = AS THEN GO TO ST3 
0315  00271 166010R         LDB LIS9,I
0316  00272 056044R         CPB .13 
0317  00273 026355R         JMP ST3 
0318*102           IF $LIS9 = BR THEN[CK,SUBF_300K;\
0319*                        DT_5; GO TO ST3] 
0320  00274 166010R         LDB LIS9,I
0321  00275 056045R         CPB .15 
0322  00276 002001          RSS 
0323  00277 026306R         JMP .14 
0324  00300 062046R         LDA .16 
0325  00301 072024R         STA CK
0326  00302 072031R         STA SUBF
0327  00303 062047R         LDA .17 
0328  00304 072040R         STA DT
0329  00305 026355R         JMP ST3 
0330*103           IF $LIS9 = BN THEN[SUBF_300K;   \
0331*                              GO TO ST3] 
0332  00306 166010R .14     LDB LIS9,I
0333  00307 056050R         CPB .19 
0334  00310 002001          RSS 
0335  00311 026315R         JMP .18 
0336  00312 062046R         LDA .16 







 PAGE 0008 #01


0337  00313 072031R         STA SUBF
0338  00314 026355R         JMP ST3 
0339*104        IF $LIS9 = BA THEN[CK,SUBF_2300K;TYP_0;\
0340*                         DT_7;GO TO ST3] 
0341  00315 166010R .18     LDB LIS9,I
0342  00316 056051R         CPB .21 
0343  00317 002001          RSS 
0344  00320 026331R         JMP .20 
0345  00321 062052R         LDA .22 
0346  00322 072024R         STA CK
0347  00323 072031R         STA SUBF
0348  00324 002400          CLA 
0349  00325 072033R         STA TYP 
0350  00326 062053R         LDA .23 
0351  00327 072040R         STA DT
0352  00330 026355R         JMP ST3 
0353*105        IF $LIS9 = MT THEN GO TO ST3
0354  00331 166010R .20     LDB LIS9,I
0355  00332 056054R         CPB .24 
0356  00333 026355R         JMP ST3 
0357*106        IF $LIS9 = SA THEN[EOFF_1;GO TO ST2]
0358  00334 166010R         LDB LIS9,I
0359  00335 056055R         CPB .26 
0360  00336 002001          RSS 
0361  00337 026343R         JMP .25 
0362  00340 002404          CLA,INA 
0363  00341 072023R         STA EOFF
0364  00342 026400R         JMP ST2 
0365*107        IF $LIS9 = IH THEN[LDR_0;GO TO ST2] 
0366  00343 166010R .25     LDB LIS9,I
0367  00344 056056R         CPB .28 
0368  00345 002001          RSS 
0369  00346 026352R         JMP STER1 
0370  00347 002400          CLA 
0371  00350 072027R         STA LDR 
0372  00351 026400R         JMP ST2 
0373*108  ! 
0374*109  STER1:DO[ERS_56; RETURN]
0375  00352 062057R STER1   LDA .29 
0376  00353 172137R         STA ERS,I 
0377  00354 126140R         JMP DU..,I
0378*110  ! 
0379*111  !     CHECK FOR OP2 
0380*112  ! 
0381*113  ST3:  IF $LI12#3 THEN GO TO ST2 
0382  00355 166001R ST3     LDB LI12,I
0383  00356 056041R         CPB .9
0384  00357 002001          RSS 
0385  00360 026400R         JMP ST2 
0386*114  ! 
0387*115        IF $LIS13 = SA THEN[EOFF_1;GO TO ST5] 
0388  00361 166007R         LDB LIS13,I 
0389  00362 056055R         CPB .26 
0390  00363 002001          RSS 
0391  00364 026370R         JMP .30 
0392  00365 002404          CLA,INA 







 PAGE 0009 #01


0393  00366 072023R         STA EOFF
0394  00367 026404R         JMP ST5 
0395*116        IF $LIS13 = IH THEN[LDR_0;GO TO ST5]
0396  00370 166007R .30     LDB LIS13,I 
0397  00371 056056R         CPB .28 
0398  00372 002001          RSS 
0399  00373 026377R         JMP .31 
0400  00374 002400          CLA 
0401  00375 072027R         STA LDR 
0402  00376 026404R         JMP ST5 
0403*117  ! 
0404*118        GO TO STER1   !ILLEGAL OPTION 
0405  00377 026352R .31     JMP STER1 
0406*119  !     OPT2          WAS FOUND IN OP1 LOCATION SO
0407*120  !                   ADJUST ADDRESSES AND SKIP 
0408*121  !                   OPT2 CHECK. 
0409*122  ! 
0410*123  ! 
0411*124  ST2:  DO[LIS21_[LIS17_LIS13]+4] 
0412  00400 062007R ST2     LDA LIS13 
0413  00401 072006R         STA LIS17 
0414  00402 042004R         ADA .2
0415  00403 072005R         STA LIS21 
0416*125  ST5:  OPEN.(I.BUF,$LIS1,N.OPL  ,SUBF+11K) 
0417  00404 062031R ST5     LDA SUBF
0418  00405 042060R         ADA .32 
0419  00406 072061R         STA .33 
0420  00407 016010X         JSB OPEN. 
0421  00410 000415R         DEF *+5 
0422  00411 000002X         DEF I.BUF 
0423  00412 100012R         DEF LIS1,I
0424  00413 000005X         DEF N.OPL 
0425  00414 000061R         DEF .33 
0426*126        LOCF(I.BUF,.E.R.,ID,ID,ID,ISZ,ILU,INTY,ISZ2)
0427  00415 016011X         JSB LOCF
0428  00416 000430R         DEF *+10
0429  00417 000002X         DEF I.BUF 
0430  00420 000006X         DEF .E.R. 
0431  00421 000062R         DEF ID
0432  00422 000062R         DEF ID
0433  00423 000062R         DEF ID
0434  00424 000063R         DEF ISZ 
0435  00425 000064R         DEF ILU 
0436  00426 000065R         DEF INTY
0437  00427 000066R         DEF ISZ2
0438*127        IER.
0439  00430 016016X         JSB IER.
0440  00431 000432R         DEF *+1 
0441*128        IF $LIS17>0 THEN F1_$LIS17-1
0442  00432 166006R         LDB LIS17,I 
0443  00433 007004          CMB,INB 
0444  00434 006021          SSB,RSS 
0445  00435 026441R         JMP .34 
0446  00436 003400          CCA 
0447  00437 142006R         ADA LIS17,I 
0448  00440 072021R         STA F1







 PAGE 0010 #01


0449*129        IF $LIS21>0 THEN F2_$LIS21, ELSE \
0450*          [IFNOT $LIS21 THEN [IF$LIS17>0 THEN GOTO ST6,ELSE[\
0451*                              IF    INTY THEN F2_9999]]] 
0452  00441 166005R .34     LDB LIS21,I 
0453  00442 007004          CMB,INB 
0454  00443 006021          SSB,RSS 
0455  00444 026450R         JMP .37 
0456  00445 162005R         LDA LIS21,I 
0457  00446 072032R         STA F2
0458  00447 026464R         JMP ST6 
0459  00450 162005R .37     LDA LIS21,I 
0460  00451 002002          SZA 
0461  00452 026464R         JMP ST6 
0462  00453 166006R         LDB LIS17,I 
0463  00454 007004          CMB,INB 
0464  00455 006020          SSB 
0465  00456 026464R         JMP ST6 
0466  00457 062065R         LDA INTY
0467  00460 002003          SZA,RSS 
0468  00461 026464R         JMP ST6 
0469  00462 062067R         LDA .39 
0470  00463 072032R         STA F2
0471*130  ! 
0472*131  ST6:  SUBF_(SUBF AND 100K)+LDR+10K \SET OUTPUT FUNCTION 
0473*          OR[IF (INTY AND 177775K)=5 THEN 100K,ELSE 0] 
0474  00464 062031R ST6     LDA SUBF
0475  00465 012070R         AND .42 
0476  00466 042027R         ADA LDR 
0477  00467 042071R         ADA .43 
0478  00470 072061R         STA .33 
0479  00471 062065R         LDA INTY
0480  00472 012072R         AND .44 
0481  00473 052047R         CPA .17 
0482  00474 002001          RSS 
0483  00475 026500R         JMP .40 
0484  00476 062070R         LDA .42 
0485  00477 026501R         JMP .41 
0486  00500 062073R .40     LDA .45 
0487  00501 032061R .41     IOR .33 
0488  00502 072031R         STA SUBF
0489*132        IF $LIS9=AS THEN SUBF_SUBF AND 177677K
0490  00503 166010R         LDB LIS9,I
0491  00504 056044R         CPB .13 
0492  00505 002001          RSS 
0493  00506 026512R         JMP .46 
0494  00507 062031R         LDA SUBF
0495  00510 012074R         AND .47 
0496  00511 072031R         STA SUBF
0497*133  !     IF A STORE OPERATION CREAT THE FILE 
0498*134  ! 
0499*135        SZ1_[SZ_[TY_[OPLS_D.AD(N.OPL)+5]+2]+1]+1
0500  00512 016021X .46     JSB D.AD
0501  00513 000515R         DEF *+2 
0502  00514 000005X         DEF N.OPL 
0503  00515 042047R         ADA .17 
0504  00516 072100R         STA OPLS







 PAGE 0011 #01


0505  00517 042101R         ADA .48 
0506  00520 072077R         STA TY
0507  00521 002004          INA 
0508  00522 072076R         STA SZ
0509  00523 002004          INA 
0510  00524 072075R         STA SZ1 
0511*136  ! 
0512*137        IFNOT ERS+2 THEN[ERS_0;GO TO ST12] !COPY CALL THE FILE I
0513  00525 162137R         LDA ERS,I 
0514  00526 042101R         ADA .48 
0515  00527 002002          SZA 
0516  00530 026534R         JMP .49 
0517  00531 002400          CLA 
0518  00532 172137R         STA ERS,I 
0519  00533 026613R         JMP ST12
0520*138        IF DUMP THEN GO TO ST10 
0521  00534 062034R .49     LDA DUMP
0522  00535 002002          SZA 
0523  00536 026605R         JMP ST10
0524*139  ! 
0525*140  !     SET DEFAULTS
0526*141  ! 
0527*142        IFNOT $TY THEN $TY_[IF INTY THEN INTY,\ 
0528*          ELSE DT] 
0529  00537 162077R         LDA TY,I
0530  00540 002002          SZA 
0531  00541 026551R         JMP .52 
0532  00542 062065R         LDA INTY
0533  00543 002003          SZA,RSS 
0534  00544 026547R         JMP .50 
0535  00545 062065R         LDA INTY
0536  00546 026550R         JMP .51 
0537  00547 062040R .50     LDA DT
0538  00550 172077R .51     STA TY,I
0539*143        IFNOT $SZ THEN $SZ_[IF INTY THEN ISZ->1,\ 
0540*                            ELSE $SECT2->2]
0541  00551 162076R .52     LDA SZ,I
0542  00552 002002          SZA 
0543  00553 026565R         JMP .55 
0544  00554 062065R         LDA INTY
0545  00555 002003          SZA,RSS 
0546  00556 026562R         JMP .53 
0547  00557 062063R         LDA ISZ 
0548  00560 001300          RAR 
0549  00561 026564R         JMP .54 
0550  00562 162102R .53     LDA .56,I 
0551  00563 001323          RAR,RAR 
0552  00564 172076R .54     STA SZ,I
0553*144        IFNOT $SZ1 THEN[IF INTY THEN $SZ1_ISZ2] 
0554  00565 162075R .55     LDA SZ1,I 
0555  00566 002002          SZA 
0556  00567 026575R         JMP .58 
0557  00570 062065R         LDA INTY
0558  00571 002003          SZA,RSS 
0559  00572 026575R         JMP .58 
0560  00573 062066R         LDA ISZ2







 PAGE 0012 #01


0561  00574 172075R         STA SZ1,I 
0562*145  ! 
0563*146  !     CREAT THE FILE
0564*147  ! 
0565*148        CREA.(O.BUF,$LIS5,$OPLS)?[GO TO ST10] 
0566  00575 016007X .58     JSB CREA. 
0567  00576 000602R         DEF *+4 
0568  00577 000003X         DEF O.BUF 
0569  00600 100011R         DEF LIS5,I
0570  00601 100100R         DEF OPLS,I
0571  00602 002040          SEZ 
0572  00603 026605R         JMP ST10
0573*149        GO TO ST12
0574  00604 026613R         JMP ST12
0575*150  ST10:      OPEN.(O.BUF,$LIS5,$OPLS,SUBF)
0576  00605 016010X ST10    JSB OPEN. 
0577  00606 000613R         DEF *+5 
0578  00607 000003X         DEF O.BUF 
0579  00610 100011R         DEF LIS5,I
0580  00611 100100R         DEF OPLS,I
0581  00612 000031R         DEF SUBF
0582*151  ST12: LOCF(O.BUF,.E.R.,ID,ID,ID,ISZ,OLU,OUTY) 
0583  00613 016011X ST12    JSB LOCF
0584  00614 000625R         DEF *+9 
0585  00615 000003X         DEF O.BUF 
0586  00616 000006X         DEF .E.R. 
0587  00617 000062R         DEF ID
0588  00620 000062R         DEF ID
0589  00621 000062R         DEF ID
0590  00622 000063R         DEF ISZ 
0591  00623 000103R         DEF OLU 
0592  00624 000104R         DEF OUTY
0593*152        IER.
0594  00625 016016X         JSB IER.
0595  00626 000627R         DEF *+1 
0596*153        IF INTY=6 THEN $(IBUF+2),INTY_1 
0597  00627 066065R         LDB INTY
0598  00630 056105R         CPB .60 
0599  00631 002001          RSS 
0600  00632 026640R         JMP .59 
0601  00633 062015R         LDA IBUF
0602  00634 042101R         ADA .48 
0603  00635 006404          CLB,INB 
0604  00636 174000          STB .A.,I 
0605  00637 076065R         STB INTY
0606*154        IF OUTY=6 THEN $(OBUF+2),OUTY_1 
0607  00640 066104R .59     LDB OUTY
0608  00641 056105R         CPB .60 
0609  00642 002001          RSS 
0610  00643 026651R         JMP .61 
0611  00644 062013R         LDA OBUF
0612  00645 042101R         ADA .48 
0613  00646 006404          CLB,INB 
0614  00647 174000          STB .A.,I 
0615  00650 076104R         STB OUTY
0616*155  ! 







 PAGE 0013 #01


0617*156  !     BOTH IN AND OUT ARE OPEN -- 
0618*157  !     LEADER HAS BEEN PUNCHED IF NOT SUPPRESSED.
0619*158  ! 
0620*159  !     IF SIO STORE THEN SET IT UP 
0621*160  ! 
0622*161        IF SIO THEN [IFNOT DUMP THEN[\
0623*          SIO_0; SIOI_1;BUFF_[BUFA_BF]+1]] 
0624  00651 062025R .61     LDA SIO 
0625  00652 002003          SZA,RSS 
0626  00653 026667R         JMP .64 
0627  00654 062034R         LDA DUMP
0628  00655 002002          SZA 
0629  00656 026667R         JMP .64 
0630  00657 002400          CLA 
0631  00660 072025R         STA SIO 
0632  00661 002404          CLA,INA 
0633  00662 072022R         STA SIOI
0634  00663 062020R         LDA BF
0635  00664 072017R         STA BUFA
0636  00665 002004          INA 
0637  00666 072016R         STA BUFF
0638*162  ! 
0639*163        UNTIL F1=0 DO[READF($SPDCB,.E.R.,$BUFA,1,ALN);IER.;\
0640*          IF ALN<1 THEN F1_F1- 1]
0641  00667 066021R .64     LDB F1
0642  00670 006003          SZB,RSS 
0643  00671 026713R         JMP ST15
0644  00672 016013X         JSB READF 
0645  00673 000701R         DEF *+6 
0646  00674 100014R         DEF SPDCB,I 
0647  00675 000006X         DEF .E.R. 
0648  00676 100017R         DEF BUFA,I
0649  00677 000107R         DEF .67 
0650  00700 000106R         DEF ALN 
0651  00701 016016X         JSB IER.
0652  00702 000703R         DEF *+1 
0653  00703 066106R         LDB ALN 
0654  00704 046000R         ADB .1
0655  00705 006021          SSB,RSS 
0656  00706 026712R         JMP .66 
0657  00707 003400          CCA 
0658  00710 042021R         ADA F1
0659  00711 072021R         STA F1
0660  00712 026667R .66     JMP .64 
0661*164  ST15: READF(I.BUF,.E.R.,$BUFA,128,ALN)
0662  00713 016013X ST15    JSB READF 
0663  00714 000722R         DEF *+6 
0664  00715 000002X         DEF I.BUF 
0665  00716 000006X         DEF .E.R. 
0666  00717 100017R         DEF BUFA,I
0667  00720 000110R         DEF .68 
0668  00721 000106R         DEF ALN 
0669*165        IF .E.R.= -12 THEN [ALN_ -1;GO TO ST16] 
0670  00722 066006X         LDB .E.R. 
0671  00723 056111R         CPB .70 
0672  00724 002001          RSS 







 PAGE 0014 #01


0673  00725 026731R         JMP .69 
0674  00726 003400          CCA 
0675  00727 072106R         STA ALN 
0676  00730 026737R         JMP ST16
0677*166        IER.
0678  00731 016016X .69     JSB IER.
0679  00732 000733R         DEF *+1 
0680*167        IF ALN>0 THEN GO TO ST20 ! DATA?
0681  00733 066106R         LDB ALN 
0682  00734 007004          CMB,INB 
0683  00735 006020          SSB 
0684  00736 026772R         JMP ST20
0685*168  ! 
0686*169  !     NO DATA -- EITHER EOF OR ZERO REG 
0687*170  ! 
0688*171  ! 
0689*172  !     END OF XFER?
0690*173  ! 
0691*174  ST16: IFNOT ALN+1 THEN[IF INTY THEN[F2_0;\
0692*                 GO TO ST18]]!TRUE EOF-QUIT
0693  00737 062106R ST16    LDA ALN 
0694  00740 002004          INA 
0695  00741 002002          SZA 
0696  00742 026751R         JMP .72 
0697  00743 062065R         LDA INTY
0698  00744 002003          SZA,RSS 
0699  00745 026751R         JMP .72 
0700  00746 002400          CLA 
0701  00747 072032R         STA F2
0702  00750 026764R         JMP ST18
0703*175  ! 
0704*176        IF [F2_F2-1] THEN [IF EOFF THEN[ALN_-1;\
0705*                 GO TO ST22],ELSE GO TO ST25]
0706  00751 003400  .72     CCA 
0707  00752 042032R         ADA F2
0708  00753 072032R         STA F2
0709  00754 002003          SZA,RSS 
0710  00755 026764R         JMP ST18
0711  00756 062023R         LDA EOFF
0712  00757 002003          SZA,RSS 
0713  00760 027114R         JMP ST25
0714  00761 003400          CCA 
0715  00762 072106R         STA ALN 
0716  00763 027031R         JMP ST22
0717*177  ST18: ALN_-1
0718  00764 003400  ST18    CCA 
0719  00765 072106R         STA ALN 
0720*178        IF LDR  THEN GO TO ST22 
0721  00766 062027R         LDA LDR 
0722  00767 002002          SZA 
0723  00770 027031R         JMP ST22
0724*179  ! 
0725*180        GO TO EXIT   !DONE - NO EOF REQUIRED
0726  00771 027166R         JMP EXIT
0727*181  ! 
0728*182  ST20: DO            [IF SIOI THEN [ALN_[\ 







 PAGE 0015 #01


0729*           IF $BUFA<0 THEN-$BUFA,ELSE\ 
0730*            ($BUFA+1)>-1];ID_BUFA+1],ELSE\ 
0731*              ID_BUFA ;IF CK THEN\ 
0732*                 CK.SM($ID,TYP)?[GO TO ABO]] 
0733  00772 062022R ST20    LDA SIOI
0734  00773 002003          SZA,RSS 
0735  00774 027014R         JMP .76 
0736  00775 166017R         LDB BUFA,I
0737  00776 006021          SSB,RSS 
0738  00777 027004R         JMP .74 
0739  01000 166017R         LDB BUFA,I
0740  01001 007004          CMB,INB 
0741  01002 060001          LDA .B. 
0742  01003 027007R         JMP .75 
0743  01004 162017R .74     LDA BUFA,I
0744  01005 002004          INA 
0745  01006 001100          ARS 
0746  01007 072106R .75     STA ALN 
0747  01010 062017R         LDA BUFA
0748  01011 002004          INA 
0749  01012 072062R         STA ID
0750  01013 027016R         JMP .77 
0751  01014 062017R .76     LDA BUFA
0752  01015 072062R         STA ID
0753  01016 062024R .77     LDA CK
0754  01017 002003          SZA,RSS 
0755  01020 027027R         JMP .78 
0756  01021 016017X         JSB CK.SM 
0757  01022 001025R         DEF *+3 
0758  01023 100062R         DEF ID,I
0759  01024 000033R         DEF TYP 
0760  01025 002040          SEZ 
0761  01026 027135R         JMP ABO 
0762*183        FLG_1  !SET FLAG TO SAY WE WROTE A RECORD 
0763  01027 002404  .78     CLA,INA 
0764  01030 072026R         STA FLG 
0765*184  ST22: IF ALN>0 THEN[IF SIO THEN[$BUFF_-ALN;ALN_ALN+1]],\
0766*         ELSE[IF F2 THEN[IF OUTY THEN ALN_0]]
0767  01031 066106R ST22    LDB ALN 
0768  01032 007004          CMB,INB 
0769  01033 006021          SSB,RSS 
0770  01034 027047R         JMP .82 
0771  01035 062025R         LDA SIO 
0772  01036 002003          SZA,RSS 
0773  01037 027046R         JMP .79 
0774  01040 066106R         LDB ALN 
0775  01041 007004          CMB,INB 
0776  01042 176016R         STB BUFF,I
0777  01043 062106R         LDA ALN 
0778  01044 002004          INA 
0779  01045 072106R         STA ALN 
0780  01046 027057R .79     JMP .83 
0781  01047 062032R .82     LDA F2
0782  01050 002003          SZA,RSS 
0783  01051 027057R         JMP .83 
0784  01052 062104R         LDA OUTY







 PAGE 0016 #01


0785  01053 002003          SZA,RSS 
0786  01054 027057R         JMP .83 
0787  01055 002400          CLA 
0788  01056 072106R         STA ALN 
0789*185        WRITF(O.BUF,.E.R.,$BUFF,ALN)
0790  01057 016014X .83     JSB WRITF 
0791  01060 001065R         DEF *+5 
0792  01061 000003X         DEF O.BUF 
0793  01062 000006X         DEF .E.R. 
0794  01063 100016R         DEF BUFF,I
0795  01064 000106R         DEF ALN 
0796*186        IF .E.R. = -6 THEN[MSS.(.E.R.);ID_-1;GO TO\ 
0797*                      ENDIT] 
0798  01065 066006X         LDB .E.R. 
0799  01066 056112R         CPB .85 
0800  01067 002001          RSS 
0801  01070 027077R         JMP .84 
0802  01071 016015X         JSB MSS.
0803  01072 001074R         DEF *+2 
0804  01073 000006X         DEF .E.R. 
0805  01074 003400          CCA 
0806  01075 072062R         STA ID
0807  01076 027142R         JMP ENDIT 
0808*187        IER.
0809  01077 016016X .84     JSB IER.
0810  01100 001101R         DEF *+1 
0811*188        IF ALN= -1 THEN[IFNOT F2 THEN GOTO EXIT,\ 
0812*                 ELSE GO TO ST25  ]
0813  01101 066106R         LDB ALN 
0814  01102 056000R         CPB .1
0815  01103 002001          RSS 
0816  01104 027111R         JMP .86 
0817  01105 062032R         LDA F2
0818  01106 002002          SZA 
0819  01107 027114R         JMP ST25
0820  01110 027166R         JMP EXIT
0821*189        IF ALN THEN GO TO ST15
0822  01111 062106R .86     LDA ALN 
0823  01112 002002          SZA 
0824  01113 026713R         JMP ST15
0825*190  ST25: EXEC (13, ILU,EQT5) 
0826  01114 016012X ST25    JSB EXEC
0827  01115 001121R         DEF *+4 
0828  01116 000114R         DEF .87 
0829  01117 000064R         DEF ILU 
0830  01120 000113R         DEF EQT5
0831*191        IF(EQT5 AND 37400K)=400K THEN [MSS.(6);\
0832*            EXEC(7)] 
0833  01121 062113R         LDA EQT5
0834  01122 012115R         AND .89 
0835  01123 052035R         CPA .4
0836  01124 002001          RSS 
0837  01125 027134R         JMP .88 
0838  01126 016015X         JSB MSS.
0839  01127 001131R         DEF *+2 
0840  01130 000105R         DEF .60 







 PAGE 0017 #01


0841  01131 016012X         JSB EXEC
0842  01132 001134R         DEF *+2 
0843  01133 000053R         DEF .23 
0844*192        GO TO ST15
0845  01134 026713R .88     JMP ST15
0846*193  ABO: DO[MSS.(7);ID_-1]
0847  01135 016015X ABO     JSB MSS.
0848  01136 001140R         DEF *+2 
0849  01137 000053R         DEF .23 
0850  01140 003400          CCA 
0851  01141 072062R         STA ID
0852*194  ENDIT:IF DUMP THEN RETURN 
0853  01142 062034R ENDIT   LDA DUMP
0854  01143 002002          SZA 
0855  01144 126140R         JMP DU..,I
0856*195        IFNOT OUTY THEN RETURN
0857  01145 062104R         LDA OUTY
0858  01146 002003          SZA,RSS 
0859  01147 126140R         JMP DU..,I
0860*196        CLOSE(O.BUF,.E.R.,$SZ-ID-1)  !CLOSE AND 
0861  01150 062062R         LDA ID
0862  01151 003004          CMA,INA 
0863  01152 142076R         ADA SZ,I
0864  01153 007400          CCB 
0865  01154 044000          ADB .A. 
0866  01155 076061R         STB .33 
0867  01156 016020X         JSB CLOSE 
0868  01157 001163R         DEF *+4 
0869  01160 000003X         DEF O.BUF 
0870  01161 000006X         DEF .E.R. 
0871  01162 000061R         DEF .33 
0872*197        IER.
0873  01163 016016X         JSB IER.
0874  01164 001165R         DEF *+1 
0875*198        RETURN
0876  01165 126140R         JMP DU..,I
0877*199  ! 
0878*200  EXIT: LOCF(O.BUF,.E.R.,T,ID)
0879  01166 016011X EXIT    JSB LOCF
0880  01167 001174R         DEF *+5 
0881  01170 000003X         DEF O.BUF 
0882  01171 000006X         DEF .E.R. 
0883  01172 000116R         DEF T 
0884  01173 000062R         DEF ID
0885*201        IER.
0886  01174 016016X         JSB IER.
0887  01175 001176R         DEF *+1 
0888*202        IFNOT FLG THEN ID_-1
0889  01176 062026R         LDA FLG 
0890  01177 002002          SZA 
0891  01200 027203R         JMP .90 
0892  01201 003400          CCA 
0893  01202 072062R         STA ID
0894*203        GO TO ENDIT 
0895  01203 027142R .90     JMP ENDIT 
0896*204        END 







 PAGE 0018 #01


0897*205  ! 
0898*206  ! 
0899*207        END 
0900                        END 
**  NO ERRORS*



















































$END ASMB     

*
--> Assemble fmp/29033-80017_Rev-A_1
ON,ASMB,99







 PAGE 0001


0001                ASMB,B,X,L
**  NO ERRORS*





























































 PAGE 0002 #01


0001                ASMB,B,X,L
0002*001  SPL, L, M, O
0003*002        NAME  CO..(8) 
0004  00000                 NAM CO..,8
0005  00000         .A.     EQU  0
0006  00001         .B.     EQU  1
0007                        ENT CO..
0008                        EXT .ENTR 
0009                        EXT .DIV
0010                        EXT .DRCT 
0011                        EXT DR.RD 
0012                        EXT DU..
0013                        EXT MSS.
0014                        EXT FM.ER 
0015                        EXT CREAT 
0016                        EXT PK.DR 
0017                        EXT N.OPL 
0018                        EXT DS.LU 
0019                        EXT O.BUF 
0020                        EXT D.AD
0021  00000 000000  STLIS   BSS 1 
0022  00001 000000  FNAM    BSS     3 
0023  00004 000000  LTY     BSS 1 
0024  00005 000000  TNAM    BSS     3 
0025  00010 000000  OPLS    BSS 1 
0026  00011 000000  SACD    BSS 1 
0027  00012 000000  DM      BSS    14 
0028  00030 000000  T       BSS 1 
0029  00031 000001  .1      OCT 000001
0030  00032 000000R .5      DEF STLIS 
0031  00033 000027  .6      OCT 000027
0032  00034 000003  .7      OCT 000003
0033  00035 051501  .8      OCT 051501
0034  00036 000000  LIS5    BSS 1 
0035  00037 000000  LIS1    BSS 1 
0036  00040 000004  .9      OCT 000004
0037  00041 000000  OPS2    BSS 1 
0038  00042 000000  OPS1    BSS 1 
0039  00043 000000  OPT2    BSS 1 
0040  00044 000000  OPCR2   BSS 1 
0041  00045 000000  OPL     BSS 1 
0042  00046 000000  OPT1    BSS 1 
0043  00047 000000  OPCR1   BSS 1 
0044  00050 000000  BLK     BSS 1 
0045  00051 000000  ADD     BSS 1 
0046  00052 000200  .13     OCT 000200
0047  00053 000000  DRBF    BSS 1 
0048  00054 000000  LU      BSS 1 
0049  00055 000000  .15     OCT 000000
0050  00056 000025  .16     OCT 000025
0051  00057 000000  PKD     BSS 1 
0052  00060 000000  PKD3    BSS 1 
0053  00061 000000  PKD5    BSS 1 
0054  00062 177400  .17     OCT 177400
0055  00063 000000  .E.R.   BSS 1 
0056  00064 000000  PKD8    BSS 1 







 PAGE 0003 #01


0057  00065 174060  .19     OCT 174060
0058  00066 000000  .20     BSS 1 
0059  00067 000000  ERR     BSS 1 
0060  00070 177776  .21     OCT 177776
0061  00071 000026  .23     OCT 000026
0062  00072 000000  PKD7    BSS 1 
0063  00073 000000  PKD6    BSS 1 
0064  00074 000000  PKD2    BSS 1 
0065  00075 000002  .26     OCT 000002
0066  00076 000020  .27     OCT 000020
0067  00077 000000  T1      BSS 1 
0068  00100 000001R .29     DEF FNAM
0069  00101 000000  T2      BSS 1 
0070  00102 000005R .30     DEF TNAM
0071*003  !     CO.. IS A MODULE  OF THE RTE
0072*004  !     FMP  PROGRAM  FMGR. 
0073*005  !     CO  COPIES  ALL  DISC  FILES  ON
0074*006  !     ONE  DISC   TO   SOME   OTHER DISC. 
0075*007  !     THE   COMMAND  IS:
0076*008  !     CO, CR, CR2 
0077*009  !     WHERE:
0078*010  !         CR IS THE FROM DISC ID
0079*011  !         CR2  IS THE TO DISC ID
0080*012  ! 
0081*013  ! 
0082*014  !     DEFINE  EXTERNALS 
0083*015  ! 
0084*016        LET  DR.RD, DU..,MSS.,FM.ER,CREAT,CLOS.\
0085*                          BE SUBROUTINE,EXTERNAL 
0086*017  ! 
0087*018        LET PK.DR,N.OPL, DS.LU BE INTEGER,EXTERNAL
0088*019        LET O.BUF     BE INTEGER ,EXTERNAL
0089*020  ! 
0090*021        LET  D.AD     BE  FUNCTION,EXTERNAL 
0091*022  !     DEFINE   LOCALS 
0092*023  ! 
0093*024        LET SETAD   BE SUBROUTINE 
0094*025  ! 
0095*026        LET STLIS,FNAM(3),LTY,TNAM(3),\ 
0096*             OPLS, SACD, DM(14)  BE INTEGER
0097*027  CO..: SUBROUTINE (N, LIS,ER) GLOBAL 
0098  00103 000000  N       NOP 
0099  00104 000000  LIS     NOP 
0100  00105 000000  ER      NOP 
0101  00106 000000  CO..    NOP 
0102  00107 016001X         JSB .ENTR 
0103  00110 000103R         DEF N 
0104*028                      !SET UP DU.. CALL ARRAY 
0105*029        FOR  T _ @ STLIS TO @ STLIS+23 DO  $T _0
0106  00111 062032R         LDA .5
0107  00112 072030R         STA T 
0108  00113 026117R         JMP .3
0109  00114 062030R .2      LDA T 
0110  00115 002004          INA 
0111  00116 072030R         STA T 
0112  00117 062032R .3      LDA .5







 PAGE 0004 #01


0113  00120 042033R         ADA .6
0114  00121 003004          CMA,INA 
0115  00122 042030R         ADA T 
0116  00123 003004          CMA,INA 
0117  00124 002020          SSA 
0118  00125 026131R         JMP .4
0119  00126 002400          CLA 
0120  00127 172030R         STA T,I 
0121  00130 026114R         JMP .2
0122*030        LTY,STLIS,OPLS_3 !SET TYPE FLAGS
0123  00131 062034R .4      LDA .7
0124  00132 072004R         STA LTY 
0125  00133 072000R         STA STLIS 
0126  00134 072010R         STA OPLS
0127*031  ! 
0128*032        SACD _ 51501K   ! SAVE  EOF  MARKS
0129  00135 062035R         LDA .8
0130  00136 072011R         STA SACD
0131*033  ! 
0132*034        LIS5 _ [LIS1 _ @ LIS+1]+4 
0133  00137 062104R         LDA LIS 
0134  00140 002004          INA 
0135  00141 072037R         STA LIS1
0136  00142 042040R         ADA .9
0137  00143 072036R         STA LIS5
0138*035  ! 
0139*036  !     SET UP THE OPTION   LIST ADDRESSES
0140*037  ! 
0141*038        OPS2_ [OPS1_[OPT2 _ [OPCR2_ [OPL_ [OPT1_ [\ 
0142*                   OPCR1_ D.AD(N.OPL)+1]+1]+3] \ 
0143*                     + 1]+1]+1]+1
0144  00144 016015X         JSB D.AD
0145  00145 000147R         DEF *+2 
0146  00146 000012X         DEF N.OPL 
0147  00147 002004          INA 
0148  00150 072047R         STA OPCR1 
0149  00151 002004          INA 
0150  00152 072046R         STA OPT1
0151  00153 042034R         ADA .7
0152  00154 072045R         STA OPL 
0153  00155 002004          INA 
0154  00156 072044R         STA OPCR2 
0155  00157 002004          INA 
0156  00160 072043R         STA OPT2
0157  00161 002004          INA 
0158  00162 072042R         STA OPS1
0159  00163 002004          INA 
0160  00164 072041R         STA OPS2
0161*039  ! 
0162*040        BLK_0 
0163  00165 002400          CLA 
0164  00166 072050R         STA BLK 
0165*041        FOR T _  OPCR1  TO  OPS2  DO  $T _ 0
0166  00167 062047R         LDA OPCR1 
0167  00170 072030R         STA T 
0168  00171 026175R         JMP .11 







 PAGE 0005 #01


0169  00172 062030R .10     LDA T 
0170  00173 002004          INA 
0171  00174 072030R         STA T 
0172  00175 066030R .11     LDB T 
0173  00176 007004          CMB,INB 
0174  00177 046041R         ADB OPS2
0175  00200 006020          SSB 
0176  00201 026205R         JMP .12 
0177  00202 002400          CLA 
0178  00203 172030R         STA T,I 
0179  00204 026172R         JMP .10 
0180*042  ! 
0181*043        $ OPCR1 _ $ LIS1
0182  00205 162037R .12     LDA LIS1,I
0183  00206 172047R         STA OPCR1,I 
0184*044        $ OPCR2 _ $ LIS5
0185  00207 162036R         LDA LIS5,I
0186  00210 172044R         STA OPCR2,I 
0187*045        ADD_128  !SET UP ADDRESS INCREMENT
0188  00211 062052R         LDA .13 
0189  00212 072051R         STA ADD 
0190*046  ! 
0191*047        DRBF _ D.AD (PK.DR) ! SET PACK BUFADD.
0192  00213 016015X         JSB D.AD
0193  00214 000216R         DEF *+2 
0194  00215 000011X         DEF PK.DR 
0195  00216 072053R         STA DRBF
0196*048  ! 
0197*049  !     CHECK FOR LEGAL DISCS.
0198*050  ! 
0199*051        IF $ LIS5 THEN    [DR.RD(1,$LIS5,0)?[ \ 
0200*                          GO TO NODES] ; LU_$$@DS.LU\
0201*                          ;GO TO INCK] 
0202  00217 162036R         LDA LIS5,I
0203  00220 002003          SZA,RSS 
0204  00221 026237R         JMP NODES 
0205  00222 016004X         JSB DR.RD 
0206  00223 000227R         DEF *+4 
0207  00224 000031R         DEF .1
0208  00225 100036R         DEF LIS5,I
0209  00226 000055R         DEF .15 
0210  00227 002040          SEZ 
0211  00230 026237R         JMP NODES 
0212  00231 016003X         JSB .DRCT 
0213  00232 000013X         DEF DS.LU 
0214  00233 160000          LDA .A.,I 
0215  00234 160000          LDA .A.,I 
0216  00235 072054R         STA LU
0217  00236 026242R         JMP INCK
0218*052  ! 
0219*053  NODES:DO[ER_21;RETURN]! NO DIS C EXIT 
0220  00237 062056R NODES   LDA .16 
0221  00240 172105R         STA ER,I
0222  00241 126106R         JMP CO..,I
0223*054  ! 
0224*055  INCK: IFNOT $LIS1  THEN GO TO NODES 







 PAGE 0006 #01


0225  00242 162037R INCK    LDA LIS1,I
0226  00243 002003          SZA,RSS 
0227  00244 026237R         JMP NODES 
0228*056  ! 
0229*057        SETAD ? [GO TO NODES] 
0230  00245 016357R         JSB SETAD 
0231  00246 000247R         DEF *+1 
0232  00247 002040          SEZ 
0233  00250 026237R         JMP NODES 
0234*058        IF LU = $$@ DS.LU THEN GO TO NODES
0235  00251 016003X         JSB .DRCT 
0236  00252 000013X         DEF DS.LU 
0237  00253 160000          LDA .A.,I 
0238  00254 160000          LDA .A.,I 
0239  00255 052054R         CPA LU
0240  00256 026237R         JMP NODES 
0241*059  ! 
0242*060  !     BOTH DISCS ARE DEFINED AND
0243*061  !     SEPERATE
0244*062  ! 
0245*063  !     START TRANSFER
0246*064  ! 
0247*065  XFER: SETAD? [RETURN   ]
0248  00257 016357R XFER    JSB SETAD 
0249  00260 000261R         DEF *+1 
0250  00261 002040          SEZ 
0251  00262 126106R         JMP CO..,I
0252*066        IF  $PKD<0  THEN GO TO XFER 
0253  00263 166057R         LDB PKD,I 
0254  00264 006020          SSB 
0255  00265 026257R         JMP XFER
0256*067  ! 
0257*068        IFNOT  $PKD3  THEN GO TO XFER 
0258  00266 162060R         LDA PKD3,I
0259  00267 002003          SZA,RSS 
0260  00270 026257R         JMP XFER
0261*069        IF $PKD5 AND 177400K THEN GOTO XFER !SKIP EXTENTS 
0262  00271 162061R         LDA PKD5,I
0263  00272 012062R         AND .17 
0264  00273 002002          SZA 
0265  00274 026257R         JMP XFER
0266*070        FM.ER (1, FNAM,3) ! SEND CURRENT NAME TO LOG
0267  00275 016007X         JSB FM.ER 
0268  00276 000302R         DEF *+4 
0269  00277 000031R         DEF .1
0270  00300 000001R         DEF FNAM
0271  00301 000034R         DEF .7
0272*071        CREAT(O.BUF,.E.R.,$PKD,$OPS1,$PKD3,$PKD8,$LIS5)! CREAT T
0273  00302 016010X         JSB CREAT 
0274  00303 000313R         DEF *+8 
0275  00304 000014X         DEF O.BUF 
0276  00305 000063R         DEF .E.R. 
0277  00306 100057R         DEF PKD,I 
0278  00307 100042R         DEF OPS1,I
0279  00310 100060R         DEF PKD3,I
0280  00311 100064R         DEF PKD8,I







 PAGE 0007 #01


0281  00312 100036R         DEF LIS5,I
0282*072        IF .E.R.<0 THEN [MSS.(.E.R.-2000);GO TO XFER] 
0283  00313 066063R         LDB .E.R. 
0284  00314 006021          SSB,RSS 
0285  00315 026325R         JMP .18 
0286  00316 062063R         LDA .E.R. 
0287  00317 042065R         ADA .19 
0288  00320 072066R         STA .20 
0289  00321 016006X         JSB MSS.
0290  00322 000324R         DEF *+2 
0291  00323 000066R         DEF .20 
0292  00324 026257R         JMP XFER
0293*073        ERR_-2  !SET COPY CALL FLAG FOR DU ROUTINE
0294  00325 062070R .18     LDA .21 
0295  00326 072067R         STA ERR 
0296*074        DU..(4, STLIS,ERR) !CALL STORE TO TRANSFER
0297  00327 016005X         JSB DU..
0298  00330 000334R         DEF *+4 
0299  00331 000040R         DEF .9
0300  00332 000000R         DEF STLIS 
0301  00333 000067R         DEF ERR 
0302*075  ! 
0303*076        IFNOT ERR THEN GO TO XFER 
0304  00334 062067R         LDA ERR 
0305  00335 002003          SZA,RSS 
0306  00336 026257R         JMP XFER
0307*077  ! 
0308*078        ER _ ERR- 2000
0309  00337 062067R         LDA ERR 
0310  00340 042065R         ADA .19 
0311  00341 172105R         STA ER,I
0312*079  ! 
0313*080  BAD:  MSS. (ER)          !PRINT MESSAGE 
0314  00342 016006X BAD     JSB MSS.
0315  00343 000345R         DEF *+2 
0316  00344 100105R         DEF ER,I
0317*081  ! 
0318*082        IF ER < 2000 THEN [ER_0; GO TO XFER]
0319  00345 166105R         LDB ER,I
0320  00346 046065R         ADB .19 
0321  00347 006021          SSB,RSS 
0322  00350 026354R         JMP .22 
0323  00351 002400          CLA 
0324  00352 172105R         STA ER,I
0325  00353 026257R         JMP XFER
0326*083  ! 
0327*084        ER _ 22 
0328  00354 062071R .22     LDA .23 
0329  00355 172105R         STA ER,I
0330*085        RETURN
0331  00356 126106R         JMP CO..,I
0332*086        END 
0333*087  ! 
0334*088  ! 
0335*089  SETAD:SUBROUTINE  FEXIT   ! READ DIRECTORY
0336  00357 000000  SETAD   NOP 







 PAGE 0008 #01


0337  00360 016001X         JSB .ENTR 
0338  00361 000357R         DEF SETAD 
0339*090                            ! AND SET UP ST CALL
0340*091  ! 
0341*092        IF ADD = 128 THEN [ \ 
0342*             DR.RD (1,$LIS1,BLK)?[FRETURN];\ 
0343*                 ADD_ 0; BLK_ BLK+1] 
0344  00362 066051R         LDB ADD 
0345  00363 056052R         CPB .13 
0346  00364 002001          RSS 
0347  00365 026404R         JMP .25 
0348  00366 016004X         JSB DR.RD 
0349  00367 000373R         DEF *+4 
0350  00370 000031R         DEF .1
0351  00371 100037R         DEF LIS1,I
0352  00372 000050R         DEF BLK 
0353  00373 002041          SEZ,RSS 
0354  00374 026377R         JMP .24 
0355  00375 002300          CCE 
0356  00376 126357R         JMP SETAD,I 
0357  00377 002400  .24     CLA 
0358  00400 072051R         STA ADD 
0359  00401 062050R         LDA BLK 
0360  00402 002004          INA 
0361  00403 072050R         STA BLK 
0362*093  ! 
0363*094        PKD8_[PKD7_[PKD6_[PKD5_[PKD3_[PKD2_[PKD_ \
0364*              DRBF+ADD]+2]+1]+2]+1]+1]+1 
0365  00404 062053R .25     LDA DRBF
0366  00405 042051R         ADA ADD 
0367  00406 072057R         STA PKD 
0368  00407 042075R         ADA .26 
0369  00410 072074R         STA PKD2
0370  00411 002004          INA 
0371  00412 072060R         STA PKD3
0372  00413 042075R         ADA .26 
0373  00414 072061R         STA PKD5
0374  00415 002004          INA 
0375  00416 072073R         STA PKD6
0376  00417 002004          INA 
0377  00420 072072R         STA PKD7
0378  00421 002004          INA 
0379  00422 072064R         STA PKD8
0380*095  ! 
0381*096        ADD_ ADD+16   !SET ADD FOR NEXT TIME
0382  00423 062051R         LDA ADD 
0383  00424 042076R         ADA .27 
0384  00425 072051R         STA ADD 
0385*097        IFNOT   $PKD THEN FRETURN !END OF DIR.
0386  00426 162057R         LDA PKD,I 
0387  00427 002002          SZA 
0388  00430 026433R         JMP .28 
0389  00431 002300          CCE 
0390  00432 126357R         JMP SETAD,I 
0391*098        T1_@FNAM     !SET  TO MOVE
0392  00433 062100R .28     LDA .29 







 PAGE 0009 #01


0393  00434 072077R         STA T1
0394*099        T2_@ TNAM     !NAME  TO  CALL 
0395  00435 062102R         LDA .30 
0396  00436 072101R         STA T2
0397*100        FOR  T _ PKD TO PKD2 DO[$T1,$T2_ $T;\ 
0398*                                 T1_T1 +1; T2_T2+1]
0399  00437 062057R         LDA PKD 
0400  00440 072030R         STA T 
0401  00441 026445R         JMP .32 
0402  00442 062030R .31     LDA T 
0403  00443 002004          INA 
0404  00444 072030R         STA T 
0405  00445 066030R .32     LDB T 
0406  00446 007004          CMB,INB 
0407  00447 046074R         ADB PKD2
0408  00450 006020          SSB 
0409  00451 026464R         JMP .33 
0410  00452 162030R         LDA T,I 
0411  00453 172077R         STA T1,I
0412  00454 172101R         STA T2,I
0413  00455 062077R         LDA T1
0414  00456 002004          INA 
0415  00457 072077R         STA T1
0416  00460 062101R         LDA T2
0417  00461 002004          INA 
0418  00462 072101R         STA T2
0419  00463 026442R         JMP .31 
0420*101  ! 
0421*102        N.OPL,$OPL_$PKD8  ! SET SECURITY CODES
0422  00464 162064R .33     LDA PKD8,I
0423  00465 072012X         STA N.OPL 
0424  00466 172045R         STA OPL,I 
0425*103  ! 
0426*104        $OPT1,$OPT2_$PKD3 ! SET TYPES 
0427  00467 162060R         LDA PKD3,I
0428  00470 172046R         STA OPT1,I
0429  00471 172043R         STA OPT2,I
0430*105        $OPS1_$PKD6/2  ! SET DEST SIZE
0431  00472 162073R         LDA PKD6,I
0432  00473 006400          CLB 
0433  00474 002020          SSA 
0434  00475 007000          CMB 
0435  00476 016002X         JSB .DIV
0436  00477 000075R         DEF .26 
0437  00500 172042R         STA OPS1,I
0438*106        $OPS2_$PKD7      ! SET DEST REC. SIZE 
0439  00501 162072R         LDA PKD7,I
0440  00502 172041R         STA OPS2,I
0441*107        RETURN              ! DONE - RETURN 
0442  00503 000040          CLE 
0443  00504 126357R         JMP SETAD,I 
0444*108        END 
0445*109        END 
0446                        END 
**  NO ERRORS*

$END ASMB     

*
--> Assemble fmp/29033-80017_Rev-A_2
ON,ASMB,99







 PAGE 0001


0001                ASMB,B,X,L
**  NO ERRORS*





























































 PAGE 0002 #01


0001                ASMB,B,X,L
0002*001  SPL, L, M, O
0003*002        NAME SP..(8)
0004  00000                 NAM SP..,8
0005  00000         .A.     EQU  0
0006  00001         .B.     EQU  1
0007                        ENT SP..
0008                        EXT .ENTR 
0009                        EXT .DIV
0010                        EXT .DRCT 
0011                        EXT CREA. 
0012                        EXT D.RIO 
0013                        EXT WRITF 
0014                        EXT READF 
0015                        EXT RWNDF 
0016                        EXT IER.
0017                        EXT ID.A
0018                        EXT D.SDR 
0019                        EXT O.BUF 
0020                        EXT I.BUF 
0021                        EXT N.OPL 
0022  00000 000001  .2      OCT 000001
0023  00001 000062  .3      OCT 000062
0024  00002 000000  PAD     BSS 1 
0025  00003 000000  ID27    BSS 1 
0026  00004 000000  ID      BSS 1 
0027  00005 000016  .5      OCT 000016
0028  00006 000032  .6      OCT 000032
0029  00007 000000  BF      BSS 1 
0030  00010 000000  T1      BSS 1 
0031  00011 000000  T       BSS 1 
0032  00012 000177  .10     OCT 000177
0033  00013 000031  .14     OCT 000031
0034  00014 000013  .15     OCT 000013
0035  00015 000000  .16     BSS 1 
0036  00016 000000  ID15    BSS 1 
0037  00017 000007  .17     OCT 000007
0038  00020 177776  .19     OCT 177776
0039  00021 000004  .20     OCT 000004
0040  00022 000070  .21     OCT 000070
0041  00023 000000  ID16    BSS 1 
0042  00024 000000  ID17    BSS 1 
0043  00025 000010  .22     OCT 000010
0044  00026 000000  ID18    BSS 1 
0045  00027 167777  .23     OCT 167777
0046  00030 000000  SZR     BSS 1 
0047  00031 000000  SZ      BSS 1 
0048  00032 000000  TY      BSS 1 
0049  00033 000000  CR      BSS 1 
0050  00034 000200  .24     OCT 000200
0051  00035 000006  .25     OCT 000006
0052  00036 000000  XF      BSS 1 
0053  00037 000000  ID23    BSS 1 
0054  00040 000000  ID25    BSS 1 
0055  00041 000003  .27     OCT 000003
0056  00042 000002  .28     OCT 000002







 PAGE 0003 #01


0057  00043 177761  .30     OCT 177761
0058  00044 000000  ID30    BSS 1 
0059  00045 000175  .31     OCT 000175
0060  00046 177777  .32     OCT 177777
0061  00047 000000  ID28    BSS 1 
0062  00050 000000  ID29    BSS 1 
0063  00051 000000  .E.R.   BSS 1 
0064  00052 000000  IBUF    BSS 1 
0065  00053 000020  .36     OCT 000020
0066  00054 000000  ID12    BSS 1 
0067  00055 000000  ID13    BSS 1 
0068  00056 077600  .39     OCT 077600
0069  00057 000000  ID14    BSS 1 
0070  00060 001760  .42     OCT 001760
0071  00061 001757  .43     OCT 001757
0072  00062 001717  .44     OCT 001717
0073  00063 000000  ID26    BSS 1 
0074  00064 000400  .45     OCT 000400
0075  00065 000000  MFV     BSS 1 
0076  00066 000077  .48     OCT 000077
0077  00067 000000  ID24    BSS 1 
0078  00070 000005  .49     OCT 000005
0079*003  ! 
0080*004  !     THE SP ROUTINE SAVES A PROGRAM
0081*005  !     IN A FILE.  THE FIRST TWO SECTORS 
0082*006  !     ARE SET UP TO ALLOW THE PROGRAM 
0083*007  !     TO BE RESTORED TO THE SYSTEM
0084*008  ! 
0085*009  !     THIS PROGRAM IS INVOLKED BY : 
0086*010  !     SP, NAME
0087*011  !       WHERE:
0088*012  !           NAME IS THE NAME OF THE 
0089*013  !             PROGRAM TO BE SAVED.
0090*014  ! 
0091*015  !     DEFINE THE EXTERNALS
0092*016  ! 
0093*017        LET CREA., D.RIO,\
0094*            WRITF,READF,RWNDF,\
0095*           IER.,OPEN.         BE SUBROUTINE,EXTERNAL 
0096*018  ! 
0097*019        LET  ID.A         BE FUNCTION,EXTERNAL
0098*020  ! 
0099*021        LET D.SDR,O.BUF,I.BUF,N.OPL BE INTEGER,EXTERNAL 
0100*022  ! 
0101*023  !     DEFINE INTERNAL ROUTINES
0102*024  ! 
0103*025        LET ADS, SP.. BE SUBROUTINE 
0104*026  ! 
0105*027        LET MF            BE FUNCTION 
0106*028  ! 
0107*029  !     DEFINE CONSTANTS
0108*030  ! 
0109*031        LET  XEQT    BE CONSTANT    (1717K) 
0110*032        LET  SECT2    BE CONSTANT  (1757K)
0111*033        LET  SECT3    BE CONSTANT  (1760K)
0112*034  SP..: SUBROUTINE (N,LIS,ER)  GLOBAL 







 PAGE 0004 #01


0113  00071 000000  N       NOP 
0114  00072 000000  LIS     NOP 
0115  00073 000000  ER      NOP 
0116  00074 000000  SP..    NOP 
0117  00075 016001X         JSB .ENTR 
0118  00076 000071R         DEF N 
0119*035        IF N#1 THEN [ER_50; RETURN] 
0120  00077 166071R         LDB N,I 
0121  00100 056000R         CPB .2
0122  00101 026105R         JMP .1
0123  00102 062001R         LDA .3
0124  00103 172073R         STA ER,I
0125  00104 126074R         JMP SP..,I
0126*036        PAD_@ LIS +1
0127  00105 062072R .1      LDA LIS 
0128  00106 002004          INA 
0129  00107 072002R         STA PAD 
0130*037         ID27_[ID_ ID.A($PAD)?[ER_14 ; RETURN]]+26
0131  00110 016012X         JSB ID.A
0132  00111 000113R         DEF *+2 
0133  00112 100002R         DEF PAD,I 
0134  00113 002041          SEZ,RSS 
0135  00114 026120R         JMP .4
0136  00115 062005R         LDA .5
0137  00116 172073R         STA ER,I
0138  00117 126074R         JMP SP..,I
0139  00120 072004R .4      STA ID
0140  00121 042006R         ADA .6
0141  00122 072003R         STA ID27
0142*038  ! 
0143*039        BF,T1_@I.BUF
0144  00123 016003X         JSB .DRCT 
0145  00124 000015X         DEF I.BUF 
0146  00125 072007R         STA BF
0147  00126 072010R         STA T1
0148*040        FOR T_BF TO BF +127 DO $T_0 
0149  00127 062007R         LDA BF
0150  00130 072011R         STA T 
0151  00131 026135R         JMP .8
0152  00132 062011R .7      LDA T 
0153  00133 002004          INA 
0154  00134 072011R         STA T 
0155  00135 062007R .8      LDA BF
0156  00136 042012R         ADA .10 
0157  00137 003004          CMA,INA 
0158  00140 042011R         ADA T 
0159  00141 003004          CMA,INA 
0160  00142 002020          SSA 
0161  00143 026147R         JMP .9
0162  00144 002400          CLA 
0163  00145 172011R         STA T,I 
0164  00146 026132R         JMP .7
0165*041        FOR T_ID TO ID+25 DO [$T1_ $T;T1_T1+1]
0166  00147 062004R .9      LDA ID
0167  00150 072011R         STA T 
0168  00151 026155R         JMP .12 







 PAGE 0005 #01


0169  00152 062011R .11     LDA T 
0170  00153 002004          INA 
0171  00154 072011R         STA T 
0172  00155 062004R .12     LDA ID
0173  00156 042013R         ADA .14 
0174  00157 003004          CMA,INA 
0175  00160 042011R         ADA T 
0176  00161 003004          CMA,INA 
0177  00162 002020          SSA 
0178  00163 026172R         JMP .13 
0179  00164 162011R         LDA T,I 
0180  00165 172010R         STA T1,I
0181  00166 062010R         LDA T1
0182  00167 002004          INA 
0183  00170 072010R         STA T1
0184  00171 026152R         JMP .11 
0185*042        ADS (BF+11) 
0186  00172 062007R .13     LDA BF
0187  00173 042014R         ADA .15 
0188  00174 072015R         STA .16 
0189  00175 016515R         JSB ADS 
0190  00176 000200R         DEF *+2 
0191  00177 000015R         DEF .16 
0192*043        T_$ID15 AND 7    !GET TYPE OF PGM 
0193  00200 162016R         LDA ID15,I
0194  00201 012017R         AND .17 
0195  00202 072011R         STA T 
0196*044        IF T>1 THEN [IF T#4 THEN GO TO SP2] !LEGAL CONTINUE 
0197  00203 066011R         LDB T 
0198  00204 046020R         ADB .19 
0199  00205 006020          SSB 
0200  00206 026213R         JMP .18 
0201  00207 066011R         LDB T 
0202  00210 056021R         CPB .20 
0203  00211 002001          RSS 
0204  00212 026216R         JMP SP2 
0205*045        ER_56   !ILLEGAL PROGRAM TYPE 
0206  00213 062022R .18     LDA .21 
0207  00214 172073R         STA ER,I
0208*046        RETURN
0209  00215 126074R         JMP SP..,I
0210*047  ! 
0211*048  SP2:  $ID16,$ID17,$(BF+8)_0 
0212  00216 002400  SP2     CLA 
0213  00217 172023R         STA ID16,I
0214  00220 172024R         STA ID17,I
0215  00221 066007R         LDB BF
0216  00222 046025R         ADB .22 
0217  00223 170001          STA .B.,I 
0218*049        $ID18_($ID18 AND 167777K) 
0219  00224 162026R         LDA ID18,I
0220  00225 012027R         AND .23 
0221  00226 172026R         STA ID18,I
0222*050        SZR_[SZ_[TY_[CR_ @N.OPL+1]+1]+1]+1
0223  00227 016003X         JSB .DRCT 
0224  00230 000016X         DEF N.OPL 







 PAGE 0006 #01


0225  00231 002004          INA 
0226  00232 072033R         STA CR
0227  00233 002004          INA 
0228  00234 072032R         STA TY
0229  00235 002004          INA 
0230  00236 072031R         STA SZ
0231  00237 002004          INA 
0232  00240 072030R         STA SZR 
0233*051        $SZR_128
0234  00241 062034R         LDA .24 
0235  00242 172030R         STA SZR,I 
0236*052        $TY_6 
0237  00243 062035R         LDA .25 
0238  00244 172032R         STA TY,I
0239*053  ! 
0240*054        IFNOT  $CR THEN $CR_-2
0241  00245 162033R         LDA CR,I
0242  00246 002002          SZA 
0243  00247 026252R         JMP .26 
0244  00250 062020R         LDA .19 
0245  00251 172033R         STA CR,I
0246*055  ! 
0247*056       XF_[$SZ_(MF( ID23)+ MF( ID25)+3)/2]-1
0248  00252 016474R .26     JSB MF
0249  00253 000255R         DEF *+2 
0250  00254 000037R         DEF ID23
0251  00255 072015R         STA .16 
0252  00256 016474R         JSB MF
0253  00257 000261R         DEF *+2 
0254  00260 000040R         DEF ID25
0255  00261 042015R         ADA .16 
0256  00262 042041R         ADA .27 
0257  00263 006400          CLB 
0258  00264 002020          SSA 
0259  00265 007000          CMB 
0260  00266 016002X         JSB .DIV
0261  00267 000042R         DEF .28 
0262  00270 172031R         STA SZ,I
0263  00271 007400          CCB 
0264  00272 044000          ADB .A. 
0265  00273 076036R         STB XF
0266*057  ! 
0267*058        CREA. (O.BUF,$PAD,N.OPL)?[ER_-15;RETURN]
0268  00274 016004X         JSB CREA. 
0269  00275 000301R         DEF *+4 
0270  00276 000014X         DEF O.BUF 
0271  00277 100002R         DEF PAD,I 
0272  00300 000016X         DEF N.OPL 
0273  00301 002041          SEZ,RSS 
0274  00302 026306R         JMP .29 
0275  00303 062043R         LDA .30 
0276  00304 172073R         STA ER,I
0277  00305 126074R         JMP SP..,I
0278*059  ! 
0279*060        $(@O.BUF+2)_1  !FOURCE TO TYPE 1
0280  00306 016003X .29     JSB .DRCT 







 PAGE 0007 #01


0281  00307 000014X         DEF O.BUF 
0282  00310 042042R         ADA .28 
0283  00311 006404          CLB,INB 
0284  00312 174000          STB .A.,I 
0285*061        D.RIO (1)    ! READ THE SET UP WORD 
0286  00313 016005X         JSB D.RIO 
0287  00314 000316R         DEF *+2 
0288  00315 000000R         DEF .2
0289*062  ! 
0290*063        $ID30_$(125+@D.SDR)!MOVE TO ID BLOCK
0291  00316 016003X         JSB .DRCT 
0292  00317 000013X         DEF D.SDR 
0293  00320 042045R         ADA .31 
0294  00321 160000          LDA .A.,I 
0295  00322 172044R         STA ID30,I
0296*064        I.BUF_ -1  !SET EOF FOR THOSE WHO DON'T KNOW BETTER 
0297  00323 003400          CCA 
0298  00324 072015X         STA I.BUF 
0299*065  ! 
0300*066        FOR T_BF TO ID28 DO[$ID29_$ID29+$T] 
0301  00325 062007R         LDA BF
0302  00326 072011R         STA T 
0303  00327 026333R         JMP .34 
0304  00330 062011R .33     LDA T 
0305  00331 002004          INA 
0306  00332 072011R         STA T 
0307  00333 066011R .34     LDB T 
0308  00334 007004          CMB,INB 
0309  00335 046047R         ADB ID28
0310  00336 006020          SSB 
0311  00337 026344R         JMP .35 
0312  00340 162050R         LDA ID29,I
0313  00341 142011R         ADA T,I 
0314  00342 172050R         STA ID29,I
0315  00343 026330R         JMP .33 
0316*067  ! 
0317*068        WRITF(O.BUF,.E.R.,I.BUF) ! WRITE ID 
0318  00344 016006X .35     JSB WRITF 
0319  00345 000351R         DEF *+4 
0320  00346 000014X         DEF O.BUF 
0321  00347 000051R         DEF .E.R. 
0322  00350 000015X         DEF I.BUF 
0323*069        IER.
0324  00351 016011X         JSB IER.
0325  00352 000353R         DEF *+1 
0326*070  ! 
0327*071        ADS (     [IBUF_@O.BUF+16]+2) 
0328  00353 016003X         JSB .DRCT 
0329  00354 000014X         DEF O.BUF 
0330  00355 042053R         ADA .36 
0331  00356 072052R         STA IBUF
0332  00357 042042R         ADA .28 
0333  00360 072015R         STA .16 
0334  00361 016515R         JSB ADS 
0335  00362 000364R         DEF *+2 
0336  00363 000015R         DEF .16 







 PAGE 0008 #01


0337*072  ! 
0338*073        $IBUF_[IF[T_$ID27]<0 THEN 3,ELSE 2]            ! SET DIS
0339  00364 162003R         LDA ID27,I
0340  00365 072011R         STA T 
0341  00366 002021          SSA,RSS 
0342  00367 026372R         JMP .37 
0343  00370 062041R         LDA .27 
0344  00371 026373R         JMP .38 
0345  00372 062042R .37     LDA .28 
0346  00373 172052R .38     STA IBUF,I
0347*074  ! 
0348*075        $ID12,$ID17_1 
0349  00374 002404          CLA,INA 
0350  00375 172054R         STA ID12,I
0351  00376 172024R         STA ID17,I
0352*076        $ID13_(T AND 77600K)-<9 
0353  00377 062011R         LDA T 
0354  00400 012056R         AND .39 
0355  00401 001727          ALF,ALF 
0356  00402 001200          RAL 
0357  00403 172055R         STA ID13,I
0358*077        $ID14_( T AND 177K) 
0359  00404 062011R         LDA T 
0360  00405 012012R         AND .10 
0361  00406 172057R         STA ID14,I
0362*078        $ID15_$SZ-<1
0363  00407 162031R         LDA SZ,I
0364  00410 001200          RAL 
0365  00411 172016R         STA ID15,I
0366*079        $ID16_128 
0367  00412 062034R         LDA .24 
0368  00413 172023R         STA ID16,I
0369*080        $ID18_ [IF T<0 THEN $ SECT3,ELSE $SECT2]
0370  00414 066011R         LDB T 
0371  00415 006021          SSB,RSS 
0372  00416 026421R         JMP .40 
0373  00417 162060R         LDA .42,I 
0374  00420 026422R         JMP .41 
0375  00421 162061R .40     LDA .43,I 
0376  00422 172026R .41     STA ID18,I
0377*081        $(ID18+1)_$XEQT 
0378  00423 062026R         LDA ID18
0379  00424 002004          INA 
0380  00425 166062R         LDB .44,I 
0381  00426 174000          STB .A.,I 
0382*082        RWNDF($IBUF,.E.R.)
0383  00427 016010X         JSB RWNDF 
0384  00430 000433R         DEF *+3 
0385  00431 100052R         DEF IBUF,I
0386  00432 000051R         DEF .E.R. 
0387*083        IER.
0388  00433 016011X         JSB IER.
0389  00434 000435R         DEF *+1 
0390*084  ! 
0391*085  RDP:  READF ($IBUF,.E.R.,$ID26,256) 
0392  00435 016007X RDP     JSB READF 







 PAGE 0009 #01


0393  00436 000443R         DEF *+5 
0394  00437 100052R         DEF IBUF,I
0395  00440 000051R         DEF .E.R. 
0396  00441 100063R         DEF ID26,I
0397  00442 000064R         DEF .45 
0398*086  ! 
0399*087        IER.
0400  00443 016011X         JSB IER.
0401  00444 000445R         DEF *+1 
0402*088  ! 
0403*089        WRITF(O.BUF,.E.R.,$ID26,[IF[XF_XF-2]<0 \
0404*                     THEN 128, ELSE 256])
0405  00445 062036R         LDA XF
0406  00446 042020R         ADA .19 
0407  00447 072036R         STA XF
0408  00450 002021          SSA,RSS 
0409  00451 026454R         JMP .46 
0410  00452 062034R         LDA .24 
0411  00453 026455R         JMP .47 
0412  00454 062064R .46     LDA .45 
0413  00455 072015R .47     STA .16 
0414  00456 016006X         JSB WRITF 
0415  00457 000464R         DEF *+5 
0416  00460 000014X         DEF O.BUF 
0417  00461 000051R         DEF .E.R. 
0418  00462 100063R         DEF ID26,I
0419  00463 000015R         DEF .16 
0420*090  ! 
0421*091        IER.
0422  00464 016011X         JSB IER.
0423  00465 000466R         DEF *+1 
0424*092  ! 
0425*093        IF XF>0 THEN GO TO RDP
0426  00466 066036R         LDB XF
0427  00467 007004          CMB,INB 
0428  00470 006020          SSB 
0429  00471 026435R         JMP RDP 
0430*094  ! 
0431*095        RETURN
0432  00472 126074R         JMP SP..,I
0433*096  ! 
0434*097        END 
0435*098  ! 
0436*099  MF:   FUNCTION(MAD) 
0437  00473 000000  MAD     NOP 
0438  00474 000000  MF      NOP 
0439  00475 016001X         JSB .ENTR 
0440  00476 000473R         DEF MAD 
0441*100        MFV_($(  MAD+1)-$MAD +77K) >-6
0442  00477 162473R         LDA MAD,I 
0443  00500 002004          INA 
0444  00501 166473R         LDB MAD,I 
0445  00502 160000          LDA .A.,I 
0446  00503 003004          CMA,INA 
0447  00504 140001          ADA .B.,I 
0448  00505 003004          CMA,INA 







 PAGE 0010 #01


0449  00506 042066R         ADA .48 
0450  00507 001121          ARS,ARS 
0451  00510 001121          ARS,ARS 
0452  00511 001121          ARS,ARS 
0453  00512 072065R         STA MFV 
0454*101        RETURN
0455  00513 126474R         JMP MF,I
0456*102        END 
0457*103  ! 
0458*104  ADS:  SUBROUTINE (BASE) 
0459  00514 000000  BASE    NOP 
0460  00515 000000  ADS     NOP 
0461  00516 016001X         JSB .ENTR 
0462  00517 000514R         DEF BASE
0463*105        ID18_[ID17_[ID16_[ID15_[ID14_[ID13_[ID12\ 
0464*               _ BASE]+1]+1]+1]+1]+1]+1
0465  00520 162514R         LDA BASE,I
0466  00521 072054R         STA ID12
0467  00522 002004          INA 
0468  00523 072055R         STA ID13
0469  00524 002004          INA 
0470  00525 072057R         STA ID14
0471  00526 002004          INA 
0472  00527 072016R         STA ID15
0473  00530 002004          INA 
0474  00531 072023R         STA ID16
0475  00532 002004          INA 
0476  00533 072024R         STA ID17
0477  00534 002004          INA 
0478  00535 072026R         STA ID18
0479*106        ID30_[ID29_[ID28_[ID26_[ID25_[ID24_[ID23\ 
0480*              _ID18+5]+1]+1]+1]+2]+1]+1
0481  00536 042070R         ADA .49 
0482  00537 072037R         STA ID23
0483  00540 002004          INA 
0484  00541 072067R         STA ID24
0485  00542 002004          INA 
0486  00543 072040R         STA ID25
0487  00544 002004          INA 
0488  00545 072063R         STA ID26
0489  00546 042042R         ADA .28 
0490  00547 072047R         STA ID28
0491  00550 002004          INA 
0492  00551 072050R         STA ID29
0493  00552 002004          INA 
0494  00553 072044R         STA ID30
0495*107        RETURN
0496  00554 126515R         JMP ADS,I 
0497*108        END 
0498*109        END 
0499                        END 
**  NO ERRORS*




$END ASMB     

*
--> Assemble fmp/29033-80018_Rev-A_1
ON,ASMB,99







 PAGE 0001


0001                ASMB,B,R,L,C
**  NO ERRORS*





























































 PAGE 0002 #01


0001                ASMB,B,R,L,C
0002  00000               NAM FMGR5,5 
0003                      EXT SEG.R 

0005  00000 062002R FMGR5 LDA TABL
0006  00001 026001X       JMP SEG.R 

0008  00002 000003R TABL  DEF *+1 

0010                      EXT ??..
0011  00003 000002X       DEF ??..
0012                      EXT MS..
0013  00004 000003X       DEF MS..
0014                      EXT RP..
0015  00005 000004X       DEF RP..
0016                      EXT CL..
0017  00006 000005X       DEF CL..
0018                      EXT LO..
0019  00007 000006X       DEF LO..
0020                      EXT SV..
0021  00010 000007X       DEF SV..
0022                      EXT LL..
0023  00011 000010X       DEF LL..
0024                      END FMGR5 
**  NO ERRORS*































$END ASMB     

*
--> Assemble fmp/29033-80018_Rev-A_2
ON,ASMB,99







 PAGE 0001


0001                ASMB,B,R,L,C
**  NO ERRORS*





























































 PAGE 0002 #01  FMGR ERROR EXPANDER MODULE  PART OF RTE FMP 


0001                ASMB,B,R,L,C
0003  00000               NAM ??..,8
0004                      ENT ??..
0005                      EXT FM.ER,TMP.,WRITF,O.BUF,.ENTR,.R.E.,.E.R.
0006                      EXT IER.,BUF.,IFLG. 
0007                      EXT FM.AB,OPEN. 
0008                      SUP 
0009  00000 000000  N     NOP 
0010  00001 000000  LST   NOP 

0012  00002 000000  ??..  NOP           ENTRY POINT 
0013  00003 016005X       JSB .ENTR     GEN PRAMS 
0014  00004 000000R       DEF N 

0016  00005 066006X       LDB .R.E.     GET ERROR PRAM
0017  00006 101020        ASR 16        EXTEND THE SIGN BIT 
0018  00007 100400        DIV .1000     DIVID 
0019  00011 060001        LDA B         ERROR CODE TO A 
0020  00012 166001R       LDB LST,I     GET FLAG
0021  00013 036001R       ISZ LST       STEP TO 
0022  00014 006002        SZB             IF NOT SUPPLIED USE .E.R. 
0023  00015 162001R       LDA LST,I        ELSE USE FIRST PRAM
0024  00016 052175R       CPA .99       IF PRAM=99
0025  00017 026130R       JMP ALL        THEN PRINT ALL CODES ON LIST 
0026  00020 052176R       CPA N101      TREAT 101 
0027  00021 002001        RSS           AND 
0028  00022 052177R       CPA N102      102 
0029  00023 026116R       JMP ICK       SPECIALLY 
0030  00024 072000R       STA N         SAVE CODE 
0031  00025 042203R       ADA MOSNG     TEST FOR
0032  00026 002020        SSA             DEFINED  CODE 
0033  00027 026126R       JMP UDF       TOO NEGATIVE
0034  00030 062000R       LDA N 
0035  00031 042204R       ADA NHLP1 
0036  00032 002020        SSA 
0037  00033 026045R       JMP PRINT     OK - PRINT IT 
0038  00034 042205R       ADA NHLG
0039  00035 002020        SSA 
0040  00036 026126R       JMP UDF       IN   MID  CODE  GAP - UNDEFINED 
0041  00037 042206R       ADA NHH 
0042  00040 002021        SSA,RSS 
0043  00041 026126R       JMP UDF       TO  HIGH - UNDEFINED
0044  00042 062000R       LDA N         ADJUST  N 
0045  00043 042205R       ADA NHLG      FOR HIGH GROUP
0046  00044 072000R       STA N         TABLE 
0047  00045 062000R PRINT LDA N         GET  N
0048  00046 001000        ALS           DOUBLE
0049  00047 042216R       ADA TBAD      ADD TABLE ADDRESS 
0050  00050 164000  PR    LDB A,I       GET MESSAGE ADDRESS 
0051  00051 076210R       STB MSAD      SET AS POINTER
0052  00052 002004        INA               GET 
0053  00053 164000        LDB A,I        MESSAGE
0054  00054 074000        STB A           LENGTH
0055  00055 003004        CMA,INA       SET FOR 
0056  00056 072000R       STA N          MOVE 
0057  00057 046200R       ADB .2          AND 







 PAGE 0003 #01  FMGR ERROR EXPANDER MODULE  PART OF RTE FMP 


0058  00060 076001R       STB LST          OUTPUT 
0059  00061 104200        DLD FMGR      SET FMGR
0060  00063 104400  BF    DST BUF.       AT 
0061  00065 062104R       LDA BUF.D       HEAD
0062  00066 002001        RSS 
0063  00067 160000        LDA A,I          OF 
0064  00070 001275        RAL,CLE,SLA,ERA   MESSAGE 
0065  00071 026067R       JMP *-2            GET
0066  00072 042200R       ADA .2              BUFFER ADDRESS AND
0067  00073 166210R MOVE  LDB MSAD,I    MOVE
0068  00074 174000        STB A,I        MESSAGE
0069  00075 002004        INA             TO
0070  00076 036210R       ISZ MSAD         THE
0071  00077 036000R       ISZ N             BUFFER
0072  00100 026073R       JMP MOVE
0073  00101 016001X       JSB FM.ER     PRINT 
0074  00102 000106R       DEF FMRTN      ON 
0075  00103 000200R       DEF .2          LOG 
0076  00104 000011X BUF.D DEF BUF.          DEVICE
0077  00105 000001R       DEF LST 
0078  00106 062012X FMRTN LDA IFLG.     IF INIT 
0079  00107 002002        SZA            THEN 
0080  00110 126002R       JMP ??..,I      RETURN
0081  00111 066006X       LDB .R.E.     IF
0082  00112 072006X       STA .R.E. 
0083  00113 056202R       CPB .60        60 
0084  00114 026013X       JMP FM.AB       THE ABORT 
0085  00115 126002R       JMP ??..,I    ELSE, RETURN



0087  00116 006002  ICK   SZB           IF NOT REAL 
0088  00117 026126R       JMP UDF       THEN UNDEFINED
0089  00120 067031R       LDB ER1+1     FIX 
0090  00121 052177R       CPA N102      MESSAGE 
0091  00122 006004        INB           AND 
0092  00123 076224R       STB EM101+1   THEN
0093  00124 062443R       LDA DF101     GO
0094  00125 026050R       JMP PR         PRINT IT 


0096  00126 062211R UDF   LDA DFUDF     PICK UN DEFINED 
0097  00127 026050R       JMP PR        AND SEND IT.



0099  00130 062012X ALL   LDA IFLG. 
0100  00131 002002        SZA 
0101  00132 026106R       JMP FMRTN     LIST ALL
0102  00133 062145R       LDA TMP.D 
0103  00134 002001        RSS            POSSIBLE 
0104  00135 160000        LDA A,I         ERROR 
0105  00136 001275        RAL,CLE,SLA,ERA  CODES. 
0106  00137 026135R       JMP *-2       GET PRAMETER
0107  00140 042201R       ADA .3         ADDRESS
0108  00141 072001R       STA LST         AND 







 PAGE 0004 #01  FMGR ERROR EXPANDER MODULE  PART OF RTE FMP 


0109  00142 016014X       JSB OPEN.        OPEN 
0110  00143 000150R       DEF OPRTN         LIST
0111  00144 000004X       DEF O.BUF          FILE 
0112  00145 000002X TMP.D DEF TMP.
0113  00146 100001R       DEF LST,I 
0114  00147 000445R       DEF .0
0115  00150 104200  OPRTN DLD PTRS      SET THE 
0116  00152 104400        DST CPTRS      POINTERS FOR LENGTH/BUFFER AD
0117  00154 016003X WRIT  JSB WRITF     WRITE 
0118  00155 000162R       DEF WRRTN      THE
0119  00156 000004X       DEF O.BUF       MESSAGE 
0120  00157 000007X       DEF .E.R.        ON 
0121  00160 000000  CPTRS NOP               THE 
0122  00161 000000        NOP                LIST 
0123  00162 016010X WRRTN JSB IER.            DEVICE
0124  00163 000164R       DEF *+1       CHECK FOR ERRORS
0125  00164 162161R       LDA CPTRS+1,I IF CURRENT LENGTH 
0126  00165 002020        SSA           NEGATIVE THEN 
0127  00166 026106R       JMP FMRTN     DONE - RETURN.
0128  00167 036160R       ISZ CPTRS 
0129  00170 036160R       ISZ CPTRS     STEP THE
0130  00171 036161R       ISZ CPTRS+1 
0131  00172 036161R       ISZ CPTRS+1   BUFFER AND LENGTH POINTERS
0132  00173 026154R       JMP WRIT      ELSE GO WRITE NEXT MESSAGE



0134  00174 001750  .1000 DEC 1000
0135  00175 000143  .99   DEC 99
0136  00176 177633  N101  DEC -101
0137  00177 177632  N102  DEC -102
0138  00200 000002  .2    DEC 2 
0139  00201 000003  .3    DEC 3 
0140  00202 000074  .60   DEC 60

0142  00000         A     EQU 0 
0143  00001         B     EQU 1 
0144  00021         MSTN  EQU 17        MOST NEGATIVE ERROR CODE
0145  00027         HLOW  EQU 23        MOST POSITIVE OF LOW GROUP
0146  00062         LHIG  EQU 50        LOWEST OF HIGH GROUP
0147  00074         HHIG  EQU 60        HIGHEST OF HIGH GROUP 

0149  00203 000021  MOSNG ABS MSTN         MOST NEG. CODE 
0150  00204 177750  NHLP1 ABS -HLOW-1      NEG. OF LOW HIGH BOUND 
0151  00205 177746  NHLG  ABS HLOW+1-LHIG  NEG. OF LOW HIGH GAP 
0152  00206 177765  NHH   ABS LHIG-HHIG-1  NEG. OF HIGH SIZE. 

0154  00207 000000  BFPT  NOP 
0155  00210 000000  MSAD  NOP 
0156  00211 000212R DFUDF DEF *+1 
0157  00212 000255R       DEF UDN 
0158  00213 000006        ABS LUDN
0159  00214 043115  FMGR  ASC 2,FMGR
0160  00216 000335R TBAD  DEF MS00
0161  00217 100263R PTRS  DEF LSHED,I 
0162  00220 000264R       DEF LSHED+1 







 PAGE 0005 #01  FMGR ERROR EXPANDER MODULE  PART OF RTE FMP 


0163  00221 000223R ER101 DEF EM101 
0164  00222 000034        ABS L101
0165  00223 026461  EM101 ASC 19,-10* INTERNAL VALIDITY CHECK FAILED SE 
0166  00246 047104        ASC  7,ND BUG REPORT! 
0167  00034         L101  EQU *-ER101 
0168  00255 020116  UDN   ASC 6, NOT DEFINED
0169  00006         LUDN  EQU *-UDN 
0170  00263 002016R LSHED DEF HEAD      THIS LIST 
0171  00264 000011        ABS LHEAD      IS IN
0172  00265 002040R       DEF BLNK        THE 
0173  00266 000001        ABS LBLNK        ORDER
0174  00267 002027R       DEF HD2           OF
0175  00270 000011        ABS LHD2          PPRINTING 
0176  00271 002040R       DEF BLNK            AND 
0177  00272 000001        ABS LBLNK            ALSO 
0178  00273 001005R       DEF ERM17             NUMERICAL 
0179  00274 000023        ABS LM17               ORDER
0180  00275 000767R       DEF ERM16 
0181  00276 000016        ABS LM16
0182  00277 000756R       DEF ERM15 
0183  00300 000011        ABS LM15
0184  00301 000744R       DEF ERM14 
0185  00302 000012        ABS LM14
0186  00303 000734R       DEF ERM13 
0187  00304 000010        ABS LM13
0188  00305 000721R       DEF ERM12 
0189  00306 000013        ABS LM12
0190  00307 000710R       DEF ERM11 
0191  00310 000011        ABS LM11
0192  00311 000673R       DEF ERM10 
0193  00312 000015        ABS LM10
0194  00313 000640R       DEF ERM9
0195  00314 000033        ABS LM9 
0196  00315 000620R       DEF ERM8
0197  00316 000020        ABS LM8 
0198  00317 000602R       DEF ERM7
0199  00320 000016        ABS LM7 
0200  00321 000560R       DEF ERM6
0201  00322 000022        ABS LM6 
0202  00323 000543R       DEF ERM5
0203  00324 000015        ABS LM5 
0204  00325 000514R       DEF ERM4
0205  00326 000027        ABS LM4 
0206  00327 000501R       DEF ERM3
0207  00330 000013        ABS LM3 
0208  00331 000465R       DEF ERM2
0209  00332 000014        ABS LM2 
0210  00333 000455R       DEF ERM1
0211  00334 000010        ABS LM1 
0212  00335 000446R MS00  DEF ER0 
0213  00336 000007        ABS L0
0214  00337 001030R       DEF ER1 
0215  00340 000016        ABS L1
0216  00341 001046R       DEF ER2 
0217  00342 000012        ABS L2
0218  00343 001060R       DEF ER3 







 PAGE 0006 #01  FMGR ERROR EXPANDER MODULE  PART OF RTE FMP 


0219  00344 000012        ABS L3
0220  00345 001072R       DEF ER4 
0221  00346 000022        ABS L4
0222  00347 001114R       DEF ER5 
0223  00350 000041        ABS L5
0224  00351 001155R       DEF ER6 
0225  00352 000012        ABS L6
0226  00353 001167R       DEF ER7 
0227  00354 000012        ABS L7
0228  00355 001201R       DEF ER8 
0229  00356 000013        ABS L8
0230  00357 001214R       DEF ER9 
0231  00360 000015        ABS L9
0232  00361 001231R       DEF ER10
0233  00362 000010        ABS L10 
0234  00363 001241R       DEF ER11
0235  00364 000022        ABS L11 
0236  00365 001263R       DEF ER12
0237  00366 000020        ABS L12 
0238  00367 001303R       DEF ER13
0239  00370 000013        ABS L13 
0240  00371 001316R       DEF ER14
0241  00372 000021        ABS L14 
0242  00373 001337R       DEF ER15
0243  00374 000012        ABS L15 
0244  00375 001351R       DEF ER16
0245  00376 000025        ABS L16 
0246  00377 001376R       DEF ER17
0247  00400 000020        ABS L17 
0248  00401 001416R       DEF ER18
0249  00402 000014        ABS L18 
0250  00403 001432R       DEF ER19
0251  00404 000026        ABS L19 
0252  00405 001460R       DEF ER20
0253  00406 000013        ABS L20 
0254  00407 001473R       DEF ER21
0255  00410 000016        ABS L21 
0256  00411 001511R       DEF ER22
0257  00412 000012        ABS L22 
0258  00413 001523R       DEF ER23
0259  00414 000016        ABS L23 
0260  00415 001541R       DEF ER50
0261  00416 000015        ABS L50 
0262  00417 001556R       DEF ER51
0263  00420 000021        ABS L51 
0264  00421 001577R       DEF ER52
0265  00422 000024        ABS L52 
0266  00423 001623R       DEF ER53
0267  00424 000016        ABS L53 
0268  00425 001641R       DEF ER54
0269  00426 000013        ABS L54 
0270  00427 001654R       DEF ER55
0271  00430 000013        ABS L55 
0272  00431 001667R       DEF ER56
0273  00432 000011        ABS L56 
0274  00433 001700R       DEF ER57







 PAGE 0007 #01  FMGR ERROR EXPANDER MODULE  PART OF RTE FMP 


0275  00434 000020        ABS L57 
0276  00435 001720R       DEF ER58
0277  00436 000022        ABS L58 
0278  00437 001742R       DEF ER59
0279  00440 000020        ABS L59 
0280  00441 001762R       DEF ER60
0281  00442 000034        ABS L60 
0282  00443 000221R DF101 DEF ER101     EOF RECORD
0283  00444 177777        DEC -1
0284  00445 000000  .0    NOP           END OF THE LIST 
0285*     ERROR TABLE -CODES ARE ENTERED IN ANY ORDER.
0286  00446 020060  ER0   ASC  7, 000 NO ERROR
0287  00007         L0    EQU *-ER0 
0288  00455 020055  ERM1  ASC  8, -01 DISC ERROR
0289  00010         LM1   EQU *-ERM1
0290  00465 020055  ERM2  ASC 12, -02 DUPLICATE FILE NAME 
0291  00014         LM2   EQU *-ERM2
0292  00501 020055  ERM3  ASC 11, -03 BACKSPACE ILLEGAL 
0293  00013         LM3   EQU *-ERM3
0294  00514 020055  ERM4  ASC 19, -04 MORE THAN 32786 RECORDS IN A TYPE 
0295  00537 020062        ASC  4, 2 FILE
0296  00027         LM4   EQU *-ERM4
0297  00543 020055  ERM5  ASC 13, -05 RECORD LENGTH ILLEGAL 
0298  00015         LM5   EQU *-ERM5
0299  00560 020055  ERM6  ASC 18, -06 CR OR FILE NOT FOUND OR NO ROOM 
0300  00022         LM6   EQU *-ERM6
0301  00602 020055  ERM7  ASC 14, -07 BAD FILE SECURITY CODE
0302  00016         LM7   EQU *-ERM7
0303  00620 020055  ERM8  ASC 16, -08 FILE OPEN OR LOCK REJECTED
0304  00020         LM8   EQU *-ERM8
0305  00640 020055  ERM9  ASC 19, -09 ATTEMPT TO USE APOSN OR FORCE TO
0306  00663 030440        ASC  8,1 A TYPE 0 FILE
0307  00033         LM9   EQU *-ERM9
0308  00673 020055  ERM10 ASC 13, -10 NOT ENOUGH PARAMETERS 
0309  00015         LM10  EQU *-ERM10 
0310  00710 020055  ERM11 ASC  9, -11 DCB NOT OPEN
0311  00011         LM11  EQU *-ERM11 
0312  00721 020055  ERM12 ASC 11, -12 EOF OR SOF ERROR
0313  00013         LM12  EQU *-ERM12 
0314  00734 020055  ERM13 ASC  8, -13 DISC LOCKED 
0315  00010         LM13  EQU *-ERM13 
0316  00744 020055  ERM14 ASC 10, -14 DIRECTORY FULL
0317  00012         LM14  EQU *-ERM14 
0318  00756 020055  ERM15 ASC  9, -15 ILLEGAL NAME
0319  00011         LM15  EQU *-ERM15 
0320  00767 020055  ERM16 ASC 14, -16 ILLEGAL TYPE OR SIZE=0
0321  00016         LM16  EQU *-ERM16 
0322  01005 020055  ERM17 ASC 19, -17 ILLEGAL READ/WRITE ON TYPE 0 FILE 
0323  00023         LM17  EQU *-ERM17 

0325  01030 020060  ER1   ASC 14, 001 DISC ERROR-LU REPORTED
0326  00016         L1    EQU *-ER1 
0327  01046 020060  ER2   ASC 10, 002 INITILIZE LU 2! 
0328  00012         L2    EQU *-ER2 
0329  01060 020060  ER3   ASC 10, 003 INITILIZE LU 3! 
0330  00012         L3    EQU *-ER3 







 PAGE 0008 #01  FMGR ERROR EXPANDER MODULE  PART OF RTE FMP 


0331  01072 020060  ER4   ASC 18, 004 ILLEGAL RESPONSE TO 002 OR 003
0332  00022         L4    EQU *-ER4 
0333  01114 020060  ER5   ASC 18, 005 REQUIRED TRACK NOT AVAILABLE -
0334  01136 051105        ASC 15,RELATIVE TAT POSITION REPORTED 
0335  00041         L5    EQU *-ER5 
0336  01155 020060  ER6   ASC 10, 006 FMGR SUSPENDED
0337  00012         L6    EQU *-ER6 
0338  01167 020060  ER7   ASC 10, 007 CHECKSUM ERROR
0339  00012         L7    EQU *-ER7 
0340  01201 020060  ER8   ASC 11, 008 D.RTR NOT LOADED
0341  00013         L8    EQU *-ER8 
0342  01214 020060  ER9   ASC 13, 009 ID-SEGMENT NOT FOUND
0343  00015         L9    EQU *-ER9 
0344  01231 020060  ER10  ASC  8, 010 INPUT ERROR 
0345  00010         L10   EQU *-ER10
0346  01241 020060  ER11  ASC 18, 011 DO OF,XXXXX,8 ON NAMED PROGRAMS 
0347  00022         L11   EQU *-ER11
0348  01263 020060  ER12  ASC 16, 012 DUPLICATE DISC LABEL OR LU
0349  00020         L12   EQU *-ER12
0350  01303 020060  ER13  ASC 11, 013 TR STACK OVERFLOW 
0351  00013         L13   EQU *-ER13
0352  01316 020060  ER14  ASC 17, 014 REQUIRED ID-SEGMENT NOT FOUND 
0353  00021         L14   EQU *-ER14
0354  01337 020060  ER15  ASC 10, 015 LS TRACK REPORT 
0355  00012         L15   EQU *-ER15
0356  01351 020060  ER16  ASC 20, 016 FILE MUST BE AND IS NOT ON LU 2 OR
0357  01375 031440        ASC  1,3
0358  00025         L16   EQU *-ER16
0359  01376 020060  ER17  ASC 16, 017 ID SEGMENT NOT SET UP BY RP 
0360  00020         L17   EQU *-ER17
0361  01416 020060  ER18  ASC 12, 018 PROGRAM NOT DORMANT 
0362  00014         L18   EQU *-ER18
0363  01432 020060  ER19  ASC 19, 019 FILE NOT SET UP BY SP ON CURRENT
0364  01455 051531        ASC  3,SYSTEM 
0365  00026         L19   EQU *-ER19
0366  01460 020060  ER20  ASC 11, 020 ILLEGAL TYPE 0 LU 
0367  00013         L20   EQU *-ER20
0368  01473 020060  ER21  ASC 14, 021 ILLEGAL DISC SPECIFIED
0369  00016         L21   EQU *-ER21
0370  01511 020060  ER22  ASC 10, 022 COPY TERMINATED 
0371  00012         L22   EQU *-ER22
0372  01523 020060  ER23  ASC 14, 023 DUPLICATE PROGRAM NAME. 
0373  00016         L23   EQU *-ER23


0375  01541 020060  ER50  ASC 13, 050 NOT ENOUGH PARAMETERS 
0376  00015         L50   EQU *-ER50
0377  01556 020060  ER51  ASC 17, 051 ILLEGAL MASTER SECURITY CODE
0378  00021         L51   EQU *-ER51
0379  01577 020060  ER52  ASC 20, 052 ILLEGAL LU IN RESPONSE TO 002 OR 3
0380  00024         L52   EQU *-ER52
0381  01623 020060  ER53  ASC 14, 053 ILLEGAL LABEL OR ILABEL 
0382  00016         L53   EQU *-ER53
0383  01641 020060  ER54  ASC 11, 054 DISC NOT MOUNTED
0384  00013         L54   EQU *-ER54
0385  01654 020060  ER55  ASC 11, 055 MISSING PARAMETER 







 PAGE 0009 #01  FMGR ERROR EXPANDER MODULE  PART OF RTE FMP 


0386  00013         L55   EQU *-ER55
0387  01667 020060  ER56  ASC  9, 056 BAD PARAMETER 
0388  00011         L56   EQU *-ER56
0389  01700 020060  ER57  ASC 16, 057 BAD TRACK NOT IN FILE AREA
0390  00020         L57   EQU *-ER57
0391  01720 020060  ER58  ASC 18, 058 LG AREA EMPTY 
0392  00022         L58   EQU *-ER58
0393  01742 020060  ER59  ASC 16, 059 REPORTED TRACK UNAVAILABLE
0394  00020         L59   EQU *-ER59
0395  01762 020060  ER60  ASC 19, 060 DO YOU REALLY WANT TO PURGE THIS
0396  02005 042111        ASC  9,DISC? (YES OR NO). 
0397  00034         L60   EQU *-ER60


0399  02016 020106  HEAD  ASC  9, FMGR ERROR CODES
0400  00011         LHEAD EQU *-HEAD
0401  02027 020105  HD2   ASC  9, ERROR     MEANING 
0402  00011         LHD2  EQU *-HD2 
0403  02040 020040  BLNK  ASC  1, 
0404  00001         LBLNK EQU *-BLNK
0405  02041               ORG *         PROGRAM LENGTH
0406                      END 
**  NO ERRORS*

































$END ASMB     

*
--> Assemble fmp/29033-80018_Rev-A_3
ON,ASMB,99







 PAGE 0001


0001                ASMB,B,X,L
**  NO ERRORS*





























































 PAGE 0002 #01


0001                ASMB,B,X,L
0002*001  SPL, L, O, M
0003*002        NAME MS..(8)
0004  00000                 NAM MS..,8
0005  00000         .A.     EQU  0
0006  00001         .B.     EQU  1
0007                        ENT MS..
0008                        EXT .ENTR 
0009                        EXT OPEN. 
0010                        EXT IWRIS 
0011                        EXT WEOFS 
0012                        EXT READF 
0013                        EXT EXEC
0014                        EXT MSS.
0015                        EXT FM.ER 
0016                        EXT CONV. 
0017                        EXT PRTM
0018                        EXT WRIS
0019                        EXT IER.
0020                        EXT IPUT
0021                        EXT ID.A
0022                        EXT BUF.
0023                        EXT I.BUF 
0024                        EXT N.OPL 
0025                        EXT CUSE. 
0026                        EXT .E.R. 
0027  00000 020114  MS      OCT 020114
0028  00001 051440          OCT 051440
0029  00002 046125          OCT 046125
0030  00003 020130  MSI     OCT 020130
0031  00004 020124  MST     OCT 020124
0032  00005 051101          OCT 051101
0033  00006 041513          OCT 041513
0034  00007 020130          OCT 020130
0035  00010 054130  MS2     OCT 054130
0036  00011 042504  ED      OCT 042504
0037  00012 044524          OCT 044524
0038  00013 020000          OCT 020000
0039  00014 000000  LIS9    BSS 1 
0040  00015 000000  LIS5    BSS 1 
0041  00016 000000  LIS1    BSS 1 
0042  00017 000004  .1      OCT 000004
0043  00020 177777  .2      OCT 177777
0044  00021 000005  .3      OCT 000005
0045  00022 000000  .4      OCT 000000
0046  00023 000000  ID      BSS 1 
0047  00024 000011R .8      DEF ED
0048  00025 000000  .9      BSS 1 
0049  00026 000016  .10     OCT 000016
0050  00027 000410  .11     OCT 000410
0051  00030 000000  T       BSS 1 
0052  00031 000000  TR      BSS 1 
0053  00032 000000  LU      BSS 1 
0054  00033 077400  .13     OCT 077400
0055  00034 000001  .14     OCT 000001
0056  00035 000377  .15     OCT 000377







 PAGE 0003 #01


0057  00036 000003  .16     OCT 000003
0058  00037 003737  .17     OCT 003737
0059  00040 000011  .18     OCT 000011
0060  00041 000000  L       BSS 1 
0061  00042 000106  .19     OCT 000106
0062  00043 001656  .25     OCT 001656
0063  00044 001755  .26     OCT 001755
0064  00045 001717  .27     OCT 001717
0065  00046 177600  .28     OCT 177600
0066  00047 044510  .29     OCT 044510
0067  00050 001767  .31     OCT 001767
0068*003  ! 
0069*004  !     THIS ROUTINE IS PART OF THE RTE 
0070*005  !     FILE MANAGEMENT PACKAGE 
0071*006  !     FMGR PROGRAM. 
0072*007  !     IT MOVES A FILE INTO THE SYSTEM 
0073*008  !     AREA AND SETS UP THE TAT
0074*009  !     FOR THE TRACKS USED TO
0075*010  !     POINT TO THE INDICATED PROGRAM. 
0076*011  !     ENTRY IS ON A : 
0077*012  !     LS,NAMR,PROG,IH 
0078*013  !           1  5    9 
0079*014  !     WHERE:
0080*015  !     LS GETS TO THIS ROUTINE 
0081*016  !     NAMR IS THE FILE NAME REFERENCE INCLUDING SECURITY AND
0082*017  !              CARTRIDGE INFORMATION
0083*018  !     PROG    IS PRESENT THE FILE IS TO 
0084*019  !             BE ASSIGNED TO THE NAMED
0085*020  !             PROGRAM (IF NOT GIVEN THE 
0086*021  !             LS AREA IS ASSIGNED TO
0087*022  !             THE EDIT PROGRAM) 
0088*023  !     IH      (OPTIONAL) INDICATES THE FILE 
0089*024  !             IS NOT TO BE SET UP AS THE CURRENT
0090*025  !             LS FILE.
0091*026  !     DEFINE EXTERNALS
0092*027  !     SUBS. 
0093*028        LET OPEN.,IWRIS,WEOFS,\ 
0094*            READF,EXEC, MSS.,\ 
0095*            FM.ER,CONV.,PRTM,\ 
0096*            WRIS,IER. ,IPUT      BE SUBROUTINE,EXTERNAL
0097*029  ! 
0098*030  !     FUNCTIONS 
0099*031  ! 
0100*032        LET   ID.A           BE FUNCTION,EXTERNAL 
0101*033  ! 
0102*034  !     ARRAYS AND INTEGERS 
0103*035  ! 
0104*036        LET   BUF.,I.BUF,N.OPL,CUSE.,.E.R.   BE INTEGER,EXTERNAL
0105*037  ! 
0106*038  !     DEFINE CONSTANTS. 
0107*039  ! 
0108*040        LET TAT       BE CONSTANT (1656K) 
0109*041        LET TATLG     BE CONSTANT (1755K) 
0110*042        LET XEQT      BE CONSTANT (1717K) 
0111*043        LET MS(3),MSI,MST(4),MS2  BE INTEGER
0112*044        INITIALIZE MS    ,MSI,MST   ,MS2 TO " LS LU X TRACK XXX"







 PAGE 0004 #01


0113*045        LET ED(3) BE INTEGER
0114*046        INITIALIZE ED TO "EDIT "
0115*047        LET A         BE CONSTANT (    0  ) 
0116*048  ! 
0117*049  ! 
0118*050  MS..: SUBROUTINE(CO,LIS,ER)  GLOBAL 
0119  00051 000000  CO      NOP 
0120  00052 000000  LIS     NOP 
0121  00053 000000  ER      NOP 
0122  00054 000000  MS..    NOP 
0123  00055 016001X         JSB .ENTR 
0124  00056 000051R         DEF CO
0125*051  ! 
0126*052        LIS9 _[LIS5 _[LIS1_@LIS+1]+4 ]+4 !SET PRAM ADDRESSES
0127  00057 062052R         LDA LIS 
0128  00060 002004          INA 
0129  00061 072016R         STA LIS1
0130  00062 042017R         ADA .1
0131  00063 072015R         STA LIS5
0132  00064 042017R         ADA .1
0133  00065 072014R         STA LIS9
0134*053        EXEC (5,-1) 
0135  00066 016006X         JSB EXEC
0136  00067 000072R         DEF *+3 
0137  00070 000021R         DEF .3
0138  00071 000020R         DEF .2
0139*054        PRTM(0) 
0140  00072 016012X         JSB PRTM
0141  00073 000075R         DEF *+2 
0142  00074 000022R         DEF .4
0143*055        ID_ ID.A ($[IF $LIS5  THEN  LIS5 ,ELSE\\
0144*       @ ED   ])?[ER_14;RETURN]
0145  00075 162015R         LDA LIS5,I
0146  00076 002003          SZA,RSS 
0147  00077 026102R         JMP .5
0148  00100 062015R         LDA LIS5
0149  00101 026103R         JMP .6
0150  00102 062024R .5      LDA .8
0151  00103 072025R .6      STA .9
0152  00104 016016X         JSB ID.A
0153  00105 000107R         DEF *+2 
0154  00106 100025R         DEF .9,I
0155  00107 002041          SEZ,RSS 
0156  00110 026114R         JMP .7
0157  00111 062026R         LDA .10 
0158  00112 172053R         STA ER,I
0159  00113 126054R         JMP MS..,I
0160  00114 072023R .7      STA ID
0161*056        OPEN. (I.BUF, $LIS1,N.OPL,410K) 
0162  00115 016002X         JSB OPEN. 
0163  00116 000123R         DEF *+5 
0164  00117 000020X         DEF I.BUF 
0165  00120 100016R         DEF LIS1,I
0166  00121 000021X         DEF N.OPL 
0167  00122 000027R         DEF .11 
0168*057        CUSE._0  !SET SEGMENT ABSENT FLAG TO PREVENT REUSE







 PAGE 0005 #01


0169  00123 002400          CLA 
0170  00124 072022X         STA CUSE. 
0171*058        DO [IWRIS(T); TR_ $A; IF T THEN[\ 
0172*               ER_5; RETURN]]
0173  00125 016003X         JSB IWRIS 
0174  00126 000130R         DEF *+2 
0175  00127 000030R         DEF T 
0176  00130 162022R         LDA .4,I
0177  00131 072031R         STA TR
0178  00132 062030R         LDA T 
0179  00133 002003          SZA,RSS 
0180  00134 026140R         JMP .12 
0181  00135 062021R         LDA .3
0182  00136 172053R         STA ER,I
0183  00137 126054R         JMP MS..,I
0184*059  !                         REPORT THE TRACK
0185*060  ! 
0186*061        LU_(TR AND 77400K)-<8 ! SET LU
0187  00140 062031R .12     LDA TR
0188  00141 012033R         AND .13 
0189  00142 001727          ALF,ALF 
0190  00143 072032R         STA LU
0191*062  ! 
0192*063        CONV.(LU,MSI,1)            ! PUT IN MESS
0193  00144 016011X         JSB CONV. 
0194  00145 000151R         DEF *+4 
0195  00146 000032R         DEF LU
0196  00147 000003R         DEF MSI 
0197  00150 000034R         DEF .14 
0198*064  ! 
0199*065        CONV.(TR AND 377K,MS2,3) ! PUT TRACK
0200  00151 062031R         LDA TR
0201  00152 012035R         AND .15 
0202  00153 072025R         STA .9
0203  00154 016011X         JSB CONV. 
0204  00155 000161R         DEF *+4 
0205  00156 000025R         DEF .9
0206  00157 000010R         DEF MS2 
0207  00160 000036R         DEF .16 
0208*066  ! 
0209*067        MSS.(2015)                  ! TELL HIM ITS
0210  00161 016007X         JSB MSS.
0211  00162 000164R         DEF *+2 
0212  00163 000037R         DEF .17 
0213*068  ! 
0214*069        FM.ER(1,MS,9)               ! COMMING. SEND IT
0215  00164 016010X         JSB FM.ER 
0216  00165 000171R         DEF *+4 
0217  00166 000034R         DEF .14 
0218  00167 000000R         DEF MS
0219  00170 000040R         DEF .18 
0220*070  ! 
0221*071  LSRD: READF (I.BUF,.E.R., BUF.,70,L)
0222  00171 016005X LSRD    JSB READF 
0223  00172 000200R         DEF *+6 
0224  00173 000020X         DEF I.BUF 







 PAGE 0006 #01


0225  00174 000023X         DEF .E.R. 
0226  00175 000017X         DEF BUF.
0227  00176 000042R         DEF .19 
0228  00177 000041R         DEF L 
0229*072        IER.
0230  00200 016014X         JSB IER.
0231  00201 000202R         DEF *+1 
0232*073        IF L<0 THEN GOTO LSEOF
0233  00202 066041R         LDB L 
0234  00203 006020          SSB 
0235  00204 026225R         JMP LSEOF 
0236*074  ! 
0237*075        WRIS (BUF.,-(L-<1),T) 
0238  00205 062041R         LDA L 
0239  00206 001200          RAL 
0240  00207 003004          CMA,INA 
0241  00210 072025R         STA .9
0242  00211 016013X         JSB WRIS
0243  00212 000216R         DEF *+4 
0244  00213 000017X         DEF BUF.
0245  00214 000025R         DEF .9
0246  00215 000030R         DEF T 
0247*076  ! 
0248*077        IF  T   THEN [ER_5;RETURN]
0249  00216 062030R         LDA T 
0250  00217 002003          SZA,RSS 
0251  00220 026224R         JMP .20 
0252  00221 062021R         LDA .3
0253  00222 172053R         STA ER,I
0254  00223 126054R         JMP MS..,I
0255*078  ! 
0256*079        GO TO  LSRD 
0257  00224 026171R .20     JMP LSRD
0258*080  ! 
0259*081  LSEOF:WEOFS(T)
0260  00225 016004X LSEOF   JSB WEOFS 
0261  00226 000230R         DEF *+2 
0262  00227 000030R         DEF T 
0263*082  ! 
0264*083        FOR  T_ $TAT  TO $TAT-$TATLG DO[\ 
0265*           IF $T = $XEQT  THEN IPUT(T,ID)] 
0266  00230 162043R         LDA .25,I 
0267  00231 072030R         STA T 
0268  00232 026236R         JMP .22 
0269  00233 062030R .21     LDA T 
0270  00234 002004          INA 
0271  00235 072030R         STA T 
0272  00236 162044R .22     LDA .26,I 
0273  00237 003004          CMA,INA 
0274  00240 142043R         ADA .25,I 
0275  00241 003004          CMA,INA 
0276  00242 042030R         ADA T 
0277  00243 003004          CMA,INA 
0278  00244 002020          SSA 
0279  00245 026257R         JMP .23 
0280  00246 166030R         LDB T,I 







 PAGE 0007 #01


0281  00247 156045R         CPB .27,I 
0282  00250 002001          RSS 
0283  00251 026256R         JMP .24 
0284  00252 016015X         JSB IPUT
0285  00253 000256R         DEF *+3 
0286  00254 000030R         DEF T 
0287  00255 000023R         DEF ID
0288  00256 026233R .24     JMP .21 
0289*084  ! 
0290*085        TR_(TR-<7) AND  177600K 
0291  00257 062031R .23     LDA TR
0292  00260 001700          ALF 
0293  00261 001723          ALF,RAR 
0294  00262 012046R         AND .28 
0295  00263 072031R         STA TR
0296*086        IF   $LIS9  # "IH" THEN  IPUT (1767K, TR) 
0297  00264 166014R         LDB LIS9,I
0298  00265 056047R         CPB .29 
0299  00266 026273R         JMP .30 
0300  00267 016015X         JSB IPUT
0301  00270 000273R         DEF *+3 
0302  00271 000050R         DEF .31 
0303  00272 000031R         DEF TR
0304*087  ! 
0305*088        PRTM(TR)      ! RETURN THE LS WORD
0306  00273 016012X .30     JSB PRTM
0307  00274 000276R         DEF *+2 
0308  00275 000031R         DEF TR
0309*089  ! 
0310*090        RETURN
0311  00276 126054R         JMP MS..,I
0312*091        END 
0313*092        END 
0314                        END 
**  NO ERRORS*





















$END ASMB     

*
--> Assemble fmp/29033-80019_Rev-A_1
ON,ASMB,99







 PAGE 0001


0001                ASMB,B,X,L
**  NO ERRORS*





























































 PAGE 0002 #01


0001                ASMB,B,X,L
0002*001  SPL, M, O, L
0003*002        NAME RP..(8)
0004  00000                 NAM RP..,8
0005  00000         .A.     EQU  0
0006  00001         .B.     EQU  1
0007                        ENT RP..
0008                        EXT .ENTR 
0009                        EXT .DRCT 
0010                        EXT BUF.
0011                        EXT I.BUF 
0012                        EXT .E.R. 
0013                        EXT N.OPL 
0014                        EXT IER.
0015                        EXT LOCF
0016                        EXT READF 
0017                        EXT OPEN. 
0018                        EXT IPUT
0019                        EXT MSS.
0020                        EXT ID.A
0021                        EXT D.AD
0022  00000 001650  EQTA    OCT 001650
0023  00001 001657  KEYWD   OCT 001657
0024  00002 001742  BPA1    OCT 001742
0025  00003 001764  DSCUN   OCT 001764
0026  00004 000000  NAM     BSS 1 
0027  00005 000000  LIS4    BSS 1 
0028  00006 000000  FYN     BSS 1 
0029  00007 000003  .1      OCT 000003
0030  00010 000062  .3      OCT 000062
0031  00011 000000  TR      BSS 1 
0032  00012 000027  .4      OCT 000027
0033  00013 000000  ID2     BSS 1 
0034  00014 000004  .9      OCT 000004
0035  00015 003731  .10     OCT 003731
0036  00016 000016  .11     OCT 000016
0037  00017 000000  ID27    BSS 1 
0038  00020 000000  ID18    BSS 1 
0039  00021 000000  ID16    BSS 1 
0040  00022 000000  ID15    BSS 1 
0041  00023 000000  ID14    BSS 1 
0042  00024 000000  ID13    BSS 1 
0043  00025 000000  ID9     BSS 1 
0044  00026 000007  .12     OCT 000007
0045  00027 000002  .13     OCT 000002
0046  00030 000011  .14     OCT 000011
0047  00031 000000  BF      BSS 1 
0048  00032 000000  T       BSS 1 
0049  00033 000001  .15     OCT 000001
0050  00034 000036  .19     OCT 000036
0051  00035 000000  IR      BSS 1 
0052  00036 000000  LU      BSS 1 
0053  00037 000000  TY      BSS 1 
0054  00040 100000  .21     OCT 100000
0055  00041 000020  .22     OCT 000020
0056  00042 000200  .23     OCT 000200







 PAGE 0003 #01


0057  00043 000000  SUM     BSS 1 
0058  00044 000033  .27     OCT 000033
0059  00045 000000  ADD     BSS 1 
0060  00046 000000  .32     BSS 1 
0061  00047 000337R .36     DEF .29 
0062  00050 000334R .37     DEF .28 
0063  00051 000352R .38     DEF .30 
0064  00052 000023  .39     OCT 000023
0065  00053 001756  .43     OCT 001756
0066  00054 000000  .44     OCT 000000
0067  00055 000000  .45     BSS 1 
0068  00056 077600  .46     OCT 077600
0069  00057 001656  .47     OCT 001656
0070  00060 000021  .48     OCT 000021
0071  00061 010000  .50     OCT 010000
0072  00062 000022  .51     OCT 000022
0073  00063 000014  .52     OCT 000014
0074  00064 000031  .56     OCT 000031
0075  00065 177400  .59     OCT 177400
0076  00066 000000  .60     BSS 1 
0077*003  !     RP IS A MODULE OF FMGR A
0078*004  !      MODULE OF THE RTE FMP. 
0079*005  ! 
0080*006  !     IT SETS UP A PROGRAM FOR
0081*007  !     EXECUTION FROM A FILE.
0082*008  ! 
0083*009  !     THIS MODULE IS ENETERED AS
0084*010  !     A RESULT OF THE COMMAND:
0085*011  !     RP, NAMR, NAME2 
0086*012  !     WHERE:
0087*013  !        NAMR IS A NAME REFERENCE 
0088*014  !        AND
0089*015  !        NAME2 IS A PROGRAM NAME
0090*016  !              OF A SYSTEM PROGRAM
0091*017  !              WHOSE ID SEGMENT IS
0092*018  !              TO BE REPLACED BY THE
0093*019  !              NAMR S ID SEGMENT
0094*020  !              NAME2  MUST HAVE BEEN
0095*021  !              SET UP BY THIS 
0096*022  !              ROUTINE AND MUST BE
0097*023  !              DOMANT.
0098*024  ! 
0099*025  !     DEFINE EXTERNALS
0100*026  ! 
0101*027        LET BUF.,I.BUF,.E.R.,\
0102*           N.OPL                    BE INTEGER,EXTERNAL
0103*028        LET IER.,LOCF,READF,OPEN.,\ 
0104*            IPUT,MSS.    \ 
0105*                               BE SUBROUTINE,EXTERNAL
0106*029  ! 
0107*030        LET ID.A,D.AD      BE FUNCTION,EXTERNAL 
0108*031  ! 
0109*032  !     DEFINE CONSTANSTS 
0110*033  ! 
0111*034        LET EQTA,KEYWD,BPA1,DSCUN BE INTEGER
0112*035        INITIALIZE EQTA,KEYWD,BPA1,DSCUN TO 1650K,1657K,1742K,17







 PAGE 0004 #01


0113*036        LET TATSD  BE CONSTANT (1756K)
0114*037        LET TAT       BE CONSTANT    (1656K)
0115*038  ! 
0116*039  RP..: SUBROUTINE (NO,LIS,ER) GLOBAL 
0117  00067 000000  NO      NOP 
0118  00070 000000  LIS     NOP 
0119  00071 000000  ER      NOP 
0120  00072 000000  RP..    NOP 
0121  00073 016001X         JSB .ENTR 
0122  00074 000067R         DEF NO
0123*040  ! 
0124*041        NAM_[LIS4_ [FYN_ @LIS+1] +3]+1
0125  00075 062070R         LDA LIS 
0126  00076 002004          INA 
0127  00077 072006R         STA FYN 
0128  00100 042007R         ADA .1
0129  00101 072005R         STA LIS4
0130  00102 002004          INA 
0131  00103 072004R         STA NAM 
0132*042        IFNOT LIS THEN[IFNOT $LIS4 THEN[ER_50;RETURN],ELSE GOTO 
0133  00104 162070R         LDA LIS,I 
0134  00105 002002          SZA 
0135  00106 026115R         JMP .2
0136  00107 162005R         LDA LIS4,I
0137  00110 002002          SZA 
0138  00111 026126R         JMP RP1 
0139  00112 062010R         LDA .3
0140  00113 172071R         STA ER,I
0141  00114 126072R         JMP RP..,I
0142*043  ! 
0143*044        TR_ID.A($FYN)?[GO TO RP1] !CHECK FOR DOUBLY DEFINED 
0144  00115 016015X .2      JSB ID.A
0145  00116 000120R         DEF *+2 
0146  00117 100006R         DEF FYN,I 
0147  00120 002040          SEZ 
0148  00121 026126R         JMP RP1 
0149  00122 072011R         STA TR
0150*045        DO[ER_23;RETURN] !NAME ALREADY IN SOME IDSEGMENT
0151  00123 062012R         LDA .4
0152  00124 172071R         STA ER,I
0153  00125 126072R         JMP RP..,I
0154*046  ! 
0155*047  RP1:  ID2_ ID.A($NAM)?[IF LIS THEN [IF $NAM THEN[NAM_NAM+4; \ 
0156*                            MSS.(2009);GO TO RP1],ELSE ER_14],\
0157*                                   ELSE ER_2009;RETURN]+1
0158  00126 016015X RP1     JSB ID.A
0159  00127 000131R         DEF *+2 
0160  00130 100004R         DEF NAM,I 
0161  00131 002041          SEZ,RSS 
0162  00132 026156R         JMP .8
0163  00133 162070R         LDA LIS,I 
0164  00134 002003          SZA,RSS 
0165  00135 026153R         JMP .6
0166  00136 162004R         LDA NAM,I 
0167  00137 002003          SZA,RSS 
0168  00140 026150R         JMP .5







 PAGE 0005 #01


0169  00141 062004R         LDA NAM 
0170  00142 042014R         ADA .9
0171  00143 072004R         STA NAM 
0172  00144 016014X         JSB MSS.
0173  00145 000147R         DEF *+2 
0174  00146 000015R         DEF .10 
0175  00147 026126R         JMP RP1 
0176  00150 062016R .5      LDA .11 
0177  00151 172071R         STA ER,I
0178  00152 026155R         JMP .7
0179  00153 062015R .6      LDA .10 
0180  00154 172071R         STA ER,I
0181  00155 126072R .7      JMP RP..,I
0182  00156 002004  .8      INA 
0183  00157 072013R         STA ID2 
0184*048        ID27_[ID18_[ID16_[ID15_[ID14_[ID13_[ID9_ID2+7]+\
0185*                     4]+1]+1]+1]+2]+9
0186  00160 042026R         ADA .12 
0187  00161 072025R         STA ID9 
0188  00162 042014R         ADA .9
0189  00163 072024R         STA ID13
0190  00164 002004          INA 
0191  00165 072023R         STA ID14
0192  00166 002004          INA 
0193  00167 072022R         STA ID15
0194  00170 002004          INA 
0195  00171 072021R         STA ID16
0196  00172 042027R         ADA .13 
0197  00173 072020R         STA ID18
0198  00174 042030R         ADA .14 
0199  00175 072017R         STA ID27
0200*049        BF_@I.BUF 
0201  00176 016002X         JSB .DRCT 
0202  00177 000004X         DEF I.BUF 
0203  00200 072031R         STA BF
0204*050        TR_0
0205  00201 002400          CLA 
0206  00202 072011R         STA TR
0207*051        FOR T_BF TO BF+30 DO $T_0 
0208  00203 062031R         LDA BF
0209  00204 072032R         STA T 
0210  00205 026211R         JMP .17 
0211  00206 062032R .16     LDA T 
0212  00207 002004          INA 
0213  00210 072032R         STA T 
0214  00211 062031R .17     LDA BF
0215  00212 042034R         ADA .19 
0216  00213 003004          CMA,INA 
0217  00214 042032R         ADA T 
0218  00215 003004          CMA,INA 
0219  00216 002020          SSA 
0220  00217 026223R         JMP .18 
0221  00220 002400          CLA 
0222  00221 172032R         STA T,I 
0223  00222 026206R         JMP .16 
0224*052        IFNOT LIS THEN GO TO RP4







 PAGE 0006 #01


0225  00223 162070R .18     LDA LIS,I 
0226  00224 002003          SZA,RSS 
0227  00225 026400R         JMP RP4 
0228*053  ! 
0229*054  RP2:  OPEN. (I.BUF, $ FYN,N.OPL,4)
0230  00226 016012X RP2     JSB OPEN. 
0231  00227 000234R         DEF *+5 
0232  00230 000004X         DEF I.BUF 
0233  00231 100006R         DEF FYN,I 
0234  00232 000006X         DEF N.OPL 
0235  00233 000014R         DEF .9
0236*055        LOCF (I.BUF,.E.R.,IR,IR,IR,IR,LU,TY)
0237  00234 016010X         JSB LOCF
0238  00235 000246R         DEF *+9 
0239  00236 000004X         DEF I.BUF 
0240  00237 000005X         DEF .E.R. 
0241  00240 000035R         DEF IR
0242  00241 000035R         DEF IR
0243  00242 000035R         DEF IR
0244  00243 000035R         DEF IR
0245  00244 000036R         DEF LU
0246  00245 000037R         DEF TY
0247*056        IF LU=2 THEN GO TO RP3
0248  00246 066036R         LDB LU
0249  00247 056027R         CPB .13 
0250  00250 026263R         JMP RP3 
0251*057        IF LU=3 THEN [TR_100000K;GO TO RP3] 
0252  00251 066036R         LDB LU
0253  00252 056007R         CPB .1
0254  00253 002001          RSS 
0255  00254 026260R         JMP .20 
0256  00255 062040R         LDA .21 
0257  00256 072011R         STA TR
0258  00257 026263R         JMP RP3 
0259*058  ! 
0260*059        ER_16     !  FILE NOT ON LU2 OR 3 
0261  00260 062041R .20     LDA .22 
0262  00261 172071R         STA ER,I
0263*060        RETURN  !  SO ERROR 
0264  00262 126072R         JMP RP..,I
0265*061  ! 
0266*062  RP3:  READF (I.BUF,.E.R.,BUF.,128)
0267  00263 016011X RP3     JSB READF 
0268  00264 000271R         DEF *+5 
0269  00265 000004X         DEF I.BUF 
0270  00266 000005X         DEF .E.R. 
0271  00267 000003X         DEF BUF.
0272  00270 000042R         DEF .23 
0273*063        IER.
0274  00271 016007X         JSB IER.
0275  00272 000273R         DEF *+1 
0276*064  ! 
0277*065        SUM_0 
0278  00273 002400          CLA 
0279  00274 072043R         STA SUM 
0280*066        FOR  T_[BF_D.AD(BUF.)] TO  BF+27        DO \







 PAGE 0007 #01


0281*                             SUM_SUM +$T 
0282  00275 016016X         JSB D.AD
0283  00276 000300R         DEF *+2 
0284  00277 000003X         DEF BUF.
0285  00300 072031R         STA BF
0286  00301 072032R         STA T 
0287  00302 026306R         JMP .25 
0288  00303 062032R .24     LDA T 
0289  00304 002004          INA 
0290  00305 072032R         STA T 
0291  00306 062031R .25     LDA BF
0292  00307 042044R         ADA .27 
0293  00310 003004          CMA,INA 
0294  00311 042032R         ADA T 
0295  00312 003004          CMA,INA 
0296  00313 002020          SSA 
0297  00314 026321R         JMP .26 
0298  00315 062043R         LDA SUM 
0299  00316 142032R         ADA T,I 
0300  00317 072043R         STA SUM 
0301  00320 026303R         JMP .24 
0302*067  ! 
0303*068        IF  $T# SUM THEN GO TO CORUP !BAD SUM 
0304  00321 166032R .26     LDB T,I 
0305  00322 056043R         CPB SUM 
0306  00323 002001          RSS 
0307  00324 026375R         JMP CORUP 
0308*069  ! 
0309*070        SUM_0 
0310  00325 002400          CLA 
0311  00326 072043R         STA SUM 
0312*071  ! 
0313*072        FOR ADD_EQTA TO KEYWD,BPA1 TO DSCUN DO  SUM_ SUM+$ADD 
0314  00327 062000R         LDA EQTA
0315  00330 072045R         STA ADD 
0316  00331 062047R         LDA .36 
0317  00332 072046R         STA .32 
0318  00333 126046R         JMP .32,I 
0319  00334 062045R .28     LDA ADD 
0320  00335 002004          INA 
0321  00336 072045R         STA ADD 
0322  00337 062050R .29     LDA .37 
0323  00340 072046R         STA .32 
0324  00341 066045R         LDB ADD 
0325  00342 007004          CMB,INB 
0326  00343 046001R         ADB KEYWD 
0327  00344 006020          SSB 
0328  00345 026347R         JMP .33 
0329  00346 026364R         JMP .34 
0330  00347 062002R .33     LDA BPA1
0331  00350 072045R         STA ADD 
0332  00351 026355R         JMP .31 
0333  00352 062045R .30     LDA ADD 
0334  00353 002004          INA 
0335  00354 072045R         STA ADD 
0336  00355 062051R .31     LDA .38 







 PAGE 0008 #01


0337  00356 072046R         STA .32 
0338  00357 066045R         LDB ADD 
0339  00360 007004          CMB,INB 
0340  00361 046003R         ADB DSCUN 
0341  00362 006020          SSB 
0342  00363 026370R         JMP .35 
0343  00364 062043R .34     LDA SUM 
0344  00365 142045R         ADA ADD,I 
0345  00366 072043R         STA SUM 
0346  00367 126046R         JMP .32,I 
0347*073        IF $(T+1)=SUM THEN GO TO RP4
0348  00370 062032R .35     LDA T 
0349  00371 002004          INA 
0350  00372 160000          LDA .A.,I 
0351  00373 052043R         CPA SUM 
0352  00374 026400R         JMP RP4 
0353*074  ! 
0354*075  CORUP:DO [ER_19; RETURN]! CORRUPT  FILE - RETURN
0355  00375 062052R CORUP   LDA .39 
0356  00376 172071R         STA ER,I
0357  00377 126072R         JMP RP..,I
0358*076  ! 
0359*077  RP4:  IFNOT [T_$ID13] THEN GO TO SETUP
0360  00400 162024R RP4     LDA ID13,I
0361  00401 072032R         STA T 
0362  00402 002003          SZA,RSS 
0363  00403 026452R         JMP SETUP 
0364*078  !     IS CURRENT PROG ON A FILE TRACK?
0365*079        IF         $([IF $ID27<0 THEN $TATSD,\
0366*                    ELSE 0] +(($ID27 AND 77600K)\
0367*                      -<9) + $TAT)<0 THEN [ER_17;\ 
0368*                           RETURN] 
0369  00404 166017R         LDB ID27,I
0370  00405 006021          SSB,RSS 
0371  00406 026411R         JMP .40 
0372  00407 162053R         LDA .43,I 
0373  00410 026412R         JMP .41 
0374  00411 062054R .40     LDA .44 
0375  00412 072055R .41     STA .45 
0376  00413 162017R         LDA ID27,I
0377  00414 012056R         AND .46 
0378  00415 001727          ALF,ALF 
0379  00416 001200          RAL 
0380  00417 042055R         ADA .45 
0381  00420 142057R         ADA .47,I 
0382  00421 160000          LDA .A.,I 
0383  00422 002021          SSA,RSS 
0384  00423 026427R         JMP .42 
0385  00424 062060R         LDA .48 
0386  00425 172071R         STA ER,I
0387  00426 126072R         JMP RP..,I
0388*080  ! 
0389*081  !     YES  -   SO  WE  MIGHT  BE  ABLE  TO
0390*082  !              USE IT - PROG MUST 
0391*083  !              ALSO   BE  DORMANT 
0392*084  ! 







 PAGE 0009 #01


0393*085        IPUT ( ID13,0)   !  MARK ID AS OURS.
0394  00427 016013X .42     JSB IPUT
0395  00430 000433R         DEF *+3 
0396  00431 000024R         DEF ID13
0397  00432 000054R         DEF .44 
0398*086  ! 
0399*087        IF $ ID9 +$ ID16 +($ID18 AND 10000K) THEN \ 
0400*                [IPUT ( ID13,T);ER_18;RETURN]
0401  00433 162025R         LDA ID9,I 
0402  00434 142021R         ADA ID16,I
0403  00435 072055R         STA .45 
0404  00436 162020R         LDA ID18,I
0405  00437 012061R         AND .50 
0406  00440 042055R         ADA .45 
0407  00441 002003          SZA,RSS 
0408  00442 026452R         JMP SETUP 
0409  00443 016013X         JSB IPUT
0410  00444 000447R         DEF *+3 
0411  00445 000024R         DEF ID13
0412  00446 000032R         DEF T 
0413  00447 062062R         LDA .51 
0414  00450 172071R         STA ER,I
0415  00451 126072R         JMP RP..,I
0416*088  ! 
0417*089  !     IT IS DORMANT - SO CONTINUE.
0418*090  ! 
0419*091  SETUP:$( BF +12)_0 ! ZERO FIRST NAME WORD 
0420  00452 062031R SETUP   LDA BF
0421  00453 042063R         ADA .52 
0422  00454 006400          CLB 
0423  00455 174000          STB .A.,I 
0424*092  ! 
0425*093  !     MOVE THE NEW ID SEGMENT IN
0426*094  !     TO THE SYSTEM AREA. 
0427*095        IR_ID2
0428  00456 062013R         LDA ID2 
0429  00457 072035R         STA IR
0430*096        FOR  T_BF+1 TO BF +25 DO[IPUT( IR,$T);\ 
0431*                     IR_IR+1]
0432  00460 062031R         LDA BF
0433  00461 002004          INA 
0434  00462 072032R         STA T 
0435  00463 026467R         JMP .54 
0436  00464 062032R .53     LDA T 
0437  00465 002004          INA 
0438  00466 072032R         STA T 
0439  00467 062031R .54     LDA BF
0440  00470 042064R         ADA .56 
0441  00471 003004          CMA,INA 
0442  00472 042032R         ADA T 
0443  00473 003004          CMA,INA 
0444  00474 002020          SSA 
0445  00475 026506R         JMP .55 
0446  00476 016013X         JSB IPUT
0447  00477 000502R         DEF *+3 
0448  00500 000035R         DEF IR







 PAGE 0010 #01


0449  00501 100032R         DEF T,I 
0450  00502 062035R         LDA IR
0451  00503 002004          INA 
0452  00504 072035R         STA IR
0453  00505 026464R         JMP .53 
0454*097        LU,IR_0 
0455  00506 002400  .55     CLA 
0456  00507 072036R         STA LU
0457  00510 072035R         STA IR
0458*098        IFNOT LIS THEN [FYN_BF;GO TO RP5] 
0459  00511 162070R         LDA LIS,I 
0460  00512 002002          SZA 
0461  00513 026517R         JMP .57 
0462  00514 062031R         LDA BF
0463  00515 072006R         STA FYN 
0464  00516 026547R         JMP RP5 
0465*099  ! 
0466*100        T_[IR_[LU_D.AD(I.BUF)+3]+1]+4 
0467  00517 016016X .57     JSB D.AD
0468  00520 000522R         DEF *+2 
0469  00521 000004X         DEF I.BUF 
0470  00522 042007R         ADA .1
0471  00523 072036R         STA LU
0472  00524 002004          INA 
0473  00525 072035R         STA IR
0474  00526 042014R         ADA .9
0475  00527 072032R         STA T 
0476*101        IR_$IR+2 !SET SECTOR IN IR
0477  00530 162035R         LDA IR,I
0478  00531 042027R         ADA .13 
0479  00532 072035R         STA IR
0480*102        LU_$LU  !SET TRACK IN LU
0481  00533 162036R         LDA LU,I
0482  00534 072036R         STA LU
0483*103        IFNOT IR<$T THEN[IR_0;LU_LU+1] !IF END OF TRACK ADJUST
0484  00535 166032R         LDB T,I 
0485  00536 007004          CMB,INB 
0486  00537 046035R         ADB IR
0487  00540 006020          SSB 
0488  00541 026547R         JMP RP5 
0489  00542 002400          CLA 
0490  00543 072035R         STA IR
0491  00544 062036R         LDA LU
0492  00545 002004          INA 
0493  00546 072036R         STA LU
0494*104  ! 
0495*105  RP5:  IPUT ( ID27,TR+(LU-<7)+IR)  !SET DISC ADDRESS 
0496  00547 062036R RP5     LDA LU
0497  00550 001700          ALF 
0498  00551 001723          ALF,RAR 
0499  00552 042011R         ADA TR
0500  00553 042035R         ADA IR
0501  00554 072055R         STA .45 
0502  00555 016013X         JSB IPUT
0503  00556 000561R         DEF *+3 
0504  00557 000017R         DEF ID27







 PAGE 0011 #01


0505  00560 000055R         DEF .45 
0506*106  ! 
0507*107  ! 
0508*108        IR_[LU_FYN+1]+1 
0509  00561 062006R         LDA FYN 
0510  00562 002004          INA 
0511  00563 072036R         STA LU
0512  00564 002004          INA 
0513  00565 072035R         STA IR
0514*109  ! 
0515*110        IPUT ( ID14, $LU ) ! SET NAME 3,4 
0516  00566 016013X         JSB IPUT
0517  00567 000572R         DEF *+3 
0518  00570 000023R         DEF ID14
0519  00571 100036R         DEF LU,I
0520*111  ! 
0521*112        IPUT (  ID15, ($IR AND 177400K)+ ($ID15  \
0522*                        AND 7) + 200K)  !  5,TYPE
0523  00572 162035R         LDA IR,I
0524  00573 012065R         AND .59 
0525  00574 072055R         STA .45 
0526  00575 162022R         LDA ID15,I
0527  00576 012026R         AND .12 
0528  00577 042055R         ADA .45 
0529  00600 042042R         ADA .23 
0530  00601 072066R         STA .60 
0531  00602 016013X         JSB IPUT
0532  00603 000606R         DEF *+3 
0533  00604 000022R         DEF ID15
0534  00605 000066R         DEF .60 
0535*113  ! 
0536*114        IPUT ( ID13,$ FYN) ! SET NAME 1,2 
0537  00606 016013X         JSB IPUT
0538  00607 000612R         DEF *+3 
0539  00610 000024R         DEF ID13
0540  00611 100006R         DEF FYN,I 
0541*115  ! 
0542*116        IFNOT LIS THEN IPUT(ID15,0) 
0543  00612 162070R         LDA LIS,I 
0544  00613 002002          SZA 
0545  00614 026621R         JMP .61 
0546  00615 016013X         JSB IPUT
0547  00616 000621R         DEF *+3 
0548  00617 000022R         DEF ID15
0549  00620 000054R         DEF .44 
0550*117        RETURN
0551  00621 126072R .61     JMP RP..,I
0552*118        END 
0553*119        END 
0554                        END 
**  NO ERRORS*





$END ASMB     

*
--> Assemble fmp/29033-80019_Rev-A_2
ON,ASMB,99







 PAGE 0001


0001                ASMB,B,X,L
**  NO ERRORS*





























































 PAGE 0002 #01


0001                ASMB,B,X,L
0002*001  SPL, L, M, O
0003*002        NAME CL..(8)
0004  00000                 NAM CL..,8
0005  00000         .A.     EQU  0
0006  00001         .B.     EQU  1
0007                        ENT CL..
0008                        EXT .ENTR 
0009                        EXT .DRCT 
0010                        EXT OPEN. 
0011                        EXT IER.
0012                        EXT WRITF 
0013                        EXT FSTAT 
0014                        EXT CONV. 
0015                        EXT O.BUF 
0016                        EXT I.BUF 
0017                        EXT TMP.
0018                        EXT .E.R. 
0019                        EXT BUF.
0020  00000 020040  BLANK   OCT 020040
0021  00001 046125          OCT 046125
0022  00002 020040          OCT 020040
0023  00003 046101          OCT 046101
0024  00004 051524          OCT 051524
0025  00005 020124          OCT 020124
0026  00006 051101          OCT 051101
0027  00007 041513          OCT 041513
0028  00010 020040          OCT 020040
0029  00011 020103          OCT 020103
0030  00012 051040          OCT 051040
0031  00013 020040          OCT 020040
0032  00014 046117          OCT 046117
0033  00015 041513          OCT 041513
0034  00016 000000  T       BSS 1 
0035  00017 000003  .1      OCT 000003
0036  00020 000000  .2      OCT 000000
0037  00021 000000  TB      BSS 1 
0038  00022 000000R .3      DEF BLANK 
0039  00023 000016  .4      OCT 000016
0040  00024 000001  .5      OCT 000001
0041  00025 000000  PN      BSS 1 
0042  00026 000000  PCR     BSS 1 
0043  00027 000000  PTR     BSS 1 
0044  00030 000004  .6      OCT 000004
0045  00031 000005  .7      OCT 000005
0046  00032 000002  .8      OCT 000002
0047  00033 000000  TL      BSS 1 
0048  00034 177777  .10     OCT 177777
0049  00035 000000  .14     BSS 1 
0050  00036 000000  N       BSS 1 
0051  00037 000013  .16     OCT 000013
0052  00040 000014  .17     OCT 000014
0053  00041 000000  T2      BSS 1 
0054  00042 000000  T1      BSS 1 
0055  00043 177400  .18     OCT 177400
0056  00044 000040  .19     OCT 000040







 PAGE 0003 #01


0057  00045 000017  .20     OCT 000017
0058*003  !     DIBC  DIRECTORY LIST
0059*004  ! 
0060*005  !     ENTERED BY
0061*006  ! 
0062*007  !     CL     COMMAND
0063*008  ! 
0064*009  ! 
0065*010  ! 
0066*011  !     DEFINE   EXTERNALS
0067*012  ! 
0068*013  ! 
0069*014        LET OPEN.,IER.,WRITF,FSTAT,CONV.\ 
0070*                          BE SUBROUTINE,EXTERNAL 
0071*015  ! 
0072*016        LET O.BUF,I.BUF   BE INTEGER,EXTERNAL 
0073*017        LET TMP.,.E.R.,BUF. BE INTEGER,EXTERNAL 
0074*018  !     DEFINE CONSTANTS
0075*019        LET BLANK(14) BE INTEGER
0076*020        INITIALIZE BLANK TO "  LU  LAST TRACK   CR   LOCK"
0077*021  ! 
0078*022  ! 
0079*023  CL..: SUBROUTINE GLOBAL  !NO PRAMETERS NEEDED 
0080  00046 000000  CL..    NOP 
0081  00047 016001X         JSB .ENTR 
0082  00050 000046R         DEF CL..
0083*024        T_@TMP.+3 
0084  00051 016002X         JSB .DRCT 
0085  00052 000012X         DEF TMP.
0086  00053 042017R         ADA .1
0087  00054 072016R         STA T 
0088*025        OPEN.(O.BUF,TMP.,$T,0)! OPEN LIST FILE
0089  00055 016003X         JSB OPEN. 
0090  00056 000063R         DEF *+5 
0091  00057 000010X         DEF O.BUF 
0092  00060 000012X         DEF TMP.
0093  00061 100016R         DEF T,I 
0094  00062 000020R         DEF .2
0095*026        TB_@BUF.+1
0096  00063 016002X         JSB .DRCT 
0097  00064 000014X         DEF BUF.
0098  00065 002004          INA 
0099  00066 072021R         STA TB
0100*027        BUF._BLANK(1) 
0101  00067 162022R         LDA .3,I
0102  00070 072014X         STA BUF.
0103*028        WRITF(O.BUF,.E.R.,BLANK,14) !WRITE THE HEAD 
0104  00071 016005X         JSB WRITF 
0105  00072 000077R         DEF *+5 
0106  00073 000010X         DEF O.BUF 
0107  00074 000013X         DEF .E.R. 
0108  00075 000000R         DEF BLANK 
0109  00076 000023R         DEF .4
0110*029        IER.
0111  00077 016004X         JSB IER.
0112  00100 000101R         DEF *+1 







 PAGE 0004 #01


0113*030        WRITF(O.BUF,.E.R.,BUF.,1) !SPACE A LINE 
0114  00101 016005X         JSB WRITF 
0115  00102 000107R         DEF *+5 
0116  00103 000010X         DEF O.BUF 
0117  00104 000013X         DEF .E.R. 
0118  00105 000014X         DEF BUF.
0119  00106 000024R         DEF .5
0120*031        IER.
0121  00107 016004X         JSB IER.
0122  00110 000111R         DEF *+1 
0123*032        CALL FSTAT(I.BUF)  !READ THE DIRECTORY OF DISCS 
0124  00111 016006X         JSB FSTAT 
0125  00112 000114R         DEF *+2 
0126  00113 000011X         DEF I.BUF 
0127*033        PN_[PCR_[PTR_     TB+   4]+5]+2 
0128  00114 062021R         LDA TB
0129  00115 042030R         ADA .6
0130  00116 072027R         STA PTR 
0131  00117 042031R         ADA .7
0132  00120 072026R         STA PCR 
0133  00121 042032R         ADA .8
0134  00122 072025R         STA PN
0135*034        TL_@I.BUF    !SET ITS ADDRESS 
0136  00123 016002X         JSB .DRCT 
0137  00124 000011X         DEF I.BUF 
0138  00125 072033R         STA TL
0139*035  NEXT: IFNOT $TL THEN [WRITF(O.BUF,.E.R.,T,-1);IER.;\
0140*                            RETURN]
0141  00126 162033R NEXT    LDA TL,I
0142  00127 002002          SZA 
0143  00130 026142R         JMP .9
0144  00131 016005X         JSB WRITF 
0145  00132 000137R         DEF *+5 
0146  00133 000010X         DEF O.BUF 
0147  00134 000013X         DEF .E.R. 
0148  00135 000016R         DEF T 
0149  00136 000034R         DEF .10 
0150  00137 016004X         JSB IER.
0151  00140 000141R         DEF *+1 
0152  00141 126046R         JMP CL..,I
0153*036  ! 
0154*037        FOR T_ TB TO PN DO[$T_BLANK(1)] 
0155  00142 062021R .9      LDA TB
0156  00143 072016R         STA T 
0157  00144 026150R         JMP .12 
0158  00145 062016R .11     LDA T 
0159  00146 002004          INA 
0160  00147 072016R         STA T 
0161  00150 066016R .12     LDB T 
0162  00151 007004          CMB,INB 
0163  00152 046025R         ADB PN
0164  00153 006020          SSB 
0165  00154 026160R         JMP .13 
0166  00155 162022R         LDA .3,I
0167  00156 172016R         STA T,I 
0168  00157 026145R         JMP .11 







 PAGE 0005 #01


0169*038        CONV.($TL,$TB ,2) 
0170  00160 016007X .13     JSB CONV. 
0171  00161 000165R         DEF *+4 
0172  00162 100033R         DEF TL,I
0173  00163 100021R         DEF TB,I
0174  00164 000032R         DEF .8
0175*039        CONV.($[TL_TL+1],$PTR,4)
0176  00165 062033R         LDA TL
0177  00166 002004          INA 
0178  00167 072033R         STA TL
0179  00170 072035R         STA .14 
0180  00171 016007X         JSB CONV. 
0181  00172 000176R         DEF *+4 
0182  00173 100035R         DEF .14,I 
0183  00174 100027R         DEF PTR,I 
0184  00175 000030R         DEF .6
0185*040        CONV.($[TL_TL+1],$PCR,5)
0186  00176 062033R         LDA TL
0187  00177 002004          INA 
0188  00200 072033R         STA TL
0189  00201 072035R         STA .14 
0190  00202 016007X         JSB CONV. 
0191  00203 000207R         DEF *+4 
0192  00204 100035R         DEF .14,I 
0193  00205 100026R         DEF PCR,I 
0194  00206 000031R         DEF .7
0195*041        IFNOT $[TL_TL+1] THEN [N_11;GO TO WRT]
0196  00207 062033R         LDA TL
0197  00210 002004          INA 
0198  00211 072033R         STA TL
0199  00212 160000          LDA .A.,I 
0200  00213 002002          SZA 
0201  00214 026220R         JMP .15 
0202  00215 062037R         LDA .16 
0203  00216 072036R         STA N 
0204  00217 026246R         JMP WRT 
0205*042        T_$TL +12 
0206  00220 162033R .15     LDA TL,I
0207  00221 042040R         ADA .17 
0208  00222 072016R         STA T 
0209*043        T2_[T1_PN+1]+1
0210  00223 062025R         LDA PN
0211  00224 002004          INA 
0212  00225 072042R         STA T1
0213  00226 002004          INA 
0214  00227 072041R         STA T2
0215*044        $PN_$T
0216  00230 162016R         LDA T,I 
0217  00231 172025R         STA PN,I
0218*045        $T1_$(T+1)
0219  00232 062016R         LDA T 
0220  00233 002004          INA 
0221  00234 160000          LDA .A.,I 
0222  00235 172042R         STA T1,I
0223*046        $T2_($(T+2) AND 177400K) +40K 
0224  00236 062016R         LDA T 







 PAGE 0006 #01


0225  00237 042032R         ADA .8
0226  00240 160000          LDA .A.,I 
0227  00241 012043R         AND .18 
0228  00242 042044R         ADA .19 
0229  00243 172041R         STA T2,I
0230*047        N_15
0231  00244 062045R         LDA .20 
0232  00245 072036R         STA N 
0233*048  ! 
0234*049  WRT:  WRITF(O.BUF,.E.R.,BUF.,N) 
0235  00246 016005X WRT     JSB WRITF 
0236  00247 000254R         DEF *+5 
0237  00250 000010X         DEF O.BUF 
0238  00251 000013X         DEF .E.R. 
0239  00252 000014X         DEF BUF.
0240  00253 000036R         DEF N 
0241*050        IER.
0242  00254 016004X         JSB IER.
0243  00255 000256R         DEF *+1 
0244*051        TL_TL+1 
0245  00256 062033R         LDA TL
0246  00257 002004          INA 
0247  00260 072033R         STA TL
0248*052        GO TO NEXT
0249  00261 026126R         JMP NEXT
0250*053  ! 
0251*054        END 
0252*055        END 
0253                        END 
**  NO ERRORS*


























$END ASMB     

*
--> Assemble fmp/29033-80019_Rev-A_3
ON,ASMB,99







 PAGE 0001


0001                ASMB,B,X,L
**  NO ERRORS*





























































 PAGE 0002 #01


0001                ASMB,B,X,L
0002*001  SPL, L, M, O
0003*002        NAME F.UTM(8) 
0004  00000                 NAM F.UTM,8 
0005  00000         .A.     EQU  0
0006  00001         .B.     EQU  1
0007                        ENT LL..
0008                        ENT LO..
0009                        ENT SV..
0010                        EXT .ENTR 
0011                        EXT .DRCT 
0012                        EXT TMP.
0013                        EXT I.BUF 
0014                        EXT N.OPL 
0015                        EXT CAM.O 
0016                        EXT OPEN. 
0017                        EXT .E.R. 
0018                        EXT .TTY
0019  00000 000000  RC      BSS 1 
0020  00001 000410  .1      OCT 000410
0021  00002 000000  T2      BSS 1 
0022  00003 000000  T       BSS 1 
0023  00004 000001  .2      OCT 000001
0024  00005 000003  .6      OCT 000003
0025  00006 000077  .7      OCT 000077
0026  00007 000000  .10     BSS 1 
0027  00010 000070  .11     OCT 000070
0028  00011 177775  .14     OCT 177775
0029  00012 000002  .15     OCT 000002
0030*003        LET TMP.,I.BUF,N.OPL,CAM.O BE INTEGER,EXTERNAL
0031*004        LET OPEN.   BE SUBROUTINE,EXTERNAL
0032*005        LET .E.R.     BE INTEGER,EXTERNAL 
0033*006        LET .TTY      BE FUNCTION,EXTERNAL
0034*007  ! 
0035*008  ! 
0036*009  LL..: SUBROUTINE(N14,LIS14,ER14)GLOBAL !LIST CHANGE SUBROUTINE
0037  00013 000000  N14     NOP 
0038  00014 000000  LIS14   NOP 
0039  00015 000000  ER14    NOP 
0040  00016 000000  LL..    NOP 
0041  00017 016001X         JSB .ENTR 
0042  00020 000013R         DEF N14 
0043*010        RC_@LIS14+1  !SET LIST ADDRESSES
0044  00021 062014R         LDA LIS14 
0045  00022 002004          INA 
0046  00023 072000R         STA RC
0047*011        OPEN.(I.BUF,$RC,N.OPL,410K)  !ATTEMPT OPEN
0048  00024 016007X         JSB OPEN. 
0049  00025 000032R         DEF *+5 
0050  00026 000004X         DEF I.BUF 
0051  00027 100000R         DEF RC,I
0052  00030 000005X         DEF N.OPL 
0053  00031 000001R         DEF .1
0054*012        T2_@TMP.  !SET LIST DEF ADDRESS 
0055  00032 016002X         JSB .DRCT 
0056  00033 000003X         DEF TMP.







 PAGE 0003 #01


0057  00034 072002R         STA T2
0058*013        FOR T_RC TO RC+3 DO[\ 
0059*          $T2_$T;T2_T2+1]
0060  00035 062000R         LDA RC
0061  00036 072003R         STA T 
0062  00037 026043R         JMP .4
0063  00040 062003R .3      LDA T 
0064  00041 002004          INA 
0065  00042 072003R         STA T 
0066  00043 062000R .4      LDA RC
0067  00044 042005R         ADA .6
0068  00045 003004          CMA,INA 
0069  00046 042003R         ADA T 
0070  00047 003004          CMA,INA 
0071  00050 002020          SSA 
0072  00051 026060R         JMP .5
0073  00052 162003R         LDA T,I 
0074  00053 172002R         STA T2,I
0075  00054 062002R         LDA T2
0076  00055 002004          INA 
0077  00056 072002R         STA T2
0078  00057 026040R         JMP .3
0079*014        DO[$T2_N.OPL;$(T2+1)_ -(I.BUF AND 77K);RETURN]
0080  00060 062005X .5      LDA N.OPL 
0081  00061 172002R         STA T2,I
0082  00062 062004X         LDA I.BUF 
0083  00063 012006R         AND .7
0084  00064 003004          CMA,INA 
0085  00065 066002R         LDB T2
0086  00066 006004          INB 
0087  00067 170001          STA .B.,I 
0088  00070 126016R         JMP LL..,I
0089*015        END 
0090*016  ! 
0091*017  ! 
0092*018  LO..:SUBROUTINE(N13,LI13,ER13) GLOBAL 
0093  00071 000000  N13     NOP 
0094  00072 000000  LI13    NOP 
0095  00073 000000  ER13    NOP 
0096  00074 000000  LO..    NOP 
0097  00075 016001X         JSB .ENTR 
0098  00076 000071R         DEF N13 
0099*019  !     NEW LOG UNIT SUBROUTINE 
0100*020        IF .TTY([T_$(@LI13+1)]) THEN\ 
0101*               CAM.O_T,\ 
0102*               ELSE ER13_56
0103  00077 062072R         LDA LI13
0104  00100 002004          INA 
0105  00101 160000          LDA .A.,I 
0106  00102 072003R         STA T 
0107  00103 072007R         STA .10 
0108  00104 016011X         JSB .TTY
0109  00105 000107R         DEF *+2 
0110  00106 000007R         DEF .10 
0111  00107 002003          SZA,RSS 
0112  00110 026114R         JMP .8







 PAGE 0004 #01


0113  00111 062003R         LDA T 
0114  00112 072006X         STA CAM.O 
0115  00113 026116R         JMP .9
0116  00114 062010R .8      LDA .11 
0117  00115 172073R         STA ER13,I
0118*021        RETURN
0119  00116 126074R .9      JMP LO..,I
0120*022        END 
0121*023  ! 
0122*024  SV..: SUBROUTINE(N15,LI15) GLOBAL 
0123  00117 000000  N15     NOP 
0124  00120 000000  LI15    NOP 
0125  00121 000000  SV..    NOP 
0126  00122 016001X         JSB .ENTR 
0127  00123 000117R         DEF N15 
0128*025        T_@LI15+1 
0129  00124 062120R         LDA LI15
0130  00125 002004          INA 
0131  00126 072003R         STA T 
0132*026        IF $T<0 THEN $T_0 
0133  00127 166003R         LDB T,I 
0134  00130 006021          SSB,RSS 
0135  00131 026134R         JMP .12 
0136  00132 002400          CLA 
0137  00133 172003R         STA T,I 
0138*027        IF $T>2 THEN $T_2 
0139  00134 166003R .12     LDB T,I 
0140  00135 046011R         ADB .14 
0141  00136 006020          SSB 
0142  00137 026142R         JMP .13 
0143  00140 062012R         LDA .15 
0144  00141 172003R         STA T,I 
0145*028        $(@.E.R.+1)_$T
0146  00142 016002X .13     JSB .DRCT 
0147  00143 000010X         DEF .E.R. 
0148  00144 002004          INA 
0149  00145 166003R         LDB T,I 
0150  00146 174000          STB .A.,I 
0151*029        RETURN
0152  00147 126121R         JMP SV..,I
0153*030        END 
0154*031  ! 
0155*032        END 
0156                        END 
**  NO ERRORS*











$END ASMB     

*
--> Assemble fmp/29033-80019_Rev-A_4
ON,ASMB,99







 PAGE 0001


0001                ASMB,B,R,L,C
**  NO ERRORS*





























































 PAGE 0002 #01


0001                ASMB,B,R,L,C
0002  00000               NAM WRIS$,7 
0003                      ENT WRIS,IWRIS,WEOFS
0004                      EXT %WRIS,%WRIN,%WEOF 
0005                      EXT .ENTR 
0006*     THIS ROUTINE IS USED TO CALL THE WRITE SOURCE ROUTINE 
0007*     FROM A FORTRAN PROGRAM
0008*      INITILIZE CALL 
0009*     CALL IWRIS(IER)       IER=0 IF OK  -1 IF NO TRACKS
0010*      WRITE CALL 
0011*      CALL WRIS(BUF,L,ER)    BUFFER ,LENGTH(-CHARACTERS),ER SAME AS
0012*     TERMINATE CALL
0013*     CALL WEOFS



0015  00000 000000  BUF   NOP 
0016  00001 000000  L      NOP
0017  00002 000000  ER    NOP 
0018  00003 000000  WRIS  NOP 
0019  00004 016004X       JSB .ENTR 
0020  00005 000000R       DEF BUF 
0021  00006 062000R       LDA BUF       GET THE BUFFER ADDRESS
0022  00007 072014R       STA BA        SET IF FOR THE CALL 
0023  00010 162001R       LDA L,I       GET THE LENGTH
0024  00011 072001R        STA L          SET IT
0025  00012 016001X       JSB %WRIS       CALL TO TRANSFER
0026  00013 000017R       DEF RT
0027  00014 000000  BA    NOP 
0028  00015 000001R       DEF L 
0029  00016 003401        CCA,RSS       NO TRACK RETURN 
0030  00017 002400  RT    CLA           NORMAL RETURN 
0031  00020 172002R       STA ER,I      SET ERROR CODE
0032  00021 126003R       JMP WRIS,I    RETURN


0034  00022 000000  IER   NOP 
0035  00023 000000  IWRIS NOP 
0036  00024 016004X       JSB .ENTR 
0037  00025 000022R       DEF IER 
0038  00026 016002X       JSB %WRIN     MAKE INITILIZE CALL 
0039  00027 007401        CCB,RSS       NO DISC RETURN
0040  00030 006400        CLB           OK RETURN 
0041  00031 176022R       STB IER,I     SET ERROR CODE
0042  00032 126023R       JMP IWRIS,I     RETURN



0044  00033 000000  WEOFS NOP 
0045  00034 016003X       JSB %WEOF     WRITE THE END OF FILE 
0046  00035 162033R       LDA WEOFS,I     GET THE RETURN ADDRESS
0047  00036 124000        JMP A,I       RETURN


0049  00000         A     EQU 0 
0050  00001         B     EQU 1 







 PAGE 0003 #01


0051                      END 
**  NO ERRORS*






















































$END ASMB     

*
--> Assemble fmp/29033-80020_Rev-A_1
ON,ASMB,99







 PAGE 0001


0001                ASMB,B,X,L
**  NO ERRORS*





























































 PAGE 0002 #01


0001                ASMB,B,X,L
0002*001  SPL, L, M, O
0003*002        NAME ID.A(8)
0004  00000                 NAM ID.A,8
0005  00000         .A.     EQU  0
0006  00001         .B.     EQU  1
0007                        ENT ID.A
0008                        EXT .ENTR 
0009  00000 000000  ID.AV   BSS 1 
0010  00001 000000  EQT5    BSS 1 
0011  00002 000000  LU      BSS 1 
0012  00003 177400  .1      OCT 177400
0013  00004 000000  KSUM    BSS 1 
0014  00005 000000  TX      BSS 1 
0015  00006 001657  .2      OCT 001657
0016  00007 000000  T       BSS 1 
0017  00010 000000  ADD     BSS 1 
0018  00011 000000  LOC2    BSS 1 
0019  00012 000000  LOC     BSS 1 
0020  00013 000014  .3      OCT 000014
0021*003  ! 
0022*004  !     ROUTINE TO FIND A NAME IN THE SYSTEM ID SEGMENTS
0023*005  !     OR IF NAME IS NULL TO FIND A BLANK ID SEGMENT 
0024*006  ! 
0025*007  ID.A: FUNCTION(NAM)GLOBAL,FEXIT  !NAME SEARCH FUNCTION
0026  00014 000000  NAM     NOP 
0027  00015 000000  ID.A    NOP 
0028  00016 016001X         JSB .ENTR 
0029  00017 000014R         DEF NAM 
0030*008        LET KEYWD             BE CONSTANT (1657K) 
0031*009  ! 
0032*010  !     SEARCH FOR THE GIVEN PROGRAM IN THE SYSTEN ID TABELS
0033*011  ! 
0034*012  !     IF THE GIVEN NAME IS ZERO THE AN ATTEMPT IS MAKE TO 
0035*013  !     RETURN A BLANK ID SEGMENT THAT HAS NO TRACKS ASSIGNED TO
0036*014  ! 
0037*015  !     AN F EXIT IS TAKEN IF THE ID CAN NOT BE FOUND 
0038*016  ! 
0039*017        EQT5_$([LU_@NAM+1]+1)AND 177400K  !SET NAME ADDRESSES 
0040  00020 062014R         LDA NAM 
0041  00021 002004          INA 
0042  00022 072002R         STA LU
0043  00023 002004          INA 
0044  00024 160000          LDA .A.,I 
0045  00025 012003R         AND .1
0046  00026 072001R         STA EQT5
0047*018        KSUM_0    !INITILIZE THE NOT FOUND FLAG 
0048  00027 002400          CLA 
0049  00030 072004R         STA KSUM
0050*019        TX_$KEYWD  !SET UP THE INITIAL ADDRESS
0051  00031 162006R         LDA .2,I
0052  00032 072005R         STA TX
0053*020  NEXID:T_[ADD_[LOC2_[LOC_[ID.AV_$TX]+12]+1]+1]+12!SET ID SEG AD
0054  00033 162005R NEXID   LDA TX,I
0055  00034 072000R         STA ID.AV 
0056  00035 042013R         ADA .3







 PAGE 0003 #01


0057  00036 072012R         STA LOC 
0058  00037 002004          INA 
0059  00040 072011R         STA LOC2
0060  00041 002004          INA 
0061  00042 072010R         STA ADD 
0062  00043 042013R         ADA .3
0063  00044 072007R         STA T 
0064*021        IF $LOC=NAM THEN[\
0065*          IF $LOC2=$LU THEN[\
0066*               IF($ADD AND 177400K)=EQT5 THEN[\
0067*                    IF NAM THEN RETURN ,ELSE[\ 
0068*                         KSUM_ID.AV;IFNOT $T THEN RETURN]]]] 
0069  00045 166012R         LDB LOC,I 
0070  00046 156014R         CPB NAM,I 
0071  00047 002001          RSS 
0072  00050 026100R         JMP .8
0073  00051 166011R         LDB LOC2,I
0074  00052 156002R         CPB LU,I
0075  00053 002001          RSS 
0076  00054 026100R         JMP .8
0077  00055 162010R         LDA ADD,I 
0078  00056 012003R         AND .1
0079  00057 052001R         CPA EQT5
0080  00060 002001          RSS 
0081  00061 026100R         JMP .8
0082  00062 162014R         LDA NAM,I 
0083  00063 002003          SZA,RSS 
0084  00064 026070R         JMP .5
0085  00065 062000R         LDA ID.AV 
0086  00066 000040          CLE 
0087  00067 126015R         JMP ID.A,I
0088  00070 062000R .5      LDA ID.AV 
0089  00071 072004R         STA KSUM
0090  00072 162007R         LDA T,I 
0091  00073 002002          SZA 
0092  00074 026100R         JMP .8
0093  00075 062000R         LDA ID.AV 
0094  00076 000040          CLE 
0095  00077 126015R         JMP ID.A,I
0096*022  ! 
0097*023        TX_TX+1        !STEP TO NEXT ID SEGMENT 
0098  00100 062005R .8      LDA TX
0099  00101 002004          INA 
0100  00102 072005R         STA TX
0101*024        IF $TX    THEN GO TO NEXID  !IF ONE GO TEST IT
0102  00103 162005R         LDA TX,I
0103  00104 002002          SZA 
0104  00105 026033R         JMP NEXID 
0105*025        IFNOT [ID.AV_KSUM] THEN FRETURN !IF NOT FOUND THE F RETU
0106  00106 062004R         LDA KSUM
0107  00107 072000R         STA ID.AV 
0108  00110 002002          SZA 
0109  00111 026115R         JMP .9
0110  00112 062000R         LDA ID.AV 
0111  00113 002300          CCE 
0112  00114 126015R         JMP ID.A,I







 PAGE 0004 #01


0113*026        RETURN    !   ELSE RETURN THE LAST NULL ID SEGMENT
0114  00115 062000R .9      LDA ID.AV 
0115  00116 000040          CLE 
0116  00117 126015R         JMP ID.A,I
0117*027        END 
0118*028  ! 
0119*029        END 
0120                        END 
**  NO ERRORS*















































$END ASMB     

*
--> Assemble fmp/29033-80020_Rev-A_2
ON,ASMB,99







 PAGE 0001


0001                ASMB,B,X,L
**  NO ERRORS*





























































 PAGE 0002 #01


0001                ASMB,B,X,L
0002*001  SPL, L, M, O
0003*002        NAME MSC.(8)
0004  00000                 NAM MSC.,8
0005  00000         .A.     EQU  0
0006  00001         .B.     EQU  1
0007                        ENT MSC.
0008                        EXT .ENTR 
0009                        EXT .DRCT 
0010                        EXT D.RIO 
0011                        EXT D.SDR 
0012  00000 000000  MSC.V   BSS 1 
0013  00001 000001  .1      OCT 000001
0014  00002 000000  T       BSS 1 
0015  00003 000176  .2      OCT 000176
0016  00004 000000  .4      OCT 000000
0017*003  !     THIS ROUTINE CHECKS THE PASSED PARAMETER AGAINST THE
0018*004  !     SYSTEM MASTER SECURITY CODE 
0019*005  ! 
0020*006        LET D.RIO  BE SUBROUTINE,EXTERNAL 
0021*007        LET D.SDR   BE INTEGER,EXTERNAL 
0022*008  MSC.: FUNCTION(LST)GLOBAL 
0023  00005 000000  LST     NOP 
0024  00006 000000  MSC.    NOP 
0025  00007 016001X         JSB .ENTR 
0026  00010 000005R         DEF LST 
0027*009  !     RETURNS 1 IF GOOD 0 IF BAD
0028*010        D.RIO(1)  !READ THE DIRECTORY OF DISCS
0029  00011 016003X         JSB D.RIO 
0030  00012 000014R         DEF *+2 
0031  00013 000001R         DEF .1
0032*011        IFNOT [T_$(@D.SDR+126)] THEN GO TO GOOD 
0033  00014 016002X         JSB .DRCT 
0034  00015 000004X         DEF D.SDR 
0035  00016 042003R         ADA .2
0036  00017 160000          LDA .A.,I 
0037  00020 072002R         STA T 
0038  00021 002003          SZA,RSS 
0039  00022 026031R         JMP GOOD
0040*012        IF $(@LST+1)=T THEN [GOOD: RETURN 1]
0041  00023 062005R         LDA LST 
0042  00024 002004          INA 
0043  00025 160000          LDA .A.,I 
0044  00026 052002R         CPA T 
0045  00027 002001          RSS 
0046  00030 026033R         JMP .3
0047  00031 062001R GOOD    LDA .1
0048  00032 126006R         JMP MSC.,I
0049*013        RETURN 0
0050  00033 062004R .3      LDA .4
0051  00034 126006R         JMP MSC.,I
0052*014        END 
0053*015        END 
0054                        END 
**  NO ERRORS*

$END ASMB     

*
--> Assemble fmp/29033-80020_Rev-A_3
ON,ASMB,99







 PAGE 0001


0001                ASMB,B,X,L
**  NO ERRORS*





























































 PAGE 0002 #01


0001                ASMB,B,X,L
0002*001  SPL, L, M, O
0003*002        NAME LOCK.(8) 
0004  00000                 NAM LOCK.,8 
0005  00000         .A.     EQU  0
0006  00001         .B.     EQU  1
0007                        ENT LOCK. 
0008                        EXT .ENTR 
0009                        EXT MSS.
0010                        EXT EXEC
0011                        EXT DS.DF 
0012                        EXT D.
0013  00000 000000  A       OCT 000000
0014  00001 000001  B       OCT 000001
0015  00002 001717  XEQT    OCT 001717
0016  00003 000011  .1      OCT 000011
0017  00004 000000  .2      OCT 000000
0018  00005 000000  AREG    BSS 1 
0019  00006 000000  BREG    BSS 1 
0020*003  ! 
0021*004  !     THIS ROUTINE OBTAINS A LOCK AND RELEASES IT ON THE
0022*005  !     GIVEN DISC
0023*006        LET MSS.,EXEC BE SUBROUTINE ,EXTERNAL 
0024*007        LET DS.DF,D.   BE INTEGER,EXTERNAL
0025*008        INITIALIZE A,B,XEQT  TO 0,1,1717K 
0026*009  ! 
0027*010  ! 
0028*011  LOCK.:SUBROUTINE(DSID,RQ)GLOBAL,FEXIT  !ROUTINE TO REQUEST AND
0029  00007 000000  DSID    NOP 
0030  00010 000000  RQ      NOP 
0031  00011 000000  LOCK.   NOP 
0032  00012 016001X         JSB .ENTR 
0033  00013 000007R         DEF DSID
0034*012  !                                      RELEASE DISC LOCKS 
0035*013  LOCK: EXEC(9,D.,$XEQT,0,DSID,0,RQ)  !CALL D.RTR TO GET THE LOC
0036  00014 016003X LOCK    JSB EXEC
0037  00015 000025R         DEF *+8 
0038  00016 000003R         DEF .1
0039  00017 000005X         DEF D.
0040  00020 100002R         DEF XEQT,I
0041  00021 000004R         DEF .2
0042  00022 100007R         DEF DSID,I
0043  00023 000004R         DEF .2
0044  00024 100010R         DEF RQ,I
0045*014        DO[AREG_$A;BREG_$B;IF AREG THEN GOTO LOCK]!IF SCHEDULE P
0046  00025 162000R         LDA A,I 
0047  00026 072005R         STA AREG
0048  00027 162001R         LDA B,I 
0049  00030 072006R         STA BREG
0050  00031 062005R         LDA AREG
0051  00032 002002          SZA 
0052  00033 026014R         JMP LOCK
0053*015        IF $BREG THEN[MSS.($BREG);FRETURN]! IF ERROR THEN ERROR 
0054  00034 162006R         LDA BREG,I
0055  00035 002003          SZA,RSS 
0056  00036 026044R         JMP .3







 PAGE 0003 #01


0057  00037 016002X         JSB MSS.
0058  00040 000042R         DEF *+2 
0059  00041 100006R         DEF BREG,I
0060  00042 002300          CCE 
0061  00043 126011R         JMP LOCK.,I 
0062*016        DS.DF_0       ! CORE COPY IF ANY IS WRONG NOW 
0063  00044 002400  .3      CLA 
0064  00045 072004X         STA DS.DF 
0065*017        RETURN!   ELSE GO  NORMAL RETURN
0066  00046 000040          CLE 
0067  00047 126011R         JMP LOCK.,I 
0068*018        END 
0069*019        END 
0070                        END 
**  NO ERRORS*









































$END ASMB     

*
--> Assemble fmp/29033-80020_Rev-A_4
ON,ASMB,99







 PAGE 0001


0001                ASMB,B,X,L
**  NO ERRORS*





























































 PAGE 0002 #01


0001                ASMB,B,X,L
0002*001  SPL, L, M, O
0003*002        NAME CREA.(8) 
0004  00000                 NAM CREA.,8 
0005  00000         .A.     EQU  0
0006  00001         .B.     EQU  1
0007                        ENT CREA. 
0008                        EXT .ENTR 
0009                        EXT CLOS. 
0010                        EXT CREAT 
0011                        EXT IER.
0012                        EXT .E.R. 
0013  00000 177700  .2      OCT 177700
0014  00001 000000  DCB3    BSS 1 
0015  00002 000000  DCB2    BSS 1 
0016  00003 000000  DCB1    BSS 1 
0017*003        LET CLOS.,CREAT,IER.     BE SUBROUTINE,EXTERNAL 
0018*004        LET .E.R.     BE INTEGER,EXTERNAL 
0019*005  CREA.:SUBROUTINE(DCBR,LUR,PPLIS) GLOBAL,FEXIT 
0020  00004 000000  DCBR    NOP 
0021  00005 000000  LUR     NOP 
0022  00006 000000  PPLIS   NOP 
0023  00007 000000  CREA.   NOP 
0024  00010 016001X         JSB .ENTR 
0025  00011 000004R         DEF DCBR
0026*006        CLOS.(DCBR)  !CLOSE CURRENT FILE IF OPEN
0027  00012 016002X         JSB CLOS. 
0028  00013 000015R         DEF *+2 
0029  00014 100004R         DEF DCBR,I
0030*007        IF LUR <64 THEN FRETURN 
0031  00015 166005R         LDB LUR,I 
0032  00016 046000R         ADB .2
0033  00017 006021          SSB,RSS 
0034  00020 026023R         JMP .1
0035  00021 002300          CCE 
0036  00022 126007R         JMP CREA.,I 
0037*008        DCB3_[DCB2_[DCB1_@PPLIS+1]+1]+1 
0038  00023 062006R .1      LDA PPLIS 
0039  00024 002004          INA 
0040  00025 072003R         STA DCB1
0041  00026 002004          INA 
0042  00027 072002R         STA DCB2
0043  00030 002004          INA 
0044  00031 072001R         STA DCB3
0045*009        CREAT(DCBR,.E.R.,LUR,$DCB3,$DCB2,PPLIS,$DCB1) 
0046  00032 016003X         JSB CREAT 
0047  00033 000043R         DEF *+8 
0048  00034 100004R         DEF DCBR,I
0049  00035 000005X         DEF .E.R. 
0050  00036 100005R         DEF LUR,I 
0051  00037 100001R         DEF DCB3,I
0052  00040 100002R         DEF DCB2,I
0053  00041 100006R         DEF PPLIS,I 
0054  00042 100003R         DEF DCB1,I
0055*010        IER.
0056  00043 016004X         JSB IER.







 PAGE 0003 #01


0057  00044 000045R         DEF *+1 
0058*011        $DCB3_.E.R.>- 1   !SET ACTUAL SIZE FOR TRUNCATE OPTION
0059  00045 062005X         LDA .E.R. 
0060  00046 001100          ARS 
0061  00047 172001R         STA DCB3,I
0062*012        RETURN
0063  00050 000040          CLE 
0064  00051 126007R         JMP CREA.,I 
0065*013        END 
0066*014        END 
0067                        END 
**  NO ERRORS*












































$END ASMB     

*
--> Assemble fmp/29033-80020_Rev-A_5
ON,ASMB,99







 PAGE 0001


0001                ASMB,B,X,L
**  NO ERRORS*





























































 PAGE 0002 #01


0001                ASMB,B,X,L
0002*001  SPL, L, M, O
0003*002        NAME CK.SM(7) 
0004  00000                 NAM CK.SM,7 
0005  00000         .A.     EQU  0
0006  00001         .B.     EQU  1
0007                        ENT CK.SM 
0008                        EXT .ENTR 
0009  00000 000000  TT      BSS 1 
0010  00001 177400  .1      OCT 177400
0011  00002 000000  CSS     BSS 1 
0012  00003 000000  CS      BSS 1 
0013  00004 000002  .2      OCT 000002
0014  00005 000000  BFBP    BSS 1 
0015  00006 177777  .5      OCT 177777
0016  00007 000000  CLN     BSS 1 
0017  00010 000000  BFPT    BSS 1 
0018  00011 000001  .7      OCT 000001
0019  00012 000003  .11     OCT 000003
0020*003  ! 
0021*004  CK.SM:SUBROUTINE(BF,TYP)GLOBAL,FEXIT  !CHECKSUM ROUTINE 
0022  00013 000000  BF      NOP 
0023  00014 000000  TYP     NOP 
0024  00015 000000  CK.SM   NOP 
0025  00016 016001X         JSB .ENTR 
0026  00017 000013R         DEF BF
0027*005  ! 
0028*006  !     A CHECKSUM IS DONE ON BUFFER BF FOR 
0029*007  !     RECORD TYPE  TYP(1=RELOCATABLES, 0=>ABS)
0030*008  !     FEXIT IF BAD CHECKSUM 
0031*009  ! 
0032*010        IF [TT_BF-<8]>377K THEN GO TO RTNF
0033  00020 162013R         LDA BF,I
0034  00021 001727          ALF,ALF 
0035  00022 072000R         STA TT
0036  00023 042001R         ADA .1
0037  00024 002021          SSA,RSS 
0038  00025 026112R         JMP RTNF
0039*011        DO[CSS_$(@BF+2);CS_$(@BF+1)] !INITIALIZE CHECKSUM 
0040  00026 062013R         LDA BF
0041  00027 042004R         ADA .2
0042  00030 160000          LDA .A.,I 
0043  00031 072002R         STA CSS 
0044  00032 062013R         LDA BF
0045  00033 002004          INA 
0046  00034 160000          LDA .A.,I 
0047  00035 072003R         STA CS
0048*012        IF TYP THEN BFBP_ -1,ELSE[\ !SET OFFSET AND IF ABS
0049*                   BFBP_1;CS_CSS+CS] !ADD WD THREE TO CS 
0050  00036 162014R         LDA TYP,I 
0051  00037 002003          SZA,RSS 
0052  00040 026044R         JMP .3
0053  00041 003400          CCA 
0054  00042 072005R         STA BFBP
0055  00043 026051R         JMP .4
0056  00044 002404  .3      CLA,INA 







 PAGE 0003 #01


0057  00045 072005R         STA BFBP
0058  00046 062002R         LDA CSS 
0059  00047 042003R         ADA CS
0060  00050 072003R         STA CS
0061*013        CLN_TT     +@BF+BFBP !SET LAST WORD ADDRESS AND 
0062  00051 062013R .4      LDA BF
0063  00052 042000R         ADA TT
0064  00053 042005R         ADA BFBP
0065  00054 072007R         STA CLN 
0066*014        IFNOT TYP THEN CSS_$(CLN+1) !IF ABS. SET CHECKSUM 
0067  00055 162014R         LDA TYP,I 
0068  00056 002002          SZA 
0069  00057 026064R         JMP .6
0070  00060 062007R         LDA CLN 
0071  00061 002004          INA 
0072  00062 160000          LDA .A.,I 
0073  00063 072002R         STA CSS 
0074*015        FOR BFPT_@BF+3 TO CLN DO[CS_CS+$BFPT] !SUM
0075  00064 062013R .6      LDA BF
0076  00065 042012R         ADA .11 
0077  00066 072010R         STA BFPT
0078  00067 026073R         JMP .9
0079  00070 062010R .8      LDA BFPT
0080  00071 002004          INA 
0081  00072 072010R         STA BFPT
0082  00073 066010R .9      LDB BFPT
0083  00074 007004          CMB,INB 
0084  00075 046007R         ADB CLN 
0085  00076 006020          SSB 
0086  00077 026104R         JMP .10 
0087  00100 062003R         LDA CS
0088  00101 142010R         ADA BFPT,I
0089  00102 072003R         STA CS
0090  00103 026070R         JMP .8
0091*016        IF CS=CSS THEN RETURN               !CHECK & RETURN 
0092  00104 066003R .10     LDB CS
0093  00105 056002R         CPB CSS 
0094  00106 002001          RSS 
0095  00107 026112R         JMP RTNF
0096  00110 000040          CLE 
0097  00111 126015R         JMP CK.SM,I 
0098*017  RTNF:  FRETURN
0099  00112 002300  RTNF    CCE 
0100  00113 126015R         JMP CK.SM,I 
0101*018        END 
0102*019        END 
0103                        END 
**  NO ERRORS*








$END ASMB     

*
--> Assemble fmp/29033-80020_Rev-A_6
ON,ASMB,99







 PAGE 0001


0001                ASMB,B,R,L
**  NO ERRORS*





























































 PAGE 0002 #01


0001                ASMB,B,R,L
0002  00000               NAM IPUT,6
0003  00001         B     EQU 1 
0004                      ENT IPUT
0005                      EXT $LIBR,$LIBX 
0006  00000 000000  ADDR  BSS 1 
0007  00001 000000  VALUE BSS 1 
0008  00002 000000  IPUT  NOP 
0009  00003 016001X       JSB $LIBR 
0010  00004 000000        NOP 
0011  00005 036002R       ISZ IPUT
0012  00006 104200        DLD IPUT,I
      00007 100002R 
0013  00010 104400        DST ADDR
      00011 000000R 
0014  00012 036002R       ISZ IPUT
0015  00013 036002R       ISZ IPUT
0016  00014 162001R       LDA VALUE,I 
0017  00015 166000R       LDB ADDR,I
0018  00016 170001        STA B,I 
0019  00017 016002X       JSB $LIBX 
0020  00020 000002R       DEF IPUT
0021                      END 
**  NO ERRORS*
































$END ASMB     

*
--> Assemble fmp/29033-80020_Rev-A_7
ON,ASMB,99







 PAGE 0001


0001                ASMB,B,X,L
**  NO ERRORS*





























































 PAGE 0002 #01


0001                ASMB,B,X,L
0002*001  SPL, L, M, O
0003*002        NAME FM.UT(8) 
0004  00000                 NAM FM.UT,8 
0005  00000         .A.     EQU  0
0006  00001         .B.     EQU  1
0007                        ENT D.RIO 
0008                        ENT DR.RD 
0009                        ENT D.SDR 
0010                        ENT PK.DR 
0011                        ENT DS.LU 
0012                        ENT D.LT
0013                        ENT D.LB
0014                        ENT DS.DF 
0015                        ENT DS.F1 
0016                        EXT .ENTR 
0017                        EXT .MPY
0018                        EXT .DIV
0019                        EXT EXEC
0020                        EXT MSS.
0021                        EXT FM.AB 
0022                        EXT IFLG. 
0023                        EXT D.
0024  00000 000000  D.SDR   BSS   128 
0025  00200 000000  PK.DR   BSS   128 
0026  00400 000000  DS.LU   BSS 1 
0027  00401 000000  D.LT    BSS 1 
0028  00402 000000  D.LB    BSS 1 
0029  00403 000000  DS.DF   OCT 000000
0030  00404 000000  DS.F1   OCT 000000
0031  00405 000001  .2      OCT 000001
0032  00406 000000  TRAK    BSS 1 
0033  00407 000000  T       BSS 1 
0034  00410 001756  .3      OCT 001756
0035  00411 000002  .6      OCT 000002
0036  00412 177677  .7      OCT 177677
0037  00413 100000  .8      OCT 100000
0038  00414 000007  .9      OCT 000007
0039  00415 074002  .10     OCT 074002
0040  00416 000200  .11     OCT 000200
0041  00417 000000  .12     OCT 000000
0042  00420 000000  BREG    BSS 1 
0043  00421 001751  .14     OCT 001751
0044  00422 000000  DLU     BSS 1 
0045  00423 000000  I       BSS 1 
0046  00424 000004  .22     OCT 000004
0047  00425 177603  .23     OCT 177603
0048  00426 000000R .24     DEF D.SDR 
0049  00427 000000  TX      BSS 1 
0050  00430 000016  .27     OCT 000016
0051  00431 074000  .29     OCT 074000
0052  00432 000000  .30     BSS 1 
0053  00433 000000  DISBL   BSS 1 
0054  00434 000000  DISNT   BSS 1 
0055  00435 000200R .32     DEF PK.DR 
0056  00436 000010  .33     OCT 000010







 PAGE 0003 #01


0057  00437 000000  DS.SC   BSS 1 
0058  00440 000006  .34     OCT 000006
0059  00441 000000  TR      BSS 1 
0060  00442 177777  .35     OCT 177777
0061  00443 000011  .38     OCT 000011
0062  00444 000000  LU      BSS 1 
0063  00445 000000  FLG     BSS 1 
0064  00446 001717  .41     OCT 001717
0065  00447 000000  .42     BSS 1 
0066  00450 000000  AREG    BSS 1 
0067  00451 000005  .43     OCT 000005
0068  00452 000000  DT      BSS 1 
0069  00453 001721  .45     OCT 001721
0070*003  ! 
0071*004        LET EXEC,MSS.      BE SUBROUTINE,EXTERNAL 
0072*005        LET D.RIO,DR.RD,DR.SU   BE SUBROUTINE 
0073*006        LET D.AD   BE FUNCTION,EXTERNAL 
0074*007        LET FM.AB     BE LABEL,EXTERNAL 
0075*008          LET MSC.     BE FUNCTION
0076*009        LET IFLG.              BE INTEGER,EXTERNAL
0077*010        LET D.SDR,PK.DR        BE INTEGER(128),GLOBAL 
0078*011        LET DS.LU,D.LT,D.LB    BE INTEGER,GLOBAL
0079*012        LET D.       BE INTEGER,EXTERNAL
0080*013        LET DS.DF,DS.F1     BE INTEGER,GLOBAL 
0081*014        INITIALIZE DS.DF,DS.F1  TO 0,0
0082*015        LET READI              BE CONSTANT(1     )
0083*016        LET XEQT     BE CONSTANT(1717K) 
0084*017        LET TEMP     BE CONSTANT(1721K) 
0085*018        LET PRC          BE CONSTANT(74000K)
0086*019        LET TATSD    BE CONSTANT(1756K) 
0087*020        LET WRIT      BE CONSTANT(2  )
0088*021        LET A         BE CONSTANT (0) 
0089*022        LET B         BE CONSTANT (1) 
0090*023  ! 
0091*024  ! 
0092*025  D.RIO:SUBROUTINE(RCODE) GLOBAL  !READ DISC DIRECTORY
0093  00454 000000  RCODE   NOP 
0094  00455 000000  D.RIO   NOP 
0095  00456 016001X         JSB .ENTR 
0096  00457 000454R         DEF RCODE 
0097*026         IF DS.DF THEN[IF RCODE=READI THEN RETURN]!IF IN
0098  00460 062403R         LDA DS.DF 
0099  00461 002003          SZA,RSS 
0100  00462 026466R         JMP .1
0101  00463 166454R         LDB RCODE,I 
0102  00464 056405R         CPB .2
0103  00465 126455R         JMP D.RIO,I 
0104*027        DO[TRAK_$TATSD-1;T_0]!PRESET FOR DIRECT ACCESS
0105  00466 003400  .1      CCA 
0106  00467 142410R         ADA .3,I
0107  00470 072406R         STA TRAK
0108  00471 002400          CLA 
0109  00472 072407R         STA T 
0110*028        IFNOT IFLG. THEN[IF RCODE=WRIT THEN \!CAN NOT USE DIRECT
0111*              [DR.SU(D.SDR,-65,100000K,7);GOTO DIR02]]!USE D.RTR 
0112  00473 062007X         LDA IFLG. 







 PAGE 0004 #01


0113  00474 002002          SZA 
0114  00475 026511R         JMP DIR0
0115  00476 166454R         LDB RCODE,I 
0116  00477 056411R         CPB .6
0117  00500 002001          RSS 
0118  00501 026511R         JMP DIR0
0119  00502 017031R         JSB DR.SU 
0120  00503 000510R         DEF *+5 
0121  00504 000000R         DEF D.SDR 
0122  00505 000412R         DEF .7
0123  00506 000413R         DEF .8
0124  00507 000414R         DEF .9
0125  00510 026533R         JMP DIR02 
0126*029  DIR0: EXEC(RCODE,74002K,D.SDR,128,TRAK,0)!WRIT/READ THE BLOCK 
0127  00511 016004X DIR0    JSB EXEC
0128  00512 000521R         DEF *+7 
0129  00513 100454R         DEF RCODE,I 
0130  00514 000415R         DEF .10 
0131  00515 000000R         DEF D.SDR 
0132  00516 000416R         DEF .11 
0133  00517 000406R         DEF TRAK
0134  00520 000417R         DEF .12 
0135*030        BREG_$B          !IF TLOG#128 THEN ERR
0136  00521 162405R         LDA .2,I
0137  00522 072420R         STA BREG
0138*031        IF BREG#128 THEN [MSS.(1001,2);GOTO FM.AB]
0139  00523 066420R         LDB BREG
0140  00524 056416R         CPB .11 
0141  00525 026533R         JMP DIR02 
0142  00526 016005X         JSB MSS.
0143  00527 000532R         DEF *+3 
0144  00530 000421R         DEF .14 
0145  00531 000411R         DEF .6
0146  00532 026006X         JMP FM.AB 
0147*032  DIR02:DS.DF_1                !SET IN CORE FLAG AND
0148  00533 002404  DIR02   CLA,INA 
0149  00534 072403R         STA DS.DF 
0150*033        RETURN           !RETURN
0151  00535 126455R         JMP D.RIO,I 
0152*034        END 
0153*035  ! 
0154*036  ! 
0155*037  DR.RD:SUBROUTINE(RCOD,DISID,BLK)FEXIT,GLOBAL
0156  00536 000000  RCOD    NOP 
0157  00537 000000  DISID   NOP 
0158  00540 000000  BLK     NOP 
0159  00541 000000  DR.RD   NOP 
0160  00542 016001X         JSB .ENTR 
0161  00543 000536R         DEF RCOD
0162*038  ! 
0163*039  !     THIS SUBROUTINE READS/WRITES THE DIRECTORY BLOCK
0164*040  !     SPECIFIED BY BLK FROM THE DISC IDENTIFIED 
0165*041  !     BY DISID.  FEXIT IS TAKEN IF THE
0166*042  !     DISC CANNOT BE FOUND OR IF THE END
0167*043  !     OF THE DIRECTORY IS REACHED.
0168*044  ! 







 PAGE 0005 #01


0169*045        IF DISID=DS.F1 THEN[IF RCOD=WRIT THEN[IFNOT BLK THEN\ 
0170*              GOTO DIRR2];GOTO DRRD1]
0171  00544 166537R         LDB DISID,I 
0172  00545 056404R         CPB DS.F1 
0173  00546 002001          RSS 
0174  00547 026560R         JMP .16 
0175  00550 166536R         LDB RCOD,I
0176  00551 056411R         CPB .6
0177  00552 002001          RSS 
0178  00553 026557R         JMP .15 
0179  00554 162540R         LDA BLK,I 
0180  00555 002003          SZA,RSS 
0181  00556 026676R         JMP DIRR2 
0182  00557 026725R .15     JMP DRRD1 
0183*046         D.RIO(READI) 
0184  00560 016455R .16     JSB D.RIO 
0185  00561 000563R         DEF *+2 
0186  00562 000405R         DEF .2
0187*047        IF DISID<0 THEN[DLU_-DISID;T_0], \
0188*          ELSE[DLU_DISID;T_2]
0189  00563 166537R         LDB DISID,I 
0190  00564 006021          SSB,RSS 
0191  00565 026574R         JMP .17 
0192  00566 166537R         LDB DISID,I 
0193  00567 007004          CMB,INB 
0194  00570 076422R         STB DLU 
0195  00571 002400          CLA 
0196  00572 072407R         STA T 
0197  00573 026600R         JMP .18 
0198  00574 162537R .17     LDA DISID,I 
0199  00575 072422R         STA DLU 
0200  00576 062411R         LDA .6
0201  00577 072407R         STA T 
0202*048         FOR I_0 TO 124 BY 4 DO[IF$(@D.SDR+I+T)=DLU\
0203*            THEN GOTO DIRR0] 
0204  00600 002400  .18     CLA 
0205  00601 072423R         STA I 
0206  00602 026606R         JMP .20 
0207  00603 062423R .19     LDA I 
0208  00604 042424R         ADA .22 
0209  00605 072423R         STA I 
0210  00606 066423R .20     LDB I 
0211  00607 046425R         ADB .23 
0212  00610 006021          SSB,RSS 
0213  00611 026621R         JMP EXITF 
0214  00612 062426R         LDA .24 
0215  00613 042423R         ADA I 
0216  00614 042407R         ADA T 
0217  00615 160000          LDA .A.,I 
0218  00616 052422R         CPA DLU 
0219  00617 026623R         JMP DIRR0 
0220  00620 026603R         JMP .19 
0221*049  EXITF:FRETURN 
0222  00621 002300  EXITF   CCE 
0223  00622 126541R         JMP DR.RD,I 
0224*050  ! 







 PAGE 0006 #01


0225*051  !     THE DISID HAS BEEN FOUND SO READ IN BLK0
0226*052  DIRR0:D.LB_[D.LT_[DS.LU_@D.SDR+I]+1]+1  ! SET POINTERS
0227  00623 062426R DIRR0   LDA .24 
0228  00624 042423R         ADA I 
0229  00625 072400R         STA DS.LU 
0230  00626 002004          INA 
0231  00627 072401R         STA D.LT
0232  00630 002004          INA 
0233  00631 072402R         STA D.LB
0234*053  DIRR6:TX_[IF $DS.LU=2 THEN 14 ,ELSE 0]
0235  00632 166400R DIRR6   LDB DS.LU,I 
0236  00633 056411R         CPB .6
0237  00634 002001          RSS 
0238  00635 026640R         JMP .25 
0239  00636 062430R         LDA .27 
0240  00637 026641R         JMP .26 
0241  00640 062417R .25     LDA .12 
0242  00641 072427R .26     STA TX
0243*054        IF RCOD=WRIT THEN[IFNOT BLK THEN GO TO DIRR2] 
0244  00642 166536R         LDB RCOD,I
0245  00643 056411R         CPB .6
0246  00644 002001          RSS 
0247  00645 026651R         JMP .28 
0248  00646 162540R         LDA BLK,I 
0249  00647 002003          SZA,RSS 
0250  00650 026676R         JMP DIRR2 
0251*055        EXEC(READI,PRC+$DS.LU ,PK.DR,128,$D.LT,TX)
0252  00651 062431R .28     LDA .29 
0253  00652 142400R         ADA DS.LU,I 
0254  00653 072432R         STA .30 
0255  00654 016004X         JSB EXEC
0256  00655 000664R         DEF *+7 
0257  00656 000405R         DEF .2
0258  00657 000432R         DEF .30 
0259  00660 000200R         DEF PK.DR 
0260  00661 000416R         DEF .11 
0261  00662 100401R         DEF D.LT,I
0262  00663 000427R         DEF TX
0263*056        DO[BREG_$B;IF BREG#128 THEN[MSS.(1001,$DS.LU);GOTO FM.AB
0264  00664 162405R         LDA .2,I
0265  00665 072420R         STA BREG
0266  00666 066420R         LDB BREG
0267  00667 056416R         CPB .11 
0268  00670 026676R         JMP DIRR2 
0269  00671 016005X         JSB MSS.
0270  00672 000675R         DEF *+3 
0271  00673 000421R         DEF .14 
0272  00674 100400R         DEF DS.LU,I 
0273  00675 026006X         JMP FM.AB 
0274*057  DIRR2:DS.F1_DISID            !SET UP DISC ID
0275  00676 162537R DIRR2   LDA DISID,I 
0276  00677 072404R         STA DS.F1 
0277*058        DISBL_0             !ALSO THE CURRENT BLOCK 
0278  00700 002400          CLA 
0279  00701 072433R         STA DISBL 
0280*059        DISNT_$(@PK.DR+8)  !AND # OF DIRECTORY TRACKS 







 PAGE 0007 #01


0281  00702 062435R         LDA .32 
0282  00703 042436R         ADA .33 
0283  00704 160000          LDA .A.,I 
0284  00705 072434R         STA DISNT 
0285*060        DS.SC_$(@PK.DR+6)      !SET NO. OF SECTORS
0286  00706 062435R         LDA .32 
0287  00707 042440R         ADA .34 
0288  00710 160000          LDA .A.,I 
0289  00711 072437R         STA DS.SC 
0290*061  ! 
0291*062        IF (BLK=0) AND (RCOD=READI) THEN GO TO EXIT 
0292  00712 166540R         LDB BLK,I 
0293  00713 162536R         LDA RCOD,I
0294  00714 052405R         CPA .2
0295  00715 003401          CCA,RSS 
0296  00716 002400          CLA 
0297  00717 006002          SZB 
0298  00720 006401          CLB,RSS 
0299  00721 007400          CCB 
0300  00722 010001          AND .B. 
0301  00723 002002          SZA 
0302  00724 027023R         JMP EXIT
0303*063  !     CALCULATE THE SECTOR ADDRESS
0304*064  DRRD1:TR_(BLK*14+TX)/DS.SC  !COMPUTE THE SECTOR ADDRESS 
0305  00725 162540R DRRD1   LDA BLK,I 
0306  00726 016002X         JSB .MPY
0307  00727 000430R         DEF .27 
0308  00730 042427R         ADA TX
0309  00731 006400          CLB 
0310  00732 002020          SSA 
0311  00733 007000          CMB 
0312  00734 016003X         JSB .DIV
0313  00735 000437R         DEF DS.SC 
0314  00736 072441R         STA TR
0315*065        T_$1    !SET IN T 
0316  00737 162405R         LDA .2,I
0317  00740 072407R         STA T 
0318*066        TR_TR/7   !RELATIVE TRACK TO TR 
0319  00741 062441R         LDA TR
0320  00742 006400          CLB 
0321  00743 002020          SSA 
0322  00744 007000          CMB 
0323  00745 016003X         JSB .DIV
0324  00746 000414R         DEF .9
0325  00747 072441R         STA TR
0326*067        IF (TR+DISNT)> -1 THEN GO TO EXITF
0327  00750 042434R         ADA DISNT 
0328  00751 042417R         ADA .12 
0329  00752 002021          SSA,RSS 
0330  00753 026621R         JMP EXITF 
0331*068        TR_$D.LT-TR   !SET THE TRACK ADDRESS IN TR
0332  00754 062441R         LDA TR
0333  00755 003004          CMA,INA 
0334  00756 142401R         ADA D.LT,I
0335  00757 072441R         STA TR
0336*069  ! 







 PAGE 0008 #01


0337*070  !     READ/WRITE
0338*071        IFNOT IFLG. THEN[IF RCOD =WRIT THEN[\ 
0339*              DR.SU(PK.DR,DISID,BLK,9);GOTO EXIT ]]!USE D.RTR IF NE
0340  00760 062007X         LDA IFLG. 
0341  00761 002002          SZA 
0342  00762 026776R         JMP DRRD4 
0343  00763 166536R         LDB RCOD,I
0344  00764 056411R         CPB .6
0345  00765 002001          RSS 
0346  00766 026776R         JMP DRRD4 
0347  00767 017031R         JSB DR.SU 
0348  00770 000775R         DEF *+5 
0349  00771 000200R         DEF PK.DR 
0350  00772 100537R         DEF DISID,I 
0351  00773 100540R         DEF BLK,I 
0352  00774 000443R         DEF .38 
0353  00775 027023R         JMP EXIT
0354*072  ! 
0355*073  DRRD4:EXEC(RCOD,PRC+$DS.LU,PK.DR,128,TR,T)
0356  00776 062431R DRRD4   LDA .29 
0357  00777 142400R         ADA DS.LU,I 
0358  01000 072432R         STA .30 
0359  01001 016004X         JSB EXEC
0360  01002 001011R         DEF *+7 
0361  01003 100536R         DEF RCOD,I
0362  01004 000432R         DEF .30 
0363  01005 000200R         DEF PK.DR 
0364  01006 000416R         DEF .11 
0365  01007 000441R         DEF TR
0366  01010 000407R         DEF T 
0367*074        BREG_$B       !TEST FOR ERRORS
0368  01011 162405R         LDA .2,I
0369  01012 072420R         STA BREG
0370*075        IF BREG#128 THEN[MSS.(1001,$DS.LU); GOTO FM.AB] 
0371  01013 066420R         LDB BREG
0372  01014 056416R         CPB .11 
0373  01015 027023R         JMP EXIT
0374  01016 016005X         JSB MSS.
0375  01017 001022R         DEF *+3 
0376  01020 000421R         DEF .14 
0377  01021 100400R         DEF DS.LU,I 
0378  01022 026006X         JMP FM.AB 
0379*076  EXIT: RETURN        !RETURN 
0380  01023 000040  EXIT    CLE 
0381  01024 126541R         JMP DR.RD,I 
0382*077        END 
0383*078  ! 
0384*079  DR.SU:SUBROUTINE(BUF,ID,RS,CD)
0385  01025 000000  BUF     NOP 
0386  01026 000000  ID      NOP 
0387  01027 000000  RS      NOP 
0388  01030 000000  CD      NOP 
0389  01031 000000  DR.SU   NOP 
0390  01032 016001X         JSB .ENTR 
0391  01033 001025R         DEF BUF 
0392*080  !     THIS ROUTINE WRITES ON A DIRECTORY SECTOR BY: 







 PAGE 0009 #01


0393*081  !     CALLING THE SYSTEM FOR ONE TRACK
0394*082  !     WRITING THE SECTOR THERE
0395*083  !     PASSING THE TRACK TO D.RTR
0396*084  !     RETURNING THE TRACK 
0397*085  ! 
0398*086        EXEC(4,1,TR,LU,FLG)!GET TRACK 
0399  01034 016004X         JSB EXEC
0400  01035 001043R         DEF *+6 
0401  01036 000424R         DEF .22 
0402  01037 000405R         DEF .2
0403  01040 000441R         DEF TR
0404  01041 000444R         DEF LU
0405  01042 000445R         DEF FLG 
0406*087  DRSU0:EXEC(2,LU,BUF,128,TR,0)!WRITE THE SECTOR
0407  01043 016004X DRSU0   JSB EXEC
0408  01044 001053R         DEF *+7 
0409  01045 000411R         DEF .6
0410  01046 000444R         DEF LU
0411  01047 101025R         DEF BUF,I 
0412  01050 000416R         DEF .11 
0413  01051 000441R         DEF TR
0414  01052 000417R         DEF .12 
0415*088        DO[BREG_$B; IF BREG#128 THEN[MSS.(1001,LU);GO TO FM.AB]]
0416  01053 162405R         LDA .2,I
0417  01054 072420R         STA BREG
0418  01055 066420R         LDB BREG
0419  01056 056416R         CPB .11 
0420  01057 027065R         JMP DRSU2 
0421  01060 016005X         JSB MSS.
0422  01061 001064R         DEF *+3 
0423  01062 000421R         DEF .14 
0424  01063 000444R         DEF LU
0425  01064 026006X         JMP FM.AB 
0426*089  ! 
0427*090  DRSU2:EXEC(9,D.,$XEQT,(TR-<6)+LU,ID,RS,CD)!CALL D.RTR TO WRITE
0428  01065 062441R DRSU2   LDA TR
0429  01066 001700          ALF 
0430  01067 001222          RAL,RAL 
0431  01070 042444R         ADA LU
0432  01071 072447R         STA .42 
0433  01072 016004X         JSB EXEC
0434  01073 001103R         DEF *+8 
0435  01074 000443R         DEF .38 
0436  01075 000010X         DEF D.
0437  01076 100446R         DEF .41,I 
0438  01077 000447R         DEF .42 
0439  01100 101026R         DEF ID,I
0440  01101 101027R         DEF RS,I
0441  01102 101030R         DEF CD,I
0442*091        DO[AREG_$A;IF AREG THEN GO TO DRSU2]!IF NOT SCHEDULED TR
0443  01103 162417R         LDA .12,I 
0444  01104 072450R         STA AREG
0445  01105 002002          SZA 
0446  01106 027065R         JMP DRSU2 
0447*092        EXEC(5,1,TR,LU)!RETURN THE TRACK
0448  01107 016004X         JSB EXEC







 PAGE 0010 #01


0449  01110 001115R         DEF *+5 
0450  01111 000451R         DEF .43 
0451  01112 000405R         DEF .2
0452  01113 000441R         DEF TR
0453  01114 000444R         DEF LU
0454*093        IF[DT_$$TEMP]THEN [MSS.(DT);GO TO FM.AB]!IF ERROR ABORT 
0455  01115 162453R         LDA .45,I 
0456  01116 160000          LDA .A.,I 
0457  01117 072452R         STA DT
0458  01120 002003          SZA,RSS 
0459  01121 027126R         JMP .44 
0460  01122 016005X         JSB MSS.
0461  01123 001125R         DEF *+2 
0462  01124 000452R         DEF DT
0463  01125 026006X         JMP FM.AB 
0464*094        RETURN
0465  01126 127031R .44     JMP DR.SU,I 
0466*095        END 
0467*096        END 
0468                        END 
**  NO ERRORS*



































$END ASMB     

*


ON,FMGR
:PU,FIL1
FMGR-006
:SA,LG,FIL1
:DU,FIL1,4
:PU,FIL1
:EX
 $END FMGR

*
--> Assemble 29013-60001_RTE_DVR31
ON,ASMB,99







 PAGE 0001


0001                ASMB,R,B,L,C
**  NO ERRORS*





























































 PAGE 0002 #01  DVR31  RTE MOVING HEAD DRIVER 


0001                ASMB,R,B,L,C
0003  00000               NAM DVR31,0 
0004                      ENT I.31,C.31 
0005                      EXT $IOUP 
0006                      EXT $TB31 
0007  00002         TBXX  EQU $TB31 



0009*     THIS DRIVER OPERATES UNDER THE CONTROL OF 
0010*  THE I/O CONTROL MODULE OF THE REAL-TIME EXECUTIVE. 
0011*  THIS DRIVER IS RESPONSIBLE FOR CONTROLLING DATA
0012*  TRANSMISSION WITH A MOVING HEAD TYPE DISC FILE.
0013* 
0014*     THIS DRIVER MAKES THE MOVING HEAD DISC APPEAR TO
0015*  HAVE 64 WORD SECTORS, HOWEVER SPEED IS IMPROVED
0016*  IF THE DRIVER DOES NOT HAVE TO DO THIS PROCESSING. 
0017* 
0018*  THIS IS DONE BY ALWAYS STARTING A READ REQUEST ON AN 
0019*  EVEN SECTOR AND BY ENDING WRITE REQUESTS WITHIN. 
0020*  ODD SECTORS. 
0021* 
0022* 
0023* ALL DATA TRANSFER IS DONE UNDER DMA CONTROL.
0024*     THE USER SPECIFIES TRACK AND SECTOR AND 
0025*     LENGTH OF EACH REQUEST. 
0026* 
0027* ERROR RETRY PROCEDURE :  THE DRIVER SEEKS 202 AND 
0028*      0 FOR EACH ERROR DETECTED. THE DRIVER THEN 
0029*      RETRIES THE OPERATION. THE USER MAY SPECIFY
0030*  CYCLIC CHECKING BE DONE ON WRITE REQUESTS
0031*  BY SETING SUBFUNCTION BIT 8 IN THE WRITE REQUEST.
0032*  A FAILED CYCLIC CHECK WILL CAUSE THE WRITE TO BE 
0033*  RETRIED UP TO TEN TIMES. 
0034* 
0035* 
0036*  SPECIAL SYSTEM REQUESTS:  A GROUP OF TRANSFERS 
0037*     MAY BE SPECIFIED BY AN INTERNAL SYSTEM
0038*     REQUEST (VIA <XSIO>). THIS REQUEST HAS THE
0039*     SPECIAL FORMAT: 
0040* 
0041*       (EQ T7,I) 'CONTAINS A POINTER TO A GROUP OF 
0042*       "TRIPLETS" CONTAINING THE BUFFER ADDRESS, 
0043*       LENGTH AND TRACK/SECTOR ADDRESS FOR EACH
0044*       TRANSFER. THE GROUP OF TRIPLETS IS
0045*       OPEN-ENDED AND IS TERMINATED BY A ZERO-WORD.
0046*       ALL TRANSFERS ARE MADE BEFORE A COMPLETION
0047*       RETURN TO <CIC> IS MADE.















 PAGE 0003 #01  DVR31  RTE MOVING HEAD DRIVER 


0049  00000 000000  RWSUB NOP           READ/WRITE    ROUTINE   ENTRY 
0050*                     E  =  0    WRITE
0051*                     E  =  1    READ 
0052* 
0053*                   B    =       BUFFER ADDRESS 
0054*                   A    =    -LENGTH IN WORDS



0056  00001 076137R       STB UBUF      SAVE BUFFER ADDRESS.
0057  00002 072136R       STA LN.N      SAVE LENGTH 
0058  00003 066131R       LDB TRACK     GET THE TRACK AND 
0059  00004 005727        BLF,BLF       COMBINE WITH
0060  00005 046223R       ADB UNIT      THE UNIT
0061  00006 056135R       CPB LTRUN     SAME AS IN LOCAL BUFFER?
0062  00007 066377R       LDB BM10      YES;  B_-8. 
0063  00010 062133R       LDA HDSC      CHECK THE HEAD SECTOR 
0064  00011 052134R       CPA LHDSC     SAME AS IN LOCAL BUFFER?
0065  00012 006004        INB           YES;  !_B+1 
0066  00013 062136R       LDA LN.N      UNDER 129 WORDS 
0067  00014 002041        SEZ,RSS       IF WRITE
0068  00015 026036R       JMP WRT1      GO DO WRITE TESTS 
0069  00016 042142R       ADA D128      REQUESTED?
0070  00017 056143R       CPB BM7      ALL CONDITIONS MET?
0071  00020 002020        SSA           MET?
0072  00021 026033R       JMP RD2       NO; GO READ 
0073  00022 062357R       LDA LBUFA     YES; SET FOR MOVE 
0074  00023 052137R       CPA UBUF      IF DATA IS WANTED IN LOCAL
0075  00024 026031R       JMP CLE       BUFFER CLE AND RETURN 
0076  00025 072376R       STA LBUFP     SET UP FOR
0077  00026 062136R       LDA LN.N      MOVE
0078  00027 066137R       LDB UBUF
0079  00030 016360R       JSB MOVE      AND MOVE DATA 
0080  00031 000040  CLE   CLE           SET E FOR CONTINUATION
0081  00032 126000R       JMP RWSUB,I   RETURN
0082  00031         B40   EQU CLE 



0084  00033 066137R RD2   LDB UBUF      READ; TO LOCAL
0085  00034 056357R       CPB LBUFA     BUFFER? 
0086  00035 072134R       STA LHDSC     SHOW LOCAL SECTOR BUFFER ENPTY
0087  00036 006021  WRT1  SSB,RSS       IF SAME TRACK 
0088  00037 026044R       JMP WRIT      DIFFERENT TRACK SKIP
0089  00040 042142R       ADA D128      AND REQUEST TO WRITE MORE THAN 1
0090  00041 002121        CLE,SSA,RSS   WORDS OR
0091  00042 056143R       CPB BM7       TO WRITE ON LOCAT SECTOR
0092  00043 076134R       STB LHDSC     YES; SET TO SHOW NONE IN
0093  00044 062131R WRIT  LDA TRACK     SET FOR SEEK
0094  00045 016144R       JSB SEEK      SEEK RECORD 
0095  00046 066140R       LDB RDCM      GET THE READ COMMAND
0096  00047 002241        SEZ,CME,RSS   READ? 
0097  00050 066141R       LDB WRCM      NO - USE WRITE COMMAND
0098  00051 046223R       ADB UNIT      SET UNIT BITS 
0099  00052 106700  CLCC5 CLC CMND      PRESET THE COMMAND CHANNEL
0100  00053 106600  OTBC2 OTB CMND      SEND COMMAND TO THE CONTROLLER







 PAGE 0004 #01  DVR31  RTE MOVING HEAD DRIVER 


0101  00054 066137R       LDB UBUF      GET BUFFER ADDRESS
0102  00055 002041        SEZ,RSS 
0103  00056 046221R       ADB ADDCM     AND SET DIRECTION BIT 
0104  00057 102100  STFD  STF DATA      SET UP THE INTERFACE
0105  00060 006020        SSB           FOR THE 
0106  00061 103700  STCD1 STC DATA,C    TRANSFER
0107  00062 062132R       LDA DMAC      GET THE DMA CONTROL WORD
0108  00063 000000  DMASW NOP           DMA SWITCH NOP IF CHAN #6 ELSE R
0109  00064 026101R       JMP CHAN6     CHANNEL SIX; GO DO IT.
0110  00065 102607        OTA 7         CHANNEL 7; SEND CONTROL WORD
0111  00066 106703        CLC 3         SET FOR BUFFER
0112  00067 106603        OTB 3         SEND BUFFER ADDRESS 
0113  00070 062136R       LDA LN.N      GET LENGTH
0114  00071 102703        STC 3         SET FOR LENGTH
0115  00072 102603        OTA 3         SEND IT.
0116  00073 103707        STC 7,C       START DMA 
0117  00074 103700  STCC1 STC CMND,C    START DISC
0118  00075 106707        CLC 7         INHIBIT DMA INTERRUPT 
0119  00076 016202R       JSB WAITI     GO WAIT FOR INTERRUPT 
0120  00077 102107        STF 7         FOURCE DMA COMPLETION 
0121  00100 026114R       JMP CHAN7     GO TO DO STATUS 

0123  00101 102606  CHAN6 OTA 6         CHANNEL SIX;
0124  00102 106702        CLC 2         SAME
0125  00103 106602        OTB 2         IDEA
0126  00104 062136R       LDA LN.N      AS
0127  00105 102702        STC 2         ABOVE.
0128  00106 102602        OTA 2 
0129  00107 103706        STC 6,C 
0130  00110 103700  STCC2 STC CMND,C
0131  00111 106706        CLC 6 
0132  00112 016202R       JSB WAITI 
0133  00113 102106        STF 6 

0135  00114 016224R CHAN7 JSB STAT      DO STATUS 
0136  00115 026044R       JMP WRIT      ERROR; RETRY
0137  00116 062137R       LDA UBUF      WAS XFER TO LOCAL BUFFER
0138  00117 052357R       CPA LBUFA     ? 
0139  00120 002001        RSS 
0140  00121 126000R       JMP RWSUB,I   NO; RETURN
0141  00122 062133R       LDA HDSC      UPDATE THE
0142  00123 072134R       STA LHDSC     LOCAL BUFFER
0143  00124 062131R       LDA TRACK     GET THE CURRENT TRACK 
0144  00125 001727        ALF,ALF       TO HIGH A 
0145  00126 042223R       ADA UNIT      COMBINE WITH UNIT 
0146  00127 072135R       STA LTRUN     SET TRACK/UNIT WORD 
0147  00130 126000R       JMP RWSUB,I   RETURN


0149  00131 000000  TRACK NOP 
0150  00132 120000  DMAC  OCT 120000
0151  00133 000000  HDSC  NOP 
0152  00134 177777  LHDSC OCT -1
0153  00135 000000  LTRUN NOP 
0154  00136 000000  LN.N  NOP 
0155  00137 000000  UBUF  NOP 







 PAGE 0005 #01  DVR31  RTE MOVING HEAD DRIVER 


0156  00140 020000  RDCM  OCT 20000     READ COMMAND
0157  00141 010000  WRCM  OCT 10000     WRITE COMMAND 
0158  00142 000200  D128  DEC 128 
0159  00143 177771  BM7   OCT -7



0161  00144 000000  SEEK  NOP           SEEK ROUTINE
0162*                                   1. SEEK RECORD WHOSE TRACK IS 
0163*                                      IN A, UNIT HDSC
0164*                                   2. KEEP LAST TRACK FLAG AND 
0165*                                      DO ADDRESS RECORD IF SAME
0166*                                      TRACK/UNIT.
0167  00145 106700  CLCC2 CLC CMND      CLEAR COMMAND.
0168  00146 102600  OTAD1 OTA DATA      SEND CYLINDER NO. 
0169  00147 103700  STCD2 STC DATA,C    TO DATA CARD. 
0170  00150 066223R       LDB UNIT      GET THE UNIT
0171  00151 046172R       ADB LSTB      ADD THE LAST SEEK TABLE ADDRESS 
0172  00152 076202R       STB WAITI     SAVE THE LAST SEEK ADDRESS
0173  00153 066171R       LDB SEEKC     GET THE SEEK COMMAND
0174  00154 152202R       CPA WAITI,I   SAME AS LAST TIME?
0175  00155 046221R       ADB ADDCM     YES ADD THE ADDRESS COMMAND BIT 
0176  00156 046223R       ADB UNIT      SET UNIT BITS 
0177  00157 106600  OTBC1 OTB CMND      SEND COMMAND
0178  00160 103700  STCC3 STC CMND,C    START SEEK
0179  00161 172202R       STA WAITI,I   SET LAST SEEK FLAG FOR NEXT TIME
0180  00162 172202R       STA WAITI,I   WAIT  3 MORE CYCLES 
0181  00163 066133R       LDB HDSC      GET THE HEAD AND SECTOR 
0182  00164 102300  SFSD1 SFS DATA      DATA READY? 
0183  00165 026337R       JMP NRERR     NO; TAKE NOT READY EXIT 
0184  00166 106600  OTBD1 OTB DATA      SEND HEAD/SECTOR INFO 
0185  00167 103700  STCD3 STC DATA,C    TELL CONTROLLER 
0186  00170 126144R       JMP SEEK,I    RETURN

0188  00171 030000  SEEKC OCT 30000     SEEK COMMAND
0189  00172 000173R LSTB  DEF *+1       ADDRESS OF LAST SEEK TABLE
0190  00173 177777        OCT -1,-1,-1,-1 
      00174 177777  
      00175 177777  
      00176 177777  


0192  00177 171774  IGNOR STA EQT15,I   ZERO TIME OUT 
0193  00200 016240R       JSB STATW     DO STATUS 
0194  00201 026207R       JMP IGNO2     IGNOR THE RESULT




0196*                              WAITI SUBROUTINE 
0197*                                A: SAVE E
0198*                                B. IF FIRST EXIT SEND ACCEPT CODE
0199*                                C. ELSE DO CONTINUATION RETURN 
0200*                                D. ON INTERRUPT SAVE RETURN
0201*                                    ADDRESS
0202*                                E. NOT INTERRUPT FOR NEXT ENTRY







 PAGE 0006 #01  DVR31  RTE MOVING HEAD DRIVER 


0203*                                F. RESTOR E AND RETURN 
0204  00202 000000  WAITI NOP 
0205  00203 005600        ELB           B_E 
0206  00204 076360R       STB MOVE      SAVE E
0207  00205 002400        CLA           SET A FOR OPERATION INITIATED 
0208  00206 072220R       STA RTNCD     SET RETURN CODE TO SHOW COMPLETI
0209  00207 036211R IGNO2 ISZ C.XX      STEP TO CONTINUATION RETURN 
0210  00210 126211R       JMP C.XX,I    RETURN TO RTIOC 



0212  00211 000000  C.XX  NOP           INTERRUPT ENTRY FROM RTIOC
0213  00212 161660        LDA EQT1,I    IF WORD 1 IS ZERO 
0214  00213 002003        SZA,RSS       THEN
0215  00214 026177R       JMP IGNOR     IGNORE INTERRUPT
0216  00215 066360R       LDB MOVE      RESTORE E-REG.
0217  00216 005500        ERB 
0218  00217 126202R       JMP WAITI,I   RETURN TO CONTINUE PROSSING 
0219  00220 000004  RTNCD OCT 4 
0220  00221 100000  ADDCM OCT 100000
0221  00222 000000  HEAD  NOP 
0222  00223 000000  UNIT  NOP 



0224*                                   STATUS CHECK SECTION
0225*         STATUS SHOULD BE RETURNED IMMEDIATELY.
0226*         IF IT IS NOT A NOT READY RETURN IS MODE 
0227*         THE ERROR COUNTER IS RESET FOR EACH CORRECT 
0228*         STATUS. 
0229*         THE STATUS WORD IN THE E QT IS SET AS FOLLOWS 
0230*                   0 - ANY ERROR 
0231*                   1 - DATA ERROR
0232*                   2 - SEEK CHECK (ADDRESS A NON-EXISTANT TRACK) 
0233*                   3 - FLAGGED CYLINDER (3 AND 4 IMPLIES DEFECTIVE)
0234*                   4 - ADDRESS ERROR (3 ALONE IMPLIES WRITE PRO.)
0235*                   5 - END OF TRACK (DATA TOO LONG)
0236*                   6 - NOT READY (POWER, SERVO, MECHANICAL)


0238*         A WRITE PROTECT OR FLAGED CYLINDER ERROR WILL 
0239*                   FOURCE A PARITY ERROR RETURN
0240*         NOT READY WILL FOURCE A NOT READY RETURN
0241* 
0242*         OTHER ERRORS WILL CAUSE THE STATUS ROUTINE TO 
0243*         RETRY THE TRANSFER UP TO TEN TIMES. 


0245  00224 000000  STAT  NOP 
0246  00225 016240R       JSB STATW     DO STATUS COMMAND 
0247  00226 072240R       STA STATW     SAVE THE STATUS 
0248  00227 012332R       AND B377      MASK TO 8 BITS
0249  00230 030001        IOR B         IN WITH THE NEW 
0250  00231 171664        STA EQT5,I    SET IT IN THE TABLE.
0251  00232 000030  B30   SLA,ALS       ANY ERRORS
0252  00233 026303R       JMP ANALZ     YES; GO ANALIZE 







 PAGE 0007 #01  DVR31  RTE MOVING HEAD DRIVER 


0253  00234 036224R       ISZ STAT      NO; 
0254  00235 066333R       LDB BM12
0255  00236 076334R       STB ERCTR     RESET COUNTER 
0256  00237 126224R       JMP STAT,I    RETURN


0258  00240 000000  STATW NOP           CORE STATUS ROUTINE 
0259  00241 106700  CLCC3 CLC CMND      CLEAR THE CHANNEL 
0260  00242 103700  STCD4 STC DATA,C    SET UP DATA CHANNEL.
0261  00243 066223R       LDB UNIT      SEND DRIVE UNIT 
0262  00244 102500  LIAC1 LIA CMND      GET THE ATTENTION BITS IF ANY 
0263  00245 002003        SZA,RSS       ANY SET ??
0264  00246 026254R       JMP OTBC3     NO GO USE THE CURRENT UNIT
0265  00247 006400        CLB           YES  SET TO FIND IT 
0266  00250 000033  ULOOP SLA,RAR       TEST THE BITS 
0267  00251 026254R       JMP OTBC3     FOUND ONE GO DO IT
0268  00252 006004        INB           STEP B AND
0269  00253 026250R       JMP ULOOP     GO TRY AGAIN

0271  00254 106600  OTBC3 OTB CMND      TO COMMAND CHANNEL. 
0272  00255 103700  STCC5 STC CMND,C    START STATUS. 
0273  00256 161664        LDA EQT5,I    GET STATUS WORD 
0274  00257 012331R       AND B1774     OUT WITH THE OLD
0275  00260 070001        STA B         SAVE INB
0276  00261 102300  SFSD2 SFS DATA      IF NOT BACK 
0277  00262 026337R       JMP NRERR     THEN GO TO NOT READY. 
0278  00263 102500  LIAD1 LIA DATA      GET STATUS. 
0279  00264 001221        RAL,ARS       SET 15 IF 14 IS SET 
0280  00265 002021        SSA,RSS       FIRST STATUS??
0281  00266 126240R       JMP STATW,I   RETURN TO ANALIZE STATUS

0283  00267 072134R       STA LHDSC     SHOW NO SECTOR IN CORE
0284  00270 062336R       LDA EQT#      GET THE EQT NUMBER TO A 
0285  00271 066645R       LDB I.XX      WAS THE DRIVER DOWNED BY US?? 
0286  00272 006003        SZB,RSS       YES IF ZERO SO
0287  00273 026001X       JMP $IOUP     GO UP IT
0288  00274 066220R       LDB RTNCD     WHO HAS CONTROL?
0289  00275 006003        SZB,RSS       IGNORE IF C.XX ENTRY
0290  00276 026207R       JMP IGNO2     ELSE IGNOR THE INTERRUPT
0291  00277 062171R       LDA SEEKC     ELSE SET UP CONTROLER FOR 
0292  00300 102600  OTAC2 OTA CMND      ANOTHER STATUS
0293  00301 103700  STCC6 STC CMND,C    AND THEN
0294  00302 026241R       JMP CLCC3     GO REDO THE STATUS


0296  00303 066240R ANALZ LDB STATW     GET THE SAVED STATUS WORD 
0297  00304 005324        RBR,BLR       CLEAR SIGN AND LEAST BITS 
0298  00305 056605R       CPB B10       IF WRITE PROTECT
0299  00306 002001        RSS           OR
0300  00307 056232R       CPB B30       BAD CYLINDER FLAG SET 
0301  00310 026352R       JMP PARER     ISSUE PARITY ERROR
0302  00311 101106        RRR 6         IF NOT
0303  00312 004010        SLB           READY?
0304  00313 026337R       JMP NRERR     ISSUE NOT READY ERROR.









 PAGE 0008 #01  DVR31  RTE MOVING HEAD DRIVER 


0306*     IT MAY BE POSSIBLE TO RECOVER 
0307*     SO RETRY


0309  00314 036334R       ISZ ERCTR     STEP COUNT
0310  00315 002201        CME,RSS       IF NOT LAST RETRY SKIP
0311  00316 026352R       JMP PARER     ELSE ISSUE PARITY ERROR 
0312  00317 062335R       LDA D202      SEEK
0313  00320 016144R       JSB SEEK      202 
0314  00321 016202R       JSB WAITI     GO WAIT FOR INTERRUPT 
0315  00322 016240R       JSB STATW     DO CORE STATUS REQUEST
0316  00323 002400        CLA 
0317  00324 016144R       JSB SEEK      SEEK 0
0318  00325 016202R       JSB WAITI     GO WAIT FOR INTERRUPT 
0319  00326 016240R       JSB STATW     DO CORE STATUS REQUEST TO CLEAR 
0320  00327 126224R       JMP STAT,I    TAKE RETRY EXIT.

0322  00330 000400  B400  OCT 400 
0323  00331 177400  B1774 OCT 177400
0324  00332 000377  B377  OCT 377 
0325  00333 177766  BM12  OCT -12 
0326  00334 177766  ERCTR OCT -12 
0327  00335 000312  D202  DEC 202 
0328  00336 000001  EQT#  DEC 1         SET ON FIRST ENTRY


0330  00337 002404  NRERR CLA,INA       NOT READY -SET A=1 -POST INTERRU
0331  00340 066220R       LDB RTNCD     GET THE RETURN CODE 
0332  00341 006003        SZB,RSS       IF ZERO DO COMPLETION EXIT
0333  00342 026353R       JMP COMEX     GO DO COMPLETION EXIT 
0334  00343 161665        LDA EQT6,I    GET THE REQUEST CODE
0335  00344 012355R       AND B140.     MASK BITS 8,9 
0336  00345 006400        CLB           SET B FOR POSSIBLE IMEADIATE RET
0337  00346 002003        SZA,RSS       IF 8,9 =0 THEN NOT SYSTEM DISC S
0338  00347 026731R       JMP NRRTN     DO IMEADIATE RETURN TO AVOID SET
0339  00350 036211R       ISZ C.XX      ELSE STEP C.XX TO GET RETURN FOR
0340  00351 076645R       STB I.XX      CLEAR I.XX (BEEN HERE FLAG) 


0342  00352 062356R PARER LDA B3        A_3 ERROR RETURN
0343  00353 165670  COMEX LDB EQT9,I    COMPLETION RETURN 
0344  00354 126211R       JMP C.XX,I    B = TRACK OR TLOG.


0346  00355 101400  B140. OCT 101400
0347  00356 000003  B3    OCT 3 
0348  00357 000771R LBUFA DEF BUF 
0349  00357         BUFA  EQU LBUFA 


0351  00360 000000  MOVE  NOP           MOVE SUBROUTINE 
0352*                                   ENTER WITH A = -COUNT 
0353*                                              B = DESTINATION/SOURC
0354*                                              E = 1 FROM LOCAL BUF 
0355*                                              E = 0 TO LOCAL BUF 
0356*                                              LBUFP = LOCAL BUFFER 







 PAGE 0009 #01  DVR31  RTE MOVING HEAD DRIVER 


0357*                                                      FOR THIS MOVE
0358  00361 072375R       STA COUNT     SET COUNTER 
0359  00362 062376R       LDA LBUFP     GET LOCAL BUFFER ADDRESS
0360  00363 002040        SEZ           IF FROM LOCAL BUFFER
0361  00364 101100        SWP           SWAP THE ADDRESSES. 
0362  00365 072376R       STA LBUFP     SET THE TO ADDRESS. 
0363  00366 160001  MOVE1 LDA B,I       FETCH A WORD. 
0364  00367 172376R       STA LBUFP,I   STORE A WORD. 
0365  00370 006004        INB           STEP FROM POINTER.
0366  00371 036376R       ISZ LBUFP     STEP TO POINTER.
0367  00372 036375R       ISZ COUNT     STEP COUNT; MORE? 
0368  00373 026366R       JMP MOVE1     YES; DO NEXT ONE. 
0369  00374 126360R       JMP MOVE,I    NO; RETURN. 


0371  00375 000000  COUNT NOP 
0372  00376 000000  LBUFP NOP 














































 PAGE 0010 #01  DVR31  RTE MOVING HEAD DRIVER 


0374*     THE TRIPLET PROCESSOR TAKE SYSTEM OR USER 
0375*     GENERATED TRIPLETS AND TRANSLATES THEM
0376*     INTO READ, WRITE, AND MOVE REQUESTS 
0377* 
0378*     CALLING SEQUENCE: 
0379* 
0380*     EQT8   NEG REQUEST LENGTH IN WORDS
0381*     EQT9   SYSTEM TRACK NUMBER (NOT ACTUAL) 
0382*     EQT10  SYSTEM SECTOR NUMBER (NOT ACTUAL)
0383*     EQT11  REQUEST BUFFER ADDRESS. (SIGN BIT SET FOR READ)
0384* 
0385* 
0386*     $TB30  IS UESE TO TRANSLATE THE SYSTEM TRACK TO 
0387*            AN ACTUAL UNIT AND CYLINDER NUMBER.
0388*            THE FORMAT IS: 
0389* 
0390*            WORDS 1 TO 8 THE NUMBER OF TRACKS ON 
0391*                              UNITS 0-7
0392*            WORDS 9 TO 16 THE FIRST TRACK ON UNITS 
0393*                                      0-7
0394*     CONSTANTS FOR TIPLT 
0395* 
0396  00377 177770  BM10  OCT -10 
0397  00400 000002X TB31A DEF TBXX
0398  00401 000000  MXSIZ NOP           MAX NO OF WORDS PER TRACK 




0400  00402 104200  TIPLT DLD EQT9,I    GET TRACK AND SECTOR ADDRESSES
      00403 101670  
0401  00404 002021        SSA,RSS       IF EITHER IS NEGATIVE 
0402  00405 006020        SSB           THEN
0403  00406 026643R       JMP REJCT     GO REJECT THE CALL
0404  00407 100106        RRL 6         SECTOR * 64 
0405  00410 007004        CMB,INB       SET NEGATIVE
0406  00411 145667        ADB EQT8,I    ADD THE NO OF WORDS IN XFER 
0407  00412 046401R       ADB MXSIZ     SUBTRACT FROM MAX WORD COUNT
0408  00413 006020        SSB           TRACK WRAP AROUND?
0409  00414 026643R       JMP REJCT     YES GO REJECT THE REQUEST 
0410  00415 062333R       LDA BM12      SET ERROR COUNTER 
0411  00416 072632R       STA TPER      FOR 10 TRIES
0412  00417 062635R TIPRT LDA SUBCH     GET THE SUBCHANNEL
0413  00420 042400R       ADA TB31A     ADD THE TABLE ADDRESS 
0414  00421 164000        LDB A,I       GET THE FIRST TRACK TO B
0415  00422 145670        ADB EQT9,I    ADD THE ADDRESSED TRACK 
0416  00423 076131R       STB TRACK     SAVE THE TRACK ADDRESS
0417  00424 042605R       ADA B10       STEP TO THE NUMBER OF TRACKS ADD
0418  00425 164000        LDB A,I       GET THE NUMBER OF TRACKS
0419  00426 060001        LDA B         SET IN B FOR POSSIBLE REJECT
0420  00427 003004        CMA,INA       NEGATE THE NUMBER 
0421  00430 141670        ADA EQT9,I    ADD THE ADDRESSED TRACK NUMBER
0422  00431 002020        SSA           IF POSITIVE THE ERROR 
0423  00432 026437R       JMP *+5       NEGATIVE SO OK - CONTINUE 
0424  00433 161664        LDA EQT5,I    SET THE 
0425  00434 032031R       IOR B40       END OF TAPE BIT IN THE STATUS 







 PAGE 0011 #01  DVR31  RTE MOVING HEAD DRIVER 


0426  00435 171664        STA EQT5,I    EQT STATUS WORD 
0427  00436 026731R       JMP DONE+3    EXIT ERROR
0428  00437 165667        LDB EQT8,I    BRING IN THE
0429  00440 076630R       STB TPLN      LENGTH
0430  00441 165672        LDB EQT11,I   AND THE 
0431  00442 076631R       STB TPBUF     BUFFER ADDRESS
0432  00443 066635R       LDB SUBCH     GET THE SUBCHANNEL
0433  00444 002500        CLA,CLE       SET A FOR AN ODD SUBCHANNEL 
0434  00445 006011        SLB,RSS       IF EVEN 
0435  00446 002004        INA           RESET A FOR HEAD 2
0436  00447 165671        LDB EQT10,I   GET THE 
0437  00450 005100        BRS           ACTUAL SECTOR 
0438  00451 076360R       STB MOVE      YES SAVE
0439  00452 046641R       ADB NSEC      IS IT ON THE ODD
0440  00453 006021        SSB,RSS       SIDE OF THE DISC
0441  00454 076360R       STB MOVE      YES RESET 
0442  00455 001600        ELA           MOVE IN THE SECOND HEAD BIT 
0443  00456 001727        ALF,ALF       ROTATE HEAD TO BITS 8-9.
0444  00457 072222R       STA HEAD      SET HEAD WORD 
0445  00460 042360R       ADA MOVE      ADD THE SECTOR
0446  00461 072133R       STA HDSC      SAVE FOR ADDRESS
0447  00462 072634R       STA CHDSC     AND FOR CYCLICK CHECK.


0449  00463 062630R       LDA TPLN     PRESET A FOR EVEN SECTOR 
0450  00464 165671        LDB EQT10,I   GET SECTOR
0451  00465 006311        CCE,SLB,RSS   IF EVEN 
0452  00466 026536R       JMP TPNXT     JUMP
0453  00467 066357R       LDB BUFA      ELSE READ 
0454  00470 062637R       LDA DM128     128 WORDS TO
0455  00471 016000R       JSB RWSUB     LOCAL BUFFER
0456  00472 062627R       LDA HLBUF     SET MOVE BUFFER 
0457  00473 072376R       STA LBUFP     ADDRESS 
0458  00474 066630R       LDB TPLN      GET LENGTH
0459  00475 046636R       ADB B100      LESS 64 
0460  00476 062630R       LDA TPLN      USE MIN OF REQUEST
0461  00477 006120        CLE,SSB                AND
0462  00500 062640R       LDA BM100                  6 4
0463  00501 066631R       LDB TPBUF     GET ADDRESS 
0464  00502 005623        ELB,RBR       CLEAR SIGN & SET READ/WRITE 
0465  00503 016360R       JSB MOVE      GO MOVE THE WORDS.
0466  00504 062637R       LDA DM128     SET TO WRITE
0467  00505 066357R       LDB BUFA      THE SECTOR
0468  00506 002041        SEZ,RSS       WRITE REQUEST?
0469  00507 016000R       JSB RWSUB     YES; WRITE IT OUT.
0470  00510 062640R       LDA BM100     UP DATE POINTERS
0471  00511 003004  TPA   CMA,INA       TO REFLECT
0472  00512 072360R       STA MOVE      LAST TRANSFER 
0473  00513 042631R       ADA TPBUF       ADJUST BUFFER ADDRESS 
0474  00514 072631R       STA TPBUF 
0475  00515 062360R       LDA MOVE
0476  00516 042636R       ADA B100      ROUND UP THE COUNT
0477  00517 006400        CLB           CLEAR B FOR SHIFT 
0478  00520 101047        LSR 7         SHIFT TO GET SECTOR COUNT 
0479  00521 042133R       ADA HDSC      ADD TO THE CURRENT SECTOR 
0480  00522 072133R       STA HDSC      SAVE FOR NEXT ACCESS







 PAGE 0012 #01  DVR31  RTE MOVING HEAD DRIVER 


0481  00523 012332R       AND B377      MASK TO SECTOR ONLY 
0482  00524 042641R       ADA NSEC      SIDE TWO? 
0483  00525 032222R       IOR HEAD      SET UP THE HEAD BITS
0484  00526 032330R       IOR B400      SET SIDE TWO BIT
0485  00527 002021        SSA,RSS       IF SIDE TWO 
0486  00530 072133R       STA HDSC      RESET THE HEAD SECTOR ADDRESS 
0487  00531 062630R       LDA TPLN      GET THE LENGTH
0488  00532 042360R       ADA MOVE      SUBTRACT THE NUMBER XFERED
0489  00533 002121        CLE,SSA,RSS   IF NONE LEFT CHECK
0490  00534 026571R       JMP CYCK      FOR CYCLIC CHECK
0491  00535 072630R       STA TPLN      SAVE LENGTH 
0492  00536 066631R TPNXT LDB TPBUF    GET BUFFER ADDRESS 
0493  00537 006120        CLE,SSB       READ? 
0494  00540 026553R       JMP TPRD      YES; GO TRANSFER REST OF RECORD 
0495  00541 042636R       ADA B100      NO; MORE THAN 64 WORDS LEFT 
0496  00542 002321        CCE,SSA,RSS   ? 
0497  00543 026557R       JMP TPB       NO; GO TRANSFER LAST WORDS
0498  00544 062630R       LDA TPLN      YES; TEST FOR MORE THAN LESS THA
0499  00545 012636R       AND B100      64 WORDS MOD 128 LEFT 
0500  00546 070001        STA B         SAVE FLAG 
0501  00547 042630R       ADA TPLN      GET LENGTH TO SET FOR X-FER 
0502  00550 006102        CLE,SZB       IF LESS THAN 64 MOD 128 LEFT
0503  00551 012637R       AND DM128    DELETE EXCELL OVER EVEN SECTORS
0504  00552 066631R       LDB TPBUF     GET BUFFER ADDRESS
0505  00553 005623  TPRD  ELB,RBR       SET READ/WRITE FLAG 
0506  00554 016000R       JSB RWSUB     DO THE TRANSFER.
0507  00555 062136R       LDA LN.N      GET THE LENGTH AND
0508  00556 026511R       JMP TPA       GO UP DATE THE POINTERS 


0510  00557 062637R TPB   LDA DM128    WRITE OF LAST 64 WORD IN 
0511  00560 066357R       LDB BUFA      FIRST HALF OF SECTOR
0512  00561 076376R       STB LBUFP     SET UP
0513  00562 016000R       JSB RWSUB     AND READ THE SECTOR 
0514  00563 062630R       LDA TPLN      SET UP TO 
0515  00564 066631R       LDB TPBUF     MOVE THE USER WORDS 
0516  00565 016360R       JSB MOVE      GO MOVE TO THE BUFFER 
0517  00566 062637R       LDA DM128     WRITE THE BUFFER OUT AGAIN. 
0518  00567 066357R       LDB BUFA      AGAIN 
0519  00570 016000R       JSB RWSUB 



0521  00571 161665  CYCK  LDA EQT6,I    REQUEST FOR CYCLIC
0522  00572 012721R       AND B2002     CHECK 
0523  00573 052721R       CPA B2002     AND WRITE 
0524  00574 002001        RSS           YES  SKIP 
0525  00575 026723R       JMP EOXF      NO- RETURN
0526  00576 062634R       LDA CHDSC     SET THE HEAD/SECTOR FOR 
0527  00577 072133R       STA HDSC      SEEK
0528  00600 062131R       LDA TRACK     GET TRACK FOR SEEK
0529  00601 016144R       JSB SEEK
0530  00602 165667        LDB EQT8,I    CALCULATE THE 
0531  00603 007004        CMB,INB       NUMBER
0532  00604 161671        LDA EQT10,I   OF
0533  00605 000010  B10   SLA           SECTORS TRANSFERED







 PAGE 0013 #01  DVR31  RTE MOVING HEAD DRIVER 


0534  00606 046636R       ADB B100      START ODD - ADD 64 TO COUNT 
0535  00607 046770R       ADB B177      ROUND UP TO NEXT HIGHER SECTOR
0536  00610 101047        LSR 7         SECTOR COUNT TO B 
0537  00611 062633R       LDA CHCKC     GET CHECK COMMAND 
0538  00612 042223R       ADA UNIT      SET UNIT BITS 
0539  00613 106700  CLCC4 CLC CMND      PRESET THE COMMAND CHANNEL
0540  00614 106600  OTBD2 OTB DATA      SEND SECTOR COUNT 
0541  00615 103700  STCD5 STC DATA,C   TO DATA
0542  00616 102600  OTAC1 OTA CMND      SEND COMMAND
0543  00617 103700  STCC4 STC CMND,C     START CHECK
0544  00620 016202R       JSB WAITI     GO WAIT 
0545  00621 016224R       JSB STAT      DO STATUS 
0546  00622 002001  RSS   RSS           BAD - SKIP
0547  00623 026723R       JMP EOXF      O-K RETURN
0548  00624 036632R       ISZ TPER      STEP COUNTER
0549  00625 026417R       JMP TIPRT     TOO MANY? - NO TRY AGAIN
0550  00626 026352R       JMP PARER     YES; TAKE PARITY ERROR EXIT.



0552  00627 001071R HLBUF DEF BUF+64
0553  00630 000000  TPLN  NOP 
0554  00631 000000  TPBUF NOP 
0555  00632 000000  TPER  NOP 
0556  00633 060000  CHCKC OCT 60000     CYCLIC CHECK COMMAND
0557  00634 000000  CHDSC NOP 
0558  00635 000000  SUBCH NOP 
0559  00636 000100  B100  OCT 100 
0560  00637 177600  DM128 DEC -128
0561  00640 177700  BM100 OCT -100
0562  00641 000000  NSEC  NOP 
0563  00642 000007  B7    OCT 7 


0565  00643 002404  REJCT CLA,INA       ILLEGAL CALL SO REJECT
0566  00644 126645R       JMP I.XX,I    IT



























 PAGE 0014 #01  DVR31  RTE MOVING HEAD DRIVER 


0568*                   INITIATOR ENTRY POINT 
0569  00645 000000  I.XX  NOP 
0570  00646 026771R       JMP CONFI     CONFI CLEARS THIS WORD
0571  00647 062622R       LDA RSS       SET UP
0572  00650 065673        LDB CHAN      THE DMA 
0573  00651 006011        SLB,RSS       CHANNEL 
0574  00652 002400        CLA           SWITCH
0575  00653 072063R       STA DMASW     NOP IF CHANNEL 6, RSS IF 7. 
0576  00654 003400        CCA 
0577  00655 042645R       ADA I.XX      SET RETURN
0578  00656 072211R       STA C.XX      ADDRESS 
0579  00657 062767R       LDA B4        SET THE RETURN CODE 
0580  00660 072220R       STA RTNCD 
0581  00661 161663        LDA EQT4,I    GET THE UNIT
0582  00662 101106        RRR 6         FROM THE EQT
0583  00663 012642R       AND B7        MASK TO UNIT NUMBER 
0584  00664 072635R       STA SUBCH     SET THE SUBCHANNEL
0585  00665 000065        CLE,ERA       SHIFT TO THE UNIT 
0586  00666 072223R       STA UNIT      SET THE UNIT
0587  00667 016240R       JSB STATW     CHECK TO MAKE SURE DISC IS READY
0588  00670 101106        RRR 6         SHIFT THE READY BIT 
0589  00671 000010        SLA           READY?? 
0590  00672 026337R       JMP NRERR     NO GO TAKE NOT READY EXIT 
0591  00673 161665        LDA EQT6,I    GET AND ISOLATE 
0592  00674 012356R       AND B3        THE REQUEST 
0593  00675 052356R       CPA B3        CONTROL?
0594  00676 002405        CLA,INA,RSS   YES; SET FOR REJECT AND SKIP
0595  00677 026702R       JMP OK        NO; CONTINUE
0596  00700 002004        INA           A_2 CONTROL REJECT
0597  00701 126645R       JMP I.XX,I    RETURN. 

0599  00702 062333R OK    LDA BM12      RESET 
0600  00703 072334R       STA ERCTR     THE ERROR COUNTER 
0601  00704 161665        LDA EQT6,I    GET THE REQUEST CODE
0602  00705 165666  SYS2  LDB EQT7,I    GET BUFFER ADDRESS
0603  00706 001366        RAR,CLE,ELA   SET READ WRITE BIT INTO E.
0604  00707 002020        SSA           SYSTEM REQUEST? 
0605  00710 026735R       JMP SYS       YES; GO DO SYSTEM THING.
0606  00711 005225  LNTS  RBL,ERB       SET SIGN OF BUFFER ADDRESS TO SH
0607  00712 175672        STB EQT11,I   AND SAVE FOR TIPLT CALL 
0608  00713 161667        LDA EQT8,I    GET THE LENGTH. 
0609  00714 171771        STA EQT12,I   SAVE FOR EXIT 
0610  00715 002021        SSA,RSS       MAKE NEGATIVE 
0611  00716 003005        CMA,INA,RSS    WORDS
0612  00717 001100        ARS           AND 
0613  00720 171667        STA EQT8,I    SAVE
0614  00721 002002  B2002 SZA           IF ZERO SKIP CALL 
0615  00722 026402R       JMP TIPLT     CALL FOR X-FER
0616  00723 161665  EOXF  LDA EQT6,I    GET REQUEST CODE
0617  00724 002020        SSA           SYSTEM
0618  00725 026705R       JMP SYS2      YES; GO GET NEXT TRIPLET
0619  00726 165771  DONE  LDB EQT12,I   NO; DONE; GET TLOG
0620  00727 006320        CCE,SSB       SET POSITIVE
0621  00730 007004        CMB,INB       IF NEG. 
0622  00731 062220R NRRTN LDA RTNCD     GET RETURN CODE (0 OR 4)
0623  00732 002002        SZA           IF 4







 PAGE 0015 #01  DVR31  RTE MOVING HEAD DRIVER 


0624  00733 126645R       JMP I.XX,I    RETURN VIA I.XX 
0625  00734 126211R       JMP C.XX,I    ELSE C.XX 


0627  00735 076360R SYS   STB MOVE      SYSTEM TRIPLET PROCESSOR
0628  00736 006004        INB           STEP TO THE ADDRESS OF
0629  00737 160001        LDA B,I       LENGTH AND STORE IT IN
0630  00740 171667        STA EQT8,I    THE EQUIPMENT TABLE 
0631  00741 006004        INB           STEP TO THE DISC ADDRESS
0632  00742 160001        LDA B,I       GET THE ADDRESS 
0633  00743 012770R       AND B177      MASK THE SECTOR AND 
0634  00744 171671        STA EQT10,I   AND SET IT IN THE EQT 
0635  00745 120001        XOR B,I       GET THE TRACK ADDRESS 
0636  00746 001727        ALF,ALF       ROTATE TO LOW A 
0637  00747 001200        RAL 
0638  00750 171670        STA EQT9,I    AND SET IN THE EQT
0639  00751 006004        INB           STEP TO ADDRESS OF NEXT TRIPLET 
0640  00752 175666        STB EQT7,I    AND SET IT IN THE EQT 
0641  00753 166360R       LDB MOVE,I    GET THE BUFFER ADDRESS
0642  00754 006002        SZB           IF ZERO THEN DONE 
0643  00755 026711R       JMP LNTS      GO DO THE TRANSFER. 


0645  00756 062220R       LDA RTNCD   GET THE RETURN CODE 
0646  00757 002003        SZA,RSS       IF ZERO-
0647  00760 026726R       JMP DONE      GO RETURN 
0648  00761 062223R       LDA UNIT      GET THE 
0649  00762 042172R       ADA LSTB      LAST TRACK SEEKED ON
0650  00763 160000        LDA A,I       THE CURRENT UNIT AND
0651  00764 016144R       JSB SEEK      SEEK SAME CYL.
0652  00765 016202R       JSB WAITI     GO WAIT FOR A INTERRUPT 
0653  00766 026726R       JMP DONE      EXIT


0655  00767 000004  B4    OCT 4 
0656  00770 000177  B177  OCT 177 



























 PAGE 0016 #01  DVR31  RTE MOVING HEAD DRIVER 


0658  00771 000000  BUF   BSS 128 
0659  01171         LN    EQU * 
0660  00771               ORG BUF 
0661  00771 070001  CONFI STA B         SAVE THE SELECT CODE
0662  00772 033101R       IOR OTA       CONFIGURE 
0663  00773 072146R       STA OTAD1     ALL 
0664  00774 023104R       XOR B4000     THE 
0665  00775 072166R       STA OTBD1     I/O 
0666  00776 072614R       STA OTBD2     INSTRUCTIONS
0667  00777 023105R       XOR B5100 
0668  01000 072061R       STA STCD1 
0669  01001 072147R       STA STCD2 
0670  01002 072167R       STA STCD3 
0671  01003 072242R       STA STCD4 
0672  01004 072615R       STA STCD5 
0673  01005 023106R       XOR B5000 
0674  01006 170001        STA B,I 
0675  01007 023107R       XOR B4400 
0676  01010 072164R       STA SFSD1 
0677  01011 072261R       STA SFSD2 
0678  01012 023110R       XOR B0600 
0679  01013 072263R       STA LIAD1 
0680  01014 023112R       XOR B0400 
0681  01015 072057R       STA STFD
0682  01016 023102R       XOR B221. 
0683  01017 072132R       STA DMAC
0684  01020 002004        INA           NOW THE COMMAND CHANNEL 
0685  01021 023103R       XOR B226. 
0686  01022 072616R       STA OTAC1 
0687  01023 072300R       STA OTAC2 
0688  01024 023104R       XOR B4000 
0689  01025 072157R       STA OTBC1 
0690  01026 072053R       STA OTBC2 
0691  01027 072254R       STA OTBC3 
0692  01030 023105R       XOR B5100 
0693  01031 072074R       STA STCC1 
0694  01032 072110R       STA STCC2 
0695  01033 072160R       STA STCC3 
0696  01034 072617R       STA STCC4 
0697  01035 072255R       STA STCC5 
0698  01036 072301R       STA STCC6 
0699  01037 023106R       XOR B5000 
0700  01040 072145R       STA CLCC2 
0701  01041 072241R       STA CLCC3 
0702  01042 072613R       STA CLCC4 
0703  01043 072052R       STA CLCC5 
0704  01044 023113R       XOR B4200 
0705  01045 072244R       STA LIAC1 
0706  01046 006400        CLB           FIND
0707  01047 061650        LDA EQTA      THE EQT 
0708  01050 003004        CMA,INA       NUMBER
0709  01051 041660        ADA EQT1      FOR THE UP REQUEST
0710  01052 100400        DIV .15 
      01053 001114R 
0711  01054 002004        INA           AND 
0712  01055 072336R       STA EQT#      SET IT







 PAGE 0017 #01  DVR31  RTE MOVING HEAD DRIVER 


0713  01056 002400        CLA           CLEAR THE JUMP TO 
0714  01057 072646R       STA I.XX+1    THIS ROUTINE
0715  01060 063100R       LDA TB31B     GET THE ADDRESS OF THE TABLE ADD
0716  01061 160000        LDA A,I       GET THE ADDRESS 
0717  01062 001275        RAL,CLE,SLA,ERA 
0718  01063 027061R       JMP *-2       STIL INDIRECT GO GET NEXT LEVEL 
0719  01064 164000        LDB A,I       GET THE FIRST WORD OF THE TABLE 
0720  01065 007025        CMB,SSB,INB,RSS  SET POSITIVE IF NEG  SKIP IF 
0721  01066 002005        INA,RSS       IT WAS NEGATIVE SO STEP THE TABL
0722  01067 065757        LDB SECTR     IT WAS POSITIVE SO USE THE BASE 
0723  01070 072400R       STA TB31A     SET THE TABLE ADDRESS 
0724  01071 005121        BRS,BRS       ADDJUST TO NO. SECTORS PER SIDE 
0725  01072 007004        CMB,INB       SET NEGATIVE AND
0726  01073 076641R       STB NSEC      SET FOR THE DRIVER
0727  01074 007004        CMB,INB       FIND THE
0728  01075 005727        BLF,BLF       MAX NO
0729  01076 076401R       STB MXSIZ     OF WORDS PER TRACK AND SET
0730  01077 026646R       JMP I.XX+1
0731  01100 000400R TB31B DEF TB31A     ADDRESS OF THE TABLE ADDRESS
0732  01101 102600  OTA   OTA 0 
0733  01102 022100  B221. OCT 22100 
0734  01103 022600  B226. OCT 22600 
0735  01104 004000  B4000 OCT  4000 
0736  01105 005100  B5100 OCT  5100 
0737  01106 005000  B5000 OCT 5000
0738  01107 004400  B4400 OCT 4400
0739  01110 000600  B0600 OCT  0600 
0740  01111 000100  B0100 OCT  0100 
0741  01112 000400  B0400 OCT 0400
0742  01113 004200  B4200 OCT 4200
0743  01114 000017  .15   DEC 15
0744  00054         TEST  EQU LN-*      ERROR HERE MEANS THE CONFIGURE R
0745*                                   I TOO LONG. 
0746  01650         .     EQU 1650B 
0747  01650         EQTA  EQU . 
0748  01660         EQT1  EQU .+8 
0749  01663         EQT4  EQU EQT1+3
0750  01664         EQT5  EQU EQT1+4
0751  01665         EQT6  EQU EQT1+5
0752  01666         EQT7  EQU EQT1+6
0753  01667         EQT8  EQU EQT1+7
0754  01670         EQT9  EQU EQT1+8
0755  01671         EQT10 EQU EQT1+9
0756  01672         EQT11 EQU EQT1+10 
0757  01771         EQT12 EQU .+81
0758  01774         EQT15 EQU .+84
0759  01673         CHAN  EQU .+19
0760  00645         I.31  EQU I.XX
0761  00211         C.31  EQU C.XX
0762  00000         CMND  EQU 0 
0763  00000         DATA  EQU 0 
0764  00000         A     EQU 0 
0765  00001         B     EQU 1 
0766  01757         SECTR EQU .+71
0767  01171         LNPG  EQU LN        DRIVER LENGTH 
0768                      END 







 PAGE 0018 #01  DVR31  RTE MOVING HEAD DRIVER 


**  NO ERRORS*























































$END ASMB     

*
--> Assemble 29016-RTE_CORE_EXEC
ON,ASMB,99







 PAGE 0001


0001                ASMB,R,L,B,C   ** RT EXEC CENTRAL CONTROL MODULE ** 
**  NO ERRORS*





























































 PAGE 0002 #01  ** REAL-TIME EXECUTIVE  CENTRAL CONTROL MODULE ** 


0001                ASMB,R,L,B,C   ** RT EXEC CENTRAL CONTROL MODULE ** 
0003  00000               NAM EXEC
0004* 
0005***** AMD-DAS ***** FEB,72 ***** REV.LWH *****
0006* 
0007                      ENT EXEC,$ABRT,$ERMG,$ALC,$RTN,$RQST,$OTRL
0008                      ENT $LIBR,$LIBX,$DREQ,$DREL,$SDRL,$SDSK 
0009* 
0010                      EXT $CVT3,$SYMG,$LIST,$TREM,$XEQ
0011                      EXT $IRT,$CVEQ
0012                      SUP 
0013* 
0014*****  < EXEC >   PROGRAM  DESCRIPTION  ***** 
0015* 
0016*  THE PRIMARY FUNCTION OF THIS PROGRAM IS
0017* TO PROVIDE GENERAL CHECKING AND EXAMINATION 
0018* OF SYSTEM SERVICE REQUESTS AND TO CALL THE
0019* APPROPRIATE PROCESSING ROUTINE IN OTHER 
0020* SECTIONS OF THE REAL-TIME EXECUTIVE.
0021* 
0022*  THIS PROGRAM IS CALLED DIRECTLY FROM THE 
0023* CENTRAL INTERRUPT CONTROL <CIC> SECTION 
0024* WHEN A MEMORY PROTECT VIOLATION IS ACKNOWLEDGED.
0025* ALL SYSTEM REQUESTS BY A USER PROGRAM CAUSE A 
0026* PROTECT VIOLATION.
0027* 
0028*   SYSTEM REQUEST FORMAT:
0029*   ----------------------
0030* 
0031*     THE GENERAL FORMAT OF A SYSTEM REQUEST IS 
0032*    A BLOCK CONTAINING AN EXECUTABLE INSTRUCTION 
0033*    TO GAIN ENTRY TO THE EXECUTIVE AND AN ADDRESS
0034*    LIST OF PARAMETERS. THE FIRST PARAMETER IS 
0035*    A NUMERIC CODE IDENTIFYING THE REQUEST TYPE. 
0036*    THE LENGTH OF THE PARAMETER LIST VARIES
0037*    ACCORDING TO THE AMOUNT OF INFORMATION RE- 
0038*    QUIRED FOR EACH REQUEST (OR VARIATIONS WITHIN
0039*    A SINGLE REQUEST). THIS FORMAT ALLOWS SYSTEM 
0040*    REQUESTS TO BE SPECIFIED IN A FORTRAN CALL 
0041*    STATEMENT IN ADDITION TO ASSEMBLY LANGUAGE FORMAT. 
0042* 
0043*        CALL  EXEC  (P1,P2,...PN)
0044* 
0045*     OR
0046* 
0047*        EXT   EXEC 
0048*        JSB   EXEC   (CAUSES MEMORY PROTECT VIOLATION) 
0049*        DEF   *+1+N  DEFINE EXIT POINT, N= # PARAMETERS
0050*        DEF   RCODE  DEFINE REQUEST CODE 
0051*        DEF   P1     DEFINE PARAMETER LIST, 1 TO N 
0052*        .
0053*        .            (PARAMETERS MAY BE INDIRECTLY 
0054*        .             REFERENCED, E.G. DEF P3,I) 
0055*        DEF   PN 
0056*       - EXIT POINT -
0057* 







 PAGE 0003 #01  ** REAL-TIME EXECUTIVE  CENTRAL CONTROL MODULE ** 


0058*     RCODE  DEC  N 
0059*     P1     DEC/OCT/DEF,ETC  TO DEFINE A VLAUE 
0060* 
0061* 
0062*   RE-ENTRANT LIBRARY REQUEST
0063*   --------------------------
0064* 
0065*     THE SYSTEM LIBRARY (RESIDENT) CONTAINS
0066*    PROGRAMS STRUCTURED IN 'RE-ENTRANT' FORMAT 
0067*    OR IN 'PRIVILEGED' EXECUTION FORMAT. 
0068* 
0069*     - RE-ENTRANT FORMAT ALLOWS A LIBRARY
0070*    PROGRAM TO BE RE-ENTERED BY A CALL FROM
0071*    A HIGHER-PRIORITY PROGRAM DURING THE 
0072*    PROCESSING OF A CALL FROM A LOWER-PRIORITY 
0073*    PROGRAM. 
0074* 
0075*     - PRIVILEGED EXECUTION FORMAT ALLOWS A
0076*    SHORT-RUNNING LIBRARY PROGRAM TO BE EXECUTED 
0077*    WITH THE INTERRUPT SYSTEM DISABLED.
0078* 
0079* 
0080* 
0081*  MEMORY PROTECT ERROR:
0082*  ---------------------
0083* 
0084*    IF THE INSTRUCTION CAUSING THE PROTECT VIOLATION 
0085*   IS NOT A JSB EXEC OR A JSB TO LIBRARY 
0086*   PROGRAM, THEN A USER PROGRAM ERROR IS 
0087*   ASSUMED. A DIAGNOSTIC IS OUTPUT TO THE SYSTEM 
0088*   TELETYPE LISTING THE PROGRAM NAME AND ADDRESS 
0089*   OF VIOLATING INSTRUCTION AND THE PROGRAM IS 
0090*   SET DORMANT IN THE PROGRAM ABORT PROCEDURE. 
0091* 





























 PAGE 0004 #01  ** REAL-TIME EXECUTIVE  CENTRAL CONTROL MODULE ** 


0093* 
0094  00000 000000  EXEC  NOP 
0095* 
0096  00001 102000        HLT 0        PROTECTION AGAINST DIRECT CALL.
0097* 
0098  00002 102505  RTRQP LIA 5        GET ADDRESS OF VIOLATION.
0099  00003 072053R       STA VADR     SAVE VIOLATION ADDRESS.
0100  00004 171730        STA XSUSP,I  SET AS POINT OF SUSPENSION.
0101  00005 073264R       STA TEMP1    SAVE (P+1) OF
0102  00006 037264R       ISZ TEMP1     CALL. 
0103  00007 160000        LDA A,I      GET WORD.
0104  00010 012047R       AND MASK1    ISOLATE INSTR. CODE. 
0105  00011 052046R       CPA JSBI     IF INSTRUCTION IS JSB  ,I
0106  00012 002001        RSS           CHECK OPERAND ADDRESS.
0107  00013 027327R       JMP MPERR     -MEMORY PROTECT ERROR-
0108  00014 062053R       LDA VADR     CHECK
0109  00015 160000        LDA A,I       FOR EFFECTIVE 
0110  00016 012050R       AND MASK2     OPERAND ADDRESS 
0111  00017 160000        LDA A,I       SAME AS 
0112  00020 052051R       CPA EXECA     -EXEC-. 
0113  00021 026055R       JMP R0        YES, REQUEST TO BE ANALYSED.
0114  00022 052174R       CPA LIBRA    -LIBRARY ROUTINE CALLING FOR 
0115  00023 026175R       JMP LIBRC     RE-ENTRANT OR PRIVILEGED RUN. 
0116  00024 052303R       CPA LIBXA    -LIBRARY ROUTINE RETURNING 
0117  00025 026304R       JMP LIBXC     TO CALLER.
0118* 
0119* CHECK FOR USER CALL TO LIBRARY PROGRAM
0120* 
0121  00026 070001        STA B        SAVE OPERAND ADDRESS.
0122  00027 061745        LDA LBORG    SUBTRACT LIBRARY 
0123  00030 003004        CMA,INA       AREA ORIGIN FROM
0124  00031 040001        ADA B          OPERAND ADDRESS. 
0125  00032 002020        SSA          MEMORY PROTECT ERROR IF
0126  00033 027327R       JMP MPERR     OPERAND LT LIBRARY ORIGIN.
0127  00034 061746        LDA RTORG    SUBTRACT REAL-TIME 
0128  00035 003004        CMA,INA       AREA ORIGIN FROM
0129  00036 040001        ADA B          OPERAND ADDRESS. 
0130  00037 002021        SSA,RSS      IF NOT CALL TO LIBRARY RESIDENT, 
0131  00040 027327R       JMP MPERR     THEN VALID MEMORY PROTECT ERROR.
0132  00041 063264R       LDA TEMP1    -CALL TO LIBRARY.
0133  00042 170001        STA B,I       SET (P+1) ADDRESS IN ENTRY POINT
0134  00043 046172R       ADB .2        SET (P+1) OF
0135  00044 076200R       STB LIBR       JSB  LIBR  IN -LIBR-.
0136  00045 026202R       JMP LB1      - TRANSFER TO LIBR SECTION.

0138  00046 114000  JSBI  JSB 0,I 
0139  00047 176000  MASK1 OCT 176000
0140  00050 001777  MASK2 OCT 1777
0141  00051 000000R EXECA DEF EXEC
0142  00052 001701  RQP2A DEF RQP2
0143  00053 000000  VADR  NOP 
0144  00054 177767  N9    DEC -9
0145* 
0146* ANALYZE SYSTEM REQUEST
0147* 
0148  00055 067264R R0    LDB TEMP1     (B) = P+1 OF  JSB EXEC. 







 PAGE 0005 #01  ** REAL-TIME EXECUTIVE  CENTRAL CONTROL MODULE ** 


0149  00056 160001        LDA B,I      GET EXIT ADDRESS,
0150  00057 002020        SSA          ERROR IF RETURN POINT ADDRESS
0151  00060 027331R       JMP RQERR     IS 'INDIRECT'.
0152  00061 002003        SZA,RSS      ERROR
0153  00062 027331R       JMP RQERR     IF RETURN 
0154  00063 052171R       CPA .1        ADDRESS = 
0155  00064 027331R       JMP RQERR      0 OR 1 (A OR B REGISTERS)
0156  00065 071677        STA RQRTN     SAVE IN BASE PAGE 
0157  00066 077264R       STB TEMP1    SAVE REQUEST WORD 2 ADDRESS. 
0158  00067 007004        CMB,INB      SUBTRACT WORD 2 ADDRESS FROM 
0159  00070 040001        ADA B         EXIT ADDRESS. 
0160  00071 002003        SZA,RSS      IF ZERO, THEN NO REQUEST CODE
0161  00072 027331R       JMP RQERR     AND IS ILLEGAL. 
0162  00073 042173R       ADA N1       SUBTRACT 1.
0163  00074 002003        SZA,RSS      IF ZERO, THEN WORD 3 (REQUEST
0164  00075 027331R       JMP RQERR     CODE) IS NOT SUPPLIED, ERROR. 
0165  00076 042173R       ADA N1       SUBTRACT 1 AGAIN TO DETERMINE
0166  00077 071676        STA RQCNT     AND SAVE # OF ACTUAL PARAMETERS.
0167  00100 070001        STA B 
0168* 
0169  00101 002020        SSA          ERROR IF # 
0170  00102 027331R       JMP RQERR     IS NEGATIVE OR
0171  00103 042054R       ADA N9        IS GREATER
0172  00104 002021        SSA,RSS       THAN
0173  00105 027331R       JMP RQERR     8.
0174* 
0175  00106 002400        CLA          - ZERO 
0176  00107 071701        STA RQP2
0177  00110 071702        STA RQP3       PARAMETER
0178  00111 071703        STA RQP4
0179  00112 071704        STA RQP5       ADDRESS
0180  00113 071705        STA RQP6
0181  00114 071706        STA RQP7       AREA 
0182  00115 071707        STA RQP8
0183* 
0184  00116 007004        CMB,INB      SET PARAMETER # NEG. FOR INDEX 
0185  00117 037264R       ISZ TEMP1    (TEMP1) = ADDR. OF WORD 3
0186  00120 016156R       JSB EFFAD    GET EFFECTIVE OPERAND ADDR. IN A.
0187  00121 071700        STA RQP1     SET ADDR. OF REQUEST CODE WORD.
0188  00122 006003        SZB,RSS      IF NO ACTUAL PARAMETERS SUPPLIED,
0189  00123 026135R       JMP R2        SKIP NEXT SECTION.
0190* 
0191  00124 062052R       LDA RQP2A    SET (TEMP2) =
0192  00125 073265R       STA TEMP2     ADDRESS OF RQP2 IN BASE PAGE. 
0193  00126 037264R       ISZ TEMP1    SET (TEMP1) = ADDR. OF WORD 4. 
0194  00127 016156R R1    JSB EFFAD    GET EFFECTIVE OPERAND ADDRESS. 
0195  00130 173265R       STA TEMP2,I  SET IN BASE PAGE.
0196  00131 037265R       ISZ TEMP2    INDEX
0197  00132 037264R       ISZ TEMP1     ADDRESSES AND 
0198  00133 006006        INB,SZB       PARAMETER COUNT.
0199  00134 026127R       JMP R1       - CONTINUE - 












 PAGE 0006 #01  ** REAL-TIME EXECUTIVE  CENTRAL CONTROL MODULE ** 


0201* 
0202* CHECK LEGALITY OF REQUEST CODE
0203* 
0204  00135 161700  R2    LDA RQP1,I   GET REQUEST CODE 
0205  00136 002003        SZA,RSS       ERROR IF
0206  00137 027331R       JMP RQERR      ZERO OR NEGATIVE 
0207  00140 003004        CMA,INA 
0208  00141 002021        SSA,RSS 
0209  00142 027331R       JMP RQERR      SUBTRACT FROM #
0210  00143 043506R       ADA CODE#     OF REQUEST TYPES. 
0211  00144 002020        SSA          -ERROR IF LARGER 
0212  00145 027331R       JMP RQERR     THAN # DEFINED. 
0213* 
0214  00146 161700        LDA RQP1,I   ADD REQUEST CODE 
0215  00147 043465R       ADA RQTBL     TO FWA-1 OF REQUEST TABLE.
0216  00150 160000        LDA A,I      GET LINK ADDR. OF PROCESSOR. 
0217  00151 002021        SSA,RSS      JUMP IF PROCESSOR IS 
0218  00152 026155R       JMP *+3       IN 'EXEC'.
0219  00153 001265        RAL,CLE,ERA  REMOVE I-BIT 
0220  00154 160000        LDA A,I       AND GET EFFECTIVE ADDRESS.
0221* 
0222* TRANSFER TO REQUEST PROCESSOR 
0223* 
0224  00155 124000        JMP A,I      ACTIVATE PROCESSOR - NO RETURN.
0225* 
0226* SUBROUTINE  <EFFAD>,  COMPUTE EFFECTIVE ADDRESS 
0227* 
0228  00156 000000  EFFAD NOP 
0229  00157 163264R       LDA TEMP1,I       GET ADDRESS 
0230  00160 002003        SZA,RSS      ERROR IF 
0231  00161 027331R       JMP RQERR     ADDRESS = 
0232  00162 052171R       CPA .1         0 OR 1 
0233  00163 027331R       JMP RQERR       (A OR B REGISTERS)
0234  00164 001275        RAL,CLE,SLA,ERA   TEST I-BIT AND CLEAR
0235  00165 002001        RSS               -INDIRECT-
0236  00166 126156R       JMP EFFAD,I       RETURN WITH (A) = ADDRESS.
0237  00167 160000        LDA A,I      GET NEXT ADDRESS IN INDIRECT 
0238  00170 026160R       JMP EFFAD+2   CHAIN AND PROCESS.

0240  00171 000001  .1    DEC 1 
0241  00172 000002  .2    DEC 2 
0242  00173 177777  N1    DEC -1





















 PAGE 0007 #01  ** SUPERVISORY CONTROL OF LIBRARY PROGRAM EXECUTION **


0244* 
0245* SUPERVISORY CONTROL OF PROGRAM LIBRARY EXECUTION
0246* 
0247*  ALL LIBRARY PROGRAMS REFERENCED BY USER PROGRAMS 
0248* IN THE SYSTEM ARE COMBINED IN A BLOCK OF MEMORY 
0249* WHICH IS PROTECTED FROM THE REAL-TIME AREA. THE 
0250* LIBRARY AREA IS IMMEDIATELY BELOW THE RT AREA 
0251* AND JUST ABOVE THE SYSTEM AREA. 
0252* 
0253*  A USER LIBRARY CALL CAUSES A PROTECT VIOLATION.
0254* THIS SECTION FACILITATES ENTRY INTO THE LIBRARY 
0255* PROGRAM BY PERFORMING THE NECESSARY PROCESSING
0256* FOR RE-ENTRANCY OR OPERATING THE PROGRAM WITH 
0257* THE INTERRUPT SYSTEM TURNED OFF FOR A 'PRIVILEGED'
0258* EXECUTION PROGRAM.
0259* 
0260*  RE-ENTRANT OR PRIVILEGED PROGRAM FORMAT: 
0261*  ---------------------------------------- 
0262* 
0263*   ENTRY   NOP 
0264*           JSB  LIBR 
0265*           DEF  TDB  (OR 'NOP' IF PRIVILEGED)
0266*          - FIRST INSTRUCTION FOR FUNCTION - 
0267*            -    CODE
0268*            -     TO 
0269*            -     PERFORM
0270*            -     PROGRAM FUNCTION 
0271*    EXIT   JSB  LIBX 
0272*           DEF  TDB  (OR  DEF ENTRY IF PRIVILEGED) 
0273*           DEC  N   RETURN ADJUSTMENT FOR RE-ENTRANT 
0274*            -
0275*   TDB     NOP    HOLDS LINKAGE TO PREVIOUS BLOCK
0276*           DEC N  LENGTH OF TEMPORARY DATA BLOCK 
0277*           NOP    RETURN ADDRESS OF CALL.
0278*         - BLOCK USED FOR
0279*             HOLDING TEMPORARY 
0280*              VALUES GENERATED 
0281*               BY THE ROUTINE. 
0282* 
0283* 
0284*  < LIBR > IS ENTERED WHEN A LIBRARY 
0285* PROGRAM IS CALLED.  IF THE CALLED 
0286* PROGRAM IS 'RE-ENTRANT' AND IS CALLED 
0287* DURING THE PROCESSING OF A PREVIOUS 
0288* CALL, THE TEMPORARY-DATA-BLOCK IS 
0289* MOVED INTO A BLOCK IN AVAILABLE MEMORY
0290* BEFORE THE ROUTINE IS ENTERED.
0291* 
0292* 
0293  00174 000200R LIBRA DEF LIBR
0294* 
0295  00175 063264R LIBRC LDA TEMP1    SET (P+1) OF 
0296  00176 072200R       STA LIBR      JSB LIBR IN -LIBR-. 
0297  00177 026202R       JMP LB1       SKIP SAVING REGISTERS.
0298* 
0299  00200 000000  LIBR  NOP         -NON INTERRUPT ENTRY--







 PAGE 0008 #01  ** SUPERVISORY CONTROL OF LIBRARY PROGRAM EXECUTION **


0300  00201 016417R       JSB SAVER     ( SAVE REGISTERS IN ID SEGMENT) 
0301* 
0302  00202 166200R LB1   LDB LIBR,I   GET (P+2) OF -LIBR- CALL.
0303  00203 006003        SZB,RSS      IF (P+2) = 0, THEN CALLED PROGRAM
0304  00204 026277R       JMP PVEXC     IS IN 'PRIVILEGED' FORMAT.
0305* 
0306  00205 077264R       STB TEMP1    SAVE -TDB- ADDRESS.
0307  00206 160001        LDA B,I      GET WORD 1 OF DATA BLOCK.
0308  00207 002004        INA          IF -LINK- WORD = 0, THEN NEED NOT
0309  00210 052171R       CPA .1        MOVE BLOCK BUT -LINK- WORD IS 
0310  00211 026246R       JMP LB4        SET TO = 1 AS FLAG.
0311* 
0312  00212 006004        INB          GET  -TDB- 
0313  00213 160001        LDA B,I       WORD LENGTH.
0314  00214 072220R       STA LB2      SAVE FOR MEMORY ALLOCATION 
0315  00215 003004        CMA,INA       AND AS INDEX
0316  00216 072267R       STA MVCNT     FOR BLOCK MOVE. 
0317* 
0318  00217 016437R       JSB .ALC.    ALLOCATE TEMPORARY BLOCK IN
0319  00220 000000  LB2   NOP           AVAILABLE MEMORY. 
0320* 
0321  00221 002003        SZA,RSS      IF NO MEMORY AVAILABLE,
0322  00222 026271R       JMP LB5       REJECT ORIGINAL CALLER. 
0323* 
0324  00223 077266R       STB TEMP3    SAVE NEW BLOCK LENGTH
0325  00224 073265R       STA TEMP2    SAVE NEW BLOCK LOCATION. 
0326  00225 072266R       STA MVADR 
0327  00226 067264R       LDB TEMP1    (B) = TDB ADDRESS. 
0328  00227 160001  LB3   LDA B,I      MOVE  TDB
0329  00230 172266R       STA MVADR,I   FROM
0330  00231 036266R       ISZ MVADR     LIBRARY RE-ENTRANT PROGRAM
0331  00232 006004        INB           TO BLOCK
0332  00233 036267R       ISZ MVCNT     IN AVAILABLE
0333  00234 026227R       JMP LB3       MEMORY. 
0334  00235 067266R       LDB TEMP3    CHECK NEW BLOCK
0335  00236 056220R       CPB LB2       LENGTH AGAINST REQ. LENGTH. 
0336  00237 026245R       JMP LB4-1     = 
0337  00240 063265R       LDA TEMP2    NOT =, NEW BLOCK IS
0338  00241 002004        INA           1 WORD LONGER.
0339  00242 164000        LDB A,I      SET BLOCK LENGTH WORD IN 
0340  00243 007004        CMB,INB       WORD 2 NEGATIVE TO
0341  00244 174000        STB A,I       INDICATED CONDITION.
0342  00245 063265R       LDA TEMP2    (A) = NEW BLOCK ADDRESS. 
0343* 
0344  00246 173264R LB4   STA TEMP1,I  SET 1 OR NEW ADDR. IN TDB(1).
0345  00247 067264R       LDB TEMP1    (B) = ADDR. OF TDB.
0346  00250 046172R       ADB .2       SET
0347  00251 062200R       LDA LIBR      (P+1) 
0348  00252 042740R       ADA N2        OF ORIGINAL 
0349  00253 160000        LDA A,I       CALL IN 
0350  00254 170001        STA B,I       WORD 3 OF TDB IN PROGRAM. 
0351  00255 036200R       ISZ LIBR     SET TO FIRST INSTR IN LIB. PROG. 
0352* 
0353  00256 061745        LDA LBORG    SET MEMORY PROTECT BOUNDARY
0354  00257 071775        STA FENCE 
0355  00260 102605        OTA 5         TO LIBRARY ORIGIN.







 PAGE 0009 #01  ** SUPERVISORY CONTROL OF LIBRARY PROGRAM EXECUTION **


0356* 
0357  00261 016006X       JSB $IRT      RESET INTERRUPT CONDITIONS
0358  00262 016427R       JSB RSTR     RESTORE REGISTERS. 
0359* 
0360  00263 102100        STF 0        TURN ON INTERRUPT SYSTEM 
0361  00264 102705        STC 5        TURN ON MEMORY PROTECT 
0362* 
0363  00265 126200R       JMP LIBR,I   TRANSFER TO LIBRARY PROGRAM. 

0365  00266 000000  MVADR NOP 
0366  00267 000000  MVCNT NOP 
0367  00270 000000  PVCNT NOP 
0368* 
0369* REJECT SECTION CAUSED BY NO MEMORY
0370*  AVAILABLE FOR -TDB-. CALLING USER PROGRAM
0371*  IS SUSPENDED BACK TO POINT OF CALL AND 
0372*  LINKED INTO MEMORY SUSPENSION LIST.
0373* 
0374  00271 061717  LB5   LDA XEQT     SET ID SEGMENT ADDRESS 
0375  00272 072275R       STA LB6       IN CALL TO LIST 
0376* 
0377  00273 016003X       JSB LIST     SUSPEND
0378  00274 000104        OCT 104       PROGRAM 
0379  00275 000000  LB6   NOP 
0380  00276 026005X       JMP XEQ      TRANSFER TO EXECUTE SECTION. 
0381* 
0382* 
0383* INITIATE PRIVILEGED EXECUTION OF USER PROGRAM 
0384* 
0385  00277 016427R PVEXC JSB RSTR     RESTORE REGISTERS. 
0386  00300 036200R       ISZ LIBR     INDEX TO (P+2) OF CALL.
0387  00301 036270R       ISZ PVCNT    ADD 1 TO PRIV. EXECUTION COUNT.
0388  00302 126200R       JMP LIBR,I   TRANSFER TO PROGRAM. 
0389* 





























 PAGE 0010 #01  ** SUPERVISORY CONTROL OF LIBRARY PROGRAM EXECUTION **


0391*  < LIBX > IS ENTERED WHEN A LIBRARY 
0392* PROGRAM TERMINATES ITS EXECUTION. A 
0393* TEMPORARY DATA BLOCK IS MOVED BACK
0394* INTO THE LIBRARY PROGRAM, IF REQUIRED,
0395* BEFORE RETURN TO THE ORIGINAL CALLER. 
0396* 
0397* 
0398  00303 000307R LIBXA DEF LIBX
0399* 
0400  00304 063264R LIBXC LDA TEMP1     SET (P+1) OF
0401  00305 072307R       STA LIBX       JSB LIBX 
0402  00306 026311R       JMP LB10      IN LIBX.
0403* 
0404  00307 000000  LIBX  NOP           - NON-INTERRUPT ENTRY - 
0405  00310 016417R       JSB SAVER      SAVE REGISTERS.
0406* 
0407  00311 062270R LB10  LDA PVCNT    IF PVCNT IS ZERO, THEN 
0408  00312 002003        SZA,RSS       RETURNING PROGRAM 
0409  00313 026337R       JMP LB13      IS RE-ENTRANT.
0410* 
0411  00314 042173R       ADA N1       -PRIVILEGED- PROGRAM.
0412  00315 072270R       STA PVCNT    SUBTRACT 1 FROM PVCNT. 
0413  00316 166307R       LDB LIBX,I   GET (P+1): LOCATION OF ENTRY 
0414  00317 164001        LDB B,I       POINT.  GET AND 
0415  00320 076307R       STB LIBX      SET  RETURN ADDRESS.
0416  00321 002003        SZA,RSS      IF PVCNT NOW = 0, THEN RETURNING 
0417  00322 026325R       JMP LB11      TO USER OR RE-ENTRANT PROGRAM.
0418* 
0419  00323 016427R       JSB RSTR     RETURNING TO 
0420  00324 126307R       JMP LIBX,I    'PRIVILEGED' PROGRAM. 
0421* 
0422  00325 062307R LB11  LDA LIBX     IF RETURN
0423  00326 003004        CMA,INA       POINT IS TO 
0424  00327 041746        ADA RTORG     USER, 
0425  00330 002020        SSA           GO TO SET 
0426  00331 026404R       JMP LB16      MEMORY PROTECT FENCE. 
0427* 
0428  00332 016006X LB12  JSB $IRT      RESET INTERRUPT CONDITIONS
0429  00333 016427R       JSB RSTR      -RETURN TO RE-ENTRANT OR USER.
0430  00334 102100        STF 0        TURN INTERRUPT SYSTEM ON.
0431  00335 102705        STC 5        TURN MEMORY PROTECT ON.
0432  00336 126307R       JMP LIBX,I    -RETURN-
0433* 
0434* RE-ENTRANT PROGRAM RETURNING TO USER CALL.
0435* 
0436  00337 166307R LB13  LDB LIBX,I   SET  -TDB- ADDRESS.
0437  00340 077264R       STB TEMP1     IN TEMP1. 
0438  00341 036307R       ISZ LIBX      SET TO (P+2) OF CALL TO -LIBX-. 
0439  00342 006004        INB          GET TDB
0440  00343 160001        LDA B,I       LENGTH -
0441  00344 003004        CMA,INA      SET AS INDEX 
0442  00345 072267R       STA MVCNT     FOR PREVIOUS TDB MOVE.
0443  00346 006004        INB          GET
0444  00347 160001        LDA B,I       RETURN POINT ADJUSTMENT.
0445  00350 142307R       ADA LIBX,I    ADD TO (P+1) OF LIBRARY CALL
0446  00351 072307R       STA LIBX      AND SET FOR RETURN TO USER. 







 PAGE 0011 #01  ** SUPERVISORY CONTROL OF LIBRARY PROGRAM EXECUTION **


0447* 
0448  00352 167264R       LDB TEMP1,I  GET PREVIOUS -TDB- LOCATION. 
0449  00353 002400        CLA          IF NO
0450  00354 056171R       CPB .1        PREVIOUS BLOCK, THEN GO 
0451  00355 026415R       JMP LB17       TO SET WORD 1 OF TDB = 0.
0452  00356 076266R       STB MVADR    SAVE PREVIOUS
0453  00357 076401R       STB LB15      TDB ADDRESS.
0454  00360 067264R       LDB TEMP1    (B) = ADDR. OF TDB AREA IN PROG. 
0455  00361 162266R LB14  LDA MVADR,I  MOVE 
0456  00362 170001        STA B,I       PREVIOUS
0457  00363 036266R       ISZ MVADR     -TDB- 
0458  00364 006004        INB           BACK
0459  00365 036267R       ISZ MVCNT     INTO RE-ENTRANT 
0460  00366 026361R       JMP LB14      LIBRARY PROGRAM.
0461  00367 067264R       LDB TEMP1    CHECK
0462  00370 006004        INB           FOR NEED TO 
0463  00371 160001        LDA B,I       RELEASE 1 MORE THAN TDB LENGTH. 
0464  00372 002021        SSA,RSS      IF LENGTH WORD +,
0465  00373 026377R       JMP *+4       THEN USE STATED LENGTH. 
0466  00374 003004        CMA,INA      SET POSITIVE AND 
0467  00375 170001        STA B,I       RESTORE IN PROGRAM TDB. 
0468  00376 002004        INA          ADD 1 FOR RELEASE CALL.
0469  00377 072402R       STA LB15+1
0470* 
0471  00400 016534R       JSB .RTN.    RELEASE PREVIOUS -TDB- AREA. 
0472  00401 000000  LB15  NOP           - FWA BLOCK AREA -
0473  00402 000000        NOP           - LENGTH IN WORDS-
0474  00403 026325R       JMP LB11     GO TO CHECK RETURN ADDRESS 
0475* 
0476* SET MEMORY PROTECT FENCE FOR RETURN TO USER 
0477* 
0478  00404 062307R LB16  LDA LIBX     SUBTRACT 
0479  00405 003004        CMA,INA       RETURN POINT
0480  00406 041752        ADA BKORG     FROM BACKGROUND ORIGIN. 
0481  00407 065746        LDB RTORG    (B) = REAL-TIME ORIGIN 
0482  00410 002020        SSA           IF RETURN IS TO BACKGROUND, 
0483  00411 065752        LDB BKORG     SET (B) = BACKGROUND ORIGIN 
0484  00412 075775        STB FENCE 
0485  00413 106605        OTB 5        SET MEMORY PROTECT FENCE REGISTER
0486* 
0487  00414 026332R       JMP LB12      GO TO RETURN TO USER. 
0488* 
0489* 
0490  00415 173264R LB17  STA TEMP1,I  FOR NO MOVE, SET WORD 1 OF PROG. 
0491  00416 026325R       JMP LB11      TDB = 0, GO TO CHECK RETURN.
0492* 

















 PAGE 0012 #01  ** SUPERVISORY CONTROL OF LIBRARY PROGRAM EXECUTION **


0494* SUBROUTINES: <SAVER> AND <RSTR> USED FOR
0495*              SAVING AND RESTORING REGISTERS 
0496*              IN LIBRARY PROGRAM PROCESSING. 
0497* 
0498  00417 000000  SAVER NOP 
0499  00420 171731        STA XA,I
0500  00421 175732        STB XB,I
0501  00422 001520        ERA,ALS 
0502  00423 102201        SOC 
0503  00424 002004        INA 
0504  00425 171733        STA XEO,I 
0505  00426 126417R       JMP SAVER,I 
0506* 
0507  00427 000000  RSTR  NOP 
0508  00430 161733        LDA XEO,I 
0509  00431 103101        CLO 
0510  00432 000036        SLA,ELA 
0511  00433 102101        STF 1 
0512  00434 161731        LDA XA,I
0513  00435 165732        LDB XB,I
0514  00436 126427R       JMP RSTR,I










































 PAGE 0013 #01  * DYNAMIC MEMORY ALLOCATION ROUTINE 


0516* 
0517* DYNAMIC MEMORY ALLOCATION ROUTINE 
0518* 
0519*  THIS ROUTINE PROVIDES FOR THE DYNAMIC
0520* ALLOCATION AND RELEASE OF BLOCKS IN THE 
0521* SYSTEM AVAILABLE MEMORY AREA WHICH IS 
0522* POSITIONED BETWEEN THE REAL-TIME
0523* AND BACKGROUND AREAS. 
0524* 
0525*  .ALC.  :  ALLOCATE BLOCK 
0526*  .RTN.  :  RELEASE  BLOCK 
0527* 
0528* CALLING SEQUENCES:
0529* 
0530*    1.  .ALC.
0531*        .      REGISTERS MEANINGLESS 
0532*       (P)      JSB  .ALC. 
0533*       (P+1)    (# WORDS NEEDED) 
0534*       (P+2)    - RETURN - 
0535* 
0536*             ON RETURN:
0537*           (A) = FWA NEW BLOCK OR (A) = 0
0538*           (B) = # WORDS ALLOCATED ( MAY BE 1
0539*                   GREATER THAN REQUESTED) 
0540*         (A) = 0 IF NO MEMORY AVAILABLE
0541* 
0542*    2. (P)      JSB  .RTN. 
0543*       (P+1)    (FWA OF BUFFER)
0544*       (P+2)    (# WORDS RETURNED) 
0545*       (P+3)    - RETURN - REGISTERS MEANINGLESS 
0546* 
0547* 
0548* 
0549  00437 000000  .ALC. NOP 
0550  00440 062661R       LDA PNTR     CHECK FOR FIRST
0551  00441 002002        SZA           CALL. 
0552  00442 026455R       JMP MEM1      NO. 
0553* 
0554  00443 061751        LDA AVMEM    YES, INITIALIZE MEMORY BLOCK.
0555  00444 003004        CMA,INA      SET WORD1 = # AVAILABLE. 
0556  00445 041752        ADA BKORG     ( BKORG - FWA AVAILABLE MEMORY )
0557  00446 171751        STA AVMEM,I 
0558  00447 065751        LDB AVMEM    INITIALIZE 
0559  00450 076661R       STB PNTR       -PNTR- TO FWA BLOCK. 
0560  00451 006004        INB          SET WORD2 = 77777
0561  00452 062742R       LDA MASK4      TO MEAN ONLY 
0562  00453 170001        STA B,I        1 LARGE BLOCK. 
0563  00454 062661R       LDA PNTR
0564* 
0565  00455 052742R MEM1  CPA MASK4    PNTR = 77777 MEANS NO MEMORY 
0566  00456 026531R       JMP MEM7      IS NOW AVAILABLE, REJECT. 
0567  00457 072662R       STA AAD      OTHERWISE, BEGIN SEARCH. 
0568* 
0569  00460 166437R MEM2  LDB .ALC.,I  (B) = LENGTH REQUESTED : (X).
0570  00461 076666R       STB SAVB     SET BUFFER LENGTH. 
0571  00462 007004        CMB,INB        - X







 PAGE 0014 #01  * DYNAMIC MEMORY ALLOCATION ROUTINE 


0572  00463 144000        ADB A,I      LENGTH CURRENT (I) - LENGTH (X)
0573  00464 006021        SSB,RSS        >=0? 
0574  00465 026477R       JMP MEM3     YES, ALLOCATE THIS BLOCK.
0575  00466 002004        INA 
0576  00467 164000        LDB A,I       (B) = FORWARD ADDRESS (FWD) OF I
0577  00470 056742R       CPB MASK4    IF FWD(I)=77777 THEN DONE, 
0578  00471 026531R       JMP MEM7      NO BLOCK WAS FOUND, REJECT. 
0579  00472 066662R       LDB AAD      MOVE THIS BLOCK POINTER
0580  00473 076663R       STB BAD       TO LAST BLOCK POINTER,
0581  00474 160000        LDA A,I       AND NEXT BLOCK TO 
0582  00475 072662R       STA AAD       THIS BLOCK. 
0583  00476 026460R       JMP MEM2     REPEAT LOOP. 
0584* 
0585  00477 046740R MEM3  ADB N2       IS BLOCK AT LEAST 2 WORDS
0586  00500 006020        SSB           LARGER THAN REQUEST?
0587  00501 026507R       JMP MEM4     -NO, ALLOCATE ENTIRE BLOCK.
0588  00502 046172R       ADB .2       (B) = LENGTH(I) - LENGTH(X)
0589  00503 176662R       STB AAD,I    SET NEW L(I).
0590  00504 046662R       ADB AAD 
0591  00505 076665R       STB SAVA     SAVA = NEW BLOCK ADDRESS.
0592  00506 026525R       JMP MEM6      -EXIT-. 
0593* 
0594  00507 166662R MEM4  LDB AAD,I    SET BUFFER TO LENGTH(I) TO ALLO- 
0595  00510 076666R       STB SAVB      CATE LENGTH (X) + 1.
0596  00511 072665R       STA SAVA     AAD IS BUFFER ADDRESS. 
0597  00512 052661R       CPA PNTR     IS THIS FIRST BLOCK? 
0598  00513 026522R       JMP MEM5     YES, MOVE PNTR TO FWD(I) 
0599  00514 002004        INA          NO - 
0600  00515 164000        LDB A,I      FWD(I) TO
0601  00516 062663R       LDA BAD 
0602  00517 002004        INA 
0603  00520 174000        STB A,I       FWD(I-1)
0604  00521 026525R       JMP MEM6
0605* 
0606  00522 002004  MEM5  INA          SET
0607  00523 164000        LDB A,I       PNTR TO NEW 
0608  00524 076661R       STB PNTR       FIRST BLOCK. 
0609* 
0610  00525 036437R MEM6  ISZ .ALC.    ADJUST RETURN TO (P+2).
0611  00526 062665R       LDA SAVA      (A) FWA OF NEW BLOCK
0612  00527 066666R       LDB SAVB      (B) LENGTH OF BLOCK 
0613  00530 126437R       JMP .ALC.,I    - EXIT - 
0614* 
0615  00531 002400  MEM7  CLA          -REJECT, SET (A) = 0.
0616  00532 036437R       ISZ .ALC.     ADJUST RETURN TO (P+2)
0617  00533 126437R       JMP .ALC.,I    AND  -EXIT-

















 PAGE 0015 #01  * DYNAMIC MEMORY ALLOCATION ROUTINE 


0619  00534 000000  .RTN. NOP 
0620  00535 162534R       LDA .RTN.,I  (A) = FWA RETURN BUFFER
0621  00536 072664R       STA ADX         TO (ADX). 
0622  00537 036534R       ISZ .RTN. 
0623  00540 162534R       LDA .RTN.,I   # WORDS RETURNED (X)
0624  00541 042740R       ADA N2
0625  00542 002020        SSA           < 2 ? 
0626  00543 026657R       JMP MEM18     BUFFER TOO SMALL-IGNORE.
0627* 
0628  00544 002400        CLA 
0629  00545 072663R       STA BAD 
0630  00546 066661R       LDB PNTR
0631* 
0632  00547 076662R MEM10 STB AAD      PNTR TO AAD
0633  00550 007004        CMB,INB 
0634  00551 046664R       ADB ADX 
0635  00552 006020        SSB          ADX - AAD >= 0?
0636  00553 026561R       JMP MEM11 
0637  00554 062662R       LDA AAD      YES, 
0638  00555 072663R       STA BAD       AAD TO BAD
0639  00556 002004        INA 
0640  00557 164000        LDB A,I      NEXT BUFFER ADDRESS TO AAD 
0641  00560 026547R       JMP MEM10     - CONTINUE SCAN.
0642* 
0643  00561 146534R MEM11 ADB .RTN.,I  X + ADX >= AAD?
0644  00562 006020        SSB 
0645  00563 026600R       JMP MEM12     NO
0646  00564 062662R       LDA AAD 
0647  00565 066664R       LDB ADX 
0648  00566 007004        CMB,INB 
0649  00567 046662R       ADB AAD 
0650  00570 146662R       ADB AAD,I 
0651  00571 176664R       STB ADX,I    L(X) = L(A) + AAD - ADX
0652  00572 002004        INA 
0653  00573 164000        LDB A,I       (B) = FWD(A)
0654  00574 062664R       LDA ADX 
0655  00575 002004        INA 
0656  00576 174000        STB A,I      FWD(A) TO FWD (X)
0657  00577 026606R       JMP MEM13 
0658* 
0659  00600 162534R MEM12 LDA .RTN.,I  X NOT CONTIGUOUS WITH A
0660  00601 172664R       STA ADX,I 
0661  00602 062664R       LDA ADX 
0662  00603 002004        INA 
0663  00604 066662R       LDB AAD 
0664  00605 174000        STB A,I      FWD(X) = AAD 
0665* 
0666  00606 066663R MEM13 LDB BAD 
0667  00607 006003        SZB,RSS      ANY LOWER BLOCKS?
0668  00610 026641R       JMP MEM14     NO, DONE
0669  00611 006004        INB 
0670  00612 062664R       LDA ADX 
0671  00613 052663R       CPA BAD      SAME BLOCK?
0672  00614 002001        RSS          YES, DO NOT SET FWD(B).
0673  00615 170001        STA B,I      ADX TO FWD(B)
0674  00616 062663R       LDA BAD 







 PAGE 0016 #01  * DYNAMIC MEMORY ALLOCATION ROUTINE 


0675  00617 142663R       ADA BAD,I 
0676  00620 066664R       LDB ADX 
0677  00621 007004        CMB,INB 
0678  00622 044000        ADB A 
0679  00623 006020        SSB          BAD + L(B) >= ADX? 
0680  00624 026643R       JMP MEM15    NO, DONE.
0681  00625 062664R       LDA ADX      YES, B AND X OVERLAP 
0682  00626 002004        INA 
0683  00627 164000        LDB A,I 
0684  00630 062663R       LDA BAD 
0685  00631 002004        INA 
0686  00632 174000        STB A,I      FWD(X) TO FWD(B) 
0687  00633 003004        CMA,INA 
0688  00634 002004        INA 
0689  00635 042664R       ADA ADX 
0690  00636 142664R       ADA ADX,I 
0691  00637 172663R       STA BAD,I    L(B) = L(X) + ADX - BAD
0692  00640 026643R       JMP MEM15 
0693* 
0694  00641 062664R MEM14 LDA ADX      X IS NOW 
0695  00642 072661R       STA PNTR      FIRST BLOCK 
0696* 
0697* A BLOCK HAS BEEN RETURNED - ALL PROGRAMS
0698*  WAITING FOR AVAILABLE MEMORY ARE LINKED
0699*  BACK INTO THE SCHEDULE LIST FROM THE 
0700*  MEMORY SUSPENSION LIST.
0701* 
0702  00643 061714  MEM15 LDA SUSP3    GET SUSPENSION LIST POINTER
0703  00644 002003        SZA,RSS      IF EMPTY LIST, 
0704  00645 026657R       JMP MEM18     GO TO EXIT. 
0705* 
0706  00646 072653R MEM16 STA MEM17     SAVE ID SEGMENT ADDRESS.
0707  00647 160000        LDA A,I      GET NEXT LINK ADDRESS
0708  00650 072665R       STA SAVA      AND SAVE. 
0709* 
0710  00651 016003X       JSB LIST     CALL *SCHEDULER* TO
0711  00652 000101        OCT 101       LINK INTO -SCHEDULE- LIST.
0712  00653 000000  MEM17 NOP           - ID SEGMENT ADDRESS -
0713* 
0714  00654 062665R       LDA SAVA     IF END OF LIST,
0715  00655 002002        SZA           EXIT ROUTINE
0716  00656 026646R       JMP MEM16     -SCHEDULE NEXT PROGRAM IN LIST- 
0717* 
0718  00657 036534R MEM18 ISZ .RTN. 
0719  00660 126534R       JMP .RTN.,I 
0720* 
0721* 
0722  00661 000000  PNTR  NOP 
0723  00662 000000  AAD   NOP 
0724  00663 000000  BAD   NOP 
0725  00664 000000  ADX   NOP 
0726* 
0727  00665 000000  SAVA  NOP 
0728  00666 000000  SAVB  NOP 
0729* 








 PAGE 0017 #01  ** SYSTEM DISC ALLOCATION/RELEASE PROCESSOR **


0731*  SYSTEM DISC ALLOCATION/RELEASE REQUESTS
0732* 
0733*  THESE REQUESTS CONFORM TO THE GENERAL
0734* SYSTEM REQUEST FORMAT.
0735* 
0736*  A.  DISC TRACK ALLOCATION
0737* 
0738*      THE ALLOCATION REQUEST  INCLUDES THE 
0739*     NUMBER OF CONTIGUOUS TRACKS DESIRED, A
0740*     PARAMETER TO INDICATE SUSPENSION OR 
0741*     NO SUSPENSION IF THE REQUESTED SPACE IS 
0742*     NOT AVAILABLE AND VARIABLE STORAGE FOR
0743*     RETURNING THE STARTING TRACK NUMBER, THE
0744*     DISC LOGICAL UNIT NUMBER AND THE NUMBER 
0745*     OF SECTORS PER TRACK FOR THE ASSIGNED 
0746*     DISC. 
0747* 
0748*      (P)    JSB EXEC
0749*      (P+1)  DEF *+6     (DEFINE RETURN) 
0750*      (P+2)  DEF RCODE   ( " REQUEST CODE) 
0751*      (P+3)  DEF #TRAK   ( " # TRACKS DESIRED) 
0752*      (P+4)  DEF STRAK   ( " WORD FOR TRACK #) 
0753*      (P+5)  DEF DISC    ( "  "   FOR DISC LU #) 
0754*      (P+6)  DEF SECT#   ( "  "   FOR # SECTORS) 
0755*      (P+7)  - RETURN -
0756* 
0757*      RCODE  DEC M 
0758*      #TRAK  DEC N 
0759*      STRAK  NOP 
0760*      DISC   NOP 
0761*      SECT#  NOP 
0762* 
0763*     M =  4 ALLOCATE TRACK TO PROGRAM
0764*       = 15 ALLOCATE TRACK GLOBALLY
0765* 
0766*     #TRAK (BIT 15):= 0 TO MEAN SUSPENSION IF
0767*                        TRACKS NOT AVAILABLE 
0768*                    = 1 TO MEAN NO SUSPENSION AND
0769*                        SET (STRAK) = -1 IF NO 
0770*                        TRACKS AVAILABLE.
0771* 
0772*     STRAK : THE STARTING TRACK NUMBER OF THE
0773*             CONTIGUOUS GROUP ALLOCATED IS 
0774*             STORED IN THIS WORD  ( OR = -1 AS 
0775*             DESCRIBED FOR 'NO SUSPENSION' ABOVE). 
0776* 
0777*     DISC : THE LOGICAL UNIT NUMBER OF THE DISC
0778*            ON WHICH THE TRACK(S) WERE ALLOCATED 
0779*            IS STORED IN THIS WORD.
0780* 
0781*     SECT#: THE NUMBER OF SECTORS PER TRACK FOR
0782*            THIS DISC ALLOCATION IS STORED IN
0783*            THIS WORD. 










 PAGE 0018 #01  ** SYSTEM DISC ALLOCATION/RELEASE PROCESSOR **


0785* 
0786*  B.  DISC TRACK RELEASE 
0787* 
0788*      THE RELEASE  REQUEST PROVIDES FOR RELEASING
0789*     A SINGLE TRACK, A CONTIGUOUS GROUP OF TRACKS
0790*     OR ALL TRACKS ASSIGNED.  THE TRACKS TO BE 
0791*     RELEASED MUST BE EITHER ASSIGNED TO THE 
0792*     REQUESTING PROGRAM (REQUEST CODE 5) OR
0793*     ASSIGNED GLOBALLY (REQUEST CODE 16).
0794* 
0795*      (P)    JSB EXEC
0796*      (P+1)  DEF *+5     (DEFINE RETURN) 
0797*      (P+2)  DEF RCODE   ( "  REQUEST CODE)
0798*      (P+3)  DEF #TRAK   ( " # TRACKS TO RELEASE)
0799*      (P+4)  DEF STRAK   ( " STARTING TRACK #) 
0800*      (P+5)  DEF DISC    ( " DISC LU # ) 
0801*      (P+6)  - RETURN -
0802* 
0803*      RCODE  DEC M 
0804*      #TRAK  DEC N 
0805*      STRAK  NOP 
0806*      DISC   NOP 
0807* 
0808*     M =  5 RELEASE PROGRAM TRACK
0809*       = 16 RELEASE GLOBAL TRACK 
0810* 
0811*     #TRAK: = N, TO INDICATE THE NUMBER OF CONTIG- 
0812*                 UOUS TRACKS TO RELEASE BEGINNING
0813*                 AT THE TRACK NUMBER IN 'STRAK'. 
0814* 
0815*            = -1, TO MEAN RELEASE ALL TRACKS ASSIGNED
0816*                   TO THE USER PROGRAM - 
0817*                   VALID ONLY FOR PROGRAM ASSIGNED TRACKS
0818*                  IN THIS CASE, THE 'STRAK' AND
0819*                  'DISC' PARAMETERS NEED NOT 
0820*                  BE INCLUDED. 
0821* 
0822*     STRAK:  THE STARTING TRACK OF THE GROUP TO
0823*             BE RELEASED IS STORED IN THIS WORD. 
0824* 
0825*     DISC:   THE LOGICAL UNIT NUMBER OF THE DISC 
0826*             CONTAINING THE TRACKS IS STORED 
0827*             IN THIS WORD. 




















 PAGE 0019 #01  ** SYSTEM DISC ALLOCATION/RELEASE PROCESSOR **


0829* 
0830*  **  TRACK  ASSIGNMENT  TABLE  ** 
0831* 
0832*   THE *TAT* IS A VARIABLE LENGTH TABLE DESCRIBING 
0833*  THE AVAILABILITY OF EACH DISC TRACK ON THE 
0834*  SYSTEM DISC AND, IF INCLUDED, THE AUXILIARY DISC.
0835*   THE *TAT* IS CONSTRUCTED BY <RTGEN> BASED ON
0836*  USER PARAMETERS DECLARING THE SIZE OF THE SYSTEM 
0837*  DISC AND THE AVAILABILITY AND SIZE OF AN AUXILIARY 
0838*  DISC. EACH TRACK IS REPRESENTED BY A 1-WORD ENTRY. 
0839*  THE FIRST WORDS OF THE TABLE CORRESPOND TO THE 
0840*  N TRACKS OF THE SYSTEM DISC, USUALLY 32, 64 OR 
0841*  128. THE WORD "TATSD" IN THE BASE PAGE COMMUNI-
0842*  CATION AREA CONTAINS THE SIZE OF THE SYSTEM DISC 
0843*  AS A POSITIVE INTEGER. IF AN AUXILIARLY DISC IS
0844*  INCLUDED, THE REST OF THE *TAT* CONTAINS 1-WORD
0845*  ENTRIES TO DESCRIBE THE TRACKS ON THAT DISC. 
0846*   RTGEN INITIALIZES THE PROTECTED TRACKS OF THE 
0847*  SYSTEM DISC TO BE ASSIGNED TO THE SYSTEM (PERM-
0848*  ANENTLY UNAVAILABLE).
0849*   THE CONTENTS OF A TRACK ASSIGNMENT ENTRY WORD 
0850*  MAY BE ONE OF THE FOUR VALUES: 
0851* 
0852*       0   - AVAILABLE FOR ASSIGNMENT
0853*    100000 - ASSIGNED TO THE SYSTEM (OR PROTECTED) 
0854*    077777 - ASSIGNED GLOBALLY 
0855*     NNNNN - USER PROGRAM ASSIGNMENT. NNNNN IS THE 
0856*              ID SEGMENT ADDRESS OF THE PROGRAM. 
0857* 
0858*  THE WORD "TATLG" IN THE BP COMMUNICATION AREA
0859*  CONTAINS THE NEGATIVE LENGTH OF THE TAT. 
0860*  THE WORD "TAT" CONTAINS THE FWA OF THE TABLE.
0861* 
0862* 
0863** VARIABLE NUMBER OF SECTORS PER TRACK ON FIXED-HEAD SYSTEMS **
0864* 
0865*    ONE RTE CAN ACCOMODATE TWO FIXED-HEAD
0866*   DISC UNITS TERMED THE SYSTEM DISC (LU #2) 
0867*   AND THE AUXILIARY DISC (LU#3). THESE DISCS
0868*   MAY BE DIFFERENT MODELS OF A FIXED-HEAD 
0869*   DISC AND WITH DIFFERING NUMBER OF SECTORS 
0870*   PER TRACK. FOR THIS REASON THE WORDS
0871*    'SECT2' AND 'SECT3' IN THE BASE PAGE 
0872*   COMMUNICATION AREA CONTAIN THE NUMBER OF
0873*   SECTORS PER TRACK FOR LOGICAL UNITS 2 AND 3.
0874* 
0875* 
















 PAGE 0020 #01  ** SYSTEM DISC ALLOCATION/RELEASE PROCESSOR **


0877* TRACK  ALLOCATION  (USER CALL)
0878* 
0879  00667 002401  DISC1 CLA,RSS       SET 
0880  00670 002404  DISCA CLA,INA        ENTRY
0881  00671 073272R       STA TEMP7      SWITCH 
0882  00672 061676        LDA RQCNT     INSURE
0883  00673 042741R       ADA N4        THAT
0884  00674 002002        SZA            4 PARAMETERS ARE SUPPLIED. 
0885  00675 027104R       JMP DERR1     -NO, ERROR 'DR01' 
0886* 
0887  00676 161701        LDA RQP2,I    GET '#TRAK' PARAMETER TO CHECK
0888  00677 012742R       AND MASK4      'N'. REMOVE BIT 15,
0889  00700 002003        SZA,RSS       -ERROR IF 
0890  00701 027106R       JMP DERR2      #TRAK = 0. 
0891* 
0892  00702 067272R       LDB TEMP7     (A)=# TRACKS
0893  00703 006002        SZB           (B)=ID SEGMENT ADDRESS
0894  00704 007401        CCB,RSS           OR GLOBAL FLAG
0895  00705 065717        LDB XEQT
0896  00706 005665        ELB,CLE,ERB 
0897  00707 017170R       JSB DREQ      CALL FOR CONTIGUOUS ALLOCATION
0898* 
0899  00710 006002        SZB           IF TRACKS ALLOCATED,
0900  00711 026724R       JMP DSC3       CONTINUE.
0901* 
0902* NO TRACKS ARE AVAILABLE 
0903* 
0904  00712 003400        CCA           CHECK SUSPENSION
0905  00713 165701        LDB RQP2,I     PARAMETER. 
0906  00714 006020        SSB           IF BIT 15 = 1, GO TO SET STRAK
0907  00715 026733R       JMP DSC4       = -1 AND RETURN TO CALLER. 
0908* 
0909* SUSPEND PROGRAM - LINK INTO DISC SUSPENSION LIST
0910* 
0911  00716 061717        LDA XEQT     SET ID SEGMENT ADDRESS OF PROGRAM
0912  00717 072722R       STA DSC2      IN CALL TO <LIST>.
0913* 
0914  00720 016003X       JSB LIST     SUSPEND
0915  00721 000105        OCT 105       PROGRAM 
0916  00722 000000  DSC2  NOP           - DISC SUSPENSION LIST -
0917  00723 026005X       JMP XEQ       - EXIT -
0918* 
0919* AVAILABLE TRACK FOUND 
0920* 
0921  00724 073264R DSC3  STA TEMP1     SAVE STARTING TRACK #.
0922  00725 061757        LDA SECT2     SET TO STORE
0923  00726 056737R       CPB .3         # SECTORS PER TRACK IN 
0924  00727 061760        LDA SECT3      'SECT#' DEPENDING ON LU # IN B.
0925  00730 171704        STA RQP5,I    SET # SECTORS.
0926* 
0927  00731 175703        STB RQP4,I    SET DISC LOGICAL UNIT #.
0928  00732 063264R       LDA TEMP1     (A)= STARTING TRACK #.
0929* 
0930  00733 171702  DSC4  STA RQP3,I    SET TRACK # OR -1.
0931  00734 061677        LDA RQRTN    SET *XSUSP* TO 
0932  00735 171730        STA XSUSP,I   BE EXIT ADDRESS 







 PAGE 0021 #01  ** SYSTEM DISC ALLOCATION/RELEASE PROCESSOR **


0933  00736 026005X       JMP XEQ        - EXIT -.
0934* 
0935  00737 000003  .3    DEC 3 
0936  00740 177776  N2    DEC -2
0937  00741 177774  N4    DEC -4
0938  00742 077777  MASK4 OCT 77777 
0939* 
0940* 
0941* TRACK RELEASE  (USER CALL)
0942* 
0943  00743 002501  DISC2 CLA,CLE,RSS    SET
0944  00744 002704  DISCB CLA,CCE,INA     ENTRY 
0945  00745 073272R       STA TEMP7      SWITCH 
0946  00746 061676        LDA RQCNT     INSURE
0947  00747 002003        SZA,RSS       THAT AT LEAST 1 PARAMETER GIVEN.
0948  00750 027104R       JMP DERR1     - NO, ERROR 
0949  00751 061717        LDA XEQT      (A)= ID SEGMENT ADDRESS 
0950  00752 165701        LDB RQP2,I    GET PARAMETER:
0951  00753 056173R       CPB N1         IF = -1, 
0952  00754 027020R       JMP DSC7        GO TO RELEASE ALL FOR THIS PRO
0953* 
0954  00755 061676        LDA RQCNT     INSURE THAT THE 
0955  00756 052737R       CPA .3         STRAK AND DISC PARAMETERS
0956  00757 002001        RSS            ARE PROVIDED.
0957  00760 027104R       JMP DERR1     -NO, ERROR
0958* 
0959  00761 161703        LDA RQP4,I    GET DISC LU #.
0960  00762 052172R       CPA .2        CHECK VALIDITY. 
0961  00763 002001        RSS           -ERROR 'DR02' IF
0962  00764 052737R       CPA .3         NOT
0963  00765 002001        RSS            2 OR 
0964  00766 027106R       JMP DERR2      3
0965* 
0966  00767 065656        LDB TAT       SET (B) = FWA OF TAT FOR
0967  00770 052737R       CPA .3         SYSTEM DISC OR FOR 
0968  00771 045756        ADB TATSD      AUXILIARY DISC 
0969  00772 145702        ADB RQP3,I    ADD STRAK FROM USER CALL. 
0970* 
0971  00773 161701        LDA RQP2,I    GET #TRAK.
0972  00774 003004        CMA,INA       SET NEGATIVE FOR
0973  00775 002021        SSA,RSS        COUNTER. ERROR IF 0 OR 
0974  00776 027106R       JMP DERR2      ORIGINALLY NEGATIVE. 
0975  00777 073264R       STA TEMP1     SET COUNTER.
0976  01000 073271R       STA TEMP6 
0977* 
0978  01001 063272R       LDA TEMP7     RELEASE 
0979  01002 002002        SZA            NON-GLOBAL 
0980  01003 027024R       JMP DSC8       GLOBAL 
0981* 
0982  01004 160001  DSC5  LDA B,I       GET CURRENT TRACK ASSIGNMENT
0983  01005 051717        CPA XEQT      COMPARE TO PROGRAM ID SEG ADDRES
0984  01006 002401        CLA,RSS 
0985  01007 027110R       JMP DERR3      OTHERWISE, REQUEST ERROR.
0986  01010 170001        STA B,I        = 0 TO BE AVAILABLE. 
0987  01011 006004        INB           ADD 1 TO TAT ADDRESS. 
0988  01012 037264R       ISZ TEMP1     -INDEX COUNTER. 







 PAGE 0022 #01  ** SYSTEM DISC ALLOCATION/RELEASE PROCESSOR **


0989  01013 027004R       JMP DSC5       -MORE
0990* 
0991  01014 017313R DSC6  JSB DSKED     FINISHED-SCHEDULE DISC SUSP PROG
0992* 
0993  01015 061677        LDA RQRTN    SET RETURN ADDRESS 
0994  01016 171730        STA XSUSP,I   AS POINT OF SUSPENSION
0995  01017 026005X       JMP XEQ        - EXIT - 
0996* 
0997  01020 002040  DSC7  SEZ 
0998  01021 027104R       JMP DERR1     CANNOT RELEASE ALL GLOBAL 
0999  01022 017127R       JSB SDSCR     RELEASE ALL 
1000  01023 027014R       JMP DSC6      SPC 1 
1001  01024 077267R DSC8  STB TEMP4     SAVE ADDR OF
1002  01025 077272R       STB TEMP7      ENTRY IN TAT 
1003  01026 161702        LDA RQP3,I    SAVE TRACK
1004  01027 073273R       STA TEMP8      NUMBER 

1006  01030 003400        CCA 
1007  01031 141703        ADA RQP4,I    SET DISC QUEUE
1008  01032 041652        ADA DRT        ADDRESS
1009  01033 160000        LDA A,I        INTO 
1010  01034 013401R       AND MASK3      EQT1 
1011  01035 016007X       JSB $CVEQ 

1013  01036 163272R DSC9  LDA TEMP7,I   GLOBAL
1014  01037 052742R       CPA MASK4      TRACK? 
1015  01040 002001        RSS           YES-GO SEE IF IN USE
1016  01041 027077R       JMP DSC15     NO-RETURN TO PROG WITH A=-2 
1017  01042 165660        LDB EQT1,I    GET REQUESTS QUEUED ON DISC 
1018  01043 077274R DSC10 STB TEMP9     DISC QUEUE EXHAUSTED? 
1019  01044 006003        SZB,RSS 
1020  01045 027063R       JMP DSC12      YES-GO TO NEXT TRACK 
1021  01046 006004        INB            NO-SEE IF REQUEST
1022  01047 160001        LDA B,I        IS FOR THIS TRACK
1023  01050 001727        ALF,ALF 
1024  01051 012737R       AND .3
1025  01052 151703        CPA RQP4,I    SAME LU? I.E. DISC? 
1026  01053 002001        RSS            YES-CHECK IF SAME TRACK
1027  01054 027061R       JMP DSC11      NO 
1028  01055 046737R       ADB .3
1029  01056 160001        LDA B,I 
1030  01057 053273R       CPA TEMP8     SAME TRACK? 
1031  01060 027101R       JMP DSC15+2    YES-RETURN WITH A=-1 

1033  01061 167274R DSC11 LDB TEMP9,I   GO TO NEXT REQUEST
1034  01062 027043R       JMP DSC10      IN QUEUE 

1036  01063 037264R DSC12 ISZ TEMP1     ALL TRACKS CHECKED
1037  01064 002001        RSS            FOR GLOBAL & NOT IN USE? 
1038  01065 027071R       JMP DSC13     YES-RELEASE THEM
1039  01066 037272R       ISZ TEMP7     NO- 
1040  01067 037273R       ISZ TEMP8      CHECK NEXT TRACK 
1041  01070 027036R       JMP DSC9

1043  01071 177267R DSC13 STB TEMP4,I   CLEAR ALL 
1044  01072 037267R       ISZ TEMP4      TRACKS 







 PAGE 0023 #01  ** SYSTEM DISC ALLOCATION/RELEASE PROCESSOR **


1045  01073 037271R       ISZ TEMP6 
1046  01074 027071R       JMP DSC13     SETUP TO RETURN 
1047  01075 175731        STB XA,I      TO PROGRAM
1048  01076 027014R       JMP DSC6       WITH A=0 

1050  01077 002404  DSC15 CLA,INA       STORE A REGISTER
1051  01100 003001        CMA,RSS        TO INDICATE WHY
1052  01101 003400        CCA            NO TRACKS RELEASED 
1053  01102 171731        STA XA,I
1054  01103 027015R       JMP DSC6+1
1055* 
1056* DISC REQUEST ERROR SECTION
1057* 
1058  01104 067116R DERR1 LDB DA01     -ILLEGAL DISC REQUEST - DR01 - 
1059  01105 027111R       JMP DERR
1060  01106 067117R DERR2 LDB DA02     -ILLEGAL TRACK #      - DR02 - 
1061  01107 027111R       JMP DERR
1062  01110 067120R DERR3 LDB DA03     -TRACK NOT ASSIGNED TO PROG- DR03
1063  01111 063121R DERR  LDA DRA      (A) = DR  IN ASCII.
1064  01112 017342R       JSB ERMSG    PRINT ERROR DIAG. AND ABORT PROG 
1065  01113 061717        LDA XEQT
1066  01114 017417R       JSB ABORT 
1067  01115 026005X       JMP XEQ       -EXIT-
1068* 
1069  01116 030061  DA01  ASC 1,01
1070  01117 030062  DA02  ASC 1,02
1071  01120 030063  DA03  ASC 1,03
1072  01121 042122  DRA   ASC 1,DR
1073* 
1074* 
1075* SUBROUTINE:  <ODSCR>
1076* 
1077*  PURPOSE:  THIS SUBROUTINE SCANS THE TAT
1078*           (TRACK ASSIGNMENT TABLE) AND
1079*           RELEASES ANY TRACKS ASSIGNED
1080*           TO THE PROGRAM WHOSE ID SEGMENT 
1081*           ADDRESS IS IN THE A REGISTER. 
1082* 
1083* 
1084*  CALL: (A) = ID SEGMENT ADDRESS OF PROGRAM
1085*              WHOSE TRACKS ARE TO BE RELEASED
1086*        (P)      JSB ODSCR  (OR $OTRL) 
1087*        (P+1)     -RETURN- 
1088* 
1089* 
1090  01122 000000  ODSCR NOP 
1091  01123 073266R       STA TEMP3      SAVE ID SEGMENT ADDRESS
1092  01124 063122R       LDA *-2         AND RETURN ADDRESS FOR
1093  01125 073127R       STA SDSCR       SDSCR ROUTINE AND JUMP
1094  01126 027150R       JMP SDSC1       TO IT 













 PAGE 0024 #01  ** SYSTEM DISC ALLOCATION/RELEASE PROCESSOR **


1096* 
1097* SUBROUTINE:  < SDSCR >
1098* 
1099*  PURPOSE:  THIS ROUTINE SCANS THE  TAT
1100*           (TRACK ASSIGNMENT TABLE) AND
1101*           RELEASES ANY TRACKS ASSIGNED
1102*           TO THE PROGRAM WHOSE ID SEGMENT 
1103*           IS DEFINED IN *XEQT* OR ANY TRACKS ASSIGNED 
1104*           GLOBALLY DEPENDING ON A REG CONTENTS ON ENTRY.
1105* 
1106* 
1107*  EXCEPTION: IF THE NAME OF THE SUBJECT PROGRAM IS 
1108*             "EDIT", AN IMMEDIATE EXIT IS MADE TO
1109*             AVOID RELEASING SAVED SOURCE FILES AND
1110*             TRACKS IN THE NAME OF THE EDITOR PROGRAM. 
1111* 
1112*  CALL: (A) = ID SEGMENT ADDRESS OF PROGRAM
1113*              OR 077777B (GLOBAL FLAG) 
1114*        (P)     JSB SDSCR  (OR $SDRL)
1115*        (P+1)    -RETURN-
1116* 
1117* 
1118  01127 000000  SDSCR NOP 
1119  01130 073266R       STA TEMP3 
1120  01131 070001        STA B 
1121  01132 047463R       ADB .12 
1122  01133 160001        LDA B,I        CHECK
1123  01134 053164R       CPA SDSC2      NAME 
1124  01135 006005        INB,RSS        FOR
1125  01136 027150R       JMP SDSC1       "EDIT " 
1126  01137 160001        LDA B,I 
1127  01140 053165R       CPA SDSC2+1 
1128  01141 006005        INB,RSS 
1129  01142 027150R       JMP SDSC1 
1130  01143 160001        LDA B,I 
1131  01144 013402R       AND MASK5 
1132  01145 033464R       IOR .40 
1133  01146 053166R       CPA SDSC2+2 
1134  01147 127127R       JMP SDSCR,I    YES,  RETURN.
1135* 
1136  01150 061656  SDSC1 LDA TAT      SET  *TAT* 
1137  01151 073264R       STA TEMP1     ADDRESS 
1138  01152 061755        LDA TATLG     AND TAT LENGTH
1139  01153 073265R       STA TEMP2     AS INDEX. 
1140  01154 006400        CLB          (B) = 0 FOR RELEASE
1141* 
1142  01155 163264R       LDA TEMP1,I  GET CURRENT TRACK ASSIGNMENT.
1143  01156 053266R       CPA TEMP3     IF ASSIGNED TO THIS PROGRAM,
1144  01157 177264R       STB TEMP1,I   RELEASE IT. 
1145  01160 037264R       ISZ TEMP1    SET
1146  01161 037265R       ISZ TEMP2     FOR 
1147  01162 027155R       JMP *-5       NEXT TRACK. 
1148  01163 127127R       JMP SDSCR,I    -FINISHED- 
1149* 
1150  01164 042504  SDSC2 ASC 3,EDIT








 PAGE 0025 #01  ** SYSTEM DISC ALLOCATION/RELEASE PROCESSOR **


1152  01167 100000  MSIGN OCT 100000






























































 PAGE 0026 #01  ** SYSTEM DISC ALLOCATION/RELEASE PROCESSOR **


1154* 
1155* SYSTEM SUBROUTINE:  < DREQ >
1156* 
1157*  PURPOSE:  THIS SUBROUTINE PROVIDES FOR THE 
1158*           ALLOCATION OF 'N' CONTIGUOUS TRACKS 
1159*            FOR BOTH SYSTEM ROUTINES AND NORMAL
1160*            USER PROGRAMS. THE 'N' CONTIGUOUS
1161*            TRACKS ALLOCATED WILL BE ON THE SAME 
1162*            DISC UNIT, NO SPANNING OF DISCS WITH 
1163*            ONE ALLOCATION IS ALLOWED. 
1164* 
1165*  CALL:    (A)  = NUMBER OF CONTIGUOUS TRACKS
1166*            (B)  = : 0 FOR CALL FROM SYSTEM ROUTINE
1167*                   : (XEQT) FOR AN ACTUAL USER 
1168*                     REQUEST. THE ID SEGMENT 
1169*                     ADDRESS (XEQT) IS STORED IN 
1170*                     THE ASSIGNED TRACK WORDS IN 
1171*                     THE -TAT-.
1172*                   : (077777B) FOR A GLOBAL ASSIGNMENT REQUEST.
1173*                     THIS OCTAL NUMBER IS STORED IN THE
1174*                     ASSIGNED TRACK WORDS IN THE -TAT-.
1175* 
1176*      (P)      JSB  DREQ 
1177*      (P+1)    -RETURN-
1178* 
1179*           ON RETURN: 1) B = 0 IF N TRACKS WERE
1180*                          NOT AVAILABLE
1181* 
1182*                      2) A =  STARTING TRACK ADDRESS 
1183*                              OF N TRACKS. 
1184*                         B = LOGICAL UNIT # OF DISC
1185* 
1186* 
1187  01170 000000  DREQ  NOP 
1188  01171 073264R       STA TEMP1    SAVE  'N'
1189* 
1190  01172 006003        SZB,RSS       IF B=0, SET (B) = 100000 FOR
1191  01173 067167R       LDB MSIGN      SYSTEM ASSIGNMENT. 
1192  01174 077271R       STB TEMP6     SAVE ASSIGNMENT VALUE.
1193* 
1194  01175 061656        LDA TAT      SET  *TAT* 
1195  01176 073266R       STA TEMP3     ADDRESS 
1196  01177 041756        ADA TATSD 
1197  01200 073272R       STA TEMP7 
1198  01201 061755        LDA TATLG     AND TAT LENGTH
1199  01202 073267R       STA TEMP4     AS  INDEX.
1200  01203 002400        CLA          INITIALIZE 
1201  01204 073270R       STA TEMP5     TRACK COUNTER.
1202* 
1203  01205 163266R DREQ1 LDA TEMP3,I  GET CURRENT TRACK ASSIGNMENT.
1204  01206 002003        SZA,RSS      IF NOT ASSIGNED, 
1205  01207 027216R       JMP DREQ3     CHECK FOR N CONTIGUOUS. 
1206  01210 037266R       ISZ TEMP3    SET
1207  01211 037270R DREQ5 ISZ TEMP5     FOR 
1208  01212 037267R       ISZ TEMP4      NEXT 
1209  01213 027205R       JMP DREQ1       TRACK.







 PAGE 0027 #01  ** SYSTEM DISC ALLOCATION/RELEASE PROCESSOR **


1210* 
1211  01214 006400  DREQ2 CLB          NOT AVAILABLE, EXIT
1212  01215 127170R       JMP DREQ,I    WITH  (B) = 0.
1213* 
1214* AVAILABLE TRACK FOUND - CHECK NEXT 'N-1' TRACKS 
1215* 
1216  01216 067270R DREQ3 LDB TEMP5    (B) = FIRST TRACK ADDRESS. 
1217  01217 063264R       LDA TEMP1    SET
1218  01220 003004        CMA,INA       'N' 
1219  01221 073265R       STA TEMP2      AS INDEX.
1220  01222 163266R DREQ4 LDA TEMP3,I  CHECK CURRENT
1221  01223 002002        SZA           TRACK ASSIGNMENT. 
1222  01224 027205R       JMP DREQ1     -ASSIGNED, CONTINUE OTHER SCAN. 
1223  01225 037266R       ISZ TEMP3    INDEX CURRENT *TAT* ADDRESS. 
1224  01226 037265R       ISZ TEMP2    INDEX  -'N'
1225  01227 002001        RSS           NOT ZERO, CHECK NEXT TRACK. 
1226  01230 027240R       JMP DREQ6      - FOUND N TRACKS - 
1227  01231 063266R       LDA TEMP3     END OF SYSTEM 
1228  01232 053272R       CPA TEMP7      DISC (LU 2)? 
1229  01233 027211R       JMP DREQ5     YES - DO NOT SPAN 
1230  01234 037270R       ISZ TEMP5    INDEX TRACK COUNTER
1231  01235 037267R       ISZ TEMP4     AND TRACK INDEX.
1232  01236 027222R       JMP DREQ4      -NOT FINISHED WITH TAT SIZE. 
1233  01237 027214R       JMP DREQ2     NOT N AVAILABLE.
1234* 
1235* N CONTIGUOUS TRACKS FOUND 
1236* 
1237  01240 077266R DREQ6 STB TEMP3    SAVE FIRST TRACK #.
1238  01241 045656        ADB TAT      SET STARTING TRACK 
1239  01242 077267R       STB TEMP4     *TAT* ADDRESS.
1240  01243 063264R       LDA TEMP1    SET
1241  01244 003004        CMA,INA       'N' 
1242  01245 073265R       STA TEMP2      AS INDEX.
1243  01246 063271R       LDA TEMP6     SET TRACK WORD
1244  01247 173267R       STA TEMP4,I    = 100000 FOR SYSTEM USE
1245  01250 037267R       ISZ TEMP4      OR TO THE ID SEGMENT ADDRESS 
1246  01251 037265R       ISZ TEMP2      OF THE USER PROGRAM OR TO
1247  01252 027247R       JMP *-3        077777B FOR GLOBAL ASSIGNMENT. 
1248  01253 061756        LDA TATSD    SUBTRACT SYS DISC
1249  01254 003004        CMA,INA       SIZE FROM STARTING
1250  01255 043266R       ADA TEMP3      TRACK #. 
1251  01256 066172R       LDB .2       (B) = 2 FOR SYSTEM DISC. 
1252  01257 002021        SSA,RSS      IF TRACK # GT SYS DISC SIZE, 
1253  01260 006004        INB           SET (B)=3 FOR AUX. DISC 
1254  01261 056172R       CPB .2       (A) = STARTING 
1255  01262 063266R       LDA TEMP3     TRACK # IN APPROPRIATE DISC 
1256  01263 127170R       JMP DREQ,I    -EXIT-. 

1258  01264 000000  TEMP1 NOP 
1259  01265 000000  TEMP2 NOP 
1260  01266 000000  TEMP3 NOP 
1261  01267 000000  TEMP4 NOP 
1262  01270 000000  TEMP5 NOP 
1263  01271 000000  TEMP6 NOP 
1264  01272 000000  TEMP7 NOP 
1265  01273 000000  TEMP8 NOP 







 PAGE 0028 #01  ** SYSTEM DISC ALLOCATION/RELEASE PROCESSOR **


1266  01274 000000  TEMP9 NOP 






























































 PAGE 0029 #01  ** SYSTEM DISC ALLOCATION/RELEASE PROCESSOR **


1268* 
1269* SYSTEM SUBROUTINE:  < DREL >
1270* 
1271*  PURPOSE:  THIS ROUTINE RELEASES 'N' CONTIGUOUS 
1272*           TRACKS (ASSIGNED TO THE SYSTEM) 
1273*           BEGINNING AT TRACK 'M'. 
1274* 
1275*  CALL:    (A) = 'M' - STARTING TRACK # (+ SIZE OF 
1276*                        SYSTEM DISC IF LU #3)
1277*           (B) = 'N' - # OF CONTIGUOUS TRACKS
1278*      (P) )   JSB  DREL
1279*      (P+1)   -RETURN- 
1280* 
1281* 
1282  01275 000000  DREL  NOP 
1283  01276 041656        ADA TAT      COMPUTE  *TAT* ADDRESS 
1284  01277 073264R       STA TEMP1     OF STARTING ADDRESS.
1285  01300 160000        LDA A,I      GLOBAL TRACKS
1286  01301 002021        SSA,RSS       ARE NOT TO
1287  01302 127275R       JMP DREL,I    BE RELEASED.
1288  01303 007004        CMB,INB      SET 'N' AS INDEX.
1289  01304 002400        CLA          SET CURRENT
1290  01305 173264R       STA TEMP1,I   TRACK 
1291  01306 037264R       ISZ TEMP1      RELEASED 
1292  01307 006006        INB,SZB 
1293  01310 027305R       JMP *-3 
1294  01311 017313R       JSB DSKED    SCHEDULE ANY SUSPENDED PROGRAMS. 
1295  01312 127275R       JMP DREL,I    -EXIT-
1296* 
1297* SUBROUTINE:  < DSKED >
1298* 
1299*  PRUPOSE: THIS ROUTINE CALLS FOR THE
1300*          SCHEDULING OF ALL USER PROGRAMS
1301*          SUSPENDED BECAUSE OF DISC TRACK
1302*          AVAILABILITY.
1303* 
1304*  CALL:  (P)     JSB  DSKED
1305*         (P+1)   - RETURN -
1306* 
1307* 
1308  01313 000000  DSKED NOP 
1309  01314 061715        LDA SUSP4    GET DISC SUSPENSION LIST POINTER.
1310  01315 002003  DSKD1 SZA,RSS      IF EMPTY LIST, 
1311  01316 127313R       JMP DSKED,I   EXIT. 
1312* 
1313  01317 073324R       STA DSKD2    SAVE ID SEGMENT ADDRESS. 
1314  01320 160000        LDA A,I      GET NEXT LINK ADDRESS
1315  01321 073264R       STA TEMP1     AND SAVE. 
1316* 
1317  01322 016003X       JSB LIST     CALL *SCHEDULER* TO
1318  01323 000101        OCT 101       LINK INTO SCHEDULE LIST.
1319  01324 000000  DSKD2 NOP           -ID SEGMENT ADDRESS-
1320* 
1321  01325 063264R       LDA TEMP1    IF END OF LIST 
1322  01326 027315R       JMP DSKD1     EXIT - ELSE, SCHEDULE NEXT PROGR








 PAGE 0030 #01  * EXEC  - ERROR MESSAGE AND ABORT SECTION * 


1324* 
1325*  ERROR SECTION
1326* 
1327*  THE FOLLOWING DIAGNOSTICS ARE OUTPUT ON THE
1328* SYSTEM TELETYPEWRITER ON DETECTION OF:
1329* 
1330*   1) VALID MEMORY PROTECT VIOLATION (I.E THE
1331*       INSTRUCTION CAUSING THE VIOLATION IS
1332*       NOT  JSB EXEC.
1333* 
1334*        MP  -PNAME-  -PADDR- 
1335* 
1336*   2) REQUEST CODE UNDEFINED OR ILLEGAL
1337*       NUMBER OF PARAMETERS
1338* 
1339*        RQ   -PNAME- -PADDR- 
1340* 
1341*  THE ROUTINE -ERMSG- IS USED TO FORMAT
1342* THE DIAGNOSTIC AND CALL FOR ITS OUTPUT. 
1343* 
1344* 
1345  01327 063337R MPERR LDA MP       (A) =  'MP'
1346  01330 002001        RSS 
1347* 
1348  01331 063341R RQERR LDA RQ1      (A)  'RQ'
1349  01332 067340R       LDB BLANK    (B) = BLANKS 
1350  01333 017342R       JSB ERMSG 
1351  01334 061717        LDA XEQT     ABORT
1352  01335 017417R       JSB ABORT     PROGRAM.
1353  01336 026005X       JMP XEQ 
1354* 
1355  01337 046520  MP    ASC 1,MP
1356  01340 020040  BLANK ASC 1,
1357  01341 051121  RQ1   ASC 1,RQ
1358* 
1359* SUBROUTINE:  <ERMSG>
1360* 
1361*  PURPOSE:  THIS ROUTINE FORMATS A DIAGNOSTIC
1362*           MESSAGE WHICH CONTAINS A FOUR 
1363*           CHARACTER MNEMONIC DESCRIBING THE 
1364*           ERROR WITH THE PROGRAM NAME AND 
1365*           LOCATION OF THE ERROR. IT THEN
1366*           CALLS THE ROUTINE  <SYSMG> TO 
1367*           OUTPUT THE MESSAGE. 
1368* 
1369*  CALL:    (A),(B) CONTAIN A 4 ASCII CHARACTER 
1370*           MNEMONIC OR CODE DESCRIBING THE ERROR 
1371* 
1372*     (P)   JSB  ERMSG
1373*     (P+1) - RETURN - (REGISTERS MEANINGLESS)













 PAGE 0031 #01  * EXEC  - ERROR MESSAGE AND ABORT SECTION * 


1375* 
1376  01342 000000  ERMSG NOP 
1377* 
1378  01343 073406R       STA MSG+1    SET ERROR MNEMONIC IN
1379  01344 077407R       STB MSG+2     FIRST 4 CHARACTERS OF MESSAGE.
1380* 
1381  01345 065717        LDB XEQT     SET (B) = ADDRESS OF 3-WORD
1382  01346 047463R       ADB .12       PROGRAM NAME IN ID SEGMENT
1383  01347 160001        LDA B,I      SET
1384  01350 073411R       STA MSG+4     PROGRAM 
1385  01351 006004        INB           NAME
1386  01352 160001        LDA B,I       IN
1387  01353 073412R       STA MSG+5     MESSAGE.
1388  01354 006104        CLE,INB      (E=0 FOR ASCII CONVERSION) 
1389  01355 160001        LDA B,I 
1390  01356 013402R       AND MASK5 
1391  01357 033464R       IOR .40 
1392  01360 073413R       STA MSG+6 
1393* 
1394  01361 161730        LDA XSUSP,I  GET LOCATION OF ERROR
1395  01362 016001X       JSB CVT3     CONVERT TO OCTAL/ASCII FORMAT
1396  01363 070001        STA B        (B) = ADDR. OF 3-WORD BLOCK
1397  01364 160001        LDA B,I      MAKE 
1398  01365 013401R       AND MASK3     LEADING 
1399  01366 033403R       IOR UBLNK     ZERO A BLANK FOR
1400  01367 073414R       STA MSG+7     5-DIGIT MEMORY ADDRESS. 
1401  01370 006004        INB          SET
1402  01371 160001        LDA B,I       ADDRESS 
1403  01372 073415R       STA MSG+8     IN
1404  01373 006004        INB           MESSAGE.
1405  01374 160001        LDA B,I 
1406  01375 073416R       STA MSG+9 
1407* 
1408  01376 063404R       LDA MSGA     CALL <SYSTEM MESSAGE> TO 
1409  01377 016002X       JSB SYSMG     OUTPUT DIAGNOSTIC.
1410* 
1411  01400 127342R       JMP ERMSG,I 
1412* 
1413  01401 000377  MASK3 OCT 377 
1414  01402 177400  MASK5 OCT 177400
1415  01403 020000  UBLNK OCT 20000 
1416* 
1417  01404 001405R MSGA  DEF *+1 
1418* 
1419  01405 177756  MSG   DEC -18 
1420  01406 020040        ASC 9,
1421* 
















 PAGE 0032 #01  * EXEC  - ERROR MESSAGE AND ABORT SECTION * 


1423* ROUTINE:    < ABORT > 
1424* 
1425*  PURPOSE:  THIS ROUTINE PROVIDES FOR REMOVING 
1426*           A USER PROGRAM FROM EXECUTION USUALLY 
1427*           AFTER AN ERROR CONDITION IS DETECTED
1428*           WHICH PROHIBITS CONTINUED EXECUTION.
1429*           THE PROGRAM IS SET TO THE DORMANT 
1430*           STATE, TIME INTERVAL REMOVED AND ANY
1431*           DISC TRACKS ASSIGNED TO THE PROGRAM 
1432*           RELEASED. 
1433* 
1434*            THE PROGRAM NAME IS SET IN THE MESSAGE 
1435*           "XXXXX ABORTED" WHICH IS PRINTED
1436*           ON THE SYSTEM TELETYPE. 
1437* 
1438*  CALL:    (A) = ID SEGMENT ADDRESS
1439*         (P)   JSB ABORT 
1440*         (P+1) -RETURN- (REGISTERS MEANINGLESS)
1441* 
1442  01417 000000  ABORT NOP          SET ID SEGMENT ADDRESS 
1443  01420 073423R       STA *+3       IN CALL TO <LIST>.
1444  01421 016003X       JSB LIST     CALL TO SET
1445  01422 000100        OCT 100       PROGRAM IN DORMANT LIST.
1446  01423 000000  AB1   NOP          -HOLDS PROGRAM ID SEGMENT ADDR.
1447  01424 063423R       LDA AB1      (A) = ID SEGMENT ADDRESS 
1448  01425 017127R       JSB SDSCR    RELEASE ANY DISC TRACKS
1449  01426 017313R       JSB DSKED    SCHEDULE ANY DISC SUSP. PROGRAMS.
1450  01427 067423R       LDB AB1      (B) = ADDR. OF -TLINK- IN
1451  01430 047462R       ADB .16        ID SEGMENT.
1452  01431 016004X       JSB TREMP    REMOVE TIME SELECTION
1453  01432 067423R       LDB AB1      SET (B) = ADDRESS OF 3-WORD
1454  01433 047463R       ADB .12       PROGRAM NAME IN ID SEGMENT. 
1455  01434 160001        LDA B,I      SET
1456  01435 073453R       STA ABM       PROGRAM 
1457  01436 006004        INB           NAME
1458  01437 160001        LDA B,I       IN
1459  01440 073454R       STA ABM+1     MESSAGE 
1460  01441 006004        INB 
1461  01442 160001        LDA B,I 
1462  01443 013402R       AND MASK5 
1463  01444 033464R       IOR .40 
1464  01445 073455R       STA ABM+2 
1465  01446 063451R       LDA ABMA     PRINT MESSAGE: 
1466  01447 016002X       JSB SYSMG     "XXXXX ABORTED" 
1467  01450 127417R       JMP ABORT,I  -EXIT- 
1468* 
1469  01451 001452R ABMA  DEF *+1 
1470  01452 177763        DEC -13 
1471  01453 054130  ABM   ASC 7,XXXXX ABORTED 

1473  01462 000020  .16   DEC 16
1474  01463 000014  .12   DEC 12
1475  01464 000040  .40   OCT 40










 PAGE 0033 #01  *  EXEC -- EQU TABLE 


1477* 
1478* ENTRY POINTS OF THE MODULES OF THE REAL-TIME
1479* EXECUTIVE BEGIN WITH '$' TO AVOID DUPLICATE 
1480* ENTRY POINT NAMES WITH USER PROGRAMS. 
1481* 
1482  01417         $ABRT EQU ABORT 
1483  01342         $ERMG EQU ERMSG 
1484  00437         $ALC  EQU .ALC. 
1485  00534         $RTN  EQU .RTN. 
1486  00002         $RQST EQU RTRQP 
1487  00200         $LIBR EQU LIBR
1488  00307         $LIBX EQU LIBX
1489  01170         $DREQ EQU DREQ
1490  01275         $DREL EQU DREL
1491  01127         $SDRL EQU SDSCR 
1492  01122         $OTRL EQU ODSCR 
1493  01313         $SDSK EQU DSKED 
1494  00001         CVT3  EQU  $CVT3
1495  00002         SYSMG EQU $SYMG 
1496  00003         LIST  EQU $LIST 
1497  00004         TREMP EQU $TREM 
1498  00005         XEQ   EQU $XEQ

1500  00000         A     EQU 0 
1501  00001         B     EQU 1 






































 PAGE 0034 #01  *  EXEC -- REQUEST CODE TABLE


1503*  ***  REQUEST CODE TABLE  *** 
1504* 
1505*  THIS DEFINES THE RELATION FOR SYSTEM 
1506* REQUEST CODES AND CORRESPONDING PROCESSORS. 
1507* THE TABLE CONSISTS OF ONE-WORD ENTRIES IN 
1508* NUMERIC ORDER CORRESPONDING TO THE DEFINED
1509* SYSTEM REQUEST CODES. THE CONTENTS OF EACH
1510* ENTRY IS THE BASE PAGE LINKAGE ADDRESS OF 
1511* THE WORD CONTAINING THE ENTRY POINT ADDRESS 
1512* OF THE PROCESSOR. AN  -EXT- MUST BE USED
1513* WITH THE -DEF- IN DEFINING THE TABLE. 
1514* 
1515*  THE  WORD LABELLED -CODE#- CONTAINS THE
1516* TOTAL # OF REQUEST CODE.
1517* 
1518  01465 001465R RQTBL DEF *        DEFINE FWA-1 OF TABLE
1519* 
1520                      EXT $IORQ 
1521  00010         IOREQ EQU $IORQ 
1522  01466 000010X       DEF IOREQ    CODE 1   I/O READ
1523  01467 000010X       DEF IOREQ    CODE 2   I/O WRITE 
1524  01470 000010X       DEF IOREQ    CODE 3   I/O CONTROL 
1525* 
1526  01471 000667R       DEF DISC1    CODE 4   DISC TRACK ALLOCATION 
1527  01472 000743R       DEF DISC2    CODE 5   DISC TRACK RELEASE
1528* 
1529                      EXT $MPT1 
1530  00011         MEMP1 EQU $MPT1 
1531  01473 000011X       DEF MEMP1    CODE 6   PROGRAM COMPLETION
1532* 
1533                      EXT $MPT2 
1534  00012         MEMP2 EQU $MPT2 
1535  01474 000012X       DEF MEMP2    CODE 7   OPERATOR SUSPENSION 
1536* 
1537                      EXT $MPT3 
1538  00013         MEMP3 EQU $MPT3 
1539  01475 000013X       DEF MEMP3    CODE 8   LOAD PROGRAM SEGMENT
1540* 
1541                      EXT $MPT4 
1542  00014         MEMP4 EQU $MPT4 
1543  01476 000014X       DEF MEMP4    CODE 9   SCHEDULE WITH WAIT
1544* 
1545                      EXT $MPT5 
1546  00015         MEMP5 EQU $MPT5 
1547  01477 000015X       DEF MEMP5    CODE 10  SCHEDULE PROGRAM
1548* 
1549                      EXT $MPT6 
1550  00016         MEMP6 EQU $MPT6 
1551  01500 000016X       DEF MEMP6    CODE 11  REAL TIME/DATE
1552* 
1553                      EXT $MPT7 
1554  00017         MEMP7 EQU $MPT7 
1555  01501 000017X       DEF MEMP7    CODE 12  TIME SELECTION
1556* 
1557  01502 000010X       DEF IOREQ    CODE 13  I/O DEVICE STATUS 
1558* 







 PAGE 0035 #01  *  EXEC -- REQUEST CODE TABLE


1559  01503 001331R       DEF RQERR    CODE 14  NOT VALID 
1560* 
1561  01504 000670R       DEF DISCA    CODE 15 GLOBAL TRACK ASSIGNMENT
1562  01505 000744R       DEF DISCB    CODE 16 GLOBAL TRACK RELEASE 
1563* 
1564* 
1565* 
1566* DEFINE END OF TABLE AND # ENTRIES IN TABLE. 
1567*  -CODE# MUST FOLLOW TABLE ENTRIES.
1568*  -ADDITIONAL REQUESTS MAY BE INSERTED 
1569*    AT THIS POINT. 
1570* 
1571  01506 000020  CODE# ABS *-1-RQTBL 
1572* 

















































 PAGE 0036 #01  ** SYSTEM BASE PAGE COMMUNICATION AREA ** 


1574* 
1575*** SYSTEM BASE PAGE  COMMUNICATION  AREA *** 
1576* 
1577  01650         .     EQU 1650B     ESTABLISH ORIGIN OF AREA
1578* 
1579* SYSTEM TABLE DEFINITION * 
1580* 
1581  01650         EQTA  EQU .+0      FWA  OF  EQUIPMENT TABLE 
1582  01651         EQT#  EQU .+1       # OF EQT ENTRIES
1583  01652         DRT   EQU .+2      FWA  OF  DEVICE REFERENCE TABLE
1584  01653         LUMAX EQU .+3       # OF LOGICAL UNITS (IN DRT) 
1585  01654         INTBA EQU .+4      FWA  OF  INTERRUPT TABLE 
1586  01655         INTLG EQU .+5       # OF INTERRUPT TABLE ENTRIES
1587  01656         TAT   EQU .+6      FWA  OF  TRACK ASSIGNMENT TABLE
1588  01657         KEYWD EQU .+7      FWA  OF  KEYWORD BLOCK 
1589* 
1590* I/O MODULE/DRIVER COMMUNICATION 
1591* 
1592  01660         EQT1  EQU .+8      ADDRESSES
1593  01661         EQT2  EQU .+9 
1594  01662         EQT3  EQU .+10      OF
1595  01663         EQT4  EQU .+11
1596  01664         EQT5  EQU .+12      CURRENT 
1597  01665         EQT6  EQU .+13
1598  01666         EQT7  EQU .+14     15 - WORD
1599  01667         EQT8  EQU .+15
1600  01670         EQT9  EQU .+16      EQT 
1601  01671         EQT10 EQU .+17
1602  01672         EQT11 EQU .+18      ENTRY 
1603  01771         EQT12 EQU .+81
1604  01772         EQT13 EQU .+82
1605  01773         EQT14 EQU .+83
1606  01774         EQT15 EQU .+84
1607* 
1608  01673         CHAN  EQU .+19     CURRENT DMA CHANNEL #
1609  01674         TBG   EQU .+20     I/O ADDRESS OF TIME-BASE CARD
1610  01675         SYSTY EQU .+21     EQT ENTRY ADDRESS OF SYSTEM TTY
1611* 
1612* SYSTEM REQUEST PROCESSOR /'EXEC' COMMUNICATION *
1613* 
1614  01676         RQCNT EQU .+22     # OF REQUEST PARAMETERS -1 
1615  01677         RQRTN EQU .+23      RETURN POINT ADDRESS
1616  01700         RQP1  EQU .+24      ADDRESSES 
1617  01701         RQP2  EQU .+25
1618  01702         RQP3  EQU .+26       OF REQUEST 
1619  01703         RQP4  EQU .+27
1620  01704         RQP5  EQU .+28       PARAMETERS 
1621  01705         RQP6  EQU .+29
1622  01706         RQP7  EQU .+30       (SET FOR MAXIMUM OF
1623  01707         RQP8  EQU .+31        8 PARAMETERS) 
1624* 
1625* DEFINITION OF SYSTEM LISTS (QUEUES) * 
1626* 
1627  01710         DORMT EQU .+32     ADDRESS OF 'DORMANT' LIST, 
1628  01711         SKEDD EQU .+33      'SCHEDULE' LIST,
1629  01714         SUSP3 EQU .+36      'AVAILABLE MEMORY' LIST,







 PAGE 0037 #01  ** SYSTEM BASE PAGE COMMUNICATION AREA ** 


1630  01715         SUSP4 EQU .+37      'DISC ALLOCATION'  LIST,
1631  01716         SUSP5 EQU .+38      'OPERATOR SUSPEND' LIST 
1632* 
1633* DEFINITION OF EXECUTING PROGRAM  ID SEGMENT' *
1634* 
1635  01717         XEQT  EQU .+39     ID SEGMENT ADDR. OF CURRENT PROG.
1636  01720         XLINK EQU .+40       'LINKAGE'
1637  01721         XTEMP EQU .+41       'TEMPORARY (5-WORDS) 
1638  01726         XPRIO EQU .+46       'PRIORITY' WORD
1639  01727         XPENT EQU .+47       'PRIMARY ENTRY POINT'
1640  01730         XSUSP EQU .+48       'POINT OF SUSPENSION'
1641  01731         XA    EQU .+49       'A REGISTER' AT SUSPENSION 
1642  01732         XB    EQU .+50       'B REGISTER' 
1643  01733         XEO   EQU .+51       'E AND OVERFLOW
1644* 
1645* SYSTEM MODULE COMMUNICATION FLAGS * 
1646* 
1647  01734         OPATN EQU .+52     OPERATOR/KEYBOARD ATTENTION FLAG 
1648  01735         OPFLG EQU .+53     OPERATOR COMMUNICATION FLAG
1649  01736         SWAP  EQU .+54     RT DISC RESIDENT SWAPPING FLAG 
1650  01737         DUMMY EQU .+55     I/O ADDRESS OF DUMMY INT. CARD 
1651  01740         IDSDA EQU .+56     DISC ADDR. OF FIRST ID SEGMENT 
1652  01741         IDSDP EQU .+57      -POSITION WITHIN SECTOR 
1653* 
1654* DEFINITION OF MEMORY ALLOCATION BASES * 
1655* 
1656  01742         BPA1  EQU .+58     FWA R/T DISC RES. BP LINK AREA 
1657  01743         BPA2  EQU .+59     LWA R/T DISC RES. BP LINK AREA 
1658  01744         BPA3  EQU .+60     FWA BKG DISC RES. BP LINK AREA 
1659  01745         LBORG EQU .+61     FWA OF RESIDENT LIBRARY AREA 
1660  01746         RTORG EQU .+62     FWA OF REAL-TIME AREA
1661  01747         RTCOM EQU .+63     LENGTH OF REAL TIME COMMON AREA
1662  01750         RTDRA EQU .+64     FWA OF R/T DISC RESIDENT AREA
1663  01751         AVMEM EQU .+65     FWA OF SYSTEM AVAILABLE MEMORY 
1664  01752         BKORG EQU .+66     FWA OF BACKGROUND AREA 
1665  01753         BKCOM EQU .+67     LENGTH OF BABKGSMUND COMMON AREA 
1666  01754         BKDRA EQU .+68     FWA OF BKG DISC RESIDENT AREA
1667* 
1668* UTILITY PARAMETERS
1669* 
1670  01755         TATLG EQU .+69     LENGTH OF TRACK ASSIGNMENT TABLE 
1671  01756         TATSD EQU .+70      # OF TRACKS ON SYSTEM DISC
1672  01757         SECT2 EQU .+71      # SECTORS/TRACK ON LU 2 (SYSTEM)
1673  01760         SECT3 EQU .+72      # SECTORS/TRACK ON LU 3 (AUX.)
1674  01761         DSCLB EQU .+73     DISC ADDR OF RES LIB ENTRY PTS 
1675  01762         DSCLN EQU .+74      # OF RES LIB ENTRY POINTS 
1676  01763         DSCUT EQU .+75     DISC ADDR OF RELOC UTILITY PROGS 
1677  01764         DSCUN EQU .+76      # OF RELOC UTILITY PROGS
1678  01765         LGOTK EQU .+77     LOAD-N-GO: LU,STG TRACK,# OF TRKS
1679  01766         LGOC  EQU .+78      CURRENT LGO TRACK/SECTOR ADDRESS
1680  01767         SFCUN EQU .+79     SOURCE FILE LU AND DISC ADDRESS
1681  01770         MPTFL EQU .+80      MEMORY PROTECT ON/OFF FLAG (0/1)
1682  01775         FENCE EQU .+85      MEM PROTECT FENCE ADDRESS 
1683  01777         BKLWA EQU .+87     LWA OF MEMORY IN BACKGROUND
1684* 
1685                      END EXEC







 PAGE 0038 #01  ** SYSTEM BASE PAGE COMMUNICATION AREA ** 


**  NO ERRORS*























































$END ASMB     

*
--> Assemble 29016-RTE_CORE_RTIOC
ON,ASMB,99







 PAGE 0001


0001                ASMB,R,L,B,C   ** R/T INPUT/OUTPUT CONTROL MODULE **
**  NO ERRORS*





























































 PAGE 0002 #01  ** R/T INPUT/OUTPUT CONTROL MODULE      A-29016-90003-1 


0001                ASMB,R,L,B,C   ** R/T INPUT/OUTPUT CONTROL MODULE **
0003* 
0004  00000               NAM RTIOC 
0005* 
0006***** AMD-DAS ***** FEB,72 ***** REV.LWH *****
0007***** AMD-DAS ***** AUG,72 ***** REV.GAA *****
0008***** AMD-DAS 
0009***** NOV,73 ***** REV.GAA *****
0010* 
0011****************************************************************
0012*  THIS PROGRAM CONTAINS INFORMATION WHICH IS PROPRIETARY TO   *
0013*  HEWLETT-PACKARD COMPANY.  IT IS NOT TO BE DISCLOSED TO ANY  *
0014*  THIRD PARTIES OR REPRODUCED EXCEPT FOR ARCHIVE PURPOSES.    *
0015****************************************************************
0016* 
0017* 
0018                      ENT $CIC,$XSIO,$SYMG,$IORQ,$IOUP,$IODN
0019                      ENT $IRT,$XCIC,$DEVT
0020                      ENT $CVEQ 
0021* 
0022                      EXT $RQST,$CLCK,$XEQ,$TYPE,$LIST,$ALC,$RTN
0023                      EXT $CVT3,$ERMG,$MESS 
0024                      EXT $ABRT 
0025* 
0026                      SUP 
0027* 
0028* 
0029*  MODULE  OF THE  R E A L - T I M E  E X E C U T I V E 
0030* 
0031* 
0032*  THIS INCLUDES THE FOLLOWING MAJOR SECTIONS:
0033* 
0034*    1)  CENTRAL  INTERRUPT  CONTROL
0035* 
0036*    2)  INPUT  /  OUTPUT  CONTROL
0037*         - I/O REQUEST PROCESSING
0038*         - I/O COMPLETION PROCESSING 
0039*         - GENERAL I/O ERROR PROCESSING
0040* 
0041*    3)  SYSTEM ERROR DIAGNOSTIC PRINT ROUITNE
0042* 
0043*    4)  PROCESSOR FOR OPERATOR I/O STATEMENTS
0044* 




















 PAGE 0003 #01  <  CENTRAL  INTERRUPT  CONTROL  >       A-29016-90003-1 


0046* 
0047*** C E N T R A L   I N T E R R U P T   C O N T R O L  ***
0048* 
0049*   THE PROCESSING OF SYSTEM INTERRUPTS IS CONTROLLED 
0050*  BY DIRECTING ALL SOURCES TO THE ENTRY POINT < CIC >. 
0051*  < CIC > IS RESPONSIBLE FOR SAVING AND RESTORING
0052*  THE CURRENT STATE OF THE MACHINE, ANALYSING THE
0053*  SOURCE OF THE INTERRUPT, AND ACTIVATING THE
0054*  APPROPRIATE PROCESSOR. THIS ROUTINE IS TABLE-DRIVEN
0055*  BY THE *INTERRUPT TABLE*.
0056* 
0057*   SPECIAL PROCESSING FOR A "PRIVILEGED" CLASS OF
0058*  INTERRUPTS IS PROVIDED BY CIC. THIS IS DESCRIBED 
0059*  FULLY IN SECTION III BELOW. BRIEFLY, A SPECIAL 
0060*  I/O CARD CAN BE USED TO SEPARATE SPECIAL INTERRUPTS
0061*  FROM NORMAL SYSTEM CONTROLLED INTERRUPTS. THE
0062*  PRESENCE AND LOCATION OF THE SPECIAL CARD IS 
0063*  NOTED AT SYSTEM CONFIGURATION TIME. IF IT IS 
0064*  PRESENT, THE EXEC OPERATIONS ARE NOT PERFORMED 
0065*  WITH THE INTERRUPT SYSTEM DISABLED BUT RATHER
0066*  WITH THE CONTROL SET ON THE SPECIAL CARD TO
0067*  HOLD OFF SYSTEM I/O INTERRUPTS.
0068* 
0069* I. INTERRUPT TABLE (INTBL)
0070* 
0071*     A TABLE, ORDERED BY HARDWARE INTERRUPT PRIORITY,
0072*    DESIGNATES THE ASSOCIATED SOFTWARE PROCESSOR AND 
0073*    THE PROCEDURE FOR INITIATING THE PROCESSOR. THIS 
0074*    TABLE IS CONSTRUCTED BY  *RTGEN* ON INFORMATION
0075*    SUPPLIED BY THE USER IN CONFIGURING THE SYSTEM.
0076*    THE TABLE CONSISTS OF ONE ENTRY PER INTERRUPT
0077*    SOURCE: EACH ENTRY CONTAINS ONLY ONE WORD. THE 
0078*    CONTENTS OF EACH VALID ENTRY IS THE IDENTIFIER 
0079*    OF THE PROCESSOR. SYSTEM PROCESSORS ARE NOTED
0080*    BY POSITIVE VALUES, USER PROCESSORS BY NEGATIVE
0081*    VALUES:
0082* 
0083*      1. SYSTEM -  THE IDENTIFIER IS THE ADDRESS OF
0084*            THE EQT ENTRY IDENTIFYING THE I/O DEVICE.
0085* 
0086*      2. USER   -  THE ADDRESS OF THE PROGRAM
0087*            IDENTIFICATION SEGMENT IS IN 2-S COMPLEMENT
0088*            FORM IN THE ENTRY. 
0089* 
0090*      3. ILLEGAL  -  AN ENTRY CORRESPONDING TO AN
0091*            ILLEGAL INTERRUPT SOURCE CONTAINS ZERO.
0092* 
0093*     A PROCESSOR IS CALLED DIRECTLY IF IT RESPONDS 
0094*    TO STANDARD SYSTEM INTERRUPT (E.G., CLOCK, 
0095*    MEMORY PROTECT, I/O DEVICE CONTROLLED BY A 
0096*    SYSTEM DRIVER) OR IS SCHEDULED IN THE NORMAL 
0097*    PRIORITY ORDER IF IT RESPONDS TO A USER
0098*    CONTROLLED DEVICE OR INTERRUPT SOURCE. 










 PAGE 0004 #01  <  CENTRAL  INTERRUPT  CONTROL  >       A-29016-90003-1 


0100* II.   INTERRUPT PROCESSING
0101* 
0102*     INTERRUPT ACKNOWLEDGEMENT BY THE CPU CAUSES 
0103*    THE INSTRUCTION IN THE WORD CORRESPONDING
0104*    TO THE I/O CHANNEL ADDRESS TO BE EXECUTED. 
0105*    FOR ALL ACTIVE I/O CHANNELS ( PLUS LOCATIONS 
0106*    5-7 ) CONTROLLED BY THE SYSTEM, THE INSTRUCTION
0107*    SET IN EACH INTERRUPT LOCATION IS A JUMP 
0108*    SUBROUTINE INDIRECTLY TO < CIC >.
0109* 





















































 PAGE 0005 #01  <  CENTRAL  INTERRUPT  CONTROL  >       A-29016-90003-1 


0111*    <CIC> PERFORMS THE FOLLOWING:
0112* 
0113*       1. DISABLES THE INTERRUPT SYSTEM. 
0114* 
0115*       2. SAVES ALL REGISTERS PLUS THE INTERRUPT 
0116*          RETURN POINT IN THE EXECUTING
0117*          ID SEGMENT.
0118* 
0119*       3. CLEARS THE FLAG OF THE INTERRUPT SOURCE. 
0120* 
0121*       4. SETS 'MPTFL' = 1 TO MEAN MEMORY PROTECT
0122*          IS OFF - FLAG FOR PRIVILEGED PROCESSORS. 
0123* 
0124*       5. CHECKS FOR SPECIAL INTERRUPT PROCESSING. 
0125*          IF 'DUMMY' IN BASE PAGE COMMUNICATION
0126*          AREA = 0, THEN LEAVE THE INTERRUPT SYSTEM
0127*          DISABLED AND GO TO STEP 6. 
0128* 
0129*           'DUMMY' > 0  - PRIVILEGED INTERRUPTS: 
0130*           -THE CONTENTS OF 'DUMMY' IS THE I/O 
0131*            ADDRESS OF THE CARD; THIS IS USED TO 
0132*            SET THE CONTROL FF ON THE CARD (FLAG 
0133*            IS ALREADY SET) TO HOLD OFF LOWER
0134*            PRIORITY INTERRUPTS (SYSTEM INTERRUPTS)
0135*           -CLEARS THE CONTROL FLIP-FLOP OF
0136*            EACH DMA CHANNEL TO PROHIBIT POSSIBLE
0137*            INTERRUPTS FROM OCCURRING. 
0138*           -ENABLE THE INTERRUPT SYSTEM. 
0139* 
0140*       6. TRANSFERS DIRECTLY TO THE INTERRUPT
0141*          PROCESSOR FOR SOURCES OF:
0142* 
0143*           5 - MEMORY PROTECT VIOLATION
0144*          (TBG) - TIME BASE GENERATOR
0145* 
0146*          FOR OTHER SOURCES, THE INTERRUPT SOURCE
0147*          CODE IS USED TO INDEX THE INTERRUPT TABLE. 
0148*          THE CONTENTS OF THE INTBL ENTRY DETERMINES 
0149*          THE MANNER IN INITIATING THE PROCESSOR:
0150* 
0151*         A. +, THE CONTENTS OF THE ENTRY IS
0152*            ASSUMED TO BE THE FWA OF AN EQT ENTRY. 
0153*            THE ADDRESSES OF THE 15-WORD ENTRY 
0154*            ARE SET IN <EQT1 - EQT15> AND CONTROL
0155*            TRANSFERRED DIRECTLY TO THE COMPLETION 
0156*            SECTION ADDRESS (WORD 3 OF EQT ENTRY). 
0157* 
0158*          B. -, THE VALUE IS SET POSITIVE AND IS 
0159*            SET IN A CALL TO <LIST> IN THE 
0160*            SCHEDULING MODULE- THE CALL IS MADE IF 
0161*            THE USER PROGRAM IS DORMANT- CONTROL IS
0162*            TRANSFERRED TO $XEQ. IF THE PROGRAM IS 
0163*            NOT DORMANT, IT IS NOT SCHEDULED AND THE 
0164*            DIAGNOSTIC "SC03 INT XXXXX" IS OUTPUT
0165*            TO THE SYSTEM TTY- XXXXX IS THE PROGRAM
0166*            NAME. CONTROL IS RETURNED TO THE INTER-







 PAGE 0006 #01  <  CENTRAL  INTERRUPT  CONTROL  >       A-29016-90003-1 


0167*            RUPTED SEQUENCE. 
0168* 
0169*          C. 0, ILLEGAL OR UNDEFINED INTERRUPTS ARE
0170*               NOT PROCESSED BUT THE DIAGNOSTIC
0171*               "ILL INT XX" IS OUTPUT TO THE SYSTEM
0172*               TTY. XX IS THE INTERRUPT CODE.
0173* 
0174*       7. I/O DRIVER RETURNS INDICATE CONTINUATION 
0175*         OR COMPLETION OF THE OPERATION BY THE 
0176*         DRIVER OR DEVICE: 
0177* 
0178*          A. RETURN AT (P+1): COMPLETION OF THE
0179*                              OPERATION. CIC TRANS-
0180*                              FERS DIRECTLY TO THE 
0181*                              IOC COMPLETION SECTION 
0182*                              AT  < IOCOM >. CONTROL 
0183*                              IS NOT RETURNED TO 
0184*                              < CIC >. 
0185* 
0186*          B. RETURN AT (P+2): CONTINUATION OF THE
0187*                              OPERATION. CIC RETURNS 
0188*                              TO THE INTERRUPTED 
0189*                              SEQUENCE AS DESCRIBED
0190*                              IN STEP 8 FOLLOWING. 
0191* 
0192*       8. RESTORING INTERRUPT CONDITIONS AND RETURN
0193*           TO POINT OF INTERRUPTION. A SUBROUTINE
0194*           CALLED '$IRT' IS PROVIDED FOR USE BY
0195*           OTHER MODULES OF THE R/T EXEC TO RESET
0196*           FLAGS AND THE DMA CHANNELS. THE CALL TO 
0197*           '$IRT' MUST BE IN THE FOLLOWING SEQUENCE
0198*           TO PROPERLY RESET AND TO ENABLE INTERRUPTS: 
0199* 
0200*              - JSB $IRT          -
0201*              --RESTORE REGISTERS--
0202*              - STF 0             -
0203*              - STC 5             -
0204*              - JMP -,I           -
0205* 
0206*          $IRT PERFORMS THE FOLLOWING: 
0207*           - DISABLES THE INTERRUPT SYSTEM 
0208*           - SETS 'MPTFL' = 0 TO MEAN THAT MEMORY
0209*              PROTECT IS ON (ENABLED). 
0210*           - IMMEDIATE RETURN IF 'DUMMY' = 0 
0211*           - ISSUES A CLC TO CLEAR THE CONTROL 
0212*             FF ON THE SPECIAL CARD. 
0213*           - SETS THE CONTROL FF ON EITHER DMA 
0214*              CHANNEL IF BIT 15 OF THE INTBL WORD
0215*              =1 TO MEAN IT IS ACTIVE. THIS
0216*              ENABLES DMA INTERRUPTS ONLY. 
0217*           - RETURNS TO CALLER.
0218* 
0219* 
0220* 









 PAGE 0007 #01  <  CENTRAL  INTERRUPT  CONTROL  >       A-29016-90003-1 


0222* III.  SPECIAL  (PRIVILEGED) INTERRUPTS
0223* 
0224*       THIS PROVISION ALLOWS INTERRUPTS FROM SPECIAL 
0225*      DEVICES TO BE RECOGNIZED WITHIN 100 MICRO SECONDS
0226*      AND TO BE PROCESSED BY SPECIAL, COMPLETELY 
0227*      INDEPENDENT ROUTINES CLASSIFIED AS SYSTEM TYPE 
0228*      PROGRAMS. INTERRUPTS ARE CHANNELED DIRECTLY
0229*      TO THE ENTRY POINT OF A ROUTINE BY A JSB INDIRECT
0230*      IN THE CORRESPONDING CORE LOCATION. $CIC IS
0231*      NOT AWARE OF THESE SPECIAL INTERRUPTS OCCURRING; 
0232*      IT ONLY ALLOWS THE INTERRUPT SYSTEM TO BE
0233*      ENABLED AND A SOFTWARE FLAG SET TO INDICATE
0234*      THE STATUS OF MEMORY PROTECT. THE JSB TO THE 
0235*      ENTRY POINT FOR A ROUTINE IS SET BY USING THE
0236*      "ENT,XXXXX" STATEMENT IN RTGEN WHEN CONFIGURING
0237*      A REAL-TIME SYSTEM.
0238*       THE SPECIAL PROCESSING ROUTINES CANNOT USE
0239*      ANY FEATURES OR REQUESTS OF THE STANDARD 
0240*      R/T EXEC. THESE ARE INDEPENDENT ROUTINES.
0241*      COMMUNICATION BETWEEN A NORMAL PROGRAM UNDER 
0242*      THE CONTROL OF THE R/T EXEC AND A SPECIAL
0243*      INTERRUPT PROCESSOR CAN BE DONE THROUGH
0244*      THE APPROPRIATE COMMON REGION: I.E. FLAGS OR 
0245*      INDICATORS CAN BE SET IN PRE-DEFINED WORDS 
0246*      IN COMMON TO INITIATE PROCESSING.  THE NORMAL
0247*      USER PROGRAM CAN BE SCHEDULED TO RUN AT A
0248*      PERIODIC TIME INTERVAL TO SCAN THE INDICATORS. 
0249*      THIS FACILITY IS PROVIDED TO ACCOMODATE HIGH-
0250*      SPEED PROGRAM CONTROLED DATA TRANSMISSION
0251*      WHICH REQUIRES QUICK RESPONSE. 
0252*       THE SPECIAL INTERRUPT PROCESSORS ARE
0253*      RESPONSIBLE FOR SAVING AND RESTORING ALL 
0254*      REGISTERS USED AND FOR RESTORING MEMORY
0255*      PROTECT TO ITS STATE BEFORE THE SPECIAL
0256*      INTERRUPT OCCURRED. MEMORY PROTECT IS
0257*      AUTOMATICALLY DISABLED AT THE OCCURRENCE 
0258*      OF ANY INTERRUPT. THE WORD 'MPTFL' IN THE
0259*      BASE PAGE COMMUNICATION AREA IS SET BY THE 
0260*      R/T EXEC TO INDICATE THE STATUS OF THE 
0261*      MEMORY PROTECT:
0262* 
0263*       'MPTFL' = 0  MEANS MEMORY PROTECT IS 'ON'.
0264*                    THE SPECIAL ROUTINE MUST ISSUE 
0265*                    A STC 5  IMMEDIATELY BEFORE
0266*                    RETURNING TO THE INTERRUPTED 
0267*                    SEQUENCE BY A  JMP -,I 
0268* 
0269*               = 1  MEANS THAT THE R/T EXEC ITSELF 
0270*                    WAS EXECUTING WHEN THE INTERRUPT 
0271*                    OCCURRED AND THAT MEMORY 
0272*                    PROTECT IS 'OFF'.  THE ROUTINE 
0273*                    MUST NOT ISSUE THE STC 5 IN
0274*                    THIS CASE. 
0275* 
0276*       IF  A SPECIAL INTERRUPT ROUTINE MUST EXECUTE
0277*      WITH THE INTERRUPT SYSTEM DISABLED, THE







 PAGE 0008 #01  <  CENTRAL  INTERRUPT  CONTROL  >       A-29016-90003-1 


0278*      STC 0 TO RE-ENABLE INTERRUPTS JUST PRIOR TO
0279*      EXITING MUST BE IN THE FOLLOWING SEQUENCE IF 
0280*      MEMORY PROTECT IS ALSO TO BE TURNED ON:
0281* 
0282*          - STF 0    - 
0283*          - STC 5    - 
0284*          - JMP -,I  - 
























































 PAGE 0009 #01  <  CENTRAL  INTERRUPT  CONTROL  >       A-29016-90003-1 


0286  00000 000000  CIC   NOP 
0287* 
0288  00001 103100  CLF   CLF 0        DISABLE  INTERRUPT SYSTEM
0289* 
0290* PRESERVE CURRENT STATUS OF MACHINE
0291* 
0292  00002 104400        DST XA,I      SAVE REGISTERS
0293  00004 001520        ERA,ALS        A,B
0294  00005 102201        SOC            E AND
0295  00006 002004        INA            OVERFLOW 
0296  00007 171733        STA XEO,I 
0297  00010 102504        LIA 4        GET INTERRUPT SOURCE CODE. 
0298  00011 032001R       IOR CLF      CONSTRUCT A  CLF XX  INSTRUCTION 
0299  00012 072013R       STA *+1       AND CLEAR INTERRUPT FLAG TO 
0300*                                    ALLOW SPECIAL USER INTERRUPTS
0301  00013 000000        NOP             TO BE ACKNOWLEDGED. 
0302* 
0303  00014 102504  $XCIC LIA 4    ### SPECIAL ENTRY TO SKIP CLF ###
0304  00015 072213R       STA INTCD     SAVE INTERRUPT SOURCE CODE. 
0305* 
0306  00016 002404        CLA,INA       SET 'MPTFL' = 1 TO MEAN 
0307  00017 071770        STA MPTFL      MEMORY PROTECT IS OFF. 
0308* 
0309  00020 026025R SW1   JMP CIC.0     (NOP IF PRIVILEDGED OPTION) 
0310* 
0311* PROVIDE FOR SPECIAL  (PRIVILEGED) INTERRUPTS
0312* 
0313  00021 102712  STC1  STC 12B       SET CONTROL ON THE DUMMY I/O
0314* 
0315  00022 106706        CLC 6         CLEAR DMA CHANNELS
0316  00023 106707        CLC 7          CONTROL FF.
0317* 
0318  00024 102100  STF   STF 0         RE-ENABLE INTERRUPTS
0319* 
0320* 
0321  00025 066213R CIC.0 LDB INTCD     GET INTERRUPT CODE AGAIN. 
0322  00026 062000R       LDA CIC      SAVE P-REGISTER AS POSSIBLE
0323  00027 171730        STA XSUSP,I    POINT OF SUSPENSION. 
0324* 
0325* CHECK FOR TRANSFER TO NON-I/O SYSTEM PROCESSOR
0326* 
0327  00030 056023R       CPB .5       IF MEMORY PROTECT VIOLATION, 
0328  00031 026164R       JMP MPT       GO TO EXAMINE ADDRESS IN I/O 5. 
0329* 
0330  00032 055674        CPB TBG      IF TIME BASE GENERATOR,
0331  00033 026002X       JMP CLOCK     GO TO TIME PROCESSOR. 
0332* 
0333* CHECK LEGALITY OF INTERRUPT 
0334* 
0335  00034 062213R       LDA INTCD     INTERRUPT 
0336  00035 042072R       ADA N6        CODE - 6. 
0337  00036 070001        STA B         (SAVE FOR TABLE INDEX)
0338  00037 002020        SSA          - ERROR IF CODE
0339  00040 026121R       JMP CIC.4     LT 6, ISSUE DIAGNOSTIC. 
0340  00041 003000        CMA          CHECK FOR BEYOND RANGE 
0341  00042 041655        ADA INTLG     OF INTERRUPT TABLE







 PAGE 0010 #01  <  CENTRAL  INTERRUPT  CONTROL  >       A-29016-90003-1 


0342  00043 002020        SSA          ERROR IF 
0343  00044 026121R       JMP CIC.4      NEGATIVE, ISSUE DIAG.
0344* 
0345* GET PROCESSOR IDENT FROM INTERRUPT TABLE
0346* 
0347  00045 045654        ADB INTBA    INDEX TO PROPER ENTRY BY SOURCE
0348  00046 160001        LDA B,I       CODE. GET CONTENTS OF ENTRY 
0349  00047 002003        SZA,RSS      UNDEFINED INTERRUPT
0350  00050 026121R       JMP CIC.4       IF VALUE = 0, ISSUE DIAG. 
0351* 
0352* 
0353  00051 066213R       LDB INTCD     REMOVE
0354  00052 056024R       CPB .6         BIT 15 OF INTBL WORD 
0355  00053 002001        RSS            IF DMA 
0356  00054 056025R       CPB .7         CHANNEL
0357  00055 001265        RAL,CLE,ERA    INTERRUPT. 
0358* 
0359  00056 002021        SSA,RSS      SYSTEM PROCESSOR IS TO BE CALLED 
0360  00057 026073R       JMP CIC.2     IF VALUE IS POSITIVE. 
0361* 
0362** INTERRUPT PROCESSOR IS USER ROUTINE TO BE
0363**  SCHEDULED FOR PRIORITY EXECUTION
0364* 
0365  00060 003004        CMA,INA      SET POSITIVE TO GET ID SEGMENT 
0366  00061 072070R       STA CIC.1     ADDRESS, SET IN CALL TO <LIST>. 
0367* 
0368  00062 042030R       ADA .15      CHECK STATUS OF PROGRAM. 
0369  00063 160000        LDA A,I      IF STATUS IS ZERO (DORMANT), 
0370  00064 002002        SZA           SCHEDULE PROGRAM, OTHERWISE 
0371  00065 026132R       JMP CIC.5      ISSUE DIAGNOSTIC.
0372* 
0373  00066 016005X       JSB LIST     CALL SCHEDULER TO LINK PROGRAM 
0374  00067 000101        OCT 101       INTO SCHEDULE LIST. 
0375  00070 000000  CIC.1 NOP          HOLDS ID SEGMENT ADDRESS 
0376  00071 026003X       JMP XEQ 

0378  00072 177772  N6    DEC -6
0379* 
0380* 
0381* ASSUME PROCESSOR FOR CODE GT= 6 IS A
0382*  SYSTEM I/0 DRIVER. VALUE OF INTERRUPT
0383*  TABLE ENTRY IS THE STARTING ADDRESS
0384*  OF THE EQUIPMENT TABLE ENTRY CORRESPONDING 
0385*  TO THE INTERRUPTING DEVICE.
0386* 
0387  00073 016273R CIC.2 JSB SETEQ    SET EQT ENTRY ADDRESSES. 
0388* 
0389  00074 062213R       LDA INTCD      (A) = INTERRUPT SOURCE CODE
0390* 
0391  00075 165773  CIC.6 LDB EQT14,I   SET DEVICE
0392  00076 175774        STB EQT15,I    TIME-OUT CLOCK 
0393* 
0394* CALL I/O PROCESSOR, COMPLETION SECTION
0395* 
0396  00077 165662        LDB EQT3,I   CALL  DRIVER 
0397  00100 114001        JSB B,I       *COMPLETION* SECTION. 







 PAGE 0011 #01  <  CENTRAL  INTERRUPT  CONTROL  >       A-29016-90003-1 


0398* 
0399  00101 027233R       JMP IOCOM  (P+1): *COMPLETION RETURN* 
0400* 
0401  00102 002400        CLA        (P+2): *CONTINUATION RETURN* 
0402  00103 065734        LDB OPATN    CHECK FOR OPERATOR ATTENTION.
0403  00104 071734        STA OPATN     -CLEAR OPERATOR FLAG- 
0404  00105 006002        SZB          IF FLAG SET, 
0405  00106 026004X       JMP TYPE      ACKNOWLEDGE.
0406* 
0407* 
0408* RESET INTERRUPT CONDITIONS - RETURN TO SEQUENCE 
0409* 
0410  00107 016146R CIC.3 JSB $IRT      RESET CONDITIONS
0411  00110 161733        LDA XEO,I 
0412  00111 103101        CLO 
0413  00112 000036        SLA,ELA 
0414  00113 102101        STF 1        -RESTORE 
0415  00114 104200        DLD XA,I       REGISTERS- 
0416  00116 102100        STF 0        ENABLE INTERRUPT SYSTEM
0417  00117 102705        STC 5        TURN ON -MEMORY PROTECT- 
0418  00120 126000R       JMP CIC,I     --- RETURN ---
0419* 
0420*  ILLEGAL OR UNDEFINED INTERRUPT 
0421* 
0422  00121 062213R CIC.4 LDA INTCD     GET THE INTERRUPT CODE. 
0423  00122 000040        CLE           E = 0 FOR ASCII/OCTAL 
0424  00123 016010X       JSB CVT3      CONVERSION. 
0425  00124 042020R       ADA .2       STORE (WORD 3 FROM CVT3) 
0426  00125 160000        LDA A,I       INTERRUPT CODE IN MESSAGE.
0427  00126 072200R       STA CICM1+6 
0428  00127 062172R       LDA CICM1    PRINT
0429  00130 016146R       JSB SYSMG     "ILL INT XX", 
0430  00131 026107R       JMP CIC.3    RETURN TO INTERRUPTED SEQUENCE.
0431* 
0432* ISSUE DIAGNOSTIC FOR BEING UNABLE TO
0433*  SCHEDULE USER PROGRAM ON INTERRUPT.
0434* 
0435  00132 066070R CIC.5 LDB CIC.1    SET (B) TO ADDRESS OF
0436  00133 046467R       ADB .12       NAME IN 
0437  00134 160001        LDA B,I        PROGRAM ID SEGMENT.
0438  00135 072210R       STA CICM2+7  STORE
0439  00136 006004        INB           PROGRAM 
0440  00137 104200        DLD B,I      NAME IN
0441  00141 104400        DST CICM2+8   DIAGNOSTIC AND PRINT
0442  00143 062201R       LDA CICM2     "SC03 INT XXXXX"
0443  00144 016146R       JSB SYSMG 
0444  00145 026107R       JMP CIC.3    RETURN TO INTERRUPTED SEQUENCE.
















 PAGE 0012 #01  <  CENTRAL  INTERRUPT  CONTROL  >       A-29016-90003-1 


0446* 
0447*  SUBROUTINE: '$IRT' 
0448* 
0449  00146 000000  $IRT  NOP 
0450  00147 103100        CLF 0         DISABLE INTERRUPT SYSTEM
0451* 
0452  00150 002400        CLA           CLEAR 'MPTFL' TO MEAN 
0453  00151 071770        STA MPTFL      MEMORY PROTECT IS ON.
0454* 
0455  00152 126146R SW2   JMP $IRT,I    RETURN IF NOT PRIV. (ELSE NOP)
0456* 
0457  00153 106712  CLC1  CLC 12B      CLEAR CONTROL AND SET FLAG 
0458  00154 102112  STF1  STF 12B      BUFFER ON DUMMY I/O CARD 
0459* 
0460  00155 104200        DLD INTBA,I  CHECK CONDITION OF DMA CHANNELS
0461  00157 002020        SSA           IF BIT = 1 FOR DMA #1 (ACTIVE)
0462  00160 102706        STC 6          THEN SET CONTROL TO ENABLE 
0463  00161 006020        SSB          INTERRUPTS.  SAME FOR
0464  00162 102707        STC 7           DMA CHANNEL #2. 
0465* 
0466  00163 126146R       JMP $IRT,I    -RETURN-




0468* MEMORY PROTECT / PARITY ERROR ANALYSIS
0469*  - PROTECT VIOLATION CAUSES TRANSFER TO "RTRQP" 
0470*  - PARITY ERROR CAUSES HALT CONDITION.
0471* 
0472  00164 102505  MPT   LIA 5        GET VIOLATION ADDRESS: IF BIT 15 
0473  00165 002021        SSA,RSS       =0, PROCESS AS PROTECT VIOLATION
0474  00166 026001X       JMP RTRQP     AND POSSIBLE SYSTEM REQUEST.
0475  00167 102000        HLT 0        PARITY ERROR HALT (BIT 15 = 1) 
0476  00170 102105        STF 5        RESTART, RESET PARITY ERROR BOARD
0477  00171 026107R       JMP CIC.3     AND RETURN TO INTERRUPT SEQUENCE
0478* 
0479  00172 000173R CICM1 DEF *+1 
0480  00173 177766        DEC -10 
0481  00174 044514        ASC 5,ILL INT XX
0482* 
0483  00201 000202R CICM2 DEF *+1 
0484  00202 177761        DEC -15 
0485  00203 051503        ASC 8,SC03 INT  XXXXX 
0486* 
0487  00213 000000  INTCD NOP           HOLDS INTERRUPT SOURCE CODE 
0488* 

















 PAGE 0013 #01  <  RT EXECUTIVE  INPUT/OUTPUT CONTROL>  A-29016-90003-1 


0490***  I N P U T  /  O U T P U T  C O N T R O L  ***
0491* 
0492*  THE I/O SCHEDULING AND CONTROL MODULE  < IOC > 
0493* IS RESPONSIBLE FOR ALLOCATING THE USE OF ALL
0494* STANDARD I/O DEVICES AND THE TWO DMA CHANNELS.
0495*  I/O DRIVERS OPERATE UNDER CONTROL OF <IOC> AND 
0496* <CIC> FOR INITIATION AND COMPLETION OF SYSTEM 
0497* AND USER DIRECTED I/O OPERATIONS. I/O DRIVERS 
0498* ARE INDEPENDENT PROGRAMS IDENTIFIED TO <IOC>
0499* BY THE DEVICE ASSOCIATED EQUIPMENT TABLE. DRIVERS 
0500* ARE COMPOSED TO TWO SECTIONS: *INITIATION* AND
0501* *COMPLETION*.  THE *INITIATION* SECTION IS
0502* CALLED BY <IOC> TO EXAMINE AND INITIATE AN I/O
0503* OPERATION. THE *COMPLETION* SECTION IS CALLED 
0504* BY <CIC> TO CONTINUE OR COMPLETE THE OPERATION. 
0505* DRIVERS PROVIDE FOR SIMULTANEOUS MULTI-DEVICE 
0506* CONTROL BY USING THE DEVICE EQT ENTRY FOR 
0507* VARIABLE STORAGE. 
0508* 
0509* I.   * EQUIPMENT TABLE * (EQT)
0510* 
0511*   EACH I/O DEVICE CONTROLLED BY THE IOC/DRIVER
0512*  RELATIONSHIP IS DEFINED BY STATIC AND DYNAMIC
0513*  INFORMATION IN THE EQUIPMENT TABLE. THE EQT
0514*  IS A SYSTEM RESIDENT TABLE WHICH IS CONSTRUCTED
0515*  FROM USER DIRECTIVES BY <RTGEN>.  EACH EQT 
0516*  ENTRY IS COMPOSED OF 15-WORDS IN THE FOLLOWING FORMAT: 
0517* 



































 PAGE 0014 #01  <  RT EXECUTIVE  INPUT/OUTPUT CONTROL>  A-29016-90003-1 


0519* 
0520*  WORD            CONTENTS 
0521*  ----  ---------------------------- 
0522*    1   * I/O LIST . LINK POINTER  * 
0523*    2   *DRIVER *INITIATION ADDRESS* 
0524*    3   *DRIVER *COMPLETION ADDRESS* 
0525*    4   *DB//T/////UNIT#--CHANNEL #* 
0526*    5   *AV-TYPE CODE- UNIT  STATUS* 
0527*    6   *REQUEST   CONTROL    WORD * 
0528*    7   *REQUEST  BUFFER   ADDRESS * 
0529*    8   *REQUEST  BUFFER   LENGTH  * 
0530*    9   *TEMPORARY OR DISC TRACK # * 
0531*   10   *TEMPORARY OR DISC SECTOR #* 
0532*   11   *DRIVER   TEMPORARY STORAGE* 
0533*   12   *  "          "        "   * 
0534*   13   *  "          "        "   * 
0535*   14   * DEVICE CLOCK RESET VALUE * 
0536*   15   *   "      "  WORKING  "   * 
0537* 
0538*  D: =1 IF A DMA CHANNEL REQUIRED FOR TRANSFER 
0539*  B: =1 IF AUTOMATIC OUPUT BUFFERING DESIRED 
0540*  T: DEVICE TIME-OUT BIT - CLEARED BEFORE EACH 
0541*              IO INITIATION; SET IF DEVICE TIMES-OUT.
0542*  UNIT#: OPTIONAL FOR DEVICES REQUIRING
0543*          SUB-CHANNEL DESIGNATION
0544*  CHANNEL#: I/O SELECT CODE (LOWER # IF
0545*             MULTI-BOARD INTERFACE)
0546*  AV (AVAILABILITY INDICATOR): 
0547*     =0, UNIT AVAILABLE FOR OPERATION
0548*     =1, UNIT DISABLED 
0549*     =2, UNIT CURRENTLY IN OPERATION 
0550*     =3, UNIT WAITING FOR DMA CHANNEL
0551*  TYPE CODE: CODE IDENTIFYING TYPE OF I/O DEVICE 
0552*  UNIT STATUS: ACTUAL OR SIMULATED UNIT STATUS 
0553*              AT END OF OPERATION
0554* 
0555* II. * DEVICE REFERENCE TABLE * (DRT)
0556* 
0557*  THE DEVICE REFERENCE TABLE PROVIDES FOR
0558* LOGICAL ADDRESSING OF PHYSICAL UNITS DEFINED
0559* IN THE EQUIPMENT TABLE. THE *DRT* CONSISTS
0560* OF 1-WORD ENTRIES CORRESPONDING TO THE RANGE
0561* OF USER-SPECIFIED "LOGICAL" UNITS, 1 TO N 
0562* WHERE N IS LT OR = TO 63(10). THE CONTENTS OF 
0563* THE WORD CORRESPONDING TO A LOGICAL UNIT IS 
0564* THE RELATIVE POSITION OF THE  EQT ENTRY 
0565* DEFINING THE ASSIGNED PHYSICAL UNIT,IN
0566* BITS 5 - 0, AND THE SUBCHANNEL OF THE 
0567* EQT ENTRY TO BE REFERENCED BY THIS
0568* LOGICAL UNIT NUMBER, IN BITS 13 - 11. 
0569* 
0570*  CERTAIN LOGICAL UNIT #S ARE PERMANENTLY
0571* ASSIGNED TO FACILITATE SYSTEM, USER AND 
0572* SYSTEM SUPPORT I/O OPERATIONS. THESE ARE: 









 PAGE 0015 #01  <  RT EXECUTIVE  INPUT/OUTPUT CONTROL>  A-29016-90003-1 


0574*     1  -   SYSTEM  TELETYPEWRITER 
0575*     2  -   SYSTEM  DISC 
0576*     3  -   AUXILIARY DISC 
0577*     4  -   'STANDARD' PUNCH UNIT
0578*     5  -   'STANDARD' INPUT UNIT
0579*     6  -   'STANDARD' LIST  UNIT
0580*     7  - ASSIGNED 
0581*     .     BY
0582*     .      USER 
0583*     63 -
0584* 
0585* III.  INPUT/OUTPUT REQUESTS 
0586* 
0587*    I/O REQUESTS INCLUDE COMMANDS FOR
0588*   READ, WRITE, CONTROL(FUNCTIONS) AND STATUS. 
0589*   THE FORMAT OF THESE REQUESTS CONFORM TO 
0590*   THE GENERAL SYSTEM REQUEST FORMAT. THE
0591*   NUMBER OF PARAMETERS VARIES DEPENDING 
0592*   ON THE TYPE OF REQUEST AND THE CHARAC-
0593*   TERISTICS OF THE REFERENCED DEVICE. 
0594* 
0595*    A USER I/O REQUEST IS DIRECTED TO <IOC>
0596*   AT -IOREQ- BY THE EXECUTIVE REQUEST 
0597*   PROCESSOR <RTRQP>. SYSTEM I/O REQUESTS
0598*   ARE IN A DIFFERENT FORMAT AND ARE PROCESSED 
0599*   AT THE SECTION -XSIO- IN <IOC>. REFER TO
0600*   THAT SECTION FOR DETAILED DESCRIPTION.
0601* 
0602*    A *STATUS* REQUEST IS PROVIDED 
0603*   FOR USER AND SYSTEM SUPPORT PROGRAMS
0604*   WHICH REQUIRE KNOWLEDGE OF DEVICE 
0605*   CONDITIONS OR TYPE BEFORE A READ/WRITE/ 
0606*   CONTROL REQUEST IS MADE. THE PROGRAM
0607*   IS NOT SUSPENDED ON THIS CALL.
0608*   A PARAMETER WORD IS INCLUDED IN THE 
0609*   REQUEST TO CONTAIN THE DEVICE STATUS ON 
0610*   RETURN TO THE USER. THIS STATUS IS FROM WORD
0611*   5 OF THE EQT ENTRY FOR THE DEVICE.
0612*   ALSO, AN ADDITIONAL PARAMETER WORD CAN BE 
0613*   INCLUDED IN THE REQUEST- WORD 4 OF THE
0614*   EQT ENTRY IS RETURNED IF THE ADDITIONAL 
0615*   PARAMETER WORD IS INCLUDED. 
0616* 
0617*    A DYNAMIC STATUS REQUEST CAN BE MADE BY
0618*   MEANS OF A CONTROL REQUEST, THE FORMAT
0619*   OF WHICH IS DEFINED BELOW.  IN THIS CASE, 
0620*   THE REQUEST IS QUEUED, THE DRIVER IS ENTERED, 
0621*   AND THE STATUS IS RETURNED TO THE CALLING 
0622*   PROGRAM IN THE A REGISTER.
0623*     













 PAGE 0016 #01  <  RT EXECUTIVE  INPUT/OUTPUT CONTROL>  A-29016-90003-1 


0625* 
0626*  A.   READ/WRITE REQUEST FORMAT 
0627* 
0628*         EXT  EXEC 
0629*         JSB  EXEC 
0630*         DEF  EXIT     (DEFINE EXIT POINT) 
0631*         DEF  RCODE    (DEFINE READ (1) OR WRITE(2)) 
0632*         DEF  CONWD    (DEFINE CONTROL WORD) 
0633*         DEF  BUFFR    (DEFINE BUFFER LOCATION)
0634*         DEF  BUFFL    (DEFINE BUFFER LENGTH)
0635*         DEF  DTRAK   (OPTIONAL - DISC TRACK #)
0636*         DEF  DSECT   (OPTIONAL - DISC SECTOR #) 
0637*    EXIT --- 
0638*          .
0639*          .
0640*   RCODE DEC  1 OR 2 
0641*   CONWD OCT  NNNNN   CONTROL INFO/LOGICAL UNIT #
0642*   BUFFL DEC  N OR -N  WORD OR CHARACTER LENGTH
0643*   DTRAK DEC  N       DISC TRACK # 
0644*   DSECT DEC  N       STARTING SECTOR #
0645* 
0646* 
0647*  B.   CONTROL   REQUEST FORMAT
0648* 
0649*         EXT  EXEC 
0650*         JSB  EXEC 
0651*         DEF  EXIT     (DEFINE EXIT POINT) 
0652*         DEF  RCODE    (DEFINE REQUEST CODE) 
0653*         DEF  CONWD    (DEFINE CONTROL WORD) 
0654*         DEF  PARAM    (DEFINE OPTIONAL PARAMETER) 
0655*    EXIT --- 
0656*          .
0657*          .
0658*   RCODE DEC  3
0659*   CONWD OCT  NNNNN   CONTROL CODE/LOGICAL UNIT #
0660*   PARAM DEC  N      PARAMETER REQUIRED BY TYPE OF CODE
0661* 
0662*    CONTROL CODES (FIELD 10-06 OF CONTROL WORD): 
0663* 
0664*      01 -   WRITE END-OF-FILE    --/  PRIMARILY 
0665*      02 -   BACKSPACE 1 RECORD     /    FOR 
0666*      03 -   FORWARD SPACE 1 RECORD /  MAGNETIC
0667*      04 -   REWIND                 /    TAPE
0668*      05 -   REWIND STANDBY         /    UNITS 
0669*      06 -   DYNAMIC STATUS       --/
0670*      07 -   SET EOT STATUS (FOR PAPER TAPE INPUT) 
0671*      10 -   GENERATE LEADER FOR PAPER TAPE
0672*      11 -   LIST OUTPUT LINE SPACING















 PAGE 0017 #01  <  RT EXECUTIVE  INPUT/OUTPUT CONTROL>  A-29016-90003-1 


0674* 
0675*  C.  DEVICE   STATUS  REQUEST FORMAT
0676* 
0677*         EXT  EXEC 
0678*         JSB  EXEC 
0679*         DEF  EXIT     (DEFINE EXIT POINT) 
0680*         DEF  RCODE    (DEFINE REQUEST CODE) 
0681*         DEF  CONWD    (DEFINE CONTROL WORD) 
0682*         DEF  STAT1    (DEFINE STATUS WORD 1)
0683*         DEF  STAT2    (DEFINE STATUS WORD 2  -- OPTIONAL) 
0684*    EXIT --- 
0685*          .
0686*          .
0687*   RCODE DEC  13      STATUS REQUEST CODE = 13 
0688*   CONWD OCT  NN      LOGICAL UNIT # 
0689*   STAT1 NOP         WORD 5 OF EQT ENTRY FOR 
0690*                      DEVICE STORED IN THIS WORD.
0691*   STAT2 NOP         WORD 4 OF EQT ENTRY FOR 
0692*                     DEVICE STORED IN THIS WORD
0693*                     IF PRESENT IN REQUEST.
0694* 
0695* 
0696* IV. GENERAL OPERATION 
0697* 
0698*    ALL INPUT/OUTPUT OPERATIONS ARE PERFORMED
0699*   CONCURRENTLY WITH PROGRAM COMPUTATION IN THE
0700*    OVERALL SYSTEM. AN I/O OPERATION IS CONSIDERED 
0701*    TO BE NON-BUFFERED TO THE REQUESTING USER
0702*   PROGRAM AS THE PROGRAM IS SUSPENDED UNTIL 
0703*   THE TRANSMISSION OR OPERATION IS COMPLETED. 
0704*   THE EXCEPTION TO THIS IS IN PROVIDING FOR 
0705*   AUTOMATIC BUFFERING OF OUTPUT TO USER-
0706*   DESIGNATED DEVICES. IN THIS CASE, THE USER
0707*   BUFFER IS MOVED TO SYSTEM AVAILABLE MEMORY
0708*   AND THE USER PROGRAM IS NOT SUSPENDED.




























 PAGE 0018 #01  <  RT EXECUTIVE  INPUT/OUTPUT CONTROL>  A-29016-90003-1 


0710  00214 002400  IOREQ CLA          SET CONTROL FLAG = 0 TO MEAN 
0711  00215 072060R       STA CONFL     *REQUEST* SECTION ENTERED 
0712  00216 072056R       STA TEMPL     AND 'DISC R/W USER REQ' FLAG
0713* 
0714  00217 061676        LDA RQCNT    INSURE 
0715  00220 042031R       ADA N1        THAT AT LEAST 1 
0716  00221 002020        SSA            PARAMETER WAS SUPPLIED.
0717  00222 027543R       JMP ERR01     - NO, ISSUE DIAGNOSTIC. 
0718* 
0719* LOGICAL UNIT REFERENCE VALIDITY CHECK 
0720* 
0721  00223 161701        LDA RQP2,I   EXTRACT LOGICAL UNIT # FROM
0722  00224 012034R       AND MASK1     PARAMETER 1 
0723  00225 070001        STA B         (SAVE #)
0724  00226 072044R       STA TEMP1    SAVE LOGICAL UNIT # FOR DISC TEST
0725  00227 003007        CMA,INA,SZA,RSS CHECK FOR ZERO AND
0726  00230 027545R       JMP ERR02        FOR A
0727  00231 041653        ADA LUMAX     VALUE GT THE LARGEST
0728  00232 002020        SSA            DEFINED #. 
0729  00233 027545R       JMP ERR02     - ERROR, EXCEEDS RANGE. 
0730* 
0731  00234 046031R       ADB N1       INDEX TO 
0732  00235 045652        ADB DRT       DEVICE-REFERENCE-TABLE
0733  00236 160001        LDA B,I      GET EQT ASSIGNMENT.
0734  00237 012035R       AND MASK2     MASK OUT SUBCHANNEL 
0735  00240 002003        SZA,RSS       -ERROR
0736  00241 027547R       JMP ERR03      IF NOT ASSIGNED. 
0737  00242 016243R       JSB CVEQT    CONVERT TO ABSOLUTE EQT ADDRESSES
0738* 
0739* REQUEST CODE ANALYSIS 
0740* 
0741  00243 165700        LDB RQP1,I   GET REQUEST CODE (PARAMETER 1).
0742  00244 056021R       CPB .3       IF REQUEST IS <CONTROL>, 
0743  00245 026526R       JMP L.02      SKIP FURTHER ANALYSIS.
0744* 
0745  00246 056470R       CPB .13      TRANSFER IF
0746  00247 026674R       JMP L.15      * STATUS * REQUEST. 
0747* 
0748  00250 061676        LDA RQCNT    CHECK # OF 
0749  00251 042472R       ADA  N3       PARAMETERS SUPPLIED 
0750  00252 002020        SSA            FOR READ OR WRITE. 
0751  00253 027543R       JMP  ERR01    -ERROR, LT 3. 
0752* 
0753* BUFFER LEGALITY CHECK FOR INPUT.
0754* 
0755  00254 161703        LDA RQP4,I    GET THE LENGTH
0756  00255 002121        CLE,SSA,RSS    CONVERT TO 
0757  00256 026261R       JMP *+3         WORDS IF
0758  00257 001100        ARS              CHARACTERS 
0759  00260 003004        CMA,INA           SET POSITIVE AND
0760  00261 072045R       STA TEMP2          SAVE.

0762  00262 056020R       CPB .2       IF WRITE REQUEST,
0763  00263 026311R       JMP L.01      SKIP BUFFER CHECK.
0764  00264 061717        LDA XEQT      CHECK THE 
0765  00265 042471R       ADA .14        ID 







 PAGE 0019 #01  <  RT EXECUTIVE  INPUT/OUTPUT CONTROL>  A-29016-90003-1 


0766  00266 160000        LDA A,I         SEGMENT TO
0767  00267 012025R       AND .7           GET AREA 
0768  00270 042472R       ADA N3            OF PROGRAM
0769  00271 065746        LDB RTORG      SET UP ORGIN FOR THE 
0770  00272 002021        SSA,RSS        AREA IN
0771  00273 065752        LDB BKORG        B. 

0773  00274 061702        LDA RQP3      GET THE BUFFER ADDRESS
0774  00275 003000        CMA            AND CHECK TO SEE IF
0775  00276 040001        ADA B           BELOW THE PROGRAMS
0776  00277 002121        CLE,SSA,RSS     AREA. ERROR IF ATTEMPT TO READ
0777  00300 027551R       JMP ERR04      INTO SYSTEM AREA.
0778* 
0779  00301 066045R       LDB TEMP2     CHECK TO SEE IF EXCEEDING 
0780  00302 045702        ADB RQP3       LWA MEMORY.
0781  00303 002040        SEZ          ERROR IF NEGATIVE WRAP-AROUND
0782  00304 027551R       JMP ERR04     WITH OVERFLOW.
0783  00305 007004        CMB,INB       -IF WRAP-AROUND 
0784  00306 045777        ADB BKLWA      ERROR, 
0785  00307 006026        SSB,INB,SZB    ISSUE
0786  00310 027551R       JMP ERR04      ERROR 4 DIAGNOSTIC 
0787* 
0788  00311 161664  L.01  LDA EQT5,I   CHECK REFERENCED DEVICE
0789  00312 012465R       AND ETYPE     FOR BEING A 
0790  00313 052466R       CPA DISC       DISC FILE
0791  00314 002001        RSS 
0792  00315 026526R       JMP L.02     NO, UNIT IS NOT DISC.
0793  00316 072056R       STA TEMPL     SET 'DISC R/W USER REQ' FLAG
0794* 
0795* DISC ACCESS VALIDITY CHECK. 
0796* 
0797  00317 061676        LDA RQCNT    FOR A DISC ACCESS, REQUEST MUST
0798  00320 052023R       CPA  .5       CONTAIN 5 PARAMETERS TO INCLUDE 
0799  00321 002001        RSS            TRACK/SECTOR ADDR. 
0800  00322 027543R       JMP ERR01     -ERROR-.
0801* 
0802  00323 062044R       LDA TEMP1 
0803  00324 052020R       CPA .2        IF LU # 2 OR 3, 
0804  00325 026331R       JMP *+4        SET INTO LOW 
0805  00326 052021R       CPA .3         BITS OF 'DISC
0806  00327 002001        RSS            R/W USER REQ'
0807  00330 026635R       JMP L.10       FLAG.
0808  00331 032056R       IOR TEMPL 
0809  00332 072056R       STA TEMPL 
0810* 
0811  00333 161704        LDA RQP5,I   GET TRACK ADDRESS FROM 
0812  00334 012035R       AND MASK2 
0813  00335 072055R       STA TEMP0      REQUEST  -  SAVE.
0814  00336 061755        LDA TATLG    COMPUTE POSITIVE 
0815  00337 041756        ADA TATSD     LENGTH OF 
0816  00340 003004        CMA,INA        AUXILIARY DISC IN *TAT*. 
0817  00341 066044R       LDB TEMP1    IF REFERENCE 
0818  00342 056020R       CPB .2        TO SYSTEM DISC (LU #2), 
0819  00343 061756        LDA TATSD      USE SYS DISC SIZE. 
0820  00344 003004        CMA,INA      SUBTRACT MAX SIZE
0821  00345 042055R       ADA TEMP0     FROM USER TRACK #.







 PAGE 0020 #01  <  RT EXECUTIVE  INPUT/OUTPUT CONTROL>  A-29016-90003-1 


0822  00346 002021        SSA,RSS 
0823  00347 027553R       JMP ERR05     -ERROR, ILLEGAL TRACK #.
0824* 
0825  00350 061757        LDA SECT2     (B)= # SECTORS/TRACK FOR LU #2
0826  00351 056021R       CPB .3        IF LU FOR REQUEST = 3,
0827  00352 061760        LDA SECT3      SET (B) = # SECTORS FOR LU #3
0828  00353 003004        CMA,INA       SET VALUE NEG.
0829  00354 165705        LDB RQP6,I   GET SECTOR ADDRESS 
0830  00355 006120        CLE,SSB        FROM REQUEST. ERROR
0831  00356 027553R       JMP ERR05     NEGATIVE. 
0832  00357 044000        ADB A          ERROR. 
0833  00360 007440        CCB,SEZ        IF STARTING SECTOR 
0834  00361 027553R       JMP ERR05      GREATER THAN TRACK SIZE. 
0835* 
0836  00362 046045R       ADB TEMP2     CHECK FOR TRACK OVERFLOW
0837  00363 005121        BRS,BRS      DIVIDE BUFFER LENGTH 
0838  00364 005121        BRS,BRS       (IN WORDS)
0839  00365 005121        BRS,BRS       BY 64(10) 
0840  00366 145705        ADB RQP6,I    ADD STARTING SECTOR # 
0841  00367 044000        ADB A         ERROR IF LAST SECTOR
0842  00370 006021        SSB,RSS        GT=
0843  00371 027557R       JMP ERR08      LIMIT (EXCEEDS TRACK BOUNDARY) 
0844* 
0845  00372 002404        CLA,INA      AN INPUT REQUEST IS ALLOWED TO 
0846  00373 151700        CPA RQP1,I    REFERENCE ANY 
0847  00374 026635R       JMP L.10       TRACK. 
0848* 
0849  00375 066055R       LDB TEMP0    (B) = TRACK #. 
0850  00376 062021R       LDA .3       IF REFERENCE TO 'AUXILIARY'
0851  00377 052044R       CPA TEMP1     DISC (LU #3), ADD 
0852  00400 045756        ADB TATSD       SYS DISC SIZE TO TRACK #. 
0853  00401 045656        ADB TAT      INDEX TO TRACK ASSIGNMENT TABLE. 
0854  00402 160001        LDA B,I      GET REFERENCED TRACK ASSIGNMENT. 
0855  00403 051717        CPA XEQT      (ID SEGMENT ADDRESS). IF SAME AS
0856  00404 026635R       JMP L.10      REQUESTOR, ALLOW ACCESS.
0857  00405 052450R       CPA M7777     ALLOW ACCESS IF TRACK IS
0858  00406 026635R       JMP L.10       GLOBALLY ASSIGNED. 
0859  00407 002004        INA           IF FMP TRACK THEN 
0860  00410 052450R       CPA M7777     GO CHECK
0861  00411 026517R       JMP L.012     FOR LEGAL CALL. 
0862* 
0863* CHECK FOR LOAD-AND-GO ACCESS
0864* 
0865  00412 062055R       LDA TEMP0     CONSTRUCT 
0866  00413 100047        LSL 7         A WORD WITH USER LU # 
0867  00414 131705        IOR RQP6,I     IN BIT 15, 
0868  00415 066044R       LDB TEMP1      TRACK # IN 14-07,
0869  00416 056021R       CPB .3         AND SECTOR # IN 06-00. 
0870  00417 032042R       IOR MSIGN 
0871  00420 051766        CPA LGOC      IF NOT = TO CURRENT LGO 
0872  00421 002001        RSS            ADDRESS, THEN
0873  00422 026473R       JMP L.011      GO TO CHECK FOR "LOADR". 
0874* 
0875* UPDATE FOR NEXT LGO ACCESS - THIS ACCESS ALLOWED
0876* 
0877  00423 012515R       AND MASK0     ISOLATE SECTOR #, 







 PAGE 0021 #01  <  RT EXECUTIVE  INPUT/OUTPUT CONTROL>  A-29016-90003-1 


0878  00424 002004        INA            ADD 1 AND
0879  00425 072045R       STA TEMP2      SAVE.
0880  00426 002400        CLA           INSURE THAT A 
0881  00427 051765        CPA LGOTK      LGO AREA IS ASSIGNED.
0882  00430 026473R       JMP L.011     -NO, CHECK LOADR. 
0883  00431 061757        LDA SECT2     SET (A) TO APPROPRIATE
0884  00432 056021R       CPB .3         # SECTORS
0885  00433 061760        LDA SECT3      PER TRACK FOR LU #.
0886  00434 052045R       CPA TEMP2     IF NEW SECTOR EXCEEDS TRACK,
0887  00435 002001        RSS            GO TO UPDATE TRACK #.
0888  00436 026454R       JMP L.010     -NO OVERFLOW. 
0889  00437 002400        CLA           SET SECTOR #
0890  00440 072045R       STA TEMP2      = 0. 
0891  00441 036055R       ISZ TEMP0     ADD 1 TO TRACK #. 
0892  00442 061765        LDA LGOTK     GET LGO TRACK ASSIGNMENT WORD.
0893  00443 012515R       AND MASK0     -ADD #
0894  00444 070001        STA B          OF TRACKS
0895  00445 061765        LDA LGOTK      ASSIGNED 
0896  00446 001727        ALF,ALF        TO STARTING
0897  00447 001200        RAL            TRACK
0898  00450 012035R       AND MASK2      # AND
0899  00451 040001        ADA B          CHECK
0900  00452 052055R       CPA TEMP0      FOR OVERFLOW.
0901  00453 027561R       JMP ERR09     ---YES, '09' ERROR AND ABORT. 
0902* 
0903  00454 066044R L.010 LDB TEMP1     (B) = LU #. 
0904  00455 062055R       LDA TEMP0     RECONSTRUCT 
0905  00456 001722        ALF,RAL        THE CURRENT
0906  00457 001222        RAL,RAL        LGO AREA 
0907  00460 032045R       IOR TEMP2      DISC 
0908  00461 004010        SLB            ADDRESS
0909  00462 032042R       IOR MSIGN      AND
0910  00463 071766        STA LGOC       RESET. 
0911  00464 026635R       JMP L.10

0913  00465 037000  ETYPE OCT 37000 
0914  00466 014000  DISC  OCT 14000 

0916  00467 000014  .12   DEC 12
0917  00470 000015  .13   DEC 13
0918  00471 000016  .14   DEC 14
0919  00472 177775  N3    DEC -3





















 PAGE 0022 #01  <  RT EXECUTIVE  INPUT/OUTPUT CONTROL>  A-29016-90003-1 


0921* ALLOW PRIVILEGED ACCESS TO "LOADR" TO PERMIT
0922*  UPDATING OF ID SEGMENTS AND PROGRAMS ON THE
0923*  SYSTEM AREA OF THE DISC. 
0924* 
0925  00473 065717  L.011 LDB XEQT      COMPARE 
0926  00474 046467R       ADB .12        NAME 
0927  00475 160001        LDA B,I        3
0928  00476 052512R       CPA LDRNM      WORD 
0929  00477 006005        INB,RSS        AREA 
0930  00500 027555R       JMP ERR06      IN 
0931  00501 160001        LDA B,I        CURRENT
0932  00502 052513R       CPA LDRNM+1    ID 
0933  00503 006005        INB,RSS        SEGMENT
0934  00504 027555R       JMP ERR06      WITH 
0935  00505 160001        LDA B,I        'LOADR'
0936  00506 012043R       AND M7400     -IF 
0937  00507 052514R       CPA LDRNM+2    SO,
0938  00510 026635R       JMP L.10       ALLOW FULL ACCESS
0939  00511 027555R       JMP ERR06     - ERROR - 
0940* 
0941  00512 046117  LDRNM ASC 2,LOAD    L O A D 
0942  00514 051000        OCT 51000      R  -ZERO-

0944  00515 000177  MASK0 OCT 177 
0945  00516 074000  B7400 OCT 74000 


0947  00517 161701  L.012 LDA RQP2,I    FMP TRACK 
0948  00520 000010        SLA           IF READ 
0949  00521 026635R       JMP L.10      ALLOW ACCESS
0950  00522 012516R       AND B7400     IF FLAG SET 
0951  00523 052516R       CPA B7400     THEN ALLOW
0952  00524 026635R       JMP L.10      ACCESS. 
0953  00525 027555R       JMP ERR06     ELSE ILLEGAL DISC WRITE.





























 PAGE 0023 #01  <  RT EXECUTIVE  INPUT/OUTPUT CONTROL>  A-29016-90003-1 


0955* 
0956* CHECK FOR AUTOMATIC BUFFERING REQUIREMENT 
0957* 
0958  00526 165700  L.02  LDB RQP1,I   SKIP CHECK 
0959  00527 056017R       CPB .1        IF REQUEST
0960  00530 026635R       JMP L.10       IS INPUT.
0961  00531 161663        LDA EQT4,I   CHECK THE UNIT DESCRIPTOR
0962  00532 001200        RAL           WORD IN ITS EQT ENTRY,BIT 14, 
0963  00533 002021        SSA,RSS        FOR BUFFERING. 
0964  00534 026635R       JMP L.10      -NO 
0965* 
0966* AUTOMATIC BUFFERING SECTION 
0967* 
0968  00535 002400        CLA 
0969  00536 056021R       CPB .3       IF REQUEST IS FOR -CONTROL-, 
0970  00537 026544R       JMP L.03      SKIP BUFFER SIZE CHECK. 
0971  00540 062045R       LDA TEMP2     GET THE XFER LENGTH 
0972  00541 003004        CMA,INA        SET NEG AND
0973  00542 072046R       STA TEMP3     -SET AS MOVE INDEX- 
0974  00543 003004        CMA,INA      (SET POSITIVE) 
0975  00544 042023R L.03  ADA .5       ADD 5 FOR BLOCK CONTROL WORDS. 
0976  00545 072557R       STA L.04     SET TOTAL LENGTH FOR ALLOCATION. 
0977  00546 042020R       ADA .2       CHECK FOR BUFFER 
0978  00547 003004        CMA,INA       SIZE TO BE GREATER
0979  00550 065751        LDB AVMEM     THAN MAXIMUM
0980  00551 007004        CMB,INB       AMOUNT
0981  00552 045752        ADB BKORG     OF SYSTEM 
0982  00553 040001        ADA B         AVAILABLE MEMORY. 
0983  00554 002020        SSA          IF YES, THEN ABORT 
0984  00555 027551R       JMP ERR04     PROGRAM.
0985* 
0986* ALLOCATE BLOCK IN TEMPORARY STORAGE 
0987* 
0988  00556 016006X       JSB .ALC.    CALL AT SYSTEM ENTRY POINT 
0989  00557 000000  L.04  NOP           - REQUESTED LENGTH OF BLOCK - 
0990* 
0991  00560 002002        SZA          IF BLOCK AVAILABLE, (A) CONTAINS 
0992  00561 026570R       JMP L.06      STARTING ADDRESS. 
0993* 
0994* NO MEMORY AVAILABLE FOR BLOCK - CALLING USER
0995*  PROGRAM IS TO BE LINKED INTO MEMORY SUSPENSION 
0996*  LIST AND RE-SCHEDULED AT POINT OF REQUEST
0997*  WHEN A PREVIOUSLY ALLOCATED BLOCK IS RELEASED. 
0998* 
0999  00562 061717        LDA XEQT     SET PROGRAM ID SEGMENT ADDRESS 
1000  00563 072566R       STA L.05      IN CALL TO LINK 
1001  00564 016005X       JSB LIST     CALL TO LINK PROGRAM INTO
1002  00565 000104        OCT 104       MEMORY SUSPENSION LIST. 
1003  00566 000000  L.05  NOP 
1004  00567 026003X       JMP XEQ 













 PAGE 0024 #01  <  RT EXECUTIVE  INPUT/OUTPUT CONTROL>  A-29016-90003-1 


1006*  SET REQUEST PARAMETERS, PROGRAM PRIORITY AND 
1007*   USER BUFFER INTO TEMPORARY BLOCK. 
1008* 
1009  00570 076566R L.06  STB L.05     SET ACTUAL BLOCK LENGTH. 
1010  00571 072044R       STA TEMP1    SAVE BLOCK 
1011  00572 070001        STA B         LOCATION
1012  00573 006004        INB 
1013  00574 076057R       STB TEMPW      SAVE ADDRESS 
1014  00575 016706R       JSB WORD2     ASSEMBLE CONTROL WORD 
1015  00576 032037R       IOR MASK5    SET <T> = 1 FOR BUFFERING. 
1016  00577 066057R       LDB TEMPW 
1017  00600 170001        STA B,I       AND SET IN WORD 2 OF BLOCK. 
1018  00601 006004        INB 
1019  00602 161726        LDA XPRIO,I  SET REQUESTING PROGRAM PRIORITY
1020  00603 170001        STA B,I       IN WORD 3.
1021  00604 072045R       STA TEMP2    SAVE PRIORITY FOR LINKING. 
1022  00605 006004        INB 
1023  00606 062566R       LDA L.05     SET BLOCK LENGTH IN
1024  00607 170001        STA B,I       WORD 4. 
1025  00610 006004        INB 
1026  00611 062021R       LDA .3       IF REQUEST 
1027  00612 151700        CPA RQP1,I    IS -CONTROL-, SKIP
1028  00613 026632R       JMP  L.08     BUFFER MOVE 
1029  00614 161703        LDA RQP4,I   SET USER BUFFER LENGTH 
1030  00615 170001        STA B,I       IN WORD 5.
1031  00616 002003        SZA,RSS      IF LENGTH = 0, 
1032  00617 026662R       JMP L.13      SKIP BUFFER MOVE. 
1033* 
1034* MOVE USER BUFFER TO TEMPORARY BLOCK.
1035* 
1036  00620 006004        INB 
1037  00621 061702        LDA RQP3     SET USER BUFFER
1038  00622 072047R       STA TEMP4     ADDRESS FOR MOVE. 
1039  00623 162047R L.07  LDA TEMP4,I  PERFORM
1040  00624 170001        STA B,I       BUFFER MOVE 
1041  00625 036047R       ISZ TEMP4     ((B) = BLOCK ADDRESS, 
1042  00626 006004        INB            (TEMP4) = BUFFER ADDRESS,
1043  00627 036046R       ISZ TEMP3      (TEMP3) = BUFFER LENGTH INDEX) 
1044  00630 026623R       JMP  L.07 
1045  00631 026662R       JMP L.13     GO TO EXIT SECTION.
1046* 
1047  00632 161702  L.08  LDA  RQP3,I  FOR CONTROL REQUEST, SET WORD 3
1048  00633 170001        STA  B,I      (PARAM) IN PLACE OF RECORD
1049  00634 026662R       JMP  L.13      LENGTH.
1050* 
1051* REQUEST IS A NORMAL WRITE, CONTROL OR READ. 
1052*  THE PARAMETERS OF THE REQUEST ARE MOVED
1053*  INTO THE ID SEGMENT OF THE REQUESTING
1054*  PROGRAM. THE ID SEGMENT IS THEN LINKED 
1055*  INTO THE I/O LIST FOR THE REFERENCED DEVICE. 
1056*  THE -SCHEDULER- IS THEN CALLED TO REMOVE 
1057*  THE PROGRAM FROM THE SCHEDULED LIST AND TO 
1058*  CHANGE THE PROGRAM STATUS TO I/O SUSPENSION. 
1059* 
1060  00635 016706R L.10  JSB WORD2     ASSEMBLE CONTROL WORD 
1061  00636 171721        STA XTEMP,I    SAVE IN TEMPORARY #1.







 PAGE 0025 #01  <  RT EXECUTIVE  INPUT/OUTPUT CONTROL>  A-29016-90003-1 


1062  00637 165700        LDB RQP1,I   (B) = REQUEST CODE.
1063  00640 061702        LDA RQP3     SET BUFFER ADDRESS 
1064  00641 056021R       CPB .3        OR CONTROL
1065  00642 161702        LDA RQP3,I    PARAMETER 
1066  00643 171722        STA XTEMP+1,I  WORD,
1067  00644 161703        LDA RQP4,I     BUFFER 
1068  00645 171723        STA XTEMP+2,I   LENGTH AND
1069  00646 161704        LDA RQP5,I     ADDITIONAL PARAMETERS IF 
1070  00647 171724        STA XTEMP+3,I   PROVIDED, 
1071  00650 161705        LDA RQP6,I       E.G., DISC 
1072  00651 171725        STA XTEMP+4,I     TRACK/SECTOR ADDRESSES. 
1073* 
1074  00652 161726        LDA XPRIO,I   SET PRIORITY OF REQUESTING
1075  00653 072045R       STA TEMP2      PROGRAM IN TEMP2.
1076  00654 061720        LDA XLINK     SET ADDRESS OF LINK WORD
1077  00655 072044R       STA TEMP1      IN TEMP1.
1078  00656 072661R       STA L.11
1079* 
1080  00657 016005X       JSB LIST      CALL SCHEDULER TO SUSPEND PROG. 
1081  00660 000102        OCT 102       - ID SEG. ADDR./I/O SUSPEND - 
1082  00661 000000  L.11  NOP           - ADDRESS OF ID SEGMENT.
1083* 
1084* CALL -LINK- TO PERFORM THE LINKING OF THE NEW 
1085*             BLOCK INTO THE DEVICE QUEUE OF
1086*             WAITING OPERATIONS. 
1087* 
1088  00662 016735R L.13  JSB LINK
1089* 
1090  00663 002003        SZA,RSS       IF QUE WAS EMPTY CALL DRIVR.
1091* 
1092* EMPTY LIST, CALL TO INITIATE CURRENT REQUEST. 
1093* 
1094  00664 017001R       JSB DRIVR 
1095  00665 026671R       JMP L.14      - OPERATION INITIATED - 
1096  00666 061677        LDA RQRTN 
1097  00667 171730        STA XSUSP,I 
1098  00670 027724R       JMP NOTRD 
1099* 
1100  00671 061677  L.14  LDA RQRTN    SET REQUEST -EXIT- ADDRESS 
1101  00672 171730        STA XSUSP,I   AS POINT OF SUSPENSION. 
1102  00673 026003X       JMP XEQ      TRANSFER TO EXECUTE SECTION. 
1103* 
1104*  STATUS REQUEST SECTION 
1105* 
1106  00674 061676  L.15  LDA RQCNT     INSURE THAT AT LEAST 2
1107  00675 042032R       ADA N2         PARAMETERS PROVIDED - ONE
1108  00676 002020        SSA            TO STORE STATUS WORD.
1109  00677 027543R       JMP ERR01     -NO, ERROR '01'.
1110* 
1111  00700 165664        LDB EQT5,I    STORE WORD 5 OF EQT ENTRY IN
1112  00701 175702        STB RQP3,I     'STAT1'
1113  00702 165663        LDB EQT4,I    STORE WORD 4 OF EQT ENTRY IN
1114  00703 052017R       CPA .1         'STAT2' IF PARAMETER 3 IS
1115  00704 175703        STB RQP4,I      PRESENT.
1116  00705 026671R       JMP L.14     GO TO RETURN TO XEQ. 








 PAGE 0026 #01  <  RT EXECUTIVE  INPUT/OUTPUT CONTROL>  A-29016-90003-1 


1118* 
1119*  ASSEMBLE CONTROL WORD
1120* 
1121  00706 000000  WORD2 NOP 
1122  00707 161701        LDA RQP2,I    COMBINE REQUEST CODE WITH 
1123  00710 012733R       AND MASK3      CONTROL INFORMATION
1124  00711 131700        IOR RQP1,I     IN PARAMETER TWO AND 
1125  00712 070001        STA B          TEMPORARILY STORE IT-
1126  00713 161701        LDA RQP2,I    EXTRACT LOGICAL UNIT #
1127  00714 012034R       AND MASK1      FROM PARAMETER TWO 
1128  00715 042031R       ADA N1        INDEX TO ENTRY IN 
1129  00716 041652        ADA DRT        DEVICE REFERENCE TABLE 
1130  00717 160000        LDA A,I       GET SUBCHANNEL
1131  00720 013161R       AND MASK9      ASSIGNMENT AND COMBINE 
1132  00721 030001        IOR B          IT WITH CONTROL WORD 
1133  00722 066056R       LDB TEMPL     IF NOT DISC 
1134  00723 006003        SZB,RSS        REQUEST, 
1135  00724 126706R       JMP WORD2,I    EXIT - 

1137  00725 012734R       AND MASKD     OTHERWISE,
1138  00726 101100        SWP            SET BITS (9,8) 
1139  00727 012021R       AND .3         TO INDICATE
1140  00730 001727        ALF,ALF        SYSTEM, AUXILIARY, 
1141  00731 030001        IOR B          OR PERIPHERAL TYPE 
1142  00732 126706R       JMP WORD2,I   EXIT -

1144  00733 003700  MASK3 OCT 3700
1145  00734 176377  MASKD OCT 176377



































 PAGE 0027 #01  <  RT EXECUTIVE  INPUT/OUTPUT CONTROL>  A-29016-90003-1 


1147*  SUBROUTINE:  -LINK-
1148* 
1149* PURPOSE: THIS ROUTINE PROVIDES FOR ADDING 
1150*         AN I/O REQUEST INTO THE SUSPENDED 
1151*         LIST (QUEUE) CORRESPONDING TO THE 
1152*         REFERENCED DEVICE. THE PROCEDURE
1153*         OF ADDING AN ENTRY INTO THE LIST
1154*         INVOLVES ONLY THE ALTERATION OF 
1155*         THE LINKAGE VALUE IN THE NEW ENTRY
1156*         AND IN THE ENTRY PRECEDING THE
1157*         NEW ONE IN THE PRIORITY CHAIN.
1158*         THE NEW ENTRY IS LINKED ACCORDING 
1159*         TO ITS PRIORITY AND ON A FIFO 
1160*         BASIS WITHIN THE SAME PRIORITY
1161*         LEVEL. THE END OF A LIST IS MARKED
1162*         BY A LINKAGE VALUE OF ZERO. THE 
1163*         FIRST ENTRY IN A LIST IS SKIPPED
1164*         BECAUSE IT IS ASSUMED TO BE THE 
1165*         REQUESTOR FOR THE CURRENT I/O 
1166*         OPERATION. IF THE LIST IS EMPTY,
1167*         THE LINK WORD IN THE EQT ENTRY
1168*         IS SET TO POINT TO THE NEW ENTRY
1169*         AND AN INDICATION IS GIVEN TO 
1170*         THE CALLER OF -LINK- THAT THE 
1171*         NEW REQUEST MAY BE INITIATED. 
1172* 
1173* CALL:   THE FOLLOWING LOCATIONS MUST BE 
1174*          SET TO THE INDICATED VALUES
1175*          BEFORE THE CALL IS MADE: 
1176* 
1177*          TEMP1 = LOCATION OF NEW REQUEST
1178*                  TO BE LINKED INTO THE
1179*                  I/O LIST DEFINED BY THE
1180*                  CURRENT EQT ENTRY. THE 
1181*                  ADDRESS OF THE LINKAGE 
1182*                  WORD IN THE EQT ENTRY
1183*                  IS IN -EQT1-.
1184* 
1185*          TEMP2 = PRIORITY OF THE NEW
1186*                  REQUEST. 
1187* 
1188*          TEMPL = DISC QUE FLAG (# 0 MEANS DISC) 
1189* 
1190*         -  JSB  LINK
1191*         -  (RETURN)  (A) = 0 IF THE NEW 
1192*                 REQUEST IS THE ONLY ENTRY 
1193*                 IN THE I/O LIST, I.E. THE 
1194*                 DRIVER MAY BE CALLED TO 
1195*                 INITIATE THE NEW OPERATION. 
1196* 
1197*            THERE ARE NO ERROR CONDITIONS
1198*             DETECTED OR DIAGNOSED BY THIS 
1199*             ROUTINE.
1200* 
1201* 








 PAGE 0028 #01  <  RT EXECUTIVE  INPUT/OUTPUT CONTROL>  A-29016-90003-1 


1203  00735 000000  LINK  NOP 
1204  00736 165660        LDB EQT1,I   IF THE I/O LIST IS NULL, 
1205  00737 006003        SZB,RSS       EQT LIST POINTER = 0, 
1206  00740 026770R       JMP LINK4      SKIP TO ADD NEW REQUEST. 
1207* 
1208* FIRST ENTRY IN LIST IS SKIPPED BECAUSE IT 
1209*  IS THE CALLER FOR THE CURRENT OPERATION
1210*  ACTIVE ON THE I/O DEVICE.
1211* 
1212  00741 026760R       JMP LINK7     GO START THE SCAN 
1213* 
1214  00742 076046R LINK1 STB TEMP3    TEMP3 = ADDRESS OF CURRENT ENTRY.
1215  00743 006004        INB          EXAMINE THE
1216  00744 160001        LDA B,I       TYPE FIELD IN WORD 2 OF BLOCK 
1217  00745 006004        INB           TO DETERMINE LOCATION 
1218  00746 001210        RAL,SLA        OF PRIORITY. 
1219  00747 026774R       JMP LINK5     IF A SYSTEM ENTRY CHECK FOR DISC
1220  00750 002021        SSA,RSS      IF NORMAL USER REQUEST, PRIORITY 
1221  00751 046022R       ADB .4        IS IN WORD 7 OF ID SEGMENT. 
1222  00752 160001  LINK8 LDA B,I      GET PRIORITY OF CURRENT ENTRY. 
1223  00753 066046R LINK2 LDB TEMP3 
1224  00754 003004        CMA,INA      SUBTRACT CURRENT PRIORITY FROM 
1225  00755 042045R       ADA TEMP2     PRIORITY OF NEW REQUEST.
1226  00756 002020        SSA          IF CURRENT IS LOWER PRIORITY 
1227  00757 026764R       JMP LINK3     (HIGHER #), GO TO LINK NEW. 
1228  00760 076050R LINK7 STB TEMP5     SAVE PREVIOUS ENTRY POINTER 
1229  00761 164001        LDB B,I        GET NEXT ENTRY 
1230  00762 006002        SZB          IF END-OF-LIST, SKIP.
1231  00763 026742R       JMP LINK1    -CONTINUE SCAN.
1232* 
1233* PROPER POSITION (BY PRIORITY) IS FOUND IN LIST, 
1234*  OR ELSE THE SCAN OF THE LIST IS FINISHED AND 
1235*  THE NEW REQUEST IS ADDED AS THE LAST ENTRY.
1236* 
1237  00764 062044R LINK3 LDA TEMP1    SET ADDRESS OF NEW ENTRY IN
1238  00765 172050R       STA TEMP5,I   LINKAGE VALUE OF PREVIOUS ENTRY.
1239  00766 176044R LINK6 STB TEMP1,I  SET ADDRESS OF NEXT OR 0 IF LAST 
1240  00767 126735R       JMP LINK,I    IN NEW - EXIT TO CALLER.
1241* 
1242* NULL LIST- REQUEST IS MADE FIRST IN LIST AND FLAG FOR SET FOR CALL
1243* 
1244  00770 062044R LINK4 LDA TEMP1    SET ADDRESS OF NEW IN LIST POINT-
1245  00771 171660        STA EQT1,I    ER IN EQT ENTRY.
1246  00772 002400        CLA          SET NEXT LINK ADDR. IN NEW = 0.
1247  00773 026766R       JMP LINK6     GO FINISH LINK AND EXIT 

1249* A SYSTEM REQUEST HAS BEEN FOUND IN THE QUE
1250* SYSTEM DISC REQUESTS ARE QUED BY THE PRIORITY IN
1251* WORD 7 OF THE CALL.   OTHER SYSTEM REQUEST ARE AT 
1252* PRIORITY ZERO.

1254  00774 062056R LINK5 LDA TEMPL      GET DISC FLAG
1255  00775 002003        SZA,RSS        IF NOT A DISC REQUEST
1256  00776 026753R       JMP LINK2     GO BACK WITH PRIORITY ZERO
1257  00777 006004        INB            STEP B TO WORD 7 OF XSIO CALL
1258  01000 026752R       JMP LINK8      GO BACK TO PICK UP THE PRIORITY







 PAGE 0029 #01  <  RT EXECUTIVE  INPUT/OUTPUT CONTROL>  A-29016-90003-1 


1260* SUBROUTINE:  -DRIVR-
1261* 
1262*  PURPOSE: THIS ROUTINE PROVIDES A CENTRAL POINT 
1263*            FOR CALLING AN I/O DRIVER TO INITIATE
1264*            A NEW OPERATION. THIS ROUTINE, BEFORE
1265*            CALLING A DRIVER, SETS THE REQUEST 
1266*            PARAMETERS INTO THE APPROPRIATE WORDS
1267*            IN THE EQT ENTRY CORRESPONDING TO THE
1268*            REFERENCED DEVICE AND ASSIGNS A DMA
1269*            CHANNEL IF REQUIRED. 
1270*            IT ALSO SETS THE DEVICE TIME-OUT CLOCK.
1271* 
1272*  REQUIREMENTS: THE ADDRESSES OF THE EQUIPMENT 
1273*            TABLE ENTRY (15 WORDS) MUST BE SET 
1274*            IN EQT1 TO EQT15 BEFORE THE ROUTINE
1275*            IS CALLED. 
1276* 
1277*  CALLING SEQUENCE:   - PARAMETER SET UP AS ABOVE- 
1278*                      - (REGISTERS  MEANINGLESS) - 
1279* 
1280*                   (R)   JSB DRIVR 
1281*                   (P+1) -OPERATION INITIATED OR STACKED 
1282*                   (P+2) -OPERATION REJECTED OR COMPLETED- 
1283* 
1284*  ERRORS/DIAGNOSTICS: A DRIVER IS CALLED ONLY
1285*                      IF THE UNIT IS AVAILABLE 
1286*                      AND NOT BUSY; OTHERWISE, 
1287*                      RETURN IS MADE TO THE
1288*                      CALLER.  IF THE DRIVER 
1289*                      FINDS THE UNIT UNAVAILABLE 
1290*                      OR THE REQUEST ILLEGAL FOR 
1291*                      THE UNIT, THE INDICATION IS
1292*                      RETURNED TO THE CALLER FOR 
1293*                      FURTHER ACTION.
1294* 
1295  01001 000000  DRIVR NOP 
1296  01002 161664        LDA EQT5,I   CHECK AVAILABILITY 
1297  01003 001222        RAL,RAL       OF
1298  01004 012021R       AND .3         DEVICE.
1299  01005 072051R       STA TEMP6    SAVE AVAILABILITY STATUS.
1300  01006 052017R       CPA .1       IF DOWN OR NOT READY 
1301  01007 127001R       JMP DRIVR,I   EXIT IMMEDIATELY. 
1302  01010 052020R       CPA .2       IF CURRENTLY BUSY, 
1303  01011 127001R       JMP DRIVR,I   ALSO EXIT.
1304* 
1305* DEVICE IS AVAILABLE - CHECK FOR DMA REQUIREMENT 
1306* 
1307  01012 052021R       CPA .3         IF IN DMA QUE
1308  01013 027022R       JMP DVR00       GO ATTEMPT ASSIGNMENT 
1309  01014 161663        LDA EQT4,I   SKIP DMA CHANNEL ASSIGNMENT IF 
1310  01015 002021        SSA,RSS       NOT REQUIRED ( D FIELD = 0 )
1311  01016 027055R       JMP DRV02     IN WORD 4 OF EQT ENTRY. 

1313*                     LDB EQT1,I   SKIP DMA CHANNEL ASSIGNMENT IF 
1314*                     INB           CONTROL REQUEST (CODE = 3)
1315*                     LDA B,I 







 PAGE 0030 #01  <  RT EXECUTIVE  INPUT/OUTPUT CONTROL>  A-29016-90003-1 


1316*                     AND .3
1317*                     CPA .3
1318*                     JMP DRV02+2 
1319* 
1320* DMA CHANNEL REQUIRED - ATTEMPT TO ASSIGN CHANNEL
1321* 
1322  01017 062064R DVR0  LDA DMACF      IF DMA QUE IS NOT EMPTY
1323  01020 002002        SZA 
1324  01021 027034R       JMP DVR1       THEN JUST ADD THIS EQT TO QUE. 
1325* 
1326  01022 062024R DVR00 LDA .6       INITIALIZE FOR 
1327  01023 071673        STA  CHAN     CHANNEL 6 (DMA # 1 )
1328  01024 065654        LDB INTBA    ADDR. OF DMA 1 IN INTERRUPT TABLE
1329  01025 002400        CLA          IF DMA CHANNEL # 1 
1330  01026 150001        CPA B,I       AVAILABLE   (INTBL ENTRY = 0),
1331  01027 027043R       JMP DRV01    GO TO ASSIGN IT TO THIS UNIT.
1332  01030 006004        INB          SET FOR CHANNEL 7, 
1333  01031 035673        ISZ  CHAN     DMA CHANNEL # 2.
1334  01032 150001        CPA B,I      IF THIS CHANNEL AVAILABLE, 
1335  01033 027043R       JMP DRV01     GO TO ASSIGN IT.
1336* 
1337* NO CHANNEL AVAILABLE - SET FLAGS AND RETURN 
1338* 
1339  01034 161664  DVR1  LDA EQT5,I   IF DEVICE
1340  01035 002020        SSA           IS ALREADY WAITING FOR DMA, 
1341  01036 127001R       JMP DRIVR,I   EXIT. 
1342  01037 032036R       IOR MASK4    SET AVAIL TO SAY WAITING FOR 
1343  01040 171664        STA EQT5,I    DMA, ADD 1 TO 
1344  01041 036064R       ISZ DMACF     # DEVICES WAITING.
1345  01042 127001R       JMP DRIVR,I   - EXIT TO CALLER -
1346* 
1347* ASSIGN AVAILABLE CHANNEL
1348* 
1349  01043 061660  DRV01 LDA EQT1     SET EQT ENTRY ADDRESS IN INTER-
1350  01044 170001        STA B,I       RUPT TABLE ENTRY FOR CHANNEL. 
1351  01045 066064R       LDB DMACF    IF UNIT WAS
1352  01046 062051R       LDA TEMP6     PREVIOUS WAITING
1353  01047 052021R       CPA .3        FOR A DMA 
1354  01050 046031R       ADB N1        CHANNEL, SUBTRACT 1 FROM # OF 
1355  01051 076064R       STB DMACF     UNITS WAITING.
1356  01052 161664        LDA EQT5,I   CLEAR
1357  01053 012040R       AND MASK6     <AVAIL> 
1358  01054 171664        STA EQT5,I     FIELD. 
1359* 
1360* TRANSFER REQUEST PARAMETERS TO EQT ENTRY
1361* 
1362  01055 165660  DRV02 LDB EQT1,I   GET CURRENT REQUEST ADDRESS
1363  01056 006004        INB           FROM LINK WORD OF EQT ENTRY.
1364  01057 160001        LDA B,I      GET REQUEST CONTROL WORD,
1365  01060 013162R       AND MASKS     SET SUBCHANNEL BITS TO ZERO 
1366  01061 171665        STA EQT6,I    SET IN EQT 6. 
1367  01062 120001        XOR B,I       SET SUBCHANNEL
1368  01063 001727        ALF,ALF        NUMBER INTO
1369  01064 001723        ALF,RAR        BITS 8-6 
1370  01065 072056R       STA TEMPL      OF EQT4
1371  01066 160001        LDA B,I 







 PAGE 0031 #01  <  RT EXECUTIVE  INPUT/OUTPUT CONTROL>  A-29016-90003-1 


1372  01067 001200        RAL          IF REQUEST IS
1373  01070 002020        SSA           HELD AS A TEMPORARY BLOCK FOR 
1374  01071 027106R       JMP DRV03      BUFFERING, JUMP. 
1375  01072 006004        INB 
1376  01073 160001        LDA B,I      SET BUFFER 
1377  01074 171666        STA EQT7,I     ADDRESS. 
1378  01075 006004        INB 
1379  01076 160001        LDA B,I      SET BUFFER 
1380  01077 171667        STA EQT8,I     LENGTH.
1381  01100 006004        INB 
1382  01101 104200        DLD B,I       SET ADDITIONAL 2
1383  01103 104400        DST EQT9,I     PARAMETERS IF SUPPLIED.
1384  01105 027123R       JMP DRV05 
1385* 
1386  01106 046021R DRV03 ADB .3        * TEMPORARY BLOCK * 
1387  01107 001310        RAR,SLA       CHECK REQUEST CODE. 
1388  01110 002001        RSS           - CONTROL REQUEST - 
1389  01111 027114R       JMP DRV04     - WRITE   REQUEST - 
1390  01112 164001        LDB B,I       SET CONTROL PARAMETER 
1391  01113 027117R       JMP DVR4       IN THE EQT 
1392  01114 160001  DRV04 LDA B,I      GET BUFFER LENGTH
1393  01115 171667        STA EQT8,I     OF THE BLOCK.
1394  01116 006004        INB          ADDRESS OF WORD 6 IS 
1395  01117 175666  DVR4  STB EQT7,I    THE BUFFER ADDRESS. 
1396  01120 002400        CLA          CLEAR
1397  01121 171670        STA EQT9,I    WORDS 9 AND 10 OF 
1398  01122 171671        STA EQT10,I    EQT ENTRY. 
1399* 
1400* CALL DRIVER -INITIATION- SECTION
1401* 
1402  01123 161773  DRV05 LDA EQT14,I   SET DEVICE
1403  01124 165774        LDB EQT15,I   TIME OUT IF NOT STILL ACTIVE
1404  01125 006003        SZB,RSS       ELSE SKIP RESETING IT 
1405  01126 171774        STA EQT15,I 
1406  01127 161663        LDA EQT4,I    ZERO TIME-OUT 
1407  01130 013160R       AND MASK7      BIT AND SET
1408  01131 032056R       IOR TEMPL      IN SUBCHANNEL
1409  01132 171663        STA EQT4,I    SET (A) = CHANNEL 
1410  01133 012034R       AND MASK1     # OF I/O DEVICE.
1411  01134 165661        LDB EQT2,I   CALL DRIVER *INITIATION* 
1412  01135 114001        JSB B,I        SECTION. 






















 PAGE 0032 #01  <  RT EXECUTIVE  INPUT/OUTPUT CONTROL>  A-29016-90003-1 


1414* DRIVER RETURNS AN INDICATION OF THE ACCEPTANCE
1415*  OR REJECTION OF THE REQUESTED OPERATION: 
1416*   (A) = 0, OPERATION SUCCESSFULLY INITIATED 
1417*   (A) NOT = 0, OPERATION REJECTED AND (A) 
1418*                CONTAINS A NUMERIC CODE
1419*                IDENTIFYING THE CAUSE OF 
1420*                THE REJECT.
1421* 
1422*        = 1    READ OR WRITE REQUEST ILLEGAL FOR DEVICE
1423*        = 2    CONTROL REQUEST ILLEGAL OR NOT DEFINED
1424*        = 3    EQUIPMENT MALFUNCTION OR NOT READY
1425*        = 4    IMMEDIATE COMPLETION OF OPERATION 
1426*        = 5    DRIVER REQUIRES DMA BUT FLAG IS NOT SET IN EQT
1427* 
1428  01136 072051R       STA TEMP6    SAVE DRIVER CODE.
1429  01137 002002        SZA          IF REJECTED, 
1430  01140 027145R       JMP DRV06     EXAMINE REASON
1431* 
1432* OPERATION INITIATED 
1433* 
1434  01141 161664        LDA EQT5,I   SET
1435  01142 032042R       IOR MSIGN     <AVAIL> = 2 TO SAY DEVICE 
1436  01143 171664        STA EQT5,I     IN OPERATION.
1437  01144 127001R       JMP DRIVR,I   EXIT. 
1438* 
1439*  OPERATION REJECTED 
1440* 
1441  01145 076057R DRV06 STB TEMPW     SAVE (B)
1442  01146 002400        CLA           CLEAR DEVICE
1443  01147 171774        STA EQT15,I    TIME-OUT CLOCK 
1444  01150 016401R       JSB CLDMA     CLEAR DMA IF ALLOCATED
1445  01151 062051R       LDA TEMP6    (A) = REJECT CODE. 
1446  01152 052023R       CPA .5        IF DMA REQUIRED 
1447  01153 027017R       JMP DVR0       GO ATTEMPT ASSIGNMENT
1448  01154 037001R       ISZ DRIVR    SET RETURN TO (P+2). 
1449  01155 052021R       CPA .3        IF NOT READY THEN 
1450  01156 127001R       JMP DRIVR,I   -EXIT.
1451  01157 027573R       JMP ILLCD     ELSE GO TO SEND THE MESSAGE 

1453  01160 173077  MASK7 OCT 173077
1454  01161 034000  MASK9 OCT 34000 
1455  01162 143777  MASKS OCT 143777





















 PAGE 0033 #01  < RTIOC SUBSECTION - SYS RQ PROCESSOR > A-29016-90003-1 


1457* SYSTEM I/O REQUEST PROCESSOR  - XSIO -
1458* 
1459*  A PRIVATE ENTRY IS PROVIDED AT ENTRY POINT 
1460* < XSIO > TO ALLOW MODULES OF THE REAL TIME
1461* EXECUTIVE TO CALL FOR I/O OPERATIONS WITHOUT
1462* INCURRING THE OVERHEAD AND PROCEDURES 
1463* INVOLVED WITH USER I/O REQUESTS. NO ERROR 
1464* CHECKING IS PERFORMED, THE REQUEST IS LINKED
1465* INTO THE APPROPRIATE I/O LIST AT A PRIORITY 
1466* LEVEL OF ZERO (HIGHEST PRIORITY), AND CONTROL 
1467* IS RETURNED TO THE FIRST WORD FOLLOWING THE 
1468* REQUEST CALL. 
1469* REQUEST FORMAT: A SYSTEM I/O REQUEST DIFFERS
1470*                 FROM THE USER I/O REQUEST IN
1471*                 FORMAT AND POWER. SPECIFICALLY, 
1472*                 A SYSTEM DISC CALL CAN SPECIFY A
1473*                 SERIES OF TRANSFERS TO BE 
1474*                 PERFORMED BEFORE THE NEXT 
1475*                 OPERATION IS INITIATED. A 
1476*                 COMPLETION ADDRESS CAN BE 
1477*                 SPECIFIED FOR OPERATION OF
1478*                 AN OPEN SUBROUTINE AT THE 
1479*                 END OF THE OPERATION. THIS
1480*                 FACILITY IS ONLY AVAILABLE
1481*                 TO SYSTEM ROUTINES AND IS 
1482*                 USED TO RESET FLAGS, ETC. 
1483*                 BECAUSE AN OPERATION IS 
1484*                 ALWAYS BUFFERED TO THE
1485*                 SYSTEM. A ZERO COMPLETION 
1486*                 ADDRESS INDICATES ABSENCE 
1487*                 OF A COMPLETION ROUTINE.
1488*      WORD 
1489*      ----   EXT   XSIO
1490*        1    JSB   XSIO
1491*        2    OCT   <LOGICAL UNIT #>
1492*        3    DEF   <COMPLETION ROUTINE ADDRESS>
1493*        4    NOP   <LIST POINTER WORD SET BY SYSTEM> 
1494*        5    OCT   <CONTROL INFO, REQUEST CODE>
1495*        6    DEF   <BUFFER ADDRESS OR DISC CONTROL WORDS>
1496*        7    DEC   <BUFFER LENGTH> OR <PRIORITY IF DISC REQUEST> 
1497* 
1498*       DISC VERSION OF REQUEST:
1499*         WORD 6 OF REQUEST POINTS TO AN ARRAY
1500*        CONTAINING -N- SETS OF TRIPLETS
1501*        DECLARING BUFFER ADDRESS, LENGTH AND 
1502*        TRACK/SECTOR ADDRESS FOR EACH TRANSFER.
1503*        THE SET OF TRIPLETS IS OPEN-ENDED AND
1504*        TERMINATED BY A ZERO WORD: 
1505* 
1506*        1    DEF   < BUFFER ADDRESS> 
1507*        2    DEC   < BUFFER LENGTH > 
1508*        3    OCT   < TRACK/SECTOR #> 
1509*        .    ETC 
1510*        .     .
1511*        N    DEC   0    (END OF TRIPLETS)
1512*        FOR DISC REQUEST THE 7'TH WORD IS THE REQUEST PRIORITY.







 PAGE 0034 #01  < RTIOC SUBSECTION - SYS RQ PROCESSOR > A-29016-90003-1 


1513* 
1514* 
1515  01163 000000  XSIO  NOP 
1516  01164 167163R       LDB XSIO,I   GET LOGICAL UNIT #.
1517  01165 046031R       ADB N1       SUBTRACT 1 AND INDEX TO
1518  01166 045652        ADB DRT       DEVICE REFERENCE TABLE. 
1519  01167 160001        LDA B,I       GET ASSIGNED EQT ENTRY #. 
1520  01170 013161R       AND MASK9     MASK OUT SUBCHANNEL 
1521  01171 072056R       STA TEMPL       AND SAVE IT 
1522  01172 120001        XOR B,I        EQT # INTO A 
1523  01173 016243R       JSB CVEQT    CONVERT TO ABSOLUTE EQT ADDRESSES
1524* 
1525  01174 067163R       LDB XSIO      SET ADDRESS 
1526  01175 046020R       ADB .2        OF LIST POINTER WORD IN 
1527  01176 076044R       STB TEMP1     REQUEST FOR <LINK>. 
1528* 
1529  01177 006304        CCE,INB      SET
1530  01200 160001        LDA B,I       <T> FIELD (BITS 15-14) OF 
1531  01201 013162R       AND MASKS 
1532  01202 032056R       IOR TEMPL       WORD 5 = 2 FOR SYSTEM REQUEST 
1533  01203 001623        ELA,RAR         AND SET IN SUBCHANNEL NUMBER
1534  01204 170001        STA B,I        IDENTIFICATION.
1535  01205 002400        CLA           SET PRIORITY OF REQUEST = 0 
1536  01206 072045R       STA TEMP2      FOR <LINK>,
1537  01207 072060R       STA CONFL      SET CONTROL FLAG = 0 (REQUEST).
1538  01210 072056R       STA TEMPL      SET DISC FLAG TO ZERO (NON-DISC
1539  01211 161664        LDA EQT5,I     GET THE DRIVER TYPE
1540  01212 012465R       AND ETYPE      MASK TO TEST FOR DISC
1541  01213 046021R       ADB .3        SET B TO THE RETURN ADDRESS 
1542  01214 077163R       STB XSIO       AND SAVE IT
1543  01215 046031R       ADB N1         SET B TO DISC PRIORITY WORD
1544  01216 164001        LDB B,I        GET PRIORITY WORD
1545  01217 052466R       CPA DISC      IF DISC 
1546  01220 076045R       STB TEMP2      SET PRIORITY 
1547  01221 052466R       CPA DISC       AND
1548  01222 072056R       STA TEMPL      THE DISC FLAG FOR <LINK> 
1549  01223 016735R       JSB LINK     CALL TO LINK REQUEST IN I/O LIST.
1550* 
1551  01224 002003        SZA,RSS        IF DEVICE NOT BUSY 
1552* 
1553  01225 017001R       JSB DRIVR    CALL DRIVER TO INITIATE OPERATION
1554  01226 127163R       JMP XSIO,I      -GOOD REQUEST,EXIT
1555* 
1556  01227 067163R       LDB XSIO      BAD NEWS SO TRANSFER THE
1557  01230 077232R       STB XSIOE     RETURN ADDRESS FOR NR ROUTINE 
1558* 
1559  01231 027724R       JMP NOTRD     PRINT DIAGNOSTIC. 

1561  01232 000000  XSIOE NOP 














 PAGE 0035 #01  < RTIOC - COMPLETION SUBSECTION >       A-29016-90003-1 


1563* 
1564* I/O COMPLETION SUBSECTION 
1565* 
1566*  THIS SECTION IS RESPONSIBLE FOR THE INITIATION 
1567*   OF STACKED I/O OPERATIONS, PLACING A USER 
1568*   PROGRAM BACK IN A SCHEDULED STATE WHEN ITS
1569*   I/O OPERATION IS COMPLETED, DYNAMIC ALLOCATION
1570*   OF THE TWO DMA CHANNELS AMONG SYNCHRONOUS 
1571*   DEVICES, AND CALLING FOR OPERATOR NOTIFICATION
1572*   OF EQUIPMENT MALFUNCTION. 
1573* 
1574*  <IOCOM> IS ENTERED DIRECTLY FROM INTERRUPT CONTROL 
1575*   WHEN AN I/O OPERATION IS TERMINATED AND ALL 
1576*   ERROR RECOVERY PROCEDURES HAVE BEEN ATTEMPTED.
1577*   ON ENTRY TO THIS SECTION, (B) CONTAINS THE
1578*   NUMBER OF WORDS TRANSFERRED. THE ADDRESSES OF 
1579*   THE EQUIPMENT TABLE ENTRY ARE SET IN -EQT1- TO
1580*   - EQT 15-.
1581* 
1582*  REQUESTS ARE STACKED IN LISTS FOR EACH DEVICE
1583*   ACCORDING TO PRIORITY. THE REQUESTS ARE EITHER
1584*   USER (NORMAL), USER (AUTOMATIC OUTPUT BUFFERING)
1585*   OR SYSTEM - IDENTIFICATION OF REQUEST TYPE
1586*   THE CODE IN BITS 15-14 OF THE <CONTROL WORD>
1587*   IN EACH REQUEST CALL. THE FORMATS OF THE THREE
1588*   TYPES OF REQUESTS AS THEY APPEAR IN THE I/O 
1589*   LISTS ARE:
1590* 
1591*     1)  USER (NORMAL OPERATION) 
1592* 
1593*        THE PARAMETERS FROM THE REQUEST ARE STORED 
1594*       IN THE TEMPORARY AREA OF THE PROGRAM ID 
1595*       SEGMENT. THE LINK WORD OF THE SEGMENT IS
1596*       USED TO LINK INTO THE I/O LIST. 
1597* 
1598*        WORD         CONTENTS
1599*        ----         --------
1600*         1   < LINKAGE WORD           >
1601*         2   <T, CONTROL INFO, CODE   >
1602*         3   <BUFFER ADDRESS          >
1603*         4   <BUFFER LENGTH           >
1604*         5   <DISC TRACK ADDR OR ZERO >
1605*         6   <DISC SECTOR ADDR OR ZERO>
1606*         7   <PROGRAM PRIORITY        >
1607*         .   -REMAINDER OF ID SEGMENT .
1608* 
1609* 
















 PAGE 0036 #01  < RTIOC - COMPLETION SUBSECTION >       A-29016-90003-1 


1611*     2)  USER (AUTOMATIC OUTPUT BUFFERING) 
1612* 
1613*        REQUESTS OF THIS TYPE ARE CONSTRUCTED
1614*       IN THE SECTION OF SYSTEM AVAILABLE MEMORY.
1615* 
1616*        WORD         CONTENTS
1617*        ----         --------
1618*         1   < LINKAGE WORD           >
1619*         2   <T, CONTROL INFO, CODE   >
1620*         3   <PRIORITY OF REQUESTOR   >
1621*         4   <TOTAL BLOCK LENGTH WORDS>
1622*         5   <USER BUFFER LENGTH      >
1623*         6   <WORD 1 OF USER BUFFER   >
1624*         .      .       .        . 
1625*         .      .       .        . 
1626*         N+5 <WORD N OF USER BUFFER   >
1627* 
1628* 
1629*     3)  SYSTEM REQUEST
1630* 
1631*        THE SYSTEM REQUEST IS LINKED INTO
1632*       THE I/O LIST BY USING WORD 4 OF THE 
1633*       CALL AS A LINK WORD. A SYSTEM 
1634*       REQUEST ASSUMES THE PRIORITY LEVEL
1635*       OF ZERO (HIGHEST PRIORITY). 
1636* 
1637*        WORD         CONTENTS
1638*        ----         --------
1639*         1   <       JSB  XSIO        >
1640*         2   <     LOGICAL UNIT #     >
1641*         3   <COMPLETION ROUTINE ADDR >
1642*         4   <   LINKAGE WORD         >
1643*         5   <T, CONTROL INFO, CODE   >
1644*         6   <BUFFER ADDR OR DISC CNTL>
1645*         7   <BUFFER LENGTH OR PRIORITY> 
1646* 
1647*  THE <T> FIELD (BITS 15-14 IN CONTROL WORD) 
1648*   IDENTIFIES THE REQUEST TYPE AS: 
1649* 
1650*      00   USER (NORMAL OPERATION) 
1651*      01   USER (AUTOMATIC BUFFERING)
1652*      10   SYSTEM
1653* 
1654* 



















 PAGE 0037 #01  < RTIOC - COMPLETION SUBSECTION >       A-29016-90003-1 


1656  01233 001265  IOCOM RAL,CLE,ERA   CLEAR THE SIGN BIT AND SAVE IN E
1657  01234 072046R       STA TEMP3     SAVE STATUS FROM DRIVER AND 
1658  01235 076062R       STB TLOG      TRANSMISSION LOG
1659* 
1660  01236 002400        CLA           CLEAR 
1661  01237 072063R       STA  COMPL    CLEAR COMPLETION ADDRESS. 
1662  01240 171774        STA EQT15,I   CLEAR TIME-OUT CLOCK
1663* 
1664  01241 161663        LDA EQT4,I    SET THE COMPLETION SECTION FLAG 
1665  01242 072060R       STA CONFL     AND TEST FOR DMA RETURN 
1666  01243 002041        SEZ,RSS        SIGN OF A IS EXPLICID RETURN OF
1667  01244 002020        SSA            DMA CHANNEL, CALL TO 
1668  01245 016401R       JSB CLDMA       RELEASE ITS ASSIGNMENT. 
1669* 
1670  01246 165660        LDB EQT1,I    GET CONTROL WORD FROM 
1671  01247 006003        SZB,RSS       IF ILLEGAL ENTRY
1672  01250 026121R       JMP CIC.4      SEND ERROR MESSAGE 
1673  01251 006004        INB            REQUEST BLOCK TO 
1674  01252 160001        LDA B,I         EXTRACT  <T> FIELD. 
1675  01253 072055R       STA TEMP0     SAVE CONTROL WORD.
1676  01254 001210        RAL,SLA      IF BIT 15 = 1  (<T> = 2) 
1677  01255 027322R       JMP L.53       PROCESS AS SYSTEM REQUEST. 
1678  01256 002021        SSA,RSS       IF <T> = 0, PROCESS 
1679  01257 027276R       JMP L.51       AS NORMAL USER REQUEST.
1680* 
1681* RELEASE AUTOMATIC BUFFERING BLOCK 
1682* 
1683  01260 062046R       LDA TEMP3     BY PASS RELEASE OF
1684  01261 002002        SZA            BUFFER IF MALFUNCTION
1685  01262 027424R       JMP L.70       OCCURRED 
1686  01263 046020R       ADB .2        GET TOTAL 
1687  01264 164001        LDB B,I        BLOCK LENGTH AND 
1688  01265 077274R       STB L.50+1      SET IN RELEASE CALL.
1689  01266 165660        LDB EQT1,I    SET ADDRESS OF BLOCK
1690  01267 077273R       STB L.50       IN CALL. 
1691  01270 160001        LDA B,I       SET LINK TO NEXT STACKED
1692  01271 171660        STA EQT1,I     REQUEST IN EQT ENTRY - WORD 1. 
1693* 
1694  01272 016007X       JSB .RTN.    RELEASE BLOCK TO AVAILABLE MEM.
1695  01273 000000  L.50  NOP            - BLOCK ADDRESS -
1696  01274 000000        NOP            - BLOCK LENGTH - 
1697  01275 027333R       JMP L.55
1698* 
1699* NORMAL USER OPERATION COMPLETION
1700* 
1701  01276 165660  L.51  LDB EQT1,I    GET ID SEGMENT ADDRESS
1702  01277 160001        LDA B,I       SET NEXT LINK ADDRESS 
1703  01300 171660        STA EQT1,I     IN WORD 1 OF EQT ENTRY.
1704  01301 077320R       STB L.52      SET CURRENT ADDR. FOR SCHEDULER.
1705* 
1706  01302 046027R       ADB .9        SET (B) = ADDR. OF XA IN ID SEG.
1707  01303 062046R       LDA TEMP3      GET COMPLETION STATUS
1708  01304 002102        CLE,SZA         SET BIT 14
1709  01305 002300        CCE             IN STATUS WORD
1710  01306 161664        LDA EQT5,I      IF THE STATUS 
1711  01307 001222        RAL,RAL       IS NON-ZERO 







 PAGE 0038 #01  < RTIOC - COMPLETION SUBSECTION >       A-29016-90003-1 


1712  01310 001565        ERA,CLE,ERA   AND SAVE IN USER A-REG. 
1713  01311 170001        STA B,I        CONTENTS OF PROGRAM. 
1714  01312 006004        INB 
1715  01313 076054R       STB TEMP9      SAVE TRANSMISSION LOG ADDRESS
1716  01314 062062R       LDA TLOG     SET TRANSMISSION LOG AS
1717  01315 170001        STA B,I        SAVED B-REGISTER.
1718* 
1719  01316 016005X       JSB LIST      CALL SCHEDULER MODULE TO PLACE
1720  01317 000101        OCT 101        USER PROGRAM INTO <SCHEDULE> 
1721  01320 000000  L.52  NOP             LIST. 
1722  01321 027330R       JMP L.54
1723* 
1724* SYSTEM REQUEST COMPLETION 
1725* 
1726  01322 165660  L.53  LDB EQT1,I   GET CURRENT REQUEST <LINK> ADDR. 
1727  01323 160001        LDA B,I       SET NEXT LINK ADDRESS 
1728  01324 171660        STA EQT1,I     IN EQT ENTRY.
1729* 
1730  01325 046031R       ADB N1        GET WORD 3 OF REQUEST 
1731  01326 160001        LDA B,I         <COMPLETION ROUTINE ADDRESS>. 
1732  01327 072063R       STA COMPL    SAVE COMPLETION ADDR. OR ZERO. 
1733* 
1734* < L.54 >  : AT THIS POINT:
1735*        1) A TEMPORARY BUFFER HAS BEEN RELEASED, 
1736*        2) A NORMAL OPERATION HAS CAUSED THE 
1737*            REQUESTING PROGRAM TO BE LINKED
1738*            BACK INTO THE <SCHEDULE> LIST, OR
1739*         3) A SYSTEM REQUEST COMPLETION ADDRESS
1740*            HAS BEEN SAVED.
1741* 
1742  01330 062046R L.54  LDA TEMP3     BY PASS INITIATING THE NEXT 
1743  01331 002002        SZA            OPERATION IF A MALFUNCTION HAS 
1744  01332 027424R       JMP L.70       OCCURRED ON THIS DEVICE. 
1745* 
1746* 
1747  01333 161664  L.55  LDA EQT5,I   CHECK <AVAIL> FIELD. 
1748  01334 002021        SSA,RSS        IF AV SAYS BUSY
1749  01335 027403R       JMP IOCX        SKIP ELSE GO EXIT 
1750* 
1751* SECTION  <60> PROVIDES FOR INITIATING THE NEXT
1752*  OPERATION WAITING FOR THE COMPLETED DEVICE.
1753* 
1754  01336 161664  L.60  LDA EQT5,I   SET <AVAIL>
1755  01337 012040R       AND MASK6     FIELD 
1756  01340 171664        STA EQT5,I     = 0 TO SAY AVAILABLE.
1757  01341 027375R       JMP L.68      GO START THE NEXT REQUEST 
1758* 
1759  01342 000013  .11   DEC 11

1761* 
1762* THIS DEVICE IS COMPETING WITH OTHER DEVICES FOR 
1763*  THE USE OF THE AVAILABLE DMA CHANNEL. THE <A>
1764*  FIELD IN THE CURRENT ENTRY IS SET = 3 TO MEAN
1765*  WAITING FOR DMA. THE EQT IS THEN SCANNED FROM
1766*  FIRST TO LAST ORDER (#1 TO N) TO FIND THE FIRST
1767*  UNIT WAITING FOR DMA. THEREFORE, THE ORDER OF







 PAGE 0039 #01  < RTIOC - COMPLETION SUBSECTION >       A-29016-90003-1 


1768*  THE EQT DETERMINES PRIORITY FOR DYNAMIC ASSIGN-
1769*  MENT OF DMA CHANNELS - THE SYSTEM DISC SHOULD
1770*  BE THE FIRST ENTRY IN THE EQT. 
1771* 
1772  01343 061651  L.63  LDA EQT#      SET # OF
1773  01344 003004        CMA,INA        EQT ENTRIES
1774  01345 072044R       STA TEMP1       AS AN INDEX VALUE.
1775  01346 065650        LDB EQTA      INITIALIZE TO FIRST EQT ENTRY.
1776* 
1777  01347 076045R L.64  STB TEMP2     SAVE CURRENT ENTRY ADDR.
1778  01350 046022R       ADB .4        EXTRACT 
1779  01351 160001        LDA B,I        <A> FIELD FROM 
1780  01352 012036R       AND AFLD        WORD 5. 
1781  01353 052036R       CPA DMACW     IF A = 3, GO TO 
1782  01354 027361R       JMP L.66       ASSIGN DMA.
1783* 
1784  01355 047342R L.65  ADB .11      SET (B) FOR NEXT ENTRY.
1785  01356 036044R       ISZ TEMP1     END OF EQT? 
1786  01357 027347R       JMP L.64       - NO, CONTINUE SCAN
1787  01360 027413R       JMP IOCX1      -YES, EXIT 
1788* 
1789  01361 002404  L.66  CLA,INA       IF ONLY 1 DEVICE WAITING
1790  01362 052064R       CPA DMACF      FOR  DMA, GO TO
1791  01363 027371R       JMP L.67        ASSIGN TO THIS DEVICE.
1792  01364 062045R       LDA TEMP2     IF CURRENT UNIT IS
1793  01365 051650        CPA EQTA       FIRST IN EQT (I.E SYSTEM DISC) 
1794  01366 027371R       JMP L.67       ASSIGN ANYWAY. 
1795  01367 051660        CPA EQT1      IF SAME DEVICE JUST COMPLETED,
1796  01370 027355R       JMP L.65       ALLOW OTHER DEVICES DMA TIME.
1797* 
1798  01371 062045R L.67  LDA TEMP2     IF DEVICE TO BE INITIATED IS
1799  01372 051660        CPA EQT1       SAME AS INTERRUPTING DEVICE, 
1800  01373 027375R       JMP L.68       SKIP SETTING EQT ADDRESSES.
1801* 
1802  01374 016273R       JSB SETEQ     SET EQT ADDRESSES.
1803* 
1804* CALL <DRIVR> IF A REQUEST IS STACKED OR A 
1805*  WAITING UNIT IS ASSIGNED A DMA CHANNEL.
1806* 
1807  01375 161660  L.68  LDA EQT1,I    IF NO REQUEST 
1808  01376 002003        SZA,RSS        WAITING, 
1809  01377 027403R       JMP IOCX        EXIT. 
1810* 
1811  01400 017001R       JSB DRIVR     CALL  <DRIVR> 
1812  01401 002001        RSS            IF GOOD REQUEST THEN SKIP
1813  01402 027724R       JMP NOTRD     DIAGNOSTIC IF NOT AVAILABLE.
1814* 
1815* I/O COMPLETION  - EXIT SECTION. 
1816* 
1817* THIS ROUTINE CHECK FOR A DMA QUE AND IF ANY AND IF A CHANNEL IS 
1818* AVAILABLE THE CHANNEL ASSIGNMENT ROUTINE IS ENTERED.
1819* 
1820  01403 062064R IOCX  LDA DMACF      GET THE DMA QUE FLAG 
1821  01404 002003        SZA,RSS         IF EMPTY QUE THEN 
1822  01405 027413R       JMP IOCX1       GO EXIT 
1823* 







 PAGE 0040 #01  < RTIOC - COMPLETION SUBSECTION >       A-29016-90003-1 


1824  01406 104200        DLD INTBA,I     ELSE GET THE DMA FLAGS
1825  01410 002002        SZA             IF ANY
1826  01411 006003        SZB,RSS          AVAILABLE
1827  01412 027343R       JMP L.63      GO ALLOCATE IT. 
1828* 
1829  01413 062063R IOCX1 LDA  COMPL     IF SYSTEM REQUEST
1830  01414 066062R       LDB TLOG
1831  01415 002002        SZA           COMPLETION ROUTINE SPECIFIED, 
1832  01416 126063R       JMP  COMPL,I  OPERATE IT. 
1833* 
1834  01417 065734        LDB OPATN    GET OPERATOR ATTENTION FLAG
1835  01420 071734        STA OPATN     - CLEAR FLAG -
1836  01421 006002        SZB          IF OPERATOR DESIRES CONTROL, 
1837  01422 026004X       JMP TYPE      ACKNOWLEDGE.
1838  01423 026003X       JMP XEQ      TRANSFER TO EXECUTE SECTION. 
1839* 
1840* I/O DEVICE COMPLETION ERROR FROM DRIVER 
1841*  (A) = ERROR CODE 
1842* 
1843  01424 052021R L.70  CPA .3       IF PARITY ERROR, 
1844  01425 002301        CCE,RSS       CHECK FOR DISC. 
1845  01426 027725R       JMP IOERR     - OTHER ERROR CONDITION - 
1846* 
1847  01427 161664        LDA EQT5,I   IF 
1848  01430 012465R       AND ETYPE     DEVICE
1849  01431 052466R       CPA DISC      IS DISC, PUT
1850  01432 027435R       JMP DISCE     OUT SPECIAL MESSAGE.
1851* 
1852  01433 062021R       LDA .3       PARITY ERROR ON
1853  01434 027725R       JMP IOERR     OTHER DEVICE, PRINT DIAG. 
1854* 
1855* 
1856* DISC ERROR PROCESSING (SYSTEM/USER) 
1857* 
1858  01435 062062R DISCE LDA TLOG     (A) = ERROR TRACK ADDRESS. 
1859  01436 016010X       JSB CVT3     CONVERT TO DECIMAL ASCII.
1860  01437 002004        INA 
1861  01440 104200        DLD A,I       SET DECIMAL TRACK 
1862  01442 104400        DST DMSG+1    IN ERROR MESSAGE. 
1863  01444 016254R       JSB CPEQT    COMPUTE EQT ENTRY #. 
1864  01445 073535R       STA DMSG+5    SET IN ERROR MESSAGE. 
1865* 
1866  01446 161663        LDA EQT4,I     GET SUBCHANNEL 
1867  01447 001727        ALF,ALF         AND CONVERT 
1868  01450 001262        RAL,CLE,RAL     TO ASCII
1869  01451 012025R       AND .7
1870  01452 016010X       JSB CVT3
1871  01453 042020R       ADA .2         STORE INTO 
1872  01454 160000        LDA A,I         MESSAGE 
1873  01455 073537R       STA DMSG+7
1874* 
1875  01456 066055R       LDB TEMP0    (B)= REQUEST TYPE
1876  01457 063541R       LDA BLS      (A)= " S"
1877  01460 006021        SSB,RSS       IF USER TYPE REQUEST, 
1878  01461 063542R       LDA BLU       (A)= " U" 
1879  01462 073540R       STA DMSG+8   SET "S" OR "U" IN MESSAGE







 PAGE 0041 #01  < RTIOC - COMPLETION SUBSECTION >       A-29016-90003-1 


1880* 
1881  01463 061660        LDA EQT1     SAVE DISC
1882  01464 072052R       STA TEMP7     -EQT- ADDRESS 
1883  01465 062063R       LDA COMPL    SAVE REQUEST (SYSTEM)
1884  01466 072053R       STA TEMP8     COMPLETION ADDRESS
1885* 
1886  01467 063526R       LDA DMSGA    PRINT DIAGNOSTIC:
1887  01470 016146R       JSB SYSMG       "TRNNNN EQTXX,UYY S(OR U)"
1888* 
1889  01471 062052R       LDA TEMP7      RESET EQT ADDRESSES
1890  01472 016273R       JSB SETEQ       OF ERROR DISC 
1891* 
1892  01473 062055R       LDA TEMP0    IF DISC ERROR
1893  01474 002020        SSA           FROM SYSTEM REQUEST,
1894  01475 027515R       JMP L.71      CONTINUE. 
1895* 
1896  01476 001727        ALF,ALF        IF LU # 2 OR 3,
1897  01477 012021R       AND .3          SET TRACK DOWN
1898  01500 002003        SZA,RSS         IN TAT- 
1899  01501 027523R       JMP L.72       OTHERWISE, CONTINUE
1900  01502 002011        SLA,RSS 
1901  01503 006401        CLB,RSS 
1902  01504 065756        LDB TATSD 
1903  01505 046062R       ADB TLOG     INDEX TO 
1904  01506 045656        ADB TAT       TAT, SET ERROR
1905  01507 062042R       LDA MSIGN     TRACK 
1906  01510 170001        STA B,I        "DOWN" (ASSIGNED TO SYSTEM). 
1907* 
1908  01511 063320R       LDA L.52     (A)= ID SEGMENT ADDRESS
1909  01512 016013X       JSB $ABRT     -- ABORT  PROGRAM --
1910* 
1911  01513 062052R       LDA TEMP7      RESET EQT ADDRESSES
1912  01514 016273R       JSB SETEQ       OF ERROR DISC 
1913* 
1914  01515 007400  L.71  CCB          SET TLOG = -1 AS ERROR 
1915  01516 076062R       STB TLOG      FLAG IF SYSTEM CALLER.
1916  01517 062053R       LDA TEMP8    RESET "COMPLETION" 
1917  01520 072063R       STA COMPL     ADDRESS.
1918  01521 076060R       STB CONFL     SET FLAG FOR COMPLETION.
1919  01522 027336R       JMP L.60
1920* 
1921  01523 007400  L.72  CCB          RETURN TRANSMISSION LOG
1922  01524 176054R       STB TEMP9,I     OF -1 IF USER REQUEST 
1923  01525 027516R       JMP L.71+1      TO PERIPHERAL DISC
1924* 
1925* 
1926  01526 001527R DMSGA DEF *+1 
1927* 
1928  01527 177756        DEC -18 
1929  01530 052122  DMSG  ASC 9,TRNNNN EQTXX,UYY S
1930* 
1931  01541 020123  BLS   ASC 1, S
1932  01542 020125  BLU   ASC 1, U










 PAGE 0042 #01  < I/O CONTROL MODULE - ERROR SECTION >  A-29016-90003-1 


1934* 
1935* I/O  REQUEST ERROR SECTION
1936* 
1937*  PART 1: ERRORS ENCOUNTED IN ANALYSING A
1938*          USER REQUEST CAUSE A DIAGNOSTIC
1939*          TO BE PRINTED ON THE SYSTEM
1940*          TELETYPEWRITER AND THE USER
1941*          PROGRAM ABORTED. THE FORMAT OF 
1942*          THE DIAGNOSTIC IS: 
1943* 
1944*           'IONN  PNAME  RADDR'
1945* 
1946*           AS CONSTRUCTED AND SET
1947*           BY THE ROUTINE -ERMSG- IN 
1948*           THE PROGRAM <RTRQP>. -NN- IS A
1949*           CODE IDENTIFYING THE ERROR TYPE.
1950* 
1951  01543 006404  ERR01 CLB,INB      INSUFFICIENT # OF PARAMETERS 
1952  01544 027562R       JMP RQERR 
1953  01545 066020R ERR02 LDB .2       ILLEGAL LOGICAL UNIT REFERENCE,
1954  01546 027562R       JMP RQERR      = 0  OR UNDEFINED. 
1955  01547 066021R ERR03 LDB .3       LOGICAL UNIT NOT ASSIGNED
1956  01550 027562R       JMP RQERR     TO UNIT IN -EQT-. 
1957  01551 066022R ERR04 LDB .4       USER BUFFER VIOLATES SYSTEM
1958  01552 027562R       JMP RQERR     OR OTHER BOUNDARIES.
1959  01553 066023R ERR05 LDB .5       ILLEGAL DISC TRACK OR SECTOR 
1960  01554 027562R       JMP RQERR     ADDRESS IN DISC REQUEST.
1961  01555 066024R ERR06 LDB .6       REFERENCE TO PROTECTED DISC TRACK
1962  01556 027562R       JMP RQERR 
1963  01557 066026R ERR08 LDB .8       DISC TRANSFER EXCEEDS TRACK BOUND
1964  01560 027562R       JMP RQERR 
1965  01561 066027R ERR09 LDB .9        LOAD-N-GO AREA OVERFLOW 
1966* 
1967  01562 063572R RQERR LDA ERIO     (A) = ASCII * IO *.
1968* 
1969  01563 047570R       ADB E00 
1970  01564 016011X       JSB ERMSG    - WRITE DIAGNOSTIC - 
1971  01565 061717        LDA XEQT      -ABORT
1972  01566 016013X       JSB $ABRT      USER PROGRAM 
1973* 
1974  01567 026003X       JMP XEQ 
1975* 
1976  01570 030060  E00   ASC 1,00
1977  01571 030067  E07   ASC 1,07
1978  01572 044517  ERIO  ASC 1,IO


















 PAGE 0043 #01  < I/O CONTROL MODULE - ERROR SECTION >  A-29016-90003-1 


1980*  PART 2:  ILLEGAL REQUEST DETECTED BY 
1981*          I/O DRIVER. THE REASON IS A READ OR
1982*          WRITE OPERATION IS ILLEGAL FOR THE 
1983*          DEVICE OR A CONTROL REQUEST IS 
1984*          MEANINGLESS FOR THE DEVICE.
1985*           AN ADDITIONAL REASON FOR TRANSFER TO THIS 
1986*          SECTION IS AN "IMMEDIATE COMPLETION" (CODE 4)
1987*          RETURN FROM THE DRIVER; PROCESSED AS A 
1988*          CONTROL REJECT.
1989* 
1990* 
1991*          ERROR PROCEDURE IS:
1992*          1. IF THE REQUEST IS PROCESSED AS
1993*             BUFFERED OUTPUT, THE TEMPORARY
1994*             BLOCK IS RELEASED TO AVAILABLE
1995*             MEMORY. 
1996* 
1997*          2. THE REJECT IS IGNORED IF A SYSTEM 
1998*             PROGRAM GENERATED THE REQUEST - 
1999*             HOWEVER, A COMPLETION ROUTINE,
2000*             IF SPECIFIED IN THE REQUEST, IS 
2001*             OPERATED. (NOTE: THIS PHILOSOPHY
2002*             IS BASED ON THE ASSUMPTION THAT 
2003*             THIS CONDITION SHOULD NEVER OCCUR.) 
2004* 
2005*          3. A USER CONTROL REQUEST WHICH IS 
2006*             REJECTED IS TREATED AS IF IT
2007*             WAS PERFORMED. THE PROGRAM IS 
2008*             LINKED BACK INTO THE SCHEDULE LIST. 
2009* 
2010*          4. A USER READ OR WRITE REQUEST REJECT 
2011*             CAUSES A DIAGNOSTIC TO BE ISSUED
2012*             AND THE PROGRAM ABORTED.






























 PAGE 0044 #01  < I/O CONTROL MODULE - ERROR SECTION >  A-29016-90003-1 


2014  01573 052022R ILLCD CPA .4        IF CODE =4 FOR IMMEDIATE
2015  01574 062020R       LDA .2         COMPLETION, TREAT AS CONTROL 
2016  01575 072047R       STA TEMP4      REJECT,  SAVE CODE.
2017  01576 165660        LDB EQT1,I   GET LOCATION OF
2018  01577 160001        LDA B,I       ILLEGAL REQUEST (LINK ADDR.)
2019  01600 072055R       STA TEMP0    SAVE NEXT REQUEST ADDRESS. 
2020  01601 006004        INB          GET CONTROL WORD 
2021  01602 160001        LDA B,I       OF REQUEST BLOCK
2022  01603 171665        STA EQT6,I     SAVE FOR REXIT 
2023  01604 001200        RAL          CHECK <T> FIELD
2024  01605 002021        SSA,RSS       FOR TYPE OF REQUEST BLOCK.
2025  01606 027620R       JMP R02       -USER OR SYSTEM-
2026* 
2027  01607 046020R       ADB .2       BUFFERED BLOCK.
2028  01610 164001        LDB B,I      GET TOTAL BLOCK LENGTH.
2029  01611 077616R       STB R01+1    SET IN RELEASE CALL. 
2030  01612 161660        LDA EQT1,I   SET FWA OF BLOCK 
2031  01613 073615R       STA R01       IN RELEASE CALL.
2032  01614 016007X       JSB .RTN.    RELEASE BLOCK. 
2033  01615 000000  R01   NOP           - FWA - 
2034  01616 000000        NOP           - # WORDS - 
2035  01617 027707R       JMP REXIT 
2036* 
2037  01620 002011  R02   SLA,RSS      CHECK <T> FIELD AGAIN. 
2038  01621 027626R       JMP R03       -USER PROGRAM REQUEST-
2039* 
2040  01622 046032R       ADB N2       GET WORD IN SYSTEM REQUEST 
2041  01623 160001        LDA B,I       CONTAINING -COMPLETION ROUTINE- 
2042  01624 072063R       STA  COMPL    ADDRESS OR 0 AND SAVE IT. 
2043  01625 027707R       JMP REXIT 
2044* 
2045  01626 062047R R03   LDA TEMP4    USER REQUEST-
2046  01627 052020R       CPA .2        CONTINUE IF CONTROL REQUEST 
2047  01630 027671R       JMP R04        REJECTED.
2048  01631 161730        LDA XSUSP,I  SAVE CURRENT EXECUTING 
2049  01632 072052R       STA TEMP7     PROGRAM ID SEGMENT
2050  01633 061717        LDA XEQT      ADDR. AND 
2051  01634 072053R       STA TEMP8     POINT OF SUSPENSION.
2052  01635 161660        LDA EQT1,I   SET ID SEGMENT ADDRESS OF PROGRAM
2053  01636 071717        STA XEQT      CONTAINING ERROR. 
2054  01637 042026R       ADA .8       GET POINT OF SUSPENSION ADDRESS
2055  01640 160000        LDA A,I       AND SET IN
2056  01641 171730        STA XSUSP,I   XSUSP,I FOR ERMSG.
2057  01642 061660        LDA EQT1     SAVE CURRENT 
2058  01643 072054R       STA TEMP9     EQT ENTRY ADDRESS.
2059  01644 062060R       LDA CONFL    SAVE CURRENT 
2060  01645 072061R       STA SCONF     *CONTROL FLAG*
2061  01646 063572R       LDA ERIO     (A) = ASCII  * IO *
2062  01647 067571R       LDB E07      (B) = 07 FOR ILLEGAL READ/WRITE
2063  01650 016011X       JSB ERMSG    PRINT DIAGNOSTIC 
2064  01651 062052R       LDA TEMP7    RESET CURRENT
2065  01652 171730        STA XSUSP,I   PROGRAM SUSPENSION POINT
2066  01653 062053R       LDA TEMP8     AND ID SEGMENT
2067  01654 071717        STA XEQT      ADDRESS.
2068  01655 162054R       LDA TEMP9,I  SET ID SEGMENT 
2069  01656 073661R       STA *+3       ADDRESS IN LIST CALL. 







 PAGE 0045 #01  < I/O CONTROL MODULE - ERROR SECTION >  A-29016-90003-1 


2070  01657 016005X       JSB LIST     TEMPORARILY
2071  01660 000101        OCT 101       'SCHEDULE'
2072  01661 000000        NOP            PROGRAM FOR SUBSEQUENT 'ABORT'.
2073  01662 162054R       LDA TEMP9,I  (A)= ID SEGMENT ADDRESS
2074  01663 016013X       JSB $ABRT     -- ABORT PROGRAM -- 
2075  01664 062061R       LDA SCONF    RESTORE
2076  01665 072060R       STA CONFL     *CONTROL FLAG*
2077  01666 062054R       LDA TEMP9    RESTORE UNIT 
2078  01667 016273R       JSB SETEQ     EQT ENTRY ADDRESSES.
2079  01670 027707R       JMP REXIT 
2080* 
2081  01671 161660  R04   LDA EQT1,I   SET PROGRAM ID SEGMENT 
2082  01672 073706R       STA R05+2     ADDR. IN LIST CALL. 
2083  01673 042027R       ADA .9       (A) = ADDR. OF XA IN ID SEGMENT. 
2084  01674 165664        LDB EQT5,I   SET DEVICE STATUS
2085  01675 174000        STB A,I       WORD IN XA. 
2086  01676 066051R       LDB TEMP6 
2087  01677 056020R       CPB .2         STORE TLOG IF IMMEDIATE RETURN 
2088  01700 006401        CLB,RSS        FROM DRIVER (A)=4; 
2089  01701 066057R       LDB TEMPW      OTHERWISE, STORE ZERO
2090  01702 002004        INA           TRANSMISSION LOG
2091  01703 174000        STB A,I       IN XB.
2092  01704 016005X R05   JSB LIST     CALL SCHEDULER 
2093  01705 000101        OCT 101       TO LINK PROGRAM BACK
2094  01706 000000        NOP           INTO SCHEDULE LIST. 
2095* 
2096  01707 062055R REXIT LDA TEMP0    SET NEXT LIST
2097  01710 171660        STA EQT1,I    ENTRY ADDRESS.
2098  01711 066060R       LDB CONFL    IF THE IOC *COMPLETION*
2099  01712 006002        SZB           SECTION IS IN CONTROL,
2100  01713 027336R       JMP L.60       RETURN TO L.60 FOR NEXT REQUEST
2101* 
2102  01714 161665        LDA EQT6,I   REJECT OCCURRED IN IOC *REQUEST* 
2103  01715 002020        SSA           SECTION. RETURN TO
2104  01716 127163R       JMP XSIO,I        SYSTEM CALLER.
2105  01717 062047R       LDA TEMP4    IF REJECTING 
2106  01720 065677        LDB RQRTN     A CONTROL REQUEST TO IOREQ, 
2107  01721 052020R       CPA .2        SET EXIT IN POINT 
2108  01722 175730        STB XSUSP,I   OF SUSPENSION.
2109  01723 026003X       JMP XEQ        -EXECUTE SECTION IN SCHEDULER. 























 PAGE 0046 #01  < I/O CONTROL MODULE - ERROR SECTION >  A-29016-90003-1 


2111* 
2112* I/O DEVICE ERROR SECTION
2113* 
2114*  THIS SECTION IS ENTERED WHEN A DEVICE
2115* IS UNAVAILABLE FOR INITIATION OF AN 
2116* OPERATION OR WHEN AN ERROR IS DETECTED
2117* AT THE END OF AN OPERATION. A DIAGNOSTIC
2118* IS PRINTED ON THE SYSTEM TELETYPE IN THE
2119* FOLLOWING FORMAT: 
2120* 
2121*    I/O ERROR MN EQT #NN 
2122* 
2123*  WHERE NN IS THE EQT ENTRY # OF THE DEVICE
2124*   AND MN IS A MNEMONIC DESCRIBING THE 
2125*   CONDITION:
2126* 
2127*     1.  NR  - DEVICE NOT READY
2128*     2.  ET  - END OF TAPE OR TAPE SUPPLY LOW
2129*     3.  PE  - TRANSMISSION PARITY ERROR 
2130*     4.  TO  - DEVICE TIMED-OUT
2131*     - NEW CODES MAY BE ADDED -
2132* 
2133*  ON ENTRY TO THE SECTION, (A) CONTAINS A #
2134*   CORRESPONDING TO THE ASSOCIATED MNEMONIC
2135*   AND EQT1 CONTAINS ADDRESS OF DEVICE.
2136* 
2137* 
2138  01724 002404  NOTRD CLA,INA -SPECIAL NOT READY ENTRY- 
2139* 
2140  01725 043774R IOERR ADA ERTBL    INDEX TO ERROR CODE TABLE. 
2141  01726 160000        LDA A,I      GET MNEMONIC AND 
2142  01727 073767R       STA IOMSG+4   SET IN DIAGNOSTIC MESSAGE.
2143* 
2144  01730 061660        LDA EQT1
2145  01731 072054R       STA TEMP9 
2146  01732 161664        LDA EQT5,I   GET STATUS WORD FROM EQT 
2147  01733 012040R       AND MASK6    SET <AVAIL>
2148  01734 032037R       IOR MASK5     FIELD TO 1, 
2149  01735 171664        STA EQT5,I     -UNIT DISABLED-
2150* 
2151  01736 016254R       JSB CPEQT    COMPUTE EQT ENTRY #. 
2152  01737 073773R       STA IOMSG+8   I/O DIAGNOSTIC. 
2153* 
2154  01740 062060R       LDA CONFL    SAVE CURRENT 
2155  01741 072061R       STA SCONF     *CONTROL FLAG*
2156* 
2157  01742 063761R       LDA IOMSA    (A) = ADDR. OF DIAGNOSTIC
2158  01743 016146R       JSB SYSMG    CALL TO PRINT. 
2159* 
2160  01744 062061R       LDA SCONF    RESTORE *CONTROL FLAG*.
2161  01745 072060R       STA CONFL 
2162  01746 066054R       LDB TEMP9 
2163  01747 055675        CPB SYSTY 
2164  01750 027336R       JMP L.60
2165  01751 164001        LDB B,I       GET <T> FIELD 
2166  01752 006004        INB           WORD







 PAGE 0047 #01  < I/O CONTROL MODULE - ERROR SECTION >  A-29016-90003-1 


2167  01753 164001        LDB B,I        TO B.
2168  01754 002002        SZA           SECTION IN CONTROL, 
2169  01755 027403R       JMP IOCX        GO EXIT IOC 
2170  01756 006020        SSB          *REQUEST* SECTION. IF SYSTEM 
2171  01757 127232R       JMP XSIOE,I    REQUEST, RETURN TO CALLER. 
2172  01760 026003X       JMP XEQ       GO TO EXECUTE SECTION.
2173* 
2174  01761 001762R IOMSA DEF *+1 
2175  01762 177756        DEC -18 
2176  01763 044457  IOMSG ASC 4,I/O ERR 
2177  01767 000000        NOP 
2178  01770 020105        ASC 3, EQT #
2179  01773 000000        NOP 
2180* 
2181* I/O DEVICE ERROR MNEMONIC TABLE - ORDERED 
2182*  BY ERROR CODE DESCRIBING CONDITION 
2183* 
2184  01774 001774R ERTBL DEF * 
2185* 
2186  01775 047122        ASC 1,NR      - NOT READY - 
2187* 
2188  01776 042524        ASC 1,ET      - END OF TAPE (INFORMATION)  -
2189* 
2190  01777 050105        ASC 1,PE      - TRANSMISSION PARITY ERROR - 
2191* 
2192  02000 052117        ASC 1,TO      - TIMED-OUT  -
2193* 
2194* NEW CODES ADDED AT THIS POINT 
2195* 
2196* 

































 PAGE 0048 #01  < IO-DEVICE TIME-OUT PROCESSOR >      A-29016-90003-1 


2198* 
2199* 
2200*  AFTER A DEVICE IS DISCOVERED TO HAVE TIMED-OUT 
2201*        BY THE SCHEDULER'S CLOCK PROCESSOR,THIS
2202*        ROUTINE IS ENTERED.  ITS PURPOSE IS TO 
2203*        CLEAR THE PENDING IO TRANSFER AND ENTER
2204*        IOCOM IN SUCH A WAY AS TO SIMULATE AN IO 
2205*        COMPLETION RETURN FROM THE DRIVER ITSELF.
2206* 
2207* 
2208*  ENTER FROM  SCHEDULER MODULE:
2209* 
2210*        (A) <ADDRESS OF EQT15 OF TIMED-OUT DEVICE> 
2211* 
2212* 
2213  02001 042016R $DEVT ADA N14       POINT TO EQT
2214  02002 016273R       JSB SETEQ     SET EQT ADDRESSES 
2215  02003 161663        LDA EQT4,I
2216  02004 032041R       IOR MASK8     SET TIME-OUT BIT
2217  02005 171663        STA EQT4,I
2218  02006 070001        STA B         SAVE WORD IN B FOR TEST 
2219  02007 012034R       AND MASK1      SELECT CODE TO A 
2220  02010 005710        BLF,SLB         IF DRIVER TO HANDLE TIME
2221  02011 026075R       JMP CIC.6        OUT GO CALL THE DRIVER.
2222  02012 016425R       JSB CLCHS     CLEAR ALL CHANNELS
2223  02013 062022R       LDA .4        SERVICED BY THIS ENTRY
2224  02014 006400        CLB           SIMULATE COMPLETION 
2225  02015 027233R       JMP IOCOM      RETURN FROM DRIVER 

2227  02016 177762  N14   DEC -14 

































 PAGE 0049 #01  < I/O CONTROL MODULE - DATA SECTION >   A-29016-90003-1 


2229* CONSTANT AND VARIABLE STORAGE AREA
2230  00000         A     EQU 0        DEFINE SYMBOLIC REFERENCES 
2231  00001         B     EQU 1         FOR A AND B REGISTERS.
2232  02017 000001  .1    DEC 1 
2233  02020 000002  .2    DEC 2 
2234  02021 000003  .3    DEC 3 
2235  02022 000004  .4    DEC 4 
2236  02023 000005  .5    DEC 5 
2237  02024 000006  .6    DEC 6 
2238  02025 000007  .7    DEC 7 
2239  02026 000010  .8    DEC 8 
2240  02027 000011  .9    DEC 9 
2241  02030 000017  .15   DEC 15
2242  02031 177777  N1    DEC -1
2243  02032 177776  N2    DEC -2
2244  02033 177766  N10   DEC -10 
2245* 
2246  02034 000077  MASK1 OCT 77
2247  02035 000377  MASK2 OCT 377 
2248  02036 140000  MASK4 OCT 140000
2249  02037 040000  MASK5 OCT 40000 
2250  02040 037777  MASK6 OCT 37777 
2251  02041 004000  MASK8 OCT 4000
2252  02042 100000  MSIGN OCT 100000
2253  02043 177400  M7400 OCT 177400    UPPER CHARACTER MASK
2254* 
2255  02044 000000  TEMP1 NOP 
2256  02045 000000  TEMP2 NOP 
2257  02046 000000  TEMP3 NOP 
2258  02047 000000  TEMP4 NOP 
2259  02050 000000  TEMP5 NOP 
2260  02051 000000  TEMP6 NOP 
2261  02052 000000  TEMP7 NOP 
2262  02053 000000  TEMP8 NOP 
2263  02054 000000  TEMP9 NOP 
2264  02055 000000  TEMP0 NOP 
2265  02056 000000  TEMPL NOP 
2266  02057 000000  TEMPW NOP 
2267* 
2268  02060 000000  CONFL NOP 
2269  02061 000000  SCONF NOP 
2270  02062 000000  TLOG  NOP 
2271  02063 000000  COMPL NOP 
2272  02036         AFLD  EQU MASK4 
2273  02036         DMACW EQU MASK4 
2274  02064 000000  DMACF NOP           FLAGS USED IN ALLOCATING

















 PAGE 0050 #01  * RTIOC - OPERATOR COMMUNICATION *      A-29016-90003-1 


2276* 
2277*  I/O MODULE // OPERATOR COMMUNICATION 
2278* 
2279* 
2280*  THE SYSTEM PES FOR COMMANDS FROM THE 
2281* OPERATOR TO CONTROL THE OVERALL STATUS OF 
2282* I/O EQUIPMENT, CHANGE ASSIGNMENT OF LOGICAL 
2283* UNITS AND TO INTERROGATE THE STATUS AND 
2284* PROPERITES OF THE DEVICES IN THE EQUIPMENT
2285* TABLE.
2286* 
2287*  OPERATOR STATEMENTS ARE PROCESSED ONLY 
2288* FROM THE DESIGNATED SYSTEM TELETYPE. THE
2289* ROUTINE <MESSAGE> IN THE SCHEDULING MODULE
2290* IS RESPONSIBLE FOR STATEMENT DECODE AND 
2291* PARAMETER SEPARATION AND CONVERSION. THE
2292* ASSOCIATED STATEMENT PROCESSOR IS CALLED
2293* TO PERFORM THE REQUESTED ACTION. THE
2294* STATEMENT PROCESSING IS ALL TABLE-DRIVEN
2295* AS DESCRIBED IN THE LISTING AND DOCUMENTATION 
2296* OF THE SCHEDULING MODULE. 
2297* 
2298* 
2299*  TWO OF THE FOLLOWING STATEMENT PROCESSORS
2300* MUST BE INCLUDED IN THE BASIC SYSTEM PACKAGE. 
2301* THESE ARE THE 'UP' AND 'DOWN' STATEMENTS
2302* CONCERNING THE OVERALL STATUS OF I/O DEVICES. 
2303* THE OTHER THREE STATEMENT PROCESSORS ( LOGICAL
2304* UNIT ASSIGNMENT, TIME-OUT, AND EQT STATUS)
2305* ARE OPTIONAL AND MAY BE REMOVED BY DELETING 
2306* THE SECTIONS AND RE-ASSEMBLING THIS MODULE. 
2307* 































 PAGE 0051 #01  * RTIOC - OPERATOR COMMUNICATION *      A-29016-90003-1 


2309* 
2310*  'DOWN'  STATEMENT      (REQUIRED)
2311* 
2312* FORMAT:  DN,NN    WHERE NN IS THE EQT # 
2313*                   OF THE I/O DEVICE 
2314* 
2315* ACTION:  THE AVAILABILITY FIELD OF THE
2316*          REFERENCED DEVICE (EQT ENTRY #)
2317*          IS SET = 1 (UNIT DISABLED) 
2318* 
2319* CALL (FROM MESSAGE PROCESSOR):
2320* 
2321*      (A) = NN (EQT #) IN BINARY 
2322*   (P)     JMP  IO.DN
2323* 
2324*      RETURN IS TO <XEQ> IF ACTION TAKEN OR
2325*       TO -MESS,I- TO PRINT ERROR DIAGNOSTIC 
2326*       * INPUT ERROR * IF NN IS ILLEGAL. 
2327* 
2328  02065 016100R IO.DN JSB IODNS    CHECK 'NN' AND SET EQT ADDRESSES.
2329  02066 061660        LDA EQT1     IF ATTEMPT TO 'DOWN' SYSTEM
2330  02067 051675        CPA SYSTY     TELETYPE, IGNORE ACTION AND 
2331  02070 026112R       JMP IODNE      TREAT AS 'INPUT ERROR'.
2332  02071 161664        LDA EQT5,I    SET AVAILABITY FIELD
2333  02072 012040R       AND MASK6      =1 TO
2334  02073 032037R       IOR MASK5      MEAN 
2335  02074 171664        STA EQT5,I     UNAVAILABLE. 
2336* 
2337  02075 002400  EXT1  CLA          CLEAR OPERATOR 
2338  02076 071735        STA OPFLG     CONTROL FLAG
2339  02077 026003X       JMP XEQ      -- EXIT. 
2340* 
2341* *IODNS*  SUBROUTINE TO CHECK LEGALITY OF AN 
2342*          EQT # (IN A-REGISTER) AND TO CALL
2343*          A SUBROUTINE TO CONSTRUCT THE EQT
2344*          ENTRY ADDRESSES. 
2345* 
2346  02100 000000  IODNS NOP 
2347  02101 070001        STA B        ERROR
2348  02102 002003        SZA,RSS       IF NN 
2349  02103 026112R       JMP IODNE      = 0
2350  02104 007004        CMB,INB      ERROR
2351  02105 045651        ADB EQT#      IF NN 
2352  02106 006020        SSB            GT 
2353  02107 026112R       JMP IODNE      LENGTH OF EQT. 
2354* 
2355  02110 016243R       JSB CVEQT    SET EQT ENTRY ADDRESSES. 
2356  02111 126100R       JMP IODNS,I 
2357* 
2358  02112 062115R IODNE LDA IODMG 
2359  02113 066012X EXT2  LDB MESS
2360  02114 124001        JMP B,I 
2361* 
2362  02115 002116R IODMG DEF *+1 
2363  02116 177764  N12   DEC -12 
2364  02117 044516        ASC 6,INPUT ERROR 







 PAGE 0052 #01  * RTIOC - OPERATOR COMMUNICATION *      A-29016-90003-1 


2366* 
2367*  ' UP '  STATEMENT     (REQUIRED) 
2368* 
2369* FORMAT:  UP,NN    WHERE NN IS THE EQT # 
2370*                   OF THE I/O DEVICE 
2371* 
2372* ACTION:  THE AVAILABILITY FIELD OF THE
2373*          REFERENCED DEVICE (EQT ENTRY #)
2374*          IS SET = 0 (UNIT AVAILABLE). 
2375* 
2376*          IF I/O REQUESTS ARE SUSPENDED IN 
2377*          THE DEVICE QUEUE, THE *IOCOM*
2378*          SECTION  (AT *L.68*) IS ENTERED
2379*          TO INITIATE THE WAITING OPERATION. 
2380* 
2381* CALL (FROM MESSAGE PROCESSOR):
2382* 
2383*      (A) = NN (EQT #) IN BINARY 
2384*   (P)     JMP  IO.UP
2385* 
2386*      RETURN IS *IOCOM* OR TO *XEQ* IF ACTION
2387*     IS TAKEN. IF NN ILLEGAL, RETURN IS TO 
2388*     *MESS,I* TO PRINT  'INPUT ERROR'. 
2389* 
2390* 
2391  02125 016100R IO.UP JSB IODNS    CHECK 'NN' AND SET EQT ADDRESSES.
2392  02126 161664        LDA EQT5,I   GET AVAILABILITY 
2393  02127 012036R       AND MASK4     FIELD FROM EQT ENTRY. 
2394* 
2395  02130 006400        CLB          CLEAR OPERATOR 
2396  02131 075735        STB OPFLG     CONTROL FLAG. 
2397* 
2398  02132 052037R       CPA MASK5    IF DEVICE IS 
2399  02133 002001        RSS          NOT CURRENTLY DOWN 
2400  02134 026003X       JMP XEQ        EXIT - NO ACTION.
2401* 
2402  02135 161664        LDA EQT5,I   DEVICE WAS 'DOWN'
2403  02136 012040R       AND MASK6     SET AVAILABILITY FIELD
2404  02137 171664        STA EQT5,I     = 0. 
2405* 
2406  02140 155660        CPB EQT1,I   IF NO REQUESTS WAITING,
2407  02141 026003X       JMP XEQ       EXIT TO *XEQ*.
2408* 
2409  02142 002404        CLA,INA      SET CONTROL FLAG = 1 
2410  02143 072060R       STA CONFL     FOR IOCOM.
2411  02144 076063R       STB COMPL     CLEAR COMPLETION FLAG.
2412  02145 027375R       JMP L.68     TRANSFER TO *IOCOM*. 
2413* 















 PAGE 0053 #01  < RTIOC MODULE - SUBROUTINE SECTION >   A-29016-90003-1 


2415* 
2416* SUBROUTINE:  < SYSMG >  (SYSTEM MESSAGE)
2417* 
2418*  PURPOSE: THIS ROUTINE PROVIDES FOR THE 
2419*           OUTPUT OF SYSTEM MESSAGES AND 
2420*           ERROR DIAGNOSTICS ON THE SYSTEM 
2421*           TELETYPEWRITER.  THE ROUTINE
2422*           MAINTAINS A 'ROTATING' BUFFER 
2423*           AREA CONSISTING OF 5  10-WORD 
2424*           BLOCKS - I.E., THE MAXIMUM
2425*           LENGTH OF A MESSAGE IS 18 
2426*           CHARACTERS (9-WORDS) PLUS 1 
2427*           WORD PRECEDING THE MESSAGE
2428*           WHICH CONTAINS THE CHARACTER
2429*           COUNT.
2430* 
2431*  CALL:    (A) = ADDRESS OF FIRST WORD OF
2432*                 MESSAGE BLOCK - THIS WORD 
2433*                 CONTAINS THE CHARACTER
2434*                 LENGTH OF THE MESSAGE AS
2435*                 A NEGATIVE VALUE. 
2436* 
2437*           (P)      JSB  SYSMG 
2438*           (P+1)    -RETURN- 
2439* 
2440*                ON RETURN: 
2441*               (A) = 0 - MESSAGE ACCEPTED AND
2442*                        MOVED TO BUFFER. 
2443*               (A) NOT = 0 - BUFFER FILLED,
2444*                        MESSAGE REJECTED 
2445* 
2446* 
2447  02146 000000  SYSMG NOP 
2448  02147 027000R       JMP SBUF      CHANGED TO NOP ON FIRST ENTRY 
2449  02150 066236R       LDB SY#      IF BUFFER
2450  02151 056023R       CPB .5        IS FILLED,
2451  02152 126146R       JMP SYSMG,I    REJECT EXIT. 
2452* 
2453  02153 066241R       LDB SYC      SET CURRENT
2454  02154 076237R       STB SYT1      ENTRY ADDRESS FOR MOVE
2455  02155 066033R       LDB N10      SET -10
2456  02156 076240R       STB SYT2      AS MOVE INDEX.
2457  02157 036236R       ISZ SY#      COUNT ENTRY. 
2458* 
2459  02160 164000  SYS1  LDB A,I      MOVE 
2460  02161 176237R       STB SYT1,I    CALLER
2461  02162 036237R       ISZ SYT1      MESSAGE 
2462  02163 002004        INA           INTO
2463  02164 036240R       ISZ SYT2      CURRENT ENTRY 
2464  02165 026160R       JMP SYS1      IN BUFFER 
2465  02166 066241R       LDB SYC      (B) = CURRENT ENTRY ADDRESS. 
2466  02167 062237R       LDA SYT1     (A) = NEXT ENTRY ADDRESS 
2467  02170 053062R       CPA SBL      IF NEXT EXCEEDS BUFFER,
2468  02171 062242R       LDA SBF       RESET TO FWA BUFFER 
2469  02172 072241R       STA SYC       AND SAVE. 
2470* 







 PAGE 0054 #01  < RTIOC MODULE - SUBROUTINE SECTION >   A-29016-90003-1 


2471  02173 062236R       LDA SY#      IF ENTRY.
2472  02174 052017R       CPA .1        COUNT = 1,
2473  02175 026200R       JMP SYS3      INITIATE OUTPUT.
2474* 
2475  02176 002400  SYS2  CLA          (A) = 0 FOR EXIT WITH
2476  02177 126146R       JMP SYSMG,I   MESSAGE ACCEPTED. 
2477* 
2478  02200 160001  SYS3  LDA B,I      GET MESSAGE LENGTH,
2479  02201 072215R       STA SYS7      SET IN I/O CALL.
2480  02202 006004        INB          ADD 1 AND SET
2481  02203 076214R       STB SYS6      FWA OF MESSAGE TEXT 
2482  02204 016206R       JSB SYSCL    INITIATE OUTPUT, 
2483  02205 026176R       JMP SYS2      EXIT. 
2484* 
2485* CALL <XSIO> TO INITIATE OUTPUT
2486* 
2487  02206 000000  SYSCL NOP 
2488  02207 017163R       JSB XSIO
2489  02210 000001        OCT 1         - LOGICAL UNIT 1 - SYS TTY
2490  02211 002217R       DEF SYS8      - COMPLETION ROUTINE ADDRESS
2491  02212 000000        NOP 
2492  02213 000002        OCT 2         - ASCII WRITE - 
2493  02214 000000  SYS6  NOP            MESSAGE ADDRESS
2494  02215 000000  SYS7  NOP           MESSAGE LENGTH
2495  02216 126206R       JMP SYSCL,I 
2496* 
2497* COMPLETION ROUTINE FROM I/O CALL
2498* 
2499  02217 062236R SYS8  LDA SY#      SUBTRACT 1 FROM
2500  02220 042031R       ADA N1        ENTRY COUNT FOR 
2501  02221 072236R       STA SY#       MESSAGE JUST OUTPUT.
2502  02222 002003        SZA,RSS      IF NO MORE IN BUFFER,
2503  02223 026003X       JMP XEQ       EXIT. 
2504* 
2505  02224 062214R       LDA SYS6     SET
2506  02225 042027R       ADA .9        NEXT ENTRY
2507  02226 053062R       CPA SBL       ADDRESS 
2508  02227 062242R       LDA SBF 
2509  02230 164000        LDB A,I      GET AND SET
2510  02231 076215R       STB SYS7      LENGTH
2511  02232 002004        INA           AND 
2512  02233 072214R       STA SYS6      MESSAGE ADDRESS.
2513  02234 016206R       JSB SYSCL    INITIATE OUTPUT
2514  02235 026003X       JMP XEQ       -EXIT.
2515* 
2516  02236 000000  SY#   NOP 
2517  02237 000000  SYT1  NOP 
2518  02240 000000  SYT2  NOP 
2519  02241 003000R SYC   DEF SBUF
2520  02242 003000R SBF   DEF SBUF













 PAGE 0055 #01  < RTIOC MODULE - SUBROUTINE SECTION >   A-29016-90003-1 


2522* SUBROUTINE:  <CVEQT>
2523* 
2524*  PURPOSE: THIS ROUTINE CONVERTS AN EQT
2525*           ENTRY # TO AN EQT DISPLACEMENT
2526*           AND CALLS  <SETEQ> TO SET THE 
2527*           ENTRY ADDRESSES.
2528* 
2529*  CALLING SEQUENCE:
2530* 
2531*       (A) = EQT ENTRY # 
2532* 
2533*     (P)     JSB CVEQT 
2534*     (P+1)   -RETURN-  REGISTERS MEANINGLESS 
2535* 
2536* 
2537  02243 000000  CVEQT NOP 
2538  02244 042031R       ADA N1       SUBTRACT 1 AND 
2539  02245 070001        STA B         MULTIPLY EQT ENTRY #
2540  02246 007004        CMB,INB        BY 15
2541  02247 001700        ALF            TO 
2542  02250 040001        ADA B          COMPUTE THE
2543  02251 041650        ADA EQTA       ABSOLUTE ADDRESS.
2544* 
2545  02252 016273R       JSB SETEQ    SET ALL 15 ADDRESSES.
2546* 
2547  02253 126243R       JMP CVEQT,I    -RETURN- 
2548* 
2549* SUBROUTINE: <CPEQT> 
2550* 
2551*  PURPOSE: THIS ROUTINE COMPUTES THE ENTRY # 
2552*           OF THE ENTRY DESCRIBED BY -EQT1-. 
2553*           THE # IS CONVERTED TO DECIMAL ASCII.
2554* 
2555*  CALLING SEQUENCE:  (P)    JSB CPEQT
2556*                     (P+1)  - RETURN - 
2557*                          ON RETURN, (A) = # IN ASCII
2558* 
2559* 
2560  02254 000000  CPEQT NOP 
2561  02255 065650        LDB EQTA     SUBTRACT DEVICE
2562  02256 007004        CMB,INB       EQT ENTRY ADDRESS 
2563  02257 045660        ADB EQT1      FROM FWA OF EQT.
2564  02260 002404        CLA,INA      DETERMINE
2565  02261 006303        CCE,SZB,RSS   POSITION
2566  02262 026266R       JMP *+4       OF
2567  02263 002004        INA           ENTRY 
2568  02264 046272R       ADB N15       IN
2569  02265 026261R       JMP *-4       EQT.
2570* 
2571  02266 016010X       JSB CVT3     CONVERT TO DECIMAL 
2572  02267 042020R       ADA .2        SET EQT # 
2573  02270 160000        LDA A,I       IN
2574  02271 126254R       JMP CPEQT,I 

2576  02272 177761  N15   DEC -15 








 PAGE 0056 #01  < RTIOC MODULE - SUBROUTINE SECTION >   A-29016-90003-1 


2578* SUBROUTINE: < SETEQ > 
2579* 
2580*  PURPOSE: THIS ROUTINE SETS THE ADDRESSES 
2581*           OF THE 15 WORDS OF AN 
2582*           EQUIPMENT TABLE ENTRY IN THE
2583*           15  WORDS IN BASE PAGE COMMUNICATION
2584*           AREA LABELLED -EQT1- TO -EQT15-.
2585* 
2586*   CALLING SEQUENCE: 
2587* 
2588*           (A) - STARTING ADDRESS OF THE EQT 
2589*                 ENTRY FOR THE REFERENCED
2590*                 I/O UNIT. 
2591* 
2592*        (P)     JSB  SETEQ 
2593*        (P+1)  - RETURN - (A),(B) MEANINGLESS
2594* 
2595*          THERE ARE NO ERROR RETURNS OR
2596*           ERROR CONDITIONS DETECTED.
2597* 
2598* 
2599  02273 000000  SETEQ NOP 
2600  02274 071660        STA EQT1
2601  02275 002004        INA 
2602  02276 071661        STA EQT2
2603  02277 002004        INA 
2604  02300 071662        STA EQT3
2605  02301 002004        INA 
2606  02302 071663        STA EQT4
2607  02303 002004        INA 
2608  02304 071664        STA EQT5
2609  02305 002004        INA 
2610  02306 071665        STA EQT6
2611  02307 002004        INA 
2612  02310 071666        STA EQT7
2613  02311 002004        INA 
2614  02312 071667        STA EQT8
2615  02313 002004        INA 
2616  02314 071670        STA EQT9
2617  02315 002004        INA 
2618  02316 071671        STA EQT10 
2619  02317 002004        INA 
2620  02320 071672        STA EQT11 
2621  02321 002004        INA 
2622  02322 071771        STA EQT12 
2623  02323 002004        INA 
2624  02324 071772        STA EQT13 
2625  02325 002004        INA 
2626  02326 071773        STA EQT14 
2627  02327 002004        INA 
2628  02330 071774        STA EQT15 
2629  02331 126273R       JMP SETEQ,I 
2630* 
2631* 









 PAGE 0057 #01  < RTIOC MODULE - SUBROUTINE SECTION >   A-29016-90003-1 


2633* 
2634* SPECIAL SECTION "I/O CLEAR "
2635*   ENTRY POINT IS "$IOCL"
2636* 
2637*  PURPOSE: THE FUNCTION OF THIS ROUTINE
2638*          IS TO REMOVE A PROGRAM FROM AN 
2639*          I/O HANG-UP CONDITION RESULTING
2640*          FROM AN INPUT REQUEST NOT BEING
2641*          COMPLETED BY THE DEVICE. 
2642* 
2643*          THIS "CLEARING" PROCEDURE IS 
2644*          INITIATED BY THE OPERATOR IN 
2645*          USING THE I/O ABORT VERSION OF THE 
2646*          "OF,XXXXX,1" COMMAND. THE "OF" 
2647*          STATEMENT PROCESSOR IN 'SCHED' 
2648*          CALLS THIS SECTION IF THE REF- 
2649*          ERENCED PROGRAM IS SUSPENDED 
2650*          FOR AN I/O INPUT REQUEST.
2651* 
2652*  PROCESS: THE LIST OF EACH EQT ENTRY
2653*          IS SEARCHED TO FIND THE QUEUED 
2654*          REQUEST CORRESPONDING TO THE 
2655*          ID SEGMENT OF THE REFERENCED 
2656*          PROGRAM.  THE ENTRY IS REMOVED 
2657*          FROM THE LIST AND THE LIST IS
2658*          APPROPRIATELY LINKED TO REFLECT
2659*          THE CHANGE.
2660* 
2661*          IF THE ENTRY WAS THE FIRST ONE 
2662*          IN THE LIST (I.E. THE ACTIVE 
2663*          REQUEST), THE DEVICE'S CHANNELS
2664*          AND DMA CHANNEL, IF ASSIGNED,ARE 
2665*          CLEARED.  THE DEVICE'S TIME-OUT
2666*          CLOCK IS CLEARED.   $ABRT IS 
2667*          CALLED TO ABORT THE PROGRAM AND
2668*          CONTROL IS TRANSFERRED TO "$XEQ" 
2669*          IF THE DEVICE WAS NOT CLEARED
2670*          OR TO "L.55" IN "IOCOM" TO 
2671*          INITIATE THE NEXT STACKED
2672*          REQUEST (OR TO ALLOCATE THE
2673*          DMA CHANNEL).
2674* 
2675*  CALLING SEQUENCE:
2676* 
2677*          (A)= ID SEGMENT ADDRESS OF PROGRAM 
2678* 
2679*         (P) JMP  $IOCL
2680* 
2681*            -NO RETURN - 
2682* 
2683* 












 PAGE 0058 #01  < RTIOC MODULE - SUBROUTINE SECTION >   A-29016-90003-1 


2685                      ENT $IOCL 
2686* 
2687  02332 072044R $IOCL STA TEMP1     SAVE ID SEGMENT ADDRESS.
2688  02333 002400  M2400 CLA 
2689  02334 071735        STA OPFLG 
2690  02335 061651        LDA EQT#      SET TEMP2 = NEGATIVE
2691  02336 003004        CMA,INA        NUMBER OF EQT
2692  02337 072045R       STA TEMP2       ENTRIES.
2693  02340 061650        LDA EQTA      INITIALIZE FOR
2694* 
2695  02341 072377R       STA IOCL5      EQT ENTRY WORD 
2696  02342 072400R       STA IOCL6       1 ADDRESS.
2697* 
2698  02343 160000  IOCL1 LDA A,I       GET LINK ADDRESS. 
2699  02344 052044R       CPA TEMP1     JUMP IF A 
2700  02345 026355R       JMP IOCL2      MATCH TO PROGRAM.
2701* 
2702  02346 002002        SZA           IF NOT END OF LIST, 
2703  02347 026342R       JMP IOCL1-1    CONTINUE SCAN. 
2704* 
2705  02350 062377R       LDA IOCL5     SET (A) = ADDRESS OF
2706  02351 042030R       ADA .15        NEXT EQT ENTRY.
2707  02352 036045R       ISZ TEMP2     IF NOT END OF EQT, GO 
2708  02353 026341R       JMP IOCL1-2    TO SCAN NEXT ENTRY LIST. 
2709  02354 026003X       JMP $XEQ      -NOT FOUND, EXIT TO XEQ SE
2710* 
2711* PROGRAM REQUEST ENTRY FOUND, UNLINK REQUEST.
2712* 
2713  02355 164000  IOCL2 LDB A,I       GET NEXT LINK AND SET 
2714  02356 176400R       STB IOCL6,I    IN PREVIOUS LINK.
2715* 
2716  02357 062044R       LDA TEMP1     "ABORT
2717  02360 064000        LDB A         CHECK IF
2718  02361 006004        INB            THIS IS A
2719  02362 164001        LDB B,I         SYSTEM REQUEST
2720  02363 006021        SSB,RSS          IF SO SKIP ABORT 
2721  02364 016013X       JSB $ABRT       PROGRAM"
2722* 
2723  02365 062377R       LDA IOCL5     IF PROGRAM REQUEST
2724  02366 052400R       CPA IOCL6      WAS CURRENT ENTRY, 
2725  02367 006401        CLB,RSS       SKIP TO CLEAR DEVICE. 
2726  02370 026003X       JMP $XEQ      -EXIT TO $XEQ.
2727* 
2728  02371 016273R       JSB SETEQ 
2729* 
2730  02372 072060R       STA CONFL      FOR IOCOM. 
2731  02373 076063R       STB COMPL      COMPLETION FLAG. 
2732  02374 175774        STB EQT15,I   CLEAR DEVICE TIME-OUT CLOCK 
2733* 
2734  02375 016425R       JSB CLCHS     CLEAR DEVICE CHANNELS 
2735  02376 027333R       JMP L.55      EXIT TO IOCOM CODE

2737  02377 000000  IOCL5 NOP 
2738  02400 000000  IOCL6 NOP 









 PAGE 0059 #01  < RTIOC MODULE - SUBROUTINE SECTION >   A-29016-90003-1 


2740* 
2741*  ROUTINE TO CLEAR DMA CHANNEL IF ASSIGNED TO DEVICE 
2742* 
2743  02401 000000  CLDMA NOP 
2744  02402 065654        LDB INTBA      GET THE INTERRUPLE ADDRESS TO B
2745  02403 160001        LDA B,I         AND DMA 6 ENTRY TO A
2746  02404 001265        RAL,CLE,ERA      CLEAR THE SIGN BIT 
2747  02405 051660        CPA EQT1       THIS CHANNEL ASSIGNED? 
2748  02406 002401        CLA,RSS         YES- SKIP 
2749  02407 026413R       JMP IOCL3       NO TRY NEXT CHANNEL 
2750  02410 106706        CLC 6          CLEAR CHANNEL
2751  02411 102106        STF 6            6. 
2752  02412 170001        STA B,I        SET IT AVAILABLE IN INTBA

2754  02413 006004  IOCL3 INB            STEP TO DMA 7 ENTRY
2755  02414 160001        LDA B,I         GET TO A  AND 
2756  02415 001265        RAL,CLE,ERA      CLEAR THE SIGN BIT 
2757  02416 051660        CPA EQT1       THIS CHANNEL ASSIGNED? 
2758  02417 002401        CLA,RSS         YES - SKIP
2759  02420 126401R       JMP CLDMA,I     NO - EXIT CHANNELS CLEARED
2760  02421 106707        CLC 7           CLEAR CHANNEL 7 
2761  02422 102107        STF 7           AND 
2762  02423 170001        STA B,I         MAKE IT AVAILABLE.
2763  02424 126401R       JMP CLDMA,I 
2764* 
2765*  ROUTINE TO CLEAR ALL CHANNELS SERVICED BY EQT ENTRY
2766* 
2767  02425 000000  CLCHS NOP 
2768  02426 016401R       JSB CLDMA       CLEAR DMA CHANNEL IF ASSIGNED 
2769  02427 061655        LDA INTLG     STORE INTERRUPT 
2770  02430 003004        CMA,INA        TABLE LENGTH-
2771  02431 042020R       ADA .2         RELATED INDEX
2772  02432 072057R       STA TEMPW 
2773  02433 062447R       LDA CLR10     STORE INITIAL 
2774  02434 072441R       STA CLCSC      CLC S.C. 
2775  02435 061654        LDA INTBA      INSTRUCTION
2776  02436 042020R       ADA .2
2777  02437 164000  CLRNX LDB A,I       GET NEXT TABLE ENTRY- 
2778  02440 055660        CPB EQT1      DOES IT REFERENCE THIS EQT? 
2779  02441 106700  CLCSC CLC 00B        YES-GO CLEAR IT
2780  02442 036057R       ISZ TEMPW     THRU TABLE? 
2781  02443 002005        INA,RSS        NO-INDEX TO NEXT ENTRY 
2782  02444 126425R       JMP CLCHS,I    YES-EXIT 
2783  02445 036441R       ISZ CLCSC 
2784  02446 026437R       JMP CLRNX 
2785* 
2786  02447 106710  CLR10 CLC 10B 
2787  02450 077777  M7777 OCT 77777 















 PAGE 0060 #01  ** OPTIONAL OPERATOR STATEMENTS **      A-29016-90003-1 


2789* 
2790* 'LOGICAL UNIT' STATEMENT   (OPTIONAL) 
2791* 
2792* FORMAT:  LU,N1(,N2(,N3))   WHERE: 
2793* 
2794*           N1 = LOGICAL UNIT # 
2795*           N2 = 0, EQT ENTRY #, OR NOT PRESENT 
2796*           N3 = SUBCHANNEL # OR NOT PRESENT IN WHICH 
2797*                CASE IT DEFAULTS TO ZERO 
2798* 
2799* ACTION:  1) N2 AND N3 NOT INPUT;  THE ASSIGNMENT OF 
2800*                LOGICAL UNIT N1 IS PRINTED AS: 
2801*                   ' LU #N1 = #XX,U Y'   XX = EQT
2802*                ENTRY # OF ASSIGNED DEVICE.
2803*                Y = SUBCHANNEL #;  ,U Y PRINTED IF Y NON-ZERO
2804* 
2805*          2) N2 = 0;  THE ASSIGNMENT IS RELEASED,
2806*                      I.E, THE CORRESPONDING 
2807*                          WORD IN THE DEVICE 
2808*                          REFERENCE TABLE (DRT)
2809*                          IS SET = 0.
2810* 
2811*          3) N2 = EQT ENTRY # OF I/O DEVICE TO 
2812*                  BE ASSIGNED TO LOGICAL UNIT N1;
2813*                   IF N2 IS A LEGITIMATE EQT #,
2814*                   THEN N2 AND N3 ARE STORED IN WORD N1
2815*                   IN THE DRT - ASSIGNMENT OF
2816*                   LOGICAL UNIT TO PHYSICAL UNIT 
2817*                   IS MADE.
2818* 
2819* CALL (FROM MESSAGE PROCESSOR):
2820* 
2821*      (A) = N1 (LOGICAL UNIT) IN BINARY
2822*      (B) = -1 IF N2 NOT INPUT OR N3:N2
2823*                      (IN BINARY) WHERE N3 IS IN BITS 13-11
2824*   (P)  JMP  LUPR
2825* 
2826*      RETURN IS TO MESS,I WITH A=0 FOR ACTION
2827*       TAKEN OR (A) = ADDRESS OF MESSAGE IN 1).
2828* 
2829                      ENT $LUPR 
2830* 
2831  02451 072044R LUPR  STA TEMP1    SAVE  'N1' 
2832  02451         $LUPR EQU LUPR
2833  02452 076057R       STB TEMPW    SAVE 'N2' AND 'N3' 
2834  02453 056031R       CPB N1        IF NO 'N2','N3' 
2835  02454 026466R       JMP LUPR0     PARAMETERS, CONTINUE
2836  02455 052020R       CPA .2       PREVENT
2837  02456 026112R       JMP IODNE     REASSIGNMENT
2838  02457 052021R       CPA .3        OF LU 2 OR 3
2839  02460 026112R       JMP IODNE     TO OTHER DEVICES
2840  02461 060001        LDA B 
2841  02462 012035R       AND MASK2     SAVE 'N2' IN TEMP2
2842  02463 070001        STA B 
2843  02464 072045R       STA TEMP2 
2844  02465 062044R       LDA TEMP1 







 PAGE 0061 #01  ** OPTIONAL OPERATOR STATEMENTS **      A-29016-90003-1 


2845  02466 002003  LUPR0 SZA,RSS       ERROR IF
2846  02467 026112R       JMP IODNE      N1 = 0 
2847  02470 003004        CMA,INA      CHECK FOR
2848  02471 041653        ADA LUMAX     N1 > LENGTH 
2849  02472 002020        SSA            OF DRT.
2850  02473 026112R       JMP IODNE     YES, UNDEFINED N1.
2851* 
2852  02474 003400        CCA          COMPUTE
2853  02475 042044R       ADA TEMP1     LOCATION OF N1
2854  02476 041652        ADA DRT        IN DRT.
2855  02477 072046R       STA TEMP3     (SAVE DRT ADDRESS)
2856  02500 160000        LDA A,I      GET N1 ASSIGNMENT ( 0 OR EQT #)
2857  02501 072056R       STA TEMPL     SAVE CHAN & SUBCHAN #'S 
2858  02502 012035R       AND MASK2     MASK OUT SUBCHANNEL 
2859  02503 072047R       STA TEMP4     AND SAVE. 
2860* 
2861  02504 006002        SZB          IF N2 = 0, RELEASE ASSIGNMENT. 
2862  02505 026513R       JMP LUPR1 
2863* 
2864* RELEASE L.U. ASSIGNMENT 
2865* 
2866  02506 002404        CLA,INA      ERROR IF 
2867  02507 052044R       CPA TEMP1     ATTEMPT TO RELEASE
2868  02510 026112R       JMP IODNE     LU #1,  SYSTEM TELETYPE.
2869  02511 176046R       STB TEMP3,I  SET DRT WORD = 0 
2870  02512 026075R       JMP EXT1      - EXIT -
2871* 
2872  02513 006007  LUPR1 INB,SZB,RSS  IF (B) = -1, THEN GO TO
2873  02514 026535R       JMP LUPR3     PRINT CURRENT ASSIGNMENT. 
2874* 
2875* ASSIGN L.U. TO PHYSICAL DEVICE
2876* 
2877  02515 061652        LDA DRT      PREVENT
2878  02516 002004        INA           ASSIGNMENT
2879  02517 104200        DLD A,I         OF ANY LU 
2880  02521 052057R       CPA TEMPW       NUMBER TO SYSTEM
2881  02522 002001        RSS             OR AUXILIARY
2882  02523 056057R       CPB TEMPW       DISC/DRUM 
2883  02524 026112R       JMP IODNE 
2884* 
2885  02525 062045R       LDA TEMP2    CHECK N2 AND SET EQT ADDRESSES.
2886  02526 016100R       JSB IODNS 
2887  02527 006404        CLB,INB      IF LOGICAL UNIT =
2888  02530 056044R       CPB TEMP1     1 (SYSTEM TELETYPE).
2889  02531 026560R       JMP LUPR5     GO TO CHANGE ASSIGNMENT.
2890  02532 062057R       LDA TEMPW     SET CHAN AND SUBCHAN IN 
2891  02533 172046R       STA TEMP3,I   DRT WORD ( N1 ).
2892  02534 026075R       JMP EXT1
2893* 
2894* PRINT CURRENT LOGICAL UNIT ASSIGNMENT 
2895* 
2896  02535 062044R LUPR3 LDA TEMP1    CONVERT N1 
2897  02536 016615R       JSB LUPS       TO ASCII 
2898  02537 072607R       STA LUMG1      AND SET IN MESSAGE.
2899  02540 062047R       LDA TEMP4    SAME 
2900  02541 016615R       JSB LUPS       FOR CURRENT







 PAGE 0062 #01  ** OPTIONAL OPERATOR STATEMENTS **      A-29016-90003-1 


2901  02542 072612R       STA LUMG2       EQT ASSIGNMENT. 
2902  02543 062056R       LDA TEMPL     GET CHAN AND SUBCHAN
2903  02544 012043R       AND M7400     MASK OUT CHANNEL
2904  02545 002002        SZA           SUBCHANNEL ZERO?
2905  02546 026553R       JMP LUPR4+1    NO - ADD IT TO MESSAGE 
2906  02547 062116R       LDA N12 
2907  02550 072604R       STA LUMGA+1 
2908  02551 062603R       LDA LUMGA    (A) = ADDRESS OF MESSAGE.
2909  02552 026113R LUPR4 JMP EXT2
2910* 
2911  02553 001722        ALF,RAL       CONVERT SUBCHANNEL (N3) 
2912  02554 016615R       JSB LUPS       TO ASCII AND 
2913  02555 072614R       STA LUMG3      SET IN MESSAGE 
2914  02556 062623R       LDA N16 
2915  02557 026550R       JMP LUPR4-2 
2916* 
2917  02560 161664  LUPR5 LDA EQT5,I   GET *EQUIPMENT 
2918  02561 012762R       AND MASKT       CODE FOR REFERENCED UNIT
2919  02562 002002        SZA          IF UNIT IS NOT A TELETYPE, 
2920  02563 052333R       CPA M2400 
2921  02564 002001        RSS 
2922  02565 026112R       JMP IODNE     REJECT OPERATION. 
2923  02566 161664        LDA EQT5,I   CHECK STATUS 
2924  02567 012036R       AND MASK4     OF NEW DEVICE.
2925  02570 052037R       CPA MASK5    IF NEW DEVICE 'DOWN',
2926  02571 026112R       JMP IODNE     DIS-ALLOW THIS REQUEST. 
2927  02572 061660        LDA EQT1     SET NEW EQT ADDRESS
2928  02573 071675        STA SYSTY     IN BP.
2929  02574 062057R       LDA TEMPW     SET CH #
2930  02575 172046R       STA TEMP3,I   IN DRT(1).
2931  02576 062600R       LDA NSYSM    OUTPUT '**' TO EFFECT
2932  02577 026113R       JMP EXT2      OPERATOR COMMUNICATION. 
2933* 
2934  02600 002601R NSYSM DEF *+1 
2935  02601 177776        DEC -2
2936  02602 025052        ASC 1,**
2937* 
2938  02603 002604R LUMGA DEF *+1 
2939  02604 000000        NOP 
2940* 
2941  02605 046125        ASC 2,LU #
2942  02607 000000  LUMG1 NOP 
2943  02610 020075        ASC 2, = #
2944  02612 000000  LUMG2 NOP 
2945  02613 026125        ASC 1,,U
2946  02614 000000  LUMG3 NOP 
2947* 
2948  02615 000000  LUPS  NOP         BINARY/DECIMAL(ASCII) PREPROCESSOR
2949  02616 002300        CCE          (E = 1  FOR DECIMAL) 
2950  02617 016010X       JSB CVT3    - CALL CONVERSION (A) = NUMBER -
2951  02620 042020R       ADA .2      SET (A) 
2952  02621 160000        LDA A,I      = ASCII OF NUMBER. 
2953  02622 126615R       JMP LUPS,I     -RETURN
2954* 
2955  02623 177760  N16   DEC -16 








 PAGE 0063 #01  ** OPTIONAL OPERATOR STATEMENTS **      A-29016-90003-1 


2957* 
2958* ' EQT DEVICE STATUS ' STATEMENT   (OPTIONAL)
2959* 
2960* FORMAT:   EQ,NN    WHERE NN = EQT ENTRY # 
2961*                    FOR I/O DEVICE 
2962* 
2963* ACTION:   THIS STATEMENT REQUESTS THE CURRENT 
2964*          STATUS OF EQT ENTRY #NN. THE PRINTED 
2965*          REPLY IS:
2966* 
2967*           '  SC DVRNN D B UN AV'  WHERE:
2968* 
2969*            SC = I/O CHANNEL # (SELECT CODE) 
2970*            DVRNN = DRIVER NAME, EQUIP TYPE NN.
2971*            D, IF DMA CHANNEL REQUIRED- 0 IF NOT 
2972*            B, IF BUFFERING SELECTED - 0  IF NOT 
2973*            UN = UNIT N (FOR SUB-UNIT ADDRESSING)
2974*            AV = 0   UNIT AVAILABLE
2975*                 1   UNIT DISABLED (DOWN)
2976*                 2   UNIT IN OPERATION 
2977*                 3   UNIT WAITING FOR A DMA CHANNEL
2978* 
2979* CALL (FROM MESSAGE PROCESSOR):
2980* 
2981*     (A) = NN  (EQT #) IN BINARY 
2982*     (B)= 0,1 OR -1  (-1 MEANS NO PARAMETER #2)
2983*         IF 2ND PARAMETER SUPPLIED, THE B FIELD
2984*         IN THE EQT ENTRY IS SET TO THE VALUE
2985*         OF THE PARAMETER: 0=NO BUFFERING, 
2986*         1(NON-ZERO)= BUFFERING. 
2987* 
2988* 
2989*   (P)  JMP  EQ.ST 
2990*      -RETURN IS TO MESS,I WITH (A) = ADDRESS OF 
2991*        REPLY OR ADDRESS OF ERROR MESSAGE IF NN
2992*        IS ILLEGAL.
2993* 
2994                      ENT $EQST 
2995* 
2996  02624 076044R EQ.ST STB TEMP1    SAVE PARAM # 2 
2997* 
2998  02624         $EQST EQU EQ.ST 
2999* 
3000  02625 016100R       JSB IODNS    CHECK NN AND SET EQT ADDRESSES 
3001  02626 066044R       LDB TEMP1    CHECK PARAM #2.
3002  02627 161663        LDA EQT4,I      GET CHANNEL WORD
3003  02630 006006        INB,SZB      IF =-1, OUTPUT EQT STATUS
3004  02631 026667R       JMP EQST1     PARAM FOR BUFFERING SELECTION 
3005* 
3006  02632 012034R       AND MASK1     I/O CHANNEL # 
3007  02633 016710R       JSB EQCVT 
3008  02634 072677R       STA EQMS1 
3009* 
3010  02635 161663        LDA EQT4,I   CONVERT
3011  02636 101026        ASR 6           UNIT #. 
3012  02637 012025R       AND .7







 PAGE 0064 #01  ** OPTIONAL OPERATOR STATEMENTS **      A-29016-90003-1 


3013  02640 016710R       JSB EQCVT 
3014  02641 072706R       STA EQMS5 
3015  02642 161663        LDA EQT4,I   SET
3016  02643 066716R       LDB EQBLK     D (FOR DMA CHANNEL) 
3017  02644 001210        RAL,SLA       OR
3018  02645 066717R       LDB EQBD      0 
3019  02646 076703R       STB EQMS3 
3020  02647 066716R       LDB EQBLK    SET
3021  02650 002020        SSA           B (FOR AUTOMATIC BUFFERING) 
3022  02651 066720R       LDB EQBB      OR
3023  02652 076704R       STB EQMS4     0 
3024  02653 161664        LDA EQT5,I   SET
3025  02654 001222        RAL,RAL       AVAILABILITY
3026  02655 012021R       AND .3         STATUS 
3027  02656 042716R       ADA EQBLK     (0,1,2,OR3) 
3028  02657 072707R       STA EQMS6 
3029  02660 161664        LDA EQT5,I   CONVERT
3030  02661 001727        ALF,ALF       EQUIPMENT 
3031  02662 012034R       AND MASK1      TYPE 
3032  02663 016710R       JSB EQCVT     FOR 
3033  02664 072702R       STA EQMS2      DVRNN. 
3034  02665 062674R       LDA EQMSA    (A) = ADDRESS OF REPLY 
3035  02666 026113R       JMP EXT2
3036  02667 005325  EQST1 RBR,ERB         ROTATE BIT 1 TO E 
3037  02670 001222        RAL,RAL         AND PUT IN
3038  02671 001523        ERA,RAR         14 OF EQT4
3039  02672 171663        STA EQT4,I    AND RESTORE 
3040  02673 026075R       JMP EXT1
3041* 
3042  02674 002675R EQMSA DEF *+1 
3043  02675 177754        DEC -20 
3044  02676 020040        ASC 1,
3045  02677 000000  EQMS1 NOP            I/O CHANNEL #
3046  02700 020104        ASC 2, DVR
3047  02702 000000  EQMS2 NOP            EQUIP TYPE CODE
3048  02703 000000  EQMS3 NOP            D OR 0 
3049  02704 000000  EQMS4 NOP            B OR 0 
3050  02705 020125        ASC 1, U
3051  02706 000000  EQMS5 NOP            UNIT # 
3052  02707 000000  EQMS6 NOP            AVAILABILITY 
3053* 
3054  02710 000000  EQCVT NOP          (A) = NUMBER 
3055  02711 000040        CLE          CONVERT
3056  02712 016010X       JSB CVT3      TO OCTAL ASCII
3057  02713 042020R       ADA .2        AND 
3058  02714 160000        LDA A,I       RETURN IN A.
3059  02715 126710R       JMP EQCVT,I 
3060* 
3061  02716 020060  EQBLK ASC 1, 0
3062  02717 020104  EQBD  ASC 1, D
3063  02720 020102  EQBB  ASC 1, B












 PAGE 0065 #01  ** OPTIONAL OPERATOR STATEMENTS **      A-29016-90003-1 


3065* 
3066*  ' DEVICE TIME-OUT PARAMETER ' STATEMENT   (OPTIONAL) 
3067* 
3068* FORMAT:   TO,N1,N2  WHERE 
3069* 
3070*            N1 = EQT # 
3071*            N2 = TIME-OUT PARAMETER OR -1
3072* 
3073* ACTION:   IF N2 = -1, A SECOND PARAMETER WAS NOT
3074*            RECEIVED FROM THE MESSAGE PROCESSOR; 
3075*            THEREFORE, PRINT THE CURRENT TIME-OUT
3076*            PARAMETER OF DEVICE N1.
3077* 
3078*           BOTH N1 AND N2 PRESENT, ASSIGN N2 AS THE
3079*            NEW TIME-OUT PARAMETER FOR DEVICE N1.
3080* 
3081* 
3082* CALL (FROM MESSAGE PROCESSOR):
3083* 
3084*     (A) = N1
3085*     (B) = N2 OR -1
3086* 
3087*   (P)  JMP $CHTO
3088*      - RETURN IS TO MESS,I WITH (A) = ADDRESS OF REPLY
3089*         OR ADDRESS OF ERROR MESSAGE IF N1 IS ILLEGAL. 
3090* 
3091                      ENT $CHTO 

3093  02721 072044R $CHTO STA TEMP1      SAVE N1
3094  02722 076057R       STB TEMPW       AND N2
3095  02723 016100R       JSB IODNS      CHECK VALIDITY OF N1 
3096  02724 066057R       LDB TEMPW      LOOK AT N2 
3097  02725 006003        SZB,RSS        IF N2 ZERO, DISABLE
3098  02726 026776R       JMP CHTO2       TIME-OUT FOR DEVICE 
3099  02727 006006        INB,SZB        IF N2 = -1, OUTPUT T-O PARAMETE
3100  02730 026763R       JMP CHTO1      OTHERWISE, ENTER NEW T-O VALUE 
3101* 
3102  02731 161773        LDA EQT14,I    CONVERT T-O PARAMETER
3103  02732 002302        CCE,SZA         TO DECIMAL ASCII
3104  02733 003000        CMA 
3105  02734 016010X       JSB CVT3
3106  02735 002304        CCE,INA 
3107  02736 104200        DLD A,I         STORE IN MESSAGE
3108  02740 104400        DST TOMS1+2 
3109* 
3110  02742 062044R       LDA TEMP1      CONVERT EQT #
3111  02743 016010X       JSB CVT3        TO DECIMAL ASCII
3112  02744 042020R       ADA .2
3113  02745 160000        LDA A,I 
3114  02746 072755R       STA TOMS1      STORE INTO MESSAGE 
3115  02747 062751R       LDA TOMSA 
3116  02750 026113R       JMP EXT2











 PAGE 0066 #01  ** OPTIONAL OPERATOR STATEMENTS **      A-29016-90003-1 


3118  02751 002752R TOMSA DEF *+1 
3119  02752 177764        DEC -12 
3120  02753 052117        ASC 2,TO# 
3121  02755 000000  TOMS1 NOP 
3122  02756 020075        ASC 1, =
3123  02757 000000        NOP 
3124  02760 000000        NOP 
3125* 
3126  02761 000764  .500  DEC 500 
3127  02762 037400  MASKT OCT 37400 
3128* 
3129  02763 007004  CHTO1 CMB,INB        ERROR IF ATTEMPT 
3130  02764 161664        LDA EQT5,I      TO SET TYPE 0 OR 5
3131  02765 012762R       AND MASKT       DEVICE TIME-OUT 
3132  02766 002002        SZA             VALUE TO LESS THAN
3133  02767 052333R       CPA M2400       FIVE SECONDS. 
3134  02770 002001  RSS   RSS 
3135  02771 026776R       JMP CHTO2      OTHERWISE, STORE 
3136  02772 062761R       LDA .500        NEW TIME-OUT
3137  02773 040001        ADA B           VALUE.
3138  02774 002021        SSA,RSS 
3139  02775 026112R       JMP IODNE 
3140  02776 175773  CHTO2 STB EQT14,I 
3141  02777 026075R       JMP EXT1







































 PAGE 0067 #01  MSG BUFFER AND PRIVLEDGE I/O CONFIGURE  A-29016-90003-1 


3143* 
3144  03000 000000  SBUF  BSS 50
3145  03000               ORG SBUF      PUT IOC CONFIGURING ROUTINE IN B
3146  03000 073000R       STA SBUF      SAVE THE A REG. 
3147  03001 002400        CLA 
3148  03002 072147R       STA SYSMG+1   CLEAR CALL TO HERE
3149  03003 065737        LDB DUMMY     GET THE DUMMY I/O ADDRESS 
3150  03004 006003        SZB,RSS       IF NONE 
3151  03005 027021R       JMP NOPRV     GO EXIT 
3152  03006 072020R       STA SW1       SET THE PRIVILEDGE
3153  03007 072152R       STA SW2       SWITCHES
3154  03010 063024R       LDA CLCP
3155  03011 040001        ADA B         CONFIGURE THE DUMMY ADDRESSES 
3156  03012 173030R       STA CLC2,I    USE INDIRECTS TO AVOID LINKS
3157  03013 063023R       LDA STCP
3158  03014 040001        ADA B         NEED AN CLC 
3159  03015 173026R       STA STC2,I    STC 
3160  03016 063025R       LDA STFP      AND 
3161  03017 040001        ADA B 
3162  03020 173027R       STA STF2,I    AND STF 
3163  03021 063000R NOPRV LDA SBUF      DONE
3164  03022 026147R       JMP SYSMG+1   GO CONTINUE THE MESSAGE BIT 


3166  03023 102700  STCP  STC 0 
3167  03024 106700  CLCP  CLC 0 
3168  03025 102100  STFP  STF 0 
3169  03026 000021R STC2  DEF STC1
3170  03027 000154R STF2  DEF STF1
3171  03030 000153R CLC2  DEF CLC1


3173  00031         L     EQU 50+SBUF-*  ERROR HERE MEANS WE RAN OUT OF 
3174  03062               ORR           LEAVE THE BUFFER
3175* 
3176  03062 003062R SBL   DEF * 



























 PAGE 0068 #01  *  SYSTEM  ENT/EXT SYMBOL  DEFINITION * A-29016-90003-1 


3178* ENTRY POINTS WITHIN THE MODULES OF THE
3179* R/T EXECUTIVE BEGIN WITH '$' TO AVOID 
3180* DUPLICATE ENTRY POINT CONFLICTS WITH
3181* USER PROGRAMS.
3182* 
3183  00000         $CIC  EQU CIC 
3184  01163         $XSIO EQU XSIO
3185  02146         $SYMG EQU SYSMG 
3186  00214         $IORQ EQU IOREQ 
3187  02125         $IOUP EQU IO.UP 
3188  02065         $IODN EQU IO.DN 
3189  00001         RTRQP EQU $RQST 
3190  00002         CLOCK EQU $CLCK 
3191  00003         XEQ   EQU $XEQ
3192  00004         TYPE  EQU $TYPE 
3193  00005         LIST  EQU $LIST 
3194  00006         .ALC. EQU $ALC
3195  00007         .RTN. EQU $RTN
3196  00010         CVT3  EQU $CVT3 
3197  00011         ERMSG EQU $ERMG 
3198  00012         MESS  EQU $MESS 
3199  02243         $CVEQ EQU CVEQT 









































 PAGE 0069 #01  * SYSTEM BASE PAGE COMMUNICATION AREA * A-29016-90003-1 


3201  01650         .     EQU 1650B     ESTABLISH ORIGIN OF AREA
3202* 
3203* SYSTEM TABLE DEFINITION * 
3204* 
3205  01650         EQTA  EQU .+0      FWA  OF  EQUIPMENT TABLE 
3206  01651         EQT#  EQU .+1       # OF EQT ENTRIES
3207  01652         DRT   EQU .+2     FWA  OF  DEVICE REFERENCE TABLE 
3208  01653         LUMAX EQU .+3       # OF LOGICAL UNITS (IN DRT) 
3209  01654         INTBA EQU .+4      FWA  OF  INTERRUPT TABLE 
3210  01655         INTLG EQU .+5       # OF INTERRUPT TABLE ENTRIES
3211  01656         TAT   EQU .+6      FWA  OF  TRACK ASSIGNMENT TABLE
3212  01657         KEYWD EQU .+7      FWA  OF  KEYWORD BLOCK 
3213* 
3214* I/O MODULE/DRIVER COMMUNICATION 
3215* 
3216  01660         EQT1  EQU .+8      ADDRESSES
3217  01661         EQT2  EQU .+9 
3218  01662         EQT3  EQU .+10      OF
3219  01663         EQT4  EQU .+11
3220  01664         EQT5  EQU .+12      CURRENT 
3221  01665         EQT6  EQU .+13
3222  01666         EQT7  EQU .+14      15-WORD 
3223  01667         EQT8  EQU .+15
3224  01670         EQT9  EQU .+16      EQT 
3225  01671         EQT10 EQU .+17
3226  01672         EQT11 EQU .+18      ENTRY 
3227  01771         EQT12 EQU .+81
3228  01772         EQT13 EQU .+82
3229  01773         EQT14 EQU .+83
3230  01774         EQT15 EQU .+84
3231* 
3232  01673         CHAN  EQU .+19     CURRENT DMA CHANNEL #
3233  01674         TBG   EQU .+20     I/O ADDRESS OF TIME-BASE CARD
3234  01675         SYSTY EQU .+21     EQT ENTRY ADDRESS OF SYSTEM TTY
3235* 
3236* SYSTEM REQUEST PROCESSOR /'EXEC' COMMUNICATION *
3237* 
3238  01676         RQCNT EQU .+22     # OF REQUEST PARAMETERS -1 
3239  01677         RQRTN EQU .+23      RETURN POINT ADDRESS
3240  01700         RQP1  EQU .+24      ADDRESSES 
3241  01701         RQP2  EQU .+25
3242  01702         RQP3  EQU .+26       OF REQUEST 
3243  01703         RQP4  EQU .+27
3244  01704         RQP5  EQU .+28       PARAMETERS 
3245  01705         RQP6  EQU .+29
3246  01706         RQP7  EQU .+30       (SET FOR MAXIMUM OF
3247  01707         RQP8  EQU .+31        8 PARAMETERS) 
3248* 
3249* DEFINITION OF SYSTEM LISTS (QUEUES) * 
3250* 
3251  01710         DORMT EQU .+32     ADDRESS OF 'DORMANT' LIST, 
3252  01711         SKEDD EQU .+33      'SCHEDULE' LIST,
3253  01714         SUSP3 EQU .+36      'AVAILABLE MEMORY' LIST,
3254  01715         SUSP4 EQU .+37      'DISC ALLOCATION'  LIST,
3255  01716         SUSP5 EQU .+38      'OPERATOR SUSPEND' LIST 
3256* 







 PAGE 0070 #01  * SYSTEM BASE PAGE COMMUNICATION AREA * A-29016-90003-1 


3257* DEFINITION OF EXECUTING PROGRAM  ID SEGMENT' *
3258* 
3259  01717         XEQT  EQU .+39     ID SEGMENT ADDR. OF CURRENT PROG.
3260  01720         XLINK EQU .+40       'LINKAGE'
3261  01721         XTEMP EQU .+41       'TEMPORARY (5-WORDS) 
3262  01726         XPRIO EQU .+46       'PRIORITY' WORD
3263  01727         XPENT EQU .+47       'PRIMARY ENTRY POINT'
3264  01730         XSUSP EQU .+48       'POINT OF SUSPENSION'
3265  01731         XA    EQU .+49       'A REGISTER' AT SUSPENSION 
3266  01732         XB    EQU .+50       'B REGISTER' 
3267  01733         XEO   EQU .+51       'E AND OVERFLOW
3268* 
3269* SYSTEM MODULE COMMUNICATION FLAGS * 
3270* 
3271  01734         OPATN EQU .+52     OPERATOR/KEYBOARD ATTENTION FLAG 
3272  01735         OPFLG EQU .+53     OPERATOR COMMUNICATION FLAG
3273  01736         SWAP  EQU .+54     RT DISC RESIDENT SWAPPING FLAG 
3274  01737         DUMMY EQU .+55     I/O ADDRESS OF DUMMY INT. CARD 
3275  01740         IDSDA EQU .+56     DISC ADDR. OF FIRST ID SEGMENT 
3276  01741         IDSDP EQU .+57      -POSITION WITHIN SECTOR 
3277* 
3278* DEFINITION OF MEMORY ALLOCATION BASES * 
3279* 
3280  01742         BPA1  EQU .+58     FWA R/T DISC RES. BP LINK AREA 
3281  01743         BPA2  EQU .+59     LWA R/T DISC RES. BP LINK AREA 
3282  01744         BPA3  EQU .+60     FWA BKG DISC RES. BP LINK AREA 
3283  01745         LBORG EQU .+61     FWA OF RESIDENT LIBRARY AREA 
3284  01746         RTORG EQU .+62     FWA OF REAL-TIME AREA
3285  01747         RTCOM EQU .+63     LENGTH OF REAL TIME COMMON AREA
3286  01750         RTDRA EQU .+64     FWA OF R/T DISC RESIDENT AREA
3287  01751         AVMEM EQU .+65     FWA OF SYSTEM AVAILABLE MEMORY 
3288  01752         BKORG EQU .+66     FWA OF BACKGROUND AREA 
3289  01753         BKCOM EQU .+67     LENGTH OF BACKGROUND COMMON AREA 
3290  01754         BKDRA EQU .+68     FWA OF BKG DISC RESIDENT AREA
3291* 
3292* UTILITY PARAMETERS
3293* 
3294  01755         TATLG EQU .+69     LENGTH OF TRACK ASSIGNMENT TABLE 
3295  01756         TATSD EQU .+70      # OF TRACKS ON SYSTEM DISC
3296  01757         SECT2 EQU .+71      # SECTORS/TRACK ON LU 2 (SYSTEM)
3297  01760         SECT3 EQU .+72      # SECTORS/TRACK ON LU 3 (AUX.)
3298  01761         DSCLB EQU .+73     DISC ADDR OF RES LIB ENTRY PTS 
3299  01762         DSCLN EQU .+74      # OF RES LIB ENTRY POINTS 
3300  01763         DSCUT EQU .+75     DISC ADDR OF RELOC UTILITY PROGS 
3301  01764         DSCUN EQU .+76      # OF RELOC UTILITY PROGS
3302  01765         LGOTK EQU .+77     LOAD-N-GO: LU,STG TRACK,# OF TRKS
3303  01766         LGOC  EQU .+78      CURRENT LGO TRACK/SECTOR ADDRESS
3304  01767         SFCUN EQU .+79     SOURCE FILE LU AND DISC ADDRESS
3305  01770         MPTFL EQU .+80      MEMORY PROTECT ON/OFF FLAG (0/1)
3306  01775         FENCE EQU .+85      MEM PROTECT FENCE ADDRESS 
3307  01777         BKLWA EQU .+87     LWA OF MEMORY IN BACKGROUND
3308* 
3309  03063               ORG *         LENGTH OF RTIOC 
3310                      END CIC 
**  NO ERRORS*

$END ASMB     

*
--> Assemble 29016-RTE_CORE_SCHED
ON,ASMB,99







 PAGE 0001


0001                ASMB,R,L,B,C   ** RT SCHEDULER MODULE **
**  NO ERRORS*





























































 PAGE 0002 #01


0001                ASMB,R,L,B,C   ** RT SCHEDULER MODULE **
0002  00000               NAM SCHED 
0003* 
0004                      SUP 
0005********************************************************************
0006* 
0007* 
0008***** AMD-DAS ***** FEB,72 ***** REV.LWH *****
0009* 
0010* 
0011********************************************************************
0012* 
0013*   SCHED ENTRY POINT NAMES 
0014* 
0015                      ENT $XEQ,$LIST,$MESS,$CVT3,$STRT,$TYPE
0016                      ENT $MPT1,$MPT2,$MPT3,$MPT4,$MPT5,$MPT6 
0017                      ENT $MPT7,$CLCK,$TADD,$TREM 
0018* 
0019*   SCHED EXTERNAL REFERENCE NAMES
0020* 
0021                      EXT $XSIO,$IOUP,$IODN,$ERMG,$DREQ 
0022                      EXT $OTRL,$DREL,$ABRT,$LUPR,$EQST 
0023                      EXT $SDSK,$IOCL,$IRT,$DEVT,$CHTO
0024                      EXT $CVEQ,$SYMG 
0025* 
0026********************************************************************
0027* 
0028*     THE SCHED MODULE OF HP2100 REAL TIME EXECUTIVE CONSISTS OF   *
0029* 
0030*        1.  TIME PROCESSOR ROUTINES                               *
0031*        2.  PROGRAM SCHEDULE, EXECUTION, AND SWITCHING ROUTINES   *
0032*        3.  LIST PROCESSORS                                       *
0033*        4.  LINK PROCESSORS                                       *
0034*        5.  OPERATOR INPUT MESSAGE PROCESSORS                     *
0035*        6.  SYSTEM START UP AND OPER INPUT REQUEST ACKNOWLEDGE    *
0036*        7.  MEMORY PROTECT VIOLATION SCHEDULER PREPROCESSORS      *
0037* 
0038********************************************************************

























 PAGE 0003 #01  REAL TIME CLOCK-TIME LIST PROCESSING


0040********************************************************************
0041*        THE REAL TIME CLOCK PROCESSOR SECTION OF HP-2100 REAL TIME*
0042*     EXECUTIVE HANDLES ALL TIME DEPENDENT FUNCTIONS:              *
0043*        1. INCREMENT REAL TIME CLOCK VALUES EVERY 10 MILLISECOND. *
0044*        2. SCHEDULE PROGRAMS AT THE REQUESTED TIME AND COMPUTE ITS*
0045*              NEXT START TIME.                                    *
0046*        3. ADD PROGRAMS TO THE TIME LIST.                         *
0047*        4. REMOVE PROGRAMS FROM THE TIME LIST.                    *
0048*        5. OUTPUT CURRENT SYSTEM TIME TO USER ARRAY.              *
0049*        6. SET ID SEGMENT VALUES AS REQUESTED BY USER.            *
0050********************************************************************
0051*                                                                  *
0052*        THE $CLCK ROUTINE FUNCTIONS AS FOLLOWS:                   *
0053*              THE ROUTINE IS ENTERED EVERY 10 MILLISECOND DUE     *
0054*                  TO TIME BASE GENERATOR INTERRUPTS.              *
0055*              THE TIME VALUE IS INCREMENTED BY 10 MILLISECONDS.   *
0056*              THE TIME VALUES OF EACH PROGRAM IN TIME LIST IS     *
0057*                   COMPARED TO THE CURRENT TIME. IF THE TIMES     *
0058*                   COMPARE AND THE PROGRAM IS DORMANT, A SCHEDULE *
0059*                   REQUEST IS MADE VIA LIST PROCESSOR. REGARDLESS *
0060*                   OF PROGRAM STATUS, THE NEXT START TIME IS      *
0061*                   COMPUTED UNLESS THE MULTIPLE VALUE IS ZERO-    *
0062*                   WHICH MEANS THAT THE PROGRAM IS TO BE REMOVED  *
0063*                   FROM TIME LIST.                                *
0064*              THE TIME-OUT CLOCKS FOR ALL ACTIVE DEVICES ARE 
0065*                   UPDATED.  IF ANY DEVICE HAS TIMED-OUT,
0066*                   RTIOC IS ENTERED TO PROCESS THE CONDITION.
0067*                                                                  *
0068* 
0069  00000 036142R $CLCK ISZ TMS      INCR 10 MSEC COUNT 
0070  00001 026021R       JMP CL010     GO TO PROCESS LISTS 
0071  00002 062150R       LDA TTAB+1   RESET 10 MSEC
0072  00003 072142R       STA TMS 
0073  00004 036143R       ISZ SECS      INCREMENT SECONDS COUNTER 
0074  00005 026021R       JMP CL010     GO TO PROCESS LISTS 
0075  00006 062151R       LDA TTAB+2   RESET SEC COUNT
0076  00007 072143R       STA SECS
0077  00010 036144R       ISZ MINS      INCREMENT MINUTES COUNTER 
0078  00011 026021R       JMP CL010     GO TO PROCESS LISTS 
0079  00012 062151R       LDA TTAB+2   RESET MIN COUNT
0080  00013 072144R       STA MINS
0081  00014 036145R       ISZ HRS       INCREMENT HOURS COUNTER 
0082  00015 026021R       JMP CL010    GO TO PROCESS LISTS
0083  00016 062153R       LDA TTAB+4   RESET HR COUNT 
0084  00017 072145R       STA HRS 
0085  00020 036146R       ISZ DAYS      INCREMENT DAYS COUNTER
0086* 
0087*     CHECK IF TIME TO SCHEDULE PROGRAM 
0088  00021 066141R CL010 LDB TLIST    TIME LIST
0089  00022 006003        SZB,RSS       IF THRU PROCESSING IT, GO 
0090  00023 026154R       JMP IOTOP      PROCESS DEVICE TIME-OUT CLOCKS-
0091  00024 076377R       STB POINT     SAVE TIME LINK
0092  00025 006004        INB 
0093  00026 006004        INB           B NOW PTS TO 10 S OF MILLISECOND
0094  00027 160001        LDA B,I 
0095  00030 052142R       CPA TMS 







 PAGE 0004 #01  REAL TIME CLOCK-TIME LIST PROCESSING


0096  00031 002001        RSS           TENS OF MILLISECOND COMPARE 
0097  00032 026051R       JMP CH010     DO NOT COMPARE, SO CHECK NEXT PR
0098  00033 006004        INB 
0099  00034 160001        LDA B,I 
0100  00035 052143R       CPA SECS
0101  00036 002001        RSS           SECONDS COMPARE 
0102  00037 026051R       JMP CH010     DO NOT COMPARE-GO TO NEXT PROG
0103  00040 006004        INB 
0104  00041 160001        LDA B,I 
0105  00042 052144R       CPA MINS
0106  00043 002001        RSS           MINUTES COMPARE 
0107  00044 026051R       JMP CH010    DO NOT COMPARE-GO TO NEXT PROG 
0108  00045 006004        INB 
0109  00046 160001        LDA B,I 
0110  00047 052145R       CPA HRS 
0111  00050 026053R       JMP CH020     HOURS COMPARE-SO TIME COMPARES
0112* 
0113*     INCREMENT TO NEXT PROGRAM IN LIST 
0114  00051 166377R CH010 LDB POINT,I  GET ADDR OF NEXT PROG IN LIST
0115  00052 026022R       JMP CL010+1  GO TO COMPARE NEXT PROG IN LIST
0116* 
0117*     PROGRAM TO BE SCHEDULED 
0118  00053 062377R CH020 LDA POINT     COMPUTE ID SEGMENT ADDRESS
0119  00054 043553R       ADA DM16
0120  00055 072065R       STA CH025 
0121  00056 043564R       ADA D15 
0122  00057 160000        LDA A,I 
0123  00060 013564R       AND D15      CHECK STATUS 
0124  00061 002002        SZA          DORMANT SO GO SCHEDULE IT
0125  00062 026066R       JMP CH026    NOT DORMANT, GO COMPUTE NEXT TIME
0126  00063 017601R       JSB $LIST    CALL LIST PROCESSOR TO SCHED PROG
0127  00064 000101        OCT 101       THE PROGRAM 
0128  00065 000065R CH025 DEF * 
0129* 
0130*     CHECK IF NEXT SCHEDULE TIME TO BE COMPUTED
0131  00066 066377R CH026 LDB POINT 
0132  00067 006004        INB 
0133  00070 160001        LDA B,I       RES CODE/MULT FACTOR
0134  00071 012174R       AND M7777 
0135  00072 002003        SZA,RSS       IF ZERO, THEN NO NEW START TIME 
0136  00073 026136R       JMP CH040     GO REMOVE PROG FROM LIST
0137  00074 073531R       STA TEMP      SAVE MULTIPLICATION FACTOR
0138  00075 160001        LDA B,I       FORM RESOLUTION CODE
0139  00076 001723        ALF,RAR 
0140  00077 013560R       AND D7
0141  00100 073532R       STA TEMP+1    RESOLUTION CODE 
0142  00101 044000        ADB A         TIME VALUE ADDRESS
0143  00102 042147R       ADA TTAB
0144  00103 073533R       STA TEMP+2    TABLE VALUE ADDRESS 
0145  00104 063532R       LDA TEMP+1
0146  00105 043552R       ADA DM5 
0147  00106 072375R       STA TCC       LOOP COUNTER
0148  00107 002400        CLA 
0149  00110 073534R       STA TEMP+3   CLEAR INCREMENT COUNTER
0150  00111 160001        LDA B,I      ID SEGMENT TIME VALUE
0151  00112 043531R       ADA TEMP         + MULTIPLE VALUE 







 PAGE 0005 #01  REAL TIME CLOCK-TIME LIST PROCESSING


0152  00113 170001        STA B,I      STORE BACK IN ID SEGMENT 
0153  00114 160001  CH030 LDA B,I 
0154  00115 002020        SSA 
0155  00116 026123R       JMP CH035    -, SO DONE 
0156  00117 143533R       ADA TEMP+2,I ADD TABLE VALUE
0157  00120 170001        STA B,I      STORE BACK SUM IN ID SEG 
0158  00121 037534R       ISZ TEMP+3   INCREMENT COUNT
0159  00122 026114R       JMP CH030    GO TO CHECK IF O K 
0160  00123 036375R CH035 ISZ TCC 
0161  00124 002001        RSS 
0162  00125 026051R       JMP CH010    DONE WITH ALL VALUES 
0163  00126 037533R       ISZ TEMP+2   INCR TABLE ADDRESS 
0164  00127 006004        INB 
0165  00130 160001        LDA B,I 
0166  00131 043534R       ADA TEMP+3
0167  00132 170001        STA B,I 
0168  00133 002400        CLA 
0169  00134 073534R       STA TEMP+3
0170  00135 026114R       JMP CH030    GO TO PROCESS NEXT TIME
0171* 
0172*     REMOVE PROGRAM FROM TIME LIST 
0173  00136 066377R CH040 LDB POINT     VALUE OF TLINK
0174  00137 016434R       JSB $TREM    GO TO REMOVE PROGRAM 
0175  00140 026051R       JMP CH010     GO TO PROCESS NEXT PROGRAM
0176* 
0177  00141 000000  TLIST NOP          TOP OF TIME SCHEDULE LIST
0178  00142 177634  TMS   DEC -100     REAL TIME TENS OF MILLISEC 
0179  00143 177704  SECS  DEC -60      REAL TIME SECONDS
0180  00144 177704  MINS  DEC -60      REAL TIME MINUTES
0181  00145 177750  HRS   DEC -24      REAL TIME HOURS
0182  00146 000000  DAYS  NOP          REAL TIME DAYS 
0183  00147 000147R TTAB  DEF * 
0184  00150 177634        DEC -100
0185  00151 177704        DEC -60 
0186  00152 177704        DEC -60 
0187  00153 177750        DEC -24 
0188* 
0189*   PROCESS DEVICE TIME-OUT CLOCKS
0190* 
0191  00154 061651  IOTOP LDA EQT#      SET NEGATIVE OF 
0192  00155 003004        CMA,INA        NUMBER OF EQT
0193  00156 072173R       STA TEMPW      ENTRIES FOR INDEX
0194  00157 061650        LDA EQTA      POINT TO WORD 15
0195  00160 043563R       ADA D14        OF FIRST EQT ENTRY 
0196  00161 164000  IOTO2 LDB A,I       LOAD WORKING CLOCK- 
0197  00162 006003        SZB,RSS       IS IT ACTIVE? 
0198  00163 026167R       JMP IOTO3      NO 
0199  00164 134000        ISZ A,I        YES: INCREMENT IT
0200  00165 002001        RSS           IT HAS NOT TIMED-OUT
0201  00166 026016X       JMP $DEVT     GO TO TIME-OUT PROCESSOR
0202  00167 043564R IOTO3 ADA D15       ADJUST TO NEXT ENTRY
0203  00170 036173R       ISZ TEMPW     THRU? 
0204  00171 026161R       JMP IOTO2      NO: GO DO NEXT ONE 
0205  00172 026474R       JMP $XEQ       YES; NO TIME-OUTS-RETURN 

0207  00173 000000  TEMPW NOP 







 PAGE 0006 #01  REAL TIME CLOCK-TIME LIST PROCESSING


0208  00174 007777  M7777 OCT 7777






























































 PAGE 0007 #01  TIME ROUTINE TO GET CURRENT SYSTEM TIME 


0210*        THE TIME ROUTINE CONVERTS THE CURRENT REAL TIME VALUES    *
0211*              AND STORES THE VALUES INTO A USER SPECIFIED BUFFER. *
0212*                                                                  *
0213*    ROUTINE TO PROVIDE CURRENT SYSTEM TIME 
0214*         CALLING SEQUENCE
0215*              JSB TIME 
0216*              RQP2 CONTAINS BEGIN ADDRESS OF 5 WORD BUFFER 
0217*         ON RETURN,
0218*              ARRAY(1) = TENS OF MILLISECOND 
0219*              ARRAY(2) = SECONDS 
0220*              ARRAY(3) = MINUTES 
0221*              ARRAY(4) = HOURS 
0222*              ARRAY(5) = DAYS
0223* 
0224  00175 000000  TIME  NOP           ENTRY/EXIT
0225  00176 065701        LDB RQP2      ADDRESS OF ARRAY
0226  00177 062142R       LDA TMS 
0227  00200 042576R       ADA D100
0228  00201 170001        STA B,I       TENS OF MILLISECONDS
0229  00202 006004        INB 
0230  00203 062143R       LDA SECS
0231  00204 043573R       ADA D60 
0232  00205 170001        STA B,I       SECONDS 
0233  00206 006004        INB 
0234  00207 062144R       LDA MINS
0235  00210 043573R       ADA D60 
0236  00211 170001        STA B,I       MINUTES 
0237  00212 006004        INB 
0238  00213 062145R       LDA HRS 
0239  00214 043570R       ADA D24 
0240  00215 170001        STA B,I       HOURS 
0241  00216 006004        INB 
0242  00217 062146R       LDA DAYS
0243  00220 170001        STA B,I       DAYS
0244  00221 126175R       JMP TIME,I   EXIT 




























 PAGE 0008 #01  TIMER ROUTINE SETS UP ID SEGMENT TIME VALUES


0246*                                                                  *
0247*        THE TIMER ROUTINE WHICH ALLOWS USER TO ENTER TIME VALUES  *
0248*        INTO AN ID SEGMENT FUNCTIONS AS FOLLOWS:                  *
0249*              IF PROG VALUE IS ZERO, THEN CURRENT EXECUTING PROG. *
0250*                   AND IF NON-ZERO, THEN SEARCH FOR ID SEGMENT    *
0251*                   ADDRESS.                                       *
0252*              IF RESOLUTION CODE SPECIFIED IS ZERO, THEN ERROR    *
0253*                   EXIT TAKEN.                                    *
0254*              IF RESOLUTION CODE IS NON-ZERO, THEN RES/MULT WORD  *
0255*                   STORED. THE NEXT VALUE IS CHECKED FOR + OR -.  *
0256*                   IF PLUS, THEN NEXT START TIME VALUES GIVEN AND *
0257*                   ARE STORED AND PROGRAM ENTERED INTO TIME LIST. *
0258*                   IF MINUS, THEN THE COMPLEMENT OF VALUE IS ADDED*
0259*                   TO THE CURRENT TIME AND ENTERED INTO THE ID    *
0260*                   SEGMENT. IF PROG VALUE IS ZERO, THIS IS TO BE A*
0261*                   TIME DELAY OF CURRENT PROGRAM AND THUS PROGRAM *
0262*                   IS SET DORMANT VIA LINK PROCESSOR BUT POINT OF *
0263*                   SUSPENSION IS NOT CLEARED. IF PROG VALUE IS NON*
0264*                   ZERO, THEN PROGRAM IS ENTERED INTO TIME LIST.  *
0265*                   THIS IS METHOD FOR SPECIFYING AN INITIAL OFFSET*
0266*                   TIME.                                          *
0267* 
0268*     ROUTINE TO SET ID SEGMENT TIME VALUES 
0269*         CALLING SEQUENCE
0270*              JSB EXEC 
0271*              DEF *+6  OR DEF *+9
0272*              DEF  REQUEST CODE ADDRESS                   RQP1 
0273*              DEF  PROG                                   RQP2 
0274*              DEF  RES                                    RQP3 
0275*              DEF  MULT                                   RQP4 
0276*              DEF  OFFSET OR DEF HRS                      RQP5 
0277*                             DEF MINS                     RQP6 
0278*                             DEF SECS                     RQP7 
0279*                             DEF TENS OF MSEC             RQP8 
0280*         WHERE 
0281*              PROG = 0 IF CURRENTLY EXECUTING
0282*                   = ADDRESS OF PROGRAM NAME 
0283*              RES  = 1 FOR 10 MILLISECOND RESOLUTION 
0284*                   = 2 FOR SECONDS RESOLUTION LIST 
0285*                   = 3 FOR MINUTES RESOLUTION LIST 
0286*                   = 4 FOR HOURS RESOLUTION LIST 
0287*              MULT = 0 FOR N0 MULTIPLE VALUE 
0288*                   = N A POSITIVE INTEGER FOR COMPUTING
0289*                        NEXT SCHEDULE TIME 
0290*             OFFSET= M A NEGATIVE INTEGER FOR COMPUTING INITIAL
0291*                        OFFSET TIME
0292*                HRS= START TIME HOURS
0293*               MINS= START TIME MINUTES
0294*               SECS= START TIME SECONDS
0295*               TENS= START TIME TENS OF MILLISECONDS 
0296* 
0297  00222 000000  TIMER NOP           ENTRY/EXIT
0298  00223 161701        LDA RQP2,I    LOAD PROG VALUE 
0299  00224 002003        SZA,RSS 
0300  00225 026236R       JMP TI010     ZERO SO CURRENT PROG
0301  00226 065701        LDB RQP2







 PAGE 0009 #01  TIMER ROUTINE SETS UP ID SEGMENT TIME VALUES


0302  00227 016352R       JSB TNAME     GO TO GET PROG ID SEGMENT ADDRES
0303  00230 002002        SZA 
0304  00231 026234R       JMP *+3 
0305  00232 066065R       LDB ER5      NO SUCH PROG ERR RETURN
0306  00233 026246R       JMP TI011 
0307  00234 064000        LDB A 
0308  00235 002001        RSS 
0309  00236 065717  TI010 LDB XEQT
0310  00237 047565R       ADB D17       RESOLUTION CODE ADDRESS 
0311  00240 076375R       STB TCC 
0312  00241 036375R       ISZ TCC 
0313  00242 161702        LDA RQP3,I   CHECK RESOLUTION CODE VALUE
0314  00243 002002        SZA          IF ZERO, THEN ILLEGAL VALUE
0315  00244 026250R       JMP *+4 
0316  00245 066400R       LDB ER6      RESOLUTION CODE ERROR
0317  00246 002004  TI011 INA 
0318  00247 126222R       JMP TIMER,I  TIMER ERROR RETURN 
0319  00250 043552R       ADA DM5      IF RES GREATER THAN 4, 
0320  00251 002021        SSA,RSS           THEN ILLEGAL VALUE
0321  00252 026245R       JMP TI011-1       ERROR RETURN
0322  00253 160001        LDA B,I       SAVE BIT 12 SINCE PROGRAM MAY 
0323  00254 012472R       AND MWAIT          ALREADY BE IN THE TIME LIST
0324  00255 170001        STA B,I 
0325  00256 161702        LDA RQP3,I
0326  00257 001727        ALF,ALF 
0327  00260 001722        ALF,RAL 
0328  00261 121703        XOR RQP4,I    RES CODE/MULT FACTOR
0329  00262 130001        IOR B,I 
0330  00263 170001        STA B,I 
0331  00264 006004        INB           INCR TO TEN MSEC ADDR 
0332  00265 161704        LDA RQP5,I    NEGATIVE IF OFFSET
0333  00266 002021        SSA,RSS       POSITIVE IF START TIME
0334  00267 026364R       JMP TI100 
0335  00270 161701        LDA RQP2,I   CHECK IF CURRENT XEQ PROGRAM 
0336  00271 002002        SZA 
0337  00272 026307R       JMP TI012    NO 
0338  00273 061717        LDA XEQT     SETUP TO CALL LINK PROCESSOR 
0339  00274 073526R       STA WORK     TO REMOVE PROG FROM SCHEDULE 
0340  00275 073527R       STA WLINK    LIST AND ENTER INTO DORMANT
0341  00276 043557R       ADA D6       LIST WITHOUT CLEARING PT OF
0342  00277 073530R       STA WPRIO    SUSPENSION, ETC
0343  00300 016066R       JSB LINK     CALL LINK PROCESSOR
0344  00301 000001        OCT 1        REMOVE PROG FROM SCHED LIST
0345  00302 000000        OCT 0        ADD PROG TO DORMANT LIST 
0346  00303 065717        LDB XEQT      SET PROGRAM STATUS DORMANT
0347  00304 047564R       ADB D15 
0348  00305 002400        CLA 
0349  00306 170001        STA B,I 
0350  00307 062374R TI012 LDA AADD
0351  00310 002004        INA 
0352  00311 071701        STA RQP2
0353  00312 016175R       JSB TIME     GET CURRENT SYSTEM REAL TIME 
0354  00313 066374R       LDB AADD
0355  00314 145702        ADB RQP3,I    COMPUTE OFFSET MULTIPLE ADDRESS 
0356  00315 161704        LDA RQP5,I    OFFSET VALUE
0357  00316 003004        CMA,INA 







 PAGE 0010 #01  TIMER ROUTINE SETS UP ID SEGMENT TIME VALUES


0358  00317 140001        ADA B,I 
0359  00320 170001        STA B,I 
0360  00321 066375R TI015 LDB TCC       TIME ADDRESS OF ID SEGMENT
0361  00322 063531R       LDA TEMP      10 S OF MILLISEC
0362  00323 042150R TI020 ADA TTAB+1
0363  00324 002020        SSA 
0364  00325 026330R       JMP *+3 
0365  00326 037532R       ISZ TEMP+1    INCR SECONDS
0366  00327 026323R       JMP TI020 
0367  00330 170001        STA B,I       STORE 10 S MSEC IN ID SEGMENT 
0368  00331 006004        INB 
0369  00332 063532R       LDA TEMP+1    SECONDS 
0370  00333 042151R TI030 ADA TTAB+2
0371  00334 002020        SSA 
0372  00335 026340R       JMP *+3 
0373  00336 037533R       ISZ TEMP+2    INCR MINUTES
0374  00337 026333R       JMP TI030 
0375  00340 170001        STA B,I       STORE SECONDS 
0376  00341 006004        INB 
0377  00342 063533R       LDA TEMP+2
0378  00343 042151R TI040 ADA TTAB+2
0379  00344 002020        SSA 
0380  00345 026350R       JMP *+3 
0381  00346 037534R       ISZ TEMP+3    INCR HOURS
0382  00347 026343R       JMP TI040 
0383  00350 170001        STA B,I       STORE MINUTES 
0384  00351 006004        INB 
0385  00352 063534R       LDA TEMP+3
0386  00353 042153R TI050 ADA TTAB+4
0387  00354 002021        SSA,RSS 
0388  00355 026353R       JMP TI050 
0389  00356 170001        STA B,I       STORE HOURS 
0390  00357 066375R       LDB TCC 
0391  00360 047547R       ADB DM2 
0392  00361 016401R       JSB $TADD    ENTER PROG INTO TIME LIST
0393  00362 002400        CLA 
0394  00363 126222R       JMP TIMER,I  NORMAL RETURN
0395*     GIVEN START TIME
0396  00364 073534R TI100 STA TEMP+3   HOURS
0397  00365 161705        LDA RQP6,I    MINUTES 
0398  00366 073533R       STA TEMP+2
0399  00367 161706        LDA RQP7,I    SECONDS 
0400  00370 073532R       STA TEMP+1
0401  00371 161707        LDA RQP8,I    TENS OF MSEC
0402  00372 073531R       STA TEMP
0403  00373 026321R       JMP TI015    GO TO STORE VALUES IN ID SEGMENT 
0404  00374 001530R AADD  DEF TEMP-1
0405  00375 000000  TCC   NOP 
0406  00376 000000  TLINC NOP 
0407  00377 000000  POINT NOP 
0408  00400 030066  ER6   ASC 1,06     NO OR ILLEGAL RES CODE VALUE ERRO












 PAGE 0011 #01  ADDITION OF PROGRAM TO TIME RESOLUTION CODE LIST


0410* 
0411*        THE $TADD ROUTINE FUNCTIONS AS FOLLOWS:                   *
0412*              IF RESOLUTION CODE IS ZERO, THEN EXIT               *
0413*              IF NON-ZERO RESOLUTION, AND PROGRAM NOT IN TIME LIST*
0414*                   (BIT 12 OF RES/T/MULT 0), THEN SET BIT 12 OF   *
0415*                   MULT WORD TO SIGNIFY THAT IT IS IN TIME LIST.  *
0416*                   IF TIME LIST IS NULL, THEN SET IT TO POINT TO  *
0417*                   PROGRAM TIME LINK AND SET TLINK TO ZERO.       *
0418*                   IF PROGRAM NOT IN LIST, THEN IT IS ADDED TO    *
0419*                        TOP OF TIME LIST AND ITS TLINK VALUE MADE *
0420*                        TO POINT TO THE PREVIOUS TOP OF LIST      *
0421*                        PROGRAM.                                  *
0422*                                                                  *
0423* 
0424*     ADDING A PROGRAM TO A TIME RESOLUTION CODE LIST 
0425*         CALLING SEQUENCE
0426*              LDB  ADDRESS OF ID SEGMENT TLINK VALUE 
0427*              JSB $TADD
0428* 
0429  00401 000000  $TADD NOP 
0430  00402 076376R       STB TLINC     SAVE TLINK ADDRESS
0431  00403 006004        INB           INCR TO RES CODE/MULT FACTOR ADD
0432  00404 160001        LDA B,I 
0433  00405 001723        ALF,RAR 
0434  00406 013560R       AND D7
0435  00407 002003        SZA,RSS 
0436  00410 126401R       JMP $TADD,I  EXIT 
0437  00411 160001        LDA B,I      CHECK IF PROGRAM ALREADY IN
0438  00412 012472R       AND MWAIT          TIME LIST
0439  00413 002002        SZA 
0440  00414 126401R       JMP $TADD,I  YES, SO EXIT 
0441  00415 160001        LDA B,I 
0442  00416 032472R       IOR MWAIT    SET T BIT
0443  00417 170001        STA B,I 
0444  00420 066141R       LDB TLIST     LOAD VALUE OF TOP OF LIST 
0445  00421 006002        SZB           ZERO IF NULL LIST 
0446  00422 026430R       JMP T0010     NON ZERO IF PROGRAM IN LIST 
0447  00423 066376R       LDB TLINC 
0448  00424 076141R       STB TLIST     STORE TLINK INTO TOP OF LIST
0449  00425 002400        CLA 
0450  00426 172376R       STA TLINC,I   CLEAR ID SEG TLINK FOR END OF LI
0451  00427 126401R       JMP $TADD,I  EXIT 
0452  00430 062376R T0010 LDA TLINC    SET LINK OF NEW PROG TO PREVIOUS 
0453  00431 174000        STB A,I           OF TIME LIST
0454  00432 072141R       STA TLIST    SET TOP OF TIME LIST TO NEW PROG 
0455  00433 126401R       JMP $TADD,I  RETURN 

















 PAGE 0012 #01  REMOVE A PROGRAM FROM TIME LIST 


0457*                                                                  *
0458*        THE $TREM ROUTINE FUNCTIONS AS FOLLOWS:                   *
0459*              IF PROGRAM NOT IN TIME LIST, THEN EXIT              *
0460*              IF PROGRAM IN TIME LIST, THEN CLEAR BIT 12 OF       *
0461*                   RES/T/MULT TO INDICATE NOT IN TIME LIST.       *
0462*                   A SEARCH IS MADE OF THE TIME LIST PROGRAMS     *
0463*                        UNTIL PROGRAM FOUND OR END OF LIST. THE   *
0464*                        TLINK VALUES ARE CHANGED AS NECESSARY.    *
0465*                                                                  *
0466* 
0467*         CALLING SEQUENCE
0468*              LDB  TLINK ADDRESS OF ID SEGMENT 
0469*              JSB $TREM
0470* 
0471  00434 000000  $TREM NOP          ENTRY/EXIT 
0472  00435 002400        CLA 
0473  00436 072375R       STA TCC       CLEAR PREVIOUS LINK POINTER 
0474  00437 076376R       STB TLINC     COMPUTE LIST ADDRESS
0475  00440 006004        INB 
0476  00441 160001        LDA B,I      CHECK IF PROGRAM IS IN TIME LIST 
0477  00442 012472R       AND MWAIT 
0478  00443 002003        SZA,RSS 
0479  00444 126434R       JMP $TREM,I  NO, SO EXIT
0480  00445 160001        LDA B,I      CLEAR T BIT
0481  00446 012473R       AND CWAIT 
0482  00447 170001        STA B,I 
0483  00450 066141R       LDB TLIST     TOP OF LIST ADDRESS 
0484  00451 002001        RSS 
0485  00452 164001  TR010 LDB B,I       LIST VALUE
0486  00453 056376R       CPB TLINC     COMPARED AGAINST REMOVAL VALUE
0487  00454 026461R       JMP TR020     THE ADDRESSES COMPARE-SO REMOVE 
0488  00455 006003        SZB,RSS 
0489  00456 126434R       JMP $TREM,I  EXIT 
0490  00457 076375R       STB TCC       DO NOT COMPARE-SO SAVE ADDRESS
0491  00460 026452R       JMP TR010     GO TEST IT
0492  00461 062375R TR020 LDA TCC 
0493  00462 002002        SZA 
0494  00463 026467R       JMP TR030     NOT TOP OF LIST 
0495  00464 164001        LDB B,I 
0496  00465 076141R       STB TLIST 
0497  00466 126434R       JMP $TREM,I  EXIT 
0498  00467 166376R TR030 LDB TLINC,I   SET TLINK VALUE TO BYPASS REMOVE
0499  00470 176375R       STB TCC,I     PROGRAM 
0500  00471 126434R       JMP $TREM,I  EXIT 

0502  00472 010000  MWAIT OCT 10000 
0503  00473 167777  CWAIT OCT 167777
















 PAGE 0013 #01  REAL TIME SCHEDULER---EXECUTION SECTION---


0505* 
0506*        THE $XEQ SECTION OF THE HP-2100 REAL TIME EXECUTIVE       *
0507*    PERFORMS THE FOLLOWING FUNCTIONS:                             *
0508*        1. IDLE LOOP WHEN NO PROGRAMS ARE SCHEDULED OR CANNOT BE  *
0509*           EXECUTED.                                              *
0510*        2. SWITCHES PROGRAM EXECUTION SUCH THAT THE HIGHEST       *
0511*           PRIORITY EXECUTABLE PROGRAM EXECUTES.                  *
0512*        3. SETS THE FENCE REGISTER ACCORDING TO PROGRAM TYPE.     *
0513*        4. LOADS AND EXECUTES BACKGROUND DISC RESIDENT PROGRAMS.  *
0514*        5. LOADS, SWAPS, AND EXECUTES REAL TIME DISC RESIDENT     *
0515*           PROGRAMS                                               *
0516* 
0517*     CALLING SEQUENCE
0518*     JMP $XEQ
0519* 
0520  00474 063523R $XEQ  LDA ZZZZZ     CHECK IF PROGRAM TO BE ABORTED
0521  00475 006400        CLB 
0522  00476 077523R       STB ZZZZZ          RESET ABORT FLAG 
0523  00477 002002        SZA 
0524  00500 016010X       JSB $ABRT     CALL ABORT ROUTINE
0525  00501 061711  X0005 LDA SKEDD     LOAD TOP OF SCHEDULE LIST 
0526  00502 002002        SZA          IF ZERO, THEN NO PROG SCHED
0527  00503 026536R       JMP X0010    GO TO PROCESS SCHED LIST 
0528* 
0529*     NO PROGRAM SCHEDULED--SETUP FOR IDLE LOOP 
0530*                                                                  *
0531*        THE IDLE LOOP SECTION CONSISTS OF:                        *
0532*              CLEARING XEQT WORD TO SIGNIFY THAT NO PROGRAM       *
0533*                   CURRENTLY EXECUTING.                           *
0534*              STORE ADDRESS OF 4 DUMMY WORDS INTO XSUSP-XSUSP+3   *
0535*                   DUE TO I/O PROCESSING.                         *
0536*              SET MEMORY PROTECT REGISTER TO ZERO.                *
0537*              CALL INTERRUPT RESTORE ROUTINE, $IRT 
0538*              SET A AND B REGISTERS TO ALL ONES.                  *
0539*              TURN INTERRUPT SYSTEM BACK ON                       *
0540*              JUMP TO *                                           *
0541*                                                                  *
0542  00504 063551R       LDA DM4      SET XSUSP TO XSUSP+3 TO ADDRESS
0543  00505 073540R       STA TMP           OF FOUR DUMMY WORDS 
0544  00506 066530R       LDB DSUSP    ADDRESS OF XSUSP 
0545  00507 062531R       LDA VSUSP    ADDRESS OF IDLE DUMMY WORDS
0546  00510 170001        STA B,I 
0547  00511 002004        INA 
0548  00512 006004        INB 
0549  00513 037540R       ISZ TMP 
0550  00514 026510R       JMP *-4 
0551  00515 002400        CLA 
0552  00516 071717        STA XEQT     CLEAR XEQT ADDRESS VALUE 
0553  00517 071775        STA FENCE     SAVE FENCE REGISTER 
0554  00520 102605        OTA 5B       SET MEM PROTECT REG TO 0 
0555  00521 016015X       JSB $IRT      -RESET INTERRUPT CONDITIONS 
0556  00522 003400        CCA          SET A REGISTER TO ALL ONES 
0557  00523 007400        CCB          SET B REGISTER TO ALL ONES 
0558  00524 102100        STF 0         TURN ON INTERRUPTS
0559  00525 102705        STC 5         TURN ON MEMORY PROTECT
0560  00526 026526R       JMP *        IDLE LOOP







 PAGE 0014 #01  REAL TIME SCHEDULER---EXECUTION SECTION---


0561  00527 001717  XQDEF DEF XEQT     XEQT TABLE ADDRESS 
0562  00530 001730  DSUSP DEF XSUSP    ADDRESS OF XEQT SUSPEND VALUE
0563  00531 000532R VSUSP DEF *+1      ADDRESS OF IDLE DUMMY WORDS
0564  00532 000000        BSS 4        DUMMY XEQT IDLE WORDS
0565* 
0566*        THE SWITCHING SECTION USES THE SCHEDULE LIST TO DETERMINE *
0567*        WHICH PROGRAM TO EXECUTE-STARTING FROM TOP OF LIST.       *
0568*              IF PROGRAM FROM LIST OF LOWER PRIORITY, THEN        *
0569*                   EXECUTION OF CURRENT PROGRAM CONINUES.         *
0570*              IF PROGRAM FROM LIST OF HIGHER PRIORITY AND         *
0571*                   TYPE EITHER REAL TIME RESIDENT OR BACKGROUND   *
0572*                        RESIDENT, EXECUTION SWITCHING TAKES PLACE.*
0573*                   TYPE IS BACKGROUND DISC RESIDENT,              *
0574*                        GO TO BACKGROUND DISC PROCESSING.         *
0575*                   TYPE IS REAL TIME DISC RESIDENT, GO TO REAL    *
0576*                        TIME DISC RESIDENT PROCESSING             *
0577* 
0578  00536 073517R X0010 STA ZWORK    SCHED LIST PROG ID SEG ADDRESS 
0579  00537 073520R       STA ZLINK    LINKAGE ADDRESS
0580  00540 043557R       ADA D6
0581  00541 073521R       STA ZPRIO     PRIORITY ADDRESS
0582  00542 043561R       ADA D8
0583  00543 073522R       STA ZTYPE    TYPE ADDRESS 
0584*     CHECK FOR WAIT BIT SET
0585  00544 067517R       LDB ZWORK    ID SEGMENT ADDRESS 
0586  00545 047564R       ADB D15      LOCATE STATUS WORD 
0587  00546 160001        LDA B,I 
0588  00547 012472R       AND MWAIT     ISOLATE WAIT BIT
0589  00550 002003        SZA,RSS      CHECK IF WAIT BIT SET
0590  00551 026561R       JMP X0015    NO 
0591  00552 067517R       LDB ZWORK    YES, SO CHECK IF CALLED
0592  00553 006004        INB               PROGRAM DORMANT 
0593  00554 160001        LDA B,I 
0594  00555 043564R       ADA D15       CALLED PROGRAM STATUS 
0595  00556 160000        LDA A,I 
0596  00557 002002        SZA          SKIP IF DORMANT
0597  00560 026675R       JMP X0035    NO, SO TRY NEXT PROGRAM
0598  00561 061717  X0015 LDA XEQT     SEE IF PROGRAM CURRENTLY EXECUTIN
0599  00562 002003        SZA,RSS       YES 
0600  00563 026663R       JMP X0030     NO, SO GO XECUTE IT 
0601  00564 043564R       ADA D15      CHECK STATUS OF XEQT ID SEGMENT
0602  00565 160000        LDA A,I 
0603  00566 053574R       CPA M1
0604  00567 002001        RSS          SCHEDULED-SO GO TO CHECK PRIORITY
0605  00570 026663R       JMP X0030    NOT SCHEDULED -SO GO SWITCH
0606  00571 161726        LDA XPRIO,I   LOAD CURRENT XECUTING PROGRAM PR
0607  00572 003004        CMA,INA       MAKE NEGATIVE 
0608  00573 143521R       ADA ZPRIO,I   SCHEDULED PROGRAM PRIORITY
0609  00574 002003        SZA,RSS       IF SAME PRIORITY, THEN CONTINUE 
0610  00575 026600R       JMP X0020     WITH CURRENT PROGRAM
0611  00576 002020        SSA           IF SIGN A=O THEN PROG OF LOWER P
0612  00577 026663R       JMP X0030     PROGRAM OF HIGHER PRIORITY
0613  00600 163522R X0020 LDA ZTYPE,I  CHECK IF TYPE IS RT DISK RESIDENT
0614  00601 013564R       AND D15 
0615  00602 053554R       CPA D2
0616  00603 026761R       JMP X0200    YES, SO GO TO RT DISK RESIDENT PR







 PAGE 0015 #01  REAL TIME SCHEDULER---EXECUTION SECTION---


0617  00604 161730        LDA XSUSP,I  NO, SO CONTINUE FROM PT OF SUSPEN
0618  00605 073531R X0025 STA TEMP     RETURN ADDRESS STORED
0619*     CHECK IF SCHEDULED WAIT 
0620  00606 065717        LDB XEQT     CHECK IF CURRENT PROGRAM 
0621  00607 047564R       ADB D15      WAIT BIT SET 
0622  00610 160001        LDA B,I 
0623  00611 012472R       AND MWAIT 
0624  00612 002003        SZA,RSS      YES, SO CHECK IF PROG DORMANT
0625  00613 026624R       JMP X0026    NO, SO GO EXECUTE IT 
0626  00614 161721        LDA XTEMP,I  CHECK IF WAIT PROGRAM DORMANT
0627  00615 043564R       ADA D15 
0628  00616 160000        LDA A,I 
0629  00617 002002        SZA 
0630  00620 026675R       JMP X0035    NOT DORMANT-SO TRY NEXT PROG 
0631  00621 160001        LDA B,I 
0632  00622 012473R       AND CWAIT 
0633  00623 170001        STA B,I      CLEAR WAIT BIT 
0634* 
0635*      CHECK IF PT OF SUSPENSION IN LIBRARY AREA
0636  00624 161730  X0026 LDA XSUSP,I  CHECK PT OF SUSPENSION VALUE 
0637  00625 002003        SZA,RSS 
0638  00626 026635R       JMP X0027    PROGRAM NOT SUSPENDED
0639  00627 003004        CMA,INA      CHECK IF IN LIBRARY AREA 
0640  00630 041746        ADA FREG2 
0641  00631 002020        SSA 
0642  00632 026635R       JMP *+3 
0643  00633 061745        LDA FREG1    SET FENCE REGISTER TO LIBRARY
0644  00634 026647R       JMP X0028+1 
0645* 
0646*     SET MEMORY PROTECT ACCORDING TO PROG TYPE 
0647  00635 061717  X0027 LDA XEQT     COMPUTE PROGRAM TYPE ADDRESS 
0648  00636 043563R       ADA D14 
0649  00637 160000        LDA A,I 
0650  00640 013564R       AND D15 
0651  00641 043550R       ADA DM3 
0652  00642 002021        SSA,RSS      - SO RT RES OR RT DISC RES PROG
0653  00643 026646R       JMP X0028    + SO BACK RES OR BACK DISC RES PR
0654  00644 061746        LDA FREG2     SET FENCE TO REAL TIME RESIDENT 
0655  00645 002001        RSS 
0656  00646 061752  X0028 LDA FREG3     SET FENCE TO BACKGROUND RESIDENT
0657  00647 071775        STA FENCE 
0658  00650 102605        OTA 5B
0659* 
0660*     RESTORE REGISTERS, MEMORY PROTECT, AND TURN ON INTERRUPT SYSTE
0661  00651 016015X       JSB $IRT      -RESET INTERRUPT CONDITIONS 
0662  00652 161733        LDA XEO,I      RESTORE
0663  00653 103101        CLO           E,
0664  00654 000036        SLA,ELA       OVERFLOW
0665  00655 102101        STF 1 
0666  00656 161731        LDA XA,I      A AND 
0667  00657 165732        LDB XB,I      B REGISTERS 
0668  00660 102100        STF 0         TURN ON INTERRUPTS
0669  00661 102705        STC 5B        TURN ON MEMORY PROTECT
0670  00662 127531R       JMP TEMP,I   GO TO EXECUTE PROGRAM
0671* 
0672*     CHECK PROGRAM TYPE







 PAGE 0016 #01  REAL TIME SCHEDULER---EXECUTION SECTION---


0673  00663 163522R X0030 LDA ZTYPE,I  PROGRAM TYPE 
0674  00664 013564R       AND D15 
0675  00665 053574R       CPA M1        CHECK IF REAL TIME RESIDENT 
0676  00666 026702R       JMP X0040     YES 
0677  00667 053554R       CPA D2        CHECK IF REAL TIME DISK RESIDENT
0678  00670 026761R       JMP X0200     YES 
0679  00671 053555R       CPA D4        CHECK IF BACKGROUND RESIDENT
0680  00672 026702R       JMP X0040     YES 
0681  00673 053575R       CPA M3        CHECK IF BACKGROUND DISK RESIDEN
0682  00674 026722R       JMP X0100     YES 
0683* 
0684*     CHECK NEXT PROGRAM IN LIST
0685  00675 163520R X0035 LDA ZLINK,I   GET NEXT ID SEGMENT ADDRESS 
0686  00676 002002        SZA 
0687  00677 026536R       JMP X0010     GO TO FETCH NEXT SCHED ID SEGMEN
0688  00700 026504R       JMP X0005+3 
0689* 
0690  00701 177764  DM12  DEC -12 
0691* 
0692*     LOAD PROGRAM ID SEGMENT ADDRESSES INTO XEQT AREA
0693  00702 062701R X0040 LDA DM12      LOAD PROGRAM TO BE EXECUTED 
0694  00703 073540R       STA TMP       INTO XEQT AREA
0695  00704 062527R       LDA XQDEF 
0696  00705 067517R       LDB ZWORK 
0697  00706 174000        STB 0,I 
0698  00707 002004        INA 
0699  00710 174000        STB 0,I 
0700  00711 002004        INA 
0701  00712 006004        INB 
0702  00713 037540R       ISZ TMP 
0703  00714 026710R       JMP *-4 
0704  00715 161730        LDA XSUSP,I  CHECK IF PROGRAM SUSPENDED 
0705  00716 002002        SZA          NO, SO START AT PRIMARY ENTRY
0706  00717 026605R       JMP X0025    GO TO SET FENCE,REGISTERS,AND XEQ
0707  00720 161727        LDA XPENT,I   SET TO PRIMARY START ADDRESS
0708  00721 026605R       JMP X0025    GO TO SET FENCE,REGISTERS AND XEQ



























 PAGE 0017 #01  XEQ PROCESSOR--BACKGROUND DISK PROGRAM LOADING


0710* 
0711*     BACKGROUND DISK RESIDENT PROGRAM SCHEDULED
0712*                                                                  *
0713*        THE BACKGROUND DISC RESIDENT LOADER FUNCTIONS AS FOLLOWS: *
0714*              IF ANOTHER PROGRAM IS RESIDENT THEN NO OTHER        *
0715*                   PROGRAM CAN BE LOADED, SO RETURN TO SWITCHING  *
0716*                   SECTION OF $XEQ.                               *
0717*              IF NO PROGRAM IS RESIDENT OR BEING READ IN, THEN THE*
0718*                   CALLING SEQUENCE PARAMETERS ARE GENERATED FROM *
0719*                   THE ID SEGMENT, THE READ IN WAIT FLAG IS SET,  *
0720*                   AND THE CALL TO READ IN PROGRAM IS MADE,       *
0721*                   AND THE PROGRAM IS I/O SUSPENDED.              *
0722*              IF THE DESIRED PROGRAM IS RESIDENT, RETURN TO $XEQ  *
0723*                   FOR TRANSFERING CONTROL TO PROGRAM.            *
0724* 
0725  00722 063512R X0100 LDA BKRES     CHECK IF BACKGROUND PROGRAM RES 
0726  00723 002002        SZA          NO, SO GO TO READ IT IN
0727  00724 026731R       JMP X0110     YES, SO CHECK IF READ COMPLETE
0728  00725 063517R       LDA ZWORK     SET BACKGOUND PROGRAM RESIDENT
0729  00726 073512R       STA BKRES    TO ID SEGMENT ADDRESS
0730  00727 017437R       JSB BREED    GO TO READ IN PROGRAM
0731  00730 026675R       JMP X0035    GO TO NEXT PROGRAM 
0732  00731 063513R X0110 LDA BKRES+1   CHECK READ IN WAIT FLAG 
0733  00732 002003        SZA,RSS      SKIP IF READ IN COMPLETE 
0734  00733 026675R       JMP X0035    RETURN TO XEQ SWITCHER 
0735  00734 063517R       LDA ZWORK     SEE IF DESIRED PROGRAM
0736  00735 053512R       CPA BKRES 
0737  00736 026702R       JMP X0040     DESIRED PROG, SO GO TO SWITCH 
0738  00737 026675R       JMP X0035     NOT DESIRED PROG SO RETURN
0739* 
0740*     BACKGROUND READ IN COMPLETION PROCESSOR 
0741*                                                                  *
0742*        THE BACKGROUND DISC RESIDENT READ COMPLETION PROCESSOR,   *
0743*              IF NO READ ERROR, IT CLEARS THE READ IN WAIT FLAG,  *
0744*                   ENTERS PROGRAM INTO SCHEDULE LIST VIA LIST     *
0745*                   SUCH THAT EXECUTION CAN BEGIN AT THE NEXT      *
0746*                   OPPORTUNITY THE PROGRAM BECOME THE TOP OF LIST.*
0747*             IF READ ERRORS OCCURRED, CALL $ABRT PROCESSOR        .
0748* 
0749  00740 077524R X0120 STB XXTMP     SAVE READ IN STATUS OF DISC 
0750  00741 063512R       LDA BKRES    SCHED BACKGROUND DISC
0751  00742 072745R       STA *+3      RESIDENT PROGRAM 
0752  00743 017601R       JSB $LIST    CALL $LIST 
0753  00744 000101        OCT 101 
0754  00745 000745R       DEF * 
0755  00746 002002        SZA 
0756  00747 026755R       JMP X0130    ERROR FROM $LIST 
0757  00750 067524R       LDB XXTMP     CHECK READ IN STATUS FLAG 
0758  00751 006020        SSB 
0759  00752 026755R       JMP X0130          ERROR FROM DISC READ 
0760  00753 037513R       ISZ BKRES+1  CLEAR READ IN WAIT FLAG
0761  00754 026474R       JMP $XEQ
0762  00755 063512R X0130 LDA BKRES    A CONTAINS BACK DISC ID SEG ADDR 
0763  00756 016010X       JSB $ABRT    GO TO ABORT ROUTINE
0764  00757 026474R       JMP $XEQ     RETURN TO $XEQ 








 PAGE 0018 #01  XEQ PROCESSOR--BACKGROUND DISK PROGRAM LOADING


0766  00760 001777  M1777 OCT 1777






























































 PAGE 0019 #01  XEQ PROCESSOR--RT DISK RESIDENT LOAD TESTS


0768* 
0769*         REAL TIME DISC RESIDENT 
0770* 
0771*       REAL TIME DISC RESIDENT PROGRAM EXECUTION                  *
0772*              IF A PROGRAM IS RESIDENT AND                        *
0773*                   IT IS THE DESIRED PROGRAM, GO TO SWITCHING     *
0774*                        SECTION TO EXECUTE THE PROGRAM.           *
0775*                   IT IS NOT THE DESIRED PROGRAM,                 *
0776*                        IF NO SWAP OPTION, THEN CANNOT EXECUTE.   *
0777*                             RETURN TO CHECK NEXT PROGRAM         *
0778*                        IF SWAP OPTION SET AND SCHEDULED PROGRAM  *
0779*                             OF HIGHER PRIORITY THAN CURRENTLY    *
0780*                             RESIDENT, THEN CHECK IF IN AN I/O    *
0781*                             SUSPENSION.                          *
0782*                                  IF I/O SUSPENSION, CANNOT SWAP  *
0783*                                       (UNLESS I/O BUFFER IS IN   *
0784*                                       RT COMMON AREA)            *
0785*                                  IF NOT, THEN SWAP OUT RESIDENT  *
0786*                                       PROGRAM AND READ IN DESIRED*
0787*                                       PROGRAM FROM DISC.         *
0788*              IF PROGRAM IS NOT RESIDENT OR BEING LOADED, GO TO   *
0789*                   READ IN PROGRAM FROM DISC AND SET READ IN WAIT *
0790*                   FLAG, AND I/O SUSPEND THE PROGRAM.             *
0791*                                                                  *
0792  00761 067514R X0200 LDB RDISK     CHECK IF PROGRAM RESIDENT 
0793  00762 006003        SZB,RSS      YES, SO CHECK IF READ IN COMPLETE
0794  00763 027164R       JMP X0255     NO, SO GO READ IT IN
0795  00764 063515R       LDA RDISK+1   CHECK IF DISK READ COMPLETE 
0796  00765 002003        SZA,RSS 
0797  00766 026675R       JMP X0035    NO, SO RETURN TO $XEQ SWITCHER 
0798  00767 057517R       CPB ZWORK 
0799  00770 026702R       JMP X0040     DESIRED PROGRAM SO GO SWITCH
0800  00771 061736        LDA SWAP      CHECK USER SWAP OPTION
0801  00772 002303        CCE,SZA,RSS 
0802  00773 026675R       JMP X0035     SWAP OPTION OFF, SO RETURN
0803  00774 047557R       ADB D6
0804  00775 077525R       STB BPRIO    RESIDENT PROG PRIORITY ADDRESS 
0805  00776 047562R       ADB D9
0806  00777 160001        LDA B,I 
0807  01000 013564R       AND D15 
0808  01001 053554R       CPA D2       CHECK IF I/O SUSPEND 
0809  01002 002001        RSS           YES 
0810  01003 027012R       JMP X0210     NO, GO CHECK IF SCHEDULED 
0811  01004 043514R       ADA RDISK     GET I/O REQUEST 
0812  01005 160000        LDA A,I        BUFFER ADDRESS 
0813  01006 003000        CMA           IS IT ABOVE 
0814  01007 041750        ADA RTDRA      RT COMMON AREA?
0815  01010 002120        CLE,SSA 
0816  01011 026675R       JMP X0035     YES - DO NOT SWAP 
0817  01012 053574R X0210 CPA M1        IF SCHEDULED, GO CHECK
0818  01013 002041        SEZ,RSS        RELATIVE PRIORITIES
0819  01014 027025R       JMP X201      SUSPENDED, SWAP.
0820  01015 160001        LDA B,I       CHECK IF CURRENT PROGRAM
0821  01016 001710        ALF,SLA        WAIT BIT SET-
0822  01017 027025R       JMP X201     YES-SO GO SWAP 
0823  01020 163525R       LDA BPRIO,I 







 PAGE 0020 #01  XEQ PROCESSOR--RT DISK RESIDENT LOAD TESTS


0824  01021 003004        CMA,INA       COMPARE RESIDENT PRIOR AND
0825  01022 143521R       ADA ZPRIO,I   WORKING PROGRAM PRIORITY
0826  01023 002021        SSA,RSS      RES PROG OF LOWER PRIORITY 
0827  01024 026675R       JMP X0035     RESIDENT PROGRAM OF HIGHER PRIOR



























































 PAGE 0021 #01  XEQ PROCESSOR--RT DISK RESIDENT PROGRAM SWAP OUT


0829* 
0830*     SETUP TO SWAP OUT RT DISK RESIDENT
0831*                                                                  *
0832*        SWAP OUT RT DISC RESIDENT PROGRAM FUNCTIONS AS FOLLOWS:   *
0833*                   COMPUTE NUMBER OF TRACKS NEEDED FOR SWAPPING   *
0834*                   OUT PROGRAM BY COMPUTING NUMBER OF SECTORS     *
0835*                   NEEDED FOR MAIN AND BASE PORTION OF PROGRAM.   *
0836*                   REQUEST THE NECESSARY NUMBER OF CONTIGUOUS     *
0837*                   TRACKS FROM EXECUTIVE. IF NONE IS AVAILABLE,   *
0838*                   THEN CANNOT SWAP AND RETURN TO CHECK NEXT PROG.*
0839*                   IF TRACKS AVAILABLE, THEN SAVE STARTING TRACK  *
0840*                   ADDRESS, DISC LOGICAL UNIT NUMBER, AND NUMBER  *
0841*                   OF TRACKS INTO ID SEGMENT SWAP WORD. GENERATE  *
0842*                   PARAMETERS FOR SWAP OUTOF PROGRAM AND CALL     *
0843*                   DISC I/O ROUTINE.                              *
0844* 
0845  01025 067514R X201  LDB RDISK    ID SEGMENT ADDRESS 
0846  01026 077155R       STB ATEMP 
0847  01027 047567R       ADB D23 
0848  01030 061750        LDA RTDRA      LOW MEM BOUND-MAIN 
0849  01031 003004        CMA,INA 
0850  01032 140001        ADA B,I       UPPER MEM BOUND-MAIN
0851  01033 073531R       STA TEMP
0852  01034 001121        ARS,ARS       CONVERT TO SECTORS
0853  01035 001121        ARS,ARS 
0854  01036 001121        ARS,ARS 
0855  01037 012760R       AND M1777 
0856  01040 073532R       STA TEMP+1
0857  01041 063531R       LDA TEMP      CHECK IF PARTIAL SECTOR 
0858  01042 013576R       AND M77 
0859  01043 002002        SZA 
0860  01044 037532R       ISZ TEMP+1    YES, SO INCREMENT SECTOR COUNTER
0861  01045 006004        INB 
0862  01046 160001        LDA B,I       LOW MEM BOUND -BASE 
0863  01047 003004        CMA,INA 
0864  01050 006004        INB 
0865  01051 140001        ADA B,I       UPPER MEM BOUND-BASE
0866  01052 073531R       STA TEMP
0867  01053 001121        ARS,ARS       CONVERT TO SECTORS
0868  01054 001121        ARS,ARS 
0869  01055 001121        ARS,ARS 
0870  01056 012760R       AND M1777 
0871  01057 073533R       STA TEMP+2
0872  01060 063531R       LDA TEMP      CHECK IF PARTIAL SECTOR 
0873  01061 013576R       AND M77 
0874  01062 002002        SZA 
0875  01063 037533R       ISZ TEMP+2    YES, SO INCREMENT SECTOR COUNTER
0876  01064 002404        CLA,INA 
0877  01065 073543R       STA TMP+3    SET TRACK COUNTER TO 1 
0878  01066 063532R       LDA TEMP+1
0879  01067 043533R       ADA TEMP+2     FORM TOTAL NUMBER OF SECTORS 
0880  01070 043544R       ADA N#SEC     ADD MIN # SECTS/TRACK (NEG. VAL)
0881  01071 002020        SSA 
0882  01072 027075R       JMP *+3 
0883  01073 037543R       ISZ TMP+3    INCREMENT NO. OF TRACKS COUNT
0884  01074 027070R       JMP *-4 







 PAGE 0022 #01  XEQ PROCESSOR--RT DISK RESIDENT PROGRAM SWAP OUT


0885  01075 063543R       LDA TMP+3    NUMBER OF TRACKS 
0886  01076 006400        CLB          B = 0 FOR SYSTEM CALL
0887  01077 016005X       JSB $DREQ    REQ NECESS NO. OF TRACKS 
0888  01100 006003        SZB,RSS      CHECK IF SWAP TRACKS ASSIGNED
0889  01101 026675R       JMP X0035          NONE AVAILABLE 
0890  01102 077143R       STB X0250    STORE DISC LOGICAL UNIT IN CALL
0891  01103 047547R       ADB DM2 
0892  01104 005300        RBR           SAVE LOGICAL UNIT NUMBER
0893  01105 077531R       STB TEMP
0894  01106 067514R       LDB RDISK    COMPUTE ID SEGMENT SMAN ADDRESS
0895  01107 047572R       ADB D27 
0896  01110 013600R       AND M377
0897  01111 001722        ALF,RAL 
0898  01112 001222        RAL,RAL       TRACK NUMBER
0899  01113 023543R       XOR TMP+3    NUMBER OF TRACKS 
0900  01114 023531R       XOR TEMP     LOGICAL UNIT NUMBER
0901  01115 170001        STA B,I      LOGICAL UNIT/TRACK NUMBER/NUMBER 
0902  01116 061750        LDA RTDRA 
0903  01117 073542R       STA TMP+2     SET SWAP SWITCH 
0904  01120 067514R       LDB RDISK 
0905  01121 017312R       JSB PREST     GO TO PRESET VALUES 
0906  01122 061757        LDA SECT2     # SECTOR/TRACK FOR LU #2
0907  01123 067143R       LDB X0250     GET LOGICAL UNIT #
0908  01124 057554R       CPB D2
0909  01125 002001        RSS 
0910  01126 061760        LDA SECT3     # SECTOR/TRACK FOR LU #3
0911  01127 073545R       STA C#SEC     STORE CURRENT # SECT/TRACK (+)
0912  01130 003004        CMA,INA 
0913  01131 073546R       STA CN#SC     STORE CURRENT # SECT/TRACK (-)
0914  01132 063163R       LDA RREDS 
0915  01133 017353R       JSB SETUP     SETUP FOR MAIN PORTION
0916  01134 067540R       LDB TMP       BASE WORDS
0917  01135 077531R       STB TEMP
0918  01136 067541R       LDB TMP+1     BASE STARTING ADDRESS 
0919  01137 077534R       STB TEMP+3
0920  01140 017353R       JSB SETUP     SETUP FOR BASE PORTION
0921  01141 073147R       STA RSWP
0922  01142 016001X       JSB $XSIO    CALL FOR DISK I/O
0923  01143 000000  X0250 NOP                LOGICAL UNIT 
0924  01144 001156R       DEF X0251     COMPLETION ADDRESS
0925  01145 000000        OCT 0 
0926  01146 000002        OCT 2              WRITE REQUEST CODE 
0927  01147 004677R RSWP  DEF RTSWP          ARRAY ADDRESS
0928  01150 000000        NOP 
0929  01151 002400        CLA 
0930  01152 071717        STA XEQT
0931  01153 073515R       STA RDISK+1 
0932  01154 026474R       JMP $XEQ

0934  01155 000000  ATEMP NOP 

0936  01156 002400  X0251 CLA 
0937  01157 067155R       LDB *-2 
0938  01160 057514R       CPB RDISK 
0939  01161 073514R       STA RDISK 
0940  01162 026474R       JMP $XEQ







 PAGE 0023 #01  XEQ PROCESSOR--RT DISK RESIDENT PROGRAM SWAP OUT


0942  01163 004677R RREDS DEF RTSWP 






























































 PAGE 0024 #01  XEQ PROCESSOR--RT DISK RESIDENT READ IN 


0944* 
0945*     SETUP TO READ IN RT DISK PROGRAM
0946* 
0947*        READ IN OF REAL TIME DISC RESIDENT PROGRAM                *
0948*              IF ID SEGMENT SWAP ADDRESS IS ZERO, THE SYSTEM      *
0949*                   GENERATED DISC ADDRESS IS USED TO COMPUTE THE  *
0950*                   PARAMETERS FOR DISC I/O CALL.                  *
0951*              IF THERE IS SWAP ADDRESS, THEN THIS DISC ADDRESS    *
0952*                   IS USED.                                       *
0953*                                                                  *
0954  01164 067517R X0255 LDB ZWORK     CHECK IF PREVIOUSLY SWAPPED 
0955  01165 077514R       STB RDISK    STORE ID SEGMENT ADDRESS 
0956  01166 002400        CLA 
0957  01167 073515R       STA RDISK+1  SET READ IN WAIT FLAG
0958  01170 047572R       ADB D27 
0959  01171 164001        LDB B,I       LOAD SWAP DISK ADDR-IF ANY
0960  01172 006002        SZB                NOT SWAPPED
0961  01173 061750        LDA RTDRA         SWAPPED 
0962  01174 073542R       STA TMP+2     STORE VALUE IN SWAP 
0963  01175 061757        LDA SECT2     (A)= # SECT/TRACK FOR LU #2.
0964  01176 006020        SSB            IF LU = 3, THEN
0965  01177 061760        LDA SECT3     (A)= # SECT/TRACK FOR LU #3.
0966  01200 073545R       STA C#SEC     STORE CURRENT # SECT/TRACK (+)
0967  01201 003004        CMA,INA        AND AS 
0968  01202 073546R       STA CN#SC       A NEGATIVE VALUE. 
0969  01203 067517R       LDB ZWORK 
0970  01204 063542R       LDA TMP+2 
0971  01205 017312R       JSB PREST 
0972  01206 063163R       LDA RREDS 
0973  01207 017353R       JSB SETUP     SETUP FOR MAIN PORTION
0974  01210 067540R       LDB TMP       BASE WORDS
0975  01211 077531R       STB TEMP
0976  01212 067541R       LDB TMP+1     BASE STARTING ADDRESS 
0977  01213 077534R       STB TEMP+3
0978  01214 017353R       JSB SETUP     SETUP FOR BASE PORTION
0979  01215 073235R       STA RRED
0980  01216 067514R       LDB RDISK    SETUP DISK LOGICAL UNIT NUMBER 
0981  01217 047571R       ADB D26 
0982  01220 063542R       LDA TMP+2    CHECK IF SWAPPED 
0983  01221 002002        SZA          NO, SO USE DMAN LOGICAL UNIT 
0984  01222 006004        INB          YES, SO USE SMAN LOGICAL UNIT
0985  01223 160001        LDA B,I 
0986  01224 001200        RAL 
0987  01225 013574R       AND M1
0988  01226 043554R       ADA D2
0989  01227 073231R       STA *+2 
0990  01230 016001X       JSB $XSIO    CALL FOR DISK I/O
0991  01231 000000        NOP                LOGICAL UNIT 
0992  01232 001245R       DEF X0270          COMPLETION ADDRESS 
0993  01233 000000        OCT 0 
0994  01234 000001        OCT 1              READ REQUEST 
0995  01235 004677R RRED  DEF RTSWP 
0996  01236 000000        NOP 
0997  01237 063514R       LDA RDISK    I/O SUSPEND REAL TIME
0998  01240 073243R       STA *+3      DISC RESIDENT PROGRAM
0999  01241 017601R       JSB $LIST    UNTIL READ IN FROM 







 PAGE 0025 #01  XEQ PROCESSOR--RT DISK RESIDENT READ IN 


1000  01242 000102        OCT 102      DISC COMPLETE
1001  01243 001243R       DEF * 
1002  01244 026675R       JMP X0035     RETURN
1003* 
1004*     READ IN COMPLETION PROCESSOR
1005* 
1006*        THE REAL TIME DISC RESIDENT READ COMPLETION PROCESSOR,    *
1007* 
1008*              IF NO ERRORS, IT CLEARS READ IN WAIT FLAG, AND      *
1009*                   SCHEDULES PROGRAM SUCH THAT PROGRAM EXECUTION  *
1010*                   CAN BEGIN AT THE NEXT OPPORTUNITY.             *
1011*              IF READ ERRORS, CALL $ABRT PROCESSOR                *
1012*                                                                  *
1013  01245 077524R X0270 STB XXTMP    SAVE READ IN STATUS OF DISC
1014  01246 067514R       LDB RDISK    REAL TIME DISC RESIDENT
1015  01247 077253R       STB *+4      PROGRAM READ IN COMPLETE - 
1016  01250 017266R       JSB DREL      (RELEASE SWAP TRACK)
1017  01251 017601R       JSB $LIST    SO SCHEDULE PROGRAM
1018  01252 000101        OCT 101      FOR EXECUTION
1019  01253 001253R       DEF * 
1020  01254 002002        SZA 
1021  01255 027263R       JMP X0280    ERROR FROM LIST CALL 
1022  01256 067524R X0275 LDB XXTMP     CHECK READ IN STATUS FLAG 
1023  01257 006020        SSB 
1024  01260 027263R       JMP X0280          ERROR FROM DISC READ 
1025  01261 037515R       ISZ RDISK+1    CLEAR READ IN WAIT FLAG
1026  01262 026474R       JMP $XEQ     RETURN TO $XEQ 
1027  01263 063514R X0280 LDA RDISK    A CONTAINS RT DISC ID SEG ADDR 
1028  01264 016010X       JSB $ABRT    GO TO ABORT ROUTINE
1029  01265 026474R       JMP $XEQ     RETURN TO $XEQ 

































 PAGE 0026 #01  XEQ PROCESSOR--RT DISK RESIDENT READ IN 


1031  01266 000000  DREL  NOP           ROUTINE TO RELEASE DISC SWAP TRK
1032  01267 047572R       ADB D27       COMPUTE ID SEGMENT SWAP ADDRESS 
1033  01270 160001        LDA B,I 
1034  01271 002003        SZA,RSS            SWAPPED, SO GO TO RELEASE
1035  01272 127266R       JMP DREL,I         NOT, SWAPPED, SO RETURN
1036  01273 073531R       STA TEMP      SAVE LU/TRK/#TRK
1037  01274 013577R       AND M177
1038  01275 073533R       STA TEMP+2         ISOLATE # TRACKS TO RELEASE
1039  01276 002400        CLA           CLEAR ID SEGMENT
1040  01277 170001        STA B,I        SWAP VALUE 
1041  01300 063531R       LDA TEMP
1042  01301 001727        ALF,ALF 
1043  01302 001200        RAL 
1044  01303 013600R       AND M377
1045  01304 067531R       LDB TEMP
1046  01305 006020        SSB 
1047  01306 041756        ADA TATSD          L. U. 3 SO ADD # SYS TRACKS
1048  01307 067533R       LDB TEMP+2        (B) TO # OF TRACKS TO REL 
1049  01310 016007X       JSB $DREL     CALL DISC TRACK RELEASE PROCESOR
1050  01311 127266R       JMP DREL,I    RETURN











































 PAGE 0027 #01  XEQ PROCESSOR--PRELIMINARY SETUP FOR DISK CALL


1052* 
1053*     PRELIMINARY SETUP FOR DISK I/O CALLS
1054* 
1055  01312 000000  PREST NOP          ENTRY/EXIT 
1056  01313 047566R       ADB D22       FOR MEM ADDRESS 
1057  01314 002003        SZA,RSS       SKIP IF SWAPPED 
1058  01315 160001        LDA B,I 
1059  01316 073534R       STA TEMP+3
1060  01317 003004        CMA,INA 
1061  01320 006004        INB 
1062  01321 140001        ADA B,I       UPPER BOUND (MAIN)
1063  01322 073531R       STA TEMP      NUMBER OF WORDS (MAIN)
1064  01323 006004        INB 
1065  01324 160001        LDA B,I       LOWER BOUND (BASE)
1066  01325 073541R       STA TMP+1 
1067  01326 003004        CMA,INA 
1068  01327 006004        INB 
1069  01330 140001        ADA B,I       UPPER BOUND (BASE)
1070  01331 073540R       STA TMP       NUMBER OF WORDS (BASE)
1071  01332 006004        INB          INCREMENT TO DMAN ADDRESS
1072  01333 002400        CLA 
1073  01334 073533R       STA TEMP+2   SET SECTOR ADDRESS TO ZERO 
1074  01335 063542R       LDA TMP+2 
1075  01336 002003        SZA,RSS 
1076  01337 027342R       JMP *+3 
1077  01340 006004        INB          INCREMENT TO SMAN ADDRESS
1078  01341 027345R       JMP PR010 
1079  01342 160001        LDA B,I      DMAN VALUE 
1080  01343 013577R       AND M177
1081  01344 073533R       STA TEMP+2    SECTOR NUMBER 
1082  01345 160001  PR010 LDA B,I      DMAN OR SMAN VALUE 
1083  01346 001727        ALF,ALF 
1084  01347 001200        RAL 
1085  01350 013600R       AND M377
1086  01351 073532R       STA TEMP+1    TRACK NUMBER
1087  01352 127312R       JMP PREST,I  EXIT 



























 PAGE 0028 #01  XEQ PROCESSOR--DISK CALLING SEQUENCE GENERATOR


1089* 
1090*     DISK READ/WRITE CALLING SEQUENCE GENERATOR ROUTINE
1091*         ON ENTRY
1092*              TEMP   = NUMBER OF WORDS 
1093*              TEMP+1 = TRACK ADDRESS 
1094*              TEMP+2 = SECTOR ADDRESS
1095*              TEMP+3 = STARTING MEMORY ADDRESS 
1096*              A      = PARAMETER TABLE ADDRESS 
1097* 
1098*        THE DISC PARAMETER GENERATOR FUNCTION IS TO GENERATE      *
1099*              PARAMETERS FOR DISC CALL GUARANTEEING THAT ALL      *
1100*              TRACK CROSSING CALLS ARE BROKEN DOWN INTO SUB-CALLS *
1101*              SUCH THAT THE DISC DRIVER CAN HANDLE THE REQUEST.   *
1102*              THE CALLS ARE BROKEN UP IN TRIPLETS OF              *
1103*                   STARTING CORE MEMORY ADDRESS                   *
1104*                   NUMBER OF WORDS TO TRANSFER                    *
1105*                   STARTING TRACK/SECTOR ADDRESS.                 *
1106*              THE END OF CALL IS INDICATED BY A ZERO FOLLOWING    *
1107*              THE LAST TRIPLET.                                   *
1108*                                                                  *
1109  01353 000000  SETUP NOP           ENTRY/EXIT
1110  01354 067531R       LDB TEMP      COMPUTE NUMBER OF SECTORS 
1111  01355 006003        SZB,RSS       ZERO, SO RETURN 
1112  01356 127353R       JMP SETUP,I 
1113  01357 043550R       ADA DM3       SET UP TRIPLET
1114  01360 073535R       STA TEMP+4     ADDRESS
1115  01361 047576R       ADB M77       ROUND UP NUMBER 
1116  01362 101026        ASR 6          OF SECTORS 
1117  01363 077536R       STB TEMP+5    SAVE NUMBER OF SECTORS
1118  01364 063533R       LDA TEMP+2    INITIAL SECTOR ADDRESS
1119  01365 040001        ADA B 
1120  01366 043546R       ADA CN#SC     SUB CURRENT # SECTORS/TRACK 
1121  01367 067534R       LDB TEMP+3
1122  01370 177535R       STB TEMP+4,I  STORE STARTING MEMORY ADDRESS 
1123  01371 037535R       ISZ TEMP+4    INCREMENT ARRAY ADDRESS 
1124  01372 003004        CMA,INA 
1125  01373 002021        SSA,RSS       CHECK IF TRACK OVERFLOW 
1126  01374 027424R       JMP SETI0     NO, SO LAST TRIPLET 
1127  01375 043536R       ADA TEMP+5
1128  01376 100026        ASL 6 
1129  01377 073537R UPSET STA TEMP+6    NUMBER OF WORDS 
1130  01400 067532R       LDB TEMP+1    FORM
1131  01401 005722        BLF,RBL        TRACK
1132  01402 005222        RBL,RBL         ADDRESS 
1133  01403 047533R       ADB TEMP+2    AND SECTOR ADDRESS
1134  01404 104400        DST TEMP+4,I  STORE LAST TWO WORDS OF TRIPLET 
1135  01406 043534R       ADA TEMP+3    UPDATE STARTING 
1136  01407 073534R       STA TEMP+3     MEMORY ADDRESS 
1137  01410 067537R       LDB TEMP+6    UPDATE NUMBER 
1138  01411 007004        CMB,INB        OF 
1139  01412 047531R       ADB TEMP         WORDS
1140  01413 077531R       STB TEMP          TO GO 
1141  01414 003400        CCA           SUB 1 FOR CORRECT NEXT TRIPLET
1142  01415 043535R       ADA TEMP+4    ADDRESS CALC. 
1143  01416 006003        SZB,RSS       ANY MORE WORDS TO GO
1144  01417 027426R       JMP PUTS      NO, SO SET UP FOR NEXT TIME 







 PAGE 0029 #01  XEQ PROCESSOR--DISK CALLING SEQUENCE GENERATOR


1145  01420 037532R       ISZ TEMP+1    INCREMENT TRACK ADDRESS 
1146  01421 006400        CLB 
1147  01422 077533R       STB TEMP+2    SET SECTOR ADDRESS TO 0 
1148  01423 027354R       JMP SETUP+1   GO TO NEXT LOOP 

1150  01424 063531R SETI0 LDA TEMP      SET FOR LAST
1151  01425 027377R       JMP UPSET      TRIPLET

1153  01426 067533R PUTS  LDB TEMP+2    INCREMENT SECTOR ADDRESS
1154  01427 047536R       ADB TEMP+5     TO START SECTOR FOR
1155  01430 077533R       STB TEMP+2      NEXT CALL 
1156  01431 057545R       CPB C#SEC     CHECK IF NEW TRACK
1157  01432 006401        CLB,RSS 
1158  01433 127353R       JMP SETUP,I   NO, SO RETURN 
1159  01434 037532R       ISZ TEMP+1    YES, SO INCREMENT TRACK ADDRESS 
1160  01435 077533R       STB TEMP+2    RESET SECTOR
1161  01436 127353R       JMP SETUP,I   RETURN














































 PAGE 0030 #01  XEQ PROCESSOR--READ SETUP 


1163* 
1164*     SETUP TO READ IN BACKGROUND DISK RESIDENT PROGRAM 
1165*        OR BACKGROUND DISK RESIDENT SEGMENTS 
1166* 
1167  01437 000000  BREED NOP          ENTRY/EXIT 
1168  01440 002400        CLA 
1169  01441 073513R       STA BKRES+1   SET READ IN WAIT FLAG 
1170  01442 073542R       STA TMP+2 
1171  01443 067517R       LDB ZWORK     ID SEGMENT ADDRESS
1172  01444 017312R       JSB PREST 
1173  01445 067517R       LDB ZWORK     GET ID SEG ADDR 
1174  01446 047571R       ADB D26 
1175  01447 164001        LDB B,I       GET DISC ADDRESS
1176  01450 061757        LDA SECT2     # SECT/TRACK FOR LU #2
1177  01451 006020        SSB           SKIP- LU #2 
1178  01452 061760        LDA SECT3     # SECT/TRACK FOR LU #3
1179  01453 073545R       STA C#SEC     STORE CURRENT # SECT/TRACK (+)
1180  01454 003004        CMA,INA        AND AS 
1181  01455 073546R       STA CN#SC       A NEGATIVE VALUE. 
1182  01456 063516R       LDA BREDS 
1183  01457 017353R       JSB SETUP    SET MAIN DISC PARAMETERS 
1184  01460 067540R       LDB TMP       BASE WORDS
1185  01461 077531R       STB TEMP
1186  01462 067541R       LDB TMP+1     BASE STARTING ADDRESS 
1187  01463 077534R       STB TEMP+3
1188  01464 017353R       JSB SETUP    SET BASE DISC PARAMETERS 
1189  01465 073502R       STA BRED
1190  01466 067512R       LDB BKRES    SETUP DISK LOGICAL UNIT NUMBER 
1191  01467 047571R       ADB D26 
1192  01470 160001        LDA B,I 
1193  01471 001200        RAL 
1194  01472 013574R       AND M1
1195  01473 043554R       ADA D2
1196  01474 073476R       STA *+2 
1197  01475 016001X       JSB $XSIO 
1198  01476 000000        NOP 
1199  01477 000740R       DEF X0120         COMPLETION ADDRESS
1200  01500 000000        OCT 0 
1201  01501 000001        OCT 1             READ REQUEST
1202  01502 004654R BRED  DEF BREAD         ARRAY ADDRESS 
1203  01503 000000        NOP 
1204  01504 063512R       LDA BKRES    I/O SUSPEND BACKGROUND 
1205  01505 073510R       STA *+3      DISC RESIDENT PROGRAM OR 
1206  01506 017601R       JSB $LIST    SEGMENT UNTIL READ IN
1207  01507 000102        OCT 102      FROM DISC COMPLETE 
1208  01510 001510R       DEF * 
1209  01511 127437R       JMP BREED,I  EXIT 
















 PAGE 0031 #01  XEQ PROCESSOR--BUFFERS, CONSTANTS, POINTERS, ETC


1211* 
1212  01512 000000  BKRES NOP           BACKGROUND PROG RESIDENT SWITCH 
1213  01513 000000        NOP           READ COMPL FLAG-BACKGROUND DISC 
1214  01514 000000  RDISK NOP           RT DISK PROG RESIDENT SWITCH
1215  01515 000000        NOP           READ IN COMPL FLAG-RT DISC
1216* 
1217  01516 004654R BREDS DEF BREAD 
1218  01517 000000  ZWORK NOP          SCHED LIST ID SEGMENT ADDRESS
1219  01520 000000  ZLINK NOP          SCHED LIST LINKAGE ADDRESS 
1220  01521 000000  ZPRIO NOP          SCHED LIST PRIORITY LIST 
1221  01522 000000  ZTYPE NOP          SCHED LIST PRIORITY ADDRESS
1222  01523 000000  ZZZZZ NOP 
1223  01524 000000  XXTMP NOP 

1225  01525 000000  BPRIO NOP          TEMP PRIORITY ADDRESS
1226  01526 000000  WORK  NOP           WORK ID SEGMENT ADDRESS 
1227  01527 000000  WLINK NOP          WORK LINKAGE ADDRESS 
1228  01530 000000  WPRIO NOP          WORK PRIORITY ADDRESS
1229  01531 000000  TEMP  BSS 7        TEMPORARY WORKING STORAGE AREA 
1230  01540 000000  TMP   BSS 4         TEMPORARY WORKING STORAGE 
1231  01544 000000  N#SEC NOP         NEGATIVE # SECTORS/TRACK (MINIMUM)
1232  01545 000000  C#SEC NOP         CURRENT # SECTORS/TRACK (+) 
1233  01546 000000  CN#SC NOP         CURRENT # SECTORS/TRACK (-) 
1234* 
1235  01547 177776  DM2   DEC -2
1236  01550 177775  DM3   DEC -3
1237  01551 177774  DM4   DEC -4
1238  01552 177773  DM5   DEC -5
1239  01553 177760  DM16  DEC -16 
1240* 
1241  01554 000002  D2    DEC 2 
1242  01555 000004  D4    DEC 4 
1243  01556 000005  D5    DEC 5 
1244  01557 000006  D6    DEC 6 
1245  01560 000007  D7    DEC 7 
1246  01561 000010  D8    DEC 8 
1247  01562 000011  D9    DEC 9 
1248  01563 000016  D14   DEC 14
1249  01564 000017  D15   DEC 15
1250  01565 000021  D17   DEC 17
1251  01566 000026  D22   DEC 22
1252  01567 000027  D23   DEC 23
1253  01570 000030  D24   DEC 24
1254  01571 000032  D26   DEC 26
1255  01572 000033  D27   DEC 27
1256  01573 000074  D60   DEC 60
1257* 
1258  01574 000001  M1    OCT 1 
1259  01575 000003  M3    DEC 3 
1260  01576 000077  M77   OCT 77
1261  01577 000177  M177  OCT 177 
1262  01600 000377  M377  OCT 377 











 PAGE 0032 #01  REAL TIME SCHEDULER---LIST PROCESSOR SECTION--- 


1264* 
1265*        THE $LIST PROCESSOR SECTION OF THE HP-2100 REAL TIME      *
1266*     EXECUTIVE PROCESSES THE FOLLOWING LIST REQUESTS              *
1267*     1. DORMANT                                                   *
1268*     2. SCHEDULE                                                  *
1269*     3. OPERATOR SUSPEND                                          *
1270*     4. NON-OPERATOR SUSPEND                                      *
1271*        A. I/O                                                    *
1272*        B. MEMORY AVAILABLE                                       *
1273*        C. DISC AVAILABLE                                         *
1274*     5. SEGMENT LOADING                                           *
1275* 
1276* 
1277* 
1278*        CALLING SEQUENCE                                          *
1279* 
1280*               JSB $LIST                                          *
1281*               OCT (ADDRESS CODE)(FUNCTION CODE) 
1282*               DEF (ADDRESS) 
1283* 
1284*               IF A = 0, THEN NO MESSAGE 
1285*                  A NOT 0, THEN ADDR OF MESSAGE
1286*                  IF ERROR, (B) CONTAINS ASCII ERR CODE
1287*               WHERE 
1288*                   FUNCTION CODE 
1289*                       0 = DORMANT REQUEST 
1290*                       1 = SCHEDULE REQUEST
1291*                       2 = I/O SUSPEND REQUEST 
1292*                       3 = *****NOT CURRENTLY USED*****
1293*                       4 = MEMORY AVAILABEL REQUEST
1294*                       5 = DISK ALLOCATION REQUEST 
1295*                       6 = OPERATOR SUSPEND REQUEST
1296*                       7 = SEGMENT READ REQUEST
1297*                      17 = RELINK PROGRAM REQUEST
1298*                      10 THRU 16 ARE NOT ASSIGNED
1299* 
1300*                   ADDRESS CODE
1301*                       1 = ID SEGMENT ADDRESS
1302*                       2 = ASCII PROGRAM NAME ADDRESS
1303*                       3 = ID SEGMENT ADDRESS IN WORK
1304* 
1305* 
1306*                   ADDRESS 
1307*                       KEYWORD, ID SEGMENT, WORK TEMP STORAGE OR 
1308*                       PROGRAM NAME ADDRESS AS SPECIFIED BY CODE 
1309* 
1310  01601 000000  $LIST NOP          ENTRY/EXIT 
1311  01602 163601R       LDA $LIST,I  WORD 1 
1312  01603 013564R       AND D15 
1313  01604 072051R       STA L0090+1    STORE AWAY REQUEST CODE
1314  01605 163601R       LDA $LIST,I  FORM ADDR CODE 
1315  01606 001727        ALF,ALF 
1316  01607 001222        RAL,RAL 
1317  01610 013564R       AND D15 
1318  01611 037601R       ISZ $LIST    INCR TO WORD 2 
1319  01612 053574R       CPA M1        SEE IF ID SEGMENT ADDRESS 







 PAGE 0033 #01  REAL TIME SCHEDULER---LIST PROCESSOR SECTION--- 


1320  01613 027622R       JMP L0020     YES, SO SETUP TO READ IT IN 
1321  01614 053575R       CPA M3        CHECK IF DATA IN WORK AREA
1322  01615 027635R       JMP L0060     YES 
1323  01616 027625R       JMP L0030    NO, SO ASSUME ASCII PROG NAME ADD
1324  01617 002400        CLA          CLEAR A REGISTER FOR NORMAL RETUR
1325  01620 037601R L0015 ISZ $LIST    INCR TO EXIT ADDR
1326  01621 127601R       JMP $LIST,I  EXIT 
1327  01622 163601R L0020 LDA $LIST,I  ID SEGMENT ADDR
1328  01623 073526R       STA WORK
1329  01624 027635R       JMP L0060     GO TO PROCESS THE ID SEGMENT
1330  01625 167601R L0030 LDB $LIST,I  ASCII NAME ADDR
1331  01626 016352R       JSB TNAME    SEARCH KEYWORDS FOR PROGRAM NAME 
1332  01627 073526R       STA WORK
1333  01630 002002        SZA          NOT FOUND, SO ERROR RETURN 
1334  01631 027635R       JMP L0060    PROG FOUND, SO GO  PROCESS 
1335  01632 062203R       LDA NOPRG    NO SUCH PROG ERROR MESSAGE 
1336  01633 066065R       LDB ER5      NO SUCH PROG ERROR CODE
1337  01634 027620R       JMP L0015    GO TO RETURN 













































 PAGE 0034 #01  LIST PROCESSOR--REQUEST CODE DETERMINATION


1339* 
1340*     PROCESS ID SEGMENT ACCORDING TO REQUEST CODE
1341  01635 063526R L0060 LDA WORK     ID SEGMENT ADDRESS 
1342  01636 073527R       STA WLINK    LINKAGE ADDRESS
1343  01637 043557R       ADA D6
1344  01640 073530R       STA WPRIO    PRIORITY ADDRESS 
1345  01641 043562R       ADA D9
1346  01642 072222R       STA WSTAT    STATUS ADDRESS 
1347  01643 162222R       LDA WSTAT,I 
1348  01644 013564R       AND D15 
1349  01645 072050R       STA L0090    STORE CURRENT PROG STATUS
1350  01646 073531R       STA TEMP
1351  01647 062051R       LDA L0090+1   REQUEST CODE
1352  01650 002003        SZA,RSS       CHECK IF DORMANT REQUEST
1353  01651 027700R       JMP L0100     DORMANT REQUEST 
1354  01652 053574R       CPA M1        CHECK IF SCHEDULE REQUEST 
1355  01653 027744R       JMP L0200     YES 
1356  01654 053554R       CPA D2       CHECK IF I/O SUSPEND REQUEST 
1357  01655 026014R       JMP L0400    YES
1358  01656 053557R       CPA D6        CHECK IF OPERATOR SUSPEND REQUES
1359  01657 027774R       JMP L0300     YES 
1360  01660 053556R       CPA D5       CHECK IF DISK ALLOC SUSPEND REQUE
1361  01661 026014R       JMP L0400 
1362  01662 053555R       CPA D4       CHECK IF MEM AVAIL SUSPEND REQUES
1363  01663 026014R       JMP L0400 
1364  01664 053560R       CPA D7       CHECK IF SEGMENT LOAD REQUEST
1365  01665 026023R       JMP L0500 
1366  01666 053564R       CPA D15       CHECK IF LINKAGE UPDATE REQUEST 
1367  01667 027673R       JMP L0080     YES 
1368  01670 062053R L0075 LDA ILSTT    ILLEGAL STATUS MESSAGE ADDRESS 
1369  01671 066064R       LDB ERMS3    ILLEGAL STATUS ERROR CODE
1370  01672 027620R       JMP L0015     GO TO EXIT





1372* 
1373*           LIST PROCESSOR--LINK UPDATE REQUEST/LINK CALL 
1374* 



1376* 
1377*      LINKAGE UPDATE 
1378* 
1379  01673 063531R L0080 LDA TEMP      PROG PRIOR HAS CHANGED AND
1380  01674 072050R       STA L0090    PROGRAM MUST BE RELINKED 
1381  01675 072051R       STA L0090+1 
1382  01676 016046R       JSB CLINK    CALL LINKAGE PROCESSOR 
1383  01677 027620R       JMP L0015    GO TO EXIT 
1384* 











 PAGE 0035 #01  LIST PROCESSOR--DORMANT REQUEST 


1386* 
1387*         DORMANT REQUEST 
1388* 
1389*        THE DORMANT REQUEST IS PROCESSED AS FOLLOWS:              *
1390*              IF ABORT BIT SET, MAKE PROGRAM DORMANT              *
1391*              IF ALREADY DORMANT, RETURN                          *
1392*              IF SCHEDULED, THEN ENTERED INTO DORMANT LIST, POINT *
1393*                   OF SUSPENSION CLEARED.                         *
1394*                   IF ID SEGMENT ADDRESS IS SAME AS RESIDING      *
1395*                   BACKGROUND DISC RESIDENT PROGRAM, THEN BKRES   *
1396*                   FLAGS ARE CLEARED SO ANOTHER PROGRAM MAY BE    *
1397*                   LOADED INTO THE AREA.                          *
1398*                   IF ID SEGMENT ADDRESS IS SAME AS RESIDING REAL *
1399*                   TIME DISC RESIDENT PROGRAM, THEN RDISK FLAGS   *
1400*                   ARE CLEARED SO ANOTHER PROGRAM MAY BE LOADED   *
1401*                   INTO THE AREA.                                 *
1402*              IF NOT ONE OF ABOVE, THEN DORMANT BIT SET IN STATUS *
1403  01700 162222R L0100 LDA WSTAT,I  CHECK IF ABORT BIT SET 
1404  01701 012226R       AND M4000 
1405  01702 002002        SZA 
1406  01703 027717R       JMP L0110    YES, SO GO MAKE DORMANT
1407  01704 063531R       LDA TEMP     GET CURRENT PROGRAM STATUS 
1408  01705 002003        SZA,RSS 
1409  01706 027723R       JMP L0115     ALREADY DORMANT 
1410  01707 053574R       CPA M1
1411  01710 027717R       JMP L0110     PROGRAM SCHEDULED- SO MAKE DORMA
1412  01711 053557R       CPA D6
1413  01712 027717R       JMP L0110    PROGRAM OPERATOR SUSPENDED 
1414  01713 162222R       LDA WSTAT,I   SET OFF BIT IN STATUS 
1415  01714 032224R       IOR M100
1416  01715 172222R       STA WSTAT,I 
1417  01716 027617R       JMP L0015-1  GO TO EXIT 
1418  01717 002400  L0110 CLA 
1419  01720 072051R       STA L0090+1  SET LINK CALL PARAM TO 0 
1420  01721 172222R       STA WSTAT,I   SET STATUS TO DORMANT 
1421  01722 016046R       JSB CLINK    CALL LINK PROCESSOR
1422  01723 016272R L0115 JSB CLIDS    GO TO CLEAR ID SEG TEMP AND SET B
1423  01724 002400        CLA 
1424  01725 067526R       LDB WORK
1425  01726 047561R       ADB D8
1426  01727 170001        STA B,I       CLEAR PT OF SUSPENSION
1427  01730 067526R       LDB WORK     CHECK IF RESIDING PROGRAM
1428  01731 057512R       CPB BKRES         IN BACKGROUND DISC RESIDENT 
1429  01732 027741R       JMP L0120    YES, SO GO CLEAR FLAGS 
1430  01733 057514R       CPB RDISK    CHECK IF REAL TIME DISC RESIDENT 
1431  01734 002401        CLA,RSS      YES, SO CLEAR FLAGS
1432  01735 027620R       JMP L0015    EXIT 
1433  01736 073514R       STA RDISK    RESIDENT FLAGS 
1434  01737 073515R       STA RDISK+1 
1435  01740 027620R       JMP L0015 
1436  01741 073512R L0120 STA BKRES      CLEAR BACKGROUND DISK
1437  01742 073513R       STA BKRES+1    RESIDENT FLAG
1438  01743 027620R       JMP L0015    GO TO EXIT 










 PAGE 0036 #01  LIST PROCESSOR--SCHEDULE REQUEST


1440* 
1441*     SCHEDULE REQUEST
1442* 
1443*        THE SCHEDULE REQUEST IS PROCESSED AS FOLLOWS:             *
1444*              IF ABORT BIT SET, STORE ID SEGMENT ADDRESS SUCH THAT*
1445*                   PROGRAM WILL BE ABORTED AT NEXT ENTRY FROM XEQ *
1446*              IF DORMANT BIT SET, GO TO DORMANT REQUEST           *
1447*              IF OPERATOR-SUSPEND BIT SET, GO TO OPERATOR-SUSPEND *
1448*                   REQUEST                                        *
1449*              IF SCHEDULED, THEN STATUS ERROR EXIT                *
1450*              IF OPERATOR-SUSPENDED, THEN STATUS ERROR EXIT       *
1451*              IF CURRENT STATUS NOT ONE OF ABOVE, THE PROGRAM IS  *
1452*                   ENTERED INTO THE SCHEDULE LIST.                *
1453*                                                                  *
1454  01744 162222R L0200 LDA WSTAT,I  CHECK IF DORMANT BIT SET 
1455  01745 012226R       AND M4000     CHECK IF ABORT BIT SET
1456  01746 002003        SZA,RSS 
1457  01747 027753R       JMP *+4            NO 
1458  01750 063526R       LDA WORK           YES, SO SAVE ID ADDRESS
1459  01751 073523R       STA ZZZZZ               AND 
1460  01752 027617R       JMP L0015-1             RETURN
1461  01753 162222R       LDA WSTAT,I 
1462  01754 012224R       AND M100
1463  01755 002002        SZA          NO 
1464  01756 027717R       JMP L0110    YES, SO MAKE PROGRAM DORMANT 
1465  01757 162222R       LDA WSTAT,I  CHECK IF OPERATOR SUSPEND BIT SET
1466  01760 012225R       AND M1000 
1467  01761 002002        SZA          NO 
1468  01762 026007R       JMP L0320    YES, SO MAKE PROG OPER-SUSP
1469  01763 063531R       LDA TEMP     CHECK IF PROG ALREADY SCHED
1470  01764 053574R       CPA M1
1471  01765 027670R       JMP L0075    ALREADY SCHED-SO STATUS ERROR
1472  01766 053557R       CPA D6        IF OPER-SUSP, THEN CANNOT SCHED 
1473  01767 027670R       JMP L0075    STATUS ERROR 
1474  01770 016046R       JSB CLINK    CALL LINK PROCESSOR TO SCHEDULE
1475  01771 006404        CLB,INB 
1476  01772 176222R       STB WSTAT,I  UPDATE STATUS TO SCHEDULE
1477  01773 027620R       JMP L0015    GO TO EXIT 

























 PAGE 0037 #01  LIST PROCESSOR--SUSPEND REQUESTS 


1479* 
1480*     OPERATOR SUSPEND REQUEST
1481* 
1482*        THE OPERATOR-SUSPEND REQUEST IS PROCESSED AS FOLLOWS:     *
1483*              IF DORMANT, THEN ENTER INTO OPERATOR SUSPEND LIST   *
1484*              IF ALREADY OPERATOR SUSPEND, THEN STATUS ERROR EXIT *
1485*              IF SCHEDULED, THEN ENTER INTO OPERATOR SUSPEND LIST *
1486*              IF NOT ONE OF ABOVE, THEN OPERATOR-SUSPEND BIT SET  *
1487*                                                                  *
1488  01774 063531R L0300 LDA TEMP
1489  01775 002003        SZA,RSS       PROGRAM DORMANT SO
1490  01776 026007R       JMP L0320     GO MAKE IT OPER SUSPEND 
1491  01777 053557R       CPA D6       CHECK IF ALREADY OPER SUSPENDED
1492  02000 027670R       JMP L0075    ILLEGAL STATUS ERROR RETURN
1493  02001 053574R       CPA M1       CHECK IF PROGRAM SCHEDULED 
1494  02002 026007R       JMP L0320    YES, SO OPERATOR SUSPEND IT
1495  02003 162222R       LDA WSTAT,I   SET OPER-SUSP BIT IN STATUS 
1496  02004 032225R       IOR M1000 
1497  02005 172222R       STA WSTAT,I 
1498  02006 027617R       JMP L0015-1  GO TO EXIT 
1499  02007 063557R L0320 LDA D6
1500  02010 072051R       STA L0090+1  SET LINKAGE CALL PARAM 2 
1501  02011 172222R       STA WSTAT,I  UPDATE STATUS TO OPER-SUSPEND
1502  02012 016046R       JSB CLINK    CALL LINK PROCESSOR
1503  02013 027620R       JMP L0015    GO TO EXIT 






1505*                                                                  *
1506*     NON-OPERATOR SUSPEND REQUEST                                 *
1507* 
1508*        THE NON-OPERATOR SUSPEND REQUEST IS PROCESSED AS FOLLOWS: *
1509*              THE PROGRAM IS ENTERED INTO THE REQUESTED LIST AND  *
1510*              THE NEW STATUS REPLACES THE 4 LOW ORDER BITS OF THE *
1511*              PROGRAM STATUS-THUS SAVING THE DORMANT OR OPERATOR- *
1512*              SUSPEND BITS THAT MAY BE PRESENT.                   *
1513* 
1514* 
1515  02014 016046R L0400 JSB CLINK    CALL LINK PROCESSOR
1516  02015 162222R       LDA WSTAT,I  UPDATE STATUS SAVING ALL 
1517  02016 012022R       AND MASTS    BUT LOW 4 BITS 
1518  02017 032051R       IOR L0090+1 
1519  02020 172222R       STA WSTAT,I 
1520  02021 027617R       JMP L0015-1  GO TO EXIT 

1522  02022 177760  MASTS OCT 177760














 PAGE 0038 #01  LIST PROCESSOR--SEGMENT LOAD REQUEST


1524* 
1525*     SEGMENT REQUEST CALL
1526* 
1527*        THE SEGMENT LOAD REQUEST IS PROCESSED AS FOLLOWS:         *
1528*           IF BACKGROUND SEGMENT (TYPE 5), THE PRIMARY 
1529*                   POINT OF THE SEGMENT IS INSERTED INTO THE      *
1530*                   POINT OF SUSPENSION OF XEQT PROGRAM. THE DISK  *
1531*                   REQUEST IS MADE TO READ IN THE SEGMENT, AND    *
1532*                   CALLING PROGRAM IS I/O SUSPENDED.              *
1533*                                                                  *
1534  02023 067526R L0500 LDB WORK     CHECK PROGRAM TYPE 
1535  02024 047563R       ADB D14 
1536  02025 160001        LDA B,I 
1537  02026 013564R       AND D15 
1538  02027 053556R       CPA D5       CHECK IF BACKGROUND DISK SEGMENT 
1539  02030 002001        RSS 
1540  02031 027670R       JMP L0075    ERROR
1541  02032 067526R       LDB WORK      STORE PRIMARY ENTRY VALUE 
1542  02033 047560R       ADB D7        OF SEGMENT INTO POINT OF
1543  02034 160001        LDA B,I       SUSPENSION OF XEQT
1544  02035 171730        STA XSUSP,I   PROGRAM 
1545  02036 063601R       LDA $LIST    SAVE $LIST ENTRY PT VALUE
1546  02037 072171R       STA TEMPP    SINCE BREED CALLS $LIST
1547  02040 063526R       LDA WORK
1548  02041 073517R       STA ZWORK 
1549  02042 017437R       JSB BREED    GO TO READ IN BACKGROUND SEGMENT 
1550  02043 062171R       LDA TEMPP    RESTORE ORIGINAL $LIST ENTRY PT
1551  02044 073601R       STA $LIST 
1552  02045 027617R       JMP L0015-1  GO TO EXIT 


































 PAGE 0039 #01  LINK SUBROUTINE CALL


1554* 
1555  02046 000000  CLINK NOP          ENTRY/EXIT 
1556  02047 016066R       JSB LINK     CALL LINK PROCESSOR
1557  02050 000000  L0090 OCT 0         CODE OF PROGRAM REMOVAL LIST
1558  02051 000000        OCT 0         CODE OF PROGRAM ADDITION LIST 
1559  02052 126046R       JMP CLINK,I  RETURN 







1561* 
1562*           LIST PROCESSOR--ERROR MESSAGES
1563* 



1565* 
1566* 
1567* 
1568  02053 002054R ILSTT DEF *+1      ILLEGAL STATUS ERROR MESSAGE 
1569  02054 177762        DEC -14 
1570  02055 044514        ASC 7,ILLEGAL STATUS
1571  02064 030063  ERMS3 ASC 1,03     ILLEGAL STATUS ERROR CODE
1572  02065 030065  ER5   ASC 1,05     NO SUCH PROG ERROR CODE




































 PAGE 0040 #01  LINK UPDATE PROCESSOR 


1574* 
1575*        THE LINK PROCESSOR SECTION OF THE HP-2116 REAL TIME       *
1576*     EXECUTIVE                                                    *
1577*     1. REMOVES A PROGRAM FROM A LIST                             *
1578*      AND                                                         *
1579*     2. ENTERS THE PROGRAM INTO ANOTHER LIST AT THE PROPER PLACE  *
1580*        ACCORDING TO PRIORITY LEVEL.                              *
1581*                                                                  *
1582* 
1583* 
1584*     CALLING SEQUENCE
1585*         JSB LINK
1586*         OCT CODE1 
1587*         OCT CODE2 
1588*              WHERE
1589*                CODE1 = CODE OF REMOVAL LIST 
1590*                CODE2 = CODE OF INSERTION LIST 
1591*              THE ID SEGMENT IS ASSUMED TO BE LOCATED IN WORK
1592*              AND WLINK AND WPRIO SET
1593* 
1594*                                                                  *
1595*        THE REMOVAL OF PROGRAM FROM A LIST CONSISTS OF:           *
1596*              1. IF I/O LIST (CODE 2), THEN THIS IS SPECIAL CASE  *
1597*                 AND DOES NOT REQUIRE REMOVAL.                    *
1598*              2. IF NULL LIST, THEN ERROR EXIT TAKEN.             *
1599*              3. IF FIRST AND ONLY PROGRAM IN LIST, THEN LIST     *
1600*                 VALUE SET TO ZERO.                               *
1601*              4. IF FIRST PROGRAM IN LIST, BUT NOT THE ONLY       *
1602*                 PROGRAM IN LIST(LINKAGE NOT ZERO), THEN SET LIST *
1603*                 VALUE TO THE LINKAGE VALUE.                      *
1604*              5. IF IN MIDDLE OF LIST, THE LINKAGE OF THE ID SEG  *
1605*                 MENT WHICH POINTS TO THE PROGRAM TO BE REMOVED   *
1606*                 IS SET TO THE LINKAGE VALUE OF THE PROGRAM THAT  *
1607*                 IS REMOVED.                                      *
1608*              6. IF LAST PROGRAM IN LIST, THE LINKAGE VALUE OF    *
1609*                 PREVIOUS PROGRAM IN LIST IS SET TO ZERO.         *
1610* 
1611  02066 000000  LINK  NOP           ENTRY/EXIT
1612  02067 162066R       LDA LINK,I    GET CODE 1 VALUE
1613  02070 053554R       CPA D2
1614  02071 026124R       JMP LK100 
1615  02072 042217R       ADA LLIST     ADD TOP OF LIST POINTER 
1616  02073 073531R       STA TEMP      TOP OF REMOVAL LIST 
1617  02074 163531R       LDA TEMP,I    EXAMINE VALUE OF LIST POINTER 
1618  02075 072220R       STA BUFX
1619  02076 002003        SZA,RSS       CHECK IF NULL LIST
1620  02077 026120R       JMP LK020+1 
1621  02100 053526R       CPA WORK     CHECK IF FIRST PROGRAM IN LIST 
1622  02101 002001        RSS           YES 
1623  02102 026106R       JMP LK010     NO
1624  02103 163527R       LDA WLINK,I   SET TOP OF LIST POINTER TO LINK 
1625  02104 173531R       STA TEMP,I    OF ID SEGMENT - THIS WILL BE 0
1626  02105 026124R       JMP LK100     RETURN
1627  02106 062220R LK010 LDA BUFX
1628  02107 072221R       STA BLINK 
1629  02110 162221R       LDA BLINK,I   CHECK IF LINK WORD POINTS TO WOR







 PAGE 0041 #01  LINK UPDATE PROCESSOR 


1630  02111 053526R       CPA WORK      ID SEGMENT
1631  02112 026122R       JMP LK030     YES 
1632  02113 002003        SZA,RSS       NO, SO CHECK IF AT END OF LIST
1633  02114 026120R       JMP *+4       NOT IN LIST 
1634  02115 072220R       STA BUFX
1635  02116 026106R       JMP LK010     PROCESS NEXT ID SEGMENT 
1636  02117 002400  LK020 CLA          NORMAL RETURN SO CLEAR A REGISTER
1637  02120 036066R       ISZ LINK     INCREMENT EXIT ADDRESS 
1638  02121 126066R       JMP LINK,I    EXIT
1639  02122 163527R LK030 LDA WLINK,I   UPDATE LINKAGE TO BYPASS
1640  02123 172221R       STA BLINK,I   THE ID SEGMENT IN WORK




















































 PAGE 0042 #01  LINK PROCESSOR--ADDING PROGRAM TO A LIST


1642* 
1643*     ADD A PROGRAM TO A LIST 
1644* 
1645*        THE ADDITION OF PROGRAM TO A LIST CONSISTS OF:            *
1646*              1. IF I/O LIST (CODE 2), THEN THIS IS SPECIAL CASE  *
1647*                 AND NO ADDITION MADE TO LIST.                    *
1648*              2. IF NULL LIST, THEN LIST VALUE SET TO POINT TO ID *
1649*                 SEGMENT OF PROGRAM TO BE ADDED AND THE LINKAGE   *
1650*                 SET TO ZERO.                                     *
1651*              3. IF NOT NULL LIST, THE PROGRAM IS INSERTED INTO   *
1652*                 LIST ACCORDING TO PRIORITY LEVEL AND LINKAGES    *
1653*                 CHANGED TO REFLECT THIS INSERTION.               *
1654*              4. IF OF LOWER PRIOR. THAN ANY PROGRAM IN LIST, THEN*
1655*                 LAST LINKAGE IS SET TO POINT TO THE PROGRAM TO   *
1656*                 BE ADDED AND THE PROGRAM LINKAGE IS CLEARED.     *
1657* 
1658  02124 002400  LK100 CLA 
1659  02125 073532R       STA TEMP+1    CLEAR ID SEGMENT POINTER
1660  02126 036066R       ISZ LINK      INCREMENT TO CODE2
1661  02127 162066R       LDA LINK,I    GET CODE 2 VALUE
1662  02130 053554R       CPA D2
1663  02131 026117R       JMP LK020 
1664  02132 042217R       ADA LLIST     ADD TOP OF LIST POINTER 
1665  02133 073531R       STA TEMP      TOP OF ADDITION LIST
1666  02134 163531R       LDA TEMP,I    CHECK IF NULL LIST
1667  02135 072220R       STA BUFX
1668  02136 002002        SZA           YES 
1669  02137 026145R       JMP LK110     NO
1670  02140 063526R       LDA WORK      SET LIST POINTER TO POINT TO
1671  02141 173531R       STA TEMP,I    PROGRAM IN WORK 
1672  02142 002400        CLA           CLEAR LINAGE OF PROGRAM IN
1673  02143 173527R       STA WLINK,I   WORK TO INDICATE END OF LIST
1674  02144 026117R       JMP LK020     RETURN
1675  02145 062220R LK110 LDA BUFX     CHECK IF PROG ALREADY IN LIST
1676  02146 053526R       CPA WORK
1677  02147 026117R       JMP LK020    ALREADY IN LIST-SO RETURN
1678  02150 072221R       STA BLINK 
1679  02151 043557R       ADA D6
1680  02152 073525R       STA BPRIO 
1681  02153 163530R       LDA WPRIO,I   CHECK IF WORK PRIORITY OF LOWER 
1682  02154 003004        CMA,INA       PRIORITY THAN CURRENT ID SEGMENT
1683  02155 143525R       ADA BPRIO,I 
1684  02156 002003        SZA,RSS 
1685  02157 026202R       JMP LK130 
1686  02160 002020        SSA 
1687  02161 026202R       JMP LK130     NO
1688  02162 063532R       LDA TEMP+1    SEE IF FIRST IN LIST
1689  02163 073533R       STA TEMP+2
1690  02164 002002        SZA 
1691  02165 026173R       JMP LK115     NO
1692  02166 063526R       LDA WORK      YES, SO STORE ID SEG ADDR TO
1693  02167 173531R       STA TEMP,I    TOP OF LIST POINTER 
1694  02170 062220R       LDA BUFX      SET LINK OF WORK TO POINT TO
1695  02171 173527R       STA WLINK,I   PREVIOUS TOP OF LIST
1696  02172 026117R       JMP LK020     RETURN
1697  02173 063533R LK115 LDA TEMP+2







 PAGE 0043 #01  LINK PROCESSOR--ADDING PROGRAM TO A LIST


1698  02174 072221R       STA BLINK 
1699  02175 162221R       LDA BLINK,I   MAKE WORK LINK POINT TO PROGRAM 
1700  02176 173527R       STA WLINK,I   FOLLOWING IN LIST 
1701  02177 063526R       LDA WORK      MAKE PREVIOUS LINK POINT TO 
1702  02200 172221R       STA BLINK,I   WORK LINK 
1703  02201 026117R       JMP LK020 
1704  02202 162221R LK130 LDA BLINK,I   CHECK IF AT END OF LIST 
1705  02203 002003        SZA,RSS       NO
1706  02204 026212R       JMP LK140     YES 
1707  02205 062220R       LDA BUFX      SAVE ADDRESS OF ID SEGMENT  
1708  02206 073532R       STA TEMP+1
1709  02207 162221R       LDA BLINK,I   SET CLIST TO ADDRESS OF NEXT
1710  02210 072220R       STA BUFX     ID SEGMENT IN LIST 
1711  02211 026145R       JMP LK110     GO TO WORK ON NEXT SEGMENT
1712  02212 063526R LK140 LDA WORK      PROGRAM TO BE INSERTED AT END OF
1713  02213 172221R       STA BLINK,I   LIST
1714  02214 002400        CLA           CLEAR WLINK TO INDICATE END OF
1715  02215 173527R       STA WLINK,I   LIST
1716  02216 026117R       JMP LK020     GO RESTORE AND RETURN 
1717  02217 001710  LLIST DEF DORMT    TOP OF LIST ADDRESS

1719  02220 000000  BUFX  NOP           TEMP ID SEGMENT ADDRESS 
1720  02221 000000  BLINK NOP           TEMP LINKAGE ADDRESS
1721  02222 000000  WSTAT NOP           WORK STATUS ADDRESS 
1722  02223 177741  DM31  DEC -31 
1723  02224 000100  M100  OCT 100 
1724  02225 001000  M1000 OCT 1000
1725  02226 004000  M4000 OCT 4000
1726  02227 000054  COM   OCT 54
1727  02230 030000  AZERO OCT 30000 

































 PAGE 0044 #01  OPERATOR INPUT MESSAGE PROCESSOR


1729* 
1730*        THE $MESS PROCESSOR SECTION OF HP-2116 REAL TIME EXECUTIVE*
1731*     PROCESSES THE FOLLOWING OPERATOR INPUT REQUESTS:             *
1732*     1. TURN ON A PROGRAM                                         *
1733*           ON,XXXXX                                               *
1734*           ON,XXXXX,NOW                                           *
1735*           ON,XXXXX,P1,...,P5                                     *
1736*           ON,XXXXX,NOW,P1,...,P5                                 *
1737*     2. TURN OFF A PROGRAM                                        *
1738*           OF,XXXXX,P                                             *
1739*     3. OPERATOR SUSPEND A PROGRAM                                *
1740*           SS,XXXXX                                               *
1741*     4. CONTINUE A OPERATOR SUSPENDED PROGRAM                     *
1742*           GO,XXXXX                                               *
1743*           GO,XXXXX,P1,...,P5                                     *
1744*     5. CURRENT STATUS OF A PROGRAM                               *
1745*           ST,XXXXX                                               *
1746*     6. CHANGE PROGRAM ID SEGMENT TIME PARAMETERS.                *
1747*           IT,XXXXX,R,MMM                                         *
1748*           IT,XXXXX,R,MMM,HR,MN                                   *
1749*           IT,XXXXX,R,MMM,HR,MN,SC                                *
1750*           IT,XXXXX,R,MMM,HR,MN,SC,MS                             *
1751*     7. CHANGE PROGRAM PRIORITY                                   *
1752*           PR,XXXXX,ZZ                                            *
1753*     8. SET REAL TIME CLOCK AND START TIME BASE GENERATOR         *
1754*           TM,DAY,HR,MN,SC                                        *
1755*     9. CURRENT REAL TIME CLOCK VALUES                            *
1756*           TI                                                     *
1757*    10. SET A EQUIPMENT DOWN                                      *
1758*           DN,NN                                                  *
1759*    11. SET A EQUIPMENT UP                                        *
1760*           UP,NN                                                  *
1761*    12. LOGICAL UNIT                                              *
1762*           LU,N1                                                  *
1763*           LU,N1,N2                                               *
1764*           LU,N1,N2,N3 
1765*    13. EQUIPMENT STATUS                                          *
1766*           EQ,NN                                                  *
1767*    14. SET SOURCE FILE                                           *
1768*           LS,P1,P2                                               *
1769*    15. SELECT LOAD-AND-GO                                        *
1770*           LG,P                                                   *
1771*    16. CHANGE DEVICE TIME-OUT PARAMETER 
1772*           TO,N1 
1773*           TO,N1,N2
1774*    17. RELEASE PROGRAM'S TRACKS 
1775*           RT,XXXXX
1776* 















 PAGE 0045 #01  OPERATOR INPUT MESSAGE DECIPHER ROUTINE 


1778* 
1779*     CALLING SEQUENCE
1780*         JSB $MESS 
1781*         B CONTAINS NUMBER OF CHARACTERS 
1782* 
1783* 
1784*                                                                  *
1785*        INPUT DECIPHER ROUTINE ROUTINE SCANS THE ASCII OPERATOR   *
1786*     INPUT AND STORES THE DATA INTO PARAMETERS.                   *
1787*        THIS ROUTINE ASSUMES THE CHARACTER COUNT IN B ON ENTRY AND*
1788*    DATA IN BUFFR. COMMA IS USED TO SEPARATE PARAMETERS. A PARA-  *
1789*    METER MAY BE UP TO 6 ASCII CHARACTERS- EXCEPT FOR OP CODE     *
1790*    WHICH MUST BE 2 CHARACTERS. A MAXIMUM OF 40 CHARACTERS MAY BE *
1791*    INPUT. A COUNT IS KEPT OF THE NUMBER OF PARAMETERS INPUT AND  *
1792*    A CHARACTER COUNT IS KEPT FOR EACH PARAMETER. THE VALUES ARE  *
1793*    STORED LEFT ADJUSTED IN THE BUFFERS.                          *
1794*                                                                  *
1795  02231 000000  $MESS NOP          ENTRY/EXIT 
1796  02232 002400        CLA 
1797  02233 073533R       STA TEMP+2    CLEAR CHARACTER FLAG
1798  02234 006003        SZB,RSS      CHECK IF COUNT ZERO
1799  02235 126231R       JMP $MESS,I    YES, SO EXIT 
1800  02236 007004        CMB,INB       COMPLEMENT CHARACTER COUNT
1801  02237 077534R       STB TEMP+3   AND STORE
1802  02240 066223R       LDB DM31     CLEAR PARAMETER AREA 
1803  02241 077531R       STB TEMP
1804  02242 066125R       LDB PARPT 
1805  02243 170001        STA B,I 
1806  02244 006004        INB 
1807  02245 037531R       ISZ TEMP
1808  02246 026243R       JMP *-3 
1809  02247 066717R       LDB BUFAD     LOAD B WITH INPUT BUFFER ADDRESS
1810  02250 004066        CLE,ELB 
1811  02251 076171R       STB TEMPP 
1812  02252 062114R       LDA INIT     INITIALIZE CURRENT 
1813  02253 073536R       STA TEMP+5    PARAMETER POINTER 
1814  02254 163536R       LDA TEMP+5,I
1815  02255 073535R       STA TEMP+4    INITIALIZE STORE POINTER
1816  02256 043074R       ADA DM1 
1817  02257 073537R       STA TEMP+6   PARAMETER CHARACTER COUNT ADDR 
1818  02260 002400        CLA 
1819  02261 173537R       STA TEMP+6,I CLEAR PARAMETER CHARACTER COUNT
1820  02262 066171R DEC10 LDB TEMPP 
1821  02263 004065        CLE,ERB 
1822  02264 160001        LDA B,I 
1823  02265 002041        SEZ,RSS       CHECK IF TO EXAMINE UPPER/LOWER 
1824  02266 001727        ALF,ALF       UPPER, SO ROTATE TO LOWER BITS
1825  02267 013600R       AND M377      MASK OFF ALL BUT LOW ORDER
1826  02270 052227R       CPA COM       SEE IF A COMMA
1827  02271 026327R       JMP DEC60     YES 
1828  02272 052165R       CPA LASCI    CHECK IF BLANK CHARACTER 
1829  02273 026322R       JMP DEC50    YES, SO SKIP CHARACTER 
1830  02274 073532R       STA TEMP+1    NO, SO GO TO CONTINUE PROCESSING
1831  02275 163537R       LDA TEMP+6,I ADD -1 TO CHARACTER COUNT
1832  02276 043074R       ADA DM1 
1833  02277 173537R       STA TEMP+6,I







 PAGE 0046 #01  OPERATOR INPUT MESSAGE DECIPHER ROUTINE 


1834  02300 063533R       LDA TEMP+2    CHECK IF TO BE UPPER/LOWER CHARA
1835  02301 002002        SZA           UPPER 
1836  02302 026314R       JMP DEC40     LOWER 
1837  02303 066171R       LDB TEMPP 
1838  02304 004065        CLE,ERB 
1839  02305 160001        LDA B,I       LOAD DATA WORD INTO A 
1840  02306 002040        SEZ           CHECK IF UPPER/LOWER DATA CHARAC
1841  02307 001727        ALF,ALF       LOWER SO PUT INTO UPPER CHARACTE
1842  02310 012170R       AND MASKU     MASK ALL BUT UPPER CHARACTER
1843  02311 073531R       STA TEMP      STORE IN TEMPORARY
1844  02312 037533R       ISZ TEMP+2    SET FLAG TO LOWER CHARACTER 
1845  02313 026322R       JMP DEC50     GO TO INCREMENT DATA CHARACTER
1846  02314 063532R DEC40 LDA TEMP+1    XOR TOGETHER LOWER AND
1847  02315 023531R       XOR TEMP      UPPER CHARACTER AND 
1848  02316 173535R       STA TEMP+4,I  STORE 
1849  02317 002400        CLA 
1850  02320 073533R       STA TEMP+2    RESET FLAG TO UPPER CHARACTER 
1851  02321 037535R       ISZ TEMP+4    INCREMENT STORE LOCATION
1852  02322 036171R DEC50 ISZ TEMPP    INCREMENT BUFFER ADDRESS 
1853  02323 037534R       ISZ TEMP+3   INCREMENT CHARACTER COUNT
1854  02324 026262R       JMP DEC10     GO TO PROCESS NEXT CHARACTER
1855  02325 036126R       ISZ PARAM    INCREMENT PARAMETER COUNT
1856  02326 026362R       JMP DEC80     GO TO EXIT
1857  02327 063533R DEC60 LDA TEMP+2    CHECK IF UPPER CHARACTER STORED 
1858  02330 002002        SZA 
1859  02331 026342R       JMP DEC65    YES
1860  02332 163537R       LDA TEMP+6,I NO, SO CHECK IF NO CHAR STORED 
1861  02333 002002        SZA 
1862  02334 026346R       JMP DEC70 
1863  02335 003400        CCA          SET CHAR COUNT TO -1 
1864  02336 173537R       STA TEMP+6,I
1865  02337 062230R       LDA AZERO    STORE ASCII 0 INTO BUFFER
1866  02340 173535R       STA TEMP+4,I
1867  02341 026346R       JMP DEC70    GO TO NEXT PARAMETER 
1868  02342 063531R DEC65 LDA TEMP     STORE CHAR INTO BUFFER 
1869  02343 173535R       STA TEMP+4,I
1870  02344 002400        CLA 
1871  02345 073533R       STA TEMP+2    RESET UPPER CHARACTER FLAG
1872  02346 037536R DEC70 ISZ TEMP+5    INCREMENT PARAMETER POINTER 
1873  02347 036126R       ISZ PARAM 
1874  02350 062126R       LDA PARAM 
1875  02351 053561R       CPA D8
1876  02352 026377R       JMP M0000 
1877  02353 163536R       LDA TEMP+5,I
1878  02354 073535R       STA TEMP+4
1879  02355 043074R       ADA DM1 
1880  02356 073537R       STA TEMP+6   PARAMETER CHARACTER COUNT ADDR 
1881  02357 002400        CLA 
1882  02360 173537R       STA TEMP+6,I CLEAR PARAM CHARACTER COUNT
1883  02361 026322R       JMP DEC50     GO TO INCREMENT DATA BUFFER 
1884  02362 063533R DEC80 LDA TEMP+2    CHECK IF THERE IS CHARACTER 
1885  02363 002002        SZA          PROCESSED
1886  02364 026375R       JMP DEC90    YES, SO GO STORE 
1887  02365 163537R       LDA TEMP+6,I NO, SO CHECK IF NO CHAR STORED 
1888  02366 002002        SZA 
1889  02367 026377R       JMP M0000    CHAR STORED , SO GO PROCESS







 PAGE 0047 #01  OPERATOR INPUT MESSAGE DECIPHER ROUTINE 


1890  02370 003400        CCA 
1891  02371 173537R       STA TEMP+6,I NONE STORED, SO SET TO -1
1892  02372 062230R       LDA AZERO 
1893  02373 173535R       STA TEMP+4,I STORE ASCII 0 INTO BUFFER
1894  02374 026377R       JMP M0000    GO TO PROCESS INPUT
1895  02375 063531R DEC90 LDA TEMP     STORE CHARACTER INTO BUFFER
1896  02376 173535R       STA TEMP+4,I
























































 PAGE 0048 #01  MESSAGE PROCESSOR--OP REQUEST SEARCH


1898* 
1899*        THIS SECTION CHECKS THE OPERATOR REQUEST CODE AGAINST THE *
1900*    LEGAL REQUEST CODES AND JUMPS TO THE PROPER PROCESSOR.        *
1901********************************************************************
1902*    TO ADD NEW REQUEST ONE MERELY,                                *
1903*        A. CHANGES WORD -OPCNT-                                   *
1904*        B. ADDS ASCII OPERATION CODE TO TABLE -LDOPC-             *
1905*        C. ADDS PROCESSOR START ADDRESS TO TABLE -LDJMP-          *
1906*        D. ADDS PROCESSOR CODING TO PROCESS THE REQUEST.          *
1907********************************************************************
1908* 
1909  02377 066130R M0000 LDB OP         OPERATION CODE INTO A
1910  02400 056423R       CPB TI         CHECK IF IT IS 'TI'
1911  02401 027547R       JMP M0750      IF SO, GO TO 'TI' PROCESSOR
1912  02402 062424R       LDA OPCNT      SET OPERATION COUNTER
1913  02403 073531R       STA TEMP
1914  02404 062425R       LDA LDOPC     SET OPERATION TABLE POINTER 
1915  02405 073532R       STA TEMP+1
1916  02406 062446R       LDA LDJMP     SET OPERATION PROC. JUMP ADDRESS
1917  02407 073533R       STA TEMP+2
1918  02410 002404        CLA,INA      CHECK IF ONLY ONE PARAMETER
1919  02411 052126R       CPA PARAM 
1920  02412 027676R       JMP M0950    ERROR, ONLY ONE PARAMETER
1921  02413 157532R M0030 CPB TEMP+1,I  COMPARE WITH TABLE VALUE
1922  02414 026467R       JMP M0040     COMPARES
1923  02415 037532R       ISZ TEMP+1    DOES NOT COMPARE-INCREMENT OP TA
1924  02416 037533R       ISZ TEMP+2                     INCREMENT JUMP 
1925  02417 037531R       ISZ TEMP                       INCREMENT COUNT
1926  02420 026413R       JMP M0030     GO TO COMPARE NEXT OP CODE
1927  02421 062173R       LDA OPERR     ILLEGAL OPERATION CODE REQUEST
1928  02422 126231R       JMP $MESS,I 
1929* 
1930  02423 052111  TI    ASC 1,TI       SYSTEM TIME REQUEST
1931  02424 177760  OPCNT DEC -16       OP CODE COUNT 
1932  02425 002426R LDOPC DEF *+1       OPERATION CODE TABLE ADDRESS
1933  02426 051124        ASC 16,RTONOFSSGOSTPRITTMDNUPLUEQLSLGTO 
1934  02446 002447R LDJMP DEF *+1       JUMP ADDRESS FOR EACH OPER. CODE
1935  02447 002471R       DEF M0070     RELEASE PROGRAM'S TRACKS
1936  02450 002503R       DEF M0100     TURN ON 
1937  02451 002625R       DEF M0200     TURN OFF
1938  02452 003077R       DEF M0300     OPERATOR SUSPEND
1939  02453 003121R       DEF M0400     REMOVE OPERATOR SUSPEND 
1940  02454 003157R       DEF M0500     STATUS
1941  02455 003455R       DEF M0650     PRIORITY CHANGE 
1942  02456 003316R       DEF M0600     INTERVAL TIME CHANGE
1943  02457 003503R       DEF M0700    REAL TIME CLOCK INITIALIZATION 
1944  02460 003612R       DEF M0780    DN REQUEST 
1945  02461 003616R       DEF M0800    UP REQUEST 
1946  02462 003622R       DEF M0850    LU REQUEST 
1947  02463 003672R       DEF M0900    EQ REQUEST 
1948  02464 003700R       DEF M0960     LS REQUEST
1949  02465 003735R       DEF M0970     LG REQUEST
1950  02466 004110R       DEF M0990     TO REQUEST
1951* 
1952  02467 167533R M0040 LDB TEMP+2,I
1953  02470 124001        JMP B,I      TRANSFER TO DESIRED PROCESSOR







 PAGE 0049 #01  MESSAGE PROCESSOR--RT,XXXXX COMMAND


1955* 
1956*     RT,XXXXX
1957* 
1958*         THE RELEASE TRACKS ROUTINE FUNCTIONS AS FOLLOWS:
1959*               IF PROGRAM STATUS NOT DORMANT, STATUS ERROR.
1960*               IF DORMANT, ALL TRACKS ASSIGNED TO THAT PROGRAM 
1961*                   ARE RELEASED - ALL PROGRAMS IN DISC TRACK 
1962*                   ALLOCATION SUSPENSION ARE RESCHEDULED.
1963* 
1964  02471 016313R M0070 JSB TTNAM     GO FIND ID SEGMENT ADDRESS
1965  02472 043564R       ADA D15 
1966  02473 160000        LDA A,I       STATUS
1967  02474 013564R       AND D15 
1968  02475 002002        SZA           PROGRAM MUST BE DORMANT 
1969  02476 027136R       JMP M0410-3    ILLEGAL STATUS ERROR-
1970  02477 063526R       LDA WORK      GET ID SEGMENT ADDRESS
1971  02500 016006X       JSB $OTRL     GO RELEASE ITS TRACKS 
1972  02501 016013X       JSB $SDSK     RESCHEDULE DISC-SUSP PROGRAMS 
1973  02502 027063R       JMP M0230     RETURN- 












































 PAGE 0050 #01  MESSAGE PROCESSOR--ON,XXXXX COMMAND 


1975* 
1976*     ON,XXXXX
1977*     ON,XXXXX,NOW
1978*     ON,XXXXX,P1,...,P5
1979*     ON,XXXXX,NOW,P1,...,P5
1980* 
1981*        THE ON REQUEST FUNCTIONS AS FOLLOWS:                      *
1982*              IF NO RESOLUTION CODE, THEN PROGRAM SCHEDULED.      *
1983*              IF -NOW- OPTION, THEN ENTER PROGRAM INTO TIME LIST  *
1984*                   AND SET TIME VALUES TO CURRENT TIME PLUS 10 MSC*
1985*              IF NOT ONE OF ABOVE, AND TIME VALUES ARE ZERO THEN  *
1986*                   PROGRAM FUNCTIONS SAME AS -NOW- OPTION.        *
1987*              IF NOT ONE OF ABOVE, AND TIME VALUES ARE PRESENT,   *
1988*                   THEN PROGRAM IS ADDED TO TIME LIST.            *
1989*              NOTE: ALL THE ABOVE OPTIONS ALLOW PARAMETERS TO BE  *
1990*                   PASSED TO THE PROGRAM. THESE MUST BE ASCII     *
1991*                   DECIMAL NUMBERS WHICH ARE CONVERTED TO BINARY  *
1992*                   AND STORED IN ID SEGMENT TEMP AREA. UPON       *
1993*                   EXECUTION, THE B REGISTER WILL POINT TO TEMP.  *
1994*                   UP TO 5 PARAMETERS MAY BE INPUT. IF NO PARA-   *
1995*                   METERS ARE INPUT, THE TEMP AREA ARE ZEROS BUT  *
1996*                   B REGISTER WILL STILL POINT TO TEMP. AREA      *
1997*                                                                  *
1998  02503 016313R M0100 JSB TTNAM    FIND ID SEGMENT ADDR 
1999  02504 043564R       ADA D15      CHECK IF PROGRAM DORMANT 
2000  02505 160000        LDA A,I 
2001  02506 002002        SZA 
2002  02507 027136R       JMP M0410-3  ILLEGAL STATUS ERROR 
2003  02510 067526R       LDB WORK
2004  02511 047565R       ADB D17      COMPUTE RES/T/MULT ADDR
2005  02512 160001        LDA B,I 
2006  02513 001723        ALF,RAR 
2007  02514 013560R       AND D7       CHECK RESOLUTION CODE
2008  02515 002002        SZA          NONE, SO GO TO SCHED NOW 
2009  02516 026524R       JMP M0110 
2010  02517 016223R       JSB PLOAD    GO TO PROCESS CONTROL PARAMETERS 
2011  02520 017601R       JSB $LIST    SCHEDULE PROGRAM 
2012  02521 000301        OCT 301 
2013  02522 001526R       DEF WORK
2014  02523 126231R       JMP $MESS,I  RETURN 
2015  02524 062136R M0110 LDA P2
2016  02525 052205R       CPA NOPRG+2   CHECK IF -NOW- OPTION 
2017  02526 026554R       JMP M0130 
2018* 
2019*                  CHECK IF NON ZERO ID SEGMENT TIME VALUES 
2020* 
2021  02527 067526R       LDB WORK      COMPUTE ID SEGMENT TIME ADDRESS 
2022  02530 047073R       ADB D18 
2023  02531 160001        LDA B,I       TENS OF MILLISECOND VALUE 
2024  02532 042576R       ADA D100
2025  02533 002002        SZA 
2026  02534 026617R       JMP M0135    NOT ZERO, SO ENTER IN TIME LIST
2027  02535 006004        INB 
2028  02536 160001        LDA B,I       SECONDS VALUE 
2029  02537 043573R       ADA D60 
2030  02540 002002        SZA 







 PAGE 0051 #01  MESSAGE PROCESSOR--ON,XXXXX COMMAND 


2031  02541 026617R       JMP M0135    NOT ZERO, SO ENTER IN TIME LIST
2032  02542 006004        INB 
2033  02543 160001        LDA B,I       MINUTES VALUE 
2034  02544 043573R       ADA D60 
2035  02545 002002        SZA 
2036  02546 026617R       JMP M0135    NOT ZERO, SO ENTER IN TIME LIST
2037  02547 006004        INB 
2038  02550 160001        LDA B,I       HOURS VALUE 
2039  02551 043570R       ADA D24 
2040  02552 002002        SZA 
2041  02553 026617R       JMP M0135    NOT ZERO, SO ENTER IN TIME LIST
2042  02554 067526R M0130 LDB WORK     STORE CURRENT TIME + 10 MSEC 
2043  02555 047073R       ADB D18      INTO ID SEGMENT TIME VALUES
2044  02556 062142R       LDA TMS      STORE TMS+1 INTO ID SEGMENT
2045  02557 002004        INA 
2046  02560 170001        STA B,I 
2047  02561 006004        INB 
2048  02562 062143R       LDA SECS     STORE SECS INTO ID SEGMENT 
2049  02563 170001        STA B,I 
2050  02564 006004        INB 
2051  02565 062144R       LDA MINS     STORE MINS INTO IDS SEGMENT
2052  02566 170001        STA B,I 
2053  02567 006004        INB 
2054  02570 062145R       LDA HRS      STORE HRS INTO ID SEGMENT
2055  02571 170001        STA B,I 
2056  02572 067526R       LDB WORK     CHECK IF TMS+1 OVERFLOWS INTO SEC
2057  02573 047073R       ADB D18 
2058  02574 160001        LDA B,I 
2059  02575 002002        SZA 
2060  02576 026617R       JMP M0135 
2061  02577 062571R       LDA DM100    SET ID SEGMENT TMS = 0 
2062  02600 170001        STA B,I 
2063  02601 006004        INB 
2064  02602 134001        ISZ B,I 
2065  02603 026617R       JMP M0135 
2066  02604 063076R       LDA DM60     SET ID SEGMENT SECS = 0
2067  02605 170001        STA B,I 
2068  02606 006004        INB 
2069  02607 134001        ISZ B,I 
2070  02610 026617R       JMP M0135 
2071  02611 170001        STA B,I      SET ID SEGMENT MINS = 0
2072  02612 006004        INB 
2073  02613 134001        ISZ B,I 
2074  02614 026617R       JMP M0135 
2075  02615 063075R       LDA DM24     SET ID SEGMENT HRS = 0 
2076  02616 170001        STA B,I 
2077  02617 016223R M0135 JSB PLOAD    GO TO PROCESS CONTROL PARAMETERS 
2078  02620 067526R       LDB WORK
2079  02621 047072R       ADB D16 
2080  02622 016401R       JSB $TADD    ADD PROGRAM TO TIME LIST 
2081  02623 002400        CLA 
2082  02624 126231R       JMP $MESS,I  RETURN 











 PAGE 0052 #01  MESSAGE PROCESSOR--OF,XXXXX COMMAND 


2084* 
2085*     OF,XXXXX
2086*     OF,XXXXX,1    "ABORT" 
2087*     OF,XXXXX,8    "ABORT AND REMOVE FROM SYSTEM"
2088* 
2089*        THE OF REQUEST FUNCTIONS AS FOLLOWS:                      *
2090*              IF PROGRAM DORMANT, IT MAY STILL BE IN TIME LIST SO *
2091*                   A CALL IS MADE TO REMOVE PROGRAM FROM TIME LIST*
2092*                   IF ABORT OPTION 1, THEN $ABRT PROCESSOR IS     *
2093*                   CALLED. IF ABORT OPTION 8, IN ADDITION TO      *
2094*                   $ABRT PROCESSOR BEING CALLED, IF BIT 7 OF THE  *
2095*                   TYPE FIELD IS SET, THEN TRACK(S) WHERE PROGRAM *
2096*                   IS STORED IS ALSO RELEASED BY $DREL. THE NAME  *
2097*                   FIELD IN THE ID SEGMENT IS CLEARED SO THAT THE *
2098*                   PROGRAM CANNOT BE CALLED AGAIN.                *
2099*              IF PROGRAM SCHEDULED OR OPERATOR-SUSPENDED, THEN    *
2100*                   DORMANT REQUEST MADE VIA LIST PROCESSOR AND    *
2101*                   PROCEED AS ABOVE.                              *
2102*              IF PROGRAM STATUS NOT ONE OF ABOVE, THE DORMANT BIT *
2103*                   IS SET IN STATUS, IF NOT ABORT OPTION. IF ABORT*
2104*                   OPTION, CHECK IF AVAILABLE MEMORY OR UNAVAILABL*
2105*                   DISC TRACK SUSPENSION-IN WHICH CASE THE ABORT  *
2106*                   BIT IS SET AND $ABRT CALLED. IF STATUS IS I/O  *
2107*                   SUSPENSION, SET ABORT BIT AND RETURN.          *
2108*                   IF INPUT SUSPENSION, CHECK IF                  *
2109*                   PROGRAM BEING READ IN FROM DISC. IF YES, THEN  *
2110*                   SET ABORT BIT AND RETURN. IF NOT BEING READ IN *
2111*                   FROM DISC, SET ABORT BIT AND CALL $IOCL TO     *
2112*                   CLEAR THE I/O REQUEST                          *
2113*                                                                  *
2114  02625 016313R M0200 JSB TTNAM    GO TO FIND ID SEG ADDR 
2115  02626 043564R       ADA D15 
2116  02627 072222R       STA WSTAT    STATUS ADDRESS 
2117  02630 162222R       LDA WSTAT,I 
2118  02631 013564R       AND D15 
2119  02632 002002        SZA           CHECK IF PROGRAM DORMANT
2120  02633 053574R       CPA M1        CHECK IF PROGRAM SCHEDULED
2121  02634 026713R       JMP M0210     SCHEDULED--SO GO TO MAKE DORMANT
2122  02635 053557R       CPA D6        CHECK IF PROGRAM OPERATOR SUSPEN
2123  02636 026713R       JMP M0210     OPERATOR SUSPENDED--SO MAKE DORM
2124  02637 062126R       LDA PARAM     CHECK # OF PARAMETERS 
2125  02640 003004        CMA,INA 
2126  02641 043554R       ADA D2
2127  02642 002003        SZA,RSS       2, NORMAL OFF COMMAND 
2128  02643 026651R       JMP M0204      GO TO SET DORMANT BIT
2129  02644 016415R       JSB CVT1      CONVERT 3RD PARAMETER 
2130  02645 004136R       DEF P2
2131  02646 004135R       DEF CP2 
2132  02647 002002        SZA           IF 0, SET DORMANT BIT.
2133  02650 026655R       JMP M0205     PARAMETER > 0.
2134  02651 162222R M0204 LDA WSTAT,I   NORMAL "OFF", 
2135  02652 032224R       IOR M100     SO SET DORMANT BIT 
2136  02653 172222R       STA WSTAT,I   IN STATUS AND RESTORE 
2137  02654 026716R       JMP M0220    GO REMOVE FROM TIME LIST 
2138  02655 162222R M0205 LDA WSTAT,I 
2139  02656 013564R       AND D15 







 PAGE 0053 #01  MESSAGE PROCESSOR--OF,XXXXX COMMAND 


2140  02657 053555R       CPA D4        CHECK IF AVAILABLE MEMORY SUSP
2141  02660 026716R       JMP M0220         YES, SO GO CALL ABORT 
2142  02661 053556R       CPA D5        CHECK IF DISC ALLOCATION SUSP 
2143  02662 026716R       JMP M0220         YES, SO GO CALL ABORT 
2144  02663 053554R       CPA D2
2145  02664 026672R       JMP M0207          YES, SO GO CHECK IF INPUT
2146  02665 162222R M0206 LDA WSTAT,I        NO, SO SET ABORT BIT 
2147  02666 032226R       IOR M4000 
2148  02667 172222R       STA WSTAT,I 
2149  02670 002400        CLA 
2150  02671 126231R       JMP $MESS,I        RETURN 
2151  02672 063526R M0207 LDA WORK      CHECK IF PROGRAM IS CURRENT 
2152  02673 053512R       CPA BKRES          BACKGROUND DISC RESIDENT 
2153  02674 002001        RSS 
2154  02675 026706R       JMP M0208               NO, SO TEST IF RT DISC
2155  02676 067513R       LDB BKRES+1   CHECK IF IT IS BEING READ IN
2156  02677 006003  MX208 SZB,RSS           NO, SO GO CLEAR I/O REQUEST 
2157  02700 026665R       JMP M0206          YES, SO SET ABORT BIT
2158  02701 162222R MY208 LDA WSTAT,I  SET ABORT BIT INTO 
2159  02702 032226R       IOR M4000         CURRENT STATUS
2160  02703 172222R       STA WSTAT,I 
2161  02704 063526R       LDA WORK
2162  02705 026014X       JMP $IOCL    GO CLEAR I/O REQUEST 
2163  02706 053514R M0208 CPA RDISK    CHECK IF PROG IS CURRENT 
2164  02707 002001        RSS               RT DISC RESIDENT
2165  02710 026701R       JMP MY208    NO, SO GO CLEAR I/O REQUEST
2166  02711 067515R       LDB RDISK+1 
2167  02712 026677R       JMP MX208         GO CHECK IF READING IN PROGR
2168  02713 017601R M0210 JSB $LIST    CALL $LIST TO CHANGE 
2169  02714 000300        OCT 300       SCHED AND OPERATOR SUSP INTO
2170  02715 001526R       DEF WORK      DORMANT LIST
2171  02716 067526R M0220 LDB WORK
2172  02717 077067R       STB TEMPH 
2173  02720 047072R       ADB D16 
2174  02721 016434R       JSB $TREM    REMOVE PROGRAM FROM TIME LIST
2175  02722 067526R       LDB WORK
2176  02723 047563R       ADB D14 
2177  02724 160001        LDA B,I        IF RT DISC RES 
2178  02725 067526R       LDB WORK       RELEASE SWAP 
2179  02726 073066R       STA TEMPL      TRACKS.
2180  02727 013577R       AND M177
2181  02730 053554R       CPA D2
2182  02731 017266R       JSB DREL
2183  02732 062126R       LDA PARAM    IF 3 PARAMETERS, GO TO RELEASE 
2184  02733 003004        CMA,INA      ALL TRACKS, ETC
2185  02734 043554R       ADA D2
2186  02735 002003        SZA,RSS      CHECK IF ABORT 
2187  02736 126231R       JMP $MESS,I  NO, SO RETURN
2188  02737 016415R       JSB CVT1      CONVERT PARAMETER 
2189  02740 004136R       DEF P2
2190  02741 004135R       DEF CP2 
2191  02742 002003        SZA,RSS       IF 0, EXIT IMMEDIATELY
2192  02743 126231R       JMP $MESS,I 
2193  02744 073065R       STA TEMPZ 
2194  02745 162222R       LDA WSTAT,I 
2195  02746 032226R       IOR M4000 







 PAGE 0054 #01  MESSAGE PROCESSOR--OF,XXXXX COMMAND 


2196  02747 172222R       STA WSTAT,I 
2197  02750 063067R       LDA TEMPH 
2198  02751 016010X       JSB $ABRT    GO TO ABORT ROUTINE
2199  02752 063065R       LDA TEMPZ      RELEASE PROG'S TRACKS? 
2200  02753 053561R       CPA D8        IF P = 8, 
2201  02754 002001        RSS           YES 
2202  02755 027063R       JMP M0230     NO-SO RETURN VIA $MESS,I
2203  02756 063066R       LDA TEMPL 
2204  02757 001727        ALF,ALF       CHECK IF TYPE BIT 7 SET 
2205  02760 002021        SSA,RSS 
2206  02761 027053R       JMP M0227     NO-CANNOT REL PROG TRACKS 
2207  02762 067067R       LDB TEMPH     YES-COMPUTE AND REL PROG TRACKS 
2208  02763 047566R       ADB D22 
2209  02764 160001        LDA B,I 
2210  02765 003004        CMA,INA 
2211  02766 006004        INB 
2212  02767 140001        ADA B,I 
2213  02770 073534R       STA TEMP+3    # WORDS OF MAIN 
2214  02771 006004        INB 
2215  02772 160001        LDA B,I 
2216  02773 003004        CMA,INA 
2217  02774 006004        INB 
2218  02775 140001        ADA B,I 
2219  02776 006400        CLB 
2220  02777 100112        RRL 10
2221  03000 002002        SZA 
2222  03001 006004        INB 
2223  03002 077535R       STB TEMP+4    # SECTORS OF BASE 
2224  03003 063534R       LDA TEMP+3
2225  03004 006400        CLB 
2226  03005 100112        RRL 10
2227  03006 002002        SZA 
2228  03007 006004        INB 
2229  03010 047535R       ADB TEMP+4    # SECTORS IN PROG MAIN
2230  03011 077536R       STB TEMP+5    TOTAL # SECTORS IN PROGRAM
2231  03012 067067R       LDB TEMPH 
2232  03013 047571R       ADB D26 
2233  03014 160001        LDA B,I 
2234  03015 013577R       AND M177
2235  03016 043536R       ADA TEMP+5
2236  03017 073531R       STA TEMP      STARTING SECTOR # + # SECTORS IN
2237  03020 160001        LDA B,I            PROGRAM MAIN AND BASE
2238  03021 073532R       STA TEMP+1
2239  03022 001727        ALF,ALF 
2240  03023 001200        RAL 
2241  03024 013600R       AND M377
2242  03025 164001        LDB B,I       CHECK IF LU 2 OR 3
2243  03026 006020        SSB                LU 2 
2244  03027 041756        ADA TATSD          LU 3 
2245  03030 073533R       STA TEMP+2    ACTUAL STARTING TRACK # 
2246  03031 065757        LDB SECT2 
2247  03032 063532R       LDA TEMP+1    CHECK IF LU 2 OR 3 SO CAN DIVIDE
2248  03033 002020        SSA                BY # OF TRACKS FOR THAT
2249  03034 065760        LDB SECT3        DISC.
2250  03035 077532R       STB TEMP+1
2251  03036 063531R       LDA TEMP      (A)=START SECT + # SECT PROG







 PAGE 0055 #01  MESSAGE PROCESSOR--OF,XXXXX COMMAND 


2252  03037 006400        CLB                MAIN AND BASE
2253  03040 100400        DIV TEMP+1
2254  03042 006002        SZB           CHECK IF PARTIAL TRACK
2255  03043 002004        INA                YES
2256  03044 070001        STA B         (B)=# TRACKS
2257  03045 063533R       LDA TEMP+2    (A)=STARTING TRACK
2258  03046 016007X       JSB $DREL     CALL EXEC SYS RELEASE TRACKS
2259  03047 067067R       LDB TEMPH     CLEAR DISC
2260  03050 047571R       ADB D26        TRACK WORD                    $
2261  03051 002400        CLA            FOR RELEASED TRACKS.          $
2262  03052 170001        STA B,I                                      $
2263  03053 067067R M0227 LDB TEMPH 
2264  03054 047070R       ADB D12 
2265  03055 002400        CLA 
2266  03056 170001        STA B,I 
2267  03057 006004        INB 
2268  03060 170001        STA B,I 
2269  03061 006004        INB 
2270  03062 170001        STA B,I 
2271  03063 002400  M0230 CLA          NORMAL RETURN, SO CLEAR A REGISTE
2272  03064 126231R       JMP $MESS,I  RETURN 

2274  03065 000000  TEMPZ NOP 
2275  03066 000000  TEMPL NOP 
2276  03067 000000  TEMPH NOP 
2277  03070 000014  D12   DEC 12
2278  03071 000015  D13   DEC 13
2279  03072 000020  D16   DEC 16
2280  03073 000022  D18   DEC 18
2281  03074 177777  DM1   DEC -1
2282  03075 177750  DM24  DEC -24 
2283  03076 177704  DM60  DEC -60 































 PAGE 0056 #01  MESSAGE PROCESSOR--SS,XXXXX COMMAND 


2285* 
2286*    SS,XXXXX  PROCESSOR
2287* 
2288*        THE SUSPEND REQUEST FUNCTIONS AS FOLLOWS:                 *
2289*              IF PROGRAM DORMANT OR OPERATOR SUSPENDED, THEN      *
2290*                   ILLEGAL STATUS ERROR                           *
2291*              IF SCHEDULED, THEN OPERATOR SUSPEND VIA $LIST       *
2292*              IF OTHER THAN ABOVE, SET THE OPERATOR-SUSPEND BIT   *
2293*                   IN STATUS.                                     *
2294*                                                                  *
2295  03077 016313R M0300 JSB TTNAM    GO TO FIND ID SEG ADDR 
2296  03100 043564R       ADA D15 
2297  03101 072222R       STA WSTAT    STATUS ADDRESS 
2298  03102 162222R       LDA WSTAT,I 
2299  03103 002003        SZA,RSS      CHECK IF PROGRAM DORMANT 
2300  03104 027136R       JMP M0410-3  DORMANT, SO ILLEGAL STATUS ERROR 
2301  03105 053557R       CPA D6        CHECK IF PROGRAM OPERATOR SUSPEN
2302  03106 027063R       JMP M0230 
2303  03107 053574R       CPA M1        CHECK IF PROGRAM SCHEDULED
2304  03110 027115R       JMP M0310     PROG SCHEDULED SO MAKE DORMANT
2305  03111 162222R       LDA WSTAT,I   PROG SUSPENDED (NOT OPERATOR) 
2306  03112 032225R       IOR M1000     SO SET OPER SUSP BIT IN STATUS
2307  03113 172222R       STA WSTAT,I 
2308  03114 027063R       JMP M0230    GO TO EXIT 
2309  03115 017601R M0310 JSB $LIST 
2310  03116 000306        OCT 306       SCHED TO OPER-SUSP
2311  03117 001526R       DEF WORK
2312  03120 126231R       JMP $MESS,I  EXIT 



































 PAGE 0057 #01  MESSAGE PROCESSOR--GO COMMAND 


2314* 
2315*     GO,XXXXX
2316*     GO,XXXXX,P1,...,P5
2317*                                                                  *
2318*        THE CONTINUE FROM POINT OF SUSPENSION FUNCTIONS AS        *
2319*        FOLLOWS:                                                  *
2320*              IF NOT OPERATOR SUSPEND: 
2321*                    BIT SET - REMOVE OPER-SUSP BIT IN STATUS 
2322*                    BIT NOT SET - ERROR EXIT FOR MESSAGE 
2323*              IF OPERATOR SUSPEND, SCHEDULE PROGRAM
2324* 
2325  03121 016313R M0400 JSB TTNAM    GO TO FIND ID SEG ADDR 
2326  03122 043564R       ADA D15 
2327  03123 072222R       STA WSTAT    STATUS ADDR
2328  03124 162222R       LDA WSTAT,I 
2329  03125 013564R       AND D15 
2330  03126 053557R       CPA D6        CHECK IF PROGRAM OPERATOR-SUSPEN
2331  03127 027141R       JMP M0410     OPERATOR-SUSPEND--SO GO TO PROCE
2332  03130 162222R       LDA WSTAT,I   NOT OPER SUSP - 
2333  03131 012225R       AND M1000      IS BIT SET?
2334  03132 002003        SZA,RSS 
2335  03133 027136R       JMP *+3       NO, ERROR-
2336  03134 122222R       XOR WSTAT,I   YES, CLEAR BIT
2337  03135 027113R       JMP M0310-2 
2338  03136 062053R       LDA ILSTT    ILLEGAL STATUS MESSAGE ADDRESS 
2339  03137 066064R       LDB ERMS3    ILLEGAL STATUS ERROR CODE
2340  03140 126231R       JMP $MESS,I  EXIT 
2341  03141 063554R M0410 LDA D2       CHECK IF CONTROL PARAMETERS FOLLO
2342  03142 052126R       CPA PARAM 
2343  03143 002001        RSS          NO 
2344  03144 016223R       JSB PLOAD    GO TO PROCESS CONTROL PARAMETERS 
2345  03145 002404  M0415 CLA,INA      SCHEDULE PROG THRU LINK PROCESSOR
2346  03146 172222R       STA WSTAT,I   SINCE LIST WILL NOT SCHEDULE
2347  03147 063526R       LDA WORK
2348  03150 073527R       STA WLINK 
2349  03151 043557R       ADA D6
2350  03152 073530R       STA WPRIO 
2351  03153 016066R       JSB LINK      A OPERATOR SUSPENDED PROGRAM
2352  03154 000006        OCT 6 
2353  03155 000001        OCT 1 
2354  03156 126231R       JMP $MESS,I  RETURN 






















 PAGE 0058 #01  MESSAGE PROCESSOR--ST,XXXXX COMMAND 


2356* 
2357*    ST,XXXXX  PROCESSOR
2358* 
2359*        THE STATUS REQUEST OUTPUTS THE REQUESTED PROGRAM STATUS   *
2360*        IN THE FOLLOWING FORMAT:                                  *
2361*              PR S R MMM HR MN SC MS T                            *
2362*                                                                  *
2363*              PR =PRIORITY                                        *
2364*              S = STATUS (0 THRU 6                                *
2365*              R = RESOLUTION CODE (0 THRU 4)                      *
2366*              MMM = MULTIPLE VALUE                                *
2367*              HR = NEXT START TIME -HR                            *
2368*              MN = NEXT START TIME -MIN                           *
2369*              SC = NEXT START TIME -SEC                           *
2370*              MS = NEXT START TIME -10 MSEC                       *
2371*              T  =  PRESENT IF PROGRAM IN TIME LIST               *
2372* 
2373  03157 016313R M0500 JSB TTNAM    GO TO FIND ID SEGMENT ADDR 
2374  03160 063075R       LDA DM24
2375  03161 072604R       STA BUFFR     STORE CHARACTER COUNT IN BUFFER 
2376  03162 067526R       LDB WORK
2377  03163 047557R       ADB D6        PRIORITY ADDRESS
2378  03164 002300        CCE 
2379  03165 160001        LDA B,I 
2380  03166 016465R       JSB $CVT3    CONVERT PRIORITY TO ASCII
2381  03167 062603R       LDA ASCI+2
2382  03170 072605R       STA BUFFR+1  STORE PRIORITY IN BUFFER 
2383  03171 047562R       ADB D9        STATUS ADDRESS
2384  03172 160001        LDA B,I 
2385  03173 013564R       AND D15 
2386  03174 002300        CCE 
2387  03175 016465R       JSB $CVT3    CONVERT STATUS TO ASCII
2388  03176 062603R       LDA ASCI+2
2389  03177 013600R       AND M377
2390  03200 022166R       XOR UASCI 
2391  03201 072606R       STA BUFFR+2  STORE STATUS IN BUFFER 
2392  03202 006004        INB 
2393  03203 006004        INB           RESOL CODE/MULT ADDRESS 
2394  03204 002300        CCE 
2395  03205 160001        LDA B,I 
2396  03206 001723        ALF,RAR 
2397  03207 013560R       AND D7
2398  03210 016465R       JSB $CVT3    CONVERT RESOLUTION CODE TO ASCII 
2399  03211 062603R       LDA ASCI+2
2400  03212 013600R       AND M377
2401  03213 022166R       XOR UASCI 
2402  03214 072607R       STA BUFFR+3  STORE RESOLUTION CODE IN BUFFER
2403  03215 002300        CCE 
2404  03216 160001        LDA B,I 
2405  03217 012174R       AND M7777 
2406  03220 016465R       JSB $CVT3    CONVERT MULTIPLE TO ASCII
2407  03221 062602R       LDA ASCI+1
2408  03222 013600R       AND M377
2409  03223 022166R       XOR UASCI 
2410  03224 072610R       STA BUFFR+4  STORE MULTIPLE IN BUFFER 
2411  03225 062603R       LDA ASCI+2







 PAGE 0059 #01  MESSAGE PROCESSOR--ST,XXXXX COMMAND 


2412  03226 072611R       STA BUFFR+5  STORE MULTIPLE IN BUFFER 
2413  03227 160001        LDA B,I      CHECK IF PROG IN TIME LIST 
2414  03230 012472R       AND MWAIT 
2415  03231 002002        SZA          NO 
2416  03232 027235R       JMP *+3      YES
2417  03233 062167R       LDA AASCI    PROGRAM NOT IN TIME LIST 
2418  03234 002001        RSS 
2419  03235 063315R       LDA TZERO    PROG IN TIME LIST
2420  03236 072620R       STA BUFFR+12 STORE ASCII BLANK OR T IN BUFFER 
2421  03237 047555R       ADB D4
2422  03240 002300        CCE 
2423  03241 160001        LDA B,I       HR
2424  03242 043570R       ADA D24 
2425  03243 016465R       JSB $CVT3    CONVERT HOURS TO ASCII 
2426  03244 062603R       LDA ASCI+2
2427  03245 001727        ALF,ALF 
2428  03246 013600R       AND M377
2429  03247 022166R       XOR UASCI 
2430  03250 072612R       STA BUFFR+6  STORE HOURS IN BUFFER
2431  03251 062603R       LDA ASCI+2
2432  03252 001727        ALF,ALF 
2433  03253 012170R       AND MASKU 
2434  03254 022165R       XOR LASCI 
2435  03255 072613R       STA BUFFR+7  STORE HOURS IN BUFFER
2436  03256 047074R       ADB DM1       MIN 
2437  03257 002300        CCE 
2438  03260 160001        LDA B,I 
2439  03261 043573R       ADA D60 
2440  03262 016465R       JSB $CVT3    CONVERT MINUTES TO ASCII 
2441  03263 062603R       LDA ASCI+2
2442  03264 072614R       STA BUFFR+8  STORE MINUTES IN BUFFER
2443  03265 047074R       ADB DM1       SEC 
2444  03266 002300        CCE 
2445  03267 160001        LDA B,I 
2446  03270 043573R       ADA D60 
2447  03271 016465R       JSB $CVT3    CONVERT SECONDS TO ASCII 
2448  03272 062603R       LDA ASCI+2
2449  03273 001727        ALF,ALF 
2450  03274 013600R       AND M377
2451  03275 022166R       XOR UASCI 
2452  03276 072615R       STA BUFFR+9  STORE SECONDS IN BUFFER
2453  03277 062603R       LDA ASCI+2
2454  03300 001727        ALF,ALF 
2455  03301 012170R       AND MASKU 
2456  03302 022165R       XOR LASCI 
2457  03303 072616R       STA BUFFR+10 STORE SECONDS IN BUFFER
2458  03304 047074R       ADB DM1       TENS OF MILLISECOND 
2459  03305 002300        CCE 
2460  03306 160001        LDA B,I 
2461  03307 042576R       ADA D100
2462  03310 016465R       JSB $CVT3    CONVERT TENS OF MSEC TO ASCII
2463  03311 062603R       LDA ASCI+2
2464  03312 072617R       STA BUFFR+11 STORE TENS OF MSEC IN BUFFER 
2465  03313 062717R       LDA BUFAD    LOAD A WITH OUTPUT BUFFER ADDRESS
2466  03314 126231R       JMP $MESS,I  RETURN 








 PAGE 0060 #01  MESSAGE PROCESSOR--ST,XXXXX COMMAND 


2468  03315 020124  TZERO ASC 1, T






























































 PAGE 0061 #01  MESSAGE PROCESSOR--IT,XXXXX COMMAND 


2470* 
2471*     IT,XXXXX,R,MMM
2472*     IT,XXXXX,R,MMM,HR,MN
2473*     IT,XXXXX,R,MMM,HR,MN,SC 
2474*     IT,XXXXX,R,MMM,HR,MN,SC,MS
2475*                                                                  *
2476*        R=RESOLUTION CODE
2477*           1= TEN MILLISECOND CODE 
2478*           2= SECONDS CODE 
2479*           3= MINUTES CODE 
2480*           4= HOURS CODE 
2481*       MM= MULTIPLICATION FACTOR 
2482*       HR= START HOURS 
2483*       MN= START MINUTES 
2484*       SC= START SECONDS 
2485*       MS= START TENS OF MILLISECONDS
2486* 
2487  03316 016313R M0600 JSB TTNAM    GO FIND ID SEG ADDR
2488  03317 043564R       ADA D15 
2489  03320 160000        LDA A,I      STATUS 
2490  03321 013564R       AND D15 
2491  03322 002002        SZA          PROG MUST BE DORMANT TO CONTINUE 
2492  03323 027136R       JMP M0410-3  ILLEGAL STATUS ERROR 
2493  03324 063526R       LDA WORK
2494  03325 043565R       ADA D17 
2495  03326 072171R       STA TEMPP     STORE STARTING ADDRESS
2496  03327 162171R       LDA TEMPP,I  SAVE T BIT OF RES/T/MULT 
2497  03330 012472R       AND MWAIT 
2498  03331 172171R       STA TEMPP,I 
2499  03332 016415R       JSB CVT1      CONVERT AND STORE RESOLUTION COD
2500  03333 004136R       DEF P2
2501  03334 004135R       DEF CP2 
2502  03335 002003        SZA,RSS      CHECK IF RESOL CODE 1,2,3, OR 4
2503  03336 027676R       JMP M0950         0-ILLEGAL RESOLUTION CODE 
2504  03337 064000        LDB A 
2505  03340 047552R       ADB DM5 
2506  03341 006021        SSB,RSS 
2507  03342 027676R       JMP M0950         GREATER THAN 4-ILLEGAL CODE 
2508  03343 001727        ALF,ALF 
2509  03344 001722        ALF,RAL      OK, SO PUT IN UPPER 3 BITS 
2510  03345 122171R       XOR TEMPP,I 
2511  03346 172171R       STA TEMPP,I 
2512  03347 016415R       JSB CVT1      CONVERT MULTIPLY FACTOR 
2513  03350 004142R       DEF P3
2514  03351 004141R       DEF CP3 
2515  03352 012174R       AND M7777    MASK OFF ALL BUT LOW 12 BITS 
2516  03353 122171R       XOR TEMPP,I 
2517  03354 172171R       STA TEMPP,I   RESOL CODE/MULT FACTOR STORED 
2518  03355 036171R       ISZ TEMPP     INCR TO TMS ADDRESS 
2519  03356 062126R       LDA PARAM    CHECK IF TIME VALUES GIVEN 
2520  03357 043551R       ADA DM4 
2521  03360 002003        SZA,RSS 
2522  03361 027441R       JMP M0610    NO , SO GO SET TO ZERO 
2523  03362 062126R       LDA PARAM    CHECK IF 10 MSEC VALUE GIVEN 
2524  03363 003004        CMA,INA 
2525  03364 043560R       ADA D7







 PAGE 0062 #01  MESSAGE PROCESSOR--IT,XXXXX COMMAND 


2526  03365 002020        SSA 
2527  03366 027371R       JMP *+3      YES, SO CONVERT TO DECIMAL 
2528  03367 062571R       LDA DM100    NO SO SET TO ZERO
2529  03370 027377R       JMP M0602 
2530  03371 016415R       JSB CVT1      CONVERT TENS OF MILLISECOND 
2531  03372 004162R       DEF P7
2532  03373 004161R       DEF CP7 
2533  03374 042571R       ADA DM100 
2534  03375 002021        SSA,RSS      MINUS, IF LEGAL VALUE
2535  03376 027676R       JMP M0950    INPUT ERROR
2536  03377 172171R M0602 STA TEMPP,I  STORE 10 MSEC VALUE
2537  03400 036171R       ISZ TEMPP     INCR TO SECONDS ADDRESS 
2538  03401 062126R       LDA PARAM    CHECK IF SEC VALUE GIVEN 
2539  03402 003004        CMA,INA 
2540  03403 043557R       ADA D6
2541  03404 002020        SSA 
2542  03405 027410R       JMP *+3      YES SO CONVERT TO DECIMAL
2543  03406 063076R       LDA DM60     NO, SO SET TO ZERO 
2544  03407 027416R       JMP M0605 
2545  03410 016415R       JSB CVT1      CONVERT SECONDS 
2546  03411 004156R       DEF P6
2547  03412 004155R       DEF CP6 
2548  03413 043076R       ADA DM60
2549  03414 002021        SSA,RSS      MINUS, IF LEGAL VALUE
2550  03415 027676R       JMP M0950    INPUT ERROR
2551  03416 172171R M0605 STA TEMPP,I  STORE SECONDS
2552  03417 036171R       ISZ TEMPP     INCR TO MINUTES ADDRESS 
2553  03420 016415R       JSB CVT1      CONVERT MINUTES AND STORE 
2554  03421 004152R       DEF P5
2555  03422 004151R       DEF CP5 
2556  03423 043076R       ADA DM60
2557  03424 002021        SSA,RSS      YES, SO CONVERT TO DECIMAL 
2558  03425 027676R       JMP M0950    INPUT ERROR
2559  03426 172171R       STA TEMPP,I  STORE MINUTES
2560  03427 036171R       ISZ TEMPP     INCR TO HOURS ADDRESS 
2561  03430 016415R       JSB CVT1      CONVERT HOURS AND STORE 
2562  03431 004146R       DEF P4
2563  03432 004145R       DEF CP4 
2564  03433 043075R       ADA DM24
2565  03434 002021        SSA,RSS      MINUS, IF LEGAL VALUE
2566  03435 027676R       JMP M0950    INPUT ERROR
2567  03436 172171R       STA TEMPP,I  STORE HOURS
2568  03437 002400        CLA 
2569  03440 126231R       JMP $MESS,I  RETURN 
2570  03441 062571R M0610 LDA DM100    SET TIME VALUES IN ID SEG TO 0 
2571  03442 172171R       STA TEMPP,I  10 S OF MSEC 
2572  03443 036171R       ISZ TEMPP 
2573  03444 063076R       LDA DM60
2574  03445 172171R       STA TEMPP,I  SECONDS
2575  03446 036171R       ISZ TEMPP 
2576  03447 172171R       STA TEMPP,I  MINUTES
2577  03450 036171R       ISZ TEMPP 
2578  03451 063075R       LDA DM24
2579  03452 172171R       STA TEMPP,I  HOURS
2580  03453 002400        CLA 
2581  03454 126231R       JMP $MESS,I  RETURN 







 PAGE 0063 #01  MESSAGE PROCESSOR--PR,XXXXX,ZZ COMMAND


2583* 
2584*    PR,XXXXX,ZZ PROCESSOR
2585* 
2586*        THE PRIORITY CHANGE ROUTINE FUNCTIONS AS FOLLOWS:         *
2587*              IF PROGRAM STATUS OTHER THAN DORMANT, STATUS ERROR. *
2588*              IF DORMANT, THEN PRIORITY VALUE CHANGED AND PROGRAM *
2589*                   LIST UPDATED VIA LINK PROCESSOR.               *
2590*                                                                  *
2591  03455 016313R M0650 JSB TTNAM    GO TO FIND ID SEG ADDR 
2592  03456 043564R       ADA D15      STATUS ADDRESS 
2593  03457 160000        LDA A,I      CHECK PROGRAM STATUS 
2594  03460 013564R       AND D15 
2595  03461 002002        SZA          PROG MUST BE DORMANT TO CONTINUE 
2596  03462 027136R       JMP M0410-3  ILLEGAL STATUS MESSAGE 
2597  03463 016415R       JSB CVT1     CONVERT PRIORITY TO DECIMAL
2598  03464 004136R       DEF P2
2599  03465 004135R       DEF CP2 
2600  03466 002003        SZA,RSS      CHECK IF ZERO PRIORITY REQ 
2601  03467 027676R       JMP M0950      ERROR-ILLEGAL VALUE
2602  03470 064000        LDB A 
2603  03471 042571R       ADA DM100     MINUS DECIMAL 100 
2604  03472 002021        SSA,RSS      CHECK IF GREATER THAN 100
2605  03473 027676R       JMP M0950     INPUT ERROR 
2606  03474 063526R       LDA WORK
2607  03475 043557R       ADA D6
2608  03476 174000        STB A,I      STORE NEW PRIORITY VALUE 
2609  03477 017601R       JSB $LIST    CALL LIST PROCESSOR TO 
2610  03500 000317        OCT 317       RELINK PROGRAMS 
2611  03501 001526R       DEF WORK
2612  03502 126231R       JMP $MESS,I  RETURN 

































 PAGE 0064 #01  MESSAGE PROCESSOR--TM COMMAND 


2614*     TM,DAY,HR,MN,SC  PROCESSOR
2615*        THE REAL TIME CLOCK INITIATOR FUNCTIONS AS FOLLOWS:       *
2616*              THE INPUT VALUES FOR DAY, HR, MN, SC ARE CONVERTED  *
2617*              AND STORED. THE 10 MSEC VALUE IS SET TO ZERO.

2619  03503 016415R M0700 JSB CVT1      CONVERT DAYS TO DECIMAL 
2620  03504 004132R       DEF P1
2621  03505 004131R       DEF CP1 
2622  03506 064000        LDB A 
2623  03507 043546R       ADA DM366 
2624  03510 002003        SZA,RSS      CHECK IF DAY 366 
2625  03511 027514R       JMP *+3           LEAP YEAR, SO ACCEPT IT 
2626  03512 002021        SSA,RSS 
2627  03513 027676R       JMP M0950    INPUT ERROR
2628  03514 076146R       STB DAYS      STORE DAYS
2629  03515 016415R       JSB CVT1      CONVERT HOURS TO DECIMAL
2630  03516 004136R       DEF P2
2631  03517 004135R       DEF CP2 
2632  03520 043075R       ADA DM24
2633  03521 002021        SSA,RSS 
2634  03522 027676R       JMP M0950    INPUT ERROR
2635  03523 072145R       STA HRS       STORE HOURS 
2636  03524 016415R       JSB CVT1      CONVERT MINUTES TO DECIMAL
2637  03525 004142R       DEF P3
2638  03526 004141R       DEF CP3 
2639  03527 043076R       ADA DM60
2640  03530 002021        SSA,RSS 
2641  03531 027676R       JMP M0950    INPUT ERROR
2642  03532 072144R       STA MINS      STORE MINUTES 
2643  03533 016415R       JSB CVT1      CONVERT SECONDS TO DECIMAL
2644  03534 004146R       DEF P4
2645  03535 004145R       DEF CP4 
2646  03536 043076R       ADA DM60
2647  03537 002021        SSA,RSS 
2648  03540 027676R       JMP M0950     INPUT ERROR 
2649  03541 072143R       STA SECS      STORE SECONDS 
2650  03542 062571R       LDA DM100 
2651  03543 072142R       STA TMS      STORE TENS OF MILLISECONDS 
2652  03544 002400        CLA 
2653  03545 126231R       JMP $MESS,I   RETURN

2655  03546 177222  DM366 DEC -366





















 PAGE 0065 #01  MESSAGE PROCESSOR--TI COMMAND 


2657* 
2658* 
2659*        THE REQUEST TO GET CURRENT SYSTEM TIME OUTPUTS CURRENT    *
2660*              DAY NUMBER, HOUR, MINUTES, AND SECONDS IN THE       *
2661*              FOLLOWING FORMAT:                                   *
2662*                   DAY  HR  MN  SC                                *
2663*                                                                  *
2664  03547 063553R M0750 LDA DM16
2665  03550 072604R       STA BUFFR     SET OUTPUT CHARACTER COUNT
2666  03551 002300        CCE 
2667  03552 062146R       LDA DAYS
2668  03553 016465R       JSB $CVT3    CONVERT AND STORE DAYS 
2669  03554 062602R       LDA ASCI+1
2670  03555 013600R       AND M377
2671  03556 022166R       XOR UASCI 
2672  03557 072605R       STA BUFFR+1 
2673  03560 062603R       LDA ASCI+2
2674  03561 072606R       STA BUFFR+2 
2675  03562 062167R       LDA AASCI     STUFF NECESSARY WORDS WITH
2676  03563 072607R       STA BUFFR+3   BLANKS
2677  03564 072611R       STA BUFFR+5 
2678  03565 072613R       STA BUFFR+7 
2679  03566 062145R       LDA HRS 
2680  03567 043570R       ADA D24 
2681  03570 002300        CCE 
2682  03571 016465R       JSB $CVT3    CONVERT AND STORE HOURS
2683  03572 062603R       LDA ASCI+2
2684  03573 072610R       STA BUFFR+4 
2685  03574 062144R       LDA MINS
2686  03575 043573R       ADA D60 
2687  03576 002300        CCE 
2688  03577 016465R       JSB $CVT3    CONVERT AND STORE MINUTES
2689  03600 062603R       LDA ASCI+2
2690  03601 072612R       STA BUFFR+6 
2691  03602 062143R       LDA SECS
2692  03603 043573R       ADA D60 
2693  03604 002300        CCE 
2694  03605 016465R       JSB $CVT3    CONVERT AND STORE SECONDS
2695  03606 062603R       LDA ASCI+2
2696  03607 072614R       STA BUFFR+8 
2697  03610 062717R       LDA BUFAD     SET A TO POINT TO OUTPUT BUFFER 
2698  03611 126231R       JMP $MESS,I  RETURN 





















 PAGE 0066 #01  MESSAGE PROCESSOR--DN,NN  COMMAND 


2700* 
2701*     REQUEST TO SET A DEVICE DOWN
2702* 
2703  03612 016415R M0780 JSB CVT1      CONVERT NN TO BINARY
2704  03613 004132R       DEF P1
2705  03614 004131R       DEF CP1 
2706  03615 026003X       JMP $IODN    GO TO $IODN ROUTINE


















2708* 
2709*           MESSAGE PROCESSOR--UP,NN COMMAND
2710* 



2712* 
2713*     REQUEST TO SET A DEVICE UP
2714* 
2715  03616 016415R M0800 JSB CVT1      CONVERT NN TO BINARY
2716  03617 004132R       DEF P1
2717  03620 004131R       DEF CP1 
2718  03621 026002X       JMP $IOUP    GO TO $IOUP ROUTINE

























 PAGE 0067 #01  MESSAGE PROCESSOR--LU,N1,N2 COMMAND 


2720* 
2721*     REQUEST OF LOGICAL UNIT ASSIGNMENT(N1 VALUE ONLY) OR
2722*     REQUEST LOGICAL UNIT REASSIGNMENT(N1 AND N2 
2723*             OR N1,N2 AND N3 PRESENT)
2724* 
2725  03622 002400  M0850 CLA          SET N3-POSSIBLE SWITCH 
2726  03623 072173R       STA TEMPW 
2727  03624 017626R       JSB P1OR2 
2728  03625 026011X       JMP $LUPR    GO TO $LUPR ROUTINE
2729  03626 000000  P1OR2 NOP          ENTRY/EXIT 
2730  03627 016415R       JSB CVT1
2731  03630 004132R       DEF P1
2732  03631 004131R       DEF CP1 
2733  03632 072171R       STA TEMPP 
2734  03633 062126R       LDA PARAM    CHECK IF JUST
2735  03634 043550R       ADA DM3       ONE PARAMETER 
2736  03635 002020        SSA          MORE THAN ONE
2737  03636 027650R       JMP P1OR5 
2738  03637 016415R       JSB CVT1      CONVERT N2 TO BINARY
2739  03640 004136R       DEF P2
2740  03641 004135R       DEF CP2 
2741  03642 066173R       LDB TEMPW    IS A THIRD PARAMETER POSSIBLE? 
2742  03643 006003        SZB,RSS 
2743  03644 027652R       JMP P1OR7     YES 
2744  03645 064000  P1OR3 LDB A        LOAD B WITH 'N2' OR 'N3:N2'
2745  03646 062171R       LDA TEMPP     LOAD A WITH N1
2746  03647 127626R       JMP P1OR2,I 
2747  03650 007400  P1OR5 CCB          SET B REG TO -1 FOR 1 PARAMETER
2748  03651 027646R       JMP *-3 
2749  03652 013600R P1OR7 AND M377     SAVE BITS 7-0
2750  03653 072173R       STA TEMPW     OF 'N2' 
2751  03654 062126R       LDA PARAM    CHECK IF THREE PARAMETERS
2752  03655 043551R       ADA DM4 
2753  03656 002021        SSA,RSS 
2754  03657 027662R       JMP P1OR9    YES- GO GET 'N3' 
2755  03660 066173R       LDB TEMPW    NO- LOAD 'N2' INTO B 
2756  03661 027646R       JMP P1OR3+1 
2757  03662 016415R P1OR9 JSB CVT1     CONVERT 'N3' TO BINARY 
2758  03663 004142R       DEF P3
2759  03664 004141R       DEF CP3 
2760  03665 013560R       AND D7       KEEP BITS 2-0 AND
2761  03666 001727        ALF,ALF       MOVE THEM TO
2762  03667 001723        ALF,RAR       POSITIONS 13-11 
2763  03670 032173R       IOR TEMPW    ASSEMBLE 'N3:N2' INTO A
2764  03671 027645R       JMP P1OR3 


















 PAGE 0068 #01  MESSAGE PROCESSOR--EQ,N1,N2 COMMAND 


2766* 
2767*     REQUEST EQUIPMENT STATUS (N1 PARAMETER ONLY)
2768*     REQUEST EQUIPMENT BUFFERING OR NON BUFFERING (N1,N2 PARAMETERS
2769*             N2 = 0 FOR NO BUFFERING 
2770*             N2 = 1 FOR BUFFERING
2771* 
2772  03672 003400  M0900 CCA          CLEAR N3-POSSIBLE SWITCH 
2773  03673 072173R       STA TEMPW 
2774  03674 017626R       JSB P1OR2 
2775  03675 026012X       JMP $EQST    GO TO $EQST ROUTINE


















2777* 
2778*           INPUT ERROR MESSAGE OUTPUT
2779* 
2780* 
2781  03676 062213R M0950 LDA INERR     INPUT ERROR MESSAGE 
2782  03677 126231R       JMP $MESS,I  RETURN 





























 PAGE 0069 #01  MESSAGE PROCESSOR - LS N1,N2  PROCESSOR 


2784* 
2785*  SET "SOURCE FILE" IDENTIFICATION 
2786* 
2787*  THE OPERATOR REQUEST IS: 
2788*    "LS,LUN,1ST TRACK # "
2789*  THIS STATEMENT SETS THE SOURCE FILE CONTROL WORD 
2790*  IN THE COMMUNICATION AREA IN THE FOLLOWING 
2791*  FORMAT( THE WORD IS LABELED "SFCUN" ): 
2792*    *******************************
2793*    *LU* ST. TRACK #*    ZERO     *
2794*    *******************************
2795*     15,14    -    7,6     -     0  (BITS) 
2796* 
2797*  THE LOGICAL UNIT # AND STARTING TRACK # ARE
2798*  RECORDED BY THE 'EDITOR' WHEN THE SOURCE FILE
2799*  IS CREATED.
2800* 
2801*  VALIDITY CHECKS ARE FOR  LOGICAL UNIT = 2 OR 3,
2802*  HOWEVER, A LU = 0 WILL SET "SFCUN" = 0.
2803* 
2804  03700 003400  M0960 CCA          CLEAR N3-POSSIBLE SWITCH 
2805  03701 072173R       STA TEMPW 
2806  03702 017626R       JSB P1OR2 
2807  03703 077732R       STB M0963      SAVE PARAMETER 2 
2808  03704 002003        SZA,RSS        IF PARAM 1 = 0, GO TO
2809  03705 027725R       JMP M0961      CLEAR "SFCUN"
2810  03706 057074R       CPB DM1       IF P2 NOT PRESENT,
2811  03707 027730R       JMP M0962      ERROR. 
2812  03710 053554R       CPA D2        VERIFY
2813  03711 002001        RSS            THAT LU #  (PARAM # 1) 
2814  03712 053575R       CPA M3         = 2 OR 3.
2815  03713 002001        RSS 
2816  03714 027730R       JMP M0962     -NO, ERROR
2817  03715 006400        CLB           SET B = 0 FOR 
2818  03716 000010        SLA            LU #2 OR 
2819  03717 067733R       LDB M0964      BIT 15 = 1 FOR LU #3.
2820  03720 063732R       LDA M0963     GET STARTING TRACK #, 
2821  03721 001722        ALF,RAL       ROTATE TO 
2822  03722 001222        RAL,RAL        14-07
2823  03723 013734R       AND M0965      AND ISOLATE. 
2824  03724 030001        IOR B         PUT IN LU IN 15, ZERO 06-00.
2825* 
2826  03725 071767  M0961 STA SFCUN     SET "SFCUN" 
2827  03726 002400        CLA           (A) = 0 FOR 
2828  03727 126231R       JMP $MESS,I    NORMAL RETURN. 
2829* 
2830  03730 062213R M0962 LDA INERR     RETURN TO PRINT 
2831  03731 126231R       JMP $MESS,I    "INPUT ERROR" DIAGNOSTIC.
2832* 
2833  03732 000000  M0963 NOP           TEMPORARY STORAGE 
2834  03733 100000  M0964 OCT 100000
2835  03734 077600  M0965 OCT 77600 











 PAGE 0070 #01  MESSAGE PROCESSOR - LG,N COMMAND


2837* 
2838*  SET "LOAD-AND-GO" PARAMETERS 
2839* 
2840*  THE OPERATOR STATEMENT IS: 
2841*     "LG,# OF TRACKS"
2842* 
2843*  THIS STATEMENT ALLOWS THE OPERATOR TO: 
2844*   1. ALLOCATE A NUMBER OF CONTIGUOUS DISC 
2845*      TRACKS FOR 'LOAD-AND-GO' USAGE.
2846*   2. RELEASE TRACK(S) CURRENTLY ASSIGNED TO LGO.
2847* 
2848*  THIS REQUEST HAS NO EFFECT IF LGO CURRENTLY IN USE 
2849* 
2850*  THE BASE PAGE COMMUNICATION AREA WORDS DESCRIBED 
2851*  BELOW CONTAIN THE LGO TRACK ASSIGNMENTS: 
2852* 
2853*           ********************************
2854*   'LGOTK' *LU* ST. TRACK # * # OF TRACKS *
2855*           ********************************
2856*            15,14---------07,06---------00 
2857* 
2858*           ********************************
2859*   'LGOC'  *LU*  TRACK #    * SECTOR  #   *
2860*           ********************************
2861*            15,14---------07,06---------00 
2862* 
2863*   LGOTK DEFINES THE LU #, THE STARTING TRACK #
2864*    AND THE NUMBER OF CONTIGUOUS TRACKS. THIS
2865*    WORD IS ZERO IF NO TRACKS ARE ALLOCATED. 
2866* 
2867*   LGOC  DEFINES THE CURRENT AVAILABLE SECTOR. 
2868*    THIS IS UPDATED BY 'RTIOC' AND RESET TO
2869*    THE BEGINNING OF THE AREA BY THE LOADER
2870*    AFTER LOADING FROM THE LGO AREA; ALSO BY 
2871*    THIS ROUTINE WHEN THE TRACKS ARE ALLOCATED.
2872* 
2873* 
2874  03735 017626R M0970 JSB P1OR2     GET PARAMETER 
2875  03736 013577R       AND M177       MAX. VALUE OF 127. 
2876  03737 072103R       STA M0974      -SAVE P- 
2877  03740 002003        SZA,RSS       IF P = 0, GO TO 
2878  03741 027766R       JMP M0971      RELEASE LGO TRACK(S).
2879  03742 002400        CLA           CHECK FOR 
2880  03743 051765        CPA LGOTK      CURRENT ASSIGNMENT.
2881  03744 002001        RSS            -NONE
2882  03745 027766R       JMP M0971      -RELEASE CURRENT 
2883* 
2884  03746 062103R M0975 LDA M0974     (A) = # OF TRACKS 
2885  03747 006400        CLB           (B)=0 FOR CALL FROM SYSTEM. 
2886  03750 016005X       JSB $DREQ     ALLOCATE TRACKS 
2887* 
2888  03751 006003        SZB,RSS       IF P TRACKS NOT 
2889  03752 026060R       JMP M0972      AVAILABLE, GO FOR DIAG. RETURN.
2890* 
2891  03753 001722        ALF,RAL       ROTATE TRACK # TO 
2892  03754 001222        RAL,RAL        14-07. 







 PAGE 0071 #01  MESSAGE PROCESSOR - LG,N COMMAND


2893  03755 004065        CLE,ERB       PUT LS BIT OF B IN 15 
2894  03756 006440        CLB,SEZ        WITH 14-00 = 0.
2895  03757 005500        ERB 
2896* 
2897  03760 030001        IOR B         PUT LU IN (A)15.
2898  03761 071766        STA LGOC      SET LGOC. 
2899  03762 032103R       IOR M0974     SET # OF TRACKS IN 06-00
2900  03763 071765        STA LGOTK      AND SET LGOTK. 
2901* 
2902  03764 002400        CLA           (A)=0 FOR NORMAL RETURN 
2903  03765 126231R       JMP $MESS,I    -RETURN- 
2904* 
2905  03766 051765  M0971 CPA LGOTK 
2906  03767 126231R       JMP $MESS,I 
2907  03770 061765        LDA LGOTK     GET ASSIGNMENT WORD TO RELEASE. 
2908  03771 006404        CLB,INB       SET: B=1 IF LU#2, B=2 IF LU#3 
2909  03772 002020        SSA 
2910  03773 006004        INB 
2911  03774 077067R       STB TEMPH 
2912  03775 006400        CLB           (B)=0 FOR LU #2.
2913  03776 002020        SSA           IF LU #3, SET 
2914  03777 065756        LDB TATSD      (B)= # TRACKS ON SYSTEM DISC.
2915  04000 001727        ALF,ALF       ROTATE STARTING 
2916  04001 001200        RAL            TRACK #
2917  04002 013600R       AND M377       TO 07-00, ISOLATE, 
2918  04003 072106R       STA M0978      SAVE IT. 
2919  04004 040001        ADA B          ADD (B)
2920  04005 073732R       STA M0963      AND SAVE TEMPORARILY.
2921  04006 061765        LDA LGOTK     PUT # OF
2922  04007 013577R       AND M177       TRACKS 
2923  04010 072104R       STA M0976      FOR $DREL ROUTINE
2924  04011 003004        CMA,INA        AND FOR CURRENT
2925  04012 072105R       STA M0977      COUNTER. 

2927  04013 063067R       LDA TEMPH 
2928  04014 037067R       ISZ TEMPH 
2929  04015 041652        ADA DRT       SET DISC QUEUE
2930  04016 160000        LDA A,I        ADDRESS INTO EQT1
2931  04017 013576R       AND M77 
2932  04020 016020X       JSB $CVEQ 

2934  04021 165660  M0980 LDB EQT1,I    GET REQUESTS QUEUED 
2935  04022 076107R       STB M0979      FOR DISC-
2936  04023 006003        SZB,RSS       QUEUE EXHAUSTED?
2937  04024 026042R       JMP M0982      YES - GO TO NEXT TRACK 
2938  04025 006004        INB            NO -SEE IF REQUEST IS
2939  04026 160001        LDA B,I         FOR THIS TRACK
2940  04027 001727        ALF,ALF 
2941  04030 013575R       AND M3
2942  04031 053067R       CPA TEMPH     SAME LU?
2943  04032 002001        RSS            YES - SEE IF SAME TRACK
2944  04033 026040R       JMP M0981      NO - THIS REQUEST OK 
2945  04034 047575R       ADB M3
2946  04035 160001        LDA B,I 
2947  04036 052106R       CPA M0978     SAME TRACK? 
2948  04037 026062R       JMP M0972+2    YES - DO NOT RELEASE 







 PAGE 0072 #01  MESSAGE PROCESSOR - LG,N COMMAND


2950  04040 166107R M0981 LDB M0979,I   GO TO NEXT REQUEST
2951  04041 026022R       JMP M0980+1    IN QUEUE - 

2953  04042 036105R M0982 ISZ M0977     ALL TRACKS CHECKED? 
2954  04043 002001        RSS            NO - CHECK NEXT TRACK
2955  04044 026047R       JMP M0984      YES - RELEASE THEM 
2956  04045 036106R       ISZ M0978 
2957  04046 026021R       JMP M0980 

2959  04047 066104R M0984 LDB M0976      NUMBER OF TRACKS IN B, 
2960  04050 063732R       LDA M0963     STARTING TRACK # IN A.
2961  04051 016007X       JSB $DREL     -RELEASE- 
2962  04052 002400        CLA           CLEAR 
2963  04053 071765        STA LGOTK     'LOAD-AND-GO' 
2964  04054 071766        STA LGOC       CONTROL WORDS. 
2965  04055 052103R       CPA M0974     IF P = 0, 
2966  04056 126231R       JMP $MESS,I    -RETURN- 
2967  04057 027746R       JMP M0975      GO TO ALLOCATE NEW TRACKS. 
2968* 
2969  04060 062064R M0972 LDA M0973     PRINT: NO LGO SPACE 
2970  04061 002001        RSS 
2971  04062 062074R       LDA M0988     PRINT: LGO IN USE 
2972  04063 126231R       JMP $MESS,I 
2973* 
2974  04064 004065R M0973 DEF *+1 
2975  04065 177764        DEC -12 
2976  04066 047117        ASC 6,NO LGO SPACE
2977* 
2978  04074 004075R M0988 DEF *+1 
2979  04075 177766        DEC -10 
2980  04076 046107        ASC 5,LGO IN USE
2981* 
2982  04103 000000  M0974 NOP 
2983  04104 000000  M0976 NOP 
2984  04105 000000  M0977 NOP 
2985  04106 000000  M0978 NOP 
2986  04107 000000  M0979 NOP 



2988* 
2989*           MESSAGE PROCESSOR - TO,N1,N2 COMMAND
2990* 



2992*     REQUEST DEVICE TIME-OUT PARAMETER (N1 PARAMETER ONLY) 
2993*     REQUEST TO ASSIGN DEVICE TIME-OUT PARAMETER (N1,N2 PARAMETERS)
2994*             N1 = DEVICE EQUIPMENT NUMBER
2995*             N2 = TIME-OUT PARAMETER TO BE ASSIGNED
2996* 
2997  04110 003400  M0990 CCA           CLEAR N3-POSSIBLE SWITCH
2998  04111 072173R       STA TEMPW 
2999  04112 017626R       JSB P1OR2 
3000  04113 026017X       JMP $CHTO 








 PAGE 0073 #01  MESSAGE PROCESSOR  BUFFERS, POINTERS, ETC 


3002* 
3003*     PARAMETER POINTERS FOR DATA STORAGE 
3004  04114 004115R INIT  DEF TAB       PARAMETER INITIALIZATION POINTER
3005  04115 004130R TAB   DEF OP        OPERATION CODE BUFFER ADDRESS 
3006  04116 004132R       DEF P1        PARAMETER 1 BUFFER ADDRESS
3007  04117 004136R       DEF P2        PARAMETER 2 BUFFER ADDRESS
3008  04120 004142R       DEF P3        PARAMETER 3 BUFFER ADDRESS
3009  04121 004146R       DEF P4        PARAMETER 4 BUFFER ADDRESS
3010  04122 004152R       DEF P5       PARAMETER 5 BUFFER ADDRESS 
3011  04123 004156R       DEF P6       PARAMETER 6 BUFFER ADDRESS 
3012  04124 004162R       DEF P7       PARAMETER 7 BUFFER ADDRESS 
3013*     PARAMETER STORAGE 
3014  04125 004126R PARPT DEF PARAM 
3015  04126 000000  PARAM NOP          PARAMETER COUNTER
3016  04127 000000        NOP          CHARACTER COUNT-OP CODE
3017  04130 000000  OP    BSS 1         OPERATION CODE
3018  04131 000000  CP1   NOP          CHAR COUNT-PARAM 1 
3019  04132 000000  P1    BSS 3         PARAM 1 (UP TP 3 WORDS-6CHAR.)
3020  04135 000000  CP2   NOP          CHAR COUNT-PARAM 2 
3021  04136 000000  P2    BSS 3        PARAMETER 2
3022  04141 000000  CP3   NOP          CHAR COUNT-PARAM 3 
3023  04142 000000  P3    BSS 3        PARAMETER 3
3024  04145 000000  CP4   NOP          CHAR COUNT-PARAM 4 
3025  04146 000000  P4    BSS 3        PARAMETER 4
3026  04151 000000  CP5   NOP          CHAR COUNT -PARAM 5
3027  04152 000000  P5    BSS 3        PARAMETER 5
3028  04155 000000  CP6   NOP          CHAR COUNT-PARAM 6 
3029  04156 000000  P6    BSS 3        PARAMETER 6
3030  04161 000000  CP7   NOP          CHAR COUNT-PARAM 7 
3031  04162 000000  P7    BSS 3        PARAMETER 7
3032  04165 000040  LASCI OCT 000040   ASCII BLANK IN LOW CHARACTER 
3033  04166 020000  UASCI OCT 020000   ASCII BLANK IN HIGH CHARACTER
3034  04167 020040  AASCI OCT 020040   ASCII BLANK IN BOTH CHAR 
3035  04170 177400  MASKU OCT 177400    UPPER CHARACTER MASK (AND)
3036  04171 000000  TEMPP NOP          TEMPORARY STORAGE
3037  04172 000000  KEY   NOP          TEMPORARY STORAGE
3038  04173 004174R OPERR DEF *+1       OPERATION CODE ERROR MESSAGE
3039  04174 177764        DEC -12 
3040  04175 047520        ASC 6,OP CODE ERR 
3041  04203 004204R NOPRG DEF *+1       NO SUCH PROGRAM ERROR MESSAGE 
3042  04204 177764        DEC -12 
3043  04205 047117        ASC 6,NO SUCH PROG
3044  04213 004214R INERR DEF *+1       INPUT ERROR MESSAGE 
3045  04214 177764        DEC -12 
3046  04215 044516        ASC 6,INPUT ERROR 


















 PAGE 0074 #01  CONTROL PARAMETER CONVERSION AND STORE IN ID SEGMENT


3048* 
3049* 
3050  04223 000000  PLOAD NOP          ENTRY/EXIT 
3051  04224 016272R       JSB CLIDS    GO TO CLEAR ID SEG TEMP AND SET B
3052  04225 062136R       LDA P2
3053  04226 052205R       CPA NOPRG+2  CHECK IF -NOW- OPTION
3054  04227 026240R       JMP PL010    YES
3055  04230 062126R       LDA PARAM    CHECK IF ANY CONTROL PARAMETERS
3056  04231 003004        CMA,INA 
3057  04232 043554R       ADA D2
3058  04233 072172R       STA KEY       COUNT OF CONTROL PARAMETERS 
3059  04234 002003        SZA,RSS 
3060  04235 126223R       JMP PLOAD,I  RETURN 
3061  04236 063554R       LDA D2
3062  04237 026247R       JMP PL020    GO TO CONVERT AND STORE
3063  04240 062126R PL010 LDA PARAM    CHECK IF ANY CONTROL PARAMETERS
3064  04241 003004        CMA,INA 
3065  04242 043575R       ADA M3
3066  04243 072172R       STA KEY      COUNT OF CONTROL PARAMETERS
3067  04244 002003        SZA,RSS 
3068  04245 126223R       JMP PLOAD,I  RETURN 
3069  04246 063575R       LDA M3
3070  04247 042114R PL020 ADA INIT
3071  04250 072171R       STA TEMPP    STARTING LOCATION OF CONTROL PARA
3072  04251 062172R       LDA KEY      CHECK COUNT OF CONTROL PARAMETERS
3073  04252 043556R       ADA D5
3074  04253 002020        SSA          OK-5 OR LESS CONTROL PARAMETERS
3075  04254 027676R       JMP M0950    ERROR-MORE THAN 5 PARAMETERS 
3076*     CONVERT AND STORE PARAMETERS
3077  04255 162171R PL030 LDA TEMPP,I 
3078  04256 072262R       STA *+4      DATA ADDRESS 
3079  04257 043074R       ADA DM1 
3080  04260 072263R       STA *+3      CHARACTER ADDRESS  
3081  04261 016415R       JSB CVT1     CONVERT PARAMETER TO DECIMAL 
3082  04262 004262R       DEF * 
3083  04263 004263R       DEF * 
3084  04264 173531R       STA TEMP,I   STORE CONVERTED DATA INTO TEMP 
3085  04265 037531R       ISZ TEMP     INCREMENT STORE ADDRESS
3086  04266 036171R       ISZ TEMPP    INCREMENT DATA ADDRESS 
3087  04267 036172R       ISZ KEY      INCREMENT COUNT
3088  04270 026255R       JMP PL030    GO TO NEXT CONTROL PARAMETER 
3089  04271 126223R       JMP PLOAD,I  RETURN 
3090* 
3091*        SUBROUTINE TO CLEAR ID SEGMENT TEMPORARY 
3092*             AND SET B REGISTER TO POINT TO TEMP AREA
3093* 
3094  04272 000000  CLIDS NOP          ENTRY/EXIT 
3095  04273 063552R       LDA DM5 
3096  04274 073531R       STA TEMP     CLEAR OUT ID SEGMENT TEMP AREA 
3097  04275 067526R       LDB WORK     COMPUTE ID SEG TEMP AREA ADDRESS 
3098  04276 006004        INB 
3099  04277 002400        CLA 
3100  04300 170001        STA B,I 
3101  04301 006004        INB 
3102  04302 037531R       ISZ TEMP
3103  04303 026300R       JMP *-3 







 PAGE 0075 #01  CONTROL PARAMETER CONVERSION AND STORE IN ID SEGMENT


3104  04304 067526R       LDB WORK
3105  04305 006004        INB 
3106  04306 077531R       STB TEMP     ID SEGMENT TEMP ADDRESS
3107  04307 063526R       LDA WORK
3108  04310 042577R       ADA D10 
3109  04311 174000        STB A,I      SET ID SEG B REG TO PT TO TEMP 
3110  04312 126272R       JMP CLIDS,I  RETURN 
























































 PAGE 0076 #01  MESSAGE PROCESSOR NAME SEARCH 


3112* 
3113*     CALL TO NAME SEARCH ROUTINE 
3114* 
3115  04313 000000  TTNAM NOP          ENTRY/EXIT 
3116  04314 066167R       LDB AASCI    SET B TO ASCII BLANKS
3117  04315 062131R       LDA CP1      CHARACTER COMPARE COUNT
3118  04316 053552R       CPA DM5      CHECK IF 5 CHARACTERS INPUT
3119  04317 026343R       JMP TTN20    YES, SO GO SEARCH FOR PROG 
3120  04320 076134R       STB P1+2     NO, SO STORE ASCII BLANK IN CHAR 
3121  04321 053551R       CPA DM4      CHECK IF 4 CHARACTERS
3122  04322 026343R       JMP TTN20    YES, SO GO TO SEARCH FOR PROGRAM 
3123  04323 053550R       CPA DM3      CHECK IF 3 CHARACTERS INPUT
3124  04324 002001        RSS          YES, SO SET CHAR 4 TO BLANK
3125  04325 026332R       JMP TTN10    NO,SO SET CHAR 3 AND 4 TO BLANK
3126  04326 062133R       LDA P1+1
3127  04327 032165R       IOR LASCI    IOR BLANK INTO CHARACTER 4 
3128  04330 072133R       STA P1+1
3129  04331 026343R       JMP TTN20    GO TO SEARCH FOR PROGRAM 
3130  04332 076133R TTN10 STB P1+1     STORE BLANK IN CHAR 3 AND 4
3131  04333 053547R       CPA DM2      CHECK IF 2 CHARACTERS INPUT
3132  04334 026343R       JMP TTN20    YES, SO GO TO SEARCH FOR PROGRAM 
3133  04335 053074R       CPA DM1      CHECK IF 1 CHARACTER INPUT 
3134  04336 002001        RSS          YES, SO SET CHAR 2 TO BLANK
3135  04337 027676R       JMP M0950    NO, SO INPUT ERROR 
3136  04340 062132R       LDA P1
3137  04341 032165R       IOR LASCI    IOR BLANK INTO CHARACTER 2 
3138  04342 072132R       STA P1
3139  04343 066116R TTN20 LDB TAB+1    ADDRESS OF ASCII PROG NAME 
3140  04344 016352R       JSB TNAME     CALL TO NAME SEARCH ROUTINE 
3141  04345 073526R       STA WORK
3142  04346 002002        SZA          IF ZERO, THEN PROG NOT FOUND 
3143  04347 126313R       JMP TTNAM,I   EXIT
3144  04350 062203R       LDA NOPRG    NO SUCH PROG ERROR 
3145  04351 126231R       JMP $MESS,I  EXIT 





























 PAGE 0077 #01  SEARCH KEYWORD LIST FOR PROGRAM NAME


3147*     ON ENTRY
3148*         B IS ADDRESS OF ASCII PROGRAM NAME
3149*     ON RETURN 
3150*         A IS 0 IF PROGRAM NOT FOUND 
3151*         A IS ID SEGMENT ADDRESS OF REQUESTED PROGRAM
3152* 
3153  04352 000000  TNAME NOP          ENTRY/EXIT 
3154  04353 160001        LDA B,I      ASCII NAME CHAR 1 AND 2
3155  04354 073534R       STA TEMP+3
3156  04355 006004        INB          INCR TO CHAR 3 AND 4 ADDR
3157  04356 160001        LDA B,I      ASCII NAME CHARS 3 AND 4 
3158  04357 073535R       STA TEMP+4
3159  04360 006004        INB          INCR TO CHAR 5 ADDR
3160  04361 160001        LDA B,I      ASCII NAME CHAR 5 AND X
3161  04362 012170R       AND MASKU         MASK OFF X
3162  04363 073536R       STA TEMP+5
3163  04364 061657        LDA KEYWD 
3164  04365 072172R       STA KEY      TOP OF KEYWORD LIST
3165  04366 162172R TN005 LDA KEY,I    CHECK IF AT END OF LIST
3166  04367 002003        SZA,RSS 
3167  04370 126352R       JMP TNAME,I  END OF LIST ERROR RETURN 
3168  04371 043070R       ADA D12 
3169  04372 073533R       STA TEMP+2   ID SEGMENT ASCII NAME ADDRESS
3170  04373 163533R       LDA TEMP+2,I ID SEG ASCII NAME CHARS 1 AND 2
3171  04374 053534R       CPA TEMP+3   COMPARE WITH REQUESTED CHAR 1,2
3172  04375 002001        RSS          COMPARES 
3173  04376 026411R       JMP TN030    DOES NOT COMPARE-GO TO NEXT PROG 
3174  04377 037533R       ISZ TEMP+2   INCR ASCII NAME ADDRESS
3175  04400 163533R       LDA TEMP+2,I ID SEG ASCII NAME CHARS 3 AND 4
3176  04401 053535R       CPA TEMP+4   COMPARE WITH REQUESTED CHARS 3,4 
3177  04402 002001        RSS          COMPARES 
3178  04403 026411R       JMP TN030    DOES NOT COMPARE-GO TO NEXT PROG 
3179  04404 037533R       ISZ TEMP+2   INCR ASCII NAME ADDRESS
3180  04405 163533R       LDA TEMP+2,I ID SEG ASCII NAME CHARS 5,X
3181  04406 012170R       AND MASKU         MASK OFF X
3182  04407 053536R       CPA TEMP+5   COMPARE CHARACTER 5
3183  04410 026413R       JMP TN040    COMPARES-SO PROGRAM FOUND
3184  04411 036172R TN030 ISZ KEY      INCREMENT KEYWORD ADDRESS
3185  04412 026366R       JMP TN005    GO TO COMPARE CHARACTERS 
3186  04413 162172R TN040 LDA KEY,I    LOAD A WITH ID SEGMENT ADDRESS 
3187  04414 126352R       JMP TNAME,I  EXIT 






















 PAGE 0078 #01  CVT1  (ASCII TO BINARY CONVERSION) 


3189* 
3190*         ASCII TO BINARY CONVERSION ROUTINE
3191* 
3192*     CALLING SEQUENCE
3193* 
3194*         JSB CVT1
3195*         DEF DATA BUFFER ADDRESS 
3196*         DEF ADDRESS OF CHARACTER COUNT
3197* 
3198  04415 000000  CVT1  NOP          ENTRY/EXIT 
3199  04416 077534R       STB TEMP+3
3200  04417 002400        CLA 
3201  04420 073540R       STA TMP       SET ACCUMULATING VALUE TO ZERO
3202  04421 166415R       LDB CVT1,I   LOAD DATA ADDR INTO B
3203  04422 004066        CLE,ELB 
3204  04423 077533R       STB TEMP+2    FORM AND STORE CHAR ADDRESS 
3205  04424 036415R       ISZ CVT1     INCR TO CHARACTER COUNT
3206  04425 162415R       LDA CVT1,I
3207  04426 160000        LDA A,I 
3208  04427 073541R       STA TMP+1     STORE CHARACTER COUNT 
3209  04430 036415R       ISZ CVT1     INCR TO EXIT ADDR
3210  04431 063540R CV015 LDA TMP 
3211  04432 001020        ALS,ALS       TMP= 10*TMP 
3212  04433 043540R       ADA TMP 
3213  04434 001000        ALS TMP 
3214  04435 073540R       STA TMP       STORE MULTIPLIED VALUE
3215  04436 067533R       LDB TEMP+2    LOAD B WITH CHAR ADDR 
3216  04437 004065        CLE,ERB       FORM WORD ADDRESS 
3217  04440 160001        LDA B,I       LOAD A WITH DATA VALUE
3218  04441 002041        SEZ,RSS       IF E SET, THEN LOWER CHAR.
3219  04442 001727        ALF,ALF       UPPER CHAR., SO ROTATE INTO LOWE
3220  04443 013600R       AND M377      MASK OFF ALL BUT LOWER CHAR.
3221  04444 042464R       ADA DM48      CHECK IF LEGAL DATA CHARACTER 
3222  04445 073542R       STA TMP+2     STORE VALUE TEMPORARILY 
3223  04446 002020        SSA 
3224  04447 027676R       JMP M0950     ERROR 
3225  04450 042572R       ADA LMDG+3
3226  04451 002021        SSA,RSS 
3227  04452 027676R       JMP M0950     ERROR 
3228  04453 063542R       LDA TMP+2     CVT1 SO,
3229  04454 043540R       ADA TMP       ADD TO ACCUMULATED
3230  04455 073540R       STA TMP       VALUE AND STORE 
3231  04456 037533R       ISZ TEMP+2    INCR CHAR ADDRESS 
3232  04457 037541R       ISZ TMP+1     INCREMENT CHARACTER COUNT 
3233  04460 026431R       JMP CV015     GO TO PROCESS NEXT CHARACTER
3234  04461 067534R       LDB TEMP+3
3235  04462 063540R       LDA TMP       LOAD CONVERTED VALUE
3236  04463 126415R       JMP CVT1,I   RETURN 

3238  04464 177720  DM48  DEC -48 













 PAGE 0079 #01  CVT3 (BINARY TO ASCII CONVERSION) 


3240* 
3241*         BINARY TO ASCII CONVERSION ROUTINE
3242* 
3243*     CALLING SEQUENCE
3244* 
3245*         SET E TO 0 IF OCTAL CONVERSION OR 
3246*         SET E TO 1 FOR DECIMAL CONVERSION 
3247*         LDA NUMBER TO BE CONVERTED
3248*         JSB $CVT3 
3249* 
3250*              RESULTS IN ASCI, ASCI+1, ASCI+2
3251  04465 000000  $CVT3 NOP          ENTRY/EXIT 
3252  04466 077537R       STB TEMP+6   SAVE B REGISTER
3253  04467 066600R       LDB PTT       INIT LOCATION OF BUFFER 
3254  04470 077533R       STB TEMP+2
3255  04471 007400        CCB 
3256  04472 077536R       STB TEMP+5    START UPPER 
3257  04473 066566R       LDB FILL      SET BUFFER=ASCII 0'S
3258  04474 076601R       STB ASCI
3259  04475 076602R       STB ASCI+1
3260  04476 076603R       STB ASCI+2
3261  04477 002040        SEZ 
3262  04500 026521R       JMP %         DECIMAL CONVERSION
3263  04501 066565R       LDB DM6       (-6)
3264  04502 077531R       STB TEMP
3265  04503 000066        OCT 66        CLE,ELA 
3266  04504 073532R       STA TEMP+1
3267  04505 002400        CLA 
3268  04506 001600        ELA           SIGN BIT IS SIXTH DIGIT 
3269  04507 016551R       JSB DPCK
3270  04510 063532R       LDA TEMP+1
3271  04511 001723        OCT 1723      ALF,RAR 
3272  04512 073532R       STA TEMP+1
3273  04513 013560R       AND D7        (7) MASK 1 DIGIT
3274  04514 037531R       ISZ TEMP
3275  04515 026507R       JMP *-6 
3276  04516 062600R       LDA PTT      LOAD A WITH ASCI BUFFER ADDRESS
3277  04517 067537R       LDB TEMP+6   RESTORE B
3278  04520 126465R       JMP $CVT3,I  RETURN 
3279  04521 067550R %     LDB DM3          DEC CONV RTN 
3280  04522 077531R       STB TEMP
3281  04523 066567R       LDB LMDG
3282  04524 077534R       STB TEMP+3
3283  04525 066574R       LDB LPDG
3284  04526 077535R       STB TEMP+4
3285  04527 064000        LDB 0         A TO B
3286  04530 037533R       ISZ TEMP+2
3287  04531 002401  DPCR  CLA,RSS 
3288  04532 002004        INA       (FROM *+3)
3289  04533 147534R       ADB TEMP+3,I
3290  04534 006021        SSB,RSS 
3291  04535 026532R       JMP *-3 
3292  04536 147535R       ADB TEMP+4,I  <10**N, RESTORE VALUE 
3293  04537 016551R       JSB DPCK      PACK DIGIT
3294  04540 037535R       ISZ TEMP+4
3295  04541 037534R       ISZ TEMP+3







 PAGE 0080 #01  CVT3 (BINARY TO ASCII CONVERSION) 


3296  04542 037531R       ISZ TEMP
3297  04543 026531R       JMP DPCR      RETURN FOR 10**N-1
3298  04544 060001        LDA 1 
3299  04545 016551R       JSB DPCK
3300  04546 062600R       LDA PTT      LOAD A WITH ASCI BUFFER ADDRESS
3301  04547 067537R       LDB TEMP+6   RESTORE B REGISTER 
3302  04550 126465R       JMP $CVT3,I  RETURN 
3303  04551 000000  DPCK  NOP 
3304  04552 143533R       ADA TEMP+2,I
3305  04553 037536R       ISZ TEMP+5
3306  04554 026560R       JMP *+4 
3307  04555 001727        OCT 1727      ALF,ALF 
3308  04556 173533R       STA TEMP+2,I
3309  04557 126551R       JMP DPCK,I
3310  04560 173533R       STA TEMP+2,I
3311  04561 037533R       ISZ TEMP+2
3312  04562 003400        CCA 
3313  04563 073536R       STA TEMP+5
3314  04564 126551R       JMP DPCK,I    EXIT
3315* 
3316  04565 177772  DM6   DEC -6
3317  04566 030060  FILL  OCT 30060 
3318  04567 004570R LMDG  DEF *+1 
3319  04570 176030        DEC -1000 
3320  04571 177634  DM100 DEC -100      PRIORITY CODE 
3321  04572 177766  DM10  DEC -10 
3322  04573 177765        DEC -11 
3323  04574 004575R LPDG  DEF *+1 
3324  04575 001750        DEC 1000
3325  04576 000144  D100  DEC 100 
3326  04577 000012  D10   DEC 10
3327  04600 004601R PTT   DEF ASCI
3328  04601 000000  ASCI  BSS 3 






























 PAGE 0081 #01  SYSTEM START UP 


3330********************************************************************
3331*        THE START SECTION:                                        *
3332*              CLEARS INTERRUPT SYSTEM                             *
3333*              SETS FENCE REGISTER TO 0                            *
3334*              CLEARS XEQT                                         *
3335*              SCHEDULES 'FMGR' IF PRESENT
3336*              STARTS THE CLOCK (TBG) 
3337*              OUTPUTS MESSAGE TO SET TIME (ON CLOCK) 
3338*        THIS SECTION IS EXECUTED ONCE - IT IS OVERLAYED
3339********************************************************************
3340* 
3341* 
3342  04604         BUFFR EQU *        SHOULD BE AT LEAST 21 WORDS LONG 
3343  04604 106700  $STRT CLC 0         CLEAR INTERRUPT SYSTEM
3344* 
3345  04605 002400        CLA 
3346  04606 071775        STA FENCE 
3347  04607 102605        OTA 5B        SET FENCE REGISTER TO ZERO
3348  04610 071717        STA XEQT     CLEAR XEQT WORD
3349* 
3350  04611 065737        LDB DUMMY     GET ADDR OF PRIV INT CARD.
3351  04612 006002        SZB            SKIP IF 0 (NOT PRESENT). 
3352  04613 170001        STA B,I       STORE 0 (NOP) IN INT. LOCATION. 
3353* 
3354  04614 061760        LDA SECT3     FIND MINIMUM # SECTORS/TRACK
3355  04615 065760        LDB SECT3     SUBTRACT # FOR LU 3 
3356  04616 007004        CMB,INB        FROM # FOR LU 2. 
3357  04617 045757        ADB SECT2     IF POSITIVE RESULT, 
3358  04620 006021        SSB,RSS        LU 3 IS SMALLER. 
3359  04621 061757        LDA SECT2     OTHERWISE, USE LU 2 
3360  04622 003004        CMA,INA        AND SAVE 
3361  04623 073544R       STA N#SEC      AS A NEG. #. 

3363  04624 017601R       JSB $LIST    SCHEDULE 'FMGR' PROGRAM
3364  04625 000201        OCT 201       IF IT IS IN THE SYSTEM. 
3365  04626 004674R       DEF FMGR

3367  04627 063526R       LDA WORK      FOUND?
3368  04630 002003        SZA,RSS 
3369  04631 026647R       JMP TBGON    NO - 
3370  04632 002004        INA          YES - THEREFORE: 
3371  04633 065755        LDB TATLG     INHIBIT ALL TRACK 
3372  04634 174000        STB A,I       ALLOCATIONS UNTIL 
3373  04635 007400        CCB           'FMGR' EXECUTES.
3374  04636 075755        STB TATLG    'FMGR' UNDOES THIS 
3375  04637 061711        LDA SKEDD 
3376  04640 164000        LDB A,I      INSURE 'FMGR' IS 
3377  04641 053526R       CPA WORK      FIRST IN THE
3378  04642 101100        SWP           SCHEDULED LIST. 
3379  04643 075711        STB SKEDD 
3380  04644 170001        STA B,I 
3381  04645 006400        CLB 
3382  04646 174000        STB A,I 

3384  04647 061674  TBGON LDA TBG 
3385  04650 032663R       IOR OTA 







 PAGE 0082 #01  SYSTEM START UP 


3386  04651 072656R       STA *+5 
3387  04652 032664R       IOR M1100 
3388  04653 072657R       STA *+4 
3389  04654 000000  BREAD NOP 
3390  04655 063554R       LDA D2        SET INTERRUPT 
3391  04656 102600        OTA 0          INTERVAL TO 10 MSEC
3392  04657 103700        STC 0,C 

3394  04660 062665R       LDA BEGIN    OUTPUT 
3395  04661 016021X       JSB $SYMG     "SET TIME"

3397  04662 026474R       JMP $XEQ

3399  04663 102600  OTA   OTA 0 
3400  04664 001100  M1100 OCT 1100
3401  04665 004666R BEGIN DEF *+1 
3402  04666 177766        DEC -10 
3403  04667 006412        OCT 6412
3404  04670 051505        ASC 4,SET TIME
3405  04674 043115  FMGR  ASC 3,FMGR
3406  04677 000000  RTSWP NOP 










































 PAGE 0083 #01  OUTPUT *_ ON SYSTEM TELETYPE


3408********************************************************************
3409*        THE $TYPE SECTION FUNCTIONS AS FOLLOWS:                   *
3410*              ENTRY IS MADE BY STRIKING ANY SYSTEM TELETYPE KEY.  *
3411*              IF TELETYPE FLAG NOT BUSY, THEN * IS OUTPUT AND A   *
3412*                   REQUEST IS MADE FOR INPUT. IF FLAG IS SET THEN *
3413*                   IGNORE REQUEST. UPON COMPLETION OF INPUT (LF), *
3414*                   THE MESSAGE PROCESSOR ROUTINE IS CALLED.       *
3415*                   UPON RETURN, IF A REGISTER IS ZERO THEN NO     *
3416*                   MESSAGE TO BE OUTPUT. IF A NON-ZERO, THEN A IS *
3417*                   ADDRESS OF MESSAGE TO OUTPUT WITH CHARACTER    *
3418*                   COUNT THE FIRST WORD IN BUFFER.                *
3419********************************************************************
3420*                                                                  *
3421  04700 061735  $TYPE LDA FLG      CHECK SYSTEM TTY FLAG
3422  04701 002002        SZA 
3423  04702 026474R       JMP $XEQ     BUSY, SO RETURN TO $XEQ
3424  04703 016001X       JSB $XSIO    CALL TO OUTPUT ASTERISK(*) 
3425  04704 000001        OCT 1              ON SYSTEM TELETYPE 
3426  04705 000000        NOP 
3427  04706 000000        NOP 
3428  04707 000002        OCT 2 
3429  04710 004745R       DEF ASTRK 
3430  04711 177774        DEC -4       OUTPUT CHARACTER COUNT 
3431  04712 016001X       JSB $XSIO    CALL TO REQUEST OPERATOR INPUT 
3432  04713 000001        OCT 1 
3433  04714 004723R       DEF TYP10    INPUT COMPLETION ADDRESS 
3434  04715 000000        NOP 
3435  04716 000401        OCT 401      INPUT WITH TYPEOUT 
3436  04717 004604R BUFAD DEF BUFFR 
3437  04720 177724        DEC -44      DETERMINED BY $STRT ROUTINE
3438  04721 035735        ISZ FLG       SET SYSTEM TTY BUSY FLAG
3439  04722 026474R       JMP $XEQ     GO TO $XEQ 
3440  04723 016231R TYP10 JSB $MESS    GO TO MESSAGE PROCESSOR ROUTINE
3441  04724 002003        SZA,RSS       CHECK IF MESSAGE TO BE OUTPUT 
3442  04725 026742R       JMP TYP30     NO MESSAGE-SO GO RETURN 
3443  04726 164000        LDB A,I 
3444  04727 076740R       STB TYP20+6 
3445  04730 002004        INA 
3446  04731 072737R       STA TYP20+5 
3447  04732 016001X TYP20 JSB $XSIO    CALL TO OUTPUT ERR MESSAGE 
3448  04733 000001        OCT 1 
3449  04734 004742R       DEF TYP30    COMPLETION ADDRESS 
3450  04735 000000        NOP 
3451  04736 000002        OCT 2 
3452  04737 000000        NOP 
3453  04740 000000        NOP 
3454  04741 026474R       JMP $XEQ     GO TO $XEQ 
3455  04742 002400  TYP30 CLA           CLEAR SYSTEM FLAG FOR NEXT
3456  04743 071735        STA FLG       REQUEST 
3457  04744 026474R       JMP $XEQ
3458  04745 006412  ASTRK OCT 006412   CR, LF 
3459  04746 025137        ASC 1,*_     ASTERISK, LEFT ARROW 











 PAGE 0084 #01  MEMORY PROTECT VIOLATION SCHEDULER PREPROCESSORS


3461********************************************************************
3462*        THE $MPT1 THRU $MPT7 PREPROCESSORS CONSIST OF MEMORY      *
3463*        PROTECT VIOLATION CALLS FROM EXEC THAT INVOLVE LIST       *
3464*        PROCESSING.                                               *
3465*        THE FOLLOWING REQUESTS ARE HANDLED:                       *
3466*              PROGRAM COMPLETION (DORMANT)                        *
3467*              SUSPEND (OPERATOR)                                  *
3468*              BACKGROUND SEGMENT LOAD                             *
3469*              SCHEDULE WITH WAIT                                  *
3470*              SCHEDULE WITHOUT WAIT                               *
3471*              CURRENT SYSTEM TIME (TIME ROUTINE CALL)             *
3472*              SET ID SEGMENT TIME VALUES (TIMER ROUTINE CALL)     *
3473********************************************************************



3475* 
3476*     DORMANT REQUEST - PROGRAM HAS RUN TO COMPLETION 
3477* 
3478  04747 061717  $MPT1 LDA XEQT     ID SEG ADDR OF CURRENT 
3479  04750 072753R       STA *+3       EXECUTING PROGRAM 
3480  04751 017601R       JSB $LIST 
3481  04752 000100        OCT 100      DORMANT REQUEST
3482  04753 004753R       DEF * 
3483  04754 026474R       JMP $XEQ     GO TO $XEQ 



3485* 
3486*     PROGRAM SUSPEND REQUEST 
3487* 
3488  04755 061717  $MPT2 LDA XEQT     ID SEG ADDR OF CURRENT 
3489  04756 072761R       STA *+3       EXECUTING PROGRAM 
3490  04757 017601R       JSB $LIST 
3491  04760 000106        OCT 106      OPERATOR SUSPEND REQUEST 
3492  04761 004761R       DEF * 
3493  04762 027142R       JMP MPT7A+1 



3495* 
3496*     READ IN BACKGROUND PROGRAM SEGMENT
3497* 
3498  04763 003400  $MPT3 CCA          CHECK PARAMETER COUNT
3499  04764 041676        ADA RQCNT 
3500  04765 002002        SZA 
3501  04766 027077R       JMP MEM30    ERROR, SO RETURN 
3502  04767 061701        LDA RQP2     ADDR OF ASCII PROG SEGMENT 
3503  04770 072773R       STA *+3       TO BE READ IN 
3504  04771 017601R       JSB $LIST 
3505  04772 000207        OCT 207      SEGMENT READ REQUEST 
3506  04773 004773R       DEF * 
3507  04774 002002        SZA          CHECK IF ERROR FROM $LIST
3508  04775 027070R       JMP MEM20 
3509  04776 026474R       JMP $XEQ     OK, BUT DO NOT STORE RETURN








 PAGE 0085 #01  MEMORY PROTECT VIOLATION SCHEDULER PREPROCESSORS


3511* 
3512*    SCHEDULE REQUEST WITH WAIT 
3513* 
3514  04777 061717  $MPT4 LDA XEQT     CHECK IF BACKGROUND DISC RESIDENT
3515  05000 043563R       ADA D14           PROGRAM EXECUTING 
3516  05001 160000        LDA A,I 
3517  05002 013576R       AND M77 
3518  05003 053575R       CPA M3
3519  05004 002001        RSS 
3520  05005 027021R       JMP MPTA     NO-SO OMIT CHECKING
3521  05006 065701        LDB RQP2
3522  05007 016352R       JSB TNAME     GET PROG ID SEGMENT ADDR
3523  05010 002003        SZA,RSS 
3524  05011 027075R       JMP MEM25     NO SUCH PROGRAM ERROR 
3525  05012 043563R       ADA D14 
3526  05013 160000        LDA A,I 
3527  05014 013576R       AND M77 
3528  05015 053575R       CPA M3
3529  05016 027067R       JMP MEM20-1 
3530  05017 053556R       CPA D5
3531  05020 027067R       JMP MEM20-1 
3532  05021 017145R MPTA  JSB IDCKK     CHECK IF PROGRAM DORMANT
3533  05022 063526R       LDA WORK
3534  05023 171721        STA XTEMP,I  STORE WAIT PROG ID SEGMENT ADDR I
3535  05024 065717        LDB XEQT
3536  05025 047564R       ADB D15 
3537  05026 160001        LDA B,I 
3538  05027 032472R       IOR MWAIT    SET STATUS WAIT REQUEST BIT
3539  05030 170001        STA B,I       INTO CURRENT EXEC PROGRAM 
3540  05031 002001        RSS 
3541* 
3542*     SCHEDULE REQUEST WITHOUT WAIT 
3543* 
3544  05032 017145R $MPT5 JSB IDCKK     CHECK IF PROGRAM DORMANT
3545  05033 061676        LDA RQCNT     CHECK PARAMETER COUNT 
3546  05034 003004        CMA,INA 
3547  05035 002004        INA 
3548  05036 002003        SZA,RSS 
3549  05037 027064R       JMP MEM15          NO SCHEDULING PARAMETERS 
3550  05040 073531R       STA TEMP           SAVE LOOP COUNT
3551  05041 043556R       ADA D5
3552  05042 002020        SSA 
3553  05043 027077R       JMP MEM30 
3554  05044 067171R       LDB DEFR3          RQP3 ADDRESS 
3555  05045 063526R       LDA WORK
3556  05046 002004        INA 
3557  05047 073532R       STA TEMP+1         STORE ADDRESS
3558  05050 160001        LDA B,I            GET SCHEDULING PARAMETER 
3559  05051 160000        LDA A,I 
3560  05052 173532R       STA TEMP+1,I            AND STORE 
3561  05053 037532R       ISZ TEMP+1
3562  05054 006004        INB 
3563  05055 037531R       ISZ TEMP
3564  05056 027050R       JMP *-6       GO TO STORE NEXT SCHED PARAMETER
3565  05057 067526R       LDB WORK
3566  05060 047165R       ADB XD10







 PAGE 0086 #01  MEMORY PROTECT VIOLATION SCHEDULER PREPROCESSORS


3567  05061 063526R       LDA WORK
3568  05062 002004        INA 
3569  05063 170001        STA B,I 
3570  05064 061677  MEM15 LDA RQRTN 
3571  05065 171730        STA XSUSP,I  POINT
3572  05066 026474R       JMP $XEQ
3573  05067 066064R       LDB ERMS3 
3574  05070 063166R MEM20 LDA ASY      OUTPUT SC ERROR CODE 
3575  05071 016004X       JSB $ERMG    CALL SYSTEM ERROR MESSAGE ROUTINE
3576  05072 061717        LDA XEQT
3577  05073 016010X       JSB $ABRT    GO TO ABORT ROUTINE
3578  05074 026474R       JMP $XEQ     RETURN CONTROL TO $XEQ 
3579  05075 066065R MEM25 LDB ER5       NO SUCH PROG ERROR CODE 
3580  05076 027070R       JMP MEM20 
3581  05077 067167R MEM30 LDB ASC01    ILLEGAL PARAMETER COUNT
3582  05100 027070R       JMP MEM20 






3584* 
3585*     CALL TO GET SYSTEM REAL TIME
3586* 
3587  05101 003400  $MPT6 CCA          CHECK PARAMETER COUNT
3588  05102 041676        ADA RQCNT 
3589  05103 002002        SZA 
3590  05104 027077R       JMP MEM30    PARAMETER COUNT ERROR
3591  05105 061717        LDA XEQT     FORM PROG TYPE ADDR
3592  05106 043563R       ADA D14 
3593  05107 160000        LDA A,I      LOAD IN PROG TYPE
3594  05110 013564R       AND D15 
3595  05111 065701        LDB RQP2     USER BUFFER ADDRESS
3596  05112 007004        CMB,INB 
3597  05113 043550R       ADA DM3 
3598  05114 002021        SSA,RSS 
3599  05115 027125R       JMP MPT6A    BACKGROUND PROGRAM 
3600  05116 045746        ADB FREG2    CHECK IF LEGAL RT AREA ADDRESS 
3601  05117 006003  MPT6C SZB,RSS 
3602  05120 027127R       JMP MPT6B 
3603  05121 006020        SSB 
3604  05122 027127R       JMP MPT6B 
3605  05123 067170R       LDB ASC02    NO, SO LOAD B WITH ERROR CODE
3606  05124 027070R       JMP MEM20    ERROR
3607  05125 045752  MPT6A ADB FREG3    CHECK IF LEGAL BACK. ADDRESS 
3608  05126 027117R       JMP MPT6C 
3609  05127 016175R MPT6B JSB TIME     CALL TIME SUBROUTINE 
3610  05130 027064R       JMP MEM15     GO TO STORE RETURN ADDRESS














 PAGE 0087 #01  MEMORY PROTECT VIOLATION SCHEDULER PREPROCESSORS


3612* 
3613*     CALL TO SET ID SEGMENT TIME VALUES
3614* 
3615  05131 063551R $MPT7 LDA DM4      CHECK PARAM COUNT FOR 4 OR 7 
3616  05132 041676        ADA RQCNT 
3617  05133 002003        SZA,RSS 
3618  05134 027141R       JMP MPT7A 
3619  05135 063164R       LDA DM7 
3620  05136 041676        ADA RQCNT 
3621  05137 002002        SZA 
3622  05140 027077R       JMP MEM30    ERROR IN PARAMETER COUNT 
3623  05141 016222R MPT7A JSB TIMER    CALL TIMER ROUTINE 
3624  05142 002002        SZA 
3625  05143 027070R       JMP MEM20 
3626  05144 027064R       JMP MEM15 
3627*     CHECK IF PROGRAM DORMANT AND THEN SCHEDULE
3628  05145 000000  IDCKK NOP 
3629  05146 065701        LDB RQP2      GET ID SEGMENT ADDRESS
3630  05147 016352R       JSB TNAME 
3631  05150 002003        SZA,RSS 
3632  05151 027075R       JMP MEM25     NO SUCH PROGRAM ERROR 
3633  05152 073162R       STA IDCKL     SAVE ID SEG ADDRESS FOR $LIST 
3634  05153 043564R       ADA D15       CHECK PROGRAM STATUS FOR DORMANT
3635  05154 160000        LDA A,I 
3636  05155 171731        STA XA,I      RETURN PROG STATUS IN A REG 
3637  05156 002002        SZA           DORMANT?
3638  05157 027064R       JMP MEM15      NO - DO NOT SCHEDULE 
3639  05160 017601R       JSB $LIST      YES - SCHEDULE 
3640  05161 000101        OCT 101 
3641  05162 005162R IDCKL DEF * 
3642  05163 127145R       JMP IDCKK,I   RETURN

3644  05164 177771  DM7   DEC -7
3645  05165 000012  XD10  DEC 10
3646  05166 051503  ASY   ASC 1,SC     ASCII -SC- FOR SCHED ERROR 
3647  05167 030061  ASC01 ASC 1,01     ILLEGAL PARAM COUNT ERR CODE 
3648  05170 030062  ASC02 ASC 1,02     ILLEGAL BUFFER ADDRESS ERR CODE
3649  05171 001702  DEFR3 DEF RQP3

























 PAGE 0088 #01  ** SYSTEM BASE PAGE COMMUNICATION AREA *


3651* 
3652* 
3653* 
3654*** SYSTEM BASE PAGE  COMMUNICATION  AREA *** 
3655* 
3656  01650         .     EQU 1650B     ESTABLISH ORIGIN OF AREA
3657* 
3658* SYSTEM TABLE DEFINITION * 
3659* 
3660  01650         EQTA  EQU .+0      FWA  OF  EQUIPMENT TABLE 
3661  01651         EQT#  EQU .+1       # OF EQT ENTRIES
3662* 
3663  01652         DRT   EQU .+2      FWA  OF  DEVICE REFERENCE TABLE
3664  01653         LUMAX EQU .+3       # OF LOGICAL UNITS (IN DRT) 
3665* 
3666  01654         INTBA EQU .+4      FWA  OF  INTERRUPT TABLE 
3667  01655         INTLG EQU .+5       # OF INTERRUPT TABLE ENTRIES
3668* 
3669  01656         TAT   EQU .+6      FWA  OF  TRACK ASSIGNMENT TABLE
3670* 
3671  01657         KEYWD EQU .+7      FWA  OF  KEYWORD BLOCK 
3672* 
3673* I/O MODULE/DRIVER COMMUNICATION 
3674* 
3675  01660         EQT1  EQU .+8      ADDRESSES
3676  01661         EQT2  EQU .+9 
3677  01662         EQT3  EQU .+10      OF
3678  01663         EQT4  EQU .+11
3679  01664         EQT5  EQU .+12      CURRENT 
3680  01665         EQT6  EQU .+13
3681  01666         EQT7  EQU .+14      15-WORD 
3682  01667         EQT8  EQU .+15
3683  01670         EQT9  EQU .+16      EQT 
3684  01671         EQT10 EQU .+17
3685  01672         EQT11 EQU .+18      ENTRY 
3686  01771         EQT12 EQU .+81
3687  01772         EQT13 EQU .+82
3688  01773         EQT14 EQU .+83
3689  01774         EQT15 EQU .+84
3690* 
3691  01673         CHAN  EQU .+19     CURRENT DMA CHANNEL #
3692  01674         TBG   EQU .+20     I/O ADDRESS OF TIME-BASE CARD
3693  01675         SYSTY EQU .+21     EQT ENTRY ADDRESS OF SYSTEM TTY
3694* 
3695* SYSTEM REQUEST PROCESSOR /'EXEC' COMMUNICATION *
3696* 
3697  01676         RQCNT EQU .+22     # OF REQUEST PARAMETERS -1 
3698  01677         RQRTN EQU .+23      RETURN POINT ADDRESS
3699  01700         RQP1  EQU .+24      ADDRESSES 
3700  01701         RQP2  EQU .+25
3701  01702         RQP3  EQU .+26       OF REQUEST 
3702  01703         RQP4  EQU .+27
3703  01704         RQP5  EQU .+28       PARAMETERS 
3704  01705         RQP6  EQU .+29
3705  01706         RQP7  EQU .+30       (SET FOR MAXIMUM OF
3706  01707         RQP8  EQU .+31        8 PARAMETERS) 







 PAGE 0089 #01  ** SYSTEM BASE PAGE COMMUNICATION AREA *


3707* 
3708* DEFINITION OF SYSTEM LISTS (QUEUES) * 
3709* 
3710  01710         DORMT EQU .+32     ADDRESS OF 'DORMANT' LIST, 
3711  01711         SKEDD EQU .+33      'SCHEDULE' LIST,
3712  01714         SUSP3 EQU .+36      'AVAILABLE MEMORY' LIST,
3713  01715         SUSP4 EQU .+37      'DISC ALLOCATION'  LIST,
3714  01716         SUSP5 EQU .+38      'OPERATOR SUSPEND' LIST 
3715* 
3716* DEFINITION OF EXECUTING PROGRAM  ID SEGMENT' *
3717* 
3718  01717         XEQT  EQU .+39     ID SEGMENT ADDR. OF CURRENT PROG.
3719  01720         XLINK EQU .+40       'LINKAGE'
3720  01721         XTEMP EQU .+41       'TEMPORARY (5-WORDS) 
3721  01726         XPRIO EQU .+46       'PRIORITY' WORD
3722  01727         XPENT EQU .+47       'PRIMARY ENTRY POINT'
3723  01730         XSUSP EQU .+48       'POINT OF SUSPENSION'
3724  01731         XA    EQU .+49       'A REGISTER' AT SUSPENSION 
3725  01732         XB    EQU .+50       'B REGISTER' 
3726  01733         XEO   EQU .+51       'E AND OVERFLOW
3727* 
3728* SYSTEM MODULE COMMUNICATION FLAGS * 
3729* 
3730  01734         OPATN EQU .+52     OPERATOR/KEYBOARD ATTENTION FLAG 
3731  01735         OPFLG EQU .+53     OPERATOR COMMUNICATION FLAG
3732  01736         SWAP  EQU .+54     RT DISC RESIDENT SWAPPING FLAG 
3733  01737         DUMMY EQU .+55     I/O ADDRESS OF DUMMY INT. CARD 
3734  01740         IDSDA EQU .+56     DISC ADDR. OF FIRST ID SEGMENT 
3735  01741         IDSDP EQU .+57      -POSITION WITHIN SECTOR 
3736* 
3737* DEFINITION OF MEMORY ALLOCATION BASES * 
3738* 
3739  01742         BPA1  EQU .+58     FWA R/T DISC RES. BP LINK AREA 
3740  01743         BPA2  EQU .+59     LWA R/T DISC RES. BP LINK AREA 
3741  01744         BPA3  EQU .+60     FWA BKG DISC RES. BP LINK AREA 
3742  01745         LBORG EQU .+61     FWA OF RESIDENT LIBRARY AREA 
3743  01746         RTORG EQU .+62     FWA OF REAL-TIME AREA
3744  01747         RTCOM EQU .+63     LENGTH OF REAL TIME COMMON AREA
3745  01750         RTDRA EQU .+64     FWA OF R/T DISC RESIDENT AREA
3746  01751         AVMEM EQU .+65     FWA OF SYSTEM AVAILABLE MEMORY 
3747  01752         BKORG EQU .+66     FWA OF BACKGROUND AREA 
3748  01753         BKCOM EQU .+67     LENGTH OF BACKGROUND COMMON AREA 
3749  01754         BKDRA EQU .+68     FWA OF BKG DISC RESIDENT AREA
3750* 
3751* UTILITY PARAMETERS
3752* 
3753  01755         TATLG EQU .+69     LENGTH OF TRACK ASSIGNMENT TABLE 
3754  01756         TATSD EQU .+70      # OF TRACKS ON SYSTEM DISC
3755  01757         SECT2 EQU .+71      # SECTORS/TRACK ON LU 2 (SYSTEM)
3756  01760         SECT3 EQU .+72      # SECTORS/TRACK ON LU 3 (AUX.)
3757* 
3758  01761         DSCLB EQU .+73     DISC ADDR OF RES LIB ENTRY PTS 
3759  01762         DSCLN EQU .+74      # OF RES LIB ENTRY POINTS 
3760  01763         DSCUT EQU .+75     DISC ADDR OF RELOC UTILITY PROGS 
3761  01764         DSCUN EQU .+76      # OF RELOC UTILITY PROGS
3762  01765         LGOTK EQU .+77     LOAD-N-GO: LU,STG TRACK,# OF TRKS







 PAGE 0090 #01  ** SYSTEM BASE PAGE COMMUNICATION AREA *


3763  01766         LGOC  EQU .+78      CURRENT LGO TRACK/SECTOR ADDRESS
3764  01767         SFCUN EQU .+79     SOURCE FILE LU AND DISC ADDRESS
3765  01770         MPTFL EQU .+80      MEMORY PROTECT ON/OFF FLAG (0/1)
3766  01775         FENCE EQU .+85      MEM PROTECT FENCE ADDRESS 
3767* 
3768  01777         BKLWA EQU .+87     LWA OF MEMORY IN BACKGROUND
3769* 
3770* 
3771  01745         FREG1 EQU LBORG 
3772  01746         FREG2 EQU RTORG 
3773  01752         FREG3 EQU BKORG 
3774  01735         FLG   EQU OPFLG 
3775* 
3776  00000         A     EQU 0B        LOCATION OF A REGISTER
3777  00001         B     EQU 1B        LOCATION OF B REGISTER
3778                      END $STRT 
**  NO ERRORS*







































$END ASMB     

*
--> Assemble 29029-60001_RTE_DVR00
ON,ASMB,99







 PAGE 0001


0001                ASMB,R,L,B,C   *R/T DRIVER <00> TELETYPEWRITER* 
**  NO ERRORS*





























































 PAGE 0002 #01  ** RTE DRIVER DVR00 29029-60001 REV 1543 **             


0001                ASMB,R,L,B,C   *R/T DRIVER <00> TELETYPEWRITER* 
0003  00000               NAM DVR00,0 29029-60001 DATE CODE 1543  
0004* 
0005                      ENT I.00,C.00,I.01,C.01,I.02,C.02 
0006                      EXT $LIST 
0007******************************************************************
0008*  (C) COPYRIGHT HEWLETT-PACKARD COMPANY 1975.  ALL RIGHTS
0009*  RESERVED. NO PART OF THIS PROGRAM MAY BE PHOTOCOPIED 
0010*  REPRODUCED OR TRANSLATED INTO ANOTHER PROGRAM LANGUAGE WITHOUT 
0011*  THE PRIOR WRITTEN CONSENT OF HEWLETT-PACKARD COMPANY.
0012******************************************************************
0013* 
0014****** PROGRAM  DESCRIPTION ******
0015* 
0016*    DRIVER 00  OPERATES UNDER THE CONTROL OF THE 
0017* I/O CONTROL MODULE OF THE REAL-TIME EXECUTIVE.
0018* THIS DRIVER IS RESPONSIBLE FOR CONTROLLING DATA 
0019* TRANSMISSION WITH A TELETYPE ASR 33/35 WITH THE 
0020* 2116 PARALLEL INTERFACE. <00> IS THE EQUIPMENT
0021* CODE ASSIGNED TO THIS TYPE OF DEVICE. I.00 IS 
0022* THE ENTRY POINT FOR THE *INITIATION* SECTION AND
0023* C.00 FOR THE *COMPLETION* SECTION.
0024* 
0025*  - THE INITIATION SECTION IS CALLED FROM I/O
0026*    CONTROL TO INITIALIZE A DEVICE AND INITIATE
0027*    A DATA TRANSFER OR CONTROL FUNCTION. 
0028* 
0029*      CALLING SEQUENCE:
0030* 
0031*           - ADDRESSES OF DEVICE EQT ENTRY 
0032*             SET IN "EQT1-EQT15" - 
0033* 
0034*           (A) = I/O ADDRESS OF DEVICE 
0035* 
0036*        (P)   JSB  I.00
0037*        (P+1) - RETURN - 
0038* 
0039*               (A) = 0, OPERATION INITIATED, OR
0040*               (A) = REJECT CODE:
0041* 
0042*                    2, ILLEGAL CONTROL REQUEST,
0043*                       OR CONTROL FUNCTION HAS 
0044*                       BEEN DONE (E.G., SET EOT
0045*                       STATUS).
0046* 
0047* 
0048*  - THE COMPLETION SECTION IS CALLED BY CENTRAL
0049*    INTERRUPT CONTROL TO CONTINUE OR COMPLETE
0050*    AN OPERATION.
0051* 
0052*      CALLING SEQUENCE:
0053* 
0054*           - ADDRESSES OF DEVICE EQT ENTRY 
0055*             SET IN "EQT1-EQT15" - 
0056* 
0057*           (A) = I/O ADDRESS OF DEVICE 







 PAGE 0003 #01  ** RTE DRIVER DVR00 29029-60001 REV 1543 **             


0058* 
0059*        (P)   JSB  C.00
0060*        (P+1) -- COMPLETION RETURN   --
0061*        (P+2) -- CONTINUATION RETURN --
0062* 
0063*         - COMPLETION RETURN:
0064*            (A) = 0, SUCCESSFUL COMPLETION WITH
0065*               (B) = # WORDS OR CHARS. TRANSFERRED 
0066*            (A) = 2 IF SIMULATED EOT ENCOUNTERED,
0067*            (A) = 4 IF TIME OUT OCCURED. 
0068*               (B) = 0 
0069* 
0070*         - CONTINUATION RETURN: REGISTERS
0071*               MEANINGLESS.
0072* 
0073* 
0074*  - RECORD FORMATS:
0075* 
0076*     ASCII (INPUT): A STRING OF CHARACTERS TERMIN- 
0077*     -----          ATED BY A LINE-FEED. IF THE
0078*                    REQUESTED LENGTH IS FULFILLED
0079*                    BEFORE A LINE FEED, THE RE-
0080*                    MAINING CHARACTERS ARE IGNORED 
0081*                    UNTIL A LINE-FEED IS INPUT.
0082*                    THE 8-LEVEL BIT (BIT 07) IS
0083*                    SET = 0 FOR 7-BIT ASCII CODE.
0084* 
0085*         SPECIAL CHARACTER PROCESSING: 
0086* 
0087*          RETURN - ALWAYS IGNORED AND IS NOT 
0088*                   TRANSMITTED TO USER BUFFER
0089*          LINE-FEED - IGNORED IF INPUT BEFORE
0090*                   THE FIRST VALID CHARACTER 
0091*                   OF A RECORD; RECORD TERMINATOR
0092*                   AT THE END OF A RECORD AND IS 
0093*                   NOT TRANSMITTED TO BUFFER OR
0094*                   COUNTED.
0095*         CONTROL/A  - DELETES PREVIOUS CHARACTER 
0096*           BACKSPACE (CRT) OR CONTROL/Y -DELETES PREVIOUS CHARACTER
0097*           CONTROL/H 
0098*          RUB-OUT    - DELETES CURRENT RECORD; 
0099*                       AFTER LINE-FEED IS INPUT, 
0100*                       NEXT RECORD IS READ.
0101*          CONTROL/D  - FOURCES EOT IF ENTERED AT ANY TIME
0102* 
0103*     ASCII (OUTPUT): A STRING OF CHARACTERS, THE 
0104*     -----          NUMBER DESIGNATED BY THE 
0105*                    "BUFFER LENGTH" IN THE REQUEST,
0106*                    TERMINATED BY A RETURN AND 
0107*                    LINE-FEED (SUPPLIED BY THE 
0108*                    DRIVER). 
0109* 
0110*                     SPECIAL PROCESSING FOR ASCII
0111*                     OUTPUT IS PROVIDED IF BIT 09
0112*                     IN THE CONTROL WORD = 1. THIS 
0113*                     MEANS THAT THE ASCII INFOR- 







 PAGE 0004 #01  ** RTE DRIVER DVR00 29029-60001 REV 1543 **             


0114*                     MATION IS TO BE PUNCHED INSTEAD 
0115*                     OF PRINTED ON AN ASR-35.
0116* 
0117*         SPECIAL CHARACTER PROCESSING: 
0118* 
0119*          LEFT-ARROW:  IF A LEFT-ARROW IS THE
0120*                    LAST CHARACTER IN THE USER 
0121*                    BUFFER, THE RETURN/LINE-FEED 
0122*                    AND ARROW CODES ARE NOT OUTPUT.
0123* 
0124*          A ZERO BUFFER LENGTH CAUSES ONLY A 
0125*                    RETURN/LINE-FEED TO BE OUTPUT. 
0126* 
0127* 
0128*     BINARY (INPUT): A STRING OF CHARACTERS
0129*     ------          SPECIFIED BY THE BUFFER 
0130*                     "LENGTH" IN THE REQUEST.
0131* 
0132*                   "V-FORMAT": IF THE "V" FIELD
0133*                    IN THE CONTROL WORD OF THE 
0134*                    REQUEST = 1, THE LENGTH OF 
0135*                    THE RECORD IS DESIGNATED (IN 
0136*                    WORDS) BY THE FIRST CHARACTER
0137*                    OF THE RECORD. THE WORD COUNT
0138*                    INCLUDES THE FIRST WORD. IF
0139*                    THE WORD COUNT IS LARGER THAN
0140*                    THE BUFFER LENGTH, THE BUFFER
0141*                    LENGTH IS USED.
0142* 
0143*     BINARY (OUTPUT): A STRING OF CHARACTERS 
0144*     ------          SPECIFIED BY THE BUFFER 
0145*                     "LENGTH" IN THE REQUEST.
0146*                     FOUR (4) FEED-FRAMES ARE
0147*                     OUTPUT AT THE END OF THE
0148*                     END TO SERVE AS AN INTER- 
0149*                     RECORD GAP. 
0150* 
0151* 
0152*  -  SIMULATED END-OF-TAPE: IF CONTROL/D IS ENTERED DURING A NORMAL
0153*     --------- --- -- ----  ASCII READ OR IF 30 FEED-FRAMES
0154*                            (ZEROS) ARE INPUT
0155*                            BEFORE THE FIRST CHAR- 
0156*                            ACTER OF A RECORD, AN
0157*                            EOT INDICATION IS
0158*                            SET IN THE STATUS FIELD
0159*                            (BIT 05 OF WORD 5) OF
0160*                            THE EQT ENTRY AND THE
0161*                            INPUT TERMINATED. IF 
0162*                            THE EOT BIT IS SET 
0163*                            WHEN THE CONDITION IS
0164*                            ENCOUNTERED, THE EOT 
0165*                            IS IGNORED AND CHARS 
0166*                            ARE INPUT UNTIL A
0167*                            RECORD IS STARTED (I.E,
0168*                            LEADER IS AUTOMATICALLY
0169*                            SKIPPED AFTER EOT).







 PAGE 0005 #01  ** RTE DRIVER DVR00 29029-60001 REV 1543 **             


0170* 
0171*     SPECIAL FORMAT BIT:THE SPECIAL FORMAT BIT(10) ALLOWS
0172*                        READING OF NONSTANDARD TAPE FORMATS
0173*                        IF SET AND V IS NOT SET THEN NO
0174*                        LEADER WILL BE SKIPPED ON READS
0175*                        AND ON BINARY OUTPUT THE INTERRECORD 
0176*                        FOUR FEED FRAMES WILL BE SUPPRESSED. 
0177*                        IN ADDITION ALL CHARACTERS INA AN ASCII
0178*                        EXCEPT THE TERMINAL LINE FEED ARE PASSED 
0179*                        TO THE USER BUFFER AND ARE COUNTED.
0180*                        IF ON INPUT THE V-BIT IS SET THE 
0181*                        RECORD WILL BE PROCESSED AS AN ABSOLUTE
0182*                        BINARY RECORD IN THAT 3 WILL BE ADDED
0183*                        TO THE WORD COUNT IN THE FIRST NON-ZERO
0184*                        CHARACTER.  THE V-BIT IS NOT TESTED
0185*                        FOR OUTPUT SO THE FOUR FEED-FRAMES WILL
0186*                        BE SUPPRESSED AS IF THE V-BIT WERE NOT . 
0187* 
0188*  -  CONTROL FUNCTIONS ACCEPTED: 
0189* 
0190*     10 - TEN INCHES OF ZEROS (FEED-FRAMES) ARE
0191*         OUTPUT FOR LEADER/TRAILER.
0192* 
0193*     11 - LINE SPACING: THE PARAMETER WORD OF THE
0194*           REQUEST DETERMINES THE NUMBER OF
0195*           LINE-FEEDS TO BE OUTPUT.
0196* 
0197*     07 - THE EOT STATUS BIT IS SET TO ALLOW 
0198*          "LEADER" TO BE SKIPPED ON THE NEXT 
0199*          INPUT REQUEST. 
0200* 
0201* 
0202*  -  SYSTEM TELETYPE PROCESSING: THE SYSTEM
0203*              TELETYPE IS ALWAYS LEFT IN THE 
0204*              "INPUT STATE" WITH CONTROL SET/
0205*              FLAG CLEARED TO LEAVE THE KEYBOARD 
0206*              ACTIVE.  IF A KEY IS STRUCK WITH 
0207*              NO INPUT IN EFFECT, THE FLAG 
0208*              "OPATN" IN BASE PAGE IS SET NON- 
0209*              ZERO. IF A KEY IS STRUCK DURING
0210*              AN OUTPUT OPERATION TO THE SYSTEM
0211*              TTY, THE FLAG IS SET.
0212* 
0213* 
0214* -   SPECIAL PROCESSING

0216*          THIS DRIVER HAS BEEN MODIFIED TO CORRECTLY DRIVE 
0217*          THE PUNCH AND PHOTO READER.  IT ALSO CHECKS FOR
0218*          BUSY STATUS ON THE TTY INTERFACE AND TAKES THE 
0219*          ACTION NEEDED TO AVOID LOSS OF SYNC. 

0221* -  2762 PRINTER PROCESSING

0223*         THE 2762 PRINTER REQUIRES THE FOLLOWING SPECIAL ACTIONS:
0224*          1. STALL CHARACTERS ARE PROVIDED ON THE END OF EACH OUTPU
0225*          THE NUMBER  OF STALLS IS A FUNCTION OF WHETHER IT IS A 







 PAGE 0006 #01  ** RTE DRIVER DVR00 29029-60001 REV 1543 **             


0226*           2762 A OR B AND THE # OF CHARACTERS PREVIOUSLY TPUT 
0227*          IN THE LINE. 
0228*          2. CONTROL/H IS SENT AS PART OF BACKSPACE PROCESSING 
0229*          INSTEAD OF CONTROL/Y.

0231*         THE ABOVE PROCESSING IS DONE FOR
0232*         DEVICES WITH ODD SUBCHANNELS. 
0233*         (SEE BELOW FOR MEANING OF OTHER SUBCHANNEL BITS)


0235*  -  EOT/TIME OUT OPTIONS

0237*     TIME OUT IS INTERCEPTED BY THIS DRIVER AND EOT DETECTED BY
0238*     IT.  THE CALLER WILL ALWAYS RECEIVE THE 
0239*     STATUS APPROPIATE TO
0240*     THE CONDITION, HOWEVER THE SYSTEM NEED NOT BE NOTIFIED OF 
0241*     THE CONDITION.  THE DRIVER ANDS THE UNIT NUMBER WITH THE
0242*     A REGISTER PRIOR TO A COMPLETION RETURN THUS THE SUBCHANNEL 
0243*     DEFINES THE POSSIBLE ERRORS SENT TO THE SYSTEM. 
0244*     TIME OUT IS 4 AND EOT IS 2 THUS:

0246*     IF EOT IS TO PUT THE DEVICE DOWN SET SUBCHANNEL TO 2,3,6,OR 7.
0247*     IF TIME OUT IS TO PUT THE DEVICE DOWN SET 
0248*     SUBCHANNEL 4,5,6 OR 7.

0250*     THIS DOES NOT AFFECT THE NOT-READY ERROR CAUSED BY LOW TAPE 
0251*     ON THE PUNCH SINCE THIS IS DETECTED AT INITIATION.

0253*     THE ABOVE INPLIES TT A ZERO OR 1 SUBCHANNEL TTY OR PHOTO
0254*     READER IS ONLY SET DOWN BY AN OPERATOR "DN" REQUEST.


0256*  -  PROGRAM SCHEDULING

0258*          IF A PROGRAM IS LINKED TO THE TRAP CELL FOR ONE OR 
0259*          MORE OF THE EQT ENTRIES FOR THIS DRIVER THEN THAT
0260*          TTY IS A TERMINAL. 
0261* 
0262*          A TERMINAL, WHEN ENABLED, MAY SCHEDULE THE SO LINKED 
0263*          PROGRAM (MAY BE A DIFFERENT PROGRAM FOR EACH TERMINAL) 
0264*          BY STRIKING ANY KEY AND TIME 
0265*          THAT THE TTY IS NOT DOING INPUT
0266*          ( THE SAME AS GETTING SYSTEM ATTENTION).  IF THE 
0267*          TERMINAL IS THE SYSTEM TTY THE SYSTEM ATTENTION FLAG 
0268*          IS SET AND THE PROGRAM IS NOT SCHEDULED. 
0269*          WHEN THE PROGRAM RUNS A CALL TO RMPAR WILL RECOVER 
0270*          WORDS 4 THRU 8 OF THE EQT OF THE INTERRUPTING
0271*          TTY,  THAT IS EQT4 IS SET IN THE PROGRAMS B REG. 

0273* - BUFFER FLUSHING 

0275*          A BUFFER FLUSH CALL HAS BEEN IMPLEMENTED.  AFTER THIS
0276*          CALL ALL WRITES AND ACTION (I.E. LEADER AND PAGING)
0277*          CONTROL REQUESTS ARE IGNORED UNTIL EITHER: 

0279*              1.) THE QUE IS EMPTY OR







 PAGE 0007 #01  ** RTE DRIVER DVR00 29029-60001 REV 1543 **             


0280*              2.) A RESTORE CONTROL REQUEST IS PROCESSED OR
0281*              3.) AN INPUT REQUEST IS PROCESSED. 
0282* - ADDED REQUESTS

0284*        CONTROL SUBFUNCTION           ACTION 

0286*             20                ENABLE TERMINAL 

0288*             21                DISABLE TERMINAL

0290*             22                SET TIME OUT ( THE EXTRA CONTROL
0291*                               WORD IS TO BE THE NEW TIME OUT) 

0293*             23                CLEAR THE OUTPUT QUE (BUFFER FLUSH) 

0295*             24                RESTORE OUTPUT PROCESSING 
0296*                               THIS REQUEST NEED ONLY BE GIVEN IF
0297*                               SOME OF THE BUFFER IS TO BE SAVED.

0299* - EQT USAGE - 
0300* 
0301*     EQT5  STATUS BITS ARE USED AS FOLLOWS:
0302* 
0303* BIT 0 - NOT USED. 
0304* BIT 1 - TERMINAL IS ENABLED (1)/DISABLED (0)
0305* BIT 2 - A STALL IS REQUIRED/INPROGRESS. 
0306* BIT 3 - NOT USED. 
0307* BIT 4 - NOT USED. 
0308* BIT 5 - EOT FLAG. 
0309* BIT 6 - NOT USED. 
0310* BIT 7 - BUFFER FLUSH IS IN PROGRESS (NEVER SEEN BY A USER). 
0311* 
0312*     EQT6  FUNCTION BITS AS SEEN IN THE CALL, I.E.:
0313* 
0314* BIT 6 - BINARY OR M BIT 
0315* BIT 7 - VARIABLE LENGTH BINARY OR (V) BIT 
0316* BIT 8 - ECHO BIT SET TO ECHO ON INPUT (E) BIT 
0317* BIT 9 - PUNCH BIT SET TO PUNCH ASCII. 
0318* BIT 10- HONEST BIT (SEE ABOVE) (H) BIT. 
0319* 
0320*     EQT7  USER BUFFER LENGTH
0321* 
0322*     EQT8  USER BUFFER ADDRESS.
0323* 
0324*     EQT9  RUNNING CHARACTER ADDRESS,POINTS AT NEXT CHARACTER. 
0325* 
0326* EQT10  ADDRESS OF LAST CHARACTER IN USER BUFFER FOR READ/WRITE
0327*        ALSO OPERATION COUNT ON LEADER AND SPACING CONTROL OPS.
0328* 
0329* EQT11  STALL COUNTER - EOT COUNTER - RECORD GAP COUNTER.
0330*        RESIDUE COUNTER ON VARIABLE LENGTH BINARY READS. 
0331* 
0332* EQT12  ADDRESS TO GO TO ON INTERRUPT. 
0333* 
0334* EQT13  -1 IF NOT A TERMINAL ELSE ID SEG ADDRESS OF TERMINAL PROG. 








 PAGE 0008 #01  <DVR00  **INITIATION SECTION**> 


0336* 
0337********* INITIATION  SECTION **********
0338* 
0339* 
0340  00000 000000  I.00  NOP 
0341  00000         I.01  EQU I.00
0342  00000         I.02  EQU I.00
0343* 
0344  00001 072145R       STA NXQU      SAVE THE SELECT CODE
0345  00002 016271R       JSB SETIO    SET I/O INSTRUCTIONS FOR UNIT. 
0346  00003 062042R       LDA DIMX      SET UP C.XX FOR CONTINUATION
0347  00004 072341R       STA C.00      RETURN
0348* 
0349  00005 161772        LDA EQT13,I   GET SCHEDULE FLAG 
0350  00006 002002        SZA           DEFINED?? 
0351  00007 026024R       JMP CONT      YES CONTINUE
0352  00010 062145R       LDA NXQU      NO SO SET UP
0353  00011 042045R       ADA N6        INDEX INTO THE INTBLE 
0354  00012 041654        ADA INTBA     TO GET THE SCEDULE WORD 
0355  00013 164000        LDB A,I       GET THE WORD
0356  00014 007124        CMB,CLE,SSB,INB SET POSITIVE   IF EQT THEN
0357  00015 007700        CCB,CCE       SET TO -1  IE NO PGM TO BE SCHED
0358  00016 175772        STB EQT13,I   SAVE FOR PGM CALL 
0359  00017 065660        LDB EQT1      SET EQT ADDRESS IN
0360  00020 174000        STB A,I       THE INTERRUPT TABLE 
0361  00021 161663        LDA EQT4,I    SET THE "I WILL HANDLE TIME OUT"
0362  00022 032041R       IOR BIT12     BIT IN EQT4 
0363  00023 171663        STA EQT4,I    RESTORE THE WORD

0365  00024 161665  CONT  LDA EQT6,I    GET REQUEST CONTROL WORD
0366  00025 000023  .23B  OCT 23 RAR    ROTATE TO TEST FOR
0367  00026 002030        SSA,SLA       CONTROL REQUEST 
0368  00027 026164R       JMP CONTL     - CONTROL REQUEST - 
0369* 
0370  00030 165664        LDB EQT5,I
0371  00031 005727        BLF,BLF       CHECK IF IGNOR BIT IS SET 
0372  00032 000036        SLA,ELA       IF READ SKIP E=1/0 READ/WRITE 
0373  00033 006021        SSB,RSS       IF WRITE AND FLUSHING,SKIP
0374  00034 026047R       JMP NSET      FAILED ONE OF THE CONDITIONS
0375* 
0376  00035 016145R       JSB NXQU      GO TEST THE CONDITIONS
0377  00036 062040R IMCOM LDA .4        THEN DO AN
0378  00037 126000R       JMP I.00,I    IMMEADIATE EXIT 

0380  00040 000004  .4    OCT 4 
0381  00041 010000  BIT12 OCT 10000 
0382  00042 000036R DIMX  DEF IMCOM 
0383  00043 177734  N36   DEC -36       MAX STALL COUNT FOR 2762B 
0384  00044 000000  NULCT NOP 
0385  00045 177772  N6    DEC -6
0386  00046 177771  N7    DEC -7












 PAGE 0009 #01  <DVR00  **INITIATION SECTION**> 


0388* 
0389* CONSTRUCT DEVICE PROGRAM CODE ACCORDING TO REQUEST
0390* 
0391  00047 066143R NSET  LDB PRINT     SET FOR PRINT 
0392  00050 002040        SEZ           IF READ REQUEST 
0393  00051 046141R       ADB BIT13     SET TO KEYBOARD 
0394  00052 005326        RBR,ELB       SET LEAST B 1/0 READ/WRITE
0395* 
0396  00053 161666        LDA EQT7,I    CONVERT BUFFER ADDRESS TO EVEN
0397  00054 001200        RAL            CHARACTER ADDRESS AND SET
0398  00055 171670        STA EQT9,I     AS CURRENT BUFFER ADDRESS. 
0399  00056 161667        LDA EQT8,I    GET BUFFER LENGTH.
0400  00057 003025        CMA,SSA,INA,RSS IF CHARACTERS SPECIFIED,
0401  00060 026063R       JMP D02.1      USE VALUE. 
0402  00061 000020  .20B  OCT 20 ALS    CONVERT WORDS TO CHARACTERS.
0403  00062 003004        CMA,INA        MAKE NEGATIVE
0404  00063 006011  D02.1 SLB,RSS       SKIP ZERO CHECK 
0405  00064 026067R       JMP D02.3     IF WRITE
0406  00065 002003        SZA,RSS       IF CHAR. COUNT = ZERO, SET = -1 
0407  00066 002104        CLE,INA        FOR SYSTEM PROTECTION. 
0408  00067 141670  D02.3 ADA EQT9,I    SET ADDRESS OF LAST CHAR. 
0409  00070 171671        STA EQT10,I   IN EQT 10 

0411  00071 161665        LDA EQT6,I   POSITION CONTROL 
0412  00072 001727        ALF,ALF       INFORMATION 
0413  00073 000022  .22B  OCT 22 RAL    FIELD FOR EXAMINATION 
0414  00074 006310        CCE,SLB      IF REQUEST IS FOR INPUT, 
0415  00075 026105R       JMP D01       GO TO SELECT DEVICE CONDITIONS. 
0416* 
0417  00076 001233        RAL,SLA,RAR   IF BINARY MODE, 
0418  00077 026102R       JMP D00        GO TO SELECT PUNCH UNIT. 
0419  00100 001100  B1100 ARS           ROTATE "P" BIT TO 
0420  00101 001310        RAR,SLA        BIT 00, TEST BIT.
0421  00102 046140R D00   ADB MPUNC     IF PUNCH SUBTRACT TO THE PUNCH
0422  00103 002404        CLA,INA       SET A TO ILLEGAL DRIVER TYPE FOR
0423  00104 026112R       JMP D02        FOR PUNCH ASCII (P=1). 
0424* 
0425  00105 001533  D01   ERA,SLA,RAR   IF KEYBOARD MODE SELECTED,
0426  00106 046141R       ADB BIT13     TURN ON THE ECHO BIT
0427  00107 002241        SEZ,CME,RSS   IF V-BIT SKIP HONIST BIT SET E
0428  00110 001325        RAR,ERA       ELSE HONEST BIT TO E
0429  00111 062337R       LDA .2        ILLEGAL TYPE CODE TO A
0430* 
0431*  INITIALIZE FLAGS,EOT COUNTER ECT.
0432* 
0433  00112 052752R D02   CPA TEMP5     IF ILLEGAL CALL FOR THIS DRIVER 
0434  00113 026135R       JMP ILCOD      TYPE GO REJECT  THE CALL 
0435* 
0436  00114 062163R       LDA EOTC     FOR INPUT, SET  EOT  COUNTER 
0437  00115 006210        CME,SLB       ELSE SKIP 
0438  00116 171672        STA EQT11,I 

0440  00117 062144R       LDA WCONT     SET UP THE CONTINUE ADD 
0441* 
0442* SELECT DEVICE OPERATING CONDITIONS - DEVICE 
0443*  NEEDS TO BE SELECTED ONLY ONCE FOR EACH







 PAGE 0010 #01  <DVR00  **INITIATION SECTION**> 


0444*  OPERATION. 
0445* 
0446  00120 171771  D02.6 STA EQT12,I   SET RETURN ADDRESS IN EQT 12. 
0447  00121 062274R       LDA TEMP3     GET THE TTY STATUS
0448  00122 006011        SLB,RSS       SKIP IF READ
0449  00123 002021        SSA,RSS       IF WRITE SKIP IF BUSY 
0450  00124 106616  IO1   OTB TTY       SEND SET UP COMMAND UNLESS BUSY.
0451  00125 006050        SEZ,SLB       IF READ 
0452  00126 026440R       JMP D23.1     GO DO READ THING
0453  00127 004010        SLB           IF HONEST INPUT 
0454  00130 026476R       JMP D21.2     GO DO HONEST READ THING 
0455  00131 002121        CLE,SSA,RSS   IF NOT BUSY 
0456  00132 026351R       JMP D19       GO OUTPUT FIRST CHARACTER 
0457  00133 016555R       JSB INCR      GO WAIT FOR INTERRUPT!
0458  00134 026024R       JMP CONT      TRY TO SET UP AGAIN 


0460  00135 002404  ILCOD CLA,INA       ILLEGAL REQUEST EXIT
0461  00136 126000R       JMP I.00,I    TAKE ACCEPT RETURN


0463  00137 177774  N4    OCT -4
0464  00140 170000  MPUNC OCT -10000
0465  00141 020000  BIT13 OCT 20000 
0466  00142 110000  PUNCH OCT 110000
0467  00143 120000  PRINT OCT 120000
0468  00144 000772R WCONT DEF D31       ADDRESS OF OUTPUT PROCESSOR 



0470  00145 000000  NXQU  NOP 
0471  00146 161660        LDA EQT1,I    IF THE LAST REQUEST IN THE QUEUE
0472  00147 160000        LDA A,I       THEN CLEAR
0473  00150 002102        CLE,SZA       THE IGNOR BIT 
0474  00151 126145R       JMP NXQU,I    NOT LAST REQUEST SO EXIT
0475  00152 161664        LDA EQT5,I    LAST REQUEST SO CLEAR 
0476  00153 012156R       AND NT204     THE IGNOR BIT 
0477  00154 171664        STA EQT5,I    RESET THE WORD
0478  00155 126145R       JMP NXQU,I    AND RETURN


0480  00156 177577  NT204 OCT 177577
0481  00157 000200  B200  OCT 200 
0482  00160 000011  .11B  OCT 11
0483  00161 000021  .21B  OCT 21
0484  00162 000024  .24B  OCT 24
0485  00163 177743  EOTC  DEC -29 
















 PAGE 0011 #01  <DVR00  **INITIATION SECTION**> 


0487* 
0488* CONTROL REQUEST PROCESSING
0489* 
0490  00164 101045  CONTL LSR 5         ROTATE CONTROL BITS TO LOW PART 
0491  00165 012267R       AND B177      ISOLATE FUNCTION FIELD. 
0492  00166 165666        LDB EQT7,I    GET THE EXTRA CONTROL WORD
0493  00167 006021        SSB,RSS       IF POSITIVE 
0494  00170 007004        CMB,INB       SET NEGATIVE
0495  00171 052215R       CPA .10B     FIELD = <10> TO GENERATE 
0496  00172 026235R       JMP D05       LEADER (10 INCHES OF BLANK TAPE)
0497  00173 052160R       CPA .11B     FIELD = <11> FOR LINE
0498  00174 026246R       JMP D06       SPACING 
0499  00175 052336R       CPA .7       IF FUNCTION = 7, GO TO SET 
0500  00176 026216R       JMP EOTSM     SIMULATED EOT STATS.
0501  00177 052061R       CPA .20B      IF 20 THEN
0502  00200 026222R       JMP ON        GO TURN ON THIS TERMINAL
0503  00201 052161R       CPA .21B      IF 21 
0504  00202 026227R       JMP OFF       GO TURN OF THIS TERMINAL
0505  00203 052073R       CPA .22B      IF 22 THEN
0506  00204 026232R       JMP TIME      GO SET THE TIME OUT PRAMETER
0507  00205 052025R       CPA .23B      IGNOR REQUEST?
0508  00206 026214R       JMP CLBUF     YES GO EFFECT A BUFFER CLEAR
0509  00207 052162R       CPA .24B      RESTORE NORMAL I/O? 
0510  00210 026244R       JMP RSTOR     YES GO RESTORE IT 
0511* 
0512  00211 016145R REJ   JSB NXQU     CHECK FOR EMPTY QUE
0513* 
0514  00212 062337R       LDA .2        SET (A) = 2 FOR ILLEGAL CONTROL 
0515  00213 126000R       JMP I.00,I    - RETURN FOR REJECT-
0516* 
0517  00214 062157R CLBUF LDA B200      SET THE FLUSH FLAG
0518  00215 000010  .10B  SLA           SKIP
0519* 
0520  00216 062633R EOTSM LDA B40       SET BIT 05 (EOT STATUS) TO
0521  00217 131664  IOR5  IOR EQT5,I    SKIP LEADER ON
0522  00220 171664  ST5   STA EQT5,I     NEXT INPUT, CAUSE REJECT RETURN
0523* 
0524* REQUEST ERROR - CAUSE REJECT RETURN TO I/O CONTROL
0525* 
0526  00221 026211R       JMP REJ       DO ILLEGAL REJECT 
0527* 
0528  00222 161772  ON    LDA EQT13,I   GET THE ID ADDRESS
0529  00223 002006        INA,SZA       IF NO ADDRESS THEN SKIP (A=0) 
0530  00224 016752R       JSB D30       ENABLE THE INTERRUPT
0531  00225 001266        RAL,CLE,ELA   ROTATE SIGN TO BIT 1
0532  00226 026217R       JMP IOR5      GO STORE IT 

0534  00227 063042R OFF   LDA N3        GET NOT OF BIT 1. 
0535  00230 111664  AND5  AND EQT5,I    MASK BIT OUT OF STATUS
0536  00231 026220R       JMP ST5       GO RESTORE IT IN THE EQT
0537* 
0538  00232 175773  TIME  STB EQT14,I   SET THE NEW TIME OUT IN THE EQT.
0539  00233 026211R       JMP REJ       GO TO THE REJECT EXIT 
0540* 
0541  00234 177634  N100  DEC -100
0542* 







 PAGE 0012 #01  <DVR00  **INITIATION SECTION**> 


0543* LEADER/TRAILER GENERATOR
0544* 
0545  00235 002001  D05   RSS  OR NOP IF 2762 
0546  00236 026211R       JMP REJ       REJECT LEADR REQUEST FOR 2762 

0548  00237 062234R       LDA N100     SET INDEX COUNTER FOR FEED FRAMES
0549  00240 171670        STA EQT9,I    = -100. 
0550  00241 066142R       LDB PUNCH 
0551  00242 002400        CLA          (A) = 0 FOR
0552  00243 026253R       JMP D07       FEED FRAME. 
0553* 
0554* RESTOR NORMAL OPERATION  I,E . STOP IGNORING REQUESTS 
0555* 
0556  00244 062156R RSTOR LDA NT204     GET THE MASK TO A 
0557  00245 026230R       JMP AND5      GO MASK AND RESTORE EQT5
0558* 
0559* LINE SPACING
0560* 
0561  00246 006003  D06   SZB,RSS      PROTECT AGAINST
0562  00247 007500        CCB,CLE       A ZERO VALUE. 
0563  00250 175670        STB EQT9,I   SET INDEX. 
0564  00251 062265R       LDA FLINF    (A) = LINE FEED CODE 
0565  00252 066143R       LDB PRINT 
0566  00253 171671  D07   STA EQT10,I  SET ACTION CODE, 
0567  00254 161664        LDA EQT5,I     CHECK THE IGNOR BIT
0568  00255 012157R       AND B200       SET
0569  00256 002002        SZA 
0570  00257 026211R       JMP REJ        YES REJECT THE REQUEST 
0571  00260 002404        CLA,INA       IF TYPE 
0572  00261 052752R       CPA TEMP5     IS O1 
0573  00262 026211R       JMP REJ       THEN REJECT THE CONTROL 
0574  00263 062266R       LDA DFCNT     SET UP THE INTERRUPT ADDRESS IN 
0575  00264 026120R       JMP D02.6      NO  RETURN TO START OUTPUT,(B)0



0577  00265 000412  FLINF OCT 412       LINE FEED WITH FLAG SET 
0578  00266 001061R DFCNT DEF D39 
0579  00267 000177  B177  OCT 177 
0580  00270 177767  N9    DEC -9























 PAGE 0013 #01  <CONFIGURATION SECTION>                 A-29029-91001-1 


0582* SUBROUTINE:  <SETIO>
0583* 
0584*  PURPOSE: TO CONFIGURE THE I/O INSTRUCTIONS 
0585*           IN THE DRIVER TO REFERENCE THE
0586*           SUBJECT TELETYPE. 
0587* 
0588*  CALL:      (A)05-00 CONTAINS I/O ADDRESS 
0589*       (P)    JSB  SETIO 
0590*       (P+1)  -RETURN- (REGISTERS MEANINGLESS) 
0591* 
0592  00271 000000  SETIO NOP 
0593  00271         TEMP2 EQU SETIO 
0594  00272 032340R       IOR LIB      COMBINE <LIB> WITH I/O ADDRESS 
0595  00273 072274R       STA IO3       AND SET.
0596  00274 106516  IO3   LIB TTY       GET THE CHARACTER AND 
0597  00274         TEMP3 EQU IO3       SAVE IT 
0598  00275 076274R       STB TEMP3 
0599* 
0600  00276 022334R       XOR B4300    CONSTRUCT  <OTA> INSTRUCTION.
0601  00277 072631R       STA IO2 
0602  00300 072754R       STA IO6 
0603  00301 073031R       STA IO9 
0604* 
0605  00302 032100R       IOR B1100      CONSTRUCT  <STC,C> INSTRUCTION 
0606  00303 072560R       STA IO4 
0607  00304 072755R       STA IO7 
0608* 
0609  00305 032335R       IOR B4000    CONSTRUCT  <CLC> INSTRUCTION.
0610  00306 072733R       STA IO5 
0611  00307 022100R       XOR B1100 
0612  00310 072124R       STA IO1       STORE OTB INSTRUCTION 
0613  00311 161663        LDA EQT4,I     CONFIGURE FOR THE 2762 
0614  00312 001727        ALF,ALF       ROTATE THE LEAST
0615  00313 001226        RAL,ELA        SUBCHANNEL BIT TO E
0616  00314 066046R       LDB N7        DELAY COUNT FOR 30CPS 
0617  00315 012215R       AND .10B      EXTRACT BIT9
0618  00316 002002        SZA 
0619  00317 066043R       LDB N36       DELAY COUNT FOR 120CPS
0620  00320 076044R       STB NULCT     STALL COUNT FOR 2762 A OR B 
0621  00321 062520R       LDA RSS        GET A RSS TO A 
0622  00322 006440        CLB,SEZ        NOP TO B 
0623  00323 101100        SWP            SWAP IF 2762 
0624  00324 072235R       STA D05        SET SWITCH 2 
0625  00325 072407R       STA D20.1      SET SWITCH 4 
0626  00326 077010R       STB SW5        SET SWITCH 5 
0627  00327 161664        LDA EQT5,I    SET UP
0628  00330 001727        ALF,ALF       THE DVR NUMBER
0629  00331 012475R       AND .3        IN
0630  00332 072752R       STA TEMP5     TEMP5 
0631* 
0632  00333 126271R       JMP SETIO,I 


0634  00334 004300  B4300 OCT 4300
0635  00335 004000  B4000 OCT 4000
0636  00336 000007  .7    OCT 7 







 PAGE 0014 #01  <CONFIGURATION SECTION>                 A-29029-91001-1 


0637  00337 000002  .2    OCT 2 
0638  00340 106500  LIB   LIB 0 





























































 PAGE 0015 #01  < DRIVER 00  *COMPLETION SECTION*>      A-29029-91001-1 


0640* 
0641********* COMPLETION  SECTION **********
0642* 
0643* 
0644  00341 000000  C.00  NOP 
0645  00341         C.02  EQU C.00
0646  00341         C.01  EQU C.00
0647* 
0648  00342 016271R       JSB SETIO    SET I/O INSTRUCTIONS FOR UNIT. 
0649* 
0650  00343 161660        LDA EQT1,I    GET THE QUE WORD
0651  00344 002302        CCE,SZA       IF NO QUE THEN SKIP 
0652  00345 026351R       JMP D19       QUE SO GO HANDLE I/O FUNCTION 
0653  00346 171774        STA EQT15,I   SET TIME OUT TO ZERO (NO ACTIVE 
0654  00347 016564R       JSB SCHD      NO QUE SO A SCHEDULE OR ATTN. 
0655  00350 026562R       JMP EXIT      GO TAKE CONTINUATION EXIT 
0656* 
0657  00351 161663  D19   LDA EQT4,I     CHECK FOR TIME OUT 
0658  00352 001700        ALF             IF TIME OUT ENTRY 
0659  00353 002020        SSA                TEST BIT 11
0660  00354 026747R       JMP TMX1         GO DO TIME OUT EXIT. 
0661  00355 165665        LDB EQT6,I    GET REQUEST CONTROL WORD -
0662  00356 005337        RBR,SLB,BLF   IF OUTPUT GO DO OUTPUT
0663  00357 026376R       JMP D20        CHECKS 
0664  00360 005262  D19.1 RBL,CLE,RBL   POSITION THE WORD 
0665  00361 005627        ELB,BLF       H - BIT TO E,M - BIT TO B(00) 
0666  00362 062437R       LDA SW2       SET SWITCH FOR JMP OUT1 
0667  00363 072422R       STA SWTCH 
0668  00364 062633R       LDA B40       SET A TO ASCII BLANK
0669  00365 004035        SLB,ERB       H TO B(15),V TO B(00) M TO E-REG
0670  00366 002400        CLA           IF BINARY WIPE THE BLANK
0671  00367 072564R       STA FILL      SET FILL CHARACTER
0672  00370 076271R       STB TEMP2     SET TEMP2 :H---P:E:V: 
0673  00371 062274R       LDA TEMP3     GET CHAR  :15--2:1:0: 

0675  00372 002041        SEZ,RSS       IF ASCII REMOVE 
0676  00373 012267R       AND B177       THE 8-LEVEL BIT. 
0677  00374 165771        LDB EQT12,I   GET THE RETURN ADDRESS AND
0678  00375 124001        JMP B,I       GO TO IT. 



0680  00376 062274R D20   LDA TEMP3     GET THE CHARACTER 
0681  00377 002141        SEZ,CLE,RSS   IF FIRST OUTPUT 
0682  00400 026423R       JMP D20.2     GO TEST FOR EOT ON PUNCH

0684  00401 012634R       AND B377      MASK OUT THE CHARACTER
0685  00402 052634R       CPA B377      IF RUBOUT 
0686  00403 002001        RSS           SKIP;ELSE 
0687  00404 016564R       JSB SCHD      SCHEDULE THE PROG OR SET ATTN.
0688* 
0689  00405 161664  D20.0 LDA EQT5,I    ANY PENDING STALLS? 
0690  00406 012040R       AND .4        BIT2 SET IF YES 
0691  00407 002001  D20.1 RSS OR NOP IF 2762
0692  00410 002003        SZA,RSS       ANY REQUIRED? 
0693  00411 026360R       JMP D19.1     NO SO CONTINUE







 PAGE 0016 #01  < DRIVER 00  *COMPLETION SECTION*>      A-29029-91001-1 


0695  00412 161664        LDA EQT5,I    CLEAR STALL FLAG IN BIT2
0696  00413 012045R       AND N6
0697  00414 171664        STA EQT5,I    AND RESET IN EQT5 

0699  00415 161771        LDA EQT12,I   GET CURRENT RETURN ADDRESS
0700  00416 073007R       STA OUTCR     AND SET IT FOR OUTCR
0701  00417 135672        ISZ EQT11,I   STALLING COUNT ZERO YET?
0702  00420 027024R       JMP STAL2     NO GO OUTPUT THE RUB OUT
0703* 
0704  00421 062636R       LDA LINF      ADD L F AFTER ALL STALLS OUT
0705  00422 000000  SWTCH NOP           JMP D19.I IF STALLS AT START OF 
0706*                   JMP OUT1 IF STALL AT END OF LINE

0708  00423 012461R D20.2 AND B60       MASK TO THE EOT BITS
0709  00424 003104        CMA,CLE,INA   SET E IF NOT EOT
0710  00425 062436R       LDA SW1       SET SWITCH FOR JMP D19.1
0711  00426 072422R       STA SWTCH 
0712  00427 063042R       LDA N3        3 STALLS AT START IS ENOUGH 
0713  00430 171672        STA EQT11,I 
0714  00431 062337R       LDA .2        CHECK IF DVR02
0715  00432 052752R       CPA TEMP5     ? 
0716  00433 002344        SEZ,CCE,INA    IE EOT AND DVR02 SKIP
0717  00434 026407R       JMP D20.1     CHECK IF 2762 
0718  00435 126000R       JMP I.00,I    ILLEGAL CALL REJECT IT. 


0720  00436 026360R SW1   JMP D19.1     INITIAL STALLS
0721  00437 027030R SW2   JMP OUT1      END OF LINE STALLS

0723*     INPUT SECTION 
0724* 
0725  00440 016555R D23.1 JSB INCR      GO GET A CHARACTER. 
0726  00441 002002        SZA          IF NON-ZERO CHARACTER, 
0727  00442 026452R       JMP D21       PROCESS.
0728* 
0729* CHECK FOR POSSIBLE EOT CONDITION
0730* 
0731  00443 161664        LDA EQT5,I    IF EOT FLAG 
0732  00444 012633R       AND B40       ALREADY SET 
0733  00445 002003        SZA,RSS       IGNOR LEADER
0734  00446 135672        ISZ EQT11,I  INDEX EOT COUNTER. 
0735  00447 026440R       JMP D23.1      -INDEX NOT ZERO, TRY NEXT CHAR.

0737  00450 006400  D23.2 CLB           SET (B) = 0 FOR EOT AND GO
0738  00451 026720R       JMP D28       TO STATUS COMPLETION SECTION. 
0739* 
0740* PROCESS  INPUT  CHARACTER 
0741* 
0742  00452 002041  D21   SEZ,RSS       IF ASCII GO 
0743  00453 026501R       JMP D22       DO ASCII THING. 
0744* 
0745* VARIABLE LENGTH CHECK AND PROCESSING
0746* 
0747  00454 066271R       LDB TEMP2    CONTINUE IF
0748  00455 006011        SLB,RSS       INPUT RECORD IS 
0749  00456 026525R       JMP D23        NOT VARIABLE LENGTH







 PAGE 0017 #01  < DRIVER 00  *COMPLETION SECTION*>      A-29029-91001-1 


0750  00457 006020        SSB           TEST THE HONEST BIT 
0751  00460 042475R       ADA .3        ADD THREE IF ABSOLUTE 
0752* 
0753  00461 000060  B60   CLE,ALS      CONVERT TO # CHARACTERS, 
0754  00462 141670        ADA EQT9,I    ADD CHARACTER BUFFER ADDRESS
0755  00463 070001        STA B         SAVE POSSIBLE NEW EOR ADDRESS 
0756  00464 003004        CMA,INA       SUBTRACT FROM CURRENT EOR ADDRES
0757  00465 141671        ADA EQT10,I   AND IF
0758  00466 002021        SSA,RSS       BUFFER IS BIG ENOUGH
0759  00467 175671        STB EQT10,I   SET UP TO READ THE WHOLE RECORD 
0760  00470 171672        STA EQT11,I   SAVE OVERAGE FOR EOR SKIPPING 
0761  00471 062274R       LDA TEMP3      RESTORE CHAR. TO A.
0762  00472 026525R       JMP D23       GO STORE THE CHARACTER. 

0764  00473 000031  B31   OCT 31
0765  00474 000001  .1    DEC 1 
0766  00475 000003  .3    DEC 3 

0768  00476 016555R D21.2 JSB INCR      GET THE NEXT CHAR.
0769  00477 002040        SEZ           IF BINARY 
0770  00500 026525R       JMP D23       GO STORE IT 
0771* 
0772* ASCII INPUT PROCESSING
0773* 
0774  00501 066274R D22   LDB TEMP3     IF TTY IS BUSY HE IS
0775  00502 006020        SSB           TOO FAST FOR US SO
0776  00503 026642R       JMP D24       GO RUB HIM OUT!!
0777  00504 052635R       CPA RETN      IF RETURN THEN
0778  00505 026703R       JMP ASEOL     GO DO EOR PROCESSING
0779* 
0780  00506 066271R       LDB TEMP2     IF HONEST MODE
0781  00507 006020        SSB           THEN
0782  00510 026525R       JMP D23       GO STORE THE CHARACTER
0783  00511 052267R       CPA B177
0784  00512 026642R       JMP D24       - RUBOUT -
0785  00513 052636R       CPA LINF
0786  00514 026476R       JMP D21.2      - LINE FEED -
0787  00515 052215R       CPA .10B      IF TRUE BACKSPACE OR IF 
0788  00516 002001        RSS 
0789  00517 052473R       CPA B31       CONTROL Y (2600 BACKSPACE)
0790  00520 002001  RSS   RSS            SKIP TO CONTROL A PROCESSOR
0791  00521 052474R       CPA .1
0792  00522 026653R       JMP D25       - CONTROL/A - 
0793  00523 052040R       CPA .4        EOT SIMULATE INPUT? 
0794  00524 026450R       JMP D23.2      YES GO SET EOT.
0795* 
0796* STORE CHARACTER IN USER BUFFER
0797* 
0798  00525 165670  D23   LDB EQT9,I    GET CURRENT BUFFER ADDRESS. 
0799  00526 155671        CPB EQT10,I   IF BUFFER FULL
0800  00527 026476R       JMP D21.2     GO GET NEXT CHAR. 
0801  00530 004065        CLE,ERB       CONVERT TO WORD ADDR., CHARACTER
0802  00531 135670        ISZ EQT9,I    POSITION IN E,  INDEX ADDRESS.
0803  00532 002041        SEZ,RSS       SHIFT TO UPPER POSITION IF
0804  00533 001737        ALF,SLA,ALF    EVEN ADDRESS AND SKIP
0805  00534 120001        XOR B,I         IF ODD ADDRESS ADD OLD CHAR.







 PAGE 0018 #01  < DRIVER 00  *COMPLETION SECTION*>      A-29029-91001-1 


0806  00535 022564R       XOR FILL      ADD/DELETE FILL CHARACTER 
0807  00536 170001        STA B,I        REPLACE FULL WORD
0808* 
0809  00537 062564R       LDA FILL      GET ASCII/BINARY FLAG 
0810  00540 165670        LDB EQT9,I
0811  00541 155671        CPB EQT10,I   LAST CHARACTER? 
0812  00542 002002        SZA           IF LAST CHAR. AND BINARY SKIP 
0813  00543 026476R       JMP D21.2     ELSE GO GET THE NEXT ONE
0814* 
0815  00544 066271R       LDB TEMP2     IF NOT VARIABLE LENGTH
0816  00545 161672        LDA EQT11,I   OR IF BUFFER WAS LONG ENOUGH
0817  00546 002020        SSA           THEN
0818  00547 006011        SLB,RSS       GO
0819  00550 026707R       JMP D27       DO BINARY EOR TERMINATE 
0820* 
0821  00551 016555R D23.0 JSB INCR      GET A CHARACTER 
0822  00552 135672        ISZ EQT11,I   STEP COUNT
0823  00553 026551R       JMP D23.0     GO GET NEXT ONE 
0824  00554 026707R       JMP D27       DONE GO EXIT
0825* CONTINUATION EXIT 
0826* 
0827  00555 000000  INCR  NOP           WAIT FOR CHARACTER ROUTINE
0828  00556 066555R       LDB INCR      RETURN ADDRESS TO B 
0829  00557 175771  CXT1  STB EQT12,I   SAVE THE RETURN ADDRESS IN EQT12
0830  00560 102716  IO4   STC TTY       SET DEVICE TO INPUT NEXT CHAR.

0832  00561 002400        CLA           SET A FOR ACCEPT
0833  00562 036341R EXIT  ISZ C.00      STEP RETURN ADDRESS 
0834  00563 126341R       JMP C.00,I    -RETURN TO INTERRUPT CONTROL -

0836*                                  ATTENTION INTERRUPT PROCESSOR
0837  00564 000000  SCHD  NOP           ENTER HERE IF SCHEDULE INTERRUPT
0838  00564         FILL  EQU SCHD
0839  00565 076616R       STB TURN          SAVE B REGISTER 
0840  00566 065660        LDB EQT1      IF DEVICE IS
0841  00567 055675        CPB SYSTY     THE SYSTEM TTY
0842  00570 026613R       JMP OPF       GO SET THE OPERATOR FLAG
0843  00571 165772        LDB EQT13,I   ELSE GET THE ADDRESS OF THE ID
0844  00572 161664        LDA EQT5,I    AND THE ENABLE FLAG.
0845  00573 001310        RAR,SLA       IF OFF OR 
0846  00574 006020        SSB           IF NEGATIVE 
0847  00575 026612R       JMP SCH+1     NOT SET UP SO IGNORE
0848  00576 076611R       STB SCH       SET FOR THE LIST CALL 
0849  00577 046640R       ADB .15       GET THE STATUS WORD 
0850  00600 164001        LDB B,I       GET THE STATUS
0851  00601 006002        SZB           IF NOT DORMANT
0852  00602 026612R       JMP SCH+1     NOT SET UP ,SO IGNORE.
0853  00603 062611R       LDA SCH       CACULATE THE B-REG
0854  00604 042636R       ADA LINF       ADDRESS IN THE ID SEG. 
0855  00605 065663        LDB EQT4      SET THE B REG TO POINT TO EQT4
0856  00606 174000        STB A,I        SO HE KNOWS "WHO DONE IT". 
0857  00607 016001X       JSB $LIST     ELSE SCHEDULE THE PGM 
0858  00610 000101        OCT 101 
0859  00611 000000  SCH   NOP 
0860  00612 002101        CLE,RSS       SKIP
0861* 







 PAGE 0019 #01  < DRIVER 00  *COMPLETION SECTION*>      A-29029-91001-1 


0862  00613 035734  OPF   ISZ OPATN     SET THE OPERATOR ATTENTION FLAG 
0863  00614 066616R       LDB TURN      RESTORE B AND 
0864  00615 126564R       JMP SCHD,I    RETURN


0866  00616 000000  TURN  NOP           ROUTINE TO RESET FOR OUTPUT 
0867  00617 002404        CLA,INA       FIRST TEST FOR DVR01
0868  00620 052752R       CPA TEMP5     IF DVR01
0869  00621 126616R       JMP TURN,I    EXIT P+1  NOP 
0870  00622 007400        CCB            COMPUTE CALL 
0871  00623 046616R       ADB TURN      ADDRESS AND 
0872  00624 062274R       LDA TEMP3     IF TTY IS BUSY
0873  00625 002020        SSA            THEN 
0874  00626 026557R       JMP CXT1      GO WAIT FOR END OF CYCLE
0875  00627 036616R       ISZ TURN      ELSE EXIT P+2 
0876  00630 062143R       LDA PRINT     GET THE PRINT COMMAND 
0877  00631 102616  IO2   OTA TTY       SEND TO THE INTERFACE 
0878  00632 126616R       JMP TURN,I    RETURN P+2


0880  00633 000040  B40   OCT 40
0881  00634 000377  B377  OCT 377 
0882  00635 000015  RETN  OCT 15
0883  00636 000012  LINF  OCT 12
0884  00637 000612  LINFF OCT 612 
0885  00640 000017  .15   DEC 15
0886  00641 000134  \     OCT 134 



0888* RUB-OUT CODE PROCESSOR  (DELETION OF ASCII RECORD)
0889* 
0890  00642 016616R D24   JSB TURN      TURN CARD AROUND TO OUTPUT
0891  00643 026024R       JMP CONT      DVR01 SO GO RESTART 
0892  00644 062641R       LDA \         OUTPUT "\"
0893  00645 017007R       JSB OUTCR     THEN
0894  00646 062635R       LDA RETN      RETURN
0895  00647 017007R       JSB OUTCR 
0896  00650 062637R       LDA LINFF     LINE FEED 
0897  00651 017007R       JSB OUTCR 
0898  00652 026024R       JMP CONT      GO SET UP FOR INPUT AGAIN 
0899* 
0900* CONTROL/A PROCESSOR  (CHARACTER DELETION) 
0901* 
0902  00653 161666  D25   LDA EQT7,I   IF CONTROL/A 
0903  00654 001200        RAL            IF FIRST 
0904  00655 151670        CPA EQT9,I    NON-ZERO CHARACTER INPUT, 
0905  00656 026642R       JMP D24       TREAT AS RUBOUT 
0906* 
0907  00657 007400        CCB           -1 TO A 
0908  00660 145670        ADB EQT9,I   SUBTRACT 1 FORM
0909  00661 175670        STB EQT9,I    CHARACTER ADDRESS.
0910  00662 004065        CLE,ERB       GET THE LAST CHARACTER INPUT
0911  00663 160001        LDA B,I       AND 
0912  00664 012757R       AND HCHAR     MASK OUT THE LOW END
0913  00665 042564R       ADA FILL      PUT IN THE FILL CHARACTER 







 PAGE 0020 #01  < DRIVER 00  *COMPLETION SECTION*>      A-29029-91001-1 


0914  00666 170001        STA B,I       RESET THE WORD
0915  00667 016616R       JSB TURN      TURN THE DEVICE AROUND
0916  00670 026476R       JMP D21.2     DVR01 SO GO CONTINUE INPUT
0917  00671 063041R       LDA ARROW     SENT A "_"
0918  00672 017007R       JSB OUTCR      AND
0919  00673 062473R       LDA B31        A 2600 BACKSPACE 
0920  00674 017007R       JSB OUTCR 
0921  00675 062760R       LDA KEYBD     RESET FOR INPUT 
0922  00676 066271R       LDB TEMP2     IF ECHO 
0923  00677 005310        RBR,SLB       THEN
0924  00700 042141R       ADA BIT13     ADD THE PRINT BACK BIT
0925  00701 017007R       JSB OUTCR     REPROGRAM AND START INPUT 
0926  00702 026501R       JMP D22       CONTINUE INPUT
0927* 
0928  00703 016616R ASEOL JSB TURN      TURN THE CARD AROUND
0929* 
0930  00704 002401        CLA,RSS       DVR01 SKIP A CHARACTER
0931  00705 062637R       LDA LINFF 
0932  00706 017007R       JSB OUTCR     ELSE SEND A LINE FEED TO THE TTY












































 PAGE 0021 #01  < STATUS AND COMPLETION SECTION*>       A-29029-91001-1 


0934* 
0935* STATUS AND TRANSMISSION COMPLETION SECTION
0936* 
0937  00707 165670  D27   LDB EQT9,I    COMPUTE THE NO
0938  00710 007004        CMB,INB       OF CHARACTERS TRANSMITTED 
0939  00711 145666        ADB EQT7,I    FROM THE
0940  00712 145666        ADB EQT7,I    FINAL BUFFER ADDRESS
0941  00713 161667        LDA EQT8,I    IF WORDS
0942  00714 002021        SSA,RSS       THEN
0943  00715 005100        BRS           CONVERT TO WORDS
0944  00716 007007        CMB,INB,SZB,RSS SET POSITIVE IF ZERO
0945  00717 026024R       JMP CONT      GO TRY AGAIN
0946* 
0947  00720 002700  D28   CLA,CCE       UNLESS
0948  00721 062633R       LDA B40       SET THE EOT BIT 
0949  00722 131664  D28.1 IOR EQT5,I    IN THE EQT
0950  00723 012156R       AND NT204     REMOVE THE IGNOR BIT. 
0951  00724 006042        SEZ,SZB       IF NO EOT THEN
0952  00725 022633R       XOR B40        CLEAR IT 
0953  00726 171664        STA EQT5,I
0954  00727 002600        CLA,CME       SET NORMAL STATUS 
0955  00730 006043        SEZ,SZB,RSS   IF EOT DETECTED, SET
0956  00731 062337R       LDA .2         RETURN STATUS = 2 FOR EOT. 
0957  00732 073010R TMX   STA SW5       FOR RETURN TO INTERRUPT CONTROL.
0958* 
0959* COMPLETION EXIT SECTION 
0960* 
0961  00733 106700  CXT2  CLC 0        CLEAR DEVICE CONTROL 
0962  00733         IO5   EQU CXT2
0963* 
0964  00734 161664        LDA EQT5,I    GET THE ON/OFF FLAG 
0965  00735 001310        RAR,SLA       IF ON THEN
0966  00736 016752R       JSB D30       SET UP THE INTERFACE
0967  00737 061675        LDA SYSTY    IF DEVICE IS SYSTEM
0968  00740 051660        CPA EQT1      TELETYPE, GO TO SET DEVICE
0969  00741 016752R       JSB D30       FOR INPUT KEYBOARD MODE.
0970* 
0971  00742 161663        LDA EQT4,I    GET THE SUBCHANNEL TO 
0972  00743 001727        ALF,ALF        LOW
0973  00744 001222        RAL,RAL         A AND 
0974  00745 013010R       AND SW5          MASK THE RETURN CODE 

0976  00746 126341R       JMP C.00,I   EXIT TO INTERRUPT CONTROL. 
0977* 
0978  00747 062040R TMX1  LDA .4        SET A TO THE TIME OUT CODE
0979  00750 006400        CLB           SET TLOG TO ZERO
0980  00751 026732R       JMP TMX       GO EXIT 

0982  00752 000000  D30   NOP 
0983  00752         TEMP5 EQU D30 
0984  00753 062760R       LDA KEYBD     SET SYSTEM TELETYPE IN INPUT
0985  00754 102616  IO6   OTA TTY       MODE. 
0986  00755 103716  IO7   STC TTY,C 
0987  00756 126752R       JMP D30,I     RETURN









 PAGE 0022 #01  <WRITE OUTPUT PROCESSOR>                A-29029-91001-1 


0989  00757 177400  HCHAR OCT 177400
0990  00760 140000  KEYBD OCT 140000

0992* 
0993* WRITE REQUEST PROCESSOR 
0994* 
0995  00761 066271R EOLT  LDB TEMP2     GET FLAG WORD 
0996  00762 006020        SSB           IF HONEST MODE
0997  00763 026771R       JMP OUT       SEND THE CHAR.
0998  00764 066564R       LDB FILL      IF
0999  00765 006003        SZB,RSS       BINARY
1000  00766 026771R       JMP OUT       GO SEND THE WORD
1001  00767 053041R       CPA ARROW     IF "_" THEN 
1002  00770 027065R       JMP D36       INHIBIT THE TRANSMISSION

1004  00771 017007R OUT   JSB OUTCR     SEND THE CHARACTER
1005  00772 165670  D31   LDB EQT9,I    GET THE BUFFER ADDRESS
1006  00773 155671        CPB EQT10,I   IF BUFFER EXAUSTED
1007  00774 027043R       JMP D33       GO CLEAN UP 
1008  00775 135670        ISZ EQT9,I   INDEX FOR NEXT CHAR. 
1009  00776 004065        CLE,ERB      CONVERT TO WORD ADDR.
1010  00777 160001        LDA B,I      GET WORD AND 
1011  01000 002041        SEZ,RSS       POSITION PROPER 
1012  01001 001727        ALF,ALF       CHARACTER IN A(07-00).
1013  01002 012634R       AND B377     REMOVE UPPER POSITION DATA.
1014  01003 165670        LDB EQT9,I    IF THIS IS LAST CHAR
1015  01004 155671        CPB EQT10,I   THEN
1016  01005 026761R       JMP EOLT      GO PROCESS END OF LINE
1017  01006 026771R       JMP OUT       GO SEND THE CHARACTER 
1018* 
1019* 
1020* OUTPUT CHARACTER TO PRINTER/PUNCH UNIT
1021* 
1022  01007 000000  OUTCR NOP           CHARACTER OUTPUT ROUTINE
1023* 
1024  01010 000000  SW5   NOP OR RSS IF 2762
1025  01011 027030R       JMP OUT1     RETURN TO INTERRUPT CONTROL. 


1027  01012 052473R       CPA B31       IF 2600 BACKSPACE AND A 
1028  01013 062215R       LDA .10B      2762 SET TRUE BACKSPACE 
1029  01014 006400        CLB           SET UP THE STALL COUNT FOR
1030  01015 052636R       CPA LINF      A 2762   LINE FEED? 
1031  01016 027033R       JMP STALX     FIND HOW MANY STALL NEEDED
1032  01017 052265R       CPA FLINF     IF CONTROL LINE FEEDS 
1033  01020 066270R       LDB N9        USE MAX STALL FOR 2762B 
1034  01021 006021  STAL  SSB,RSS       ANY STALLS REQUIRED?
1035  01022 027030R       JMP OUT1       NONE OF THE ABOVE GO DO IT 
1036  01023 175672        STB EQT11,I    SET THE STALL COUNT
1037  01024 165664  STAL2 LDB EQT5,I     AND THE
1038  01025 046040R       ADB .4         STALL FLAG 
1039  01026 175664        STB EQT5,I     IN THE EQT 
1040  01027 062634R       LDA B377      STALL CODE

1042  01030 067007R OUT1  LDB OUTCR     SET RETURN ADDRESS IN B 
1043  01031 102616  IO9   OTA TTY       OUTPUT CHARACTER TO CARD. 







 PAGE 0023 #01  <WRITE OUTPUT PROCESSOR>                A-29029-91001-1 


1044  01032 026557R       JMP CXT1       GO RETURN

1046  01033 165666  STALX LDB EQT7,I    WORD BUFFER ADDRESS 
1047  01034 005200        RBL           CONVERT TO CHARS
1048  01035 007004        CMB,INB       MAKE IT NEG 
1049  01036 145670        ADB EQT9,I    ADD CURRENT CHAR ADDRESS
1050  01037 046044R       ADB NULCT     ADD MAX STALL COUNT 
1051  01040 027021R       JMP STAL
1052  01041 000137  ARROW OCT 137     "_" 
1053  01042 177775  N3    DEC -3



1055* 
1056* END-OF-RECORD PROCESSING
1057* 
1058  01043 062271R D33   LDA TEMP2    CHECK MODE 
1059  01044 002020        SSA           OF TRANSFER.
1060  01045 027065R       JMP D36       - HONEST - GO EXIT
1061* 
1062  01046 062564R       LDA FILL      BINARY OR ASCII?
1063  01047 002003        SZA,RSS 
1064  01050 027056R       JMP D34       - BINARY -
1065* 
1066  01051 062635R       LDA RETN      OUTPUT FIRST A
1067  01052 017007R       JSB OUTCR      RETURN 
1068* 
1069  01053 062636R       LDA LINF      LINE FEED WITH DELAY
1070  01054 017007R       JSB OUTCR     A LINE FEED 
1071  01055 027065R       JMP D36       GO SET TLOG AND EXIT
1072* 
1073  01056 171671  D34   STA EQT10,I  *BINARY RECORD*  OUTPUT
1074  01057 062137R       LDA N4         4 FEED FRAMES FOR
1075  01060 171670        STA EQT9,I     EOR. 
1076* 
1077  01061 161671  D39   LDA EQT10,I   GET THE CHARACTER 
1078  01062 017007R       JSB OUTCR     SEND THE CHAR.
1079  01063 135670        ISZ EQT9,I    STEP THE COUNT
1080  01064 027061R       JMP D39       GO OUTPUT THE CHARACTER 
1081* 
1082* END OF OUTPUT PROCESSING
1083* 
1084  01065 165667  D36   LDB EQT8,I   SET (B) = TRANSMISSION 
1085  01066 006020        SSB           LOG AS POSITIVE # OF WORDS OR 
1086  01067 007004        CMB,INB        CHARACTERS.
1087  01070 002500        CLA,CLE      SET COMPLETION INDICATOR 
1088  01071 026722R       JMP D28.1 
1089* 















 PAGE 0024 #01  <EQU'S AND ECT.>                        A-29029-91001-1 


1092* 
1093* HANDY EQU'S FOR VARIOUS GOODIES.
1094* 
1095  00000         A     EQU 0        DEFINE SYMBOLIC REFERENCE FOR
1096  00001         B     EQU 1         A AND B REGISTERS.
1097  00016         TTY   EQU 14
1098* 



1100* 
1101*** SYSTEM BASE PAGE  COMMUNICATION  AREA *** 
1102* 
1103  01650         .     EQU 1650B     ESTABLISH ORIGIN OF AREA
1104* 
1105* 
1106* I/O MODULE/DRIVER COMMUNICATION 
1107* 
1108  01660         EQT1  EQU .+8      ADDRESSES
1109  01661         EQT2  EQU .+9 
1110  01662         EQT3  EQU .+10      OF
1111  01663         EQT4  EQU .+11
1112  01664         EQT5  EQU .+12      CURRENT 
1113  01665         EQT6  EQU .+13
1114  01666         EQT7  EQU .+14      11-WORD 
1115  01667         EQT8  EQU .+15
1116  01670         EQT9  EQU .+16      EQT 
1117  01671         EQT10 EQU .+17
1118  01672         EQT11 EQU .+18      ENTRY 
1119  01771         EQT12 EQU .+81
1120  01772         EQT13 EQU .+82
1121  01773         EQT14 EQU .+83
1122  01774         EQT15 EQU .+84
1123* 
1124  01654         INTBA EQU .+4 
1125* 
1126  01675         SYSTY EQU .+21     EQT ENTRY ADDRESS OF SYSTEM TTY
1127* 
1128* 
1129* SYSTEM MODULE COMMUNICATION FLAGS * 
1130* 
1131  01734         OPATN EQU .+52     OPERATOR/KEYBOARD ATTENTION FLAG 
1132* 
1133  01072               ORG *         DRIVER LENGTH 
1134                      END 
**  NO ERRORS*










$END ASMB     

*
--> Assemble 20874-60001_ASMB
ON,ASMB,99







 PAGE 0001


0001                ASMB,R,B,L,Z,C ASSEMBLE FOR RTE 
**  NO ERRORS*





























































 PAGE 0002 #01  *** DOS/RTE ASMB  FALL 1971 *** 


0001                ASMB,R,B,L,Z,C ASSEMBLE FOR RTE 
0003  00000               NAM ASMB,3,99 
0004*              *******************************
0005*              * NOTE: ON CONTROL STATEMENT; *
0006*              *  N = DISK O.S. USAGE        *
0007*              *  Z = REAL TIME USAGE        *
0008*              *******************************
0009                      ENT ASMB
0010                      EXT ?HA3Z,?LITI,?SKPR,?SPCR,?BREC,?ART,?LKLI
0011                      EXT ?CMQ,?ENP,?EXP,?INSR,?INS?,EXEC 
0012                      ENT ?ASCN,?ASMB,?BNCN,?BPKU,?CHOP,?CHPI,?DCOD 
0013                      ENT ?ENDS,?ERPR,?MSYS,?GETC,?MOVE,?MSYM,?RLUN 
0014                      ENT ?AFLG,?LSTL,?LUNI,?RFLG,?Z,?ASM1,?LABE
0015                      ENT ?OKOL,?ORRP,?PNLE,?SETM,?SUP,?LPER,?PERL
0016                      ENT ?LOUT,?LTFL,?DRFL,?LTSA,?LTSB,?ORGS,?CNTR 
0017                      ENT ?TSTR,?ASII,?ICSA,?FLGS,?BFLG,?LFLG,?TFLG 
0018                      ENT ?X,?MESX,?ASCI,?LINC,?LINS,?LIST,?LUNP
0019                      ENT ?OPLK,?OPER,?PKUP,?PLIT,?PNCH,?PRNT,?RSTA 
0020                      ENT ?LWA,?RDSC,            ?WEOF,?WRIF,?LGFL
0021                      ENT ?SEGM,?SYMK,?V,?ARTL,?LST,?PLIN,?PCOM,?SEC
0022                      ENT ?NEAU,?HA38,?XRFI 
0023                      ENT ?FPT,?FP
0024                      SUP  SUPPRESS EXTENDED LISTING
0025*             ******************************
0026*             * OPCODE AND PSEUDO-OP TABLE *
0027*             ******************************
0028  00000 040502  OPT OCT 40502,51421,0,     40504,40416,42001 ABS/ADA
0029  00006 040504      OCT 40504,41016,46001, 40514,43060,31700 ADB/ALF
0030  00014 040514      OCT 40514,51060,31400, 40514,51460,31000 ALR/ALS
0031  00022 040516      OCT 40516,42016,12001, 40522,51460,31100 AND/ARS
0032  00030 040523      OCT 40523,41407,0,     41114,43060,25700 ASC/BLF
0033  00036 041114      OCT 41114,51060,25400, 41114,51460,25000 BLR/BLS
0034  00044 041122      OCT 41122,51460,25100, 41123,51412,0     BRS/BSS
0035  00052 041503      OCT 41503,40461,53400, 41503,41061,47400 CCA/CCB
0036  00060 041503      OCT 41503,42463,42300, 41514,40461,52400 CCE/CLA
0037  00066 041514      OCT 41514,41061,46400, 41514,41450,106700 CLBCLC
0038  00074 041514      OCT 41514,42463,0,     41514,43052,103100 CLECLF
0039  00102 041515      OCT 41515,40461,53000, 41514,47430,103101 CMACLO
0040  00110 041515      OCT 41515,41061,47000, 41515,42463,42200 CMB/CME
0041  00116 041517      OCT 41517,46403                          COM
0042  00120 000010X       DEF ?CMQ
0043  00121 041520      OCT 41520,40416,52001, 41520,41016,56001 CPA/CPB
0044  00127 042105      OCT 42105,41410,0,     42105,43020,0     DEC/DEF
0045  00135 042105        OCT 42105,54025,0                    DEX
0046  00140 042514      OCT 42514,40460,131600, 42516,52004      ELA/ENT
0047  00145 000011X       DEF ?ENP
0048  00146 042514      OCT 42514,41060,125600, 42516,42014,0    ELB/END
0049  00154 042522      OCT 42522,40460,131500, 42521,52413,0    ERA/EQU
0050  00162 042522      OCT 42522,41060,125500, 42530,52005      ERB/EXT
0051  00167 000012X       DEF ?EXP
0052  00170 044114        OCT 44114,52051,102000,46111,40450,102500  HLT
0053  00176 046111        OCT 46111,41050,106500,46511,40450,102400  LIB
0054  00204         ?FPT  EQU * 
0055  00204 043101        OCT 43101,42006     FAD 
0056  00206 003344R       DEF ?HA38 
0057  00207 043104        OCT 43104,53006    FDV







 PAGE 0003 #01  *** DOS/RTE ASMB  FALL 1971 *** 


0058  00211 003344R       DEF ?HA38 
0059  00212 043115        OCT 43115,50006    FMP
0060  00214 003344R       DEF ?HA38 
0061  00215 043123        OCT 43123,41006    FSB
0062  00217 003344R       DEF ?HA38 
0063  00220 044516      OCT 44516,40466,52004, 44516,41066,46004 INA/INB
0064  00226 044517      OCT 44517,51016,32001, 44523,55016,36000 IOR/ISZ
0065  00234 045115      OCT 45115,50016,26000, 45123,41016,16000 JMP/JSB
0066  00242 046104      OCT 46104,40416,62001, 46104,41016,66001 LDA/LDB
0067  00250 046511      OCT 46511,41050,106400, 47101,46415,0    MIB/NAM
0068  00256 047117      OCT 47117,50030,0,     47503,52011,0     NOP/OCT
0069  00264 047524      OCT 47524,40450,102600, 47522,43401      OTA/ORG
0070  00271 002625R     DEF ORGP
0071  00272 047524      OCT 47524,41050,106600, 47522,51002      OTB/ORR
0072  00277 002600R     DEF ORRP
0073  00300 051101      OCT 51101,46060,31200, 51101,51060,31300 RAL/RAR
0074  00306 051102      OCT 51102,46060,25200, 51102,51060,25300 RBL/RBR
0075  00314 051123      OCT 51123,51470,42001, 51505,55062,42040 RSS/SEZ
0076  00322 051506    OCT 51506,41452,102200, 51506,51452,102300 SFC/SFS
0077  00330 051514      OCT 51514,40465,10010, 51514,41065,4010  SLA/SLB
0078  00336 051517    OCT 51517,41453,102201, 51517,51453,102301 SOC/SOS
0079  00344 051523      OCT 51523,40464,52020, 51523,41064,46020 SSA/SSB
0080  00352 051524      OCT 51524,40416,72000, 51524,41016,76000 STA/STB
0081  00360 051524    OCT 51524,41450,102700, 51524,43052,102100 STC/STF
0082  00366 051524     OCT 51524,47430,102101, 51532,40467,52002 STO/SZA
0083  00374 051532      OCT 51532,41067,46002, 54117,51016,22001 SZB/XOR
0084  00402 046123        OCT 46123,52024,0,  51513,50022        LST/SKP
0085  00407 000003X       DEF ?SKPR 
0086  00410 051525        OCT 51525,50040,1,  44105,42017        SUP/HED
0087  00415 003110R       DEF HEDSB 
0088  00416 052516        OCT 52516,46024,1,  51105,50035        UNL/REP
0089  00423 003557R       DEF REPSB 
0090  00424 052516        OCT 52516,51440,0,  44506,47031,116    UNS/IFN
0091  00432 054111        OCT 54111,43031,0,  44506,55031,132    XIF/IFZ
0092  00440 051520        OCT 51520,41423 
0093  00442 000004X       DEF ?SPCR                                 SPC 
0094  00443         ?NEAU EQU *        START OF NON-EAU OPTABLE SWAP AR.
0095  00443 042111    OCT 42111,53026,100400, 42114,42026,104200 DIV/DLD
0096  00451 042123    OCT 42123,52026,104400, 46520,54426,100200 DST/MPY
0097  00457 040523    OCT 40523,46027,100020, 40523,51027,101020 ASL/ASR
0098  00465 046123    OCT 46123,46027,100040, 46123,51027,101040 LSL/LSR
0099  00473 051122    OCT 51122,46027,100100, 51122,51027,101100 RRL/RRR
0100  00501 051527    OCT 51527,50030,101100,51101,46451,105000 SWP/RAM 
0101  00507         ?FP   EQU * 
0102  00507 000000        OCT 0,54030,105100,43114,52030,105120 FIX/FLT 
0103  00515 000000        OCT 0 

















 PAGE 0004 #01  *** DOS/RTE ASMB  FALL 1971 *** 


0105*              *************************************
0106*              * PUT OUT A MESSAGE TO THE OPERATOR *
0107*              *************************************
0108  00516 000000  MESSX NOP 
0109  00517 072544R       STA MESS      SET MESSAGE LOCN
0110  00520 076545R       STB MESS+1    SET MESSAGE LENGTH
0111  00521 016015X       JSB EXEC
0112  00522 000527R       DEF *+5 
0113  00523 004653R       DEF .1+1      OUTPUT REQ. CODE
0114  00524 004652R       DEF .1        OUTPUT ON SYSTEM TTY
0115  00525 000537R       DEF MADDR     MESSAGE ADDRESS 
0116  00526 004660R       DEF .1+6      MESSAGE LENGTH
0117  00527 016015X       JSB EXEC      GO SET EOT ON INPUT DEVICE
0118  00530 000533R       DEF *+3 
0119  00531 004654R       DEF .1+2
0120  00532 004362R       DEF EOTIN     SETS EOT STATUS ON INPUT DEVICE 
0121  00533 126516R       JMP MESSX,I   EXIT
0122  00534 040523  SEGNM ASC 3,ASMB
0123  00537 022105  MADDR ASC 5,$END ASMB 
0124  00544 020040  MESS  ASC 2,
0125                      IFN 
0126                XREF  ASC 3,XREF
0127                      XIF 
0128  00546 000000  ?XRFI NOP CROSS REFERENCE INPUT FLAG
0129* 
0130*              *******************************
0131*              * GO TO LOAD THE NEXT SEGMENT *
0132*              *******************************
0133  00547 072536R SEGMT STA SEGNM+2   SET CORRECT DIGIT (1,2,OR 3)
0134  00550 016015X       JSB EXEC
0135  00551 000554R       DEF *+3 
0136  00552 000574R       DEF .8        SEGMENT REQ. CODE 
0137  00553 000534R       DEF SEGNM     LOC'N OF 5 CHAR SEGM'T NAME 

0139*                   *********************** 
0140*                   * EXIT FROM ASSEMBLER * 
0141*                   *********************** 
0142  00554 062560R ABORT LDA *+4       SET UP END MESSAGE FOR EOF ABORT
0143  00555 066561R       LDB *+4 
0144  00556 016516R       JSB MESSX     GO PRINT KESSAGE
0145  00557 026565R       JMP ASMEX     GO TO COMPLETION
0146  00560 054105        ASC 2,XEND
0147  00562 063115R ASMBX LDA BLNS
0148  00563 067115R       LDB BLNS
0149  00564 016516R       JSB MESSX     "$END ASMB" MESSAGE 
0150                      IFN 
0151                      LDA CFLAG 
0152                      SZA,RSS      IS CROSS REF TABLE REQUESTED?
0153                      JMP *+3       NO
0154                      LDA DRFLG 
0155                      SZA           IS DISK OK FOR XREF USAGE?
0156                      JMP *+6      NO,  GO TO PROGRAM CONPLETION
0157                      JSB EXEC     YES, SCHEDULE XREFERENCE GENERTR.
0158                      DEF *+4 
0159                      DEF .10 
0160                      DEF XREF







 PAGE 0005 #01  *** DOS/RTE ASMB  FALL 1971 *** 


0161                      DEF ?XRFI 
0162                      XIF 
0163  00565         ASMEX EQU * 
0164                      IFZ 
0165  00565 016015X       JSB EXEC     GO RELEASE ALL TRACKS
0166  00566 000571R       DEF *+3 
0167  00567 004656R       DEF .1+4      RCODE =5
0168  00570 004667R       DEF ..M1     -1 = RELEASE ALL TRACKS
0169                      XIF 
0170  00571 016015X       JSB EXEC      PROGRAM COMPLETION
0171  00572 000574R       DEF *+2 
0172  00573 004657R       DEF .1+5      COMPLETION REQ CODE 
0173  00574 000010  .8    DEC 8 


















































 PAGE 0006 #01  *** DOS/RTE ASMB  FALL 1971 *** 


0175*         ********************************************* 
0176*         * OPLK: OPCODE TABLE LOOKUP  - WALDY HACCOU * 
0177*         *  CALLING SEQUENCE:  L  JSB OPLK,I         * 
0178*         *                    L+1 ERROR RETURN       * 
0179*         *                    L+2 NORMAL RETURN      * 
0180*         *  OUTPUT VALUES: VALUE IN A REG. AND 'CODE'* 
0181*         *               INSTR.FORMAT IN B AND 'INST'* 
0182*         ********************************************* 
0183  00575 004650R DOPL  DEF TEMP+5
0184  00576 000000R       DEF OPT       LOC'N OF OPCODE TABLE 
0185  00577 000000  OPLK  NOP 
0186  00600 017323R       JSB BPKUP    GET OPCODE POSN
0187  00601 076771R       STB SCN1+1
0188  00602 002400        CLA 
0189  00603 072651R       STA TEMP+6   CLEAR TEMP+6 
0190  00604 060001        LDA 1           B REG TO A REG
0191  00605 017641R       JSB GETA    GET OPCODE ADDRESS
0192  00606 076612R       STB *+4 
0193  00607 062654R       LDA ...1+2 (3)
0194  00610 066575R       LDB DOPL      L(TEMP+5) 
0195  00611 017434R       JSB MOVE
0196  00612 000000        NOP     MOVE ORIGIN HERE
0197  00613 066576R       LDB DOPL+1    L(OPCODE TABLE) 
0198  00614 160001        LDA 1,I  (FROM *+7) 
0199  00615 006004       INB
0200  00616 052650R       CPA TEMP+5  CHECK 1ST 2 CHARS.
0201  00617 026627R       JMP K 
0202  00620 046653R J     ADB ...1+1 (2)
0203  00621 160001        LDA 1,I 
0204  00622 002002        SZA   END OF TABLE? 
0205  00623 026614R       JMP *-7  NO 
0206* 
0207*             * ERROR EXIT HERE * 
0208  00624 062715R       LDA .OP       'OP' OPCODE ERROR 
0209  00625 017145R       JSB ERPR
0210  00626 126577R       JMP OPLK,I    EXIT HERE ON 'CD' ERROR 
0211  00627 160001  K     LDA 1,I  CHECK LAST CHAR OF OPCODE
0212  00630 013371R       AND UMSK
0213  00631 052651R       CPA TEMP+6  COMPARE IT
0214  00632 026634R       JMP *+2    OPCODE FOUND ,SKIP 
0215  00633 026620R       JMP J  NOT FOUND, TRY NEXT ENTRY
0216  00634 160001        LDA 1,I 
0217  00635 013372R       AND LMASK     SET 'A' = OPCODE TYPE 
0218  00636 006004        INB 
0219  00637 164001        LDB 1,I 
0220  00640 076756R       STB INST   = INSTRUCTION FORMAT 
0221  00641 072752R       STA CODE   = VALUE OF CODE
0222  00642 036577R       ISZ OPLK
0223  00643 126577R       JMP OPLK,I    EXIT ALPHA+2














 PAGE 0007 #01  *** DOS/RTE ASMB  FALL 1971 *** 


0225*             ******************************************************
0226*             * EVALUATE OPERAND; TEST/PROCESS 'C' OR 'I' MODIFIER *
0227*             ******************************************************
0228  00644 004741R CLER  DEF RELC      START OF 5 WORD CLEAR AREA
0229  00645 000000  CHOP  NOP 
0230*        * ON ENTRY A = MODIF.PARAMETER (I,C,0=NONE,2=ASC)
0231*        *     B= MASK NECESSARY FOR I OR C MODIFIER
0232  00646 072754R       STA FLAG
0233  00647 076755R       STB FLAQ

0235*         * CLEAR CHOP PARAMS IN T, RELC, SIGN, SUMP & TERM.. * 
0236  00650 062656R       LDA ...1+4  (5) 
0237  00651 066644R       LDB CLER      START OF CLEAR AREA 
0238  00652 017671R      JSB SETM 
0239  00653 000000  ZERO  NOP           TO SET MEMORY TO ZERO 
0240  00654 036742R      ISZ SIGN  SET SIGN = + (+1=+,-1=-) 
0241  00655 062772R       LDA SCN1+2  OPER.POSN.
0242  00656 072764R       STA PNTR
0243  00657 002003       SZA,RSS
0244  00660 027042R      JMP HD22  ERROR**NO OPERAND
0245* 
0246*             * GET THE 1ST CHARACTER * 
0247  00661 017651R      JSB GETC 
0248  00662 052700R       CPA L+3  PLUS?
0249  00663 026712R       JMP HD32+2   YES
0250  00664 052702R       CPA L+5  MINUS? 
0251  00665 026710R       JMP HD32     YES
0252  00666 026713R       JMP HD32+3  NO
0253* 
0254*             * PROCESS AN ASTERISK '*' * 
0255  00667 002404  HD26  CLA,INA       SET A=1 
0256  00670 052776R       CPA SYMP      IS THE '*' ALONE? 
0257  00671 002001        RSS           YES - GOOD
0258  00672 027042R       JMP HD22      NO - IT'S AN ERROR
0259  00673 066353R       LDB AFLAG     GET ABS. ASSMBL. FLAG 
0260  00674 006002        SZB           IS THIS AN ABS. ASSEMBLY? 
0261  00675 002400        CLA           YES, CLEAR A(WILL BE RELOC. BIT)
0262  00676 066762R       LDB PLCN  PROG LOCN CNTR TO B REG 
0263  00677 027047R       JMP HD50+2
0264* 
0265*             * CHOP LOOP PROCESSING HERE * 
0266  00700 062761R HD30  LDA PEEK
0267  00701 052701R       CPA L+4 TEST PEEK FOR A 
0268  00702 026746R       JMP HD36  COMMA, GO TO TEST MODIFIERS 
0269  00703 052711R      CPA BLNK 
0270  00704 027001R      JMP HD40  =BLNK
0271  00705 006404       CLB,INB  SET 'SIGN' FOR +
0272  00706 052700R       CPA L+3  PLUS?
0273  00707 002001        RSS           YES 
0274* 
0275*             * PROCESS SIGNS HERE *
0276  00710 007400  HD32 CCB   SET 'SIGN' FOR - 
0277  00711 076742R       STB SIGN  (HD32+1)
0278  00712 036764R       ISZ PNTR
0279* 
0280*             * PICK UP NEXT SET OF CHARS.IN BUFFER * 







 PAGE 0008 #01  *** DOS/RTE ASMB  FALL 1971 *** 


0281  00713 017323R       JSB BPKUP GET POSN OF NXT NON-BLNK CHAR.HD32+3
0282  00714 072761R       STA PEEK
0283  00715 076645R      STB PASCN  SAVE PNTR FOR ASCN RTN
0284  00716 017664R       JSB MSYMS MEAS.SYMBOL, SET SYMP/SYMN
0285  00717 042764R       ADA PNTR
0286  00720 072764R       STA PNTR
0287* 
0288*             * TEST FOR NUMERIC OR SYMBOLIC SET *
0289  00721 062761R       LDA PEEK   FIRST CHAR OF SET TO A FOR TESTING 
0290  00722 067000R      LDB TEST 
0291  00723 076761R       STB PEEK  SAVE CHAR.FOR LATER TEST
0292  00724 052677R       CPA L+2  ASTERISK?
0293  00725 026667R      JMP HD26 TO '*' PROC 
0294  00726 043103R       ADA .M58      -58 
0295  00727 002021        SSA,RSS       TEST FOR SYMBOLIC TERM
0296  00730 027045R       JMP HD50  PROCESS THE SYMBOL
0297  00731 042503R       ADA LPDG+3 (10) 
0298  00732 002020       SSA
0299  00733 027045R       JMP HD50  PROCESS THE SYMBOL
0300* 
0301*             * PROCESS NUMERIC SET HERE *
0302  00734 066776R       LDB SYMP
0303  00735 046667R       ADB ..M1
0304  00736 062757R       LDA LAST IS B LAST -
0305  00737 052725R       CPA .B        CHARACTER?
0306  00740 026742R      JMP *+2
0307*             * SET B REG FOR ASCN ROUTINE
0308  00741 047101R       ADB .401B 
0309  00742 062645R      LDA PASCN
0310  00743 017675R       JSB ASCN      TO AXCII CONVERSION TO BINARY 
0311  00744 126645R       JMP CHOP,I    ERROR EXIT FROM ASCII CONV. 
0312  00745 027067R      JMP HD61+1  A REG CONTAINS THE VALUE 
0313* 
0314*        * TEST INFORMATION FOLLOWING COMMA, IF LEGAL 
0315*        * -USES FLAG AND FLAQ
0316*        * -IF C OR I, SET CORRECT BIT IN INSTRUC. USING FLAQ AS MAS
0317* 
0318  00746 066754R HD36 LDB FLAG 
0319  00747 006003       SZB,RSS  IS COMMA LEGAL
0320  00750 026760R      JMP HD37 -NO- ERROR
0321  00751 056653R       CPB ...1+1  'ASC'?
0322  00752 027001R      JMP HD40 -YES- 
0323  00753 036764R      ISZ PNTR  POINT TO CHAR.FOLLOWING COMMA
0324  00754 017323R      JSB BPKUP SEARCH FOR NON-BLANK 
0325  00755 016772R      JSB MSYM  MEASURE SYMBOL 
0326  00756 052652R      CPA ...1  1 CHAR SYMBOL? 
0327  00757 026762R      JMP *+3   YES
0328*            *   NO - ERROR 
0329  00760 017635R HD37 JSB OPERR OPERAND ERROR
0330  00761 027001R      JMP HD40 
0331  00762 063000R      LDA TEST 
0332  00763 052711R      CPA BLNK  BLANK TERMINATOR?
0333  00764 026766R      JMP *+2  -YES- 
0334  00765 026760R      JMP HD37 -NO- ERROR
0335  00766 062757R      LDA LAST  CHAR TO A
0336  00767 066741R       LDB RELC      GET THE RELOCATION FLAG 







 PAGE 0009 #01  *** DOS/RTE ASMB  FALL 1971 *** 


0337  00770 052754R       CPA FLAG =I/C?
0338  00771 056655R       CPB .1+3      YES, IS OPERAND EXTERNAL? 
0339  00772 026760R       JMP HD37      EROOR IF NO 'I' OR 'C' OR EXT OP
0340  00773 062756R      LDA INST 
0341  00774 032755R      IOR FLAQ  SET I OR C BIT 
0342  00775 072756R      STA INST 
0343  00776 062752R      LDA CODE 
0344  00777 052677R       CPA L+2  STF OR CLF? (52) 
0345  01000 026760R      JMP HD37  -YES- ERROR
0346* 
0347*             * CHOP TERMINATION PROCESSOR *
0348* 
0349  01001 062743R HD40  LDA SUMP  SUM TO A
0350  01002 066752R      LDB CODE 
0351  01003 002020       SSA   TEST SUMP
0352  01004 027040R       JMP HD44+2
0353  01005 062741R      LDA RELC 
0354  01006 002003       SZA,RSS  RELOCATBLE? 
0355  01007 027031R       JMP HD42  .NO.
0356* 
0357*             * VALUE IS RELOCATABLE, TEST FOR VALIDITY * 
0358  01010 062745R       LDA T  IS RELOC.NO. 
0359  01011 002003       SZA,RSS  CANCELLED?
0360  01012 027032R      JMP HD42+1   -YES- 
0361  01013 052652R      CPA ...1 LEG'L RELOC?
0362  01014 002001       RSS         -YES- SKIP 
0363  01015 027042R      JMP HD22 NO,ERROR. 
0364  01016 056652R       CPB ...1  ORG?
0365  01017 027026R       JMP E  YES
0366*             *CHECK FOR EQU,END,TYPE 1 OR DEF(ALSO CODE=17B)*
0367  01020 047100R       ADB .M11      -11 
0368  01021 006020        SSB       CODE<13B? 
0369  01022 027042R       JMP HD22   YES, ERROR 
0370  01023 046674R       ADB ..M1+5  -6
0371  01024 006021        SSB,RSS   CODE>20B? 
0372  01025 027042R      JMP HD22 **ILL.RELOC.**
0373  01026 062741R E     LDA RELC
0374  01027 052655R       CPA ...1+3  EXTERNAL? 
0375  01030 027036R      JMP HD44   YES 
0376* 
0377*             * NORMAL EXIT FROM CHOP, HERE * 
0378* 
0379  01031 062741R HD42 LDA RELC 
0380  01032 072741R      STA RELC  RELOC.CODE IN A AND RELC 
0381  01033 066743R       LDB SUMP   SUM IN B REG ON EXIT 
0382  01034 036645R       ISZ CHOP
0383  01035 126645R       JMP CHOP,I    EXIT ALPHA+2
0384* 
0385*             * TEST FOR MORE THAN 1 EXT TERM * 
0386* 
0387  01036 066744R HD44  LDB TERM
0388  01037 046665R       ADB .12+4 (16)
0389* 
0390*        * NEG. OPERAND OK IF ABS OPCODE *
0391  01040 056666R       CPB .12+5 (17)'ABS'OR 1 EXT TERM? 
0392  01041 027031R      JMP HD42 -YES- 







 PAGE 0010 #01  *** DOS/RTE ASMB  FALL 1971 *** 


0393* 
0394*       *CHOP ERROR EXIT* 
0395* 
0396  01042 062713R HD22  LDA .MBLN     'M' FOR M TERM ERROR
0397  01043 017145R       JSB ERPR  ERROR PRINT 
0398  01044 126645R       JMP CHOP,I    EXIT ALPHA+1
0399* 
0400*             * PROCESS SYMBOLIC TERM HERE *
0401* 
0402  01045 017503R HD50  JSB SYMK      GO TO SYMBOL TABLE LOOKUP 
0403  01046 027076R       JMP HD6  ERR0R
0404  01047 076766R       STB SAVB   SAVE VALUE FOUND IN B    (HD50+2)
0405  01050 012660R       AND .1+6      TYPE MASK 
0406  01051 002003        SZA,RSS       RELOCATABLE TYPE? 
0407  01052 027066R       JMP HD61      NO, ABSOLUTE OF UNDEF ENTRY PT. 
0408* 
0409*              * TEST FOR EXTERNAL EQU (RELC=5) 
0410  01053 052656R       CPA ...1+4 RELOC=5? 
0411  01054 062655R       LDA ...1+3 YES, SET FOR 4 
0412  01055 066741R      LDB RELC 
0413  01056 006003       SZB,RSS
0414  01057 072741R      STA RELC 
0415  01060 052741R      CPA RELC TEST FOR SAME RELOC.TYPE
0416  01061 002001       RSS      SAME
0417  01062 027042R      JMP HD22 ERROR-DIFFERENT 
0418* 
0419*             *UPDATE SIGN SAVER
0420  01063 066742R      LDB SIGN 
0421  01064 046745R       ADB T 
0422  01065 076745R       STB T 
0423  01066 062766R HD61 LDA SAVB  VALUETO A
0424  01067 036744R      ISZ TERM  UPDATE NO OF TERMS 
0425  01070 066742R      LDB SIGN 
0426  01071 006020       SSB  IS SIGN NEGATIVE? 
0427  01072 003004       CMA,INA  -YES- COMPLEMENT
0428  01073 042743R      ADA SUMP -UPDATE RUNNING SUM 
0429  01074 072743R      STA SUMP 
0430  01075 026700R      JMP HD30 
0431* 
0432*             * UNDEFINED SYMBOL EXIT * 
0433* 
0434  01076 062717R HD6   LDA .UN       'UN' UNDEFINED SYMBOL 
0435  01077 027043R       JMP HD22+1  TO ERPR 
0436  01100 177765  .M11  DEC -11 
0437  01101 000401  .401B OCT 401 
0438  01102 000062  .50   DEC 50
0439  01103 177706  .M58  DEC -58 
















 PAGE 0011 #01  *** DOS/RTE ASMB  FALL 1971 *** 


0441*             ********************
0442*             * READ A STATEMENT *
0443*             ********************
0444  01104 000000  RSTA NOP
0445  01105 063267R       LDA REP 
0446  01106 002003        SZA,RSS  ARE WE REPEATING A STATE?
0447  01107 027112R       JMP RXT   NO -
0448  01110 037267R       ISZ REP  YES, ARE WE DONE?
0449  01111 027224R       JMP RZP  NO 
0450  01112 066761R RXT   LDB FBOI
0451  01113 063102R       LDA .50       FOR 50 WORDS
0452  01114 017671R       JSB SETM   SET I/O BUFF TO BLANKS 
0453  01115 020040  BLNS  ASC 1,
0454  01116 016157R RXC   JSB %READ     GO READ A STATEMENT 
0455  01117 001124R       DEF *+5 
0456  01120 004361R       DEF LUNIN     LUN 
0457  01121 005017R FFUB  DEF BUFF
0458  01122 001363R       DEF .M72      72 CHARACTERS INPUT 
0459  01123 026554R       JMP ABORT     EOF RETURN - NOT POSSIBLE 
0460  01124 076770R       STB SCN1      SAVE ACTUAL CHARACTER COUNT 
0461  01125 007004        CMB,INB 
0462  01126 076764R       STB PNTR      SAVE NEG. CHAR COUNT
0463*              ******************************************** 
0464*              * DWRIT - WRITE A STATEMENT ONTO THE DISC. * 
0465*              ******************************************** 
0466  01127 062361R       LDA LUNIN     GET INPUT LUN 
0467  01130 052653R       CPA .1+1      IS IT THE DISK? 
0468  01131 027142R       JMP DWDUN     YES, SKIP DISK WRITE
0469  01132 062356R       LDA DRFLG          GET FLAG 
0470  01133 002002        SZA           IS DISK FULL? 
0471  01134 027142R       JMP DWDUN     YES, SKIP FURTHER WRITING 
0472  01135 017737R       JSB %WRIS     GO TO WRITE ON DISC 
0473  01136 001142R       DEF *+4 
0474  01137 005017R       DEF BUFF      BUFFER
0475  01140 004764R       DEF PNTR      NEG. CHAR COUNT 
0476  01141 036356R       ISZ DRFLG     DISC FULL - TURN OFF DISC FLAG
0477  01142 066770R DWDUN LDB SCN1
0478  01143 006003        SZB,RSS       END OF TAPE? (B=0?) 
0479  01144 027374R       JMP TAPN      YES - GO SET PARAMETERS 
0480  01145 037302R       ISZ SEQN  BUMP SEQ.NO.
0481  01146 006404        CLB,INB   1 TO B
0482  01147 076764R       STB PNTR SET PNTR = 1 
0483  01150 046770R       ADB SCN1      GET TOATL LENGTH
0484*             * SET CHARS FOLLOWING STATE.TO BLANKS * 
0485  01151 005100       BRS
0486  01152 047121R      ADB FFUB 
0487  01153 063115R      LDA BLNS 
0488  01154 170001       STA 1,I
0489  01155 002400  RXL   CLA    (ENTER FOR REP PROCESSOR)
0490  01156 072747R      STA BYFLG  CLR PUNCH BYTE FLAG 
0491  01157 072773R       STA SCN1+3
0492  01160 073000R      STA TEST 
0493  01161 037366R       ISZ ASM1  CONTROL STATE.? 
0494  01162 027170R       JMP *+6       NO..
0495  01163 062656R       LDA ...1+4  YES, SET LIST CODE
0496  01164 016650R       JSB LIST







 PAGE 0012 #01  *** DOS/RTE ASMB  FALL 1971 *** 


0497  01165 002404        CLA,INA       SET A = 1 
0498  01166 073373R       STA TAPE      SET TAPE COUNT = 1, IN CASE OF ?
0499  01167 127104R       JMP RSTA,I   EXIT 
0500* 
0501*             *  CHECK LABEL AREA  *
0502  01170 017316R       JSB PKUP  PICK UP NEXT CHAR; BUMP PNTR
0503  01171 052677R       CPA L+2    *? 
0504  01172 027276R      JMP HI24  -YES-
0505* 
0506*             * IS LABEL PRESENT? * 
0507  01173 052711R      CPA BLNK 
0508  01174 027236R      JMP HS50  -YES-
0509  01175 017212R       JSB LBL  TEST FOR ILLEGAL CHAR
0510  01176 063000R       LDA TEST  -OK- TEST FOR NUMERIC 1ST CHAR
0511  01177 043625R       ADA .M48      -48 
0512  01200 002020        SSA     LESS THAN ZERO? 
0513  01201 027205R       JMP HS20  YES 
0514  01202 042707R       ADA .M15     (-15) NO 
0515  01203 002020        SSA    >77B ? 
0516  01204 027221R       JMP HLB   NO- ERR0R 
0517  01205 017316R HS20 JSB PKUP  GET NEXT LABEL CHAR
0518  01206 052711R       CPA BLNK  END OF LABEL? 
0519  01207 027233R       JMP HS49  -YES
0520  01210 017212R       JSB LBL   -NO, TEST FOR LEGALITY
0521  01211 027205R       JMP HS20  -OK 
0522* 
0523*             * TEST FOR ILLEGAL CHAR. IN LABEL * 
0524*             * THEY ARE ' ( ) * + , -           *
0525* 
0526  01212 000000  LBL  NOP
0527  01213 043364R       ADA .M46      -56B
0528  01214 002021        SSA,RSS  GRTR THAN OCT 55?
0529  01215 127212R       JMP LBL,I  YES,LEGAL
0530  01216 042660R       ADA ...1+6 (7)
0531  01217 002020        SSA      LESS THAN OCT 47 ? 
0532  01220 127212R       JMP LBL,I  YES,LEGAL
0533* 
0534*             * ERROR EXIT *
0535* 
0536  01221 063367R HLB   LDA .SY       'SY'= ILLEGAL LABEL CHARACTER 
0537  01222 017145R       JSB ERPR
0538  01223 027205R       JMP HS20
0539* 
0540*          * 'REP' PROCESSING * 
0541  01224 037270R RZP   ISZ REQ  1ST REP PASS?
0542  01225 027112R       JMP RXT   YES,READ STATEMENT
0543  01226 003400        CCA 
0544  01227 073270R       STA REQ   SET REQ = -1
0545  01230 002404        CLA,INA 
0546  01231 072764R       STA PNTR  SET PNTR=1
0547  01232 027155R       JMP RXL 
0548* 
0549*             * LABEL POST-PROCESSOR *
0550* 
0551  01233 062764R HS49 LDA PNTR 
0552  01234 042670R       ADA ..M1+1 (-2) SET LABEL LENGTH







 PAGE 0013 #01  *** DOS/RTE ASMB  FALL 1971 *** 


0553  01235 072773R       STA SCN1+3
0554* 
0555*             * PROCESS OPCODE *
0556* 
0557  01236 016577R HS50  JSB OPLK    SEARCH FOR OPCODE 
0558  01237 027261R      JMP HSERR   ERROR EXIT 
0559  01240 017316R       JSB PKUP  GET NEXT CHAR (_*+5)
0560  01241 052711R      CPA BLNK  BLANK? 
0561  01242 027246R      JMP *+4    YES?
0562  01243 052701R       CPA L+4  COMMA? 
0563  01244 017323R      JSB BPKUP  YES-GET NEXT NON-BLANK
0564  01245 027240R       JMP *-5  GET NEXT CHAR. 
0565* 
0566*             * TEST FOR OPCODE LENGTH LEGAL *
0567  01246 066764R      LDB PNTR 
0568  01247 007004       CMB,INB  (POINTS TO BLNK FOLLOWING OPCODE) 
0569  01250 046771R       ADB SCN1+1
0570  01251 056672R       CPB ..M1+3  (-4)
0571  01252 027301R      JMP HS54  LENGTH OK (=3) 
0572  01253 062752R      LDA CODE 
0573  01254 043625R       ADA .M48      CODE-60B
0574  01255 002021       SSA,RSS   MICRO-OP ? 
0575  01256 027301R      JMP HS54  YES
0576* 
0577*             * ERROR PROCESSOR FOR OPCODE *
0578  01257 062715R       LDA .OP       'OP'= OPCODE HAS TOO MANY CHARS.
0579  01260 017145R      JSB ERPR 
0580  01261 063366R HSERR LDA ASM1
0581  01262 067301R       LDB IFUSE 
0582  01263 056652R       CPB .1        SKIP CODE BECAUSE OF IFZ/IFN? 
0583  01264 027356R       JMP IFPRN     YES - GO PRINT THE STATEMENT. 
0584  01265 002020        SSA           IS THIS AN INITIAL READ REQUEST?
0585  01266 027276R       JMP HI24  -IT'S FROM INIT, SKIP OUTPUT BELOW. 
0586  01267 062760R       LDA PASS
0587  01270 002003       SZA,RSS
0588  01271 017404R       JSB ?LABE     INSERT LABEL FOR OPCODE ERROR 
0589  01272 017333R       JSB LOUT   TO BREC
0590  01273 016650R       JSB LIST
0591  01274 036762R       ISZ PLCN   BUMP LOCN.CNTR 
0592  01275 027112R       JMP RXT  READ NEXT STATE. 
0593  01276 062654R HI24  LDA ...1+2  (3) REMARK PROC.
0594  01277 016650R       JSB LIST
0595  01300 027112R       JMP RXT       READ NEXT STATEMENT 
0596* 
0597*             * PICK UP OPERAND LOCN, THEN EXIT * 
0598* 
0599  01301 066752R HS54  LDB CODE
0600  01302 057362R       CPB .31B      IS THIS IFZ/IFN/XIF?
0601  01303 027334R       JMP IFZN      YES 
0602  01304 063301R       LDA IFUSE     GET 'IF' USE FLAG 
0603  01305 052652R       CPA .1        SKIP ASSEMBLING?
0604  01306 056661R       CPB .12      IS IT AN 'END'?
0605  01307 002001        RSS           YES - DON'T SKIP IT 
0606  01310 027277R       JMP HI24+1    GO ON AND PRINT THE STATEMENT 
0607  01311 017323R       JSB BPKUP     GO SKIP BLANKS IF NECESSARY.
0608  01312 047365R       ADB .M73     (-73) TEST FOR PNTR< 73







 PAGE 0014 #01  *** DOS/RTE ASMB  FALL 1971 *** 


0609  01313 002400       CLA      SET A=0 
0610  01314 073272R       STA LTFLG     CLEAR LITERAL FLAG
0611  01315 006020       SSB   SKIP IF FIELD OUT OF RANGE 
0612  01316 062764R      LDA PNTR PNTR TO A 
0613  01317 072772R       STA SCN1+2  OPERND POSN 
0614  01320 002002        SZA           OPERAND PRESENT?
0615* 
0616*           * TEST FOR LITERAL *
0617  01321 017316R       JSB  PKUP     YES - GET 1ST CHAR. 
0618  01322 066353R       LDB AFLAG     GET FLAG FOR 'ABS' TEST 
0619  01323 053361R       CPA EQ        IS THE OPERAND A LITERAL? 
0620  01324 006002        SZB           YES, BUT EXIT IF ABSOLUTE ASS'Y.
0621  01325 127104R       JMP RSTA,I    NO   EXIT FROM READER HERE. 
0622  01326 017316R       JSB PKUP      GET THE LITERAL TYPE, NOW.
0623  01327 066772R       LDB SCN1+2    GET OPERAND PNTR
0624  01330 046653R       ADB .1+1      ADD 2 
0625  01331 076772R       STB SCN1+2    RESET PNTR TO LETERAL VALUE 
0626  01332 073272R       STA LTFLG     SET LIT.FLAG(=LITERAL TYPE) 
0627  01333 127104R       JMP RSTA,I    EXIT FROM RSTA HERE 


0629*         * PROCESS 'IFZ', 'IFN', OR 'XIF' CODES..* 

0631  01334 062756R IFZN  LDA INST      GET INSTR.FORMAT(HAS IF CHAR IN)
0632  01335 006400        CLB 
0633  01336 002003        SZA,RSS       IS INST = 0? (IS IT XIF) ?
0634  01337 027350R       JMP IFZN3     YES 
0635  01340 057301R       CPB IFUSE     IFUSE = 0?
0636  01341 027345R       JMP IFZN2     YES - GO ON WITH PROCESSING 
0637  01342 063360R IFZNR LDA IF        NO, ERROR, WE'RE IN IF OR REP 
0638  01343 017145R       JSB ERPR      PRINT 'IF' ERROR
0639  01344 027351R       JMP IFZN3+1   YES, GO ON WITH PROGRAM 
0640  01345 006404  IFZN2 CLB,INB       SET B = 1 
0641  01346 052352R       CPA IFTST     IS 'IF' CHARACTER MATCHED?
0642  01347 007004        CMB,INB       YES - SET B = -1
0643  01350 077301R IFZN3 STB IFUSE     SET 'IFUSE' FLAG
0644  01351 006400        CLB 
0645  01352 057267R       CPB REP       IN RANGE OF A REPEAT? 
0646  01353 027356R       JMP *+3       NO - OK 
0647  01354 077267R       STB REP       YES - CLEAR 'REP' FLAG
0648  01355 027342R       JMP IFZNR     GO PRINT ERROR DIAG.
0649  01356 002404  IFPRN CLA,INA       SET UP FOR NO INST, NO LOC'N PRN
0650  01357 027277R       JMP HI24+1    GO TO LIST AND CONTINUE 

0652  01360 044506  IF    ASC 1,IF      ERROR IN IFZ OR IFN 
0653  01361 000075  EQ    OCT 75  EQUAL SIGN(=) 
0654  01362 000031  .31B  OCT 31        =IFZ,IFN,XIF TYPE 
0655  01363 177670  .M72  DEC -72 
0656  01364 177722  .M46  DEC -46 
0657  01365 177667  .M73  DEC -73 
0658  01366 177777  ASM1  OCT -1 CONTROL STATE.FLAG 
0659  01367 051531  .SY   ASC 1,SY
0660  01370 004372R HEDR  DEF HEADP 
0661  01371 177400  UMSK  OCT 177400    MASK FOR UPPER CHARACTER
0662  01372 000377  LMASK OCT 377       MASK FOR LOWER CHARACTER
0663  01373 000001  TAPE  OCT 1        COUNT SOURCE TAPES 







 PAGE 0015 #01  *** DOS/RTE ASMB  FALL 1971 *** 


0665*             * SET SEQN TO ZERO, BUMP AND CONVERT SEQN. NO. *

0667  01374 077302R TAPN  STB SEQN      SET SEQ. NO. TO ZERO
0668  01375 037373R       ISZ TAPE ADD 1 TO TAPE #
0669  01376 063373R       LDA TAPE
0670  01377 002300        CCE      CONVERT TO ASCII 
0671  01400 016505R       JSB BNCN      CONVERT TO ASCII OCTAL
0672  01401 062376R       LDA ASCI+2
0673  01402 072400R       STA ASCI+4    STORE IT INTO THE HEADER
0674  01403 027116R       JMP RXC 
0675* 
0676*              * TEST FOR LABEL PRESENT AND INSERT IN SYMBOL TABLE
0677*              *  SET CORRECT RELOC.CODE BEFORE INSERTION.
0678  01404 000000  ?LABE NOP 
0679  01405 062773R       LDA SCN1+3  GET LABEL LENGTH
0680  01406 002003        SZA,RSS      LABEL PRESENT ?
0681  01407 127404R       JMP ?LABE,I   NO, DONE, EXIT..
0682  01410 072776R       STA SYMP      SET CHAR COUNT
0683  01411 067121R       LDB FFUB
0684  01412 076777R       STB SYMP+1  SET LABEL ADDR. 
0685  01413 067272R       LDB LTFLG 
0686  01414 076755R       STB FLAQ  SAVE LTFLG
0687  01415 002400        CLA 
0688  01416 073272R       STA LTFLG  LTFLG_0
0689  01417 062353R       LDA AFLAG 
0690  01420 002002        SZA           IS THIS AN ABSOLUTE ASSEMBLY? 
0691  01421 027431R       JMP LABEX     YES 
0692  01422 002404        CLA,INA       SET A = 1 
0693  01423 066762R       LDB PLCN
0694  01424 016013X       JSB ?INSR   INSERT LABEL INTO SYMBOL TABLE
0695  01425 000000        NOP      ERROR EXIT 
0696  01426 066755R       LDB FLAQ
0697  01427 077272R       STB LTFLG RESTORE LTFLG 
0698  01430 127404R       JMP ?LABE,I   EXIT
0699  01431 016014X LABEX JSB ?INS?     GO TO INSERT RTN IN ASMB4 
0700  01432 000000        NOP           ERROR EXIT
0701  01433 127404R       JMP ?LABE,I     EXIT


























 PAGE 0016 #01  *** DOS/RTE ASMB  FALL 1971 *** 


0703*             **************************************
0704*             * MOVE: MOVES A STRING OF CHARACTERS *
0705*             * LINKAGE: A = NO.OF CHARS TO MOVE   *
0706*             *          B = DESTINATION ADDRESS   *
0707*             *      L   JSB  MOVE,I               *
0708*             *     L+1   SOURCE ADDRESS           *
0709*             *     L+2   RETURN                   *
0710*             * ADDR.TRUE IF STARTS ON LEFT        *
0711*             *    2'S COMPL.IF STARTS ON RIGHT    *
0712*             **************************************
0713  01434 000000  MOVE  NOP 
0714  01435 002002        SZA  IS CHAR.COUNT = 0? 
0715  01436 027441R       JMP *+3  NO 
0716  01437 017635R       JSB OPERR  YES
0717  01440 027501R       JMP MOVX
0718  01441 003004        CMA,INA 
0719  01442 072441R       STA GTEM+3  =-A 
0720*             * SET UP DESTINATION
0721  01443 006120       OCT 6120 
0722  01444 007304       OCT 7304 
0723  01445 005600       ELB
0724  01446 076437R       STB GTEM+1
0725  01447 167434R       LDB MOVE,I    GET SOURCE ADDRESS
0726*             * SET UP SOURCE 
0727  01450 006120       OCT 6120 
0728  01451 007304       OCT 7304 
0729  01452 005600       ELB
0730  01453 076440R       STB GTEM+2
0731*             * NOW MOVE THE CHARACTERS * 
0732  01454 066440R $     LDB GTEM+2
0733  01455 004065       OCT 4065 E_0BIT
0734  01456 160001        LDA 1,I   B,I TO A
0735  01457 002041       OCT 2041 E=0?
0736  01460 001727       OCT 1727 ROT. A
0737  01461 013372R       AND LMASK     MASK OUT UPPER 8 BITS 
0738*             * LOWER 8 BITS OF A CONTAINS CHAR.TO BE MOVED.* 
0739  01462 072436R      STA GTEM 
0740  01463 066437R       LDB GTEM+1  DEST TO B 
0741  01464 004065       OCT 4065 E_0BIT
0742  01465 160001        LDA 1,I  B,I TO A 
0743  01466 002041       OCT 2041 E=0?
0744  01467 001727       OCT 1727 ROT. A
0745  01470 013371R      AND UMSK 
0746  01471 032436R      IOR GTEM 
0747*             * CHAR.NOW IN A, WITH  OTHER HALF OF DEST.WORD.*
0748*              * SINCE IT'S ON RIGHT WE MAY HAVE TO ROTATE   *
0749  01472 002041       OCT 2041 E=0?
0750  01473 001727       OCT 1727 ROT. A
0751  01474 170001        STA 1,I   A TO B,I
0752*             * NOW IT'S IN OK, BUMP COUNTERS AND PROCEED * 
0753  01475 036440R       ISZ GTEM+2
0754  01476 036437R       ISZ GTEM+1
0755  01477 036441R       ISZ GTEM+3
0756  01500 027454R       JMP $ 
0757  01501 037434R MOVX  ISZ MOVE
0758  01502 127434R       JMP MOVE,I    RETURN TO L+2 OF LINKAGE







 PAGE 0017 #01  *** DOS/RTE ASMB  FALL 1971 *** 


0759*        *********************************************
0760*        * SYMK: LOOKUP SYMBOL TABLE ENTRY; W HACCOU *
0761*        *    LINKAGE: INPUT; SYMP=NO CHARS;SYMN=FWA *
0762*        *             OF NAME..OUTPUT;A=TYPE,B=VALUE*
0763*        *            L    JSB SYMK,I                *
0764*        *           L+1   UNDEF.SYMBOL EXIT         *
0765*        *           L+2   NORMAL RETN               *
0766*        *********************************************
0767  01503 000000  SYMK  NOP 
0768  01504 002400       CLA           INITIALIZE NAME(4),
0769  01505 072735R      STA NAME      0 TO 1ST, BLANKS TO
0770  01506 063115R       LDA BLNS  OTHER WORDS 
0771  01507 072736R      STA NAME+1 
0772  01510 072737R      STA NAME+2 
0773  01511 062776R       LDA SYMP  NO.OF CHARS 
0774  01512 042674R       ADA ..M1+5 (-6) 
0775  01513 002020       SSA
0776  01514 027521R       JMP *+5 
0777* 
0778*             * SYMBOL TOO LONG, PRINT DIAG.; SET LENGTH = 5 *
0779  01515 063367R       LDA .SY       'SY' TOO MANY CHARS IN SYMBOL 
0780  01516 017145R      JSB ERPR 
0781  01517 062656R       LDA ...1+4  (5) 
0782  01520 072776R       STA SYMP
0783  01521 062776R       LDA SYMP  (FROM *-5)
0784  01522 066777R       LDB SYMP+1 ADDR.OF 1ST CHAR.
0785  01523 077527R       STB *+4 
0786  01524 066734R      LDB NAMI 
0787  01525 007004       OCT 7004      CMB,INB
0788  01526 017434R       JSB MOVE
0789  01527 000000        NOP  (SET AT *-4) 
0790  01530 062776R       LDA SYMP   NO.OF CHARS. 
0791  01531 001100       ARS           STORE NUMBER OF
0792  01532 002004       INA           WORDS IN ENTRY-1 
0793  01533 072645R       STA TEMP+2  INTO TEMP+2 
0794  01534 002004       INA
0795  01535 072646R       STA TEMP+3  AND TEMP+3
0796  01536 001727       OCT 1727      ALF,ALF
0797  01537 001700       ALF
0798  01540 042735R      ADA NAME      SET NUMBER OF WORDS
0799  01541 072735R      STA NAME      TO COMPARE FIRST WORDS 
0800  01542 062370R       LDA X     IN THE
0801  01543 072775R      STA SYMI      SYMBTAB ADDR.COUNTER 
0802  01544 062734R LP2   LDA NAMI
0803  01545 073626R       STA SALU        RESET NAME ADDR. COUNTER
0804  01546 062775R      LDA SYMI 
0805  01547 072647R       STA TEMP+4  SAVE FWA OF SYMB.TBL.ENTRY
0806  01550 162775R      LDA SYMI,I 
0807  01551 002003       OCT 2003      SZA,RSS
0808  01552 127503R       JMP SYMK,I    UNDEFINED EXIT FROM HERE
0809  01553 072750R       STA FLEX  SAVE 1ST WORD OF ENTRY
0810  01554 013622R       AND SMASK     70377B
0811  01555 052735R      CPA NAME      COMPARE 1ST WORDS
0812  01556 027564R       JMP *+6 
0813  01557 001700       ALF
0814  01560 012664R       AND .12+3 (17B)MASK NO.WRDS IN ENTRY







 PAGE 0018 #01  *** DOS/RTE ASMB  FALL 1971 *** 


0815  01561 042775R       ADA SYMI
0816  01562 072775R LP3   STA SYMI BUMP ADDR.CNTR 
0817  01563 027544R       JMP LP2 
0818  01564 062645R       LDA TEMP+2  (FROM *-6)
0819  01565 042775R      ADA SYMI     SET LIMIT=LWA-1 
0820  01566 072644R       STA VAL0  OF SYMTAB ENTRY 
0821  01567 036775R       ISZ SYMI  BU,P ADDR CNTR (FROM *+7) 
0822  01570 062775R      LDA SYMI 
0823  01571 052644R       CPA VAL0  END OF ENTRY? 
0824  01572 027602R       JMP *+8   YES 
0825  01573 037626R        ISZ SALU        NO 
0826  01574 162775R      LDA SYMI,I    COMPARE NEXT 2 CHARS.
0827  01575 153626R        CPA SALU,I 
0828  01576 027567R       JMP *-7  =, COMPARE NEXT 2
0829  01577 062646R LP4   LDA TEMP+3
0830  01600 042647R       ADA TEMP+4    SET FWA OF NEXT ENTRY 
0831  01601 027562R       JMP LP3  CHK NXT SYMTAB ENTRY 
0832  01602 062750R       LDA FLEX  GET 1ST ENTRY WRD (FROM *-8)
0833  01603 001727       OCT 1727      ALF,ALF
0834  01604 012664R       AND .12+3 (17B) 
0835  01605 067272R       LDB LTFLG 
0836  01606 006003        SZB,RSS    LITERAL IN OPERAND?
0837  01607 027615R       JMP *+6  NO 
0838  01610 056652R       CPB ...1 ARITH MACRO WITH LITERAL?
0839  01611 027615R       JMP *+4  YES
0840  01612 052660R       CPA ...1+6 YES, RELC=7? 
0841  01613 027617R       JMP *+4    YES, DONE. 
0842  01614 027577R       JMP LP4    NO, GO BACK
0843  01615 052660R       CPA ...1+6    LITERAL?
0844  01616 027577R       JMP LP4    YES, GO BACK(OPERAND IS'NT LITERAL)
0845  01617 166775R      LDB SYMI,I    B=VALUE
0846  01620 037503R       ISZ SYMK
0847  01621 127503R       JMP SYMK,I    EXIT ALPHA+2 HERE 
0848  01622 070377  SMASK OCT 70377 
0849  01623 000400  .400B OCT 400 
0850  01624 177760  .M16  DEC -16 
0851  01625 177720  .M48  DEC -48 
0852  01626 000000  SALU  NOP            TEMPORARY FOR NAME ADDR. COUNTE

























 PAGE 0019 #01  *** DOS/RTE ASMB  FALL 1971 *** 


0854*        *************************
0855*        * PUNCH A BINARY RECORD *
0856*        *************************
0857  01627 000000  PNCH  NOP 
0858  01630 066346R       LDB BFLAG     GET 'B' FLAG
0859  01631 046355R       ADB LGFLG     LOAD/GO 
0860  01632 006003        SZB,RSS       PUNCH FLAG ON?
0861  01633 127627R       JMP PNCH,I    NO - EXIT 
0862* 
0863*              * COMPUTE CHECKSUM * 
0864  01634 067661R      LDB FUBP 
0865  01635 063070R      LDA PBUF 
0866  01636 001727       ALF,ALF
0867  01637 072751R      STA CNTB 
0868  01640 003004       CMA,INA
0869  01641 002004       INA
0870  01642 072436R       STA GTEM STORE CHKSUM CNTR
0871  01643 002400       CLA       CLEAR
0872  01644 073072R       STA PBUF+2   CLEAR CHECKSUM SLOT
0873  01645 034001       ISZ 1     BUMP REC.ADDR. 
0874  01646 140001       ADA 1,I   ADD TO CHK SUM 
0875  01647 036436R       ISZ GTEM  DONE? 
0876  01650 027645R      JMP *-3   -NO
0877  01651 073072R      STA PBUF+2 -YES- STORE SUM 
0878  01652 062346R       LDA BFLAG     GET PUNCH FLAG
0879  01653 002003        SZA,RSS       PUNCH BIN. TAPE 
0880  01654 027666R       JMP PNLGO     NO, SKIP BINARY OUTPUT
0881* 
0882*              * GO TO SYS PUNCH *
0883  01655 016015X       JSB EXEC      GO PUNCH BIN RECORD 
0884  01656 001663R       DEF *+5 
0885  01657 004653R       DEF .1+1     'OUTPUT' REQ CODE
0886  01660 004363R       DEF LUNPN 
0887  01661 005070R FUBP  DEF PBUF
0888  01662 004751R       DEF CNTB      WORD COUNT
0889  01663 062355R       LDA LGFLG 
0890  01664 002003        SZA,RSS       LOAD AND GO?
0891  01665 027672R       JMP PNCHX     NO
0892  01666 016113R PNLGO JSB %WRIT     GO WRITE IN JOB BIN. AREA 
0893  01667 001672R       DEF *+3 
0894  01670 005070R       DEF PBUF      BUFFER
0895  01671 004751R       DEF CNTB      WORD COUNT
0896  01672 002400  PNCHX CLA 
0897  01673 073070R       STA PBUF
0898*              * EXIT HERE
0899  01674 127627R      JMP PNCH,I 

















 PAGE 0020 #01  *** DOS/RTE ASMB  FALL 1971 *** 


0901*         ********************************************
0902*         * ASCN - CONVERT AN ASCII NUMBER TO BINARY *
0903*         * -ENTRY: A CONTAINS POSITION OF 1ST CHAR. *
0904*         *         B(LOWER) CONTAINS NO. OF CHARS.  *
0905*         *         B(UPPER): MODE(BELOW)            *
0906*         *          0 = OCTAL                       *
0907*         *          1 = FIXED DECIMAL               *
0908*         *          2 = FLOATING DECIMAL            *
0909*         *          3 = EXTENDED FLTG. DECIMAL      *
0910*         * -EXIT : L+1 = ERROR RETURN ON ILLEGAL    *
0911*         *               CHARACTER OR OVERFLOW.     *
0912*         *         L+2 = NORMAL RETURN              *
0913*         *          MODE=0 OR 1, VALUE IN A         *
0914*         *          MODE=2, VALUE IN A AND B        *
0915*         *          MODE=3, VALUE IN A, B AND VALU  *
0916*         *  NOTE: FOR MODES 2 AND 3 VALUES IN A AND *
0917*         *        B ARE ALSO IN VAL0 AND VAL1 RESP. *
0918*         ********************************************
0919  01675 000000  ASCNP NOP 
0920  01675         ASCN  EQU ASCNP 
0921  01676 072775R       STA SYMI      CHAR POS. IN SYMI 
0922  01677 063372R       LDA LMSK
0923  01700 010001        AND 1 
0924  01701 003004        CMA,INA 
0925  01702 072647R       STA DCNT      CHAR COUNT IN DCNT
0926  01703 060001        LDA 1 
0927  01704 001767        ALF,CLE,ALF   POSITION THE MODE 
0928  01705 013372R       AND LMSK
0929  01706 072750R       STA MODE      SET MODE IN MODE
0930  01707 001510        ERA,SLA       INTEGER CONVERSION? 
0931  01710 027714R       JMP ASCN2     NO - GO TO FLOATING PT ROUTINE
0932  01711 016411R       JSB INTEG     GO TO INTEGER CONVERSION
0933  01712 037675R XNORM ISZ ASCNP     SET UP FOR NORMAL RETURN
0934  01713 127675R       JMP ASCNP,I   EXIT
0935*         ***************************************** 
0936*         * FLOATING POINT PROCESSING STARTS HERE * 
0937*         ***************************************** 
0938  01714 002400  ASCN2 CLA 
0939  01715 072644R       STA VAL0      CLEAR NUMBER SLOTS
0940  01716 072646R       STA VAL1
0941  01717 072650R       STA VALU
0942  01720 073002R       STA DEXP      CLEAR DEC. OVERFLOW SLOT
0943  01721 003400        CCA 
0944  01722 072753R       STA DSIG      SET SIGN(-1) FIR +
0945  01723 073003R       STA CNVT      SET FLAG FOR SIGN IN 1ST POSN.
0946  01724 062723R       LDA BIT15 
0947  01725 073004R       STA DFCNT     SET DFCNT = 100000B 
0948  01726 016356R FDCN1 JSB CNVRT     CONVERT A CHARACTER 
0949  01727 027773R       JMP FDCN3     NON DIGIT RETURN
0950  01730 037004R       ISZ DFCNT     BUMP FRAC. COUNT
0951  01731 063002R       LDA DEXP
0952  01732 002002        SZA           OVERFLOW? 
0953  01733 027760R       JMP DCOV      YES 
0954  01734 062650R       LDA VALU      NO, PROCESS DIGIT 
0955  01735 072651R       STA VALUS 
0956  01736 062646R       LDA VAL1







 PAGE 0021 #01  *** DOS/RTE ASMB  FALL 1971 *** 


0957  01737 066644R       LDB VAL0
0958  01740 016445R       JSB SHFT1 
0959  01741 016445R       JSB SHFT1     NUM TIMES 4 AT THIS POINT 
0960  01742 006061        SEZ,SSB,RSS   OVERFLOW? 
0961  01743 002001        RSS           NO
0962  01744 027760R       JMP DCOV      YES 
0963  01745 066650R       LDB VALU
0964  01746 046651R       ADB VALUS 
0965  01747 016335R       JSB CHK       OVERFLOW FROM VALU? 
0966  01750 076651R       STB VALUS 
0967  01751 066645R       LDB VAL0S 
0968  01752 042646R       ADA VAL1
0969  01753 016341R       JSB CHKB      IF VAL1 OV, BUMP B
0970  01754 046644R       ADB VAL0      NUM TIMES 5 AT THIS POINT 
0971  01755 016445R       JSB SHFT1     NUM TIMES 10 HERE 
0972  01756 006061        SEZ,SSB,RSS   OVERFLOW? 
0973  01757 027762R       JMP *+3       NO
0974  01760 037002R DCOV  ISZ DEXP      YES, BUMP OVERFLOW DIGIT COUNT
0975  01761 026015R       JMP FDCN7 
0976  01762 066651R       LDB VALUS 
0977  01763 047003R       ADB CNVT      FINALLY ADD LATEST DIGIT TO NUM 
0978  01764 016335R       JSB CHK       IF OV, BUMP VAL1
0979  01765 076651R       STB VALUS 
0980  01766 066645R       LDB VAL0S 
0981  01767 016341R       JSB CHKB      IF VAL1 OV, BUMP VAL0 
0982  01770 006061        SEZ,SSB,RSS   OVERFLOW? 
0983  01771 026011R       JMP FDCN6     NO
0984  01772 027760R       JMP DCOV      YES 
0985  01773 052703R FDCN3 CPA L+6       DEC PNT? (NON DIG.FROM CNVRT) 
0986  01774 026003R       JMP FDCN5     YES 
0987  01775 052724R       CPA .E        'E'?
0988  01776 026001R       JMP *+3       YES 
0989  01777 062712R ILEX  LDA .IL       NO, GO GET 'IL' 
0990  02000 026464R       JMP OVEX+1    GO TO ERROR DIAG EXIT 
0991  02001 036647R       ISZ DCNT      LAST CHARACTER? 
0992  02002 026017R       JMP FDHOP     NO - GO TO PROCESS EXPONENT 
0993  02003 063004R FDCN5 LDA DFCNT 
0994  02004 002021        SSA,RSS       IS THIS A SECOND DEC.PNT? 
0995  02005 027777R       JMP ILEX      YES 
0996  02006 002400        CLA 
0997  02007 073004R       STA DFCNT     CLEAR COUNTER FOR DIGITS AFTER .
0998  02010 026015R       JMP FDCN7 
0999  02011 076644R FDCN6 STB VAL0      SAVE NEW VALUE IN VAL0,VAL1,VALU
1000  02012 072646R       STA VAL1
1001  02013 062651R       LDA VALUS 
1002  02014 072650R       STA VALU
1003  02015 036647R FDCN7 ISZ DCNT      LAST CHARACTER? 
1004  02016 027726R       JMP FDCN1     NO- GET NEXT CHAR.
1005*         ************************************* 
1006*         * PROCESS EXPONENT, IF PRESENT, AND * 
1007*         *  FINISH THE NUMBER(NORMALIZE, ETC)* 
1008*         ************************************* 
1009  02017 067004R FDHOP LDB DFCNT 
1010  02020 007025        CMB,SSB,INB,RSS   WAS A DEC POINT PRESENT?
1011  02021 006400        CLB          NO, CLEAR B
1012  02022 047002R       ADB DEXP







 PAGE 0022 #01  *** DOS/RTE ASMB  FALL 1971 *** 


1013  02023 077002R       STB DEXP     SET CURRENT COUNT FOR DEC EXPONEN
1014  02024 062753R       LDA DSIG
1015  02025 073004R       STA SDSIG     SAVE SIGN OF MANTISSA 
1016  02026 002400        CLA           NO - CONTINUE PROCESSING
1017  02027 067000R       LDB TEST
1018  02030 056724R       CPB .E        IS EXPONENT THERE?
1019  02031 016411R       JSB INTEG     YES - EVALUATE IT 
1020  02032 043002R       ADA DEXP      A+OVERFLOW CHARS
1021  02033 073002R       STA DEXP      SET VALUE OF DECIMAL EXPONENT 
1022  02034 062644R       LDA VAL0      CHECK FOR A VALUE OF ZERO 
1023  02035 032646R       IOR VAL1
1024  02036 032650R       IOR VALU
1025  02037 002003        SZA,RSS       IS THE VALUE=0? 
1026  02040 026243R       JMP UNDTF     YES, NORMAL EXIT FROM ASCN RTN. 
1027  02041 062470R       LDA .47 
1028  02042 072775R       STA FEXP      SET BINARY EXPONENT = 47
1029*         * NORMALIZE THE NUMBER(IN VAL0,VAL1,VALU)  *
1030  02043 066644R FDHP2 LDB VAL0
1031  02044 062646R       LDA VAL1
1032  02045 006020        SSB           IS BIT 15=0?
1033  02046 026062R       JMP FDHP3     NO- GO SHIFT THEM ALL BACK 1
1034  02047 066650R       LDB VALU
1035  02050 004066        CLE,ELB       SHIFT FROM VALU TO VAL1 
1036  02051 001600        ELA 
1037  02052 076650R       STB VALU
1038  02053 072646R       STA VAL1
1039  02054 066644R       LDB VAL0
1040  02055 005600        ELB           SHIFT FROM VAL1 TO VAL0 
1041  02056 076644R       STB VAL0
1042  02057 003400        CCA 
1043  02060 042775R       ADA FEXP
1044  02061 026042R       JMP FDHP2-1   FEXP-1 TO 'A' 
1045  02062 004065  FDHP3 CLE,ERB       SHIFT THEM ALL 1 RIGHT
1046  02063 001500        ERA 
1047  02064 076644R       STB VAL0
1048  02065 066650R       LDB VALU
1049  02066 005500        ERB 
1050  02067 072646R       STA VAL1
1051  02070 076650R       STB VALU
1052  02071 036775R       ISZ FEXP
1053  02072 000000        NOP 
1054* 
1055  02073 063002R       LDA DEXP
1056  02074 002103        CLE,SZA,RSS 
1057  02075 026175R       JMP FDHPX     DONE IF EXPONENT=0
1058  02076 002020        SSA           IS EXPONENT POSITIVE? 
1059  02077 026126R       JMP FDHP6     NO - GO TO DIVIDE BY 10 
1060  02100 042667R       ADA ..M1      YES - MULTIPLY NUMBER BY 10 HERE
1061  02101 073002R       STA DEXP      DEXP=DEXP-1 
1062  02102 062654R       LDA .1+2
1063  02103 042775R       ADA FEXP
1064  02104 072775R       STA FEXP      FEXP=FEXP+3 
1065  02105 062644R       LDA VAL0
1066  02106 072645R       STA VAL0S 
1067  02107 062650R       LDA VALU
1068  02110 072651R       STA VALUS 







 PAGE 0023 #01  *** DOS/RTE ASMB  FALL 1971 *** 


1069  02111 066646R       LDB VAL1
1070  02112 016345R       JSB SHFR1     SHIFT VAL0,VAL1,VALU -
1071  02113 016345R       JSB SHFR1         -RIGHT 2 PLACES 
1072  02114 042651R       ADA VALUS 
1073  02115 072650R       STA VALU      NEW VALU
1074  02116 016341R       JSB CHKB      IF OV, BUMP B REG.
1075  02117 062645R       LDA VAL0S 
1076  02120 046646R       ADB VAL1
1077  02121 016335R       JSB CHK       OVERFLOW? 
1078  02122 042644R FDHP5 ADA VAL0
1079  02123 072644R       STA VAL0      NEW VAL0
1080  02124 076646R       STB VAL1      NEW VAL1
1081  02125 026043R       JMP FDHP2     GO BACK TO RE-NORMALIZE 
1082*         * DIVIDE NUMBER IN VAL0,VAL1,VAL2 BY 10 * 
1083  02126 002004  FDHP6 INA 
1084  02127 073002R       STA DEXP      DEXP=DEXP+1 
1085  02130 062671R       LDA ..M1+2
1086  02131 042775R       ADA FEXP
1087  02132 072775R       STA FEXP      FEXP=FEXP-3 
1088*              * GO TO DIVIDE BY 10 HERE *
1089  02133 062466R       LDA UVAL
1090  02134 042671R FDHP7 ADA ..M1+2    -3
1091  02135 052467R       CPA VSTOP     LAST SECTION PROCESSED? 
1092  02136 026157R       JMP FDHP9     YES, LEAVE DIVIDE PROC NOW
1093  02137 073003R       STA CNVT      CONTAINS ADDR OF SECTION VEING D
1094*                   * DIVIDE 'A' BY 10
1095*                   * RESULT IN A AND B(=LEAST SIG.)
1096  02140 067624R       LDB .M16
1097  02141 076643R       STB TEMP
1098  02142 066472R       LDB TENTH 
1099  02143 002400        CLA 
1100  02144 004050        CLE,SLB       CHECK FOR ANOTHER ADD 
1101  02145 143003R       ADA CNVT,I
1102  02146 001500        ERA 
1103  02147 005500        ERB 
1104  02150 036643R       ISZ TEMP      ALL DONE? 
1105  02151 026144R       JMP *-5       NO - CONTINUE 
1106  02152 173003R       STA CNVT,I    SAVE 'A' VALUE
1107  02153 037003R       ISZ CNVT      BUMP ADDRESS
1108  02154 177003R       STB CNVT,I    SAVE 'B' VALUE
1109  02155 063003R       LDA CNVT      GET ADDRESS READY TO RESET
1110  02156 026134R       JMP FDHP7 
1111  02157 016311R FDHP9 JSB COL45     PROCESS COL. 5
1112  02160 016311R       JSB COL45     PROCESS COLUMN 4
1113  02161 046646R       ADB VAL1
1114  02162 016335R       JSB CHK 
1115  02163 046645R       ADB VAL0S 
1116  02164 016335R       JSB CHK 
1117  02165 016323R       JSB COL32     PROCESS COLUMN 3
1118  02166 046650R       ADB VALU
1119  02167 016335R       JSB CHK 
1120  02170 046647R       ADB VAL1S 
1121  02171 016335R       JSB CHK 
1122  02172 076650R       STB VALU      VALU COMPUTED 
1123  02173 016323R       JSB COL32     PROCESS COLUMN 2
1124  02174 026122R       JMP FDHP5     GO STORE VAL0 AND VAL1. CONTINUE







 PAGE 0024 #01  *** DOS/RTE ASMB  FALL 1971 *** 


1125*         ******************************
1126*         * SET UP FLTG DECIMAL RESULT *
1127*         *  FOR EXIT FROM CONVERSION  *
1128*         ******************************
1129  02175 062646R FDHPX LDA VAL1
1130  02176 066644R       LDB VAL0
1131  02177 016302R       JSB CHKM      IS MODE EXT.DEC?
1132  02200 026203R       JMP *+3       NO
1133  02201 062650R       LDA VALU
1134  02202 066646R       LDB VAL1
1135  02203 042473R       ADA .200B     ROUND THE LEAST SIGNIF. WORD
1136  02204 016341R       JSB CHKB      BUMP B IF E=1 
1137  02205 016302R       JSB CHKM      MODE=EXT.DEC? 
1138  02206 026212R       JMP *+4       NO
1139  02207 076646R       STB VAL1      YES 
1140  02210 066644R       LDB VAL0
1141  02211 016341R       JSB CHKB      BUMP VAL0 IF E=1
1142  02212 006021        SSB,RSS       VAL0<0? 
1143  02213 026217R       JMP *+4       NO
1144  02214 005340        RBR,CLE       IT WAS A POWER OF 2 
1145  02215 036775R       ISZ FEXP      BUMP EXPONENT 
1146  02216 000000        NOP 
1147  02217 076644R       STB VAL0      SAVE MOST SIF.
1148  02220 016302R       JSB CHKM      MODE = EXTEN.DEC? 
1149  02221 026223R       JMP *+2 
1150  02222 066646R       LDB VAL1      YES 
1151  02223 013371R       AND UMSK
1152  02224 072753R       STA DSIG      CLEAR LOW 8 BITS OF 'A' AND SAVE
1153  02225 037004R       ISZ SDSIG     IS SIGN OF MANTISSA=+ 
1154  02226 026255R       JMP FDHR4     NO, GO PROCESS NEG. MANTISSA
1155  02227 062775R FDHRT LDA FEXP      GET FRACTIONAL EXPONENT IN A/B
1156  02230 066775R       LDB FEXP
1157  02231 012471R       AND .1776     CLEAR LOWER 7 BITS
1158  02232 002002        SZA           POSITIVE OVERFLOW?
1159  02233 052471R       CPA .1776     MAYBE, NEG. OVERFLOW? 
1160  02234 056471R       CPB .1776     MAYBE, IS EXPON,=-200B? 
1161  02235 026250R       JMP FDHR3     YES, ALSO OTHER OVERFLOWS.. 
1162  02236 062775R       LDA FEXP      GET THE EXPONENET AGAIN 
1163  02237 001200        RAL           POSITION IT 
1164  02240 013372R       AND LMSK      CLEAR BITS 15-8 
1165  02241 042753R       ADA DSIG      ADD IN THE LEAST SIG.PART 
1166  02242 016302R       JSB CHKM      IS IT EXTEND.DEC? 
1167  02243 072646R UNDTF STA VAL1      NO,SET VAL1=LEAST 
1168  02244 072650R       STA VALU      YES, SET VALU=LEAST SIGN. 
1169  02245 066646R       LDB VAL1      GET WORD 2
1170  02246 062644R       LDA VAL0      GET MOST SIGNIF.
1171  02247 027712R       JMP XNORM     GO OUT THE NORMAL EXIT
1172  02250 006021  FDHR3 SSB,RSS       IS IT REALLY AN UNDERFLOW?
1173  02251 026463R       JMP OVEX      NO
1174  02252 002400        CLA           YES, SET NO. = ZERO 
1175  02253 072644R       STA VAL0      CLEAR VAL0
1176  02254 026243R       JMP UNDTF 
1177  02255 003004  FDHR4 CMA,INA       START GETTING COMPLEMENT
1178  02256 007000        CMB 
1179  02257 016341R       JSB CHKB
1180  02260 013371R       AND UMSK







 PAGE 0025 #01  *** DOS/RTE ASMB  FALL 1971 *** 


1181  02261 072753R       STA DSIG      SAVE LEAST SIGNIFICANT BITS 
1182  02262 016302R       JSB CHKM      IS IT EXTEND.DEC? 
1183  02263 026270R       JMP *+5       NO
1184  02264 076646R       STB VAL1
1185  02265 066644R       LDB VAL0
1186  02266 007000        CMB 
1187  02267 016341R       JSB CHKB
1188  02270 004066        CLE,ELB 
1189  02271 062667R       LDA ..M1
1190  02272 006021        SSB,RSS       WAS N0. A POWER OF 2? 
1191  02273 026277R       JMP *+4       NO
1192  02274 042775R       ADA FEXP      YES 
1193  02275 072775R       STA FEXP      SUBTRACT 1 FROM EXPONENT. 
1194  02276 002001        RSS 
1195  02277 005500        ERB           RESET B 
1196  02300 076644R       STB VAL0
1197  02301 026227R       JMP FDHRT 
1198*         ************************* 
1199*         * CHECK MODE OF NUMBER  * 
1200*         *  L+2 EXIT IF EXTENDED * 
1201*         *  ELSE L+1             * 
1202*         ************************* 
1203  02302 000000  CHKM  NOP 
1204  02303 077002R       STB DEXP      SAVE THE 'B' REG. 
1205  02304 066750R       LDB MODE
1206  02305 056654R       CPB .1+2      IS MODE EXTEND.DEC? 
1207  02306 036302R       ISZ CHKM      YES, BUMP RETURN ADDRESS
1208  02307 067002R       LDB DEXP      RESTORE THE 'B' REG.
1209  02310 126302R       JMP CHKM,I
1210*                   * PROCESS PARAMETERS FOR COLS. 4 AND 5 *
1211  02311 000000  COL45     NOP 
1212  02312 064000        LDB 0         LOAD 'B' WITH 'A' (OVERFLOW BITS
1213  02313 002500        CLA,CLE 
1214  02314 046650R       ADB VALU
1215  02315 016335R       JSB CHK 
1216  02316 046651R       ADB VALUS 
1217  02317 016335R       JSB CHK 
1218  02320 046647R       ADB VAL1S 
1219  02321 016335R       JSB CHK 
1220  02322 126311R       JMP COL45,I 
1221*                   * PROCESS PARAMETERS FOR COLS 2 AND 3 * 
1222  02323 000000  COL32 NOP 
1223  02324 064000        LDB 0         SET B=A(OVERFLOW FROM PREV COL.)
1224  02325 002500         CLA,CLE
1225  02326 046646R       ADB VAL1
1226  02327 016335R       JSB CHK 
1227  02330 046644R       ADB VAL0
1228  02331 016335R       JSB CHK 
1229  02332 046645R       ADB VAL0S 
1230  02333 016335R       JSB CHK 
1231  02334 126323R       JMP COL32,I 
1232*                   * CHECK FOR OVERFLOW FROM 'B' * 
1233  02335 000000  CHK   NOP 
1234  02336 002040        SEZ           OVERFLOW? 
1235  02337 002104        CLE,INA       YES, BUMP 'A', CLEAR 'E'
1236  02340 126335R       JMP CHK,I 







 PAGE 0026 #01  *** DOS/RTE ASMB  FALL 1971 *** 


1237*         * CHECK FOR OVERFLOW- IF TRUE, BUMP 'B' * 
1238  02341 000000  CHKB  NOP 
1239  02342 002040        SEZ 
1240  02343 006104        CLE,INB 
1241  02344 126341R       JMP CHKB,I
1242*         * SHIFT NUMBER IN VAL0,VAL1,VALU RIGHT U *
1243  02345 000000  SHFR1 NOP 
1244  02346 062644R       LDA VAL0
1245  02347 000065        CLE,ERA       VAL0 RIGHT 1
1246  02350 005500        ERB           VAL1 RIGHT 1
1247  02351 072644R       STA VAL0
1248  02352 062650R       LDA VALU
1249  02353 001540        ERA,CLE       VALU RIGHT 1
1250  02354 072650R       STA VALU
1251  02355 126345R       JMP SHFR1,I   RETURN
1252*              ********************************** 
1253*              * CNVRT - CONVERT AN ASCII CHAR. * 
1254*              *  TO BINARY.                    * 
1255*              * - MODE = 0,OCTAL; ELSE DECIMAL * 
1256*              * - L+1 RETURN IF NON-NUMBERIC   * 
1257*              ********************************** 
1258  02356 000000  CNVRT NOP 
1259  02357 062775R       LDA SYMI      GET POS'N.OF CHARACTER
1260  02360 017651R       JSB GETC      GET CHARACTER 
1261  02361 036775R       ISZ SYMI      BUMP POS'N
1262  02362 066750R       LDB MODE
1263  02363 006002        SZB           OCTAL CONVERSION? 
1264  02364 066670R       LDB ..M1+1    NO - SET FOR DEC.CONV 
1265  02365 046706R       ADB .M8       B=-8 HERE, IF OCTAL CONVERSION
1266  02366 043625R       ADA .M48      -60B + A
1267  02367 002020        SSA           IS VALUE LESS THAN ZERO?
1268  02370 026374R       JMP CNVR2     YES 
1269  02371 044000        ADB 0         NO - ADD IN MAX DIGIT VALUE.
1270  02372 006020        SSB           IS IT A VALID NUMBER? 
1271  02373 026406R       JMP CNVRX     YES- GO TO EXIT WITH NO. IN A.
1272  02374 063000R CNVR2 LDA TEST      NO - TEST FOR + OR -
1273  02375 052700R       CPA L+3       PLUS? 
1274  02376 026403R       JMP CNVR4     YES 
1275  02377 052702R       CPA L+5       NO - IS IT MINUS ?
1276  02400 002401        CLA,RSS       YES 
1277  02401 126356R       JMP CNVRT,I   NO - TAKE L+1 EXIT
1278  02402 072753R       STA DSIG
1279  02403 002400  CNVR4 CLA 
1280  02404 037003R       ISZ CNVT      HAS SIGN BEEN ENCOUNTERED BEFOR?
1281  02405 027777R       JMP ILEX      YES- 'IL' EXIT FROM ASCN
1282  02406 073003R CNVRX STA CNVT
1283  02407 036356R       ISZ CNVRT 
1284  02410 126356R       JMP CNVRT,I 
1285*              ************************************** 
1286*              * INTEG - CONVERT A STRING OF ASCII  * 
1287*              *         CHARS TO AN OCTAL(MODE=0)  * 
1288*              *         OR DECIMAL INTEGER.        * 
1289*              *-IF OTHER THAN A LEADING SIGN OR    * 
1290*              *  NUMBER IS FOUND 'IL' EXIT IS TAKEN *
1291*              *-'OV' EXIT IF OVERFLOW.             * 
1292*              ************************************** 







 PAGE 0027 #01  *** DOS/RTE ASMB  FALL 1971 *** 


1293  02411 000000  INTEG NOP 
1294  02412 007400        CCB 
1295  02413 076753R       STB DSIG      SET SIGN FLAG FOR PLUS
1296  02414 077003R       STB CNVT      SET 1ST CHAR FLAG(FOR SIGN CHK) 
1297*        *ON ENTRY A=0(USED FOR THE INITIAL VALUE.) *** 
1298  02415 072651R INTG2 STA VALUS     SAVE CURRENT VALUE
1299  02416 016356R       JSB CNVRT     CONVERT A CHARACTER 
1300  02417 027777R       JMP ILEX      ERROR - NON NUMERIC 
1301  02420 062651R       LDA VALUS 
1302  02421 000066        CLE,ELA 
1303  02422 016457R       JSB OVTST     TEST 4 TIMES A FOR OVERFLOW 
1304  02423 066750R       LDB MODE      NO OVERFLOW 
1305  02424 006002        SZB           MODE = OCTAL
1306  02425 042651R       ADA VALUS     NO - 5 TIMES A(IT'S DECIMAL)
1307  02426 016457R       JSB OVTST     TEST 8(OR 10) TIMES A FOR OV
1308  02427 043003R       ADA CNVT      NO - ADD IN NEW DIGIT 
1309  02430 002040        SEZ           OVERFLOW? 
1310  02431 026463R       JMP OVEX      YES 
1311  02432 036647R       ISZ DCNT      LAST CHAR IN STRING?
1312  02433 026415R       JMP INTG2     NO - GET ANOTHER
1313  02434 006003        SZB,RSS       MODE = OCTAL? 
1314  02435 026442R       JMP INTG6     YES - OK
1315  02436 052723R       CPA BIT15     IS NO. + OR - 32768?
1316  02437 026442R       JMP INTG6     YES - OK
1317  02440 002020        SSA           IS SIGN NEG?
1318  02441 026463R       JMP OVEX      YES - OVERFLOW
1319  02442 036753R INTG6 ISZ DSIG      IS SIGN NEGATIVE? 
1320  02443 003004        CMA,INA       YES - COMPLEMENT A. 
1321  02444 126411R       JMP INTEG,I   EXIT
1322*              ***************************
1323*              * SHIFT FOR MULTIPLY BY 2 *
1324*              ***************************
1325  02445 000000  SHFT1 NOP 
1326  02446 076645R       STB VAL0S     SAVE VAL0S
1327  02447 066651R       LDB VALUS     GET VALUS 
1328  02450 004066        CLE,ELB 
1329  02451 001600        ELA           SHIFT VAL1,VALUS
1330  02452 076651R       STB VALUS     SAVE VALUS
1331  02453 066645R       LDB VAL0S     GET VAL0S 
1332  02454 005600        ELB           SHIFT VAL0S,VAL1
1333  02455 076645R       STB VAL0S     SAVE VAL0S
1334  02456 126445R       JMP SHFT1,I   RETURN
1335*         ******************************************
1336*         * TEST ZERO BIT AND 'E' BIT FOR OVERFLOW *
1337*         ******************************************
1338  02457 000000  OVTST NOP 
1339  02460 001600        ELA           2 TIMES ENTRY VALUE OF 'A'
1340  02461 002051        SEZ,SLA,RSS   OVERFLOW? 
1341  02462 126457R       JMP OVTST,I   NO - RETURN 
1342  02463 062716R OVEX  LDA .OV       GET 'OV' FOR ERROR DIAGNOSTIC.
1343  02464 017145R       JSB ERPR
1344  02465 127675R       JMP ASCNP,I  LEAVE VIA RERROR EXIT
1345  02466 004653R UVAL  DEF VALU+3    ASCN 1ST PICKUP FOR DVD BY 10 
1346  02467 004642R VSTOP DEF VAL0S-3   ASCN LAST PICKUP FOR DIV BY 10
1347  02470 000057  .47   DEC 47
1348  02471 177600  .1776 OCT 177600     177600 







 PAGE 0028 #01  *** DOS/RTE ASMB  FALL 1971 *** 


1349  02472 146314  TENTH OCT 146314    146314
1350  02473 000200  .200B OCT 200       200B
1351  01372         LMSK  EQU LMASK 
1352  02474 002475R LMDG DEF *+1  (ASCN)
1353  02475 176030        DEC -1000,-100,-10
1354  02500 002501R LPDG  DEF *+1  (ASCN) 
1355  02501 001750        DEC 1000,100,10 
1356  02503         .10   EQU LPDG+3
1357*          ************************************** 
1358*          * BINARY TO ASCII CONVERSION ROUTINE * 
1359*          *  A = NUMBER TO BE CONVERTED        * 
1360*          *  E = 0  CONVERT TO OCTAL           * 
1361*          *  E = 1  CONVERT TO DECIMAL         * 
1362*          ************************************** 
1363  02504 030060        OCT 30060 
1364  02505 000000  BNCN  NOP 
1365  02506 067143R       LDB ICSA     GET LOC'N OF ACSI BUFFER 
1366  02507 076775R       STB SYMI
1367  02510 007400        CCB 
1368  02511 076651R       STB VALUS     START UPPER 
1369  02512 066504R       LDB BNCN-1    SET BUFFER=ASCII ZERO'S 
1370  02513 076374R       STB ASCI
1371  02514 076375R       STB ASCI+1
1372  02515 076376R       STB ASCI+2
1373  02516 002040        SEZ         TEST E BIT (=0,OCTAL  =1,DECIMAL) 
1374  02517 026552R       JMP % DEC CONVERSION
1375  02520 066674R       LDB ..M1+5  (-6)
1376  02521 076647R       STB DCNT
1377  02522 000066       OCT 66           CLE,ELA 
1378  02523 072650R      STA VALU 
1379  02524 002400       CLA
1380  02525 001600       ELA              SIGN BIT IS SIXTH DIGIT 
1381  02526 016536R      JSB DPCK 
1382  02527 062650R      LDA VALU 
1383  02530 001723       OCT 1723         ALF,RAR 
1384  02531 072650R      STA VALU 
1385  02532 012660R       AND ...1+6 (7) MASK 1 DIGIT 
1386  02533 036647R      ISZ DCNT         END 
1387  02534 026526R      JMP *-6
1388  02535 126505R       JMP BNCN,I    EXIT
1389  02536 000000  DPCK NOP
1390  02537 142775R       ADA SYMI,I
1391  02540 036651R       ISZ VALUS 
1392  02541 026545R      JMP *+4
1393  02542 001727       OCT 1727           ALF,ALF 
1394  02543 172775R       STA SYMI,I
1395  02544 126536R      JMP DPCK,I 
1396  02545 172775R       STA SYMI,I
1397  02546 036775R       ISZ SYMI
1398  02547 003400       CCA
1399  02550 072651R       STA VALUS 
1400  02551 126536R      JMP DPCK,I        EXIT 
1401  02552 066671R %     LDB ..M1+2 (-3) DEC. CONVERSION RTN 
1402  02553 076647R       STB DCNT
1403  02554 066474R      LDB LMDG 
1404  02555 076644R       STB VAL0







 PAGE 0029 #01  *** DOS/RTE ASMB  FALL 1971 *** 


1405  02556 066500R      LDB LPDG 
1406  02557 076646R       STB VAL1
1407  02560 064000        LDB 0    A TO B 
1408  02561 036775R       ISZ SYMI
1409  02562 002401  DPCR  CLA,RSS 
1410  02563 002004        INA  (FROM *+3) 
1411  02564 146644R       ADB VAL0,I  COUNT NO.OF TIMES GT 10**N
1412  02565 006021        SSB,RSS 
1413  02566 026563R       JMP *-3 
1414  02567 146646R       ADB VAL1,I  <10**N, RESTORE VALUE 
1415  02570 016536R      JSB DPCK            PACK DIGIT 
1416  02571 036646R       ISZ VAL1
1417  02572 036644R       ISZ VAL0
1418  02573 036647R      ISZ DCNT 
1419  02574 026562R      JMP DPCR              RETURN FOR 10**N-1 
1420  02575 060001        LDA 1 
1421  02576 016536R      JSB DPCK 
1422  02577 126505R       JMP BNCN,I    EXIT













































 PAGE 0030 #01  *** DOS/RTE ASMB  FALL 1971 *** 


1424*          *****************
1425*          * ORR PROCESSOR *
1426*          *****************
1427  02600 000000  ORRP  NOP 
1428  02601 062606R       LDA *+5  (OR$ PARAMETER)
1429  02602 016607R       JSB OR$    TO PRE-PROC
1430  02603 073274R       STA ORRSV  0 TO ORRSV 
1431  02604 063275R       LDA ORRS      GET THE SAVED MAIN PLCN 
1432  02605 072762R       STA PLCN  SET PLCN TO MAIN LOC CNT. 
1433  02606 126600R       JMP ORRP,I  EXIT(PICKED UP AT *-5)
1434* 
1435*           * ORG/ORR PRE-PROCESSOR * 
1436* 
1437  02607 000000  OR$   NOP 
1438  02610 072614R       STA *+4  SET EXEC.PARAMETER 
1439  02611 066762R       LDB PLCN
1440  02612 063274R       LDA ORRSV  GET ORRSV
1441  02613 002003        SZA,RSS  WERE WE IN MAIN PROG?
1442  02614 000000        NOP  YES, EXIT IF ORRP; SAVE LOC CNTR IF ORGP:
1443  02615 063276R       LDA ORGSV   LAST ADDR GENERATED DURING ORGP 
1444  02616 003004        CMA,INA 
1445  02617 040001        ADA 1    A REG _ LAST PLCN VALUE
1446  02620 002021        SSA,RSS    GREATER ?
1447  02621 077276R       STB ORGSV  NO! USE PLCN VALUE FOR HI ORG LOCN.
1448  02622 002400        CLA 
1449  02623 126607R       JMP OR$,I 
1450*          *****************
1451*          * ORG PROCESSOR *
1452*          *****************
1453  02624 077275R       STB ORRS    THIS IS A PARAMETER 
1454  02625 000000  ORGP  NOP 
1455  02626 062624R       LDA *-2  GET OR$ PARAM.(IN ORBP)
1456  02627 016607R       JSB OR$ 
1457  02630 003400        CCA 
1458  02631 073274R       STA ORRSV   SET ORRSV = -1
1459* 
1460*          * GO TO EVALUATE OPERAND * 
1461  02632 017605R       JSB CHOPI 
1462  02633 126625R       JMP ORGP,I ERROR EXIT 
1463  02634 076762R       STB PLCN
1464  02635 066353R       LDB AFLAG 
1465  02636 006003        SZB,RSS       SKIP OU IF ABSOLUTE ASSEMBLY
1466  02637 052652R       CPA ...1  RELOC?
1467  02640 126625R       JMP ORGP,I  YES,OK
1468  02641 017635R       JSB OPERR 'M' ERROR 
1469  02642 126625R       JMP ORGP,I  EXIT

















 PAGE 0031 #01  *** DOS/RTE ASMB  FALL 1971 *** 


1471*         ******************************* 
1472*         * LIST ROUTINE: PARAMETERS;   * 
1473*         *  IF A=0 OR 4, B=RELOC CODE  * 
1474*         *   A=0  FULL LINE            * 
1475*         *   A=1  NO INST OR LOCN      * 
1476*         *   A=2  NO INST              * 
1477*         *   A=3  COMMENT              * 
1478*         *   A=4  NO SEQ.NO., NO STATE.* 
1479*         *   A=5 PRINT 'ASMB' STATEMENT* 
1480*         ******************************* 
1481  02643 000064  LISTD DEC 52,-53
1482  02645 005013R LISTK DEF IOBF+6    INSTRUCTION LOC'N 
1483  02646 005010R       DEF IOBF+3    LOCATION LOC'N
1484  02647 005007R       DEF IOBF+2    LIST COMMENT LOC'N
1485  02650 000000  LIST  NOP 
1486  02651 076766R       STB SAVB  SAVE ASCII RELOC CODE 
1487  02652 072767R       STA SAVB+1 SAVE LIST PARAM. 
1488  02653 052656R       CPA ...1+4  CONTROL STATE.? 
1489  02654 026720R       JMP HI82      YES 
1490  02655 066347R       LDB LFLAG     GET LIST FLAG 
1491  02656 006003        SZB,RSS       PUNCH ONLY? 
1492  02657 126650R       JMP LIST,I    YES, EXIT 
1493  02660 066760R       LDB PASS
1494  02661 006003        SZB,RSS    PASS 1 
1495  02662 126650R       JMP LIST,I    YES, EXIT 
1496  02663 063271R       LDA LST 
1497  02664 002002        SZA      LIST FLAG=0 ?
1498  02665 126650R       JMP LIST,I    NO, EXIT
1499  02666 062503R       LDA LPDG+3  (10)
1500  02667 066761R       LDB FBOI
1501  02670 017671R       JSB SETM SET BUFFER TO
1502  02671 020040        ASC 1,   BLANKS 
1503  02672 062767R       LDA SAVB+1
1504  02673 052652R       CPA ...1  A=1?
1505  02674 026720R       JMP HI82  YES 
1506  02675 052653R       CPA ...1+1 A=2? 
1507  02676 026706R       JMP HI80  YES 
1508* 
1509*          * CONVERT INSTRUCTION *
1510  02677 066766R       LDB SAVB
1511  02700 077016R       STB IOBF+9 SET RELOC INDIC
1512  02701 062756R       LDA INST
1513  02702 000040        CLE     E=0 
1514  02703 016505R       JSB BNCN      CONVERT TO ASCII OCTAL
1515  02704 066645R       LDB LISTK     L(IOBF+6) 
1516  02705 017630R       JSB V   MOVE NO.TO BUFFER 
1517* 
1518*          * CONVERT LOCATION CNTR *
1519  02706 062762R HI80  LDA PLCN
1520  02707 000040        CLE     E=0 
1521  02710 016505R       JSB BNCN      CONVERT TO ASCII OCTAL
1522  02711 066646R       LDB LISTK+1   L(IOBF+3) 
1523  02712 062656R       LDA ...1+4 (5)
1524  02713 017434R       JSB MOVE
1525  02714 000000  LISTL NOP           -ASCI GOES IN HERE
1526  02715 062767R       LDA SAVB+1







 PAGE 0032 #01  *** DOS/RTE ASMB  FALL 1971 *** 


1527  02716 052655R       CPA ...1+3 A=4? 
1528  02717 026755R       JMP HX8   YES 
1529* 
1530*          * CONVERT SEQ.NO. *
1531  02720 063302R HI82  LDA SEQN
1532  02721 002300        CCE     E=1 
1533  02722 016505R       JSB BNCN      CONVERT IT TO ASCII DECIMAL 
1534  02723 062375R       LDA ASCI+1
1535  02724 073005R       STA IOBF
1536  02725 062376R       LDA ASCI+2
1537  02726 073006R       STA IOBF+1
1538* 
1539*          * SET UP BUFFER LENGTH, ADJUST IF >72 CHARS *
1540  02727 066767R       LDB SAVB+1
1541  02730 056656R       CPB ...1+4  CONTROL STATE.? 
1542  02731 072400R       STA ASCI+4    SET TAPE # =1 
1543  02732 062770R       LDA SCN1 STATE.LENGTH 
1544  02733 056654R       CPB ...1+2  REMARK? 
1545  02734 026747R       JMP HI19   YES
1546  02735 070001  HI17  STA 1    LENGTH TO B
1547  02736 042644R       ADA LISTD+1   -53 
1548  02737 002021        SSA,RSS   LENGTH>52 ? 
1549  02740 066643R       LDB LISTD     YES, SET B=52 
1550  02741 046655R       ADB ...1+3  ADD 4 
1551  02742 074000        STB 0    NEW LENGTH TO A
1552  02743 042665R HI18  ADA .12+4 LENGTH+16 
1553  02744 066761R       LDB FBOI
1554  02745 017030R       JSB PRNT   *PRINT THE LINE OF OUTPUT *
1555  02746 126650R       JMP LIST,I    EXIT
1556* 
1557*         * SET UP FOR LIST COMMENT * 
1558  02747 066647R HI19  LDB LISTK+2   L(IOBF+2) 
1559  02750 017434R       JSB MOVE
1560  02751 005017R       DEF BUFF
1561  02752 062770R       LDA SCN1
1562  02753 043624R       ADA .M16      LENGTH-16 
1563  02754 026735R       JMP HI17
1564* 
1565*         * TEST FOR EXTENDED SUP * 
1566  02755 067300R HX8   LDB SUP 
1567  02756 006002        SZB      SUP=0? 
1568  02757 126650R       JMP LIST,I    NO, EXIT
1569  02760 026743R       JMP HI18
1570  02761 005005R FBOI DEF IOBF 



















 PAGE 0033 #01  *** DOS/RTE ASMB  FALL 1971 *** 


1572*             ******************
1573*             * SKIP 'A' LINES *
1574*             ******************
1575  02762 000000  LINS NOP
1576  02763 072753R       STA DSIG  SET LINES TO SKIP INTO CNTR.
1577  02764 016015X       JSB EXEC      SKIP LINES
1578  02765 002771R       DEF *+4 
1579  02766 004654R       DEF .1+2     'CONTROL' REQ CODE 
1580  02767 004365R       DEF PRSPC 
1581  02770 004753R       DEF DSIG      LINE COUNT
1582  02771 126762R      JMP LINS,I YES.
1583*             ******************************* 
1584*             * FIND NUM.OF CHARS IN A TERM * 
1585*             ******************************* 
1586  02772 000000  MSYM NOP
1587  02773 076766R      STB SAVB 
1588  02774 076764R      STB PNTR 
1589  02775 002400       CLA  START CNTR
1590  02776 072753R       STA DSIG  ZERO TO CNTR
1591  02777 073000R      STA TEST 
1592  03000 072757R HI42 STA LAST   LAST
1593  03001 062766R      LDA SAVB 
1594  03002 017651R      JSB GETC 
1595  03003 052677R       CPA L+2   * ? 
1596  03004 027021R       JMP HI43  YES 
1597  03005 052711R       CPA BLNK  END OF SYMBOL?
1598  03006 027015R       JMP *+7   -YES- 
1599  03007 043364R       ADA .M46      -46 = -56B
1600  03010 002021       OCT 2021  SSA,R
1601  03011 027024R      JMP HI44 
1602  03012 042660R       ADA ...1+6 (7)
1603  03013 002020        SSA       TERMINATOR? 
1604  03014 027024R       JMP HI44  NO
1605*             *  SET UP FOR EXIT  * 
1606  03015 062764R      LDA PNTR 
1607  03016 017641R      JSB GETA 
1608  03017 062753R       LDA DSIG  NO.OF SYMBOLS TO A
1609  03020 126772R      JMP MSYM,I EXIT
1610  03021 062753R HI43  LDA DSIG
1611  03022 052652R       CPA ...1 IS '*' ALONE?
1612  03023 017635R       JSB OPERR  NO, ERROR
1613  03024 036753R HI44 ISZ DSIG  BUMP CNTR. 
1614  03025 036766R      ISZ SAVB 
1615  03026 063000R      LDA TEST 
1616  03027 027000R      JMP HI42 
1617*        ******************************** 
1618*        * PRINT OUTPUT AND COUNT LINES * 
1619*        ******************************** 
1620  03030 000000  PRNT NOP
1621  03031 003004        CMA,INA       SET CHAR COUNT NEG. FOR I/O 
1622  03032 072766R       STA SAVB      SAVE THE CHARACTER COUNT
1623  03033 077102R       STB PRLOC     GIVE THE BUFFER ORIGIN
1624  03034 037105R      ISZ LINC END OF
1625  03035 027076R       JMP I  PAGE? - NO 
1626  03036 003400        CCA           SET A=-1
1627  03037 066360R       LDB PLINE 







 PAGE 0034 #01  *** DOS/RTE ASMB  FALL 1971 *** 


1628  03040 077105R       STB LINC      RESET THE LINE COUNTER
1629  03041 057107R       CPB PCOMP     LIST ON TELETYPE? 
1630  03042 003004        CMA,INA       YES, LINE SPACE(CARR RETURN)
1631  03043 016762R       JSB LINS      SKIP LINE OR GO TO TOP OF FORM
1632  03044 062657R       LDA .1+5      A=6 
1633  03045 066360R       LDB PLINE 
1634  03046 057107R       CPB PCOMP     LIST ON TELETYPE? 
1635  03047 016762R       JSB LINS      YES, SKIP 6 LINES 
1636  03050 037106R       ISZ LINC+1  BUMP PAGE NO. 
1637  03051 002300        CCE     FOR DECIMAL NO. 
1638  03052 063106R       LDA LINC+1  CONV. PAGE NO.
1639  03053 016505R       JSB BNCN      CONVERT TO ASCII OCTAL
1640* 
1641*             * SET UP PAGE HEADER *
1642  03054 062727R       LDA RC  'E' 
1643  03055 072374R       STA ASCI
1644  03056 062503R       LDA LPDG+3  OUTPUT 10 CHARS.
1645  03057 066760R       LDB PASS
1646  03060 006003        SZB,RSS       LIST PASS?
1647  03061 027064R       JMP *+3     NO
1648  03062 042655R       ADA ...1+3  (4) SET UP FOR HEADER 
1649  03063 043142R       ADA HED 
1650  03064 003004        CMA,INA 
1651  03065 072753R       STA DSIG      SET CHAR COUNT
1652  03066 016015X       JSB EXEC      GO TO PRINT THE HEADER
1653  03067 003074R       DEF *+5 
1654  03070 004653R       DEF .1+1
1655  03071 004364R       DEF LUNPR 
1656  03072 004372R       DEF HEADP     HEADER LOC'N
1657  03073 004753R       DEF DSIG      COUNT 
1658  03074 062653R       LDA .1+1      TO SKIP 2 LINES 
1659  03075 016762R      JSB LINS    2. 
1660  03076 016015X I     JSB EXEC      GO OUTPUT A LINE
1661  03077 003104R       DEF *+5 
1662  03100 004653R       DEF .1+1
1663  03101 004364R       DEF LUNPR 
1664  03102 000000  PRLOC NOP           BUFFER ORIGIN 
1665  03103 004766R       DEF SAVB      CHARACTER COUNT 
1666  03104 127030R      JMP PRNT,I  PRINT EXIT 
1667  03105 177777  LINC  OCT -1,0      LINE CNTR/PAGE CNTR 
1668  03107 000000  PCOMP NOP           =0 IF PRINTER,  =-56 IF TTY 






















 PAGE 0035 #01  *** DOS/RTE ASMB  FALL 1971 *** 


1670*        *******************
1671*        * SET UP A HEADER *
1672*        ******************** 
1673  03110 000000  HEDSB NOP 
1674  03111 062772R       LDA SCN1+2
1675  03112 002003        SZA,RSS    HEADER PRESENT?
1676  03113 027135R       JMP HXD      NO-RETURN
1677  03114 042667R       ADA ..M1
1678  03115 003004        CMA,INA 
1679  03116 042770R       ADA SCN1
1680  03117 073142R       STA HED   HEADER LENGTH IN 'HED'
1681  03120 067137R       LDB .56 
1682  03121 043140R       ADA .M57     -57
1683  03122 002021        SSA,RSS      IS HEADER TOO LONG (MORE THAN 56 
1684  03123 077142R       STB HED      SET HEADER LENGTH TO 56
1685  03124 062772R       LDA SCN1+2
1686  03125 017641R       JSB GETA  GET ADDRESS OF HEADER 
1687  03126 063142R       LDA HED 
1688  03127 077132R       STB *+3 
1689  03130 067141R       LDB HXD. GET L(HEDR+9)
1690  03131 017434R       JSB MOVE
1691  03132 000000        NOP   ADDR OF HEADER
1692  03133 063142R       LDA HED 
1693  03134 042653R       ADA ...1+1
1694  03135 073142R HXD   STA HED 
1695  03136 127110R       JMP HEDSB,I 
1696  03137 000070  .56   DEC 56
1697  03140 177707  .M57  DEC -57 
1698  03141 004402R HXD.  DEF HXBUF     LOCATION OF HEADER
1699  03142 000000  HED   NOP    HEADER FLAG(LENGTH)
1700  03143 004374R ICSA  DEF ASCI     LOC'N OF ASCI BUFFER 
1701*             **************************
1702*             * PRINT ERROR DIAGNOSTIC *
1703*             **************************
1704  03144 005012R       DEF IOBF+5
1705  03145 000000  ERPR NOP
1706  03146 037273R       ISZ ERRCN  BUMP ERROR COUNTER 
1707  03147 067115R      LDB BLNS 
1708  03150 073012R       STA IOBF+5   ERROR DIAG.
1709  03151 077013R       STB IOBF+6   BLANKS 
1710  03152 077016R       STB IOBF+9    BLANK OUT RELOC INDIC.
1711  03153 063302R       LDA SEQN
1712  03154 002300        CCE 
1713  03155 016505R       JSB BNCN      CONVERT TO ASCII OCTAL
1714  03156 062375R       LDA ASCI+1  FOR USE IN
1715  03157 073014R       STA IOBF+7     THE
1716  03160 062376R       LDA ASCI+2       DIAGNOSTIC 
1717  03161 073015R       STA IOBF+8
1718  03162 017172R       JSB PRPAG     GO PRINT PREVIOUS PAGE NO.
1719  03163 062770R       LDA SCN1  GET STATEMENT LENGTH
1720  03164 042503R       ADA LPDG+3  (+10) 
1721  03165 067144R       LDB ERPR-1    GET STATE,ORIGIN (IOBF+5) 
1722  03166 017030R      JSB PRNT  PRINT
1723  03167 063106R       LDA LINC+1
1724  03170 073277R       STA PRERR     SET PREV. PAGE = CURRENT PAGE 
1725  03171 127145R      JMP ERPR,I EXIT







 PAGE 0036 #01  *** DOS/RTE ASMB  FALL 1971 *** 


1726*            *PRINT PREVIOUS PAGE CONTAINING ERROR ** 
1727  03172 000000  PRPAG NOP           USED IN 'ERPR' AND 'ENDSB'
1728  03173 002404        CLA,INA       SET UP TO EMIT A BLANK LINE 
1729  03174 067370R       LDB HEDR
1730  03175 017030R       JSB PRNT      GO TO PROINT ROUTINE
1731  03176 063105R       LDA LINC      GET CURRENT LINE VALUE
1732  03177 052667R       CPA ..M1      IS IT SET FOR A PAGE EJECT? 
1733  03200 027173R       JMP *-5       YES, GO OUTPUT ANOTHER BLANK LIN
1734  03201 066760R       LDB PASS
1735  03202 063373R       LDA TAPE      GET SOURCE TAPE NO. 
1736  03203 006002        SZB           FIRST PASS? 
1737  03204 063277R       LDA PRERR     GET PREVIOUS PAGE(=0 IF 1ST ERR)
1738  03205 002300        CCE 
1739  03206 016505R       JSB BNCN      CONVERT PAGE TO DECIMAL 
1740  03207 062377R       LDA .TNO      GET ' #'
1741  03210 066760R       LDB PASS
1742  03211 006002        SZB           FIRST PASS? 
1743  03212 063223R       LDA .PG       GET "PG" FOR PAGE POINTER 
1744  03213 072374R       STA ASCI      SET IN '**' 
1745  03214 062375R       LDA ASCI+1
1746  03215 013224R       AND .2077     MAKE 1ST DIGIT BLANK
1747  03216 072375R       STA ASCI+1
1748  03217 062657R       LDA .1+5      GET PARAM FOR 6 CHARS 
1749  03220 067143R       LDB ICSA      BUFFER ORG
1750  03221 017030R       JSB PRNT      GO PRINT "**PAGE" 
1751  03222 127172R       JMP PRPAG,I   EXIT
1752  03223 050107  .PG   ASC 1,PG
1753  03224 020077  .2077 OCT 20077 
1754*             **************************************
1755*             * PRINT ERROR COUNT AT END OF A PASS *
1756*             *  SPACE TO BOTTOM OF PAGE           *
1757*             *  INIT.LINE,ERROR AND SEQUENCE CNTRS*
1758*             *  SET CONTROL STATEMENT FLAG = -1   *
1759*             **************************************
1760  03225 000000  ENDSB NOP 
1761  03226 063273R       LDA ERRCN    ANY ERRORS?
1762  03227 002003        SZA,RSS 
1763  03230 027242R       JMP ENDSR     NO ERRORS.. 
1764  03231 066760R       LDB PASS
1765  03232 006002        SZB           FIRST PASS? 
1766  03233 017172R       JSB PRPAG     NO, PUT OUT THE PAGE POINTER
1767  03234 063273R       LDA ERRCN     GET THE TOTAL ERROR COUNT 
1768  03235 002300        CCE 
1769  03236 016505R       JSB BNCN      CONVERT TO ASCII OCTAL
1770  03237 062375R       LDA ASCI+1
1771  03240 066376R       LDB ASCI+2
1772  03241 027244R       JMP *+3 
1773  03242 063115R ENDSR LDA BLNS
1774*                  * 'NO'ERROR SETUP *
1775  03243 066714R       LDB .NO       FOR 'NO' ERRORS 
1776  03244 073260R     STA PAU+1 
1777  03245 077261R     STB PAU+2 
1778  03246 062663R       LDA .12+2   (14) NO OF CHARS IN MESSG.
1779  03247 067256R       LDB PAU-1        BUFF ADDR
1780  03250 017030R       JSB PRNT    PRINT DIAG. 
1781  03251 017304R       JSB OKOLE 







 PAGE 0037 #01  *** DOS/RTE ASMB  FALL 1971 *** 


1782  03252 073366R       STA ASM1  SET CONT.STATE.FLG
1783  03253 002404        CLA,INA       SET A=1 
1784  03254 073373R       STA TAPE      SET TAPE COUNTER = 1
1785  03255 127225R       JMP ENDSB,I   EXIT END SUBROUTINE 
1786  03256 003257R       DEF PAU   LOC OF PASSOVER STATE.
1787  03257 025052  PAU   ASC 7,**0000 ERRORS*
1788  03266 003267R ?PERL DEF REP 
1789  03267 000000  REP   NOP    REPEAT COUNTER 
1790  03270 000000  REQ   NOP    FLAG FOR 1ST STATE AFTER REP 
1791  03271 000000  LST   NOP    LST/UNL FLAG 
1792  03272 000000  LTFLG NOP   LITERAL FLAG(0=NO LIT.) 
1793  03273 000000  ERRCN NOP    ERROR COUNTER
1794  03274 000000  ORRSV NOP           =0 IN REG. PROG;=-1 IN ORG SECTN
1795  03275 000000  ORRS  NOP           SAVE LAST PLCN VAL FOR ORR SET
1796  03276 000000  ORGSV NOP           HIGHEST PLCN VAL IN AN ORG SECTN
1797  03277 000000  PRERR NOP           PREV. PAGE # CONTAINING ERROR.
1798  03300 000000  SUP   NOP    SUP/UNS FLAG 
1799  03301 000000  IFUSE NOP      =1, SKIP ASSMBL.; =-1, IN 'IF' RANGE 
1800  03302 000000  SEQN  NOP           SEQUENCE COUNTER
1801  03303 000014  ?LPER ABS *-REP     LENGHT OF AREA TO BE CLEARED
1802*           *********************************** 
1803*           * SPACE TO BOTTOM OF CURRENT PAGE * 
1804*           * (USED BY HED AND PROC.ABOVE)    * 
1805*           *********************************** 
1806  03304 000000  OKOLE NOP 
1807  03305 006400        CLB           SET B=0 
1808  03306 063105R       LDA LINC  LINE COUNT -
1809  03307 002006        INA,SZA     =-1 ? 
1810  03310 066360R       LDB PLINE     NO, SET B=STAN.LINE COUNT 
1811  03311 057107R       CPB PCOMP     TTY OUT?(IF COUNT=-1, WON'T COMP
1812  03312 016762R       JSB LINS  NO-GO TO PAGER
1813  03313 003400        CCA 
1814  03314 073105R       STA LINC  SET LINC = -1 
1815  03315 127304R       JMP OKOLE,I   EXIT
1816* 
1817*             * PICK UP NEXT CHAR, ADD 1 TO PNTR *
1818  03316 000000  PKUP NOP
1819  03317 062764R      LDA PNTR 
1820  03320 017651R      JSB GETC 
1821  03321 036764R      ISZ PNTR 
1822  03322 127316R      JMP PKUP,I 
1823* 
1824*             * SEARCH FOR NON-BLANK CHAR, SET PNTR AT IT * 
1825  03323 000000  BPKUP NOP 
1826  03324 017316R       JSB PKUP
1827  03325 052711R       CPA BLNK  BLANK?
1828  03326 027324R       JMP *-2  YES - GET NEXT CHAR. 
1829  03327 066764R       LDB PNTR NO  - SET PNTR TO LAST NON-BLANK 
1830  03330 046667R       ADB ..M1
1831  03331 076764R       STB PNTR
1832  03332 127323R       JMP BPKUP,I 
1833*             ***************************** 
1834*             * PUNCH AND SET UP FOR LIST * 
1835*             ***************************** 
1836  03333 000000  LOUT  NOP 
1837  03334 002400        CLA      0 TO A 







 PAGE 0038 #01  *** DOS/RTE ASMB  FALL 1971 *** 


1838  03335 006404        CLB,INB  1 TO B 
1839  03336 056760R       CPB PASS      SKIP PUNCH IF IN PASS 1 
1840  03337 016005X       JSB ?BREC 
1841  03340 002400        CLA      0 TO A 
1842  03341 067115R       LDB BLNS  BLANKS TO B 
1843  03342 127333R       JMP LOUT,I    EXIT

























































 PAGE 0039 #01  *** DOS/RTE ASMB  FALL 1971 *** 


1845*             ****************************
1846*             * PROCESS ARITHMETIC MACRO *
1847*             ****************************
1848  03343 004647R       DEF TEMP+4
1849  03344 017467R HA38  JSB ARTLT    GO TO LITERAL PROCESSOR
1850  03345 062703R       LDA L+6      (PERIOD) 
1851  03346 072647R       STA TEMP+4
1852  03347 067343R       LDB HA38-1    =L(TEMP+4) LOWER
1853  03350 007004        CMB,INB 
1854  03351 076777R       STB SYMP+1 LOC.OF SYMBOL
1855  03352 062655R       LDA ...1+3 (4) EXT RELOC CODE 
1856  03353 072776R       STA SYMP  NO.OF CHARS.
1857  03354 066760R       LDB PASS
1858  03355 006002        SZB 
1859  03356 026006X       JMP ?ART      GO TO ARITH('ART') ROUTINE
1860  03357 067365R      LDB CNTR   EXT.NUMBER
1861  03360 016013X       JSB ?INSR     INSERT INTO SYMBOL TABLE
1862  03361 002001       RSS       ERROR- SKIP NEXT 
1863  03362 037365R      ISZ CNTR  BUMP EXT CNTR
1864  03363 062653R       LDA .1+1     2
1865  03364 026001X       JMP ?HA3Z 
1866  03365 000001  CNTR  OCT 1         EXT COUNTER,FOR PASS 1. 
1867*          ************************** 
1868*          * MEASURE LITERAL LENGTH * 
1869*          ************************** 
1870  03366 000000  MSYML NOP 
1871  03367 062772R       LDA SCN1+2   GET OPERAND POSITION 
1872  03370 072766R       STA SAVB

1874*         *  SET UP AND TEST NEXR CHARACTER 
1875  03371 036766R       ISZ SAVB     SAVB = OPDRND POS'N+1
1876  03372 062766R       LDA SAVB     GET  CURRENT POSITION
1877  03373 017651R       JSB GETC     GET THE CHATACTER
1878  03374 052711R       CPA BLNK     IS IT A SPACE? 
1879  03375 002001        RSS          YES,  END OF LITERAL 
1880  03376 027371R       JMP *-5      NO, GO EXAMEINE THE NEXT CHARACT.
1881  03377 066772R       LDB SCN1+2   GET STARTING POSITION
1882  03400 007004        CMB,INB      COMPLEMENT IT. 
1883  03401 046766R       ADB SAVB     RESULTS IN THE LITERAL LENGTH
1884  03402 127366R       JMP MSYML,I   EXIT
1885*         ********************
1886*         * PROCESS LITERALS *
1887*         ********************
1888  03403 000000  PLITS NOP 
1889  03404 063272R       LDA LTFLG  LITERAL FLAG 
1890  03405 053465R       CPA .F   =F ? 
1891  03406 027421R       JMP PER 
1892  03407 053463R       CPA .A   =A ? 
1893  03410 027453R       JMP P.A 
1894  03411 053466R       CPA .L        =L? 
1895  03412 027443R       JMP P.L 
1896  03413 017366R       JSB MSYML =B OR D  GET SYMB LNG.
1897  03414 063272R       LDA LTFLG 
1898  03415 052725R       CPA .B        =B? 
1899  03416 027424R       JMP *+6 YES 
1900  03417 053464R       CPA .D   =D?







 PAGE 0040 #01  *** DOS/RTE ASMB  FALL 1971 *** 


1901  03420 027423R       JMP *+3 YES 
1902  03421 017635R PER   JSB OPERR  'M' ERROR
1903  03422 127403R       JMP PLITS,I  EXIT 
1904  03423 047623R       ADB .400B 
1905  03424 062772R       LDA SCN1+2
1906  03425 017675R       JSB ASCN    CONVERT TO BINARY 
1907  03426 127403R       JMP PLITS,I ERROR RETURN
1908  03427 072374R P.1   STA ASCI
1909  03430 062653R       LDA ...1+1
1910  03431 072776R       STA SYMP
1911  03432 062760R       LDA PASS
1912  03433 002002        SZA    PASS 1 ? 
1913  03434 027440R       JMP *+4  NO 
1914  03435 016002X       JSB ?LITI     YES, INSERT LIT.INTO SYMBOL TABL
1915  03436 127403R       JMP PLITS,I ERROR RETURN
1916  03437 002001        RSS 
1917  03440 016007X       JSB ?LKLI     LOOKUP LITERAL IN SYMBOL TABLE
1918  03441 037403R       ISZ PLITS 
1919  03442 127403R       JMP PLITS,I  NORMAL RETURN
1920  03443 002400  P.L   CLA         EXPRESSION PROCESSOR
1921  03444 073272R       STA LTFLG 
1922  03445 017605R       JSB CHOPI  EVALUATE OPERAND 
1923  03446 127403R       JMP PLITS,I ERROR EXIT
1924  03447 002002        SZA     ABSOL.VALUE?
1925  03450 027421R       JMP PER  NO-ERROR 
1926  03451 060001        LDA 1    VALUE TO A REG 
1927  03452 027427R       JMP P.1 
1928  03453 062772R P.A   LDA SCN1+2
1929  03454 017641R       JSB GETA
1930  03455 077461R       STB *+4  ADDR OF OPERAND
1931  03456 062653R       LDA ...1+1 2 CHARS
1932  03457 067143R       LDB ICSA     GET LOC'N OF ACSI BUFFER 
1933  03460 017434R       JSB MOVE
1934  03461 000000        NOP    OPERAND ADDR.
1935  03462 027430R       JMP P.1+1 
1936  03463 000101  .A    OCT 101       ASCII 'A' 
1937  03464 000104  .D    OCT 104    D
1938  03465 000106  .F    OCT 106    F
1939  03466 000114  .L    OCT 114 
























 PAGE 0041 #01  *** DOS/RTE ASMB  FALL 1971 *** 


1941*          *************************
1942*          * ARITH MACRO PROCESSOR *
1943*          *************************
1944  03467 000000  ARTLT NOP 
1945  03470 063272R       LDA LTFLG    GET LITERAL FLATG
1946  03471 002003        SZA,RSS  LITERAL PRESENT? 
1947  03472 127467R       JMP ARTLT,I   NO LITERAL, EXIT
1948  03473 066651R       LDB TEMP+6
1949  03474 077554R       STB ARTSV+1 
1950  03475 066650R       LDB TEMP+5 1ST 2 OPCODE CHARS FOR TEST
1951  03476 077553R       STB ARTSV 
1952  03477 057550R       CPB .MP   MPY?
1953  03500 027535R       JMP LTAR    YES 
1954  03501 057551R       CPB .DI  DIV? 
1955  03502 027535R       JMP LTAR   YES
1956  03503 057552R       CPB .DS   DST?
1957  03504 027507R       JMP *+3   YES, ERROR
1958  03505 053465R       CPA .F   =F?  FLTG PT LIT PROC
1959  03506 027513R       JMP LERR+3
1960  03507 017635R       JSB OPERR NO,'M'ERROR 
1961  03510 006400  LERR  CLB        B=0
1962  03511 002404        CLA,INA    A=1
1963  03512 027537R       JMP LTAR+2
1964  03513 017366R       JSB MSYML PROC.LIT.LNG. 
1965  03514 046722R       ADB .1000     2 TO 'B' UPPER
1966  03515 062772R       LDA SCN1+2  OPERND PNTR 
1967  03516 017675R       JSB ASCN   CONVRT ASCII TO FLTG.PT. 
1968  03517 027510R       JMP LERR  ERROR RETURN
1969  03520 072374R       STA ASCI
1970  03521 076375R       STB ASCI+1
1971  03522 062655R       LDA ...1+3 (4)
1972  03523 072776R       STA SYMP  SET SYMK/INSR PARAMS. 
1973  03524 062760R       LDA PASS
1974  03525 002003        SZA,RSS  PASS 1 
1975  03526 027531R       JMP *+3  YES
1976  03527 016007X       JSB ?LKLI     NO, LOOKUP LIT. IN SYMBL TABLE
1977  03530 027537R       JMP LTAR+2  EXIT
1978  03531 016002X       JSB ?LITI     INSERT LITERAL INTO SYMBOL TABLE
1979  03532 027541R       JMP LTARZ  ERROR EXIT(OK) 
1980  03533 036763R       ISZ PLEN
1981  03534 027541R       JMP LTARZ 
1982  03535 017403R LTAR  JSB PLITS 
1983  03536 027510R       JMP LERR  ERROR RETURN
1984  03537 073555R       STA LTSVA  SAVE A 
1985  03540 077556R       STB LTSVB  SAVE B 
1986  03541 002404  LTARZ CLA,INA 
1987  03542 073272R       STA LTFLG  SET LTFLG=1 FOR LIT.IN ARITH MACRO.
1988  03543 063553R       LDA ARTSV   SET OPCODE CHARS BACK 
1989  03544 072650R       STA TEMP+5    FOR FURTHER PROCESSING
1990  03545 063554R       LDA ARTSV+1 
1991  03546 072651R       STA TEMP+6
1992  03547 127467R       JMP ARTLT,I   EXIT FROM LIT. PROC. HERE 

1994  03550 046520  .MP   ASC 1,MP
1995  03551 042111  .DI   ASC 1,DI
1996  03552 042123  .DS   ASC 1,DS







 PAGE 0042 #01  *** DOS/RTE ASMB  FALL 1971 *** 


1997  03553 000000  ARTSV OCT 0,0 
1998  03555 000000  LTSVA NOP      FOR ART USE
1999  03556 000000  LTSVB NOP 
2000*        ******************** 
2001*        * SETUP FOR REPEAT * 
2002*        ******************** 
2003  03557 000000  REPSB NOP 
2004  03560 063267R       LDA REP 
2005  03561 002002        SZA      IN 'REP' RANGE?
2006  03562 027577R       JMP RXP  YES, ERROR 
2007  03563 017605R       JSB CHOPI  EVAL NO.OF REP'S 
2008  03564 027601R       JMP RXP+2  ERROR EXIT 
2009  03565 002002        SZA    VAL RELOC? 
2010  03566 027603R       JMP RXR  YES, ERROR 
2011  03567 006003        SZB,RSS  VAL=0? 
2012  03570 027601R       JMP RXP+2 YES 
2013  03571 006004        INB 
2014  03572 007004        CMB,INB  NO   -B TO B 
2015  03573 062670R       LDA ..M1+1
2016  03574 073270R       STA REQ   SET REQ=-2(FOR SEQNO PROC)
2017  03575 077267R RXX   STB REP       B TO REP (NO.OF REPEATS)
2018  03576 127557R       JMP REPSB,I 
2019  03577 062715R RXP   LDA .OP       'OP' ERROR(IN RANGE OF 'REP') 
2020  03600 017145R       JSB ERPR
2021  03601 006400        CLB        O TO B (FOR NO REP)
2022  03602 027575R       JMP RXX 
2023  03603 017635R RXR   JSB OPERR  RELC.VAL(ERROR) 'M'
2024  03604 027601R       JMP RXP+2 
2025* 
2026*              * SET UP FOR EVALUATION OF OPERAND IN WHICH A COMMA
2027*              *  IS ILLEGAL. 
2028* 
2029  03605 000000  CHOPI NOP 
2030  03606 002400        CLA 
2031  03607 016645R       JSB CHOP
2032  03610 127605R       JMP CHOPI,I 
2033  03611 037605R       ISZ CHOPI 
2034  03612 127605R       JMP CHOPI,I 
2035*         ************************************* 
2036*         * GET BREC CODE AND LIST RELOC CHAR * 
2037*            BREC CODE IN A, LIST CHAR IN B.
2038*         ************************************* 
2039  03613 000000  DCOD  NOP 
2040  03614 067115R       LDB BLNS
2041  03615 002003        SZA,RSS    ABSOLUTE REL.? 
2042  03616 127613R       JMP DCOD,I  YES,DONE
2043  03617 072766R       STA SAVB    SAVE RELC CODE
2044  03620 052656R       CPA ...1+4  IS IT EQU EXT ? 
2045  03621 042667R       ADA ..M1    YES, SET = 4. 
2046  03622 042726R       ADA RC-1    POINT TO CORR.RELC.CHAR.
2047  03623 164000        LDB 0,I     PICK IT UP
2048  03624 062747R       LDA BYFLG 
2049  03625 002003        SZA,RSS 
2050  03626 062766R       LDA SAVB    PICK UP RELC CODE IF NECESSARY. 
2051  03627 127613R       JMP DCOD,I  RETURN
2052* 







 PAGE 0043 #01  *** DOS/RTE ASMB  FALL 1971 *** 


2053*             * MOVE CHARS.TO A BUFFER FROM ASCI *
2054*             *  BUFFER ADDR.IN B REG.           *
2055* 
2056  03630 000000  V     NOP 
2057  03631 062657R       LDA ...1+5
2058  03632 017434R       JSB MOVE
2059  03633 004374R       DEF ASCI
2060  03634 127630R       JMP V,I 
2061* 
2062*             * SET UP AND PRINT 'M' DIAG. FOR OPERAND ERROR *
2063* 
2064  03635 000000  OPERR NOP 
2065  03636 062713R       LDA .MBLN     'M'= OPERAND ERROR
2066  03637 017145R       JSB ERPR
2067  03640 127635R       JMP OPERR,I 
2068*        ****************************** 
2069*        * GET BUFFER ADDRESS OF ITEM * 
2070*        ****************************** 
2071  03641 000000  GETA NOP
2072  03642 042667R       ADA ..M1   A-1 TO A 
2073  03643 000065       CLE,ERA
2074  03644 043121R      ADA FFUB 
2075  03645 002040       SEZ     UPPER ADDR?
2076  03646 003004        CMA,INA  NO - COMPLEMENT IT.
2077  03647 070001       STA 1   A TO B 
2078  03650 127641R      JMP GETA,I 
2079*        ************************ 
2080*        * GET AN OPERAND CHAR. * 
2081*        ************************ 
2082  03651 000000  GETC NOP
2083  03652 017641R      JSB GETA 
2084  03653 077660R       STB *+5 
2085  03654 067663R       LDB TS  ADDR OF 'TEST' TO B REG 
2086  03655 007004       OCT 7004 
2087  03656 002404       OCT 2404 A=1 
2088  03657 017434R       JSB MOVE
2089  03660 000000        NOP   (FROM *-5)
2090  03661 063000R       LDA TEST
2091  03662 127651R      JMP GETC,I 
2092  03663 005000R TS DEF TEST 
2093* 
2094*        * MEASURE SYMBOL AND SET 
2095*        *         SYMP = SYMBOL CHAR COUNT 
2096*        *         SYMP+1 = SYMBOL POSITION 
2097  03664 000000  MSYMS NOP 
2098  03665 016772R       JSB MSYM
2099  03666 072776R       STA SYMP
2100  03667 076777R       STB SYMP+1
2101  03670 127664R       JMP MSYMS,I 
2102*        *****************************
2103*        * SET MEMORY TO GIVEN VALUE *
2104*        *****************************
2105  03671 000000  SETM NOP
2106  03672 003004        CMA,INA     SET VALUE FOR COUNTER 
2107  03673 072753R       STA DSIG
2108  03674 163671R       LDA SETM,I  GET PARAMETER TO BE STORED IN AREA







 PAGE 0044 #01  *** DOS/RTE ASMB  FALL 1971 *** 


2109  03675 170001        STA 1,I     - PLACE PARAMETER IN MEMORY 
2110  03676 034001       ISZ 1
2111  03677 036753R       ISZ DSIG
2112  03700 027675R      JMP *-3
2113  03701 037671R      ISZ SETM 
2114  03702 127671R      JMP SETM,I 

























































 PAGE 0045 #01  *** DOS/RTE ASMB  FALL 1971 *** 


2116*%WRIS WRITES SOURCE ONTO DISK. RECORD FORMAT:1ST WORD=-N,IT IS 
2117*FOLLOWED BY N CHARACTERS. RECORDS ARE PACKED WITHIN TRACKS,
2118*TRACKS ARE LINKED. INITIALIZATION IS ACCOMPLISHED BY CALLING 
2119*%WRIN. IT WILL ASK FOR A TRACK, INITIALIZE %WRIS,AND RETURN
2120*A WORD=LUN,FIRST TRACK NO. 
2121* 
2122*CALLING SEQUENCES: 
2123*                        JSB %WRIS
2124*                        DEF *+4
2125*                        DEF BUFFR      FWA OF OUTPUT BUFFER
2126*                        DEF RLEN       -(NO OF CHARS), 0 FOR EOT 
2127*                        ERROR RETURN (DISK FULL) 
2128*                        NORMAL RETURN WITH (A)= LUN,TRACK NO 
2129* 
2130*                        JSB %WRIN
2131*                        ERROR RETURN (NO MORE TRACKS)
2132*                        NORMAL RETURN WITH (A)= LUN,TRACK NO 
2133* 
2134*TO END A FILE, CALLING SEQUENCE IS: JSB %WEOF
2135* 
2136* 
2137*GETRK REQUESTS A TRACK FROM EXEC. IF NO TRACKS ARE AVAILABLE,
2138*THE ERROR RETURN WILL BE TAKEN 
2139*CALLING SEQUENCE:       JSB GETRK
2140*                        ERROR RETURN 
2141*                        NORMAL RETURN
2142  03703 000000  GETRK NOP 
2143  03704 016015X       JSB EXEC      GET TRACK 
2144  03705 003713R       DEF *+6 
2145  03706 004655R       DEF .1+3      GET TRACK 
2146  03707 004051R       DEF TCONS     GET 1 TRACK, DO NOT SUSPEND.
2147                      IFN 
2148                      DEF WTRAC     TRK NO. 
2149                      DEF WLUN      LUN 
2150                      XIF 
2151                      IFZ 
2152  03710 004317R       DEF NTRAC 
2153  03711 004316R       DEF NLUN
2154                      XIF 
2155  03712 004050R       DEF S/TRK     GIVES # TRACKS/SECTOR 
2156                      IFN 
2157                      LDA WTRAC 
2158                      XIF 
2159                      IFZ 
2160  03713 062317R       LDA NTRAC 
2161                      XIF 
2162  03714 002020        SSA           TRACK HERE ?
2163  03715 127703R       JMP GETRK,I   NO, ERROR RETURN
2164  03716 037703R       ISZ GETRK     BUMP FOR
2165  03717 127703R       JMP GETRK,I   NORMAL RETURN 
2166  03720 000000  WINIT NOP 
2167                      IFN 
2168                      LDA WTRAC 
2169                      LDB WLUN
2170                      XIF 
2171                      IFZ 







 PAGE 0046 #01  *** DOS/RTE ASMB  FALL 1971 *** 


2172  03721 062317R       LDA NTRAC 
2173  03722 072042R       STA WTRAC 
2174  03723 066316R       LDB NLUN
2175  03724 076044R       STB WLUN
2176                      XIF 
2177  03725 005727        BLF,BLF 
2178  03726 040001        ADA 1         (A)= LUN,TRACK NO.
2179  03727 072047R       STA LUNTR     LUN,TRACK TO RETURN ON EXIT 
2180  03730 066035R       LDB WBFWA 
2181  03731 076156R       STB WBFAD     BUFFER ADDR= BUFFER FWA 
2182  03732 066331R       LDB .M64      -64 
2183  03733 076154R       STB BCOUN     BUFFER COUNT
2184  03734 006400        CLB 
2185  03735 076043R       STB WSECT     SECTOR NO =0
2186  03736 127720R       JMP WINIT,I   NORMAL EXIT 
2187  03737 000000  %WRIS NOP 
2188  03740 163737R       LDA %WRIS,I 
2189  03741 072147R       STA EXIT      EXIT POINT
2190  03742 037737R       ISZ %WRIS 
2191  03743 063737R       LDA %WRIS 
2192  03744 160000        LDA 0,I 
2193  03745 001275        RAL,CLE,SLA,ERA    TEST I-BIT AND CLEAR 
2194  03746 027744R       JMP *-2       INDIRECT,CONTINUE THRU I-CHAIN
2195  03747 072045R       STA SBUFR     SOURCE-BUFFER ADDR
2196  03750 037737R       ISZ %WRIS 
2197  03751 163737R       LDA %WRIS,I 
2198  03752 160000        LDA 0,I       -(NO OF CHARS)
2199  03753 037737R       ISZ %WRIS 
2200  03754 001100        ARS 
2201  03755 070001        STA 1 
2202  03756 007004        CMB,INB 
2203  03757 005727        BLF,BLF 
2204  03760 042667R       ADA ..M1      -1
2205  03761 072046R       STA ACOUN     -(NO OF WORDS +1) 
2206  03762 176156R       STB WBFAD,I   NO. OF WORDS IN UPPER 
2207  03763 026016R       JMP WRIS1+3 
2208  03764         WRIS0 EQU * 
2209                      IFN 
2210                      JSB WOUT      OUTPUT SECTOR 
2211                      XIF 
2212  03764 062043R       LDA WSECT     SECTOR NO.
2213  03765 002004        INA 
2214  03766 052050R       CPA S/TRK     END OF TRACK ?
2215  03767 027777R       JMP WRIS3     YES 
2216                      IFZ 
2217  03770 016030R       JSB WOUT      NO,OUTPUT SECTOR
2218                      XIF 
2219  03771 036043R       ISZ WSECT     BUMP SECTOR NO. 
2220  03772 062035R       LDA WBFWA 
2221  03773 072156R       STA WBFAD     BUFFER ADDR = BUFFER FWA
2222  03774 062331R       LDA .M64      -64 
2223  03775 072154R       STA BCOUN     BUFFER COUNT = -64
2224  03776 026022R       JMP WRIS2 
2225  03777         WRIS3 EQU * 
2226                      IFZ 
2227  03777 076643R       STB TEMP      SAVE CURRENT WORD 







 PAGE 0047 #01  *** DOS/RTE ASMB  FALL 1971 *** 


2228                      XIF 
2229  04000 017703R       JSB GETRK     GET TRACK 
2230  04001 127737R       JMP %WRIS,I   ERROR RETURN,NO TRACKS AVAILABLE
2231                      IFN 
2232                      JSB WINIT     INITIALIZE FOR NEW TRACK
2233                      JMP WRIS2 
2234                      XIF 
2235                      IFZ 
2236  04002 062316R       LDA NLUN      NEW LUN 
2237  04003 001727        ALF,ALF 
2238  04004 042317R       ADA NTRAC     SET LUN/TRACK 
2239  04005 072541R       STA BUFFR+63  LUN,TRACK NO. TO LAST WORD OF TR
2240  04006 016030R       JSB WOUT      OUTPUT LAST SECTOR
2241  04007 017720R       JSB WINIT     INITIALIZE FOR NEW TRACK
2242  04010 062643R       LDA TEMP
2243  04011 172156R       STA WBFAD,I   WORD TO DISK
2244  04012 026016R       JMP WRIS1+3 
2245                      XIF 
2246  04013 166045R WRIS1 LDB SBUFR,I 
2247  04014 176156R       STB WBFAD,I   WORD TO DISK
2248  04015 036045R       ISZ SBUFR     BUMP SOURCE POINTER 
2249  04016 036156R       ISZ WBFAD     BUMP OUTPUT-BUFFER POINTER
2250  04017 036154R       ISZ BCOUN     END OF SECTOR ? 
2251  04020 002001        RSS           NO
2252  04021 027764R       JMP WRIS0 
2253  04022 036046R WRIS2 ISZ ACOUN     END OF TRANSFER ? 
2254  04023 026013R       JMP WRIS1     NO, CONTINUE
2255  04024 003400        CCA 
2256  04025 172156R       STA WBFAD,I   SET CURRENT EOF 
2257  04026 062047R       LDA LUNTR     (A)= LUN,TRACK NO.
2258  04027 126147R       JMP EXIT,I    RETURN
2259  04030 000000  WOUT  NOP 
2260  04031 016015X       JSB EXEC
2261  04032 004041R       DEF *+7 
2262  04033 004653R       DEF .1+1      +2 = CODE FOR WRITE 
2263  04034 004044R       DEF WLUN      LUN OF CURRENT WRITE-TRACK
2264  04035 004442R WBFWA DEF BUFFR     WRITE BUFFER
2265  04036 004330R       DEF B100      =64 
2266  04037 004042R       DEF WTRAC     TRACK NO
2267  04040 004043R       DEF WSECT     SECTOR NO 
2268  04041 126030R       JMP WOUT,I
2269  04042 000000  WTRAC NOP           CURRENT TRACK 
2270  04043 000000  WSECT NOP           CURRENT SECTOR
2271  04044 000000  WLUN  NOP           LUN FOR CURRENT TRACK 
2272  04045 000000  SBUFR NOP           SOURCE BUFFER ADDR
2273  04046 000000  ACOUN NOP           SOURCE COUNT
2274  04047 000000  LUNTR NOP           LUN, TRACK NO.FOR RETURN
2275  04050 000000  S/TRK NOP           # OF SECTORS PER TARACK 
2276  04051 100001  TCONS OCT 100001
2277  04030         ?WEOF EQU WOUT













 PAGE 0048 #01  *** DOS/RTE ASMB  FALL 1971 *** 


2279*%WRIT WRITES RELOCATABLE RECORDS ON DISK. TRACKS ARE ASSUMED 
2280*CONSECUTIVE, CURRENT SECTOR NO. IS ASSUMED AVAILABLE IN BASE 
2281*PAGE. RECORD-FORMAT IS AS IN BCS.
2282*CALLING SEQUENCE:
2283*                   JSB %WRIT 
2284*                   DEF *+3 
2285*                   DEF BUFFR      FWA OF WRITE-BUFFER
2286*                   DEF RLEN       NO OF WORDS
2287* 
2288                      IFN 
2289                WROVF CCA 
2290                      LDB .A        PICK UP JBINS 
2291                      JSB EXEC      SET JBINS=-1
2292                      DEF *+2 
2293                      DEF .M19      -19 
2294                      JSB EXEC
2295                      DEF *+5 
2296                      DEF .1+1      +2 = CODE FOR WRITE 
2297                      DEF .1        LUN=1 FOR SYSTEM TTY
2298                      DEF OVMES     FWA OF MESSAGE
2299                      DEF .M8       -8 FOR 8 CHARS
2300                      JMP %WRIF,I   EXIT FROM %WRIF OR %WRIT..
2301                OVMES ASC 4,JBIN OVF
2302                .WRIN NOP 
2303                      LDA 102B      JBINC 
2304                      SZA,RSS       IS A JBIN TRACK AVAILABLE?
2305                      JMP WROVF     NO, GO TO OVERFLOW ROUTINE
2306                      CLB 
2307                      LSL 8         SHIFT TRACK NO INTO B 
2308                      ALF,ALF       (A)= SECTOR NO
2309                      STB TRACK 
2310                      XIF 
2311                      IFZ 
2312  04052 000177  .177  OCT 177 
2313  04053 000000  .WRIN NOP 
2314  04054 061766        LDA 1766B     CURRENT LOAD AND GO FLAG
2315  04055 066653R       LDB .1+1      2 
2316  04056 002020        SSA 
2317  04057 006004        INB 
2318  04060 076044R       STB WLUN      LUN=2 IF SIGN=0, =3 OTHERWISE 
2319  04061 001727        ALF,ALF 
2320  04062 001200        RAL 
2321  04063 013372R       AND LMASK     A=TRACK # 
2322  04064 072152R       STA TRACK     SET TRACK NO. 
2323  04065 061766        LDA 1766B 
2324  04066 012052R       AND .177      A=SECTOR #
2325                      XIF 
2326  04067 072153R       STA SECTR 
2327  04070 062331R       LDA .M64
2328  04071 072154R       STA BCOUN     SECTOR-BUFFER COUNT=-64 
2329  04072 062104R       LDA BFWA
2330  04073 072155R       STA BFRAD     SECTOR-BUFFER ADDR= FWA BUFFER
2331  04074 126053R       JMP .WRIN,I 
2332*%WRIF OUTPUTS THE WRITE-BUFFER TO THE CURRENT SECTOR 
2333*ON DISK, UPDATES THE CURRENT SECTOR NO.
2334*%WRIF IS USUALLY CALLED AT THE END OF EACH SUBPROGRAM OUTPUT.







 PAGE 0049 #01  *** DOS/RTE ASMB  FALL 1971 *** 


2335  04075 000000  %WRIF NOP 
2336                     IFN
2337                      LDA 101B
2338                      CPA ..M1      IS JBIN TRACK IN USE? 
2339                      JMP %WRIF,I   NO, RETURN FROM %WRIF 
2340                     XIF
2341  04076 002400        CLA 
2342  04077 172155R       STA BFRAD,I   CLEAR NEXT WORD IN SECTOR 
2343  04100 016015X       JSB EXEC      WRITE SECTOR
2344  04101 004110R       DEF *+7 
2345                      IFN 
2346                      DEF ..M1+1    -2 = CODE FOR WRITE 
2347                      DEF .1+1      =LUN 2
2348                      XIF 
2349                      IFZ 
2350  04102 004653R       DEF .1+1      CODE FOR WRITE=2
2351  04103 004044R       DEF WLUN      LUN 
2352                      XIF 
2353  04104 004442R BFWA  DEF BUFFR     FWA OF BUFFER 
2354  04105 004330R       DEF B100      64 WORDS
2355  04106 004152R       DEF TRACK     TRACK NO
2356  04107 004153R       DEF SECTR     SECTOR NO 
2357                      IFN 
2358                      LDA 102B      LGOC WORD 
2359                      INA 
2360                      ISZ SECTR     BUMP SECTOR NO
2361                      LDB SECTR 
2362                      CPB 116B      NO OF SECTORS IN TRACK
2363                      CLB,RSS 
2364                      JMP WRIF2 
2365                      RRL 8         TRACK NO TO B 
2366                WRIF1 ADB ..M1      TRK-1 = NEXT JBIN TRK 
2367                      STB TRACK     NEW TRACK NO
2368                      JSB EXEC      STATUS REQUEST
2369                      DEF *+5 
2370                      DEF .12+4     CODE=+16
2371                      DEF .1        1 TRACK 
2372                      DEF TRACK     STARTING TRACK NO.
2373                      DEF STRAK     ACTUAL AVAIL GOOD TRACK RETURNED
2374                      LDA STRAK 
2375                      SZA,RSS       OVERFLOW ?
2376                      JMP WROVF     YES 
2377                      LDB TRACK 
2378                      CPB STRAK     IS IT A GOOD TRACK? 
2379                      CLA,RSS       YES, GO TEST IT FURTHER 
2380                      JMP WRIF1     NO, TRY NEXT LOWER TRACK
2381                      CPB RTRAK,I   IS THE SOURCE FILE ON THIS TRAC?
2382                      JMP WROVF     YES, GO TO JBIN OVERFLOW..
2383                      RRR 8         GOOD TRACK TO UPPER A 
2384                WRIF2 LDB .B        =LOC 102B (JBINC) 
2385                      JSB EXEC      SET JBINC = TRACK/0 (AT 102B )
2386                      DEF *+2 
2387                      DEF .M19      -19 
2388                      XIF 
2389  04110 016053R       JSB .WRIN     RE-INITIALIZE FOR NEXT WRITE
2390  04111 126075R       JMP %WRIF,I   EXIT







 PAGE 0050 #01  *** DOS/RTE ASMB  FALL 1971 *** 


2391  04112 177777        OCT -1        -1= FIRST TIME; 
2392  04113 000000  %WRIT NOP 
2393  04114 162113R       LDA %WRIT,I 
2394  04115 072147R       STA EXIT      SET RETURN ADDR 
2395  04116 072075R       STA %WRIF     SET EXIT FROM 'WROVF' IF NEEDED.
2396  04117 036112R       ISZ %WRIT-1   FIRST TIME IN THIS ROUTINE? 
2397  04120 002001        RSS           NO
2398  04121 016053R       JSB .WRIN     INITIALIZE
2399                      IFN 
2400                      LDA 101B      JBINS 
2401                      CPA ..M1      NO JBIN LEFT? 
2402                      JMP EXIT,I    YES, EXIT 
2403                      XIF 
2404  04122 036113R       ISZ %WRIT 
2405  04123 062113R       LDA %WRIT 
2406  04124 160000        LDA 0,I 
2407  04125 001275        RAL,CLE,SLA,ERA    TEST I-BIT AND CLEAR 
2408  04126 026124R       JMP *-2 
2409  04127 072156R       STA WBFAD     SOURCE-BUFFER FWA 
2410  04130 036113R       ISZ %WRIT 
2411  04131 162113R       LDA %WRIT,I 
2412  04132 160000        LDA 0,I 
2413  04133 003004        CMA,INA 
2414  04134 072322R       STA RCOUN     SET COUNT 
2415  04135 162156R WMOVE LDA WBFAD,I 
2416  04136 172155R       STA BFRAD,I   MOVE WORD 
2417  04137 036155R       ISZ BFRAD          POINTERS 
2418  04140 036154R       ISZ BCOUN     BUMP SECTOR-BUFFER COUNT
2419  04141 002001        RSS 
2420  04142 016075R       JSB %WRIF     END OF BUFFER, WRITE SECTOR 
2421  04143 036156R       ISZ WBFAD     BUMP
2422  04144 036322R       ISZ RCOUN     BUMP COUNTER
2423  04145 026135R       JMP WMOVE     CONTINUE TRANSFER 
2424  04146 126147R       JMP EXIT,I
2425  04147 000000  EXIT  NOP           RETURN ADDR 
2426  04150 000000  STRAK NOP           TEMP FOR NEXT GOOD TRACK NO 
2427  04151 177755  .M19  DEC -19 
2428  04152 000000  TRACK NOP           CURRENT TRACK NO
2429  04153 000000  SECTR NOP           CURRENT SECTOR NO 
2430  04154 000000  BCOUN NOP           COUNT FOR WRITE-BUFFER
2431  04155 000000  BFRAD NOP           CURRENT ADDR IN WRITE-BUFFER
2432  04156 000000  WBFAD NOP           CURRENT SOURCE-BUFFER ADDR





















 PAGE 0051 #01  *** DOS/RTE ASMB  FALL 1971 *** 


2434*READS SOURCE FROM DISK (IF LUN= 2) OR OTHER DEVICE 
2435*CALLING SEQUENCE FOR %READ:  JSB %READ 
2436*                             DEF *+5 
2437*                             DEF LUNIN  LUN FOR INPUT
2438*                             DEF BUFR   FWA OF READ BUFFER 
2439*                             DEF RLEN  -(NO OF CHARS)
2440*                             EOF RETURN
2441*                             NORMAL RETURN 
2442*RETURNS WITH: (B) = NO.OF CHARS. 
2443  04157 000000  %READ NOP 
2444  04160 162157R       LDA %READ,I 
2445  04161 072147R       STA EXIT      RETURN ADDRESS
2446  04162 036157R       ISZ %READ 
2447  04163 162157R       LDA %READ,I 
2448  04164 072205R       STA LUNAD     ADDR FOR LUN OF INPUT 
2449  04165 036157R       ISZ %READ 
2450  04166 062157R       LDA %READ 
2451  04167 160000        LDA 0,I 
2452  04170 001275        RAL,CLE,SLA,ERA    TEST I-BIT AND CLEAR 
2453  04171 026167R       JMP  *-2      INDIRECT, GO ON THRU INDIR.CHAIN
2454  04172 072206R       STA RBFAD     FWA OF READ-BUFFER
2455  04173 036157R       ISZ %READ 
2456  04174 162157R       LDA %READ,I 
2457  04175 072207R       STA RLGTH     RECORD-LENGTH ADDR
2458  04176 036157R       ISZ %READ     BUMP RETURN ADDR FOR EOF RETURN 
2459  04177 162205R       LDA LUNAD,I 
2460  04200 052653R       CPA .1+1      READ FROM DISK(LUN=2)?
2461  04201 026211R       JMP READ1     YES 
2462  04202 016015X       JSB EXEC      READ FROM OTHER THAN DISK 
2463  04203 004210R       DEF *+5 
2464                      IFN 
2465                      DEF ..M1      -1 = CODE FOR READ
2466                      XIF 
2467                      IFZ 
2468  04204 004652R       DEF .1        CODE = 1 FOR READ 
2469                      XIF 
2470  04205 000000  LUNAD NOP           ADDR OF INPUT-LUN OF CONTROL CAR
2471  04206 000000  RBFAD NOP           ADDR OF READ-BUFFER 
2472  04207 000000  RLGTH NOP           ADDR OF ASKED-FOR RECD LENGTH 
2473  04210 126147R       JMP EXIT,I    EXIT
2474  04211 016250R READ1 JSB GETWD     GET RECORD HEAD 
2475  04212 001727        ALF,ALF       (A)= NO OF WORDS
2476  04213 064000        LDB 0 
2477  04214 002003        SZA,RSS       END OF TAPE ? 
2478  04215 126147R       JMP EXIT,I    YES, EXIT WITH (B)=0
2479  04216 002020        SSA           EOF ? 
2480  04217 126157R       JMP %READ,I   YES, EOF RETURN 
2481  04220 003004        CMA,INA       -( NO OF WORDS IN RECORD) 
2482  04221 005200        RBL 
2483  04222 076045R       STB SBUFR     RECORD LENGTH IN CHARS. 
2484  04223 166207R       LDB RLGTH,I   ASKED-FOR RECORD-LENGTH (-) 
2485  04224 005100        BRS           CONVERT TO -(WORD COUNT)
2486  04225 072322R       STA RCOUN     SET CURRENT-RECORD COUNT
2487  04226 076046R       STB ACOUN     SET ASKED-FOR RECORD COUNT
2488  04227 016250R       JSB GETWD     GET WORD FROM DISK
2489  04230 172206R       STA RBFAD,I   WORD TO USER-S BUFFER 







 PAGE 0052 #01  *** DOS/RTE ASMB  FALL 1971 *** 


2490  04231 036206R       ISZ RBFAD     BUMP BUFFER ADDR
2491  04232 036046R       ISZ ACOUN     BUMP COUNT
2492  04233 002001        RSS 
2493  04234 026242R       JMP READ2     READY,FINISH UP 
2494  04235 036322R       ISZ RCOUN     BUMP RECORD COUNT 
2495  04236 026227R       JMP *-7       CONTINUE
2496  04237 066045R       LDB SBUFR     RETURN ACTUAL REC. LENGTH 
2497                      IFN 
2498                      JMP EXIT,I    RETURN
2499                      XIF 
2500                      IFZ 
2501  04240 026246R       JMP *+6 
2502                      XIF 
2503  04241 016250R       JSB GETWD     GET NEXT WORD 
2504  04242 036322R READ2 ISZ RCOUN     SKIP TO END OF RECORD 
2505  04243 026241R       JMP *-2 
2506  04244 166207R       LDB RLGTH,I   READY, RETURN ASKED-FOR REC.LGTH
2507  04245 007004        CMB,INB      COMPLEMENT ASKED FOR CHAR. COUNT 
2508                      IFZ 
2509  04246 062320R       LDA RCODE     CODE-WORD TO A
2510                      XIF 
2511  04247 126147R       JMP EXIT,I
2512  04250 000000  GETWD NOP 
2513  04251 162327R       LDA BFRA,I
2514  04252 036327R       ISZ BFRA
2515  04253 036325R       ISZ BCOU      BUMP BUFFER COUNTER 
2516  04254 126250R       JMP GETWD,I   EXIT
2517  04255 072643R       STA TEMP      SAVE A IN TEMP
2518  04256 036324R       ISZ SECT
2519                      IFN 
2520                      LDB SECT
2521                      CPB 116B      END OF TRACK ?
2522                      CLB,RSS       YES, SECTOR NO.= 0
2523                      JMP GETW1 
2524                      STB SECT      SECTOR NO. = 0
2525                      ISZ TRAK      BUMP TO NEXT TRACK NUMBER 
2526                      JSB EXEC      STATUS CHECK
2527                      DEF *+5 
2528                      DEF .M16     CODE= -16 FOR USER AREA STATUS 
2529                      DEF .1        1 TRACK 
2530                      DEF TRAK      STARTING TRACK
2531                      DEF TRAK      NEXT GOOD TRACK 
2532                      XIF 
2533                      IFZ 
2534  04257 066321R       LDB .1755 
2535  04260 046326R       ADB RLUN
2536  04261 164001        LDB 1,I 
2537  04262 056324R       CPB SECT      END OF TRACK ?
2538  04263 006401        CLB,RSS       YES, SECTOR NO.= 0
2539  04264 026275R       JMP GETW1 
2540  04265 072320R       STA RCODE     SAVE CODE-WORD
2541  04266 076324R       STB SECT      SECTOR NO =0
2542  04267 100050        LSL 8         LUN TO B
2543  04270 001727        ALF,ALF 
2544  04271 072323R       STA TRAK      SET TRACK NO
2545  04272 076326R       STB RLUN      SET LUN 







 PAGE 0053 #01  *** DOS/RTE ASMB  FALL 1971 *** 


2546  04273 016300R       JSB READS     READ SECTOR 
2547  04274 026251R       JMP GETWD+1   GET RECORD WORD 
2548                      XIF 
2549  04275 016300R GETW1 JSB READS     READ NEXT SECTOR
2550  04276 062643R       LDA TEMP      RESTORE LAST WORD FROM TEMP 
2551  04277 126250R       JMP GETWD,I 
2552  04300 000000  READS NOP 
2553  04301 062311R       LDA BFW 
2554  04302 072327R       STA BFRA      BUFFER-PNTR.=FWA OF BUFFER
2555  04303 062331R       LDA .M64      -64 
2556  04304 072325R       STA BCOU      BUFFER COUNTER
2557  04305 016015X       JSB EXEC      READ SECTOR 
2558  04306 004315R       DEF *+7 
2559                      IFN 
2560                      DEF ..M1      -1 = CODE FOR READ
2561                      XIF 
2562                      IFZ 
2563  04307 004652R       DEF .1        1= CODE FOR READ
2564                      XIF 
2565  04310 004326R       DEF RLUN      LUN 
2566  04311 004543R BFW   DEF BUFR      FWA OF READ BUFFER
2567  04312 004330R       DEF B100      64 WORDS
2568  04313 004323R       DEF TRAK      TRK. NO.
2569  04314 004324R       DEF SECT      SECTOR NO.
2570  04315 126300R       JMP READS,I   EXIT
2571                      IFZ 
2572  04316 000000  NLUN  NOP           SAVES NEW LUN 
2573  04317 000000  NTRAC NOP           SAVES NEW TRACK 
2574  04320 000000  RCODE NOP           SAVE CODE/WORD IN HERE
2575  04321 001755  .1755 OCT 1755
2576                      XIF 
2577  04322 000000  RCOUN BSS 1         CURRENT-RECORD COUNT
2578  04323 000000  TRAK  NOP           CURRENT TRACK 
2579  04324 000000  SECT  NOP           CURRENT SECTOR
2580  04325 000000  BCOU  NOP           SECTOR-BUFFER COUNTER 
2581  04326 000000  RLUN  NOP           LUN OF CURRENT TRACK
2582  04327 000000  BFRA  NOP POINTER FOR INTERNAL BUFFER 
2583  04330 000100  B100 OCT  100 
2584  04331 177700  .M64  DEC -64 
2585* 
2586*%RDSC READS A SECTOR 
2587*CALLING SEQUENCE:       LDA CODE 
2588*                        JSB %RDSC
2589*                        RETURN (A)= LAST WORD IN SECTOR
2590  04332 000000  %RDSC NOP 
2591  04333 066344R       LDB ?SECT     GET STARTING SECTOR # 
2592  04334 076324R       STB SECT      SECTOR NO.
2593  04335 006400        CLB 
2594  04336 100050        LSL 8         SHIFT LUN TO B
2595  04337 076326R       STB RLUN      LUN= 2 OR 3 
2596  04340 001727        ALF,ALF 
2597  04341 072323R       STA TRAK
2598  04342 016300R       JSB READS      READ SECTOR
2599  04343 126332R       JMP %RDSC,I 
2600* 
2601  04344 000000  ?SECT NOP     SAVE STARTING SECTOR #(FROM %JFILE).







 PAGE 0054 #01  *** DOS/RTE ASMB  FALL 1971 *** 


2603*             * ASSEMBLY OPTION FLAGS * 
2604  04345 004346R FLAGS DEF *+1       POINTS AT BFLAG 
2605  04346 000000  BFLAG NOP           PUNCH REQUEST 
2606  04347 000000  LFLAG NOP           LIST
2607  04350 000000  RFLAG NOP           RELOCATABLE ASMBLY(OPTIONAL FLG)
2608  04351 000000  TFLAG NOP           SYMBOL TABLE PRINT REQ. 
2609  04352 000000  IFTST NOP           CONTAINS 'IF' FLAG(N,Z, OR 0) 
2610  04353 000000  AFLAG NOP           ABSOLUTE ASMBLY.
2611  04354 000000  CFLAG NOP          CROSS REFERENCE TABLE FLAG 
2612  04355 000000  LGFLG NOP           LOAD/GO FLG(=99 WHEN ON)
2613  04356 000000  DRFLG NOP           FULL DISC IF NON ZERO 
2614  04357 000000  TSTRT NOP           STARTING TRACK
2615  04360 177710  PLINE DEC -56       STANDARD LINE COUNT 
2616  04361 000005  LUNIN OCT 5         LUN, INPUT   (READ CW)
2617  04362 000705  EOTIN OCT 705       CW TO SET EOT STATUS
2618  04363 000104  LUNPN OCT 104       PUNCH CW(=LUN OF PUNCH) 
2619  04364 000006  LUNPR OCT 6         PRINTER LUN 
2620  04365 001106  PRSPC OCT 1106      FUNC CODE TO SPACE PRINTER
2621  04366 001004  PNLED OCT 1004      CW TO OUTPUT LEADER/TRAILER 
2622  04367 000000  ?LWA  NOP           LAST WORD ADDR. OF AVAIL. MEMORY
2623  04370 006303R X     DEF TEMP+1440B  RELOC LENGTH OF HPAP/RT/DOS 
2624  04371 006160R Z     DEF TEMP+1315B  ABS LENGTH OF RT/DOS ASMB 
2625  04372 020120  HEADP ASC 2, PAG
2626  04374 000000  ASCI  BSS 3  DEST. OF CONVRTED DEC. NOS.
2627  04377 020043  .TNO  ASC 3, #      PART OF HEADER
2628  04402         HXBUF EQU * 
2629  04375         ASCI1 EQU ASCI+1
2630  04436         GTEM  EQU HXBUF+28
2631  04442         BUFFR EQU GTEM+4
2632  04543         BUFR  EQU BUFFR+65  SECTOR BUFFER 
2633  00001         B     EQU 1 

2635*      **** THE FOLLOWING 64 WORDS OF CODE SHOULD NOT BE SHIFTED. 
2636  04402 000700  .700B OCT 700 
2637  04403 000143  D99  DEC  99
2638  04404 000015  .13   OCT 15,77,12
2639  04407 001100  B1100     OCT  1100 
2640  04410 042040  .D.   ASC 1,D 
2641* 
2642  04411 000000  %WRIN NOP 
2643  04412 017703R       JSB GETRK     GET TRACK 
2644  04413 126411R       JMP %WRIN,I   ERROR RETURN,NO TRACKS LEFT 
2645  04414 036411R       ISZ %WRIN     BUMP FOR NORMAL RETURN
2646  04415 017720R       JSB WINIT     INITIALIZE FOR NEW TRACK
2647  04416 126411R       JMP %WRIN,I   EXIT
2648* 
2649*%JFIL GETS SOURCE-FILE CODEWDRD FROM BASE PAGE, FORMS A WORD=
2650*LUN,TRACK AND CALLS %RDIN WITH IT. 
2651  04417 000000  %JFIL NOP 
2652  04420 065767        LDB JFILS     JFILS=1ST TRACK NO,SECTR NO 
2653                      IFN 
2654                      LDA .1+1      LUN = 2 
2655                      RRL 8         TRACK NO TO A 
2656                      BLF,BLF       SECTOR NO TO LOW B
2657                      STB ?SECT     SAVE STARTING SECTOR #
2658                      XIF 







 PAGE 0055 #01  *** DOS/RTE ASMB  FALL 1971 *** 


2659                      IFZ 
2660  04421 002400        CLA 
2661  04422 100101        RRL 1 
2662  04423 042653R       ADA .1+1      LUN=2 OR 3
2663  04424 100110        RRL 8         TRACK # TO A
2664  04425 072320R       STA RCODE     SET CODE-WORD(LUN/TRACK #)
2665                      XIF 
2666  04426 072357R       STA ?TSTR     SAVE FOR PASS 2 CODE WORD 
2667  04427 016332R       JSB ?RDSC 
2668  04430 126417R       JMP %JFIL,I 
2669* 
2670  04431 052653R GOGO  CPA .1+1      SOURCE INPUT FROM DISC? 
2671  04432 026441R       JMP ASMJF     YES 
2672  04433 016411R       JSB %WRIN     NO - INITIALIZE *WRIS 
2673  04434 002400        CLA           ERROR - DISC FULL 
2674  04435 072357R       STA ?TSTR     SET STARTING LUN/TRACK
2675  04436 002003        SZA,RSS       IS THE DISC FULL? 
2676  04437 036356R       ISZ DRFLG     YES, SET THE DISC FLAG FOR FULL 
2677  04440 002001        RSS 
2678  04441 016417R ASMJF JSB %JFIL     INITIALIZE DISC FILE
2679  04442 062410R       LDA .D.       GET CHAR TO LOAD THE DATA 
2680  04443 026547R       JMP SEGMT     GO LOAD THE DATA SEGMENT
2681  04444 016545R ASMB  JSB BM        INPUT LUN?
2682  04445 026451R       JMP *+4       NO
2683  04446 072361R       STA LUNIN     YES- SET UP 
2684  04447 042402R       ADA .700B 
2685  04450 072362R       STA EOTIN     SET EOT STATUS CW 
2686  04451 016545R       JSB BM        LIST LUN? 
2687  04452 026456R       JMP *+4       NO
2688  04453 072364R       STA LUNPR     YES - SET UP
2689  04454 042407R       ADA B1100 
2690  04455 072365R       STA PRSPC     SET SPACE CW
2691  04456 016545R       JSB BM        PUNCH LUN?
2692  04457 026464R       JMP *+5       NO
2693  04460 042330R       ADA B100      YES 
2694  04461 072363R       STA LUNPN 
2695  04462 042402R       ADA .700B 
2696  04463 072366R       STA PNLED     SET LEADER/TRAILER CW 
2697  04464 016545R       JSB BM        LINE COUNT? 
2698  04465 026470R       JMP *+3       NO
2699  04466 003004        CMA,INA 
2700  04467 072360R       STA PLINE     SET LINE COUNT
2701  04470 016545R       JSB BM        LOAD/GO?
2702  04471 002001        RSS           NO
2703  04472 072355R ASMLG STA LGFLG     SET FLAG
2704                      IFN 
2705                      CLA           TO SET RTRAK(IN BASE PAGE)=0
2706                      LDB RTRAK     GET ADDRESS OF RTRAK
2707                      JSB EXEC
2708                      DEF *+2 
2709                      DEF .M19      -19=STORE IN BASE PAGE
2710                      RSS           SKIP OVER RTRAK ADDRESS STORAGE 
2711                RTRAK OCT 267       ADDRESS OF RTRAK IN BASE PAGE 
2712                      LDA 100B      LWA AVAIL. MEM. IN DOS
2713                      XIF 
2714                      IFZ 







 PAGE 0056 #01  *** DOS/RTE ASMB  FALL 1971 *** 


2715  04473 061777        LDA 1777B     LWA AVAIL. MEM. IN REAL TIME
2716                      XIF 
2717  04474 072367R       STA ?LWA      SAVE IT FOR USE IN SEGMENTS 
2718  04475 016015X       JSB EXEC      GO CHECK FOR LIST EQUIPMENT TYPE
2719  04476 004502R       DEF *+4 
2720  04477 004404R       DEF .13       STATUS REQUEST
2721  04500 004364R       DEF LUNPR 
2722  04501 004643R       DEF TEMP
2723  04502 062643R       LDA TEMP
2724  04503 001727        ALF,ALF 
2725  04504 012405R       AND .13+1     MASK OUT EQT TYPE 
2726  04505 066360R       LDB PLINE     B=-NO. OF LINES PER PAGE
2727  04506 052406R       CPA .13+2     IS IT  A PRINTER? 
2728  04507 006400        CLB           YES, CLEAR B
2729  04510 077107R       STB PCOMP     SET TTY TEST FLAG.
2730  04511 002404        CLA,INA 
2731  04512 072652R       STA .1        SET 1 
2732  04513 002004        INA 
2733  04514 072653R       STA .1+1      SET 2 
2734  04515 002004        INA 
2735  04516 072654R       STA .1+2      SET 3 
2736  04517 002004        INA 
2737  04520 072655R       STA .1+3      SET 4 
2738  04521 002004        INA 
2739  04522 072656R       STA .1+4      SET 5 
2740  04523 002004        INA 
2741  04524 072657R       STA .1+5      SET 6 
2742  04525 002004        INA 
2743  04526 072660R       STA .1+6      SET 7 
2744  04527 003400        CCA 
2745  04530 072667R       STA ..M1      SET -1
2746  04531 062361R       LDA LUNIN         GET LUN TO SEE IF IT IS =2. 
2747  04532 065767        LDB JFILS     GET SOURCE ORG ON DISK. 
2748  04533 052555R       CPA .2             IS SOURCE INPUT FROM DISC? 
2749  04534 006002        SZB           YES.. IS JFILE IN CORE? 
2750  04535 026431R       JMP GOGO      GO TO COMPLETION FO INIT SECTION
2751  04536 062541R       LDA *+3       PICK UP DIAG. MESSAGE 
2752  04537 066542R       LDB *+3 
2753  04540 026543R       JMP *+3       GO EXIT VIA ERROR DIAGNOSTIC
2754  04541 047120        ASC 2,NPRG    NO PROG IN JFILE WHEN INPUT=2 
2755  04543 016516R       JSB MESSX     PRINT DIAGNOSTIC
2756  04544 026565R       JMP ASMEX     GO TO COMPLETION

2758  04545 000000  BM    NOP 
2759  04546 160001        LDA B,I       GET RUN PARAMETER 
2760  04547 052403R       CPA D99       LOAD/GO?
2761  04550 026472R       JMP ASMLG     YES - DONE
2762  04551 006004        INB           NO - BUMPPOINTER
2763  04552 002002        SZA           PARAMETER PRESENT?
2764  04553 036545R       ISZ BM        YES - BUMP FOR L+2 EXIT 
2765  04554 126545R       JMP BM,I
2766  04555 000002  .2    OCT 2 
2767                      IFN 
2768                JFILS EQU 124B      LOC'N OF JFILE IN DOS 
2769                      XIF 
2770                      IFZ 







 PAGE 0057 #01  *** DOS/RTE ASMB  FALL 1971 *** 


2771  01767         JFILS EQU 1767B 
2772                      XIF 

2774  04556 000000        BSS BUFFR-*+129 
2775  04353         ?AFLG EQU AFLAG 
2776  03467         ?ARTL EQU ARTLT 
2777  04374         ?ASCI EQU ASCI
2778  01675         ?ASCN EQU ASCN
2779  04375         ?ASII EQU ASCI1 
2780  01366         ?ASM1 EQU ASM1
2781  00562         ?ASMB EQU ASMBX 
2782  04346         ?BFLG EQU BFLAG 
2783  02505         ?BNCN EQU BNCN
2784  03323         ?BPKU EQU BPKUP 
2785  00645         ?CHOP EQU CHOP
2786  03605         ?CHPI EQU CHOPI 
2787  03365         ?CNTR EQU CNTR
2788  03613         ?DCOD EQU DCOD
2789  04356         ?DRFL EQU DRFLG 
2790  03225         ?ENDS EQU ENDSB 
2791  03145         ?ERPR EQU ERPR
2792  04345         ?FLGS EQU FLAGS 
2793  03651         ?GETC EQU GETC
2794  03344         ?HA38 EQU HA38
2795  03143         ?ICSA EQU ICSA
2796  04347         ?LFLG EQU LFLAG 
2797  04355         ?LGFL EQU LGFLG 
2798  03105         ?LINC EQU LINC
2799  02762         ?LINS EQU LINS
2800  02650         ?LIST EQU LIST
2801  03333         ?LOUT EQU LOUT
2802  03271         ?LST  EQU LST 
2803  02714         ?LSTL EQU LISTL 
2804  03272         ?LTFL EQU LTFLG 
2805  03555         ?LTSA EQU LTSVA 
2806  03556         ?LTSB EQU LTSVB 
2807  04361         ?LUNI EQU LUNIN 
2808  04363         ?LUNP EQU LUNPN 
2809  00516         ?MESX EQU MESSX 
2810  01434         ?MOVE EQU MOVE
2811  02772         ?MSYM EQU MSYM
2812  03664         ?MSYS EQU MSYMS 
2813  03304         ?OKOL EQU OKOLE 
2814  03635         ?OPER EQU OPERR 
2815  00577         ?OPLK EQU OPLK
2816  03276         ?ORGS EQU ORGSV 
2817  02600         ?ORRP EQU ORRP
2818  03107         ?PCOM EQU PCOMP 
2819  03316         ?PKUP EQU PKUP
2820  04360         ?PLIN EQU PLINE 
2821  03403         ?PLIT EQU PLITS 
2822  01627         ?PNCH EQU PNCH
2823  04366         ?PNLE EQU PNLED 
2824  03030         ?PRNT EQU PRNT
2825  04332         ?RDSC EQU %RDSC 
2826  04350         ?RFLG EQU RFLAG 







 PAGE 0058 #01  *** DOS/RTE ASMB  FALL 1971 *** 


2827  04326         ?RLUN EQU RLUN
2828  01104         ?RSTA EQU RSTA
2829  00547         ?SEGM EQU SEGMT 
2830  03671         ?SETM EQU SETM
2831  03300         ?SUP  EQU SUP 
2832  01503         ?SYMK EQU SYMK
2833  04351         ?TFLG EQU TFLAG 
2834  04357         ?TSTR EQU TSTRT 
2835  03630         ?V    EQU V 
2836  04075         ?WRIF EQU %WRIF 
2837  04370         ?X    EQU X 
2838  04371         ?Z    EQU Z         FWA AVAIL. FOR ABSOLUTE ASS'YS. 



















































 PAGE 0059 #01  *** DOS/RTE ASMB  FALL 1971 *** 


2840*             ****************************
2841*             * TEMPORARY AND FLAG REGION*
2842*             ****************************
2843  04643         TEMP  EQU *         TEMP AT START OF OVERLAY AREA 
2844  04643         #     EQU TEMP     SAME AS DATA ORIGIN

2846  04644         VAL0  EQU TEMP+1    ASCN - MOST SIGNIFICANT 1/3 
2847  04645         VAL0S EQU TEMP+2    ASCN
2848  04646         VAL1  EQU TEMP+3    ASCN - MIDDLE 1/3 
2849  04647         VAL1S EQU TEMP+4    ASCN
2850  04650         VALU  EQU TEMP+5    ASCN - LEAST SIGNIFICANT 1/3
2851  04651         VALUS EQU TEMP+6    ASCN
2852  04647         DCNT  EQU VAL1S     ASCN
2853  04645         PASCN EQU TEMP+2 NUMBER PNTR SAVE(CHOP) 
2854  04652         ...1  EQU TEMP+7
2855  04652         .1    EQU ...1
2856  04661         .12   EQU .1+7
2857  04667         ..M1  EQU .12+6 
2858  04675         L     EQU ..M1+6
2859  04706         .M8   EQU #+43B 
2860  04707         .M15  EQU #+44B 
2861  04711         BLNK  EQU #+46B     =40B(LOWER BLANK) 
2862  04712         .IL   EQU #+47B 
2863  04713         .MBLN EQU #+50B 
2864  04714         .NO   EQU #+51B 
2865  04715         .OP   EQU #+52B 
2866  04716         .OV   EQU #+53B 
2867  04717         .UN   EQU #+54B 
2868  04722         .1000 EQU #+57B 
2869  04723         BIT15 EQU #+60B 
2870  04724         .E    EQU #+61B 
2871  04725         .B    EQU #+62B 
2872  04727         RC    EQU #+64B 
2873  04734         NAMI  EQU #+71B    LOC'N FOR TEMP SYMBOL STORAGE
2874  04735         NAME  EQU #+72B    FOR USE BY 'OPLK'
2875*         * FOLLOWING 5 LOC'S ARE CLEARED IN CHOP ROUTINES *
2876  04741         RELC  EQU #+76B     RELOCATION FLAG 
2877  04742         SIGN  EQU #+77B 
2878  04743         SUMP  EQU #+100B   RUNNING SUM FOR 'CHOP' 
2879  04744         TERM  EQU #+101B   NO. OF TERMS IN AN OPERAND 
2880  04745         T     EQU #+102B
2881  04747         BYFLG EQU #+104B   BYTE FLAG FOR 'BREC' 
2882  04750         FLEX  EQU #+105B   'ASCN' 
2883  04750         MODE  EQU FLEX
2884  04751         CNTB  EQU #+106B
2885  04752         CODE  EQU #+107B   OPCODE TYPE(FROM OPTABLE)
2886  04753         DSIG  EQU #+110B    'ASCN'
2887  04754         FLAG  EQU #+111B
2888  04755         FLAQ  EQU #+112B
2889  04756         INST  EQU #+113B   OPCODE FORMAT
2890  04757         LAST  EQU #+114B
2891  04760         PASS  EQU #+115B   PASS FLAG(0=PASS 1  AND 1=PASS2) 
2892  04761         PEEK  EQU #+116B   LAST CHAR PICKED UP
2893  04762         PLCN  EQU #+117B   PROGRAM LOCATION COUNTER 
2894  04763         PLEN  EQU #+120B LIT LENGTH PASS 1/LIT ORG PASS 2 
2895  04764         PNTR  EQU #+121B L POINTS AT LAST OER CURRENT CHAR. 







 PAGE 0060 #01  *** DOS/RTE ASMB  FALL 1971 *** 


2896  04766         SAVB  EQU #+123B
2897  04770         SCN1  EQU #+125B   STATE LNG/OPCODE/OPERAND/LABEL(4)
2898  04775         SYMI  EQU #+132B   ADDR CNTR FOR SYMBOL TBL (SYMK)
2899  04775         FEXP  EQU SYMI
2900  04776         SYMP  EQU #+133B   SYMBOL LNG/ AND LOC'N
2901  05000         TEST  EQU #+135B   TEST CHARACTER 
2902  05002         ENT.  EQU #+137B
2903  05003         ENTC  EQU #+140B
2904  05004         ENTV  EQU #+141B
2905  05002         DEXP  EQU ENT.
2906  05003         CNVT  EQU ENTC      ASCN
2907  05004         SDSIG EQU ENTV      ASCN - SAVE SIGN OF MANTISSA
2908  05004         DFCNT EQU ENTV
2909*             * I/O STATEMENT BUFFER *
2910  05005         IOBF  EQU #+142B    50 WORDS + END OF STATEMENT BUFF
2911*             *(INPUXFFER(BUFF) STARTS IN 11TH WORD)* 
2912  05017         BUFF EQU IOBF+12B 
2913  05070         PBUF  EQU #+225B    60 WORD PUNCH BUFFER
2914                      END ASMB
**  NO ERRORS*




































$END ASMB     

*
--> Assemble 20874-60002_ASMBD
ON,ASMB,99







 PAGE 0001


0001                ASMB,R,B,L,Z,C DOS/RT ASSEMBLER FEBRUARY 1970 
**  NO ERRORS*





























































 PAGE 0002 #01  ***  DOS/RT ASMBD  FALL 1971  *** 


0001                ASMB,R,B,L,Z,C DOS/RT ASSEMBLER FEBRUARY 1970 
0003  00000               NAM ASMBD,5,99
0004                      ENT ASMBD 
0005                      EXT ?ASMB,?BPKU,?PKUP,?RSTA,?SETM,?SEGM,?ASM1 
0006                      EXT ?MESX,?BFLG,?LFLG,?TFLG,?FLGS,?AFLG 
0007                      EXT ?X,?Z,?LWA,?RFLG,?ICSA,?LSTL,?SECT
0008                      EXT ?LGFL,?LUNI,?XRFI,?NEAU,?HA38 
0009                      EXT ?FP,?FPT
0010*             ****************************
0011*             * TEMPORARY AND FLAG REGION*
0012*             ****************************
0013  00001         B     EQU 1 
0014  00000 000000  TEMP  BSS 7 
0015                      SUP  SUPPRESS EXTENDED LISTING
0016  00007 000001  ...1  DEC 1,2,3,4,5,6,7 
0017  00016 000014  .12   DEC 12,13,14,15,16,17 
0018  00024 177777  ..M1  DEC -1,-2,-3,-4,-5,-6 
0019  00032 000050  L     OCT 50,51,52,53,54,55,56  ( ) * + , - . 
0020  00041 000011  .9    DEC 9 
0021  00042 000035  .29   DEC 29  (35B) 
0022  00043 177770  .M8   DEC -8
0023  00044 177761  .M15  DEC -15 
0024  00045 177743  .M29  DEC -29 
0025  00046 000040  BLNK  OCT 40        LOWER BLANK,UPPER 0 (=40B)
0026  00047 044514  .IL   ASC 1,IL
0027  00050 046440  .MBLN ASC 1,M 
0028  00051 047117  .NO   ASC 1,NO
0029  00052 047520  .OP   ASC 1,OP
0030  00053 047526  .OV   ASC 1,OV
0031  00054 052516  .UN   ASC 1,UN
0032  00055 020040  BLNS  ASC 1,        ASCII BLANKS
0033  00056 176000  TW10  OCT 176000    ADDRESS MASK
0034  00057 001000  .1000 OCT 1000
0035  00060 100000  BIT15 OCT 100000
0036  00061 000105  .E    OCT 105 
0037  00062 000102  .B    OCT 102 
0038  00063 000064R       DEF *+1  ADDR OF RC 
0039  00064 042440  RC    ASC 5,E R B C X 
0040  00007         .1    EQU ...1
0041  00071 000072R NAMI  DEF NAME      LOC'N FOR TEMP SYMBOL STARAGE 
0042  00072 000000  NAME  OCT 0,0,0,0   OPLK UXAGE
0043  00000         #     EQU TEMP     SAME AS DATA ORIGIN
0044  00076 000000        BSS 36          FOR TEMPORARY BELOW 
0045  00115         PASS  EQU #+115B   PASS FLAG(0=PASS 1  AND 1=PASS2) 
0046  00117         PLCN  EQU #+117B   PROGRAM LOCATION COUNTER 
0047  00120         PLEN  EQU #+120B LIT LENGTH PASS 1/LIT ORG PASS 2 
0048  00121         PNTR  EQU #+121B L POINTS AT LAST OER CURRENT CHAR. 

0050*             * I/O STATEMENT BUFFER *
0051*             *(INPUXFFER(BUFF) STARTS IN 11TH WORD)* 
0052  00142 000000  IOBF  BSS 63B 50 WRDS+EOS BUFF. 
0053  00154         BUFF  EQU IOBF+12B  
0054  00225 010400  PBUF  OCT 10400,20000,0  START OF PUNCH BUFR(NAM FMT
0055  00230 020040        ASC 3,
0056  00233 000000        OCT 0,0,0,0,143,0,0,0,0,0,0 
0057  00246 000000        BSS 43        REST OF PUNCH BUFFER







 PAGE 0003 #01  ***  DOS/RT ASMBD  FALL 1971  *** 


0059  00321 005757        OCT 5757      FOR ASMB CHECK
0060  00322 062022X ASMBD LDA ?ICSA 
0061  00323 003004        CMA,INA 
0062  00324 072023X       STA ?LSTL 
0063  00325 002400        CLA 
0064  00326 072115R       STA PASS      SET PASS FLAG=0 (PASS 1)
0065  00327 016004X       JSB ?RSTA     READ AND PRINT CONTROL STATEMENT
0066* 
0067*             * TEST FOR 'ASMB' IN FIRST 4 POSITIONS *
0068* 
0069  00330 062154R       LDA BUFF
0070  00331 003004        CMA,INA 
0071  00332 042155R       ADA BUFF+1  
0072  00333 052321R       CPA ASMBD-1   =5757B (I.E. =ASMB?)
0073  00334 026341R       JMP COPS      YES 
0074* 
0075*             * CONTROL STATEMENT ERROR ROUTINE * 
0076* 
0077  00335 062602R CSER  LDA .CS       'CONTROL' STATEMENT'ERROR 
0078  00336 066603R       LDB .CS+1 
0079  00337 016010X       JSB ?MESX     PRINT MESSAGE 
0080  00340 026001X       JMP ?ASMB     ASSEMBLER EXIT
0081* 
0082*             * TEST FOR CONTROL OPTIONS (A,B,L,R,T)
0083* 
0084  00341 062013R COPS  LDA .1+4      (5) 
0085  00342 072121R       STA PNTR  SET PNTR = 5  
0086  00343 002400        CLA           INITIALIZE
0087  00344 072415R       STA XFOPT       X OR F OPTION COUNT 
0088  00345 016003X COPUP JSB ?PKUP     GET NEXT CHARACTER
0089  00346 052046R       CPA BLNK  DONE ?  
0090  00347 026526R       JMP G  YES
0091  00350 002003        SZA,RSS   CHAR=0? 
0092  00351 026526R       JMP G     YES, 0K 
0093  00352 052036R       CPA L+4 COMMA?
0094  00353 002001        RSS        -YES-  
0095  00354 026335R       JMP CSER  -NO- ERROR  
0096  00355 016002X       JSB ?BPKU     SKIP BLANKS 
0097  00356 066014X       LDB ?FLGS     LOC'N OF CONTROL CHAR SET 
0098  00357 052062R       CPA .B        =B? (PUNCH) 
0099  00360 026401R       JMP BCON      YES 
0100  00361 052404R       CPA .L        =L? (LIST)
0101  00362 006004        INB 
0102  00363 052406R       CPA .R        =R? (RELOC.-NOT NECESSARY)
0103  00364 046010R       ADB ...1+1 YES
0104  00365 052407R       CPA .T        =T? (SYMBOL TABLE PRINT)
0105  00366 046011R       ADB ...1+2 YES
0106  00367 052405R       CPA .N       IS IT FOR IFN? 
0107  00370 046012R       ADB ...1+3 YES
0108  00371 052410R       CPA .Z       IS IT FOR IFZ? 
0109  00372 046012R       ADB .1+3
0110  00373 052411R       CPA .A        =A? (ABSOLUTE ASSEMBLY?)
0111  00374 046013R       ADB .1+4      YES 
0112  00375 052412R       CPA .C       =C? (CROSS REF. TABLE?)
0113  00376 046014R       ADB .1+5      YES(HOWEVER, IGNORED BY RTS)
0114  00377 056014X       CPB ?FLGS     SKIP IF ANY OPTION FOUND







 PAGE 0004 #01  ***  DOS/RT ASMBD  FALL 1971  *** 


0115  00400 026466R       JMP XTST     NO NICE MATCH SO FAR 
0116  00401 170001  BCON  STA 1,I SET OPTION FLAG 
0117  00402 036121R       ISZ PNTR BUMP PNTR FOR NEXT CHAR. 
0118  00403 026345R       JMP COPUP     GO FOR NEXT OPTION
0119  00404 000114  .L    OCT 114 
0120  00405 000116  .N    OCT 116       'N' 
0121  00406 000122  .R    OCT 122       ASCII 'R' 
0122  00407 000124  .T    OCT 124       ASCII 'T' 
0123  00410 000132  .Z    OCT 132       'Z' 
0124  00411 000101  .A    OCT 101       'A' 
0125  00412 000103  .C    OCT 103 
0126  00413 000130  .X    OCT  130
0127  00414 000106  .F    OCT 106 
0128  00415 000000  XFOPT DEC 0 
0129  00416 177764  CNTX  DEC -12 
0130  00417 000032X DESTN DEF ?FP 
0131  00420 043111  AS.FI OCT 43111 
0132  00421 000033X DESLO DEF ?FPT
0133  00422 000423R MVLC  DEF *+1 
0134  00423 043101        OCT 43101,42026,105000,43104,53026,105060 
0135  00431 043115        OCT 43115,50026,105040,43123,41026,105020 
0136  00437 000000  CS.CK NOP 
0137  00440 062415R       LDA XFOPT     LOAD A WITH OPTION FLAG 
0138  00441 002002        SZA           SKIP IF FLAG 0
0139  00442 026335R       JMP CSER      IF 1 PRINT CS ERROR 
0140  00443 002004        INA           INCREMENT VALUE OF FLAG 
0141  00444 072415R       STA XFOPT     SAVE IN FLAG POSITION 
0142  00445 126437R       JMP CS.CK,I   RETURN
0143  00446 016437R FMOVE JSB CS.CK     GO CHECK LEGAL OPTION 
0144  00447 066417R       LDB DESTN     LOAD B WITH TABLE POINTER 
0145  00450 005665        ELB,CLE,ERB   CLEAR INDIRECT BIT
0146  00451 164001        LDB B,I       PUT POINTER ADDR. IN B
0147  00452 062420R       LDA AS.FI     LOAD A WITH ASCII "FI"
0148  00453 170001        STA B,I       STORE IN FIX PART OF TABLE
0149  00454 066421R       LDB DESLO     LOAD B WITH SECOND TABLE POINTER
0150  00455 005665        ELB,CLE,ERB   CLEAR INDIRECT BIT
0151  00456 164001        LDB B,I       PUT POINTER ADDR. IN B
0152  00457 162422R TMOV2 LDA MVLC,I    LOAD FIRST WORD 
0153  00460 170001        STA B,I       STORE IN TABLE
0154  00461 036422R       ISZ MVLC      INCREMENT TO NEXT WORD
0155  00462 006004        INB           INCREMENT POINTER 
0156  00463 036416R       ISZ CNTX      INCREMENT COUNT, SKIP IF 0
0157  00464 026457R       JMP TMOV2     RETURN FOR NEXT WORD
0158  00465 026402R       JMP BCON+1    RETURN
0159* 
0160  00466 052414R XTST  CPA .F        IS OPTION =F
0161  00467 026446R       JMP FMOVE     YES, GO CHANGE TABLE
0162  00470 052413R       CPA .X        IS OPTION =X
0163  00471 026473R       JMP TMOVE     YES, GO CHANGE TABLE
0164  00472 026335R       JMP CSER      NO, PRINT CONTROL STATEMENT ERR 
0165  00473 016437R TMOVE JSB CS.CK     CHECK IF F BEFORE 
0166  00474 066507R       LDB DESLC     MOVE N-EAU OPCODE VALUES
0167  00475 005665        ELB,CLE,ERB   CLEAR INDIRECT BIT FROM TBL PNTR
0168  00476 164001        LDB B,I       PUT POINTER ADDRESS IN B
0169  00477 162510R TMOV1 LDA MOVLC,I    OPCODE TABLE IN ASMB.. 
0170  00500 170001        STA B,I       STORE NEW VALUE INTO OPCODE TBL.







 PAGE 0005 #01  ***  DOS/RT ASMBD  FALL 1971  *** 


0171  00501 036510R       ISZ MOVLC 
0172  00502 006004        INB           BUMP TABLE POINTER
0173  00503 036506R       ISZ COUNX    IS TABLE ALL MOVED?
0174  00504 026477R       JMP TMOV1    NO,  GO MOVE ANOTHER WORD. 
0175  00505 026402R       JMP BCON+1
0176  00506 177763  COUNX DEC -13      LENGTH OF NEW TABLE
0177  00507 000030X DESLC DEF ?NEAU    LOCATION OF OPCODE VALUE DESTIN. 
0178  00510 000511R MOVLC DEF *+1      NON-EAU OPCODE VALUES FOR TABLE. 
0179  00511 042111        OCT 42111,53006    DIV
0180  00513 000031X       DEF ?HA38 
0181  00514 042114        OCT 42114,42006    DLD
0182  00516 000031X       DEF ?HA38 
0183  00517 042123        OCT 42123,52006    DST
0184  00521 000031X       DEF ?HA38 
0185  00522 046520        OCT 46520,54406    MPY
0186  00524 000031X       DEF ?HA38 
0187  00525 000000        OCT 0        END OF NEW TABLE 
0188*             * TEST FOR COMPATABILITY AMONG THE OPTIONS *
0189* 
0190  00526 066011X G     LDB ?BFLG     PUNCH FLG 
0191  00527 046012X       ADB ?LFLG     LIST FLG
0192  00530 046013X       ADB ?TFLG    'T' FLG
0193  00531 046025X       ADB ?LGFL     LOAD/GO FLAG
0194  00532 006003       SZB,RSS
0195  00533 026335R      JMP CSER  ERROR - NO OUTPUT OPTION 
0196  00534 066015X       LDB ?AFLG 
0197  00535 062021X       LDA ?RFLG 
0198  00536 006003        SZB,RSS      'A' SET? 
0199  00537 026542R       JMP *+3       NO
0200  00540 002002        SZA           YES-IS 'R' SET? 
0201  00541 026335R       JMP CSER      YES - CONTROL CONFLICT
0202  00542 062016X       LDA ?X        GET FWA OF AVAILABLE CORE 
0203  00543 006002        SZB           'A' SET?
0204  00544 062017X       LDA ?Z        YES - GET FWA FOR ABS. ASSMBLY. 
0205  00545 003004       CMA,INA
0206  00546 042020X       ADA ?LWA      LWA-FWA AVAIL MEM. IN A 
0207  00547 002004       INA      A NOW = SYMBOL TBL LENGTH 
0208* 
0209*         * CLEAR SYMBOL TABLE *
0210* 
0211  00550 002300        CCE           E=1 
0212  00551 006002        SZB           ABS. ASSY?
0213  00552 000040        CLE           YES - E=0 
0214  00553 066017X       LDB ?Z        GET FWA OF ABSOL ASSY.
0215  00554 002040        SEZ           SKIP IF ABS. ASSY.
0216  00555 066016X       LDB ?X        FWA OF SYM TBL TO 'B' 
0217  00556 016005X       JSB ?SETM 
0218  00557 000000        NOP           SET SYMBOL TABLE TO ZERO
0219*             ********************* 
0220*             * START PASS 1 HERE * 
0221*             ********************* 
0222  00560 062026X       LDA ?LUNI    GET INPUT LUN
0223  00561 052010R       CPA .1+1     IS IT THE DISC?
0224  00562 002001        RSS          YES
0225  00563 002400        CLA          NO 
0226  00564 072027X       STA ?XRFI    SET XREF INPUT FLAG... 







 PAGE 0006 #01  ***  DOS/RT ASMBD  FALL 1971  *** 


0227  00565 062056R       LDA TW10
0228  00566 072007X       STA ?ASM1     SET FLAG FOR 'INIT' PROCESSING
0229  00567 002400        CLA 
0230  00570 072115R       STA PASS      SET PASS 'FLAG FOR PASS 1 
0231  00571 072117R       STA PLCN      INITIALIZE PROG LOC'N COUNTER 
0232  00572 072120R       STA PLEN      CLEAR LITERAL LENGTH FLAG 
0233  00573 062601R       LDA ABSA      SEG. CALL FOR ABSOLUTE
0234  00574 066015X       LDB ?AFLG 
0235  00575 006003        SZB,RSS       ABS. ASSY? - SKIP IF TRUE.
0236  00576 062600R       LDA *+2        PICK UP CODE FOR ASMB1 
0237  00577 026006X       JMP ?SEGM     GO TO LOAD THE NEXT SEGMENT 
0238  00600 030440        ASC 1,1 
0239  00601 032040  ABSA  ASC 1,4 
0240  00602 041523  .CS   ASC 2,CS
0241                      END ASMBD 
**  NO ERRORS*








































$END ASMB     

*
--> Assemble 20874-60003_ASMB1
ON,ASMB,99







 PAGE 0001


0001                ASMB,L,B,C     DOS/RT ASSEMBLER FEBRUARY 1970 
**  NO ERRORS*





























































 PAGE 0002 #01  *** DOS/RTE ASMB1  FALL 1971 ***


0001                ASMB,L,B,C     DOS/RT ASSEMBLER FEBRUARY 1970 
0003  00000               NAM ASMB1,5,99
0004                      ENT ASMB1 
0005                      ENT ?LITI,?CMQ,?INSR,?HA3Z,?ENP,?EXP
0006                      EXT ?RSTA,?ERPR,?MOVE,?CHPI,?OPER,?PLIT,?ORGS 
0007                      EXT ?ASCN,?BPKU,?MSYM,?PKUP,?SYMK,?CHOP,?ENDS 
0008                      EXT ?DRFL,?MSYS,?ASMB,?SEGM,EXEC,?PNCH,?X 
0009                      EXT ?ICSA,?BFLG,?LFLG,?TFLG,?LTFL,?CNTR,?PNLE 
0010                   EXT ?V,?ARTL,?ASM1,?ORRP,?BNCN,?DCOD,?MESX,?PRNT 
0011                      EXT ?LABE,?LWA,?TSTR,?WEOF,?RDSC
0012                      EXT ?RLUN,?LUNI,?LGFL 
0013                      SUP 
0014  00000 000000  TEMP  BSS 225B      RESERVE TEMPORARY AREA
0015  00000         #     EQU TEMP     SAME AS DATA ORIGIN
0016  00001         VAL0  EQU TEMP+1    'ASCN' AND  'SYMK'
0017  00004         DCNT  EQU TEMP+4
0018  00007         ...1  EQU TEMP+7
0019  00007         .1    EQU ...1
0020  00016         .12   EQU .1+7
0021  00024         ..M1  EQU .12+6 
0022  00032         L     EQU ..M1+6
0023  00041         .9    EQU #+41B 
0024  00042         .29   EQU #+42B 
0025  00044         .M15  EQU #+44B 
0026  00045         .M29  EQU #+45B 
0027  00046         BLNK  EQU #+46B     =40B(LOWER BLANK) 
0028  00047         .IL   EQU #+47B 
0029  00050         .MBLN EQU #+50B 
0030  00051         .NO   EQU #+51B 
0031  00055         BLNS  EQU #+55B 
0032  00060         BIT15 EQU #+60B 
0033  00061         .E    EQU #+61B 
0034  00062         .B    EQU #+62B 
0035  00071         NAMI  EQU #+71B    LOC'N FOR TEMP SYMBOL STORAGE
0036  00072         NAME  EQU #+72B    FOR USE BY 'OPLK'
0037  00100         SUMP  EQU #+100B   RUNNING SUM FOR 'CHOP' 
0038  00105         CFRA  EQU #+105B   'ASCN' 
0039  00106         CNTB  EQU #+106B
0040  00107         CODE  EQU #+107B   OPCODE TYPE(FROM OPTABLE)
0041  00105         FLEX  EQU CFRA     (ASCN) 
0042  00113         INST  EQU #+113B   OPCODE FORMAT
0043  00114         LAST  EQU #+114B
0044  00116         PEEK  EQU #+116B   LAST CHAR PICKED UP
0045  00117         PLCN  EQU #+117B   PROGRAM LOCATION COUNTER 
0046  00120         PLEN  EQU #+120B LIT LENGTH PASS 1/LIT ORG PASS 2 
0047  00121         PNTR  EQU #+121B L POINTS AT LAST OER CURRENT CHAR. 
0048  00125         SCN1  EQU #+125B   STATE LNG/OPCODE/OPERAND/LABEL(4)
0049  00132         SYMI  EQU #+132B   ADDR CNTR FOR SYMBOL TBL (SYMK)
0050  00133         SYMP  EQU #+133B   SYMBOL LNG/ AND LOC'N
0051  00135         TEST  EQU #+135B   TEST CHARACTER 
0052  00137         ENT.  EQU #+137B
0053  00140         ENTC  EQU #+140B
0054  00141         ENTV  EQU #+141B
0055*             * I/O STATEMENT BUFFER *
0056  00142         IOBF  EQU #+142B    50 WORDS + END OF STATEMENT BUFF
0057*             *(INPUXFFER(BUFF) STARTS IN 11TH WORD)* 







 PAGE 0003 #01  *** DOS/RTE ASMB1  FALL 1971 ***


0058  00154         BUFF EQU IOBF+12B 
0059  00225 000000  PBUF  BSS 17        SAVES THE 'NAN' RECORD INFO 
0060  00225         WCNT  EQU PBUF  WORD(BLK) CNT FOR BIN.RECRD.

0062  00010         ASCN  EQU ?ASCN 
0063  00027         BFLAG EQU ?BFLG 
0064  00011         BPKUP EQU ?BPKU 
0065  00004         CHOPI EQU ?CHPI 
0066  00033         CNTR  EQU ?CNTR 
0067  00002         ERPR  EQU ?ERPR 
0068  00030         LFLAG EQU ?LFLG 
0069  00032         LTFLG EQU ?LTFL 
0070  00003         MOVE  EQU ?MOVE 
0071  00012         MSYM  EQU ?MSYM 
0072  00020         MSYMS EQU ?MSYS 
0073  00005         OPERR EQU ?OPER 
0074  00007         ORGSV EQU ?ORGS 
0075  00013         PKUP  EQU ?PKUP 
0076  00024         PNCH  EQU ?PNCH 
0077  00001         RSTA  EQU ?RSTA 
0078  00025         X     EQU ?X

0080  00246 016001X ASMB1 JSB RSTA
0081  00247 062107R       LDA CODE
0082  00250 052021R       CPA .12+3 'HED' STATE?
0083  00251 026260R       JMP IXH   YES 
0084  00252 072037X       STA ?ASM1     CLEAR 'CS' AND 'INIT' FLAGS 
0085  00253 052017R       CPA .12+1  (13) NAM ? 
0086  00254 026264R       JMP HI12
0087* 
0088*             * NO NAM OR ORG * 
0089* 
0090  00255 062051R       LDA .NO       'NO'= NO ORG OR NAM STATEMENT 
0091  00256 016002X      JSB ERPR 
0092  00257 026334R       JMP HA32+1
0093  00260 116113R IXH   JSB INST,I  GO TO HEDSB 
0094  00261 026246R       JMP ASMB1 
0095* 
0096*             * PROCESS NAME FOR BINARY RECORD *
0097* 
0098  00262 000000  PNSAV OCT 0,0       FOR USE IN 'NAM' SETUP
0099  00264 066127R HI12  LDB SCN1+2
0100  00265 016012X       JSB MSYM      MEASURE THE NAME
0101  00266 076274R       STB HI14
0102  00267 072262R       STA PNSAV     SAVE # OF CHARS IN THE PARAMETER
0103  00270 066135R       LDB TEST      GET CONTINUATOR 
0104  00271 076263R       STB PNSAV+1   AND SAVE IT 
0105  00272 066435R       LDB CSAD
0106  00273 016003X       JSB MOVE      MOVE IT TO THE 'NAM' RECORD 
0107  00274 000000  HI14  NOP 
0108  00275 062263R       LDA PNSAV+1   GET THE CONTINUATOR 
0109  00276 052036R       CPA L+4       COMMA?(ANOTHER PARAMETER?)
0110  00277 002001        RSS           YES 
0111  00300 026325R       JMP HI16      NO - GO TEST FOR END
0112  00301 062262R       LDA PNSAV     GET # OF CHARS IN CURRENT PARAME
0113  00302 042121R       ADA PNTR







 PAGE 0004 #01  *** DOS/RTE ASMB1  FALL 1971 ***


0114  00303 002004        INA 
0115  00304 072121R       STA PNTR      SET POINTER TO NEXT PARAMETER 
0116  00305 016011X       JSB BPKUP     SCAN TO NEXT PARAM. 
0117  00306 016012X       JSB MSYM      MEASURE IT
0118  00307 072262R       STA PNSAV     SAVE # OF CHARS IN THE PARAMETER
0119  00310 001727        ALF,ALF 
0120  00311 002004        INA           FOR DECIMAL CONV
0121  00312 001727        ALF,ALF       POSITION IT 
0122  00313 070001        STA 1         PARAM. FOR 'ASCN' TO 'B' REG. 
0123  00314 062135R       LDA TEST      GET CONTINUATOR 
0124  00315 072263R       STA PNSAV+1   AND SAVE IT 
0125  00316 062121R       LDA PNTR      GET POSITION OF NUMBER
0126  00317 016010X       JSB ASCN      GO CONVERT THE NUMBER 
0127  00320 002400        CLA           ERROR RETURN, SET 'A' =0
0128  00321 172324R       STA PBF9,I
0129  00322 036324R       ISZ PBF9
0130  00323 026275R       JMP HI14+1
0131  00324 000236R PBF9  DEF PBUF+9
0132  00325 052046R HI16  CPA BLNK      LEGAL?
0133  00326 002001        RSS           YES 
0134  00327 016005X       JSB OPERR     NO - PRINT 'M' ERROR
0135  00330 062236R       LDA PBUF+9
0136  00331 002003        SZA,RSS       IS TYPE=0(SYSTEM)?
0137  00332 072237R       STA PBUF+10   YES,  SET PRIORITY = 0. 
0138  00333 016001X HA32 JSB RSTA 
0139  00334 062107R       LDA CODE
0140  00335 052016R       CPA .12 
0141  00336 027032R      JMP HB00 TO END
0142  00337 052046R       CPA BLNK      (40B)  SUP/UNS? 
0143  00340 026333R       JMP HA32
0144  00341 042026R       ADA ..M1+2  -3
0145  00342 002020        SSA 
0146  00343 027022R       JMP HA64 ORR/ORB/ORG
0147  00344 052432R       CPA .12B      NAM?
0148  00345 026601R       JMP HA63     YES, ERROR 
0149  00346 042026R       ADA ..M1+2 (-3) 
0150  00347 002020        SSA      'COM','ENT' OR 'EXT' ? 
0151  00350 126113R       JMP INST,I    JUMP TO ROUTINE DESIGNATED IN IN
0152  00351 052013R       CPA ...1+4  'EQU'?
0153  00352 027005R      JMP HA56 TO EQU
0154  00353 052041R       CPA .9        (11B)  HED? 
0155  00354 026333R       JMP HA32
0156  00355 052016R       CPA .12  (14B) SKP? 
0157  00356 026333R       JMP HA32
0158  00357 052017R       CPA .12+1 (15B) SPC?
0159  00360 026333R       JMP HA32
0160  00361 052020R       CPA .12+2 (16B) LST/UNL?
0161  00362 026333R       JMP HA32
0162* 
0163*             * TEST FOR LABEL FIELD
0164  00363 016045X      JSB LABEL
0165  00364 062107R      LDA CODE  OPCODE INDICATOR 
0166  00365 052434R       CPA DEX 
0167  00366 026723R       JMP HA40      IT'S A 'DEX'
0168  00367 052042R       CPA .29  REP? 
0169  00370 027022R       JMP HA64  YES 







 PAGE 0005 #01  *** DOS/RTE ASMB1  FALL 1971 ***


0170  00371 052015R       CPA ...1+6  (7) 
0171  00372 026770R      JMP HA54 TO ASC
0172  00373 052412R       CPA .26B     INTEGER ARITH(HARDWARE)? 
0173  00374 027024R       JMP HA70     YES....
0174  00375 052014R       CPA ...1+5  (6) ARITH MACRO?
0175  00376 126113R       JMP INST,I    YESM JUMP TO PROCESS IT.. 
0176  00377 042433R       ADA .M10      -10 
0177  00400 002020       SSA OCT OR DEC?
0178  00401 026723R      JMP HA40   YES.
0179  00402 002003       OCT 2003 BSS?
0180  00403 026413R       JMP HA3M  TO BSS PROC.
0181  00404 052012R       CPA ...1+3 (4) MEM REF? 
0182  00405 026417R       JMP HA3L  YES,TEST FOR LITERAL
0183  00406 002404  HA3B CLA,INA  TO ADD 1 TO PLCN
0184* 
0185*             * INCREMENT PROGRAM LOCN. CNTR. * 
0186* 
0187  00407 042117R HA3Z  ADA PLCN   (HA3B+1) 
0188  00410 072117R      STA PLCN 
0189  00411 026333R      JMP HA32 
0190  00412 000026  .26B  OCT 26       FOR HARDWARE ARITHMETIC

0192*             * PROCESS BSS * 
0193* 
0194  00413 016004X HA3M  JSB CHOPI EVAL.OPERAND
0195  00414 026333R      JMP HA32  ERROR
0196  00415 060001        LDA 1   B TO A
0197  00416 026407R       JMP HA3B+1
0198  00417 062032X HA3L  LDA LTFLG 
0199  00420 002003        SZA,RSS  LITERAL PRESENT
0200  00421 026406R       JMP HA3B  NO
0201  00422 062113R       LDA INST
0202  00423 000010        SLA    IS LITERAL LEGAL WITH INST?
0203  00424 026427R       JMP *+3   YES 
0204  00425 016005X       JSB OPERR  NO 'M' ERROR 
0205  00426 026406R       JMP HA3B
0206  00427 016006X       JSB ?PLIT     PROCESS LITERAL 
0207  00430 000000        NOP           IGNORE ERROR
0208  00431 026406R       JMP HA3B
0209  00432 000012  .12B  OCT 12
0210  00433 177766  .M10  DEC -10 
0211  00434 000025  DEX   OCT 25        OP TYPE FOR 'DEX' 
0212  00435 000230R CSAD  DEF PBUF+3   POINTS AT PUNCHBUFFER
0213  00436 000000  ENFLG NOP           FLAG FOR PROCESSING ENTRY POINTS
0214  00437 000000  S     BSS 1 


















 PAGE 0006 #01  *** DOS/RTE ASMB1  FALL 1971 ***


0216* PROCESS 'COMMON' DECLARATION
0217  00440 062127R CMQ   LDA SCN1+2
0218  00441 072121R       STA PNTR      SET POINTER 
0219  00442 072135R      STA TEST  SET TEST (U) = 0.
0220  00443 066121R       LDB PNTR
0221  00444 016020X       JSB MSYMS    SET SYMP/SYMN
0222  00445 016573R       JSB SPNTR     ALIGN POINTER 
0223  00446 166524R       LDB PBF10,I 
0224  00447 076437R       STB S 
0225  00450 066135R      LDB TEST 
0226  00451 056036R       CPB L+4  COMMA? 
0227  00452 026521R       JMP HM2  YES
0228  00453 056046R      CPB BLNK 
0229  00454 026521R       JMP HM2 IT'S = BLANK
0230  00455 056032R       CPB L LEFT PAREN? 
0231  00456 002001       RSS       = (
0232  00457 027002R       JMP HA55+1  ERROR 1ST PASS
0233  00460 016011X      JSB BPKUP  SKIP BLANKS 
0234  00461 076001R      STB TEMP+1  SAVE POINTER 
0235  00462 016012X      JSB MSYM  MEASURE COM LENGTH 
0236  00463 072000R       STA TEMP SAVE NUMBER OF CHARACTERS
0237  00464 016573R       JSB SPNTR     ALIGN POINTER 
0238  00465 062135R      LDA TEST 
0239  00466 052033R       CPA L+1 RT PAREN? 
0240  00467 002001       RSS       = )
0241  00470 027002R       JMP HA55+1  1ST PASS ERROR
0242  00471 072116R      STA PEEK 
0243  00472 066000R      LDB TEMP 
0244  00473 062114R      LDA LAST 
0245  00474 046024R      ADB ..M1  LENGTH-1 TO B REG
0246  00475 052062R       CPA .B        =B? (OCTAL VALUE) 
0247  00476 002001       RSS       YES-SKIP 
0248  00477 047347R       ADB .401B     NO, SET FOR DECIMAL 
0249  00500 062001R      LDA TEMP+1 
0250  00501 016010X       JSB ASCN      GO TO ASCII CONVERSION ROUTINE
0251  00502 026333R       JMP HA32  ERROR EXIT
0252  00503 142524R       ADA PBF10,I   BUMP LENGTH OF OOMMON 
0253  00504 172524R       STA PBF10,I 
0254*              INSERT 
0255  00505 062011R HM3   LDA ...1+2 SET RELOC=COMMON 
0256  00506 066437R       LDB S  VALUE TO B 
0257  00507 016606R       JSB INSR  INSERT SYMBOL 
0258  00510 000000        NOP   ERROR EXIT
0259  00511 062116R      LDA PEEK 
0260  00512 052046R      CPA BLNK  BLANK? 
0261  00513 026333R       JMP HA32   YES, EXIT TO HA32
0262  00514 052036R       CPA L+4  COMMA? 
0263  00515 002001       RSS       YES
0264  00516 016013X      JSB PKUP  GET NEXT CHAR
0265  00517 016560R       JSB ENDTS     TEST FOR TERMINATION
0266  00520 026442R       JMP CMQ+2 
0267  00521 136524R HM2   ISZ PBF10,I 
0268  00522 076116R      STB PEEK  SAVE TEST
0269  00523 026505R       JMP HM3 
0270  00524 000235R PBF10 DEF PBUF+10B  L(PBUF+10B) 








 PAGE 0007 #01  *** DOS/RTE ASMB1  FALL 1971 ***


0272*             * PROCESS 'EXT' DECLARATION * 
0273  00525 062127R EXP   LDA SCN1+2
0274  00526 072121R       STA PNTR      SET POINTER 
0275  00527 066121R       LDB PNTR
0276  00530 016020X       JSB MSYMS  SET SYMP/SYMN
0277  00531 016573R       JSB SPNTR     ALIGN POINTER 
0278  00532 066033X      LDB CNTR  VALUE TO B 
0279  00533 062012R       LDA ...1+3 (4) EXT INDIC. 
0280  00534 016606R       JSB INSR      GO TO INSERTION ROUTINE 
0281  00535 026537R       JMP *+2  ERROR EXIT 
0282  00536 036033X      ISZ CNTR  BUMP EXT CNTR
0283  00537 062135R      LDA TEST 
0284  00540 016560R       JSB ENDTS  TEST FOR TERMINATION 
0285  00541 026527R       JMP EXP+2     GO BACK, THERE'S ANOTHER 'EXT'!!
0286* 
0287*             * PROCESS 'ENT' DECLARATION * 
0288  00542 062600R ENP   LDA .10B     SET ENFLG = 10B
0289  00543 072436R       STA ENFLG 
0290  00544 062127R       LDA SCN1+2
0291  00545 072121R       STA PNTR      SET POINTER 
0292  00546 066121R ENP1  LDB PNTR
0293  00547 016020X       JSB MSYMS 
0294  00550 016573R       JSB SPNTR     ALIGN POINTER 
0295  00551 062600R        LDA .10B 
0296  00552 006400        CLB 
0297  00553 016606R       JSB INSR      INSERT INTO THE SYMBOL TABLE
0298  00554 000000        NOP 
0299  00555 062135R       LDA TEST
0300  00556 016560R      JSB ENDTS  TEST FOR TERMINATION
0301  00557 026546R       JMP ENP1
0302  00560 000000  ENDTS NOP       TEST FOR TERMINATION
0303  00561 052046R       CPA BLNK    OF COM,ENT OR EXT 
0304  00562 026570R       JMP HA55E 
0305  00563 052036R       CPA L+4 COMMA?
0306  00564 002001        RSS         YES 
0307  00565 027002R       JMP HA55+1    NOT AN ERROR EXIT 
0308  00566 016011X       JSB BPKUP  SCAN TO NEXT CHAR. 
0309  00567 126560R       JMP ENDTS,I 
0310  00570 002400  HA55E CLA 
0311  00571 072436R       STA ENFLG     CLEAR 'ENT'FLAG 
0312  00572 026333R       JMP HA32      EXIT ON A BLANK 

0314*        * PNTR+1+'A' TO PNTR * 
0315* 
0316  00573 000000  SPNTR NOP 
0317  00574 042121R    ADA PNTR 
0318  00575 002004     INA
0319  00576 072121R    STA PNTR 
0320  00577 126573R       JMP SPNTR,I 
0321  00600 000010  .10B  OCT 10


0323  00601 062047R HA63  LDA .IL       NAM IS ILLEGAL AFTER START
0324  00602 027003R       JMP HA55+2  TO ERPR 









 PAGE 0008 #01  *** DOS/RTE ASMB1  FALL 1971 ***


0326*        *************************************************
0327*        * INSR: ADD ENTRY TO THE SYMBOL TABLE, W HACCOU *
0328*        *  LINKAGE: A = TYPE   B = VALUE ON INPUT       *
0329*        *   (OUTPUT) SYMP=NO.OF CHARS., SYMN=ENTRY FWA  *
0330*        *            L    JSB INSR,I                    *
0331*        *           L+1   ERROR RETN ('SO' OR 'DD'PRNTD)*
0332*        *           L+2   NORMAL RETN                   *
0333*        *************************************************
0334  00603 042516  .EN   ASC 3,ENDDSO
0335  00606 000000  INSR  NOP 
0336  00607 073346R       STA FLX1   SAVE TYPE
0337  00610 076075R      STB NAME+3    SAVE VALUE 
0338  00611 016014X       JSB ?SYMK     SYMBOL TABLE LOOKUP 
0339  00612 026650R      JMP INS1 
0340  00613 012015R       AND ...1+6  GET RELOC VALUE 
0341  00614 066436R       LDB ENFLG 
0342  00615 006003        SZB,RSS       IN ENTRY PROC?
0343  00616 026623R       JMP INSY      NO
0344  00617 052007R INSQ1 CPA .1       RELOCATABLE? 
0345  00620 026702R       JMP INSC      YES 
0346  00621 062603R       LDA .EN       'EN' ENTRY POINT ERROR
0347  00622 026643R       JMP INSX
0348  00623 066105R INSY  LDB FLEX      GET CURRENT FW
0349  00624 005700        BLF 
0350  00625 006021        SSB,RSS       ENTRY POINT?
0351  00626 026636R       JMP INSG      NO
0352  00627 002002        SZA           YES - IS IT IN ALREADY? 
0353  00630 026642R       JMP INSX-1    YES - 'DD' ERROR
0354  00631 062075R       LDA NAME+3
0355  00632 172001R       STA VAL0,I    SET VALUE INTO ENTRY
0356  00633 063346R       LDA FLX1      GET TYPE
0357  00634 064000        LDB 0        REL TYPE TO 'B'
0358  00635 026617R       JMP INSQ1 
0359  00636 052015R INSG  CPA .1+6      LITERAL?
0360  00637 126606R       JMP INSR,I    YES, EXIT 
0361  00640 052012R       CPA ...1+3  EXT?
0362  00641 026645R       JMP *+4     YES, TEST 
0363  00642 062604R       LDA .EN+1     NO, 'DD' ERROR (MULTIPLE SYMBOL)
0364  00643 016002X INSX  JSB ERPR
0365  00644 126606R       JMP INSR,I    GET OUT HERE
0366  00645 053346R       CPA FLX1   ARE BOTH EXT'S?
0367  00646 126606R       JMP INSR,I  YES, FAKE 'DD'EXIT
0368  00647 026642R       JMP *-5    GO TO ERROR PRNT 
0369  00650 063346R INS1  LDA FLX1
0370  00651 001727       OCT 1727      ALF,ALF
0371  00652 042072R      ADA NAME      TYPE IN FIRST WORD 
0372  00653 072072R      STA NAME          OF ENTRY 
0373  00654 066071R      LDB NAMI 
0374  00655 046002R       ADB TEMP+2
0375  00656 076001R       STB VAL0  SET LIMIT 
0376  00657 002400        CLA 
0377  00660 042046X       ADA ?LWA      LWA-FWA AVAIL MEM. IN A 
0378  00661 003004        CMA,INA 
0379  00662 042132R       ADA SYMI  TEST FOR SYMBOL TBL 
0380  00663 042002R       ADA TEMP+2    OVERFLOW
0381  00664 002020       SSA







 PAGE 0009 #01  *** DOS/RTE ASMB1  FALL 1971 ***


0382  00665 026670R      JMP *+3       NO 
0383  00666 062605R       LDA .EN+2     'SO' SYMBOL TABLE OVERFLOW
0384  00667 026643R       JMP INSX 'SO' ERROR 
0385  00670 062075R      LDA NAME+3    MOVE VALUE 
0386  00671 170001        STA 1,I       UP
0387  00672 062071R      LDA NAMI 
0388  00673 164000        LDB 0,I  ADD ENTRY  (FROM *+6)
0389  00674 176132R      STB SYMI,I    TO SYMBOL
0390  00675 052001R       CPA VAL0
0391  00676 026706R       JMP INSEX     EXIT
0392  00677 002004       INA
0393  00700 036132R      ISZ SYMI 
0394  00701 026673R       JMP *-6 
0395  00702 060001  INSC  LDA 1        RELOC TYPE TO 'A'
0396  00703 001727        ALF,ALF      POSITION IT
0397  00704 132004R       IOR TEMP+4,I
0398  00705 172004R       STA TEMP+4,I  SET ENTRY POINT TYPE
0399  00706 036606R INSEX ISZ INSR      BUMP EXIT POINT FOR A+2 EXIT
0400  00707 126606R       JMP INSR,I    EXIT HERE 
0401*          ************************************ 
0402*          * INSERT LITERAL INTO SYMBOL TABLE * 
0403*          ************************************ 
0404  00710 000000  LITIN NOP 
0405  00711 062026X       LDA ?ICSA     GET LOC'N OF ASCI BUFFER
0406  00712 072134R       STA SYMP+1
0407  00713 062015R       LDA ...1+6 (7)
0408  00714 072032X       STA LTFLG 
0409  00715 066120R       LDB PLEN
0410  00716 016606R       JSB INSR    INSERT SYMBOL 
0411  00717 126710R       JMP LITIN,I ERROR RETN. 
0412  00720 036120R       ISZ PLEN  BUMP LITERAL LOC'N CNTR 
0413  00721 036710R       ISZ LITIN 
0414  00722 126710R       JMP LITIN,I  EXIT(NORMAL) 
0415*             *********************** 
0416*             * PROCESS OCT AND DEC * 
0417*             *********************** 
0418  00723 006404  HA40  CLB,INB       B=1 
0419  00724 052434R       CPA DEX       CHECK CODE FOR 'DEX'
0420  00725 046010R       ADB .1+1      B=3 IF CODE IS 'DEX'
0421  00726 076004R       STB DCNT      SET LOCN COUNT BUMPER 
0422  00727 002400        CLA 
0423  00730 072106R      STA CNTB 
0424  00731 072000R       STA TEMP
0425  00732 062127R       LDA SCN1+2
0426  00733 072121R       STA PNTR      SET POINTER 
0427* 
0428*             * PICK UP AND EXAMINE A CHARACTER * 
0429  00734 016013X HA41  JSB PKUP   (HA40+4 WAS HA41)
0430  00735 066004R       LDB DCNT      GET COUNT BUMPER
0431  00736 052036R       CPA L+4   COMMA?
0432  00737 026751R       JMP HA44      YES, GO SCAN FOR NEXT PARAM.
0433  00740 056011R       CPB .1+2      IS IT=3(I.E. DEX)?
0434  00741 026746R       JMP HA42      YES 
0435  00742 052040R       CPA L+6  PERIOD?
0436  00743 026756R      JMP HA48 
0437  00744 052061R       CPA .E        'E' ? 







 PAGE 0010 #01  *** DOS/RTE ASMB1  FALL 1971 ***


0438  00745 026756R      JMP HA48 
0439  00746 052046R HA42  CPA BLNK      END OF STATEMENT? 
0440  00747 026765R       JMP HA49      YES 
0441  00750 026734R       JMP HA41
0442* 
0443*             * RESET FLT PT FLAG, SKIP BLANKS FOR NEXT CHAR *
0444  00751 002400  HA44  CLA 
0445  00752 072000R       STA TEMP
0446  00753 016011X       JSB BPKUP 
0447  00754 066004R       LDB DCNT      GET 'BUMP' COUNT
0448  00755 026762R       JMP HA48+4
0449* 
0450*             * FLT PT TEST FOR NUMBER USING BOTH . AND E * 
0451  00756 062000R HA48  LDA TEMP
0452  00757 036000R       ISZ TEMP
0453  00760 002002        SZA           E OR '.' COUNTED YET? 
0454  00761 006400        CLB           YES, SET B=0. 
0455* 
0456  00762 046106R       ADB CNTB      (HA48+4)
0457  00763 076106R       STB CNTB      ADD TO WORD COUNT 
0458  00764 026734R       JMP HA41
0459* 
0460*             * END OF NUMERIC PSEUDO-OP PROCESSOR *
0461  00765 062004R HA49  LDA DCNT
0462  00766 042106R       ADA CNTB      SET A=NO OF LOCNS TO BE USED
0463  00767 026407R       JMP HA3B+1  EXIT
0464*             ********************************
0465*             * PROCESS ASC (GET VALUE OF N) *
0466*             ********************************
0467  00770 062010R HA54  LDA ...1+1 (2) 'ASC' INDIC.FOR CHOP 
0468  00771 016015X       JSB ?CHOP 
0469  00772 026406R      JMP HA3B ERROR 
0470  00773 002002       SZA
0471  00774 027001R      JMP HA55     ERROR-NOT ABS.VAL.
0472  00775 046045R       ADB .M29      -29 
0473  00776 062100R       LDA SUMP
0474  00777 006020        SSB      SKIP IF >28 WORDS
0475  01000 026407R       JMP HA3B+1
0476  01001 036117R HA55 ISZ PLCN   * ERROR EXIT  * 
0477  01002 062050R       LDA .MBLN     'M' ERROR(BAD OPERAND)
0478  01003 016002X       JSB ERPR  TO PRINT ERROR DIAG.
0479  01004 026333R      JMP HA32 
0480*             **********************
0481*             * PROCESS EQU PSEUDO *
0482*             **********************
0483  01005 016004X HA56 JSB CHOPI   EVALUATE OPERAND 
0484  01006 026333R      JMP HA32   *ERROR* 
0485  01007 052012R       CPA ...1+3 (4) EXT ?
0486  01010 062013R       LDA ...1+4 (5) SET FOR NON-PNCH EXT 
0487  01011 072000R       STA TEMP  NO
0488  01012 076001R       STB TEMP+1
0489  01013 006404       OCT 6404 CLB,INB 
0490  01014 016020X      JSB MSYMS  GO TO MEAS.SYMBOL, SET SYMP/SYMN
0491  01015 062000R       LDA TEMP
0492  01016 066001R       LDB TEMP+1
0493*             * SEND LABEL TO TABLE * 







 PAGE 0011 #01  *** DOS/RTE ASMB1  FALL 1971 ***


0494  01017 016606R       JSB INSR      TO SYMBOL TABLE INSERTION RTN 
0495  01020 000000       NOP
0496  01021 026333R      JMP HA32 
0497*         ******************************
0498*         *     ORG ORR HED PROC.JUMPS *
0499*         ******************************
0500  01022 116113R HA64  JSB INST,I  GO TO SUBROUTINE
0501  01023 026333R      JMP HA32 
0502  01024 066032X HA70  LDB LTFLG    GET LITERAL FLAG 
0503  01025 006002        SZB          IS A LITERAL IN THE OPERAND? 
0504  01026 016036X       JSB ?ARTL     GO PROCESS THE LITERAL
0505  01027 062010R      LDA  .1+1      A=2 
0506  01030 026407R      JMP  HA3Z


















































 PAGE 0012 #01  *** DOS/RTE ASMB1  FALL 1971 ***


0508*             ************************
0509*             * PASS 1 END PROCESSOR *
0510*             ************************
0511  01031 000154R       DEF BUFF
0512  01032 062031X HB00  LDA ?TFLG     GET TABLE OUTPUT FLAG 
0513  01033 002003        SZA,RSS 
0514  01034 027101R       JMP HB08      TABLE NOT REQUESTED - FINISH PAS
0515  01035 063031R       LDA HB00-1
0516  01036 042012R       ADA .1+3
0517  01037 073031R       STA HB00-1    SET HB00-1 = L(BUFF+4)
0518  01040 062025X       LDA X         GET FWA OF AVAILABLE MEMORY 
0519  01041 072141R       STA ENTV   TO ENTV
0520  01042 162141R HBX   LDA ENTV,I  TEST 1ST WORD OF ENTRY
0521  01043 002003        SZA,RSS       COMPLETED?
0522  01044 027101R       JMP HB08      YES - GO TO FINISH PASS 1 
0523  01045 017352R       JSB MBLNK    SET UP BLANKS IN SYMBOL OUT AREA 
0524* 
0525*             * GET RELOCATION INDIC. CHAR. 
0526  01046 162141R       LDA  ENTV,I 
0527  01047 001727       OCT 1727 
0528  01050 012015R       AND ...1+6  (7) 
0529  01051 052015R       CPA ...1+6  LITERAL ENTRY?
0530  01052 027073R       JMP HBY     YES.
0531  01053 016042X       JSB ?DCOD 
0532  01054 076157R       STB BUFF+3
0533* 
0534*             * GET VALUE OF SYMBOL * 
0535  01055 066100R      LDB SUMP (NO.OF WORDS IN ENTRY)
0536  01056 046024R       ADB ..M1
0537  01057 046141R       ADB ENTV
0538  01060 076141R       STB ENTV
0539  01061 160001        LDA 1,I 
0540  01062 036141R      ISZ ENTV 
0541  01063 000040        CLE      SET E = 0 FOR OCTAL CONV.
0542  01064 016041X       JSB ?BNCN 
0543*             * STORE ASCI VALUE INTO BUFF
0544  01065 067031R       LDB HB00-1    GET L(BUFF+4) 
0545  01066 016035X       JSB ?V
0546  01067 067417R       LDB FFUB     SET PRINT PARAMETERS 
0547  01070 062020R       LDA .12+2  (14) 
0548  01071 016044X       JSB ?PRNT     GO TO PRINT 
0549  01072 027042R       JMP HBX  ENTRY DONE.
0550  01073 062100R HBY   LDA SUMP  NO.WDS IN ENTRY 
0551  01074 042141R       ADA ENTV   + ADDR OF ENTRY
0552  01075 072141R       STA ENTV   = ADDR OF NEXT ENTRY 
0553  01076 027042R       JMP HBX 
0554  01077 050101  .PASS ASC 2,PASS
0555* 
0556*             * ERRORS PRINTED *
0557  01101 016016X HB08  JSB ?ENDS     CLOSE OUT THE PASS
0558  01102 066017X       LDB ?DRFL     GET THE DISC FLAG 
0559  01103 006002        SZB           DISK BEING USED?
0560  01104 027116R       JMP HB08R     NO. 
0561  01105 062053X       LDA ?LUNI     GET INPUT LUN 
0562  01106 052010R       CPA .1+1      IS IT THE DISC? 
0563  01107 002001        RSS           YES, SKIP THE FOLLOWING WRITE 







 PAGE 0013 #01  *** DOS/RTE ASMB1  FALL 1971 ***


0564  01110 016050X       JSB ?WEOF     WRITE REST OF LAST SECTOR 
0565  01111 062047X       LDA ?TSTR     YES, GET INITIAL CODE WORD
0566  01112 016051X       JSB ?RDSC     GO INITIALIZE FOR NEW START 
0567  01113 062052X       LDA ?RLUN 
0568  01114 072053X       STA ?LUNI     SET INPUT LUN = DISC
0569  01115 027124R       JMP HB09      YES, SKIP'END PASS' MESSAGE 
0570  01116 063077R HB08R LDA .PASS     ** PUT OUT "*END ASMB PASS" MESS
0571  01117 067100R       LDB .PASS+1 
0572  01120 016043X       JSB ?MESX 
0573  01121 016023X       JSB EXEC      GO TO OPERATOR SUSPEND ROUTINE
0574  01122 001124R       DEF *+2 
0575  01123 000015R       DEF .1+6      OPERATOR SUSPEND REQ. CODE

0577*                   * START PASS 2 HERE  *
0578*             * TEST FOR PUNCH OUTPUT 
0579  01124 062027X HB09  LDA BFLAG     GET PUNCH FLAG
0580  01125 002002        SZA           PUNCH REQUESTED?
0581  01126 027160R       JMP NMP       YES - GO PUT OUT START OF BIN DK
0582  01127 062054X       LDA ?LGFL     LOAD/GO FLAG
0583  01130 002002        SZA           LOAD/GO REQUESTED?
0584  01131 027164R       JMP HNPL      YES, GO , BUT SKIP LEADER OUTPUT
0585  01132 017145R       JSB HNP      GO TO ENTRY POINT PROCESSOR
0586  01133 017377R       JSB GNMP     GO SET UP SOME 'NAM' PARAMETERS
0587  01134 062030X       LDA LFLAG     GET THE LIST FLAG 
0588  01135 042027X       ADA BFLAG     GET PUNCH FLAG
0589  01136 042054X       ADA ?LGFL     LOAD/GO FLAG
0590  01137 002002        SZA           LIST OR PUNCH?
0591  01140 027142R       JMP HB11     START PASS 2 
0592  01141 026021X       JMP ?ASMB     ASSEMBLER EXIT
0593  01142 063144R HB11  LDA *+2       PICK UP ENT CODE TO GET ASMB2 
0594  01143 026022X       JMP ?SEGM     GO TO LOADER FOR NEXT SEGMENT 
0595  01144 031040        ASC 1,2 































 PAGE 0014 #01  *** DOS/RTE ASMB1  FALL 1971 ***


0597*             * MOVE ENT NAMES/ADDRESS TO PUNCH BUFFER. 
0598*             * IF UNDEFINED, PRINT DIAGNOSTIC. 
0599  01145 000000  HNP   NOP 
0600  01146 062600R       LDA .10B      FOR "ENT" TYPE = 10B
0601  01147 072436R       STA ENFLG 
0602  01150 067345R       LDB .2000     FOR WORDS PER ENTRY = 4 
0603  01151 062044R       LDA .M15      FOR 15 ENTRIES/RECORD 
0604  01152 017200R       JSB ENEXT 
0605  01153 002400        CLA 
0606  01154 072436R       STA ENFLG 
0607  01155 127145R       JMP HNP,I 
0608* 
0609*             * PUNCH BINARY OUTPUT FOR RELOCATABLE PROGRAMS *
0610*             * (NAM,ENT, AND EXT RECORDS ONLY)             * 
0611*             * OUTPUT 'NAM' RECORD * 
0612  01156 001400        OCT 1400,4400 
0613  01160 016023X NMP   JSB EXEC      GO TO EXEC TO OUTPUT THE LEADER 
0614  01161 001164R       DEF *+3 
0615  01162 000011R       DEF .1+2      READER REQ CODE 
0616  01163 000034X       DEF ?PNLE     LEADER/TRAILER CW 
0617  01164 017377R HNPL  JSB GNMP     GO SET UP SOME PARAMETERS
0618  01165 016024X       JSB PNCH   GO TO PUNCH 'NAM' RECORD 
0619* 
0620*             * OUTPUT 'ENT' RECORD * 
0621  01166 017145R       JSB HNP  GO TO 'ENT' MOVE/TEST RTN. 
0622* 
0623*     PROCESS 'EXT' RECORD HERE 
0624  01167 062033X       LDA CNTR
0625  01170 052007R       CPA ...1
0626  01171 027142R       JMP HB11     EXIT ON CNTR=1 
0627  01172 063177R       LDA .M20      -20 
0628  01173 067156R       LDB NMP-2     1400B   FOR EXT WCNT = 3/ENTRY
0629  01174 017200R       JSB ENEXT 
0630  01175 027142R       JMP HB11      EXIT
0631  01176 020000  BLUP  OCT 20000     BLANK UPPER 
0632  01177 177754  .M20  DEC -20 

0634  01200 000000  ENEXT NOP 
0635  01201 072137R       STA ENT.      SAVE SYMBOL COUNT 
0636  01202 077351R       STB ORBS+1    SAVE WORD COUNT PER ENTRY 
0637  01203 062025X       LDA X         FWA OF AVAILABLE MEMORY 
0638  01204 072141R       STA ENTV   ENTV=ORG ADDR OF ENTRY 
0639* 
0640*             * INITIALIZE FOR NEXT BINARY OUTPUT IMAGE * 
0641* 
0642  01205 062435R HX1  LDA CSAD 
0643  01206 073350R       STA ORBS   ORBS=DEST ADDR IN BIN REC. 
0644  01207 062060R       LDA BIT15     100000B 
0645  01210 066436R       LDB ENFLG 
0646  01211 006002        SZB           ENT PROC? 
0647  01212 001300        RAR           YES, SET RIC = 2
0648  01213 072226R       STA PBUF+1  SET RIC = 4 
0649  01214 063156R       LDA NMP-2     1400B (FOR STARTING WORD COUNT) 
0650  01215 072225R       STA WCNT  SET BLK CNT = 3 
0651  01216 062137R        LDA ENT. 
0652  01217 072140R       STA ENTC    ENTC = RECRD COUNTER







 PAGE 0015 #01  *** DOS/RTE ASMB1  FALL 1971 ***


0653  01220 162141R HX2   LDA ENTV,I
0654  01221 002003        SZA,RSS    END OF TABLE?
0655  01222 027237R       JMP HX9  YES
0656  01223 001727        ALF,ALF    NO-PICK UP SYMBOL TYPE 
0657  01224 066436R        LDB ENFLG
0658  01225 001323        RAR,RAR 
0659  01226 006003        SZB,RSS      ARE WE PROCESSING THE ENT TABLE E
0660  01227 027246R       JMP HX3      NO...
0661  01230 001332        RAR,SLA,RAL   CHECK FOR ENT 
0662  01231 027317R        JMP HX12 
0663  01232 001323  HXN   RAR,RAR  NO 
0664  01233 012015R       AND ...1+6 (7) ADD ENTRY
0665  01234 042141R       ADA ENTV   -LENGTH
0666  01235 072141R       STA ENTV   -TO ENTV 
0667  01236 027220R       JMP HX2 
0668* 
0669*             * PROCESS END OF TABLE *
0670* 
0671  01237 062140R HX9   LDA ENTC
0672  01240 052137R       CPA ENT.      ANY SYMBOLS LEFT? 
0673  01241 002001        RSS NO
0674  01242 016024X       JSB PNCH  GO TO PUNCH 
0675  01243 002400        CLA 
0676  01244 072225R       STA WCNT      CLEAR WORD COUNT IF NO SYMBOL OU
0677  01245 127200R       JMP ENEXT,I   EXIT HERE 
0678  01246 002011  HX3   SLA,RSS      IS THIS AN EXT ENTRY?
0679  01247 027232R       JMP HXN      NO.. 
0680  01250 001222        RAL,RAL      TEST FOR EXTERNAL EQU NOW
0681  01251 002011       SLA,RSS
0682  01252 027255R      JMP *+3
0683  01253 001323       RAR,RAR
0684  01254 027232R       JMP HXN 
0685  01255 036140R HX5   ISZ ENTC      END OF BIN RECORD?
0686  01256 027261R       JMP *+3    NO 
0687  01257 016024X       JSB PNCH  GO TO PUNCH 
0688  01260 027205R       JMP HX1 
0689* 
0690*         * PLACE CURRENT EXT OR ENT SYMBOL INTO BINARY RECORD *
0691* 
0692  01261 062141R       LDA ENTV
0693  01262 003004        CMA,INA 
0694  01263 073375R       STA HMOV5  ORG.ADDR.TO MOVE LINK
0695  01264 067350R       LDB ORBS
0696  01265 062055R       LDA BLNS
0697  01266 173350R       STA ORBS,I  SET DEST.AREA TO BLANKS 
0698  01267 037350R       ISZ ORBS
0699  01270 173350R       STA ORBS,I
0700  01271 063176R       LDA BLUP      GET UPPER BLANK. LOWER HALF OF
0701  01272 037350R       ISZ ORBS  -DEST WORD = 0
0702  01273 173350R       STA ORBS,I
0703  01274 162141R       LDA ENTV,I
0704  01275 017365R       JSB MTABL  MOVE CHARS TO BIN REC
0705  01276 036226R       ISZ PBUF+1  BUMP NO. OF ENTRIES IN REC. 
0706  01277 062100R       LDA SUMP  NO.WORDS IN SYMBOLIC ENTRY
0707  01300 042141R       ADA ENTV
0708  01301 072141R       STA ENTV  UPDATE ENTV(SYMBOL PNTR)







 PAGE 0016 #01  *** DOS/RTE ASMB1  FALL 1971 ***


0709  01302 042024R       ADA ..M1
0710  01303 164000        LDB 0,I    ENTRY VALUE TO B 
0711  01304 062436R       LDA ENFLG 
0712  01305 002003        SZA,RSS       ENTRY POINT?
0713  01306 147350R       ADB ORBS,I    NO, SET EXT ORDINAL 
0714  01307 002002        SZA 
0715  01310 037350R       ISZ ORBS
0716  01311 177350R       STB ORBS,I  STORE INTO RECORD 
0717  01312 037350R       ISZ ORBS   UPDATE ORBS (RECRD PNTR) 
0718  01313 062225R       LDA WCNT
0719  01314 043351R       ADA ORBS+1
0720  01315 072225R       STA WCNT   UPDATE WORD COUNT
0721  01316 027220R       JMP HX2 
0722  01317 013344R HX12  AND HSMSK    LEAVE RELOCATION BITS
0723  01320 002002        SZA          HAS ENTRY POINT BEEN DEFINED?
0724  01321 027255R       JMP HX5      YES, GO PUT INTO THE PUNCH BUFFER
0725* 
0726*             * ENT ERROR DIAGNOSTIC ROUTINE *
0727  01322 162141R       LDA ENTV,I   NO,  GET THE SYMBLO ADDR FOR DIAG
0728  01323 017352R       JSB MBLNK    MOVE A SYMBOL TO BUFF THRU BUFF+2
0729  01324 062603R       LDA .EN       'EN'
0730  01325 072147R       STA IOBF+5    SAVE 'EN' IN PRINT BUFFER 
0731  01326 066055R       LDB BLNS      GET BLANKS FOR BUFFER 
0732  01327 076150R       STB IOBF+6
0733  01330 076153R       STB IOBF+9
0734  01331 067342R       LDB SNOB      GET ASCII ZEROES
0735  01332 076151R       STB IOBF+7
0736  01333 076152R       STB IOBF+8
0737  01334 062021R       LDA .12+3     15 WORD OUTPUT
0738  01335 067343R       LDB SNOB+1    GET BUFFER ORIGIN 
0739  01336 016044X       JSB ?PRNT     GO PRINT THE 'EN' ERROR 
0740  01337 162141R       LDA ENTV,I
0741  01340 001700        ALF 
0742  01341 027233R       JMP HXN+1 
0743  01342 030060  SNOB  ASC 1,00
0744  01343 000147R       DEF IOBF+5    (AT SNOB+1) BUFFER ORIGIN 
0745  01344 040000  HSMSK OCT 40000 
0746  01345 002000  .2000 OCT 2000
0747  01346 000000  FLX1  BSS 1        (ASCN) 
0748  01347 000401  .401B OCT 401 
0749  01350 000000  ORBS  BSS 2 
0750*     *   *********************************** 
0751*     *   * PICK UP A SYMBOL TO BE PRINTED  * 
0752*     *   * 'A' HAS DESTINATION ADDRESS     * 
0753*     *   *********************************** 
0754  01352 000000  MBLNK NOP 
0755  01353 066141R       LDB ENTV      GET TBL ENTRY LOCATION
0756  01354 007004        CMB,INB 
0757*             * SEND ADDR. TO MOVE LINKAGE
0758  01355 077375R      STB HMOV5
0759*             * MOVE BLANKS TO BUFFER 
0760  01356 066055R       LDB BLNS
0761  01357 076154R       STB BUFF
0762  01360 076155R       STB BUFF+1
0763  01361 076156R       STB BUFF+2
0764  01362 067417R       LDB FFUB  ADDR. OF BUFF TO B







 PAGE 0017 #01  *** DOS/RTE ASMB1  FALL 1971 ***


0765  01363 017365R      JSB MTABL MOVE SYMBL TO PRINT BUFF 
0766  01364 127352R       JMP MBLNK,I  EXIT HERE

0768*             * MOVE CHARS FROM SYMBOL TABLE *
0769*   -A CONTAINS 1ST WORD OF SYMBOL ENTRY
0770*   -B CONTAINS DESTINATION ADDR. 
0771*   -HMOV5 CONTAINS ORIGIN ADDR.
0772  01365 000000  MTABL NOP 
0773  01366 001700        ALF 
0774  01367 012015R       AND ...1+6 (7) FOR NO.OF WRDS.
0775  01370 072100R       STA SUMP
0776  01371 052010R       CPA ...1+1 (2)
0777  01372 002400        CLA 
0778  01373 032007R      IOR ...1 
0779  01374 016003X       JSB MOVE
0780  01375 000000  HMOV5 NOP 
0781  01376 127365R       JMP MTABL,I 
0782*         *************************************************** 
0783*         * GNMP - SET UP PROGRAM LENGTH                    * 
0784*         *         SET UP 'PLEN' FOR LITERALS(IF PRESENT). * 
0785*         *************************************************** 
0786  01377 000000  GNMP  NOP 
0787  01400 016040X       JSB ?ORRP     RESET PROG LOC'N COUNTERS 
0788  01401 062117R       LDA PLCN    NO
0789  01402 072233R       STA PBUF+6  SET MAIN PROG. LENGTH 
0790* 
0791*             * TEST FOR 'ORG' EXTENT BEYOND MAIN PROGRAM * 
0792  01403 066007X       LDB ORGSV     GET ORG SECTION LWA 
0793  01404 003004        CMA,INA 
0794  01405 042007X       ADA ORGSV 
0795  01406 002021        SSA,RSS    IS ORG VALUE GRTR? 
0796  01407 076233R       STB PBUF+6  YES, CHANGE MAIN PROG. LENGTH 
0797* 
0798*          * TEST FOR LITERALS *
0799  01410 062233R       LDA PBUF+6
0800  01411 066120R       LDB PLEN
0801  01412 006002        SZB     LITERALS PRESENT? 
0802  01413 072120R       STA PLEN YES SET START OF AREA
0803  01414 040001        ADA 1   ADD LENGTH OF REGION
0804  01415 072233R       STA PBUF+6  TO PROG LENGTH. 
0805  01416 127377R       JMP GNMP,I   EXIT FROM THE GNMP ROUTINE 
0806  01417 000154R FFUB  DEF BUFF
0807********************************************************************
0808********** CHANGE LOC'N. X IN ASMB IF THIS PROGS. LWA > 1430B ******
0809********************************************************************
0810  00440         ?CMQ  EQU CMQ 
0811  00542         ?ENP  EQU ENP 
0812  00525         ?EXP  EQU EXP 
0813  00407         ?HA3Z EQU HA3Z
0814  00606         ?INSR EQU INSR
0815  00045         LABEL EQU ?LABE 
0816  00710         ?LITI EQU LITIN 
0817                      END ASMB1 
**  NO ERRORS*


$END ASMB     

*
--> Assemble 20874-60004_ASMB2
ON,ASMB,99







 PAGE 0001


0001                ASMB,L,B,C     DOS/RT ASSEMBLER FEBRUARY 1970 
**  NO ERRORS*





























































 PAGE 0002 #01  *** DOS/RTE ASMB2  FALL 1971 ***


0001                ASMB,L,B,C     DOS/RT ASSEMBLER FEBRUARY 1970 
0003  00000               NAM ASMB2,5,99
0004                      ENT ASMB2 
0005                      ENT ?ART,?BREC,?LKLI,?SKPR,?SPCR
0006                      EXT ?DCOD,?GETC,?LINC,?LIST,?LOUT,?OKOL,?OPLK 
0007                      EXT ?SUP,?BPKU,?PKUP,?PNCH,?SEGM,?SYMK,?BFLG
0008                      EXT ?LFLG,?LTFL,?LTSA,?LTSB,?RSTA,?ERPR,?CHOP 
0009                      EXT ?CHPI,?OPER,?PLIT,?ASCN,?MSYM,?ASM1,?ICSA 
0010                      EXT ?LINS,?ARTL,?LST,?LPER,?PERL,?SETM,EXEC 
0011                      EXT ?LGFL 
0012                      SUP 
0013  00000 000000  TEMP  BSS 225B      RESERVE TEMPORARY AREA
0014  00000         #     EQU TEMP     SAME AS DATA ORIGIN
0015  00005         VALU  EQU TEMP+5
0016  00007         ...1  EQU TEMP+7
0017  00007         .1    EQU ...1
0018  00016         .12   EQU .1+7
0019  00024         ..M1  EQU .12+6 
0020  00032         L     EQU ..M1+6
0021  00041         .9    EQU #+41B 
0022  00043         .M8   EQU #+43B 
0023  00045         .M29  EQU #+45B 
0024  00046         BLNK  EQU #+46B     =40B(LOWER BLANK) 
0025  00051         .NO   EQU #+51B 
0026  00052         .OP   EQU #+52B 
0027  00053         .OV   EQU #+53B 
0028  00054         .UN   EQU #+54B 
0029  00055         BLNS  EQU #+55B 
0030  00056         TW10  EQU #+56B    ADDRESS MASK 
0031  00057         .1000 EQU #+57B 
0032  00060         BIT15 EQU #+60B 
0033  00061         .E    EQU #+61B 
0034  00064         RC    EQU #+64B 
0035  00076         RELC  EQU #+76B     RELOCATION FLAG 
0036  00077         SIGN  EQU #+77B 
0037  00100         SUMP  EQU #+100B   RUNNING SUM FOR 'CHOP' 
0038  00101         TERM  EQU #+101B   NO. OF TERMS IN AN OPERAND 
0039  00102         T     EQU #+102B
0040  00104         BYFLG EQU #+104B   BYTE FLAG FOR 'BREC' 
0041  00106         CNTB  EQU #+106B
0042  00107         CODE  EQU #+107B   OPCODE TYPE(FROM OPTABLE)
0043  00110         DSIG  EQU #+110B    'ASCN'
0044  00111         FLAG  EQU #+111B
0045  00112         FLAQ  EQU #+112B
0046  00113         INST  EQU #+113B   OPCODE FORMAT
0047  00114         LAST  EQU #+114B
0048  00115         PASS  EQU #+115B   PASS FLAG(0=PASS 1  AND 1=PASS2) 
0049  00117         PLCN  EQU #+117B   PROGRAM LOCATION COUNTER 
0050  00120         PLEN  EQU #+120B LIT LENGTH PASS 1/LIT ORG PASS 2 
0051  00121         PNTR  EQU #+121B L POINTS AT LAST OER CURRENT CHAR. 
0052  00122         RCNT  EQU #+122B
0053  00123         SAVB  EQU #+123B
0054  00125         SCN1  EQU #+125B   STATE LNG/OPCODE/OPERAND/LABEL(4)
0055  00131         SVST  EQU #+131B
0056  00133         SYMP  EQU #+133B   SYMBOL LNG/ AND LOC'N
0057  00135         TEST  EQU #+135B   TEST CHARACTER 







 PAGE 0003 #01  *** DOS/RTE ASMB2  FALL 1971 ***


0058*             * I/O STATEMENT BUFFER *
0059  00142         IOBF  EQU #+142B    50 WORDS + END OF STATEMENT BUFF
0060  00225 000000  PBUF  OCT 0,0,0,0 
0061  00225         WCNT  EQU PBUF  WORD(BLK) CNT FOR BIN.RECRD.
0062  00033         ASM1  EQU ?ASM1 
0063  00016         BFLAG EQU ?BFLG 
0064  00025         CHOP  EQU ?CHOP 
0065  00026         CHOPI EQU ?CHPI 
0066  00024         ERPR  EQU ?ERPR 
0067  00002         GETC  EQU ?GETC 
0068  00003         LINC  EQU ?LINC 
0069  00004         LIST  EQU ?LIST 
0070  00005         LOUT  EQU ?LOUT 
0071  00037         LST   EQU ?LST
0072  00020         LTFLG EQU ?LTFL 
0073  00006         OKOLE EQU ?OKOL 
0074  00027         OPERR EQU ?OPER 
0075  00023         RSTA  EQU ?RSTA 
0076  00015         SYMK  EQU ?SYMK 
0077  00000         A     EQU 0 
0078*             ****************
0079*             * START PASS 2 *
0080*             ****************
0081  00231 062040X ASMB2 LDA ?LPER     LENGTH OF 'CLEAR'AREA 
0082  00232 066041X       LDB ?PERL     GET ORIGIN OF 'CLEAR' AREA
0083  00233 016042X       JSB ?SETM     GO TO SET MEMORY ROUTINE
0084  00234 000000        OCT 0         TO SET MEMORY TO ZERO 
0085  00235 002400        CLA 
0086  00236 072117R       STA PLCN      INITIALIZE PROG LOC'N COUNTER 
0087  00237 002404        CLA,INA 
0088  00240 072115R       STA PASS      SET PASS FLAG 
0089  00241 016023X       JSB RSTA      READ CONTROL STATEMENT
0090  00242 062056R       LDA TW10
0091  00243 072033X       STA ASM1      SET FLAG FOR 'INIT' PORTION 
0092  00244 016023X ASH   JSB RSTA      READ A SOURCE STATEMENT(NAM?) 
0093  00245 062107R       LDA CODE
0094  00246 052021R       CPA .12+3     HED?
0095  00247 026244R       JMP ASH       YES, GO PICK UP THE NEXT STATEME
0096  00250 072033X       STA ASM1      CLEAR 'CS' AND 'INIT' FLAG
0097  00251 052017R       CPA .12+1  (13) NAM ? 
0098  00252 026507R       JMP HC02
0099  00253 062051R       LDA .NO       'NO'= NO ORG OR NAM STATEMENT 
0100  00254 016024X      JSB ERPR 
0101  00255 026512R       JMP HC05      ERROR EXIT FROM INIT
0102  00256 000000        BSS PBUF-*+60 RESERVE REMAINING PUNCH BUFFER
0103*          *************************************************
0104*          *  DO NOT MOVE SKPR, SPCR OR BREC AS THEY ARE   *
0105*          *   SET ACCORDING TO THE ENTRY POINTS IN ASMB2  *
0106*          *************************************************
0107*        ****************************** 
0108*        * SKIP AND SPACE LIST OUTPUT * 
0109*        ****************************** 
0110  00321 066003X SKPR  LDB LINC  'SKIP'ENTRY 
0111  00322 007004        CMB,INB 
0112  00323 026326R       JMP SK2 
0113  00324 016026X SPCR  JSB CHOPI EVALUATE SPACE COUNT







 PAGE 0004 #01  *** DOS/RTE ASMB2  FALL 1971 ***


0114  00325 006404        CLB,INB   ERROR - SET COUNT=1 
0115  00326 006003  SK2   SZB,RSS  SPACES=0?
0116  00327 026511R       JMP HC04      EXIT TO HC04(START OF PASS) 
0117  00330 062017X       LDA ?LFLG     NO, START LINE SKIPPING 
0118  00331 002003        SZA,RSS       LIST REQUESTED? 
0119  00332 026511R       JMP HC04      EXIT TO HC04(START OF PASS) 
0120  00333 062037X       LDA LST       LST FLAG
0121  00334 002002        SZA       SUPPRESS LISTING? 
0122  00335 026511R       JMP HC04      EXIT TO HC04(START OF PASS) 
0123  00336 076110R       STB DSIG SET COUNTER
0124  00337 062003X       LDA LINC
0125  00340 052024R       CPA ..M1      ON LAST LINE? 
0126  00341 026511R       JMP HC04      YES - EXIT
0127  00342 046003X       ADB LINC
0128  00343 006021        SSB,RSS       WILL IT GO TO BOTTOM OF PAGE? 
0129  00344 026351R       JMP *+5       YES,GO TO TOP OF FORM 
0130  00345 076003X       STB LINC      NO, SAVE NEW LINE COUNT 
0131  00346 062110R       LDA DSIG      GET NO. OF LINES TO BE SKIPPED
0132  00347 016035X       JSB ?LINS     GO TO LINE SKIPPER
0133  00350 026511R       JMP HC04      EXIT TO GET NEXT STATEMENT
0134  00351 016006X       JSB OKOLE     SKIP TO TOP OF FORM 
0135  00352 026511R       JMP HC04      EXIT TO GET NEXT STATEMENT
0136*        *************************
0137*        * BINARY OUTPUT ROUTINE *
0138*        *************************
0139  00353 177712  .M54  DEC -54 
0140  00354 060100        OCT 60100     RIC=5, CURRENT PAGE 
0141  00355 000000  BREC NOP
0142  00356 072124R       STA SAVB+1 SAVE RELOC'N BYTE
0143  00357 062016X       LDA BFLAG     GET PUNCH REQUEST FLAG
0144  00360 042044X       ADA ?LGFL     LOAD/GO FLAG
0145  00361 002003        SZA,RSS       WAS PUNCH REQUESTED?
0146  00362 126355R      JMP BREC,I  NO.
0147  00363 062225R      LDA WCNT 
0148  00364 006002       SZB RECORD OUT?
0149  00365 026407R      JMP HI66    NO.
0150  00366 002003       SZA,RSS WCNT=0?
0151  00367 126355R      JMP BREC,I YES.
0152* 
0153*             * OUTPUT A RECORD 
0154* 
0155  00370 062225R HI60 LDA WCNT 
0156  00371 001727        ALF,ALF  ROTATE 8 
0157  00372 072225R       STA WCNT   STORE WCNT IN UPPER PBUF 
0158  00373 162131R       LDA SVST,I    POSITION REMAIN RELOCATION BYTES
0159  00374 001723       ALF,RAR
0160  00375 036122R      ISZ RCNT 
0161  00376 026374R      JMP *-2
0162  00377 001200       RAL
0163  00400 172131R      STA SVST,I  STORE RELOC.BYTES
0164* 
0165*             * SET REC.ID CODE (WORD 2) *
0166  00401 066354R       LDB BREC-1    GET RIC/PAGE INDICATOR
0167  00402 046226R       ADB PBUF+1 SET REMAINDER
0168  00403 076226R       STB PBUF+1
0169  00404 016013X       JSB ?PNCH     GO TO 'PUNCH' 







 PAGE 0005 #01  *** DOS/RTE ASMB2  FALL 1971 ***


0170  00405 126355R      JMP BREC,I  AND EXIT 
0171* 
0172*  PROCESS A BINARY OUTPUT WORD 
0173* 
0174  00406 000231R       DEF PBUF+4
0175  00407 062225R HI66 LDA WCNT 
0176  00410 002002       SZA    FIRST WORD OF RECORD? 
0177  00411 026425R       JMP HI70      -NO-
0178  00412 066117R      LDB PLCN  PLCN TO BREG 
0179  00413 076230R      STB PBUF+3  SET DBL ADDR.
0180  00414 072226R       STA PBUF+1  SET PBUF+1=0
0181  00415 066012R       LDB ...1+3  (4) 
0182  00416 076225R      STB WCNT  SET WCNT = 4 
0183  00417 066406R       LDB HI66-1
0184  00420 076505R      STB STOR  SET STOR=L(PBUF+4) 
0185  00421 066030R       LDB ..M1+4  (-5)
0186  00422 076122R      STB RCNT  SET RCNT=-5
0187  00423 066353R       LDB .M54      -54 
0188  00424 076106R      STB CNTB  SET CNTB FOR WORD COUNT
0189  00425 066122R HI70  LDB RCNT
0190  00426 056030R       CPB ..M1+4  RCNT= -5? 
0191  00427 026476R      JMP HI74  -YES-SET UP ADDRESSES
0192* 
0193*              * STORE RELOC.BYTE / UPDATE
0194* 
0195  00430 036226R HI71  ISZ PBUF+1          UPDATE # OF DATA WRDS 
0196  00431 162131R      LDA SVST,I 
0197  00432 001723       ALF,RAR
0198  00433 032124R       IOR SAVB+1 RELOC BYTE 
0199  00434 172131R      STA SVST,I 
0200  00435 036122R      ISZ RCNT  BYTE WORD FULL?
0201  00436 026447R      JMP HI76  -NO- 
0202  00437 066030R       LDB ..M1+4 -YES-(-5)
0203  00440 076122R      STB RCNT  RESET RCNT TO -5 
0204  00441 001200       RAL
0205  00442 172131R      STA SVST,I 
0206  00443 062106R      LDA CNTB 
0207  00444 052024R      CPA ..M1 
0208  00445 002001       RSS
0209  00446 036106R      ISZ CNTB 
0210  00447 066113R HI76 LDB INST 
0211  00450 176505R      STB STOR,I 
0212  00451 036505R      ISZ STOR 
0213  00452 036225R      ISZ WCNT 
0214  00453 062124R       LDA SAVB+1 RELOC BYTE 
0215  00454 052013R       CPA ...1+4 (5) 2 WORD INSERT? 
0216  00455 002001       RSS
0217  00456 026473R       JMP HI78 TO EXIT TEST 
0218  00457 036225R      ISZ WCNT  BUM.WORD COUNT 
0219  00460 062100R      LDA SUMP 
0220  00461 172505R      STA STOR,I 
0221  00462 036505R      ISZ STOR 
0222  00463 012506R       AND BRMSK     CLEAR UPPER 6 BITS OF 'SUMP'
0223  00464 005121       BRS,BRS    CLEAR LOWER 2 BITS OF INST
0224  00465 005020       BLS,BLS
0225  00466 030001       IOR 1     'OR' B TO A







 PAGE 0006 #01  *** DOS/RTE ASMB2  FALL 1971 ***


0226  00467 072113R      STA INST 
0227  00470 036106R      ISZ CNTB   BUMP CNTB 
0228  00471 026473R       JMP HI78
0229  00472 026370R      JMP HI60 
0230  00473 036106R HI78 ISZ CNTB    IS THIS THE LAST WORD? 
0231  00474 126355R      JMP BREC,I  NO- EXIT 
0232  00475 026370R       JMP HI60    YES- GO TO PUNCH
0233  00476 066505R HI74 LDB STOR 
0234  00477 076131R      STB SVST 
0235  00500 002400        CLA 
0236  00501 172131R       STA SVST,I   CLEAR RELOC BYTE WORD
0237  00502 036505R      ISZ STOR 
0238  00503 036225R      ISZ WCNT 
0239  00504 026430R       JMP HI71
0240  00505 000000  STOR  BSS 1                   36
0241  00506 001777  BRMSK OCT 1777                34















































 PAGE 0007 #01  *** DOS/RTE ASMB2  FALL 1971 ***


0243  00507 062010R HC02  LDA ...1+1  LIST PARAMETER
0244  00510 016004X HC03  JSB LIST
0245*             * READ NEXT STATEMENT 
0246  00511 016023X HC04  JSB RSTA  READ NEXT STATEMENT 
0247*             * TEST MNEMONIC CODES FOR PROCESS TYPE *
0248  00512 062107R HC05  LDA CODE
0249  00513 066113R       LDB INST
0250  00514 052035R       CPA L+3  (43)  SOC OR SOS ? 
0251  00515 027265R      JMP HC28  YES
0252  00516 012043R       AND .M8       (177770)
0253  00517 052032R       CPA L     I/O ? 
0254  00520 027224R      JMP IOPR  YES
0255  00521 001121        ARS,ARS       SHIFT A RIGHT 4 BITS
0256  00522 001121        ARS,ARS 
0257  00523 052011R       CPA .1+2      60/70(MICRO-OP?)
0258  00524 027312R       JMP MICR      YES 
0259  00525 062107R       LDA CODE      GET JUMP TABLE ADDRESS
0260  00526 042632R       ADA CODLC     ADD OPCODE INCREMENT
0261  00527 124000        JMP A,I       JUMP TO PROCESSOR 
0262* 
0263*             * PROCESS MEMORY REFERENCE INSTRUCTIONS * 
0264* 
0265  00530 062113R MEMRY LDA INST
0266  00531 066020X       LDB LTFLG 
0267  00532 006002        SZB       LITERAL PRESENT?
0268  00533 026740R       JMP HCY  YES
0269  00534 012025R      AND ..M1+1 NO, CLEAR LDSB OF 'INST'
0270  00535 072113R       STA INST
0271  00536 062663R       LDA .I        SET FOR INDIRECT BIT
0272  00537 066060R       LDB BIT15     INDIRECT BIT MASK(100000B)
0273  00540 016025X       JSB CHOP
0274  00541 026750R       JMP HC17E     ERROR EXIT
0275  00542 076671R HCX   STB SUM.  OPERND VALUE
0276  00543 006400        CLB           LIST PARAMETER=0
0277  00544 076101R HCXL  STB TERM      SAVE THE LIST PARAMETER 
0278  00545 066671R       LDB SUM.      GET THE OPERAND VALUE 
0279* 
0280*              * RELOC.CODE IS IN RELC *
0281  00546 002002       SZA        ABS?
0282  00547 026553R       JMP HC11  NO
0283  00550 046056R       ADB TW10      -2000B
0284  00551 006021        SSB,RSS      IS THE OPERAND LESS THAN 2000B?
0285  00552 016027X       JSB OPERR     NO, IT'S AN "M" TERM ERROR
0286  00553 062671R HC11  LDA SUM.
0287  00554 066107R       LDB CODE
0288  00555 056022R       CPB .12+4 (16) DEF? 
0289  00556 026601R       JMP HC17
0290  00557 062076R       LDA RELC
0291  00560 002002        SZA      ABSOLUTE?
0292  00561 026570R       JMP HC15  NO
0293  00562 062113R      LDA INST CLEAR 
0294  00563 012664R       AND CBIT      CURRENT BIT MASK(175777)
0295  00564 072113R      STA INST 
0296  00565 062671R HC14  LDA SUM.   NO, GET ADDR FOR 
0297  00566 012506R       AND BRMSK 
0298  00567 026601R       JMP HC17      INSERT INTO INST. 







 PAGE 0008 #01  *** DOS/RTE ASMB2  FALL 1971 ***


0299  00570 052012R HC15  CPA ...1+3 EXT? (4) 
0300  00571 026565R       JMP HC14
0301  00572 066013R       LDB ...1+4    (5) 
0302  00573 076104R       STB BYFLG 
0303  00574 066016X       LDB BFLAG     GET THE PUNCH FLAG
0304  00575 046044X       ADB ?LGFL     LOAD/GO FLAG
0305  00576 006003        SZB,RSS       PUNCH REQUESTED?
0306  00577 026565R       JMP HC14      NO, GO TO SET ADDR INTO INST
0307  00600 042024R      ADA ..M1 
0308  00601 032113R HC17  IOR INST
0309  00602 072113R      STA INST  SET LOADER FLAG
0310* 
0311*             * SET UP FOR DCOD*
0312  00603 062076R       LDA RELC
0313  00604 016001X HC19  JSB ?DCOD 

0315*          * OUTPUT A BINARY WORD * 
0316  00605 076123R       STB SAVB
0317  00606 006404        CLB,INB 
0318  00607 016355R       JSB BREC
0319*          * OUTPUT A LINE FOR LISTING *
0320  00610 066123R       LDB SAVB RELOC CHAR.
0321  00611 062101R       LDA TERM      GET THE LIST PARAMETER
0322  00612 016004X       JSB LIST
0323  00613 036117R       ISZ PLCN
0324  00614 026511R       JMP HC04
0325*        *****************
0326*        * BSS PROCESSOR *
0327*        *****************
0328  00615 016026X BSSP JSB CHOPI  EVAL. OPERAND 
0329  00616 026507R       JMP HC02      ERROR 
0330  00617 006003       OCT 6003 B=0?
0331  00620 026507R       JMP HC02      YES 
0332  00621 006400       CLB     B=0
0333  00622 016355R      JSB BREC 
0334  00623 002400       CLA     A=0
0335  00624 066055R       LDB BLNS  NO RELOC. INDIC.
0336  00625 016004X       JSB LIST
0337  00626 062100R       LDA SUMP  PICK UP BLOCK LENGTH FOR PLCN 
0338  00627 042117R      ADA PLCN 
0339  00630 072117R      STA PLCN 
0340  00631 026511R       JMP HC04      EXIT
0341* 
0342  00632 100632R CODLC DEF *,I 
0343  00633 000765R       DEF HC42      ORG       1 
0344  00634 000765R       DEF HC42      ORR       2 
0345  00635 000763R       DEF X39       *COM      3 
0346  00636 000763R       DEF X39       *ENT      4 
0347  00637 000763R       DEF X39       *EXT      5 
0348  00640 100113R       DEF INST,I    *ARITH    6 
0349  00641 001043R       DEF NUMP      ASC       7 
0350  00642 001043R       DEF NUMP      DEC       10
0351  00643 001043R       DEF NUMP      OCT       11
0352  00644 000615R       DEF BSSP      BSS       12
0353  00645 001007R       DEF EQUP      EQU       1R
0354  00646 000674R       DEF FIN2      END       14







 PAGE 0009 #01  *** DOS/RTE ASMB2  FALL 1971 ***


0355  00647 000763R       DEF X39       *NAM      15
0356  00650 000530R       DEF MEMRY     MEMORY    16
0357  00651 000771R       DEF X50       HED       17
0358  00652 000530R       DEF MEMRY     DEF       20
0359  00653 000753R       DEF HC26      ABS       2U
0360  00654 100113R       DEF INST,I    SKP       22
0361  00655 100113R       DEF INST,I    SPC       23
0362  00656 001003R       DEF X54       LST/UNL   24
0363  00657 001043R       DEF NUMP      DEX       25
0364  00660 001021R       DEF HC70      EQU ARITH 26
0365  00661 001026R       DEF HC80      EQU SHIFT 27
0366  00662 000757R       DEF HC30      CLO ETC   30
0367  00663 000111  .I    OCT 111                 31   ASCII 'I'
0368  00664 175777  CBIT  OCT 175777              32
0369  00665 177757  M17   DEC -17                 33
0370  00666 016000  .JSB  OCT 16000               34
0371  00667 001001R       DEF X52       REP       35
0372  00670 000103  .C    OCT 103       ASCII 'C' 36
0373  00671 000000  SUM.  BSS 1                   37
0374  00672 001005R       DEF X56       SUP/UNS   40
0375  00673 000025  DEX   OCT 25        'DEX' OPCODE TYPE 










































 PAGE 0010 #01  *** DOS/RTE ASMB2  FALL 1971 ***


0377  00674 006400  FIN2  CLB 
0378  00675 016355R       JSB BREC      PUNCH REST OF LAST DBL RECORD 
0379  00676 062700R       LDA *+2       PICK UP SEGMENT CODE FOR ASMB3
0380  00677 026014X       JMP ?SEGM     GO TO LOADER FOR NEXT SEGMENT 
0381  00700 031440        ASC 1,3 
0382*     ******************************
0383*     * ARITHMETIC MACRO PROCESSOR *
0384*     ******************************
0385  00701 016015X ART   JSB SYMK      GO TO SYMBOL TABLE LOOKUP 
0386  00702 002001        RSS        ERROR RETN(UNDEF)
0387  00703 026707R       JMP *+4   NORMAL RET'N
0388  00704 062054R       LDA .UN       'UN'= UNDEFINED SYMBOL
0389  00705 016024X       JSB ERPR
0390  00706 006400        CLB       SET B = 0 
0391  00707 046666R       ADB .JSB      'JSB' INSTRUCTION MASK
0392  00710 076113R       STB INST
0393  00711 062012R       LDA ...1+3 (4)  A=EXT 
0394  00712 016355R       JSB BREC     PUNCH
0395  00713 066070R       LDB RC+4 ' X' 
0396  00714 002400        CLA 
0397*         **********************************************
0398*         * PROCESS THE 'DEF' FOLLOWING THE FIRST WORD *
0399*         *  OF AN ARITHMETIC PAIR                     *
0400*         **********************************************
0401  00715 016004X ARTX  JSB LIST      GO TO LIST FIRST WORD 
0402  00716 062022R       LDA .12+4 (20B) 
0403  00717 072107R       STA CODE  =DEF
0404  00720 002400        CLA 
0405  00721 072113R       STA INST CLEAR INST 
0406  00722 062020X       LDA LTFLG 
0407  00723 002002        SZA        LITERAL PRESENT? 
0408  00724 026735R       JMP ALTR   YES
0409  00725 062663R       LDA .I        SET UP FOR INDIRECT BIT 
0410  00726 066060R       LDB BIT15     MASK= 100000B 
0411  00727 016025X       JSB CHOP
0412  00730 000000        NOP 
0413  00731 036117R ALTZ  ISZ PLCN      BUMP LOCATION COUNT 
0414  00732 076671R       STB SUM.      SAVE OPERAND VALUE
0415  00733 066012R       LDB .1+3      LIST PARAMETER=4
0416  00734 026544R       JMP HCXL
0417  00735 062021X ALTR  LDA ?LTSA     PICK UP 
0418  00736 066022X       LDB ?LTSB            LITERAL PARAMS.
0419  00737 026731R       JMP ALTZ     FROM LKLIT 
0420* 
0421*           * LITERAL PROCESSING *
0422* 
0423  00740 002011  HCY   SLA,RSS  LSB OF INST INDIC LITERAL POSSIBLE 
0424  00741 026747R       JMP HCZ   NO, ERROR 
0425  00742 012025R      AND ..M1+1  CLEAR LSB OF INST
0426  00743 072113R       STA INST
0427  00744 016030X       JSB ?PLIT 
0428  00745 026750R       JMP HCZ+1 ERROR EXIT
0429  00746 026542R       JMP HCX 
0430  00747 016027X HCZ   JSB OPERR 'M' ERROR 
0431  00750 002400  HC17E CLA           LIST PARAMETER =0 
0432  00751 072101R       STA TERM      SAVE IT 







 PAGE 0011 #01  *** DOS/RTE ASMB2  FALL 1971 ***


0433  00752 026601R       JMP HC17
0434* 
0435*             * PROCESS 'ABS' OPCODE *
0436* 
0437  00753 016026X HC26 JSB CHOPI  GO EVALUATE OPERAND 
0438  00754 027233R      JMP HP2D ERROR 
0439  00755 076113R       STB INST
0440  00756 027233R      JMP HP2D   OK..
0441* 
0442*             * OUTPUT BIN RECRD AND/OR LIST LINE * 
0443* 
0444  00757 016005X HC30  JSB LOUT
0445  00760 016004X       JSB LIST
0446* 
0447*             * ADD 1 TO PROG. LOCN. CNTR. *
0448  00761 036117R      ISZ PLCN  BUMP LOCATION CNTR 
0449  00762 026511R       JMP HC04
0450* 
0451  00763 002404  X39   CLA,INA  1 TO A 
0452  00764 026510R       JMP HC03
0453* 
0454*             * ORG,ORB,ORR PRE-PROCESSOR * 
0455* 
0456  00765 006400  HC42 CLB    OUTPUT A
0457  00766 016355R      JSB BREC RECORD
0458  00767 116113R       JSB INST,I JUMP TO CORRECT SUBROUT. 
0459  00770 026507R       JMP HC02      BACK TO START LIST
0460  00771 062017X X50   LDA ?LFLG     GET THE LIST FLAG 
0461  00772 002003        SZA,RSS       IS LIST FLAG OFF? 
0462  00773 026511R       JMP HC04      YES - GO TO NEXT STATEMENT
0463  00774 116113R      JSB INST,I  TO HEADER SUBROUTINE 
0464  00775 062037X       LDA LST 
0465  00776 002003        SZA,RSS       IS LIST FLAG ON?
0466  00777 016006X       JSB OKOLE     YES, SPACE TO BOTTOM OF PAGE
0467  01000 026511R       JMP HC04      GET NEXT STATEMENT
0468  01001 116113R X52   JSB INST,I TO REPSB 
0469  01002 026763R       JMP X39 
0470  01003 076037X X54   STB LST  SET LST/UNL FLAG 
0471  01004 026763R       JMP X39 
0472  01005 076010X X56   STB ?SUP      SET 'SUP/UNS' FLAG
0473  01006 026763R       JMP X39 

0475*             * PASS 2 'EQU' PROCESSOR *
0476* 
0477  01007 016026X EQUP JSB CHOPI     EVAL. OPERAND
0478  01010 006400       CLB       ERROR EXITS
0479  01011 062117R      LDA PLCN 
0480  01012 072100R       STA SUMP  SAVE PLCN VALUE 
0481  01013 076117R       STB PLCN  SET PLCN=0
0482  01014 062010R       LDA ...1+1 (2)  LIST 'EQU'
0483  01015 016004X       JSB LIST
0484  01016 062100R       LDA SUMP  REPLACE PLCN VALUE
0485  01017 072117R       STA PLCN
0486  01020 026511R       JMP HC04
0487  01021 062020X HC70  LDA LTFLG    GET LITERAL FLAG 
0488  01022 002002        SZA          ARE LITERALS PRESENT?







 PAGE 0012 #01  *** DOS/RTE ASMB2  FALL 1971 ***


0489  01023 016036X       JSB ?ARTL     YES, GO TO LITERAL PROCESSOR
0490  01024 016005X       JSB LOUT     OUTPUT THE ARITH INSTRUCTION 
0491  01025 026715R       JMP ARTX     GO PROCEESS THE 'DEF' PORTION..
0492  01026 016026X HC80  JSB CHOPI    GO EVALUATE THE COUNT
0493  01027 027041R       JMP HC84     BAD COUNT EXIT 
0494  01030 046665R       ADB M17       B-17
0495  01031 006020        SSB           B GRTR THAN 16? 
0496  01032 056665R       CPB M17       NO.  IS B=0?
0497  01033 016027X       JSB OPERR     YES, IT'S AN 'M' ERROR,.
0498  01034 062100R       LDA SUMP     GET THE SHIFT OR ROTATE COUNT..
0499  01035 012021R       AND .12+3    MASK OUT LOWEST 4 BITS 
0500  01036 042113R HC82  ADA INST     MAKE UP THE FINAL INSTRUCTION
0501  01037 072113R       STA INST
0502  01040 026757R       JMP HC30     GO AND OUTPUT THE INSTRUCTION
0503  01041 002400  HC84  CLA          SET COUNT FOR 16 BIT SHIFT ROTATE
0504  01042 027036R       JMP HC82















































 PAGE 0013 #01  *** DOS/RTE ASMB2  FALL 1971 ***


0506*             ************************* 
0507*             * OCT/DEC/ASC PROCESSOR * 
0508*             ************************* 
0509  01043 062127R NUMP  LDA SCN1+2
0510  01044 072121R       STA PNTR      SET POINTER 
0511  01045 062024R       LDA ..M1
0512  01046 072103R       STA T+1  SET FPAS=-1
0513  01047 062107R       LDA CODE
0514  01050 052015R       CPA ...1+6 (7)
0515  01051 027165R      JMP ASCR 
0516  01052 066121R HE06 LDB PNTR  PNTS AT 1ST CH OF NUMBER 
0517  01053 076077R       STB SIGN
0518  01054 006400       CLB
0519  01055 077303R       STB CNTC
0520  01056 006004       INB
0521  01057 076076R       STB RELC
0522* 
0523*             * TEST CHARACTER FOR TERMINATOR * 
0524  01060 062121R HE08 LDA PNTR 
0525  01061 016002X      JSB GETC 
0526  01062 072101R       STA TERM
0527  01063 052036R       CPA L+4  COMMA? 
0528  01064 027106R      JMP HE12    YES
0529  01065 052046R      CPA BLNK BLANK?
0530  01066 027106R      JMP HE12    YES
0531* 
0532*             * UPDATE CHAR.CNTR(CNTC) AND POSN. PNTR(TLOC) * 
0533  01067 066107R      LDB CODE 
0534  01070 056041R       CPB .9        OCT?
0535  01071 027101R       JMP HE10+1    YES 
0536  01072 056673R       CPB DEX       'DEX'?
0537  01073 027104R       JMP HE11      YES 
0538  01074 066010R       LDB ...1+1 (2) NOT OCTAL
0539  01075 052040R       CPA L+6  PERIOD?
0540  01076 076076R       STB RELC  YES, SET RELC = 2 
0541  01077 052061R       CPA .E        'E' ? 
0542  01100 076076R HE10  STB RELC      YES, SET RELC FOR USE AS ASCN MD
0543  01101 037303R       ISZ CNTC
0544  01102 036121R      ISZ PNTR  BUMP PNTR
0545  01103 027060R      JMP HE08 
0546  01104 066011R HE11  LDB .1+2      SET B=3 FOR DEX MODE
0547  01105 027100R       JMP HE10
0548* 
0549*             * SET UP VALUE FOR LIST AND/OR PUNCH *
0550  01106 062107R HE12 LDA CODE 
0551  01107 006400       CLB
0552  01110 052041R       CPA .9        OCT?
0553  01111 027114R      JMP *+3   YES
0554  01112 066076R       LDB RELC  NOT OCT 
0555  01113 005727       OCT 5727 BLFBLF
0556  01114 047303R      ADB CNTC 
0557  01115 062077R       LDA SIGN
0558  01116 016031X       JSB ?ASCN     GO TO 'ASCI' CONVERSION 
0559  01117 002400       CLA    SET A=0 
0560  01120 072113R      STA INST 
0561  01121 076100R       STB SUMP  STORE VALUE 







 PAGE 0014 #01  *** DOS/RTE ASMB2  FALL 1971 ***


0562  01122 062005R       LDA VALU      SAVE LEAST SIG PART OF 'DEX'
0563  01123 072077R       STA SIGN
0564  01124 017152R HE18 JSB NOUT 
0565  01125 062076R       LDA RELC
0566  01126 001110        ARS,SLA       IS RELC = 0 OR 1? 
0567  01127 027136R       JMP HE20      NO, ITS 3 OR 2
0568  01130 062101R       LDA TERM  NO- 
0569  01131 052046R      CPA BLNK 
0570  01132 026511R       JMP HC04      EXIT ON BLANK 
0571  01133 036121R      ISZ PNTR  BUMP PNTR
0572  01134 016011X       JSB ?BPKU     SCAN OVER BLANKS
0573  01135 027052R      JMP HE06 
0574  01136 062100R HE20  LDA SUMP
0575  01137 072113R       STA INST  VALUE TO INST 
0576  01140 066076R       LDB RELC
0577  01141 056011R       CPB .1+2      IS RELC=3?
0578  01142 027146R       JMP HE22      YES- SET SUMP FOR 3RD WORD
0579  01143 002400       CLA
0580  01144 072076R HE21  STA RELC      SET RELC FOR NEXT TEST
0581  01145 027124R      JMP HE18 
0582* 
0583  01146 062077R HE22  LDA SIGN
0584  01147 072100R       STA SUMP      VALU TO SUMP
0585  01150 062010R       LDA .1+1      FOR SETTING RELC=2
0586  01151 027144R       JMP HE21
0587*          ***************************
0588*          * OCT DEC ASC WORD OUTPUT *
0589*          ***************************
0590  01152 000000  NOUT  NOP 
0591  01153 002400        CLA           SET A=0 FOR 1ST LINE OUTPUT 
0592  01154 036103R       ISZ T+1       SKIP FOR 1ST LINE OF OUTPUT.
0593  01155 062012R       LDA ...1+3 (4) SET A=4 FOR LIST 
0594  01156 066055R       LDB BLNS
0595  01157 016004X       JSB LIST
0596  01160 002400        CLA 
0597  01161 006404        CLB,INB 
0598  01162 016355R       JSB BREC    PUNCH 
0599  01163 036117R       ISZ PLCN    BUMP LOCN CNTR. 
0600  01164 127152R       JMP NOUT,I  EXIT
0601*             ********************
0602*             * PROCESS ASC HERE *
0603*             ********************
0604  01165 062010R ASCR  LDA ...1+1 (2) INDIC.'ASC'
0605  01166 016025X       JSB CHOP    GO EVALUATE WORD LENGTH 
0606  01167 026757R      JMP HC30  ERROR EXIT 
0607  01170 002002       SZA     VALUE ABSOL.?
0608  01171 027232R       JMP HP2D-1 NO; ERROR
0609  01172 046045R       ADB .M29      (-29)(VALUE IS IN SUMP TOO) 
0610  01173 006021       SSB,RSS   VAL.>28? 
0611  01174 027232R       JMP HP2D-1 YES; ERROR 
0612  01175 062121R      LDA PNTR 
0613  01176 072102R       STA T 
0614  01177 062100R       LDA SUMP
0615  01200 003004       OCT 3004 CMAINA
0616  01201 073303R       STA CNTC  VALUE(COMPL.) TO CNTC 
0617* 







 PAGE 0015 #01  *** DOS/RTE ASMB2  FALL 1971 ***


0618*             * PICK UP WORDS AND STORE INTO PROGRAM *
0619  01202 036102R SB    ISZ T 
0620  01203 062102R       LDA T 
0621  01204 016002X       JSB GETC
0622  01205 001727        ALF,ALF 
0623  01206 072135R       STA TEST
0624  01207 036102R       ISZ T 
0625  01210 062102R       LDA T 
0626  01211 016002X       JSB GETC
0627  01212 072113R       STA INST
0628* 
0629*             *  OUTPUT 2 ASCI CHARACTERS * 
0630  01213 017152R      JSB NOUT 
0631  01214 002400       CLA
0632  01215 072135R       STA TEST
0633  01216 037303R      ISZ CNTC 
0634  01217 027202R       JMP SB
0635  01220 026511R       JMP HC04      DONE, GO GET NEXT STATEMENT 
0636*             ************************* 
0637*             * PROCESS I/O GROUP HERE *
0638*             **************************
0639  01221 105000  RAM   OCT 105000
0640  01222 177400        OCT 177400     I/O MASKS
0641  01223 000300        OCT 300 
0642  01224 062127R IOPR  LDA SCN1+2  IS OPERAND
0643  01225 002002       SZA    PRESENT?
0644  01226 027236R       JMP P  YES! 
0645  01227 062107R       LDA CODE  NO OPERAND
0646  01230 052033R       CPA L+1  'HLT'? 
0647  01231 027233R      JMP HP2D 
0648* 
0649*        * OPERAND ERROR EXIT HERE *
0650  01232 016027X       JSB OPERR  (HP2D-1) 
0651  01233 002400  HP2D CLA
0652  01234 072101R       STA TERM      SAVE THE LIST PARAMETER 
0653  01235 026604R       JMP HC19
0654  01236 062670R P     LDA .C        TEST FOR 'CLEAR FLAG'(C). 
0655  01237 066057R       LDB .1000     GET 'C' MASK FOR IO INSTR.
0656  01240 016025X       JSB CHOP
0657  01241 027257R       JMP Q   ERROR EXIT
0658  01242 002002       SZA    A=0?
0659  01243 027263R       JMP R  NO- ERROR
0660  01244 060001       LDA 1      YES 
0661  01245 066113R       LDB INST        LOAD B WITH INSTRUCTION FORMAT
0662  01246 043222R       ADA IOPR-2     MASK WITH 177300 
0663  01247 057221R       CPB RAM     IS IT A RAM INSTR 
0664  01250 002001        RSS        SKIP IF YES
0665  01251 043223R       ADA IOPR-1   FINISH MASK IF NOT RAM 
0666  01252 066100R       LDB SUMP      RESTORE B CONTENTS
0667* 
0668*             * TEST FOR VALUE>63 * 
0669  01253 002020       SSA
0670  01254 027260R       JMP *+4  VAL>64 
0671  01255 062053R       LDA .OV      'OV'  ADDRESS OVERFOLW 
0672  01256 016024X      JSB ERPR 
0673  01257 006400  Q    CLB







 PAGE 0016 #01  *** DOS/RTE ASMB2  FALL 1971 ***


0674  01260 046113R       ADB INST  (HE54+1)
0675  01261 076113R       STB INST
0676  01262 027233R      JMP HP2D 
0677  01263 016027X R    JSB OPERR 'M' ERROR - RELOC.I/O ADDR.
0678  01264 027257R      JMP Q
0679* 
0680*             * PROCESS SOC OR SOS
0681* 
0682  01265 062127R HC28  LDA SCN1+2 PNTR TO OPERAND
0683  01266 064000        LDB 0    A TO B 
0684  01267 016032X       JSB ?MSYM 
0685  01270 042024R       ADA ..M1
0686  01271 002002       SZA
0687  01272 027233R      JMP HP2D 
0688  01273 062114R       LDA LAST  IS 'C'
0689  01274 052670R       CPA .C        IS 'C' PRESENT? 
0690  01275 027277R      JMP *+2    YES 
0691  01276 027233R      JMP HP2D    NO 
0692* 
0693*             * 'OR' 1 TO BIT 9 (C BIT) OF I/O INST * 
0694  01277 062113R       LDA INST
0695  01300 032057R       IOR .1000     MASK IN CURRENT BIT 
0696  01301 072113R       STA INST
0697  01302 027233R      JMP HP2D 
0698*             **********************
0699*             * MICRO-OP PROCESSOR *
0700*             **********************
0701  01303 000000  CNTC  BSS 1 
0702  00671         INSV  EQU SUM.
0703  01304 007777  MICRD OCT 7777,4000,60000,60,71,14000 
0704  01312 002400  MICR  CLA 
0705*             * INITIALIZE FLAGS *
0706  01313 073303R       STA CNTC   =0 WHEN CLE APPEARS
0707  01314 072101R       STA TERM   BITS 12-11 = 1 IF B REG
0708*                               BITS 12-11 = 2 IF A REG 
0709  01315 072004R       STA TEMP+4  BITS 14-13=1 IF SRG; =2 IF ASG
0710  01316 072671R      STA INSV  USED TO ACCUMULATE THE CODE
0711  01317 072111R       STA FLAG
0712  01320 072135R      STA TEST  CLEAR CHAR TESTER
0713* 
0714*             * START HERE FOR EACH NEW CODE *
0715* 
0716  01321 062113R F     LDA INST UNPACK THE MICRO-OP CODE 
0717*THE FORMAT IS:  BITS 14-13=1 IF SRG,2 IF ASG, 0 IF EITHER. 
0718*                BITS 12-11=1 IF BREG,2 IF AREG, 0 IF NEITHER.
0719*                BITS 11-0 = ACTUAL 12 BIT CODE 
0720  01322 013304R       AND MICRD     EXTRACT OPCODE
0721  01323 072112R       STA FLAQ  SAVE IT (=+2) 
0722  01324 062107R      LDA CODE  THIS IS THE GROUP NUMBER.
0723  01325 003004       OCT 3004  MAKE SURE'IT'S BIGGER THAN THE LAST
0724  01326 042111R       ADA FLAG  A=(LAST GRP)-(PRESENT GRP)
0725  01327 002020       SSA
0726  01330 027353R       JMP O    SEQUENCE IS OK 
0727* 
0728*             * IF PRES GRP IS GO WE CAN CHANGE IT AND MAY BE OK
0729  01331 062107R      LDA CODE 







 PAGE 0017 #01  *** DOS/RTE ASMB2  FALL 1971 ***


0730  01332 053307R       CPA MICRD+3   IS CODE TYPE = 60B (MICRO-OP)?
0731  01333 027337R       JMP *+4  CHANGE ERROR GROUP AND OP CODE 
0732  01334 062052R MERR  LDA .OP       'OP' FOR OPCODE ERROR 
0733  01335 016024X      JSB ERPR       RETURN
0734  01336 027233R       JMP HP2D
0735  01337 063310R       LDA MICRD+4   71B, CHANGE GROUP (FROM *-4)
0736  01340 072107R      STA CODE  TO 71
0737* 
0738*             * MOVE BITS 8-5 OF OPCODE TO BITS 4 AND 2-0 * 
0739  01341 062112R       LDA FLAQ
0740  01342 013305R       AND MICRD+1   SET A/B BIT 
0741  01343 070001       STA 1          SAVE IN B.
0742  01344 022112R       XOR FLAQ
0743  01345 001727       OCT 1727       MOVE TO BITS O AND 15-13
0744  01346 001310        RAR,SLA  MOVE BIT 0 TO
0745  01347 002004       INA            BIT 1.
0746  01350 001723       OCT 1723 ALF,RAR  ROTATE LEFT 3 TO BITS 4,2-0
0747  01351 030001        IOR 1     PUT IN THE A/B BIT
0748  01352 027323R       JMP F+2 
0749  01353 062107R O     LDA CODE
0750  01354 072111R       STA FLAG  SET LAST GRP TO PRESENT GRP 
0751* 
0752*             * CHECK REGISTER CONSISTENCY *
0753  01355 062113R      LDA INST 
0754  01356 013311R       AND MICRD+5   GET BITS 12-11
0755  01357 032101R       IOR TERM
0756  01360 053311R       CPA MICRD+5   IF EQUAL, THERE'S A REGISTER
0757  01361 027334R      JMP MERR       INCONSISTENCY.
0758  01362 072101R       STA TERM   NEW REGS TO REGS,
0759* 
0760*             * OTHERWISE CHECK GROUP CONSISTENCY * 
0761  01363 062113R      LDA INST 
0762  01364 013306R       AND MICRD+2   BITS 14-13
0763  01365 032004R       IOR TEMP+4
0764  01366 053306R       CPA MICRD+2   IF EQUAL,THERE ARE 2 CODES
0765  01367 027334R      JMP MERR       FROM DIFFERENT GROUPS.
0766  01370 072004R       STA TEMP+4
0767*             * CHECK FOR CLE * 
0768  01371 062112R       LDA FLAQ
0769  01372 002003       OCT 2003 SZA,RSS 
0770  01373 037303R       ISZ CNTC
0771* 
0772*             * NOW 'OR' THE CODE INTO CURRENT CODE SO FAR *
0773  01374 032671R      IOR INSV 
0774  01375 072671R      STA INSV 
0775* 
0776*             * GET THE NEXT CHARACTER *
0777  01376 062126R       LDA SCN1+1   OPCODE PNTR
0778  01377 042011R       ADA ...1+2   (3)
0779  01400 072121R      STA PNTR  PROINTS AT POSN FOLLOWINT OPCODE 
0780  01401 016012X       JSB ?PKUP 
0781  01402 052046R      CPA BLNK  IF SO WE ARE DONE. 
0782  01403 027412R       JMP *+7 
0783  01404 052036R       CPA L+4  COMMA ?
0784  01405 027407R      JMP *+2
0785  01406 027334R      JMP MERR 







 PAGE 0018 #01  *** DOS/RTE ASMB2  FALL 1971 ***


0786* 
0787*             * GET THE NEXT OPCODE * 
0788  01407 016007X       JSB ?OPLK     OPCODE LOOKUP 
0789  01410 027233R       JMP HP2D
0790  01411 027321R       JMP F 
0791* 
0792*             * TO FINISH TEST CLE; IF USED AND IN ASG SET, ADD 40
0793*             * TO THE CODE.
0794  01412 062004R       LDA TEMP+4 (FROM *-7) 
0795  01413 001727       OCT 1727 ALF,ALF 
0796  01414 002003       OCT 2003 SZA,RSS 
0797  01415 032046R       IOR BLNK      (40B) 
0798  01416 067303R       LDB CNTC
0799  01417 006003       OCT 6003 SZB,RSS 
0800  01420 002400       CLA
0801  01421 032671R      IOR INSV 
0802  01422 072113R      STA INST 
0803  01423 027233R       JMP HP2D
0804*          ******************************** 
0805*          * SEARCH SYMBL TBL FOR LITERAL * 
0806*          ******************************** 
0807  01424 000000  LKLIT NOP 
0808  01425 062034X       LDA ?ICSA     GET LOC'N OF ASCI BUFFER
0809  01426 072134R       STA SYMP+1
0810  01427 072020X       STA LTFLG  SET LTFLG#0
0811  01430 016015X       JSB SYMK      SYMBOL TABLE LOOKUP ROUTINE 
0812  01431 006400        CLB    ERROR RETURN 
0813  01432 046120R       ADB PLEN ADDR OF LITERAL
0814  01433 002404        CLA,INA  A=1
0815  01434 076100R       STB SUMP
0816  01435 072076R       STA RELC
0817  01436 127424R       JMP LKLIT,I  LKLIT EXIT * 
0818********************************************************************
0819********** CHANGE LOC'N. X IN ASMB IF THIS PROGS. LWA > 1440B ******
0820********************************************************************
0821  00701         ?ART  EQU ART 
0822  00355         ?BREC EQU BREC
0823  01424         ?LKLI EQU LKLIT 
0824  00321         ?SKPR EQU SKPR
0825  00324         ?SPCR EQU SPCR
0826                      END ASMB2 
**  NO ERRORS*














$END ASMB     

*
--> Assemble 20874-60005_ASMB3
ON,ASMB,99







 PAGE 0001


0001                ASMB,L,B,C     DOS/RT ASSEMBLER FEBRUARY 1970 
**  NO ERRORS*





























































 PAGE 0002 #01  *** DOS/RTE ASMB3  FALL 1971 ***


0001                ASMB,L,B,C     DOS/RT ASSEMBLER FEBRUARY 1970 
0003  00000               NAM ASMB3,5,99
0004                      ENT ASMB3 
0005                      EXT ?X,?MOVE,?LOUT,?LIST,?CHPI,?OPER,?BFLG
0006                      EXT ?PNCH,?ICSA,?ASCI,?ASII,?PNLE,?ENDS,?ASMB 
0007                      EXT ?PLIN,?PCOM,?LINS,EXEC,?LGFL
0008                      EXT ?WRIF 
0009*             ****************************
0010*             * TEMPORARY AND FLAG REGION*
0011*             ****************************
0012  00000 000000  TEMP  BSS 321B
0013  00000         #     EQU TEMP     SAME AS DATA ORIGIN
0014  00007         ...1  EQU TEMP+7
0015  00007         .1    EQU ...1
0016  00016         .12   EQU .1+7
0017  00024         ..M1 EQU #+24B
0018  00055         BLNS  EQU #+55B 
0019  00100         SUMP  EQU #+100B
0020  00106         CNTB  EQU #+106B
0021  00113         INST  EQU #+113B   OPCODE FORMAT
0022  00117         PLCN  EQU #+117B   PROGRAM LOCATION COUNTER 
0023  00120         PLEN  EQU #+120B LIT LENGTH PASS 1/LIT ORG PASS 2 
0024  00122         RCNT  EQU #+122B
0025  00123         SAVB  EQU #+123B
0026  00125         SCN1  EQU #+125B   STATE LNG/OPCODE/OPERAND/LABEL(4)
0027  00131         SVST  EQU #+131B
0028  00225         PBUF  EQU #+225B    60 WORD PUNCH BUFFER
0029  00225         WCNT  EQU PBUF  WORD(BLK) CNT FOR BIN.RECRD.
0030  00007         BFLAG EQU ?BFLG 
0031*          ******************************************************** 
0032*          * THE BSS 32B BELOW OFFSETS BREC BY THE LENGTH OF THE  * 
0033*          *   SKP AND SPC ROUTNES IN ASMB2                       * 
0034*          ******************************************************** 
0035  00321 000000        BSS 32B       *** THIS IS THE SPECIAL OFFSET *
0036*        *************************
0037*        * BINARY OUTPUT ROUTINE *
0038*        *************************
0039  00353 177712  .M54  DEC -54 
0040  00354 060100        OCT 60100     RIC=5, CURRENT PAGE 
0041  00355 000000  BREC NOP
0042  00356 072124R       STA SAVB+1 SAVE RELOC'N BYTE
0043  00357 062007X       LDA BFLAG     GET PUNCH REQUEST FLAG
0044  00360 042023X       ADA ?LGFL     LOAD/GO FLAG
0045  00361 002003        SZA,RSS       WAS PUNCH REQUESTED?
0046  00362 126355R      JMP BREC,I  NO.
0047  00363 062225R      LDA WCNT 
0048  00364 006002       SZB RECORD OUT?
0049  00365 026407R      JMP HI66    NO.
0050  00366 002003       SZA,RSS WCNT=0?
0051  00367 126355R      JMP BREC,I YES.
0052* 
0053*             * OUTPUT A RECORD 
0054* 
0055  00370 062225R HI60 LDA WCNT 
0056  00371 001727        ALF,ALF  ROTATE 8 
0057  00372 072225R       STA WCNT   STORE WCNT IN UPPER PBUF 







 PAGE 0003 #01  *** DOS/RTE ASMB3  FALL 1971 ***


0058  00373 162131R       LDA SVST,I    POSITION REMAIN RELOCATION BYTES
0059  00374 001723       ALF,RAR
0060  00375 036122R      ISZ RCNT 
0061  00376 026374R      JMP *-2
0062  00377 001200       RAL
0063  00400 172131R      STA SVST,I  STORE RELOC.BYTES
0064* 
0065*             * SET REC.ID CODE (WORD 2) *
0066  00401 066354R       LDB BREC-1    GET RIC/PAGE INDICATOR
0067  00402 046226R       ADB PBUF+1 SET REMAINDER
0068  00403 076226R       STB PBUF+1
0069  00404 016010X       JSB ?PNCH     GO TO 'PUNCH' 
0070  00405 126355R      JMP BREC,I  AND EXIT 
0071* 
0072*  PROCESS A BINARY OUTPUT WORD 
0073* 
0074  00406 000231R       DEF PBUF+4
0075  00407 062225R HI66 LDA WCNT 
0076  00410 002002       SZA    FIRST WORD OF RECORD? 
0077  00411 026425R       JMP HI70      -NO-
0078  00412 066117R      LDB PLCN  PLCN TO BREG 
0079  00413 076230R      STB PBUF+3  SET DBL ADDR.
0080  00414 072226R       STA PBUF+1  SET PBUF+1=0
0081  00415 066012R       LDB ...1+3  (4) 
0082  00416 076225R      STB WCNT  SET WCNT = 4 
0083  00417 066406R       LDB HI66-1
0084  00420 076505R      STB STOR  SET STOR=L(PBUF+4) 
0085  00421 066030R       LDB ..M1+4  (-5)
0086  00422 076122R      STB RCNT  SET RCNT=-5
0087  00423 066353R       LDB .M54      -54 
0088  00424 076106R      STB CNTB  SET CNTB FOR WORD COUNT
0089  00425 066122R HI70  LDB RCNT
0090  00426 056030R       CPB ..M1+4  RCNT= -5? 
0091  00427 026476R      JMP HI74  -YES-SET UP ADDRESSES
0092* 
0093*              * STORE RELOC.BYTE / UPDATE
0094* 
0095  00430 036226R HI71  ISZ PBUF+1          UPDATE # OF DATA WRDS 
0096  00431 162131R      LDA SVST,I 
0097  00432 001723       ALF,RAR
0098  00433 032124R       IOR SAVB+1 RELOC BYTE 
0099  00434 172131R      STA SVST,I 
0100  00435 036122R      ISZ RCNT  BYTE WORD FULL?
0101  00436 026447R      JMP HI76  -NO- 
0102  00437 066030R       LDB ..M1+4 -YES-(-5)
0103  00440 076122R      STB RCNT  RESET RCNT TO -5 
0104  00441 001200       RAL
0105  00442 172131R      STA SVST,I 
0106  00443 062106R      LDA CNTB 
0107  00444 052024R      CPA ..M1 
0108  00445 002001       RSS
0109  00446 036106R      ISZ CNTB 
0110  00447 066113R HI76 LDB INST 
0111  00450 176505R      STB STOR,I 
0112  00451 036505R      ISZ STOR 
0113  00452 036225R      ISZ WCNT 







 PAGE 0004 #01  *** DOS/RTE ASMB3  FALL 1971 ***


0114  00453 062124R       LDA SAVB+1 RELOC BYTE 
0115  00454 052013R       CPA ...1+4 (5) 2 WORD INSERT? 
0116  00455 002001       RSS
0117  00456 026473R       JMP HI78 TO EXIT TEST 
0118  00457 036225R      ISZ WCNT  BUM.WORD COUNT 
0119  00460 062100R      LDA SUMP 
0120  00461 172505R      STA STOR,I 
0121  00462 036505R      ISZ STOR 
0122  00463 012506R       AND BRMSK     CLEAR UPPER 6 BITS OF 'SUMP'
0123  00464 005121       BRS,BRS    CLEAR LOWER 2 BITS OF INST
0124  00465 005020       BLS,BLS
0125  00466 030001       IOR 1     'OR' B TO A
0126  00467 072113R      STA INST 
0127  00470 036106R      ISZ CNTB   BUMP CNTB 
0128  00471 026473R       JMP HI78
0129  00472 026370R      JMP HI60 
0130  00473 036106R HI78 ISZ CNTB    IS THIS THE LAST WORD? 
0131  00474 126355R      JMP BREC,I  NO- EXIT 
0132  00475 026370R       JMP HI60    YES- GO TO PUNCH
0133  00476 066505R HI74 LDB STOR 
0134  00477 076131R      STB SVST 
0135  00500 002400        CLA 
0136  00501 172131R       STA SVST,I   CLEAR RELOC BYTE WORD
0137  00502 036505R      ISZ STOR 
0138  00503 036225R      ISZ WCNT 
0139  00504 026430R       JMP HI71
0140  00505 000000  STOR  BSS 1 
0141  00506 001777  BRMSK OCT 1777
0142****   END OF BREC   ***
0143*             ******************************
0144*             *    PASS 2 END PROCESSOR    *
0145*             ******************************
0146  00507 120000        OCT 120000    FOR RIC = 5 
0147  00510 002400  ASMB3 CLA 
0148  00511 072225R       STA PBUF
0149  00512 072226R       STA PBUF+1
0150  00513 072227R       STA PBUF+2
0151  00514 072230R       STA PBUF+3
0152  00515 062120R       LDA PLEN      IF PLEN=0 THERE ARE NO LITERALS 
0153  00516 002003        SZA,RSS    LITERALS PRESENT ? 
0154  00517 026575R       JMP HC56
0155  00520 072117R       STA PLCN  SET PLCN=FWA AFTER PROGRAM
0156  00521 062001X       LDA ?X
0157  00522 072647R NL01  STA ENTV   ADDR OF SYMBOL TABLE 
0158  00523 162647R       LDA ENTV,I  1ST WRD OF ENTRY
0159  00524 002003        SZA,RSS    END OF TABLE?
0160  00525 026573R       JMP NL99   YES
0161  00526 001700        ALF 
0162  00527 070001        STA 1 
0163  00530 012015R       AND ...1+6  GET ENTRY LENGTH
0164  00531 072646R       STA ENTC
0165  00532 060001        LDA 1 
0166  00533 001700        ALF 
0167  00534 012021R       AND .12+3  GET ENTRY TYPE 
0168  00535 052015R       CPA ...1+6  LITERAL?
0169  00536 026542R       JMP NL20     YES







 PAGE 0005 #01  *** DOS/RTE ASMB3  FALL 1971 ***


0170  00537 062647R NL10  LDA ENTV    UPDATE TO NEXT ENTRY ADDRESS
0171  00540 042646R       ADA ENTC
0172  00541 026522R       JMP NL01    GO TO PROCESS NEXT ENTRY
0173*          * PROCESS A LITERAL FOR OUTPUT * 
0174  00542 062647R NL20  LDA ENTV
0175  00543 003004        CMA,INA   SET UP ADDR OF LITRL CONSTANT 
0176  00544 066011X       LDB ?ICSA     GET LOC'N OF ASCI BUFFER
0177  00545 072550R       STA *+3 
0178  00546 062012R       LDA ...1+3  4 TO A
0179  00547 016002X       JSB ?MOVE     LIT CONST TO ASCI/ASCI+1
0180  00550 000000        NOP 
0181  00551 062013X       LDA ?ASII 
0182  00552 072645R       STA NLST   SAVE 2ND WRD 
0183  00553 062012X       LDA ?ASCI     PROCESS 1ST WORD
0184  00554 072113R       STA INST
0185  00555 016003X       JSB LOUT      PUNCH 
0186  00556 062012R       LDA ...1+3
0187  00557 016004X       JSB LIST
0188  00560 062646R       LDA ENTC
0189  00561 052011R       CPA ...1+2  IS IT 2 WORD CONSTANT?
0190  00562 026571R       JMP NL30    NO
0191  00563 062645R       LDA NLST    YES 
0192  00564 072113R       STA INST    PROCESS 2ND WORD
0193  00565 036117R       ISZ PLCN    BUMP LOCN COUNTER 
0194  00566 016003X       JSB LOUT     PUNCH
0195  00567 062012R       LDA ...1+3
0196  00570 016004X       JSB LIST
0197  00571 036117R NL30  ISZ PLCN    BUMP LOCN CNTR
0198  00572 026537R       JMP NL10
0199*           * EXIT HERE 
0200  00573 006400  NL99  CLB 
0201  00574 016355R       JSB BREC
0202* 
0203*             * PUNCH 'END' RECORD *
0204  00575 062650R HC56  LDA .2000     FOR WCNT = 4
0205  00576 072225R      STA WCNT  SET WORD COUNT 
0206  00577 062127R       LDA SCN1+2  POINTS TO OPERAND (IF ANY)
0207  00600 072230R       STA PBUF+3   CLEARED IF NO EXECUTION ADDRESS
0208  00601 002002        SZA      EXEC.ADDR.PRSNT? 
0209* 
0210*              * PROCESS EXEC.ADDR. * 
0211  00602 016005X       JSB ?CHPI     GO EVALUATE OPERAND 
0212  00603 026607R       JMP HC54      ERROR, OR NO EXECUTION ADDRESS
0213  00604 052007R       CPA .1        RELOCATABLE?
0214  00605 026611R       JMP HC55      YES 
0215  00606 016006X       JSB ?OPER     ERROR - NOT RELOCATABLE 
0216  00607 002400  HC54 CLA
0217  00610 006400       CLB
0218  00611 076230R HC55  STB PBUF+3    STORE THE EXECUTION ADDRESS.
0219  00612 042507R       ADA ASMB3-1   SET RIC = 5 
0220  00613 072226R       STA PBUF+1
0221  00614 062007X       LDA ?BFLG     GET PUNCH FLAG
0222  00615 042023X       ADA ?LGFL     LOAD/GO FLAG
0223  00616 002003        SZA,RSS       PUNCHING REQUESTED? 
0224  00617 026633R       JMP HC57      NO - END OF PROGRAM 
0225  00620 016010X       JSB ?PNCH 







 PAGE 0006 #01  *** DOS/RTE ASMB3  FALL 1971 ***


0226  00621 062023X       LDA ?LGFL 
0227  00622 002002        SZA 
0228  00623 016024X       JSB ?WRIF     CLOSE OUT LOAD/GO AREA
0229  00624 062007X       LDA ?BFLG     PUNCH FLAG
0230  00625 002003        SZA,RSS       WAS A TAPE BEING PUNCHED? 
0231  00626 026633R       JMP HC57      NO,  SKIP TRAILER OUTPUT

























































 PAGE 0007 #01  *** DOS/RTE ASMB3  FALL 1971 ***


0233*              ****************** 
0234*              * OUTPUT TRAILER * 
0235*              ****************** 
0236  00627 016022X       JSB EXEC      GO TO EXEC
0237  00630 000633R       DEF *+3 
0238  00631 000011R       DEF .1+2
0239  00632 000014X       DEF ?PNLE     LEADER/TRAILER CW 
0240  00633 002404  HC57  CLA,INA       SET A=1 FOR LIST PARAMETER
0241  00634 066055R       LDB BLNS  BLANKS FOR RELOC,INDIC. 
0242  00635 016004X       JSB LIST
0243  00636 016015X       JSB ?ENDS     * PRINT ERROR COUNT * 
0244  00637 066017X       LDB ?PLIN 
0245  00640 056020X       CPB ?PCOM     TTY OUTPUT ?
0246  00641 026016X       JMP ASMBX     YES, GO TO END OF ASSEMBLER 
0247  00642 003400        CCA           NO, SET FOR TOP OF FORM 
0248  00643 016021X       JSB ?LINS     GO TO LINE SKIP ROUTINE 
0249  00644 026016X       JMP ASMBX     EXIT FROM ASSEMBLER 
0250  00645 000000  NLST  NOP        TEMP 
0251  00646 000000  ENTC  NOP           TEMPORARY 
0252  00647 000000  ENTV  NOP    ENTBL COUNTER
0253  00650 002000  .2000 OCT 2000
0254  00016         ASMBX EQU ?ASMB 
0255  00004         LIST  EQU ?LIST 
0256  00003         LOUT  EQU ?LOUT 
0257                      END ASMB3 
**  NO ERRORS*






























$END ASMB     

*
--> Assemble 20874-60006_ASMB4
ON,ASMB,99







 PAGE 0001


0001                ASMB,L,B,C     DOS/RT ASSEMBLER FEBRUARY 1970 
**  NO ERRORS*





























































 PAGE 0002 #01  *** DOS/RTE ASMB4  FALL 1971 ***


0001                ASMB,L,B,C     DOS/RT ASSEMBLER FEBRUARY 1970 
0003  00000               NAM ASMB4,5,99
0004                      ENT ASMB4,?INS? 
0005                      EXT ?BPKU,?RSTA,?PKUP,?SYMK,?CHOP,?ENDS,?PNLE 
0006                      EXT ?DRFL,?MSYS,?ASMB,?SEGM,EXEC,?ERPR,?X 
0007                      EXT ?MOVE,?BFLG,?LFLG,?TFLG,?CHPI 
0008                      EXT    ?V,?ASM1,?MESX,?BNCN,?PRNT 
0009                      EXT ?LWA,?TSTR,?WEOF,?RDSC,?RLUN,?LUNI
0010                      SUP 
0011  00000 000000  TEMP  BSS 225B      RESERVE TEMPORARY AREA
0012  00000         #     EQU TEMP     SAME AS DATA ORIGIN
0013  00001         VAL0  EQU TEMP+1    'ASCN' AND  'SYMK'
0014  00004         DCNT  EQU TEMP+4
0015  00007         ...1  EQU TEMP+7
0016  00007         .1    EQU ...1
0017  00016         .12   EQU .1+7
0018  00024         ..M1  EQU .12+6 
0019  00032         L     EQU ..M1+6
0020  00041         .9    EQU #+41B 
0021  00042         .29   EQU #+42B 
0022  00045         .M29  EQU #+45B 
0023  00046         BLNK  EQU #+46B     =40B(LOWER BLANK) 
0024  00047         .IL   EQU #+47B 
0025  00050         .MBLN EQU #+50B 
0026  00051         .NO   EQU #+51B 
0027  00055         BLNS  EQU #+55B 
0028  00061         .E    EQU #+61B 
0029  00071         NAMI  EQU #+71B    LOC'N FOR TEMP SYMBOL STORAGE
0030  00072         NAME  EQU #+72B    FOR USE BY 'OPLK'
0031  00100         SUMP  EQU #+100B   RUNNING SUM FOR 'CHOP' 
0032  00105         CFRA  EQU #+105B   'ASCN' 
0033  00106         CNTB  EQU #+106B
0034  00107         CODE  EQU #+107B   OPCODE TYPE(FROM OPTABLE)
0035  00113         INST  EQU #+113B   OPCODE FORMAT
0036  00117         PLCN  EQU #+117B   PROGRAM LOCATION COUNTER 
0037  00121         PNTR  EQU #+121B L POINTS AT LAST OER CURRENT CHAR. 
0038  00125         SCN1  EQU #+125B   STATE LNG/OPCODE/OPERAND/LABEL(4)
0039  00132         SYMI  EQU #+132B   ADDR CNTR FOR SYMBOL TBL (SYMK)
0040  00133         SYMP  EQU #+133B   SYMBOL LNG/ AND LOC'N
0041  00141         ENTV  EQU #+141B
0042*             * I/O STATEMENT BUFFER *
0043  00142         IOBF  EQU #+142B    50 WORDS + END OF STATEMENT BUFF
0044*             *(INPUXFFER(BUFF) STARTS IN 11TH WORD)* 
0045  00154         BUFF EQU IOBF+12B 
0046  00225 000000  PBUF  BSS 17        SAVES THE 'NAN' RECORD INFO 
0047  00020         BFLAG EQU ?BFLG 
0048  00001         BPKUP EQU ?BPKU 
0049  00023         CHOPI EQU ?CHPI 
0050  00015         ERPR  EQU ?ERPR 
0051  00021         LFLAG EQU ?LFLG 
0052  00017         MOVE  EQU ?MOVE 
0053  00011         MSYMS EQU ?MSYS 
0054  00003         PKUP  EQU ?PKUP 
0055  00002         RSTA  EQU ?RSTA 
0056  00016         X     EQU ?X








 PAGE 0003 #01  *** DOS/RTE ASMB4  FALL 1971 ***


0058  00246 016002X ASMB4 JSB RSTA
0059  00247 062107R       LDA CODE
0060  00250 052021R       CPA .12+3 'HED' STATE?
0061  00251 026262R       JMP IXH   YES 
0062  00252 072025X       STA ?ASM1     CLEAR 'CS' AND 'INIT' FLAGS 
0063  00253 066703R       LDB .2000 
0064  00254 076117R       STB PLCN      INITIALIZE PROGRAM COUNTER
0065  00255 052007R       CPA .1        IS OPCODE AN ORG? 
0066  00256 026264R       JMP HI12
0067  00257 062051R       LDA .NO       'NO'= NO ORG STATEMENT
0068  00260 016015X      JSB ERPR 
0069  00261 026322R       JMP HA32+1
0070  00262 116113R IXH   JSB INST,I  GO TO HEDSB 
0071  00263 026246R       JMP ASMB4 
0072  00264 016005X HI12  JSB ?CHOP     PROCESS AN ORIGIN VALUE 
0073  00265 026322R       JMP HA32+1    ERROR RETURN
0074  00266 076117R       STB PLCN      SET INITIAL COUNTER VALUE 
0075  00267 026321R       JMP HA32      GO TO START PASS 1
0076  00270 000000        BSS PBUF-*+60  MAKE ROOM FOR REST OF PUNCH BUF












































 PAGE 0004 #01  *** DOS/RTE ASMB4  FALL 1971 ***


0078  00321 016002X HA32 JSB RSTA 
0079  00322 062107R       LDA CODE
0080  00323 052016R       CPA .12 
0081  00324 026565R      JMP HB00 TO END
0082  00325 052046R       CPA BLNK      (40B)  SUP/UNS? 
0083  00326 026321R       JMP HA32
0084  00327 042026R       ADA ..M1+2  -3
0085  00330 002020        SSA 
0086  00331 026560R       JMP HA64      ORR OR ORG FOUND
0087  00332 052414R       CPA .12B      NAM?
0088  00333 026457R       JMP HA63     YES, ERROR 
0089  00334 042026R       ADA ..M1+2 (-3) 
0090  00335 002020        SSA      'COM','ENT' OR 'EXT' ? 
0091  00336 026457R       JMP HA63      YES - ERROR 
0092  00337 052013R       CPA ...1+4  'EQU'?
0093  00340 026543R      JMP HA56 TO EQU
0094  00341 052041R       CPA .9        (11B)  HED? 
0095  00342 026321R       JMP HA32
0096  00343 052016R       CPA .12  (14B) SKP? 
0097  00344 026321R       JMP HA32
0098  00345 052017R       CPA .12+1 (15B) SPC?
0099  00346 026321R       JMP HA32
0100  00347 052020R       CPA .12+2 (16B) LST/UNL?
0101  00350 026321R       JMP HA32
0102* 
0103*             * TEST FOR LABEL FIELD
0104  00351 062130R       LDA SCN1+3  GET LABEL LENGTH
0105  00352 002003        SZA,RSS      LABEL PRESENT ?
0106  00353 026363R       JMP HALB      NO, DONE
0107  00354 072133R       STA SYMP      SET CHAR COUNT
0108  00355 066704R       LDB FFUB
0109  00356 076134R       STB SYMP+1  SET LABEL ADDR. 
0110  00357 002400        CLA           SET A=0 FOR ABSOLUTE VALUE
0111  00360 066117R       LDB PLCN
0112  00361 016421R       JSB INSR    INSERT LABEL INTO SYMBOL TABLE
0113  00362 000000        NOP      ERROR EXIT 
0114  00363 062107R HALB  LDA CODE      OPCODE INDICATOR
0115  00364 052416R       CPA DEX 
0116  00365 026461R       JMP HA40      IT'S A 'DEX'
0117  00366 052042R       CPA .29  REP? 
0118  00367 026560R       JMP HA64  YES 
0119  00370 052015R       CPA ...1+6  (7) 
0120  00371 026526R      JMP HA54 TO ASC
0121  00372 052407R       CPA .26B     INTEGER ARITH(HARDWARE)? 
0122  00373 026562R       JMP HA70     YES....
0123  00374 052014R       CPA ...1+5  (6) ARITH MACRO?
0124  00375 026457R       JMP HA63      YES, ERROR
0125  00376 042415R       ADA .M10      -10 
0126  00377 002020       SSA OCT OR DEC?
0127  00400 026461R      JMP HA40   YES.
0128  00401 002003       OCT 2003 BSS?
0129  00402 026410R       JMP HA3M  TO BSS PROC.
0130  00403 002404  HA3B CLA,INA  TO ADD 1 TO PLCN
0131* 
0132*             * INCREMENT PROGRAM LOCN. CNTR. * 
0133  00404 042117R HA3Z  ADA PLCN   (HA3B+1) 







 PAGE 0005 #01  *** DOS/RTE ASMB4  FALL 1971 ***


0134  00405 072117R      STA PLCN 
0135  00406 026321R      JMP HA32 
0136  00407 000026  .26B  OCT 26       FOR HARDWARE ARITHMETIC

0138*             * PROCESS BSS * 
0139  00410 016023X HA3M  JSB CHOPI EVAL.OPERAND
0140  00411 026321R      JMP HA32  ERROR
0141  00412 060001        LDA 1   B TO A
0142  00413 026404R       JMP HA3B+1
0143  00414 000012  .12B  OCT 12
0144  00415 177766  .M10  DEC -10 
0145  00416 000025  DEX   OCT 25        OP TYPE FOR 'DEX' 



















































 PAGE 0006 #01  *** DOS/RTE ASMB4  FALL 1971 ***


0147*        *************************************************
0148*        * INSR: ADD ENTRY TO THE SYMBOL TABLE, W HACCOU *
0149*        *  LINKAGE:            B = VALUE ON INPUT       *
0150*        *   (OUTPUT) SYMP=NO.OF CHARS., SYMN=ENTRY FWA  *
0151*        *            L    JSB INSR,I                    *
0152*        *           L+1   ERROR RETN ('SO' OR 'DD'PRNTD)*
0153*        *           L+2   NORMAL RETN                   *
0154*        *************************************************
0155  00417 042104  .DD   ASC 2,DDSO
0156  00421 000000  INSR  NOP 
0157  00422 076075R      STB NAME+3    SAVE VALUE 
0158  00423 016004X       JSB ?SYMK     SYMBOL TABLE LOOKUP 
0159  00424 026430R      JMP INS1 
0160  00425 062417R       LDA .DD       NO, 'DD' ERROR (MULTIPLE SYMBOL)
0161  00426 016015X INSX  JSB ERPR
0162  00427 126421R       JMP INSR,I    GET OUT HERE
0163  00430 066071R INS1 LDB NAMI 
0164  00431 046002R       ADB TEMP+2
0165  00432 076001R       STB VAL0  SET LIMIT 
0166  00433 062031X       LDA ?LWA      GET LWA AVAIL. MEM. 
0167  00434 003004        CMA,INA 
0168  00435 042132R       ADA SYMI  TEST FOR SYMBOL TBL 
0169  00436 042002R       ADA TEMP+2    OVERFLOW
0170  00437 002020       SSA
0171  00440 026443R      JMP *+3       NO 
0172  00441 062420R       LDA .DD+1     'SO' SYMBOL TABLE OVERFLOW
0173  00442 026426R       JMP INSX 'SO' ERROR 
0174  00443 062075R      LDA NAME+3    MOVE VALUE 
0175  00444 170001        STA 1,I       UP
0176  00445 062071R      LDA NAMI 
0177  00446 164000        LDB 0,I  ADD ENTRY  (FROM *+6)
0178  00447 176132R      STB SYMI,I    TO SYMBOL
0179  00450 052001R       CPA VAL0
0180  00451 026455R       JMP INSEX     EXIT
0181  00452 002004       INA
0182  00453 036132R      ISZ SYMI 
0183  00454 026446R       JMP *-6 
0184  00455 036421R INSEX ISZ INSR      BUMP EXIT POINT FOR A+2 EXIT
0185  00456 126421R       JMP INSR,I    EXIT HERE 
0186  00457 062047R HA63  LDA .IL       NAM IS ILLEGAL AFTER START
0187  00460 026541R       JMP HA55+2  TO ERPR 






















 PAGE 0007 #01  *** DOS/RTE ASMB4  FALL 1971 ***


0189*             *********************** 
0190*             * PROCESS OCT AND DEC * 
0191*             *********************** 
0192  00461 006404  HA40  CLB,INB       B=1 
0193  00462 052416R       CPA DEX       CHECK CODE FOR 'DEX'
0194  00463 046010R       ADB .1+1      B=3 IF CODE IS 'DEX'
0195  00464 076004R       STB DCNT      SET LOCN COUNT BUMPER 
0196  00465 002400        CLA 
0197  00466 072106R      STA CNTB 
0198  00467 072000R       STA TEMP
0199  00470 062127R       LDA SCN1+2
0200  00471 072121R       STA PNTR      SET POINTER 
0201* 
0202*             * PICK UP AND EXAMINE A CHARACTER * 
0203  00472 016003X HA41  JSB PKUP   (HA40+4 WAS HA41)
0204  00473 066004R       LDB DCNT      GET COUNT BUMPER
0205  00474 052036R       CPA L+4   COMMA?
0206  00475 026507R       JMP HA44      YES, GO SCAN FOR NEXT PARAM.
0207  00476 056011R       CPB .1+2      IS IT=3(I.E. DEX)?
0208  00477 026504R       JMP HA42      YES 
0209  00500 052040R       CPA L+6  PERIOD?
0210  00501 026514R      JMP HA48 
0211  00502 052061R       CPA .E        'E' ? 
0212  00503 026514R      JMP HA48 
0213  00504 052046R HA42  CPA BLNK      END OF STATEMENT? 
0214  00505 026523R       JMP HA49      YES 
0215  00506 026472R       JMP HA41
0216* 
0217*             * RESET FLT PT FLAG, SKIP BLANKS FOR NEXT CHAR *
0218  00507 002400  HA44  CLA 
0219  00510 072000R       STA TEMP
0220  00511 016001X       JSB BPKUP 
0221  00512 066004R       LDB DCNT      GET 'BUMP' COUNT
0222  00513 026520R       JMP HA48+4
0223* 
0224*             * FLT PT TEST FOR NUMBER USING BOTH . AND E * 
0225  00514 062000R HA48  LDA TEMP
0226  00515 036000R       ISZ TEMP
0227  00516 002002        SZA           E OR '.' COUNTED YET? 
0228  00517 006400        CLB           YES, SET B=0. 
0229* 
0230  00520 046106R       ADB CNTB      (HA48+4)
0231  00521 076106R       STB CNTB      ADD TO WORD COUNT 
0232  00522 026472R       JMP HA41
0233* 
0234*             * END OF NUMERIC PSEUDO-OP PROCESSOR *
0235  00523 062004R HA49  LDA DCNT
0236  00524 042106R       ADA CNTB      SET A=NO OF LOCNS TO BE USED
0237  00525 026404R       JMP HA3B+1  EXIT














 PAGE 0008 #01  *** DOS/RTE ASMB4  FALL 1971 ***


0239*             ********************************
0240*             * PROCESS ASC (GET VALUE OF N) *
0241*             ********************************
0242  00526 062010R HA54  LDA ...1+1 (2) 'ASC' INDIC.FOR CHOP 
0243  00527 016005X       JSB ?CHOP 
0244  00530 026403R      JMP HA3B ERROR 
0245  00531 002002       SZA
0246  00532 026537R      JMP HA55     ERROR-NOT ABS.VAL.
0247  00533 046045R       ADB .M29      -29 
0248  00534 062100R       LDA SUMP
0249  00535 006020        SSB      SKIP IF >28 WORDS
0250  00536 026404R       JMP HA3B+1
0251  00537 036117R HA55 ISZ PLCN   * ERROR EXIT  * 
0252  00540 062050R       LDA .MBLN     'M' ERROR(BAD OPERAND)
0253  00541 016015X       JSB ERPR  TO PRINT ERROR DIAG.
0254  00542 026321R      JMP HA32 
0255*             **********************
0256*             * PROCESS EQU PSEUDO *
0257*             **********************
0258  00543 016023X HA56 JSB CHOPI   EVALUATE OPERAND 
0259  00544 026321R      JMP HA32   *ERROR* 
0260  00545 052012R       CPA ...1+3 (4) EXT ?
0261  00546 062013R       LDA ...1+4 (5) SET FOR NON-PNCH EXT 
0262  00547 072000R       STA TEMP  NO
0263  00550 076001R       STB TEMP+1
0264  00551 006404       OCT 6404 CLB,INB 
0265  00552 016011X      JSB MSYMS  GO TO MEAS.SYMBOL, SET SYMP/SYMN
0266  00553 062000R       LDA TEMP
0267  00554 066001R       LDB TEMP+1
0268*             * SEND LABEL TO TABLE * 
0269  00555 016421R       JSB INSR      TO SYMBOL TABLE INSERTION RTN 
0270  00556 000000       NOP
0271  00557 026321R      JMP HA32 
0272*         ******************************
0273*         *     ORG ORR HED PROC.JUMPS *
0274*         ******************************
0275  00560 116113R HA64  JSB INST,I  GO TO SUBROUTINE
0276  00561 026321R      JMP HA32 
0277  00562 062010R HA70 LDA  .1+1      A=2 
0278  00563 026404R      JMP  HA3Z























 PAGE 0009 #01  *** DOS/RTE ASMB4  FALL 1971 ***


0280*             ************************
0281*             * PASS 1 END PROCESSOR *
0282*             ************************
0283  00564 000154R       DEF BUFF
0284  00565 062022X HB00  LDA ?TFLG     GET TABLE OUTPUT FLAG 
0285  00566 002003        SZA,RSS 
0286  00567 026641R       JMP HB08      TABLE NOT REQUESTED - FINISH PAS
0287  00570 062564R       LDA HB00-1
0288  00571 042012R       ADA .1+3
0289  00572 072564R       STA HB00-1    SET HB00-1 = L(BUFF+4)
0290  00573 062016X       LDA X         GET FWA OF AVAILABLE MEMORY 
0291  00574 072141R       STA ENTV   TO ENTV
0292  00575 162141R HBX   LDA ENTV,I  TEST 1ST WORD OF ENTRY
0293  00576 002003        SZA,RSS       COMPLETED?
0294  00577 026641R       JMP HB08      YES - GO TO FINISH PASS 1 
0295  00600 066141R       LDB ENTV      GET TBL ENTRY LOCATION
0296  00601 007004        CMB,INB 
0297*             * SEND ADDR. TO MOVE LINKAGE
0298  00602 076620R      STB HMOV5
0299*             * MOVE BLANKS TO BUFFER 
0300  00603 066055R       LDB BLNS
0301  00604 076154R       STB BUFF
0302  00605 076155R       STB BUFF+1
0303  00606 076156R       STB BUFF+2
0304  00607 076157R       STB BUFF+3
0305  00610 066704R       LDB FFUB  ADDR. OF BUFF TO B

0307*             * MOVE CHARS FROM SYMBOL TABLE *
0308  00611 001700        ALF 
0309  00612 012015R       AND ...1+6 (7) FOR NO.OF WRDS.
0310  00613 072100R       STA SUMP
0311  00614 052010R       CPA ...1+1 (2)
0312  00615 002400        CLA 
0313  00616 032007R      IOR ...1 
0314  00617 016017X       JSB MOVE
0315  00620 000000  HMOV5 NOP 
0316* 
0317*             * GET VALUE OF SYMBOL * 
0318  00621 066100R      LDB SUMP (NO.OF WORDS IN ENTRY)
0319  00622 046024R       ADB ..M1
0320  00623 046141R       ADB ENTV
0321  00624 076141R       STB ENTV
0322  00625 160001        LDA 1,I 
0323  00626 036141R      ISZ ENTV 
0324  00627 000040        CLE      SET E = 0 FOR OCTAL CONV.
0325  00630 016027X       JSB ?BNCN 
0326*             * STORE ASCI VALUE INTO BUFF
0327  00631 066564R       LDB HB00-1    GET L(BUFF+4) 
0328  00632 016024X       JSB ?V
0329  00633 066704R       LDB FFUB     SET PRINT PARAMETERS 
0330  00634 062020R       LDA .12+2  (14) 
0331  00635 016030X       JSB ?PRNT     GO TO PRINT 
0332  00636 026575R       JMP HBX  ENTRY DONE.
0333  00637 050101  .PASS ASC 2,PASS
0334* 
0335*             * ERRORS PRINTED *







 PAGE 0010 #01  *** DOS/RTE ASMB4  FALL 1971 ***


0336  00641 016006X HB08  JSB ?ENDS     GO TO END PASS PROCESSOR
0337  00642 066010X       LDB ?DRFL     GET THE DISC FLAG 
0338  00643 006002        SZB           DISK BEING USED?
0339  00644 026656R       JMP HB08R     NO. 
0340  00645 062036X       LDA ?LUNI     GET INPUT LUN 
0341  00646 052010R       CPA .1+1      IS IT THE DISC? 
0342  00647 002001        RSS           YES, SKIP THE FOLLOWING WRITE 
0343  00650 016033X       JSB ?WEOF     WRITE REST OF LAST SECTOR 
0344  00651 062032X       LDA ?TSTR     YES, GET INITIAL CODE WORD
0345  00652 016034X       JSB ?RDSC     GO INITIALIZE FOR NEW START 
0346  00653 062035X       LDA ?RLUN 
0347  00654 072036X       STA ?LUNI     SET INPUT LUN = DISC
0348  00655 026664R       JMP HB09      YES, SKIP'END PASS' MESSAGE 
0349  00656 062637R HB08R LDA .PASS     ** PUT OUT "*END ASMB PASS" MESS
0350  00657 066640R       LDB .PASS+1 
0351  00660 016026X       JSB ?MESX 
0352  00661 016014X       JSB EXEC      GO TO OPERATOR SUSPEND ROUTINE
0353  00662 000664R       DEF *+2 
0354  00663 000015R       DEF .1+6      OPERATOR SUSPEND REQ. CODE

0356*                   * START PASS 2 HERE  *
0357*             * TEST FOR PUNCH OUTPUT 

0359  00664 062020X HB09 LDA BFLAG
0360  00665 002003        SZA,RSS       PUNCH REQUESTED?
0361  00666 026673R       JMP *+5       NO
0362  00667 016014X       JSB EXEC      YES, OUTPUT THE LEADER
0363  00670 000673R       DEF *+3 
0364  00671 000011R       DEF .1+2      READER REQ CODE 
0365  00672 000007X       DEF ?PNLE     LEADER/TRAILER CW 
0366  00673 062021X       LDA LFLAG     GET THE LIST FLAG 
0367  00674 042020X       ADA BFLAG     GET PUNCH FLAG
0368  00675 002002        SZA           LIST OR PUNCH?
0369  00676 026700R       JMP HB11     START PASS 2 
0370  00677 026012X       JMP ?ASMB     ASSEMBLER EXIT
0371  00700 062702R HB11  LDA *+2       PICK UP ENT CODE TO GET ASMB5 
0372  00701 026013X       JMP ?SEGM     GO TO LOADER FOR NEXT SEGMENT 
0373  00702 032440        ASC 1,5 
0374  00703 002000  .2000 OCT 2000
0375  00704 000154R FFUB  DEF BUFF
0376********************************************************************
0377********** CHANGE LOC'N. Z IN ASMB IF THIS PROGS. LWA > 1310B ******
0378********************************************************************
0379  00421         ?INS? EQU INSR
0380                      END ASMB4 
**  NO ERRORS*










$END ASMB     

*
--> Assemble 20874-60007_ASMB5
ON,ASMB,99







 PAGE 0001


0001                ASMB,L,B,C     DOS/RT ASSEMBLER FEBRUARY 1970 
**  NO ERRORS*





























































 PAGE 0002 #01  *** DOS/RTE ASMB5  FALL 1971 ***


0001                ASMB,L,B,C     DOS/RT ASSEMBLER FEBRUARY 1970 
0003  00000               NAM ASMB5,5,99
0004                      ENT ASMB5 
0005                      EXT ?SUP,?BPKU,?PKUP,?BFLG,?LFLG,?RSTA,?ERPR
0006                      EXT ?OPLK,?GETC,?LINC,?LIST,?LOUT,?OKOL 
0007                      EXT ?CHOP,?CHPI,?OPER,?ASCN,?MSYM,?ASM1,?LINS 
0008                      EXT ?LST,?LPER,?PERL,?SETM,EXEC 
0009                      EXT ?LUNP,?PNLE,?ENDS,?PLIN,?PCOM,?ASMB 
0010                      SUP 
0011  00000 000000  TEMP  BSS 225B      RESERVE TEMPORARY AREA
0012  00000         #     EQU TEMP     SAME AS DATA ORIGIN
0013  00005         VALU  EQU TEMP+5
0014  00007         ...1  EQU TEMP+7
0015  00007         .1    EQU ...1
0016  00016         .12   EQU .1+7
0017  00024         ..M1  EQU .12+6 
0018  00032         L     EQU ..M1+6
0019  00041         .9    EQU #+41B 
0020  00043         .M8   EQU #+43B 
0021  00045         .M29  EQU #+45B 
0022  00046         BLNK  EQU #+46B     =40B(LOWER BLANK) 
0023  00051         .NO   EQU #+51B 
0024  00052         .OP   EQU #+52B 
0025  00053         .OV   EQU #+53B 
0026  00047         .IL   EQU #+47B 
0027  00055         BLNS  EQU #+55B 
0028  00056         TW10  EQU #+56B    ADDRESS MASK 
0029  00057         .1000 EQU #+57B 
0030  00060         BIT15 EQU #+60B 
0031  00061         .E    EQU #+61B 
0032  00076         RELC  EQU #+76B     RELOCATION FLAG 
0033  00077         SIGN  EQU #+77B 
0034  00100         SUMP  EQU #+100B   RUNNING SUM FOR 'CHOP' 
0035  00101         TERM  EQU #+101B   NO. OF TERMS IN AN OPERAND 
0036  00102         T     EQU #+102B
0037  00106         CNTB  EQU #+106B
0038  00107         CODE  EQU #+107B   OPCODE TYPE(FROM OPTABLE)
0039  00110         DSIG  EQU #+110B    'ASCN'
0040  00111         FLAG  EQU #+111B
0041  00112         FLAQ  EQU #+112B
0042  00113         INST  EQU #+113B   OPCODE FORMAT
0043  00114         LAST  EQU #+114B
0044  00115         PASS  EQU #+115B   PASS FLAG(0=PASS 1  AND 1=PASS2) 
0045  00117         PLCN  EQU #+117B   PROGRAM LOCATION COUNTER 
0046  00121         PNTR  EQU #+121B L POINTS AT LAST OER CURRENT CHAR. 
0047  00125         SCN1  EQU #+125B   STATE LNG/OPCODE/OPERAND/LABEL(4)
0048  00135         TEST  EQU #+135B   TEST CHARACTER 
0049*             * I/O STATEMENT BUFFER *
0050  00142         IOBF  EQU #+142B    50 WORDS + END OF STATEMENT BUFF
0051  00225 000000  PBUF  OCT 0,0,0,0 
0052  00225         WCNT  EQU PBUF  WORD(BLK) CNT FOR BIN.RECRD.
0053  00023         ASM1  EQU ?ASM1 
0054  00004         BFLAG EQU ?BFLG 
0055  00016         CHOP  EQU ?CHOP 
0056  00017         CHOPI EQU ?CHPI 
0057  00007         ERPR  EQU ?ERPR 







 PAGE 0003 #01  *** DOS/RTE ASMB5  FALL 1971 ***


0058  00011         GETC  EQU ?GETC 
0059  00012         LINC  EQU ?LINC 
0060  00013         LIST  EQU ?LIST 
0061  00014         LOUT  EQU ?LOUT 
0062  00025         LST   EQU ?LST
0063  00015         OKOLE EQU ?OKOL 
0064  00020         OPERR EQU ?OPER 
0065  00006         RSTA  EQU ?RSTA 
0066  00000         A     EQU 0 
0067*              *************************************
0068*              * START PASS 2 OF ABSOLUTE ASSEMBLY *
0069*              *************************************
0070  00231 062026X ASMB5 LDA ?LPER     LENGTH OF CLEAR AREA
0071  00232 066027X       LDB ?PERL     GET ORIGIN OF 'CLEAR' AREA
0072  00233 016030X       JSB ?SETM     GO TO SET MEMORY ROUTINE
0073  00234 000000        OCT 0         TO SET MEMORY TO ZERO 
0074  00235 062262R       LDA .2000 
0075  00236 072117R       STA PLCN      INITIALIZE PROG LOC'N COUNTER 
0076  00237 002404        CLA,INA 
0077  00240 072115R       STA PASS      SET PASS FLAG 
0078  00241 016006X       JSB RSTA      READ CONTROL STATEMENT
0079  00242 062056R       LDA TW10
0080  00243 072023X       STA ASM1      SET FLAG FOR 'INIT' PORTION 
0081  00244 016006X ASH   JSB RSTA      READ A SOURCE STATEMENT(NAM?) 
0082  00245 062107R       LDA CODE
0083  00246 052021R       CPA .12+3     HED?
0084  00247 026244R       JMP ASH       YES, GO PICK UP THE NEXT STATEME
0085  00250 072023X       STA ASM1      CLEAR 'CS' AND 'INIT' FLAG
0086  00251 052007R       CPA .1
0087  00252 026256R       JMP HI12
0088  00253 062051R       LDA .NO       'NO'= NO ORG OR NAM STATEMENT 
0089  00254 016007X      JSB ERPR 
0090  00255 026434R       JMP HC05      ERROR EXIT FROM INIT
0091  00256 016016X HI12  JSB ?CHOP     EVALUATE ORG
0092  00257 026431R       JMP HC02      ERROR RETURN
0093  00260 076117R       STB PLCN
0094  00261 026431R       JMP HC02
0095  00262 002000  .2000 OCT 2000
0096  00263 000000        BSS PBUF-*+60 RESERVE REMAINING PUNCH BUFFER
























 PAGE 0004 #01  *** DOS/RTE ASMB5  FALL 1971 ***


0098*          *************************************************
0099*          *  DO NOT MOVE SKPR, SPCR OR BREC AS THEY ARE   *
0100*          *   SET ACCORDING TO THE ENTRY POINTS IN ASMB2  *
0101*          *************************************************
0102*        ****************************** 
0103*        * SKIP AND SPACE LIST OUTPUT * 
0104*        ****************************** 
0105  00321 066012X SKPR  LDB LINC  'SKIP'ENTRY 
0106  00322 007004        CMB,INB 
0107  00323 026326R       JMP SK2 
0108  00324 016017X SPCR  JSB CHOPI EVALUATE SPACE COUNT
0109  00325 006404        CLB,INB   ERROR - SET COUNT=1 
0110  00326 006003  SK2   SZB,RSS  SPACES=0?
0111  00327 026433R       JMP HC04      EXIT TO HC04(START OF PASS) 
0112  00330 062005X       LDA ?LFLG     NO, START LINE SKIPPING 
0113  00331 002003        SZA,RSS       LIST REQUESTED? 
0114  00332 026433R       JMP HC04      EXIT TO HC04(START OF PASS) 
0115  00333 062025X       LDA LST       LST FLAG
0116  00334 002002        SZA       SUPPRESS LISTING? 
0117  00335 026433R       JMP HC04      EXIT TO HC04(START OF PASS) 
0118  00336 076110R       STB DSIG SET COUNTER
0119  00337 062012X       LDA LINC
0120  00340 052024R       CPA ..M1      ON LAST LINE? 
0121  00341 026433R       JMP HC04      YES - EXIT
0122  00342 046012X       ADB LINC
0123  00343 006021        SSB,RSS       WILL IT GO TO BOTTOM OF PAGE? 
0124  00344 026351R       JMP *+5       YES,GO TO TOP OF FORM 
0125  00345 076012X       STB LINC      NO, SAVE NEW LINE COUNT 
0126  00346 062110R       LDA DSIG      GET NO. OF LINES TO BE SKIPPED
0127  00347 016024X       JSB ?LINS     GO TO LINE SKIPPER
0128  00350 026433R       JMP HC04      EXIT TO GET NEXT STATEMENT
0129  00351 016015X       JSB OKOLE     SKIP TO TOP OF FORM 
0130  00352 026433R       JMP HC04      EXIT TO GET NEXT STATEMENT
0131* 
0132*        *************************
0133*        * BINARY OUTPUT ROUTINE *
0134*        *************************
0135  00353 177707  .M57  DEC -57 
0136  00354 000227R       DEF PBUF+2
0137  00355 000000  BREC NOP
0138  00356 062004X       LDA BFLAG     GET PUNCH REQUEST FLAG
0139  00357 002003        SZA,RSS       WAS PUNCH REQUESTED?
0140  00360 126355R      JMP BREC,I  NO.
0141  00361 062225R      LDA WCNT 
0142  00362 006002       SZB RECORD OUT?
0143  00363 026405R      JMP HI66    NO.
0144  00364 002003       SZA,RSS WCNT=0?
0145  00365 126355R      JMP BREC,I YES.
0146  00366 062225R HI60  LDA WCNT    **OUTPUT A BINARY RECORD **** 
0147  00367 001727        ALF,ALF  ROTATE 8 
0148  00370 072225R       STA WCNT   STORE WCNT IN UPPER PBUF 
0149  00371 001727        ALF,ALF 
0150  00372 042011R       ADA .1+2      ADD 3 TO THE DATA COUNT 
0151  00373 072106R       STA CNTB      SET COUNTER = WCNT+3
0152  00374 016031X       JSB EXEC      PUNCH CURRENT RECORD
0153  00375 000402R       DEF *+5 







 PAGE 0005 #01  *** DOS/RTE ASMB5  FALL 1971 ***


0154  00376 000010R       DEF .1+1      CW
0155  00377 000032X       DEF ?LUNP     LUN OF PUNCH DEV. 
0156  00400 000225R       DEF PBUF      PUNCH BUFFER
0157  00401 000106R       DEF CNTB      WORD COUNT
0158  00402 002400        CLA 
0159  00403 072225R       STA WCNT      INITIALIZE WCNT =0
0160  00404 126355R      JMP BREC,I  AND EXIT 
0161  00405 002002  HI66  SZA           1ST WORD OF BINARY RECORD?
0162  00406 026416R       JMP HI70      -NO-
0163  00407 066117R      LDB PLCN  PLCN TO BREG 
0164  00410 076320R       STB PBUF+59   PUT IN CHECKSUM SAVER 
0165  00411 076226R       STB PBUF+1    SET RECORD ADDR.
0166  00412 062354R       LDA BREC-1
0167  00413 072430R       STA STOR      SET STOR=L(PBUF+2)
0168  00414 062353R       LDA .M57
0169  00415 072106R       STA CNTB      SET COUNT=-57 
0170  00416 062113R HI70  LDA INST
0171  00417 172430R       STA STOR,I    SET CURRENT BIN. WORD 
0172  00420 036430R       ISZ STOR      BUMP POINTER
0173  00421 042320R       ADA PBUF+59   UPDATE CHECKSUM 
0174  00422 072320R       STA PBUF+59 
0175  00423 172430R       STA STOR,I    SAVE IN LWA+1 OF PUNCH RECORD 
0176  00424 036225R       ISZ WCNT
0177  00425 036106R       ISZ CNTB      IS RECORD FULL? 
0178  00426 126355R       JMP BREC,I    NO - EXIT 
0179  00427 026366R       JMP HI60      YES - GO PUNCH
0180  00430 000000  STOR  BSS 1 




































 PAGE 0006 #01  *** DOS/RTE ASMB5  FALL 1971 ***


0182  00431 062010R HC02  LDA ...1+1  LIST PARAMETER
0183  00432 016013X HC03  JSB LIST
0184* 
0185*             * READ NEXT STATEMENT 
0186  00433 016006X HC04  JSB RSTA  READ NEXT STATEMENT 
0187* 
0188*             * TEST MNEMONIC CODES FOR PROCESS TYPE *
0189  00434 062107R HC05  LDA CODE
0190  00435 066113R       LDB INST
0191  00436 052035R       CPA L+3  (43)  SOC OR SOS ? 
0192  00437 027133R      JMP HC28  YES
0193  00440 012043R       AND .M8       (177770)
0194  00441 052032R       CPA L     I/O ? 
0195  00442 027075R      JMP IOPR  YES
0196  00443 001121        ARS,ARS       SHIFT A RIGHT 4 BITS
0197  00444 001121        ARS,ARS 
0198  00445 052011R       CPA .1+2      60 OR 70?(MICRO-OP?)
0199  00446 027157R       JMP MICR      YES 
0200  00447 062107R       LDA CODE
0201  00450 042452R       ADA CODLC     SET UP ADDRESS OF PROCESSOR 
0202  00451 124000        JMP A,I       JUMP TO OPCODE PROCESSOR
0203* 
0204  00452 100452R CODLC DEF *,I 
0205  00453 000641R       DEF HC42      ORG       1 
0206  00454 000641R       DEF HC42      ORR       2 
0207  00455 000635R       DEF HC38      *COM      3 
0208  00456 000635R       DEF HC38      *ENT      4 
0209  00457 000635R       DEF HC38      *EXT      5 
0210  00460 000635R       DEF HC38      *ARITH    6 
0211  00461 000710R       DEF NUMP      ASC       7 
0212  00462 000710R       DEF NUMP      DEC       10
0213  00463 000710R       DEF NUMP      OCT       11
0214  00464 000567R       DEF BSSP      BSS       12
0215  00465 000661R       DEF EQUP      EQU       13
0216  00466 001271R       DEF FIN2      END       14
0217  00467 000635R       DEF HC38      *NAM      15
0218  00470 000514R       DEF MEMRY     MEMORY    16
0219  00471 000645R       DEF X50       HED       17
0220  00472 000514R       DEF MEMRY     DEF       20
0221  00473 000625R       DEF HC26      ABS       21
0222  00474 000321R       DEF SKPR      SKP       2.
0223  00475 000324R       DEF SPCR      SPC       23
0224  00476 000655R       DEF X54       LST/UNL   2J
0225  00477 000710R       DEF NUMP      DEX       25
0226  00500 000604R       DEF HC70      MPY/DIV ETC.
0227  00501 000673R       DEF HC80      LONG SHIFT
0228  00502 000631R       DEF HC30      CLO/STO ETC 
0229  00503 000111  .I    OCT 111       ASCII I   31
0230  00504 175777  CBIT  OCT 175777              32
0231  00505 001777  .1777 OCT 1777                33
0232  00506 177757  M17   DEC -17                 34   -17 FOR SHIFT-ROT
0233  00507 000653R       DEF X52       REP       35
0234  00510 000000  CNTC  NOP                     36   MICRO-OP PROC
0235  00511 000000  INSV  NOP                     37   MICRO-OP PROC
0236  00512 000657R       DEF X56       SUP/UNS   40
0237  00511         SUM.  EQU INSV                     MEMORY REF PROC. 







 PAGE 0007 #01  *** DOS/RTE ASMB5  FALL 1971 ***


0238  00513 000025  DEX   OCT 25        'DEX' OPCODE TYPE 






























































 PAGE 0008 #01  *** DOS/RTE ASMB5  FALL 1971 ***


0240*             * PROCESS MEMORY REFERENCE INSTRUCTIONS * 
0241* 
0242  00514 062113R MEMRY LDA INST
0243  00515 012025R      AND ..M1+1 NO, CLEAR LDSB OF 'INST'
0244  00516 072113R       STA INST
0245  00517 062503R       LDA .I        SET FOR INDIRECT BIT
0246  00520 066060R       LDB BIT15     INDIRECT BIT MASK(100000B)
0247  00521 016016X       JSB CHOP
0248  00522 026622R       JMP HC17E     ERROR EXIT
0249  00523 076511R       STB SUM.      OPERAND VALUE 
0250  00524 006400        CLB           LIST PARAMETER=0
0251  00525 076101R HCXL  STB TERM      SAVE THE LIST PARAMETER 
0252  00526 062511R       LDA SUM.
0253  00527 066107R       LDB CODE
0254  00530 056022R       CPB .12+4 (16) DEF? 
0255  00531 026556R       JMP HC17
0256  00532 042056R       ADA TW10      NO - TEST FOR OPERAND>1023
0257  00533 002021        SSA,RSS       IS IT?
0258  00534 026541R       JMP *+5       YES.
0259  00535 062113R       LDA INST      NO - SET TO CLEAR'CURRENT' BIT. 
0260  00536 012504R       AND CBIT      CURRENT BIT MASK(175777)
0261  00537 072113R       STA INST      RESTORE 
0262  00540 026555R       JMP HC14
0263  00541 062117R       LDA PLCN      TEST NOW FOR OPER.AND INSTR.
0264  00542 012056R       AND TW10        IN THE SAME PAGE OF MEMORY
0265  00543 003004        CMA,INA 
0266  00544 042511R       ADA SUM.
0267  00545 012056R       AND TW10
0268  00546 002003        SZA,RSS       IN SAME PAGE? 
0269  00547 026552R       JMP *+3       YES 
0270  00550 062053R       LDA .OV       NO - IT'S AN OVERFLOW 
0271  00551 016007X       JSB ERPR
0272  00552 062505R       LDA .1777 
0273  00553 012511R       AND SUM.      STRIP UPPER 6 BITS OF OPERAND 
0274  00554 072511R       STA SUM.
0275  00555 062511R HC14  LDA SUM.   NO, GET ADDR FOR 
0276  00556 032113R HC17  IOR INST
0277  00557 072113R      STA INST  SET LOADER FLAG
0278*          * OUTPUT A BINARY WORD * 
0279  00560 006404  HC19  CLB,INB 
0280  00561 016355R       JSB BREC
0281*          * OUTPUT A LINE FOR LISTING *
0282  00562 066055R       LDB BLNS      GET BLANKS FOR LIST ROUTINE 
0283  00563 062101R       LDA TERM      GET THE LIST PARAMETER
0284  00564 016013X       JSB LIST
0285  00565 036117R       ISZ PLCN
0286  00566 026433R       JMP HC04
0287*        *****************
0288*        * BSS PROCESSOR *
0289*        *****************
0290  00567 016017X BSSP JSB CHOPI  EVAL. OPERAND 
0291  00570 026431R       JMP HC02      ERROR 
0292  00571 006003       OCT 6003 B=0?
0293  00572 026431R       JMP HC02      YES 
0294  00573 006400       CLB     B=0
0295  00574 016355R      JSB BREC 







 PAGE 0009 #01  *** DOS/RTE ASMB5  FALL 1971 ***


0296  00575 002400       CLA     A=0
0297  00576 066055R       LDB BLNS  NO RELOC. INDIC.
0298  00577 016013X       JSB LIST
0299  00600 062100R       LDA SUMP  PICK UP BLOCK LENGTH FOR PLCN 
0300  00601 042117R      ADA PLCN 
0301  00602 072117R      STA PLCN 
0302  00603 026433R       JMP HC04      EXIT
























































 PAGE 0010 #01  *** DOS/RTE ASMB5  FALL 1971 ***


0304*         **********************************************
0305*         * PROCESS THE 'DEF' FOLLOWING THE FIRST WORD *
0306*         *  OF AN ARITHMETIC PAIR                     *
0307*         **********************************************
0308  00604 016014X HC70  JSB LOUT      OUTPUT THE ARITH. OPERATION 
0309  00605 016013X       JSB LIST      LIST THE FIRST WORD 
0310  00606 062022R       LDA .12+4 (20B) 
0311  00607 072107R       STA CODE  =DEF
0312  00610 002400        CLA 
0313  00611 072113R       STA INST CLEAR INST 
0314  00612 062503R       LDA .I        SET UP FOR INDIRECT BIT 
0315  00613 066060R       LDB BIT15     MASK= 100000B 
0316  00614 016016X       JSB CHOP
0317  00615 000000        NOP 
0318  00616 036117R       ISZ PLCN      BUMP LOCATION COUNTER 
0319  00617 076511R       STB SUM.      SAVE OPERAND VALUE
0320  00620 066012R       LDB .1+3      LIST PARAMETER=4
0321  00621 026525R       JMP HCXL
0322  00622 002400  HC17E CLA           LIST PARAMETER =0 
0323  00623 072101R       STA TERM      SAVE IT 
0324  00624 026556R       JMP HC17
0325* 
0326*             * PROCESS 'ABS' OPCODE *
0327  00625 016017X HC26 JSB CHOPI  GO EVALUATE OPERAND 
0328  00626 027104R      JMP HP2D ERROR 
0329  00627 076113R       STB INST
0330  00630 027104R      JMP HP2D   OK..
0331* 
0332*             * OUTPUT BIN RECRD AND/OR LIST LINE * 
0333  00631 016014X HC30  JSB LOUT
0334  00632 016013X       JSB LIST
0335* 
0336*             * ADD 1 TO PROG. LOCN. CNTR. *
0337  00633 036117R      ISZ PLCN  BUMP LOCATION CNTR 
0338  00634 026433R       JMP HC04
0339* 
0340*             * COM,ENT,EXT AND ARITH MACRO 
0341  00635 062047R HC38  LDA .IL       ILLEGAL IN ABSOLUTE ASSEMBLY
0342  00636 016007X       JSB ERPR
0343  00637 002404  X39   CLA,INA  1 TO A 
0344  00640 026432R       JMP HC03
0345* 
0346*                   * PRE-PROCESSOR FOR ORG AND ORR * 
0347  00641 006400  HC42 CLB    OUTPUT A
0348  00642 016355R      JSB BREC RECORD
0349  00643 116113R       JSB INST,I JUMP TO CORRECT SUBROUT. 
0350  00644 026431R       JMP HC02      BACK TO START LIST
0351  00645 062005X X50   LDA ?LFLG     GET THE LIST FLAG 
0352  00646 002003        SZA,RSS       IS LIST FLAG OFF? 
0353  00647 026433R       JMP HC04      YES - GO TO NEXT STATEMENT
0354  00650 116113R      JSB INST,I  TO HEADER SUBROUTINE 
0355  00651 016015X       JSB OKOLE  SPACE TO BOTTOM OF PAGE
0356  00652 026433R       JMP HC04      GET NEXT STATEMENT
0357  00653 116113R X52   JSB INST,I TO REPSB 
0358  00654 026637R       JMP X39 
0359  00655 076025X X54   STB LST  SET LST/UNL FLAG 







 PAGE 0011 #01  *** DOS/RTE ASMB5  FALL 1971 ***


0360  00656 026637R       JMP X39 
0361  00657 076001X X56   STB ?SUP      SET 'SUP/UNS' FLAG
0362  00660 026637R       JMP X39 

0364*             * PASS 2 'EQU' PROCESSOR *
0365  00661 016017X EQUP JSB CHOPI     EVAL. OPERAND
0366  00662 006400       CLB       ERROR EXITS
0367  00663 062117R      LDA PLCN 
0368  00664 072100R       STA SUMP  SAVE PLCN VALUE 
0369  00665 076117R       STB PLCN  SET PLCN=0
0370  00666 062010R       LDA ...1+1 (2)  LIST 'EQU'
0371  00667 016013X       JSB LIST
0372  00670 062100R       LDA SUMP  REPLACE PLCN VALUE
0373  00671 072117R       STA PLCN
0374  00672 026433R       JMP HC04
0375  00673 016017X HC80  JSB CHOPI    GO EVALUATE THE COUNT
0376  00674 026706R       JMP HC84     BAD COUNT EXIT 
0377  00675 046506R       ADB M17       B-17
0378  00676 006020        SSB           B GRTR THAN 16? 
0379  00677 056506R       CPB M17       NO.  IS B=0?
0380  00700 016020X       JSB OPERR     YES, IT'S AN 'M' ERROR,.
0381  00701 062100R       LDA SUMP     GET THE SHIFT OR ROTATE COUNT..
0382  00702 012021R       AND .12+3    MASK OUT LOWEST 4 BITS 
0383  00703 042113R HC82  ADA INST     MAKE UP THE FINAL INSTRUCTION
0384  00704 072113R       STA INST
0385  00705 026631R       JMP HC30     GO AND OUTPUT THE INSTRUCTION
0386  00706 002400  HC84  CLA          SET COUNT FOR 16 BIT SHIFT ROTATE
0387  00707 026703R       JMP HC82



































 PAGE 0012 #01  *** DOS/RTE ASMB5  FALL 1971 ***


0389*             ************************* 
0390*             * OCT/DEC/ASC PROCESSOR * 
0391*             ************************* 
0392  00710 062127R NUMP  LDA SCN1+2
0393  00711 072121R       STA PNTR      SET POINTER 
0394  00712 002400       CLA
0395  00713 072103R       STA T+1  SET FPAS=0 
0396  00714 062107R       LDA CODE
0397  00715 052015R       CPA ...1+6 (7)
0398  00716 027036R      JMP ASCR 
0399  00717 066121R HE06 LDB PNTR  PNTS AT 1ST CH OF NUMBER 
0400  00720 076077R       STB SIGN
0401  00721 006400       CLB
0402  00722 076510R       STB CNTC
0403  00723 006004       INB
0404  00724 076076R       STB RELC
0405* 
0406*             * TEST CHARACTER FOR TERMINATOR * 
0407  00725 062121R HE08 LDA PNTR 
0408  00726 016011X      JSB GETC 
0409  00727 072101R       STA TERM
0410  00730 052036R       CPA L+4  COMMA? 
0411  00731 026753R      JMP HE12    YES
0412  00732 052046R      CPA BLNK BLANK?
0413  00733 026753R      JMP HE12    YES
0414* 
0415*             * UPDATE CHAR.CNTR(CNTC) AND POSN. PNTR(TLOC) * 
0416  00734 066107R      LDB CODE 
0417  00735 056041R       CPB .9        OCT?
0418  00736 026746R       JMP HE10+1    YES 
0419  00737 056513R       CPB DEX       'DEX'?
0420  00740 026751R       JMP HE11      YES 
0421  00741 066010R       LDB ...1+1 (2) NOT OCTAL
0422  00742 052040R       CPA L+6  PERIOD?
0423  00743 076076R       STB RELC  YES, SET RELC = 2 
0424  00744 052061R       CPA .E        'E' ? 
0425  00745 076076R HE10  STB RELC      YES, SET RELC FOR USE AS ASCN MD
0426  00746 036510R       ISZ CNTC
0427  00747 036121R      ISZ PNTR  BUMP PNTR
0428  00750 026725R      JMP HE08 
0429  00751 066011R HE11  LDB .1+2      SET B=3 FOR DEX MODE
0430  00752 026745R       JMP HE10
0431* 
0432*             * SET UP VALUE FOR LIST AND/OR PUNCH *
0433  00753 062107R HE12 LDA CODE 
0434  00754 006400       CLB
0435  00755 052041R       CPA .9        OCT?
0436  00756 026761R      JMP *+3   YES
0437  00757 066076R       LDB RELC  NOT OCT 
0438  00760 005727       OCT 5727 BLFBLF
0439  00761 046510R      ADB CNTC 
0440  00762 062077R       LDA SIGN
0441  00763 016021X       JSB ?ASCN     GO TO 'ASCI' CONVERSION 
0442  00764 002400       CLA    SET A=0 
0443  00765 072113R      STA INST 
0444  00766 076100R       STB SUMP  STORE VALUE 







 PAGE 0013 #01  *** DOS/RTE ASMB5  FALL 1971 ***


0445  00767 062005R       LDA VALU      SAVE LEAST SIG PART OF 'DEX'
0446  00770 072077R       STA SIGN
0447  00771 017017R HE18 JSB NOUT 
0448  00772 062076R       LDA RELC
0449  00773 001110        ARS,SLA       IS RELC = 0 OR 1? 
0450  00774 027003R       JMP HE20      NO, ITS 3 OR 2
0451  00775 062101R       LDA TERM  NO- 
0452  00776 052046R      CPA BLNK 
0453  00777 026433R       JMP HC04      EXIT ON BLANK 
0454  01000 036121R      ISZ PNTR  BUMP PNTR
0455  01001 016002X       JSB ?BPKU     SCAN OVER BLANKS
0456  01002 026717R      JMP HE06 
0457* 
0458  01003 062100R HE20  LDA SUMP
0459  01004 072113R       STA INST  VALUE TO INST 
0460  01005 066076R       LDB RELC
0461  01006 056011R       CPB .1+2      IS RELC=3?
0462  01007 027013R       JMP HE22      YES- SET SUMP FOR 3RD WORD
0463  01010 002400       CLA
0464  01011 072076R HE21  STA RELC      SET RELC FOR NEXT TEST
0465  01012 026771R      JMP HE18 
0466* 
0467  01013 062077R HE22  LDA SIGN
0468  01014 072100R       STA SUMP      VALU TO SUMP
0469  01015 062010R       LDA .1+1      FOR SETTING RELC=2
0470  01016 027011R       JMP HE21
0471*          ***************************
0472*          * OCT DEC ASC WORD OUTPUT *
0473*          ***************************
0474  01017 000000  NOUT  NOP 
0475  01020 062103R       LDA T+1 1ST LIST LINE FLAG
0476  01021 002002        SZA     1ST?
0477  01022 027026R       JMP *+4  NO 
0478  01023 002004        INA     1 TO A
0479  01024 072103R       STA T+1  SET FLAG 
0480  01025 002401        CLA,RSS   CLEAR A,SKIP
0481  01026 062012R       LDA ...1+3 (4) SET A=4 FOR LIST 
0482  01027 066055R       LDB BLNS
0483  01030 016013X       JSB LIST
0484  01031 002400        CLA 
0485  01032 006404        CLB,INB 
0486  01033 016355R       JSB BREC    PUNCH 
0487  01034 036117R       ISZ PLCN    BUMP LOCN CNTR. 
0488  01035 127017R       JMP NOUT,I  EXIT
0489*             ********************
0490*             * PROCESS ASC HERE *
0491*             ********************
0492  01036 062010R ASCR  LDA ...1+1 (2) INDIC.'ASC'
0493  01037 016016X       JSB CHOP    GO EVALUATE WORD LENGTH 
0494  01040 026631R      JMP HC30  ERROR EXIT 
0495  01041 002002       SZA     VALUE ABSOL.?
0496  01042 027103R       JMP HP2D-1 NO; ERROR
0497  01043 046045R       ADB .M29      (-29)(VALUE IS IN SUMP TOO) 
0498  01044 006021       SSB,RSS   VAL.>28? 
0499  01045 027103R       JMP HP2D-1 YES; ERROR 
0500  01046 062121R      LDA PNTR 







 PAGE 0014 #01  *** DOS/RTE ASMB5  FALL 1971 ***


0501  01047 072102R       STA T 
0502  01050 062100R       LDA SUMP
0503  01051 003004       OCT 3004 CMAINA
0504  01052 072510R       STA CNTC  VALUE(COMPL.) TO CNTC 
0505* 
0506*             * PICK UP WORDS AND STORE INTO PROGRAM *
0507  01053 036102R SB    ISZ T 
0508  01054 062102R       LDA T 
0509  01055 016011X       JSB GETC
0510  01056 001727        ALF,ALF 
0511  01057 072135R       STA TEST
0512  01060 036102R       ISZ T 
0513  01061 062102R       LDA T 
0514  01062 016011X       JSB GETC
0515  01063 072113R       STA INST
0516* 
0517*             *  OUTPUT 2 ASCI CHARACTERS * 
0518  01064 017017R      JSB NOUT 
0519  01065 002400       CLA
0520  01066 072135R       STA TEST
0521  01067 036510R      ISZ CNTC 
0522  01070 027053R       JMP SB
0523  01071 026433R       JMP HC04      DONE, GO GET NEXT STATEMENT 
0524*             ************************* 
0525*             * PROCESS I/O GROUP HERE *
0526*             **************************
0527  01072 105000  RAM   OCT 105000
0528  01073 177400        OCT 177400
0529  01074 000300        OCT 300 
0530  01075 062127R IOPR  LDA SCN1+2  IS OPERAND
0531  01076 002002       SZA    PRESENT?
0532  01077 027107R       JMP P  YES! 
0533  01100 062107R       LDA CODE  NO OPERAND
0534  01101 052033R       CPA L+1  'HLT'? 
0535  01102 027104R      JMP HP2D 
0536* 
0537*        * OPERAND ERROR EXIT HERE *
0538  01103 016020X       JSB OPERR  (HP2D-1) 
0539  01104 002400  HP2D CLA
0540  01105 072101R       STA TERM      SAVE THE LIST PARAMETER 
0541  01106 026560R       JMP HC19
0542  01107 063132R P     LDA .C        TEST FOR 'CLEAR FLAG'(C). 
0543  01110 066057R       LDB .1000     GET 'C' MASK FOR IO INSTR.
0544  01111 016016X       JSB CHOP
0545  01112 027126R       JMP Q   ERROR EXIT
0546  01113 060001       LDA 1      YES 
0547  01114 066113R       LDB INST     LOAD B WITH OCTAL INSTR
0548  01115 043073R       ADA IOPR-2     MASK FISST PART
0549  01116 057072R       CPB RAM     SEE IF A RAM INSTR
0550  01117 002001        RSS          SKIP NEXT MASK IF RAM
0551  01120 043074R       ADA IOPR-1  IF NOT RAM ADD SECOND PART
0552  01121 066100R       LDB SUMP     RESTORE B REG
0553* 
0554*             * TEST FOR VALUE>63 * 
0555  01122 002020       SSA
0556  01123 027127R       JMP *+4  VAL>64 







 PAGE 0015 #01  *** DOS/RTE ASMB5  FALL 1971 ***


0557  01124 062053R       LDA .OV      'OV'  ADDRESS OVERFOLW 
0558  01125 016007X      JSB ERPR 
0559  01126 006400  Q    CLB
0560  01127 046113R       ADB INST  (HE54+1)
0561  01130 076113R       STB INST
0562  01131 027104R      JMP HP2D 
0563  01132 000103  .C    OCT 103       ASCII 'C' 
0564* 
0565*             * PROCESS SOC OR SOS
0566  01133 062127R HC28  LDA SCN1+2 PNTR TO OPERAND
0567  01134 064000        LDB 0    A TO B 
0568  01135 016022X       JSB ?MSYM 
0569  01136 042024R       ADA ..M1
0570  01137 002002       SZA
0571  01140 027104R      JMP HP2D 
0572  01141 062114R       LDA LAST  IS 'C'
0573  01142 053132R       CPA .C        IS 'C' PRESENT? 
0574  01143 027145R      JMP *+2    YES 
0575  01144 027104R      JMP HP2D    NO 
0576* 
0577*             * 'OR' 1 TO BIT 9 (C BIT) OF I/O INST * 
0578  01145 062113R       LDA INST
0579  01146 032057R       IOR .1000     MASK IN CURRENT BIT 
0580  01147 072113R       STA INST
0581  01150 027104R      JMP HP2D 






































 PAGE 0016 #01  *** DOS/RTE ASMB5  FALL 1971 ***


0583*             **********************
0584*             * MICRO-OP PROCESSOR *
0585*             **********************
0586  01151 007777  MICRD OCT 7777,4000,60000,60,71,14000 
0587  01157 002400  MICR  CLA 
0588*             * INITIALIZE FLAGS *
0589  01160 072510R       STA CNTC   =0 WHEN CLE APPEARS
0590  01161 072101R       STA TERM   BITS 12-11 = 1 IF B REG
0591*                               BITS 12-11 = 2 IF A REG 
0592  01162 072004R       STA TEMP+4  BITS 14-13=1 IF SRG; =2 IF ASG
0593  01163 072511R      STA INSV  USED TO ACCUMULATE THE CODE
0594  01164 072111R       STA FLAG
0595  01165 072135R      STA TEST  CLEAR CHAR TESTER
0596* 
0597*             * START HERE FOR EACH NEW CODE *
0598  01166 062113R F     LDA INST UNPACK THE MICRO-OP CODE 
0599*              THE FORMAT IS+ 
0600*                BITS 14-13=1 IF SRG,2 IF ASG, 0 IF 
0601*                                            EITHER 
0602*                BITS 12-11=1 IF BREG,2 IF AREG, 0 IF 
0603*                                            NEITHER. 
0604*                BITS 11-0 = ACTUAL 12 BIT CODE 
0605  01167 013151R       AND MICRD     EXTRACT OPCODE
0606  01170 072112R       STA FLAQ  SAVE IT (=+2) 
0607  01171 062107R      LDA CODE  THIS IS THE GROUP NUMBER.
0608  01172 003004       OCT 3004  MAKE SURE'IT'S BIGGER THAN THE LAST
0609  01173 042111R       ADA FLAG  A=(LAST GRP)-(PRESENT GRP)
0610  01174 002020       SSA
0611  01175 027220R       JMP O    SEQUENCE IS OK 
0612* 
0613*             * IF PRES GRP IS GO WE CAN CHANGE IT AND MAY BE OK
0614  01176 062107R      LDA CODE 
0615  01177 053154R       CPA MICRD+3   IS CODE TYPE = 60B (MICRO-OP)?
0616  01200 027204R       JMP *+4  CHANGE ERROR GROUP AND OP CODE 
0617  01201 062052R MERR  LDA .OP       'OP' FOR OPCODE ERROR 
0618  01202 016007X      JSB ERPR       RETURN
0619  01203 027104R       JMP HP2D
0620  01204 063155R       LDA MICRD+4   71B, CHANGE GROUP (FROM *-4)
0621  01205 072107R      STA CODE  TO 71
0622* 
0623*             * MOVE BITS 8-5 OF OPCODE TO BITS 4 AND 2-0 * 
0624  01206 062112R       LDA FLAQ
0625  01207 013152R       AND MICRD+1   SET A/B BIT 
0626  01210 070001       STA 1          SAVE IN B.
0627  01211 022112R       XOR FLAQ
0628  01212 001727       OCT 1727       MOVE TO BITS O AND 15-13
0629  01213 001310        RAR,SLA  MOVE BIT 0 TO
0630  01214 002004       INA            BIT 1.
0631  01215 001723       OCT 1723 ALF,RAR  ROTATE LEFT 3 TO BITS 4,2-0
0632  01216 030001        IOR 1     PUT IN THE A/B BIT
0633  01217 027170R       JMP F+2 
0634  01220 062107R O     LDA CODE
0635  01221 072111R       STA FLAG  SET LAST GRP TO PRESENT GRP 
0636* 
0637*             * CHECK REGISTER CONSISTENCY *
0638  01222 062113R      LDA INST 







 PAGE 0017 #01  *** DOS/RTE ASMB5  FALL 1971 ***


0639  01223 013156R       AND MICRD+5   GET BITS 12-11
0640  01224 032101R       IOR TERM
0641  01225 053156R       CPA MICRD+5   IF EQUAL, THERE'S A REGISTER
0642  01226 027201R      JMP MERR       INCONSISTENCY.
0643  01227 072101R       STA TERM   NEW REGS TO REGS,
0644* 
0645*             * OTHERWISE CHECK GROUP CONSISTENCY * 
0646  01230 062113R      LDA INST 
0647  01231 013153R       AND MICRD+2   BITS 14-13
0648  01232 032004R       IOR TEMP+4
0649  01233 053153R       CPA MICRD+2   IF EQUAL,THERE ARE 2 CODES
0650  01234 027201R      JMP MERR       FROM DIFFERENT GROUPS.
0651  01235 072004R       STA TEMP+4
0652*             * CHECK FOR CLE * 
0653  01236 062112R       LDA FLAQ
0654  01237 002003       OCT 2003 SZA,RSS 
0655  01240 036510R       ISZ CNTC
0656* 
0657*             * NOW 'OR' THE CODE INTO CURRENT CODE SO FAR *
0658  01241 032511R      IOR INSV 
0659  01242 072511R      STA INSV 
0660* 
0661*             * GET THE NEXT CHARACTER *
0662  01243 062126R       LDA SCN1+1   OPCODE PNTR
0663  01244 042011R       ADA ...1+2   (3)
0664  01245 072121R      STA PNTR  PROINTS AT POSN FOLLOWINT OPCODE 
0665  01246 016003X       JSB ?PKUP 
0666  01247 052046R      CPA BLNK  IF SO WE ARE DONE. 
0667  01250 027257R       JMP *+7 
0668  01251 052036R       CPA L+4  COMMA ?
0669  01252 027254R      JMP *+2
0670  01253 027201R      JMP MERR 
0671* 
0672*             * GET THE NEXT OPCODE * 
0673  01254 016010X       JSB ?OPLK     OPCODE LOOKUP 
0674  01255 027104R       JMP HP2D
0675  01256 027166R       JMP F 
0676* 
0677*             * TO FINISH TEST CLE; IF USED AND IN ASG SET, ADD 40
0678*             * TO THE CODE.
0679  01257 062004R       LDA TEMP+4 (FROM *-7) 
0680  01260 001727       OCT 1727 ALF,ALF 
0681  01261 002003       OCT 2003 SZA,RSS 
0682  01262 032046R       IOR BLNK      (40B) 
0683  01263 066510R       LDB CNTC
0684  01264 006003       OCT 6003 SZB,RSS 
0685  01265 002400       CLA
0686  01266 032511R      IOR INSV 
0687  01267 072113R      STA INST 
0688  01270 027104R       JMP HP2D













 PAGE 0018 #01  *** DOS/RTE ASMB5  FALL 1971 ***


0690  01271 006400  FIN2  CLB 
0691  01272 016355R       JSB BREC      PUNCH REST OF LAST DBL RECORD 
0692  01273 066004X       LDB ?BFLG 
0693  01274 006003        SZB,RSS       WAS PUNCHING REQUESTED? 
0694  01275 027302R       JMP FIN3      NO
0695  01276 016031X       JSB EXEC      YES- OUTPUT TRAILER 
0696  01277 001302R       DEF *+3 
0697  01300 000011R       DEF .1+2      CW
0698  01301 000033X       DEF ?PNLE     LEADER PARAMETER/LUN
0699  01302 002404  FIN3  CLA,INA 
0700  01303 066055R       LDB BLNS
0701  01304 016013X       JSB LIST      LIST 'END' STATEMENT
0702  01305 016034X       JSB ?ENDS     GO TO END SUBROUTINE
0703  01306 066035X       LDB ?PLIN 
0704  01307 056036X       CPB ?PCOM     TTY OUTPUT? 
0705  01310 026037X       JMP ASMBX     YES 
0706  01311 003400        CCA           NO - ITS ON A PRINTER 
0707  01312 016024X       JSB ?LINS     SKIP TO TOP OF FORM 
0708  01313 026037X       JMP ASMBX 
0709********************************************************************
0710********** CHANGE LOC'N. Z IN ASMB IF THIS PROGS. LWA > 1315B ******
0711********************************************************************
0712  00037         ASMBX EQU ?ASMB 

0714                      END ASMB5 
**  NO ERRORS*






























$END ASMB     

*TI
 000  00  04  08

*

***
*** Build finished
***

*** Press Enter to quit


Goodbye
Log file closed
