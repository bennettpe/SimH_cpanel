A      000000 
B      000001 
BEGIN  000010 
MES01  000023 
MS2    000035 
DRPTR  000101 
DRKEY  000102 
DRHSP  000103 
DRTTY  000104 
FWAM   000105 
LWAM   000106 
DRMAG  000107 
.      001650 
LWSBP  000110 
EOBP   000111 
TRANS  000112 
AINPT  000113 
IPARM  000114 
APARS  000115 
AGNIO  000116 
AGETA  000117 
AGETN  000120 
AGETO  000121 
AGINI  000122 
AFWAP  000123 
INDAD  000124 
ADIN   000125 
ADOUT  000126 
ALOAD  000127 
ALODS  000130 
ABPOT  000131 
ACLRT  000132 
ACLID  000133 
AIDSN  000134 
ALABD  000135 
AREMD  000136 
ACONV  000137 
ARECO  000140 
AREDO  000141 
AMOVE  000142 
AGEND  000143 
AOUTD  000144 
AZOUT  000145 
ADSET  000146 
ANOTS  000147 
BLODR  000150 
ABASC  000151 
ARTEX  000152 
ABOOT  000153 
ASBUF  000154 
A#SCT  000155 
A#MSK  000156 
AREAD  000157 
DEMOT  000160 
ALRT6  000161 
ATSTL  000162 
ASCHF  000163 
ZERO   000164 
N1     000165 
N2     000166 
N3     000167 
N4     000170 
N5     000171 
N6     000172 
N8     000173 
N9     000174 
N10    000175 
N11    000176 
N24    000177 
N27    000200 
N60    000201 
N64    000202 
N100   000203 
P2     000204 
P3     000205 
P4     000206 
P5     000207 
P6     000210 
P7     000211 
P8     000212 
P9     000213 
P11    000214 
P12    000215 
P14    000216 
P15    000217 
P16    000220 
P17    000221 
P18    000222 
P22    000223 
P23    000224 
P24    000225 
P25    000226 
P28    000227 
P33    000230 
P38    000231 
P64    000232 
P99    000233 
L6     000172 
L10    000173 
L12    000175 
L60    000234 
L2000  000235 
M7     000211 
M22    000222 
M4     000206 
M37    000236 
M60    000237 
M77    000240 
M120   000241 
M177   000242 
M377   000243 
M0760  000244 
M1740  000245 
M1600  000246 
M1777  000247 
M2000  000250 
M2002  000251 
M2004  000252 
M2006  000253 
M1377  000254 
M7400  000255 
M7000  000256 
M7600  000257 
M7700  000260 
M7777  000261 
DPWRS  000262 
P0100  000263 
P1000  000264 
P100   000265 
P10    000266 
P1     000267 
OPWRS  000270 
M0100  000271 
M1000  000272 
M100   000273 
M10    000274 
BLANK  000276 
UBLNK  000277 
MSIGN  000300 
DSKAB  000301 
BUFCL  000302 
SPACE  000313 
ERROR  000317 
IRERR  000325 
HLT0   000327 
AMERR  000331 
ERR07  000335 
ERR15  000336 
ERR16  000337 
ERR17  000340 
ERR18  000341 
ERR19  000342 
ERR22  000343 
ERR38  000344 
INIDX  000345 
IDX    000351 
INLST  000412 
LSTX   000416 
LSERR  000442 
RBTAD  000444 
TPREL  000446 
COMAD  000450 
ALBUF  000451 
ADBUF  000452 
AEBUF  000453 
AIBUF  000454 
AKBUF  000455 
ATBUF  000456 
PLAD   000457 
AMLST  000460 
AMEM5  000461 
AILST  000462 
WDCNT  000463 
BLST   000464 
TLST   000465 
PLST   000466 
BIDNT  000467 
TIDNT  000470 
PIDNT  000471 
MAXC   000472 
TCHAR  000473 
OCTNO  000474 
DSKSY  000475 
DSIZE  000476 
DSKSC  000477 
PTRAK  000500 
DAUXN  000501 
SDS#   000502 
ADS#   000503 
PIOC   000504 
IDSP   000505 
TBCHN  000506 
SWAPF  000507 
LWASM  000510 
PARAD  000511 
TTYCH  000512 
DERCN  000513 
DSKAD  000514 
PLFLG  000515 
DSCNT  000516 
ID1    000517 
ID2    000520 
ID3    000521 
ID4    000522 
ID5    000523 
ID6    000524 
ID7    000525 
ID8    000526 
ID9    000527 
ID10   000530 
LST1   000531 
LST2   000532 
LST3   000533 
LST4   000534 
LST5   000535 
NXFLG  000536 
EXCNT  000537 
CURAL  000540 
LCNT   000541 
LBUF   000542 
CURAD  000642 
DCNT   000643 
DBUF   000644 
EBUF   000744 
CURAI  001044 
ICNT   001045 
LRBP   001046 
URBP   001047 
LBBP   001050 
UBBP   001051 
URBP1  001052 
BPMAX  001053 
TEMP1  001054 
TEMP2  001055 
LWH1   001056 
LWH2   001057 
L01    001060 
L001   001061 
RPARB  001062 
IBUF   001063 
CURAK  001163 
KCNT   001164 
KBUF   001165 
CURAT  001265 
TCNT   001266 
TBUF   001267 
CURAP  001273 
AMAD   001274 
MLIST  001275 
LICNT  001305 
SICNT  001306 
COMRT  001307 
COMBG  001310 
DSKEY  001311 
DSKID  001312 
KEYCN  001313 
KEYCT  001314 
PTYPE  001315 
FSYBP  001316 
SYSAD  001317 
TBREL  001320 
PBREL  001321 
PPREL  001322 
RELAD  001323 
PLMAN  001324 
BSBAD  001325 
BSPAD  001326 
LFLAG  001327 
IMAIN  001330 
HDFLG  001331 
CIDNT  001332 
DSKRD  001333 
AEQT   001334 
CEQT   001335 
ASQT   001336 
CSQT   001337 
AINT   001340 
CINT   001341 
DSKIN  001342 
INTCN  001343 
CURIL  001344 
ILIST  001345 
DSKRX  001445 
EDCNT  001446 
DCMND  001447 
MADDR  001450 
TEMPP  001451 
ABCNT  001452 
DSKMN  001453 
BSSDP  001454 
PRENT  001455 
DBLAD  001456 
REKEY  001457 
INSCN  001460 
EXORD  001461 
INSTR  001462 
PAGNO  001463 
OPRND  001464 
PLGTH  001465 
LOWER  001466 
UPPER  001467 
RANAD  001470 
LIBFG  001471 
LDTYP  001472 
DSKA   001473 
DRT2   001474 
DRT3   001475 
SCH1   001476 
SCH2   001477 
SCH3   001500 
SCH4   001501 
ERR09  001502 
ERR10  001503 
ERR11  001504 
ERR12  001505 
ERR21  001506 
ERR24  001507 
ERR25  001510 
ERR26  001511 
ERR27  001512 
ERR28  001513 
ERR29  001514 
ERR30  001515 
ERR31  001516 
ERR32  001517 
ERR33  001520 
ERR34  001521 
ERR35  001522 
ERR36  001523 
ERR37  001524 
ERR39  001525 
MS20   001526 
MS23   001537 
MS02   001552 
MES42  001562 
MES22  001577 
MES25  001603 
MES26  001620 
MES36  001635 
MES41  001651 
MES50  001665 
MES40  001675 
EQTA   001650 
EQT#   001651 
LUMAX  001653 
DRT    001652 
INTBA  001654 
INTLG  001655 
TAT    001656 
KEYWD  001657 
EQT1   001660 
EQT2   001661 
EQT3   001662 
EQT4   001663 
EQT5   001664 
EQT6   001665 
EQT7   001666 
EQT8   001667 
EQT9   001670 
EQT10  001671 
EQT11  001672 
EQT12  001771 
EQT13  001772 
EQT14  001773 
EQT15  001774 
CHAN   001673 
TBG    001674 
SYSTY  001675 
RQCNT  001676 
RQRTN  001677 
RQP1   001700 
RQP2   001701 
RQP3   001702 
RQP4   001703 
RQP5   001704 
RQP6   001705 
RQP7   001706 
RQP8   001707 
DORMT  001710 
SKEDD  001711 
SUSP3  001714 
SUSP4  001715 
SUSP5  001716 
XEQT   001717 
XLINK  001720 
XTEMP  001721 
XPRIO  001726 
XPENT  001727 
XSUSP  001730 
XA     001731 
XB     001732 
XEO    001733 
OPATN  001734 
OPFLG  001735 
SWAP   001736 
DUMMY  001737 
IDSDA  001740 
IDSDP  001741 
BPA1   001742 
BPA2   001743 
BPA3   001744 
LBORG  001745 
RTORG  001746 
RTCOM  001747 
RTDRA  001750 
AVMEM  001751 
BKORG  001752 
BKCOM  001753 
BKDRA  001754 
TATLG  001755 
TATSD  001756 
SECT2  001757 
SECT3  001760 
DSCLB  001761 
DSCLN  001762 
DSCUT  001763 
DSCUN  001764 
LGOTK  001765 
LGOC   001766 
SFCUN  001767 
MPTFL  001770 
FENCE  001775 
BKLWA  001777 
RTGEN  002000 
CHNLD  002003 
SIZED  002013 
STREL  002023 
DFALT  002042 
PROTD  002050 
#SEC1  002060 
AUXDS  002070 
#SEC2  002102 
CHNLT  002112 
DUMY   002122 
FSWAP  002132 
SWPER  002150 
SWAPY  002152 
SWAPN  002153 
SMLWA  002156 
PGMIN  002166 
LIBIN  002175 
PARIN  002204 
DSK5   002221 
DSK6   002222 
INPUT  002275 
IMAGT  002301 
TSTIN  002331 
TSTN4  002335 
LDRIN  002343 
PTDV.  002360 
MTEOT  002370 
TESTR  002374 
PAR.E  002426 
RCERR  002443 
LDRC   002447 
SORT1  002477 
SORT2  002503 
SORT3  002525 
SORT5  002544 
NMERR  002574 
NAM12  000545 
NAM34  000546 
NAM5   000547 
NPROG  000550 
NBP    000551 
NCOM   000552 
NTYP   000553 
NPRIO  000554 
NINT1  000555 
NINT2  000556 
NINT3  000557 
NINT4  000560 
NINT5  000561 
NINT6  000562 
NAMR   002600 
TSTYP  002614 
NAMOK  002632 
NEXTN  002643 
ENTNA  002670 
REPNA  002701 
STPR   002713 
DBLR   002747 
ENTR   002770 
EXTR   002771 
SETNX  003001 
ENTX1  003007 
ENTX6  003044 
ENTX2  003053 
ENTX3  003056 
ENTX4  003104 
NTMAN  003130 
ENTX5  003142 
DWRIT  003153 
LTOD   003162 
GETL   003170 
DDOUT  003212 
REPLY  003230 
DOCON  003243 
INERR  003256 
SINIT  003262 
CODIN  003270 
TYUN   003304 
PTUN   003306 
MTUN   003310 
PT.DV  003315 
STDSK  003317 
LSTEX  003331 
OUTNX  003336 
OUTEX  003351 
EXOUT  003355 
ENDEX  003362 
ERR01  003400 
ERR02  003401 
ERR03  003402 
ERR04  003403 
ERR05  003404 
ERR06  003405 
ERR08  003406 
ERR13  003407 
ERR20  003410 
TYTYP  003411 
PTTYP  003412 
MTTYP  003413 
DFTYP  003414 
MESS1  003415 
MESS2  003425 
MESS3  003435 
MESS4  003443 
MESS5  003451 
MESS6  003457 
MESS7  003465 
MESS8  003470 
MESS9  003471 
MES21  003501 
MES30  003511 
MES31  003517 
MES32  003525 
MES33  003547 
HPDSK  003557 
YCHAR  003575 
NCHAR  003576 
DCHNL  003577 
PGMAD  003600 
LIBAD  003601 
PINAD  003602 
ETFLG  003603 
CNFLG  003604 
RIC    003605 
SYM12  003606 
SYM34  003607 
SYM5   003610 
NXCNT  003611 
AXXB   003612 
ANDBL  003613 
TADBL  003614 
PADBL  003615 
PARAM  004000 
PARST  004011 
PANER  004031 
NXTID  004034 
PATER  004063 
SETYP  004065 
STY    004114 
PAPER  004127 
SETNR  004131 
EXINT  004215 
PAIER  004226 
PARER  004227 
ERPNT  004235 
SETLB  004245 
SETIX  004256 
SETBC  004310 
INLIC  004324 
INSIC  004326 
SETRC  004330 
TRMCN  004345 
TRM2   004370 
TRM3   004373 
IPARS  004374 
CLST3  004375 
CLRT6  004405 
SETLX  004407 
SETUX  004431 
DEMTL  004441 
DEMS   004446 
ENDLB  004454 
READ   004457 
GENIO  004472 
SEQT   004505 
IOERR  004522 
CLDBU  004525 
DVERR  004545 
STYPE  004550 
INDBU  004575 
UNERR  004606 
SETIM  004611 
EQTST  004613 
SEDMA  004621 
SETBU  004626 
GENEQ  004633 
LISCN  004634 
LCSCN  004660 
STCXX  004702 
CLWD1  004743 
CLWD2  004756 
NOCXX  004771 
SSQT   004773 
DEVRE  005006 
NOSUB  005053 
SESQT  005107 
DRERR  005132 
TEMPL  005135 
TEMPH  005136 
SINTT  005137 
CISCN  005161 
CIC0   005201 
SETIN  005220 
CHERR  005235 
NOCIC  005240 
SETCH  005242 
IMNEM  005256 
INTEQ  005261 
EQUER  005300 
TSTIQ  005303 
SEQTI  005312 
INTPR  005314 
PRSCN  005324 
PRERR  005351 
INTEN  005354 
ENSCN  005364 
ENERR  005415 
SETEN  005420 
INTAB  005425 
COMIN  005437 
PFINT  005464 
HLTB4  005473 
FILLI  005474 
STINT  005506 
ABERR  005523 
NOBPO  005526 
ENDIO  005533 
GETAL  005542 
IGNOR  005547 
BLRET  005565 
GETNA  005567 
NEXTC  005603 
OCHAR  005614 
GETOC  005626 
GETNX  005643 
DGERR  005700 
ENDOC  005701 
GINIT  005704 
PTERM  005712 
MES24  005713 
MES51  005714 
MES28  005715 
MES29  005716 
COMMA  005717 
IJSB   005720 
UASCZ  005721 
CHARD  005722 
CHARB  005723 
CHART  005724 
BIT14  005725 
IDEC   005726 
CDEC   005727 
CHR$C  005730 
CHRIC  005731 
CHAVR  005732 
CHREQ  005733 
CHRPR  005734 
CHREN  005735 
CHRAB  005736 
UTCHR  005737 
UGCHR  005740 
USCHR  005741 
TEMPE  005742 
PARNO  005743 
IOADD  005744 
IODMA  005745 
IOBUF  005746 
IOTYP  005747 
ASTYP  005750 
DFLAG  005751 
BFLAG  005752 
TFLAG  005753 
INTCH  005754 
JSCIC  005755 
I.XX   005756 
C.XX   005757 
DRANG  005760 
DIFLG  005761 
CMFLG  005762 
BUFUL  005763 
MS24   005764 
MS51   005771 
MS28   005773 
MS29   006001 
FWENT  006012 
LNKER  006024 
SETFB  006027 
CLLST  006036 
CLRID  006047 
IDCLR  006055 
CLRBP  006061 
SYLD   006126 
SYEND  006141 
NOSID  006217 
LDLB   006253 
LBEND  006265 
COMTS  006274 
COMRZ  006332 
RRLD   006337 
RREND  006356 
STSCN  006364 
RDLD   006422 
RDEND  006465 
BPCHA  006467 
GETAV  006531 
CBPER  006542 
SYMER  006545 
SETAV  006550 
GETBG  006561 
BGERR  006575 
SETBG  006600 
RICLR  006646 
BRLD   006653 
BREND  006670 
BDLD   006704 
BSLD   006744 
BSEND  007011 
BDEND  007033 
LBLST  007060 
TRYSY  007066 
TEST3  007106 
LBOUT  007124 
ENDRL  007145 
GETLB  007153 
MOVEL  007175 
ENDSX  007214 
ENDSZ  007223 
NIDOR  007260 
NKYOR  007270 
SETHD  007533 
INCAD  007543 
ERR14  007551 
ERR23  007552 
MES2   007553 
MES11  007554 
MES12  007563 
MES13  007567 
MES14  007574 
MES15  007606 
MES16  007615 
MES18  007627 
MES19  007641 
MES20  007650 
MES23  007651 
MES27  007652 
MES34  007663 
MES35  007664 
SYMES  007665 
MES38  007675 
ASECT  007721 
JMP3I  007722 
UCHRT  007723 
LIBRA  007724 
EXEC   007730 
$LIBR  007733 
$LIBX  007736 
CHR$S  007741 
CHRTR  007742 
SECTR  007743 
LBPSY  007743 
UBPSY  007744 
DSKBP  007745 
LRMAN  007746 
URMAN  007747 
DSKRR  007750 
LBMAN  007751 
UBMAN  007752 
DSKBG  007753 
SYMAD  007754 
BGBND  007755 
DSKAV  007756 
DSKLC  007757 
DSKLB  007760 
DSKUT  007761 
DSKBS  007762 
DSKBR  007763 
ADICT  007764 
LBCNT  007765 
UTCNT  007766 
KEYAD  007767 
RTCAD  007770 
LBCAD  007771 
SYBAD  007772 
IDSAD  007773 
ABSID  007774 
MAXRP  007775 
MAXRB  007776 
IDMBS  007777 
DISKA  010000 
DKERR  010024 
DISKT  010026 
DISKI  010027 
REPR1  010033 
REPR2  010035 
DISKO  010051 
REPW1  010062 
REPW2  010064 
DISKD  010104 
DSK2   010116 
DSK3   010120 
DSK4   010121 
DMAC   010134 
IDSCN  010135 
NOTST  010156 
MES02  010172 
MES03  010173 
BPOUT  010174 
BPSYO  010205 
CONVD  010222 
NEXTD  010241 
GETD   010253 
INCRA  010255 
CLIST  010267 
LINKA  010301 
LINKB  010302 
LINKD  010303 
BLN3   010304 
CROSA  010305 
BLNKS  010306 
BLAST  010307 
LPAR   010310 
LWH3   010311 
LWH4   010312 
LOAD   010313 
LOADS  010327 
LOADN  010332 
LOADX  010350 
LH16   010357 
LH7    010416 
CLPLT  010434 
SETMP  010436 
SUBHD  010453 
LH1    010473 
DBINT  010476 
RSS    010507 
CLSRC  010521 
CLST   010556 
LSTCR  010564 
PLSCN  010610 
EPLST  010615 
CLFLG  010617 
ENTID  010624 
DENTR  010636 
DEXTR  010637 
NXSYM  010647 
ENEX1  010661 
NLENT  010747 
EXT1   010751 
LIBUT  011017 
PLEXT  011020 
CALER  011030 
SEXT   011033 
EXEND  011044 
DDBLR  011047 
HABSS  011076 
DBL0   011101 
DBL1   011102 
DBL2   011107 
DBL3   011122 
DBL4   011145 
DBL5   011151 
DBL6   011166 
LINKC  011214 
DBL7   011224 
DBL8   011227 
ZLOAD  011231 
CLID3  011241 
TRID3  011247 
CLSUT  011272 
BPSCN  011302 
SCNBP  011317 
BPSRC  011323 
SETOP  011340 
ALLOC  011346 
DBSET  011373 
DBIN   011401 
DBIN1  011416 
DBINS  011430 
MOVER  011431 
MOVED  011436 
RECOR  011446 
ORREC  011453 
GENID  011463 
GETIT  011503 
NOTPN  011525 
STKEY  011530 
KYOUT  011575 
BLOUT  011726 
ZOUT   011737 
OUTID  011746 
OUTD1  011764 
DTSET  011777 
LABDO  012004 
TSTAB  012027 
CLOUT  012035 
ULPAR  012041 
TSTEL  012042 
NOVER  012053 
REMDO  012060 
DBOUT  012066 
REDOR  012103 
REDR1  012110 
REDR2  012120 
REDR3  012121 
SCHF   012122 
SCHF3  012133 
SCHF1  012136 
SCHF2  012142 
SCHF5  012170 
SCHF4  012200 
SCHF8  012205 
CLRLT  012220 
CLRNX  012226 
CLBPS  012243 
AXX    012261 
PLIST  012261 
BSBSO  014000 
RLOAD  014000 
RT/TS  014002 
DMS    014003 
BSLD0  014005 
BSLD1  014012 
DSK7   014016 
DSK8   014031 
TSTAT  014034 
DSK9   014035 
BSLD2  014043 
CORAD  014046 
LINKG  014047 
BSB32  014050 
.N64   014051 
START  015600 
PLOAD  015606 
SLOAD  015622 
DSKAG  015633 
DSKB   015635 
DSKC   015636 
M.177  015654 
#SECT  015655 
#MASK  015656 
N.64   015657 
P.64   015660 
RECNT  015661 
SPCAD  015662 
ASPBF  015663 
ALINK  016000 
LH2    016014 
LH10   016061 
LH3    016071 
DLINK  016077 
LH4    016107 
DLIN1  016130 
CROSS  016143 
BLIN2  016154 
BLIN3  016156 
LH11   016174 
BLINK  016202 
BLIN0  016217 
BLIN1  016222 
CLINK  016231 
LOADA  016232 
LOADY  016233 
BPSCM  016234 
CPLSA  016235 
CPLOC  016236 
CPBAS  016237 
CPADD  016240 
CPMAX  016241 
LST    016242 
END    016247 
                ASMB,A,B,L,C     FH-RTGEN 
ERROR: No instruction on line
                      HED FH-RTGEN  REAL TIME SYSTEM GENERATOR
**************************************************
***** AMD ***** MARCH,72 ***** REV.LWH *****
* 
* THIS GENERATOR WILL, WITH SW REG 14 ON, CREATE
*  CURRENT PAGE LINKS WHEN POSSIBLE TO SAVE BASE PAGE 
* 
**************************************************
  00100               ORG 100B
  00000         A     EQU 0 
  00001         B     EQU 1 
                      SUP 
***************** - HIGH CORE - ******************
*                                                *
*             SIO DRIVERS (TTY, PT, HSP)         *
*                                                *
**************************************************
*                    - IDENTS -                  *
*                    ----------                  *
*                                                *
*                                                *
*                     -------                    *
*                     - LST -                    *
**************************************************
*                                                *
*           LOAD, LINKAGE SUBROUTINES            *
*                                                *
*                   DISK DRIVERS                 *
*                                                *
****************** - 10000 - *********************
*                                                *
*                                                *
*           PROGRAM LOADING CONTROL              *
*                                                *
*                                                *
****************** - 6000 - **********************
*                                                *
*               I/O TABLE GENERATION             *
*                                                *
*                  PARAMETER INPUT               *
*                                                *
****************** - 4000 - **********************
*                                                *
*                                                *
*          RELOCATABLE PROGRAM INPUT             *
*                                                *
*                INITIALIZATION                  *
*                                                *
*                                                *
****************** - 2200 - **********************
*                                                *
*                                                *
*                    DATA AREAS                  *
*                                                *
*                                                *
**************************************************
                      SKP 
* 
* 
*  IDENT FORMAT 
* 
*  WORD 1: ID1 - NAME 1,2 
*  WORD 2: ID2 - NAME 3,4 
*  WORD 3: ID3 - NAME 5, USAGE FLAG 
*  WORD 4: ID4 - COMMON LENGTH
*  WORD 5: ID5 - CURRENT DISK ADDRESS 
*  WORD 6 (15): ID6 - M/S 
*  WORD 6 (08-14): ID6 - PRIORITY 
*  WORD 6 (00-06): ID6 - TYPE 
*  WORD 7: ID7 - EXECUTION INTERVAL (1) 
*  WORD 8: ID8 - EXECUTION INTERVAL (2) 
*  WORD 9: ID9 - EXECUTION INTERVAL (3) 
*  WORD 10: ID10 - DISK LENGTH, BG MAIN ADDRESS (BS ONLY) 
* 
* 
*  LST FORMAT 
* 
*  WORD 1: LST1 - NAME 1,2
*  WORD 2: LST2 - NAME 3,4
*  WORD 3: LST3 - NAME 5, ORDINAL 
*  WORD 4: LST4 - IDENT ADDRESS 
*  WORD 5: LST5 - BP LINK ADDRESS 
* 
* 
*  PROGRAM TYPES
* 
*  0: SYSTEM
*  1: RT RESIDENT 
*  2: RT DISK RESIDENT
*  3: BG DISK RESIDENT
*  4: BG RESIDENT 
*  5: BG SEGMENT
*  6: LIBRARY 
*  7: UTILITY 
*  8-99: UNUSED 
                      SKP 
* 
*  ERROR CODES
* 
*  1: INVALID TTY REPLY TO INITIALIZATION PARAMETERS
*  2: CHECKSUM ERROR
*  3: RECORD OUT OF SEQUENCE
*  4: INVALID RECORD TYPE 
*  5: DUPLICATE ENTRY POINTS
*  6: INVALID BP CODE IN PROGRAM
*  7: LST/IDENT OVERFLOW
*  8: DUPLICATE PROGRAM NAMES 
*  9: PARAMETER NAME ERROR
*  10: PARAMETER TYPE ERROR 
*  11: PARAMETER PRIORITY ERROR 
*  12: PARAMETER EXECUTION INTERVAL ERROR 
*  13: BG SEGMENT PRECEDES BG DISC RESIDENT 
*  14: SYS AV MEM OR BG BOUNDARY ERRORS 
*  15: ILLEGAL CALL BY A TYPE 6 PROGRAM (MAY CALL TYPE 0 AND 6 ONLY)
*  16: BP LINKAGE AREA OVERFLOW 
*  17: DISK OVERFLOW (NEXT DISK ADDR EXCEEDS LAST AVAIL DISK ADDR)
*  18: MEMORY OVERFLOW
*  19: DBL RECORD ORDER/ PROGRAM OVERLAY
*  20: DBL LIST OVERFLOW (MORE THAN 675 DBL RECORDS)
*  21: '$CIC' NOT FOUND IN LOADER SYMBOL TABLE
*  22: DISK READ PARITY/DECODE ERROR
*  23: INVALID FWA BP LINKAGE REPLY 
*  24: INVALID CHANNEL NO. IN EQT RECORD
*  25: INVALID DRIVER NAME IN EQT RECORD
*  26: INVALID D, B, U, OPERANDS IN EQT RECORD
*  27: INVALID DEVICE REFERENCE NO. 
*  28: INVALID INTERRUPT REC CHANNEL NO.
*  29: INVALID INTERRUPT REC CHANNEL NO. ORDER
*  30: INVALID INT RECORD MNEMONIC
*  31: INVALID EQT NO. IN INT RECORD
*  32: INVALID PROGRAM NAME IN INT RECORD 
*  33: INVALID ENTRY POINT IN INT RECORD
*  34: INVALID ABSOLUTE VALUE IN INT RECORD 
*  35: BP INTERRUPT LOCATION OVERFLOW 
*  36: INVALID TERMINATING OPERAND IN INT RECORD
*  37: INVALID COMMON LENGTH IN SYSTEM, LIBRARY, OR UTILITY 
*  38: ABSOLUTE SYSTEM HAS OVERLAYED A RELOCATABLE PROGRAM
*  39: ILLEGAL CALL BY A SYSTEM PROGRAM OF A TYPE SIX PROGRAM 
                      SKP 
*     RESTARTS AND INITAL STARTS COME TO THIS ROUTINE WHICH 
*     CHECKS THE SWITCH REG. AND INSURES THAT IT IS CLEARED.
                      SPC 2 
  00010               ORG 10B 
  00010 002400  BEGIN CLA           ATTEMT TO CLEAR THE SWITCH REG. 
  00011 102601        OTA 1         SEND ZERO 
  00012 102501        LIA 1         GET THE SWITCH REG
  00013 002003        SZA,RSS       IF ZERO THEN
  00014 124112        JMP TRANS,I   START THE GENERATER 
  00015 014313        JSB SPACE       PUT THE WORD ON A NEW LINE
  00016 060222        LDA P18       ELSE ASK FOR HELP 
  00017 064023        LDB MES01     CLEAR SR  PUSH RUN
  00020 114102        JSB DRKEY,I   TO THE TTY
  00021 102001        HLT 1 
  00022 024010        JMP BEGIN     TEST AGAIN
                      SPC 1 
  00023 000024  MES01 DEF *+1 
  00024 041514        ASC 9,CLEAR SR  PUSH RUN
  00025 042501  
  00026 051040  
  00027 051522  
  00030 020040  
  00031 050125  
  00032 051510  
  00033 020122  
  00034 052516  
  00035 041510  MS2   ASC 9,CHANGE BP LINKAGE?
  00036 040516  
  00037 043505  
  00040 020102  
  00041 050040  
  00042 046111  
  00043 047113  
  00044 040507  
  00045 042477  
                      SKP 
  00100               ORG 100B
  00100 024010        JMP BEGIN     GO TEST THE SR
  00101         DRPTR BSS 1         PT READER DRIVER ADDRESS
  00102         DRKEY BSS 1         KEYBOARD OUPUT DRIVER ADDRESS 
  00103         DRHSP BSS 1         HS PUNCH DRIVER ADDRESS 
  00104         DRTTY BSS 1         TELETYPE INPUT DRIVER ADDRESS 
  00105 016247  FWAM  DEF END 
  00106         LWAM  BSS 1         END AVAIL. MEM - SET BY DRIVERS 
  00107 000000  DRMAG OCT 000000    (TEMP MAG TAPE DRIVER ADDR) 
  01650         .     EQU 1650B     DEFINE ORGIN OF SYS COMM AREA 
  00110 001650  LWSBP ABS .         LAST WORD +1 OF LINKAGE AREA
  00111 176130  EOBP  ABS -.        NEGATIVE OF ABOVE 
* 
  00112 002000  TRANS DEF RTGEN     TRANSFER ADDR TO RTGEN
  00113 002275  AINPT DEF INPUT     ADDRESS OF PROGRAM INPUT CODE 
  00114 004374  IPARM DEF IPARS     ADDR OF PARAMETER INITIALIZATION
  00115 004000  APARS DEF PARAM     ADDRESS OF PARAMETER INPUT CODE 
  00116 004472  AGNIO DEF GENIO     ADDR OF I/O GENERATOR CODE
  00117 005542  AGETA DEF GETAL     ADDR OF GETAL SUB.
  00120 005567  AGETN DEF GETNA     ADDRESS OF GETNA SUB. 
  00121 005626  AGETO DEF GETOC     ADDRESS OF GETOC SUB. 
  00122 005704  AGINI DEF GINIT     ADDR OF GINIT SUB.
  00123 006012  AFWAP DEF FWENT     ADDR OF FWA BP LINKAGE CODE 
  00124 010000  INDAD DEF DISKA     ADDRESS OF DISK ADDRESS MODIFIER
  00125 010027  ADIN  DEF DISKI     DISK INPUT DRIVER ADDRESS 
  00126 010051  ADOUT DEF DISKO     DISK OUTPUT DRIVER ADDRESS
  00127 010313  ALOAD DEF LOAD      ADDRESS OF MAIN LOAD BEGIN
  00130 010327  ALODS DEF LOADS     ADDRESS OF SUB-LOAD BEGIN 
  00131 010174  ABPOT DEF BPOUT     ADDR OF BP OUTPUT CODE
  00132 012220  ACLRT DEF CLRLT     ADDR OF LOCAL LST CLEARING CODE 
  00133 011241  ACLID DEF CLID3      CLEAR PROGRAM-LOADED FLAGS 
  00134 010135  AIDSN DEF IDSCN     ADDR OF SCAN IDENT CODE 
  00135 012004  ALABD DEF LABDO     ADDR OF ABSOLUTE OUTPUT SECTION 
  00136 012060  AREMD DEF REMDO     ADDRESS OF REMAINING OUTPUT DRIVER
  00137 010222  ACONV DEF CONVD     ADDRESS OF DECIMAL/ASCII CONVERTER
  00140 011446  ARECO DEF RECOR     ADDRESS OF RECORD OR-ING CODE 
  00141 012103  AREDO DEF REDOR     ADDRESS OF SPECIAL OR-ING CODE
  00142 011431  AMOVE DEF MOVER     ADDRESS OF MOVE-DBUF CODE 
  00143 011463  AGEND DEF GENID     ADDR OF ID SEGMENT GENERATOR
  00144 011746  AOUTD DEF OUTID     ADDR OF ID SEG OUTPUT CONTROL 
  00145 011737  AZOUT DEF ZOUT      ADDR OF ZERO OUTPUT TO ID SEG 
  00146 011777  ADSET DEF DTSET     ADDR OF DISK TACK TABLE CODE
  00147 010156  ANOTS DEF NOTST     ADDR OF PROGRAMS-LOADED TEST
  00150 014000  BLODR DEF RLOAD     ADDRESS OF 0,0 LOADER 
  00151 014003  ABASC DEF DMS       CORE ADDR FOR DOS LOADER      $$
  00152 014002  ARTEX DEF RT/TS     CORE ADDR FOR RT OR TS LOADER $$
  00153 015600  ABOOT DEF START     ADDRESS OF BOOTSTRAP LOADER 
  00154 015663  ASBUF DEF ASPBF     ADDRESS OF 9-WORD BUFFER IN BOOT
  00155 015655  A#SCT DEF #SECT     DEFINE # SECTORS - 1 FOR SYS  $$
  00156 015656  A#MSK DEF #MASK     INCREMENT TRACK # VALUE       $$
  00157 004457  AREAD DEF READ
  00160 004441  DEMOT DEF DEMTL     ADDRESS OF ROUTINE TO DEMOTE TYPE 6 TO TYPE 7 
  00161 004405  ALRT6 DEF CLRT6     ADDRESS OF TYPE 6 CLEAR ROUTINE 
  00162 012042  ATSTL DEF TSTEL     ADDRESS OF THE TSTEL ROUTINE
  00163 012122  ASCHF DEF SCHF      ADDR OF SCHEDULE SEARCH ROUTINE 
                      SKP 
* 
*                                   PROGRAM CONSTANT FACTORS
  00164 000000  ZERO  OCT 0 
  00165 177777  N1    DEC -1
  00166 177776  N2    DEC -2
  00167 177775  N3    DEC -3
  00170 177774  N4    DEC -4
  00171 177773  N5    DEC -5
  00172 177772  N6    DEC -6
  00173 177770  N8    DEC -8
  00174 177767  N9    DEC -9
  00175 177766  N10   DEC -10 
  00176 177765  N11   DEC -11 
  00177 177750  N24   DEC -24 
  00200 177745  N27   DEC -27 
  00201 177704  N60   DEC -60 
  00202 177700  N64   DEC -64 
  00203 177634  N100  DEC -100
  00204 000002  P2    DEC 2 
  00205 000003  P3    DEC 3 
  00206 000004  P4    DEC 4 
  00207 000005  P5    DEC 5 
  00210 000006  P6    DEC 6 
  00211 000007  P7    DEC 7 
  00212 000010  P8    DEC 8 
  00213 000011  P9    DEC 9 
  00214 000013  P11   DEC 11
  00215 000014  P12   DEC 12
  00216 000016  P14   DEC 14
  00217 000017  P15   DEC 15
  00220 000020  P16   DEC 16
  00221 000021  P17   DEC 17
  00222 000022  P18   DEC 18
  00223 000026  P22   DEC 22
  00224 000027  P23   DEC 23
  00225 000030  P24   DEC 24
  00226 000031  P25   DEC 25
  00227 000034  P28   DEC 28
  00230 000041  P33   DEC 33
  00231 000046  P38   DEC 38
  00232 000100  P64   DEC 64
  00233 000143  P99   DEC 99
  00172         L6    EQU N6
  00173         L10   EQU N8
  00175         L12   EQU N10 
  00234 177720  L60   OCT -60 
  00235 176000  L2000 OCT -2000 
  00211         M7    EQU P7
  00222         M22   EQU P18 
  00206         M4    EQU P4
  00236 000037  M37   OCT 37
  00237 000060  M60   OCT 60
  00240 000077  M77   OCT 77
  00241 000120  M120  OCT 120 
  00242 000177  M177  OCT 177 
  00243 000377  M377  OCT 377 
  00244 076000  M0760 OCT 076000
  00245 174000  M1740 OCT 174000
  00246 160000  M1600 OCT 160000
  00247 001777  M1777 OCT 1777
  00250 002000  M2000 OCT 2000
  00251 002002  M2002 OCT 2002
  00252 002004  M2004 OCT 2004
  00253 002006  M2006 OCT 2006
  00254 100377  M1377 OCT 100377
  00255 177400  M7400 OCT 177400
  00256 177000  M7000 OCT 177000
  00257 177600  M7600 OCT 177600
  00260 177700  M7700 OCT 177700
  00261 077777  M7777 OCT 77777 
                      SKP 
  00262 000263  DPWRS DEF *+1 
  00263 023420  P0100 DEC 10000 
  00264 001750  P1000 DEC 1000
  00265 000144  P100  DEC 100 
  00266 000012  P10   DEC 10
  00267 000001  P1    DEC 1 
  00270 000271  OPWRS DEF *+1 
  00271 010000  M0100 OCT 10000 
  00272 001000  M1000 OCT 1000
  00273 000100  M100  OCT 100 
  00274 000010  M10   OCT 10
  00275 000001        OCT 1 
* 
  00276 000040  BLANK OCT 040       BLANK 
  00277 020000  UBLNK OCT 20000     UPPER CHAR BLANK
  00300 100000  MSIGN OCT 100000    NEGATIVE SIGN 
  00301 000003  DSKAB OCT 3         ABSOLUTE DISK ADDRESS: 0,3
                      SKP 
* 
*                                   CLEAR BUFFER WITH OCTAL ZEROES
* 
*  THE BUFCL SUBROUTINE CLEARS A 64-WORD BUFFER WITH ZEROES.
* 
*  CALLING SEQUENCE:
*    A = IGNORED
*    B = ADDRESS OF BUFFER
*    JSB BUFCL
* 
*  RETURN: CONTENTS OF A AND B ARE DESTROYED. 
* 
  00302 000000  BUFCL NOP 
  00303 060202        LDA N64 
  00304 070463        STA WDCNT     SET BUFFER LENGTH = 64
  00305 002400        CLA 
  00306 170001        STA B,I       CLEAR BUFFER WORD 
  00307 006004        INB 
  00310 034463        ISZ WDCNT     ALL WORDS CLEAR?
  00311 024306        JMP *-3       NO - CONTINUE CLEARING
  00312 124302        JMP BUFCL,I   RETURN
                      SKP 
* 
*                                   NEW LINE (CR,LF) ON TTY 
* 
*  THE SPACE SUBROUTINE IS USED TO SPACE UP THE TELEPRINTER.
* 
*  CALLING SEQUENCE:
*    A = IGNORED
*    B = IGNORED
*    JSB SPACE
* 
*  RETURN: CONTENTS OF A AND B ARE DESTROYED. 
* 
  00313 000000  SPACE NOP 
  00314 002400        CLA           SET CHARACTER COUNT = ZERO
  00315 114102        JSB DRKEY,I   OUTPUT CR, LF ON TTY
  00316 124313        JMP SPACE,I   RETURN
                      SKP 
* 
*                                   PRINT: ERR XX 
* 
*  THE ERROR SUBROUTINE IS USED TO PRINT THE DIAGNOSTICS
*  FOR ALL ERROR MESSAGES.
* 
*  CALLING SEQUENCE:
*    A = 2-DIGIT ASCII ERROR CODE 
*    B = IGNORED
*    JSB ERROR
* 
*  RETURN: CONTENTS OF A AND B ARE DESTROYED. 
* 
  00317 000000  ERROR NOP           PRINT ERROR MESSAGES
  00320 070334        STA AMERR+3   SET ERROR CODE INTO MESSAGE 
  00321 060210        LDA P6
  00322 064331        LDB AMERR     AMERR = MESSAGE ADDRESS 
  00323 114102        JSB DRKEY,I   PRINT ERROR MESSAGE 
  00324 124317        JMP ERROR,I   RETURN
* 
*                                   IRRECOVERABLE ERROR EXIT
* 
  00325 000000  IRERR NOP 
  00326 014317        JSB ERROR     PRINT ERROR MESSAGE 
  00327 102000  HLT0  HLT 0B        WAIT - PROGRAM CAN NOT CONTINUE 
  00330 024327        JMP *-1       IRRECOVERABLE ERROR 
* 
  00331 000332  AMERR DEF *+1 
  00332 042522        ASC 3,ERR     ERROR MESSAGE = ERR + CODE
  00333 051040  
  00334 020040  
                      SPC 4 
  00335 030067  ERR07 ASC 1,07      IDENT/LST OVERFLOW
  00336 030465  ERR15 ASC 1,15      ILLEGAL CALL BY A TYPE 6 PROGRAM
  00337 030466  ERR16 ASC 1,16      BP LINKAGE AREA OVERFLOW
  00340 030467  ERR17 ASC 1,17      DISC OVERFLOW 
  00341 030470  ERR18 ASC 1,18      MEMORY OVERFLOW 
  00342 030471  ERR19 ASC 1,19      INVALID DBL ORDER/PROG OVERLAY
  00343 031062  ERR22 ASC 1,22      DISC READ PARITY/DECODE ERROR 
  00344 031470  ERR38 ASC 1,38      SYSTEM OVERFLOW INTO SCRATCH
                      SKP 
*  THE INIDX AND IDX SUBROUTINES ARE USED TO SET THE CURRENT
*  ADDRESSES FOR THE ENTRY IN THE PROGRAM IDENTIFICATION
*  BLOCK TABLE (IDENT).  THE ADDRESS OF THE NEXT ENTRY
*  IN THE IDENT TABLE IS CONTAINED IN TIDNT.  ON RETURN FROM
*  IDX, TIDNT CONTAINS THE ADDRESS OF THE NEXT AVAILABLE
*  ENTRY IN IDENT.  THE ADDRESS OF THE FIRST ENTRY IS CONTAINED 
*  IN BIDNT AND THE ADDRESS OF THE END OF IDENT IS CONTAINED
*  IN PIDNT.
* 
*  IF THE NEXT IDENT ENTRY OVERFLOWS INTO THE LAST LST ENTRY, 
*  IDX PRINTS A DIAGNOSTIC AND EXITS TO THE IRRECOVERABLE ERROR 
*  SUBROUTINE.
* 
*                                   SET INITIAL IDENT ADDRESS 
* 
*  INIDX SETS THE ADDRESS OF THE FIRST ENTRY IN THE IDENT 
*  TABLE AS THE CURRENT ADDRESS.
* 
*  CALLING SEQUENCE:
*    A = IGNORED
*    B = IGNORED
*    JSB INIDX
* 
*  RETURN: CONTENTS OF A AND B ARE DESTROYED. 
* 
  00345 000000  INIDX NOP 
  00346 060467        LDA BIDNT     BIDNT = INITIAL IDENT ADDRESS 
  00347 070470        STA TIDNT     SET CURRENT IDENT ADDRESS 
  00350 124345        JMP INIDX,I   RETURN
                      SKP 
* 
*                                   SET IDENT ADDRESSES FROM TIDNT
* 
*  IDX SETS THE ADDRESSES OF THE CURRENT 10-WORD ENTRY IN THE 
*  IDENT TABLE FROM THE ADDRESS OF THE CURRENT ENTRY (TIDNT). 
* 
*  CALLING SEQUENCE:
*    A = IGNORED
*    B = IGNORED
*    JSB IDX
* 
*  RETURN: CONTENTS OF A AND B ARE DESTROYED. 
*  (N+1): CURRENT IDENT ADDRESSES ARE THE ADDRESSES 
*         OF THE NEXT AVAILABLE IDENT ENTRY, OR THE 
*         END OF THE IDENT TABLE HAS BEEN REACHED.
*  (N+2): CURRENT IDENT ENTRY ADDRESSES (NOT END OF IDENT)
* 
  00351 000000  IDX   NOP 
  00352 060470        LDA TIDNT     TIDNT = CURRENT IDENT ADDRESS 
  00353 050471        CPA PIDNT     END OF IDENT LIST?
  00354 002001        RSS           YES - RETURN TO NEXT INSTRUCTION
  00355 034351        ISZ IDX       SET RETURN ADDRESS FOR N+2
  00356 070517        STA ID1       SET ADDRESS OF NAME 1,2 
  00357 002004        INA 
  00360 070520        STA ID2       SET ADDRESS OF NAME 3,4 
  00361 002004        INA 
  00362 070521        STA ID3       SET ADDRESS OF NAME 5, USE FLAG 
  00363 002004        INA 
  00364 070522        STA ID4       SET ADDRESS OF COM/PROG LENGTH
  00365 002004        INA 
  00366 070523        STA ID5       SET ADDRESS OF CURRENT DISK ADDR
  00367 002004        INA 
  00370 070524        STA ID6       SET ADDRESS OF M/S,PRIOR/DISK,TY
  00371 002004        INA 
  00372 070525        STA ID7       SET ADDRESS OF EXEC INTERV(1) 
  00373 002004        INA 
  00374 070526        STA ID8       SET ADDRESS OF EXEC INTERV(2) 
  00375 002004        INA 
  00376 070527        STA ID9       SET ADDRESS OF EXEC INTERV(3) 
  00377 002004        INA 
  00400 070530        STA ID10      SET MAIN IDENT ADDR FOR BS
  00401 060470        LDA TIDNT     TIDNT = CURRENT IDENT ADDR
  00402 064000        LDB A 
  00403 003004        CMA,INA 
  00404 040466        ADA PLST      PLST = CURRENT END LST ADDR 
  00405 002021        SSA,RSS       SKIP IF NO OVERLAP
  00406 024442        JMP LSERR     PRINT OVERFLOW MESSAGE
  00407 044175        ADB N10       SET FOR NEXT IDENT ADDRESS
  00410 074470        STB TIDNT     SET NEXT IDENT ADDRESS
  00411 124351        JMP IDX,I     RETURN
                      SKP 
*  THE INLST AND LSTX SUBROUTINES ARE USED TO SET THE CURRENT 
*  LOADER SYMBOL TABLE (LST) ADDRESSES.  THE ADDR OF THE NEXT ENTRY 
*  IN LST IS CONTAINED IN TLST.  ON RETURN FROM IDX, TLST CONTAINS
*  THE ADDRESS OF THE NEXT AVAILABLE ENTRY IN LST, OR THE ADDRESS 
*  OF THE END OF LST.  THE ADDRESS OF THE FIRST ENTRY IN LST
*  IS AT BLST AND THE ADDRESS OF THE NEXT AVAILABLE ENTRY 
*  IS AT PLST.
* 
*  IF THE NEXT ENTRY IN LST OVERFLOWS INTO THE CURRENT
*  IDENT ENTRY, LSTX PRINTS A DIAGNOSTIC AND EXITS
*  TO THE IRRECOVERABLE ERROR SUBROUTINE. 
* 
*                                   SET INITIAL LST ADDRESS 
* 
*  INLST SETS THE ADDRESS OF THE FIRST ENTRY IN LST.
* 
  00412 000000  INLST NOP 
  00413 060464        LDA BLST      BLST = FIRST LST ADDRESS
  00414 070465        STA TLST      SET CURRENT LST ADDRESS 
  00415 124412        JMP INLST,I   RETURN
                      SKP 
* 
*                                   SET LST ADDRESSES FROM TLST 
* 
*  LSTX SETS THE CURRENT LST ADDRESSES FROM TLST. 
* 
*  CALLING SEQUENCE:
*    A = IGNORED
*    B = IGNORED
*    JSB LSTX 
* 
*  RETURN: CONTENTS OF A AND B ARE DESTROYED. 
*    (N+1): THE END OF LST IS REACHED AND THE CURRENT 
*           LST ADDRESSES ARE THE ADDRESSES OF THE NEXT AVAILABLE 
*           ENTRY IN LST. 
*    (N+2): CURRENT LST ADDRESSES ARE SET (NOT END OF LST). 
* 
  00416 000000  LSTX  NOP 
  00417 060465        LDA TLST      GET CURRENT LST ADDRESS 
  00420 050466        CPA PLST      END OF LST TABLE? 
  00421 002001        RSS 
  00422 034416        ISZ LSTX      INCR RETURN ADDRESS 
  00423 070531        STA LST1      SET WORD 1  ADDR
  00424 002004        INA 
  00425 070532        STA LST2      SET WORD 2 ADDR 
  00426 002004        INA 
  00427 070533        STA LST3      SET WORD 3 ADDR 
  00430 002004        INA 
  00431 070534        STA LST4      SET WORD 4 ADDR 
  00432 002004        INA 
  00433 070535        STA LST5      SET WORD 5 ADDR 
  00434 002004        INA 
  00435 070465        STA TLST      SET NEXT LST ADDRESS
  00436 003004        CMA,INA 
  00437 040471        ADA PIDNT     PIDNT = ADDR CURRENT IDENT
  00440 002021        SSA,RSS       SKIP - INVALID LST ENTRY
  00441 124416        JMP LSTX,I    RETURN
* 
* 
  00442 060335  LSERR LDA ERR07 
  00443 014325        JSB IRERR     IRRECOVERABLE ERROR EXIT
                      SKP 
*                                  RELOCATION BASE TABLE
  00444 000445  RBTAD DEF *+1 
  00445 000000        OCT 0         ABSOLUTE PROGRAM BASE 
  00446 000000  TPREL OCT 0         CURRENT PROG BASE ADDRESS 
  00447 000000        OCT 0         BP RELOCATION ADDRESS 
  00450 000000  COMAD OCT 0         CURRENT COMMON RELOCATION BASE
* 
  00451 000542  ALBUF DEF LBUF
  00452 000644  ADBUF DEF DBUF
  00453 100744  AEBUF DEF EBUF,I
  00454 001063  AIBUF DEF IBUF
  00455 001165  AKBUF DEF KBUF
  00456 001267  ATBUF DEF TBUF
  00457 012261  PLAD  DEF PLIST 
  00460 001275  AMLST DEF MLIST 
  00461 001302  AMEM5 DEF MLIST+5 
  00462 001345  AILST DEF ILIST 
* 
  00463 000000  WDCNT OCT 0         TEMPORARY WORD COUNTER
* 
  00464 016242  BLST  DEF LST       ADDR OF FIRST LST ENTRY 
  00465         TLST  BSS 1         CURRENT LST ADDR
  00466         PLST  BSS 1         ADDR OF NEXT AVAILABLE ENTRY
* 
  00467         BIDNT BSS 1         ADDR OF FIRST IDENT 
  00470         TIDNT BSS 1         CURRENT IDENT 
  00471         PIDNT BSS 1         NEXT AVAILABLE IDENT
* 
  00472         MAXC  BSS 1         MAX CHAR COUNT
  00473         TCHAR BSS 1         TEMPORARY CHAR SAVE AREA
  00474         OCTNO BSS 1         OCTAL DIGIT 
* 
  00475         DSKSY BSS 1         INITIAL ID SEGMENT DISK ADDRESS 
  00476         DSIZE BSS 1         DISK SIZE - NO. OF TRACKS 
  00477         DSKSC BSS 1         ADDRESS OF DISK SCRATCH AREA
  00500         PTRAK BSS 1         NUMBER OF DISK PROTECTED TRACKS 
  00501         DAUXN BSS 1         AUXILIARY DISK SIZE 
  00502         SDS#  BSS 1         # SECTORS/TRACK FOR SYSTEM DISC$
  00503 000000  ADS#  OCT 0         # SECTORS/TRACK FOR AUX. DISC $$
  00504         PIOC  BSS 1         ADDR. OF PRIVILEGED I/O CARD  $$
  00505         IDSP  BSS 1         POSITION OF 1ST ID SEG. IN SECT$
  00506         TBCHN BSS 1         TIME BASE GENERATOR CHNL
  00507         SWAPF BSS 1         SWAPPING FLAG = 0/1 = NO/YES
  00510         LWASM BSS 1         LAST WORD SYS AVAIL MEM 
  00511         PARAD BSS 1         PARAMETER INPUT DRIVER ADDRESS
  00512         TTYCH BSS 1         SYSTEM TTY CHANNEL NO.
* 
  00513         DERCN BSS 1         DISK ERROR COUNTER
  00514         DSKAD BSS 1         CURRENT DISK ADDRESS
  00515         PLFLG BSS 1         PROGRAM LOAD. FLAG = -1/0 = L/NL
  00516         DSCNT BSS 1         DISK SEGMENT SECTOR COUNT 
* 
  00517         ID1   BSS 1         IDENT 1 ADDR: NAME 1,2
  00520         ID2   BSS 1         IDENT 2 ADDR: NAME 3,4
  00521         ID3   BSS 1         IDENT 3 ADDR: NAME 5, USAGE FLAG
  00522         ID4   BSS 1         IDENT 4 ADDR: COMMON LENGTH 
  00523         ID5   BSS 1         IDENT 5 ADDR: CURRENT DISK ADDR 
  00524         ID6   BSS 1         IDENT 6 ADDR: M/S,PRIORITY,TYPE 
  00525         ID7   BSS 1         IDENT 7 ADDR: EXEC INTERV (1) 
  00526         ID8   BSS 1         IDENT 8 ADDR: EXEC INTERV (2) 
  00527         ID9   BSS 1         IDENT 9 ADDR: EXEC INTERV (3) 
  00530         ID10  BSS 1         IDENT 10 ADDR: LIB LGTH/BS MAIN 
* 
  00531         LST1  BSS 1         WORD 1 ADDR (LST) 
  00532         LST2  BSS 1         WORD 2 ADDR (LST) 
  00533         LST3  BSS 1         WORD 3 ADDR (LST) 
  00534         LST4  BSS 1         WORD 4 ADDR (LST) 
  00535         LST5  BSS 1         WORD 5 ADDR (LST) 
* 
  00536         NXFLG BSS 1         ENT/EXT FLAG = -1/0 
  00537         EXCNT BSS 1         SYMBOL COUNTER
* 
  00540         CURAL BSS 1         CURRENT LBUF ADDRESS
  00541         LCNT  BSS 1         CURRENT LBUF COUNT
  00542         LBUF  BSS 64        LOAD BUFFER 
* 
  00642         CURAD BSS 1         CURRENT DBUF ADDRESS
  00643         DCNT  BSS 1         CURRENT DBUF COUNT
  00644         DBUF  BSS 64        RELOCATABLE DISK INPUT BUFFER 
* 
  00744         EBUF  BSS 64        DISK READ ERROR SCANOUT AREA
* 
  01044         CURAI BSS 1         CURRENT IBUF COUNT
  01045         ICNT  BSS 1         CURRENT IBUF COUNT
* 
  01046         LRBP  BSS 1         LOWER RESIDENT BP BOUND 
  01047         URBP  BSS 1         UPPER RESIDENT BP BOUND 
  01050         LBBP  BSS 1         LOWER BACKGROUND BP BOUND 
  01051         UBBP  BSS 1         UPPER BACKGROUND BP BOUND 
  01052         URBP1 BSS 1         LWA R/T DISC RES BP LINK AREA $$
  01053         BPMAX BSS 1 
                      SPC 1 
  01054 000000  TEMP1 NOP 
  01055 000000  TEMP2 NOP 
  01056 000000  LWH1  NOP 
  01057 000000  LWH2  NOP 
  01060 000000  L01   NOP 
  01061 000000  L001  NOP 
                      SPC 1 
  01062 024440  RPARB ASC 1,) 
                      SKP 
* 
* 
  01063         IBUF  BSS 64        ID SEGMENT BUFFER 
* 
  01163         CURAK BSS 1         CURRENT KBUF ADDRESS
  01164         KCNT  BSS 1         CURRENT KBUF COUNT
  01165         KBUF  BSS 64        KEYWORD BUFFER
* 
  01265         CURAT BSS 1         CURRENT TBUF ADDRESS
  01266         TCNT  BSS 1         CURRENT TBUF COUNT
  01267         TBUF  BSS 4         TEMPORARY BUFFER
* 
  01273         CURAP BSS 1         CURRENT PLIST ADDRESS 
* 
  01274         AMAD  BSS 1         CURRENT MLIST ADDRESS 
  01275         MLIST BSS 8         MEMORY MAP BUFFER 
* 
  01305         LICNT BSS 1         LONG ID SEGMENT COUNT 
  01306         SICNT BSS 1         SHORT ID SEGMENT COUNT
  01307         COMRT BSS 1         MAXIMUM RT COM LENGTH 
  01310         COMBG BSS 1         MAX BG COM LENGTH 
* 
  01311         DSKEY BSS 1         CURRENT KEYWORD DISK ADDRESS
  01312         DSKID BSS 1         DISK ID SEGMENT ADDRESS 
  01313         KEYCN BSS 1         TOTAL KEYWORD COUNT 
  01314         KEYCT BSS 1         CURRENT KEYWORD COUNT          $
* 
  01315         PTYPE BSS 1         PROGRAM TYPE
  01316         FSYBP BSS 1         FIRST WORD SYS BP LINKAGE 
  01317         SYSAD BSS 1         CURRENT ID SEGMENT ADDRESS
* 
  01320         TBREL BSS 1         CURRENT BP RELOC ADDR 
  01321         PBREL BSS 1         INITIAL BP RELOC ADDR 
  01322         PPREL BSS 1         INITIAL PROG RELOC ADDR 
* 
  01323         RELAD BSS 1         CURRENT CORE RELOCATION ADDRESS 
  01324         PLMAN BSS 1         CURRENT BG MAIN PLIST ADDRESS 
* 
  01325         BSBAD BSS 1         BG SEGMENT BP RELOC ADDR
  01326         BSPAD BSS 1         BG SEGMENT PROG RELOC ADDR
* 
  01327         LFLAG BSS 1         PROGRAMS-LOADED FLAG
  01330         IMAIN BSS 1         CURRENT MAIN IDENT ADDR 
  01331         HDFLG BSS 1         HEADING FORMAT FLAG 
  01332         CIDNT BSS 1         CURRENT MAIN IDENT ADDRESS
  01333         DSKRD BSS 1         DISK INPUT ADDRESS
* 
  01334         AEQT  BSS 1         ADDRESS OF EQUIPMENT TABLE
  01335         CEQT  BSS 1         NO. ENTRIES IN EQUIPMENT TABLE
* 
  01336         ASQT  BSS 1         ADDR OF DEVICE REFERENCE TABLE
  01337         CSQT  BSS 1         NO. ENTRIES IN DEV. REF. TABLE
* 
  01340         AINT  BSS 1         ADDRESS OF INTERRUPT TABLE
  01341         CINT  BSS 1         NO. ENTRIES IN INTERRUPT TABLE
* 
  01342         DSKIN BSS 1         DISK ADDR OF INT CODE RECORD
  01343         INTCN BSS 1         RECORD COUNT OF INT CODE
* 
  01344         CURIL BSS 1         CURRENT ILIST ADDRESS 
  01345         ILIST BSS 64        USER SYSTEM PROG IDENT ADDR LIST
* 
  01445         DSKRX BSS 1         CURRENT TRACK ADDR. FOR "DBIN"
  01446         EDCNT BSS 1         CURRENT DISK ERROR COUNT
  01447         DCMND BSS 1         DISK COMMAND/ADDRESS
  01450         MADDR BSS 1         MEMORY COMMAND/ADDRESS
  01451         TEMPP BSS 1         CURRENT ABSOLUTE WORD 
  01452         ABCNT BSS 1         CURRENT ABSOLUTE DISPLACEMENT 
  01453         DSKMN BSS 1         INITIAL MAIN DISK ADDRESS 
  01454         BSSDP BSS 1         INITIAL DISK RES MAIN BSS DISP
  01455         PRENT BSS 1         PRIMARY ENTRY POINT 
  01456         DBLAD BSS 1         CURRENT DBL ADDRESS 
  01457         REKEY BSS 1         INSTRUCTION TYPE BYTE 
  01460         INSCN BSS 1         INSTRUCTION TYPE COUNTER
  01461         EXORD BSS 1         EXT ORDINAL 
  01462         INSTR BSS 1         CURRENT INSTRUCTION 
  01463         PAGNO BSS 1         CURRENT PAGE NO.
  01464         OPRND BSS 1         CURRENT OPERAND 
  01465         PLGTH BSS 1         PROGRAM LENGTH
  01466         LOWER BSS 1         LOWER BP LST BOUND
  01467         UPPER BSS 1         UPPER BP LST BOUND
  01470         RANAD BSS 1         CURRENT POWER RANGE ADDRESS 
  01471         LIBFG BSS 1 
  01472         LDTYP BSS 1 
  01473 000000  DSKA  NOP           ADDRESS OF HIGHEST DISK WRITE 
  01474         DRT2  BSS 1         CONTENTS OF DISK REF DRT ENTRY
  01475         DRT3  BSS 1         CONTENTS OF AUX DISK REF DRT
  01476         SCH1  BSS 1         ADDRESS OF IDENT OF PGM TO BE SCHEDULED 
  01477         SCH2  BSS 1         ADDR OF IDENT OF ABOVE PGM -1 IN LOAD SEQUENCE
  01500         SCH3  BSS 1         LENGTH OF SCHED PGMS ID SEGMENT 
  01501         SCH4  BSS 1         ID ADDRESS OF THE SCHEDULED PGM 
* 
  01502 030071  ERR09 ASC 1,09      PARAMETER NAME ERROR
  01503 030460  ERR10 ASC 1,10      PARAMETER TYPE ERROR
  01504 030461  ERR11 ASC 1,11      PARAMETER PRIORITY ERROR
  01505 030462  ERR12 ASC 1,12      PARAMETER INTERVAL ERROR
  01506 031061  ERR21 ASC 1,21      $CIC NOT FOUND IN LST 
  01507 031064  ERR24 ASC 1,24      INVALID CHANNEL NO. IN EQT REC
  01510 031065  ERR25 ASC 1,25      INVALID DRIVER NAME 
  01511 031066  ERR26 ASC 1,26      INVALID D,B, OR T OPERAND 
  01512 031067  ERR27 ASC 1,27      INVALID DEVICE REF. NO. 
  01513 031070  ERR28 ASC 1,28      INVALID INT REC CHANNEL NO. 
  01514 031071  ERR29 ASC 1,29      INVALID INT CHANNEL NO. ORDER 
  01515 031460  ERR30 ASC 1,30      INVALID INT REC MNEMONIC
  01516 031461  ERR31 ASC 1,31      INVALID EQT NO. IN INT RECORD 
  01517 031462  ERR32 ASC 1,32      INVALID PROGRAM NAME IN INT REC 
  01520 031463  ERR33 ASC 1,33      INVALID ENTRY POINT IN INT RECORD 
  01521 031464  ERR34 ASC 1,34      INVALID ABS VALUE IN INT REC
  01522 031465  ERR35 ASC 1,35      BP INTERRUPT LOCATION OVERFLOW
  01523 031466  ERR36 ASC 1,36      INVALID FINAL OPERAND IN INT REC
  01524 031467  ERR37 ASC 1,37      INVALID COMMON IN SYS. LIB, OR UT PGM 
  01525 031471  ERR39 ASC 1,39      ILLEGAL SYSTEM USE OF TYPE 6 PROGRAM
  01526 041107  MS20  ASC 9,BG DISC RESIDENTS 
  01527 020104  
  01530 044523  
  01531 041440  
  01532 051105  
  01533 051511  
  01534 042105  
  01535 047124  
  01536 051440  
  01537 025123  MS23  ASC 11,*SYSTEM STORED ON DISC 
  01540 054523  
  01541 052105  
  01542 046440  
  01543 051524  
  01544 047522  
  01545 042504  
  01546 020117  
  01547 047040  
  01550 042111  
  01551 051503  
  01552 041120  MS02  ASC 8,BP LINKAGE XXXXX
  01553 020114  
  01554 044516  
  01555 045501  
  01556 043505  
  01557 020130  
  01560 054130  
  01561 054130  
  01562 001563  MES42 DEF *+1 
  01563 021440        ASC 12,# OF BLANK ID SEGMENTS?
  01564 047506  
  01565 020102  
  01566 046101  
  01567 047113  
  01570 020111  
  01571 042040  
  01572 051505  
  01573 043515  
  01574 042516  
  01575 052123  
  01576 037440  
* 
  01577 001600  MES22 DEF *+1 
  01600 024116        ASC 3,(NONE)
  01601 047516  
  01602 042451  
* 
  01603 001604  MES25 DEF *+1 
  01604 025040        ASC 12,* EQUIPMENT TABLE ENTRY
  01605 042521  
  01606 052511  
  01607 050115  
  01610 042516  
  01611 052040  
  01612 052101  
  01613 041114  
  01614 042440  
  01615 042516  
  01616 052122  
  01617 054440  
* 
  01620 001621  MES26 DEF *+1 
  01621 025040        ASC 12,* DEVICE REFERENCE TABLE 
  01622 042105  
  01623 053111  
  01624 041505  
  01625 020122  
  01626 042506  
  01627 042522  
  01630 042516  
  01631 041505  
  01632 020124  
  01633 040502  
  01634 046105  
* 
  01635 001636  MES36 DEF *+1 
  01636 041510        ASC 11,CHANGE FWA SYS AV MEM? 
  01637 040516  
  01640 043505  
  01641 020106  
  01642 053501  
  01643 020123  
  01644 054523  
  01645 020101  
  01646 053040  
  01647 046505  
  01650 046477  
* 
  01651 001652  MES41 DEF *+1 
  01652 050122        ASC 11,PRIV. INT. CARD ADDR?
  01653 044526  
  01654 027040  
  01655 044516  
  01656 052056  
  01657 020103  
  01660 040522  
  01661 042040  
  01662 040504  
  01663 042122  
  01664 037440  
* 
  01665 001666  MES50 DEF *+1 
  01666 051524        ASC 7,START SCRATCH?
  01667 040522  
  01670 052040  
  01671 051503  
  01672 051101  
  01673 052103  
  01674 044077  
* 
  01675 001676  MES40 DEF *+1 
  01676 021440        ASC 8,# SECTORS/TRACK?
  01677 051505  
  01700 041524  
  01701 047522  
  01702 051457  
  01703 052122  
  01704 040503  
  01705 045477  
  01706               ORG * 
                      HED ** SYSTEM BASE PAGE COMMUNICATION AREA ** 
*** SYSTEM BASE PAGE  COMMUNICATION  AREA *** 
* 
* 
* SYSTEM TABLE DEFINITION * 
* 
  01650         EQTA  EQU .+0      FWA  OF  EQUIPMENT TABLE 
  01651         EQT#  EQU .+1       # OF EQT ENTRIES
  01653         LUMAX EQU .+3       # OF LOGICAL UNITS (IN DRT) 
  01652         DRT   EQU .+2      FWA  OF  DEVICE REFERENCE TABLE
  01654         INTBA EQU .+4      FWA  OF  INTERRUPT TABLE 
  01655         INTLG EQU .+5       # OF INTERRUPT TABLE ENTRIES
  01656         TAT   EQU .+6      FWA  OF  TRACK ASSIGNMENT TABLE
  01657         KEYWD EQU .+7      FWA  OF  KEYWORD BLOCK 
* 
* I/O MODULE/DRIVER COMMUNICATION 
* 
  01660         EQT1  EQU .+8      ADDRESSES
  01661         EQT2  EQU .+9 
  01662         EQT3  EQU .+10      OF
  01663         EQT4  EQU .+11
  01664         EQT5  EQU .+12      CURRENT 
  01665         EQT6  EQU .+13
  01666         EQT7  EQU .+14      15-WORD 
  01667         EQT8  EQU .+15
  01670         EQT9  EQU .+16      EQT 
  01671         EQT10 EQU .+17
  01672         EQT11 EQU .+18      ENTRY 
  01771         EQT12 EQU .+81
  01772         EQT13 EQU .+82
  01773         EQT14 EQU .+83
  01774         EQT15 EQU .+84
* 
  01673         CHAN  EQU .+19     CURRENT DMA CHANNEL #
  01674         TBG   EQU .+20     I/O ADDRESS OF TIME-BASE CARD
  01675         SYSTY EQU .+21     EQT ENTRY ADDRESS OF SYSTEM TTY
* 
* SYSTEM REQUEST PROCESSOR /'EXEC' COMMUNICATION *
* 
  01676         RQCNT EQU .+22     # OF REQUEST PARAMETERS -1 
  01677         RQRTN EQU .+23      RETURN POINT ADDRESS
  01700         RQP1  EQU .+24      ADDRESSES 
  01701         RQP2  EQU .+25
  01702         RQP3  EQU .+26       OF REQUEST 
  01703         RQP4  EQU .+27
  01704         RQP5  EQU .+28       PARAMETERS 
  01705         RQP6  EQU .+29
  01706         RQP7  EQU .+30       (SET FOR MAXIMUM OF
  01707         RQP8  EQU .+31        8 PARAMETERS) 
* 
* DEFINITION OF SYSTEM LISTS (QUEUES) * 
* 
  01710         DORMT EQU .+32     ADDRESS OF 'DORMANT' LIST, 
  01711         SKEDD EQU .+33      'SCHEDULE' LIST,
  01714         SUSP3 EQU .+36      'AVAILABLE MEMORY' LIST,
  01715         SUSP4 EQU .+37      'DISC ALLOCATION'  LIST,
  01716         SUSP5 EQU .+38      'OPERATOR SUSPEND' LIST 
* 
* DEFINITION OF EXECUTING PROGRAM  ID SEGMENT' *
* 
  01717         XEQT  EQU .+39     ID SEGMENT ADDR. OF CURRENT PROG.
  01720         XLINK EQU .+40       'LINKAGE'
  01721         XTEMP EQU .+41       'TEMPORARY (5-WORDS) 
  01726         XPRIO EQU .+46       'PRIORITY' WORD
  01727         XPENT EQU .+47       'PRIMARY ENTRY POINT'
  01730         XSUSP EQU .+48       'POINT OF SUSPENSION'
  01731         XA    EQU .+49       'A REGISTER' AT SUSPENSION 
  01732         XB    EQU .+50       'B REGISTER' 
  01733         XEO   EQU .+51       'E AND OVERFLOW
* 
* SYSTEM MODULE COMMUNICATION FLAGS * 
* 
  01734         OPATN EQU .+52     OPERATOR/KEYBOARD ATTENTION FLAG 
  01735         OPFLG EQU .+53     OPERATOR COMMUNICATION FLAG
  01736         SWAP  EQU .+54     RT DISC RESIDENT SWAPPING FLAG 
  01737         DUMMY EQU .+55     I/O ADDRESS OF DUMMY INT. CARD 
  01740         IDSDA EQU .+56     DISC ADDR. OF FIRST ID SEGMENT 
  01741         IDSDP EQU .+57      -POSITION WITHIN SECTOR 
* 
* DEFINITION OF MEMORY ALLOCATION BASES * 
* 
  01742         BPA1  EQU .+58     FWA R/T DISC RES. BP LINK AREA 
  01743         BPA2  EQU .+59     LWA R/T DISC RES. BP LINK AREA 
  01744         BPA3  EQU .+60     FWA BKG DISC RES. BP LINK AREA 
  01745         LBORG EQU .+61     FWA OF RESIDENT LIBRARY AREA 
  01746         RTORG EQU .+62     FWA OF REAL-TIME AREA
  01747         RTCOM EQU .+63     LENGTH OF REAL TIME COMMON AREA
  01750         RTDRA EQU .+64     FWA OF R/T DISC RESIDENT AREA
  01751         AVMEM EQU .+65     FWA OF SYSTEM AVAILABLE MEMORY 
  01752         BKORG EQU .+66     FWA OF BACKGROUND AREA 
  01753         BKCOM EQU .+67     LENGTH OF BACKGROUND COMMON AREA 
  01754         BKDRA EQU .+68     FWA OF BKG DISC RESIDENT AREA
* 
* UTILITY PARAMETERS
* 
  01755         TATLG EQU .+69     LENGTH OF TRACK ASSIGNMENT TABLE 
  01756         TATSD EQU .+70      # OF TRACKS ON SYSTEM DISC
  01757         SECT2 EQU .+71      # SECTORS/TRACK ON LU 2 (SYSTEM)
  01760         SECT3 EQU .+72      # SECTORS/TRACK ON LU 3 (AUX.)
  01761         DSCLB EQU .+73     DISC ADDR OF RES LIB ENTRY PTS 
  01762         DSCLN EQU .+74      # OF RES LIB ENTRY POINTS 
  01763         DSCUT EQU .+75     DISC ADDR OF RELOC UTILITY PROGS 
  01764         DSCUN EQU .+76      # OF RELOC UTILITY PROGS
  01765         LGOTK EQU .+77     LOAD-N-GO: LU,STG TRACK,# OF TRKS
  01766         LGOC  EQU .+78      CURRENT LGO TRACK/SECTOR ADDRESS
  01767         SFCUN EQU .+79     SOURCE FILE LU AND DISC ADDRESS
  01770         MPTFL EQU .+80      MEMORY PROTECT ON/OFF FLAG (0/1)
  01775         FENCE EQU .+85      MEM PROTECT FENCE ADDRESS 
  01777         BKLWA EQU .+87     LWA OF MEMORY IN BACKGROUND
                      HED ** RT EXECUTIVE SYSTEM GENERATOR ** 
  02000               ORG 2000B 
* 
*  INITIAL TRANSFER IS MADE TO RTGEN BY SETTING 100(8)
*  IN THE SWITCH REGISTER AND PRESSING RUN. IF ANY ERRORS ARE 
*  DETECTED DURING THE INITIALIZATION PHASE, THE INITIALIZATION 
*  SECTION CAN BE REPEATED. 
* 
*  THE FOLLOWING MESSAGES ARE PRINTED DURING THE INITIALIZATION 
*  PHASE, WITH THE SPECIFICATIONS FOR EACH VALID RESONSE. 
* 
* 
*  MESSAGE         RESPONSE 
* 
*  FH DISC CHNL?      ENTER 2 OCTAL DIGITS
* 
*  SYS DISC SIZE?  ENTER 3 DECIMAL DIGITS 
* 
*  START SCRATCH?  ENTER 3 DECIMAL DIGITS 
* 
*  NO. PROTECTED?  ENTER 2 DECIMAL DIGITS 
* 
*  # SECTORS/TRACK?  ENTER 3 DECIMAL DIGITS       $$
* 
*  AUX DISC SIZE?  ENTER 3 DECIMAL DIGITS (OR ZERO) 
* 
*  # SECTORS/TRACK?  ENTER 3 DECIMAL DIGITS       $$
* 
*  TBG CHNL?       ENTER 2 OCTAL DIGITS 
* 
*  PRIV. INT. CARD ADDR?  ENTER 2 OCTAL DIGITS    $$
* 
*  SWAPPING?       ENTER YES OR NO
* 
*  LWA MEM?        ENTER 5 OCTAL DIGITS 
* 
*  PRGM INPT? 
*  LIBR INPT?      ENTER PT, MT, DF, OR TY        $$
*  PRAM INPT? 
* 
*  FOLLOWING SUCCESSFUL COMPLETION OF THIS SECTION, 
*  THE TRANSFER ADDRESS IS MOVED TO THE INITIALIZATION SECTION
*  OF THE LOADING PHASE.
* 
  02000 107700  RTGEN CLC 0,C       TURN OFF ALL I/O,INTERRUPTS 
  02001 014313        JSB SPACE      NEW LINE 
  02002 014313        JSB SPACE      NEW LINE 
* 
*                                   SET DISK CHANNEL
  02003 060216  CHNLD LDA P14 
  02004 067425        LDB MESS2     MESS2 = ADDR: FH DISK CHNL? 
  02005 017230        JSB REPLY     PRINT MESSAGE, GET REPLY
  02006 060204        LDA P2        SET FOR 2 OCTAL DIGITS INPUT
  02007 017243        JSB DOCON     GET DIGITS, RETURN OCTAL
  02010 026003        JMP CHNLD     REPEAT INPUT
  02011 073577        STA DCHNL     SET DISK CHANNEL NUMBER 
* 
*                                   GET SYSTEM DISK SIZE
  02012 014313        JSB SPACE     NEW LINE
  02013 060216  SIZED LDA P14 
  02014 067415        LDB MESS1     MESS1 = ADDR: SYS DISK SIZE?
  02015 017230        JSB REPLY     PRINT MESSAGE, GET REPLY
  02016 060167        LDA N3        SET FOR 3 DECIMAL DIGITS INPUT
  02017 017243        JSB DOCON     GET DIGITS, RETURN OCTAL
  02020 026013        JMP SIZED     REPEAT INPUT
  02021 070476        STA DSIZE     SET SYSTEM DISK SIZE
* 
* 
  02022 014313        JSB SPACE     NEW LINE
  02023 060216  STREL LDA P14 
  02024 065665        LDB MES50     MES50 = ADDR: START SCRATCH?
  02025 017230        JSB REPLY     PRINT MESSAGE, GET REPLY
  02026 060167        LDA N3        SET FOR 3 DECIMAL DIGITS INPUT
  02027 017243        JSB DOCON     GET DIGITS, RETURN OCTAL
  02030 026023        JMP STREL     REPEAT INPUT
  02031 002003        SZA,RSS       IF ZERO INPUT, USE DEFAULT VALUE
  02032 026042        JMP DFALT      (DISC MID-POINT) 
  02033 064476        LDB DSIZE     IF INPUT GREATER THAN DISC SIZE,
  02034 007004        CMB,INB        FORCE REPEAT INPUT 
  02035 044000        ADB A 
  02036 001200        RAL 
  02037 006021        SSB,RSS 
  02040 026023        JMP STREL 
  02041 002001        RSS 
  02042 060476  DFALT LDA DSIZE 
  02043 001727        ALF,ALF       ROTATE LEFT FOR TRACK ADDRESS 
  02044 001323        RAR,RAR       DIVIDE BY 2                   $$
  02045 010257        AND M7600     ISOLATE TRACK ADDR.           $$
  02046 070477        STA DSKSC     SET INITIAL SCRATCH ADDRESS 
* 
*                                   SET NO. PROTECTED TRACKS
  02047 014313        JSB SPACE     NEW LINE
  02050 060216  PROTD LDA P14 
  02051 067501        LDB MES21     MES21 = ADDR: NO. PROTECTED?
  02052 017230        JSB REPLY     PRINT MESSAGE, GET REPLY
  02053 060166        LDA N2        SET FOR 2 DECIMAL DIGITS INPUT
  02054 017243        JSB DOCON     GET DIGITS, RETURN OCTAL
  02055 026050        JMP PROTD     REPEAT INPUT
  02056 070500        STA PTRAK     SET NO. PROTECTED TRACKS
* 
*                                  GET # SECTORS FOR SYSTEM DISC
  02057 014313        JSB SPACE     NEW LINE                      $$
  02060 060220  #SEC1 LDA P16                                     $$
  02061 065675        LDB MES40     MES40 = ADDR: # SECTORS/TRACK?$$
  02062 017230        JSB REPLY     PRINT MESSAGE, GET REPLY      $$
  02063 060167        LDA N3        SET FOR 3 DECIMAL DIGITS INPUT$$
  02064 017243        JSB DOCON     GET DIGITS, RETURN OCTAL      $$
  02065 026060        JMP #SEC1     REPEAT INPUT                  $$
  02066 070502        STA SDS#      SET # SECTORS FOR SYSTEM DISC $$
* 
*                                   GET AUXILIARY DISK SIZE 
  02067 014313        JSB SPACE     NEW LINE
  02070 060216  AUXDS LDA P14 
  02071 067547        LDB MES33     MES33 = ADDR: AUX DISK SIZE?
  02072 017230        JSB REPLY     PRINT MESSAGE, GET REPLY
  02073 060167        LDA N3        SET FOR 3 DECIMAL DIGITS INPUT$$
  02074 017243        JSB DOCON     GET DIGITS, RETURN OCTAL
  02075 026070        JMP AUXDS     REPEAT INPUT
  02076 070501        STA DAUXN     SET AUXILIARY DISK SIZE 
  02077 002003        SZA,RSS       IF AUX. DISC NOT PRESENT,     $$
  02100 026111        JMP CHNLT-1    SKIP # OF SECTORS INPUT.     $$
* 
*                                  GET # SECTORS FOR AUX. DISC
  02101 014313        JSB SPACE     NEW LINE                      $$
  02102 060220  #SEC2 LDA P16                                     $$
  02103 065675        LDB MES40     REPEAT                        $$
  02104 017230        JSB REPLY      # SECTORS                    $$
  02105 060167        LDA N3         MESSAGE AND                  $$
  02106 017243        JSB DOCON      INPUT.                       $$
  02107 026102        JMP #SEC2                                   $$
  02110 070503        STA ADS#      SET # SECTORS OF SYSTEM DISC  $$
* 
*                                   SET TIME BASE GENERATOR CHANNEL 
  02111 014313        JSB SPACE     NEW LINE
  02112 060213  CHNLT LDA P9
  02113 067511        LDB MES30     MES30 = ADDR: TBG CHNL? 
  02114 017230        JSB REPLY     PRINT MESSAGE, GET REPLY
  02115 060204        LDA P2        SET FOR 2 OCTAL DIGITS INPUT
  02116 017243        JSB DOCON     GET DIGITS, RETURN OCTAL
  02117 026112        JMP CHNLT     REPEAT INPUT
  02120 070506        STA TBCHN     SET TBG CHANNEL NO. 
* 
*                                  GET PRIV. INT. CARD ADDR.
  02121 014313        JSB SPACE     NEW LINE                      $$
  02122 060223  DUMY  LDA P22                                     $$
  02123 065651        LDB MES41     MES41 = ADDR: PRIV. INT. CARD?$$
  02124 017230        JSB REPLY     PRINT MESSAGE, GET REPLY      $$
  02125 060204        LDA P2        SET FOR 2 OCTAL DIGITS INPUT  $$
  02126 017243        JSB DOCON     GET DIGITS                    $$
  02127 026122        JMP DUMY      -ERROR, REPEAT INPUT.         $$
  02130 070504        STA PIOC      SET ADDR. OF DUMMY CARD.      $$
* 
*                                   SET SWAPPING FLAG 
  02131 014313        JSB SPACE     NEW LINE
  02132 060213  FSWAP LDA P9
  02133 067517        LDB MES31     MES31 = ADDR: SWAPPING? 
  02134 017230        JSB REPLY     PRINT MESSAGE, GET REPLY
  02135 060167        LDA N3
  02136 114120        JSB AGETN,I   MOVE 3 CHARS TO TBUF
  02137 114117        JSB AGETA,I   GET NEXT CHAR FROM LBUF 
  02140 050164        CPA ZERO      END OF BUFFER?
  02141 002001        RSS           YES - CONTINUE
  02142 026150        JMP SWPER     INVALID TTY RESPONSE
  02143 061267        LDA TBUF      GET 2 TRANSFERRED CHARS 
  02144 053575        CPA YCHAR     CHARS = YE? 
  02145 026152        JMP SWAPY     YES - SET SWAP = 1
  02146 053576        CPA NCHAR     CHARS = NO? 
  02147 026153        JMP SWAPN     YES - SET SWAP=0
  02150 017256  SWPER JSB INERR     INVALID TTY RESPONSE
  02151 026132        JMP FSWAP     REPEAT INPUT
  02152 002405  SWAPY CLA,INA,RSS   SET A = 1, SKIP 
  02153 002400  SWAPN CLA           SET A = 0 
  02154 070507        STA SWAPF     SET SWAPPING FLAG = 0/1 = NO/YES
* 
*                                   SET LAST WORD AVAIL MEMORY
  02155 014313        JSB SPACE     NEW LINE
  02156 060212  SMLWA LDA P8
  02157 067435        LDB MESS3     MESS3 = ADDR: LWA MEM?
  02160 017230        JSB REPLY     PRINT MESSAGE, GET REPLY
  02161 060207        LDA P5        SET FOR 5 OCTAL DIGITS INPUT
  02162 017243        JSB DOCON     GET DIGITS, RETURN OCTAL
  02163 026156        JMP SMLWA     REPEAT INPUT
  02164 070510        STA LWASM     SET LWA MEM FOR SYSTEM
* 
*                                   SET PROGRAM INPUT UNIT
  02165 014313        JSB SPACE     NEW LINE
  02166 060266  PGMIN LDA P10 
  02167 067443        LDB MESS4     MESS4 = ADDR: PRGM INPT?
  02170 017230        JSB REPLY     PRINT MESSAGE, GET REPLY
  02171 017262        JSB SINIT     GET CODE, ANALYSE 
  02172 026166        JMP PGMIN     REPEAT UNIT ENTRY 
  02173 073600        STA PGMAD     SET PROGRAM INPUT DRIVER ADDR 
* 
*                                   SET LIBRARY INPUT UNIT
  02174 014313        JSB SPACE     NEW LINE
  02175 060266  LIBIN LDA P10 
  02176 067451        LDB MESS5     MESS5 = ADDR: LIBR INPT?
  02177 017230        JSB REPLY     PRINT MESSAGE, GET REPLY
  02200 017262        JSB SINIT     GET CODE, ANALYSE 
  02201 026175        JMP LIBIN     REPEAT ENTRY
  02202 073601        STA LIBAD     SET LIB INPUT DRIVER ADDRESS
* 
*                                   SET PARAMETER INPUT UNIT
  02203 014313        JSB SPACE     NEW LINE
  02204 060266  PARIN LDA P10 
  02205 067457        LDB MESS6     MESS6 = ADDR: PRAM INPT?
  02206 017230        JSB REPLY     PRINT MESSAGE, GET REPLY
  02207 017262        JSB SINIT     GET CODE, ANALYSE 
  02210 026204        JMP PARIN     REPEAT PARAMETER INPUT
  02211 070511        STA PARAD     PARAD = PRAM INPUT DRIVER ADDR
                      SKP 
* 
*                                   CONFIGURE DISK I/O INSTRUCTIONS 
* 
  02212 060171        LDA N5
  02213 067557        LDB HPDSK     GET HIGH PRIORITY ADDRESSES 
  02214 017317        JSB STDSK     SET HIGH PRIORITY CHANNEL NOS.
* 
  02215 037577        ISZ DCHNL     SET DISK CHNL NO. TO L.P. 
* 
  02216 060174        LDA N9
  02217 017317        JSB STDSK     SET LOW PRIORITY DISK ADDRESSES 
* 
  02220 002400        CLA 
  02221 102600  DSK5  OTA 0         SET DISK ADDRESS = 0,0
  02222 102500  DSK6  LIA 0         GET STATUS WORD 
  02223 010206        AND M4        ISOLATE PROTECT BIT 
  02224 002002        SZA           SKIP - TRACK IS PROTECTED 
  02225 026234        JMP *+7 
  02226 014313        JSB SPACE     NEW LINE
  02227 060230        LDA P33 
  02230 067525        LDB MES32     MES32 = ADDR: TURN OFF DISK ETC.
  02231 114102        JSB DRKEY,I   PRINT: TURN OFF DISK PROTECT
  02232 102032        HLT 32B       WAIT FOR OPERATOR 
  02233 026222        JMP DSK6       REPEAT CHECK 
  02234 160154        LDA ASBUF,I   GET ADDRESS OF BOOTSTRAP BUFFER 
  02235 010247        AND M1777     ISOLATE PAGE BITS 
  02236 070001        STA B 
  02237 060510        LDA LWASM     GET LWA SYSTEM MEMORY 
  02240 010244        AND M0760     ISOLATE PAGE NUMBER 
  02241 071267        STA TBUF      SAVE PAGE NO. OF BOOTSTRAP LDR
  02242 030001        IOR B         SET A = NEW BUFFER ADDRESS
  02243 170154        STA ASBUF,I   SET BUFFER ADDR IN BOOTSTRAP
  02244 060502        LDA SDS#      SET # OF SECTORS -1 FOR       $$
  02245 040165        ADA N1         SYSTEM DISC IN               $$
  02246 170155        STA A#SCT,I    BOOTSTRAP LOADER.            $$
  02247 003004        CMA,INA                                     $$
  02250 010242        AND M177      CONSTRUCT AND SET UPDATE TRACK$$
  02251 170156        STA A#MSK,I    # WITH SECTOR 0 VALUE.       $$
  02252 002404        CLA,INA       SET DISK ADDRESS = 0,1
  02253 064153        LDB ABOOT     GET ADDRESS OF BOOTSTRAP
  02254 114126        JSB ADOUT,I   OUTPUT BOOTSTRAP TO 0,1 
* 
  02255 002400        CLA           SET DISK ADDRESS = 0,0
  02256 064452        LDB ADBUF     GET ADDRESS OF DBUF 
  02257 114125        JSB ADIN,I    READ DISK 0,0 
  02260 064452        LDB ADBUF     GET ADDRESS OF DBUF 
  02261 044205        ADB P3        ADJUST FOR 4TH WORD IN 0,0
  02262 160001        LDA B,I       GET WORD 4 OF 0,0 (BASIC ENT PT)
  02263 170151        STA ABASC,I   SET BASIC ENTRY PT. IN NEW LDR
  02264 060153        LDA ABOOT     GET ADDRESS OF BOOTSTRAP LOADER 
  02265 010247        AND M1777     ISOLATE PAGE BITS 
  02266 031267        IOR TBUF      ADD PAGE NO.
  02267 170152        STA ARTEX,I   SET RT LOADER ENTRY PT. IN LDR
  02270 002400        CLA           SET DISK ADDRESS = 0,0
  02271 064150        LDB BLODR     GET ADDRESS OF 0,0 BOOTSTRAP
  02272 114126        JSB ADOUT,I   PUT OUT 0,0 
  02273 060113        LDA AINPT     GET ADDR OF INIT. PROG. CODE
  02274 070112        STA TRANS     SET CURRENT TRANSFER ADDRESS
                      SKP 
* 
*                                   INITIALIZE LOADING
* 
  02275 002400  INPUT CLA 
  02276 070513        STA DERCN     SET DISK ERROR COUNT TO ZERO
  02277 014313        JSB SPACE     NEW LINE
  02300 014313        JSB SPACE     NEW LINE
  02301 026312  IMAGT JMP *+9        IF MAGTAPE NOT DEFINED, SKIP-
  02302 114107        JSB DRMAG,I    OTHERWISE, REWIND
  02303 000003        OCT 3           MT UNIT 
  02304 002404        CLA,INA         AND SPACE 
  02305 006400        CLB             TO FILE 
  02306 114107        JSB DRMAG,I     NUMBER
  02307 000004        OCT 4           TWO.
  02310 102001        HLT 1          ERROR
  02311 102001        HLT 1           HALTS 
  02312 060106        LDA LWAM      GET LAST WORD AVAIL MEMORY
  02313 040174        ADA N9        ADJUST FOR FIRST IDENT LENGTH 
  02314 070467        STA BIDNT     BIDNT = ADDR OF FIRST IDENT 
  02315 070471        STA PIDNT     PIDNT = ADDRESS OF NEXT IDENT 
  02316 060464        LDA BLST      BLST = ADDR OF FIRST LST ENTRY
  02317 070466        STA PLST      PLST = ADDRESS OF END OF LST
  02320 060477        LDA DSKSC     GET DISK ADDRESS OF SCRATCH AREA
  02321 070514        STA DSKAD     SET CURRENT DISK ADDRESS
  02322 064452        LDB ADBUF     GET ADDRESS OF DBUF 
  02323 074642        STB CURAD     INITIALIZE CURRENT DBUF ADDRESS 
  02324 014302        JSB BUFCL     CLEAR DBUF
  02325 060202        LDA N64 
  02326 070643        STA DCNT      INITIALIZE CURRENT DBUF COUNT 
  02327 003400        CCA           SET A = -1
  02330 070515        STA PLFLG     PLFLG = LOADING FLAG = -1 
* 
*                                   TEST FOR PROG, LIB, END OF LOAD 
*                                   SWR = 00 - LOAD NEXT SOURCE PROG
*                                   SWR = 01 - TERMINATE LOADING
*                                   SWR = 10 - LOAD LIBRARY PROGRAM 
* 
  02331 102077  TSTIN HLT 77B       GET SWR, SET INPUT UNIT 
  02332 102501        LIA 1         GET SWR 
  02333 000010        SLA           SKIP IF MORE RECS TO READ 
  02334 027331        JMP LSTEX     PROCESS END OF LOAD CONDITION 
  02335 067600  TSTN4 LDB PGMAD     GET PROG INPUT DRIVER ADDR
  02336 001110        ARS,SLA       SKIP - LOAD PROGRAM TAPE
  02337 067601        LDB LIBAD     GET LIBR INPUT DRIVER ADDR
  02340 077602        STB PINAD     SET INPUT UNIT DRIVER ADDR
  02341 003400        CCA 
  02342 073603        STA ETFLG     SET EOT FLAG = IGNORE 10 FF 
*                                   READ BINARY RECORD
  02343 064451  LDRIN LDB ALBUF     ALBUF = ADDR OF LBUF
  02344 014302        JSB BUFCL     CLEAR LBUF
  02345 060107        LDA DRMAG 
  02346 053602        CPA PINAD 
  02347 002001        RSS 
  02350 026360        JMP PTDV. 
  02351 060202        LDA N64 
  02352 064451        LDB ALBUF 
  02353 117602        JSB PINAD,I 
  02354 000000        OCT 000000
  02355 026370        JMP MTEOT 
  02356 026426        JMP PAR.E 
  02357 026374        JMP TESTR 
  02360 060202  PTDV. LDA N64 
  02361 064451        LDB ALBUF     ALBUF = ADDRESS OF LBUF 
  02362 117602        JSB PINAD,I   GET BINARY RECORD FROM INPT UNIT
  02363 002002        SZA           TEST FOR FEED FRAMES INPUT
  02364 026374        JMP TESTR     NO - PROCESS RECORD 
  02365 063603        LDA ETFLG     GET EOT FLAG
  02366 002002        SZA           SKIP IF MAX 10 FF PERMITTED 
  02367 026343        JMP LDRIN     IGNORE 10 FEED FRAMES 
  02370 060206  MTEOT LDA P4
  02371 067465        LDB MESS7     MESS7 = ADDR: *EOT
  02372 114102        JSB DRKEY,I   PRINT: *EOT 
  02373 026331        JMP TSTIN     TEST SWR, SET INPUT UNUT
* 
*                                   PROCESS INPUT RECORD
  02374 002400  TESTR CLA 
  02375 073603        STA ETFLG     SET EOT FLAG = MAX 10 FF
  02376 060543        LDA LBUF+1    GET RECORD IDENTIFIER 
  02377 001723        ALF,RAR       ROTATE RIC TO LOW A 
  02400 010211        AND M7        ISOLATE RIC 
  02401 073605        STA RIC       RIC = RECORD IDENT CODE 
  02402 002002        SZA           SKIP IF ABSOLUTE RECORD 
  02403 040172        ADA L6        ADD -6B 
  02404 002021        SSA,RSS       TEST FOR RIC = (1,5)
  02405 026443        JMP RCERR     INVALID RECORD TYPE 
* 
*                                   TEST CHECK SUM
  02406 064542        LDB LBUF      GET RECORD LENGTH 
  02407 005727        BLF,BLF       ROTATE TO LOW B 
  02410 007004        CMB,INB       SET TO NEG
  02411 044205        ADB P3        ADD 3 FOR WORD COUNT IN CHECKSUM
  02412 006021        SSB,RSS       TEST FOR SHORT (1,3) RECORD 
  02413 026443        JMP RCERR     SHORT (1-3) WORD RECORD 
  02414 074463        STB WDCNT     SET RECORD WORD COUNT 
  02415 060543        LDA LBUF+1    GET WORD 2 - INITIALIZE CHECKSUM
  02416 064451        LDB ALBUF     ALBUF = A(LBUF) 
  02417 044205        ADB P3        SET ADDR FOR WORD 4 OF LRUF 
  02420 140001        ADA B,I       ADD WORD TO CHECKSUM
  02421 006004        INB           INCR ADDR 
  02422 034463        ISZ WDCNT     SKIP IF END OF RECORD 
  02423 026420        JMP *-3       CONTINUE CHECKSUM TEST
  02424 050544        CPA LBUF+2    TEST WITH GIVEN CHECKSUM
  02425 026447        JMP LDRC      PROCESS VALID RECORD
* 
*                                   INVALID CHECKSUM
  02426 063401  PAR.E LDA ERR02 
  02427 014317        JSB ERROR     PRINT ERROR MESSAGE 
  02430 102002        HLT 02B       WAIT FOR OPERATOR INTERVEBTION
  02431 060107        LDA DRMAG     IF ERROR ON 
  02432 053602        CPA PINAD     MASS STORAGE
  02433 002401        CLA,RSS       THEN SKIP 
  02434 026343        JMP LDRIN     ELSE REREAD THE RECORD
  02435 007400        CCB           MASS STORAGE  SO
  02436 114107        JSB DRMAG,I   BACKSPACE 
  02437 000004        OCT 4         ONE 
  02440 102001        HLT 1         RECORD
  02441 102001        HLT 1         AND 
  02442 026343        JMP LDRIN     REREAD RECORD 
* 
  02443 063403  RCERR LDA ERR04 
  02444 014317        JSB ERROR     PRINT ERROR MESSAGE 
  02445 102004        HLT 04B       WAIT FOR OPERATOR INTERVENTION
  02446 026343        JMP LDRIN     REREAD RECORD 
* 
*                                   CLASSIFY RECORDS BY TYPE
  02447 063605  LDRC  LDA RIC       GET REC IDENT CODE
  02450 064515        LDB PLFLG     PLFLG = PROGRAM LOADING FLAG
  02451 050267        CPA P1        RIC = 1? (NAM)
  02452 026600        JMP NAMR      PROCESS NAM REC 
  02453 006002        SZB           SKIP IF NOT LOADING 
  02454 026574        JMP NMERR     RECORD OUT OF SEQUENCE
  02455 050204        CPA P2        RIC = 2? (ENT)
  02456 026770        JMP ENTR      PROCESS ENT REC 
  02457 050205        CPA P3        RIC = 3? (DBL)
  02460 026747        JMP DBLR      PROCESS DBL REC 
  02461 050206        CPA P4        RIC = 4? (EXT)
  02462 026771        JMP EXTR      PROCESS EXT REC 
                      SKP 
* 
*                                   PROCESS END RECORD
  02463 002404        CLA,INA       SET MASK = 1
  02464 010543        AND LBUF+1    ISOLATE M/S 
  02465 001300        RAR           MOVE M/S TO SIGN POSITION 
  02466 130524        IOR ID6,I     ADD TO PRIORITY,TYPE
  02467 170524        STA ID6,I     SET M/S, PRIORITY, TYPE 
  02470 061312        LDA DSKID     GET NEXT DBL ADDRESS
  02471 064451        LDB ALBUF     GET ADDRESS OF LBUF 
  02472 114126        JSB ADOUT,I   OUTPUT END RECORD 
  02473 063614        LDA TADBL     GET NEXT DBLST ADDRESS
  02474 073615        STA PADBL     SAVE END OF DBLST 
  02475 002400        CLA           GET MIN RELOCATION ADDR 
  02476 070473        STA TCHAR     SET CURRENT (MIN) VALUE 
  02477 060261  SORT1 LDA M7777     GET MAX RELOCATION ADDR 
  02500 070472        STA MAXC      SAVE MAX VALUE
  02501 063612        LDA AXXB      GET ADDR OF DBL LIST. 
  02502 073614        STA TADBL     SET CURRENT DBLST ADDRESS 
  02503 063614  SORT2 LDA TADBL     GET ADDRESS OF NEXT ENTRY 
  02504 037614        ISZ TADBL     INCR ADDR FOR NEXT ENTRY
  02505 053615        CPA PADBL     END OF LIST?
  02506 026544        JMP SORT5     YES - TEST FOR END OF SORT
  02507 164000        LDB A,I       GET CURRENT VALUE 
  02510 007004        CMB,INB 
  02511 044473        ADB TCHAR     ADD MIN VALUE 
  02512 006003        SZB,RSS       SKIP - NOT CURRENT VALUE
  02513 026525        JMP SORT3     OUTPUT CURRENT RECORD 
  02514 006021        SSB,RSS       SKIP - GREATER, EQUAL TO MIN
  02515 026503        JMP SORT2     IGNORE LESS THAN MIN
  02516 164000        LDB A,I       GET CURRENT VALUE 
  02517 060001        LDA B         SAVE VALUE IN A 
  02520 007004        CMB,INB 
  02521 044472        ADB MAXC      ADD MAX VALUE 
  02522 007026        CMB,SSB,INB,SZB  SKIP - NO NEW MAX
  02523 070472        STA MAXC      SET NEW MAX 
  02524 026503        JMP SORT2     GET NEXT VALUE
* 
  02525 003000  SORT3 CMA           COMPLEMENT CURRENT DBLST ADDRESS
  02526 043612        ADA AXXB      ADD ADDR OF DBL LIST
  02527 070463        STA WDCNT     SET DBL LIST DISPLACEMENT 
  02530 060204        LDA P2        SET DISK ADDRESS = 0,2
  02531 114124        JSB INDAD,I   INCR DBL DISK ADDRESS 
  02532 034463        ISZ WDCNT     SKIP - END OF SEARCH FOR DBL REC
  02533 026531        JMP *-2       INCR DISK ADDRESS 
  02534 064451        LDB ALBUF     GET ADDRESS OF LBUF 
  02535 114125        JSB ADIN,I    GET RECORD FROM DISK
  02536 017153        JSB DWRIT     PACK,PUT OUT TO DISK
  02537 060543        LDA LBUF+1    COMPUTE 
  02540 010240        AND M77        LENGTH OF
  02541 040545        ADA LBUF+3     PROGRAM
  02542 071057        STA LWH2
  02543 026503        JMP SORT2     GET NEXT VALUE
* 
  02544 060472  SORT5 LDA MAXC      GET PREVIOUS MAX
  02545 070473        STA TCHAR     SET NEW MIN 
  02546 050261        CPA M7777     END OF SORT?(NO NEW MAX SET)
  02547 002001        RSS 
  02550 026477        JMP SORT1     NO - PROCESS NEXT VALUE 
* 
  02551 003400        CCA 
  02552 070515        STA PLFLG     SET PROG LOAD FLAG = LOADING
  02553 073604        STA CNFLG     SET FLAG FOR LB, UT END COUNT 
  02554 061312        LDA DSKID     GET ADDRESS OF END RECORD 
  02555 064451        LDB ALBUF     GET ADDR OF LBUF
  02556 114125        JSB ADIN,I    GET END RECORD
  02557 017153        JSB DWRIT     PACK, PUT OUT TO DISK 
  02560 061056        LDA LWH1      COMPILED? 
  02561 002003        SZA,RSS        YES - SKIP 
  02562 026343        JMP LDRIN      NO - GET NEXT ONE
* 
  02563 064451        LDB ALBUF     INPUT NAM RECORD
  02564 114125        JSB ADIN,I
  02565 061057        LDA LWH2      STORE LENGTH
  02566 030300        IOR MSIGN      INTO IT
  02567 070550        STA LBUF+6
  02570 061056        LDA LWH1      OUTPUT NAM
  02571 064451        LDB ALBUF      RECORD AGAIN 
  02572 114126        JSB ADOUT,I 
  02573 026343        JMP LDRIN     NOW GO
* 
  02574 063402  NMERR LDA ERR03 
  02575 014317        JSB ERROR     PRINT ERROR MESSAGE 
  02576 102003        HLT 03B       WAIT FOR OPERATOR INTERVENTION
  02577 026343        JMP LDRIN     REREAD RECORD 
                      SKP 
* 
*                                   NAM RECORD PROCESSOR
  00545         NAM12 EQU LBUF+3
  00546         NAM34 EQU LBUF+4
  00547         NAM5  EQU LBUF+5
  00550         NPROG EQU LBUF+6
  00551         NBP   EQU LBUF+7
  00552         NCOM  EQU LBUF+8
  00553         NTYP  EQU LBUF+9
  00554         NPRIO EQU LBUF+10 
  00555         NINT1 EQU LBUF+11 
  00556         NINT2 EQU LBUF+12 
  00557         NINT3 EQU LBUF+13 
  00560         NINT4 EQU LBUF+14 
  00561         NINT5 EQU LBUF+15 
  00562         NINT6 EQU LBUF+16 
* 
  02600 006003  NAMR  SZB,RSS       SKIP IF LOADING 
  02601 026574        JMP NMERR     RECORD OUT OF SEQUENCE
  02602 060542        LDA LBUF      GET RECORD LENGTH 
  02603 001727        ALF,ALF       ROTATE TO LOW A 
  02604 050221        CPA P17       TEST FOR NAM REC = 17 WORDS 
  02605 026614        JMP TSTYP     TEST NAM REC FOR RT-GENERATED 
  02606 050213        CPA P9        TEST FOR NAM REC = 9 WORDS
  02607 002001        RSS           YES - CONTINUE
  02610 026443        JMP RCERR     NO - INVALID RECORD TYPE
  02611 060221        LDA P17       GET NEW NAM REC LENGTH CODE 
  02612 001727        ALF,ALF       ROTATE TO HIGH A
  02613 070542        STA LBUF      SET NAM REC LENGTH IN WORD 1
  02614 060553  TSTYP LDA NTYP      GET CURRENT PROGRAM TYPE
  02615 002002        SZA           SKIP - CURRENT TYPE = SYSTEM
  02616 026632        JMP NAMOK     DO NOT RESET NAM RECORD TYPE
  02617 060107        LDA DRMAG     IF INPUT FROM 
  02620 053602        CPA PINAD     MASS STORAGE
  02621 002401        CLA,RSS       IGNOR THE SR
  02622 102501        LIA 1         GET SWR FOrPROGRAM TYPE 
  02623 001323        RAR,RAR 
  02624 001300        RAR           ROTATE TO LOW A 
  02625 010217        AND P15        ISOLATE BITS 0-3 
  02626 070553        STA NTYP      SET PROGRAM TYPE IN NAM REC 
  02627 002002        SZA           IF SYSTEM SET PRIORITY TO ZERO
  02630 060233        LDA P99 
  02631 070554        STA NPRIO     SET PRIORITY
  02632 064205  NAMOK LDB P3        SET DBL DISK ADDR = 0,3 
  02633 075312        STB DSKID     SET CURRENT DBL DISK ADDRESS
  02634 006400        CLB 
  02635 074516        STB DSCNT     CLEAR DISK SEGMENT COUNT
  02636 077604        STB CNFLG     CLEAR DISK SEGMENT COUNT FLAG 
  02637 074515        STB PLFLG     SET PLFLG = NOT LOADING 
  02640 063612        LDA AXXB      GET ADDR OF DBL LIST. 
  02641 073614        STA TADBL     SET CURRENT DBLST ADDRESS 
  02642 014345        JSB INIDX     INITIALIZE IDENT ADDRESSES
  02643 014351  NEXTN JSB IDX       SET IDENT ADDRESSES 
  02644 026670        JMP ENTNA     YES - ENTER NAME
  02645 060545        LDA NAM12     GET NAME 1,2
  02646 150517        CPA ID1,I     EQUAL?
  02647 002001        RSS           YES - CONTINUE
  02650 026643        JMP NEXTN     NO - TRY NEXT IDENT 
  02651 060546        LDA NAM34     GET NAME 3, 4 
  02652 150520        CPA ID2,I     EQUAL?
  02653 002001        RSS           YES - CONTINUE
  02654 026643        JMP NEXTN     NO - TRY NEXT IDENT 
  02655 060547        LDA NAM5      GET NAME 5
  02656 010255        AND M7400     ISOLATE UPPER CHAR
  02657 150521        CPA ID3,I     EQUAL 
  02660 002001        RSS           YES - CONTINUE
  02661 026643        JMP NEXTN     NO - TRY NEXT IDENT 
* 
  02662 063406        LDA ERR08     GET ERROR CODE - DUPLICATE NAMES
  02663 014317        JSB ERROR     PRINT DIAGNOSTIC
  02664 060207        LDA P5
  02665 064517        LDB ID1       GET ADDRESS OF NAME IN IDENT
  02666 114102        JSB DRKEY,I   PRINT DUPLICATE PROG. NAME
  02667 026701        JMP REPNA     REPLACE REST OF IDENT 
* 
  02670 060545  ENTNA LDA NAM12     GET NAME 1,2
  02671 170517        STA ID1,I     SET NAME 1,2 IN IDENT 
  02672 060546        LDA NAM34     GET NAME 3,4
  02673 170520        STA ID2,I     SET NAME 3,4 IN IDENT 
  02674 060547        LDA NAM5      GET NAME 5
  02675 010255        AND M7400     SAVE UPPER CHAR 
  02676 170521        STA ID3,I     SET NAME 5 IN IDENT 
  02677 060470        LDA TIDNT     GET ADDRESS OF NEXT IDENT 
  02700 070471        STA PIDNT     SAVE NEXT IDENT ADDRESS 
* 
  02701 060553  REPNA LDA NTYP      GET PROGRAM TYPE
  02702 010242        AND M177      ISOLATE TYPE
  02703 170524        STA ID6,I     SET TYPE IN IDENT 
  02704 064552        LDB NCOM      GET COMMON LENGTH 
  02705 174522        STB ID4,I     SAVE COMMON LENGTH
  02706 064551        LDB NBP       GET BP LENGTH 
  02707 006003        SZB,RSS       SKIP IF BP LENGTH NON-ZERO
  02710 026713        JMP STPR      SET PRIORITY
  02711 063405        LDA ERR06     GET ERROR CODE
  02712 014317        JSB ERROR     PRINT DIAGNOSTIC
* 
  02713 060554  STPR  LDA NPRIO     GET PRIORITY
  02714 010242        AND M177      ISOLATE PRIORITY
  02715 001727        ALF,ALF       ROTATE TO UPPER A 
  02716 130524        IOR ID6,I     ADD PRIORITY TO TYPE
  02717 170524        STA ID6,I     SET PRIORITY, TYPE IN IDENT 
  02720 060514        LDA DSKAD     DSKAD = CURRENT DISK ADDR 
  02721 170523        STA ID5,I     SET CURRENT DISK ADDR IN IDENT
  02722 064550        LDB NPROG     COMPILED? 
  02723 006021        SSB,RSS        IF YES, SKIP & SET SWITCH
  02724 002400        CLA            OTHERWISE, CLEAR SWITCH
  02725 071056        STA LWH1
  02726 060555        LDA NINT1     GET RESOLUTION CODE 
  02727 001727        ALF,ALF       ROTATE TO UPPER A 
  02730 001722        ALF,RAL       ROTATE TO UPPER 3 BITS
  02731 030556        IOR NINT2     ADD EXECUTION INTERVAL
  02732 170525        STA ID7,I     SET RESOLUTION CODE, EXEC MULT
  02733 060557        LDA NINT3     GET HOURS 
  02734 001727        ALF,ALF       ROTATE TO UPPER A 
  02735 030560        IOR NINT4     ADD MINUTES 
  02736 170526        STA ID8,I     SET HOURS, MINUTES
  02737 060561        LDA NINT5     GET SECONDS 
  02740 001727        ALF,ALF       ROTATE TO UPPER A 
  02741 030562        IOR NINT6     ADD 10'S MILLISECONDS 
  02742 170527        STA ID9,I     SET SECONDS, 10'S MILLISECONDS
  02743 002400        CLA 
  02744 170530        STA ID10,I    CLEAR BS IDENT MAIN ADDRESS 
  02745 017153        JSB DWRIT     PACK RECORD, OUTPUT TO DISK 
  02746 026343        JMP LDRIN     GET NEXT RECORD 
                      SKP 
* 
*                                   DBL REC PROCESSOR 
  02747 060545  DBLR  LDA LBUF+3    GET RELOCATION ADDRESS
  02750 173614        STA TADBL,I   SAVE ADDR IN DBLST
  02751 037614        ISZ TADBL     INCR DBLST ADDR FOR NEXT ENTRY
  02752 063614        LDA TADBL     GET NEXT DBLST ADDRESS
  02753 003004        CMA,INA 
  02754 043613        ADA ANDBL     ADD ADDRESS OF END OF DBL LIST
  02755 002021        SSA,RSS       SKIP - DBL OVERFLOW 
  02756 026761        JMP *+3       NO DBL OVERFLOW 
  02757 063410        LDA ERR20     GET ERROR CODE - DBL OVERFLOW 
  02760 014317        JSB ERROR     PRINT DIAGNOSTIC
  02761 061312        LDA DSKID     GET DBL DISK ADDRESS
  02762 064451        LDB ALBUF     GET ADDRESS OF LBUF 
  02763 114126        JSB ADOUT,I   OUTPUT DBL RECORD 
  02764 061312        LDA DSKID     GET DISK ADDRESS
  02765 114124        JSB INDAD,I   INCR ADDRESS
  02766 071312        STA DSKID     SET NEW DISK ADDRESS
  02767 026343        JMP LDRIN     GET NEXT RECORD 
                      SKP 
* 
*                                   ENT/EXT RECORD PROCESSOR
  02770 003401  ENTR  CCA,RSS       ENT PROCESSOR 
  02771 002400  EXTR  CLA           EXT PROCESSOR 
  02772 070536        STA NXFLG     NXFLG = ENT/EXT FLAG
  02773 060543        LDA LBUF+1    SET NO. SYMBOLS 
  02774 010236        AND M37       ISOLATE NO. SYMBOLS 
  02775 003004        CMA,INA 
  02776 070537        STA EXCNT     SET SYMBOL COUNT
  02777 060451        LDA ALBUF     ALBUF = A(LBUF) 
  03000 040205        ADA P3        P3 = +3 
  03001 073606  SETNX STA SYM12     SET STARTING SYMBOL ADDR
  03002 002004        INA 
  03003 073607        STA SYM34     SET CHARS 3,4 ADDR
  03004 002004        INA 
  03005 073610        STA SYM5      SET CHAR 5 ADDR 
  03006 014412        JSB INLST     INITIALIZE LST ADDRESSES
  03007 014416  ENTX1 JSB LSTX      SET LST1 - LST5 
  03010 027056        JMP ENTX3     END OF LST
  03011 163606        LDA SYM12,I   GET CHARS 1,2 
  03012 150531        CPA LST1,I    EQUAL?
  03013 002001        RSS           YES - CONTINUE
  03014 027007        JMP ENTX1     TRY NEXT ENTRY
  03015 163607        LDA SYM34,I   GET CHARS 3,4 
  03016 150532        CPA LST2,I    EQUAL?
  03017 002001        RSS           YES - CONTINUE
  03020 027007        JMP ENTX1     TRY NEXT ENTRY
  03021 163610        LDA SYM5,I    GET CHAR 5
  03022 010255        AND M7400     ISOLATE UPPER CHAR
  03023 150533        CPA LST3,I    EQUAL?
  03024 002001        RSS           YES - CONTINUE
  03025 027007        JMP ENTX1     TRY NEXT ENTRY
* 
  03026 060536        LDA NXFLG     GET ENT/EXT FLAG
  03027 002003        SZA,RSS       SKIP IF ENT 
  03030 027104        JMP ENTX4     COMPLETE EXT PROCESSING 
* 
*                                   PROCESS ENT REC 
  03031 160534        LDA LST4,I    GET WORD 4 OF LST ENTRY 
  03032 002003        SZA,RSS       SKIP IF NON-ZERO (DEFINED)
  03033 027053        JMP ENTX2     MAKE ENTRY FOR UNDEFINED EXT
  03034 002020        SSA           SKIP IF ENTRY MADE
  03035 027044        JMP ENTX6     MAKE ENTRY FOR BS EXT 
  03036 063404        LDA ERR05     SET CODE - DUPLICATE ENTRY POINT
  03037 014317        JSB ERROR     PRINT ERROR MESSAGE 
  03040 060207        LDA P5
  03041 064531        LDB LST1      LST1 = ADDR OF SYMBOL 
  03042 114102        JSB DRKEY,I   PRINT DUPLICATE ENTRY SYMBOL
  03043 027053        JMP ENTX2     IGNORE DUPLICATE ENT'S
  03044 160524  ENTX6 LDA ID6,I     GET CURRENT TYPE
  03045 010242        AND M177      ISOLATE TYPE
  03046 050205        CPA P3        TYPE = BG DISK RESIDENT?
  03047 002001        RSS           YES - CONTINUE (ERROR)
  03050 027053        JMP ENTX2     MAKE ENTRY FOR UNDEFINED EXT
  03051 063407        LDA ERR13     SET CODE = INVALID BG BS ORDER
  03052 014325        JSB IRERR     IRRECOVERABLE ERROR 
  03053 060517  ENTX2 LDA ID1       GET MAIN IDENT ADDRESS
  03054 170534        STA LST4,I    ENTER IDENT ADDR IN WORD 4
  03055 027142        JMP ENTX5 
  03056 163606  ENTX3 LDA SYM12,I   GET CHARS 1,2 
  03057 170531        STA LST1,I    SET CHARS 1,2 IN LST
  03060 163607        LDA SYM34,I   GET CHARS 3,4 
  03061 170532        STA LST2,I    SET CHARS 3,4 IN LST
  03062 163610        LDA SYM5,I    GET CHAR 5
  03063 010255        AND M7400     ISOLATE UPPER CHAR
  03064 170533        STA LST3,I    SET CHAR 5 IN LST 
  03065 060535        LDA LST5      GET WORD 5 ADDR 
  03066 002004        INA 
  03067 070466        STA PLST      PLST = NEXT LST ENTRY ADDRESS 
  03070 006400        CLB 
  03071 174535        STB LST5,I    CLEAR WORD 5 IN LST ENTRY (BOTH)
  03072 060536        LDA NXFLG     GET EXT/ENT FLAG
  03073 002002        SZA           SKIP IF EXT ENTRY 
  03074 027053        JMP ENTX2     SET WORD 4 OF ENT ENTRY 
  03075 160524        LDA ID6,I     GET TYPE
  03076 010242        AND M177      ISOLATE TYPE
  03077 064517        LDB ID1       GET MAIN IDENT ADDRESS
  03100 050207        CPA P5        TYPE = BS?
  03101 007001        CMB,RSS       YES - SET LST4 = BS REF, SKIP 
  03102 006400        CLB           NO - SET LST4 = UNDEFINED 
  03103 174534        STB LST4,I    YES - SET ADDRESS IN LST WORD 4 
  03104 160524  ENTX4 LDA ID6,I     GET TYPE
  03105 010242        AND M177      ISOLATE TYPE
  03106 050207        CPA P5        TYPE = BG SEGMENT?
  03107 002001        RSS           YES - CONTINUE
  03110 027142        JMP ENTX5     NO - IGNORE BG SEG MAIN ADDR
  03111 060517        LDA ID1       GET CURRENT IDENT ADDRESS 
  03112 071330        STA IMAIN     SAVE IDENT ADDRESS
  03113 160534        LDA LST4,I    GET IDENT ADDRESS 
  03114 002002        SZA           SKIP IF UNDEFINED 
  03115 002020        SSA           SKIP IF IDENT ADDRESS 
  03116 027142        JMP ENTX5     IGNORE UNDEFINED EXT
  03117 070470        STA TIDNT     SET IDENT ADDRESS FOR IDX 
  03120 014351        JSB IDX       SET IDENT ADDRESSES 
  03121 102000        HLT 0         IDENT NOT FOUND 
  03122 160524        LDA ID6,I     GET TYPE
  03123 002021        SSA,RSS       SKIP IF MAIN
  03124 027130        JMP NTMAN     SET FLAG FOR IGNORING BS REF
  03125 010242        AND M177      ISOLATE TYPE
  03126 050205        CPA P3        TYPE = BG DISK RESIDENT?
  03127 007401        CCB,RSS       SET FLAG FOR BS REF, SKIP 
  03130 006400  NTMAN CLB           SET FLAG FOR IGNORING BS REF
  03131 074473        STB TCHAR     SET FLAG = 0/-1 = IGNORE/BS REF 
  03132 061330        LDA IMAIN     GET CURRENT IDENT ADDRESS 
  03133 070470        STA TIDNT     SET FOR NEXT IDENT ADDRESSES
  03134 014351        JSB IDX       SET CURRENT IDENT ADDRESSES 
  03135 102000        HLT 0         ADDRESS INVALID 
  03136 034473        ISZ TCHAR     SKIP - SET IDENT ADDR FOR BS REF
  03137 027142        JMP ENTX5     IGNORE IF NOT MAIN BG DISK RES
  03140 160534        LDA LST4,I    GET BG MAIN ADDRESS 
  03141 170530        STA ID10,I    SET MAIN IDENT ADDR IN BS IDENT 
  03142 063606  ENTX5 LDA SYM12     GET SYMBOL ADDR 
  03143 040205        ADA P3        ADJUST FOR BOTH ENT & EXT 
  03144 064536        LDB NXFLG     GET EXT/ENT FLAG
  03145 006002        SZB           SKIP IF EXT ENTRY 
  03146 002004        INA           ADJUST FOR ENT REC (4-WORD ENT) 
  03147 034537        ISZ EXCNT     TEST SYMBOL COUNTER 
  03150 027001        JMP SETNX     PROCESS NEXT SYMBOL 
  03151 017153        JSB DWRIT     PACK RECORD, OUTPUT TO DISK 
  03152 026343        JMP LDRIN     GET NEXT RECORD 
                      SKP 
* 
*                                   WRITE RELOC REC ON DISK 
* 
*  DWRIT PACKS THE CURRENT CONTENTS OF LBUF INTO DBUF AND DUMPS 
*  DBUF WHEN IT CONTAINS 64 WORDS OF RELOCATABLE INPUT. 
*  IF THE END RECORD IS BEING PROCESSED, DWRIT TESTS FOR
*  PROCESSING LIBRARY PROGRAMS AND SETS THE NO. OF PACKED 
*  RELOCATABLE LIBRARY RECORDS IN WORD 10 OF IDENT FOR
*  USE IN MOVING THE RELOCATABLE LIBRARY TO THE PROTECTED 
*  AREA OF THE DISK AFTER THE LOADING PHASE IS COMPLETE.
* 
*  CALLING SEQUENCE:
*    A = IGNORED
*    B = IGNORED
*    JSB DWRIT
* 
*  RETURN: CONTENTS OF A AND B DESTROYED
* 
  03153 000000  DWRIT NOP 
  03154 064451        LDB ALBUF     GET ADDRESS OF LBUF 
  03155 074540        STB CURAL     SAVE CURRENT LBUF ADDRESS 
  03156 060542        LDA LBUF      GET RECORD LENGTH 
  03157 001727        ALF,ALF       ROTATE TO LOW A 
  03160 003004        CMA,INA 
  03161 070541        STA LCNT      SAVE RECORD LENGTH COUNT
  03162 160540  LTOD  LDA CURAL,I   GET WORD FROM LBUF
  03163 170642        STA CURAD,I   SET WORD INTO DBUF
  03164 034643        ISZ DCNT      SKIP IF DBUF FULL 
  03165 027170        JMP GETL      TEST FOR END OF LBUF
  03166 017212        JSB DDOUT     OUTPUT DBUF TO DISK 
  03167 002001        RSS           OMIT CURRENT DBUF ADDR INCREMENT
  03170 034642  GETL  ISZ CURAD     INCR CURRENT DBUF ADDRESS 
  03171 034540        ISZ CURAL     INCR CURRENT LBUF ADDRESS 
  03172 034541        ISZ LCNT      SKIP IF LBUF MOVED TO DBUF
  03173 027162        JMP LTOD      MOVE NEXT WORD TO DBUF
  03174 063604        LDA CNFLG     GET END FLAG
  03175 002003        SZA,RSS       SKIP IF END RECORD READ 
  03176 127153        JMP DWRIT,I   RETURN
* 
  03177 060643        LDA DCNT
  03200 050202        CPA N64       BUFFER EMPTY? 
  03201 002001        RSS 
  03202 017212        JSB DDOUT     OUTPUT TO DISK
* 
  03203 160524        LDA ID6,I     GET TYPE
  03204 010242        AND M177      ISOLATE TYPE
  03205 050207        CPA P5        TYPE = BG SEGMENT?
  03206 127153        JMP DWRIT,I   RETURN
  03207 060516        LDA DSCNT     GET TOTAL LIBR DISK SECTR COUNT 
  03210 170530        STA ID10,I    SET TOTAL SECTOR COUNT IN IDENT 
  03211 127153        JMP DWRIT,I   RETURN
                      SKP 
* 
*                                   OUTPUT DBUF TO DISK 
* 
*  THE DDOUT SUBROUTINE WRITES THE CONTENTS OF DBUF IN THE
*  CURRENT DISK SECTOR.  FOLLOWING THIS DBUF IS CLEARED,
*  THE CURRENT ADDRESS AND COUNT FOR DBUF ARE SET,
*  AND THE NEXT DISK ADDRESS IS SET INTO DSKAD. 
* 
*  CALLING SEQUENCE:
*    A = IGNORED
*    B = IGNORED
*    JSB DDOUT
* 
*   RETURN: CONTENTS OF A AND B ARE DESTROYED 
* 
  03212 000000  DDOUT NOP 
  03213 060514        LDA DSKAD     GET CURRENT DISK ADDRESS
  03214 064452        LDB ADBUF     GET BUFFER ADDRESS
  03215 114126        JSB ADOUT,I   OUTPUT RECORD TO DISK 
  03216 064452        LDB ADBUF     GET ADDRESS OF DBUF 
  03217 074642        STB CURAD     INITIALIZE DBUF CURRENT ADDRESS 
  03220 014302        JSB BUFCL     CLEAR DBUF
  03221 060202        LDA N64 
  03222 070643        STA DCNT      INITIALIZE CURRENT DBUF COUNT 
  03223 034516        ISZ DSCNT     COUNT RECORD
  03224 060514        LDA DSKAD     GET CURRENT DISK ADDRESS
  03225 114124        JSB INDAD,I   INCR CURRENT DISK ADDRESS 
  03226 070514        STA DSKAD     SET NEW DISK ADDRESS
  03227 127212        JMP DDOUT,I   RETURN
                      SKP 
* 
*                                   PRINT MESSAGE, GET REPLY
* 
*  THE SUBROUTINE REPLY CONTROLS THE PRINTING OF THE
*  MESSAGE, CLEARING OF THE INPUT BUFFER, TESTING FOR CHARACTERS
*  TRANSMITTED, AND INITIALIZATION OF THE BUFFER SCAN FOR 
*  ALL INITIALIZATION MESSAGES. 
* 
*  CALLING SEQUENCE:
*    A = NO CHARACTERS (POS.) IN MESSAGE
*    B = ADDRESS OF MESSAGE 
*    JSB REPLY
* 
*  RETURN: CONTENTS OF A AND B ARE DESTROYED. 
* 
  03230 000000  REPLY NOP 
  03231 114102        JSB DRKEY,I   PRINT MESSAGE 
  03232 064451        LDB ALBUF     GET ADDRESS OF LBUF 
  03233 014302        JSB BUFCL     CLEAR LBUF
  03234 060232        LDA P64 
  03235 064451        LDB ALBUF     SET BUFFER ADDRESS FOR INPUT
  03236 114104        JSB DRTTY,I   GET REPLY FROM TTY
  03237 002003        SZA,RSS       SKIP IF CHARACTERS TRANSMITTED
  03240 027234        JMP *-4       REPEAT INPUT
  03241 114122        JSB AGINI,I   INITIALIZE LBUF SCAN
  03242 127230        JMP REPLY,I   RETURN
                      SKP 
* 
*                                   NUMERICAL INPUT CONTROL 
* 
*  THE DOCON SUBROUTINE ANALYZES THE INPUT FOR THE
*  CHANNEL NO., DISK SIZES, TBG CHANNEL NO. AND LAST
*  WORD OF AVAILABLE MEMORY.
* 
*  CALLING SEQUENCE:
*    A = MAX NO. OF CHARACTERS PERMITTED IN RESPONSE. 
*        THE SIGN OF A DETERMINES THE CONVERSION FROM 
*        ASCII TO OCTAL (POS.) OR DECIMAL (NEG.). 
*    B = IGNORED
*    JSB DOCON
* 
*  RETURN:
*    (N+1): CONTENTS OF A AND B ARE DESTROYED.  AN INVALID
*           CHARACTER HAS BEEN DETECTED IN THE RESPONSE, OR 
*           THE RESPONSE CONTAINS AN INVALID NO. CHARACTERS.
*           THE MESSAGE IS TO BE REPEATED ON RETURN.
*    (N+2): A = CONVERTED RESULT
* 
  03243 000000  DOCON NOP 
  03244 114121        JSB AGETO,I   GET OCTAL/DECIMAL, RETURN OCTAL 
  03245 027251        JMP *+4       INVALID DIGIT 
  03246 114117        JSB AGETA,I   GET NEXT CHAR FROM LBUF 
  03247 050164        CPA ZERO      CHAR = ZERO? (END OF BUFFER)
  03250 027253        JMP *+3       YES - CONTINUE
  03251 017256        JSB INERR     INVALID DIGIT ENTRY 
  03252 127243        JMP DOCON,I   RETURN
  03253 037243        ISZ DOCON     INCR RETURN ADDRESS 
  03254 060474        LDA OCTNO     GET CONVERTED NUMBER
  03255 127243        JMP DOCON,I   RETURN
                      SKP 
* 
*                                   INVALID TTY RESPONSE
* 
*  THE INERR SUBROUTINE PRINTS THE DIAGNOSTIC FOR INVALID 
*  RESPONSES DURING THE INITIALIZATION SECTION. 
* 
*  CALLING SEQUENCE:
*    A = IGNORED
*    B = IGNORED
*    JSB INERR
* 
*  RETURN: CONTENTS OF A AND B ARE DESTROYED. 
* 
  03256 000000  INERR NOP 
  03257 063400        LDA ERR01     SET INVALID DEVICE ERROR CODE 
  03260 014317        JSB ERROR     PRINT ERROR MESSAGE 
  03261 127256        JMP INERR,I   RETURN
                      SKP 
* 
*                                   ALPHABETIC INPUT CONTROL
* 
*  THE SINIT SUBROUTINE ANALYZES THE RESPONSE FOR THE PROGRAM,
*  LIBRARY, AND PARAMETER INPUT.
* 
*  CALLING SEQUENCE:
*    A = IGNORED
*    B = IGNORED
*    JSB SINIT
* 
*  RETURN:
*    (N+1): AN INVALID SET OF CHARACTERS (NOT PT, MT, TY) 
*           OR NO. OF CHARACTERS HAS BEEN DETECTED. 
*           AFTER PRINTING THE DIAGNOSTIC, A RETURN IS MADE TO
*           PERMIT THE MESSAGE TO BE REPEATED.  THE CONTENTS
*           OF A AND B ARE DESTROYED. 
*    (N+2): A = ADDRESS OF DESIGNATED INPUT DRIVER
*           B = DESTROYED 
* 
  03262 000000  SINIT NOP 
  03263 060166        LDA N2        SET MAX NO. DIGITS FOR GETNA
  03264 114120        JSB AGETN,I   MOVE LBUF TO TBUF 
  03265 114117        JSB AGETA,I   GET NEXT CHAR FROM LBUF 
  03266 050164        CPA ZERO      CHAR = ZERO? (END OF BUFFER)
  03267 027272        JMP *+3       YES - CONTINUE
  03270 017256  CODIN JSB INERR     INVALID TTY RESPONSE
  03271 127262        JMP SINIT,I   RETURN - ERROR
  03272 061267        LDA TBUF      GET 2-CHARACTER CODE
  03273 053411        CPA TYTYP     TYPE = TTY? 
  03274 027304        JMP TYUN      YES - UNIT IS TELETYPE
  03275 053412        CPA PTTYP     TYPE = PT READER? 
  03276 027306        JMP PTUN      SET UNIT = PT READER
  03277 053413        CPA MTTYP     TYPE = MAG TAPE?
  03300 027310        JMP MTUN      SET UNIT = MAG TAPE 
  03301 053414        CPA DFTYP     TYPE = DISC FILE? 
  03302 027310        JMP MTUN      -PROCESS AS MAG TAPE. 
  03303 027270        JMP CODIN     INVALID PT, MT OR TY
  03304 060104  TYUN  LDA DRTTY     DRTTY = TTY INPUT DRIVER ADDRESS
  03305 002001        RSS 
  03306 060101  PTUN  LDA DRPTR     DRPTR = PT READER DRIVER ADDR 
  03307 027315        JMP PT.DV 
  03310 002400  MTUN  CLA            MT OR DF 
  03311 050107        CPA DRMAG       DRIVER LOADED?
  03312 027270        JMP CODIN        NO - ERROR 
  03313 072301        STA IMAGT        YES: CLEAR REWIND PERMIT FLAG
  03314 060107        LDA DRMAG     DRMAG = MAG TAPE DRIVER ADDR
  03315 037262  PT.DV ISZ SINIT     INCR RETURN ADDRESS 
  03316 127262        JMP SINIT,I   RETURN
                      SKP 
* 
*                                   INSERT CHNL NO. IN INSTRUCTION
* 
*  THE STDSK SUBROUTINE SETS THE CURRENT DISK CHANNEL 
*  NOS. IN THE I/O INSTRUCTIONS.
* 
*  CALLING SEQUENCE:
*    A = NO. WORDS TO BE CONFIGURED (NEG.)
*    B = ADDRESS OF INSTRUCTION ADDR LIST 
*    JSB STDSK
* 
*  RETURN:
*    A = DESTROYED
*    B = NEXT INSTRUCTION ADDRESS 
* 
  03317 000000  STDSK NOP 
  03320 070463        STA WDCNT     SAVE NO. OF INSTRUCTIONS
  03321 160001        LDA B,I       GET INSTRUCTION 
  03322 010260        AND M7700     ISOLATE INSTRUCTION CODE
  03323 033577        IOR DCHNL     INSERT CHANNEL NO.
  03324 170001        STA B,I       SET INSTRUCTION IN CODE 
  03325 006004        INB           INCR INSTRUCTION ADDRESS
  03326 034463        ISZ WDCNT     SKIP - ALL INSTRUCTIONS CONFIG. 
  03327 027321        JMP *-6       CONFIGURE NEXT INSTRUCTION
  03330 127317        JMP STDSK,I   RETURN
                      SKP 
* 
*                                   LIST UNDEFINED EXTS 
* 
*  THE UNDEFINED EXTERNAL REFERENCES CAN BE LISTED AFTER
*  EACH END-OF-TAPE CONDITION IS DETECTED.
* 
*  FOLLOWING COMPLETION OF THE EXT LISTING, THE COMPUTER
*  HALTS TO PERMIT THE OPERATOR TO RETURN FOR ADDITIONAL
*  PROGRAM INPUT, OR CONTINUE WITH THE PROCESSING OF PARAMETERS.
* 
  03331 014313  LSTEX JSB SPACE     NEW LINE
  03332 014313        JSB SPACE     NEW LINE
  03333 003400        CCA 
  03334 073611        STA NXCNT     SET SYMBOL COUNT = -1 
  03335 014412        JSB INLST     INITIALIZE LST ADDRESSES
  03336 014416  OUTNX JSB LSTX      SET LST1 - LST5 
  03337 027355        JMP EXOUT     END OF LIST 
  03340 160534        LDA LST4,I    GET WORD 4 OF LST 
  03341 003026        CMA,SSA,INA,SZA  SKIP IF UNDEFINED OR BS REF
  03342 027336        JMP OUTNX     TRY NEXT LST SYMBOL 
  03343 037611        ISZ NXCNT     TEST FOR FIRST UNDEF EXT
  03344 027351        JMP OUTEX     NO - PUT OUT SYMBOL NAME
  03345 060266        LDA P10 
  03346 067470        LDB MESS8     MESS8 = ADDR: UNDEF EXTS
  03347 114102        JSB DRKEY,I   PRINT: UNDEF EXTS 
  03350 014313        JSB SPACE     NEW LINE
  03351 060207  OUTEX LDA P5
  03352 064531        LDB LST1      LST1 = A(SYMBOL)
  03353 114102        JSB DRKEY,I   PRINT SYMBOL
  03354 027336        JMP OUTNX     TRY NEXT SYMBOL 
* 
  03355 037611  EXOUT ISZ NXCNT     TEST FOR NO UNDEF EXTS
  03356 027362        JMP ENDEX     NO - OMIT MESSAGE 
  03357 060216        LDA P14 
  03360 067471        LDB MESS9     MESS9 = ADDR: NO UNDEF EXTS 
  03361 114102        JSB DRKEY,I   PRINT MESSAGE 
  03362 014313  ENDEX JSB SPACE     NEW LINE
  03363 102077        HLT 77B       WAIT FOR OPERATOR INTERVENTION
  03364 102501        LIA 1         GET SWITCH REGISTER 
  03365 000010        SLA, SS       SKIP IF SWITCH 0 UP 
  03366 026335        JMP TSTN4     TEST FOR PROGRAM OR LIBR LOAD 
* 
  03367 002400        CLA           SET DISC HIGH 
  03370 071473        STA DSKA      TO ZERO 
  03371 071476        STA SCH1      SET SCHEDULED  PGM FLAG TO ZERO 
  03372 062301        LDA IMAGT      IF MT OR DF USED 
  03373 002002        SZA             FOR INPUT, SKIP TO REWIND 
  03374 124114        JMP IPARM,I   NO, INITIATE PARAMETER INPUT. $$
  03375 114107        JSB DRMAG,I    REWIND/STANDBY 
  03376 000005        OCT 5          MT OR DF.                    $$
  03377 124114        JMP IPARM,I   INITIATE PARAMETER INPUT SECTION
                      SKP 
* 
  03400 030061  ERR01 ASC 1,01      INVALID TTY REPLY 
  03401 030062  ERR02 ASC 1,02      CHECKSUM ERROR
  03402 030063  ERR03 ASC 1,03      RECORD OUT OF SEQUENCE
  03403 030064  ERR04 ASC 1,04      INVALID RECORD
  03404 030065  ERR05 ASC 1,05      DUPLICATE ENTRY POINTS
  03405 030066  ERR06 ASC 1,06      INVALID NAM REC - BP LENGTH 
  03406 030070  ERR08 ASC 1,08      DUPLICATE PROGRAM NAMES 
  03407 030463  ERR13 ASC 1,13      BG SEGMENT PRECEDES BG MAIN 
  03410 031060  ERR20 ASC 1,20      DBL LIST OVERFLOW 
* 
  03411 052131  TYTYP ASC 1,TY
  03412 050124  PTTYP ASC 1,PT
  03413 046524  MTTYP ASC 1,MT
  03414 042106  DFTYP ASC 1,DF
* 
  03415 003416  MESS1 DEF *+1 
  03416 051531        ASC 7,SYS DISC SIZE?
  03417 051440  
  03420 042111  
  03421 051503  
  03422 020123  
  03423 044532  
  03424 042477  
  03425 003426  MESS2 DEF *+1 
  03426 043110        ASC 7,FH DISC CHNL? 
  03427 020104  
  03430 044523  
  03431 041440  
  03432 041510  
  03433 047114  
  03434 037440  
  03435 003436  MESS3 DEF *+1 
  03436 046127        ASC 5,LWA MEM?
  03437 040440  
  03440 046505  
  03441 046477  
  03442 020040  
  03443 003444  MESS4 DEF *+1 
  03444 050122        ASC 5,PRGM INPT?
  03445 043515  
  03446 020111  
  03447 047120  
  03450 052077  
  03451 003452  MESS5 DEF *+1 
  03452 046111        ASC 5,LIBR INPT?
  03453 041122  
  03454 020111  
  03455 047120  
  03456 052077  
  03457 003460  MESS6 DEF *+1 
  03460 050122        ASC 5,PRAM INPT?
  03461 040515  
  03462 020111  
  03463 047120  
  03464 052077  
  03465 003466  MESS7 DEF *+1 
  03466 025105        ASC 2,*EOT
  03467 047524  
  03470 003474  MESS8 DEF *+4 
  03471 003472  MESS9 DEF *+1 
  03472 020116        ASC 7, NO UNDEF EXTS
  03473 047440  
  03474 052516  
  03475 042105  
  03476 043040  
  03477 042530  
  03500 052123  
  03501 003502  MES21 DEF *+1 
  03502 047117        ASC 7,NO. PROTECTED?
  03503 027040  
  03504 050122  
  03505 047524  
  03506 042503  
  03507 052105  
  03510 042077  
  03511 003512  MES30 DEF *+1 
  03512 052102        ASC 5,TBG CHNL? 
  03513 043440  
  03514 041510  
  03515 047114  
  03516 037440  
  03517 003520  MES31 DEF *+1 
  03520 051527        ASC 5,SWAPPING? 
  03521 040520  
  03522 050111  
  03523 047107  
  03524 037440  
  03525 003526  MES32 DEF *+1 
  03526 052125        ASC 17,TURN OFF DISC PROTECT - PRESS RUN
  03527 051116  
  03530 020117  
  03531 043106  
  03532 020104  
  03533 044523  
  03534 041440  
  03535 050122  
  03536 047524  
  03537 042503  
  03540 052040  
  03541 026440  
  03542 050122  
  03543 042523  
  03544 051440  
  03545 051125  
  03546 047040  
  03547 003550  MES33 DEF *+1 
  03550 040525        ASC 7,AUX DISC SIZE?
  03551 054040  
  03552 042111  
  03553 051503  
  03554 020123  
  03555 044532  
  03556 042477  
* 
* 
  03557 103560  HPDSK DEF *+1,I     HIGH PRIORITY CHANNEL NOS.
  03560 014047        DEF LINKG 
  03561 010134        DEF DMAC
  03562 010120        DEF DSK3
  03563 014031        DEF DSK8
  03564 015635        DEF DSKB
*                                   LOW PRIORITY CHANNEL NOS. 
  03565 010116        DEF DSK2
  03566 010121        DEF DSK4
  03567 002221        DEF DSK5
  03570 002222        DEF DSK6
  03571 014016        DEF DSK7
  03572 014035        DEF DSK9
  03573 015633        DEF DSKAG 
  03574 015636        DEF DSKC
  03575 054505  YCHAR ASC 1,YE
  03576 047117  NCHAR ASC 1,NO
  03577         DCHNL BSS 1         DISK I/O CHANNEL NO. (OCTAL)
  03600         PGMAD BSS 1         PROGRAM INPUT DRIVER ADDRESS
  03601         LIBAD BSS 1         LIB INPUT DRIVER ADDR 
  03602         PINAD BSS 1         INPUT DRIVER ADDRESS
  03603         ETFLG BSS 1         END TAPE FLAG = -1/0 = IGN/MAX
  03604         CNFLG BSS 1         LB, UT END FLAG 
  03605         RIC   BSS 1         RECORD IDENTIFICATION CODE
  03606         SYM12 BSS 1         CHAR 1,2 ADDR 
  03607         SYM34 BSS 1         CHAR 3,4 ADDR 
  03610         SYM5  BSS 1         CHAR 5 ADDR 
  03611         NXCNT BSS 1         UNDEFINED SYMBOL COUNT
* 
  03612 012261  AXXB  DEF AXX       DEFINE ADDRESSES OF START AND END OF
  03613 015776  ANDBL ABS 15776B     THE DBL LIST AREA. 
  03614         TADBL BSS 1         CURRENT DBLST ADDRESS 
  03615         PADBL BSS 1         ADDRESS OF END OF DBLST 
  03616               ORG * 
                      SKP 
  04000               ORG 4000B 
* 
*                                   SET PARAMETERS INTO IDENTS
* 
*  THE PARAMETER INPUT SECTION PERMITS ALTERATION (OR INTRODUCTION) 
*  OF THE TYPE, PRIORITY, AND EXECUTION INTERVAL FOR EACH PROGRAM.
*  EACH PARAMETER RECORD HAS ONE OF THE FOLLOWING FORMATS:
* 
*    NAME,TYPE
*    NAME,TYPE,PRIORITY 
*    NAME,TYPE,PRIORITY,EXECUTION INTERVAL
* 
*  TYPE = 2 DECIMAL DIGITS (1-99) 
*  PRIORITY = 2 DECIMAL DIGITS (0-99) 
*  EXECUTION INTERVAL = 6 OPERANDS
*    1 - RESOLUTION CODE (2 DECIMAL DIGITS) 
*    2 - EXECUTION MULTIPLE (5 DECIMAL DIGITS)
*    3 - HOURS (2 DECIMAL DIGITS) 
*    4 - MINUTES (2 DECIMAL DIGITS) 
*    5 - SECONDS (2 DECIMAL DIGITS) 
*    6 - 10'S MILLISECONDS (2 DECIMAL DIGITS) 
* 
*  NOTE: TYPE OF BG DISK RESIDENTS HAVING BG SEGMENTS MAY NOT 
*        BE ALTERED WITHOUT DESTROYING RELATIONSHIP.
* 
  04000 014313  PARAM JSB SPACE     NEW LINE
  04001 060266        LDA P10 
  04002 067713        LDB MES24     MES24 = ADDR: PARAMETERS
  04003 114102        JSB DRKEY,I   PRINT: PARAMETERS 
  04004 014313        JSB SPACE     NEW LINE
  04005 064511        LDB PARAD     GET PARAM INPUT DRIVER ADDRESS
  04006 054104        CPB DRTTY     INPUT UNIT = TTY? 
  04007 002001        RSS           YES - CONTINUE
  04010 102077        HLT 77B       WAIT FOR INSERTION OF PARAMETERS
* 
  04011 064451  PARST LDB ALBUF     GET ADDRESS OF LBUF 
  04012 014302        JSB BUFCL     CLEAR LBUF
  04013 060232        LDA P64 
  04014 064451        LDB ALBUF     GET ADDRESS OF LBUF 
  04015 114511        JSB PARAD,I   GET ASCII PARAMETER RECORD
  04016 002003        SZA,RSS       SKIP IF CHARS INPUT 
  04017 026013        JMP *-4       REPEAT PARAMETER INPUT
  04020 073743        STA PARNO     SAVE PARAMETER RECORD LENGTH
  04021 017704        JSB GINIT     INITIALIZE BUFFER SCAN
  04022 060171        LDA N5
  04023 017567        JSB GETNA     MOVE CHARS FROM LBUF TO TBUF
  04024 053712        CPA PTERM     CHARS = /E? 
  04025 026245        JMP SETLB     YES - SET LIBRARY TYPE IN IDENT 
  04026 017542        JSB GETAL     GET NEXT CHAR FROM LBUF 
  04027 050276        CPA BLANK     CHAR = BLANK?(DELIMITER = COMMA)
  04030 026033        JMP *+3       YES - CONTINUE
* 
  04031 061502  PANER LDA ERR09     PARAMETER NAME ERROR
  04032 026227        JMP PARER 
* 
  04033 014345        JSB INIDX     INITIALIZE IDENT ADDRESSES
  04034 014351  NXTID JSB IDX       SET CURRENT IDENT ADDRESSES 
  04035 026031        JMP PANER     YES - INVALID NAME
  04036 160517        LDA ID1,I     GET NAME 1,2
  04037 051267        CPA TBUF      EQUAL?
  04040 002001        RSS           YES - CONTINUE
  04041 026034        JMP NXTID     NO - TRY NEXT IDENT 
  04042 160520        LDA ID2,I     GET NAME 3,4
  04043 051270        CPA TBUF+1    EQUAL?
  04044 002001        RSS           YES - CONTINUE
  04045 026034        JMP NXTID     NO - TRY NEXT IDENT 
  04046 160521        LDA ID3,I     GET NAME 5
  04047 010255        AND M7400     ISOLATE UPPER CHAR
  04050 051271        CPA TBUF+2    EQUAL?
  04051 002001        RSS           YES - CONTINUE
  04052 026034        JMP NXTID     NO - TRY NEXT NAME
* 
*                                   SET TYPE
  04053 060166        LDA N2
  04054 017626        JSB GETOC     CONVERT TO OCTAL
  04055 026063        JMP PATER     INVALID DIGIT 
  04056 017542        JSB GETAL     GET NEXT CHAR FROM LBUF 
  04057 050164        CPA ZERO      CHAR = ZERO? (END OF BUFFER)
  04060 002001        RSS           YES - CONTIMUE
  04061 050276        CPA BLANK     CHAR = BLANK?(DELIMITER = COMMA)
  04062 026065        JMP SETYP     SET PROGRAM TYPE IN IDENT 
  04063 061503  PATER LDA ERR10     PARAMETER TYPE ERROR
  04064 026227        JMP PARER 
* 
  04065 006400  SETYP CLB           IF THIS IS THE SCHEDULED PGM
  04066 060517        LDA ID1       AGAIN 
  04067 051476        CPA SCH1      THEN
  04070 075476        STB SCH1      CLEAR ITS FLAG
  04071 064474        LDB OCTNO     GET CONVERTED NUMBER
  04072 160524        LDA ID6,I     GET PREVIOUS TYPE 
  04073 010257        AND M7600     SET PREVIOUS TYPE = ZERO
  04074 030001        IOR B         INSERT NEW TYPE 
  04075 170524        STA ID6,I     SET NEW TYPE
  04076 064517        LDB ID1       PRESET B TO IDENT ADDRESS 
  04077 010241        AND M120      MASK 80 BITS
  04100 050241        CPA M120      SET?
  04101 002001        RSS           YES - SKIP
  04102 026114        JMP STY       NO - CONTINUE 
  04103 120524        XOR ID6,I     ZERO 80 BITS AND
  04104 170524        STA ID6,I     RESET IDENT 
  04105 002021        SSA,RSS       IF SUBROUTINE IGNORE
  04106 026114        JMP STY       IGNOR SUBROUTINE
  04107 010242        AND M177      GET TYPE TO A 
  04110 002002        SZA           IF ZERO OR
  04111 040171        ADA N5        MORE THAN 4 
  04112 002020        SSA           SKIP
  04113 075476        STB SCH1      ELSE SET PGM IDENT IN SCH FLAG
  04114 017542  STY   JSB GETAL     GET NEXT CHAR FROM LBUF 
  04115 050164        CPA ZERO      CHAR = ZERO ? (END OF BUFFER) 
  04116 026011        JMP PARST     YES - GET NEXT PARAMETER RECORD 
* 
*                                   SET NEW PROGRAM PRIORITY
  04117 060166        LDA N2        SET COUNT FOR DECIMAL CONVERSION
  04120 017626        JSB GETOC     CONVERT TO OCTAL
  04121 026127        JMP PAPER     PRIORITY ERROR
  04122 017542        JSB GETAL     GET NEXT CHAR FROM LBUF 
  04123 050164        CPA ZERO      CHAR = ZERO ? (END OF BUFFER) 
  04124 002001        RSS           YES - CONTINUE
  04125 050276        CPA BLANK     CHAR = BLANK?(DELIMITER = COMMA)
  04126 026131        JMP SETNR     SET PRIORITY
  04127 061504  PAPER LDA ERR11     PARAMETER PRIORITY ERROR
  04130 026227        JMP PARER 
* 
  04131 160524  SETNR LDA ID6,I     GET TYPE
  04132 010242        AND M177      ISOLATE TYPE
  04133 064474        LDB OCTNO     GET PRIORITY
  04134 006003        SZB,RSS       SKIP - PRIORITY ENTERED 
  04135 064233        LDB P99       REPLACE ZERO PRIORITY WITH 99 
  04136 002003        SZA,RSS       SKIP - NOT SYSTEM PROGRAM 
  04137 006400        CLB           SET SYSTEM PRIORITY TO ZERO 
  04140 005727        BLF,BLF       ROTATE PRIORITY TO UPPER B
  04141 160524        LDA ID6,I     GET PREVIOUS PRIORITY 
  04142 010254        AND M1377     ISOLATE PRIORITY,SET TO ZERO
  04143 030001        IOR B         INSERT NEW PRIORITY 
  04144 170524        STA ID6,I     SET NEW PRIORITY
  04145 017542        JSB GETAL     GET NEXT CHAR FROM LBUF 
  04146 050164        CPA ZERO      CHAR = ZERO ? (END OF BUFFER) 
  04147 026011        JMP PARST     YES - GET NEXT PARAMETER RECORD 
* 
*                                   GET RESOLUTION CODE 
  04150 060166        LDA N2        SET FOR 2 DECIMAL DIGITS
  04151 016215        JSB EXINT     GET DIGITS FROM LBUF
  04152 001727        ALF,ALF       ROTATE TO UPPER A 
  04153 001722        ALF,RAL       ROTATE TO UPPER 3 BITS IN A 
  04154 010246        AND M1600     ISOLATE UPPER 3 BITS IN A 
  04155 170525        STA ID7,I     SET IN IDENT 7
* 
*                                   GET EXECUTION MULTIPLE
  04156 060171        LDA N5        SET COUNT FOR DECIMAL CONVERSION
  04157 016215        JSB EXINT     GET DIGITS FROM LBUF
  04160 010246        AND M1600     ISOLATE UPPER 3 BITS IN A 
  04161 002002        SZA           SKIP IF VALID MULTIPLE
  04162 026226        JMP PAIER     INVALID EXECUTION INTERV FORMAT 
  04163 060474        LDA OCTNO     GET CONVERTED NUMBER
  04164 130525        IOR ID7,I     ADD TO RESOLUTION CODE
  04165 170525        STA ID7,I     SET IN IDENT 7
* 
*                                   GET HOURS 
  04166 060166        LDA N2        SET FOR 2 DECIMAL DIGITS
  04167 016215        JSB EXINT     GET DIGITS FROM LBUF
  04170 001727        ALF,ALF       ROTATE TO UPPER A 
  04171 170526        STA ID8,I     SET IN IDENT 8
* 
*                                   GET MINUTES 
  04172 060166        LDA N2        SET FOR 2 DECIMAL DIGITS
  04173 016215        JSB EXINT     GET DIGITS FROM LBUF
  04174 130526        IOR ID8,I     ADD TO HOURS
  04175 170526        STA ID8,I     SET IN IDENT 8
* 
*                                   GET SECONDS 
  04176 060166        LDA N2        SET FOR 2 DECIMAL DIGITS
  04177 016215        JSB EXINT     GET DIGITS FROM LBUF
  04200 001727        ALF,ALF       ROTATE TO UPPER A 
  04201 170527        STA ID9,I     SET IN IDENT 9
* 
*                                   GET TENS OF MILLISECONDS
  04202 060166        LDA N2        SET FOR DECIMAL CONVERSION
  04203 017626        JSB GETOC     CONVERT TO OCTAL
  04204 026226        JMP PAIER     INVALID DIGIT 
  04205 017542        JSB GETAL     GET NEXT CHAR FROM LBUF 
  04206 050164        CPA ZERO      CHAR = 0? (END OF BUFFER) 
  04207 002001        RSS           YES - CONTINUE
  04210 026226        JMP PAIER     NO - INVALID DELIMITER
  04211 060474        LDA OCTNO     GET CONVERTED NUMBER
  04212 130527        IOR ID9,I     ADD TO SECS 
  04213 170527        STA ID9,I     SET IN IDENT 9
  04214 026011        JMP PARST     GET NEXT PARAMETER RECORD 
* 
*                                   EXECUTION INTERVAL INPUT CONTROL
  04215 000000  EXINT NOP 
  04216 017626        JSB GETOC     CONVERT TO OCTAL
  04217 026226        JMP PAIER     INVALID DIGIT 
  04220 017542        JSB GETAL     GET NEXT CHAR FROM LBUF 
  04221 050276        CPA BLANK     CHAR = BLANK? (DELIMITER=COMMA) 
  04222 002001        RSS           YES - CONTINUE
  04223 026226        JMP PAIER     NO - INVALID DELIMITER
  04224 060474        LDA OCTNO     GET CONVERTED NUMBER
  04225 126215        JMP EXINT,I   RETURN WITH NUMBER IN A 
  04226 061505  PAIER LDA ERR12     PARAMETER INTERVAL ERROR
* 
  04227 073742  PARER STA TEMPE     SAVE ERROR CODE 
  04230 016235        JSB ERPNT     TEST FOR PRINTING LBUF
  04231 063742        LDA TEMPE     GET ERROR CODE
  04232 014317        JSB ERROR     PRINT ERROR MESSAGE 
  04233 014313        JSB SPACE     NEW LINE
  04234 026011        JMP PARST     REREAD PARAMETER RECORD 
* 
*                                   PRINT LBUF UNLESS FROM TTY
  04235 000000  ERPNT NOP           PRINT CONTENTS OF LBUF
  04236 064511        LDB PARAD     GET ADDRESS OF PARAMETER UNIT 
  04237 054104        CPB DRTTY     DEVICE = TTY? 
  04240 026244        JMP *+4       YES - OMIT PRINTING ON TTY
  04241 063743        LDA PARNO     PARNO = PARAMETER RECORD LENGTH 
  04242 064451        LDB ALBUF     ALBUF = BUFFER ADDRESS
  04243 114102        JSB DRKEY,I   PRINT PARAMETER RECORD
  04244 126235        JMP ERPNT,I   RETURN
* 
  04245 016235  SETLB JSB ERPNT     TEST FOR PRINTING /E
  04246 014313        JSB SPACE     NEW LINE
                      SKP 
* 
*                                   SET LIBRARY, COM, TYPE TOTALS 
* 
*  THIS SECTION IS EXECUTED WHEN THE PARAMETERS HAVE
*  BEEN COMPLETELY READ IN.  IT COMPUTES THE MAXIMUM LENGTH OF
*  BOTH THE REAL TIME AND BACKGROUND COMMON AREAS.
*  IN ADDITION, IT DEMOTES THOSE LIBRARY PROGRAMS FROM LIBRARY (6)
*  TO UTILITY (7) IF THEY HAVE NOT BEEN CALLED BY RESIDENT PROGRAMS.
*  FINALLY, IT RESERVES A 22-WORD SECTION OF CODE FOR EACH USER 
*  PROGRAM (PLUS AN ADDITIONAL 6 WORDS IF DISK RESIDENT) TO 
*  GENERATE THE ID SEGMENTS.  FINALLY, IT RESEVES A KEYWORD TO
*  CONTAIN THE ADDRESS OF EACH ID SEGMENT.
*  IT ALSO SETS UP THE IDENT ADDRESS OF THE PROGRAM 
*  BE LOADED JUST PRIOR TO THE PROGRAM TO BE PUT IN THE 
*  SCHEDULED LIST, IF ANY.
* 
* 
  04247 002400        CLA 
  04250 071313        STA KEYCN     CLEAR TOTAL KEYWORD COUNT 
  04251 071306        STA SICNT     CLEAR SHORT ID SEG COUNT
  04252 071305        STA LICNT     CLEAR LONG ID SEG COUNT 
  04253 071307        STA COMRT     CLEAR RT COM LENGTH 
  04254 071310        STA COMBG     CLEAR BG COM LENGTH 
  04255 014345        JSB INIDX     INITIALIZE IDX
  04256 014351  SETIX JSB IDX       SET IDENT ADDRESSES 
  04257 026345        JMP TRMCN     TERMINATE ID SEGMENT COUNT
  04260 160524        LDA ID6,I     GET TYPE
  04261 010242        AND M177      ISOLATE TYPE
  04262 164522        LDB ID4,I     GET COMMON LENGTH 
  04263 050267        CPA P1        TYPE = RT RESIDENT? 
  04264 026330        JMP SETRC     SET RT COMMON LENGTH
  04265 050204        CPA P2        TYPE = RT DISK RESIDENT?
  04266 026330        JMP SETRC     SET RT COMMON LENGTH
  04267 050205        CPA P3        TYPE = BG DISK RESIDENT?
  04270 026310        JMP SETBC     SET BG COMMON LENGTH
  04271 050206        CPA P4        TYPE = BG RESIDENT? 
  04272 026310        JMP SETBC     SET BG COMMON LENGTH
  04273 050207        CPA P5        TYPE = BG SEGMENT?
  04274 026310        JMP SETBC     SET BG COMMON LENGTH
  04275 050164        CPA ZERO      TYPE = SYSTEM?
  04276 002001        RSS           YES - CONTINUE
  04277 050210        CPA P6        TYPE = LIBRARY? 
  04300 006003        SZB,RSS       SKIP - HAS INVALID COMMON 
  04301 026256        JMP SETIX     PROCESS NEXT IDENT
  04302 061524        LDA ERR37     SET CODE = INVALID COMMON 
  04303 014317        JSB ERROR     PRINT DIAGNOSTIC
  04304 060207        LDA P5
  04305 064517        LDB ID1       GET IDENT ADDRESS 
  04306 114102        JSB DRKEY,I   PRINT PROG NAME FOR INVALID COM 
  04307 026256        JMP SETIX     PROCESS NEXT IDENT
* 
  04310 061310  SETBC LDA COMBG     GET PREVIOUS MAX COMMON LENGTH
  04311 003004        CMA,INA 
  04312 040001        ADA B         SET A = PROG COM - PREVIOUS COM 
  04313 002021        SSA,RSS       SKIP IF PREVIOUS GREATER
  04314 075310        STB COMBG     SET NEW MAX BG COMMON LENGTH
  04315 160524        LDA ID6,I     GET M/S 
  04316 002021        SSA,RSS       SKIP IF MAIN
  04317 026256        JMP SETIX     PROCESS NEXT IDENT
  04320 035313        ISZ KEYCN     INCR TOTAL KEYWORD COUNT
  04321 010242        AND M177      ISOLATE TYPE
  04322 050206        CPA P4        TYPE = BG RESIDENT? 
  04323 026326        JMP INSIC     YES - COUNT SHORT ID SEGMENT
  04324 035305  INLIC ISZ LICNT     INCR TOTAL LONG ID SEGMENT COUNT
  04325 026256        JMP SETIX     PROCESS NEXT IDENT
  04326 035306  INSIC ISZ SICNT     INCR TOTAL SHORT ID SEG COUNT 
  04327 026256        JMP SETIX     PROCESS NEXT IDENT
  04330 061307  SETRC LDA COMRT     GET PREVIOUS MAX COMMON LENGTH
  04331 003004        CMA,INA 
  04332 040001        ADA B         SET A = PROG COM - PREVIOUS COM 
  04333 002021        SSA,RSS       SKIP IF PREVIOUS GREATER
  04334 075307        STB COMRT     SET NEW MAX RT COM LENGTH 
  04335 160524        LDA ID6,I     GET M/S 
  04336 002021        SSA,RSS       SKIP IF MAIN
  04337 026256        JMP SETIX     PROCESS NEXT IDENT
  04340 035313        ISZ KEYCN     INCR TOTAL KEYWORD COUNT
  04341 010242        AND M177      ISOLATE TYPE
  04342 050267        CPA P1        TYPE = RT RESIDENT? 
  04343 026326        JMP INSIC     YES - COUNT SHORT ID SEGMENT
  04344 026324        JMP INLIC     NO - COUNT LONG ID SEGMENT
* 
* 
  04345 014313  TRMCN JSB SPACE 
  04346 060224        LDA P23 
  04347 065562        LDB MES42    MES42 = ADDR: # OF BLANK ID'S  $$
  04350 114157        JSB AREAD,I    PRINT AND GET REPLY
  04351 060166        LDA N2        GET 2                         $$
  04352 017626        JSB GETOC      DECIMAL DIGITS, CONVERT      $$
  04353 026370        JMP TRM2      -INVALID INPUT.               $$
  04354 002003        SZA,RSS       IF ZERO, ADD 1                $$
  04355 002004        INA            FOR BKG. ON-LINE LOADING.    $$
  04356 070001        STA B         SAVE #.                       $$
  04357 041305        ADA LICNT     ADD TO LONG ID SEGMENT COUNT. $$
  04360 071305        STA LICNT                                   $$
  04361 045313        ADB KEYCN     ADD TO KEYWORD COUNT,         $$
  04362 006004        INB           ADD 1 FOR TERMINATOR.         $$
  04363 075313        STB KEYCN                                   $$
  04364 114163        JSB ASCHF,I   SET UP THE SCHEDULE PGM PARAMETERS
  04365 060123        LDA AFWAP     GET ADDRESS OF LOADING SECTION
  04366 070112        STA TRANS     RESET TRANSFER ADDRESS TO LOAD
  04367 124123        JMP AFWAP,I   LOAD ABSOLUTE SYSTEM
* 
  04370 062373  TRM2  LDA TRM3      PRINT                         $$
  04371 014317        JSB ERROR      "ERR 01"                     $$
  04372 026346        JMP TRMCN+1 
  04373 030061  TRM3  ASC 1,01                                    $$
                      SKP 
* 
*                                   CLEAR UNDEFINED EXTS
* 
  04374 014412  IPARS JSB INLST     INITIALIZE LSTX 
  04375 014416  CLST3 JSB LSTX      SET LST ADDRESSES 
  04376 026454        JMP ENDLB     SET USAGE FLAGS 
  04377 160534        LDA LST4,I    GET IDENT ADDRESS 
  04400 002021        SSA,RSS       SKIP - UNDEFINED EXT
  04401 026375        JMP CLST3     IGNORE DEFINED ENTRY POINT
  04402 002400        CLA 
  04403 170534        STA LST4,I    CLEAR IDENT ADDRESS 
  04404 026375        JMP CLST3     TRY NEXT LST ENTRY
* 
*  THIS ROUTINE IS CALLED AFTER THE SYSTEM IS LOADED BUT BEFORE THE 
*  LIBRARY. 
                      SPC 1 
*                                   CLEAR LOAD FLAGES FOR TYPE 6 PGMS 
* 
  04405 000000  CLRT6 NOP 
  04406 014345        JSB INIDX     INITIALIZE IDX
  04407 014351  SETLX JSB IDX       SET IDENT ADDRESSES 
  04410 126405        JMP CLRT6,I   END OF IDENTS 
  04411 160524        LDA ID6,I     GET TYPE
  04412 010242        AND M177      ISOLATE TYPE
  04413 050210        CPA P6        TYPE = LIBRARY? 
  04414 002001        RSS           YES - CONTINUE
  04415 026407        JMP SETLX     PROCESS NEXT IDENT
* 
  04416 160521        LDA ID3,I     TYPE = 6 - GET LOAD FLAG
  04417 001366        RAR,CLE,ELA   LOAD BIT TO E - AND CLEARED 
  04420 170521        STA ID3,I     RESET CLEARED FLAG
  04421 002041        SEZ,RSS       WAS IT LOADED?
  04422 026407        JMP SETLX     NO - CONTINUE 
  04423 061525        LDA ERR39     YES - ILLEGAL SYSTEM REFERENCE
  04424 014317        JSB ERROR     ERROR 39
  04425 060207        LDA P5        NOW SEND THE NAME 
  04426 064517        LDB ID1       OF THE CALLED PGM 
  04427 114102        JSB DRKEY,I 
                      SPC 1 
  04430 014412        JSB INLST     INITIALIZE LSTX 
  04431 014416  SETUX JSB LSTX      SET CURRENT LST ADDRESSES 
  04432 026407        JMP SETLX     END - CONTINUE ID SCAN
  04433 160534        LDA LST4,I    GET IDENT ADDRESS 
  04434 050517        CPA ID1       ENT BELONGS TO CURRENT PROG?
  04435 002401        CLA,RSS       YES - CONTINUE
  04436 026431        JMP SETUX     NO - TRY NEXT ENT 
  04437 170535        STA LST5,I    SET LINK TO ZERO. 
  04440 026431        JMP SETUX     CONTINUE SEARCH 
                      SPC 2 
  04441 000000  DEMTL NOP           DEMOTE UNCALLED TYPE 6 TO TYPE 7
  04442 060467        LDA BIDNT     SET UP THE SCAN 
  04443 071332        STA CIDNT     PARAMETERS
  04444 060210        LDA P6        FOR TYPE 6
  04445 071315        STA PTYPE     SCAN
  04446 114134  DEMS  JSB AIDSN,I   GO SET ID ADDRESSES 
  04447 126441        JMP DEMTL,I   END - SO RETURN 
  04450 164521        LDB ID3,I     WAS PGM 
  04451 004010        SLB, SS       LOADED? 
  04452 134524        ISZ ID6,I     NO; CHANGE TO TYPE 7. 
  04453 026446        JMP DEMS      YES/NO CONTINUE SCAN
* 
  04454 060115  ENDLB LDA APARS     GET ADDR OF PARAMETER INPUT CODE
  04455 070112        STA TRANS     RESET INITIAL TRANSFER ADDRESS
  04456 026000        JMP PARAM     GET PARAMETERS
                      SKP 
* 
*                                   GENERATE I/O TABLES 
* 
*  THIS SECTION OF CODE GENERATES THE I/O TABLES
*  FOR THE SYSTEM.  THESE INCLUDE THE EQUIPMENT TABLE (EQT),
*  STANDARD DEVICE REFERENCE TABLE (DRT), AND INTERRUPT TABLE.
* 
*  THE EQT RECORDS HAVE THE FOLLOWING FORMAT: 
* 
*    N1,DVRN2<,D><,B><,T> 
* 
*  N1 = CHANNEL NO. (2 OCTAL DIGITS)
*  N2 = DRIVER CLASS. CODE (2 OCTAL DIGITS) 
*  D = DMA FLAG (OPTIONAL)
*  B = BUFFERING FLAG (OPTIONAL)
*  T = TIME-OUT VALUE TO BE ENTERED 
* 
*    IF T IS ENTERED, A VALUE FOR THE DEVICE'S TIME-OUT 
*    CLOCK MUST BE NEXT ENTERED IN RESPONSE TO: 
*                  ' T = '
*    THE OPERATOR MUST ENTER A POSITIVE DECIMAL NUMBER
*    OF UP TO FIVE DIGITS.  THIS IS THEN THE NUMBER OF
*    TIME BASE GENERATOR INTERRUPTS (10 MSEC INTERVALS) 
*    BETWEEN THE TIME IO IS INITIATED ON THE DEVICE AND 
*    THE TIME AFTER WHICH THE DEVICE SHOULD HAVE INTERRUPTED. 
*    IF THE DEVICE HAS NOT INTERRUPTED BY THIS TIME, IT 
*    IS CONSIDERED TO HAVE TIMED-OUT. 
* 
* 
*  EACH DRT RECORD CONSISTS OF A 2-DIGIT NO. SPECIFYING THE 
*  CORRESPONDING ENTRY IN THE EQUIPMENT TABLE 
*  AND AN OPTIONAL 1-DIGIT NO. SPECIFYING A 
*  SUBCHANNEL WITHIN THAT ENTRY.  FOR EXAMPLE, IN 
*  RESPONSE TO THE MESSAGE:  5 = ?, THE RESPONSE 6 INDICATES THAT 
*  THE LOGICAL UNIT NO. 5 IS TO USE DEVICE 6 IN EQT.
*  WHEREAS THE RESPONSE 6,2 INDICATES THAT THE
*  LOGICAL UNIT NO. 5 IS TO USE SUBCHANNEL 2 OF 
*  DEVICE 6 IN EQT. 
* 
* 
*  THE INT RECORDS HAVE ONE OF THE FOLLOWING FORMATS: 
* 
*    N1,EQT,N2
*    N1,PRG,NAME
*    N1,ENT,ENTRY 
*    N1,ABS,N3
* 
*  N1 = CHANNEL NO. (2 OCTAL DIGITS - MUST BE IN INCREASING ORDER)
*        EXCEPTION:    IF N1 = 04 (POWER - FAIL), 
*        THIS ENTRY DOES NOT HAVE TO BE IN ORDER.  ALSO,
*        ONLY AN ENT OR AN ABS TYPE ENTRY IS ACCEPTED 
*        FOR N1 = 04. 
*  N2 = EQT NO. 
*  NAME = PROGRAM NAME TO BE SCHEDULED
*  ENTRY = ENTRY POINT TO WHICH TRANSFER IS TO BE MADE
*  N3 = ABSOLUTE VALUE (6 OCTAL DIGITS) 
* 
* 
*  ROUTINE TO INPUT TO BUFFER FROM TTY
* 
* 
  04457 000000  READ  NOP 
  04460 114102        JSB DRKEY,I    SEND QUESTION
  04461 064451        LDB ALBUF 
  04462 014302        JSB BUFCL     CLEAR LBUF
  04463 060232        LDA P64 
  04464 064451        LDB ALBUF     GET ADDRESS OF LBUF 
  04465 114104        JSB DRTTY,I       ENTRY FROM TTY
  04466 002003        SZA,RSS       SKIP - DATA INPUT 
  04467 026463        JMP *-4       REPEAT INPUT
  04470 017704        JSB GINIT     INITIALIZE LBUF SCAN
  04471 126457        JMP READ,I    RETURN
* 
* 
* 
  04472 000000  GENIO NOP 
* 
*                                   GENERATE EQUIPMENT TABLE (EQT)
* 
  04473 061322        LDA PPREL     GET CURRENT PROG RELOC ADDRESS
  04474 071334        STA AEQT      SAVE ADDRESS OF EQT 
  04475 002400        CLA 
  04476 071335        STA CEQT      CLEAR NO. OF EQT ENTRIES
  04477 003400        CCA           SET DRT2 AND
  04500 071474        STA DRT2      DRT3 TO IMPOSSIBLE
  04501 071475        STA DRT3      NUMBERS 
  04502 060224        LDA P23 
  04503 065603        LDB MES25     MES25 = ADDR: * EQT TABLE ENTRY 
  04504 114102        JSB DRKEY,I   PRINT: * EQUIPMENT TABLE ENTRY
* 
  04505 002400  SEQT  CLA 
  04506 016457        JSB READ      GET EQT RECORD FROM TTY 
  04507 060166        LDA N2
  04510 017567        JSB GETNA     MOVE 2 CHARS TO TBUF
  04511 053712        CPA PTERM     CHARS = /E? 
  04512 026773        JMP SSQT      YES - SET DEVICE REF TABLE (SQT)
  04513 017704        JSB GINIT     RE-INITIALIZE LBUF SCAN 
  04514 060204        LDA P2
  04515 017626        JSB GETOC     GET 2 OCTAL DIGITS, CONVERT 
  04516 026522        JMP IOERR     INVALID DIGIT 
  04517 017542        JSB GETAL     GET NEXT CHAR FROM LBUF 
  04520 050276        CPA BLANK     CHAR = COMMA? 
  04521 026525        JMP CLDBU     YES - SET CHNL NO., CLEAR D,B,U 
  04522 061507  IOERR LDA ERR24     SET CODE = INVALID CHNL IN EQT
  04523 014317        JSB ERROR     PRINT DIAGNOSTIC
  04524 026505        JMP SEQT      GET NEXT EQT RECORD 
* 
  04525 064474  CLDBU LDB OCTNO     GET I/O CHANNEL NO. 
  04526 077744        STB IOADD     SET I/O ADDRESS 
  04527 002400        CLA 
  04530 073745        STA IODMA     CLEAR DMA FLAG
  04531 073746        STA IOBUF     CLEAR AUTOMATIC BUFFERING FLAG
  04532 003400        CCA 
  04533 073753        STA TFLAG     CLEAR TIME-OUT FLAG 
  04534 002404        CLA,INA 
  04535 017567        JSB GETNA     MOVE 1 CHAR TO RH TBUF POSITION 
  04536 053722        CPA CHARD     CHAR = D? 
  04537 002001        RSS           YES - CONTINUE
  04540 026545        JMP DVERR     INVALID DRIVER NAME 
  04541 060166        LDA N2
  04542 017567        JSB GETNA     MOVE 2 CHARS TO TBUF (CHARS 2,3)
  04543 053732        CPA CHAVR     CHARS = VR? 
  04544 026550        JMP STYPE     YES - GET DRIVER TYPE 
  04545 061510  DVERR LDA ERR25     SET CODE = INVALID DRIVER NAME
  04546 014317        JSB ERROR     PRINT DIAGNOSTIC
  04547 026505        JMP SEQT      GET NEXT EQT RECORD 
  04550 060166  STYPE LDA N2
  04551 017567        JSB GETNA     MOVE 2 CHARS TO TBUF
  04552 073750        STA ASTYP     SAVE 2 ASCII CHARS FOR I.XX,C.XX
  04553 003400        CCA 
  04554 040540        ADA CURAL     ADJUST CURRENT LBUF ADDR
  04555 070540        STA CURAL     RESET CURAL TO CONVERT TYPE 
  04556 060204        LDA P2
  04557 017626        JSB GETOC     GET 2 OCTAL CHARS, CONVERT
  04560 026545        JMP DVERR     INVALID DRIVER NAME 
  04561 064474        LDB OCTNO     GET DRIVER TYPE 
  04562 005727        BLF,BLF       ROTATE TO UPPER B 
  04563 077747        STB IOTYP     SET DRIVER TYPE 
  04564 017542        JSB GETAL     GET NEXT CHAR FROM LBUF 
  04565 050164        CPA ZERO      END OF BUFFER?
  04566 026633        JMP LISCN-1   SCAN FOR I.XX, C.XX 
  04567 050276        CPA BLANK     CHAR = COMMA? 
  04570 002001        RSS           YES - CONTINUE
  04571 026545        JMP DVERR     NO - INVALID DRIVER NAME
* 
  04572 003400        CCA 
  04573 073751        STA DFLAG     SET DMA-IN FLAG 
  04574 073752        STA BFLAG     SET BUFFERING-IN FLAG 
* 
  04575 003400  INDBU CCA 
  04576 073762        STA CMFLG     SET COMMA FLAG = NO COMMA IN
  04577 017542        JSB GETAL     GET NEXT CHAR FROM LBUF 
  04600 053722        CPA CHARD     CHAR = D? 
  04601 026621        JMP SEDMA     YES - SET DMA CODE
  04602 053723        CPA CHARB     CHAR = B? 
  04603 026626        JMP SETBU     YES - SET BUFFERING CODE
  04604 053724        CPA CHART     CHAR = T? 
  04605 026611        JMP SETIM      YES - SET TIME-OUT FLAG
  04606 061511  UNERR LDA ERR26     SET CODE = INVALID D,B,T
  04607 014317        JSB ERROR     PRINT DIAGNOSTIC
  04610 026505        JMP SEQT      GET NEXT EQT RECORD 
  04611 037753  SETIM ISZ TFLAG     SKIP - FIRST T ENTERED
  04612 026606        JMP UNERR     DUPLICATE T'S ENTERED 
  04613 017542  EQTST JSB GETAL     GET NEXT CHAR FROM LBUF 
  04614 050164        CPA ZERO      END OF BUFFER?
  04615 026633        JMP LISCN-1   SCAN FOR I.XX, C.XX 
  04616 050276        CPA BLANK     CHAR = COMMA? 
  04617 026575        JMP INDBU     YES - GET NEXT D,B,U, ENTRY 
  04620 026606        JMP UNERR     NO - INVALID D,B,U CHARACTER
* 
  04621 037751  SEDMA ISZ DFLAG     SKIP - FIRST D ENTERED
  04622 026606        JMP UNERR     DUPLICATE D'S ENTERED 
  04623 060300        LDA MSIGN     SET BIT 15 = 1 FOR DMA FLAG 
  04624 073745        STA IODMA     SET DMA CODE
  04625 026613        JMP EQTST     TEST FOR NEXT OPERAND 
* 
  04626 037752  SETBU ISZ BFLAG     SKIP - FIRST B ENTERED
  04627 026606        JMP UNERR     DUPLICATE B'S ENTERED 
                      LDA BIT140    SET BIT14 = 1 
ERROR: Illegal symbol
  04630 060000  
  04631 073746        STA IOBUF     SET AUTOMATIC BUFFERING CODE
  04632 026613        JMP EQTST     TEST FOR NEXT OPERAND 
* 
  04633 014412  GENEQ JSB INLST     INITIALIZE LSTX 
  04634 014416  LISCN JSB LSTX      SET LST ADDRESSES 
  04635 026545        JMP DVERR     I.XX NOT FOUND IN LST 
  04636 160531        LDA LST1,I    GET NAME 1,2 OF LST ENTRY 
  04637 053726        CPA IDEC      CHARS = I.? 
  04640 002001        RSS           YES - CONTINUE
  04641 026634        JMP LISCN     NO - TRY NEXT LST ENTRY 
  04642 160532        LDA LST2,I    GET NAME 3,4 OF LST ENTRY 
  04643 053750        CPA ASTYP     CHARS = XX IN DVRXX NAME? 
  04644 002001        RSS           YES - CONTINUE
  04645 026634        JMP LISCN     NO - TRY NEXT LST ENTRY 
  04646 160533        LDA LST3,I    GET NAME 5 OF LST NAME
  04647 010255        AND M7400     ISOLATE UPPER CHAR
  04650 050277        CPA UBLNK     CHAR = BLANK? 
  04651 002001        RSS           YES - CONTINUE
  04652 026634        JMP LISCN     NO - TRY NEXT LST ENTRY 
  04653 160535        LDA LST5,I    GET BP LINK ADDRESS 
  04654 040250        ADA M2000     ADJUST FOR BP ADDRESS 
  04655 160000        LDA A,I       GET ABSOLUTE ENTRY POINT ADDR 
  04656 073756        STA I.XX      SAVE DRIVER ENTRY POINT 
* 
  04657 014412        JSB INLST     INITIALIZE LSTX 
  04660 014416  LCSCN JSB LSTX      SET LST ADDRESSES 
  04661 026771        JMP NOCXX     C.XX NOT FOUND IN LST 
  04662 160531        LDA LST1,I    GET NAME 1,2 OF LST ENTRY 
  04663 053727        CPA CDEC      CHARS = C.? 
  04664 002001        RSS           YES - CONTINUE
  04665 026660        JMP LCSCN     NO - TRY NEXT LST ENTRY 
  04666 160532        LDA LST2,I    GET NAME 3,4 OF LST ENTRY 
  04667 053750        CPA ASTYP     CHARS = XX IN DVRXX NAME? 
  04670 002001        RSS           YES - CONTINUE
  04671 026660        JMP LCSCN     NO - TRY NEXT LST ENTRY 
  04672 160533        LDA LST3,I    GET NAME 5 OF LST NAME
  04673 010255        AND M7400     ISOLATE UPPER CHAR
  04674 050277        CPA UBLNK     CHAR = BLANK? 
  04675 002001        RSS           YES - CONTINUE
  04676 026660        JMP LCSCN     NO - TRY NEXT LST ENTRY 
  04677 160535        LDA LST5,I    GET BP LINK ADDRESS 
  04700 040250        ADA M2000     ADJUST FOR BP ADDRESS 
  04701 160000        LDA A,I       GET ABSOLUTE COMP. POINT ADDR 
  04702 073757  STCXX STA C.XX      SAVE DRIVER EXIT POINT
* 
  04703 002400        CLA 
  04704 006404        CLB,INB       SET COUNT = 1 
  04705 114135        JSB ALABD,I   PUT OUT I/O LIST POINTER
  04706 063756        LDA I.XX      GET DRIVER ENTRY POINT
  04707 006404        CLB,INB       SET COUNT =1
  04710 114135        JSB ALABD,I   OUTPUT ABSOLUTE DVRXX ENT ADDR
  04711 063757        LDA C.XX      GET DRIVER EXIT POINT 
  04712 006404        CLB,INB       SET COUNT = 1 
  04713 114135        JSB ALABD,I   OUTPUT ABSOLUTE DVRXX COMP. ADDR
  04714 063745        LDA IODMA     GET DMA CODE
  04715 033746        IOR IOBUF     ADD BUFFERING CODE
  04716 033744        IOR IOADD     ADD CHANNEL NO. 
  04717 006404        CLB,INB       SET COUNT = 1 
  04720 114135        JSB ALABD,I   OUTPUT D,B,U, CHANNEL 
* 
  04721 063747        LDA IOTYP     GET EQUIPMENT TYPE CODE 
  04722 010256        AND M7000     ISOLATE UPPER 7 BITS
  04723 002002        SZA           SKIP - TYPE = 0,I 
  04724 002401        CLA,RSS       SET STATUS = 0, SKIP
  04725 060276        LDA BLANK     SET STATUS = 40(8)
  04726 033747        IOR IOTYP     ADD EQUIPMENT TYPE CODE 
  04727 006404        CLB,INB       SET COUNT = 1 
  04730 114135        JSB ALABD,I   OUTPUT EQUIPMENT TYPE, STATUS 
* 
  04731 060173        LDA N8
  04732 071266        STA TCNT      SET TEMPORARY COUNT = -8
  04733 002400        CLA           SET EQT ENTRY WORD = ZERO 
  04734 006404        CLB,INB       SET COUNT = 1 
  04735 114135        JSB ALABD,I   OUTPUT ZERO TO EQT
  04736 035266        ISZ TCNT      SKIP - 8 ZEROES OUT 
  04737 026733        JMP *-4       CONTINUE ZERO OUTPUT
  04740 063753        LDA TFLAG     IF A TIME-OUT VALUE 
  04741 002003        SZA,RSS        IS TO BE ENTERED,
  04742 026756        JMP CLWD2      GO TO ENTER IT-
  04743 002400  CLWD1 CLA 
  04744 006404        CLB,INB       FILL OUT
  04745 114135        JSB ALABD,I     REST OF EQT ENTRY 
  04746 037753        ISZ TFLAG 
  04747 002001        RSS 
  04750 026743        JMP CLWD1 
* 
  04751 061322        LDA PPREL     GET CURRENT EQT ADDRESS 
  04752 040217        ADA P15       ADD CURRENT ENTRY LENGTH
  04753 071322        STA PPREL     SET NEW RELOCATION ADDRESS
  04754 035335        ISZ CEQT      INCR EQT ENTRY COUNT
  04755 026505        JMP SEQT      PROCESS NEXT EQT RECORD 
* 
  04756 060206  CLWD2 LDA P4
  04757 067714        LDB MES51     MES51 = ADDR:  T =
* 
  04760 016457        JSB READ
  04761 060171        LDA N5        GET T VALUE 
  04762 017626        JSB GETOC      AND CONVERT TO BINARY
  04763 026756        JMP CLWD2     INVALID ENTRY, REPEAT 
  04764 002002        SZA            IF ZERO, USE ZERO
  04765 003000        CMA           STORE -(T+1)
  04766 006404        CLB,INB        INTO EQT 
  04767 114135        JSB ALABD,I 
  04770 026743        JMP CLWD1     GO TO OUTPUT LAST EQT WORD
                      SPC 1 
  04771 063756  NOCXX LDA I.XX      C.XX NOT FOUND SO USE 
  04772 026702        JMP STCXX     I.XX ADDRESS
* 
*                                   SET DEVICE REFERENCE TABLE (SQT)
* 
  04773 014313  SSQT  JSB SPACE     NEW LINE
  04774 014313        JSB SPACE     NEW LINE
  04775 061322        LDA PPREL     GET CURRENT RELOCATION ADDRESS
  04776 071336        STA ASQT      SAVE SQT ADDRESS
  04777 002404        CLA,INA 
  05000 071337        STA CSQT      SET SQT COUNT = 1 
  05001 003400        CCA 
  05002 071327        STA LFLAG     SET 1ST DEV REF INPUT FLAG = -1 
  05003 060225        LDA P24 
  05004 065620        LDB MES26     MES26 = ADDR: *DEV REF TABLE
  05005 114102        JSB DRKEY,I   PRINT: * DEVICE REFERENCE TABLE 
* 
  05006 061337  DEVRE LDA CSQT      GET CURRENT DEV REF NO. 
  05007 003004        CMA,INA       SET TO NEG. FOR DECIMAL CONV
  05010 064456        LDB ATBUF     GET ADDRESS OF TBUF 
  05011 114137        JSB ACONV,I   CONVERT TO DECIMAL AT TBUF
  05012 061271        LDA TBUF+2    GET 2 LEAST SIGNIFICANT DIGITS
  05013 010255        AND M7400     ISOLATE UPPER CHAR
  05014 053721        CPA UASCZ     CHAR = ASCII ZERO?
  05015 060277        LDA UBLNK     YES - REPLACE WITH BLANK
  05016 070001        STA B         SAVE UPPER CHAR 
  05017 061271        LDA TBUF+2    GET 2-DIGIT DEV REF NO. 
  05020 010242        AND M177      ISOLATE LOWER CHAR
  05021 030001        IOR B         SET A = DEV REF CODE
  05022 173715        STA MES28,I   PUT DEV REF CODE IN MESSAGE 
  05023 014313        JSB SPACE     NEW LINE
  05024 060214        LDA P11 
  05025 067715        LDB MES28     MES28 = ADDR: XX = EQT #? 
  05026 016457        JSB READ      GET SQT RECORD FROM TTY 
  05027 060166        LDA N2
  05030 017567        JSB GETNA     MOVE 2 CHARS TO TBUF
  05031 053712        CPA PTERM     CHARS = /E? 
  05032 027137        JMP SINTT     YES - SET INTERRUPT TABLE 
  05033 017704        JSB GINIT     RE-INITIALIZE LBUF SCAN 
  05034 060167        LDA N3
  05035 017626        JSB GETOC     GET 2 DECIMAL DIGITS, CONVERT 
  05036 027132        JMP DRERR     INVALID DIGIT ENTERED 
  05037 073135        STA TEMPL     SAVE DEV. REF. NO.
  05040 002003        SZA,RSS       IF NO CHANNEL 
  05041 027053        JMP NOSUB     IGNOR SUBCHANNEL
  05042 063762        LDA CMFLG     COMMA ENCOUNTERED?
  05043 002002        SZA            YES - GO GET SUBCHANNEL
  05044 027053        JMP NOSUB      NO - DEFAULT IT TO ZERO
  05045 002004        INA 
  05046 017626        JSB GETOC     GET ONE OCTAL DIGIT 
  05047 027132        JMP DRERR 
  05050 001727        ALF,ALF       SET SUBCHANNEL NO.
  05051 001723        ALF,RAR        INTO BITS 13 - 11
  05052 002001        RSS 
  05053 002400  NOSUB CLA           SET SUBCHANNEL = ZERO 
  05054 073136        STA TEMPH     SAVE SUBCHANNEL NO. 
  05055 063135        LDA TEMPL     GET DEV. REF. NO. 
  05056 003004        CMA,INA       COMPLEMENT
  05057 041335        ADA CEQT      ADD NO. EQT ENTRIES 
  05060 002020        SSA           SKIP IF VALID DEV. REF NO.
  05061 027132        JMP DRERR     INVALID DEV. REF. NO. (NO EQT)
  05062 063135        LDA TEMPL     GET DEV. REF NO.
  05063 065337        LDB CSQT      GET CURRENT SQT NO. 
  05064 054267        CPB P1        FIRST ENTRY?
  05065 002001        RSS           YES - CONTINUE
  05066 054204        CPB P2        SECOND ENTRY? 
  05067 002001        RSS           YES - CONTINUE
  05070 027107        JMP SESQT     PUT OUT DEV REF NO. TO SQT
  05071 002003        SZA,RSS       SKIP IF DEV REF IS NOT ZERO 
  05072 027132        JMP DRERR     INVALID DEV. REF. NO. 
  05073 054267        CPB P1        FIRST SQT ENTRY?
  05074 002001        RSS           YES - CONTINUE (SET TTY CHANNEL)
  05075 027107        JMP SESQT     PUT OUT DEV. REF. NO. TO SQT
  05076 003004        CMA,INA       COMPLEMENT CURRENT DEV. REF. NO.
  05077 065334        LDB AEQT      GET ADDRESS OF EQT
  05100 002007        INA,SZA,RSS   SKIP - DEV. REF. NOT 1
  05101 027105        JMP *+4       SET TTY CHANNEL NO. = FIRST EQT 
  05102 044217        ADB P15       ADJUST CURRENT EQT ADDRESS
  05103 002006        INA,SZA       SKIP - EQT FOUND
  05104 027102        JMP *-2       CONTINUE CURRENT EQT SEARCH 
  05105 074512        STB TTYCH     SET EQT ADDR IN TTY CHANNEL 
  05106 063135        LDA TEMPL     GET DEV. REF. NO. 
  05107 065337  SESQT LDB CSQT      SET UP TO TEST LEGALITY OF
  05110 051474        CPA DRT2      DISK REFERENCES 
  05111 027132        JMP DRERR     ERROR - REFERENCE TO SYS DISK BY LU # 2 
  05112 054204        CPB P2        IF LU 2 SETUP 
  05113 071474        STA DRT2      SET FOR FUTURE TESTING
  05114 054204        CPB P2        IF LU 2 SET UP
  05115 002001        RSS           SKIP SUBCHANNEL 
  05116 033136        IOR TEMPH     ELSE - SET SUBCHANNEL 
  05117 051475        CPA DRT3      ILLEGAL REF TO AUX DISC?
  05120 027132        JMP DRERR     YES - TELL THE MAN
  05121 002003        SZA,RSS       IF ZERO ENTRY 
  05122 027125        JMP *+3       SKIP TEST 
  05123 054205        CPB P3        ELSE IF 3 
  05124 071475        STA DRT3      SET DRT3 FOR FUTURE TESTING 
  05125 006404        CLB,INB       SET COUNT = ONE 
  05126 114135        JSB ALABD,I   OUTPUT SQT ENTRY
  05127 035322        ISZ PPREL     INCR CURRENT RELOC ADDRESS
  05130 035337        ISZ CSQT      INCR CURRENT SQT COUNT
  05131 027006        JMP DEVRE     GET NEXT SQT ENTRY
  05132 061512  DRERR LDA ERR27     SET CODE = INVALID DEV. REF. NO.
  05133 014317        JSB ERROR     PRINT DIAGNOSTIC
  05134 027006        JMP DEVRE     REPEAT INPUT
* 
  05135 000000  TEMPL NOP 
  05136 000000  TEMPH NOP 
                      SKP 
  05137 014313  SINTT JSB SPACE     NEW LINE
  05140 014313        JSB SPACE     NEW LINE
  05141 003400        CCA 
  05142 041337        ADA CSQT      SUBTRACT 1 FROM SQT COUNT 
  05143 071337        STA CSQT      SET SQT COUNT 
* 
*                                   SET INTERRUPT TABLE (INT) 
* 
  05144 061322        LDA PPREL     GET CURRENT RELOCATION ADDR 
  05145 071340        STA AINT      SAVE INTERRUPT TABLE ADDRESS
  05146 060514        LDA DSKAD     GET CURRENT ABS. CODE DISK ADDR 
  05147 071342        STA DSKIN     SAVE INT CODE DISK ADDR 
  05150 060643        LDA DCNT      GET CURRENT ABS. CODE DBUF COUNT
  05151 071343        STA INTCN     SAVE INT CODE DISK RECORD COUNT 
  05152 060221        LDA P17 
  05153 067716        LDB MES29     MES29 = ADDR. * INT TABLE 
  05154 114102        JSB DRKEY,I   PRINT: * INTERRUPT TABLE
  05155 064462        LDB AILST     GET ADDRESS OF ILIST
  05156 075344        STB CURIL     GET CURRENT ILIST ADDRESS 
  05157 014302        JSB BUFCL     CLEAR ILIST 
* 
  05160 014412        JSB INLST     INITIALIZE LSTX 
  05161 014416  CISCN JSB LSTX      SET LST ADDRESSES 
  05162 027240        JMP NOCIC     CIC NOT FOUND IN LST
  05163 160531        LDA LST1,I    GET NAME 1,2 OF LST ENTRY 
  05164 053730        CPA CHR$C     CHARS = $C
  05165 002001        RSS           YES - CONTINUE
  05166 027161        JMP CISCN     NO - TRY NEXT LST ENTRY 
  05167 160532        LDA LST2,I    GET NAME 3,4 OF LST ENTRY 
  05170 053731        CPA CHRIC     CHARS = IC? 
  05171 002001        RSS           YES - CONTINUE
  05172 027161        JMP CISCN     NO - TRY NEXT LST ENTRY 
  05173 160533        LDA LST3,I    GET NAME 5 OF LST ENTRY 
  05174 010255        AND M7400     ISOLATE UPPER CHAR
  05175 050277        CPA UBLNK     CHAR = BLANK? 
  05176 002001        RSS           YES - CONTINUE
  05177 027161        JMP CISCN     NO - TRY NEXT LST ENTRY 
  05200 160535        LDA LST5,I    GET BP LINK ADDRESS 
  05201 033720  CIC0  IOR IJSB      ADD JSB 0,I CODE
  05202 073755        STA JSCIC     SET JSB CIC,I CODE
  05203 065316        LDB FSYBP     GET FWA BP LINKAGE
  05204 007004        CMB,INB       COMPLEMENT
  05205 075266        STB TCNT      SET TEMPORARY COUNT 
  05206 064250        LDB M2000     ADJUST FOR FIRST BP ADDRESS 
  05207 170001        STA B,I       PUT JSB CIC,I IN BP LOCATION
  05210 006004        INB           INCR CURRENT BP ADDRESS 
  05211 035266        ISZ TCNT      SKIP - ALL INT LOCATIONS FILLED 
  05212 027207        JMP *-3       CONTINUE FILLING INT LOCATIONS
  05213 064252        LDB M2004     INITIALIZE TRAP CELL FOUR 
  05214 063473        LDA HLTB4      TO HALT(B) 4 
  05215 170001        STA B,I 
  05216 064253        LDB M2006     GET ADDR OF FIRST INT LOCATION
  05217 075320        STB TBREL     SET CURRENT BP ADDRESS
* 
  05220 002400  SETIN CLA           NEW LINE
  05221 016457        JSB READ      GET INT RECORD FROM TTY 
  05222 060166        LDA N2
  05223 017567        JSB GETNA     MOVE 2 CHARS TO TBUF
  05224 053712        CPA PTERM     CHARS = /E? 
  05225 027533        JMP ENDIO     YES - I/O TABLES COMPLETE 
  05226 017704        JSB GINIT     RE-INITIALIZE LBUF SCAN 
  05227 060204        LDA P2
  05230 017626        JSB GETOC     GET 2 OCTAL DIGITS, CONVERT 
  05231 027235        JMP CHERR     INVALID INT CHANNEL NO. DIGIT 
  05232 017542        JSB GETAL     GET NEXT CHAR FROM LBUF 
  05233 050276        CPA BLANK     CHAR = COMMA? 
  05234 027242        JMP SETCH     SAVE INT CHANNEL NO.
  05235 061513  CHERR LDA ERR28     SET CODE = INVALID INT CHNL NO. 
  05236 014317        JSB ERROR     PRINT DIAGNOSTIC
  05237 027220        JMP SETIN     REPEAT INT REC INPUT
* 
  05240 061506  NOCIC LDA ERR21     SET CODE = $CIC NOT FOUND IN LST
  05241 014325        JSB IRERR     IRRECOVERABLE ERROR 
* 
  05242 060474  SETCH LDA OCTNO     GET INT CHANNEL NO. 
  05243 073754        STA INTCH     SAVE CHANNEL NO.
* 
  05244 060166        LDA N2
  05245 017567        JSB GETNA     MOVE 2 CHARS TO TBUF
  05246 053733        CPA CHREQ     CHARS = EQ? 
  05247 027261        JMP INTEQ     YES - PROCESS INT EQT RECORD
  05250 053734        CPA CHRPR     CHARS = PR? 
  05251 027314        JMP INTPR     YES - PROCESS INT PRG RECORD
  05252 053735        CPA CHREN     CHARS = EN? 
  05253 027354        JMP INTEN     YES - PROCESS INT ENT RECORD
  05254 053736        CPA CHRAB     CHARS = AB? 
  05255 027425        JMP INTAB     YES - PROCESS INT ABS RECORD
  05256 061515  IMNEM LDA ERR30     SET CODE = INVALID INT MNEMONIC 
  05257 014317        JSB ERROR     PRINT DIAGNOSTIC
  05260 027220        JMP SETIN     REPEAT INT REC INPUT
* 
  05261 060166  INTEQ LDA N2
  05262 017567        JSB GETNA     MOVE NEXT 2 CHARS TO TBUF 
  05263 053737        CPA UTCHR     CHARS = T,BLANK?
  05264 002001        RSS           YES - CONTINUE
  05265 027256        JMP IMNEM     NO - INVALID INT MNEMONIC 
  05266 060166        LDA N2
  05267 017626        JSB GETOC     GET 2 DECIMAL DIGITS, CONVERT 
  05270 027300        JMP EQUER     INVALID EQT NO. IN INT REC
  05271 064474        LDB OCTNO     GET EQT TABLE ENTRY NO. 
  05272 007007        CMB,INB,SZB,RSS  SKIP - VALID LOWER LIMIT 
  05273 027300        JMP EQUER     INVALID EQT REFERENCE 
  05274 074473        STB TCHAR     SAVE EQT NO.
  05275 045335        ADB CEQT      ADD UPPER EQT REF. NO.
  05276 006021        SSB,RSS       SKIP - INVALID UPPER LIMIT
  05277 027303        JMP TSTIQ     TEST FOR FIRST EQT REFERENCE
  05300 061516  EQUER LDA ERR31     SET CODE = INVALID EQT NO.
  05301 014317        JSB ERROR     PRINT DIAGNOSTIC
  05302 027220        JMP SETIN     REPEAT INT REC INPUT
* 
  05303 064473  TSTIQ LDB TCHAR     GET EQT REF. NO.
  05304 061334        LDA AEQT      GET ADDR OF EQT 
  05305 006007        INB,SZB,RSS   SKIP - NOT FIRST EQT REFERENCE
  05306 027312        JMP SEQTI     SET EQT ADDR IN INT TABLE 
  05307 040217        ADA P15       ADJUST FOR NEXT EQT ENTRY ADDR
  05310 006006        INB,SZB       SKIP - EQT ADDRESS FOUND
  05311 027307        JMP *-2       CONTINUE EQT SEARCH 
  05312 067755  SEQTI LDB JSCIC     GET JSB CIC CODE
  05313 027437        JMP COMIN     SET INTERRUPT TABLE, LOCATION 
* 
  05314 060166  INTPR LDA N2
  05315 017567        JSB GETNA     MOVE 2 CHARS TO TBUF
  05316 053740        CPA UGCHR     CHARS = G,BLANK?
  05317 002001        RSS           YES - CONTINUE
  05320 027256        JMP IMNEM     NO - INVALID INT MNEMONIC 
  05321 060171        LDA N5
  05322 017567        JSB GETNA     MOVE 5 CHARS TO TBUF
* 
  05323 014345        JSB INIDX     INITIALIZE IDX
  05324 014351  PRSCN JSB IDX       SET IDENT ADDRESSES 
  05325 027351        JMP PRERR     INVALID PROGRAM NAME
  05326 160517        LDA ID1,I     GET NAME 1,2 OF IDENT 
  05327 051267        CPA TBUF      CHARS EQUAL?
  05330 002001        RSS           YES - CONTINUE
  05331 027324        JMP PRSCN     TRY NEXT IDENT NAME 
  05332 160520        LDA ID2,I     GET NAME 3,4 OF IDENT 
  05333 051270        CPA TBUF+1    CHARS EQUAL?
  05334 002001        RSS           YES - CONTINUE
  05335 027324        JMP PRSCN     TRY NEXT IDENT NAME 
  05336 160521        LDA ID3,I     GET NAME 5 OF IDENT 
  05337 010255        AND M7400     ISOLATE UPPER CHAR
  05340 051271        CPA TBUF+2    CHARS EQUAL?
  05341 002001        RSS           YES - TEST FOR SYSTEM TYPE
  05342 027324        JMP PRSCN     TRY NEXT IDENT NAME 
  05343 067755        LDB JSCIC     GET JSB CIC CODE
  05344 060517        LDA ID1       GET CURRENT IDENT ADDRESS 
  05345 171344        STA CURIL,I   PUT IDENT ADDR IN ILIST 
  05346 061344        LDA CURIL     GET CURRENT ILIST ADDRESS.
  05347 035344        ISZ CURIL     INCR CURRENT ILIST ADDRESS
  05350 027437        JMP COMIN     SET INTERRUPT TABLE, LOCATION 
  05351 061517  PRERR LDA ERR32     SET CODE = INVALID PROGRAM NAME 
  05352 014317        JSB ERROR     PRINT DIAGNOSTIC
  05353 027220        JMP SETIN     REPEAT INT REC INPUT
* 
* 
  05354 060166  INTEN LDA N2
  05355 017567        JSB GETNA     MOVE 2 CHARS TO TBUF
  05356 053737        CPA UTCHR     CHARS = T, BLANK
  05357 002001        RSS           YES - CONTINUE
  05360 027256        JMP IMNEM     INVALID INT MNEMONIC
  05361 060171        LDA N5
  05362 017567        JSB GETNA     MOVE 5 CHARS TO TBUF
* 
  05363 014412        JSB INLST     INITIALIZE LSTX 
  05364 014416  ENSCN JSB LSTX      SET LST ADDRESSES 
  05365 027415        JMP ENERR     INVALID ENTRY POINT 
  05366 160531        LDA LST1,I    GET NAME 1,2 OF LST ENTRY 
  05367 051267        CPA TBUF      CHARS EQUAL?
  05370 002001        RSS           YES - CONTINUE
  05371 027364        JMP ENSCN     NO - TRY NEXT LST ENTRY 
  05372 160532        LDA LST2,I    GET NAME 3,4 OF LST ENTRY 
  05373 051270        CPA TBUF+1    CHARS EQUAL?
  05374 002001        RSS           YES - CONTINUE
  05375 027364        JMP ENSCN     NO - TRY NEXT LST ENTRY 
  05376 160533        LDA LST3,I    GET NAME 5 OF LST ENTRY 
  05377 010255        AND M7400     ISOLATE UPPER CHAR
  05400 051271        CPA TBUF+2    CHARS EQUAL?
  05401 002001        RSS           YES - CONTINUE
  05402 027364        JMP ENSCN     NO - TRY NEXT LST ENTRY 
  05403 160534        LDA LST4,I    GET IDENT ADDR
  05404 002003        SZA,RSS       SKIP - ENT IS DEFINED 
  05405 027415        JMP ENERR     INVALID ENTRY POINT 
  05406 070470        STA TIDNT     SET IDENT ADDRESS OF PROGRAM
  05407 014351        JSB IDX       SET IDENT ADDRESSES 
  05410 102000        HLT 0B        END OF IDENT LIST 
  05411 160524        LDA ID6,I     GET PROGRAM TYPE
  05412 010242        AND M177      ISOLATE TYPE
  05413 002003        SZA,RSS       SKIP - NOT SYSTEM PROGRAM 
  05414 027420        JMP SETEN     SET ENTRY POINT ADDRESS 
  05415 061520  ENERR LDA ERR33     SET CODE = INVALID ENTRY POINT
  05416 014317        JSB ERROR     PRINT DIAGNOSTIC
  05417 027220        JMP SETIN     REPEAT INT RECORD INPUT 
* 
  05420 160535  SETEN LDA LST5,I    GET BP LINK ADDRESS 
  05421 033720        IOR IJSB      ADD JSB 0,I CODE
  05422 070001        STA B 
  05423 002400        CLA           SET INT ENTRY = ZERO
  05424 027437        JMP COMIN     SET INTERRUPT TABLE, LOCATION 
* 
  05425 060166  INTAB LDA N2
  05426 017567        JSB GETNA     MOVE 2 CHARS TO TBUF
  05427 053741        CPA USCHR     CHARS = U,BLANK 
  05430 002001        RSS           YES - CONTINUE
  05431 027256        JMP IMNEM     NO - INVALID INT MNEMONIC 
  05432 060210        LDA P6
  05433 017626        JSB GETOC     GET 6 OCTAL DIGITS, CONVERT 
  05434 027523        JMP ABERR     INVALID ABS DIGIT 
  05435 002400        CLA 
  05436 064474        LDB OCTNO     GET ABSOLUTE VALUE
* 
  05437 071267  COMIN STA TBUF      SAVE INT TABLE CODE 
  05440 075270        STB TBUF+1    SAVE INT LOCATION CODE
  05441 017542        JSB GETAL     GET NEXT CHAR FROM LBUF 
  05442 050164        CPA ZERO      END OF BUFFER?
  05443 027447        JMP *+4       YES - CONTINUE
  05444 061523        LDA ERR36     SET CODE = INVALID FINAL OPRND
  05445 014317        JSB ERROR     PRINT DIAGNOSTIC
  05446 027220        JMP SETIN     GET NEXT INT RECORD 
* 
  05447 063754        LDA INTCH     GET INT CHANNEL NO. 
  05450 050206        CPA P4        SPECIAL PROCESSING
  05451 027464        JMP PFINT      IF TRAP CELL FOUR
  05452 003004        CMA,INA 
  05453 040235        ADA L2000     ADJUST FOR BP LOCATION ADDR 
  05454 041320        ADA TBREL     ADD CURRENT BP ADDRESS
  05455 002003        SZA,RSS       SKIP - NOT NEXT LOCATION
  05456 027506        JMP STINT     SET INTERRUPT TABLES, LOCATION
  05457 002020        SSA           SKIP - INVALID CHANNEL NO. ORDER
  05460 027474        JMP FILLI     FILL IN SKIPPED VALUES
  05461 061514        LDA ERR29     SET CODE = INVALID INT CHNL ORDR
  05462 014317        JSB ERROR     PRINT DIAGNOSTIC
  05463 027220        JMP SETIN     GET NEXT INTERRUPT RECORD 
* 
  05464 061267  PFINT LDA TBUF      IF TRAP CELL FOUR,
  05465 002002        SZA            ENTRY MUST BE AN 
  05466 027235        JMP CHERR      'ABS' OR AN 'ENT'
  05467 060252        LDA M2004 
  05470 065270        LDB TBUF+1    STORE INTO
  05471 174000        STB A,I        TRAP CELL FOUR 
  05472 027220        JMP SETIN     GET NEXT INTERRUPT RECORD 
* 
  05473 106004  HLTB4 OCT 106004    TRAP CELL DEFAULT VALUE 
* 
  05474 071266  FILLI STA TCNT      SET NO. OF FILL-INS REQUIRED
  05475 002400        CLA           SET INTERRUPT TABLE ENTRY = ZERO
  05476 006404        CLB,INB       SET COUNT = 1 
  05477 114135        JSB ALABD,I   OUTPUT ZERO TO INTERRUPT TABLE
  05500 035322        ISZ PPREL     INCR CURRENT INT TABLE ADDRESS
  05501 063755        LDA JSCIC     GET JSB CIC CODE
  05502 171320        STA TBREL,I   PUT JSB CIC IN INT LOCATION 
  05503 035320        ISZ TBREL     INCR CURRENT INT LOCATION ADDR
  05504 035266        ISZ TCNT      SKIP - ALL FILL-INS COMPLETE
  05505 027475        JMP FILLI+1   CONTINUE INT FILL-IN
* 
  05506 065270  STINT LDB TBUF+1    GET INT LOCATION CODE 
  05507 175320        STB TBREL,I   PUT INT LOCATION CODE IN INT LOC
  05510 035320        ISZ TBREL     INCR CURRENT BP LOCATION ADDR 
  05511 065320        LDB TBREL     GET INT LOCATION ADDR 
  05512 044235        ADB L2000     ADJUST FOR BP ADDR
  05513 007004        CMB,INB 
  05514 045316        ADB FSYBP     ADD ADDR OF FIRST SYS LINK
  05515 006021        SSB,RSS       SKIP - INT LOCATION OVERFLOW
  05516 027526        JMP NOBPO     SET INT TABLE ENTRY 
  05517 061522        LDA ERR35     SET CODE = BP INT LOC OVERFLOW
  05520 014317        JSB ERROR     PRINT DIAGNOSTIC
  05521 014313        JSB SPACE     NEW LINE
  05522 124123        JMP AFWAP,I   GET FWA BP LINKAGE
* 
  05523 061521  ABERR LDA ERR34     SET CODE = INVALID ABS DIGIT
  05524 014317        JSB ERROR     PRINT DIAGNOSTIC
  05525 027220        JMP SETIN     REPEAT INT REC INPUT
* 
  05526 061267  NOBPO LDA TBUF      GET INT TABLE CODE
  05527 006404        CLB,INB       SET COUNT = 1 
  05530 114135        JSB ALABD,I   OUTPUT INT TABLE ENTRY
  05531 035322        ISZ PPREL     INCR CURRENT RELOCATION ADDR
  05532 027220        JMP SETIN     GET NEXT INT TABLE RECORD 
  05533 061340  ENDIO LDA AINT      GET ADDRESS OF INT
  05534 003004        CMA,INA 
  05535 041322        ADA PPREL     ADD CURRENT RELOCATION ADDR 
  05536 071341        STA CINT      SAVE NO. INT ENTRIES
  05537 014313        JSB SPACE     NEW LINE
  05540 014313        JSB SPACE     NEW LINE
  05541 126472        JMP GENIO,I   RETURN - CONTINUE LOADING 
                      SKP 
* 
*                                   GET CHAR FROM LBUF, RETURN IN A 
* 
*  THE FOLLOWING SUBROUTINE SUPPLIES THE CHARACTERS FOR 
*  GETNA AND GETOC. 
* 
*  CALLING SEQUENCE:
*    A = IGNORED
*    B = IGNORED
*    JSB GETAL
* 
*  RETURN:
*    A = CURRENT CHARACTER
*    B = DESTROYED
* 
  05542 000000  GETAL NOP 
  05543 063762        LDA CMFLG     CMFLG = COMMA-IN FLAG 
  05544 002003        SZA,RSS       SKIP IF NO COMMA IN 
  05545 027565        JMP BLRET     RETURN BLANK
  05546 067763        LDB BUFUL     GET U/L FLAG
  05547 160540  IGNOR LDA CURAL,I   GET CHAR FROM LBUF
  05550 006002        SZB           SKIP IF LOWER CHAR
  05551 001727        ALF,ALF       ROTATE TO LOWER 
  05552 010243        AND M377      ISOLATE LOWER CHAR
  05553 050164        CPA ZERO      END OF BUFFER?
  05554 127542        JMP GETAL,I   YES - RETURN WITH ZERO
  05555 007002        CMB,SZB       RESET U/L, SKIP IF UPPER CHAR 
  05556 034540        ISZ CURAL     INCR LBUF ADDRESS 
  05557 050276        CPA BLANK     CHAR = BLANK? 
  05560 027547        JMP IGNOR     IGNORE BLANKS 
  05561 077763        STB BUFUL     SAVE U/L FLAG 
  05562 053717        CPA COMMA     CHAR = COMMA? 
  05563 037762        ISZ CMFLG     RESET FLAG TO SHOW COMMA IN 
  05564 127542        JMP GETAL,I   RETURN WITH NON-BLANK CHAR
  05565 060276  BLRET LDA BLANK     REPLACE WITH BLANK CHAR 
  05566 127542        JMP GETAL,I   RETURN WITH BLANK 
                      SKP 
* 
*                                   MOVE ALPHA FROM LBUF TO TBUF
* 
*  THE FOLLOWING SUBROUTINE MOVES THE CHARACTERS FROM LBUF
*  TO TBUF. 
* 
*  CALLING SEQUENCE:
*    A = MAX. NO. OF CHARACTERS TO BE MOVED.  THE SIGN OF A 
*        DESIGNATES THE POSITION OF THE FIRST CHARACTER.
*        IF THE SIGN OF A IS POSITIVE, THE FIRST CHAR IS TO 
*        BE MOVED TO THE LOW CHAR IN TBUF.  IF A IS NEGATIVE, THE 
*        FIRST CHARACTER IS TO BE MOVED TO THE UPPER CHAR IN TBUF.
*    B = IGNORED
*    JSB GETNA
* 
*  RETURN:
*    A = FIRST CHAR (IF ONLY 1 CHAR) OR FIRST 2 CHARS MOVED.
*    B = DESTROYED
* 
  05567 000000  GETNA NOP 
  05570 002321        CCE,SSA,RSS   SET E = 1 (EVEN) POSITION 
  05571 003104        CMA,CLE,INA   SET E = 0 (ODD) POSITION - COMP 
  05572 070472        STA MAXC      MAXC = MAXIMUM NO. CHARS
  05573 060456        LDA ATBUF     ATBUF = ADDR OF TBUF
  05574 071265        STA CURAT     SET CURRENT TBUF ADDRESS
  05575 006400        CLB 
  05576 075267        STB TBUF      CLEAR WORD 1 OF TBUF
  05577 003400        CCA 
  05600 073762        STA CMFLG     SET COMMA-IN FLAG 
  05601 002041        SEZ,RSS       SKIP - ODD POSITION 
  05602 027614        JMP OCHAR     BEGIN WITH ODD CHARACTER
  05603 017542  NEXTC JSB GETAL     GET CHAR FROM LBUF
  05604 050164        CPA ZERO      END OF BUFFER?
  05605 060276        LDA BLANK     YES - REPLACE CHAR WITH BLANK 
  05606 001727        ALF,ALF       ROTATE TO UPPER A 
  05607 171265        STA CURAT,I   SET CHARACTER IN TBUF 
  05610 034472        ISZ MAXC      CHECK FOR ALL CHARS IN
  05611 027614        JMP OCHAR     GET ODD CHAR FROM LBUF
  05612 061267        LDA TBUF      GET FIRST 2 TRANSFERRED CHARS 
  05613 127567        JMP GETNA,I   YES - RETURN
  05614 017542  OCHAR JSB GETAL     GET CHAR FROM LBUF
  05615 050164        CPA ZERO      END OF BUFFER?
  05616 060276        LDA BLANK     REPLACE ZERO CHAR WITH BLANK
  05617 131265        IOR CURAT,I   ADD TO UPPER CHAR IN TBUF 
  05620 171265        STA CURAT,I   SET CHARS IN TBUF 
  05621 035265        ISZ CURAT     INCR TBUF ADDRESS 
  05622 034472        ISZ MAXC      CHECK FOR ALL CHARS IN
  05623 027603        JMP NEXTC     NO - TRY NEXT UPPER CHAR
  05624 061267        LDA TBUF      GET FIRST 2 TRANSFERRED CHARS 
  05625 127567        JMP GETNA,I   RETURN
                      SKP 
* 
*                                   CONVERT OCT/DEC ASCII TO BINARY 
* 
*  THE GETOC SUBROUTINE CONVERTS THE NEXT CHARACTERS IN LBUF FROM 
*  ASCII (DECIMAL OR OCTAL) TO THEIR BINARY VALUE.
* 
*  CALLING SEQUENCE:
*    A = MAX. NO. OF CHARS IN CONVERSION REQUEST.  IF A IS
*        POSITIVE, THE REQUEST IS FOR OCTAL; IF A IS NEGATIVE,
*        THE REQUEST IS FOR DECIMAL.
*    B = IGNORED
*    JSB GETOC
* 
*  RETURN:
*    (N+1): INVALID DIGIT OR OVERFLOW IN CONVERSION 
*    (N+2): A = CONVERTED NO. 
*           B = DESTROYED 
* 
  05626 000000  GETOC NOP 
  05627 064173        LDB L10       GET OCTAL RANGE 
  05630 002020        SSA           SKIP IF OCTAL REQUEST 
  05631 064175        LDB L12       GET DECIMAL RANGE 
  05632 077760        STB DRANG     SET DIGIT RANGE 
  05633 002021        SSA,RSS       SKIP IF DECIMAL REQUEST 
  05634 003004        CMA,INA       SET REQUEST COUNT TO NEGATIVE 
  05635 070472        STA MAXC      SET MAX NO. OF DIGITS 
  05636 003400        CCA 
  05637 073761        STA DIFLG     SET DATA-IN FLAG = NO DATA IN 
  05640 073762        STA CMFLG     SET COMMA-IN FLAG 
  05641 002400        CLA 
  05642 070474        STA OCTNO     OCTNO = OCTAL NUMBER
  05643 017542  GETNX JSB GETAL     GET CHAR FROM LBUF
  05644 050164        CPA ZERO      CHAR = ZERO? (END OF BUFFER)
  05645 027701        JMP ENDOC     YES - RETURN
  05646 050276        CPA BLANK     CHAR = BLANK? (COMMA IN)
  05647 027701        JMP ENDOC     YES - RETURN
  05650 040234        ADA L60       SUBTRACT 60B FROM CHAR
  05651 070473        STA TCHAR     SAVE CHAR 
  05652 002020        SSA           SKIP IF VALID LOWER LIMIT 
  05653 027700        JMP DGERR     INVALID DIGIT 
  05654 043760        ADA DRANG     ADD DIGIT RANGE 
  05655 000040        CLE, SA,RSS   CLEAR E - SKIP IF VALID DIGIT 
  05656 027700        JMP DGERR     INVALID DIGIT 
  05657 037761        ISZ DIFLG     INCR DATA-IN FLAG, SKIP 
  05660 000000        NOP 
  05661 060474        LDA OCTNO     GET PREVIOUS OCTAL NO.
  05662 040000        ADA A         SET A = OCTNO X 2 
  05663 040000        ADA A         SET A = OCTNO X 4 
  05664 067760        LDB DRANG     GET DIGIT RANGE 
  05665 054175        CPB L12       RANGE = DECIMAL?
  05666 040474        ADA OCTNO     SET A = OCTNO X 5 
  05667 040000        ADA A         SET A = OCTNO X 10/8
  05670 040473        ADA TCHAR     SET A = NEW OCTAL NO. 
  05671 070474        STA OCTNO     SAVE NEW OCTAL NO.
  05672 002040        SEZ           TEST FOR OVERFLOW 
  05673 027700        JMP DGERR     INVALID NO. 
  05674 034472        ISZ MAXC      SKIP IF ALL DIGITS PROCESSED
  05675 027643        JMP GETNX     GET NEXT DECIMAL DIGIT
  05676 037626        ISZ GETOC     INCR RETURN ADDRESS 
  05677 060474        LDA OCTNO     GET OCTAL EQUIVALENT
  05700 127626  DGERR JMP GETOC,I   RETURN
  05701 037761  ENDOC ISZ DIFLG     SKIP - NO DATA IN 
  05702 027676        JMP *-4       DATA IN - NORMAL RETURN 
  05703 127626        JMP GETOC,I   RETURN - ERROR
                      SKP 
* 
*                                   INITIALIZE CHAR TRANSFER
* 
*  THE GINIT SUBROUTINE SETS THE CURRENT ADDRESS AND UPPER/LOWER
*  FLAG FOR SCANNING LBUF.
* 
*  CALLING SEQUENCE:
*    A = IGNORED
*    B = IGNORED
*    JSB GINIT
* 
*  RETURN : CONTENTS OF A AND B ARE DESTROYED 
* 
  05704 000000  GINIT NOP 
  05705 060451        LDA ALBUF     ALBUF = ADDR OF LBUF
  05706 070540        STA CURAL     SET CURRENT LBUF ADDRESS
  05707 007400        CCB 
  05710 077763        STB BUFUL     BUFUL = BUFFER U/L FLAG 
  05711 127704        JMP GINIT,I   RETURN
                      SKP 
* 
* 
  05712 027505  PTERM ASC 1,/E
* 
  05713 005764  MES24 DEF MS24
  05714 005771  MES51 DEF MS51
  05715 005773  MES28 DEF MS28
  05716 006001  MES29 DEF MS29
* 
  05717 000054  COMMA OCT 054       COMMA 
  05720 114000  IJSB  JSB 0,I       I-JSB CODE FOR INTERRUPT LOCS 
  05721 030000  UASCZ OCT 30000     UPPER ASCII ZERO CHAR 
  05722 000104  CHARD OCT 104       ASCII CHAR D
  05723 000102  CHARB OCT 102       ASCII CHAR B
  05724 000124  CHART OCT 124       ASCII CHAR T
  05725 040000  BIT14 OCT 40000     BIT 14 = 1
  05726 044456  IDEC  ASC 1,I.
  05727 041456  CDEC  ASC 1,C.
  05730 022103  CHR$C ASC 1,$C
  05731 044503  CHRIC ASC 1,IC
  05732 053122  CHAVR ASC 1,VR
  05733 042521  CHREQ ASC 1,EQ
  05734 050122  CHRPR ASC 1,PR
  05735 042516  CHREN ASC 1,EN
  05736 040502  CHRAB ASC 1,AB
  05737 052040  UTCHR ASC 1,T 
  05740 043440  UGCHR ASC 1,G 
  05741 051440  USCHR ASC 1,S 
* 
  05742         TEMPE BSS 1         PARAMETER ERROR CODE
  05743         PARNO BSS 1         PARAMETER RECORD LENGTH 
* 
  05744         IOADD BSS 1         I/O ADDR (CHANNEL NO.) IN EQT 
  05745         IODMA BSS 1         I/O DMA FLAG IN EQT 
  05746         IOBUF BSS 1         I/O BUFFERING FLAG IN EQT 
  05747         IOTYP BSS 1         I/O DRIVER TYPE IN EQT (OCTAL)
  05750         ASTYP BSS 1         I/O DRIVER TYPE IN EQT (ASCII)
  05751         DFLAG BSS 1         DMA-IN FLAG FOR EQT 
  05752         BFLAG BSS 1         BUFFERING-IN FLAG FOR EQT 
  05753         TFLAG BSS 1         TIME-OUT ENTRY FLAG FOR EQT 
  05754         INTCH BSS 1         INT RECORD CHANNEL NO.
  05755         JSCIC BSS 1         JSB CIC,I CODE FOR INTERRUPT LOC
  05756         I.XX  BSS 1         DRIVER ENTRY POINT
  05757         C.XX  BSS 1         DRIVER EXIT POINT 
* 
  05760         DRANG BSS 1         DIGIT RANGE 
  05761         DIFLG BSS 1         DATA-IN FLAG = -1/0 = NOT IN/IN 
  05762         CMFLG BSS 1         COMMA FLAG = -1/0 = NOT IN/IN 
  05763         BUFUL BSS 1         BUFFER U/L FLAG 
  05764 050101  MS24  ASC 5,PARAMETERS
  05765 051101  
  05766 046505  
  05767 052105  
  05770 051123  
  05771 020124  MS51  ASC 2, T =
  05772 020075  
  05773 020040  MS28  ASC 6,   =EQT #?
  05774 020075  
  05775 042521  
  05776 052040  
  05777 021477  
  06000 020040  
  06001 025040  MS29  ASC 9,* INTERRUPT TABLE 
  06002 044516  
  06003 052105  
  06004 051122  
  06005 052520  
  06006 052040  
  06007 052101  
  06010 041114  
  06011 042440  
                      SKP 
* 
*                                   LOAD ABSOLUTE SYSTEM
* 
*  THIS SECTION OF CODE CONTROLS THE GENERATION OF
*  THE ABSOLUTE CODE FOR THE SYSTEM.  EACH PROGRAM
*  IS LOADED BY TYPE AS FOLLOWS:
* 
*    (1) SYSTEM 
*    (2) RESIDENT LIBRARY 
*    (3) RT RESIDENTS 
*    (4) RT DISK RESIDENTS
*    (5) BG RESIDENTS 
*    (6) BG DISK RESIDENTS (AND BG SEGMENTS)
* 
*  EACH TYPE OF PROGRAM IS LOADED IN THE FOLLOWING MANNER:
* 
*  (1) THE IDENTIFICATION BLOCK FOR THE PROGRAM IS LOCATED
*  IN IDENT.  A CALL TO LOAD IS EXECUTED TO LOAD THIS PROGRAM AND 
*  ALL CALLED SUBROUTINES.  IF THE PROGRAM IS DISK RESIDENT,
*  THE BASE PAGE SECTION OF CODE IS WRITTEN ON THE DISK 
*  IMMEDIATELY AFTER THE MAIN SECTION OF CODE.  IF THE
*  PROGRAM IS RT DISK RESIDENT, THE BOUNDARIES OF THE LARGEST 
*  SECTION OF BASE PAGE AND PROGRAM ARE SAVED.  IF THE PROGRAM IS 
*  A USER PROGRAM (OTHER THAN SYSTEM USER PROGRAM) AN ID SEGMENT IS 
*  GENERATED.  FINALLY, THE BASE PAGE LINKAGE ADDRESSES ARE MADE
*  UNAVAILABLE TO SUBSEQUENT PROGRAMS IF THE PROGRAM IS DISK RESIDENT.
* 
*  THE ALLOCATION OF MEMORY TO THE SYSTEM IS GIVEN BELOW: 
* 
                      SKP 
**************************************************
*                                                *
*                                                *
*            BG DISK RESIDENTS                   *
*                                                *
*                                                *
**************************************************
*                                                *
*                                                *
*                BG RESIDENTS                    *
*                                                *
*                                                *
**************************************************
*                 BG COMMON                      *
**************** BG BOUNDARY *********************
*                                                *
*                                                *
*          SYSTEM AVAILABLE MEMORY               *
*                                                *
*                                                *
**************************************************
*                                                *
*                                                *
*              RT DISK RESIDENTS                 *
*                                                *
*                                                *
**************************************************
*                                                *
*                                                *
*                 RT RESIDENTS                   *
*                                                *
*                                                *
**************************************************
*                  RT COMMON                     *
***************** RT BOUNDARY ********************
*                                                *
*              RESIDENT LIBRARY                  *
*                                                *
**************************************************
*                                                *
*             DISK ALLOCATION TABLE              *
*                  ID SEGMENTS                   *
*                   KEYWORDS                     *
*                 SYSTEM TABLES                  *
*                                                *
**************************************************
*                                                *
*                                                *
*                 RT EXECUTIVE                   *
*                                                *
*                                                *
********************* 2000 ***********************
*                                                *
*               BASE PAGE LINKAGES               *
*                                                *
**************************************************
                      SKP 
*                                   SET FWA BP LINKAGE
  06012 014313  FWENT JSB SPACE                                    $
  06013 060217        LDA P15                                      $
  06014 067652        LDB MES27     MES27 = ADDR: FWA BP LINKAGE? 
  06015 114157        JSB AREAD,I    PRINT AND GET REPLY
  06016 060206        LDA P4
  06017 114121        JSB AGETO,I   GET 4 OCTAL DIGITS, CONVERT 
  06020 026024        JMP LNKER     INVALID DIGIT ENTERED 
  06021 114117        JSB AGETA,I   GET NEXT CHAR FROM LBUF 
  06022 050164        CPA ZERO      END OF BUFFER?
  06023 026027        JMP SETFB     YES - SET FWA BP LINKAGE
  06024 063552  LNKER LDA ERR23     GET ERROR CODE FOR INVALID REPLY
  06025 014317        JSB ERROR     PRINT DIAGNOSTIC
  06026 026012        JMP FWENT     REPEAT MESSAGE
  06027 064474  SETFB LDB OCTNO     GET FWA BP
  06030 006003        SZB,RSS       SKIP - VALID (NON-ZERO) FWA BP
  06031 026024        JMP LNKER     REPEAT FWA BP LINKAGE INPUT 
  06032 075316        STB FSYBP     SET ADDR OF FIRST SYS LINK
  06033 075053        STB BPMAX     INITIALIZE NEXT AVAILABLE LINK POINTER
  06034 014313        JSB SPACE     NEW LINE
* 
*                                   CLEAR LST WORD 5
  06035 014412        JSB INLST     INITIALIZE LST ADDRESSES
  06036 014416  CLLST JSB LSTX      SET LST ADDRESSES 
  06037 026046        JMP CLRID-1   CLEAR USAGE FLAGS 
  06040 002400        CLA 
  06041 170535        STA LST5,I    CLEAR LST WORD 5
  06042 160533        LDA LST3,I    GET WORD 3 OF LST ENTRY 
  06043 010255        AND M7400     ISOLATE UPPER CHARACTER 
  06044 170533        STA LST3,I    SET LST WORD 3 WITH NO ORDINAL
  06045 026036        JMP CLLST     CONTINUE CLEARING LST 
* 
*                                   CLEAR PROGRAM USAGE FLAGS 
  06046 014345        JSB INIDX     INITIALIZE IDENT ADDRESSES
  06047 014351  CLRID JSB IDX       SET IDENT ADDRESSES 
  06050 026055        JMP IDCLR     ALL IDENT FLAGS CLEAR 
  06051 160521        LDA ID3,I     GET USAGE FLAG
  06052 010255        AND M7400     SET FLAG = ZERO 
  06053 170521        STA ID3,I     SET CLEARED USAGE FLAG
  06054 026047        JMP CLRID     CLEAR NEXT IDENT FLAG 
*                                   CLEAR PAGE 1 FOR INDIRECT LINKS 
  06055 060235  IDCLR LDA L2000 
  06056 070463        STA WDCNT     SET WORD COUNT = 2000(8)
  06057 002400        CLA 
  06060 064250        LDB M2000     GET ADDRESS OF PAGE 1 
  06061 170001  CLRBP STA B,I       CLEAR WORD IN BASE PAGE AREA
  06062 006004        INB           INCR PAGE ADDRESS 
  06063 034463        ISZ WDCNT     SKIP - AREA CLEARED 
  06064 026061        JMP CLRBP     CONTINUE CLEARING 
                      SKP 
* 
*                                   LOAD INITIALIZATION 
  06065 002400        CLA 
  06066 071471        STA LIBFG     SET LIB FLAG TO SHOW NOT LIBRARY
  06067 071314        STA KEYCT                                    $
  06070 071323        STA RELAD     CLEAR RELOCATION ADDR FOR LABDO 
  06071 070450        STA COMAD     CLEAR COMMON RELOC BASE 
  06072 071315        STA PTYPE     SET PROGRAM TYPE = SYSTEM 
  06073 071047        STA URBP      CLEAR UPPER RESIDENR BP BOUND 
  06074 071050        STA LBBP      CLEAR LOW BACKGROUND BP BOUND 
  06075 071051        STA UBBP      CLEAR HIGH BACKGROUND BP BOUND
  06076 061316        LDA FSYBP     GET FIRST WORD AVAIL BP LINKAGE 
  06077 071046        STA LRBP      CLEAR LOW RESIDENT BP BOUND 
  06100 071321        STA PBREL     SET BP RELOC ADDR 
  06101 060250        LDA M2000 
  06102 071322        STA PPREL     SET PROGRAM RELOC ADDR
  06103 073746        STA LRMAN     SET LOWER RESIDENT MAIN ADDR
  06104 060202        LDA N64 
  06105 070643        STA DCNT      INITIALIZE ABSOLUTE OUTPUT COUNT
  06106 064452        LDB ADBUF     GET ADDRESS OF DBUF 
  06107 074642        STB CURAD     SET CURRENT DBUF ADDRESS
  06110 060301        LDA DSKAB     GET INITIAL ABSOLUTE DISK ADDR
  06111 070514        STA DSKAD     SET CURRENT ABSOLUTE DISK ADDR
  06112 073745        STA DSKBP     SET INITIAL BP ADDRESS
* 
  06113 060250        LDA M2000     GET UPPER ADDRESS OF BASE PAGE
  06114 073744        STA UBPSY     SAVE UPPER BP DISK ADDRESS
  06115 064204        LDB P2        GET LOWER ADDRESS OF BASE PAGE
  06116 077743        STB LBPSY     SAVE LOWER BP DISK ADDRESS
  06117 114131        JSB ABPOT,I   OUTPUT RESIDENT BP CODE 
  06120 060514        LDA DSKAD     GET CURRENT DISK ADDRESS
  06121 073750        STA DSKRR     SET MAIN RESIDENT DISK ADDRESS
                      SKP 
* 
*                                   LOAD SYSTEM 
  06122 014313        JSB SPACE     NEW LINE
  06123 060210        LDA P6
  06124 067563        LDB MES12     MES12 = ADDR: SYSTEM
  06125 017533        JSB SETHD     PRINT HEADING, INITIALIZE IDX 
  06126 114134  SYLD  JSB AIDSN,I   SCAN IDENTS 
  06127 026141        JMP SYEND     END OF IDENTS 
  06130 164521        LDB ID3,I     GET USAGE FLAG
  06131 004010        SLB, NB       SKIP IF UNUSED
  06132 026126        JMP SYLD      IGNORE USED PROGRAM 
  06133 174521        STB ID3,I     SET WORD 3 WITH USAGE FLAG
  06134 114127        JSB ALOAD,I   INITIATE AND LOAD MAIN PROGRAM
  06135 017543        JSB INCAD     UPDATE BP, PROG RELOC ADDR
  06136 061320        LDA TBREL     GET CURRENT BP ADDRESS
  06137 071047        STA URBP      SET UPPER RESIDENT BP BOUND 
  06140 026126        JMP SYLD      PROCESS NEXT SYSTEM PROGRAM 
* 
  06141 114147  SYEND JSB ANOTS,I   TEST FOR PROGRAMS LOADED
  06142 014313        JSB SPACE     NEW LINE
  06143 114116        JSB AGNIO,I   SET I/O TABLES
* 
*                                   MOVE DBUF TO KBUF 
  06144 060514        LDA DSKAD     GET CURRENT ABSOLUTE DISK ADDR
  06145 071311        STA DSKEY     SAVE DISK ADDR FOR KEYWORDS 
  06146 064455        LDB AKBUF     GET ADDRESS OF KBUF 
  06147 114142        JSB AMOVE,I   MOVE DBUF TO KBUF FOR KEYWORDS
  06150 071164        STA KCNT      SET CURRENT KBUF COUNT
  06151 040232        ADA P64 
  06152 040455        ADA AKBUF     SET A = CURRENT KBUF ADDRESS
  06153 071163        STA CURAK     SET CURRENT KBUF ADDRESS
  06154 064455        LDB AKBUF     CLEAR 
  06155 014302        JSB BUFCL       KBUF
* 
*                                   OUTPUT SPACE FOR KEYWORDS 
  06156 061322        LDA PPREL     GET CURRENT PROGRAM RELOC ADDR
  06157 073767        STA KEYAD     SET CURRENT KEYWORD ADDRESS 
  06160 041313        ADA KEYCN     ADD TOTAL KEYWORD COUNT 
  06161 071322        STA PPREL     SET NEW RELOC ADDRESS FOR ID SEG
  06162 071317        STA SYSAD     SET INITIAL ID SEGMENT ADDRESS
  06163 073773        STA IDSAD     SET ADDR OF FIRST ID SEG
  06164 003004        CMA,INA 
  06165 043767        ADA KEYAD     SET A = TOTAL KEYWORD LENGTH
  06166 071266        STA TCNT      SET KEYWORD LENGTH
  06167 002400        CLA 
  06170 006404        CLB,INB       SET COUNT = 1 
  06171 114135        JSB ALABD,I   OUTPUT SPACE FOR KEYWORD TO DISK
  06172 035266        ISZ TCNT      SKIP - SPACE RESERVED FOR KEYS
  06173 026167        JMP *-4       CONTINUE RESERVING KEYWORD SPACE
* 
*                                   TRANSFER DBUF TO IBUF 
  06174 060514        LDA DSKAD     GET CURRENT DISK ADDRESS
  06175 071312        STA DSKID     SET DISK ID ADDRESS 
  06176 070475        STA DSKSY     SET INITIAL ID SEGMENT DISK ADDR
  06177 064454        LDB AIBUF     GET ADDRESS OF IBUF 
  06200 114142        JSB AMOVE,I   MOVE DBUF TO IBUF FOR ID SEGMENT
  06201 071045        STA ICNT      SET CURRENT IBUF COUNT
  06202 040232        ADA P64       SET A = NUMBER WORDS IN LBUF
  06203 070505        STA IDSP      SAVE ID SEGMENT POSITION      $$
  06204 040454        ADA AIBUF     ADD ADDRESS OF IBUF 
  06205 071044        STA CURAI     SET CURRENT IBUF ADDRESS
  06206 064454        LDB AIBUF     CLEAR 
  06207 014302        JSB BUFCL      IBUF 
* 
*                                   SAVE SPACE FOR ID SEGS,DISK DICT
  06210 061306        LDA SICNT     GET SHORT ID SEGMENT COUNT
  06211 065322        LDB PPREL     GET CURRENT RELOCATION ADDRESS
  06212 003007        CMA,INA,SZA,RSS  COMPLEMENT, SKIP IF NOT ZERO 
  06213 026217        JMP NOSID     NO SHORT ID SEGMENTS
  06214 044223        ADB P22       ADJUST FOR SHORT ID SEG LENGTH
  06215 002006        INA,SZA       SKIP - SET PPREL FOR LONG SEGS
  06216 026214        JMP *-2       CONTINUE COUNTING SHORT ID SEGS 
  06217 061305  NOSID LDA LICNT     GET LONG ID SEGMENT COUNT 
  06220 003004        CMA,INA       SET TOTAL LONG ID SEG LENGTH
  06221 044227        ADB P28       ADJUST LENGTH FOR LONG ID SEG 
  06222 002006        INA,SZA       SKIP - RESERVE SPACE FOR ID SEGS
  06223 026221        JMP *-2       CONTINUE COUNTING LONG ID SEGS
  06224 077764        STB ADICT     SAVE ADDR OF DISK DICTIONARY
  06225 044476        ADB DSIZE    ADJUST FOR DISC DICT LENGTH
  06226 044501        ADB DAUXN         + AUX DISC LENGTH 
  06227 075322        STB PPREL     SAVE NEW MAIN RELOCATION ADDRESS
  06230 077771        STB LBCAD     SAVE LIBRARY CODE ADDRESS 
  06231 007004        CMB,INB       COMPLEMENT
  06232 045317        ADB SYSAD     ADD INITIAL ID SEGMENT ADDRESS
  06233 075266        STB TCNT      SAVE TOTAL KEYWORD, ID LENGTH 
  06234 002400        CLA 
  06235 006404        CLB,INB       SET COUNT FOR 1 WORD
  06236 114135        JSB ALABD,I   OUTPUT ZERO 
  06237 035266        ISZ TCNT      SKIP - ALL SPACE RESERVED 
  06240 026234        JMP *-4       REPEAT ZERO OUTPUT
* 
  06241 003400        CCA           SET LIB FLAG TO SHOW LIB LOADING
  06242 071471        STA LIBFG     SO ONLY TYPE  6 PROGRAMS WILL LOAD
  06243 114161        JSB ALRT6,I   GO CLEAR LOAD FLAGS FOR TYPE 6 PGMS 
  06244 002404        CLA,INA       SET TO GET TYPE 6 USED
  06245 071315        STA PTYPE     WITH RT-RESIDENTS 
  06246 060514        LDA DSKAD     GET CURRENT DISK ADDRESS
  06247 073757        STA DSKLC     SAVE DISK ADDR OF LIBRARY CODE
* 
                      SKP 
*                                   LOAD LIBRARY
  06250 060211        LDA P7
  06251 067567        LDB MES13     MES13 = ADDR: LIBRARY 
  06252 017533        JSB SETHD     PRINT HEADING, INITIALIZE IDX 
  06253 114134  LDLB  JSB AIDSN,I   SCAN IDENTS 
  06254 026265        JMP LBEND     END OF IDENTS 
  06255 164521        LDB ID3,I     GET USAGE FLAG
  06256 004010        SLB, NB       SKIP IF UNUSED LIBRARY ROUTINE
  06257 026253        JMP LDLB      IGNORE USED PROGRAM 
  06260 114127        JSB ALOAD,I   INITIATE AND LOAD MAIN PROGRAM
  06261 017543        JSB INCAD     UPDATE BP, PROG RELOC ADDR
  06262 061320        LDA TBREL     GET CURRENT BASE PAGE ADDRESS 
  06263 071047        STA URBP      SET UPPER RESIDENT BP BOUND 
  06264 026253        JMP LDLB      PROCESS MEXT LIBRARY PROGRAM
* 
  06265 060206  LBEND LDA P4        WAS LIB LOAD FOR
  06266 051315        CPA PTYPE     BACKGROUND RES? 
  06267 026274        JMP COMTS     YES; DONE 
  06270 071315        STA PTYPE     NO; SET FOR BACKGROUND RES
  06271 060467        LDA BIDNT     RESET IDX 
  06272 071332        STA CIDNT     TO START OF LIST
  06273 026253        JMP LDLB      GO CHECK FOR BACK GROUND RES LIB
                      SPC 1 
  06274 002400  COMTS CLA           CLEAR LIB LOAD FLAG 
  06275 071471        STA LIBFG 
  06276 014313        JSB SPACE 
  06277 114160        JSB DEMOT,I   DEMOT UN CALLED TYPE 6 TO TYPE 7
  06300 114147        JSB ANOTS,I   TEST FOR PROGRAMS LOADED
  06301 014313        JSB SPACE     NEW LINE
  06302 061322        LDA PPREL     GET CURRENT PROG RELOCATION BASE
  06303 073770        STA RTCAD     SAVE RT LOAD ADDRESS
  06304 065307        LDB COMRT     GET RESIDENT COMMON LENGTH
  06305 006003        SZB,RSS       SKIP IF NON-ZERO
  06306 026332        JMP COMRZ     IGNORE ZERO COMMON
* 
*                                   PUT OUT HALTS FOR RT COMMON 
  06307 061322        LDA PPREL     GET CURRENT PROG RELOC ADDR 
  06310 070450        STA COMAD     SET RESIDENT COMMON BASE
  06311 071323        STA RELAD     SET CURRENT RELOCATION ADDRESS
  06312 044000        ADB A 
  06313 075322        STB PPREL     SET NEW PROG RELOC ADDR 
  06314 067575        LDB MES14+1   GET MESSAGE ADDRESS 
  06315 114137        JSB ACONV,I   CONVERT TO DECIMAL IN MESSAGE 
  06316 060220        LDA P16 
  06317 067574        LDB MES14     MES14 = ADDR: RT COM
  06320 114102        JSB DRKEY,I   PRINT LISTING 
  06321 014313        JSB SPACE     NEW LINE
  06322 065307        LDB COMRT     GET RT COM LENGTH 
  06323 007004        CMB,INB 
  06324 075266        STB TCNT      SET RT COM LENGTH 
  06325 060327        LDA HLT0      GET HALT CODE FOR RT COM
  06326 006404        CLB,INB       SET COUNT = 1 
  06327 114135        JSB ALABD,I   OUTPUT HALT CODE FOR COMMON 
  06330 035266        ISZ TCNT      SKIP - RT COM FILLED WITH HALTS 
  06331 026325        JMP *-4       CONTINUE FILLING RT COMMON
  06332 002404  COMRZ CLA,INA 
  06333 071315        STA PTYPE     SET PROGRAM TYPE = RT RESIDENT
                      SKP 
* 
*                                   LOAD RT RESIDENTS 
  06334 060215        LDA P12 
  06335 067606        LDB MES15     MES15 = ADDR: RT RESIDENTS
  06336 017533        JSB SETHD     PRINT HEADING, INITIALIZE IDX 
  06337 114134  RRLD  JSB AIDSN,I   SCAN IDENTS 
  06340 026356        JMP RREND     END OF IDENTS 
  06341 002041        SEZ,RSS       SKIP IF MAIN
  06342 026337        JMP RRLD      IGNORE SUB
  06343 164521        LDB ID3,I     GET USAGE FLAG
  06344 004010        SLB, NB       SKIP - PROGRAM NOT LOADED 
  06345 026337        JMP RRLD      IGNORE LOADED PROGRAM 
  06346 174521        STB ID3,I     SET NEW USAGE FLAG
  06347 114127        JSB ALOAD,I   INITIATE AND LOAD MAIN PROGRAM
  06350 002400        CLA 
  06351 114143        JSB AGEND,I   GENERATE ID SEGMENT, KEYWORD
  06352 017543        JSB INCAD     UPDATE BP, PROG RELOC ADDR
  06353 061320        LDA TBREL     GET CURRENT BASE PAGE ADDRESS 
  06354 071047        STA URBP      SET UPPER RESIDENT BP BOUND 
  06355 026337        JMP RRLD      PROCESS NEXT RT RESIDENT
* 
  06356 114147  RREND JSB ANOTS,I   TEST FOR PROGRAMS LOADED
  06357 014313        JSB SPACE     NEW LINE
  06360 061322        LDA PPREL     GET CURRENT PROG RELOCATION BASE
  06361 073747        STA URMAN     SET UPPER RESIDENT MAIN ADDR
  06362 114136        JSB AREMD,I   OUTPUT REMAINDER OF RECORD
* 
*                                   SCAN LST FOR INITIAL ENTRY POINT
  06363 014412        JSB INLST     INITIALIZE LSTX 
  06364 014416  STSCN JSB LSTX      SET LST ADDRESSES 
  06365 102000        HLT 0B        START NOT FOUND IN LST
  06366 160531        LDA LST1,I    GET NAME 1,2
  06367 053741        CPA CHR$S     CHARS = $S? 
  06370 002001        RSS           YES - CONTINUE
  06371 026364        JMP STSCN     NO - TRY NEXT LST ENTRY 
  06372 160532        LDA LST2,I    GET NAME 3,4
  06373 053742        CPA CHRTR     CHARS = TR? 
  06374 002001        RSS           YES - CONTINUE
  06375 026364        JMP STSCN     NO - TRY NEXT LST ENTRY 
  06376 160533        LDA LST3,I    GET NAME 5
  06377 010255        AND M7400     ISOLATE UPPER CHAR
  06400 053723        CPA UCHRT     CHAR = T? 
  06401 002001        RSS           YES - START FOUND 
  06402 026364        JMP STSCN     NO - TRY NEXT LST ENTRY 
  06403 064251        LDB M2002     GET ADDR FOR JMP,I START
  06404 063722        LDA JMP3I     GET JMP 3,I CODE
  06405 170001        STA B,I       SET JMP 3,I IN BP LOCATION
  06406 006004        INB           INCR CURRENT BP ADDRESS 
  06407 160535        LDA LST5,I    GET BP ADDR FOR START 
  06410 040250        ADA M2000     ADJUST FOR BP ADDRESS 
  06411 160000        LDA A,I       GET ABSOLUTE ENTRY POINT ADDR 
  06412 170001        STA B,I       SET ADDR OF START IN BP LOCATION
  06413 002400        CLA 
  06414 073775        STA MAXRP     CLEAR MAX RT DISK RES PROG LGTH 
  06415 073776        STA MAXRB     CLEAR MAX RT DISK RES BP LENGTH 
  06416 035315        ISZ PTYPE     SET PROGRAM TYPE = RT DISK RES
                      SKP 
* 
*                                   LOAD RT DISK RESIDENTS
  06417 060221        LDA P17 
  06420 067615        LDB MES16     MES16 = ADDR: RT DISK RESIDENTS 
  06421 017533        JSB SETHD     PRINT HEADINGS, INITIALIZE IDX
  06422 114134  RDLD  JSB AIDSN,I   SCAN IDENTS 
  06423 026465        JMP RDEND     END OF IDENTS 
  06424 002041        SEZ,RSS       SKIP IF MAIN
  06425 026422        JMP RDLD      IGNORE SUBS 
  06426 164521        LDB ID3,I     GET USAGE FLAG
  06427 004010        SLB, NB       SKIP - PROGRAM NOT LOADED 
  06430 026422        JMP RDLD      IGNORE LOADED PROGRAM 
  06431 174521        STB ID3,I     SET NEW USAGE FLAG
  06432 114127        JSB ALOAD,I   INITIATE AND LOAD MAIN PROGRAM
  06433 003400        CCA 
  06434 114143        JSB AGEND,I   GENERATE ID SEGMENT, KEYWORD
  06435 061322        LDA PPREL     GET PROG RELOC ADDR 
  06436 003004        CMA,INA 
  06437 040446        ADA TPREL     SET A = PROG LENGTH 
  06440 067775        LDB MAXRP     GET PREVIOUS MAX PROG LENGTH
  06441 007004        CMB,INB 
  06442 044000        ADB A         SET B = PROG LENGTH - MAX LENGTH
  06443 006021        SSB,RSS       SKIP IF NO NEW MAXIMUM
  06444 073775        STA MAXRP     SET NEW MAX PROG LENGTH 
  06445 061321        LDA PBREL     GET BP RELOC ADDR 
  06446 003004        CMA,INA 
  06447 041320        ADA TBREL     SET A = BP LENGTH 
  06450 067776        LDB MAXRB     GET PREVIOUS MAX BP LENGTH
  06451 007004        CMB,INB 
  06452 044000        ADB A         SET B = BP LENGTH - MAX LENGTH
  06453 006021        SSB,RSS       SKIP IF NO NEW MAXIMUM
  06454 073776        STA MAXRB     SET NEW MAX BP LENGTH 
  06455 114136        JSB AREMD,I   OUTPUT REMAINING OF ABS REC 
  06456 061320        LDA TBREL     GET UPPER BP ADDRESS
  06457 065321        LDB PBREL     GET LOWER BP ADDRESS
  06460 114131        JSB ABPOT,I   OUTPUT BP SECTION 
  06461 061321        LDA PBREL     GET LOWER RT DISK RES BP ADDR 
  06462 065320        LDB TBREL     GET UPPER BOUND BP ADDRESS
  06463 114132        JSB ACLRT,I   CLEAR LOCAL BP LINKS
  06464 026422        JMP RDLD      PROCESS NEXT RT DISK RESIDENT 
* 
  06465 114147  RDEND JSB ANOTS,I   TEST FOR PROGRAMS LOADED
  06466 014313        JSB SPACE     NEW LINE
* 
* 
  06467 060222  BPCHA LDA P18       ASK:
  06470 067553        LDB MES2       CHANGE BP LINKAGE? 
  06471 114157        JSB AREAD,I    GET ANSWER 
  06472 060207        LDA P5        CONVERT FIVE DIGITS 
  06473 114121        JSB AGETO,I    OCTAL
  06474 026542        JMP CBPER     INPUT ERROR 
  06475 114117        JSB AGETA,I   NEXT CHARACTER
  06476 002002        SZA            ZERO?
  06477 026542        JMP CBPER     NO - ERROR
  06500 060474        LDA OCTNO     GET THE NMBER 
  06501 002003        SZA,RSS       IF RESPONSE IS ZERO,
  06502 061053        LDA BPMAX      USE THE CURRENT LIMIT
  06503 073772        STA SYBAD     SET ADDRESS OF BP LINKS 
  06504 040165        ADA N1        SUBTRACT 1 AND SAVE AS LAST WORD
  06505 071052        STA URBP1     RT DISC RESIDENT AREA IN BP.
  06506 040204        ADA P2        ADJUST FOR TEST 
  06507 003104        CMA,CLE,INA   SET NEGATIVE FOR TESTING
  06510 041053        ADA BPMAX     IF BELOW CURRENT
  06511 060111        LDA EOBP       BASE OR ABOVE
  06512 043772        ADA SYBAD      SYSTEM COMMON
  06513 002040        SEZ            THEN ERROR 
  06514 026542        JMP CBPER 
  06515 063772        LDA SYBAD     SET THE NEW BP-MAX
  06516 071053        STA BPMAX     INCASE NO BP IS USED IN BACKGROUND
  06517 014313        JSB SPACE     NEW LINE
* 
  06520 061322        LDA PPREL     GET PROG RELOC ADDR 
  06521 043775        ADA MAXRP     ADD MAX PROG LENGTH 
  06522 073754        STA SYMAD     SET SYSTEM AVAIL MEM ADDR 
* 
  06523 067664        LDB MES35     GET ADDR FOR CONVERSION IN MESS 
  06524 114137        JSB ACONV,I   CONVERT TO OCTAL
  06525 060220        LDA P16 
  06526 067663        LDB MES34     MES34 = ADDR: FWA SY MEM  XXXXX 
  06527 114102        JSB DRKEY,I   PRINT CURRENT SYS AV MEM BOUND
  06530 014313        JSB SPACE     NEW LINE
* 
  06531 060223  GETAV LDA P22       PRINT:
  06532 065635        LDB MES36      "CHANGE FWA SYS AV MEM?" 
  06533 114157        JSB AREAD,I   PRINT AND GET REPLY 
  06534 060207        LDA P5        SET FOR 5 OCTAL DIGITS. 
  06535 114121        JSB AGETO,I    CONVERT TO OCTAL.
  06536 026545        JMP SYMER     -ERROR. 
  06537 114117        JSB AGETA,I   GET NEXT CHAR FROM LBUF.
  06540 050164        CPA ZERO      END OF BUFFER?
  06541 026550        JMP SETAV     YES, SET BOUNDARY.
* 
  06542 063551  CBPER LDA ERR14     SEND ERROR MESSAGE
  06543 014317        JSB ERROR      TO OPERATOR
  06544 026467        JMP BPCHA     REPEAT
* 
  06545 063551  SYMER LDA ERR14     USE ERROR 14 FOR INVALID
  06546 014317        JSB ERROR      # OR < ORIG. SYS AV MEM ADDR.
  06547 026531        JMP GETAV     -REPEAT REQUEST 
* 
  06550 060474  SETAV LDA OCTNO     IF NUMBER 
  06551 002003        SZA,RSS       EQ 0, LEAVE FWA 
  06552 026561        JMP GETBG      SYS MEM AS IS. 
  06553 067754        LDB SYMAD     SUBTRACT ORIG.
  06554 007004        CMB,INB        FWA FROM 
  06555 044000        ADB A          NEW VALUE
  06556 006020        SSB           ERROR IF
  06557 026545        JMP SYMER      NEW < OLD. 
  06560 073754        STA SYMAD     SET NEW FWA IN SYMAD. 
                      SKP 
* 
*                                   GET BG BOUNDARY 
* 
  06561 064451  GETBG LDB ALBUF     GET ADDR OF LBUF
  06562 014302        JSB BUFCL     CLEAR LBUF
  06563 014313        JSB SPACE     NEW LINE
  06564 060215        LDA P12 
  06565 067554        LDB MES11     MES11 = ADDR: BG BOUNDARY?
  06566 114157        JSB AREAD,I   PRINT AND GET REPLY 
  06567 060207        LDA P5        SET FOR 5 OCTAL DIGITS
  06570 114121        JSB AGETO,I   CONVERT TO OCTAL
  06571 026575        JMP BGERR     BG BOUNDARY ERROR 
  06572 114117        JSB AGETA,I   GET NEXT CHAR FROM LBUF 
  06573 050164        CPA ZERO      END OF BUFFER?
  06574 026600        JMP SETBG     SET BG BOUNDARY 
* 
  06575 063551  BGERR LDA ERR14     SET ERROR CODE - BG BOUNDARY
  06576 014317        JSB ERROR     PRINT ERROR MESSAGE 
  06577 026561        JMP GETBG     REPEAT BG INPUT REQUEST 
* 
  06600 063754  SETBG LDA SYMAD     GET ADDR OF SYS AV MEM
  06601 003004        CMA,INA 
  06602 040474        ADA OCTNO     ADD BG BOUNDARY 
  06603 002020        SSA           SKIP - VALID BG BOUNDARY
  06604 026575        JMP BGERR     INVALID BG BOUNDARY 
  06605 014313        JSB SPACE     NEW LINE
* 
  06606 060514        LDA DSKAD     GET DISK ADDRESS
  06607 073753        STA DSKBG     SAVE ADDRESS OF BG CODE 
* 
  06610 060474        LDA OCTNO     GET BG BOUNDARY 
  06611 073755        STA BGBND     SAVE BG BOUNDARY
  06612 070450        STA COMAD     SET BACKGROUND COMMON BASE
  06613 071323        STA RELAD     SET CURRENT RELOCATION ADDRESS
  06614 073751        STA LBMAN     SAVE LOWER BG MAIN ADDR 
  06615 071322        STA PPREL     SET NEW MINIMUM PROG RELOC ADDR 
* 
  06616 063772        LDA SYBAD     GET CURRENT BG BP ADDRESS 
  06617 071321        STA PBREL     SET BP RELOCATION ADDRESS 
  06620 071050        STA LBBP      SET LOW BG BP ADDRESS 
  06621 071320        STA TBREL 
* 
  06622 061322        LDA PPREL     GET BACKGROUND BOUNDARY 
  06623 065310        LDB COMBG     GET BACKGROUND COMMON LENGTH
  06624 006003        SZB,RSS       SKIP IF BACKGROUND COMMON 
  06625 026646        JMP RICLR     IGNORE ZERO COMMON
  06626 044000        ADB A 
  06627 075322        STB PPREL     SET NEW BG RELOC ADDR 
* 
*                                   FILL BG COMMON WITH HALTS 
  06630 067630        LDB MES18+1   GET ADDRESS OF MESSAGE
  06631 114137        JSB ACONV,I   CONVERT TO OCTAL/DECIMAL
  06632 060220        LDA P16 
  06633 067627        LDB MES18     GET MESSAGE ADDRESS 
  06634 114102        JSB DRKEY,I   PRINT BACKGROUND COMMON LISTING 
  06635 014313        JSB SPACE     NEW LINE
  06636 065310        LDB COMBG     GET BG COM LENGTH 
  06637 007004        CMB,INB 
  06640 075266        STB TCNT      SET COMMON LENGTH 
  06641 060327        LDA HLT0      GET HALT CODE 
  06642 006404        CLB,INB       SET COUNT = 1 
  06643 114135        JSB ALABD,I   OUTPUT HALT CODE FOR COMMON 
  06644 035266        ISZ TCNT      SKIP - BG COM FILLED WITH HALTS 
  06645 026641        JMP *-4       CONTINUE FILLING BG COMMON
* 
  06646 060206  RICLR LDA P4
  06647 071315        STA PTYPE     SET PROGRAM TYPE = BG RESIDENT
                      SKP 
* 
*                                   LOAD BG RESIDENTS 
  06650 060215        LDA P12 
  06651 067641        LDB MES19     MES19 = ADDR: BG RESIDENTS
  06652 017533        JSB SETHD     PRINT HEADING, INITIALIZE IDX 
  06653 114134  BRLD  JSB AIDSN,I   SCAN IDENTS 
  06654 026670        JMP BREND     END OF IDENTS 
  06655 002041        SEZ,RSS       SKIP IF MAIN
  06656 026653        JMP BRLD      IGNORE SUBS 
  06657 164521        LDB ID3,I     GET USAGE FLAG
  06660 004010        SLB, NB       SKIP - PROGRAM NOT LOADED 
  06661 026653        JMP BRLD      IGNORE LOADED PROGRAM 
  06662 174521        STB ID3,I     SET NEW USAGE FLAG
  06663 114127        JSB ALOAD,I   INITIATE AND LOAD MAIN PROGRAM
  06664 017543        JSB INCAD     INCR RELOCATION ADDRESSES 
  06665 002400        CLA 
  06666 114143        JSB AGEND,I   GENERATE ID SEGMENT, KEYWORD
  06667 026653        JMP BRLD      PROCESS NEXT BG RESIDENT
* 
  06670 114147  BREND JSB ANOTS,I   TEST FOR PROGRAMS LOADED
  06671 014313        JSB SPACE     NEW LINE
  06672 114136        JSB AREMD,I   OUTPUT REMAINDER OF ABS REC 
  06673 061322        LDA PPREL     GET CURRENT PROGRAM RELOC BASE
  06674 073752        STA UBMAN     SAVE UPPER BG MAIN ADDRESS
  06675 061320        LDA TBREL     GET CURRENT BP ADDRESS
  06676 071051        STA UBBP      SET UPPER BACKGROUND BP BOUND 
  06677 060205        LDA P3
  06700 071315        STA PTYPE     SET PROG TYPE = BG DISK RESIDENT
                      SKP 
* 
*                                   LOAD BG DISK RESIDENTS
  06701 060221        LDA P17 
  06702 067650        LDB MES20     MES20 = ADDR: BG DISK RESIDENTS 
  06703 017533        JSB SETHD     PRINT HEADING INITIALIZE IDX
  06704 114134  BDLD  JSB AIDSN,I   SCAN IDENTS 
  06705 027033        JMP BDEND     END OF IDENTS 
  06706 002041        SEZ,RSS       SKIP IF MAIN
  06707 026704        JMP BDLD      IGNORE SUBS 
  06710 164521        LDB ID3,I     GET USAGE FLAG
  06711 004010        SLB, NB       SKIP - PROGRAM NOT LOADED 
  06712 026704        JMP BDLD      IGNORE LOADED PROGRAM 
  06713 174521        STB ID3,I     SET NEW USAGE FLAG
  06714 060517        LDA ID1       GET CURRENT MAIN IDENT ADDRESS
  06715 073777        STA IDMBS     SAVE MAIN IDENT ADDR FOR BS REF 
  06716 114127        JSB ALOAD,I   INITIATE AND LOAD MAIN PROGRAM
  06717 003400        CCA 
  06720 114143        JSB AGEND,I   GENERATE ID SEGMENT, KEYWORD
  06721 114136        JSB AREMD,I   OUTPUT REMAINDER OF RECORD
  06722 060514        LDA DSKAD     GET CURRENT DISK ADDRESS
  06723 073762        STA DSKBS     SAVE DISK ADDR OF BP SECTION
  06724 061320        LDA TBREL     GET UPPER BP ADDRESS
  06725 065321        LDB PBREL     GET LOWER BP ADDRESS
  06726 114131        JSB ABPOT,I   OUTPUT BP SECTION 
  06727 060446        LDA TPREL     GET CURRENT PROG RELOC ADDR 
  06730 071326        STA BSPAD     SAVE PROG RELOC ADDR FOR BS 
  06731 061320        LDA TBREL     GET CURRENT BP RELOC ADDR 
  06732 071325        STA BSBAD     SAVE BP RELOC ADDR FOR BS 
  06733 060207        LDA P5
  06734 071315        STA PTYPE     SET TYPE = BG SEGMENT 
  06735 060457        LDA PLAD      FIND END OF CURRENT 
  06736 002004        INA           PROGRAM LIST
  06737 164000        LDB A,I       GET ENTRY 
  06740 006002        SZB           ZERO - END
  06741 026736        JMP *-3       NO; TRY NEXT ENTRY
  06742 071324        STA PLMAN     SAVE CURRENT PROGRAM LIST ADDR
  06743 014345        JSB INIDX     INITIALIZE IDX
  06744 014351  BSLD  JSB IDX       SET IDENT ADDRESSES 
  06745 027011        JMP BSEND     END OF IDENTS 
  06746 060517        LDA ID1       GET CURRENT MAIN IDENT ADDRESS
  06747 071330        STA IMAIN     SAVE MAIN BS IDENT ADDRESS
  06750 160524        LDA ID6,I     GET TYPE
  06751 002021        SSA,RSS       SKIP IF MAIN BG SEGMENT 
  06752 026744        JMP BSLD      IGNORE SUBS 
  06753 010242        AND M177      ISOLATE TYPE
  06754 050207        CPA P5        TYPE = BG SEGMENT?
  06755 002001        RSS           YES - CONTINUE
  06756 026744        JMP BSLD      NO - IGNORE IDENT 
  06757 160530        LDA ID10,I    GET BS MAIN IDENT ADDRESS 
  06760 053777        CPA IDMBS     BS CALLS THIS BG MAIN 
  06761 002001        RSS           YES - CONTINUE
  06762 026744        JMP BSLD      NO - IGNORE BACKGROUND SEGMENT
  06763 060470        LDA TIDNT     GET NEXT IDENT ADDRESS
  06764 073774        STA ABSID     SAVE ADDR FOR NEXT BG SEG SCAN
  06765 007400        CCB 
  06766 075331        STB HDFLG     SET HEADING FLAG FOR BG SEGMENT 
  06767 114130        JSB ALODS,I   LOAD BG SEGMENT 
  06770 014313        JSB SPACE     NEW LINE
  06771 003400        CCA 
  06772 114143        JSB AGEND,I   GENERATE ID SEGMENT, KEYWORD
  06773 114136        JSB AREMD,I   OUTPUT REMAINING OF ABS REC 
  06774 061320        LDA TBREL     GET UPPER BP ADDRESS
  06775 065325        LDB BSBAD     GET LOWER BS BP ADDRESS 
  06776 114131        JSB ABPOT,I   OUTPUT BP SECTION 
  06777 061325        LDA BSBAD     GET BS BP RELOC ADDR
  07000 065320        LDB TBREL     GET UPPER BOUND BP ADDRESS
  07001 114132        JSB ACLRT,I   CLEAR BP LINKAGES 
  07002 061325        LDA BSBAD     GET BS BP RELOC ADDRESS 
  07003 071320        STA TBREL     SET BP RELOC ADDR 
  07004 061326        LDA BSPAD     GET BS PROG RELOC ADDRESS 
  07005 070446        STA TPREL     SET PROG RELOC ADDR 
  07006 063774        LDA ABSID     GET NEXT BG SEG IDENT ADDR
  07007 070470        STA TIDNT     SET IDENT ADDRESS FOR IDX 
  07010 026744        JMP BSLD      LOAD NEXT BG SEGMENT
* 
  07011 060514  BSEND LDA DSKAD     GET CURRENT DISK ADDRESS
  07012 073763        STA DSKBR     SAVE CURRENT DISK ADDR OF ABS 
  07013 063762        LDA DSKBS     GET DISK ADDR FOR MAIN BP CODE
  07014 070514        STA DSKAD     SET CURRENT BP CODE ADDRESS 
  07015 061325        LDA BSBAD     GET UPPER ADDR OF BP CODE 
  07016 065321        LDB PBREL     GET LOW ADDR FOR BP CODE
  07017 114131        JSB ABPOT,I   OUTPUT BP CODE FOR MAIN DISK RES
  07020 063763        LDA DSKBR     GET CURRENT DISK ADDRESS
  07021 070514        STA DSKAD     SET CURRENT ABS DISK ADDRESS
  07022 061321        LDA PBREL     GET LOW BP ADDRESS
  07023 065325        LDB BSBAD     GET UPPER BOUND BP CODE 
  07024 114132        JSB ACLRT,I   CLEAR BP LINKAGES 
* 
  07025 060205        LDA P3
  07026 071315        STA PTYPE     SET PROG TYPE = BG DISK RESIDENT
  07027 114133        JSB ACLID,I   CLEAR PROGS-LOADED FLAGS
  07030 063777        LDA IDMBS     GET MAIN IDENT ADDRESS
  07031 070470        STA TIDNT     SET CURRENT IDENT ADDRESS 
  07032 026704        JMP BDLD      LOAD NEXT BG DISK RESIDENT
* 
  07033 114147  BDEND JSB ANOTS,I   TEST FOR PROGRAMS LOADED
  07034 014313        JSB SPACE     NEW LINE
                      SKP 
* 
*                                   CLEAR SYSTEM COMMUNICATION AREA 
  07035 060110        LDA LWSBP     GET ADDR OF SYS COMM AREA 
  07036 064250        LDB M2000     GET ADDR OF END OF SYS COMM AREA
  07037 007004        CMB,INB 
  07040 044000        ADB A         SET B = COMM AREA LENGTH
  07041 074463        STB WDCNT     SET COUNT FOR CLEARING BP AREA
  07042 006400        CLB 
  07043 174000        STB A,I       CLEAR BP COMM AREA WORD 
  07044 002004        INA 
  07045 034463        ISZ WDCNT     SKIP - AREA CLEARED 
  07046 027043        JMP *-3       CONTINUE CLEARING BP AREA 
* 
*                                   MAKE LIBRARY ENTRY POINT LIST 
  07047 002400        CLA 
  07050 073765        STA LBCNT     CLEAR LIBRARY ENTRY POINT COUNT 
  07051 071323        STA RELAD     CLEAR RELOCATION ADDR FOR LABDO 
  07052 060514        LDA DSKAD     GET CURRENT ABSOLUTE DISK ADDR
  07053 073760        STA DSKLB     SAVE LIBR ENTRY POINT LIST ADDR 
  07054 064452        LDB ADBUF     GET ADDRESS OF DBUF 
  07055 074642        STB CURAD     SET CURRENT DBUF ADDRESS
  07056 014302        JSB BUFCL     CLEAR DBUF
  07057 014412        JSB INLST     INITIALIZE LST SCAN 
  07060 014416  LBLST JSB LSTX      SET CURRENT LST ADDRESSES 
  07061 027145        JMP ENDRL     END OF LIST 
  07062 067724        LDB LIBRA     GET CURRENT LIBR ENT HEAD 
  07063 075267        STB TBUF      SAVE CURRENT LIBRARY ENT ADDRESS
  07064 060167        LDA N3
  07065 071270        STA TBUF+1    SET PREM. LIBR ENTRY PT COUNT 
  07066 165267  TRYSY LDB TBUF,I    GET CURRENT LIBR ENT ADDRESS
  07067 160531        LDA LST1,I    GET NAME 1,2
  07070 150001        CPA B,I       CHARS EQUAL?
  07071 006005        INB,RSS       INCR LIBR ENT NAME ADDR - SKIP
  07072 027106        JMP TEST3     ALL 3 LIBR ENTS TESTED? 
  07073 160532        LDA LST2,I    GET NAME 3,4
  07074 150001        CPA B,I       CHARS EQUAL?
  07075 006005        INB,RSS       INCR LIBR ENT NAME ADDR - SKIP
  07076 027106        JMP TEST3     ALL 3 LIBR ENTS TESTED? 
  07077 160001        LDA B,I       GET NAME 5
  07100 010255        AND M7400     ISOLATE UPPER CHAR
  07101 071271        STA TBUF+2    SAVE UPPER CHAR OF NAME 
  07102 160533        LDA LST3,I    GET NAME 5 OF LST ENTRY 
  07103 010255        AND M7400     ISOLATE UPPER CHAR
  07104 051271        CPA TBUF+2    CHARS EQUAL?
  07105 027124        JMP LBOUT     YES - PUT OUT ENTRY POINT 
  07106 035267  TEST3 ISZ TBUF      INCR CURRENT LIBR ENT HEAD ADDR 
  07107 035270        ISZ TBUF+1    SKIP - ALL 3 LIBR ENTS TESTED 
  07110 027066        JMP TRYSY     TRY NEXT LIBR ENT 
  07111 160534        LDA LST4,I    GET IDENT ADDR FOR ENTRY POINT
  07112 002003        SZA,RSS       SKIP - ENTRY POINT DEFINED
  07113 027060        JMP LBLST     IGNORE UNDEFINED ENTRY POINT
  07114 070470        STA TIDNT     SET IDENT ADDRESS FOR IDX 
  07115 014351        JSB IDX       SET IDENT ADDRESSES 
  07116 102000        HLT 0         INVALID IDENT ADDRESS 
  07117 160524        LDA ID6,I     GET PROGRAM TYPE
  07120 010242        AND M177      ISOLATE TYPE
  07121 050210        CPA P6        TYPE = LIBRARY? 
  07122 002001        RSS           YES - PROCESS LIBRARY ENTRY PT
  07123 027060        JMP LBLST     IGNORE NON-LIBRARY ENTRY POINT
  07124 160531  LBOUT LDA LST1,I    GET ENTRY POINT 1,2 
  07125 006404        CLB,INB 
  07126 114135        JSB ALABD,I   OUTPUT NAME 1,2 
  07127 160532        LDA LST2,I    GET ENTRY POINT 3,4 
  07130 006404        CLB,INB 
  07131 114135        JSB ALABD,I   OUTPUT NAME 3,4 
  07132 160533        LDA LST3,I    GET ENTRY POINT 5 
  07133 010255        AND M7400     ISOLATE UPPER CHAR
  07134 006404        CLB,INB 
  07135 114135        JSB ALABD,I   OUTPUT NAME 5 
  07136 160535        LDA LST5,I    GET BP LOCATION ADDRESS 
  07137 002003        SZA,RSS       SKIP - HAS BP LOCATION
  07140 102000        HLT 0         UNDEFINED BP LOCATION 
  07141 006404        CLB,INB 
  07142 114135        JSB ALABD,I   OUTPUT BP ADDRESS OF ENTRY PT 
  07143 037765        ISZ LBCNT     INCR ENTRY POINT COUNT
  07144 027060        JMP LBLST     SCAN LST FOR NEXT ENTRY PT
  07145 114136  ENDRL JSB AREMD,I   OUTPUT REMAINDER OF LIBR LIST 
* 
*                                   MOVE UTILITY PROGS TO LOW DISK
  07146 002400        CLA 
  07147 073766        STA UTCNT     CLEAR UTILITY PROGRAM COUNT 
  07150 060514        LDA DSKAD     GET CURRENT DISK ADDRESS
  07151 073761        STA DSKUT     SAVE DISK ADDR OF UTILITY PROGS 
  07152 014345        JSB INIDX     INITIALIZE IDENT SCAN 
  07153 014351  GETLB JSB IDX       SET IDENT ADDRESSES 
  07154 027214        JMP ENDSX     ALL UTILITY PROGRAMS MOVED     $
  07155 160524        LDA ID6,I     GET TYPE
  07156 010242        AND M177      ISOLATE TYPE
  07157 050211        CPA P7        TYPE = UTILITY? 
  07160 002001        RSS           YES - MOVE
  07161 027153        JMP GETLB     IGNORE OTHER PROGRAMS 
  07162 160530        LDA ID10,I    GET DISK SECTOR COUNT 
  07163 003004        CMA,INA 
  07164 070516        STA DSCNT     SET SECTOR COUNT
  07165 160523        LDA ID5,I     GET INITIAL DISK ADDR 
  07166 065473        LDB DSKA      CHECK IF SYSTEM 
  07167 007000        CMB            HAS OVERLAYED
  07170 044000        ADB A          THIS RELOCATABLE 
  07171 006021        SSB,RSS        MODULE - 
  07172 027175        JMP MOVEL     IF NOT, CONTINUE
  07173 060344        LDA ERR38     IF SO, IRRECOVERABLE
  07174 014325        JSB IRERR 
  07175 071333  MOVEL STA DSKRD     SET CURRENT UTILITY DISK ADDRESS
  07176 064452        LDB ADBUF     GET ADDRESS OF DBUF 
  07177 114125        JSB ADIN,I    READ UTILITY PROGRAM RECORD 
  07200 060514        LDA DSKAD     GET CURRENT ABSOLUTE DISK ADDR
  07201 064452        LDB ADBUF     GET ADDRESS OF DBUF 
  07202 114126        JSB ADOUT,I   WRITE UTILITY RECORD ON DISK
  07203 060514        LDA DSKAD     GET CURRENT ABSOLUTE DISK ADDR
  07204 114124        JSB INDAD,I   INCR DISK ADDRESS 
  07205 070514        STA DSKAD     SET NEW CURRENT DISK ADDRESS
  07206 061333        LDA DSKRD     GET CURRENT UTILITY DISK ADDR 
  07207 114124        JSB INDAD,I   INCR DISK ADDRESS 
  07210 034516        ISZ DSCNT     SKIP - UTILITY PROGRAM MOVED
  07211 027175        JMP MOVEL     MOVE NEXT UTILITY PROGRAM 
  07212 037766        ISZ UTCNT     INCR UTILITY PROGRAM COUNT
  07213 027153        JMP GETLB     SCAN IDENTS FOR NEXT UTILITY PRG
* 
*                    GENERATE BLANK ID SEGMENTS 
* 
  07214 061314  ENDSX LDA KEYCT     IF NEXT KEYWORD IS             $
  07215 002004        INA            THE LAST (ZERO WORD),         $
  07216 051313        CPA  KEYCN     THEN TERMINATE                $
  07217 027223        JMP  ENDSZ     BLANK OUTPUT.                 $
  07220 060166        LDA  N2       A=-2 FOR BLANK ID SEGMENT FLAG.$
  07221 114143        JSB AGEND,I   GENERATE ID SEGMENT.           $
  07222 027214        JMP ENDSX     REPEAT TEST.                   $
* 
*                                   PUT OUT DISK DICTIONARY 
  07223 060514  ENDSZ LDA DSKAD     GET CURRENT DISC ADDRESS.      $
  07224 001727        ALF,ALF       ROTATE DISK TRACK NO. TO LOW A
  07225 001200        RAL           ISOLATE                       $$
  07226 010243        AND M377       TRACK NUMBER.                $$
  07227 002004        INA           SET A = NUMBER OF USED TRACKS 
  07230 064500        LDB PTRAK     GET NO. OF PROTECTED TRACKS 
  07231 007004        CMB,INB 
  07232 044000        ADB A         SET B = NO. USED - NO. PROTECTED
  07233 006020        SSB           SKIP - NO. USED IS GREATER
  07234 060500        LDA PTRAK     SET NO. USED = NO. PROTECTED
  07235 071265        STA CURAT     SAVE NO. OF USED TRACKS 
  07236 003004        CMA,INA 
  07237 071266        STA TCNT      SET TRACK USAGE COUNT 
  07240 060300        LDA MSIGN     SET FLAG FOR SYSTEM-USED TRACK
  07241 114144        JSB AOUTD,I   OUTPUT TRACK-USED FLAG
  07242 035266        ISZ TCNT      SKIP - ALL USED TRACK FLAGS SET 
  07243 027240        JMP *-3       CONTINUE TO SET USED-TRACK FLAGS
  07244 061265        LDA CURAT     SET A = NO. OF USED TRACKS
  07245 064476        LDB DSIZE     SET B = SYSTEM DISK SIZE
  07246 044501        ADB DAUXN     AUXILIARY DISC SIZE 
  07247 114146        JSB ADSET,I   SET DISK TRACK TABLE
  07250 061312        LDA DSKID     GET CURRENT ID SEGMENT ADDR 
  07251 053757        CPA DSKLC     SAME DISK ADDRESSES?
  07252 002001        RSS           YES - 'OR' RECORDS
  07253 027260        JMP NIDOR     NO - PUT OUT LAST ID SEGMENTS 
  07254 064452        LDB ADBUF     GET ADDRESS OF DBUF 
  07255 114125        JSB ADIN,I    READ FIRST LIBRARY RECORD 
  07256 064454        LDB AIBUF     GET ADDRESS OF IBUF 
  07257 114140        JSB ARECO,I   'OR' RECORD WITH DBUF 
  07260 061312  NIDOR LDA DSKID     GET CURRENT ID SEGMENT DISK ADDR
  07261 064454        LDB AIBUF     GET ADDR OF ID SEG BUFFER 
  07262 114126        JSB ADOUT,I   OUTPUT LAST ID SEGMENT SECTOR 
* 
*                                   PUT OUT LAST KEYWORD SECTOR 
  07263 061311        LDA DSKEY     GET CURRENT KEYWORD DISK ADDR 
  07264 064452        LDB ADBUF     GET ADDRESS OF DBUF 
  07265 114125        JSB ADIN,I    READ CURRENT KEYWORD SECTOR 
  07266 064455        LDB AKBUF     GET ADDRESS OF KBUF 
  07267 114140        JSB ARECO,I   'OR' DBUF AND LAST KBUF RECORD
  07270 061311  NKYOR LDA DSKEY     GET CURRENT KEYWORD DISK ADDR 
  07271 064455        LDB AKBUF     GET ADDRESS OF KBUF 
  07272 114126        JSB ADOUT,I   OUTPUT LAST KEYWORD RECORD
* 
*                                   PUT OUT SYS COMM AREA VALUES
  07273 064452        LDB ADBUF     GET ADDRESS OF DBUF 
  07274 074642        STB CURAD     SET CURRENT DBUF ADDRESS
  07275 014302        JSB BUFCL     CLEAR DBUF
  07276 060202        LDA N64 
  07277 070643        STA DCNT      SET CURRENT DBUF COUNT
* 
  07300 002400        CLA 
  07301 071323        STA RELAD     CLEAR RELOCATION ADDR FOR LABDO 
  07302 060110        LDA LWSBP     GET LOW ADDR OF SYS COMM AREA 
  07303 071265        STA CURAT     SET CURRENT SYS BP ADDRESS
  07304 064250        LDB M2000     GET UPPER BP SYS COMM ADDR
  07305 007004        CMB,INB 
  07306 044000        ADB A         SET TOTAL BP COMM LENGTH
  07307 075266        STB TCNT      SAVE BP LENGTH
* 
  07310 061334        LDA AEQT      GET ADDRESS OF EQT
  07311 071650        STA EQTA      SET ADDRESS OF EQT
* 
  07312 061335        LDA CEQT      GET NO. OF EQT ENTRIES
  07313 071651        STA EQT#      SET NO. OF EQT ENTRIES
* 
  07314 061336        LDA ASQT      GET ADDR OF DEV REF TABLE 
  07315 071652        STA DRT       SET ADDR OF DEV REF TABLE 
* 
  07316 061337        LDA CSQT      GET NO. OF DEV REF TABLE ENTRIES
  07317 071653        STA LUMAX     SET NO. OF DEV REF TABLE ENTRIES
* 
  07320 061340        LDA AINT      GET ADDR OF INTERRUPT TABLE 
  07321 071654        STA INTBA     SET ADDR OF INTERRUPT TABLE 
* 
  07322 061341        LDA CINT      GET NO. OF INT ENTRIES
  07323 071655        STA INTLG     SET NO. OF INT ENTRIES
* 
  07324 063764        LDA ADICT     GET ADDR OF DISK TRACK TABLE
  07325 071656        STA TAT       SET ADDR OF DISK TRACK TABLE
* 
  07326 063767        LDA KEYAD     GET ADDR OF KEYWORD LIST
  07327 071657        STA KEYWD     SET ADDR OF KEYWORD LIST
* 
  07330 060506        LDA TBCHN     GET I/O ADDR FOR TBG
  07331 071674        STA TBG       SET I/O ADDR FOR TBG
* 
  07332 060512        LDA TTYCH     GET I/O ADDR FOR SYS TELETYPE 
  07333 071675        STA SYSTY     SET I/O ADDR FOR SYS TELETYPE 
* 
  07334 065501        LDB SCH4      SET ID ADDRESS OR ZERO
  07335 075711        STB SKEDD     IN SCHEDULED LIST 
* 
  07336 063773        LDA IDSAD     GET ADDR OF FIRST ID SEG
  07337 050001        CPA B         IF SAME AS HEAD OF SCHEDULE LIST
  07340 061500        LDA SCH3      USE NEXT ID ADDRESS 
  07341 071710        STA DORMT     SET DORMANT LIST HEAD 
* 
  07342 060507        LDA SWAPF     GET SWAPPING FLAG 
  07343 071736        STA SWAP      SET SWAPPING FLAG 
* 
  07344 063771        LDA LBCAD     GET ADDR OF LIBRARY 
  07345 071745        STA LBORG     SET ADDR OF LIBRARY 
* 
  07346 063770        LDA RTCAD     GET RT COM ADDRESS
  07347 071746        STA RTORG     SET RT COM ADDRESS
* 
  07350 061307        LDA COMRT     GET RT COM LENGTH 
  07351 071747        STA RTCOM     SET RT COM LENGTH 
* 
  07352 063747        LDA URMAN     SET FWA OF R/T                $$
  07353 071750        STA RTDRA      DISC RESIDENT AREA.          $$
* 
  07354 063754        LDA SYMAD     GET ADDRESS OF SYS AV MEM 
  07355 071751        STA AVMEM     SET ADDR OF SYS AV MEM
* 
  07356 063751        LDA LBMAN     SET BG BOUNDARY 
  07357 071752        STA BKORG     SET BG BOUNDARY 
* 
  07360 061310        LDA COMBG     SET BACKGROUND                $$
  07361 071753        STA BKCOM      COMMON LENGTH.               $$
* 
  07362 063752        LDA UBMAN     GET BG DISK RESIDENT ORIGIN 
  07363 071754        STA BKDRA     SET BG DISK RESIDENT ORIGIN 
* 
  07364 060510        LDA LWASM     GET LAST AVAIL ADDR FOR SYSTEM
  07365 071777        STA BKLWA     SET LAST AVAIL ADDR FOR SYSTEM
* 
  07366 061047        LDA URBP      SET FWA OF R/T DISC RESIDENT  $$
  07367 071742        STA BPA1       LINK AREA IN BASE PAGE.      $$
* 
  07370 061052        LDA URBP1     SET LWA FOR R/T               $$
  07371 071743        STA BPA2       BASE PAGE LINK.              $$
* 
  07372 061051        LDA UBBP      SET FWA OF BKG DISC RESIDENT  $$
  07373 071744        STA BPA3       LINK AREA IN BASE PAGE.      $$
* 
  07374 060504        LDA PIOC      SET ADDRESS OF                $$
  07375 071737        STA DUMMY      PRIVILEGED I/O CARD.         $$
* 
  07376 060502        LDA SDS#      SET # SECTORS/TRACK FOR       $$
  07377 071757        STA SECT2      SYSTEM DISC (LU #2).         $$
* 
  07400 060503        LDA ADS#      SET # SECTORS/TRACK FOR       $$
  07401 071760        STA SECT3      AUXILIARY DISC (LU #3).      $$
* 
  07402 060475        LDA DSKSY     SET DISC ADDR. OF             $$
  07403 071740        STA IDSDA      FIRST ID SEGMENT.            $$
* 
  07404 060505        LDA IDSP      SET POSITION OF 1ST ID SEGMENT$$
  07405 071741        STA IDSDP      IN SECTOR.                   $$
* 
  07406 002400        CLA           CLEAR                         $$
  07407 071765        STA LGOTK      OTHER                        $$
  07410 071766        STA LGOC       STORAGE.                     $$
  07411 071767        STA SFCUN                                   $$
* 
  07412 063760        LDA DSKLB     GET DISK ADDR OF LIB ENTRY PTS
  07413 071761        STA DSCLB     SET DISK ADDR OF LIB ENTRY PTS
* 
  07414 063765        LDA LBCNT     GET NO. OF LIB ENTRY PTS
  07415 071762        STA DSCLN     SET NO. OF LIB ENTRY PTS
* 
  07416 063761        LDA DSKUT     GET DISK ADDR OF UTILITY PROGS
  07417 071763        STA DSCUT     SET DISK ADDR OF UTILITY PROGS
* 
  07420 063766        LDA UTCNT     GET NO. OF UTILITY PROGS
  07421 071764        STA DSCUN     SET NO. OF UTILITY PROGS
  07422 060476        LDA DSIZE     SYSTEM DISC SIZE
  07423 071756        STA TATSD 
* 
  07424 060476        LDA DSIZE     TOTAL DISC TABLE LENGTH 
  07425 040501        ADA DAUXN 
  07426 003004        CMA,INA 
  07427 071755        STA TATLG     SET TOTAL DISK TABLE LENGTH 
* 
*                                   PUT OUT BASE PAGE 
* 
  07430 064110        LDB LWSBP     GET ADDRESS OF SYS COMM AREA
  07431 044250        ADB M2000     ADJUST FOR BP LOCATION
  07432 161265        LDA CURAT,I   GET WORD OF SYS COMM AREA 
  07433 170001        STA B,I       MOVE WORD TO BP LOCATION
  07434 006004        INB           INCR CURRENT BP LOCATION WORD 
  07435 035265        ISZ CURAT     INCR CURRENT BP ADDRESS 
  07436 035266        ISZ TCNT      SKIP - SYS COMM AREA MOVED
  07437 027432        JMP *-5       CONTINUE MOVING BASE PAGE 
  07440 060514        LDA DSKAD     GET CURRENT ABS DISK ADDRESS
  07441 073756        STA DSKAV     SAVE NEXT AVAILABLE DISK ADDR 
  07442 060301        LDA DSKAB     GET INITIAL ABSOLUTE DISK ADDR
  07443 070514        STA DSKAD     SET CURRENT DISK ADDRESS
  07444 060250        LDA M2000     GET UPPER SYSTEM BP ADDRESS 
  07445 064204        LDB P2        GET LOWER SYSTEM BP ADDRESS 
  07446 114131        JSB ABPOT,I   OUTPUT RESIDENT BP SECTION
* 
*                                   SET BOOTSTRAP LOADER BUFFER 
  07447 002404        CLA,INA       SET DISK ADDRESS = 0,1
  07450 064452        LDB ADBUF     GET ADDRESS OF DBUF 
  07451 114125        JSB ADIN,I    READ RT EXEC BOOTSTRAP LOADER 
  07452 060174        LDA N9
  07453 070463        STA WDCNT     SET BUFFER LENGTH = 9 
  07454 064153        LDB ABOOT     GET ADDR OF BOOTSTRAP LOADER
  07455 007004        CMB,INB 
  07456 044154        ADB ASBUF     ADD ADDRESS OF BOOTSTRAP BUFFER 
  07457 006004        INB           SET B = BOOTSTRAP DISPLACEMENT
  07460 044452        ADB ADBUF     GET ADDRESS OF BOOTSTRAP BUFFER 
  07461 074642        STB CURAD     SET CURRENT DBUF ADDRESS
  07462 067721        LDB ASECT     GET ADDRESS OF BOOTSTRAP VALUES 
  07463 160001        LDA B,I       GET WORD FOR BOOTSTRAP BUFFER 
  07464 170642        STA CURAD,I   SET WORD INTO DBUF
  07465 006004        INB           INCR CURRENT ASECT ADDRESS
  07466 034642        ISZ CURAD     INCR CURRENT DBUF ADDRESS 
  07467 034463        ISZ WDCNT     SKIP - BOOTSTRAP BUFFER SET 
  07470 027463        JMP *-5       CONTINUE SETTING VALUES IN BOOT 
  07471 002404        CLA,INA       SET DISK ADDRESS = 0,1
  07472 064452        LDB ADBUF     GET ADDRESS OF DBUF 
  07473 114126        JSB ADOUT,I   WRITE BOOTSTRAP LOADER IN 0,1 
* 
  07474 060223        LDA P22 
  07475 067651        LDB MES23     MES23 = ADDR: *SYSTEM STORED ETC
  07476 114102        JSB DRKEY,I   PRINT: SYSTEM STORED ON DISK
* 
  07477 063756        LDA DSKAV     CONVERT 
  07500 001727        ALF,ALF        LAST 
  07501 001200        RAL             USED
  07502 010243        AND M377        DISC
  07503 003004        CMA,INA         TRACK # 
  07504 064455        LDB AKBUF       TO DECIMAL
  07505 114137        JSB ACONV,I     AND 
  07506 061167        LDA KBUF+2      STORE 
  07507 073712        STA MES38+13    IN MESSAGE. 
  07510 063756        LDA DSKAV     CONVERT 
  07511 010242        AND M177        SECTOR
  07512 003004        CMA,INA         # TO
  07513 064455        LDB AKBUF       DECIMAL 
  07514 114137        JSB ACONV,I     AND 
  07515 061167        LDA KBUF+2      STORE 
  07516 073716        STA MES38+17    IN
  07517 061166        LDA KBUF+1      MESSAGE 
  07520 010243        AND M377      ISOLATE 3RD DIGIT,
  07521 030277        IOR UBLNK      ADD UPPER BLANK. 
  07522 073715        STA MES38+16
  07523 060231        LDA P38       PRINT MESSAGE:
  07524 067675        LDB MES38     "LAST SYS DISC ADDR:
  07525 114102        JSB DRKEY,I      TRK XX SEC XXX(10)"
  07526 014313        JSB SPACE 
* 
  07527 063756        LDA DSKAV     GET NEXT AVAILABLE DISK ADDR
  07530 064513        LDB DERCN     GET DISK ERROR COUNT
  07531 102077        HLT 77B 
  07532 027531        JMP *-1       END OF JOB
* 
*                                   (TURN ON DISK PROTECT)
* 
                      SKP 
* 
*                                   PRINT HEADING, INITIALIZE IDX 
* 
*  THE SETHD SUBROUTINE PRINTS THE HEADINGS FOR THE DIFFERENT 
*  TYPES OF PROGRAMS LOADED, SETS THE NO-PROGRAMS-LOADED-YET
*  FLAG, AND ORIGINS THE SCAN OF IDENT. 
* 
*  CALLING SEQUENCE:
*    A = NO. CHARS. (POS.) IN MESSAGE 
*    B = ADDRESS OF MESSAGE 
*    JSB SETHD
* 
*  RETURN: CONTENTS OF A AND B ARE DESTROYED
* 
  07533 000000  SETHD NOP 
  07534 114102        JSB DRKEY,I   PRINT HEADING 
  07535 014313        JSB SPACE     NEW LINE
  07536 003400        CCA 
  07537 071327        STA LFLAG     SET PROGRAMS-LOADED FLAG = -1 
  07540 060467        LDA BIDNT     GET FIRST IDENT ADDRESS 
  07541 071332        STA CIDNT     SET IDENT ADDRESS FOR ID SCAN 
  07542 127533        JMP SETHD,I   RETURN
                      SKP 
* 
*                                   UPDATE RESIDENT MEMORY BOUNDS 
* 
*  THE INCAD SUBROUTINE UPDATES THE MAIN AND BP MEMORY BOUNDS 
*  FROM THAT USED IN THE PREVIOUS LOADING CALL. 
* 
*  CALLING SEQUENCE:
*    A = IGNORED
*    B = IGNORED
*    JSB INCAD
* 
*  RETURN: CONTENTS OF A AND B ARE DESTROYED
* 
  07543 000000  INCAD NOP 
  07544 060446        LDA TPREL     GET CURRENT RELOCATION ADDRESS
  07545 071322        STA PPREL     SET NEW PROGRAM RELOC ADDRESS 
  07546 061320        LDA TBREL     GET CURRENT BP RELOC ADDRESS
  07547 071321        STA PBREL     SET NEW BP RELOCATION ADDRESS 
  07550 127543        JMP INCAD,I   RETURN
                      SKP 
* 
  07551 030464  ERR14 ASC 1,14      BG BOUNDARY ERROR 
  07552 031063  ERR23 ASC 1,23      INVALID FWA BP LINKAGE ADDRESS
* 
  07553 000035  MES2  DEF MS2 
  07554 007555  MES11 DEF *+1 
  07555 041107        ASC 6,BG BOUNDARY?
  07556 020102  
  07557 047525  
  07560 047104  
  07561 040522  
  07562 054477  
  07563 007564  MES12 DEF *+1 
  07564 051531        ASC 3,SYSTEM
  07565 051524  
  07566 042515  
  07567 007570  MES13 DEF *+1 
  07570 046111        ASC 4,LIBRARY 
  07571 041122  
  07572 040522  
  07573 054440  
  07574 007576  MES14 DEF *+2 
  07575 007603        DEF *+6 
  07576 051124        ASC 8,RT COM
  07577 020103  
  07600 047515  
  07601 020040  
  07602 020040  
  07603 020040  
  07604 020040  
  07605 020040  
  07606 007607  MES15 DEF *+1 
  07607 051124        ASC 6,RT RESIDENTS
  07610 020122  
  07611 042523  
  07612 044504  
  07613 042516  
  07614 052123  
  07615 007616  MES16 DEF *+1 
  07616 051124        ASC 9,RT DISC RESIDENTS 
  07617 020104  
  07620 044523  
  07621 041440  
  07622 051105  
  07623 051511  
  07624 042105  
  07625 047124  
  07626 051440  
  07627 007631  MES18 DEF *+2 
  07630 007636        DEF *+6 
  07631 041107        ASC 8,BG COM
  07632 020103  
  07633 047515  
  07634 020040  
  07635 020040  
  07636 020040  
  07637 020040  
  07640 020040  
  07641 007642  MES19 DEF *+1 
  07642 041107        ASC 6,BG RESIDENTS
  07643 020122  
  07644 042523  
  07645 044504  
  07646 042516  
  07647 052123  
  07650 001526  MES20 DEF MS20
  07651 001537  MES23 DEF MS23
  07652 007653  MES27 DEF *+1 
  07653 043127        ASC 8,FWA BP LINKAGE? 
  07654 040440  
  07655 041120  
  07656 020114  
  07657 044516  
  07660 045501  
  07661 043505  
  07662 037440  
  07663 007665  MES34 DEF SYMES 
  07664 007672  MES35 DEF SYMES+5 
  07665 043127  SYMES ASC 8,FWA SY MEM
  07666 040440  
  07667 051531  
  07670 020115  
  07671 042515  
  07672 020040  
  07673 020040  
  07674 020040  
* 
  07675 007676  MES38 DEF *+1 
  07676 046101        ASC 12,LAST SYS DISC ADDR: TRK
  07677 051524  
  07700 020123  
  07701 054523  
  07702 020104  
  07703 044523  
  07704 041440  
  07705 040504  
  07706 042122  
  07707 035040  
  07710 052122  
  07711 045440  
  07712 000000        NOP           (TRACK #) 
  07713 020123        ASC 2, SEC
  07714 042503  
  07715 020000        OCT 20000     (BLANK , HI DIGIT FOR SECTOR) 
  07716 000000        NOP           (LOWER 2 DIGITS FOR SECTOR) 
  07717 024061        ASC 2,(10)
  07720 030051  
* 
  07721 007743  ASECT DEF SECTR 
  07722 124003  JMP3I JMP 3,I       INITIAL JMP INSTRUCTION 
  07723 052000  UCHRT OCT 52000     UPPER ASCII CHAR T
* 
  07724 007725  LIBRA DEF *+1 
  07725 007730        DEF EXEC
  07726 007733        DEF $LIBR 
  07727 007736        DEF $LIBX 
* 
  07730 042530  EXEC  ASC 3,EXEC
  07731 042503  
  07732 020040  
  07733 022114  $LIBR ASC 3,$LIBR 
  07734 044502  
  07735 051040  
  07736 022114  $LIBX ASC 3,$LIBX 
  07737 044502  
  07740 054040  
  07741 022123  CHR$S ASC 1,$S
  07742 052122  CHRTR ASC 1,TR
* 
                      SKP 
* 
  07743         SECTR BSS 0         BOOTSTRAP BUFFER FORMAT 
* 
  07743         LBPSY BSS 1         LOWER SYSTEM BP ADDRESS 
  07744         UBPSY BSS 1         UPPER SYSTEM BP ADDRESS 
  07745         DSKBP BSS 1         SYS BP DISK ADDRESS 
* 
  07746         LRMAN BSS 1         MAIN RESIDENT LOWER ADDRESS 
  07747         URMAN BSS 1         MAIN RESIDENT UPPER ADDRESS 
  07750         DSKRR BSS 1         MAIN RESIDENT DISK ADDRESS
* 
  07751         LBMAN BSS 1         MAIN BG LOWER ADDRESS 
  07752         UBMAN BSS 1         MAIN BG UPPER ADDRESS 
  07753         DSKBG BSS 1         MAIN BACKGROUND DISK ADDRESS
* 
  07754         SYMAD BSS 1         AVAIL SYS MEM ADDR
  07755         BGBND BSS 1         BACKGROUND BOUNDARY 
* 
  07756         DSKAV BSS 1         NEXT AVAILABLE DISK ADDRESS 
  07757         DSKLC BSS 1         DISK ADDRESS OF LIBRARY CODE
  07760         DSKLB BSS 1         DISK ADDR OF LIBRARY ENTRY PTS
  07761         DSKUT BSS 1         UTILITY PROG DISK ADDRESS 
  07762         DSKBS BSS 1         DISK ADDR OF MAIN BG DISK RES BP
  07763         DSKBR BSS 1         CURRENT MAIN BG DISK RES DISK AD
  07764         ADICT BSS 1         ADDR OF DISK DICTIONARY 
  07765         LBCNT BSS 1         RESIDENT LIBR ENTRY PT COUNT
  07766         UTCNT BSS 1         UTILITY LIBRARY COUNT 
  07767         KEYAD BSS 1         CURRENT KEYWORD ADDRESS 
  07770         RTCAD BSS 1         RT COM CORE ADDRESS 
  07771         LBCAD BSS 1         LIBRARY CODE ADDRESS
  07772         SYBAD BSS 1         ADDR OF FIRST BP LINK FOR BG
  07773         IDSAD BSS 1         ADDR OF FIRST ID SEGMENT
  07774         ABSID BSS 1         IDENT ADDR FOR NEXT BG SEG SCAN 
  07775         MAXRP BSS 1         MAXIMUM RT DISK RESIDENT PROG 
  07776         MAXRB BSS 1         MAXIMUM RT DISK RESIDENT BP 
  07777         IDMBS BSS 1         BG MAIN ADDRESS FOR BS REF
  10000               ORG * 
                      SKP 
  10000               ORG 10000B
* 
*                                   INCREMENT DISK ADDRESS
* 
*  THE DISKA SUBROUTINE INCREMENTS THE CURRENT DISK ADDRESS 
*  TO PROVIDE THE ADDRESS OF THE SUCCEEDING SECTOR, 
*  WHETHER THAT SECTOR IS ON THE SAME TRACK OR THE FOLLOWING
*  TRACK.  IN ADDITION, THE DISKA SUBROUTINE CHECKS THAT
*  THE NEXT DISK ADDRESS IS VALID.
* 
*  CALLING SEQUENCE:
*    A = CURRENT DISK ADDRESS 
*    B = IGNORED
*    JSB DISKA
* 
*  RETURN:
*    A = NEXT DISK ADDRESS
*    B = DESTROYED
* 
  10000 000000  DISKA NOP 
  10001 070001        STA B         SAVE CURRENT ADDRESS
  10002 010242        AND M177      ISOLATE SECTOR NUMBER 
  10003 002004        INA           ADD 1.                        $$
  10004 050502        CPA SDS#      IF = TO MAX NO. ON SYS. DISC, $$
  10005 002400        CLA            SET # = 0,                   $$
  10006 072026        STA DISKT      AND SAVE NEW SECTOR #.       $$
  10007 060001        LDA B         ISOLATE                       $$
  10010 001727        ALF,ALF        TRACK                        $$
  10011 001200        RAL            ADDRESS                      $$
  10012 010243        AND M377       IN LOW A.                    $$
  10013 006400        CLB           IF NEW                        $$
  10014 056026        CPB DISKT      SECTOR # = 0,                $$
  10015 002004        INA            ADD 1 TO TRACK #.            $$
  10016 050476        CPA DSIZE     CHECK FOR OVERFLOW.           $$
  10017 026024        JMP DKERR      -YES.                        $$
  10020 001722        ALF,RAL       RESTORE TRACK # TO 14-07,     $$
  10021 001222        RAL,RAL        AND                          $$
  10022 032026        IOR DISKT      INSERT SECTOR #.             $$
  10023 126000        JMP DISKA,I   -RETURN.                      $$
* 
  10024 060340  DKERR LDA ERR17     SET CODE FOR INSUFFICIENT DISK
  10025 014325        JSB IRERR     IRRECOVERABLE ERROR EXIT
* 
  10026 000000  DISKT NOP           -TEMPORARY STORAGE            $$
                      SKP 
* 
*                                   DISK INPUT DRIVER 
* 
*  THE DISKI SUBROUTINE CONTROLS THE INPUT FROM THE DISK. 
*  IT ADDS THE DIRECTION BIT TO THE CORE ADDRESS, AND 
*  CONTAINS THE ERROR RECOVERY PROCEDURE IF READ PARITY 
*  OR DECODE ERRORS ARE DETECTED ON READ.  FOLLOWING DETECTION
*  OF SUCH AN ERROR, 9 ADDITIONAL ATTEMPTS TO READ THE
*  SPECIFIED SECTOR WILL BE MADE.  IF THESE FAIL, THE DISK ADDRESS
*  AND THE CORE ADDRESS ARE DISPLAYED IN THE A AND B REGISTERS
*  AND THE COMPUTER HALTS.  BY PRESSING RUN, 10 ADDITIONAL
*  ATTEMPTS TO READ THE SECTOR WILL BE MADE.
* 
*  CALLING SEQUENCE:
*    A = DISK ADDRESS 
*    B = CORE ADDRESS 
*    JSB DISKI
* 
*  RETURN: CONTENTS OF A AND B ARE DESTROYED. 
* 
  10027 000000  DISKI NOP 
  10030 044300        ADB MSIGN     SET SIGN = 1
  10031 071447        STA DCMND     SAVE DISK ADDRESS 
  10032 075450        STB MADDR     SAVE MEMORY ADDRESS 
  10033 060175  REPR1 LDA N10       SET DISK READ ERROR COUNT 
  10034 071446        STA EDCNT     SET ERROR COUNTER 
  10035 061447  REPR2 LDA DCMND     GET DISK ADDRESS
  10036 065450        LDB MADDR     GET CORE ADDRESS
  10037 016104        JSB DISKD     READ 64-WORD RECORD 
  10040 126027        JMP DISKI,I   RETURN
  10041 035446        ISZ EDCNT     SKIP - 10 READ ATTEMPTS FAILED
  10042 026035        JMP REPR2     TRY AGAIN 
  10043 060343        LDA ERR22     GET DISK READ ERROR CODE
  10044 014317        JSB ERROR     PRINT ERROR MESSAGE 
  10045 061447        LDA DCMND     GET DISK ADDRESS
  10046 065450        LDB MADDR     GET CORE ADDRESS
  10047 102022        HLT 22B       WAIT FOR OPERATOR INTERVENTION
  10050 026033        JMP REPR1     TRY 10 MORE TIMES 
                      SKP 
* 
*                                   DISK OUTPUT DRIVER
* 
*  THE DISKO SUBROUTINE CONTROLS ALL OUTPUT TO THE
*  DISK.  IT ADDS THE DIRECTION BIT TO THE CORE ADDRESS, AND CONTAINS 
*  THE ERROR RECOVERY PROCEDURE IF DISK ERRORS ARE DETECTED.
*  FOLLOWING EXECUTION OF THE DISK WRITE, THE SECTOR IS 
*  IMMEDIATELY READ BACK TO TEST FOR ERRORS.  IF ERRORS ARE DETECTED, 
*  THIS PROCEDURE IS REPEATED (SEE RECOVERY FOR DISKI). 
* 
*  CALLING SEQUENCE:
*    A = DISK ADDRESS 
*    B = CORE ADDRESS 
*    JSB DISKO
* 
*  RETURN: CONTENTS OF A AND B ARE DESTROYED. 
* 
  10051 000000  DISKO NOP 
  10052 075450        STB MADDR     SAVE MEMORY ADDRESS 
  10053 065473        LDB DSKA      GET CURRENT HIGH
  10054 007004        CMB,INB       AND SUBTRACT
  10055 044000        ADB A         FROM CURRENT ADDRESS
  10056 006021        SSB,RSS       IF NEW HIGH 
  10057 071473        STA DSKA      SET NEW HIGH
  10060 030300        IOR MSIGN     SET SIGN OF DISK ADDR = WRITE 
  10061 071447        STA DCMND     SAVE DISK ADDRESS 
  10062 060175  REPW1 LDA N10       SET DISK READ ERROR COUNT 
  10063 071446        STA EDCNT     SET ERROR COUNTER 
  10064 061447  REPW2 LDA DCMND     GET DISK ADDRESS
  10065 065450        LDB MADDR     GET CORE ADDRESS
  10066 016104        JSB DISKD     WRITE 64-WORD RECORD
  10067 061447        LDA DCMND     GET DISK ADDRESS
  10070 001265        RAL,CLE,ERA   CLEAR WRITE BIT 
  10071 064453        LDB AEBUF     GET ADDRESS OF SCANOUT AREA 
  10072 016104        JSB DISKD     READ RECORD FROM DISK 
  10073 126051        JMP DISKO,I   RETURN
  10074 035446        ISZ EDCNT     SKIP - 10 READ ATTEMPTS FAILED
  10075 026064        JMP REPW2     TRY AGAIN 
  10076 060343        LDA ERR22     GET DISK READ ERROR CODE
  10077 014317        JSB ERROR     PRINT ERROR MESSAGE 
  10100 061447        LDA DCMND     GET DISK ADDRESS
  10101 065450        LDB MADDR     GET CORE ADDRESS
  10102 102022        HLT 22B       WAIT FOR OPERATOR INTERVENTION
  10103 026062        JMP REPW1     TRY 10 MORE TIMES 
                      SKP 
* 
*                                   COMMON I/O DISK DRIVER
* 
*  THE DISKD SUBROUTINE IS THE MAIN DISK INPUT/OUTPUT 
*  DRIVER.  IT SETS UP THE MEMORY ADDRESS REGISTER, THE 
*  WORD COUNT REGISTER, AND THE DISK ADDRESS.  FOLLOWING THESE, 
*  IT INITIATES THE TRANSFER, AND WAITS UNTIL THE TRANSFER
*  IS COMPLETE (BY TESTING THE DISK STATUS WORD).  IN THE CASE OF 
*  A DISK READ, IT TESTS FOR READ PARITY AND DECODE ERRORS. 
* 
*  CALLING SEQUENCE:
*    A = DISK ADDRESS (WITH DIRECTION BIT)
*    B = CORE ADDRESS (WITH DIRECTION BIT)
*    JSB DISKD
* 
*  RETURN: CONTENTS OF A AND B ARE DESTOYED.
*    (N+1): READ - A READ PARITY OR DECODE ERROR IS DETECTED
*           WRITE - ALL 
*    (N+2): NORMAL READ 
* 
  10104 000000  DISKD NOP 
  10105 002321        CCE,SSA,RSS   SET E = 1 (DISK WRITE)
  10106 000040        CLE           SET E FOR DISK READ 
  10107 106702        CLC 2         PREPARE TO SET MEM ADDR REGISTER
  10110 106602        OTB 2         SET MEM ADDR IN MAR 
  10111 066134        LDB DMAC      ASSIGN THE DMA
  10112 106606        OTB 6         TO THE DISK 
* 
  10113 102702        STC 2         PREPARE TO SET WORD COUNT REG 
  10114 064202        LDB N64       SET WORD COUNT = 64 
  10115 106602        OTB 2         SET WORD COUNT IN WCR 
* 
  10116 102600  DSK2  OTA 0         SET DISK ADDR IN COMMAND CHNL 
* 
  10117 103706        STC 6,C       INITIATE DMA 1
  10120 102700  DSK3  STC 0         INITIATE DATA TRANSFER
  10121 102500  DSK4  LIA 0         GET STATUS WORD 
  10122 000010        SLA           SKIP IF TRANSFER COMPLETE 
  10123 026121        JMP *-2       WAIT
  10124 002040        SEZ           SKIP - DISK READ
  10125 126104        JMP DISKD,I   WRITE RETURN
  10126 010222        AND M22       ISOLATE BITS 1,4
  10127 002003        SZA,RSS       SKIP - READ PARITY OR DECODE ERR
  10130 126104        JMP DISKD,I   NORMAL READ RETURN
  10131 034513        ISZ DERCN     INCR TOTAL DISK ERROR COUNT 
  10132 036104        ISZ DISKD     INCR RETURN ADDRESS (ERROR) 
  10133 126104        JMP DISKD,I   DISK READ ERROR RETURN
* 
  10134 020000  DMAC  OCT 20000 
                      SKP 
* 
*                                   SCAN IDENTS FOR PROGRAM TYPE
* 
*  THE IDSCN SUBROUTINE SCANS IDENT FOR A PROGRAM OF THE
*  CURRENT TYPE (SET IN PTYPE). 
* 
*  CALLING SEQUENCE:
*    A = IGNORED
*    B = IGNORED
*    JSB IDSCN
* 
*  RETURN: CONTENTS OF A AND B ARE DESTOYED.
*    E = M/S FLAG FOR CURRENT PROGRAM.
* 
  10135 000000  IDSCN NOP 
  10136 061332        LDA CIDNT     GET NEXT IDENT IN SCAN
  10137 070470        STA TIDNT     SET IDENT ADDRESS FOR IDX 
  10140 014351        JSB IDX       SET IDENT ADDRESSES 
  10141 126135        JMP IDSCN,I   RETURN - END OF IDENTS
  10142 060517        LDA ID1       GET CURRENT MAIN IDENT ADDRESS
  10143 071330        STA IMAIN     SAVE CURRENT MAIN IDENT ADDRESS 
  10144 060470        LDA TIDNT     GET NEXT IDENT ADDRESS
  10145 071332        STA CIDNT     SAVE ADDR FOR NEXT IDENT SCAN 
  10146 160524        LDA ID6,I     GET TYPE
  10147 001265        RAL,CLE,ERA   SET E = M/S 
  10150 010242        AND M177      ISOLATE PROGRAM TYPE
  10151 051315        CPA PTYPE     CURRENT TYPE? 
  10152 002001        RSS           YES - CONTINUE
  10153 026140        JMP IDSCN+3   IGNORE IDENT - TRY NEXT IDENT 
  10154 036135        ISZ IDSCN     INCR RETURN ADDRESS 
  10155 126135        JMP IDSCN,I   RETURN
                      SKP 
* 
*                                   TEST FOR SOME PROGRAMS LOADED 
* 
*  THE NOTST SUBROUTINE CHECKS FOR PROGRAMS OF THE CURRENT
*  TYPE LOADED.  IT IS EXECUTED FOLLOWING COMPLETION OF THE 
*  LOADING SEQUENCE FOR EACH PROGRAM TYPE.  IF NO PROGRAMS OF 
*  THIS TYPE HAVE BEEN LOADED, IT PRINTS THE MESSAGE
*  (NONE) ON THE TELEPRINTER. 
*  OTHERWISE IT REPORTS THE CURRENT BASE PAGE LINKAGE ADDRESS.
* 
*  CALLING SEQUENCE:
*    A = IGNORED
*    B = IGNORED
*    JSB NOTST
* 
*  RETURN: CONTENTS OF A AND B ARE DESTROYED. 
* 
  10156 000000  NOTST NOP 
  10157 061053        LDA BPMAX     GET CURRENT NEXT LINK 
  10160 066173        LDB MES03      AND MESSAGE ADDRESS
  10161 016222        JSB CONVD     CONVERT TO ASCII
  10162 060220        LDA P16       SEND MESSAGE: 
  10163 066172        LDB MES02      BP LINKAGE XXXXX 
  10164 035327        ISZ LFLAG     IF NO PROGRAMS LOADED,
  10165 026170        JMP *+3        SEND:  (NONE)
  10166 060210        LDA P6
  10167 065577        LDB MES22     MES22 = ADDR: (NONE)
  10170 114102        JSB DRKEY,I   PRINT: (NONE) 
  10171 126156        JMP NOTST,I   RETURN
                      SPC 2 
  10172 001552  MES02 DEF MS02
  10173 001557  MES03 DEF MS02+5
                      SKP 
* 
*                                   OUTPUT ABSOLUTE BASE PAGE CODE
* 
*  BPOUT OUTPUTS THE BASE PAGE SECTION OF CODE FOLLOWING LOADING OF 
*  EACH DISK RESIDENT PROGRAM, BEGINNING WITH THE DISK
*  ADDRESS SPECIFIED IN DSKAD.
* 
*  CALLING SEQUENCE:
*    A = UPPER BP ADDRESS 
*    B = LOWER BP ADDRESS 
*    JSB BPOUT
* 
*  RETURN: CONTENTS OF A AND B ARE DESTOYED.
* 
  10174 000000  BPOUT NOP 
  10175 003004        CMA,INA       COMPLEMENT UPPER ADDRESS
  10176 040001        ADA B         ADD LOWER ADDRESS 
  10177 071266        STA TCNT      SAVE BP LENGTH
  10200 044250        ADB M2000     ADJUST FOR BP ADDRESS 
  10201 075265        STB CURAT     SAVE CURRENT LOWER CORE ADDR
  10202 002021        SSA,RSS       SKIP - SOME CODE IN BP
  10203 126174        JMP BPOUT,I   RETURN - ALL CODE OUT 
  10204 060514        LDA DSKAD     GET CURRENT DISK ADDRESS
  10205 114126  BPSYO JSB ADOUT,I   OUTPUT CURRENT BP SECTOR
  10206 060514        LDA DSKAD     GET CURRENT DISK ADDRESS
  10207 114124        JSB INDAD,I   INCR DISK ADDRESS 
  10210 070514        STA DSKAD     SAVE NEXT DISK ADDRESS
  10211 065266        LDB TCNT      GET CURRENT LENGTH
  10212 044232        ADB P64 
  10213 075266        STB TCNT      SAVE COUNT FOR NEXT PASS
  10214 006021        SSB,RSS       SKIP - MORE CODE TO PUT OUT 
  10215 126174        JMP BPOUT,I   RETURN - ALL CODE OUT 
  10216 065265        LDB CURAT     GET CURRENT LOW CORE ADDRESS
  10217 044232        ADB P64 
  10220 075265        STB CURAT     SET NEXT CORE ADDRESS 
  10221 026205        JMP BPSYO     OUTPUT NEXT SECTOR TO DISK
                      SKP 
* 
*                                   CONVERT A TO ASCII AT B 
* 
*  THE CONVD SUBROUTINE CONVERTS THE CONTENTS OF A
*  INTO ASCII (DECIMAL OR OCTAL) AT THE LOCATION SPECIFIED
*  BY B.  THE CONVERTED RESULT REQUIRES 3 WORDS, AND IS 
*  IN THE FORMAT:  XXXXX, WITH A SPACE IN THE FIRST POSITION. 
* 
*  CALLING SEQUENCE:
*    A = NO. TO BE CONVERTED.  IF THE SIGN OF A IS POS.,
*        THE CONVERSION IS TO BE IN OCTAL;  IF NEGATIVE,
*        IN DECIMAL.
*    B = ADDRESS OF CORE LOCATION FOR CONVERTED RESULT
*    JSB CONVD
* 
*  RETURN: CONTENTS OF A AND B ARE DESTOYED.
* 
  10222 000000  CONVD NOP 
  10223 075265        STB CURAT     SET MESSAGE ADDRESS 
  10224 064270        LDB OPWRS     GET ADDR OF OCTAL POWERS
  10225 002020        SSA           SKIP IF OCTAL CONV REQUIRED 
  10226 064262        LDB DPWRS     GET ADDRESS OF DECIMAL POWERS 
  10227 075470        STB RANAD     SET POWER RANGE ADDRESS 
  10230 002021        SSA,RSS       SKIP IF NEGATIVE (DECIMAL)
  10231 003004        CMA,INA       CONVERT NUMBER TO NEGATIVE
  10232 070001        STA B         PUT NUMBER IN B (REMAINDER) 
  10233 060166        LDA N2
  10234 071266        STA TCNT      SET CONVERSION COUNTER
  10235 016253        JSB GETD      GET FIRST DIGIT 
  10236 030277        IOR UBLNK     ADD BLANK TO FIRST CHAR 
  10237 171265        STA CURAT,I   SAVE FIRST BLANK, CHARACTER 
  10240 035265        ISZ CURAT     INCR MESSAGE ADDRESS
  10241 016253  NEXTD JSB GETD      GET NEXT DIGIT
  10242 001727        ALF,ALF       ROTATE TO UPPER 
  10243 171265        STA CURAT,I   SAVE UPPER CHARACTER
  10244 016253        JSB GETD      GET NEXT DIGIT
  10245 131265        IOR CURAT,I   ADD UPPER CHAR
  10246 171265        STA CURAT,I   SAVE NEXT 2 CHARACTERS
  10247 035265        ISZ CURAT     INCR MESSAGE ADDRESS
  10250 035266        ISZ TCNT      SKIP - 5 DIGITS IN
  10251 026241        JMP NEXTD     NO - CONTINUE WITH NEXT DIGIT 
  10252 126222        JMP CONVD,I   YES - RETURN
                      SKP 
* 
*                                   GET DIGIT FOR CONVD 
* 
*  GETD PROVIDES THE ASCII CHARACTERS FOR CONVD.
* 
*  CALLING SEQUENCE:
*    A = IGNORED
*    B = REMAINDER
*    JSB GETD 
* 
*  RETURN:
*    A = ASCII DIGIT
*    B = IGNORED
* 
  10253 000000  GETD  NOP 
  10254 002400        CLA 
  10255 145470  INCRA ADB RANAD,I   ADD POWER 
  10256 007026        CMB,SSB,INB,SZB   SKIP - TRY NEXT HIGHER DIGIT
  10257 026263        JMP *+4       DIGIT FOUND 
  10260 002004        INA           INCR DIGIT
                 `    CMB,INB       RESTORE REMAINDER TO NEGATIVE 
ERROR: No instruction on line
  10261 026255        JMP INCRA     TRY HIGHER DIGIT
  10262 145470        ADB RANAD,I   ADD POWER 
  10263 007004        CMB,INB       RESTORE REMAINDER 
  10264 035470        ISZ RANAD     INCR POWER LIST ADDRESS 
  10265 030237        IOR M60       CONVERT TO ASCII
  10266 126253        JMP GETD,I    RETURN WITH DIGIT IN A
                      SKP 
* 
*                                   CLEAR MEMORY MAP BUFFER 
* 
*  CLIST CLEARS THE MEMORY MAP BUFFER WITH BLANKS.
* 
*  CALLING SEQUENCE:
*    A = IGNORED
*    B = IGNORED
*    JSB CLIST
* 
*  RETURN: CONTENTS OF A AND B ARE DESTOYED.
* 
  10267 000000  CLIST NOP 
  10270 064460        LDB AMLST     AMLST = ADDR OF MLIST 
  10271 060173        LDA N8
  10272 071274        STA AMAD      SET BUFFER LENGTH 
  10273 062306        LDA BLNKS     GET 2 BLANK CHARACTERS
  10274 170001        STA B,I       CLEAR BUFFER WORD 
  10275 006004        INB 
  10276 035274        ISZ AMAD      ALL WORDS CLEAR?
  10277 026274        JMP *-3       NO - CONTINUE CLEARING
  10300 126267        JMP CLIST,I   RETURN
                      SPC 1 
  10301 016000  LINKA DEF ALINK     ADDRESS OF CURRENT
  10302 016202  LINKB DEF BLINK       LINKAGE ROUTINES
  10303 016077  LINKD DEF DLINK 
  10304 016156  BLN3 DEF BLIN3
  10305 016143  CROSA DEF CROSS 
  10306 020040  BLNKS ASC 1,        BLANKS
  10307 020052  BLAST ASC 1, *      BLANK,ASTERISK
  10310 000050  LPAR  OCT 50        LEFT PAREN
  10311 000000  LWH3  NOP 
  10312 000000  LWH4  NOP 
                      SKP 
* 
*                                   INITIATE MAIN PROGRAM LOADING 
* 
*  LOAD IS THE SUBROUTINE FOR ENTRY TO LOADS FOR THOSE
*  PROGRAMS WHICH REQUIRE USE OF A NEW BP AND PROGRAM BASE. 
* 
*  CALLING SEQUENCE:
*    A = IGNORED
*    B = IGNORED
*    JSB LOAD 
* 
*  RETURN: CONTENTS OF A AND B ARE DESTOYED.
* 
  10313 000000  LOAD  NOP 
  10314 007400        CCB 
  10315 075331        STB HDFLG     SET HEADING FLAG
  10316 061322        LDA PPREL     GET PROGRAM RELOCATION ADDRESS
  10317 070446        STA TPREL     SET CURRENT PROG RELOC ADDRESS
  10320 061321        LDA PBREL     GET BP RELOCATION ADDRESS 
  10321 071320        STA TBREL     SET CURRENT BP RELOC ADDRESS
  10322 016327        JSB LOADS     LOAD PROGRAM
  10323 061471        LDA LIBFG     IF NOT LIB LOAD 
  10324 002003        SZA,RSS       THEN
  10325 014313        JSB SPACE     NEW LINE
  10326 126313        JMP LOAD,I    RETURN
                      SKP 
* 
*                                   LOAD, LINK MAIN PROG & SUBS.
* 
*  LOADS IS THE MAIN LOADING SUBROUTINE FOR GENERATING THE ABSOLUTE 
*  CODE AND LINKING ALL CALLED SUBROUTINES.  IT IS USED BY EACH 
*  PROGRAM TYPE FOR LOADING.  IT READS THE RELOCATABLE RECORDS FROM 
*  THE SCRATCH PORTION OF THE DISK, AND WRITES THE ABSOLUTE CODE
*  ON THE LOWER (PROTECTED) PORTION OF THE DISK.
* 
*  CALLING SEQUENCE:
*    A = IGNORED
*    B = IGNORED
*    JSB LOADS
* 
*  RETURN: CONTENTS OF A AND B ARE DESTOYED.
* 
  10327 000000  LOADS NOP 
  10330 003400        CCA 
  10331 070515        STA PLFLG     SET FLAG = NO DBL RECS IN 
  10332 002400  LOADN CLA 
  10333 071061        STA L001
  10334 003400        CCA 
  10335 071056        STA LWH1      PRESET
  10336 065061        LDB L001
  10337 006002        SZB 
  10340 026345        JMP *+5 
  10341 060446        LDA TPREL     SAVE FOR RESET
  10342 072312        STA LWH4       FOR NEXT PASS
  10343 061320        LDA TBREL 
  10344 072311        STA LWH3
  10345 062507        LDA RSS 
  10346 172304        STA BLN3,I
  10347 002400        CLA 
  10350 071060  LOADX STA L01 
  10351 061061        LDA L001
  10352 002003        SZA,RSS 
  10353 026357        JMP LH16      CLEAR 
  10354 062311        LDA LWH3       BP LINK
  10355 065320        LDB TBREL       ADDRESSES 
  10356 114132        JSB ACLRT,I 
  10357 062312  LH16  LDA LWH4      RESTORE TPREL 
  10360 065060        LDB L01        OR IS THIS FINAL PASS? 
  10361 006003        SZB,RSS       SKIP IF FINAL 
  10362 070446        STA TPREL     RESTORE IT
  10363 062311        LDA LWH3
  10364 071320        STA TBREL     RESTORE TBREL 
  10365 016267        JSB CLIST     BLANK MEMORY MAP BUFFER 
  10366 060460        LDA AMLST     AMLST = ADDR OF MEM MAP BUFFER
  10367 071274        STA AMAD      SET CURRENT MEMORY MAP ADDRESS
  10370 061331        LDA HDFLG     GET HEADING FORMAT FLAG 
  10371 071055        STA TEMP2 
  10372 002021        SSA,RSS       SKIP IF NEGATIVE (MAIN) 
  10373 035274        ISZ AMAD      INCR CURRENT MEM MAP ADDR 
  10374 160517        LDA ID1,I     GET NAME 1,2
  10375 171274        STA AMAD,I    SET NAME 1,2 IN MEMORY MAP
  10376 035274        ISZ AMAD      INCR CURRENT MEMORY MAP ADDRESS 
  10377 160520        LDA ID2,I     GET NAME 3 4
  10400 171274        STA AMAD,I    SET NAME 3,4 IN MEMORY MAP
  10401 035274        ISZ AMAD      INCR CURRENT MEMORY MAP ADDRESS 
  10402 160521        LDA ID3,I     GET NAME 5
  10403 010255        AND M7400     ISOLATE UPPER CHAR
  10404 030276        IOR BLANK     ADD BLANK (OCT 40)
  10405 171274        STA AMAD,I    SET NAME 5 IN MEMORY MAP
  10406 017231        JSB ZLOAD     LOADING?
  10407 026416        JMP LH7        NO 
  10410 061060        LDA L01 
  10411 002002        SZA           1ST PASS? 
  10412 026416        JMP LH7        YES
  10413 035055        ISZ TEMP2      NO - TEST TEMPORARY HDFLG
  10414 026453        JMP SUBHD 
  10415 026420        JMP *+3 
  10416 035331  LH7   ISZ HDFLG     TEST REAL THING 
  10417 026453        JMP SUBHD     SKIP PRIORITY OUTPUT FOR SUB
* 
  10420 060514        LDA DSKAD     GET CURRENT DISK ADDRESS
  10421 065060        LDB L01 
  10422 006003        SZB,RSS       IF 1ST PASS,
  10423 071453        STA DSKMN     SAVE INITIAL MAIN DISK ADDRESS
  10424 065324        LDB PLMAN     GET LIST ADDRESS FOR SEGMENTS 
  10425 061315        LDA PTYPE     GET PROGRAM TYPE
  10426 050207        CPA P5        TYPE = BG SEGMENT?
  10427 026434        JMP CLPLT     BACK GROUND SEGMENT SO JUMP 
  10430 064457        LDB PLAD      GET ADDRESS OF PROGRAM LIST 
  10431 060517        LDA ID1       GET IDENT ADDRESS OF MAIN 
  10432 170001        STA B,I       SET ADDRESS IN PLIST
  10433 006004        INB           INCR CURRENT PLIST ADDRESS
  10434 002400  CLPLT CLA 
  10435 170001        STA B,I       CLEAR PLIST WORD
* 
  10436 062310  SETMP LDA LPAR      GET LEFT PAREN (OCT 50) 
  10437 131274        IOR AMAD,I    CHANGE NAME 5, BLANK TO NAME 5,(
  10440 171274        STA AMAD,I    SET NAME 5, LEFT PAREN IN MAP 
  10441 160524        LDA ID6,I     GET PRIORITY
  10442 001727        ALF,ALF       ROTATE TO LOW A 
  10443 010242        AND M177      ISOLATE PRIORITY
  10444 003004        CMA,INA       SET TO NEGATIVE FOR DECIMAL CONV
  10445 064456        LDB ATBUF     GET MESSAGE ADDRESS 
  10446 016222        JSB CONVD     CONVERT TO DECIMAL/OCTAL
  10447 061271        LDA TBUF+2    GET 2 LEAST SIGNIFICANT DIGITS
  10450 071300        STA MLIST+3   SET PRIORITY IN MEMORY MAP
  10451 061062        LDA RPARB     GET RIGHT PAREN,BLANK 
  10452 071301        STA MLIST+4   SET RIGHT PAREN IN MEMORY MAP 
  10453 060446  SUBHD LDA TPREL     GET CURRENT PROG RELOC ADDR 
  10454 064461        LDB AMEM5     SET B = ADDR OF MEMORY MAP + 5
  10455 016222        JSB CONVD     CONVERT TO DECIMAL/OCTAL
  10456 160524        LDA ID6,I     GET TYPE
  10457 010242        AND M177      MASK
  10460 071472        STA LDTYP     SET TYPE OF CURRENT PGM 
  10461 017231        JSB ZLOAD     LOADING THIS ONE? 
  10462 026473        JMP LH1       NO; SKIP MAP
  10463 061060        LDA L01 
  10464 002003        SZA,RSS       ALSO SKIP MAP 
  10465 026473        JMP LH1        ON FIRST PASS
  10466 035327        ISZ LFLAG     YES; STEP LOADED PGMS FLAG
  10467 000000        NOP 
  10470 060220        LDA P16 
  10471 064460        LDB AMLST     AMLST = ADDR OF MEM MAP BUFFER
  10472 114102        JSB DRKEY,I   PRINT HEADING 
  10473 160523  LH1   LDA ID5,I     GET DISK ADDRESS
  10474 071333        STA DSKRD     SAVE CURRENT DISK INPUT ADDRESS 
* 
*                                   READ NAM RECORD FROM DISK 
  10475 017401        JSB DBIN      GET RECORD FROM DISK
  10476 060543  DBINT LDA LBUF+1    GET RIC 
  10477 001723        ALF,RAR       ROTATE TO LOW A 
  10500 010211        AND M7        ISOLATE RIC 
  10501 050267        CPA P1        NAM RECORD? 
  10502 002001        RSS           YES - CONTINUE
  10503 102000        HLT 0B        INVALID DISK RECORD 
  10504 060550        LDA LBUF+6    GET PROGRAM LENGTH
  10505 071465        STA PLGTH     SAVE PROGRAM LENGTH 
  10506 017231        JSB ZLOAD     LOADING?
  10507 002001  RSS   RSS           NO - SKIP 
  10510 116301        JSB LINKA,I   SET UP LOW CURRENT PG LINK BUFF 
  10511 064446        LDB TPREL     GET PROGRAM RELOCATION BASE 
  10512 075323        STB RELAD     SET CURRENT RELOCATION ADDRESS
  10513 060540        LDA CURAL     GET CURRENT LBUF ADDRESS
  10514 040221        ADA P17       ADJUST FOR END OF NAM RECORD
  10515 070540        STA CURAL     SET FOR END OF NAM RECORD 
  10516 060541        LDA LCNT      GET CURRENT LBUF COUNT
  10517 040221        ADA P17       ADJUST FOR END OF NAM RECORD
  10520 070541        STA LCNT      SET NEW CURRENT COUNT 
* 
*                                   CLASSIFY ENT, EXT, DBL, END RECS
  10521 017373  CLSRC JSB DBSET     GET ADDR OF NEXT WORD IN LBUF 
  10522 160540        LDA CURAL,I   GET SECOND WORD IN RECORD 
  10523 064000        LDB A         SAVE WORD IN B
  10524 001723        ALF,RAR       ROTATE RIC TO LOW A 
  10525 010211        AND M7        ISOLATE RIC 
  10526 050204        CPA P2        ENT RECORD? 
  10527 026636        JMP DENTR     PROCESS ENT RECORD
  10530 050205        CPA P3        DBL RECORD? 
  10531 027047        JMP DDBLR     PROCESS DBL RECORD
  10532 050206        CPA P4        EXT RECORD? 
  10533 026637        JMP DEXTR     PROCESS EXT RECORD
  10534 050207        CPA P5        END RECORD? 
  10535 002001        RSS           YES - PROCESS END RECORD
  10536 102000        HLT 0B        INVALID DISK RECORD 
* 
  10537 017231        JSB ZLOAD     LOADING?
  10540 026555        JMP CLST-1     NO 
  10541 061060        LDA L01       IF FIRST OF 
  10542 002002        SZA            TWO PASSES,
  10543 026546        JMP *+3        GO TO WRITE
  10544 071056        STA LWH1       LOW CURRENT PAGE 
  10545 126305        JMP CROSA,I    LINK BUFFER
*                                   PROCESS END RECORD
  10546 017373        JSB DBSET     GET ADDR OF NEXT WORD IN LBUF 
  10547 017373        JSB DBSET     GET ADDR OF NEXT WORD IN LBUF 
  10550 060446        LDA TPREL     GET CURRENT PROG RELOCATION BASE
  10551 140540        ADA CURAL,I   ADD RELOCATION ADDRESS
  10552 065331        LDB HDFLG     GET HEADING FLAG
  10553 006003        SZB,RSS       SKIP UNLESS MAIN
  10554 071455        STA PRENT     SAVE PRIMARY ENTRY POINT FOR ID 
  10555 014412        JSB INLST     INITIATE LSTX 
  10556 014416  CLST  JSB LSTX      SET LST ADDRESSES 
  10557 026564        JMP LSTCR     END OF LST
  10560 160533        LDA LST3,I    GET WORD 3 OF LST (ORDINAL) 
  10561 010255        AND M7400     ISOLATE UPPER CHAR - CLEAR ORD
  10562 170533        STA LST3,I    SET NAME 5 IN LST 
  10563 026556        JMP CLST      CONTINUE CLEARING ORDINALS
  10564 017231  LSTCR JSB ZLOAD     WAS CURRENT PGM LOADED? 
  10565 026607        JMP PLSCN-1   NO SKIP ADDRESS UP DATE 
  10566 061465        LDA PLGTH     GET PROGRAM LENGTH
  10567 001265        RAL,CLE,ERA   SET E = SIGN
  10570 040446        ADA TPREL     ADD PROGRAM RELOCATION BASE 
  10571 002040        SEZ           SKIP IF ASSEMBLER PRODUCED
  10572 061323        LDA RELAD     GET CURRENT RELOCATION ADDRESS
  10573 070446        STA TPREL     SET NEW RELOCATION BASE 
  10574 070001        STA B         SAVE NEW PROG RELOC BASE IN B 
  10575 061323        LDA RELAD     GET LAST WORD ADDRESS 
  10576 003004        CMA,INA 
  10577 044000        ADB A         ADD RELOC BASE
  10600 006003        SZB,RSS       SKIP - FILL SPACE WITH HALTS
  10601 026604        JMP *+3       NO HALTS REQUIRED AT END OF PROG
  10602 002400        CLA 
  10603 114135        JSB ALABD,I   FILL IN LAST BSS WITH ZEROS 
  10604 061060        LDA L01       IF 2ND PASS, GO TO WRITE HIGH 
  10605 002021        SSA,RSS       CURRENT PAGE LINK BUFFER
  10606 116302        JSB LINKB,I   SEND HIGH CURRENT PG LINK BUFF
  10607 064457        LDB PLAD      PLAD = ADDR OF PROGRAM LIST 
  10610 160001  PLSCN LDA B,I       GET PROG LIST ENTRY 
  10611 002003        SZA,RSS       SKIP - ENTRY IN PLIST 
  10612 026617        JMP CLFLG     CLEAR FLAGS FOR PROGRAMS
  10613 002020        SSA           SKIP IF POSITIVE (PROG LOADED)
  10614 026624        JMP ENTID     GET NEXT PROGRAM IDENT ADDRESS
  10615 006004  EPLST INB           INCR PROGRAM LIST ADDRESS 
  10616 026610        JMP PLSCN     NO - CONTINUE PROG LIST SEARCH
  10617 061315  CLFLG LDA PTYPE     GET CURRENT PROGRAM TYPE
  10620 050205        CPA P3        TYPE = BG DISK RESIDENT?
  10621 126327        JMP LOADS,I   YES - DO NOT CLEAR LOADED FLAGS 
  10622 017241        JSB CLID3     CLEAR PROG-LOADED FLAGS 
  10623 126327        JMP LOADS,I   RETURN - ALL FLAGS CLEARED
* 
  10624 001265  ENTID RAL,CLE,ERA   CLEAR SIGN (PROG TO BE LOADED)
  10625 070470        STA TIDNT     SET IDENT ADDRESS FOR IDX 
  10626 170001        STA B,I       SET ENTRY IN PROGRAM LIST 
  10627 014351        JSB IDX       SET IDENT ADDRESSES 
  10630 102000        HLT 0B        INVALID RETURN - NON-EXISTENT ID
  10631 160521        LDA ID3,I     GET PROGRAM USAGE FLAG
  10632 000010        SLA, NA       SKIP - PROGRAM NOT YET LOADED 
  10633 026615        JMP EPLST     TEST FOR END OF PLIST 
  10634 170521        STA ID3,I     SET PROGRAM USAGE FLAG = LOADED 
  10635 026332        JMP LOADN     LOAD NEXT PROGRAM 
* 
*                                   PROCESS ENT/EXT RECORDS 
  10636 003401  DENTR CCA,RSS       SET ENT FLAG AND SKIP 
  10637 002400  DEXTR CLA           SET EXT FLAG
  10640 070536        STA NXFLG     SAVE ENT/EXT FLAG 
  10641 060001        LDA B         GET NO. ENTRIES IN EXT/ENT
  10642 010236        AND M37       ISOLATE SYMBOL COUNT
  10643 003004        CMA,INA 
  10644 070537        STA EXCNT     SET SYMBOL COUNTER
  10645 017373        JSB DBSET     GET ADDR OF NEXT WORD IN LBUF 
  10646 017373        JSB DBSET     GET ADDR OF NEXT WORD IN LBUF 
  10647 160540  NXSYM LDA CURAL,I   GET NAME 1,2
  10650 071267        STA TBUF      SAVE NAME 1,2 IN TEMP BUFF
  10651 017373        JSB DBSET     GET ADDR OF NEXT WORD IN LBUF 
  10652 160540        LDA CURAL,I   GET NAME 3,4
  10653 071270        STA TBUF+1    SAVE NAME IN TEMP BUFF
  10654 017373        JSB DBSET     GET ADDR OF NEXT WORD IN LBUF 
  10655 160540        LDA CURAL,I   GET NAME 5
  10656 071271        STA TBUF+2    SAVE NAME IN TEMP BUFF
  10657 017373        JSB DBSET     GET ADDR OF NEXT WORD IN LBUF 
  10660 014412        JSB INLST     INITIATE LSTX 
  10661 014416  ENEX1 JSB LSTX      SET LST ADDRESSES 
  10662 102000        HLT 0B        ENT/EXT NOT FOUND IN LST
  10663 061267        LDA TBUF      GET NAME 1,2
  10664 150531        CPA LST1,I    EQUAL?
  10665 002001        RSS           YES - CONTINUE
  10666 026661        JMP ENEX1     NO - TRY NEXT LST ENTRY 
  10667 061270        LDA TBUF+1    GET NAME 3,4
  10670 150532        CPA LST2,I    EQUAL?
  10671 002001        RSS           YES - CONTINUE
  10672 026661        JMP ENEX1     NO - TRY NEXT LST ENTRY 
  10673 061271        LDA TBUF+2    GET NAME 5
  10674 010255        AND M7400     ISOLATE UPPER CHAR
  10675 070001        STA B 
  10676 160533        LDA LST3,I
  10677 010255        AND M7400 
  10700 050001        CPA B         EQUAL?
  10701 002001        RSS           YES - CONTINUE
  10702 026661        JMP ENEX1     NO - TRY NEXT LST ENTRY 
* 
  10703 060536        LDA NXFLG     GET ENT/EXT FLAG
  10704 002003        SZA,RSS       SKIP IF ENTRY 
  10705 026751        JMP EXT1      PROCESS EXT 
  10706 017231        JSB ZLOAD     IF NOT LOADING CURRENT PGM
  10707 026747        JMP NLENT     SKIP LINK AND MAP 
  10710 064446        LDB TPREL     GET CURRENT PROG RELOC BASE 
  10711 144540        ADB CURAL,I   ADD CURRENT RELOCATION VALUE
  10712 075464        STB OPRND     SAVE ABS ENTRY PT. ADDRESS
  10713 160535        LDA LST5,I    GET BP LINK ADDRESS 
  10714 002003        SZA,RSS       SKIP - BP LINK ADDR SET 
  10715 017302        JSB BPSCN     SET BP LINK ADDR, BP LINK 
  10716 170535        STA LST5,I    SET BP LINK ADDRESS IN LST
  10717 017340        JSB SETOP     SET OPERAND IN BASE PAGE
  10720 061060        LDA L01       IF 1ST OF TWO 
  10721 002003        SZA,RSS        PASSES, SKIP 
  10722 026747        JMP NLENT      ENT LIST 
  10723 102501        LIA 1         GET SWITCH REGISTER 
  10724 002021        SSA,RSS       SKIP - SWITCH 15 UP (LIST ENTS) 
  10725 026747        JMP NLENT     SUPPRESS PRINTING OF MAP
  10726 016267        JSB CLIST     CLEAR MEMORY MAP BUFFER 
  10727 062307        LDA BLAST     GET BLANK, ASTERISK 
  10730 071276        STA MLIST+1   SET IN MAP
  10731 160531        LDA LST1,I    GET NAME 1,2
  10732 071277        STA MLIST+2   SET IN MEMORY MAP 
  10733 160532        LDA LST2,I    GET NAME 3,4
  10734 071300        STA MLIST+3   SET IN MEMORY MAP BUFFER
  10735 160533        LDA LST3,I    GET NAME 5
  10736 010255        AND M7400     ISOLATE UPPER CHAR
  10737 030276        IOR BLANK     SET LOWER CHARACTER = BLANK 
  10740 071301        STA MLIST+4   SET NAME 5 IN MEM MAP 
  10741 061464        LDA OPRND     GET ABSOLUTE ENTRY PT. ADDRESS
  10742 064461        LDB AMEM5     GET ADDRESS OF MESSAGE
  10743 016222        JSB CONVD     CONVERT TO DECIMAL/OCTAL
  10744 060220        LDA P16 
  10745 064460        LDB AMLST     GET ADDRESS OF MEM MAP BUFFER 
  10746 114102        JSB DRKEY,I   PRINT ENTRY POINT 
  10747 017373  NLENT JSB DBSET     GET ADDR OF NEXT WORD IN LBUF 
  10750 027044        JMP EXEND     PROCESS NEXT SYMBOL 
* 
  10751 061271  EXT1  LDA TBUF+2    GET ORDINAL 
  10752 170533        STA LST3,I    SET ORDINAL IN LST
  10753 017231        JSB ZLOAD     IF NOT LOADING CURRENT PGM
  10754 026761        JMP *+5       SKIP LINK ALLOCATION
  10755 160535        LDA LST5,I    GET BP LINK ADDRESS 
  10756 002003        SZA,RSS       SKIP - BP LINK ADDRESS SET
  10757 017346        JSB ALLOC     ALLOCATE NEW BP LOCATION
  10760 170535        STA LST5,I    SET NEW BP LINK ADDRESS 
  10761 160534        LDA LST4,I    GET IDENT ADDRESS 
  10762 002003        SZA,RSS       SKIP - EXT DEFINED
  10763 027044        JMP EXEND     IGNORE UNDEFINED PROGRAM CALL 
  10764 070470        STA TIDNT     SET ID ADDR FOR IDX 
  10765 060517        LDA ID1       GET CURRENT IDENT ADDRESS 
  10766 071267        STA TBUF      SAVE CURRENT IDENT ADDRESS
  10767 014351        JSB IDX       SET IDENT ADDRESSES 
  10770 102000        HLT 0B        IDENT NOT FOUND IN LIST 
  10771 160524        LDA ID6,I     GET M/S, TYPE 
  10772 071270        STA TBUF+1    SAVE M/S, TYPE
  10773 160521        LDA ID3,I     GET PROGRAM USAGE FLAG
  10774 071271        STA TBUF+2    SAVE USAGE FLAG 
  10775 061267        LDA TBUF      GET CURRENT IDENT ADDRESS 
  10776 070470        STA TIDNT     SET CURRENT IDENT ADDR
  10777 014351        JSB IDX       SET IDENT ADDRESSES 
  11000 102000        HLT 0B        CURRENT IDENT NOT FOUND IN LIST 
  11001 061270        LDA TBUF+1    GET M/S, TYPE FOR EXT 
  11002 001265        RAL,CLE,ERA   SET E = M/S 
  11003 010242        AND M177      ISOLATE TYPE
  11004 050210        CPA P6        TYPE = LIBRARY? 
  11005 027017        JMP LIBUT     YES - TEST FOR LOADING
  11006 002003        SZA,RSS       IF SYSTEM REFERENCE 
  11007 027013        JMP *+4       CONTINUE
  11010 064210        LDB P6        ELSE IF CURRENT TYPE
  11011 055472        CPB LDTYP     IS 6 THEN 
  11012 027030        JMP CALER     ERROR - TYPE 6 MAY  ONLY CALL TYPES 0/6 
  11013 050211        CPA P7        TYPE = UTILITY? 
  11014 027017        JMP LIBUT     YES - TEST FOR LOADING
  11015 002040        SEZ           SKIP - NOT MAIN PROGRAM 
  11016 027044        JMP EXEND     IGNORE PROGRAM CALL 
  11017 064457  LIBUT LDB PLAD      GET PROGRAM LIST ADDRESS
  11020 160001  PLEXT LDA B,I       GET PROG LIST ENTRY 
  11021 002003        SZA,RSS       SKIP IF IDENT ADDRESS 
  11022 027033        JMP SEXT      MAKE ENTRY IN PROGRAM LIST
  11023 001265        RAL,CLE,ERA   CLEAR SIGN
  11024 150534        CPA LST4,I    PROGRAM PREVIOUSLY CALLED?
  11025 027044        JMP EXEND     YES - IGNORE EXT SYMBOL 
  11026 006004        INB           INCR PROG LIST ADDR 
  11027 027020        JMP PLEXT      CONTINUE PROGRAM LIST SCAN 
  11030 060336  CALER LDA ERR15     SET ERROR CODE - ILLEGAL CALL 
  11031 014317        JSB ERROR     PRINT DIAGNOSTIC
  11032 027044        JMP EXEND     TEST FOR ALL EXTS PROCESSED 
  11033 061271  SEXT  LDA TBUF+2    GET PROGRAM USAGE FLAG
  11034 000010        SLA           SKIP - PROGRAM NOT LOADED 
  11035 027044        JMP EXEND     OMIT PROGRAM LIST ENTRY 
  11036 160534        LDA LST4,I    GET CALLED PROGRAM IDENT ADDRESS
  11037 030300        IOR MSIGN     SET SIGN TO SHOW PROG NOT LOADED
  11040 170001        STA B,I       SET IN PROGRAM LIST 
  11041 006004        INB           STEP TO NEXT LIST ENTRY 
  11042 002400        CLA           AND 
  11043 170001        STA B,I       SET TO ZERO TO INDICATE END 
  11044 034537  EXEND ISZ EXCNT     SKIP - ALL SYMBOLS PROCESSED
  11045 026647        JMP NXSYM     NO - PROCESS NEXT SYMBOL
  11046 026521        JMP CLSRC     NO - CLASSIFY NEXT RECORD 
* 
*                                   PROCESS DBL RECORDS 
  11047 017231  DDBLR JSB ZLOAD     IF NOT LOADING
  11050 026555        JMP CLST-1    SKIP TO END 
  11051 060001        LDA B         GET COUNT 
  11052 010240        AND M77       ISOLATE COUNT 
  11053 003004        CMA,INA 
  11054 070537        STA EXCNT     SET INSTRUCTION COUNT 
  11055 017373        JSB DBSET     GET ADDR OF NEXT WORD IN LBUF 
  11056 017373        JSB DBSET     GET ADDR OF NEXT WORD IN LBUF 
* 
  11057 164540        LDB CURAL,I   GET RELOCATION ADDRESS
  11060 075456        STB DBLAD     SAVE RELOCATION ADDRESS 
  11061 034515        ISZ PLFLG     SKIP - FIRST DBL RECORD 
  11062 027101        JMP DBL0      IGNORE SUBSEQUENT RECORDS 
  11063 061060        LDA L01 
  11064 002002        SZA 
  11065 160524        LDA ID6,I     GET TYPE
  11066 010242        AND M177      ISOLATE TYPE
  11067 050204        CPA P2        TYPE = RT DISK RESIDENT?
  11070 027076        JMP HABSS     SET NEW MEMORY BOUND
  11071 050205        CPA P3        TYPE = BG DISK RESIDENT?
  11072 027076        JMP HABSS     SET NEW MEMORY BOUND
  11073 050207        CPA P5        TYPE = BG SEGMENT?
  11074 002001        RSS 
  11075 006400        CLB           SET PGMAD = 0 FOR RESIDENTS 
  11076 075454  HABSS STB BSSDP     SAVE INITIAL PROG DISPLACEMENT
  11077 045323        ADB RELAD     ADD RELOCATION ADDRESS
  11100 075323        STB RELAD     SET NEW RELOCATION ADDRESS
  11101 017373  DBL0  JSB DBSET     GET ADDR OF NEXT WORD IN LBUF 
  11102 164540  DBL1  LDB CURAL,I   GET RELOCATION BYTES
  11103 075457        STB REKEY     SAVE FOR RELOCATION TYPE
  11104 060171        LDA N5
  11105 071460        STA INSCN     SET RELOCATION BYTE COUNT 
  11106 017373        JSB DBSET     GET ADDR OF NEXT WORD IN LBUF 
* 
  11107 061457  DBL2  LDA REKEY     GET RELOCATION BYTES
  11110 001723        ALF,RAR       ROTATE TO LOW A 
  11111 071457        STA REKEY     SAVE FOR NEXT INSTRUCTION WORD
  11112 010211        AND M7        ISOLATE CURRENT BYTE
  11113 050206        CPA P4        EXTERNAL REFERENCE? 
  11114 027145        JMP DBL4      YES - GET LINK ADDRESS
  11115 050207        CPA P5        MEMORY REFERENCE? 
  11116 027166        JMP DBL6      YES - CHECK FOR INDIRECT LINK 
  11117 040444        ADA RBTAD     ADD RELOCATION BASE TABLE ADDR
  11120 160000        LDA A,I       GET RELOCATION BASE 
  11121 140540        ADA CURAL,I   ADD CURRENT INSTRUCTION WORD
* 
  11122 065323  DBL3  LDB RELAD     GET PREVIOUS RELOCATION ADDRESS 
  11123 007004        CMB,INB       SET TO NEGATIVE 
  11124 045456        ADB DBLAD     ADD CURRENT RELOCATION ADDRESS
  11125 044446        ADB TPREL     ADD CURRENT PROG RELOCATION BASE
  11126 006004        INB           INCR FOR NEXT LOCATION
  11127 071055        STA TEMP2     IF 1ST OF 2 PASSES, 
  11130 061060        LDA L01        DO NOT OUTPUT
  11131 002003        SZA,RSS        TO DISC
  11132 027135        JMP *+3 
  11133 061055        LDA TEMP2 
  11134 114135        JSB ALABD,I   OUTPUT ABSOLUTE WORD
  11135 017373        JSB DBSET     GET ADDR OF NEXT WORD IN LBUF 
  11136 034537        ISZ EXCNT     SKIP - LAST INSTRUCTION OUT 
  11137 002001        RSS           NO - CONTINUE 
  11140 026521        JMP CLSRC     YES - CLASSIFY NEXT RECORD
  11141 035456        ISZ DBLAD     INCR DBL RELOCATION ADDRESS 
  11142 035460        ISZ INSCN     SKIP IF NEW RELOCATION BYTE 
  11143 027107        JMP DBL2      NO - PROCESS NEXT INSTRUCTION 
  11144 027102        JMP DBL1      YES - GET NEXT RELOCATION BYTE
* 
  11145 160540  DBL4  LDA CURAL,I   GET CURRENT DBL WORD
  11146 010243        AND M377      ISOLATE ORDINAL 
  11147 071461        STA EXORD     SAVE ORDINAL
  11150 014412        JSB INLST     INITIALIZE LSTX 
  11151 014416  DBL5  JSB LSTX      SET LST ADDRESSES 
  11152 102000        HLT 0B        ORDINAL NOT FOUND 
  11153 160533        LDA LST3,I    GET WORD 3 OF LST ENTRY 
  11154 010243        AND M377      ISOLATE ORDINAL 
  11155 051461        CPA EXORD     SAME ORDINALS?
  11156 002001        RSS           YES - CONTINUE
  11157 027151        JMP DBL5      NO - CONTINUE LST SEARCH
  11160 164535        LDB LST5,I    GET BP LINK ADDRESS 
  11161 160540        LDA CURAL,I   GET CURRENT DBL WORD
  11162 010245        AND M1740     ISOLATE INSTRUCTION CODE
  11163 030300        IOR MSIGN     SET SIGN = 1 (INDIRECT) 
  11164 030001        IOR B         SET ADDRESS = BP LINK ADDRESS 
  11165 027122        JMP DBL3      OUTPUT INSTRUCIION
* 
  11166 160540  DBL6  LDA CURAL,I   GET CURRENT DBL WORD
  11167 071462        STA INSTR     SAVE INSTRUCTION CODE 
  11170 017373        JSB DBSET     GET ADDR OF NEXT WORD IN LBUF 
  11171 061462        LDA INSTR     GET INSTRUCTION CODE
  11172 064446        LDB TPREL     GET CURRENT PROG RELOC ADDR 
  11173 001332        RAR,SLA,RAL   SKIP IF PROGRAM REFERENCE 
  11174 064450        LDB COMAD     REPLACE PROG WITH COMMON BASE 
  11175 144540        ADB CURAL,I   ADD CURRENT INSTR ADDRESS 
  11176 010245        AND M1740     ISOLATE INSTRUCTION CODE
  11177 002020        SSA           SKIP IF DIRECT REFERENCE
  11200 044300        ADB MSIGN     SET SIGN = 1
  11201 071462        STA INSTR     SAVE INSTRUCTION CODE 
  11202 061456        LDA DBLAD     GET CURRENT RELOCATION ADDRESS
  11203 040446        ADA TPREL     ADD CURRENT RELOCATION BASE 
  11204 010244        AND M0760     ISOLATE PAGE NUMBER 
  11205 071463        STA PAGNO     SAVE CURRENT PAGE NUMBER
  11206 060001        LDA B         GET INSTRUCTION ADDRESS 
  11207 010244        AND M0760     ISOLATE PAGE NUMBER 
  11210 051463        CPA PAGNO     SAME PAGE?
  11211 027224        JMP DBL7      YES - NO INDIRECT ADDRESS NEEDED
  11212 075464        STB OPRND     SAVE INSTRUCTION ADDRESS
  11213 017302        JSB BPSCN     SCAN BP FOR SAME OPERAND
  11214 017340  LINKC JSB SETOP     SET OPERAND IN BP LOCATION
  11215 070001        STA B         SAVE LINK ADDRESS 
  11216 010247        AND M1777     GET PAGE OFFSET 
  11217 050001        CPA B         CURRENT PAGE? 
  11220 002001        RSS           NO SKIP 
  11221 030250        IOR M2000     YES-- SET CURRENT PAGE BIT
  11222 030300        IOR MSIGN     SET INDIRECT BIT
  11223 027227        JMP DBL8      GO ADD INSTRUCTION AND STORE THE WORD 
* 
  11224 060001  DBL7  LDA B         GET OPERAND ADDRESS 
  11225 010247        AND M1777     ISOLATE PAGE LOCATION 
  11226 030250        IOR M2000     SET Z/C = 1 (CURRENT) 
  11227 031462  DBL8  IOR INSTR     ADD INSTRUCTION CODE
  11230 027122        JMP DBL3      OUTPUT INSTRUCTION WORD 
                      SPC 2 
  11231 000000  ZLOAD NOP           TEST FOR LOADING CURRENT PGM
  11232 061471        LDA LIBFG     LIB LOADING?
  11233 002003        SZA,RSS 
  11234 027237        JMP *+3       NO; THEN LOADING - GO STEP ADDRESS
  11235 060210        LDA P6        YES; CURRENT PGM TYPE=6?
  11236 051472        CPA LDTYP 
  11237 037231        ISZ ZLOAD     LIB AND SIX OR NOT LIB STEP ADDRESS 
  11240 127231        JMP ZLOAD,I   RETURN
                      SKP 
*                                   CLEAR PROGRAMS-LOADED FLAGS 
* 
*  CLID3 CLEARS THE USAGE FLAGS TO ENSURE THAT PROGRAMS WILL BE 
*  RE-LOADED AGAIN IF CALLED MORE THAN ONCE.  THIS IS ESSENTIAL 
*  FOR ALL UTILITY PROGRAMS AND USER SUBROUTINES, BUT MUST NOT
*  BE DONE FOR SYSTEM PROGRAMS, LIBRARY PROGRAMS, OR MAIN USER
*  PROGRAMS.  BOTH THE USAGE FLAG IN THE IDENT ENTRY AND THE
*  BP LINK ADDRESS FOR ALL ENTRY POINTS IN THE PROGRAM ARE CLEARED. 
* 
*  CALLING SEQUENCE:
*    A = IGNORED
*    B = IGNORED
*    JSB CLID3
*  RETURN: CONTENTS OF A AND B ARE DESTROYED. 
* 
  11241 000000  CLID3 NOP 
  11242 060207        LDA P5
  11243 064457        LDB PLAD      GET ADDRESS OF PROGRAM LIST 
  11244 051315        CPA PTYPE     PROG = BG SEGMENT?
  11245 065324        LDB PLMAN     YES - GET MAIN PROG LIST ADDRESS
  11246 075273        STB CURAP     SET CURRENT PROG LIST ADDRESS 
  11247 161273  TRID3 LDA CURAP,I   GET CURRENT PROG LIST ENTRY 
  11250 002003        SZA,RSS       SKIP - NOT ENT OF PROG LIST 
  11251 127241        JMP CLID3,I   RETURN (ALL FLAGS CLEARED)
  11252 035273        ISZ CURAP     INCR CURRENT PROG LIST ADDRESS
  11253 070470        STA TIDNT     SET CURRENT IDENT ADDRESS 
  11254 014351        JSB IDX       SET CURRENT IDENT ADDRESSES 
  11255 102000        HLT 0B        IDENT NOT FOUND 
  11256 160524        LDA ID6,I     GET M/S,TYPE
  11257 002020        SSA           SKIP IF SUB 
  11260 027247        JMP TRID3     IGNORE MAIN 
  11261 010242        AND M177      ISOLATE TYPE
  11262 050210        CPA P6        TYPE = LIBRARY? 
  11263 027247        JMP TRID3     YES - DO NOT CHANGE FLAG
  11264 050164        CPA ZERO      TYPE = SYSTEM?
  11265 027247        JMP TRID3     YES - DO NOT CHANGE FLAG
  11266 160521        LDA ID3,I     GET USAGE FLAG
  11267 010255        AND M7400     ISOLATE NAME 5
  11270 170521        STA ID3,I     SET NAME 5 IN IDENT 
  11271 014412        JSB INLST     INITIALIZE LSTX 
  11272 014416  CLSUT JSB LSTX      SET CURRENT LST ADDRESSES 
  11273 027247        JMP TRID3     TRY NEXT IDENT
  11274 160534        LDA LST4,I    GET IDENT ADDRESS 
  11275 050517        CPA ID1       ENT/EXT BELONGS TO CURRENT PROG?
  11276 006401        CLB,RSS       YES - CONTINUE
  11277 027272        JMP CLSUT     TRY NEXT LST ENTRY
  11300 174535        STB LST5,I    CLEAR BP LINK ADDRESS 
  11301 027272        JMP CLSUT     CONTINUE CLEARING BP LINK ADDR. 
                     SKP 
* 
*                                   GET BP LINK ADDR, SET BP VALUE
* 
*  BPSCN SCANS THE RESIDENT AND CURRENT SECTIONS OF BASE PAGE 
*  FOR A VALUE EQUAL TO THE CURRENT OPERAND.  IF SUCH A VALUE 
*  IS FOUND, THE ADDRESS OF THE OPERAND IS RETURNED 
*  IN THE A-REGISTER.  OTHERWISE, A NEW BP LINK WORD IS 
*  RESERVED AND THE ADDRESS OF THIS WORD RETURNED IN A. 
* 
*  CALLING SEQUENCE:
*    A = IGNORED
*    B = IGNORED
*    JSB BPSCN
* 
*  RETURN:
*    A = BP LINK ADDRESS FOR CURRENT OPERAND
*    B = DESTOYED 
* 
  11302 000000  BPSCN NOP           SCAN BP AREA FOR SAME OPERAND 
* 
  11303 061046        LDA LRBP      GET LOW RESIDENT BOUND
  11304 065047        LDB URBP      GET HIGH RESIDENT BOUND 
  11305 017317        JSB SCNBP     SCAN AREA FOR SAME OPERAND
* 
  11306 061050        LDA LBBP      GET LOW BACKGROUND BOUND
  11307 065051        LDB UBBP      GET HIGH BACKGROUND BOUND 
  11310 017317        JSB SCNBP     SCAN AREA FOR SAME OPERAND
* 
  11311 061321        LDA PBREL     GET LOW CURRENT BOUND 
  11312 065320        LDB TBREL     GET HIGH CURRENT BOUND
  11313 017317        JSB SCNBP     SCAN AREA FOR SAME OPERAND
* 
  11314 116303        JSB LINKD,I   GO CHECK FOR CURRENT PAGE LINK
* 
  11315 017346        JSB ALLOC     ALLOCATE NEW BP LINK ADDRESS
  11316 127302        JMP BPSCN,I   RETURN - A = BP LINK ADDRESS
                      SKP 
* 
*                                   SCAN BP AREA FOR SAME OPERAND 
* 
*  THE SCNBP SUBROUTINES CONTROLS THE SCAN FOR A GIVEN OPERAND
*  IN THE CURRENT BP SECTION. 
* 
*  CALLING SEQUENCE:
*    A = LOWER BP ADDRESS 
*    B = UPPER BP ADDRESS 
*    JSB SCNBP
* 
*  RETURN:
*    (1): TO BPSCN - OPERAND NOT FOUND
*    (2): TO MAIN PROGRAM - OPERAND FOUND (A = BP ADDR OF OPERAND)
* 
  11317 000000  SCNBP NOP 
  11320 007004        CMB,INB       SET LOW BOUND TO NEGATIVE 
  11321 075467        STB UPPER     SAVE NEGATIVE UPPER BOUND 
  11322 071466        STA LOWER     SAVE LOWER BOUND
  11323 061466  BPSRC LDA LOWER     GET CURRENT LOW BP BOUND
  11324 041467        ADA UPPER     TEST FOR END OF AREA
  11325 002021        SSA,RSS       SKIP - AREA NOT EXHAUSTED 
  11326 127317        JMP SCNBP,I   RETURN - SAME OPERAND NOT FOUND 
  11327 065464        LDB OPRND     GET OPERAND 
  11330 061466        LDA LOWER     SET A = LOWER BOUND 
  11331 040250        ADA M2000     ADJUST FOR FIRST PAGE ADDRESS 
  11332 035466        ISZ LOWER     INCR LOWER BOUND
  11333 154000        CPB A,I       OPERANDS EQUAL? 
  11334 002001        RSS           YES - GET BP ADDRESS
  11335 027323        JMP BPSRC     NO - CONTINUE BP SCAN 
  11336 040235        ADA L2000     ADJUST FOR BP ADDRESS 
  11337 127302        JMP BPSCN,I   RETURN - A = BP LINK ADDR FOR OP
                      SKP 
* 
*                                   SET OPERAND IN BP LOCATION
* 
*  SETOP SETS THE CURRENT OPERAND IN THE BP LOCATION
*  SPECIFIED BY THE ADDRESS IN A. 
* 
*  CALLING SEQUENCE:
*    A = CURRENT BP LINK ADDRESS
*    B = IGNORED
*    JSB SETOP
* 
*  RETURN:
*    A = BP LINK ADDRESS
*    B = DESTROYED
* 
  11340 000000  SETOP NOP 
  11341 040250        ADA M2000     ADJUST BP LINK ADDRESS
  11342 065464        LDB OPRND     GET OPERAND 
  11343 174000        STB A,I       SET BP VALUE IN BP LOCATION 
  11344 040235        ADA L2000     ADJUST FOR BP ADDRESS 
  11345 127340        JMP SETOP,I   RETURN - A = BP LINK ADDRESS
                      SKP 
* 
*                                   ALLOCATE NEW BP LINK WORD 
* 
*  THE ALLOC SUBROUTINE ESTABLISHES ALL THE BP LINKAGE ADDRESSES. 
*  IF THE ALLOCATED LINK WORD FALLS IN THE SYSTEM COMMUNICATION AREA, 
*  A DISGNOSTIC IS PRINTED. 
* 
*  CALLING SEQUENCE:
*    A = IGNORED
*    B = IGNORED
*    JSB ALLOC
* 
*  RETURN:
*    A = ALLOCATED BP LINK ADDRESS
*    B = DESTROYED
* 
  11346 000000  ALLOC NOP 
  11347 061320        LDA TBREL     GET NEXT BP ADDRESS 
  11350 040250        ADA M2000     ADJUST FOR BP ADDRESS 
  11351 006400        CLB 
  11352 174000        STB A,I       CLEAR ALLOCATED BP LOCATION 
  11353 040235        ADA L2000     ADJUST FOR BP ADDRESS 
  11354 035320        ISZ TBREL     INCR BP RELOCATION ADDR 
  11355 070473        STA TCHAR     SAVE THE LOCATION 
  11356 061320        LDA TBREL     GET THE NEXT LOCATION 
  11357 070001        STA B         TO B
  11360 007004        CMB,INB       SUBTRACT
  11361 045053        ADB BPMAX     FROM CURRENT MAX
  11362 006020        SSB           IF GREATER THAN MAX 
  11363 071053        STA BPMAX     SET NEW MAX 
  11364 003104        CMA,CLE,INA   SET NEXT LINKAGE ADDRESS NEG
  11365 040110        ADA LWSBP     ADD ORGIN OS SYS COMM AREA
  11366 060337        LDA ERR16     GET ERROR CODE: BP OVERFLOW 
  11367 002041        SEZ,RSS       SKIP IF NO OVERFLOW - 
  11370 014317        JSB ERROR     PRINT ERROR MESSAGE 
  11371 060473        LDA TCHAR     GET BP LINK ADDRESS 
  11372 127346        JMP ALLOC,I   RETURN
                      SKP 
* 
*                                   READ RELOCATABLE RECORD CONTROL 
* 
*  DBSET ESTABLISHES THE ADDRESS OF THE NEXT WORD OF THE RELOCATABLE
*  RECORD IN LBUF.  IF LBUF HAS BEEN PROCESSED, IT ISSUES A CALL TO 
*  DBIN TO READ ANOTHER PACKED RELOCATABLE RECORD.
* 
*  CALLING SEQUENCE:
*    A = IGNORED
*    B = IGNORED
*    JSB DBSET
* 
*  RETURN: CONTENTS OF A AND B ARE DESTROYED
* 
  11373 000000  DBSET NOP 
  11374 034540        ISZ CURAL     INCR CURRENT LBUF ADDRESS 
  11375 034541        ISZ LCNT      SKIP - END OF LBUF
  11376 127373        JMP DBSET,I   RETURN
  11377 017401        JSB DBIN      READ NEXT RELOCATABLE REC 
  11400 127373        JMP DBSET,I   RETURN
                      SKP 
* 
*                                   READ PACKED RELOCATABLE RECS
* 
*  THE DBIN SUBROUTINE READS THE PACKED RELOCATABLE RECORDS FROM
*  THE DISK AS SPECIFIED BY THE DISK ADDRESS AT DSKRD.
* 
*  CALLING SEQUENCE:
*    A = IGNORED
*    B = IGNORED
*    JSB DBIN 
* 
*  RETURN: CONTENTS OF A AND B ARE DESTROYED. 
* 
  11401 000000  DBIN  NOP 
  11402 061333        LDA DSKRD     GET CURRENT DISK ADDRESS
  11403 067401        LDB DBIN      GET RETURN ADDRESS
  11404 057430        CPB DBINS     IF NAM RECORD READ, CHECK 
  11405 002001        RSS            FOR WRITE (ABSOLUTE) ADDRESS 
  11406 027416        JMP DBIN1      GREATER THAN READ (RELOC) ADDRESS -
  11407 065473        LDB DSKA      GET CURRENT HIGH WRITE ADDRESS
  11410 007000        CMB           IF EQUAL OR GREATER THAN
  11411 044000        ADB A          THIS READ ADDRESS, 
  11412 006021        SSB,RSS        ABSOLUTE HAS EXTENDED
  11413 027416        JMP DBIN1      OVER RELOCATABLE:
  11414 060344        LDA ERR38       IRRECOVERABLE 
  11415 014325        JSB IRERR       ERROR 
  11416 064451  DBIN1 LDB ALBUF     GET ADDRESS OF LBUF 
  11417 074540        STB CURAL     SET CURRENT LBUF ADDRESS
  11420 016027        JSB DISKI     READ RECORD FROM DISK 
  11421 061333        LDA DSKRD     GET DISK ADDRESS
  11422 071445        STA DSKRX     -SAVE CURRENT ADDRESS.
  11423 016000        JSB DISKA     INCR DISK ADDRESS 
  11424 071333        STA DSKRD     SET NEXT DISK ADDRESS 
  11425 060202        LDA N64 
  11426 070541        STA LCNT      SET CURRENT LBUF COUNT
  11427 127401        JMP DBIN,I    RETURN
                      SPC 1 
  11430 010476  DBINS DEF DBINT     ADDRESS OF NAM RECORD READ RETURN 
                      SKP 
* 
*                                   MOVE DBUF TO SPECIFIED BUFFER 
* 
*  THE MOVER SUBROUTINE MOVES THE CURRENT CONTENTS OF DBUF
*  TO THE BUFFER SPECIFIED IN B.
* 
*  CALLING SEQUENCE:
*    A = IGNORED
*    B = ADDR OF BUFFER TO WHICH DBUF IS MOVED
*    JSB MOVER
* 
*  RETURN:
*    A = CURRENT DBUF COUNT 
*    B = DESTROYED
* 
  11431 000000  MOVER NOP 
  11432 060452        LDA ADBUF     GET ADDRESS OF DBUF 
  11433 071265        STA CURAT     SET CURRENT DBUF ADDRESS
  11434 060202        LDA N64 
  11435 071266        STA TCNT      SET CURRENT COUNT 
  11436 161265  MOVED LDA CURAT,I   GET WORD FROM DBUF
  11437 170001        STA B,I       PUT WORD INTO CURRENT BUFFER
  11440 035265        ISZ CURAT     INCR CURRENT DBUF ADDRESS 
  11441 006004        INB           INCR CURRENT BUFFER ADDRESS 
  11442 035266        ISZ TCNT      SKIP - DBUF MOVED TO CURRENT
  11443 027436        JMP MOVED     CONTINUE MOVING FROM DBUF 
  11444 060643        LDA DCNT      GET CURRENT DBUF COUNT
  11445 127431        JMP MOVER,I   RETURN
                      SKP 
* 
*                                   'OR' CURRENT RECORD WITH DBUF 
* 
*  THE RECOR SUBROUTINE OR'S DBUF AND THE SPECIFIED RECORD
*  AND PLACES THE RESULT IN THE OTHER BUFFER. 
* 
*  CALLING SEQUENCE:
*    A = IGNORED
*    B = ADDRESS OF BUFFER TO BE OR-ED
*    JSB RECOR
* 
*  RETURN:  CONTENTS OF A AND B ARE DESTOYED. 
* 
  11446 000000  RECOR NOP 
  11447 060452        LDA ADBUF     GET ADDRESS OF DBUF 
  11450 070642        STA CURAD     SET CURRENT DBUF ADDRESS
  11451 060202        LDA N64 
  11452 070463        STA WDCNT     SET RECORD LENGTH 
  11453 160001  ORREC LDA B,I       GET CURRENT BUFFER WORD 
  11454 130642        IOR CURAD,I   ADD CURRENT DBUF WORD 
  11455 170001        STA B,I       SET NEW BUFFER WORD 
  11456 006004        INB           INCR CURRENT BUFFER ADDRESS 
  11457 034642        ISZ CURAD     INCR CURRENT DBUF ADDRESS 
  11460 034463        ISZ WDCNT     SKIP - ALL WORDS OR-ED
  11461 027453        JMP ORREC     OR NEXT BUFFER WORD 
  11462 127446        JMP RECOR,I   RETURN
                      SKP 
* 
*                                   GENERATE INT ENTRY,KEYWD,ID SEG 
* 
*  GENID GENERATES THE CURRENT ID SEGMENT AND KEYWORD 
*  FOR THE PROGRAM LOADED.  IN ADDITION, IT GENERATES THE 
*  LINKAGE REQUIRED IN THE INTERRUPT TABLE FOR THOSE PROGRAMS 
*  WHICH ARE TO BE SCHEDULED UPON RECEIPT OF AN INTERRUPT.
* 
*  CALLING SEQUENCE:
*    A = 0 (GENERATE SHORT ID SEGMENT)
*       -1 (GENERATE LONG ID SEGMENT) 
*        -2 (GENERATE BLANK ID SEGMENT)            $
*    B = IGNORED
*    JSB GENID
* 
*  RETURN: CONTENTS OF A AND B ARE DESTROYED
* 
  11463 000000  GENID NOP 
  11464 070515        STA PLFLG     SAVE ID SEGMENT LENGTH FLAG 
  11465 050166        CPA  N2       IF = 2, SKIP INT CODE          $
  11466 027530        JMP  STKEY     CHECK, GENERATE KEYWORD.      $
*                                   GENERATE INT ENTRY FOR USER SYS 
  11467 061342        LDA DSKIN     GET DISK ADDR OF INT CODE 
  11470 071333        STA DSKRD     SET DISK ADDR FOR DBIN
  11471 017401        JSB DBIN      READ RECORD TO LBUF 
  11472 061343        LDA INTCN     GET INT DISK RECORD COUNT 
  11473 070541        STA LCNT      SET CURRENT LBUF COUNT
  11474 040232        ADA P64 
  11475 040451        ADA ALBUF     SET A = CURRENT LBUF ADDRESS
  11476 070540        STA CURAL     SET CURRENT LBUF ADDRESS
  11477 061341        LDA CINT      GET NO. OF INT ENTRIES
  11500 003007        CMA,INA,SZA,RSS  SKIP - INT NOT EMPTY 
  11501 027530        JMP STKEY     GENERATE KEYWORD, ID SEGMENT
  11502 071266        STA TCNT      SAVE TOTAL INT COUNT
  11503 160540  GETIT LDA CURAL,I   GET CURRENT WORD IN INT 
  11504 002002        SZA           IGNORE ZERO ENTRIES IN INT
  11505 002020        SSA           TEST POSITIVE ENTRIES FOR ILIST 
  11506 027525        JMP NOTPN     IGNORE NEG(ID SEG), ZERO IN INT 
  11507 040235        ADA L2000     TEST FOR VALUE NOT IN SYS PROG
  11510 002021        SSA,RSS       SKIP - INT ENTRY POINTS TO ILIST
  11511 027525        JMP NOTPN     IGNORE NORMAL INT ENTRY 
  11512 160540        LDA CURAL,I   GET CURRENT WORD IN INT 
  11513 160000        LDA A,I       GET ENTRY IN ILIST
  11514 051330        CPA IMAIN     EQUAL TO MAIN IDENT ADDR? 
  11515 002001        RSS           YES - CONTINUE
  11516 027525        JMP NOTPN     IGNORE REF IF NOT CURRENT MAIN
  11517 061317        LDA SYSAD     GET ID SEG ADDRESS
  11520 003004        CMA,INA       GET 2'S COMPLEMENT FOR INT ENTRY
  11521 170540        STA CURAL,I   PUT ID SEG ADDR IN INT
  11522 061445        LDA DSKRX     GET CURRENT INT DISK ADDRESS
  11523 064451        LDB ALBUF     GET ADDRESS OF LBUF 
  11524 016051        JSB DISKO     REWRITE INT RECORD ON DISK
  11525 017373  NOTPN JSB DBSET     GET ADDR OF NEXT WORD IN LBUF 
  11526 035266        ISZ TCNT      SKIP - INT EXHAUSTED
  11527 027503        JMP GETIT     ANALYZE NEXT INT ENTRY
* 
*                                   GENERATE KEYWORD
  11530 061330  STKEY LDA IMAIN     GET MAIN IDENT ADDRESS
  11531 070470        STA TIDNT     SET ADDRESS FOR IDX 
  11532 014351        JSB IDX       SET IDENT ADDRESSES 
  11533 102000        HLT 0         NO IDENT FOUND
  11534 060517        LDA ID1       GET IDENT ADDRESS 
  11535 065317        LDB SYSAD     GET CURRENT ID SEGMENT ADDRESS
  11536 051476        CPA SCH1      SCHEDUL PGM?
  11537 075501        STB SCH4      YES  SAVE ITS ID ADDRESS
  11540 060515        LDA PLFLG     GET THE ID SEGMENT LENGTH FLAG
  11541 175163        STB CURAK,I   PUT ID SEGMENT ADDR IN KBUF 
  11542 044223        ADB P22       ADJUST FOR NEXT ID SEGMENT ADDR 
  11543 002002        SZA           SKIP - SHORT ID SEGMENT 
  11544 044210        ADB P6        ADJUST FOR LONG ID SEGMENT
  11545 075317        STB SYSAD     SET NEXT ID SEGMENT ADDRESS 
  11546 060517        LDA ID1       IF THIS IS THE PGM TO BE SCHEDULED
  11547 051476        CPA SCH1      THEN
  11550 075500        STB SCH3      SAVE ADDRESS OF NEXT ID 
  11551 035314        ISZ KEYCT     ADD 1 TO CURRENT KEYWORD COUNT.$
  11552 035163        ISZ CURAK     INCR CURRENT KBUF ADDRESS 
  11553 035164        ISZ KCNT      SKIP - KBUF FULL
  11554 027575        JMP KYOUT     NO - PROCESS ID SEGMENT 
  11555 061311        LDA DSKEY     GET CURRENT KEYWORD DISK ADDRESS
  11556 071333        STA DSKRD      SET TO READ IN TARGET SECTOR 
  11557 017401        JSB DBIN       FROM DISC INTO LBUF. 
  11560 064455        LDB AKBUF     -OR- INT RECORD WITH KBUF 
  11561 114141        JSB AREDO,I 
  11562 061311        LDA  DSKEY     -RESTORE A-REGISTER           $
  11563 064455        LDB AKBUF     GET ADDRESS OF KBUF 
  11564 075163        STB CURAK     SET NEW CURRENT KBUF ADDRESS
  11565 016051        JSB DISKO     OUTPUT KEYWORD RECORD TO DISK 
  11566 064455        LDB AKBUF     GET ADDRESS OF KBUF 
  11567 014302        JSB BUFCL     CLEAR KEYWORD BUFFER
  11570 061311        LDA DSKEY     GET CURRENT KEYWORD DISK ADDRESS
  11571 016000        JSB DISKA     INCREMENT DISK ADDRESS
  11572 071311        STA DSKEY     SET NEW KEYWORD DISK ADDRESS
  11573 060202        LDA N64 
  11574 071164        STA KCNT      SET NEW KBUF COUNT
* 
*                                   GENERATE ID SEGMENT 
  11575 060515  KYOUT LDA PLFLG     IF FLAG = -2 FOR               $
  11576 050166        CPA N2         BLANK OUTPUT,                 $
  11577 027726        JMP BLOUT      TRANSFER                      $
  11600 061317        LDA SYSAD     GET CURRENT ID SEGMENT ADDRESS
  11601 064517        LDB ID1       IF THIS IS THE SCHEDULED PGM
  11602 055476        CPB SCH1      THEN
  11603 002400        CLA           SET ZERO - END OF LIST
  11604 055477        CPB SCH2      IF NEXT IS SCHEDULED PGM
  11605 041500        ADA SCH3      ADD LENGTH OF ITS ID TO SKIP IT IN DORM LIST
  11606 017746        JSB OUTID     OUTPUT WORD TO ID SEGMENT BUFFER
  11607 064171        LDB N5
  11610 017737        JSB ZOUT      OUTPUT ZEROES TO ID SEGMENT 
  11611 160524        LDA ID6,I     GET PRIORITY
  11612 001727        ALF,ALF       ROTATE TO LOW A 
  11613 010242        AND M177      ISOLATE PRIORITY
  11614 017746        JSB OUTID     OUTPUT WORD TO ID SEGMENT BUFFER
  11615 061455        LDA PRENT     GET PRIMARY ENTRY POINT 
  11616 017746        JSB OUTID     OUTPUT WORD TO ID SEGMENT BUFFER
  11617 064166        LDB N2
  11620 017737        JSB ZOUT      OUTPUT ZEROES TO ID SEGMENT 
  11621 061501        LDA SCH4      GET THE ID SEGMENT ADDR OF SCHED PGM
  11622 002004        INA           STEP TO PRAM LIST 
  11623 064517        LDB ID1       IS CURRENT PGM
  11624 055476        CPB SCH1      THE SCHED PGM?
  11625 002001        RSS           YES - SKIP  A IS THE B REG FOR THE ID SEGMENT 
  11626 002400        CLA           NO SET TO SEND A ZERO TO THE ID SEGMENT 
  11627 017746        JSB OUTID     OUTPUT B REG TO ID SEGMENT
  11630 002400        CLA           SEND E/O REGS TO
  11631 017746        JSB OUTID     THE ID SEGMENT
  11632 160517        LDA ID1,I     GET NAME 1,2
  11633 017746        JSB OUTID     OUTPUT WORD TO ID SEGMENT BUFFER
  11634 160520        LDA ID2,I     GET NAME 3,4
  11635 017746        JSB OUTID     OUTPUT WORD TO ID SEGMENT BUFFER
  11636 160524        LDA ID6,I     GET TYPE
  11637 010242        AND M177      ISOLATE TYPE
  11640 070001        STA B         SAVE TYPE IN B
  11641 160521        LDA ID3,I     GET NAME 5
  11642 010255        AND M7400     ISOLATE NAME 5
  11643 030001        IOR B         ADD TYPE TO NAME 5
  11644 017746        JSB OUTID     OUTPUT WORD TO ID SEGMENT BUFFER
  11645 002400        CLA           PRESET FOR DORMANT
  11646 064517        LDB ID1       IF THIS PGM TO BE 
  11647 055476        CPB SCH1      SCHEDULED 
  11650 002404        CLA,INA       SET SCHEDULED FLAG
  11651 017746        JSB OUTID     SET WORD IN ID
  11652 002400        CLA           SET TIME LINK 
  11653 017746        JSB OUTID     TO ZERO AND OUTPUT
  11654 160525        LDA ID7,I     GET RESOLUTION CODE, EXEC MULT
  11655 017746        JSB OUTID     OUTPUT WORD TO ID SEGMENT BUFFER
  11656 160527        LDA ID9,I     GET 10'S MILLISECONDS 
  11657 010243        AND M377      ISOLATE LOWER CHAR
  11660 040203        ADA N100      GET COMPLEMENTED VALUE
  11661 017746        JSB OUTID     OUTPUT WORD TO ID SEGMENT BUFFER
  11662 160527        LDA ID9,I     GET SECONDS 
  11663 001727        ALF,ALF       ROTATE TO LOW A 
  11664 010243        AND M377      ISOLATE LOWER CHAR
  11665 040201        ADA N60       GET COMPLEMENTED VALUE
  11666 017746        JSB OUTID     OUTPUT WORD TO ID SEGMENT BUFFER
  11667 160526        LDA ID8,I     GET MINUTES 
  11670 010243        AND M377      ISOLATE LOWER CHAR
  11671 040201        ADA N60       GET COMPLEMENTED VALUE
  11672 017746        JSB OUTID     OUTPUT WORD TO ID SEGMENT BUFFER
  11673 160526        LDA ID8,I     GET HOURS 
  11674 001727        ALF,ALF       ROTATE TO LOW A 
  11675 010243        AND M377      ISOLATE LOWER CHAR
  11676 040177        ADA N24       GET COMPLEMENTED VALUE
  11677 017746        JSB OUTID     OUTPUT WORD TO ID SEGMENT BUFFER
  11700 034515        ISZ PLFLG     SKIP - PUTOUT LONG ID SEGMENT 
  11701 127463        JMP GENID,I   RETURN - SHORT ID SEGMENT 
  11702 061322        LDA PPREL     GET CURRENT PROG RELOC ADDRESS
  11703 065315        LDB PTYPE     GET CURRENT PROG TYPE 
  11704 054207        CPB P5        TYPE = BG SEGMENT?
  11705 061326        LDA BSPAD     YES - GET BS RELOC ADDRESS
  11706 041454        ADA BSSDP     ADD INITIAL PROG DISPLACEMENT 
  11707 017746        JSB OUTID     OUTPUT WORD TO ID SEGMENT BUFFER
  11710 060446        LDA TPREL     GET CURRENT RELOCATION ADDRESS
  11711 017746        JSB OUTID     OUTPUT WORD TO ID SEGMENT BUFFER
  11712 061321        LDA PBREL     GET LOW BP RELOCATION ADDR
  11713 065315        LDB PTYPE     GET PROGRAM TYPE
  11714 054207        CPB P5        TYPE = BG SEGMENT?
  11715 061325        LDA BSBAD     YES - GET BS BP ADDRESS 
  11716 017746        JSB OUTID     PUTPUT WORD TO ID SEGMENT BUFFER
  11717 061320        LDA TBREL     GET HIGH BP RELOCATION ADDR 
  11720 017746        JSB OUTID     OUTPUT WORD TO ID SEGMENT BUFFER
  11721 061453        LDA DSKMN     GET INITIAL MAIN DISK ADDRESS 
  11722 017746        JSB OUTID     OUTPUT WORD TO ID SEGMENT BUFFER
  11723 002400        CLA 
  11724 017746        JSB OUTID     OUTPUT WORD TO ID SEGMENT BUFFER
  11725 127463        JMP GENID,I   RETURN - ID SEGMENT OUT 
* 
  11726 065314  BLOUT LDB KEYCT     CHECK CURRENT ID POSITION.     $
  11727 006004        INB            IF NOT LAST ID SEGMENT,
  11730 061317        LDA SYSAD      SET NON-ZERO LINK WORD.       $
  11731 055313        CPB KEYCN     OTHERWISE, SET LAST LINK       $
  11732 002400        CLA            WORD = 0 TO TERMINATE DORMANT $
  11733 017746        JSB OUTID      LAST, OUTPUT LINK WORD.       $
* 
  11734 064200        LDB N27       OUTPUT 27 ZEROS TO             $
  11735 017737        JSB ZOUT       COMPLETE ID SEGMENT,          $
  11736 127463        JMP GENID,I   RETURN                         $
                      SKP 
* 
*                                   OUTPUT ZERO TO IDBUF
* 
*  ZOUT PUTS OUT ZEROES TO THE ID SEGMENT BUFFER. 
* 
*  CALLING SEQUENCE:
*    A = IGNORED
*    B = NO. OF ZEROES TO GO OUT (NEG.).
*    JSB ZOUT 
* 
*  RETURN: CONTENTS OF A AND B ARE DESTOYED.
* 
  11737 000000  ZOUT  NOP 
  11740 075266        STB TCNT      SAVE NO. OF ZEROES TO GO OUT
  11741 002400        CLA 
  11742 017746        JSB OUTID     OUTPUT ZERO TO IDBUF
  11743 035266        ISZ TCNT      SKIP - ALL ZEROES OUT 
  11744 027741        JMP *-3       CONTINUE ZERO OUTPUT TO IBUF
  11745 127737        JMP ZOUT,I    RETURN
                      SKP 
* 
*                                   OUTPUT ID SEGMENT WORD TO IBUF
* 
*  OUTID PACKS THE WORDS FOR THE ID SEGMENTS IN THE ID SEGMENT
*  BUFFER AND WRITES THE BUFFER ON THE DISK WHEN IT CONTAINS
*  64 WORDS.
* 
*  CALLING SEQUENCE:
*    A = CURRENT ID SEGMENT WORD
*    B = IGNORED
*    JSB OUTID
* 
*   RETURN: CONTENTS OF A AND B ARE DESTROYED 
* 
  11746 000000  OUTID NOP 
  11747 171044        STA CURAI,I   PUT WORD INTO ID BUFFER 
  11750 035044        ISZ CURAI     INCR CURRENT ID BUFFER ADDRESS
  11751 035045        ISZ ICNT      SKIP - IBUF FULL
  11752 127746        JMP OUTID,I   RETURN
  11753 061312        LDA DSKID     GET CURRENT ID SEGMENT DISK ADDR
  11754 050475        CPA DSKSY     IF CURRENT IBUF ADDRESS 
  11755 002001        RSS           EQ INITIAL ID SEG DISC ADDR,
  11756 027764        JMP OUTD1      SKIP, OTHERWISE GO TO WRITE. 
  11757 071333        STA DSKRD      SET TO READ IN TARGET SECTOR 
  11760 017401        JSB DBIN       FROM DISC INTO LBUF. 
  11761 064454        LDB AIBUF     -OR- INT RECORD IN LBUF 
  11762 114141        JSB AREDO,I    WITH CURRENT IBUF. 
  11763 061312        LDA DSKID     -RESTORE  A-REGISTER
  11764 064454  OUTD1 LDB AIBUF     GET ID BUFFER ADDRESS.
  11765 016051        JSB DISKO     WRITE ID SEGMENT REC ON DISK
  11766 064454        LDB AIBUF     GET BUFFER ADDRESS
  11767 075044        STB CURAI     SET NEW CURRENT IBUF ADDRESS
  11770 014302        JSB BUFCL     CLEAR ID BUFFER 
  11771 061312        LDA DSKID     GET CURRENT ID SEGMENT DISK ADDR
  11772 016000        JSB DISKA     INCREMENT DISK ADDRESS
  11773 071312        STA DSKID     SAVE NEXT DISK ID ADDRESS 
  11774 060202        LDA N64 
  11775 071045        STA ICNT      SET CURRENT IBUF COUNT
  11776 127746        JMP OUTID,I   RETURN
                      SKP 
* 
*                                   SET DISK TRACK TABLE
* 
*  DTSET SETS UP THE DISK TRACK TABLE FOR BOTH THE SYSTEM 
*  AND AUXILIARY DISK.  IT USES THE ID SEGMENT BUFFER FOR 
*  PUTTING OUT THE TRACK TABLES.
* 
*  CALLING SEQUENCE:
*    A = NO. USED TRACKS
*    B = DISK SIZE
*    JSB DTSET
* 
*  RETURN: CONTENTS OF A AND B ARE DESTROYED. 
* 
  11777 000000  DTSET NOP 
  12000 007004        CMB,INB 
  12001 044000        ADB A 
  12002 114145        JSB AZOUT,I 
                      JMP DTSET,I 
ERROR: Operand page error
  12003 124000  
                      SKP 
* 
*                                   OUTPUT ABSOLUTE PROGRAM WORD
* 
*  LABDO PUTS OUT THE CURRENT ABSOLUTE CODE WORD FOR THE PROGRAM
*  BEING LOADED. IT FILLS THE GAPS WITH ZERO CODES IF THE 
*  CURRENT WORD DOES NOT FALL IN THE NEXT POSITION.  IN 
*  ADDITION, IT CHECKS FOR PROGRAM OVERLAY AND PPRINTS A DIAGNOSTIC 
*  IF THE CURRENT PROGRAM WORD OVERLAYS A PREFIOUSLY-GENERATED
*  SECTION OF CODE.  THE CURRENT PROG RELOCATION ADDRESS
*  IS PRINTED WITH THE DIAGNOSTIC, BUT THE ORIGINALLY-
*  GENERATED CODE IS NOT MODIFIED.
* 
*  CALLING SEQUENCE:
*    A = CURRENT ABSOLUTE CODE WORD 
*    B = CURRENT DISPLACEMENT FROM PREVIOUS WORD
*    JSB LABDO
* 
*  RETURN: CONTENTS OF A AND B ARE DESTROYED
* 
  12004 000000  LABDO NOP 
  12005 071451        STA TEMPP     SAVE PROGRAM WORD 
  12006 007026        CMB,SSB,INB,SZB  SKIP - OVERLAY 
  12007 026026        JMP TSTAB-1 
  12010 060342        LDA ERR19     SET ERROR CODE - PROGRAM OVERLAY
  12011 014317        JSB ERROR     PRINT DIAGNOSTIC
  12012 061456        LDA DBLAD     GET CURRENT PROG RELOC ADDRESS
  12013 064456        LDB ATBUF     GET ADDRESS OF TBUF 
  12014 114137        JSB ACONV,I    CONVERT TO DECIMAL/OCTAL IN TBUF 
  12015 062041        LDA ULPAR     GET UPPER CHAR LEFT PAREN 
  12016 031267        IOR TBUF      ADD LEFT PAREN TO FIRST DIGIT 
  12017 071267        STA TBUF      SET LEFT PAREN, FIRST DIGIT 
  12020 061062        LDA RPARB     GET RIGHT PAREN, BLANK
  12021 071272        STA TBUF+3    SET RIGHT PAREN IN BUFFER 
  12022 060211        LDA P7
  12023 064456        LDB ATBUF     GET ADDRESS OF TBUF 
  12024 114102        JSB DRKEY,I   PRINT RELOC ADDR OF OVERLAY 
  12025 126004        JMP LABDO,I   RETURN - NO OUTPUT
* 
  12026 075452        STB ABCNT     SAVE ABSOLUTE COUNT 
  12027 035452  TSTAB ISZ ABCNT     SKIP - PUT OUT LAST WORD
  12030 026035        JMP CLOUT     SET ZEROS INTO BSS AREA 
  12031 061451        LDA TEMPP     GET LAST WORD 
  12032 170642        STA CURAD,I   SET INTO LOAD BUFFER
  12033 114162        JSB ATSTL,I   TEST FOR BUFFER FULL
  12034 126004        JMP LABDO,I   RETURN
* 
  12035 002400  CLOUT CLA           REPLACE SKIPPED AREA WITH ZEROS.
  12036 170642        STA CURAD,I   SET INTO LOAD BUFFER
  12037 114162        JSB ATSTL,I   TEST FOR BUFFER FULL
  12040 026027        JMP TSTAB     OUTPUT NEXT WORD
                      SPC 1 
  12041 024000  ULPAR OCT 24000 
                      SKP 
* 
*                                   TEST FOR ABSOLUTE BUFFER FULL 
* 
*  TSTEL PUTS OUT THE CURRENT ABSOLUTE BUFFER WHEN IT 
*  CONTAINS 64 WORDS OF CODE.  IN ADDITION, IT CHECKS FOR 
*  POSSIBLE PROGRAM OVERFLOW AND PRINTS A DIAGNOSTIC. 
* 
*  CALLING SEQUENCE:
*    A = IGNORED
*    B = IGNORED
*    JSB TSTEL
* 
*  RETURN: CONTENTS OF A AND B ARE DESTROYED
* 
  12042 000000  TSTEL NOP 
  12043 061323        LDA RELAD     GET ABSOLUTE ADDRESS
  12044 035323        ISZ RELAD     INCR ABSOLUTE ADDRESS 
  12045 003004        CMA,INA       COMPLEMENT CURRENT RELOC ADDR 
  12046 040510        ADA LWASM     ADD LAST WORD AVAIL SYSTEM MEM
  12047 002021        SSA,RSS       SKIP - INVALID RELOCATION ADDR
  12050 026053        JMP NOVER     NO MEMORY OVERFLOW
  12051 060341        LDA ERR18     SET ERROR CODE - MEMORY OVERFLOW
  12052 014317        JSB ERROR     REPORT ERROR AND CONTINUE 
  12053 034642  NOVER ISZ CURAD     INCR CURRENT DBUF ADDRESS 
  12054 034643        ISZ DCNT      SKIP - DBUF FULL
  12055 126042        JMP TSTEL,I   RETURN - LBUF NOT FULL
  12056 016066        JSB DBOUT     WRITE DBUF ON DISK
  12057 126042        JMP TSTEL,I   RETURN
                      SKP 
* 
*                                   OUTPUT REST (IF ANY) OF ABS. REC
* 
*  REMDO PUTS OUT THE CURRENT SECTOR IF IT CONTAINS ANY WORDS OF
*  ABSOLUTE CODE.  THIS IS NORMALLY DONE WHEN THE CODE FOR THE
*  MAIN PROGRAM SECTION HAS BEEN GENERATED. 
* 
*  CALLING SEQUENCE:
*    A = IGNORED
*    B = IGNORED
*    JSB REMDO
* 
*  RETURN: CONTENTS OF A AND B ARE DESTROYED. 
* 
  12060 000000  REMDO NOP 
  12061 060643        LDA DCNT      GET CURRENT DBUF COUNT
  12062 050202        CPA N64       BUFFER EMPTY? 
  12063 126060        JMP REMDO,I   YES - RETURN
  12064 016066        JSB DBOUT     WRITE DBUF ON DISK
  12065 126060        JMP REMDO,I   RETURN
                      SKP 
* 
*                                   DUMP DBUF TO DISK 
* 
*  DBOUT WRITES THE CONTENTS OF THE ABSOLUTE BUFFER ON THE DISK 
*  AT THE DISK ADDRESS SPECIFIED BY DSKAD.
* 
*  CALLING SEQUENCE:
*    A = IGNORED
*    B = IGNORED
*    JSB DBOUT
* 
*  RETURN: CONTENTS OF A AND B ARE DESTOYED.
* 
  12066 000000  DBOUT NOP 
  12067 060514        LDA DSKAD     GET CURRENT DISK ADDRESS
  12070 064452        LDB ADBUF     GET ADDRESS OF DBUF 
  12071 114126        JSB ADOUT,I   WRITE RECORD ON DISK
  12072 064452        LDB ADBUF     GET ADDRESS OF DBUF 
  12073 074642        STB CURAD     SET CURRENT DBUF ADDRESS
  12074 014302        JSB BUFCL     CLEAR LBUF
  12075 060514        LDA DSKAD     GET CURRENT DISK ADDRESS
  12076 114124        JSB INDAD,I   UPDATE DISK ADDRESS 
  12077 070514        STA DSKAD     SET NEXT DISK ADDRESS 
  12100 060202        LDA N64 
  12101 070643        STA DCNT      SET CURRENT DBUF COUNT
  12102 126066        JMP DBOUT,I   RETURN
                      SKP 
* 
*        'OR' CURRENT RECORD WITH LBUF
* 
*  THE "REDOR" SUBROUTINE OR'S LBUF AND THE SPECIFIED 
* RECORD (BUFFER) AND PLACES THE RESULT IN THE
* OTHER BUFFER. 
* 
*  CALLING SEQUENCE:
*    A = IGNORED
*    B = ADDRESS OF BUFFER TO BE OR-ED
*    JSB REDOR
*   -RETURN: CONTENTS OF A AND B DESTROYED
* 
  12103 000000  REDOR NOP 
  12104 060451        LDA ALBUF     GET ADDRESS OF LBUF 
  12105 072120        STA REDR2     SET CURRENT LBUF ADDRESS. 
  12106 060202        LDA N64 
  12107 072121        STA REDR3     SET RECORD LENGTH 
  12110 160001  REDR1 LDA B,I       GET CURRENT BUFFER WORD 
  12111 132120        IOR REDR2,I   ADD CURRENT LBUF WORD 
  12112 170001        STA B,I       SET NEW BUFFER WORD 
  12113 006004        INB           INCR CURRENT BUFFER ADDRESS 
  12114 036120        ISZ REDR2     INCR CURRENT LBUF ADDRESS 
  12115 036121        ISZ REDR3     SKIP - ALL WORDS OR-ED. 
  12116 026110        JMP REDR1     -OR- NEXT BUFFER WORD.
  12117 126103        JMP REDOR,I   RETURN. 
* 
  12120 000000  REDR2 NOP 
  12121 000000  REDR3 NOP 
                      SKP 
* 
*  FIND IDENT OF PROGRAM TO BE LOADED JUST
*  PRIOR TO PROGRAM TO BE SCHEDULED.
* 
*  THIS ROUTINE SCANS THE IDENTS IN THE 
*  SAME ORDER AS THEY ARE TO BE LOADED
*  AND SAVES THE IDENT ADDRESS OF THE 
*  PROGRAM JUST BEFORE THE SCHEDULED
*  PROGRAM, OR ZERO IF THERE IS NO SCHEDULED
*  PROGRAM OR IT IS THE FIRST TO BE LOADED. 
* 
*  CALLING SEQUENCE:
* 
*  SET SCH1 TO IDENT OF PROGRAM TO BE SCHEDULED 
* 
*  JSB ASCHF,I
* 
*  RETURN:  SCH2  IDENT OF PROGRAM -1 IN LOAD ORDER 
*           SCH3  LENGTH OF ID FOR SCH1 PGM 
*           SCH4  0 
                      SPC 3 
  12122 000000  SCHF  NOP 
  12123 002400        CLA           CLEAR THE 
  12124 071477        STA SCH2      SCH PRAMETERS 
  12125 071500        STA SCH3      FOR 
  12126 071501        STA SCH4      DEFAULT 
  12127 061476        LDA SCH1      IS A PGM TO BE
  12130 002003        SZA,RSS       SCHEDULED?
  12131 126122        JMP SCHF,I    NO, EXIT
  12132 002404        CLA,INA       YES;  SET TO SCAN 
  12133 071315  SCHF3 STA PTYPE     THE IDENTS
  12134 060467        LDA BIDNT     SET POINTER 
  12135 071332        STA CIDNT     FOR SCAN ROUTINE
  12136 114134  SCHF1 JSB AIDSN,I   GO SCAN 
  12137 026205        JMP SCHF8     END OF CURRENT TYPE  GO SET FOR NEXT
  12140 002041        SEZ,RSS       IGNOR 
  12141 026136        JMP SCHF1     SUBS
  12142 064223  SCHF2 LDB P22       SET ID LENGTH 
  12143 061315        LDA PTYPE     IF
  12144 050204        CPA P2        DISC
  12145 044210        ADB P6        RESIDENT
  12146 050205        CPA P3        I.E. 1 OR 3 
  12147 044210        ADB P6        THEN
  12150 075500        STB SCH3      SAVE ID LENGTH
  12151 064517        LDB ID1       GET IDENT ADDRESS 
  12152 055476        CPB SCH1      THIS THE SCHEDULED PGM? 
  12153 126122        JMP SCHF,I    YES - DONE - RETURN 
  12154 075477        STB SCH2      NO - UPDATE LAST ONE POINTER
  12155 050207        CPA P5        IF SEGMENT GO 
  12156 026170        JMP SCHF5     SCAN NEXT SEGMENT 
  12157 050205        CPA P3        IF BACKGROUND DISC RESIDENT 
  12160 002001        RSS           SKIP
  12161 026136        JMP SCHF1     ELSE GET NEXT PGM 
  12162 060517        LDA ID1       BACKGROUND DISK RES SO
  12163 071267        STA TBUF      SET UP TO SCANN FOR 
  12164 060467        LDA BIDNT     SEGMENTS
  12165 071332        STA CIDNT 
  12166 060207        LDA P5        SET TYPE TO SEGMENTS
  12167 071315        STA PTYPE     AND 
  12170 114134  SCHF5 JSB AIDSN,I   START SCAN
  12171 026200        JMP SCHF4     END OF SEGMENTS - GO RESET
  12172 002041        SEZ,RSS       IGNOR 
  12173 026170        JMP SCHF5     SUBROUTINES 
  12174 160530        LDA ID10,I    DOES THIS SEGMENT BELONG TO 
  12175 051267        CPA TBUF      CURRENT PGM?
  12176 026142        JMP SCHF2     YES - GO UPDATE 
  12177 026170        JMP SCHF5     NO - TRY NEXT ONE 
                      SPC 1 
  12200 060205  SCHF4 LDA P3        END OF SEGMENTS SO
  12201 071315        STA PTYPE     RESET FOR NEXT
  12202 061267        LDA TBUF      BACKGROUND
  12203 040175        ADA N10       STEP TO NEXT IDENT
  12204 026135        JMP SCHF1-1   PGM AND CONTINUE SCAN 
                      SPC 1 
  12205 006400  SCHF8 CLB           END OF CURRENT TYPE 
  12206 035315        ISZ PTYPE     STEP TYPE 
  12207 061315        LDA PTYPE     IS LAST TYPE
  12210 050205        CPA P3        RT DISC RES?
  12211 006004        INB           YES - SET FOR BACKGROUND RES
  12212 050207        CPA P5        BACKGROUND RES? 
  12213 064166        LDB N2        YES SET FOR BACK GROUND DISC RES
  12214 050206        CPA P4        BACKGROUND DISC RES???? 
  12215 102033        HLT 33B       YES - ERROR END OF IDENTS AND NO PGM
  12216 040001        ADA B         SET NEXT TYPE IN A
  12217 026133        JMP SCHF3     AND CONTINUE SCAN 
                      SKP 
* 
*                                   CLEAR LOCAL LST ENTRIES 
* 
*  CLRLT CLEARS THE CURRENT BP LINKAGE ADDRESSES IN THE LOADER
*  SYMBOL TABLE TO MAKE THEM UNAVAILABLE TO THE SUCCEEDING
*  PROGRAMS.  THIS CONSISTS OF CLEARING WORD 5 OF THE LST 
*  ENTRY, AND THE CORRESPONDING BP LINK VALUE IN BASE PAGE. 
* 
*  CALLING SEQUENCE:
*    A = CURRENT LOW BP ADDRESS 
*    B = CURRENT HIGH BP ADDRESS
*    JSB CLRLT
* 
*  RETURN: CONTENTS OF A AND B ARE DESTROYED. 
* 
  12220 000000  CLRLT NOP 
  12221 003004        CMA,INA       SET NEGATIVE
  12222 071466        STA LOWER     SAVE LOWER BOUND
  12223 007004        CMB,INB       SET NEGATIVE
  12224 075467        STB UPPER     SAVE UPPER BOUND
  12225 014412        JSB INLST     INITIALIZE LSTX 
  12226 014416  CLRNX JSB LSTX      SET LST ADDRESSES 
  12227 026243        JMP CLBPS     CLEAR BP SECTION
  12230 160535        LDA LST5,I    GET WORD 5 OF LST ENTRY 
  12231 041466        ADA LOWER     ADD NEG LOWER BOUND 
  12232 002020        SSA           SKIP IF GREATER, EQUAL TO LOWER 
  12233 026226        JMP CLRNX     TRY NEXT ENTRY
  12234 160535        LDA LST5,I    GET WORD 5 OF LST ENTRY 
  12235 041467        ADA UPPER     ADD NEG UPPER BOUND 
  12236 002021        SSA,RSS       SKIP IF LESS THAN UPPER 
  12237 026226        JMP CLRNX     TRY NEXT ENTRY
  12240 006400        CLB 
  12241 174535        STB LST5,I    CLEAR BP LINK ADDRESS 
  12242 026226        JMP CLRNX     TRY NEXT ENTRY
  12243 065466  CLBPS LDB LOWER     GET LOWER BP BOUND
  12244 007004        CMB,INB       SET TO POSITIVE 
  12245 061467        LDA UPPER     GET UPPER BOUND (NEG.)
  12246 040001        ADA B         SET A = TOTAL WORD COUNT
  12247 002021        SSA,RSS       SKIP - SOME BP SECTION TO CLEAR 
  12250 126220        JMP CLRLT,I   RETURN - NO BP SECTION
  12251 070463        STA WDCNT     SET COUNT FOR CLEARING
  12252 044250        ADB M2000     ADJUST FOR BP ADDRESS 
  12253 002400        CLA 
  12254 170001        STA B,I       CLEAR BO WORD 
  12255 006004        INB 
  12256 034463        ISZ WDCNT     SKIP - ALL BP CLEAR 
  12257 026254        JMP *-3 
  12260 126220        JMP CLRLT,I   END OF CLEARING 
                      SPC 3 
  12261         AXX   BSS 0         DBL RECORD LIST AREA
  12261         PLIST BSS 0         PLIST - SHARES DBL LIST AREA
* 
                      HED ** TRACK 0, SECTOR 0 BOOTSTRAP ** 
* 
*  THE FOLLOWING IS THE FORMAT FOR THE PORTION OF THE 
*  BOOTSTRAP LOADER TO BE SET IN 0,0.  THIS SECTION OF THE
*  BOOTSTRAP IS LOADED INTO 2 TO 77B BY THE PROTECTED BINARY
*  LOADER.  WHEN IT IS READ COMPLETELY INTO CORE IT CHECKS FOR
*  READ PARITY ERRORS DURING ITS INPUT.  FOLLOWING THIS A HALT
*  INSTRUCTION PERMITS THE OPERATOR TO PROTECT THE BASIC
*  BINARY LOADER AND SET SWITCH 0 OF THE SWITCH REGISTER
*  TO 0 (EITHER REAL TIME EXECUTIVE OR TIME-SHARED BASIC) 
*  OR 1 (DISC MONITOR SYSTEM).  PRESSING 'RUN' READS THE
*  SELECTED SYSTEM LOADER FROM 0,1 OR 0,2 RESPECTIVELY.  THIS 
*  PORTION OF THE BOOTSTRAP OPERATION WILL THEN LOAD INTO 
*  CORE THE SELECTED SYSTEM AND TRANSFER CONTROL TO IT. 
* 
  14000         BSBSO EQU 14000B
  14000               ORG BSBSO 
* 
  14000 000000  RLOAD OCT 0,0       DON'T USE (A) AND (B) 
  14001 000000  
  14002 000000  RT/TS OCT 0         REAL TIME EXEC/TIME-SHARED BASIC
  14003 000000  DMS   OCT 0 
  14004 103004        HLT 4,C       IN CASE OF POWER FAIL 
* 
  14005 070044  BSLD0 STA BSLD2-BSBSO+1  CHANGE IRRECOVERABLE HLT 0 
  14006 034043        ISZ BSLD2-BSBSO      INTO RECOVERABLE HLT 1 
  14007 102077        HLT 77B       PROTECT BBL, SET SWR FOR SYSTEM 
  14010 060047        LDA LINKG-BSBSO    SET UP DISC/DMA
  14011 102606        OTA 6                LINKAGE
* 
  14012 102501  BSLD1 LIA 1         SELECT SYSTEM LOADER
  14013 006404        CLB,INB         FROM SWITCH REGISTER: 
  14014 000010        SLA               SWR = 0 IMPLIES SECTOR 1
  14015 006004        INB               SWR = 1 IMPLIES SECTOR 2
  14016 106600  DSK7  OTB 0         OUTPUT DISC ADDRESS 
  14017 002300        CCE, NB       SAVE
  14020 160001        LDA 1,I         CHOSEN LOADER'S 
  14021 070046        STA CORAD-BSBSO   ENTRY POINT 
  14022 001225        RAL,ERA       OUTPUT 'READ' FORM
  14023 106702        CLC 2           OF LOADER'S 
  14024 102602        OTA 2             CORE ADDRESS
  14025 060051        LDA .N64-BSBSO     OUTPUT 
  14026 102702        STC 2                TRANSFER 
  14027 102602        OTA 2                  LENGTH 
  14030 103706        STC 6,C       START DMA 
  14031 102700  DSK8  STC 0         START DISC TRANSFER 
  14032 014034        JSB TSTAT-BSBSO    VALIDATE READ
  14033 124046        JMP CORAD-BSBSO,I  TRANSFER TO SYSTEM LOADER
* 
  14034 000005  TSTAT DEF BSLD0-BSBSO    (INITIAL EXIT) 
  14035 102500  DSK9  LIA 0         WAIT FOR
  14036 000010        SLA             TRANSFER
  14037 024035        JMP *-BSBSO-2     COMPLETION
  14040 010050        AND BSB32-BSBSO    TRANSFER 
  14041 002003        SZA,RSS              OK?
  14042 124034        JMP TSTAT-BSBSO,I  YES
  14043 102000  BSLD2 HLT 0              NO (HLT 1, NOP AFTER CHECK 
  14044 024043        JMP *-BSBSO-1 
  14045 024012        JMP BSLD1-BSBSO    RETRY LOAD 
* 
  14046 000000  CORAD OCT 0         SYSTEM LOADER ENTRY ADDRESS 
  14047 020000  LINKG OCT 20000     DISC/DMA LINKAGE TEMPLATE 
  14050 000032  BSB32 OCT 32        TRANSFER VALIDATION MASK
  14051 177700  .N64  DEC -64 
* 
  14077               ORG BSBSO+77B 
  14077 024035        JMP DSK9-BSBSO     TEST BOOTSTRAP LOAD
  14100               ORG * 
                      HED ** RT MONITOR BOOT STRAP LOADER **
  15600               ORG 15600B
* 
*  THE FOLLOWING LOADER PERMITS LOADING OF THE RESIDENT PORTIONS
*  OF THE REAL TIME MONITOR.  THE LOADER IS LOCATED ON SECTOR 1,
*  TRACK 0 OF THE SYSTEM DISC.  IT IS GENERATED BY THE SYSTEM 
*  GENERATOR AND CONSISTS OF: 
* 
*  (1) THE INSTRUCTIONS REQUIRED FOR LOADING THE SYSTEM 
*  (2) THE DISK AND CORE ADDRESSES SPECIFYING LOADING 
* 
* 
*  THE ADDRESSES REQUIRED FOR LOADING ARE THE FOLLOWING:
* 
*  (A) BASE PAGE LINKAGES 
*     (1) LOW CORE ADDRESS
*     (2) HIGH CORE ADDRESS 
*     (3) DISK ADDRESS OF ABSOLUTE CODE 
* 
*  (B) SYSTEM, RT RESIDENT MAIN 
*     (1) LOW CORE ADDRESS
*     (2) HIGH CORE ADDRESS 
*     (3) DISK ADDRESS OF ABSOLUTE CODE 
* 
*  (C) BG RESIDENT MAIN 
*     (1) LOW CORE ADDRESS
*     (2) HIGH CORE ADDRESS 
*     (3) DISK ADDRESS OF ABSOLUTE CODE 
* 
*  THE PROGRAM IS ASSUMED TO BE LOADED IN THE 64 WORDS PRECEDING
*  THE PROTECTED LOADER.
* 
  15600 067663  START LDB ASPBF     GET ADDR OF DISK SPEC. BUFFER 
  15601 077662        STB SPCAD     SET CURRENT SPBUF ADDRESS 
  15602 017606        JSB PLOAD     LOAD MAIN SYSTEM, RT RESIDENTS
  15603 017606        JSB PLOAD     LOAD MAIN BG RESIDENTS
  15604 017606        JSB PLOAD     LOAD BP LINKAGES
  15605 124003        JMP 3B,I      TRANSFER TO RT MONITOR ENTRY PT.
* 
  15606 000000  PLOAD NOP 
  15607 167662        LDB SPCAD,I   GET LOW CORE ADDRESS
  15610 037662        ISZ SPCAD     INCR CURRENT SPBUF ADDRESS
  15611 163662        LDA SPCAD,I   GET HIGH CORE ADDRESS 
  15612 037662        ISZ SPCAD     INCR CURRENT SPBUF ADDRESS
  15613 003304        CMA,CCE,INA   COMPLEMENT, SET DIRECTION BIT 
  15614 040001        ADA B         SET A = TOTAL WORD COUNT
  15615 005225        RBL,ERB       SET DIRECTION BIT IN CORE ADDR
  15616 106702        CLC 2 
  15617 106602        OTB 2         SET MEMORY ADDRESS REGISTER 
  15620 167662        LDB SPCAD,I   GET DISK ADDRESS OF ABSOLUTE CODE 
  15621 037662        ISZ SPCAD     INCR CURRENT SPBUF ADDRESS
* 
  15622 002021  SLOAD SSA,RSS       SKIP - MORE SECTORS TO LOAD 
  15623 127606        JMP PLOAD,I   RETURN - THIS SECTION LOADED
  15624 043660        ADA P.64      ADJUST FOR NEXT COUNT 
  15625 073661        STA RECNT     SET REMAINING COUNT 
  15626 002020        SSA           SKIP - LESS THAN 64 WORDS 
  15627 002400        CLA 
  15630 043657        ADA N.64      SET A = CURRENT SECTOR COUNT
  15631 102702        STC 2 
  15632 102602        OTA 2         SET WORD COUNT REGISTER 
  15633 106600  DSKAG OTB 0         OUTPUT CURRENT DISK ADDRESS 
  15634 103706        STC 6,C       INITIATE DMA
  15635 102700  DSKB  STC 0         INITIATE DATA TRANSFER
  15636 102500  DSKC  LIA 0         GET STATUS WORD 
  15637 000010        SLA           SKIP - TRANSFER COMPLETE
  15640 027636        JMP *-2       WAIT FOR COMPLETION 
  15641 001332        RAR,SLA,RAL   SKIP - NO READ PARITY ERROR 
  15642 102000        HLT 0B        WAIT FOR OPERATOR - READ PARITY 
  15643 060001        LDA B         GET CURRENT DISK ADDRESS
  15644 013654        AND M.177     ISOLATE SECTOR NO.
  15645 053655        CPA #SECT     LAST SECTOR READ?             $$
  15646 002001        RSS           YES - CONTINUE ON NEXT TRACK
  15647 002405        CLA,INA,RSS   NO - SET COUNT FOR NEXT SECTOR
  15650 063656        LDA #MASK     SET COUNT FOR NEXT TRACK      $$
  15651 044000        ADB A         SET B = NEXT DISK ADDRESS 
  15652 063661        LDA RECNT     GET REMAINING COUNT 
  15653 027622        JMP SLOAD     LOAD NEXT SECTOR
* 
*                                   DATA AREA 
  15654 000177  M.177 OCT 177 
  15655 000000  #SECT NOP           # SECTORS - 1 FOR SYSTEM DISC $$
  15656 000000  #MASK NOP           INCREMENT TRACK # VALUE       $$
  15657 177700  N.64  DEC -64 
  15660 000100  P.64  DEC 64
  15661 000000  RECNT OCT 0         CURRENT REMAINING COUNT 
  15662 000000  SPCAD OCT 0         CURRENT DISK SPEC. BUFFER ADDR
  15663 015664  ASPBF DEF *+1 
  15664               BSS 9         SYSTEM LOADING SPECIFICATIONS 
                      HED   CURRENT PAGE LINKAGE ROUTINES 
  16000               ORG 16000B
                      SPC 3 
*     THE FOLLOWING ROUTINES LINK A PROGRAM THROUGH CURRENT PAGE
*     LINKS WHEN POSSIBLE.  THIS IS POSSIBLE WHEN THE LENGTH
*     OF THE PROGRAM IS KNOWN AND WHEN THE PROGRAM IS NOT AN
*     ASSEMBLED TYPE 3 OR 5 PROGRAM.
                      SPC 3 
  16000 000000  ALINK NOP 
  16001 061060        LDA L01       1ST OF 2 PASSES?
  16002 002020        SSA 
  16003 126000        JMP ALINK,I    NO - 1 PASS ONLY 
  16004 002002        SZA            YES - SKIP 
  16005 026071        JMP LH3        NO - 2ND PASS
                      SPC 1 
  16006 061061        LDA L001      1ST PASS ESTIMATE OR
  16007 002002        SZA            1ST PASS CURR PG LINK LOAD?
  16010 026061        JMP LH10      LINK LOAD 
                      SPC 1 
  16011 106501        LIB 1         DOES OPERATOR WANT CURRENT PAGE 
  16012 005200        RBL            LINKS IF POSSIBLE? 
  16013 006021        SSB,RSS        IF YES - SKIP
                      SPC 1 
  16014 003401  LH2   CCA,RSS       NO - SW REG BIT 14=0
  16015 002001        RSS 
  16016 126232        JMP LOADA,I   RESTART 
                      SPC 1 
  16017 061465        LDA PLGTH 
  16020 002021        SSA,RSS       NO CURRENT PAGE LINKS 
  16021 061315        LDA PTYPE      IF ASSEMBLED TYPE 3 OR 5 
  16022 050205        CPA P3
  16023 002001        RSS 
  16024 050207        CPA P5
  16025 026014        JMP LH2 
                      SPC 1 
  16026 060446        LDA TPREL     GET ADDR
  16027 070001        STA B          OF LAST WD 
  16030 030247        IOR M1777      OF PAGE
                      SPC 1 
  16031 007004        CMB,INB       COMPUTE # WDS 
  16032 006004        INB            REMAINING
  16033 044000        ADB A          ON PAGE
  16034 075055        STB TEMP2 
                      SPC 1 
  16035 061465        LDA PLGTH     COMPUTE # WDS 
  16036 001265        RAL,CLE,ERA    OF PROGRAM 
  16037 007004        CMB,INB        THAT FALL
  16040 044000        ADB A          BEYOND THIS
  16041 075054        STB TEMP1      PAGE 
                      SPC 1 
  16042 006020        SSB           PROGRAM FIT ON
  16043 002001        RSS            THIS PAGE? 
  16044 006003        SZB,RSS       NO - SKIP 
  16045 026014        JMP LH2       YES 
                      SPC 1 
  16046 061055        LDA TEMP2     COMPUTE MINIMUM OF: 
  16047 001100        ARS            HALF # WDS OF PROG 
  16050 007004        CMB,INB         ON CURRENT PAGE-OR- 
  16051 044000        ADB A          # WDS OF PROG ON 
  16052 006021        SSB,RSS         NEXT PAGE 
                      SPC 1 
  16053 061054        LDA TEMP1     DIVIDE THIS 
  16054 006400        CLB            MINIMUM BY 
  16055 000000        DIV P4         FOUR 
ERROR: Unknown instruction
  16056 002003        SZA,RSS       IF NON-ZERO, USE AS SIZE
  16057 026014        JMP LH2        OF LOW CURRENT PG LINK BUFF
  16060 002001        RSS 
                      SPC 1 
  16061 061057  LH10  LDA LWH2
  16062 064446        LDB TPREL     SET NEW 
  16063 075054        STB TEMP1      LOAD ADDRESS 
  16064 044000        ADB A          AND UPPER LIMIT
  16065 074446        STB TPREL      OF LINK BUFFER 
  16066 076241        STB CPMAX 
  16067 003004        CMA,INA       SAVE # FOR
  16070 071057        STA LWH2       OUTPUT TO DISC 
                      SPC 1 
  16071 061054  LH3   LDA TEMP1     SET UP
  16072 072236        STA CPLOC      PARAMETERS FOR 
  16073 072237        STA CPBAS      CURRENT PAGE 
  16074 010244        AND M0760      LINK ALLOCATOR 
  16075 072240        STA CPADD 
  16076 126000        JMP ALINK,I   RETURN
                      SPC 3 
*     DLINK         DLINK IS CALLED AFTER A SCN OF CURRENT
*     BASE PAGE HAS NOT FOUND THE CURRENT REQUIRED LINK.
*     IT RETURNS TO P+1 IF NO CURRENT PAGE LINK IS POSSIBLE.
                      SPC 2 
  16077 000000  DLINK NOP 
  16100 162234        LDA BPSCM,I   GET THE CALLIN ADDRESS
  16101 052231        CPA CLINK     IF DBL CALL 
  16102 002001        RSS           SKIP
  16103 126077        JMP DLINK,I   ELSE - EXIT USE BASE PAGE 
  16104 061060        LDA L01       SINGLE PASS ONLY? 
  16105 002020        SSA            NO - SKIP
  16106 126077        JMP DLINK,I    YES
  16107 062240  LH4   LDA CPADD     GET LINK PAGE 
  16110 051463        CPA PAGNO     SAME AS INSTR PAGE? 
  16111 002001        RSS           YES SKIP
  16112 026143        JMP CROSS 
  16113 062235        LDA CPLSA     GET LIST BASE 
  16114 072202        STA BLINK     SET FOR SCAN
  16115 066237        LDB CPBAS     GET THE NO OF CP LINKS SO FAR 
  16116 007004        CMB,INB       SO FAR
  16117 046236        ADB CPLOC     TO B
  16120 007007        CMB,INB,SZB,RSS     IF ZERO 
  16121 026130        JMP DLIN1     JUMP TO ALOCATE 
  16122 162202        LDA BLINK,I   GET LINK CONTENTS 
  16123 051464        CPA OPRND     SAME AS REQUIRED? 
  16124 026130        JMP DLIN1     YES GO RETURN THE ADDRESS 
  16125 036202        ISZ BLINK     STEP THE ADDRESS
  16126 006006        INB,SZB       STEP COUNT IF END THEN CONTINUE 
  16127 026122        JMP *-5       CONTINUE SCAN 
  16130 062236  DLIN1 LDA CPLOC     GET THE NEXT LOCATION 
  16131 040001        ADA B         ADD THE OFFSET  IN CASE NOT A NEW LINK
  16132 052241        CPA CPMAX     ANY LEFT
  16133 126077        JMP DLINK,I   NO EXIT 
  16134 006003        SZB,RSS       IF A NEW LINK THEN
  16135 036236        ISZ CPLOC     STEP THE LOCATION COUNTER 
  16136 065464        LDB OPRND     GET THE LINK WORD AND 
  16137 176202        STB BLINK,I   SET IN THE LINK LIST
  16140 166234        LDB BPSCM,I   GET THE RETURN ADDRESS
  16141 006004        INB           SKIP THE BP SET ROUTINE 
  16142 124001        JMP B,I       RETURN
                      SPC 2 
  16143 061060  CROSS LDA L01       1ST PASS? 
  16144 002002        SZA            YES - SKIP 
  16145 026156        JMP BLIN3      NO - 2ND 
                      SPC 1 
  16146 061061        LDA L001      LINK LOAD ON 1ST PASS?
  16147 002003        SZA,RSS        SKIP IF YES
  16150 026174        JMP LH11       NO - ESTIMATING
  16151 061057        LDA LWH2      GET # TO OUTPUT 
  16152 002002        SZA 
  16153 016217        JSB BLIN0 
  16154 002404  BLIN2 CLA,INA       START 
  16155 126232        JMP LOADA,I    PASS 2 
                      SPC 1 
  16156 002001  BLIN3 RSS 
  16157 126077        JMP DLINK,I 
  16160 061465        LDA PLGTH     SET UP
  16161 001265        RAL,CLE,ERA    HIGH 
  16162 040446        ADA TPREL      CURRENT PAGE 
  16163 072236        STA CPLOC      LINK BUFFER
  16164 072237        STA CPBAS 
  16165 010244        AND M0760 
  16166 072240        STA CPADD 
  16167 040250        ADA M2000 
  16170 072241        STA CPMAX 
  16171 002400        CLA           CLEAR BLIN3 SO DONE 
  16172 072156        STA BLIN3      ONCE ONLY
  16173 026107        JMP LH4 
                      SPC 1 
  16174 061054  LH11  LDA TEMP1 
  16175 003004        CMA,INA 
  16176 042236        ADA CPLOC 
  16177 071057        STA LWH2
  16200 002404        CLA,INA 
  16201 126233        JMP LOADY,I 
                      SPC 3 
*     BLINK         BLINK SENDS THE LINKAGE AREA TO THE DISC
*     IT IS CALLED JUST AFTER THE END RECORD IS READ
                      SPC 1 
  16202 000000  BLINK NOP 
  16203 035056        ISZ LWH1      RETURN IF NO HIGH 
  16204 126202        JMP BLINK,I    LINK BUFFER
  16205 062236        LDA CPLOC     GET CP LINKAGE LOCATION 
  16206 003004        CMA,INA 
  16207 040446        ADA TPREL     ADD CURRENT LOAD LOC
  16210 071057        STA LWH2      SET NEG. # WDS TO OUTPUT
  16211 002003        SZA,RSS       IF ZERO 
  16212 126202        JMP BLINK,I   EXIT
  16213 016217        JSB BLIN0     OUTPUT BUFFER TO DISC 
  16214 062236        LDA CPLOC     DONE - UPDATE THE 
  16215 070446        STA TPREL     CURRENT RELOCATION ADDRESS
  16216 126202        JMP BLINK,I   AND RETURN
                      SPC 3 
  16217 000000  BLIN0 NOP 
  16220 062235        LDA CPLSA     GET THE LINK LIST ADDRESS 
  16221 072000        STA ALINK     AND SET WORKING POINTER 
                      SPC 1 
  16222 162000  BLIN1 LDA ALINK,I   GET THE LINK WORD 
  16223 006404        CLB,INB       AND SEND
  16224 114135        JSB ALABD,I   TO THE DISC 
  16225 036000        ISZ ALINK     STEP ADDRESS
  16226 035057        ISZ LWH2       AND COUNT
  16227 026222        JMP BLIN1     MORE - SO GO GET THEM 
  16230 126217        JMP BLIN0,I 
                      SPC 3 
  16231 011214  CLINK DEF LINKC 
  16232 010350  LOADA DEF LOADX 
  16233 010333  LOADY DEF LOADN+1 
  16234 011302  BPSCM DEF BPSCN 
  16235 015000  CPLSA ABS 15000B
  16236 000000  CPLOC NOP           CURRENT PAGE LINKAGE ADDRESS
  16237 000000  CPBAS NOP           CURRENT PAGE LINKAGE BASE 
  16240 000000  CPADD NOP           PAGE ADDRESS OF CURRENT PAGE LINK AREA
  16241 000000  CPMAX NOP           LAST WORD PLUS ONE OF CURRENT PAGE LINK AREA
                      SPC 1 
  16242         LST   BSS 5 
                      SPC 2 
  16247         END   EQU * 
                      SPC 2 
                      END RTGEN 
5 ERRORS
