ASMB,R,L,B,C   ** R/T INPUT/OUTPUT CONTROL MODULE **
      HED ** R/T INPUT/OUTPUT CONTROL MODULE      A-29016-90003-1 
* 
      NAM RTIOC 
* 
***** AMD-DAS ***** FEB,72 ***** REV.LWH *****
***** AMD-DAS ***** AUG,72 ***** REV.GAA *****
***** AMD-DAS 
***** NOV,73 ***** REV.GAA *****
* 
****************************************************************
*  THIS PROGRAM CONTAINS INFORMATION WHICH IS PROPRIETARY TO   *
*  HEWLETT-PACKARD COMPANY.  IT IS NOT TO BE DISCLOSED TO ANY  *
*  THIRD PARTIES OR REPRODUCED EXCEPT FOR ARCHIVE PURPOSES.    *
****************************************************************
* 
* 
      ENT $CIC,$XSIO,$SYMG,$IORQ,$IOUP,$IODN
      ENT $IRT,$XCIC,$DEVT
      ENT $CVEQ 
* 
      EXT $RQST,$CLCK,$XEQ,$TYPE,$LIST,$ALC,$RTN
      EXT $CVT3,$ERMG,$MESS 
      EXT $ABRT 
* 
      SUP 
* 
* 
*  MODULE  OF THE  R E A L - T I M E  E X E C U T I V E 
* 
* 
*  THIS INCLUDES THE FOLLOWING MAJOR SECTIONS:
* 
*    1)  CENTRAL  INTERRUPT  CONTROL
* 
*    2)  INPUT  /  OUTPUT  CONTROL
*         - I/O REQUEST PROCESSING
*         - I/O COMPLETION PROCESSING 
*         - GENERAL I/O ERROR PROCESSING
* 
*    3)  SYSTEM ERROR DIAGNOSTIC PRINT ROUITNE
* 
*    4)  PROCESSOR FOR OPERATOR I/O STATEMENTS
* 
      HED <  CENTRAL  INTERRUPT  CONTROL  >       A-29016-90003-1 
* 
*** C E N T R A L   I N T E R R U P T   C O N T R O L  ***
* 
*   THE PROCESSING OF SYSTEM INTERRUPTS IS CONTROLLED 
*  BY DIRECTING ALL SOURCES TO THE ENTRY POINT < CIC >. 
*  < CIC > IS RESPONSIBLE FOR SAVING AND RESTORING
*  THE CURRENT STATE OF THE MACHINE, ANALYSING THE
*  SOURCE OF THE INTERRUPT, AND ACTIVATING THE
*  APPROPRIATE PROCESSOR. THIS ROUTINE IS TABLE-DRIVEN
*  BY THE *INTERRUPT TABLE*.
* 
*   SPECIAL PROCESSING FOR A "PRIVILEGED" CLASS OF
*  INTERRUPTS IS PROVIDED BY CIC. THIS IS DESCRIBED 
*  FULLY IN SECTION III BELOW. BRIEFLY, A SPECIAL 
*  I/O CARD CAN BE USED TO SEPARATE SPECIAL INTERRUPTS
*  FROM NORMAL SYSTEM CONTROLLED INTERRUPTS. THE
*  PRESENCE AND LOCATION OF THE SPECIAL CARD IS 
*  NOTED AT SYSTEM CONFIGURATION TIME. IF IT IS 
*  PRESENT, THE EXEC OPERATIONS ARE NOT PERFORMED 
*  WITH THE INTERRUPT SYSTEM DISABLED BUT RATHER
*  WITH THE CONTROL SET ON THE SPECIAL CARD TO
*  HOLD OFF SYSTEM I/O INTERRUPTS.
* 
* I. INTERRUPT TABLE (INTBL)
* 
*     A TABLE, ORDERED BY HARDWARE INTERRUPT PRIORITY,
*    DESIGNATES THE ASSOCIATED SOFTWARE PROCESSOR AND 
*    THE PROCEDURE FOR INITIATING THE PROCESSOR. THIS 
*    TABLE IS CONSTRUCTED BY  *RTGEN* ON INFORMATION
*    SUPPLIED BY THE USER IN CONFIGURING THE SYSTEM.
*    THE TABLE CONSISTS OF ONE ENTRY PER INTERRUPT
*    SOURCE: EACH ENTRY CONTAINS ONLY ONE WORD. THE 
*    CONTENTS OF EACH VALID ENTRY IS THE IDENTIFIER 
*    OF THE PROCESSOR. SYSTEM PROCESSORS ARE NOTED
*    BY POSITIVE VALUES, USER PROCESSORS BY NEGATIVE
*    VALUES:
* 
*      1. SYSTEM -  THE IDENTIFIER IS THE ADDRESS OF
*            THE EQT ENTRY IDENTIFYING THE I/O DEVICE.
* 
*      2. USER   -  THE ADDRESS OF THE PROGRAM
*            IDENTIFICATION SEGMENT IS IN 2-S COMPLEMENT
*            FORM IN THE ENTRY. 
* 
*      3. ILLEGAL  -  AN ENTRY CORRESPONDING TO AN
*            ILLEGAL INTERRUPT SOURCE CONTAINS ZERO.
* 
*     A PROCESSOR IS CALLED DIRECTLY IF IT RESPONDS 
*    TO STANDARD SYSTEM INTERRUPT (E.G., CLOCK, 
*    MEMORY PROTECT, I/O DEVICE CONTROLLED BY A 
*    SYSTEM DRIVER) OR IS SCHEDULED IN THE NORMAL 
*    PRIORITY ORDER IF IT RESPONDS TO A USER
*    CONTROLLED DEVICE OR INTERRUPT SOURCE. 
      SKP 
* II.   INTERRUPT PROCESSING
* 
*     INTERRUPT ACKNOWLEDGEMENT BY THE CPU CAUSES 
*    THE INSTRUCTION IN THE WORD CORRESPONDING
*    TO THE I/O CHANNEL ADDRESS TO BE EXECUTED. 
*    FOR ALL ACTIVE I/O CHANNELS ( PLUS LOCATIONS 
*    5-7 ) CONTROLLED BY THE SYSTEM, THE INSTRUCTION
*    SET IN EACH INTERRUPT LOCATION IS A JUMP 
*    SUBROUTINE INDIRECTLY TO < CIC >.
* 
      SKP 
*    <CIC> PERFORMS THE FOLLOWING:
* 
*       1. DISABLES THE INTERRUPT SYSTEM. 
* 
*       2. SAVES ALL REGISTERS PLUS THE INTERRUPT 
*          RETURN POINT IN THE EXECUTING
*          ID SEGMENT.
* 
*       3. CLEARS THE FLAG OF THE INTERRUPT SOURCE. 
* 
*       4. SETS 'MPTFL' = 1 TO MEAN MEMORY PROTECT
*          IS OFF - FLAG FOR PRIVILEGED PROCESSORS. 
* 
*       5. CHECKS FOR SPECIAL INTERRUPT PROCESSING. 
*          IF 'DUMMY' IN BASE PAGE COMMUNICATION
*          AREA = 0, THEN LEAVE THE INTERRUPT SYSTEM
*          DISABLED AND GO TO STEP 6. 
* 
*           'DUMMY' > 0  - PRIVILEGED INTERRUPTS: 
*           -THE CONTENTS OF 'DUMMY' IS THE I/O 
*            ADDRESS OF THE CARD; THIS IS USED TO 
*            SET THE CONTROL FF ON THE CARD (FLAG 
*            IS ALREADY SET) TO HOLD OFF LOWER
*            PRIORITY INTERRUPTS (SYSTEM INTERRUPTS)
*           -CLEARS THE CONTROL FLIP-FLOP OF
*            EACH DMA CHANNEL TO PROHIBIT POSSIBLE
*            INTERRUPTS FROM OCCURRING. 
*           -ENABLE THE INTERRUPT SYSTEM. 
* 
*       6. TRANSFERS DIRECTLY TO THE INTERRUPT
*          PROCESSOR FOR SOURCES OF:
* 
*           5 - MEMORY PROTECT VIOLATION
*          (TBG) - TIME BASE GENERATOR
* 
*          FOR OTHER SOURCES, THE INTERRUPT SOURCE
*          CODE IS USED TO INDEX THE INTERRUPT TABLE. 
*          THE CONTENTS OF THE INTBL ENTRY DETERMINES 
*          THE MANNER IN INITIATING THE PROCESSOR:
* 
*         A. +, THE CONTENTS OF THE ENTRY IS
*            ASSUMED TO BE THE FWA OF AN EQT ENTRY. 
*            THE ADDRESSES OF THE 15-WORD ENTRY 
*            ARE SET IN <EQT1 - EQT15> AND CONTROL
*            TRANSFERRED DIRECTLY TO THE COMPLETION 
*            SECTION ADDRESS (WORD 3 OF EQT ENTRY). 
* 
*          B. -, THE VALUE IS SET POSITIVE AND IS 
*            SET IN A CALL TO <LIST> IN THE 
*            SCHEDULING MODULE- THE CALL IS MADE IF 
*            THE USER PROGRAM IS DORMANT- CONTROL IS
*            TRANSFERRED TO $XEQ. IF THE PROGRAM IS 
*            NOT DORMANT, IT IS NOT SCHEDULED AND THE 
*            DIAGNOSTIC "SC03 INT XXXXX" IS OUTPUT
*            TO THE SYSTEM TTY- XXXXX IS THE PROGRAM
*            NAME. CONTROL IS RETURNED TO THE INTER-
*            RUPTED SEQUENCE. 
* 
*          C. 0, ILLEGAL OR UNDEFINED INTERRUPTS ARE
*               NOT PROCESSED BUT THE DIAGNOSTIC
*               "ILL INT XX" IS OUTPUT TO THE SYSTEM
*               TTY. XX IS THE INTERRUPT CODE.
* 
*       7. I/O DRIVER RETURNS INDICATE CONTINUATION 
*         OR COMPLETION OF THE OPERATION BY THE 
*         DRIVER OR DEVICE: 
* 
*          A. RETURN AT (P+1): COMPLETION OF THE
*                              OPERATION. CIC TRANS-
*                              FERS DIRECTLY TO THE 
*                              IOC COMPLETION SECTION 
*                              AT  < IOCOM >. CONTROL 
*                              IS NOT RETURNED TO 
*                              < CIC >. 
* 
*          B. RETURN AT (P+2): CONTINUATION OF THE
*                              OPERATION. CIC RETURNS 
*                              TO THE INTERRUPTED 
*                              SEQUENCE AS DESCRIBED
*                              IN STEP 8 FOLLOWING. 
* 
*       8. RESTORING INTERRUPT CONDITIONS AND RETURN
*           TO POINT OF INTERRUPTION. A SUBROUTINE
*           CALLED '$IRT' IS PROVIDED FOR USE BY
*           OTHER MODULES OF THE R/T EXEC TO RESET
*           FLAGS AND THE DMA CHANNELS. THE CALL TO 
*           '$IRT' MUST BE IN THE FOLLOWING SEQUENCE
*           TO PROPERLY RESET AND TO ENABLE INTERRUPTS: 
* 
*              - JSB $IRT          -
*              --RESTORE REGISTERS--
*              - STF 0             -
*              - STC 5             -
*              - JMP -,I           -
* 
*          $IRT PERFORMS THE FOLLOWING: 
*           - DISABLES THE INTERRUPT SYSTEM 
*           - SETS 'MPTFL' = 0 TO MEAN THAT MEMORY
*              PROTECT IS ON (ENABLED). 
*           - IMMEDIATE RETURN IF 'DUMMY' = 0 
*           - ISSUES A CLC TO CLEAR THE CONTROL 
*             FF ON THE SPECIAL CARD. 
*           - SETS THE CONTROL FF ON EITHER DMA 
*              CHANNEL IF BIT 15 OF THE INTBL WORD
*              =1 TO MEAN IT IS ACTIVE. THIS
*              ENABLES DMA INTERRUPTS ONLY. 
*           - RETURNS TO CALLER.
* 
* 
* 
      SKP 
* III.  SPECIAL  (PRIVILEGED) INTERRUPTS
* 
*       THIS PROVISION ALLOWS INTERRUPTS FROM SPECIAL 
*      DEVICES TO BE RECOGNIZED WITHIN 100 MICRO SECONDS
*      AND TO BE PROCESSED BY SPECIAL, COMPLETELY 
*      INDEPENDENT ROUTINES CLASSIFIED AS SYSTEM TYPE 
*      PROGRAMS. INTERRUPTS ARE CHANNELED DIRECTLY
*      TO THE ENTRY POINT OF A ROUTINE BY A JSB INDIRECT
*      IN THE CORRESPONDING CORE LOCATION. $CIC IS
*      NOT AWARE OF THESE SPECIAL INTERRUPTS OCCURRING; 
*      IT ONLY ALLOWS THE INTERRUPT SYSTEM TO BE
*      ENABLED AND A SOFTWARE FLAG SET TO INDICATE
*      THE STATUS OF MEMORY PROTECT. THE JSB TO THE 
*      ENTRY POINT FOR A ROUTINE IS SET BY USING THE
*      "ENT,XXXXX" STATEMENT IN RTGEN WHEN CONFIGURING
*      A REAL-TIME SYSTEM.
*       THE SPECIAL PROCESSING ROUTINES CANNOT USE
*      ANY FEATURES OR REQUESTS OF THE STANDARD 
*      R/T EXEC. THESE ARE INDEPENDENT ROUTINES.
*      COMMUNICATION BETWEEN A NORMAL PROGRAM UNDER 
*      THE CONTROL OF THE R/T EXEC AND A SPECIAL
*      INTERRUPT PROCESSOR CAN BE DONE THROUGH
*      THE APPROPRIATE COMMON REGION: I.E. FLAGS OR 
*      INDICATORS CAN BE SET IN PRE-DEFINED WORDS 
*      IN COMMON TO INITIATE PROCESSING.  THE NORMAL
*      USER PROGRAM CAN BE SCHEDULED TO RUN AT A
*      PERIODIC TIME INTERVAL TO SCAN THE INDICATORS. 
*      THIS FACILITY IS PROVIDED TO ACCOMODATE HIGH-
*      SPEED PROGRAM CONTROLED DATA TRANSMISSION
*      WHICH REQUIRES QUICK RESPONSE. 
*       THE SPECIAL INTERRUPT PROCESSORS ARE
*      RESPONSIBLE FOR SAVING AND RESTORING ALL 
*      REGISTERS USED AND FOR RESTORING MEMORY
*      PROTECT TO ITS STATE BEFORE THE SPECIAL
*      INTERRUPT OCCURRED. MEMORY PROTECT IS
*      AUTOMATICALLY DISABLED AT THE OCCURRENCE 
*      OF ANY INTERRUPT. THE WORD 'MPTFL' IN THE
*      BASE PAGE COMMUNICATION AREA IS SET BY THE 
*      R/T EXEC TO INDICATE THE STATUS OF THE 
*      MEMORY PROTECT:
* 
*       'MPTFL' = 0  MEANS MEMORY PROTECT IS 'ON'.
*                    THE SPECIAL ROUTINE MUST ISSUE 
*                    A STC 5  IMMEDIATELY BEFORE
*                    RETURNING TO THE INTERRUPTED 
*                    SEQUENCE BY A  JMP -,I 
* 
*               = 1  MEANS THAT THE R/T EXEC ITSELF 
*                    WAS EXECUTING WHEN THE INTERRUPT 
*                    OCCURRED AND THAT MEMORY 
*                    PROTECT IS 'OFF'.  THE ROUTINE 
*                    MUST NOT ISSUE THE STC 5 IN
*                    THIS CASE. 
* 
*       IF  A SPECIAL INTERRUPT ROUTINE MUST EXECUTE
*      WITH THE INTERRUPT SYSTEM DISABLED, THE
*      STC 0 TO RE-ENABLE INTERRUPTS JUST PRIOR TO
*      EXITING MUST BE IN THE FOLLOWING SEQUENCE IF 
*      MEMORY PROTECT IS ALSO TO BE TURNED ON:
* 
*          - STF 0    - 
*          - STC 5    - 
*          - JMP -,I  - 
      SKP 
CIC   NOP 
* 
CLF   CLF 0        DISABLE  INTERRUPT SYSTEM
* 
* PRESERVE CURRENT STATUS OF MACHINE
* 
      DST XA,I      SAVE REGISTERS
      ERA,ALS        A,B
      SOC            E AND
      INA            OVERFLOW 
      STA XEO,I 
      LIA 4        GET INTERRUPT SOURCE CODE. 
      IOR CLF      CONSTRUCT A  CLF XX  INSTRUCTION 
      STA *+1       AND CLEAR INTERRUPT FLAG TO 
*                                    ALLOW SPECIAL USER INTERRUPTS
      NOP             TO BE ACKNOWLEDGED. 
* 
$XCIC LIA 4    ### SPECIAL ENTRY TO SKIP CLF ###
      STA INTCD     SAVE INTERRUPT SOURCE CODE. 
* 
      CLA,INA       SET 'MPTFL' = 1 TO MEAN 
      STA MPTFL      MEMORY PROTECT IS OFF. 
* 
SW1   JMP CIC.0     (NOP IF PRIVILEDGED OPTION) 
* 
* PROVIDE FOR SPECIAL  (PRIVILEGED) INTERRUPTS
* 
STC1  STC 12B       SET CONTROL ON THE DUMMY I/O
* 
      CLC 6         CLEAR DMA CHANNELS
      CLC 7          CONTROL FF.
* 
STF   STF 0         RE-ENABLE INTERRUPTS
* 
* 
CIC.0 LDB INTCD     GET INTERRUPT CODE AGAIN. 
      LDA CIC      SAVE P-REGISTER AS POSSIBLE
      STA XSUSP,I    POINT OF SUSPENSION. 
* 
* CHECK FOR TRANSFER TO NON-I/O SYSTEM PROCESSOR
* 
      CPB .5       IF MEMORY PROTECT VIOLATION, 
      JMP MPT       GO TO EXAMINE ADDRESS IN I/O 5. 
* 
      CPB TBG      IF TIME BASE GENERATOR,
      JMP CLOCK     GO TO TIME PROCESSOR. 
* 
* CHECK LEGALITY OF INTERRUPT 
* 
      LDA INTCD     INTERRUPT 
      ADA N6        CODE - 6. 
      STA B         (SAVE FOR TABLE INDEX)
      SSA          - ERROR IF CODE
      JMP CIC.4     LT 6, ISSUE DIAGNOSTIC. 
      CMA          CHECK FOR BEYOND RANGE 
      ADA INTLG     OF INTERRUPT TABLE
      SSA          ERROR IF 
      JMP CIC.4      NEGATIVE, ISSUE DIAG.
* 
* GET PROCESSOR IDENT FROM INTERRUPT TABLE
* 
      ADB INTBA    INDEX TO PROPER ENTRY BY SOURCE
      LDA B,I       CODE. GET CONTENTS OF ENTRY 
      SZA,RSS      UNDEFINED INTERRUPT
      JMP CIC.4       IF VALUE = 0, ISSUE DIAG. 
* 
* 
      LDB INTCD     REMOVE
      CPB .6         BIT 15 OF INTBL WORD 
      RSS            IF DMA 
      CPB .7         CHANNEL
      RAL,CLE,ERA    INTERRUPT. 
* 
      SSA,RSS      SYSTEM PROCESSOR IS TO BE CALLED 
      JMP CIC.2     IF VALUE IS POSITIVE. 
* 
** INTERRUPT PROCESSOR IS USER ROUTINE TO BE
**  SCHEDULED FOR PRIORITY EXECUTION
* 
      CMA,INA      SET POSITIVE TO GET ID SEGMENT 
      STA CIC.1     ADDRESS, SET IN CALL TO <LIST>. 
* 
      ADA .15      CHECK STATUS OF PROGRAM. 
      LDA A,I      IF STATUS IS ZERO (DORMANT), 
      SZA           SCHEDULE PROGRAM, OTHERWISE 
      JMP CIC.5      ISSUE DIAGNOSTIC.
* 
      JSB LIST     CALL SCHEDULER TO LINK PROGRAM 
      OCT 101       INTO SCHEDULE LIST. 
CIC.1 NOP          HOLDS ID SEGMENT ADDRESS 
      JMP XEQ 
      SPC 1 
N6    DEC -6
* 
* 
* ASSUME PROCESSOR FOR CODE GT= 6 IS A
*  SYSTEM I/0 DRIVER. VALUE OF INTERRUPT
*  TABLE ENTRY IS THE STARTING ADDRESS
*  OF THE EQUIPMENT TABLE ENTRY CORRESPONDING 
*  TO THE INTERRUPTING DEVICE.
* 
CIC.2 JSB SETEQ    SET EQT ENTRY ADDRESSES. 
* 
      LDA INTCD      (A) = INTERRUPT SOURCE CODE
* 
CIC.6 LDB EQT14,I   SET DEVICE
      STB EQT15,I    TIME-OUT CLOCK 
* 
* CALL I/O PROCESSOR, COMPLETION SECTION
* 
      LDB EQT3,I   CALL  DRIVER 
      JSB B,I       *COMPLETION* SECTION. 
* 
      JMP IOCOM  (P+1): *COMPLETION RETURN* 
* 
      CLA        (P+2): *CONTINUATION RETURN* 
      LDB OPATN    CHECK FOR OPERATOR ATTENTION.
      STA OPATN     -CLEAR OPERATOR FLAG- 
      SZB          IF FLAG SET, 
      JMP TYPE      ACKNOWLEDGE.
* 
* 
* RESET INTERRUPT CONDITIONS - RETURN TO SEQUENCE 
* 
CIC.3 JSB $IRT      RESET CONDITIONS
      LDA XEO,I 
      CLO 
      SLA,ELA 
      STF 1        -RESTORE 
      DLD XA,I       REGISTERS- 
      STF 0        ENABLE INTERRUPT SYSTEM
      STC 5        TURN ON -MEMORY PROTECT- 
      JMP CIC,I     --- RETURN ---
* 
*  ILLEGAL OR UNDEFINED INTERRUPT 
* 
CIC.4 LDA INTCD     GET THE INTERRUPT CODE. 
      CLE           E = 0 FOR ASCII/OCTAL 
      JSB CVT3      CONVERSION. 
      ADA .2       STORE (WORD 3 FROM CVT3) 
      LDA A,I       INTERRUPT CODE IN MESSAGE.
      STA CICM1+6 
      LDA CICM1    PRINT
      JSB SYSMG     "ILL INT XX", 
      JMP CIC.3    RETURN TO INTERRUPTED SEQUENCE.
* 
* ISSUE DIAGNOSTIC FOR BEING UNABLE TO
*  SCHEDULE USER PROGRAM ON INTERRUPT.
* 
CIC.5 LDB CIC.1    SET (B) TO ADDRESS OF
      ADB .12       NAME IN 
      LDA B,I        PROGRAM ID SEGMENT.
      STA CICM2+7  STORE
      INB           PROGRAM 
      DLD B,I      NAME IN
      DST CICM2+8   DIAGNOSTIC AND PRINT
      LDA CICM2     "SC03 INT XXXXX"
      JSB SYSMG 
      JMP CIC.3    RETURN TO INTERRUPTED SEQUENCE.
      SKP 
* 
*  SUBROUTINE: '$IRT' 
* 
$IRT  NOP 
      CLF 0         DISABLE INTERRUPT SYSTEM
* 
      CLA           CLEAR 'MPTFL' TO MEAN 
      STA MPTFL      MEMORY PROTECT IS ON.
* 
SW2   JMP $IRT,I    RETURN IF NOT PRIV. (ELSE NOP)
* 
CLC1  CLC 12B      CLEAR CONTROL AND SET FLAG 
STF1  STF 12B      BUFFER ON DUMMY I/O CARD 
* 
      DLD INTBA,I  CHECK CONDITION OF DMA CHANNELS
      SSA           IF BIT = 1 FOR DMA #1 (ACTIVE)
      STC 6          THEN SET CONTROL TO ENABLE 
      SSB          INTERRUPTS.  SAME FOR
      STC 7           DMA CHANNEL #2. 
* 
      JMP $IRT,I    -RETURN-
      SPC 4 
* MEMORY PROTECT / PARITY ERROR ANALYSIS
*  - PROTECT VIOLATION CAUSES TRANSFER TO "RTRQP" 
*  - PARITY ERROR CAUSES HALT CONDITION.
* 
MPT   LIA 5        GET VIOLATION ADDRESS: IF BIT 15 
      SSA,RSS       =0, PROCESS AS PROTECT VIOLATION
      JMP RTRQP     AND POSSIBLE SYSTEM REQUEST.
      HLT 0        PARITY ERROR HALT (BIT 15 = 1) 
      STF 5        RESTART, RESET PARITY ERROR BOARD
      JMP CIC.3     AND RETURN TO INTERRUPT SEQUENCE
* 
CICM1 DEF *+1 
      DEC -10 
      ASC 5,ILL INT XX
* 
CICM2 DEF *+1 
      DEC -15 
      ASC 8,SC03 INT  XXXXX 
* 
INTCD NOP           HOLDS INTERRUPT SOURCE CODE 
* 
      HED <  RT EXECUTIVE  INPUT/OUTPUT CONTROL>  A-29016-90003-1 
***  I N P U T  /  O U T P U T  C O N T R O L  ***
* 
*  THE I/O SCHEDULING AND CONTROL MODULE  < IOC > 
* IS RESPONSIBLE FOR ALLOCATING THE USE OF ALL
* STANDARD I/O DEVICES AND THE TWO DMA CHANNELS.
*  I/O DRIVERS OPERATE UNDER CONTROL OF <IOC> AND 
* <CIC> FOR INITIATION AND COMPLETION OF SYSTEM 
* AND USER DIRECTED I/O OPERATIONS. I/O DRIVERS 
* ARE INDEPENDENT PROGRAMS IDENTIFIED TO <IOC>
* BY THE DEVICE ASSOCIATED EQUIPMENT TABLE. DRIVERS 
* ARE COMPOSED TO TWO SECTIONS: *INITIATION* AND
* *COMPLETION*.  THE *INITIATION* SECTION IS
* CALLED BY <IOC> TO EXAMINE AND INITIATE AN I/O
* OPERATION. THE *COMPLETION* SECTION IS CALLED 
* BY <CIC> TO CONTINUE OR COMPLETE THE OPERATION. 
* DRIVERS PROVIDE FOR SIMULTANEOUS MULTI-DEVICE 
* CONTROL BY USING THE DEVICE EQT ENTRY FOR 
* VARIABLE STORAGE. 
* 
* I.   * EQUIPMENT TABLE * (EQT)
* 
*   EACH I/O DEVICE CONTROLLED BY THE IOC/DRIVER
*  RELATIONSHIP IS DEFINED BY STATIC AND DYNAMIC
*  INFORMATION IN THE EQUIPMENT TABLE. THE EQT
*  IS A SYSTEM RESIDENT TABLE WHICH IS CONSTRUCTED
*  FROM USER DIRECTIVES BY <RTGEN>.  EACH EQT 
*  ENTRY IS COMPOSED OF 15-WORDS IN THE FOLLOWING FORMAT: 
* 
      SKP 
* 
*  WORD            CONTENTS 
*  ----  ---------------------------- 
*    1   * I/O LIST . LINK POINTER  * 
*    2   *DRIVER *INITIATION ADDRESS* 
*    3   *DRIVER *COMPLETION ADDRESS* 
*    4   *DB//T/////UNIT#--CHANNEL #* 
*    5   *AV-TYPE CODE- UNIT  STATUS* 
*    6   *REQUEST   CONTROL    WORD * 
*    7   *REQUEST  BUFFER   ADDRESS * 
*    8   *REQUEST  BUFFER   LENGTH  * 
*    9   *TEMPORARY OR DISC TRACK # * 
*   10   *TEMPORARY OR DISC SECTOR #* 
*   11   *DRIVER   TEMPORARY STORAGE* 
*   12   *  "          "        "   * 
*   13   *  "          "        "   * 
*   14   * DEVICE CLOCK RESET VALUE * 
*   15   *   "      "  WORKING  "   * 
* 
*  D: =1 IF A DMA CHANNEL REQUIRED FOR TRANSFER 
*  B: =1 IF AUTOMATIC OUPUT BUFFERING DESIRED 
*  T: DEVICE TIME-OUT BIT - CLEARED BEFORE EACH 
*              IO INITIATION; SET IF DEVICE TIMES-OUT.
*  UNIT#: OPTIONAL FOR DEVICES REQUIRING
*          SUB-CHANNEL DESIGNATION
*  CHANNEL#: I/O SELECT CODE (LOWER # IF
*             MULTI-BOARD INTERFACE)
*  AV (AVAILABILITY INDICATOR): 
*     =0, UNIT AVAILABLE FOR OPERATION
*     =1, UNIT DISABLED 
*     =2, UNIT CURRENTLY IN OPERATION 
*     =3, UNIT WAITING FOR DMA CHANNEL
*  TYPE CODE: CODE IDENTIFYING TYPE OF I/O DEVICE 
*  UNIT STATUS: ACTUAL OR SIMULATED UNIT STATUS 
*              AT END OF OPERATION
* 
* II. * DEVICE REFERENCE TABLE * (DRT)
* 
*  THE DEVICE REFERENCE TABLE PROVIDES FOR
* LOGICAL ADDRESSING OF PHYSICAL UNITS DEFINED
* IN THE EQUIPMENT TABLE. THE *DRT* CONSISTS
* OF 1-WORD ENTRIES CORRESPONDING TO THE RANGE
* OF USER-SPECIFIED "LOGICAL" UNITS, 1 TO N 
* WHERE N IS LT OR = TO 63(10). THE CONTENTS OF 
* THE WORD CORRESPONDING TO A LOGICAL UNIT IS 
* THE RELATIVE POSITION OF THE  EQT ENTRY 
* DEFINING THE ASSIGNED PHYSICAL UNIT,IN
* BITS 5 - 0, AND THE SUBCHANNEL OF THE 
* EQT ENTRY TO BE REFERENCED BY THIS
* LOGICAL UNIT NUMBER, IN BITS 13 - 11. 
* 
*  CERTAIN LOGICAL UNIT #S ARE PERMANENTLY
* ASSIGNED TO FACILITATE SYSTEM, USER AND 
* SYSTEM SUPPORT I/O OPERATIONS. THESE ARE: 
      SKP 
*     1  -   SYSTEM  TELETYPEWRITER 
*     2  -   SYSTEM  DISC 
*     3  -   AUXILIARY DISC 
*     4  -   'STANDARD' PUNCH UNIT
*     5  -   'STANDARD' INPUT UNIT
*     6  -   'STANDARD' LIST  UNIT
*     7  - ASSIGNED 
*     .     BY
*     .      USER 
*     63 -
* 
* III.  INPUT/OUTPUT REQUESTS 
* 
*    I/O REQUESTS INCLUDE COMMANDS FOR
*   READ, WRITE, CONTROL(FUNCTIONS) AND STATUS. 
*   THE FORMAT OF THESE REQUESTS CONFORM TO 
*   THE GENERAL SYSTEM REQUEST FORMAT. THE
*   NUMBER OF PARAMETERS VARIES DEPENDING 
*   ON THE TYPE OF REQUEST AND THE CHARAC-
*   TERISTICS OF THE REFERENCED DEVICE. 
* 
*    A USER I/O REQUEST IS DIRECTED TO <IOC>
*   AT -IOREQ- BY THE EXECUTIVE REQUEST 
*   PROCESSOR <RTRQP>. SYSTEM I/O REQUESTS
*   ARE IN A DIFFERENT FORMAT AND ARE PROCESSED 
*   AT THE SECTION -XSIO- IN <IOC>. REFER TO
*   THAT SECTION FOR DETAILED DESCRIPTION.
* 
*    A *STATUS* REQUEST IS PROVIDED 
*   FOR USER AND SYSTEM SUPPORT PROGRAMS
*   WHICH REQUIRE KNOWLEDGE OF DEVICE 
*   CONDITIONS OR TYPE BEFORE A READ/WRITE/ 
*   CONTROL REQUEST IS MADE. THE PROGRAM
*   IS NOT SUSPENDED ON THIS CALL.
*   A PARAMETER WORD IS INCLUDED IN THE 
*   REQUEST TO CONTAIN THE DEVICE STATUS ON 
*   RETURN TO THE USER. THIS STATUS IS FROM WORD
*   5 OF THE EQT ENTRY FOR THE DEVICE.
*   ALSO, AN ADDITIONAL PARAMETER WORD CAN BE 
*   INCLUDED IN THE REQUEST- WORD 4 OF THE
*   EQT ENTRY IS RETURNED IF THE ADDITIONAL 
*   PARAMETER WORD IS INCLUDED. 
* 
*    A DYNAMIC STATUS REQUEST CAN BE MADE BY
*   MEANS OF A CONTROL REQUEST, THE FORMAT
*   OF WHICH IS DEFINED BELOW.  IN THIS CASE, 
*   THE REQUEST IS QUEUED, THE DRIVER IS ENTERED, 
*   AND THE STATUS IS RETURNED TO THE CALLING 
*   PROGRAM IN THE A REGISTER.
*     
  SKP 
* 
*  A.   READ/WRITE REQUEST FORMAT 
* 
*         EXT  EXEC 
*         JSB  EXEC 
*         DEF  EXIT     (DEFINE EXIT POINT) 
*         DEF  RCODE    (DEFINE READ (1) OR WRITE(2)) 
*         DEF  CONWD    (DEFINE CONTROL WORD) 
*         DEF  BUFFR    (DEFINE BUFFER LOCATION)
*         DEF  BUFFL    (DEFINE BUFFER LENGTH)
*         DEF  DTRAK   (OPTIONAL - DISC TRACK #)
*         DEF  DSECT   (OPTIONAL - DISC SECTOR #) 
*    EXIT --- 
*          .
*          .
*   RCODE DEC  1 OR 2 
*   CONWD OCT  NNNNN   CONTROL INFO/LOGICAL UNIT #
*   BUFFL DEC  N OR -N  WORD OR CHARACTER LENGTH
*   DTRAK DEC  N       DISC TRACK # 
*   DSECT DEC  N       STARTING SECTOR #
* 
* 
*  B.   CONTROL   REQUEST FORMAT
* 
*         EXT  EXEC 
*         JSB  EXEC 
*         DEF  EXIT     (DEFINE EXIT POINT) 
*         DEF  RCODE    (DEFINE REQUEST CODE) 
*         DEF  CONWD    (DEFINE CONTROL WORD) 
*         DEF  PARAM    (DEFINE OPTIONAL PARAMETER) 
*    EXIT --- 
*          .
*          .
*   RCODE DEC  3
*   CONWD OCT  NNNNN   CONTROL CODE/LOGICAL UNIT #
*   PARAM DEC  N      PARAMETER REQUIRED BY TYPE OF CODE
* 
*    CONTROL CODES (FIELD 10-06 OF CONTROL WORD): 
* 
*      01 -   WRITE END-OF-FILE    --/  PRIMARILY 
*      02 -   BACKSPACE 1 RECORD     /    FOR 
*      03 -   FORWARD SPACE 1 RECORD /  MAGNETIC
*      04 -   REWIND                 /    TAPE
*      05 -   REWIND STANDBY         /    UNITS 
*      06 -   DYNAMIC STATUS       --/
*      07 -   SET EOT STATUS (FOR PAPER TAPE INPUT) 
*      10 -   GENERATE LEADER FOR PAPER TAPE
*      11 -   LIST OUTPUT LINE SPACING
      SKP 
* 
*  C.  DEVICE   STATUS  REQUEST FORMAT
* 
*         EXT  EXEC 
*         JSB  EXEC 
*         DEF  EXIT     (DEFINE EXIT POINT) 
*         DEF  RCODE    (DEFINE REQUEST CODE) 
*         DEF  CONWD    (DEFINE CONTROL WORD) 
*         DEF  STAT1    (DEFINE STATUS WORD 1)
*         DEF  STAT2    (DEFINE STATUS WORD 2  -- OPTIONAL) 
*    EXIT --- 
*          .
*          .
*   RCODE DEC  13      STATUS REQUEST CODE = 13 
*   CONWD OCT  NN      LOGICAL UNIT # 
*   STAT1 NOP         WORD 5 OF EQT ENTRY FOR 
*                      DEVICE STORED IN THIS WORD.
*   STAT2 NOP         WORD 4 OF EQT ENTRY FOR 
*                     DEVICE STORED IN THIS WORD
*                     IF PRESENT IN REQUEST.
* 
* 
* IV. GENERAL OPERATION 
* 
*    ALL INPUT/OUTPUT OPERATIONS ARE PERFORMED
*   CONCURRENTLY WITH PROGRAM COMPUTATION IN THE
*    OVERALL SYSTEM. AN I/O OPERATION IS CONSIDERED 
*    TO BE NON-BUFFERED TO THE REQUESTING USER
*   PROGRAM AS THE PROGRAM IS SUSPENDED UNTIL 
*   THE TRANSMISSION OR OPERATION IS COMPLETED. 
*   THE EXCEPTION TO THIS IS IN PROVIDING FOR 
*   AUTOMATIC BUFFERING OF OUTPUT TO USER-
*   DESIGNATED DEVICES. IN THIS CASE, THE USER
*   BUFFER IS MOVED TO SYSTEM AVAILABLE MEMORY
*   AND THE USER PROGRAM IS NOT SUSPENDED.
      SKP 
IOREQ CLA          SET CONTROL FLAG = 0 TO MEAN 
      STA CONFL     *REQUEST* SECTION ENTERED 
      STA TEMPL     AND 'DISC R/W USER REQ' FLAG
* 
      LDA RQCNT    INSURE 
      ADA N1        THAT AT LEAST 1 
      SSA            PARAMETER WAS SUPPLIED.
      JMP ERR01     - NO, ISSUE DIAGNOSTIC. 
* 
* LOGICAL UNIT REFERENCE VALIDITY CHECK 
* 
      LDA RQP2,I   EXTRACT LOGICAL UNIT # FROM
      AND MASK1     PARAMETER 1 
      STA B         (SAVE #)
      STA TEMP1    SAVE LOGICAL UNIT # FOR DISC TEST
      CMA,INA,SZA,RSS CHECK FOR ZERO AND
      JMP ERR02        FOR A
      ADA LUMAX     VALUE GT THE LARGEST
      SSA            DEFINED #. 
      JMP ERR02     - ERROR, EXCEEDS RANGE. 
* 
      ADB N1       INDEX TO 
      ADB DRT       DEVICE-REFERENCE-TABLE
      LDA B,I      GET EQT ASSIGNMENT.
      AND MASK2     MASK OUT SUBCHANNEL 
      SZA,RSS       -ERROR
      JMP ERR03      IF NOT ASSIGNED. 
      JSB CVEQT    CONVERT TO ABSOLUTE EQT ADDRESSES
* 
* REQUEST CODE ANALYSIS 
* 
      LDB RQP1,I   GET REQUEST CODE (PARAMETER 1).
      CPB .3       IF REQUEST IS <CONTROL>, 
      JMP L.02      SKIP FURTHER ANALYSIS.
* 
      CPB .13      TRANSFER IF
      JMP L.15      * STATUS * REQUEST. 
* 
      LDA RQCNT    CHECK # OF 
      ADA  N3       PARAMETERS SUPPLIED 
      SSA            FOR READ OR WRITE. 
      JMP  ERR01    -ERROR, LT 3. 
* 
* BUFFER LEGALITY CHECK FOR INPUT.
* 
      LDA RQP4,I    GET THE LENGTH
      CLE,SSA,RSS    CONVERT TO 
      JMP *+3         WORDS IF
      ARS              CHARACTERS 
      CMA,INA           SET POSITIVE AND
      STA TEMP2          SAVE.
      SPC 1 
      CPB .2       IF WRITE REQUEST,
      JMP L.01      SKIP BUFFER CHECK.
      LDA XEQT      CHECK THE 
      ADA .14        ID 
      LDA A,I         SEGMENT TO
      AND .7           GET AREA 
      ADA N3            OF PROGRAM
      LDB RTORG      SET UP ORGIN FOR THE 
      SSA,RSS        AREA IN
      LDB BKORG        B. 
      SPC 1 
      LDA RQP3      GET THE BUFFER ADDRESS
      CMA            AND CHECK TO SEE IF
      ADA B           BELOW THE PROGRAMS
      CLE,SSA,RSS     AREA. ERROR IF ATTEMPT TO READ
      JMP ERR04      INTO SYSTEM AREA.
* 
      LDB TEMP2     CHECK TO SEE IF EXCEEDING 
      ADB RQP3       LWA MEMORY.
      SEZ          ERROR IF NEGATIVE WRAP-AROUND
      JMP ERR04     WITH OVERFLOW.
      CMB,INB       -IF WRAP-AROUND 
      ADB BKLWA      ERROR, 
      SSB,INB,SZB    ISSUE
      JMP ERR04      ERROR 4 DIAGNOSTIC 
* 
L.01  LDA EQT5,I   CHECK REFERENCED DEVICE
      AND ETYPE     FOR BEING A 
      CPA DISC       DISC FILE
      RSS 
      JMP L.02     NO, UNIT IS NOT DISC.
      STA TEMPL     SET 'DISC R/W USER REQ' FLAG
* 
* DISC ACCESS VALIDITY CHECK. 
* 
      LDA RQCNT    FOR A DISC ACCESS, REQUEST MUST
      CPA  .5       CONTAIN 5 PARAMETERS TO INCLUDE 
      RSS            TRACK/SECTOR ADDR. 
      JMP ERR01     -ERROR-.
* 
      LDA TEMP1 
      CPA .2        IF LU # 2 OR 3, 
      JMP *+4        SET INTO LOW 
      CPA .3         BITS OF 'DISC
      RSS            R/W USER REQ'
      JMP L.10       FLAG.
      IOR TEMPL 
      STA TEMPL 
* 
      LDA RQP5,I   GET TRACK ADDRESS FROM 
      AND MASK2 
      STA TEMP0      REQUEST  -  SAVE.
      LDA TATLG    COMPUTE POSITIVE 
      ADA TATSD     LENGTH OF 
      CMA,INA        AUXILIARY DISC IN *TAT*. 
      LDB TEMP1    IF REFERENCE 
      CPB .2        TO SYSTEM DISC (LU #2), 
      LDA TATSD      USE SYS DISC SIZE. 
      CMA,INA      SUBTRACT MAX SIZE
      ADA TEMP0     FROM USER TRACK #.
      SSA,RSS 
      JMP ERR05     -ERROR, ILLEGAL TRACK #.
* 
      LDA SECT2     (B)= # SECTORS/TRACK FOR LU #2
      CPB .3        IF LU FOR REQUEST = 3,
      LDA SECT3      SET (B) = # SECTORS FOR LU #3
      CMA,INA       SET VALUE NEG.
      LDB RQP6,I   GET SECTOR ADDRESS 
      CLE,SSB        FROM REQUEST. ERROR
      JMP ERR05     NEGATIVE. 
      ADB A          ERROR. 
      CCB,SEZ        IF STARTING SECTOR 
      JMP ERR05      GREATER THAN TRACK SIZE. 
* 
      ADB TEMP2     CHECK FOR TRACK OVERFLOW
      BRS,BRS      DIVIDE BUFFER LENGTH 
      BRS,BRS       (IN WORDS)
      BRS,BRS       BY 64(10) 
      ADB RQP6,I    ADD STARTING SECTOR # 
      ADB A         ERROR IF LAST SECTOR
      SSB,RSS        GT=
      JMP ERR08      LIMIT (EXCEEDS TRACK BOUNDARY) 
* 
      CLA,INA      AN INPUT REQUEST IS ALLOWED TO 
      CPA RQP1,I    REFERENCE ANY 
      JMP L.10       TRACK. 
* 
      LDB TEMP0    (B) = TRACK #. 
      LDA .3       IF REFERENCE TO 'AUXILIARY'
      CPA TEMP1     DISC (LU #3), ADD 
      ADB TATSD       SYS DISC SIZE TO TRACK #. 
      ADB TAT      INDEX TO TRACK ASSIGNMENT TABLE. 
      LDA B,I      GET REFERENCED TRACK ASSIGNMENT. 
      CPA XEQT      (ID SEGMENT ADDRESS). IF SAME AS
      JMP L.10      REQUESTOR, ALLOW ACCESS.
      CPA M7777     ALLOW ACCESS IF TRACK IS
      JMP L.10       GLOBALLY ASSIGNED. 
      INA           IF FMP TRACK THEN 
      CPA M7777     GO CHECK
      JMP L.012     FOR LEGAL CALL. 
* 
* CHECK FOR LOAD-AND-GO ACCESS
* 
      LDA TEMP0     CONSTRUCT 
      LSL 7         A WORD WITH USER LU # 
      IOR RQP6,I     IN BIT 15, 
      LDB TEMP1      TRACK # IN 14-07,
      CPB .3         AND SECTOR # IN 06-00. 
      IOR MSIGN 
      CPA LGOC      IF NOT = TO CURRENT LGO 
      RSS            ADDRESS, THEN
      JMP L.011      GO TO CHECK FOR "LOADR". 
* 
* UPDATE FOR NEXT LGO ACCESS - THIS ACCESS ALLOWED
* 
      AND MASK0     ISOLATE SECTOR #, 
      INA            ADD 1 AND
      STA TEMP2      SAVE.
      CLA           INSURE THAT A 
      CPA LGOTK      LGO AREA IS ASSIGNED.
      JMP L.011     -NO, CHECK LOADR. 
      LDA SECT2     SET (A) TO APPROPRIATE
      CPB .3         # SECTORS
      LDA SECT3      PER TRACK FOR LU #.
      CPA TEMP2     IF NEW SECTOR EXCEEDS TRACK,
      RSS            GO TO UPDATE TRACK #.
      JMP L.010     -NO OVERFLOW. 
      CLA           SET SECTOR #
      STA TEMP2      = 0. 
      ISZ TEMP0     ADD 1 TO TRACK #. 
      LDA LGOTK     GET LGO TRACK ASSIGNMENT WORD.
      AND MASK0     -ADD #
      STA B          OF TRACKS
      LDA LGOTK      ASSIGNED 
      ALF,ALF        TO STARTING
      RAL            TRACK
      AND MASK2      # AND
      ADA B          CHECK
      CPA TEMP0      FOR OVERFLOW.
      JMP ERR09     ---YES, '09' ERROR AND ABORT. 
* 
L.010 LDB TEMP1     (B) = LU #. 
      LDA TEMP0     RECONSTRUCT 
      ALF,RAL        THE CURRENT
      RAL,RAL        LGO AREA 
      IOR TEMP2      DISC 
      SLB            ADDRESS
      IOR MSIGN      AND
      STA LGOC       RESET. 
      JMP L.10
      SPC 1 
ETYPE OCT 37000 
DISC  OCT 14000 
      SPC 1 
.12   DEC 12
.13   DEC 13
.14   DEC 14
N3    DEC -3
      SKP 
* ALLOW PRIVILEGED ACCESS TO "LOADR" TO PERMIT
*  UPDATING OF ID SEGMENTS AND PROGRAMS ON THE
*  SYSTEM AREA OF THE DISC. 
* 
L.011 LDB XEQT      COMPARE 
      ADB .12        NAME 
      LDA B,I        3
      CPA LDRNM      WORD 
      INB,RSS        AREA 
      JMP ERR06      IN 
      LDA B,I        CURRENT
      CPA LDRNM+1    ID 
      INB,RSS        SEGMENT
      JMP ERR06      WITH 
      LDA B,I        'LOADR'
      AND M7400     -IF 
      CPA LDRNM+2    SO,
      JMP L.10       ALLOW FULL ACCESS
      JMP ERR06     - ERROR - 
* 
LDRNM ASC 2,LOAD    L O A D 
      OCT 51000      R  -ZERO-
      SPC 1 
MASK0 OCT 177 
B7400 OCT 74000 
      SPC 2 
L.012 LDA RQP2,I    FMP TRACK 
      SLA           IF READ 
      JMP L.10      ALLOW ACCESS
      AND B7400     IF FLAG SET 
      CPA B7400     THEN ALLOW
      JMP L.10      ACCESS. 
      JMP ERR06     ELSE ILLEGAL DISC WRITE.
      SKP 
* 
* CHECK FOR AUTOMATIC BUFFERING REQUIREMENT 
* 
L.02  LDB RQP1,I   SKIP CHECK 
      CPB .1        IF REQUEST
      JMP L.10       IS INPUT.
      LDA EQT4,I   CHECK THE UNIT DESCRIPTOR
      RAL           WORD IN ITS EQT ENTRY,BIT 14, 
      SSA,RSS        FOR BUFFERING. 
      JMP L.10      -NO 
* 
* AUTOMATIC BUFFERING SECTION 
* 
      CLA 
      CPB .3       IF REQUEST IS FOR -CONTROL-, 
      JMP L.03      SKIP BUFFER SIZE CHECK. 
      LDA TEMP2     GET THE XFER LENGTH 
      CMA,INA        SET NEG AND
      STA TEMP3     -SET AS MOVE INDEX- 
      CMA,INA      (SET POSITIVE) 
L.03  ADA .5       ADD 5 FOR BLOCK CONTROL WORDS. 
      STA L.04     SET TOTAL LENGTH FOR ALLOCATION. 
      ADA .2       CHECK FOR BUFFER 
      CMA,INA       SIZE TO BE GREATER
      LDB AVMEM     THAN MAXIMUM
      CMB,INB       AMOUNT
      ADB BKORG     OF SYSTEM 
      ADA B         AVAILABLE MEMORY. 
      SSA          IF YES, THEN ABORT 
      JMP ERR04     PROGRAM.
* 
* ALLOCATE BLOCK IN TEMPORARY STORAGE 
* 
      JSB .ALC.    CALL AT SYSTEM ENTRY POINT 
L.04  NOP           - REQUESTED LENGTH OF BLOCK - 
* 
      SZA          IF BLOCK AVAILABLE, (A) CONTAINS 
      JMP L.06      STARTING ADDRESS. 
* 
* NO MEMORY AVAILABLE FOR BLOCK - CALLING USER
*  PROGRAM IS TO BE LINKED INTO MEMORY SUSPENSION 
*  LIST AND RE-SCHEDULED AT POINT OF REQUEST
*  WHEN A PREVIOUSLY ALLOCATED BLOCK IS RELEASED. 
* 
      LDA XEQT     SET PROGRAM ID SEGMENT ADDRESS 
      STA L.05      IN CALL TO LINK 
      JSB LIST     CALL TO LINK PROGRAM INTO
      OCT 104       MEMORY SUSPENSION LIST. 
L.05  NOP 
      JMP XEQ 
      SKP 
*  SET REQUEST PARAMETERS, PROGRAM PRIORITY AND 
*   USER BUFFER INTO TEMPORARY BLOCK. 
* 
L.06  STB L.05     SET ACTUAL BLOCK LENGTH. 
      STA TEMP1    SAVE BLOCK 
      STA B         LOCATION
      INB 
      STB TEMPW      SAVE ADDRESS 
      JSB WORD2     ASSEMBLE CONTROL WORD 
      IOR MASK5    SET <T> = 1 FOR BUFFERING. 
      LDB TEMPW 
      STA B,I       AND SET IN WORD 2 OF BLOCK. 
      INB 
      LDA XPRIO,I  SET REQUESTING PROGRAM PRIORITY
      STA B,I       IN WORD 3.
      STA TEMP2    SAVE PRIORITY FOR LINKING. 
      INB 
      LDA L.05     SET BLOCK LENGTH IN
      STA B,I       WORD 4. 
      INB 
      LDA .3       IF REQUEST 
      CPA RQP1,I    IS -CONTROL-, SKIP
      JMP  L.08     BUFFER MOVE 
      LDA RQP4,I   SET USER BUFFER LENGTH 
      STA B,I       IN WORD 5.
      SZA,RSS      IF LENGTH = 0, 
      JMP L.13      SKIP BUFFER MOVE. 
* 
* MOVE USER BUFFER TO TEMPORARY BLOCK.
* 
      INB 
      LDA RQP3     SET USER BUFFER
      STA TEMP4     ADDRESS FOR MOVE. 
L.07  LDA TEMP4,I  PERFORM
      STA B,I       BUFFER MOVE 
      ISZ TEMP4     ((B) = BLOCK ADDRESS, 
      INB            (TEMP4) = BUFFER ADDRESS,
      ISZ TEMP3      (TEMP3) = BUFFER LENGTH INDEX) 
      JMP  L.07 
      JMP L.13     GO TO EXIT SECTION.
* 
L.08  LDA  RQP3,I  FOR CONTROL REQUEST, SET WORD 3
      STA  B,I      (PARAM) IN PLACE OF RECORD
      JMP  L.13      LENGTH.
* 
* REQUEST IS A NORMAL WRITE, CONTROL OR READ. 
*  THE PARAMETERS OF THE REQUEST ARE MOVED
*  INTO THE ID SEGMENT OF THE REQUESTING
*  PROGRAM. THE ID SEGMENT IS THEN LINKED 
*  INTO THE I/O LIST FOR THE REFERENCED DEVICE. 
*  THE -SCHEDULER- IS THEN CALLED TO REMOVE 
*  THE PROGRAM FROM THE SCHEDULED LIST AND TO 
*  CHANGE THE PROGRAM STATUS TO I/O SUSPENSION. 
* 
L.10  JSB WORD2     ASSEMBLE CONTROL WORD 
      STA XTEMP,I    SAVE IN TEMPORARY #1.
      LDB RQP1,I   (B) = REQUEST CODE.
      LDA RQP3     SET BUFFER ADDRESS 
      CPB .3        OR CONTROL
      LDA RQP3,I    PARAMETER 
      STA XTEMP+1,I  WORD,
      LDA RQP4,I     BUFFER 
      STA XTEMP+2,I   LENGTH AND
      LDA RQP5,I     ADDITIONAL PARAMETERS IF 
      STA XTEMP+3,I   PROVIDED, 
      LDA RQP6,I       E.G., DISC 
      STA XTEMP+4,I     TRACK/SECTOR ADDRESSES. 
* 
      LDA XPRIO,I   SET PRIORITY OF REQUESTING
      STA TEMP2      PROGRAM IN TEMP2.
      LDA XLINK     SET ADDRESS OF LINK WORD
      STA TEMP1      IN TEMP1.
      STA L.11
* 
      JSB LIST      CALL SCHEDULER TO SUSPEND PROG. 
      OCT 102       - ID SEG. ADDR./I/O SUSPEND - 
L.11  NOP           - ADDRESS OF ID SEGMENT.
* 
* CALL -LINK- TO PERFORM THE LINKING OF THE NEW 
*             BLOCK INTO THE DEVICE QUEUE OF
*             WAITING OPERATIONS. 
* 
L.13  JSB LINK
* 
      SZA,RSS       IF QUE WAS EMPTY CALL DRIVR.
* 
* EMPTY LIST, CALL TO INITIATE CURRENT REQUEST. 
* 
      JSB DRIVR 
      JMP L.14      - OPERATION INITIATED - 
      LDA RQRTN 
      STA XSUSP,I 
      JMP NOTRD 
* 
L.14  LDA RQRTN    SET REQUEST -EXIT- ADDRESS 
      STA XSUSP,I   AS POINT OF SUSPENSION. 
      JMP XEQ      TRANSFER TO EXECUTE SECTION. 
* 
*  STATUS REQUEST SECTION 
* 
L.15  LDA RQCNT     INSURE THAT AT LEAST 2
      ADA N2         PARAMETERS PROVIDED - ONE
      SSA            TO STORE STATUS WORD.
      JMP ERR01     -NO, ERROR '01'.
* 
      LDB EQT5,I    STORE WORD 5 OF EQT ENTRY IN
      STB RQP3,I     'STAT1'
      LDB EQT4,I    STORE WORD 4 OF EQT ENTRY IN
      CPA .1         'STAT2' IF PARAMETER 3 IS
      STB RQP4,I      PRESENT.
      JMP L.14     GO TO RETURN TO XEQ. 
      SKP 
* 
*  ASSEMBLE CONTROL WORD
* 
WORD2 NOP 
      LDA RQP2,I    COMBINE REQUEST CODE WITH 
      AND MASK3      CONTROL INFORMATION
      IOR RQP1,I     IN PARAMETER TWO AND 
      STA B          TEMPORARILY STORE IT-
      LDA RQP2,I    EXTRACT LOGICAL UNIT #
      AND MASK1      FROM PARAMETER TWO 
      ADA N1        INDEX TO ENTRY IN 
      ADA DRT        DEVICE REFERENCE TABLE 
      LDA A,I       GET SUBCHANNEL
      AND MASK9      ASSIGNMENT AND COMBINE 
      IOR B          IT WITH CONTROL WORD 
      LDB TEMPL     IF NOT DISC 
      SZB,RSS        REQUEST, 
      JMP WORD2,I    EXIT - 
      SPC 1 
      AND MASKD     OTHERWISE,
      SWP            SET BITS (9,8) 
      AND .3         TO INDICATE
      ALF,ALF        SYSTEM, AUXILIARY, 
      IOR B          OR PERIPHERAL TYPE 
      JMP WORD2,I   EXIT -
      SPC 1 
MASK3 OCT 3700
MASKD OCT 176377
      SKP 
*  SUBROUTINE:  -LINK-
* 
* PURPOSE: THIS ROUTINE PROVIDES FOR ADDING 
*         AN I/O REQUEST INTO THE SUSPENDED 
*         LIST (QUEUE) CORRESPONDING TO THE 
*         REFERENCED DEVICE. THE PROCEDURE
*         OF ADDING AN ENTRY INTO THE LIST
*         INVOLVES ONLY THE ALTERATION OF 
*         THE LINKAGE VALUE IN THE NEW ENTRY
*         AND IN THE ENTRY PRECEDING THE
*         NEW ONE IN THE PRIORITY CHAIN.
*         THE NEW ENTRY IS LINKED ACCORDING 
*         TO ITS PRIORITY AND ON A FIFO 
*         BASIS WITHIN THE SAME PRIORITY
*         LEVEL. THE END OF A LIST IS MARKED
*         BY A LINKAGE VALUE OF ZERO. THE 
*         FIRST ENTRY IN A LIST IS SKIPPED
*         BECAUSE IT IS ASSUMED TO BE THE 
*         REQUESTOR FOR THE CURRENT I/O 
*         OPERATION. IF THE LIST IS EMPTY,
*         THE LINK WORD IN THE EQT ENTRY
*         IS SET TO POINT TO THE NEW ENTRY
*         AND AN INDICATION IS GIVEN TO 
*         THE CALLER OF -LINK- THAT THE 
*         NEW REQUEST MAY BE INITIATED. 
* 
* CALL:   THE FOLLOWING LOCATIONS MUST BE 
*          SET TO THE INDICATED VALUES
*          BEFORE THE CALL IS MADE: 
* 
*          TEMP1 = LOCATION OF NEW REQUEST
*                  TO BE LINKED INTO THE
*                  I/O LIST DEFINED BY THE
*                  CURRENT EQT ENTRY. THE 
*                  ADDRESS OF THE LINKAGE 
*                  WORD IN THE EQT ENTRY
*                  IS IN -EQT1-.
* 
*          TEMP2 = PRIORITY OF THE NEW
*                  REQUEST. 
* 
*          TEMPL = DISC QUE FLAG (# 0 MEANS DISC) 
* 
*         -  JSB  LINK
*         -  (RETURN)  (A) = 0 IF THE NEW 
*                 REQUEST IS THE ONLY ENTRY 
*                 IN THE I/O LIST, I.E. THE 
*                 DRIVER MAY BE CALLED TO 
*                 INITIATE THE NEW OPERATION. 
* 
*            THERE ARE NO ERROR CONDITIONS
*             DETECTED OR DIAGNOSED BY THIS 
*             ROUTINE.
* 
* 
      SKP 
LINK  NOP 
      LDB EQT1,I   IF THE I/O LIST IS NULL, 
      SZB,RSS       EQT LIST POINTER = 0, 
      JMP LINK4      SKIP TO ADD NEW REQUEST. 
* 
* FIRST ENTRY IN LIST IS SKIPPED BECAUSE IT 
*  IS THE CALLER FOR THE CURRENT OPERATION
*  ACTIVE ON THE I/O DEVICE.
* 
      JMP LINK7     GO START THE SCAN 
* 
LINK1 STB TEMP3    TEMP3 = ADDRESS OF CURRENT ENTRY.
      INB          EXAMINE THE
      LDA B,I       TYPE FIELD IN WORD 2 OF BLOCK 
      INB           TO DETERMINE LOCATION 
      RAL,SLA        OF PRIORITY. 
      JMP LINK5     IF A SYSTEM ENTRY CHECK FOR DISC
      SSA,RSS      IF NORMAL USER REQUEST, PRIORITY 
      ADB .4        IS IN WORD 7 OF ID SEGMENT. 
LINK8 LDA B,I      GET PRIORITY OF CURRENT ENTRY. 
LINK2 LDB TEMP3 
      CMA,INA      SUBTRACT CURRENT PRIORITY FROM 
      ADA TEMP2     PRIORITY OF NEW REQUEST.
      SSA          IF CURRENT IS LOWER PRIORITY 
      JMP LINK3     (HIGHER #), GO TO LINK NEW. 
LINK7 STB TEMP5     SAVE PREVIOUS ENTRY POINTER 
      LDB B,I        GET NEXT ENTRY 
      SZB          IF END-OF-LIST, SKIP.
      JMP LINK1    -CONTINUE SCAN.
* 
* PROPER POSITION (BY PRIORITY) IS FOUND IN LIST, 
*  OR ELSE THE SCAN OF THE LIST IS FINISHED AND 
*  THE NEW REQUEST IS ADDED AS THE LAST ENTRY.
* 
LINK3 LDA TEMP1    SET ADDRESS OF NEW ENTRY IN
      STA TEMP5,I   LINKAGE VALUE OF PREVIOUS ENTRY.
LINK6 STB TEMP1,I  SET ADDRESS OF NEXT OR 0 IF LAST 
      JMP LINK,I    IN NEW - EXIT TO CALLER.
* 
* NULL LIST- REQUEST IS MADE FIRST IN LIST AND FLAG FOR SET FOR CALLER. 
* 
LINK4 LDA TEMP1    SET ADDRESS OF NEW IN LIST POINT-
      STA EQT1,I    ER IN EQT ENTRY.
      CLA          SET NEXT LINK ADDR. IN NEW = 0.
      JMP LINK6     GO FINISH LINK AND EXIT 
      SPC 1 
* A SYSTEM REQUEST HAS BEEN FOUND IN THE QUE
* SYSTEM DISC REQUESTS ARE QUED BY THE PRIORITY IN
* WORD 7 OF THE CALL.   OTHER SYSTEM REQUEST ARE AT 
* PRIORITY ZERO.
      SPC 1 
LINK5 LDA TEMPL      GET DISC FLAG
      SZA,RSS        IF NOT A DISC REQUEST
      JMP LINK2     GO BACK WITH PRIORITY ZERO
      INB            STEP B TO WORD 7 OF XSIO CALL
      JMP LINK8      GO BACK TO PICK UP THE PRIORITY
      SKP 
* SUBROUTINE:  -DRIVR-
* 
*  PURPOSE: THIS ROUTINE PROVIDES A CENTRAL POINT 
*            FOR CALLING AN I/O DRIVER TO INITIATE
*            A NEW OPERATION. THIS ROUTINE, BEFORE
*            CALLING A DRIVER, SETS THE REQUEST 
*            PARAMETERS INTO THE APPROPRIATE WORDS
*            IN THE EQT ENTRY CORRESPONDING TO THE
*            REFERENCED DEVICE AND ASSIGNS A DMA
*            CHANNEL IF REQUIRED. 
*            IT ALSO SETS THE DEVICE TIME-OUT CLOCK.
* 
*  REQUIREMENTS: THE ADDRESSES OF THE EQUIPMENT 
*            TABLE ENTRY (15 WORDS) MUST BE SET 
*            IN EQT1 TO EQT15 BEFORE THE ROUTINE
*            IS CALLED. 
* 
*  CALLING SEQUENCE:   - PARAMETER SET UP AS ABOVE- 
*                      - (REGISTERS  MEANINGLESS) - 
* 
*                   (R)   JSB DRIVR 
*                   (P+1) -OPERATION INITIATED OR STACKED 
*                   (P+2) -OPERATION REJECTED OR COMPLETED- 
* 
*  ERRORS/DIAGNOSTICS: A DRIVER IS CALLED ONLY
*                      IF THE UNIT IS AVAILABLE 
*                      AND NOT BUSY; OTHERWISE, 
*                      RETURN IS MADE TO THE
*                      CALLER.  IF THE DRIVER 
*                      FINDS THE UNIT UNAVAILABLE 
*                      OR THE REQUEST ILLEGAL FOR 
*                      THE UNIT, THE INDICATION IS
*                      RETURNED TO THE CALLER FOR 
*                      FURTHER ACTION.
* 
DRIVR NOP 
      LDA EQT5,I   CHECK AVAILABILITY 
      RAL,RAL       OF
      AND .3         DEVICE.
      STA TEMP6    SAVE AVAILABILITY STATUS.
      CPA .1       IF DOWN OR NOT READY 
      JMP DRIVR,I   EXIT IMMEDIATELY. 
      CPA .2       IF CURRENTLY BUSY, 
      JMP DRIVR,I   ALSO EXIT.
* 
* DEVICE IS AVAILABLE - CHECK FOR DMA REQUIREMENT 
* 
      CPA .3         IF IN DMA QUE
      JMP DVR00       GO ATTEMPT ASSIGNMENT 
      LDA EQT4,I   SKIP DMA CHANNEL ASSIGNMENT IF 
      SSA,RSS       NOT REQUIRED ( D FIELD = 0 )
      JMP DRV02     IN WORD 4 OF EQT ENTRY. 
      SPC 1 
*                     LDB EQT1,I   SKIP DMA CHANNEL ASSIGNMENT IF 
*                     INB           CONTROL REQUEST (CODE = 3)
*                     LDA B,I 
*                     AND .3
*                     CPA .3
*                     JMP DRV02+2 
* 
* DMA CHANNEL REQUIRED - ATTEMPT TO ASSIGN CHANNEL
* 
DVR0  LDA DMACF      IF DMA QUE IS NOT EMPTY
      SZA 
      JMP DVR1       THEN JUST ADD THIS EQT TO QUE. 
* 
DVR00 LDA .6       INITIALIZE FOR 
      STA  CHAN     CHANNEL 6 (DMA # 1 )
      LDB INTBA    ADDR. OF DMA 1 IN INTERRUPT TABLE
      CLA          IF DMA CHANNEL # 1 
      CPA B,I       AVAILABLE   (INTBL ENTRY = 0),
      JMP DRV01    GO TO ASSIGN IT TO THIS UNIT.
      INB          SET FOR CHANNEL 7, 
      ISZ  CHAN     DMA CHANNEL # 2.
      CPA B,I      IF THIS CHANNEL AVAILABLE, 
      JMP DRV01     GO TO ASSIGN IT.
* 
* NO CHANNEL AVAILABLE - SET FLAGS AND RETURN 
* 
DVR1  LDA EQT5,I   IF DEVICE
      SSA           IS ALREADY WAITING FOR DMA, 
      JMP DRIVR,I   EXIT. 
      IOR MASK4    SET AVAIL TO SAY WAITING FOR 
      STA EQT5,I    DMA, ADD 1 TO 
      ISZ DMACF     # DEVICES WAITING.
      JMP DRIVR,I   - EXIT TO CALLER -
* 
* ASSIGN AVAILABLE CHANNEL
* 
DRV01 LDA EQT1     SET EQT ENTRY ADDRESS IN INTER-
      STA B,I       RUPT TABLE ENTRY FOR CHANNEL. 
      LDB DMACF    IF UNIT WAS
      LDA TEMP6     PREVIOUS WAITING
      CPA .3        FOR A DMA 
      ADB N1        CHANNEL, SUBTRACT 1 FROM # OF 
      STB DMACF     UNITS WAITING.
      LDA EQT5,I   CLEAR
      AND MASK6     <AVAIL> 
      STA EQT5,I     FIELD. 
* 
* TRANSFER REQUEST PARAMETERS TO EQT ENTRY
* 
DRV02 LDB EQT1,I   GET CURRENT REQUEST ADDRESS
      INB           FROM LINK WORD OF EQT ENTRY.
      LDA B,I      GET REQUEST CONTROL WORD,
      AND MASKS     SET SUBCHANNEL BITS TO ZERO 
      STA EQT6,I    SET IN EQT 6. 
      XOR B,I       SET SUBCHANNEL
      ALF,ALF        NUMBER INTO
      ALF,RAR        BITS 8-6 
      STA TEMPL      OF EQT4
      LDA B,I 
      RAL          IF REQUEST IS
      SSA           HELD AS A TEMPORARY BLOCK FOR 
      JMP DRV03      BUFFERING, JUMP. 
      INB 
      LDA B,I      SET BUFFER 
      STA EQT7,I     ADDRESS. 
      INB 
      LDA B,I      SET BUFFER 
      STA EQT8,I     LENGTH.
      INB 
      DLD B,I       SET ADDITIONAL 2
      DST EQT9,I     PARAMETERS IF SUPPLIED.
      JMP DRV05 
* 
DRV03 ADB .3        * TEMPORARY BLOCK * 
      RAR,SLA       CHECK REQUEST CODE. 
      RSS           - CONTROL REQUEST - 
      JMP DRV04     - WRITE   REQUEST - 
      LDB B,I       SET CONTROL PARAMETER 
      JMP DVR4       IN THE EQT 
DRV04 LDA B,I      GET BUFFER LENGTH
      STA EQT8,I     OF THE BLOCK.
      INB          ADDRESS OF WORD 6 IS 
DVR4  STB EQT7,I    THE BUFFER ADDRESS. 
      CLA          CLEAR
      STA EQT9,I    WORDS 9 AND 10 OF 
      STA EQT10,I    EQT ENTRY. 
* 
* CALL DRIVER -INITIATION- SECTION
* 
DRV05 LDA EQT14,I   SET DEVICE
      LDB EQT15,I   TIME OUT IF NOT STILL ACTIVE
      SZB,RSS       ELSE SKIP RESETING IT 
      STA EQT15,I 
      LDA EQT4,I    ZERO TIME-OUT 
      AND MASK7      BIT AND SET
      IOR TEMPL      IN SUBCHANNEL
      STA EQT4,I    SET (A) = CHANNEL 
      AND MASK1     # OF I/O DEVICE.
      LDB EQT2,I   CALL DRIVER *INITIATION* 
      JSB B,I        SECTION. 
      SKP 
* DRIVER RETURNS AN INDICATION OF THE ACCEPTANCE
*  OR REJECTION OF THE REQUESTED OPERATION: 
*   (A) = 0, OPERATION SUCCESSFULLY INITIATED 
*   (A) NOT = 0, OPERATION REJECTED AND (A) 
*                CONTAINS A NUMERIC CODE
*                IDENTIFYING THE CAUSE OF 
*                THE REJECT.
* 
*        = 1    READ OR WRITE REQUEST ILLEGAL FOR DEVICE
*        = 2    CONTROL REQUEST ILLEGAL OR NOT DEFINED
*        = 3    EQUIPMENT MALFUNCTION OR NOT READY
*        = 4    IMMEDIATE COMPLETION OF OPERATION 
*        = 5    DRIVER REQUIRES DMA BUT FLAG IS NOT SET IN EQT
* 
      STA TEMP6    SAVE DRIVER CODE.
      SZA          IF REJECTED, 
      JMP DRV06     EXAMINE REASON
* 
* OPERATION INITIATED 
* 
      LDA EQT5,I   SET
      IOR MSIGN     <AVAIL> = 2 TO SAY DEVICE 
      STA EQT5,I     IN OPERATION.
      JMP DRIVR,I   EXIT. 
* 
*  OPERATION REJECTED 
* 
DRV06 STB TEMPW     SAVE (B)
      CLA           CLEAR DEVICE
      STA EQT15,I    TIME-OUT CLOCK 
      JSB CLDMA     CLEAR DMA IF ALLOCATED
      LDA TEMP6    (A) = REJECT CODE. 
      CPA .5        IF DMA REQUIRED 
      JMP DVR0       GO ATTEMPT ASSIGNMENT
      ISZ DRIVR    SET RETURN TO (P+2). 
      CPA .3        IF NOT READY THEN 
      JMP DRIVR,I   -EXIT.
      JMP ILLCD     ELSE GO TO SEND THE MESSAGE 
      SPC 1 
MASK7 OCT 173077
MASK9 OCT 34000 
MASKS OCT 143777
      HED < RTIOC SUBSECTION - SYS RQ PROCESSOR > A-29016-90003-1 
* SYSTEM I/O REQUEST PROCESSOR  - XSIO -
* 
*  A PRIVATE ENTRY IS PROVIDED AT ENTRY POINT 
* < XSIO > TO ALLOW MODULES OF THE REAL TIME
* EXECUTIVE TO CALL FOR I/O OPERATIONS WITHOUT
* INCURRING THE OVERHEAD AND PROCEDURES 
* INVOLVED WITH USER I/O REQUESTS. NO ERROR 
* CHECKING IS PERFORMED, THE REQUEST IS LINKED
* INTO THE APPROPRIATE I/O LIST AT A PRIORITY 
* LEVEL OF ZERO (HIGHEST PRIORITY), AND CONTROL 
* IS RETURNED TO THE FIRST WORD FOLLOWING THE 
* REQUEST CALL. 
* REQUEST FORMAT: A SYSTEM I/O REQUEST DIFFERS
*                 FROM THE USER I/O REQUEST IN
*                 FORMAT AND POWER. SPECIFICALLY, 
*                 A SYSTEM DISC CALL CAN SPECIFY A
*                 SERIES OF TRANSFERS TO BE 
*                 PERFORMED BEFORE THE NEXT 
*                 OPERATION IS INITIATED. A 
*                 COMPLETION ADDRESS CAN BE 
*                 SPECIFIED FOR OPERATION OF
*                 AN OPEN SUBROUTINE AT THE 
*                 END OF THE OPERATION. THIS
*                 FACILITY IS ONLY AVAILABLE
*                 TO SYSTEM ROUTINES AND IS 
*                 USED TO RESET FLAGS, ETC. 
*                 BECAUSE AN OPERATION IS 
*                 ALWAYS BUFFERED TO THE
*                 SYSTEM. A ZERO COMPLETION 
*                 ADDRESS INDICATES ABSENCE 
*                 OF A COMPLETION ROUTINE.
*      WORD 
*      ----   EXT   XSIO
*        1    JSB   XSIO
*        2    OCT   <LOGICAL UNIT #>
*        3    DEF   <COMPLETION ROUTINE ADDRESS>
*        4    NOP   <LIST POINTER WORD SET BY SYSTEM> 
*        5    OCT   <CONTROL INFO, REQUEST CODE>
*        6    DEF   <BUFFER ADDRESS OR DISC CONTROL WORDS>
*        7    DEC   <BUFFER LENGTH> OR <PRIORITY IF DISC REQUEST> 
* 
*       DISC VERSION OF REQUEST:
*         WORD 6 OF REQUEST POINTS TO AN ARRAY
*        CONTAINING -N- SETS OF TRIPLETS
*        DECLARING BUFFER ADDRESS, LENGTH AND 
*        TRACK/SECTOR ADDRESS FOR EACH TRANSFER.
*        THE SET OF TRIPLETS IS OPEN-ENDED AND
*        TERMINATED BY A ZERO WORD: 
* 
*        1    DEF   < BUFFER ADDRESS> 
*        2    DEC   < BUFFER LENGTH > 
*        3    OCT   < TRACK/SECTOR #> 
*        .    ETC 
*        .     .
*        N    DEC   0    (END OF TRIPLETS)
*        FOR DISC REQUEST THE 7'TH WORD IS THE REQUEST PRIORITY.
* 
* 
XSIO  NOP 
      LDB XSIO,I   GET LOGICAL UNIT #.
      ADB N1       SUBTRACT 1 AND INDEX TO
      ADB DRT       DEVICE REFERENCE TABLE. 
      LDA B,I       GET ASSIGNED EQT ENTRY #. 
      AND MASK9     MASK OUT SUBCHANNEL 
      STA TEMPL       AND SAVE IT 
      XOR B,I        EQT # INTO A 
      JSB CVEQT    CONVERT TO ABSOLUTE EQT ADDRESSES
* 
      LDB XSIO      SET ADDRESS 
      ADB .2        OF LIST POINTER WORD IN 
      STB TEMP1     REQUEST FOR <LINK>. 
* 
      CCE,INB      SET
      LDA B,I       <T> FIELD (BITS 15-14) OF 
      AND MASKS 
      IOR TEMPL       WORD 5 = 2 FOR SYSTEM REQUEST 
      ELA,RAR         AND SET IN SUBCHANNEL NUMBER
      STA B,I        IDENTIFICATION.
      CLA           SET PRIORITY OF REQUEST = 0 
      STA TEMP2      FOR <LINK>,
      STA CONFL      SET CONTROL FLAG = 0 (REQUEST).
      STA TEMPL      SET DISC FLAG TO ZERO (NON-DISC) 
      LDA EQT5,I     GET THE DRIVER TYPE
      AND ETYPE      MASK TO TEST FOR DISC
      ADB .3        SET B TO THE RETURN ADDRESS 
      STB XSIO       AND SAVE IT
      ADB N1         SET B TO DISC PRIORITY WORD
      LDB B,I        GET PRIORITY WORD
      CPA DISC      IF DISC 
      STB TEMP2      SET PRIORITY 
      CPA DISC       AND
      STA TEMPL      THE DISC FLAG FOR <LINK> 
      JSB LINK     CALL TO LINK REQUEST IN I/O LIST.
* 
      SZA,RSS        IF DEVICE NOT BUSY 
* 
      JSB DRIVR    CALL DRIVER TO INITIATE OPERATION
      JMP XSIO,I      -GOOD REQUEST,EXIT
* 
      LDB XSIO      BAD NEWS SO TRANSFER THE
      STB XSIOE     RETURN ADDRESS FOR NR ROUTINE 
* 
      JMP NOTRD     PRINT DIAGNOSTIC. 
      SPC 1 
XSIOE NOP 
      HED < RTIOC - COMPLETION SUBSECTION >       A-29016-90003-1 
* 
* I/O COMPLETION SUBSECTION 
* 
*  THIS SECTION IS RESPONSIBLE FOR THE INITIATION 
*   OF STACKED I/O OPERATIONS, PLACING A USER 
*   PROGRAM BACK IN A SCHEDULED STATE WHEN ITS
*   I/O OPERATION IS COMPLETED, DYNAMIC ALLOCATION
*   OF THE TWO DMA CHANNELS AMONG SYNCHRONOUS 
*   DEVICES, AND CALLING FOR OPERATOR NOTIFICATION
*   OF EQUIPMENT MALFUNCTION. 
* 
*  <IOCOM> IS ENTERED DIRECTLY FROM INTERRUPT CONTROL 
*   WHEN AN I/O OPERATION IS TERMINATED AND ALL 
*   ERROR RECOVERY PROCEDURES HAVE BEEN ATTEMPTED.
*   ON ENTRY TO THIS SECTION, (B) CONTAINS THE
*   NUMBER OF WORDS TRANSFERRED. THE ADDRESSES OF 
*   THE EQUIPMENT TABLE ENTRY ARE SET IN -EQT1- TO
*   - EQT 15-.
* 
*  REQUESTS ARE STACKED IN LISTS FOR EACH DEVICE
*   ACCORDING TO PRIORITY. THE REQUESTS ARE EITHER
*   USER (NORMAL), USER (AUTOMATIC OUTPUT BUFFERING)
*   OR SYSTEM - IDENTIFICATION OF REQUEST TYPE
*   THE CODE IN BITS 15-14 OF THE <CONTROL WORD>
*   IN EACH REQUEST CALL. THE FORMATS OF THE THREE
*   TYPES OF REQUESTS AS THEY APPEAR IN THE I/O 
*   LISTS ARE:
* 
*     1)  USER (NORMAL OPERATION) 
* 
*        THE PARAMETERS FROM THE REQUEST ARE STORED 
*       IN THE TEMPORARY AREA OF THE PROGRAM ID 
*       SEGMENT. THE LINK WORD OF THE SEGMENT IS
*       USED TO LINK INTO THE I/O LIST. 
* 
*        WORD         CONTENTS
*        ----         --------
*         1   < LINKAGE WORD           >
*         2   <T, CONTROL INFO, CODE   >
*         3   <BUFFER ADDRESS          >
*         4   <BUFFER LENGTH           >
*         5   <DISC TRACK ADDR OR ZERO >
*         6   <DISC SECTOR ADDR OR ZERO>
*         7   <PROGRAM PRIORITY        >
*         .   -REMAINDER OF ID SEGMENT .
* 
* 
      SKP 
*     2)  USER (AUTOMATIC OUTPUT BUFFERING) 
* 
*        REQUESTS OF THIS TYPE ARE CONSTRUCTED
*       IN THE SECTION OF SYSTEM AVAILABLE MEMORY.
* 
*        WORD         CONTENTS
*        ----         --------
*         1   < LINKAGE WORD           >
*         2   <T, CONTROL INFO, CODE   >
*         3   <PRIORITY OF REQUESTOR   >
*         4   <TOTAL BLOCK LENGTH WORDS>
*         5   <USER BUFFER LENGTH      >
*         6   <WORD 1 OF USER BUFFER   >
*         .      .       .        . 
*         .      .       .        . 
*         N+5 <WORD N OF USER BUFFER   >
* 
* 
*     3)  SYSTEM REQUEST
* 
*        THE SYSTEM REQUEST IS LINKED INTO
*       THE I/O LIST BY USING WORD 4 OF THE 
*       CALL AS A LINK WORD. A SYSTEM 
*       REQUEST ASSUMES THE PRIORITY LEVEL
*       OF ZERO (HIGHEST PRIORITY). 
* 
*        WORD         CONTENTS
*        ----         --------
*         1   <       JSB  XSIO        >
*         2   <     LOGICAL UNIT #     >
*         3   <COMPLETION ROUTINE ADDR >
*         4   <   LINKAGE WORD         >
*         5   <T, CONTROL INFO, CODE   >
*         6   <BUFFER ADDR OR DISC CNTL>
*         7   <BUFFER LENGTH OR PRIORITY> 
* 
*  THE <T> FIELD (BITS 15-14 IN CONTROL WORD) 
*   IDENTIFIES THE REQUEST TYPE AS: 
* 
*      00   USER (NORMAL OPERATION) 
*      01   USER (AUTOMATIC BUFFERING)
*      10   SYSTEM
* 
* 
      SKP 
IOCOM RAL,CLE,ERA   CLEAR THE SIGN BIT AND SAVE IN E
      STA TEMP3     SAVE STATUS FROM DRIVER AND 
      STB TLOG      TRANSMISSION LOG
* 
      CLA           CLEAR 
      STA  COMPL    CLEAR COMPLETION ADDRESS. 
      STA EQT15,I   CLEAR TIME-OUT CLOCK
* 
      LDA EQT4,I    SET THE COMPLETION SECTION FLAG 
      STA CONFL     AND TEST FOR DMA RETURN 
      SEZ,RSS        SIGN OF A IS EXPLICID RETURN OF
      SSA            DMA CHANNEL, CALL TO 
      JSB CLDMA       RELEASE ITS ASSIGNMENT. 
* 
      LDB EQT1,I    GET CONTROL WORD FROM 
      SZB,RSS       IF ILLEGAL ENTRY
      JMP CIC.4      SEND ERROR MESSAGE 
      INB            REQUEST BLOCK TO 
      LDA B,I         EXTRACT  <T> FIELD. 
      STA TEMP0     SAVE CONTROL WORD.
      RAL,SLA      IF BIT 15 = 1  (<T> = 2) 
      JMP L.53       PROCESS AS SYSTEM REQUEST. 
      SSA,RSS       IF <T> = 0, PROCESS 
      JMP L.51       AS NORMAL USER REQUEST.
* 
* RELEASE AUTOMATIC BUFFERING BLOCK 
* 
      LDA TEMP3     BY PASS RELEASE OF
      SZA            BUFFER IF MALFUNCTION
      JMP L.70       OCCURRED 
      ADB .2        GET TOTAL 
      LDB B,I        BLOCK LENGTH AND 
      STB L.50+1      SET IN RELEASE CALL.
      LDB EQT1,I    SET ADDRESS OF BLOCK
      STB L.50       IN CALL. 
      LDA B,I       SET LINK TO NEXT STACKED
      STA EQT1,I     REQUEST IN EQT ENTRY - WORD 1. 
* 
      JSB .RTN.    RELEASE BLOCK TO AVAILABLE MEM.
L.50  NOP            - BLOCK ADDRESS -
      NOP            - BLOCK LENGTH - 
      JMP L.55
* 
* NORMAL USER OPERATION COMPLETION
* 
L.51  LDB EQT1,I    GET ID SEGMENT ADDRESS
      LDA B,I       SET NEXT LINK ADDRESS 
      STA EQT1,I     IN WORD 1 OF EQT ENTRY.
      STB L.52      SET CURRENT ADDR. FOR SCHEDULER.
* 
      ADB .9        SET (B) = ADDR. OF XA IN ID SEG.
      LDA TEMP3      GET COMPLETION STATUS
      CLE,SZA         SET BIT 14
      CCE             IN STATUS WORD
      LDA EQT5,I      IF THE STATUS 
      RAL,RAL       IS NON-ZERO 
      ERA,CLE,ERA   AND SAVE IN USER A-REG. 
      STA B,I        CONTENTS OF PROGRAM. 
      INB 
      STB TEMP9      SAVE TRANSMISSION LOG ADDRESS
      LDA TLOG     SET TRANSMISSION LOG AS
      STA B,I        SAVED B-REGISTER.
* 
      JSB LIST      CALL SCHEDULER MODULE TO PLACE
      OCT 101        USER PROGRAM INTO <SCHEDULE> 
L.52  NOP             LIST. 
      JMP L.54
* 
* SYSTEM REQUEST COMPLETION 
* 
L.53  LDB EQT1,I   GET CURRENT REQUEST <LINK> ADDR. 
      LDA B,I       SET NEXT LINK ADDRESS 
      STA EQT1,I     IN EQT ENTRY.
* 
      ADB N1        GET WORD 3 OF REQUEST 
      LDA B,I         <COMPLETION ROUTINE ADDRESS>. 
      STA COMPL    SAVE COMPLETION ADDR. OR ZERO. 
* 
* < L.54 >  : AT THIS POINT:
*        1) A TEMPORARY BUFFER HAS BEEN RELEASED, 
*        2) A NORMAL OPERATION HAS CAUSED THE 
*            REQUESTING PROGRAM TO BE LINKED
*            BACK INTO THE <SCHEDULE> LIST, OR
*         3) A SYSTEM REQUEST COMPLETION ADDRESS
*            HAS BEEN SAVED.
* 
L.54  LDA TEMP3     BY PASS INITIATING THE NEXT 
      SZA            OPERATION IF A MALFUNCTION HAS 
      JMP L.70       OCCURRED ON THIS DEVICE. 
* 
* 
L.55  LDA EQT5,I   CHECK <AVAIL> FIELD. 
      SSA,RSS        IF AV SAYS BUSY
      JMP IOCX        SKIP ELSE GO EXIT 
* 
* SECTION  <60> PROVIDES FOR INITIATING THE NEXT
*  OPERATION WAITING FOR THE COMPLETED DEVICE.
* 
L.60  LDA EQT5,I   SET <AVAIL>
      AND MASK6     FIELD 
      STA EQT5,I     = 0 TO SAY AVAILABLE.
      JMP L.68      GO START THE NEXT REQUEST 
* 
.11   DEC 11
      SPC 1 
* 
* THIS DEVICE IS COMPETING WITH OTHER DEVICES FOR 
*  THE USE OF THE AVAILABLE DMA CHANNEL. THE <A>
*  FIELD IN THE CURRENT ENTRY IS SET = 3 TO MEAN
*  WAITING FOR DMA. THE EQT IS THEN SCANNED FROM
*  FIRST TO LAST ORDER (#1 TO N) TO FIND THE FIRST
*  UNIT WAITING FOR DMA. THEREFORE, THE ORDER OF
*  THE EQT DETERMINES PRIORITY FOR DYNAMIC ASSIGN-
*  MENT OF DMA CHANNELS - THE SYSTEM DISC SHOULD
*  BE THE FIRST ENTRY IN THE EQT. 
* 
L.63  LDA EQT#      SET # OF
      CMA,INA        EQT ENTRIES
      STA TEMP1       AS AN INDEX VALUE.
      LDB EQTA      INITIALIZE TO FIRST EQT ENTRY.
* 
L.64  STB TEMP2     SAVE CURRENT ENTRY ADDR.
      ADB .4        EXTRACT 
      LDA B,I        <A> FIELD FROM 
      AND AFLD        WORD 5. 
      CPA DMACW     IF A = 3, GO TO 
      JMP L.66       ASSIGN DMA.
* 
L.65  ADB .11      SET (B) FOR NEXT ENTRY.
      ISZ TEMP1     END OF EQT? 
      JMP L.64       - NO, CONTINUE SCAN
      JMP IOCX1      -YES, EXIT 
* 
L.66  CLA,INA       IF ONLY 1 DEVICE WAITING
      CPA DMACF      FOR  DMA, GO TO
      JMP L.67        ASSIGN TO THIS DEVICE.
      LDA TEMP2     IF CURRENT UNIT IS
      CPA EQTA       FIRST IN EQT (I.E SYSTEM DISC) 
      JMP L.67       ASSIGN ANYWAY. 
      CPA EQT1      IF SAME DEVICE JUST COMPLETED,
      JMP L.65       ALLOW OTHER DEVICES DMA TIME.
* 
L.67  LDA TEMP2     IF DEVICE TO BE INITIATED IS
      CPA EQT1       SAME AS INTERRUPTING DEVICE, 
      JMP L.68       SKIP SETTING EQT ADDRESSES.
* 
      JSB SETEQ     SET EQT ADDRESSES.
* 
* CALL <DRIVR> IF A REQUEST IS STACKED OR A 
*  WAITING UNIT IS ASSIGNED A DMA CHANNEL.
* 
L.68  LDA EQT1,I    IF NO REQUEST 
      SZA,RSS        WAITING, 
      JMP IOCX        EXIT. 
* 
      JSB DRIVR     CALL  <DRIVR> 
      RSS            IF GOOD REQUEST THEN SKIP
      JMP NOTRD     DIAGNOSTIC IF NOT AVAILABLE.
* 
* I/O COMPLETION  - EXIT SECTION. 
* 
* THIS ROUTINE CHECK FOR A DMA QUE AND IF ANY AND IF A CHANNEL IS 
* AVAILABLE THE CHANNEL ASSIGNMENT ROUTINE IS ENTERED.
* 
IOCX  LDA DMACF      GET THE DMA QUE FLAG 
      SZA,RSS         IF EMPTY QUE THEN 
      JMP IOCX1       GO EXIT 
* 
      DLD INTBA,I     ELSE GET THE DMA FLAGS
      SZA             IF ANY
      SZB,RSS          AVAILABLE
      JMP L.63      GO ALLOCATE IT. 
* 
IOCX1 LDA  COMPL     IF SYSTEM REQUEST
      LDB TLOG
      SZA           COMPLETION ROUTINE SPECIFIED, 
      JMP  COMPL,I  OPERATE IT. 
* 
      LDB OPATN    GET OPERATOR ATTENTION FLAG
      STA OPATN     - CLEAR FLAG -
      SZB          IF OPERATOR DESIRES CONTROL, 
      JMP TYPE      ACKNOWLEDGE.
      JMP XEQ      TRANSFER TO EXECUTE SECTION. 
* 
* I/O DEVICE COMPLETION ERROR FROM DRIVER 
*  (A) = ERROR CODE 
* 
L.70  CPA .3       IF PARITY ERROR, 
      CCE,RSS       CHECK FOR DISC. 
      JMP IOERR     - OTHER ERROR CONDITION - 
* 
      LDA EQT5,I   IF 
      AND ETYPE     DEVICE
      CPA DISC      IS DISC, PUT
      JMP DISCE     OUT SPECIAL MESSAGE.
* 
      LDA .3       PARITY ERROR ON
      JMP IOERR     OTHER DEVICE, PRINT DIAG. 
* 
* 
* DISC ERROR PROCESSING (SYSTEM/USER) 
* 
DISCE LDA TLOG     (A) = ERROR TRACK ADDRESS. 
      JSB CVT3     CONVERT TO DECIMAL ASCII.
      INA 
      DLD A,I       SET DECIMAL TRACK 
      DST DMSG+1    IN ERROR MESSAGE. 
      JSB CPEQT    COMPUTE EQT ENTRY #. 
      STA DMSG+5    SET IN ERROR MESSAGE. 
* 
      LDA EQT4,I     GET SUBCHANNEL 
      ALF,ALF         AND CONVERT 
      RAL,CLE,RAL     TO ASCII
      AND .7
      JSB CVT3
      ADA .2         STORE INTO 
      LDA A,I         MESSAGE 
      STA DMSG+7
* 
      LDB TEMP0    (B)= REQUEST TYPE
      LDA BLS      (A)= " S"
      SSB,RSS       IF USER TYPE REQUEST, 
      LDA BLU       (A)= " U" 
      STA DMSG+8   SET "S" OR "U" IN MESSAGE
* 
      LDA EQT1     SAVE DISC
      STA TEMP7     -EQT- ADDRESS 
      LDA COMPL    SAVE REQUEST (SYSTEM)
      STA TEMP8     COMPLETION ADDRESS
* 
      LDA DMSGA    PRINT DIAGNOSTIC:
      JSB SYSMG       "TRNNNN EQTXX,UYY S(OR U)"
* 
      LDA TEMP7      RESET EQT ADDRESSES
      JSB SETEQ       OF ERROR DISC 
* 
      LDA TEMP0    IF DISC ERROR
      SSA           FROM SYSTEM REQUEST,
      JMP L.71      CONTINUE. 
* 
      ALF,ALF        IF LU # 2 OR 3,
      AND .3          SET TRACK DOWN
      SZA,RSS         IN TAT- 
      JMP L.72       OTHERWISE, CONTINUE
      SLA,RSS 
      CLB,RSS 
      LDB TATSD 
      ADB TLOG     INDEX TO 
      ADB TAT       TAT, SET ERROR
      LDA MSIGN     TRACK 
      STA B,I        "DOWN" (ASSIGNED TO SYSTEM). 
* 
      LDA L.52     (A)= ID SEGMENT ADDRESS
      JSB $ABRT     -- ABORT  PROGRAM --
* 
      LDA TEMP7      RESET EQT ADDRESSES
      JSB SETEQ       OF ERROR DISC 
* 
L.71  CCB          SET TLOG = -1 AS ERROR 
      STB TLOG      FLAG IF SYSTEM CALLER.
      LDA TEMP8    RESET "COMPLETION" 
      STA COMPL     ADDRESS.
      STB CONFL     SET FLAG FOR COMPLETION.
      JMP L.60
* 
L.72  CCB          RETURN TRANSMISSION LOG
      STB TEMP9,I     OF -1 IF USER REQUEST 
      JMP L.71+1      TO PERIPHERAL DISC
* 
* 
DMSGA DEF *+1 
* 
      DEC -18 
DMSG  ASC 9,TRNNNN EQTXX,UYY S
* 
BLS   ASC 1, S
BLU   ASC 1, U
      HED < I/O CONTROL MODULE - ERROR SECTION >  A-29016-90003-1 
* 
* I/O  REQUEST ERROR SECTION
* 
*  PART 1: ERRORS ENCOUNTED IN ANALYSING A
*          USER REQUEST CAUSE A DIAGNOSTIC
*          TO BE PRINTED ON THE SYSTEM
*          TELETYPEWRITER AND THE USER
*          PROGRAM ABORTED. THE FORMAT OF 
*          THE DIAGNOSTIC IS: 
* 
*           'IONN  PNAME  RADDR'
* 
*           AS CONSTRUCTED AND SET
*           BY THE ROUTINE -ERMSG- IN 
*           THE PROGRAM <RTRQP>. -NN- IS A
*           CODE IDENTIFYING THE ERROR TYPE.
* 
ERR01 CLB,INB      INSUFFICIENT # OF PARAMETERS 
      JMP RQERR 
ERR02 LDB .2       ILLEGAL LOGICAL UNIT REFERENCE,
      JMP RQERR      = 0  OR UNDEFINED. 
ERR03 LDB .3       LOGICAL UNIT NOT ASSIGNED
      JMP RQERR     TO UNIT IN -EQT-. 
ERR04 LDB .4       USER BUFFER VIOLATES SYSTEM
      JMP RQERR     OR OTHER BOUNDARIES.
ERR05 LDB .5       ILLEGAL DISC TRACK OR SECTOR 
      JMP RQERR     ADDRESS IN DISC REQUEST.
ERR06 LDB .6       REFERENCE TO PROTECTED DISC TRACK
      JMP RQERR 
ERR08 LDB .8       DISC TRANSFER EXCEEDS TRACK BOUND
      JMP RQERR 
ERR09 LDB .9        LOAD-N-GO AREA OVERFLOW 
* 
RQERR LDA ERIO     (A) = ASCII * IO *.
* 
      ADB E00 
      JSB ERMSG    - WRITE DIAGNOSTIC - 
      LDA XEQT      -ABORT
      JSB $ABRT      USER PROGRAM 
* 
      JMP XEQ 
* 
E00   ASC 1,00
E07   ASC 1,07
ERIO  ASC 1,IO
      SKP 
*  PART 2:  ILLEGAL REQUEST DETECTED BY 
*          I/O DRIVER. THE REASON IS A READ OR
*          WRITE OPERATION IS ILLEGAL FOR THE 
*          DEVICE OR A CONTROL REQUEST IS 
*          MEANINGLESS FOR THE DEVICE.
*           AN ADDITIONAL REASON FOR TRANSFER TO THIS 
*          SECTION IS AN "IMMEDIATE COMPLETION" (CODE 4)
*          RETURN FROM THE DRIVER; PROCESSED AS A 
*          CONTROL REJECT.
* 
* 
*          ERROR PROCEDURE IS:
*          1. IF THE REQUEST IS PROCESSED AS
*             BUFFERED OUTPUT, THE TEMPORARY
*             BLOCK IS RELEASED TO AVAILABLE
*             MEMORY. 
* 
*          2. THE REJECT IS IGNORED IF A SYSTEM 
*             PROGRAM GENERATED THE REQUEST - 
*             HOWEVER, A COMPLETION ROUTINE,
*             IF SPECIFIED IN THE REQUEST, IS 
*             OPERATED. (NOTE: THIS PHILOSOPHY
*             IS BASED ON THE ASSUMPTION THAT 
*             THIS CONDITION SHOULD NEVER OCCUR.) 
* 
*          3. A USER CONTROL REQUEST WHICH IS 
*             REJECTED IS TREATED AS IF IT
*             WAS PERFORMED. THE PROGRAM IS 
*             LINKED BACK INTO THE SCHEDULE LIST. 
* 
*          4. A USER READ OR WRITE REQUEST REJECT 
*             CAUSES A DIAGNOSTIC TO BE ISSUED
*             AND THE PROGRAM ABORTED.
      SKP 
ILLCD CPA .4        IF CODE =4 FOR IMMEDIATE
      LDA .2         COMPLETION, TREAT AS CONTROL 
      STA TEMP4      REJECT,  SAVE CODE.
      LDB EQT1,I   GET LOCATION OF
      LDA B,I       ILLEGAL REQUEST (LINK ADDR.)
      STA TEMP0    SAVE NEXT REQUEST ADDRESS. 
      INB          GET CONTROL WORD 
      LDA B,I       OF REQUEST BLOCK
      STA EQT6,I     SAVE FOR REXIT 
      RAL          CHECK <T> FIELD
      SSA,RSS       FOR TYPE OF REQUEST BLOCK.
      JMP R02       -USER OR SYSTEM-
* 
      ADB .2       BUFFERED BLOCK.
      LDB B,I      GET TOTAL BLOCK LENGTH.
      STB R01+1    SET IN RELEASE CALL. 
      LDA EQT1,I   SET FWA OF BLOCK 
      STA R01       IN RELEASE CALL.
      JSB .RTN.    RELEASE BLOCK. 
R01   NOP           - FWA - 
      NOP           - # WORDS - 
      JMP REXIT 
* 
R02   SLA,RSS      CHECK <T> FIELD AGAIN. 
      JMP R03       -USER PROGRAM REQUEST-
* 
      ADB N2       GET WORD IN SYSTEM REQUEST 
      LDA B,I       CONTAINING -COMPLETION ROUTINE- 
      STA  COMPL    ADDRESS OR 0 AND SAVE IT. 
      JMP REXIT 
* 
R03   LDA TEMP4    USER REQUEST-
      CPA .2        CONTINUE IF CONTROL REQUEST 
      JMP R04        REJECTED.
      LDA XSUSP,I  SAVE CURRENT EXECUTING 
      STA TEMP7     PROGRAM ID SEGMENT
      LDA XEQT      ADDR. AND 
      STA TEMP8     POINT OF SUSPENSION.
      LDA EQT1,I   SET ID SEGMENT ADDRESS OF PROGRAM
      STA XEQT      CONTAINING ERROR. 
      ADA .8       GET POINT OF SUSPENSION ADDRESS
      LDA A,I       AND SET IN
      STA XSUSP,I   XSUSP,I FOR ERMSG.
      LDA EQT1     SAVE CURRENT 
      STA TEMP9     EQT ENTRY ADDRESS.
      LDA CONFL    SAVE CURRENT 
      STA SCONF     *CONTROL FLAG*
      LDA ERIO     (A) = ASCII  * IO *
      LDB E07      (B) = 07 FOR ILLEGAL READ/WRITE
      JSB ERMSG    PRINT DIAGNOSTIC 
      LDA TEMP7    RESET CURRENT
      STA XSUSP,I   PROGRAM SUSPENSION POINT
      LDA TEMP8     AND ID SEGMENT
      STA XEQT      ADDRESS.
      LDA TEMP9,I  SET ID SEGMENT 
      STA *+3       ADDRESS IN LIST CALL. 
      JSB LIST     TEMPORARILY
      OCT 101       'SCHEDULE'
      NOP            PROGRAM FOR SUBSEQUENT 'ABORT'.
      LDA TEMP9,I  (A)= ID SEGMENT ADDRESS
      JSB $ABRT     -- ABORT PROGRAM -- 
      LDA SCONF    RESTORE
      STA CONFL     *CONTROL FLAG*
      LDA TEMP9    RESTORE UNIT 
      JSB SETEQ     EQT ENTRY ADDRESSES.
      JMP REXIT 
* 
R04   LDA EQT1,I   SET PROGRAM ID SEGMENT 
      STA R05+2     ADDR. IN LIST CALL. 
      ADA .9       (A) = ADDR. OF XA IN ID SEGMENT. 
      LDB EQT5,I   SET DEVICE STATUS
      STB A,I       WORD IN XA. 
      LDB TEMP6 
      CPB .2         STORE TLOG IF IMMEDIATE RETURN 
      CLB,RSS        FROM DRIVER (A)=4; 
      LDB TEMPW      OTHERWISE, STORE ZERO
      INA           TRANSMISSION LOG
      STB A,I       IN XB.
R05   JSB LIST     CALL SCHEDULER 
      OCT 101       TO LINK PROGRAM BACK
      NOP           INTO SCHEDULE LIST. 
* 
REXIT LDA TEMP0    SET NEXT LIST
      STA EQT1,I    ENTRY ADDRESS.
      LDB CONFL    IF THE IOC *COMPLETION*
      SZB           SECTION IS IN CONTROL,
      JMP L.60       RETURN TO L.60 FOR NEXT REQUEST
* 
      LDA EQT6,I   REJECT OCCURRED IN IOC *REQUEST* 
      SSA           SECTION. RETURN TO
      JMP XSIO,I        SYSTEM CALLER.
      LDA TEMP4    IF REJECTING 
      LDB RQRTN     A CONTROL REQUEST TO IOREQ, 
      CPA .2        SET EXIT IN POINT 
      STB XSUSP,I   OF SUSPENSION.
      JMP XEQ        -EXECUTE SECTION IN SCHEDULER. 
      SKP 
* 
* I/O DEVICE ERROR SECTION
* 
*  THIS SECTION IS ENTERED WHEN A DEVICE
* IS UNAVAILABLE FOR INITIATION OF AN 
* OPERATION OR WHEN AN ERROR IS DETECTED
* AT THE END OF AN OPERATION. A DIAGNOSTIC
* IS PRINTED ON THE SYSTEM TELETYPE IN THE
* FOLLOWING FORMAT: 
* 
*    I/O ERROR MN EQT #NN 
* 
*  WHERE NN IS THE EQT ENTRY # OF THE DEVICE
*   AND MN IS A MNEMONIC DESCRIBING THE 
*   CONDITION:
* 
*     1.  NR  - DEVICE NOT READY
*     2.  ET  - END OF TAPE OR TAPE SUPPLY LOW
*     3.  PE  - TRANSMISSION PARITY ERROR 
*     4.  TO  - DEVICE TIMED-OUT
*     - NEW CODES MAY BE ADDED -
* 
*  ON ENTRY TO THE SECTION, (A) CONTAINS A #
*   CORRESPONDING TO THE ASSOCIATED MNEMONIC
*   AND EQT1 CONTAINS ADDRESS OF DEVICE.
* 
* 
NOTRD CLA,INA -SPECIAL NOT READY ENTRY- 
* 
IOERR ADA ERTBL    INDEX TO ERROR CODE TABLE. 
      LDA A,I      GET MNEMONIC AND 
      STA IOMSG+4   SET IN DIAGNOSTIC MESSAGE.
* 
      LDA EQT1
      STA TEMP9 
      LDA EQT5,I   GET STATUS WORD FROM EQT 
      AND MASK6    SET <AVAIL>
      IOR MASK5     FIELD TO 1, 
      STA EQT5,I     -UNIT DISABLED-
* 
      JSB CPEQT    COMPUTE EQT ENTRY #. 
      STA IOMSG+8   I/O DIAGNOSTIC. 
* 
      LDA CONFL    SAVE CURRENT 
      STA SCONF     *CONTROL FLAG*
* 
      LDA IOMSA    (A) = ADDR. OF DIAGNOSTIC
      JSB SYSMG    CALL TO PRINT. 
* 
      LDA SCONF    RESTORE *CONTROL FLAG*.
      STA CONFL 
      LDB TEMP9 
      CPB SYSTY 
      JMP L.60
      LDB B,I       GET <T> FIELD 
      INB           WORD
      LDB B,I        TO B.
      SZA           SECTION IN CONTROL, 
      JMP IOCX        GO EXIT IOC 
      SSB          *REQUEST* SECTION. IF SYSTEM 
      JMP XSIOE,I    REQUEST, RETURN TO CALLER. 
      JMP XEQ       GO TO EXECUTE SECTION.
* 
IOMSA DEF *+1 
      DEC -18 
IOMSG ASC 4,I/O ERR 
      NOP 
      ASC 3, EQT #
      NOP 
* 
* I/O DEVICE ERROR MNEMONIC TABLE - ORDERED 
*  BY ERROR CODE DESCRIBING CONDITION 
* 
ERTBL DEF * 
* 
      ASC 1,NR      - NOT READY - 
* 
      ASC 1,ET      - END OF TAPE (INFORMATION)  -
* 
      ASC 1,PE      - TRANSMISSION PARITY ERROR - 
* 
      ASC 1,TO      - TIMED-OUT  -
* 
* NEW CODES ADDED AT THIS POINT 
* 
* 
      HED   < IO-DEVICE TIME-OUT PROCESSOR >      A-29016-90003-1 
* 
* 
*  AFTER A DEVICE IS DISCOVERED TO HAVE TIMED-OUT 
*        BY THE SCHEDULER'S CLOCK PROCESSOR,THIS
*        ROUTINE IS ENTERED.  ITS PURPOSE IS TO 
*        CLEAR THE PENDING IO TRANSFER AND ENTER
*        IOCOM IN SUCH A WAY AS TO SIMULATE AN IO 
*        COMPLETION RETURN FROM THE DRIVER ITSELF.
* 
* 
*  ENTER FROM  SCHEDULER MODULE:
* 
*        (A) <ADDRESS OF EQT15 OF TIMED-OUT DEVICE> 
* 
* 
$DEVT ADA N14       POINT TO EQT
      JSB SETEQ     SET EQT ADDRESSES 
      LDA EQT4,I
      IOR MASK8     SET TIME-OUT BIT
      STA EQT4,I
      STA B         SAVE WORD IN B FOR TEST 
      AND MASK1      SELECT CODE TO A 
      BLF,SLB         IF DRIVER TO HANDLE TIME
      JMP CIC.6        OUT GO CALL THE DRIVER.
      JSB CLCHS     CLEAR ALL CHANNELS
      LDA .4        SERVICED BY THIS ENTRY
      CLB           SIMULATE COMPLETION 
      JMP IOCOM      RETURN FROM DRIVER 
      SPC 1 
N14   DEC -14 
      HED < I/O CONTROL MODULE - DATA SECTION >   A-29016-90003-1 
* CONSTANT AND VARIABLE STORAGE AREA
A     EQU 0        DEFINE SYMBOLIC REFERENCES 
B     EQU 1         FOR A AND B REGISTERS.
.1    DEC 1 
.2    DEC 2 
.3    DEC 3 
.4    DEC 4 
.5    DEC 5 
.6    DEC 6 
.7    DEC 7 
.8    DEC 8 
.9    DEC 9 
.15   DEC 15
N1    DEC -1
N2    DEC -2
N10   DEC -10 
* 
MASK1 OCT 77
MASK2 OCT 377 
MASK4 OCT 140000
MASK5 OCT 40000 
MASK6 OCT 37777 
MASK8 OCT 4000
MSIGN OCT 100000
M7400 OCT 177400    UPPER CHARACTER MASK
* 
TEMP1 NOP 
TEMP2 NOP 
TEMP3 NOP 
TEMP4 NOP 
TEMP5 NOP 
TEMP6 NOP 
TEMP7 NOP 
TEMP8 NOP 
TEMP9 NOP 
TEMP0 NOP 
TEMPL NOP 
TEMPW NOP 
* 
CONFL NOP 
SCONF NOP 
TLOG  NOP 
COMPL NOP 
AFLD  EQU MASK4 
DMACW EQU MASK4 
DMACF NOP           FLAGS USED IN ALLOCATING
      HED * RTIOC - OPERATOR COMMUNICATION *      A-29016-90003-1 
* 
*  I/O MODULE // OPERATOR COMMUNICATION 
* 
* 
*  THE SYSTEM PES FOR COMMANDS FROM THE 
* OPERATOR TO CONTROL THE OVERALL STATUS OF 
* I/O EQUIPMENT, CHANGE ASSIGNMENT OF LOGICAL 
* UNITS AND TO INTERROGATE THE STATUS AND 
* PROPERITES OF THE DEVICES IN THE EQUIPMENT
* TABLE.
* 
*  OPERATOR STATEMENTS ARE PROCESSED ONLY 
* FROM THE DESIGNATED SYSTEM TELETYPE. THE
* ROUTINE <MESSAGE> IN THE SCHEDULING MODULE
* IS RESPONSIBLE FOR STATEMENT DECODE AND 
* PARAMETER SEPARATION AND CONVERSION. THE
* ASSOCIATED STATEMENT PROCESSOR IS CALLED
* TO PERFORM THE REQUESTED ACTION. THE
* STATEMENT PROCESSING IS ALL TABLE-DRIVEN
* AS DESCRIBED IN THE LISTING AND DOCUMENTATION 
* OF THE SCHEDULING MODULE. 
* 
* 
*  TWO OF THE FOLLOWING STATEMENT PROCESSORS
* MUST BE INCLUDED IN THE BASIC SYSTEM PACKAGE. 
* THESE ARE THE 'UP' AND 'DOWN' STATEMENTS
* CONCERNING THE OVERALL STATUS OF I/O DEVICES. 
* THE OTHER THREE STATEMENT PROCESSORS ( LOGICAL
* UNIT ASSIGNMENT, TIME-OUT, AND EQT STATUS)
* ARE OPTIONAL AND MAY BE REMOVED BY DELETING 
* THE SECTIONS AND RE-ASSEMBLING THIS MODULE. 
* 
      SKP 
* 
*  'DOWN'  STATEMENT      (REQUIRED)
* 
* FORMAT:  DN,NN    WHERE NN IS THE EQT # 
*                   OF THE I/O DEVICE 
* 
* ACTION:  THE AVAILABILITY FIELD OF THE
*          REFERENCED DEVICE (EQT ENTRY #)
*          IS SET = 1 (UNIT DISABLED) 
* 
* CALL (FROM MESSAGE PROCESSOR):
* 
*      (A) = NN (EQT #) IN BINARY 
*   (P)     JMP  IO.DN
* 
*      RETURN IS TO <XEQ> IF ACTION TAKEN OR
*       TO -MESS,I- TO PRINT ERROR DIAGNOSTIC 
*       * INPUT ERROR * IF NN IS ILLEGAL. 
* 
IO.DN JSB IODNS    CHECK 'NN' AND SET EQT ADDRESSES.
      LDA EQT1     IF ATTEMPT TO 'DOWN' SYSTEM
      CPA SYSTY     TELETYPE, IGNORE ACTION AND 
      JMP IODNE      TREAT AS 'INPUT ERROR'.
      LDA EQT5,I    SET AVAILABITY FIELD
      AND MASK6      =1 TO
      IOR MASK5      MEAN 
      STA EQT5,I     UNAVAILABLE. 
* 
EXT1  CLA          CLEAR OPERATOR 
      STA OPFLG     CONTROL FLAG
      JMP XEQ      -- EXIT. 
* 
* *IODNS*  SUBROUTINE TO CHECK LEGALITY OF AN 
*          EQT # (IN A-REGISTER) AND TO CALL
*          A SUBROUTINE TO CONSTRUCT THE EQT
*          ENTRY ADDRESSES. 
* 
IODNS NOP 
      STA B        ERROR
      SZA,RSS       IF NN 
      JMP IODNE      = 0
      CMB,INB      ERROR
      ADB EQT#      IF NN 
      SSB            GT 
      JMP IODNE      LENGTH OF EQT. 
* 
      JSB CVEQT    SET EQT ENTRY ADDRESSES. 
      JMP IODNS,I 
* 
IODNE LDA IODMG 
EXT2  LDB MESS
      JMP B,I 
* 
IODMG DEF *+1 
N12   DEC -12 
      ASC 6,INPUT ERROR 
      SKP 
* 
*  ' UP '  STATEMENT     (REQUIRED) 
* 
* FORMAT:  UP,NN    WHERE NN IS THE EQT # 
*                   OF THE I/O DEVICE 
* 
* ACTION:  THE AVAILABILITY FIELD OF THE
*          REFERENCED DEVICE (EQT ENTRY #)
*          IS SET = 0 (UNIT AVAILABLE). 
* 
*          IF I/O REQUESTS ARE SUSPENDED IN 
*          THE DEVICE QUEUE, THE *IOCOM*
*          SECTION  (AT *L.68*) IS ENTERED
*          TO INITIATE THE WAITING OPERATION. 
* 
* CALL (FROM MESSAGE PROCESSOR):
* 
*      (A) = NN (EQT #) IN BINARY 
*   (P)     JMP  IO.UP
* 
*      RETURN IS *IOCOM* OR TO *XEQ* IF ACTION
*     IS TAKEN. IF NN ILLEGAL, RETURN IS TO 
*     *MESS,I* TO PRINT  'INPUT ERROR'. 
* 
* 
IO.UP JSB IODNS    CHECK 'NN' AND SET EQT ADDRESSES.
      LDA EQT5,I   GET AVAILABILITY 
      AND MASK4     FIELD FROM EQT ENTRY. 
* 
      CLB          CLEAR OPERATOR 
      STB OPFLG     CONTROL FLAG. 
* 
      CPA MASK5    IF DEVICE IS 
      RSS          NOT CURRENTLY DOWN 
      JMP XEQ        EXIT - NO ACTION.
* 
      LDA EQT5,I   DEVICE WAS 'DOWN'
      AND MASK6     SET AVAILABILITY FIELD
      STA EQT5,I     = 0. 
* 
      CPB EQT1,I   IF NO REQUESTS WAITING,
      JMP XEQ       EXIT TO *XEQ*.
* 
      CLA,INA      SET CONTROL FLAG = 1 
      STA CONFL     FOR IOCOM.
      STB COMPL     CLEAR COMPLETION FLAG.
      JMP L.68     TRANSFER TO *IOCOM*. 
* 
      HED < RTIOC MODULE - SUBROUTINE SECTION >   A-29016-90003-1 
* 
* SUBROUTINE:  < SYSMG >  (SYSTEM MESSAGE)
* 
*  PURPOSE: THIS ROUTINE PROVIDES FOR THE 
*           OUTPUT OF SYSTEM MESSAGES AND 
*           ERROR DIAGNOSTICS ON THE SYSTEM 
*           TELETYPEWRITER.  THE ROUTINE
*           MAINTAINS A 'ROTATING' BUFFER 
*           AREA CONSISTING OF 5  10-WORD 
*           BLOCKS - I.E., THE MAXIMUM
*           LENGTH OF A MESSAGE IS 18 
*           CHARACTERS (9-WORDS) PLUS 1 
*           WORD PRECEDING THE MESSAGE
*           WHICH CONTAINS THE CHARACTER
*           COUNT.
* 
*  CALL:    (A) = ADDRESS OF FIRST WORD OF
*                 MESSAGE BLOCK - THIS WORD 
*                 CONTAINS THE CHARACTER
*                 LENGTH OF THE MESSAGE AS
*                 A NEGATIVE VALUE. 
* 
*           (P)      JSB  SYSMG 
*           (P+1)    -RETURN- 
* 
*                ON RETURN: 
*               (A) = 0 - MESSAGE ACCEPTED AND
*                        MOVED TO BUFFER. 
*               (A) NOT = 0 - BUFFER FILLED,
*                        MESSAGE REJECTED 
* 
* 
SYSMG NOP 
      JMP SBUF      CHANGED TO NOP ON FIRST ENTRY 
      LDB SY#      IF BUFFER
      CPB .5        IS FILLED,
      JMP SYSMG,I    REJECT EXIT. 
* 
      LDB SYC      SET CURRENT
      STB SYT1      ENTRY ADDRESS FOR MOVE
      LDB N10      SET -10
      STB SYT2      AS MOVE INDEX.
      ISZ SY#      COUNT ENTRY. 
* 
SYS1  LDB A,I      MOVE 
      STB SYT1,I    CALLER
      ISZ SYT1      MESSAGE 
      INA           INTO
      ISZ SYT2      CURRENT ENTRY 
      JMP SYS1      IN BUFFER 
      LDB SYC      (B) = CURRENT ENTRY ADDRESS. 
      LDA SYT1     (A) = NEXT ENTRY ADDRESS 
      CPA SBL      IF NEXT EXCEEDS BUFFER,
      LDA SBF       RESET TO FWA BUFFER 
      STA SYC       AND SAVE. 
* 
      LDA SY#      IF ENTRY.
      CPA .1        COUNT = 1,
      JMP SYS3      INITIATE OUTPUT.
* 
SYS2  CLA          (A) = 0 FOR EXIT WITH
      JMP SYSMG,I   MESSAGE ACCEPTED. 
* 
SYS3  LDA B,I      GET MESSAGE LENGTH,
      STA SYS7      SET IN I/O CALL.
      INB          ADD 1 AND SET
      STB SYS6      FWA OF MESSAGE TEXT 
      JSB SYSCL    INITIATE OUTPUT, 
      JMP SYS2      EXIT. 
* 
* CALL <XSIO> TO INITIATE OUTPUT
* 
SYSCL NOP 
      JSB XSIO
      OCT 1         - LOGICAL UNIT 1 - SYS TTY
      DEF SYS8      - COMPLETION ROUTINE ADDRESS
      NOP 
      OCT 2         - ASCII WRITE - 
SYS6  NOP            MESSAGE ADDRESS
SYS7  NOP           MESSAGE LENGTH
      JMP SYSCL,I 
* 
* COMPLETION ROUTINE FROM I/O CALL
* 
SYS8  LDA SY#      SUBTRACT 1 FROM
      ADA N1        ENTRY COUNT FOR 
      STA SY#       MESSAGE JUST OUTPUT.
      SZA,RSS      IF NO MORE IN BUFFER,
      JMP XEQ       EXIT. 
* 
      LDA SYS6     SET
      ADA .9        NEXT ENTRY
      CPA SBL       ADDRESS 
      LDA SBF 
      LDB A,I      GET AND SET
      STB SYS7      LENGTH
      INA           AND 
      STA SYS6      MESSAGE ADDRESS.
      JSB SYSCL    INITIATE OUTPUT
      JMP XEQ       -EXIT.
* 
SY#   NOP 
SYT1  NOP 
SYT2  NOP 
SYC   DEF SBUF
SBF   DEF SBUF
      SKP 
* SUBROUTINE:  <CVEQT>
* 
*  PURPOSE: THIS ROUTINE CONVERTS AN EQT
*           ENTRY # TO AN EQT DISPLACEMENT
*           AND CALLS  <SETEQ> TO SET THE 
*           ENTRY ADDRESSES.
* 
*  CALLING SEQUENCE:
* 
*       (A) = EQT ENTRY # 
* 
*     (P)     JSB CVEQT 
*     (P+1)   -RETURN-  REGISTERS MEANINGLESS 
* 
* 
CVEQT NOP 
      ADA N1       SUBTRACT 1 AND 
      STA B         MULTIPLY EQT ENTRY #
      CMB,INB        BY 15
      ALF            TO 
      ADA B          COMPUTE THE
      ADA EQTA       ABSOLUTE ADDRESS.
* 
      JSB SETEQ    SET ALL 15 ADDRESSES.
* 
      JMP CVEQT,I    -RETURN- 
* 
* SUBROUTINE: <CPEQT> 
* 
*  PURPOSE: THIS ROUTINE COMPUTES THE ENTRY # 
*           OF THE ENTRY DESCRIBED BY -EQT1-. 
*           THE # IS CONVERTED TO DECIMAL ASCII.
* 
*  CALLING SEQUENCE:  (P)    JSB CPEQT
*                     (P+1)  - RETURN - 
*                          ON RETURN, (A) = # IN ASCII
* 
* 
CPEQT NOP 
      LDB EQTA     SUBTRACT DEVICE
      CMB,INB       EQT ENTRY ADDRESS 
      ADB EQT1      FROM FWA OF EQT.
      CLA,INA      DETERMINE
      CCE,SZB,RSS   POSITION
      JMP *+4       OF
      INA           ENTRY 
      ADB N15       IN
      JMP *-4       EQT.
* 
      JSB CVT3     CONVERT TO DECIMAL 
      ADA .2        SET EQT # 
      LDA A,I       IN
      JMP CPEQT,I 
      SPC 1 
N15   DEC -15 
      SKP 
* SUBROUTINE: < SETEQ > 
* 
*  PURPOSE: THIS ROUTINE SETS THE ADDRESSES 
*           OF THE 15 WORDS OF AN 
*           EQUIPMENT TABLE ENTRY IN THE
*           15  WORDS IN BASE PAGE COMMUNICATION
*           AREA LABELLED -EQT1- TO -EQT15-.
* 
*   CALLING SEQUENCE: 
* 
*           (A) - STARTING ADDRESS OF THE EQT 
*                 ENTRY FOR THE REFERENCED
*                 I/O UNIT. 
* 
*        (P)     JSB  SETEQ 
*        (P+1)  - RETURN - (A),(B) MEANINGLESS
* 
*          THERE ARE NO ERROR RETURNS OR
*           ERROR CONDITIONS DETECTED.
* 
* 
SETEQ NOP 
      STA EQT1
      INA 
      STA EQT2
      INA 
      STA EQT3
      INA 
      STA EQT4
      INA 
      STA EQT5
      INA 
      STA EQT6
      INA 
      STA EQT7
      INA 
      STA EQT8
      INA 
      STA EQT9
      INA 
      STA EQT10 
      INA 
      STA EQT11 
      INA 
      STA EQT12 
      INA 
      STA EQT13 
      INA 
      STA EQT14 
      INA 
      STA EQT15 
      JMP SETEQ,I 
* 
* 
      SKP 
* 
* SPECIAL SECTION "I/O CLEAR "
*   ENTRY POINT IS "$IOCL"
* 
*  PURPOSE: THE FUNCTION OF THIS ROUTINE
*          IS TO REMOVE A PROGRAM FROM AN 
*          I/O HANG-UP CONDITION RESULTING
*          FROM AN INPUT REQUEST NOT BEING
*          COMPLETED BY THE DEVICE. 
* 
*          THIS "CLEARING" PROCEDURE IS 
*          INITIATED BY THE OPERATOR IN 
*          USING THE I/O ABORT VERSION OF THE 
*          "OF,XXXXX,1" COMMAND. THE "OF" 
*          STATEMENT PROCESSOR IN 'SCHED' 
*          CALLS THIS SECTION IF THE REF- 
*          ERENCED PROGRAM IS SUSPENDED 
*          FOR AN I/O INPUT REQUEST.
* 
*  PROCESS: THE LIST OF EACH EQT ENTRY
*          IS SEARCHED TO FIND THE QUEUED 
*          REQUEST CORRESPONDING TO THE 
*          ID SEGMENT OF THE REFERENCED 
*          PROGRAM.  THE ENTRY IS REMOVED 
*          FROM THE LIST AND THE LIST IS
*          APPROPRIATELY LINKED TO REFLECT
*          THE CHANGE.
* 
*          IF THE ENTRY WAS THE FIRST ONE 
*          IN THE LIST (I.E. THE ACTIVE 
*          REQUEST), THE DEVICE'S CHANNELS
*          AND DMA CHANNEL, IF ASSIGNED,ARE 
*          CLEARED.  THE DEVICE'S TIME-OUT
*          CLOCK IS CLEARED.   $ABRT IS 
*          CALLED TO ABORT THE PROGRAM AND
*          CONTROL IS TRANSFERRED TO "$XEQ" 
*          IF THE DEVICE WAS NOT CLEARED
*          OR TO "L.55" IN "IOCOM" TO 
*          INITIATE THE NEXT STACKED
*          REQUEST (OR TO ALLOCATE THE
*          DMA CHANNEL).
* 
*  CALLING SEQUENCE:
* 
*          (A)= ID SEGMENT ADDRESS OF PROGRAM 
* 
*         (P) JMP  $IOCL
* 
*            -NO RETURN - 
* 
* 
      SKP 
      ENT $IOCL 
* 
$IOCL STA TEMP1     SAVE ID SEGMENT ADDRESS.
M2400 CLA 
      STA OPFLG 
      LDA EQT#      SET TEMP2 = NEGATIVE
      CMA,INA        NUMBER OF EQT
      STA TEMP2       ENTRIES.
      LDA EQTA      INITIALIZE FOR
* 
      STA IOCL5      EQT ENTRY WORD 
      STA IOCL6       1 ADDRESS.
* 
IOCL1 LDA A,I       GET LINK ADDRESS. 
      CPA TEMP1     JUMP IF A 
      JMP IOCL2      MATCH TO PROGRAM.
* 
      SZA           IF NOT END OF LIST, 
      JMP IOCL1-1    CONTINUE SCAN. 
* 
      LDA IOCL5     SET (A) = ADDRESS OF
      ADA .15        NEXT EQT ENTRY.
      ISZ TEMP2     IF NOT END OF EQT, GO 
      JMP IOCL1-2    TO SCAN NEXT ENTRY LIST. 
      JMP $XEQ      -NOT FOUND, EXIT TO XEQ SE
* 
* PROGRAM REQUEST ENTRY FOUND, UNLINK REQUEST.
* 
IOCL2 LDB A,I       GET NEXT LINK AND SET 
      STB IOCL6,I    IN PREVIOUS LINK.
* 
      LDA TEMP1     "ABORT
      LDB A         CHECK IF
      INB            THIS IS A
      LDB B,I         SYSTEM REQUEST
      SSB,RSS          IF SO SKIP ABORT 
      JSB $ABRT       PROGRAM"
* 
      LDA IOCL5     IF PROGRAM REQUEST
      CPA IOCL6      WAS CURRENT ENTRY, 
      CLB,RSS       SKIP TO CLEAR DEVICE. 
      JMP $XEQ      -EXIT TO $XEQ.
* 
      JSB SETEQ 
* 
      STA CONFL      FOR IOCOM. 
      STB COMPL      COMPLETION FLAG. 
      STB EQT15,I   CLEAR DEVICE TIME-OUT CLOCK 
* 
      JSB CLCHS     CLEAR DEVICE CHANNELS 
      JMP L.55      EXIT TO IOCOM CODE
      SPC 1 
IOCL5 NOP 
IOCL6 NOP 
      SKP 
* 
*  ROUTINE TO CLEAR DMA CHANNEL IF ASSIGNED TO DEVICE 
* 
CLDMA NOP 
      LDB INTBA      GET THE INTERRUPLE ADDRESS TO B
      LDA B,I         AND DMA 6 ENTRY TO A
      RAL,CLE,ERA      CLEAR THE SIGN BIT 
      CPA EQT1       THIS CHANNEL ASSIGNED? 
      CLA,RSS         YES- SKIP 
      JMP IOCL3       NO TRY NEXT CHANNEL 
      CLC 6          CLEAR CHANNEL
      STF 6            6. 
      STA B,I        SET IT AVAILABLE IN INTBA
      SPC 1 
IOCL3 INB            STEP TO DMA 7 ENTRY
      LDA B,I         GET TO A  AND 
      RAL,CLE,ERA      CLEAR THE SIGN BIT 
      CPA EQT1       THIS CHANNEL ASSIGNED? 
      CLA,RSS         YES - SKIP
      JMP CLDMA,I     NO - EXIT CHANNELS CLEARED
      CLC 7           CLEAR CHANNEL 7 
      STF 7           AND 
      STA B,I         MAKE IT AVAILABLE.
      JMP CLDMA,I 
* 
*  ROUTINE TO CLEAR ALL CHANNELS SERVICED BY EQT ENTRY
* 
CLCHS NOP 
      JSB CLDMA       CLEAR DMA CHANNEL IF ASSIGNED 
      LDA INTLG     STORE INTERRUPT 
      CMA,INA        TABLE LENGTH-
      ADA .2         RELATED INDEX
      STA TEMPW 
      LDA CLR10     STORE INITIAL 
      STA CLCSC      CLC S.C. 
      LDA INTBA      INSTRUCTION
      ADA .2
CLRNX LDB A,I       GET NEXT TABLE ENTRY- 
      CPB EQT1      DOES IT REFERENCE THIS EQT? 
CLCSC CLC 00B        YES-GO CLEAR IT
      ISZ TEMPW     THRU TABLE? 
      INA,RSS        NO-INDEX TO NEXT ENTRY 
      JMP CLCHS,I    YES-EXIT 
      ISZ CLCSC 
      JMP CLRNX 
* 
CLR10 CLC 10B 
M7777 OCT 77777 
      HED ** OPTIONAL OPERATOR STATEMENTS **      A-29016-90003-1 
* 
* 'LOGICAL UNIT' STATEMENT   (OPTIONAL) 
* 
* FORMAT:  LU,N1(,N2(,N3))   WHERE: 
* 
*           N1 = LOGICAL UNIT # 
*           N2 = 0, EQT ENTRY #, OR NOT PRESENT 
*           N3 = SUBCHANNEL # OR NOT PRESENT IN WHICH 
*                CASE IT DEFAULTS TO ZERO 
* 
* ACTION:  1) N2 AND N3 NOT INPUT;  THE ASSIGNMENT OF 
*                LOGICAL UNIT N1 IS PRINTED AS: 
*                   ' LU #N1 = #XX,U Y'   XX = EQT
*                ENTRY # OF ASSIGNED DEVICE.
*                Y = SUBCHANNEL #;  ,U Y PRINTED IF Y NON-ZERO
* 
*          2) N2 = 0;  THE ASSIGNMENT IS RELEASED,
*                      I.E, THE CORRESPONDING 
*                          WORD IN THE DEVICE 
*                          REFERENCE TABLE (DRT)
*                          IS SET = 0.
* 
*          3) N2 = EQT ENTRY # OF I/O DEVICE TO 
*                  BE ASSIGNED TO LOGICAL UNIT N1;
*                   IF N2 IS A LEGITIMATE EQT #,
*                   THEN N2 AND N3 ARE STORED IN WORD N1
*                   IN THE DRT - ASSIGNMENT OF
*                   LOGICAL UNIT TO PHYSICAL UNIT 
*                   IS MADE.
* 
* CALL (FROM MESSAGE PROCESSOR):
* 
*      (A) = N1 (LOGICAL UNIT) IN BINARY
*      (B) = -1 IF N2 NOT INPUT OR N3:N2
*                      (IN BINARY) WHERE N3 IS IN BITS 13-11
*   (P)  JMP  LUPR
* 
*      RETURN IS TO MESS,I WITH A=0 FOR ACTION
*       TAKEN OR (A) = ADDRESS OF MESSAGE IN 1).
* 
      ENT $LUPR 
* 
LUPR  STA TEMP1    SAVE  'N1' 
$LUPR EQU LUPR
      STB TEMPW    SAVE 'N2' AND 'N3' 
      CPB N1        IF NO 'N2','N3' 
      JMP LUPR0     PARAMETERS, CONTINUE
      CPA .2       PREVENT
      JMP IODNE     REASSIGNMENT
      CPA .3        OF LU 2 OR 3
      JMP IODNE     TO OTHER DEVICES
      LDA B 
      AND MASK2     SAVE 'N2' IN TEMP2
      STA B 
      STA TEMP2 
      LDA TEMP1 
LUPR0 SZA,RSS       ERROR IF
      JMP IODNE      N1 = 0 
      CMA,INA      CHECK FOR
      ADA LUMAX     N1 > LENGTH 
      SSA            OF DRT.
      JMP IODNE     YES, UNDEFINED N1.
* 
      CCA          COMPUTE
      ADA TEMP1     LOCATION OF N1
      ADA DRT        IN DRT.
      STA TEMP3     (SAVE DRT ADDRESS)
      LDA A,I      GET N1 ASSIGNMENT ( 0 OR EQT #)
      STA TEMPL     SAVE CHAN & SUBCHAN #'S 
      AND MASK2     MASK OUT SUBCHANNEL 
      STA TEMP4     AND SAVE. 
* 
      SZB          IF N2 = 0, RELEASE ASSIGNMENT. 
      JMP LUPR1 
* 
* RELEASE L.U. ASSIGNMENT 
* 
      CLA,INA      ERROR IF 
      CPA TEMP1     ATTEMPT TO RELEASE
      JMP IODNE     LU #1,  SYSTEM TELETYPE.
      STB TEMP3,I  SET DRT WORD = 0 
      JMP EXT1      - EXIT -
* 
LUPR1 INB,SZB,RSS  IF (B) = -1, THEN GO TO
      JMP LUPR3     PRINT CURRENT ASSIGNMENT. 
* 
* ASSIGN L.U. TO PHYSICAL DEVICE
* 
      LDA DRT      PREVENT
      INA           ASSIGNMENT
      DLD A,I         OF ANY LU 
      CPA TEMPW       NUMBER TO SYSTEM
      RSS             OR AUXILIARY
      CPB TEMPW       DISC/DRUM 
      JMP IODNE 
* 
      LDA TEMP2    CHECK N2 AND SET EQT ADDRESSES.
      JSB IODNS 
      CLB,INB      IF LOGICAL UNIT =
      CPB TEMP1     1 (SYSTEM TELETYPE).
      JMP LUPR5     GO TO CHANGE ASSIGNMENT.
      LDA TEMPW     SET CHAN AND SUBCHAN IN 
      STA TEMP3,I   DRT WORD ( N1 ).
      JMP EXT1
* 
* PRINT CURRENT LOGICAL UNIT ASSIGNMENT 
* 
LUPR3 LDA TEMP1    CONVERT N1 
      JSB LUPS       TO ASCII 
      STA LUMG1      AND SET IN MESSAGE.
      LDA TEMP4    SAME 
      JSB LUPS       FOR CURRENT
      STA LUMG2       EQT ASSIGNMENT. 
      LDA TEMPL     GET CHAN AND SUBCHAN
      AND M7400     MASK OUT CHANNEL
      SZA           SUBCHANNEL ZERO?
      JMP LUPR4+1    NO - ADD IT TO MESSAGE 
      LDA N12 
      STA LUMGA+1 
      LDA LUMGA    (A) = ADDRESS OF MESSAGE.
LUPR4 JMP EXT2
* 
      ALF,RAL       CONVERT SUBCHANNEL (N3) 
      JSB LUPS       TO ASCII AND 
      STA LUMG3      SET IN MESSAGE 
      LDA N16 
      JMP LUPR4-2 
* 
LUPR5 LDA EQT5,I   GET *EQUIPMENT 
      AND MASKT       CODE FOR REFERENCED UNIT
      SZA          IF UNIT IS NOT A TELETYPE, 
      CPA M2400 
      RSS 
      JMP IODNE     REJECT OPERATION. 
      LDA EQT5,I   CHECK STATUS 
      AND MASK4     OF NEW DEVICE.
      CPA MASK5    IF NEW DEVICE 'DOWN',
      JMP IODNE     DIS-ALLOW THIS REQUEST. 
      LDA EQT1     SET NEW EQT ADDRESS
      STA SYSTY     IN BP.
      LDA TEMPW     SET CH #
      STA TEMP3,I   IN DRT(1).
      LDA NSYSM    OUTPUT '**' TO EFFECT
      JMP EXT2      OPERATOR COMMUNICATION. 
* 
NSYSM DEF *+1 
      DEC -2
      ASC 1,**
* 
LUMGA DEF *+1 
      NOP 
* 
      ASC 2,LU #
LUMG1 NOP 
      ASC 2, = #
LUMG2 NOP 
      ASC 1,,U
LUMG3 NOP 
* 
LUPS  NOP         BINARY/DECIMAL(ASCII) PREPROCESSOR
      CCE          (E = 1  FOR DECIMAL) 
      JSB CVT3    - CALL CONVERSION (A) = NUMBER -
      ADA .2      SET (A) 
      LDA A,I      = ASCII OF NUMBER. 
      JMP LUPS,I     -RETURN
* 
N16   DEC -16 
      SKP 
* 
* ' EQT DEVICE STATUS ' STATEMENT   (OPTIONAL)
* 
* FORMAT:   EQ,NN    WHERE NN = EQT ENTRY # 
*                    FOR I/O DEVICE 
* 
* ACTION:   THIS STATEMENT REQUESTS THE CURRENT 
*          STATUS OF EQT ENTRY #NN. THE PRINTED 
*          REPLY IS:
* 
*           '  SC DVRNN D B UN AV'  WHERE:
* 
*            SC = I/O CHANNEL # (SELECT CODE) 
*            DVRNN = DRIVER NAME, EQUIP TYPE NN.
*            D, IF DMA CHANNEL REQUIRED- 0 IF NOT 
*            B, IF BUFFERING SELECTED - 0  IF NOT 
*            UN = UNIT N (FOR SUB-UNIT ADDRESSING)
*            AV = 0   UNIT AVAILABLE
*                 1   UNIT DISABLED (DOWN)
*                 2   UNIT IN OPERATION 
*                 3   UNIT WAITING FOR A DMA CHANNEL
* 
* CALL (FROM MESSAGE PROCESSOR):
* 
*     (A) = NN  (EQT #) IN BINARY 
*     (B)= 0,1 OR -1  (-1 MEANS NO PARAMETER #2)
*         IF 2ND PARAMETER SUPPLIED, THE B FIELD
*         IN THE EQT ENTRY IS SET TO THE VALUE
*         OF THE PARAMETER: 0=NO BUFFERING, 
*         1(NON-ZERO)= BUFFERING. 
* 
* 
*   (P)  JMP  EQ.ST 
*      -RETURN IS TO MESS,I WITH (A) = ADDRESS OF 
*        REPLY OR ADDRESS OF ERROR MESSAGE IF NN
*        IS ILLEGAL.
* 
      ENT $EQST 
* 
EQ.ST STB TEMP1    SAVE PARAM # 2 
* 
$EQST EQU EQ.ST 
* 
      JSB IODNS    CHECK NN AND SET EQT ADDRESSES 
      LDB TEMP1    CHECK PARAM #2.
      LDA EQT4,I      GET CHANNEL WORD
      INB,SZB      IF =-1, OUTPUT EQT STATUS
      JMP EQST1     PARAM FOR BUFFERING SELECTION 
* 
      AND MASK1     I/O CHANNEL # 
      JSB EQCVT 
      STA EQMS1 
* 
      LDA EQT4,I   CONVERT
      ASR 6           UNIT #. 
      AND .7
      JSB EQCVT 
      STA EQMS5 
      LDA EQT4,I   SET
      LDB EQBLK     D (FOR DMA CHANNEL) 
      RAL,SLA       OR
      LDB EQBD      0 
      STB EQMS3 
      LDB EQBLK    SET
      SSA           B (FOR AUTOMATIC BUFFERING) 
      LDB EQBB      OR
      STB EQMS4     0 
      LDA EQT5,I   SET
      RAL,RAL       AVAILABILITY
      AND .3         STATUS 
      ADA EQBLK     (0,1,2,OR3) 
      STA EQMS6 
      LDA EQT5,I   CONVERT
      ALF,ALF       EQUIPMENT 
      AND MASK1      TYPE 
      JSB EQCVT     FOR 
      STA EQMS2      DVRNN. 
      LDA EQMSA    (A) = ADDRESS OF REPLY 
      JMP EXT2
EQST1 RBR,ERB         ROTATE BIT 1 TO E 
      RAL,RAL         AND PUT IN
      ERA,RAR         14 OF EQT4
      STA EQT4,I    AND RESTORE 
      JMP EXT1
* 
EQMSA DEF *+1 
      DEC -20 
      ASC 1,
EQMS1 NOP            I/O CHANNEL #
      ASC 2, DVR
EQMS2 NOP            EQUIP TYPE CODE
EQMS3 NOP            D OR 0 
EQMS4 NOP            B OR 0 
      ASC 1, U
EQMS5 NOP            UNIT # 
EQMS6 NOP            AVAILABILITY 
* 
EQCVT NOP          (A) = NUMBER 
      CLE          CONVERT
      JSB CVT3      TO OCTAL ASCII
      ADA .2        AND 
      LDA A,I       RETURN IN A.
      JMP EQCVT,I 
* 
EQBLK ASC 1, 0
EQBD  ASC 1, D
EQBB  ASC 1, B
      SKP 
* 
*  ' DEVICE TIME-OUT PARAMETER ' STATEMENT   (OPTIONAL) 
* 
* FORMAT:   TO,N1,N2  WHERE 
* 
*            N1 = EQT # 
*            N2 = TIME-OUT PARAMETER OR -1
* 
* ACTION:   IF N2 = -1, A SECOND PARAMETER WAS NOT
*            RECEIVED FROM THE MESSAGE PROCESSOR; 
*            THEREFORE, PRINT THE CURRENT TIME-OUT
*            PARAMETER OF DEVICE N1.
* 
*           BOTH N1 AND N2 PRESENT, ASSIGN N2 AS THE
*            NEW TIME-OUT PARAMETER FOR DEVICE N1.
* 
* 
* CALL (FROM MESSAGE PROCESSOR):
* 
*     (A) = N1
*     (B) = N2 OR -1
* 
*   (P)  JMP $CHTO
*      - RETURN IS TO MESS,I WITH (A) = ADDRESS OF REPLY
*         OR ADDRESS OF ERROR MESSAGE IF N1 IS ILLEGAL. 
* 
      ENT $CHTO 
      SPC 1 
$CHTO STA TEMP1      SAVE N1
      STB TEMPW       AND N2
      JSB IODNS      CHECK VALIDITY OF N1 
      LDB TEMPW      LOOK AT N2 
      SZB,RSS        IF N2 ZERO, DISABLE
      JMP CHTO2       TIME-OUT FOR DEVICE 
      INB,SZB        IF N2 = -1, OUTPUT T-O PARAMETER 
      JMP CHTO1      OTHERWISE, ENTER NEW T-O VALUE 
* 
      LDA EQT14,I    CONVERT T-O PARAMETER
      CCE,SZA         TO DECIMAL ASCII
      CMA 
      JSB CVT3
      CCE,INA 
      DLD A,I         STORE IN MESSAGE
      DST TOMS1+2 
* 
      LDA TEMP1      CONVERT EQT #
      JSB CVT3        TO DECIMAL ASCII
      ADA .2
      LDA A,I 
      STA TOMS1      STORE INTO MESSAGE 
      LDA TOMSA 
      JMP EXT2
      SKP 
TOMSA DEF *+1 
      DEC -12 
      ASC 2,TO# 
TOMS1 NOP 
      ASC 1, =
      NOP 
      NOP 
* 
.500  DEC 500 
MASKT OCT 37400 
* 
CHTO1 CMB,INB        ERROR IF ATTEMPT 
      LDA EQT5,I      TO SET TYPE 0 OR 5
      AND MASKT       DEVICE TIME-OUT 
      SZA             VALUE TO LESS THAN
      CPA M2400       FIVE SECONDS. 
RSS   RSS 
      JMP CHTO2      OTHERWISE, STORE 
      LDA .500        NEW TIME-OUT
      ADA B           VALUE.
      SSA,RSS 
      JMP IODNE 
CHTO2 STB EQT14,I 
      JMP EXT1
      HED MSG BUFFER AND PRIVLEDGE I/O CONFIGURE  A-29016-90003-1 
* 
SBUF  BSS 50
      ORG SBUF      PUT IOC CONFIGURING ROUTINE IN BUFFER 
      STA SBUF      SAVE THE A REG. 
      CLA 
      STA SYSMG+1   CLEAR CALL TO HERE
      LDB DUMMY     GET THE DUMMY I/O ADDRESS 
      SZB,RSS       IF NONE 
      JMP NOPRV     GO EXIT 
      STA SW1       SET THE PRIVILEDGE
      STA SW2       SWITCHES
      LDA CLCP
      ADA B         CONFIGURE THE DUMMY ADDRESSES 
      STA CLC2,I    USE INDIRECTS TO AVOID LINKS
      LDA STCP
      ADA B         NEED AN CLC 
      STA STC2,I    STC 
      LDA STFP      AND 
      ADA B 
      STA STF2,I    AND STF 
NOPRV LDA SBUF      DONE
      JMP SYSMG+1   GO CONTINUE THE MESSAGE BIT 
      SPC 2 
STCP  STC 0 
CLCP  CLC 0 
STFP  STF 0 
STC2  DEF STC1
STF2  DEF STF1
CLC2  DEF CLC1
      SPC 2 
L     EQU 50+SBUF-*  ERROR HERE MEANS WE RAN OUT OF BUFFER
      ORR           LEAVE THE BUFFER
* 
SBL   DEF * 
      HED *  SYSTEM  ENT/EXT SYMBOL  DEFINITION * A-29016-90003-1 
* ENTRY POINTS WITHIN THE MODULES OF THE
* R/T EXECUTIVE BEGIN WITH '$' TO AVOID 
* DUPLICATE ENTRY POINT CONFLICTS WITH
* USER PROGRAMS.
* 
$CIC  EQU CIC 
$XSIO EQU XSIO
$SYMG EQU SYSMG 
$IORQ EQU IOREQ 
$IOUP EQU IO.UP 
$IODN EQU IO.DN 
RTRQP EQU $RQST 
CLOCK EQU $CLCK 
XEQ   EQU $XEQ
TYPE  EQU $TYPE 
LIST  EQU $LIST 
.ALC. EQU $ALC
.RTN. EQU $RTN
CVT3  EQU $CVT3 
ERMSG EQU $ERMG 
MESS  EQU $MESS 
$CVEQ EQU CVEQT 
      HED * SYSTEM BASE PAGE COMMUNICATION AREA * A-29016-90003-1 
.     EQU 1650B     ESTABLISH ORIGIN OF AREA
* 
* SYSTEM TABLE DEFINITION * 
* 
EQTA  EQU .+0      FWA  OF  EQUIPMENT TABLE 
EQT#  EQU .+1       # OF EQT ENTRIES
DRT   EQU .+2     FWA  OF  DEVICE REFERENCE TABLE
LUMAX EQU .+3       # OF LOGICAL UNITS (IN DRT) 
INTBA EQU .+4      FWA  OF  INTERRUPT TABLE 
INTLG EQU .+5       # OF INTERRUPT TABLE ENTRIES
TAT   EQU .+6      FWA  OF  TRACK ASSIGNMENT TABLE
KEYWD EQU .+7      FWA  OF  KEYWORD BLOCK 
* 
* I/O MODULE/DRIVER COMMUNICATION 
* 
EQT1  EQU .+8      ADDRESSES
EQT2  EQU .+9 
EQT3  EQU .+10      OF
EQT4  EQU .+11
EQT5  EQU .+12      CURRENT 
EQT6  EQU .+13
EQT7  EQU .+14      15-WORD 
EQT8  EQU .+15
EQT9  EQU .+16      EQT 
EQT10 EQU .+17
EQT11 EQU .+18      ENTRY 
EQT12 EQU .+81
EQT13 EQU .+82
EQT14 EQU .+83
EQT15 EQU .+84
* 
CHAN  EQU .+19     CURRENT DMA CHANNEL #
TBG   EQU .+20     I/O ADDRESS OF TIME-BASE CARD
SYSTY EQU .+21     EQT ENTRY ADDRESS OF SYSTEM TTY
* 
* SYSTEM REQUEST PROCESSOR /'EXEC' COMMUNICATION *
* 
RQCNT EQU .+22     # OF REQUEST PARAMETERS -1 
RQRTN EQU .+23      RETURN POINT ADDRESS
RQP1  EQU .+24      ADDRESSES 
RQP2  EQU .+25
RQP3  EQU .+26       OF REQUEST 
RQP4  EQU .+27
RQP5  EQU .+28       PARAMETERS 
RQP6  EQU .+29
RQP7  EQU .+30       (SET FOR MAXIMUM OF
RQP8  EQU .+31        8 PARAMETERS) 
* 
* DEFINITION OF SYSTEM LISTS (QUEUES) * 
* 
DORMT EQU .+32     ADDRESS OF 'DORMANT' LIST, 
SKEDD EQU .+33      'SCHEDULE' LIST,
SUSP3 EQU .+36      'AVAILABLE MEMORY' LIST,
SUSP4 EQU .+37      'DISC ALLOCATION'  LIST,
SUSP5 EQU .+38      'OPERATOR SUSPEND' LIST 
* 
* DEFINITION OF EXECUTING PROGRAM  ID SEGMENT' *
* 
XEQT  EQU .+39     ID SEGMENT ADDR. OF CURRENT PROG.
XLINK EQU .+40       'LINKAGE'
XTEMP EQU .+41       'TEMPORARY (5-WORDS) 
XPRIO EQU .+46       'PRIORITY' WORD
XPENT EQU .+47       'PRIMARY ENTRY POINT'
XSUSP EQU .+48       'POINT OF SUSPENSION'
XA    EQU .+49       'A REGISTER' AT SUSPENSION 
XB    EQU .+50       'B REGISTER' 
XEO   EQU .+51       'E AND OVERFLOW
* 
* SYSTEM MODULE COMMUNICATION FLAGS * 
* 
OPATN EQU .+52     OPERATOR/KEYBOARD ATTENTION FLAG 
OPFLG EQU .+53     OPERATOR COMMUNICATION FLAG
SWAP  EQU .+54     RT DISC RESIDENT SWAPPING FLAG 
DUMMY EQU .+55     I/O ADDRESS OF DUMMY INT. CARD 
IDSDA EQU .+56     DISC ADDR. OF FIRST ID SEGMENT 
IDSDP EQU .+57      -POSITION WITHIN SECTOR 
* 
* DEFINITION OF MEMORY ALLOCATION BASES * 
* 
BPA1  EQU .+58     FWA R/T DISC RES. BP LINK AREA 
BPA2  EQU .+59     LWA R/T DISC RES. BP LINK AREA 
BPA3  EQU .+60     FWA BKG DISC RES. BP LINK AREA 
LBORG EQU .+61     FWA OF RESIDENT LIBRARY AREA 
RTORG EQU .+62     FWA OF REAL-TIME AREA
RTCOM EQU .+63     LENGTH OF REAL TIME COMMON AREA
RTDRA EQU .+64     FWA OF R/T DISC RESIDENT AREA
AVMEM EQU .+65     FWA OF SYSTEM AVAILABLE MEMORY 
BKORG EQU .+66     FWA OF BACKGROUND AREA 
BKCOM EQU .+67     LENGTH OF BACKGROUND COMMON AREA 
BKDRA EQU .+68     FWA OF BKG DISC RESIDENT AREA
* 
* UTILITY PARAMETERS
* 
TATLG EQU .+69     LENGTH OF TRACK ASSIGNMENT TABLE 
TATSD EQU .+70      # OF TRACKS ON SYSTEM DISC
SECT2 EQU .+71      # SECTORS/TRACK ON LU 2 (SYSTEM)
SECT3 EQU .+72      # SECTORS/TRACK ON LU 3 (AUX.)
DSCLB EQU .+73     DISC ADDR OF RES LIB ENTRY PTS 
DSCLN EQU .+74      # OF RES LIB ENTRY POINTS 
DSCUT EQU .+75     DISC ADDR OF RELOC UTILITY PROGS 
DSCUN EQU .+76      # OF RELOC UTILITY PROGS
LGOTK EQU .+77     LOAD-N-GO: LU,STG TRACK,# OF TRKS
LGOC  EQU .+78      CURRENT LGO TRACK/SECTOR ADDRESS
SFCUN EQU .+79     SOURCE FILE LU AND DISC ADDRESS
MPTFL EQU .+80      MEMORY PROTECT ON/OFF FLAG (0/1)
FENCE EQU .+85      MEM PROTECT FENCE ADDRESS 
BKLWA EQU .+87     LWA OF MEMORY IN BACKGROUND
* 
      ORG *         LENGTH OF RTIOC 
      END CIC 
