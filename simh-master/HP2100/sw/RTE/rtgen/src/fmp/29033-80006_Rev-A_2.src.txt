ASMB,B,X,L
*001  SPL, M, O, L
*002        NAME FM.CM(8) 
        NAM FM.CM,8 
.A.     EQU  0
.B.     EQU  1
        ENT FM.ER 
        ENT OPEN. 
        ENT CLOS. 
        ENT IER.
        ENT MSS.
        ENT EC.HO 
        ENT CONV. 
        ENT CAMS. 
        ENT C.BUF 
        ENT .TTY
        ENT CAM.I 
        ENT CAM.O 
        ENT ECH.
        ENT BUF.
        ENT .E.R. 
        ENT .R.E. 
        ENT P.TR
        ENT TMP.
        ENT D.AD
        EXT .ENTR 
        EXT .DIV
        EXT .DRCT 
        EXT EXEC
        EXT WRITF 
        EXT CLOSE 
        EXT OPEN
        EXT TTY.
        EXT N.OPL 
        EXT I.BUF 
        EXT O.BUF 
        EXT FM.AB 
CAMS.   BSS    40 
C.BUF   BSS    40 
CAM.I   BSS   144 
CAM.O   BSS 1 
ECH.    BSS 1 
BUF.    BSS   129 
.E.R.   BSS 1 
SVCOD   BSS 1 
.R.E.   BSS 1 
P.TR    DEF CAMS. 
TMP.    BSS 1 
LST     BSS     2 
SVCO    BSS 1 
S       BSS 1 
LSSC    BSS 1 
SCOD    BSS 1 
NFA     BSS 1 
ECH     BSS 1 
LSDIS   BSS 1 
FM      OCT 043115
        OCT 043522
MS1     OCT 020060
MS2     OCT 030060
NO      BSS 1 
.1      OCT 020040
.3      OCT 026400
.4      OCT 001750
.5      OCT 000001
.6      OCT 000003
.9      OCT 177776
.10     OCT 000002
.11     BSS 1 
.12     OCT 000004
.15     OCT 000000
        OCT 000000
.16     OCT 000410
DCB14   BSS 1 
DCB9    BSS 1 
DCB7    BSS 1 
DCB6    BSS 1 
DCB5    BSS 1 
DCB4    BSS 1 
DCB3    BSS 1 
DCB2    BSS 1 
.17     OCT 000005
.18     DEF CAM.I 
.21     OCT 000000
T       BSS 1 
.28     OCT 157777
.29     BSS 1 
.30     OCT 177774
EQT5    BSS 1 
.31     OCT 000015
EOF     BSS 1 
.36     OCT 037400
.37     OCT 170777
.38     OCT 000100
.39     OCT 000110
.40     OCT 001000
.41     OCT 001100
.42     OCT 003700
.43     OCT 100001
.44     OCT 001717
.48     OCT 177777
.51     OCT 000077
.52     OCT 000700
.53     BSS 1 
.56     OCT 177400
.57     OCT 000011
ILOGV   BSS 1 
.58     OCT 000006
.62     BSS 1 
PR      BSS 1 
.63     OCT 000012
EV      BSS 1 
BF      BSS 1 
NUM     BSS 1 
I       BSS 1 
DI      BSS 1 
.67     OCT 000060
.70     OCT 000377
.TTYV   BSS 1 
.75     OCT 002400
D.ADV   BSS 1 
*003        LET EXEC,WRITF,READF BE SUBROUTINE,EXTERNAL 
*004        LET CLOSE,OPEN         BE SUBROUTINE,EXTERNAL 
*005        LET FM.ER,OPEN.,CLOS.,\ 
*                 IER.,CLO BE SUBROUTINE
*006        LET MSS.                BE SUBROUTINE 
*007        LET EC.HO,CONV.     BE SUBROUTINE 
*008        LET ILOG      BE FUNCTION 
*009        LET CAMS.(40) BE INTEGER,GLOBAL 
*010        LET C.BUF(40) BE INTEGER,GLOBAL 
*011        LET TTY.,N.OPL,I.BUF,O.BUF BE INTEGER,EXTERNAL
*012        LET .TTY            BE FUNCTION 
*013        LET CAM.I              BE INTEGER(144),GLOBAL 
*014        LET CAM.O,ECH.,BUF.(129)  BE INTEGER ,GLOBAL
*015        LET .E.R.     BE INTEGER,GLOBAL  !DEFINE THE ERROR WORD LOCA
*016        LET SVCOD     BE INTEGER
*017        LET .R.E.,P.TR BE INTEGER ,GLOBAL 
*018        LET TMP.      BE INTEGER,GLOBAL 
*019        LET LST(2)    BE INTEGER
*020        LET SVCO      BE INTEGER
*021        LET S,LSSC,SCOD,NFA,ECH,LSDIS BE INTEGER
*022        LET FM.AB    BE LABEL,EXTERNAL
*023        LET XEQT      BE CONSTANT (1717K) 
*024        LET FM(2),MS1,MS2 BE INTEGER
*025        INITIALIZE FM ,  MS1,MS2 TO "FMGR 000"
*026        LET A        BE CONSTANT(0) 
*027        LET B        BE CONSTANT(1) 
*028        INITIALIZE P.TR TO @CAMS. 
*029  ! 
*030  MSS.:  SUBROUTINE(ER,NX)GLOBAL
ER      NOP 
NX      NOP 
MSS.    NOP 
        JSB .ENTR 
        DEF ER
*031  ! 
*032  !     MESSAGE FORMAT: 
*033  !     FMGR XXX
*034  ! 
*035  !     MESSAGE ERROR WORD FORMAT 
*036  !     THE THOUSANDS DIGIT IS USED AS FOLLOWS: 
*037  !     IF ONE OR  THREE THEN TWO MESSAGES ARE TO BE PRINTED
*038  ! 
*039  !     IF ZERO OR TWO THEN ONLY ONE MESSAGE IS PRINTED 
*040  ! 
*041  !     IF ZERO OR ONE THEN SEND THE INPUT DEVICE TO THE LOG UNIT 
*042  !     IF 2 OR 3 LEAVE THE LOG AND INPUT DEVICES AS IT IS
*043        .R.E.,NO_ER  !SAVE ERROR FOR DIAGNOSTIC 
        LDA ER,I
        STA .R.E. 
        STA NO
*044        MS1_20040K !SET SIGN FOR  PLUS
        LDA .1
        STA MS1 
*045        IF NO<0 THEN [NO_ -NO;MS1_26400K]!IF NEG SET TO GIVE SIGN 
        LDB NO
        SSB,RSS 
        JMP MSS01 
        LDB NO
        CMB,INB 
        STB NO
        LDA .3
        STA MS1 
*046  MSS01:DO[S_NO/1000;NO_$B] 
MSS01   LDA NO
        CLB 
        SSA 
        CMB 
        JSB .DIV
        DEF .4
        STA S 
        LDA .5,I
        STA NO
*047  MSS00:CONV.(NO,MS2,3)  !CONVERT THE NUMBER
MSS00   JSB CONV. 
        DEF *+4 
        DEF NO
        DEF MS2 
        DEF .6
*048        FM.ER([IF S>1 THEN 1,ELSE 2],FM,4)
        LDB S 
        ADB .9
        SSB 
        JMP .7
        LDA .5
        JMP .8
.7      LDA .10 
.8      STA .11 
        JSB FM.ER 
        DEF *+4 
        DEF .11 
        DEF FM
        DEF .12 
*049        IF S AND 1 THEN [S_S-1;NO_NX;MS1_20040K;GOTO MSS00]!DO SECON
        LDA S 
        AND .5
        SZA,RSS 
        JMP .13 
        CCA 
        ADA S 
        STA S 
        LDA NX,I
        STA NO
        LDA .1
        STA MS1 
        JMP MSS00 
*050        RETURN
.13     JMP MSS.,I
*051        END 
*052  ! 
*053  !     COMMAND OUTPUT (ERROR) SUBROUTINE 
*054  ! 
*055  FM.ER:SUBROUTINE(SCCOD,BFMS,LN)GLOBAL 
SCCOD   NOP 
BFMS    NOP 
LN      NOP 
FM.ER   NOP 
        JSB .ENTR 
        DEF SCCOD 
*056  ! 
*057  !     FM.ER PRINTS ONLY IF SCCOD IS GREATER THAN OR EQUAL TO
*058  !     THE  SVCOD ENTERED AT TURN ON TIME
*059  ! 
*060  !     IN ADDITION IF THE SCCOD IS IS GREATER THAN 1 CONTROL IS SWI
*061  !     TO THE LOG CHANNEL
*062  ! 
*063        IF SCCOD<SVCOD THEN RETURN !IGNOR IF CODE TOO SMALL 
        LDB SVCOD 
        CMB,INB 
        ADB SCCOD,I 
        SSB 
        JMP FM.ER,I 
*064        IF SCCOD   THEN EC.HO  ! IF ERROR TO BE PRINTED ECHO THE COM
        LDA SCCOD,I 
        SZA,RSS 
        JMP .14 
        JSB EC.HO 
        DEF *+1 
*065        CALL EXEC(2,CAM.O,BFMS,LN)  !PRINT THE ERROR MESSAGE
.14     JSB EXEC
        DEF *+5 
        DEF .10 
        DEF CAM.O 
        DEF BFMS,I
        DEF LN,I
*066        IF SCCOD<2   THEN RETURN
        LDB SCCOD,I 
        ADB .9
        SSB 
        JMP FM.ER,I 
*067        IF ILOG() THEN RETURN !IF ALREADY ON THE LOG RETURN 
        JSB ILOG
        DEF *+1 
        SZA 
        JMP FM.ER,I 
*068  ! 
*069        OPEN.(CAM.I,CAM.O,0.0,410K)!OPEN THE INPUT TO THE LOG DEVICE
        JSB OPEN. 
        DEF *+5 
        DEF CAM.I 
        DEF CAM.O 
        DEF .15 
        DEF .16 
*070        RETURN
        JMP FM.ER,I 
*071        END 
*072  ! 
*073  ! 
*074  OPEN.:SUBROUTINE(DCBRF,LURF,PLIS,OPLST) GLOBAL
DCBRF   NOP 
LURF    NOP 
PLIS    NOP 
OPLST   NOP 
OPEN.   NOP 
        JSB .ENTR 
        DEF DCBRF 
*075        DCB14_[DCB9_[DCB7_[DCB6_[DCB5_[DCB4_[DCB3_[DCB2_@DCBRF+2]+1]
*          +1]+1]+1]+2]+5 
        LDA DCBRF 
        ADA .10 
        STA DCB2
        INA 
        STA DCB3
        INA 
        STA DCB4
        INA 
        STA DCB5
        INA 
        STA DCB6
        INA 
        STA DCB7
        ADA .10 
        STA DCB9
        ADA .17 
        STA DCB14 
*076        IFNOT @DCBRF=@CAM.I THEN GOTO OPN3 ! NOT INPUT UNIT 
        LDA DCBRF 
        CPA .18 
        RSS 
        JMP OPN3
*077        TTY._0  !SET TTY FLAG  TO INDICATE NOT TTY
        CLA 
        STA TTY.
*078        $P.TR_[IF $DCB2 THEN $DCB14,ELSE 0]!SAVE RECORD COUNT IF FIL
        LDA DCB2,I
        SZA,RSS 
        JMP .19 
        LDA DCB14,I 
        JMP .20 
.19     LDA .21 
.20     STA P.TR,I
*079        P.TR_P.TR+1!    SET THE NEXT ADDRESS
        LDA P.TR
        INA 
        STA P.TR
*080        FOR T_@LURF TO  @LURF+2 DO[$P.TR_$T;P.TR_P.TR+1]!STACK THE U
        LDA LURF
        STA T 
        JMP .23 
.22     LDA T 
        INA 
        STA T 
.23     LDA LURF
        ADA .10 
        CMA,INA 
        ADA T 
        CMA,INA 
        SSA 
        JMP OPN3
        LDA T,I 
        STA P.TR,I
        LDA P.TR
        INA 
        STA P.TR
        JMP .22 
*081  OPN3: CLO (DCBRF) !CLOSE THE OLD ONE
OPN3    JSB CLO 
        DEF *+2 
        DEF DCBRF,I 
*082        IF LURF>20000K THEN [OPEN(DCBRF,.E.R.,LURF,OPLST,\ IF FILE T
*                  PLIS,$(@PLIS+1));IF .E.R.<0 THEN [IF @DCBRF=@CAM.I\
*          THEN[P.TR_P.TR-4;$DCB14_$P.TR]];IER.;GO TO OPN2]!OPEN IT 
        LDB LURF,I
        ADB .28 
        SSB 
        JMP .27 
        LDA PLIS
        INA 
        STA .29 
        JSB OPEN
        DEF *+7 
        DEF DCBRF,I 
        DEF .E.R. 
        DEF LURF,I
        DEF OPLST,I 
        DEF PLIS,I
        DEF .29,I 
        LDB .E.R. 
        SSB,RSS 
        JMP .26 
        LDA DCBRF 
        CPA .18 
        RSS 
        JMP .26 
        LDA P.TR
        ADA .30 
        STA P.TR
        LDA P.TR,I
        STA DCB14,I 
.26     JSB IER.
        DEF *+1 
        JMP OPN2
*083        EXEC(13,LURF,EQT5)!  GET STATUS WORD  TYPE CODE 
.27     JSB EXEC
        DEF *+4 
        DEF .31 
        DEF LURF,I
        DEF EQT5
*084        EOF_[IF[EQT5_EQT5 AND 37400K]>7000K THEN 100K,ELSE[\
*          IF EQT5=1000K OR ((OPLST AND 110K)=110K) THEN 1000K,\
*                 ELSE 1100K]]
        LDA EQT5
        AND .36 
        STA EQT5
        ADA .37 
        SSA 
        JMP .34 
        LDA .38 
        JMP .35 
.34     LDB EQT5
        LDA OPLST,I 
        AND .39 
        CPA .39 
        CCA,RSS 
        CLA 
        CPB .40 
        CCB,RSS 
        CLB 
        IOR .B. 
        SZA,RSS 
        JMP .32 
        LDA .40 
        JMP .35 
.32     LDA .41 
.35     STA EOF 
*085  ! 
*086  ! 
*087        $DCB2,$DCB5,DCBRF_0 
        CLA 
        STA DCB2,I
        STA DCB5,I
        STA DCBRF,I 
*088        $DCB3_(OPLST AND 3700K) OR LURF 
        LDA OPLST,I 
        AND .42 
        IOR LURF,I
        STA DCB3,I
*089        $DCB4_EOF OR LURF 
        LDA EOF 
        IOR LURF,I
        STA DCB4,I
*090        $DCB6,$DCB7_100001K 
        LDA .43 
        STA DCB6,I
        STA DCB7,I
*091        $DCB9_$XEQT 
        LDA .44,I 
        STA DCB9,I
*092  OPN2: IF $DCB2 THEN RETURN   !IF NOT TYPE ZERO THEN RETURN
OPN2    LDA DCB2,I
        SZA 
        JMP OPEN.,I 
*093        IF  @DCBRF=@O.BUF THEN[\
*       IF($DCB4 AND 3700K)=1000K THEN[IF OPLST<0 THEN[\
*          WRITF(DCBRF,.E.R.,T,-1);IER.]]]!END FILE IF REASONABLE 
        LDA DCBRF 
        STA .29 
        JSB .DRCT 
        DEF O.BUF 
        CPA .29 
        RSS 
        JMP .47 
        LDA DCB4,I
        AND .42 
        CPA .40 
        RSS 
        JMP .47 
        LDB OPLST,I 
        SSB,RSS 
        JMP .47 
        JSB WRITF 
        DEF *+5 
        DEF DCBRF,I 
        DEF .E.R. 
        DEF T 
        DEF .48 
        JSB IER.
        DEF *+1 
*094        IF @DCBRF=@CAM.I THEN[\ 
*                        TTY._.TTY($DCB3);GO TO OPN4] 
.47     LDA DCBRF 
        CPA .18 
        RSS 
        JMP .49 
        JSB .TTY
        DEF *+2 
        DEF DCB3,I
        STA TTY.
        JMP OPN4
*095        IF @DCBRF=@I.BUF THEN                  \ IF INPUT ON  A ZERO
* [OPN4:    EXEC(3,700K+($DCB3 AND 77K))]  !THEN SET EOT CONDITION
.49     LDA DCBRF 
        STA .29 
        JSB .DRCT 
        DEF I.BUF 
        CPA .29 
        RSS 
        JMP .50 
OPN4    LDA DCB3,I
        AND .51 
        ADA .52 
        STA .53 
        JSB EXEC
        DEF *+3 
        DEF .6
        DEF .53 
*096        RETURN
.50     JMP OPEN.,I 
*097        END 
*098  CLOS.:SUBROUTINE(CLSOP) GLOBAL
CLSOP   NOP 
CLOS.   NOP 
        JSB .ENTR 
        DEF CLSOP 
*099        IF @CLSOP THEN[CLO(CLSOP);RETURN]! IF SPECIFIED CLOSE THE FI
        LDA CLSOP 
        SZA,RSS 
        JMP .54 
        JSB CLO 
        DEF *+2 
        DEF CLSOP,I 
        JMP CLOS.,I 
*100        CLO(I.BUF)!  CLOSE INPUT
.54     JSB CLO 
        DEF *+2 
        DEF I.BUF 
*101        CLO(O.BUF) ! CLOSE OUTPUT 
        JSB CLO 
        DEF *+2 
        DEF O.BUF 
*102        CLO (CAM.I)   !CLOSE CAMMAND
        JSB CLO 
        DEF *+2 
        DEF CAM.I 
*103        RETURN!  RETURN 
        JMP CLOS.,I 
*104        END 
*105  ! 
*106  CLO:  SUBROUTINE(DCB)!CLOSE SUBROUTINE FOR INTERNAL WORK
DCB     NOP 
CLO     NOP 
        JSB .ENTR 
        DEF DCB 
*107        IF DCB AND 177400K THEN CLOSE(DCB,.E.R.) !IF NOT FAKE CLOSE 
        LDA DCB,I 
        AND .56 
        SZA,RSS 
        JMP .55 
        JSB CLOSE 
        DEF *+3 
        DEF DCB,I 
        DEF .E.R. 
*108        $(@DCB+9)_0   !ELSE KILL THE OPEN FLAG
.55     LDA DCB 
        ADA .57 
        CLB 
        STB .A.,I 
*109        RETURN
        JMP CLO,I 
*110        END 
*111  ! 
*112  EC.HO:SUBROUTINE GLOBAL  !TO ECHO COMMANDS
EC.HO   NOP 
        JSB .ENTR 
        DEF EC.HO 
*113        IFNOT ECH. THEN RETURN !IF ALREADY DONE THE RETURN
        LDA ECH.
        SZA,RSS 
        JMP EC.HO,I 
*114        IF ILOG() THEN GO TO ECH0 
        JSB ILOG
        DEF *+1 
        SZA 
        JMP ECH0
*115        CALL EXEC(2,CAM.O,C.BUF,ECH.)!ECHO THE COMMAND
        JSB EXEC
        DEF *+5 
        DEF .10 
        DEF CAM.O 
        DEF C.BUF 
        DEF ECH.
*116  ECH0: ECH._0   !SET THE ECHOED FLAG 
ECH0    CLA 
        STA ECH.
*117      RETURN
        JMP EC.HO,I 
*118        END 
*119  ! 
*120  ! 
*121  ILOG: FUNCTION
ILOG    NOP 
        JSB .ENTR 
        DEF ILOG
*122        DCB9_[DCB3_[DCB2_@CAM.I+2]+1]+6 !SET UP DCB ADDRESSES 
        LDA .18 
        ADA .10 
        STA DCB2
        INA 
        STA DCB3
        ADA .58 
        STA DCB9
*123        IF ($DCB3 AND 77K)=(CAM.O AND 77K) THEN[IFNOT $DCB2\
*                    THEN [IF$DCB9=$XEQT THEN RETURN 1 ]] 
        LDA DCB3,I
        AND .51 
        STA .62 
        LDA CAM.O 
        AND .51 
        CPA .62 
        RSS 
        JMP .61 
        LDA DCB2,I
        SZA 
        JMP .61 
        LDB DCB9,I
        CPB .44,I 
        RSS 
        JMP .61 
        LDA .5
        JMP ILOG,I
*124        RETURN   0
.61     LDA .21 
        JMP ILOG,I
*125        END 
*126  ! 
*127  IER.: SUBROUTINE GLOBAL 
IER.    NOP 
        JSB .ENTR 
        DEF IER.
*128        IF .E.R. =>0 THEN RETURN
        LDB .E.R. 
        SSB,RSS 
        JMP IER.,I
*129        DO[MSS.(.E.R.);GO TO FM.AB] 
        JSB MSS.
        DEF *+2 
        DEF .E.R. 
        JMP FM.AB 
*130        END 
*131  ! 
*132  ! 
*133  ! 
*134  CONV.:SUBROUTINE (NOO,BUF,NDIG) GLOBAL
NOO     NOP 
BUF     NOP 
NDIG    NOP 
CONV.   NOP 
        JSB .ENTR 
        DEF NOO 
*135  !     ROUTINE TO CONVERT NO WITH NDIG DIGITS TO ASC 
*136  !     A T  BUF
*137  ! 
*138  !     BUF  WILL CONTAIN THE LOWEST DIGITS  BUF-1 THE NEXT 
*139  !     LOWEST ETC. 
*140  ! 
*141        PR_10 
        LDA .63 
        STA PR
*142        EV,BF_@BUF
        LDA BUF 
        STA EV
        STA BF
*143        NUM_NOO 
        LDA NOO,I 
        STA NUM 
*144        FOR I_1 TO NDIG DO THRU COV 
        CLA,INA 
        STA I 
        JMP .65 
.64     LDA I 
        INA 
        STA I 
.65     LDB I 
        CMB,INB 
        ADB NDIG,I
        SSB 
        JMP .66 
*145         DO[NUM_NUM/PR;DI_$B+60K] 
        LDA NUM 
        CLB 
        SSA 
        CMB 
        JSB .DIV
        DEF PR
        STA NUM 
        LDA .5,I
        ADA .67 
        STA DI
*146               $BF_[IF EV THEN ($BF AND 177400K)+DI,\ 
*                    ELSE ($BF AND 377K)+(DI-<8)] 
        LDA EV
        SZA,RSS 
        JMP .68 
        LDA BF,I
        AND .56 
        ADA DI
        JMP .69 
.68     LDA BF,I
        AND .70 
        LDB DI
        BLF,BLF 
        ADB .A. 
        LDA .B. 
.69     STA BF,I
*147  COV:                   IF EV THEN EV_0, ELSE\ 
*                              EV,BF_BF-1 
COV     LDA EV
        SZA,RSS 
        JMP .71 
        CLA 
        STA EV
        JMP .72 
.71     CCA 
        ADA BF
        STA EV
        STA BF
.72     JMP .64 
*148        RETURN
.66     JMP CONV.,I 
*149        END 
*150  ! 
*151  ! 
*152  .TTY: FUNCTION(LURR) GLOBAL 
LURR    NOP 
.TTY    NOP 
        JSB .ENTR 
        DEF LURR
*153        EXEC(13,LURR,EQT5)!GET SYS EQT WORD FIVE
        JSB EXEC
        DEF *+4 
        DEF .31 
        DEF LURR,I
        DEF EQT5
*154        IF[T_EQT5 AND 37400K] THEN[IF T#2400K THEN RETURN 0]
        LDA EQT5
        AND .36 
        STA T 
        SZA,RSS 
        JMP .74 
        LDB T 
        CPB .75 
        JMP .74 
        LDA .21 
        JMP .TTY,I
*155        RETURN  1   !IT IS A TTY SO SET TRUE
.74     LDA .5
        JMP .TTY,I
*156        END 
*157  ! 
*158  ! 
*159  D.AD: FUNCTION(X)GLOBAL 
X       NOP 
D.AD    NOP 
        JSB .ENTR 
        DEF X 
*160        RETURN @X 
        LDA X 
        JMP D.AD,I
*161        END 
*162  ! 
*163        END 
        END 
*164        END$
