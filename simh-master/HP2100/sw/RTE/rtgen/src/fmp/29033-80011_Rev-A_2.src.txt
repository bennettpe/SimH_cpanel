ASMB,B,X,L
*001  SPL, L, M, O
*002        NAME IN.IT(8) 
        NAM IN.IT,8 
.A.     EQU  0
.B.     EQU  1
        ENT IN.IT 
        EXT .ENTR 
        EXT .DRCT 
        EXT OPEN. 
        EXT D.RIO 
        EXT MSS.
        EXT TTY.
        EXT PK.DR 
        EXT D.SDR 
        EXT FM.AB 
        EXT INI1. 
        EXT TMP.
        EXT .E.R. 
        EXT CAM.I 
        EXT CAM.O 
        EXT D.LT
        EXT EXEC
        EXT IPUT
        EXT FID.
        EXT .TTY
        EXT IFLG. 
        EXT D.
ADD     BSS 1 
.1      OCT 001717
T1      BSS 1 
T       BSS 1 
.3      BSS 1 
.4      OCT 000001
.5      OCT 000000
.7      OCT 000005
.10     OCT 000003
.11     OCT 177775
.12     OCT 000002
.13     BSS 1 
.14     OCT 000401
.15     OCT 000010
PKDR    BSS 1 
Y       BSS 1 
.16     OCT 001657
D.RTR   BSS 1 
.19     OCT 000014
.20     OCT 000015
.21     OCT 051124
.22     OCT 000016
.23     OCT 177400
.24     OCT 051000
.26     OCT 001755
.27     OCT 177777
.28     OCT 003730
.29     OCT 001656
.30     OCT 001756
.38     OCT 000000
        OCT 000000
.39     OCT 000410
KSUM    BSS 1 
.43     OCT 001650
.44     OCT 176120
.48     OCT 001742
.49     OCT 176013
GENWD   BSS 1 
.50     OCT 000175
LU      BSS 1 
I       BSS 1 
.53     OCT 177776
.55     OCT 000004
.57     BSS 1 
.59     OCT 000007
.60     OCT 077776
.62     BSS 1 
.65     OCT 000006
.68     OCT 157777
MS      BSS 1 
.75     OCT 160000
.79     BSS 1 
*003        LET OPEN.,D.RIO,DR.RD,            CLOS.,MSS.,\
*           EE..      BE SUBROUTINE,EXTERNAL
*004        LET TATPU    BE SUBROUTINE
*005        LET TTY.               BE INTEGER,EXTERNAL
*006        LET PK.DR,D.SDR                  BE INTEGER,EXTERNAL
*007        LET FM.AB     BE LABEL,EXTERNAL 
*008        LET INI1.   BE LABEL,EXTERNAL 
*009        LET TMP.,.E.R.                   BE INTEGER,EXTERNAL
*010        LET CAM.I,CAM.O,D.LT             BE INTEGER,EXTERNAL
*011         LET  EXEC,IPUT      BE SUBROUTINE,EXTERNAL 
*012        LET FID. BE FUNCTION,EXTERNAL 
*013        LET .TTY               BE FUNCTION,EXTERNAL 
*014        LET FM.AB    BE LABEL,EXTERNAL
*015        LET IFLG.              BE INTEGER,EXTERNAL
*016        LET D.        BE INTEGER,EXTERNAL 
*017        LET RT                  BE CONSTANT(51124K) 
*018        LET RNULL               BE CONSTANT(51000K) 
*019        LET A                   BE CONSTANT(0    )
*020         LET B                  BE CONSTANT(1    )
*021         LET READI              BE CONSTANT(1    )
*022        LET TAT                 BE CONSTANT(1656K)
*023        LET TATLG               BE CONSTANT(1755K)
*024        LET TATSD               BE CONSTANT(1756K)
*025        LET XEQT                BE CONSTANT(1717K)
*026         LET WRIT               BE CONSTANT(2    )
*027        LET KEYWD               BE CONSTANT(1657K)
*028        LET BPA1                BE CONSTANT(1742K)
*029        LET DSCUN               BE CONSTANT(1764K)
*030        LET SYSTY               BE CONSTANT(1     ) 
*031        LET EQTA       BE CONSTANT(1650K) 
*032  IN.IT:SUBROUTINE GLOBAL 
IN.IT   NOP 
        JSB .ENTR 
        DEF IN.IT 
*033        IF IFLG. THEN GO TO INITL  !MID LOOP JUMP 
        LDA IFLG. 
        SZA 
        JMP INITL 
*034  ! 
*035  !     SAVE THE PARAMETERS 
*036  ! 
*037        ADD_$XEQT+1  ! SET PARAMETER ADDRESS
        LDA .1,I
        INA 
        STA ADD 
*038        T1,T_@TMP.!SET UP AND GET THE PRAMS 
        JSB .DRCT 
        DEF TMP.
        STA T1
        STA T 
*039         REPEAT 5 TIMES DO[$T_$ADD;T_T+1;ADD_ADD+1] 
        LDA .7
        STA .3
.2      CCA 
        ADA .3
        STA .3
        LDB .3
        SSB 
        JMP .6
        LDA ADD,I 
        STA T,I 
        LDA T 
        INA 
        STA T 
        LDA ADD 
        INA 
        STA ADD 
        JMP .2
*040        $(@.E.R.+1)_[IF [T_$(T1+3)]<3 THEN T,ELSE 2]
.6      LDA T1
        ADA .10 
        LDA .A.,I 
        STA T 
        ADA .11 
        SSA,RSS 
        JMP .8
        LDA T 
        JMP .9
.8      LDA .12 
.9      STA .13 
        JSB .DRCT 
        DEF .E.R. 
        INA 
        LDB .13 
        STB .A.,I 
*041        CAM.O_401K  !SET OUT PUT LU FOR ERRORS
        LDA .14 
        STA CAM.O 
*042        $(T1+8)_0 
        LDA T1
        ADA .15 
        CLB 
        STB .A.,I 
*043  INITL:PKDR_@PK.DR 
INITL   JSB .DRCT 
        DEF PK.DR 
        STA PKDR
*044  ! 
*045  !     IS THE DIRECTORY TRACK ASSIGNED TO D.RTR? 
*046  ! 
*047        Y_$KEYWD      !SET UP TO SEARCH THE ID SEGS 
        LDA .16,I 
        STA Y 
*048  NEXT: D.RTR_$Y     !SET CURRENT ADDRESS 
NEXT    LDA Y,I 
        STA D.RTR 
*049        IF $(D.RTR+12)=D. THEN[\  !CHECK FOR D.RTR
*          IF $(D.RTR+13)=RT THEN[\ 
*              IF($(D.RTR+14) AND 177400K)=RNULL\ 
*                   THEN GO TO FOUND ]] 
        ADA .19 
        LDA .A.,I 
        CPA D.
        RSS 
        JMP .18 
        LDA D.RTR 
        ADA .20 
        LDA .A.,I 
        CPA .21 
        RSS 
        JMP .18 
        LDA D.RTR 
        ADA .22 
        LDA .A.,I 
        AND .23 
        CPA .24 
        JMP FOUND 
*050        IF $[Y_Y+1] THEN GO TO NEXT ! CHECK FOR NEXT ID SEG 
.18     LDA Y 
        INA 
        STA Y 
        LDA .A.,I 
        SZA 
        JMP NEXT
*051         IF $TATLG= -1 THEN IPUT(TATLG,TMP.)
        LDB .26,I 
        CPB .27 
        RSS 
        JMP .25 
        JSB IPUT
        DEF *+3 
        DEF .26 
        DEF TMP.
*052        MSS.(2008)     ! D.RTR NOT FOUND  GIVE UP 
.25     JSB MSS.
        DEF *+2 
        DEF .28 
*053        GO TO EXITA   !TERMIMATE
        JMP EXITA 
*054  ! 
*055  FOUND:IF  $($TAT+$TATSD-1)=D.RTR\  !TRACK ASSIGNED TO D.RTR?? 
*           THEN GO TO PLIST   !YES GO TO PLIST 
FOUND   LDA .29,I 
        ADA .30,I 
        CCB 
        ADB .A. 
        LDB .B.,I 
        CPB D.RTR 
        JMP PLIST 
*056  ! 
*057  !     FIRST ENTRY AFTER DISC LOAD SO ASSIGN ALL TRACKS TO ME
*058  ! 
*059         T_$TAT-[IF $TATLG= -1 THEN $@TMP.,ELSE $TATLG] 
        LDB .26,I 
        CPB .27 
        RSS 
        JMP .31 
        JSB .DRCT 
        DEF TMP.
        LDA .A.,I 
        JMP .32 
.31     LDA .26,I 
.32     CMA,INA 
        ADA .29,I 
        STA T 
*060  ! 
*061        FOR ADD_$TAT TO T DO[IFNOT $ADD THEN\  ASSIGN 
*           IPUT(ADD,$XEQT)] !ALL UNASSIGNED TRACKS 
        LDA .29,I 
        STA ADD 
        JMP .34 
.33     LDA ADD 
        INA 
        STA ADD 
.34     LDB ADD 
        CMB,INB 
        ADB T 
        SSB 
        JMP .35 
        LDA ADD,I 
        SZA 
        JMP .36 
        JSB IPUT
        DEF *+3 
        DEF ADD 
        DEF .1,I
.36     JMP .33 
*062  !     ALL TRACKS ASSIGNED SO IF TATLG IS -1 
*063  !       RESET IT
*064  ! 
*065         IF $TATLG= -1 THEN IPUT(TATLG,TMP.)
.35     LDB .26,I 
        CPB .27 
        RSS 
        JMP .37 
        JSB IPUT
        DEF *+3 
        DEF .26 
        DEF TMP.
*066  ! 
*067  !     READ THE DISC DIRECTORY 
*068  ! 
*069         D.RIO(READI) 
.37     JSB D.RIO 
        DEF *+2 
        DEF .4
*070        OPEN.(CAM.I,SYSTY,0.0,410K)   !OPEN TO SYSTY
        JSB OPEN. 
        DEF *+5 
        DEF CAM.I 
        DEF .4
        DEF .38 
        DEF .39 
*071  ! 
*072  !     FORM THE KEY SUM
*073  ! 
*074  ! 
*075        KSUM_0
        CLA 
        STA KSUM
*076         FOR ADD_EQTA TO KEYWD DO[KSUM_KSUM+$ADD] 
        LDA .43 
        STA ADD 
        JMP .41 
.40     LDA ADD 
        INA 
        STA ADD 
.41     LDB ADD 
        ADB .44 
        SSB,RSS 
        JMP .42 
        LDA KSUM
        ADA ADD,I 
        STA KSUM
        JMP .40 
*077        FOR ADD_BPA1 TO DSCUN DO[KSUM_KSUM+$ADD]
.42     LDA .48 
        STA ADD 
        JMP .46 
.45     LDA ADD 
        INA 
        STA ADD 
.46     LDB ADD 
        ADB .49 
        SSB,RSS 
        JMP .47 
        LDA KSUM
        ADA ADD,I 
        STA KSUM
        JMP .45 
*078        GENWD_@D.SDR+125
.47     JSB .DRCT 
        DEF D.SDR 
        ADA .50 
        STA GENWD 
*079        IF IFLG. THEN GO TO INCH !IF MID OPERATION GO CHECK 
        LDA IFLG. 
        SZA 
        JMP INCH
*080  ! 
*081  !     WAS A SYSTEM SET UP ON THIS DISC? 
*082  ! 
*083        IF KSUM=$GENWD THEN GO TO TATUP !INITILIZED  GO  SET UP 
        LDB KSUM
        CPB GENWD,I 
        JMP TATUP 
*084  ! 
*085  !     NO-FIRST ENTRY- 
*086  !     SET INITIALIZATION FLAGS ETC. 
*087  ! 
*088  INIT0:IFLG._2        !SET UP FOR LU 2 
INIT0   LDA .12 
        STA IFLG. 
*089  ! 
*090  ! 
*091  INIT1:GO TO INI1.   ! GO TO MAIN TO CONTINUE
INIT1   JMP INI1. 
*092  ! 
*093  INCH: IF IFLG.=2 THEN[\ 
*                             IF $TATLG+$TATSD THEN[ \
*                             IFLG._3;GOTO INIT1]]
INCH    LDB IFLG. 
        CPB .12 
        RSS 
        JMP .52 
        LDA .26,I 
        ADA .30,I 
        SZA,RSS 
        JMP .52 
        LDA .10 
        STA IFLG. 
        JMP INIT1 
*094  ! 
*095  !     INITIALIZED - SET UP THE DISC DIRECTORY 
*096  ! 
*097         D.RIO(READI)  ! READ THE DISC DIRECTORY
.52     JSB D.RIO 
        DEF *+2 
        DEF .4
*098        $GENWD_KSUM  !  SET THE KEYSUM
        LDA KSUM
        STA GENWD,I 
*099         D.RIO(WRIT)  !  WRITE IT OUT AGAIN 
        JSB D.RIO 
        DEF *+2 
        DEF .12 
*100  ! 
*101  !     SET UP THE TRACK ASSIGNMENT TABLE 
*102  ! 
*103  ! 
*104  !     SET UP THE TAT USING THE DISC DIRECTORIES TO
*105  !     FIND WHICH TRACKS ARE TO BE ASSIGNED
*106  ! 
*107  TATUP:DO[LU_-2;I_0]!LU2 FIRST 
TATUP   LDA .53 
        STA LU
        CLA 
        STA I 
*108  TATU1:IF FID.(LU)THEN [IF LU= -2 THEN GO TO INIT0,ELSE GO TO EXITA
TATU1   JSB FID.
        DEF *+2 
        DEF LU
        SZA,RSS 
        JMP .54 
        LDB LU
        CPB .53 
        RSS 
        JMP EXITA 
        JMP INIT0 
*109          ADD_[T_$( PKDR +4)]+$TAT+I  !SET TAT ADDRESS
.54     LDA PKDR
        ADA .55 
        LDA .A.,I 
        STA T 
        ADA .29,I 
        ADA I 
        STA ADD 
*110            REPEAT $( PKDR +7)-T TIMES DO \ SET TAT 
*              TATPU(77776K)     !FMP TRACKS
        LDA PKDR
        ADA .59 
        LDA .A.,I 
        CMA,INA 
        ADA T 
        CMA,INA 
        STA .57 
.56     CCA 
        ADA .57 
        STA .57 
        LDB .57 
        SSB 
        JMP .58 
        JSB TATPU 
        DEF *+2 
        DEF .60 
        JMP .56 
*111           REPEAT -$( PKDR +8) TIMES DO \ SET TAT 
*           TATPU( D.RTR)     !DIRECTORY TRACKS 
.58     LDA PKDR
        ADA .15 
        LDA .A.,I 
        CMA,INA 
        STA .62 
.61     CCA 
        ADA .62 
        STA .62 
        LDB .62 
        SSB 
        JMP .63 
        JSB TATPU 
        DEF *+2 
        DEF D.RTR 
        JMP .61 
*112  ! 
*113         IF LU= -2 THEN [LU_-3;I_$TATSD;GOTO TATU1] 
.63     LDB LU
        CPB .53 
        RSS 
        JMP EXITA 
        LDA .11 
        STA LU
        LDA .30,I 
        STA I 
        JMP TATU1 
*114  ! 
*115  !     TAT IS SET UP - RELEASE ALL UNUSED TRACKS 
*116  ! 
*117  EXITA:EXEC(5,-1)
EXITA   JSB EXEC
        DEF *+3 
        DEF .7
        DEF .27 
*118  ! 
*119        EXEC(6)      !RETURN TO SYSTEM
        JSB EXEC
        DEF *+2 
        DEF .65 
*120  ! 
*121  PLIST:IFNOT TMP. THEN TMP._1
PLIST   LDA TMP.
        SZA 
        JMP .66 
        CLA,INA 
        STA TMP.
*122        IF TMP.>20000K THEN[\ 
*          CAM.O_$(T1+4);TTY._0;GO TO PLIS1]
.66     LDB TMP.
        ADB .68 
        SSB 
        JMP .67 
        LDA T1
        ADA .55 
        LDA .A.,I 
        STA CAM.O 
        CLA 
        STA TTY.
        JMP PLIS1 
*123        TTY._.TTY(TMP.)  !CHECK IF DEVICE IS A TTY
.67     JSB .TTY
        DEF *+2 
        DEF TMP.
        STA TTY.
*124  ! 
*125        CAM.O_$(T1+1) 
        LDA T1
        INA 
        LDA .A.,I 
        STA CAM.O 
*126  PLIS1:   MS_[IF TTY. THEN TMP.,ELSE SYSTY]  !SET LOG LU 
PLIS1   LDA TTY.
        SZA,RSS 
        JMP .69 
        LDA TMP.
        JMP .70 
.69     LDA .4
.70     STA MS
*127        IFNOT CAM.O THEN CAM.O_MS 
        LDA CAM.O 
        SZA 
        JMP .71 
        LDA MS
        STA CAM.O 
*128  ! 
*129        IFNOT .TTY(CAM.O)THEN CAM.O_MS    !RESET LOG IF NOT A TTY 
.71     JSB .TTY
        DEF *+2 
        DEF CAM.O 
        SZA 
        JMP .72 
        LDA MS
        STA CAM.O 
*130        OPEN.(CAM.I,TMP.,0.0,410K) ! OPEN INPUT DEVICE
.72     JSB OPEN. 
        DEF *+5 
        DEF CAM.I 
        DEF TMP.
        DEF .38 
        DEF .39 
*131  ! 
*132        TMP._[IF (TMP.<20000K) AND (NOT [T_$(T1+2)]) THEN 6,ELSE T] 
        LDB TMP.
        ADB .75 
        LDA T1
        ADA .12 
        LDA .A.,I 
        STA T 
        CMA 
        SSB,RSS 
        CLB,RSS 
        CCB 
        AND .B. 
        SZA,RSS 
        JMP .73 
        LDA .65 
        JMP .74 
.73     LDA T 
.74     STA TMP.
*133  ! 
*134        GO TO FM.AB 
        JMP FM.AB 
*135        END 
*136  ! 
*137  TATPU:SUBROUTINE(ID)
ID      NOP 
TATPU   NOP 
        JSB .ENTR 
        DEF ID
*138        IF $ADD#ID     THEN[IF $ADD#$XEQT THEN MSS.(1005,ADD-$TAT)\ 
*           , ELSE IPUT(ADD,ID)]
        LDB ADD,I 
        CPB ID,I
        JMP .78 
        LDB ADD,I 
        CPB .1,I
        JMP .76 
        LDA .29,I 
        CMA,INA 
        ADA ADD 
        STA .79 
        JSB MSS.
        DEF *+3 
        DEF .26 
        DEF .79 
        JMP .78 
.76     JSB IPUT
        DEF *+3 
        DEF ADD 
        DEF ID,I
*139        ADD_ADD+1 !SEND ERROR MESSAGE 
.78     LDA ADD 
        INA 
        STA ADD 
*140        RETURN
        JMP TATPU,I 
*141        END 
*142        END 
        END 
*143        END$
