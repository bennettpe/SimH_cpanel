ASMB,B,X,L  
*001  SPL, L, M, O  
*002        NAME IN..(8)
        NAM IN..,8
.A.     EQU  0
.B.     EQU  1
        ENT IN..
        EXT .ENTR 
        EXT .MPY
        EXT .DIV
        EXT .DRCT 
        EXT DR.RD 
        EXT D.RIO 
        EXT MSS.
        EXT NAM.. 
        EXT EXEC
        EXT J.PUT 
        EXT IPUT
        EXT PK.DR 
        EXT D.SDR 
        EXT IFLG. 
        EXT D.LT
        EXT D.LB
        EXT C.BUF 
        EXT DS.DF 
        EXT D.
        EXT DS.LU 
        EXT .E.R. 
        EXT CAM.O 
        EXT NO.RD 
        EXT LOCK. 
        EXT FID.
        EXT MSC.
DDIR    BSS 1 
PDIR2   BSS 1 
PDIR1   BSS 1 
PDIR    BSS 1 
PDIR9   BSS 1 
PDIR8   BSS 1 
PDIR7   BSS 1 
PDIR6   BSS 1 
PDIR5   BSS 1 
PDIR4   BSS 1 
PDIR3   BSS 1 
LIS29   BSS 1 
LIS21   BSS 1 
LIS17   BSS 1 
LIS13   BSS 1 
LIST9   BSS 1 
LIST5   BSS 1 
#1      OCT 000005
#2      OCT 000004
#3      OCT 000010
#4      OCT 177774
#5      OCT 000001
#6      OCT 000002
#7      OCT 026455
T       BSS 1 
#10     OCT 000003
#11     OCT 077400
#12     OCT 020000
#13     OCT 000000
#14     OCT 000176
#15     OCT 000065
#16     OCT 000062
#20     OCT 000064
LIS9    BSS 1 
#22     OCT 000014
AREG    BSS 1 
#26     OCT 177762
#27     BSS 1 
#28     BSS 1 
#35     OCT 177603
LTR     BSS 1 
#38     OCT 001756
#39     OCT 001755
#41     OCT 000066
T1      BSS 1 
T2      BSS 1 
T3      BSS 1 
#43     OCT 000015
#44     OCT 000077
#45     OCT 000031
#49     OCT 001757
#50     OCT 001760
NEW     BSS 1 
TN      BSS 1 
FTR     BSS 1 
ND      BSS 1 
LIS49   BSS 1 
#51     OCT 000024
#59     OCT 000006
SWP     BSS 1 
LAST    BSS 1 
DLB     BSS 1 
TX      BSS 1 
ENDBL   BSS 1 
#67     OCT 177777
#69     OCT 001656
#71     OCT 100000
#72     OCT 000016
#73     OCT 000017
#78     OCT 000012
#79     OCT 177760
#80     OCT 000023
#85     OCT 000020
#86     OCT 177600
BL      BSS 1 
#92     OCT 000074
#93     OCT 035137
#94     OCT 000400
#95     OCT 000044
LN      BSS 1 
#96     OCT 037477
#99     OCT 054505
#100    OCT 047117
#101    OCT 000070
#102    OCT 000067
#103    OCT 000071
#104    OCT 000063
ADD     BSS 1 
#109    OCT 077776
#110    OCT 001717
JER     BSS 1 
X       BSS 1 
#124    OCT 002043
*003  ! 
*004  !     IN.. IS THE RTE FILE MANAGER ACTION ROUTINE 
*005  !     FOR THE IN DIRECTIVE. 
*006  ! 
*007  !     THE IN DIRECTIVE HAS THE FORM:
*008  ! 
*009  !     IN,MSC,CR,LABEL,ILAB,#FT,#DTR,#SEC/TR,BTL 
*010  !PARAMETER 1  5   9    13   17   21    25    29 
*011  ! 
*012  !     OR
*013  ! 
*014  !     IN,MSC--NMSC
*015  ! 
*016  !     W H E R E:
*017  ! 
*018  !     MSC          IS THE TWO CHARACTER MASTER SECURITY CODE
*019  ! 
*020  !     CR           IS EITHER THE CARTRIDGE LABEL(+) OR ITS
*021  !                  LOGICAL UNIT(-)   (MUST BE NUMERIC)
*022  ! 
*023  !     LABEL        IS THE NEW CARTRIDGE LABEL (MUST BE NUMERIC > 0).
*024  ! 
*025  !     ILAB         IS THE CARTRIDGE INFORMATION LABEL (MUST BE ASCII).
*026  ! 
*027  !     #FT          IS THE FIRST FMP TRACK.
*028  ! 
*029  !     #DTR         IS THE NUMBER OF DIRECTORY TRACK 
*030  !                  (NULL (SET TO 1) OR NUMERIC) 
*031  ! 
*032  !     #SEC/TR      IS THE NUMBER OF 64 WORD SECTORS 
*033  !                  PER TRACK (NUMERIC (MAY BE NULL FOR LU2 AND 3)). 
*034  ! 
*035  !     BTL          IS A BAD TRACK LIST - UP TO 6 BAD TRACK NUMBERS. 
*036  ! 
*037  !     NMSC         IS A NEW MASTER SECURITY CODE. 
*038  ! 
*039  !     THE MASTER SECURITY CODE IS SET WHEN LU2 IS FIRST 
*040  !     INITIALIZED AND MUST MATCH THEREAFTER.
*041  ! 
*042        LET DR.RD,D.RIO,MSS.,NAM..,READC,EXEC \ 
*       ,READF,WRITF \
*       ,J.PUT,IPUT,.PARS\
*                    BE SUBROUTINE,EXTERNAL 
*043        LET PK.DR,D.SDR,IFLG.,D.LT,D.LB,C.BUF, \
*       DS.DF,  \ 
*       D.,DS.LU,.E.R.     BE INTEGER,EXTERNAL
*044        LET CAM.O,NO.RD,.E.R.   BE INTEGER,EXTERNAL 
*045        LET PDIRS     BE SUBROUTINE 
*046        LET PTST,GT BE SUBROUTINE 
*047        LET BADTR  BE SUBROUTINE
*048        LET LOCK.     BE SUBROUTINE,EXTERNAL
*049        LET FID.     BE FUNCTION,EXTERNAL 
*050        LET MSC.     BE FUNCTION,EXTERNAL 
*051  ! 
*052  !     CONSTANTS 
*053  ! 
*054        LET YE       BE CONSTANT(54505K)
*055        LET NO       BE CONSTANT(47117K)
*056        LET A        BE CONSTANT(0     )
*057        LET B        BE CONSTANT(1     )
*058        LET WRIT     BE CONSTANT(2     )
*059        LET READI    BE CONSTANT(1     )
*060        LET XEQT     BE CONSTANT(1717K) 
*061        LET SECT2    BE CONSTANT(1757K )
*062        LET SECT3    BE CONSTANT(1760K )
*063        LET TAT      BE CONSTANT(1656K )
*064        LET TATLG    BE CONSTANT(1755K )
*065        LET TATSD    BE CONSTANT(1756K )
*066        LET DMSIN    BE CONSTANT(26455K)
*067  IN..: SUBROUTINE(NCAM,PLIST,MSNO)GLOBAL 
NCAM    NOP 
PLIST   NOP 
MSNO    NOP 
IN..    NOP 
        JSB .ENTR 
        DEF NCAM
*068        LET NCAM,PLIST,MSNO BE INTEGER
*069        DDIR_@D.SDR 
        JSB .DRCT 
        DEF D.SDR 
        STA DDIR
*070        PDIR2_[PDIR1_[PDIR_@PK.DR]+1]+1 
        JSB .DRCT 
        DEF PK.DR 
        STA PDIR
        INA 
        STA PDIR1 
        INA 
        STA PDIR2 
*071        PDIR9_[PDIR8_[PDIR7_[PDIR6_[PDIR5_[PDIR4_[PDIR3_\ 
*          PDIR2+1]+1]+1]+1]+1]+1]+1
        INA 
        STA PDIR3 
        INA 
        STA PDIR4 
        INA 
        STA PDIR5 
        INA 
        STA PDIR6 
        INA 
        STA PDIR7 
        INA 
        STA PDIR8 
        INA 
        STA PDIR9 
*072        LIS29_[LIS21_[LIS17_[LIS13_[LIST9_[LIST5_@PLIST+5]+4]+4]+4]+4]+8
        LDA PLIST 
        ADA #1
        STA LIST5 
        ADA #2
        STA LIST9 
        ADA #2
        STA LIS13 
        ADA #2
        STA LIS17 
        ADA #2
        STA LIS21 
        ADA #3
        STA LIS29 
*073        MSNO_0!    INITILIZE FOR NO ERRORS
        CLA 
        STA MSNO,I
*074  ! 
*075  !     TEST FOR LEGAL PARAMETERS 
*076  ! 
*077        IF NCAM>3 THEN GO TO IN2
        LDA NCAM,I
        ADA #4
        SSA,RSS 
        JMP IN2 
*078        IF NCAM#1 THEN GOTO NOPRM 
        LDA NCAM,I
        CPA #5
        RSS 
        JMP NOPRM 
*079        IF IFLG. THEN GOTO NOPRM
        LDA IFLG. 
        SZA 
        JMP NOPRM 
*080  !     MSC CHANGE? 
*081  ! 
*082        IFNOT MSC.(PLIST) THEN GOTO SCER
        JSB MSC.
        DEF *+2 
        DEF PLIST,I 
        SZA,RSS 
        JMP SCER
*083  ! 
*084        IF $(@PLIST+2)#DMSIN THEN GOTO NOPRM
        LDA PLIST 
        ADA #6
        LDA .A.,I 
        CPA #7
        RSS 
        JMP NOPRM 
*085  ! 
*086        $(DDIR+126)_[IF([T_$(@PLIST+3)]AND 77400K)=20000K THEN 0,ELSE T]
        LDA PLIST 
        ADA #10 
        LDA .A.,I 
        STA T 
        AND #11 
        CPA #12 
        RSS 
        JMP #8
        LDA #13 
        JMP #9
#8      LDA T 
#9      LDB DDIR
        ADB #14 
        STA .B.,I 
*087        D.RIO(WRIT)              !WRITE IT OUT
        JSB D.RIO 
        DEF *+2 
        DEF #6
*088        RETURN                   !RETURN
        JMP IN..,I
*089  ! 
*090  LABER:DO[MSNO_53;RETURN]
LABER   LDA #15 
        STA MSNO,I
        JMP IN..,I
*091  ! 
*092  NOPRM:DO[MSNO_50;RETURN]       !NOT ENOUGH PRAMS - EXIT 
NOPRM   LDA #16 
        STA MSNO,I
        JMP IN..,I
*093  ! 
*094  IN2:  IFNOT IFLG. THEN GOTO IN5!NOT INITIALIZING -JMP 
IN2     LDA IFLG. 
        SZA,RSS 
        JMP IN5 
*095        IF IFLG.=2 THEN[\ 
*       IF PLIST THEN[IF PLIST#3 THEN GOTO SCER] ;\ 
*       $(DDIR+126)_$[DS.DF_@PLIST+1];\SET THE MASTER SECURITY CODE 
*       IFNOT $LIS17 THEN GO TO MSPRM]       !TRACK MUST BE SUPPLIED
        LDA IFLG. 
        CPA #6
        RSS 
        JMP #18 
        LDA PLIST,I 
        SZA,RSS 
        JMP #17 
        LDA PLIST,I 
        CPA #10 
        RSS 
        JMP SCER
#17     LDA PLIST 
        INA 
        STA DS.DF 
        LDB DDIR
        ADB #14 
        LDA .A.,I 
        STA .B.,I 
        LDA LIS17,I 
        SZA,RSS 
        JMP MSPRM 
*096  ! 
*097  ! 
*098        IF IFLG.# -$(LIST5   )THEN[MSNO_52;RETURN]
#18     LDA LIST5,I 
        CMA,INA 
        CPA IFLG. 
        JMP #19 
        LDA #20 
        STA MSNO,I
        JMP IN..,I
*099        IF IFLG.=3 THEN[IFNOT$LIS9  THEN  RETURN] !NO LU 3 RETURN 
#19     LDA IFLG. 
        CPA #10 
        RSS 
        JMP IN5 
        LDA LIS9,I
        SZA,RSS 
        JMP IN..,I
*100  IN5:  IFNOT MSC.(PLIST)THEN GO TO SCER   !CHECK SECURITY
IN5     JSB MSC.
        DEF *+2 
        DEF PLIST,I 
        SZA,RSS 
        JMP SCER
*101  ! 
*102  !     CHECK LABEL PARAMETERS
*103  ! 
*104  ! 
*105  IN6:  IFNOT $(LIST9   )>0 THEN GO TO LABER
IN6     LDA LIST9,I 
        CMA,INA 
        SSA,RSS 
        JMP LABER 
*106  ! 
*107        IF $(@PLIST+12)#3 THEN GO TO LABER
        LDA PLIST 
        ADA #22 
        LDA .A.,I 
        CPA #10 
        RSS 
        JMP LABER 
*108        NAM..($(LIS13    )) 
        JSB NAM.. 
        DEF *+2 
        DEF LIS13,I 
*109        DO[AREG_$A; IF AREG THEN GO TO LABER] 
        LDA #13,I 
        STA AREG
        SZA 
        JMP LABER 
*110  ! 
*111  !     SET UP TO TEST THE REST OF THE PRAMS. 
*112  ! 
*113         FOR T_4 TO 13 DO[PTST($(@PLIST+T*4))]
        LDA #2
        STA T 
        JMP #24 
#23     LDA T 
        INA 
        STA T 
#24     LDA T 
        ADA #26 
        SSA,RSS 
        JMP #25 
        LDA PLIST 
        STA #27 
        LDA T 
        JSB .MPY
        DEF #2
        ADA #27 
        STA #28 
        JSB PTST
        DEF *+2 
        DEF #28,I 
        JMP #23 
*114  ! 
*115         IFNOT$[T_(LIS21    )]THEN $T_1  !MUST HAVE DRTRK 
#25     LDA LIS21 
        STA T 
        LDA .A.,I 
        SZA 
        JMP #29 
        CLA,INA 
        STA T,I 
*116         IFNOT IFLG. THEN GOTO IN7       !IF NOT INIT SKIP
#29     LDA IFLG. 
        SZA,RSS 
        JMP IN7 
*117           IF IFLG.=2 THEN [FOR T_2 TO 124 DO $(DDIR+T)_0;\ 
*              $DDIR_2],ELSE $(DDIR+4)_3 !SET LU IN DISC DIRECTORY
        LDA IFLG. 
        CPA #6
        RSS 
        JMP #33 
        LDA #6
        STA T 
        JMP #31 
#30     LDA T 
        INA 
        STA T 
#31     LDA T 
        ADA #35 
        SSA,RSS 
        JMP #32 
        LDA DDIR
        ADA T 
        CLB 
        STB .A.,I 
        JMP #30 
#32     LDA #6
        STA DDIR,I
        JMP #34 
#33     LDA DDIR
        ADA #2
        LDB #10 
        STB .A.,I 
*118               LTR_[IF IFLG.=2 THEN [$(DDIR+1)_$TATSD-1],\
*                    ELSE[$(DDIR+5)_ -$TATSD -$TATLG-1]]
#34     LDA IFLG. 
        CPA #6
        RSS 
        JMP #36 
        CCA 
        ADA #38,I 
        LDB DDIR
        INB 
        STA .B.,I 
        JMP #37 
#36     LDA #38,I 
        CMA,INA 
        CMA,INA 
        ADA #39,I 
        CMA,INA 
        CCB 
        ADB .A. 
        LDA DDIR
        ADA #1
        STB .A.,I 
        LDA .B. 
#37     STA LTR 
*119  ! 
*120  IN7:  DR.RD(READI,$LIST5     ,0)?[MSNO_54;RETURN] 
IN7     JSB DR.RD 
        DEF *+4 
        DEF #5
        DEF LIST5,I 
        DEF #13 
        SEZ,RSS 
        JMP #40 
        LDA #41 
        STA MSNO,I
        JMP IN..,I
*121  ! 
*122        DO[EXEC(13,$$@DS.LU,T,T1);T1_T1 AND 77K\GET UNIT SELECT CODE
*         ;EXEC(13,2,T,T2);T3_0;IF $TATLG+$TATSD THEN EXEC(13,3,T,T3)]! 
#40     JSB .DRCT 
        DEF DS.LU 
        LDA .A.,I 
        STA #27 
        JSB EXEC
        DEF *+5 
        DEF #43 
        DEF #27,I 
        DEF T 
        DEF T1
        LDA T1
        AND #44 
        STA T1
        JSB EXEC
        DEF *+5 
        DEF #43 
        DEF #6
        DEF T 
        DEF T2
        CLA 
        STA T3
        LDA #39,I 
        ADA #38,I 
        SZA,RSS 
        JMP #42 
        JSB EXEC
        DEF *+5 
        DEF #43 
        DEF #10 
        DEF T 
        DEF T3
*123  ! 
*124        T_@PLIST+25   !SET NO OF SECTORS ADDRESS
#42     LDA PLIST 
        ADA #45 
        STA T 
*125        IF T1=(T2 AND 77K) THEN \ 
*         $T_$SECT2,ELSE[IF T1=(T3 AND 77K   ) THEN \ 
*             $T_$SECT3]   !IF WE DID NOT GET A SECT/TRACK BY NOW 
        LDA T2
        AND #44 
        CPA T1
        RSS 
        JMP #47 
        LDA #49,I 
        STA T,I 
        JMP #48 
#47     LDA T3
        AND #44 
        CPA T1
        RSS 
        JMP #48 
        LDA #50,I 
        STA T,I 
*126        IFNOT $T THEN GOTO MSPRM   ! THEN ERROR 
#48     LDA T,I 
        SZA,RSS 
        JMP MSPRM 
*127          LTR_$$@D.LT 
        JSB .DRCT 
        DEF D.LT
        LDA .A.,I 
        LDA .A.,I 
        STA LTR 
*128        NEW,TN_LTR-[FTR_$LIS17]+1  !SET FIRST TRACK,TOTAL NO. TRACKS
        LDA LIS17,I 
        STA FTR 
        CMA,INA 
        ADA LTR 
        INA 
        STA NEW 
        STA TN
*129        IF TN<[ND_$LIS21      ]THEN GOTO BADPM
        LDA LIS21,I 
        STA ND
        CMA,INA 
        ADA TN
        SSA 
        JMP BADPM 
*130  ! 
*131  ! 
*132  !     CHECK THE BAD TRACKS AND ARRANGE IN ASCENDING ORDER 
*133  ! 
*134        LIS49_[T1_LIS29]+20 
        LDA LIS29 
        STA T1
        ADA #51 
        STA LIS49 
*135        FOR T_LIS29 TO LIS49 BY 4 DO[\
*          IF $T THEN[$T1_$T;T1_T1+1]]
        LDA LIS29 
        STA T 
        JMP #53 
#52     LDA T 
        ADA #2
        STA T 
#53     LDA T 
        CMA,INA 
        ADA LIS49 
        SSA 
        JMP #54 
        LDA T,I 
        SZA,RSS 
        JMP #55 
        LDA T,I 
        STA T1,I
        LDA T1
        INA 
        STA T1
#55     JMP #52 
*136        FOR T_T1 TO LIS29+6 DO[$T_0] ! ZERO THE END OF THE LIST 
#54     LDA T1
        STA T 
        JMP #57 
#56     LDA T 
        INA 
        STA T 
#57     LDA LIS29 
        ADA #59 
        CMA,INA 
        ADA T 
        CMA,INA 
        SSA 
        JMP IN10
        CLA 
        STA T,I 
        JMP #56 
*137  IN10: SWP,LAST_0   !INITILIZE THE SORT
IN10    CLA 
        STA SWP 
        STA LAST
*138        FOR T_LIS29 TO T1-1 DO[\   SWAP LOOP
*          IF $T<LAST THEN[SWP,$(T-1)_$T;$T_LAST];LAST_$T]!SWAP 
        LDA LIS29 
        STA T 
        JMP #61 
#60     LDA T 
        INA 
        STA T 
#61     CCA 
        ADA T1
        CMA,INA 
        ADA T 
        CMA,INA 
        SSA 
        JMP #62 
        LDA LAST
        CMA,INA 
        ADA T,I 
        SSA,RSS 
        JMP #63 
        LDA T,I 
        STA SWP 
        CCB 
        ADB T 
        STA .B.,I 
        LDA LAST
        STA T,I 
#63     LDA T,I 
        STA LAST
        JMP #60 
*139        IF SWP THEN GO TO IN10  !IF NOT IN ORDER THEN GO DO ANOTHER CYCL
#62     LDA SWP 
        SZA 
        JMP IN10
*140  ! 
*141        IFNOT LAST THEN GOTO IN13        !IF NO BAD TRACKS SKIP 
        LDA LAST
        SZA,RSS 
        JMP IN13
*142        IF $(LIS29    )<FTR THEN GOTO BTER
        LDA FTR 
        CMA,INA 
        ADA LIS29,I 
        SSA 
        JMP BTER
*143        IF LAST > LTR-ND THEN GO TO BTER
        LDA ND
        CMA,INA 
        ADA LTR 
        CMA,INA 
        ADA LAST
        CMA,INA 
        SSA 
        JMP BTER
*144  IN13: T3_$$@DS.LU  !SET LU
IN13    JSB .DRCT 
        DEF DS.LU 
        LDA .A.,I 
        LDA .A.,I 
        STA T3
*145        DLB_D.LB      !SET THE LABEL ADDRESS
        LDA D.LB
        STA DLB 
*146        IF IFLG.=2 THEN GOTO IN20 
        LDA IFLG. 
        CPA #6
        JMP IN20
*147  ! 
*148        IF $LIST9=$DLB THEN GO TO IN12!IS SAME LABEL SKIP 
        LDA LIST9,I 
        CPA DLB,I 
        JMP IN12
*149        DR.RD(READI,$LIST9,0)?[DR.RD(READI,$LIST5,0);GO TO IN12]
        JSB DR.RD 
        DEF *+4 
        DEF #5
        DEF LIST9,I 
        DEF #13 
        SEZ,RSS 
        JMP #64 
        JSB DR.RD 
        DEF *+4 
        DEF #5
        DEF LIST5,I 
        DEF #13 
        JMP IN12
*150        DO[MSNO_12;RETURN]!DUPLICATE LABEL ERROR RETURN 
#64     LDA #22 
        STA MSNO,I
        JMP IN..,I
*151  ! 
*152  IN12: IF [TX,NEW_FID. ($(LIST5   ))] THEN GO TO IN20
IN12    JSB FID.
        DEF *+2 
        DEF LIST5,I 
        STA TX
        STA NEW 
        SZA 
        JMP IN20
*153  ! 
*154        LOCK.($LIST5,3)?[RETURN]  ! REQUEST LOCK/ RETURN IF ERROR 
        JSB LOCK. 
        DEF *+3 
        DEF LIST5,I 
        DEF #10 
        SEZ 
        JMP IN..,I
*155  !     A DIRECTORY EXISTS - IS THE NEW PRAM SET
*156  !     COMPATIBLE? 
*157        ENDBL_ -$PDIR8*$PDIR6/2+[IF T3          =2 THEN -1 ,ELSE 0] 
        LDA PDIR8,I 
        CMA,INA 
        JSB .MPY
        DEF PDIR6,I 
        CLB 
        SSA 
        CMB 
        JSB .DIV
        DEF #6
        STA #27 
        LDA T3
        CPA #6
        RSS 
        JMP #65 
        LDA #67 
        JMP #66 
#65     LDA #13 
#66     ADA #27 
        STA ENDBL 
*158  ! 
*159        IF FTR>$(PDIR4 ) THEN GOTO IN15 
        LDA FTR 
        CMA,INA 
        ADA PDIR4,I 
        SSA 
        JMP IN15
*160        IF $(PDIR9 )>(LTR-ND+1)THEN GOTO IN15 
        LDA ND
        CMA,INA 
        ADA LTR 
        INA 
        CMA,INA 
        ADA PDIR9,I 
        CMA,INA 
        SSA 
        JMP IN15
*161  ! 
*162  IN20: IF T3          =2 THEN GT($TAT)  !IF LU TWO OR THREE
IN20    LDA T3
        CPA #6
        RSS 
        JMP #68 
        JSB GT
        DEF *+2 
        DEF #69,I 
*163        IF T3=3 THEN GT($TAT+$TATSD)!GO SET THE TAT 
#68     LDA T3
        CPA #10 
        RSS 
        JMP #70 
        LDA #69,I 
        ADA #38,I 
        STA #27 
        JSB GT
        DEF *+2 
        DEF #27 
*164  !     FULL SPEED AHEAD! 
*165        $PDIR_$(LIS13    )+100000K
#70     LDA LIS13,I 
        ADA #71 
        STA PDIR,I
*166        $(PDIR1 )_$(@PLIST+14)
        LDA PLIST 
        ADA #72 
        LDA .A.,I 
        STA PDIR1,I 
*167        $(PDIR2 )_$(@PLIST+15)
        LDA PLIST 
        ADA #73 
        LDA .A.,I 
        STA PDIR2,I 
*168        $(PDIR3 )_$LIST9
        LDA LIST9,I 
        STA PDIR3,I 
*169        $(PDIR4 )_FTR 
        LDA FTR 
        STA PDIR4,I 
*170        IF NEW THEN [$(PDIR5 )_0;$(PDIR9 )_FTR] 
        LDA NEW 
        SZA,RSS 
        JMP #74 
        CLA 
        STA PDIR5,I 
        LDA FTR 
        STA PDIR9,I 
*171        $(PDIR6 )_$(@PLIST+25)
#74     LDA PLIST 
        ADA #45 
        LDA .A.,I 
        STA PDIR6,I 
*172        $(PDIR7 )_LTR-ND+1
        LDA ND
        CMA,INA 
        ADA LTR 
        INA 
        STA PDIR7,I 
*173        $(PDIR8 )_-ND 
        LDA ND
        CMA,INA 
        STA PDIR8,I 
*174        FOR T_10 TO 15 DO $(PDIR+T)_$(@PLIST+T+19)
        LDA #78 
        STA T 
        JMP #76 
#75     LDA T 
        INA 
        STA T 
#76     LDA T 
        ADA #79 
        SSA,RSS 
        JMP #77 
        LDA PLIST 
        ADA T 
        ADA #80 
        LDB PDIR
        ADB T 
        LDA .A.,I 
        STA .B.,I 
        JMP #75 
*175        IF NEW THEN[FOR T_16 TO 127 DO $(PDIR+T)_0] 
#77     LDA NEW 
        SZA,RSS 
        JMP #84 
        LDA #85 
        STA T 
        JMP #82 
#81     LDA T 
        INA 
        STA T 
#82     LDA T 
        ADA #86 
        SSA,RSS 
        JMP #84 
        LDA PDIR
        ADA T 
        CLB 
        STB .A.,I 
        JMP #81 
*176        BL_0
#84     CLA 
        STA BL
*177  ! 
*178  !     NOW WRITE IT OUT
*179  IN22: DR.RD(WRIT,$LIST5     ,BL)?[GO TO IN25] 
IN22    JSB DR.RD 
        DEF *+4 
        DEF #6
        DEF LIST5,I 
        DEF BL
        SEZ 
        JMP IN25
*180  ! 
*181        FOR T_0 TO 127 DO $(PDIR+T)_0 
        CLA 
        STA T 
        JMP #88 
#87     LDA T 
        INA 
        STA T 
#88     LDA T 
        ADA #86 
        SSA,RSS 
        JMP #89 
        LDA PDIR
        ADA T 
        CLB 
        STB .A.,I 
        JMP #87 
*182        IFNOT NEW THEN [BL,NEW_ENDBL;GOTO IN22]!SET TO ZERO ADDED DIRECT
#89     LDA NEW 
        SZA 
        JMP #90 
        LDA ENDBL 
        STA BL
        STA NEW 
        JMP IN22
*183        DO[BL_BL+1;GO TO IN22]!ZERO THE NEXT BLOCK
#90     LDA BL
        INA 
        STA BL
        JMP IN22
*184  ! 
*185  IN25: $DLB_$LIST9             !SET THE DIRECTORY LABEL WORD 
IN25    LDA LIST9,I 
        STA DLB,I 
*186  IN30: D.RIO(WRIT);
IN30    JSB D.RIO 
        DEF *+2 
        DEF #6
*187                        IFNOT IFLG. THEN LOCK.($LIST9,5) !RELEASE LOCK
        LDA IFLG. 
        SZA 
        JMP #91 
        JSB LOCK. 
        DEF *+3 
        DEF LIST9,I 
        DEF #1
*188        EXEC(5,-1)      !RETURN ANY LEFT OVER TRACKS
#91     JSB EXEC
        DEF *+3 
        DEF #1
        DEF #67 
*189        RETURN                           !WE DID IT - EXIT
        JMP IN..,I
*190  ! 
*191  IN15: MSS.(60); 
IN15    JSB MSS.
        DEF *+2 
        DEF #92 
*192                     EXEC(2,CAM.O,35137K,1)     ; 
        JSB EXEC
        DEF *+5 
        DEF #6
        DEF CAM.O 
        DEF #93 
        DEF #5
*193                                                     \ SEND COLON PROMPT
*                EXEC(1,CAM.O OR 400K,C.BUF,36);
        LDA CAM.O 
        IOR #94 
        STA #27 
        JSB EXEC
        DEF *+5 
        DEF #5
        DEF #27 
        DEF C.BUF 
        DEF #95 
*194                                                LN_$1 
        LDA #5,I
        STA LN
*195        IF LN<1 THEN GOTO IN15
        ADA #67 
        SSA 
        JMP IN15
*196        $(@C.BUF+LN)_0    !SET UP THE       BUFFER FOR POSSIBLE ?? CALL 
        JSB .DRCT 
        DEF C.BUF 
        ADA LN
        CLB 
        STB .A.,I 
*197        IF C.BUF=YE THEN[NEW_1; GO TO IN20], ELSE [   \ 
*                 IF C.BUF=NO THEN [IF IFLG. THEN GOTO MSPRM,\
*                    ELSE GOTO IN30],ELSE[IF C.BUF="??" THEN[\
*                                       NO.RD_1;RETURN],ELSE\ 
*                                          GO TO IN15]] 
        LDA C.BUF 
        CPA #99 
        RSS 
        JMP #98 
        CLA,INA 
        STA NEW 
        JMP IN20
#98     LDA C.BUF 
        CPA #100
        RSS 
        JMP #97 
        LDA IFLG. 
        SZA,RSS 
        JMP IN30
        JMP MSPRM 
#97     LDA C.BUF 
        CPA #96 
        RSS 
        JMP IN15
        CLA,INA 
        STA NO.RD 
        JMP IN..,I
*198  ! 
*199  BADPM:DO[MSNO_56;RETURN]
BADPM   LDA #101
        STA MSNO,I
        JMP IN..,I
*200  ! 
*201  MSPRM:DO[MSNO_55;RETURN]
MSPRM   LDA #102
        STA MSNO,I
        JMP IN..,I
*202  ! 
*203  BTER: DO[MSNO_57;RETURN]
BTER    LDA #103
        STA MSNO,I
        JMP IN..,I
*204  SCER: MSNO_51 
SCER    LDA #104
        STA MSNO,I
*205        RETURN
        JMP IN..,I
*206        END 
*207  PTST: SUBROUTINE(PTR) 
PTR     NOP 
PTST    NOP 
        JSB .ENTR 
        DEF PTR 
*208  ! 
*209        IF PTR=3 THEN GOTO BADPM         !MUST NOT BE ASCII 
        LDA PTR,I 
        CPA #10 
        JMP BADPM 
*210  ! 
*211  ! 
*212        IF $(@PTR+1)<0 THEN GOTO BADPM   !IF <0 - BAD NEWS
        LDA PTR 
        INA 
        LDA .A.,I 
        SSA 
        JMP BADPM 
*213  ! 
*214        RETURN                           !OK !RETURN
        JMP PTST,I
*215        END 
*216  ! 
*217  GT:   SUBROUTINE(TRLOC) 
TRLOC   NOP 
GT      NOP 
        JSB .ENTR 
        DEF TRLOC 
*218  !     SUBROUTINE TO CHECK ON TRACK ASSIGNMENTS FOR
*219  !     CHANGES TO THE SYSTEM OR AUX DISC FILE AREAS
*220  ! 
*221        IF IFLG. THEN RETURN  !  IF INIT THE LET MAIN DO IT 
        LDA IFLG. 
        SZA 
        JMP GT,I
*222        IF TX  THEN GO TO TRASN ! NEW SO GO GET ALL THE TRACKS
        LDA TX
        SZA 
        JMP TRASN 
*223        IF FTR<[T_$(PDIR4 )] THEN GO TO TRASN ! IF LARGER AREA GET TR 
        LDA PDIR4,I 
        STA T 
        CMA,INA 
        ADA FTR 
        SSA 
        JMP TRASN 
*224  ! 
*225  !     RETURN THE LEFT OVER TRACKS 
*226        FOR ADD_T TO FTR-1 DO[T1_ADD+TRLOC;\
*            IF $T1=77776K THEN IPUT(T1,$XEQT)] 
        LDA T 
        STA ADD 
        JMP #106
#105    LDA ADD 
        INA 
        STA ADD 
#106    CCA 
        ADA FTR 
        CMA,INA 
        ADA ADD 
        CMA,INA 
        SSA 
        JMP #107
        LDA ADD 
        ADA TRLOC,I 
        STA T1
        LDA T1,I
        CPA #109
        RSS 
        JMP #108
        JSB IPUT
        DEF *+3 
        DEF T1
        DEF #110,I
#108    JMP #105
*227        EXEC(5,-1)   !RETURN THE TRACKS 
#107    JSB EXEC
        DEF *+3 
        DEF #1
        DEF #67 
*228        RETURN    !AND RETURN 
        JMP GT,I
*229  ! 
*230  TRASN:T1_FTR+TRLOC  !SET UP FIRST AND LAST ADDRESSES
TRASN   LDA FTR 
        ADA TRLOC,I 
        STA T1
*231        T2_[IF TX THEN LTR,ELSE T-1]+TRLOC
        LDA TX
        SZA,RSS 
        JMP #111
        LDA LTR 
        JMP #112
#111    CCA 
        ADA T 
#112    ADA TRLOC,I 
        STA T2
*232        FOR ADD_T2 TO T1 BY -1 DO[J.PUT(ADD,$XEQT,JER);\
*         IF JER THEN BADTR]
        STA ADD 
        JMP #114
#113    LDA ADD 
        ADA #67 
        STA ADD 
#114    LDA T1
        CMA,INA 
        ADA ADD 
        SSA 
        JMP #115
        JSB J.PUT 
        DEF *+4 
        DEF ADD 
        DEF #110,I
        DEF JER 
        LDA JER 
        SZA,RSS 
        JMP #116
        JSB BADTR 
        DEF *+1 
#116    JMP #113
*233  ! 
*234        FOR ADD_T1 TO T2 DO[IF $ADD=$XEQT THEN IPUT(ADD,77776K)]
#115    LDA T1
        STA ADD 
        JMP #118
#117    LDA ADD 
        INA 
        STA ADD 
#118    LDA ADD 
        CMA,INA 
        ADA T2
        SSA 
        JMP #119
        LDA ADD,I 
        CPA #110,I
        RSS 
        JMP #120
        JSB IPUT
        DEF *+3 
        DEF ADD 
        DEF #109
#120    JMP #117
*235        RETURN
#119    JMP GT,I
*236        END 
*237  BADTR:SUBROUTINE
BADTR   NOP 
        JSB .ENTR 
        DEF BADTR 
*238        T_ADD-TRLOC  !CHECK IF UNAVAILABLE TRACK IS ALSO BAD
        LDA TRLOC,I 
        CMA,INA 
        ADA ADD 
        STA T 
*239        FOR X_LIS29 TO LIS49 BY 4 DO[IF $X=T THEN RETURN] 
        LDA LIS29 
        STA X 
        JMP #122
#121    LDA X 
        ADA #2
        STA X 
#122    LDA X 
        CMA,INA 
        ADA LIS49 
        SSA 
        JMP #123
        LDA X,I 
        CPA T 
        JMP BADTR,I 
        JMP #121
*240        MSS.(1059,T) !NOT FOUND SO BAD TRACK ERROR OR TRACK NOT AVAILABL
#123    JSB MSS.
        DEF *+3 
        DEF #124
        DEF T 
*241        GO TO IN30  !GO EXIT
        JMP IN30
*242        END 
*243        END 
        END 
