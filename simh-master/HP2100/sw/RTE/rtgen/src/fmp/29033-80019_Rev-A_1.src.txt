ASMB,B,X,L
*001  SPL, M, O, L
*002        NAME RP..(8)
        NAM RP..,8
.A.     EQU  0
.B.     EQU  1
        ENT RP..
        EXT .ENTR 
        EXT .DRCT 
        EXT BUF.
        EXT I.BUF 
        EXT .E.R. 
        EXT N.OPL 
        EXT IER.
        EXT LOCF
        EXT READF 
        EXT OPEN. 
        EXT IPUT
        EXT MSS.
        EXT ID.A
        EXT D.AD
EQTA    OCT 001650
KEYWD   OCT 001657
BPA1    OCT 001742
DSCUN   OCT 001764
NAM     BSS 1 
LIS4    BSS 1 
FYN     BSS 1 
.1      OCT 000003
.3      OCT 000062
TR      BSS 1 
.4      OCT 000027
ID2     BSS 1 
.9      OCT 000004
.10     OCT 003731
.11     OCT 000016
ID27    BSS 1 
ID18    BSS 1 
ID16    BSS 1 
ID15    BSS 1 
ID14    BSS 1 
ID13    BSS 1 
ID9     BSS 1 
.12     OCT 000007
.13     OCT 000002
.14     OCT 000011
BF      BSS 1 
T       BSS 1 
.15     OCT 000001
.19     OCT 000036
IR      BSS 1 
LU      BSS 1 
TY      BSS 1 
.21     OCT 100000
.22     OCT 000020
.23     OCT 000200
SUM     BSS 1 
.27     OCT 000033
ADD     BSS 1 
.32     BSS 1 
.36     DEF .29 
.37     DEF .28 
.38     DEF .30 
.39     OCT 000023
.43     OCT 001756
.44     OCT 000000
.45     BSS 1 
.46     OCT 077600
.47     OCT 001656
.48     OCT 000021
.50     OCT 010000
.51     OCT 000022
.52     OCT 000014
.56     OCT 000031
.59     OCT 177400
.60     BSS 1 
*003  !     RP IS A MODULE OF FMGR A
*004  !      MODULE OF THE RTE FMP. 
*005  ! 
*006  !     IT SETS UP A PROGRAM FOR
*007  !     EXECUTION FROM A FILE.
*008  ! 
*009  !     THIS MODULE IS ENETERED AS
*010  !     A RESULT OF THE COMMAND:
*011  !     RP, NAMR, NAME2 
*012  !     WHERE:
*013  !        NAMR IS A NAME REFERENCE 
*014  !        AND
*015  !        NAME2 IS A PROGRAM NAME
*016  !              OF A SYSTEM PROGRAM
*017  !              WHOSE ID SEGMENT IS
*018  !              TO BE REPLACED BY THE
*019  !              NAMR S ID SEGMENT
*020  !              NAME2  MUST HAVE BEEN
*021  !              SET UP BY THIS 
*022  !              ROUTINE AND MUST BE
*023  !              DOMANT.
*024  ! 
*025  !     DEFINE EXTERNALS
*026  ! 
*027        LET BUF.,I.BUF,.E.R.,\
*           N.OPL                    BE INTEGER,EXTERNAL
*028        LET IER.,LOCF,READF,OPEN.,\ 
*            IPUT,MSS.    \ 
*                               BE SUBROUTINE,EXTERNAL
*029  ! 
*030        LET ID.A,D.AD      BE FUNCTION,EXTERNAL 
*031  ! 
*032  !     DEFINE CONSTANSTS 
*033  ! 
*034        LET EQTA,KEYWD,BPA1,DSCUN BE INTEGER
*035        INITIALIZE EQTA,KEYWD,BPA1,DSCUN TO 1650K,1657K,1742K,1764K 
*036        LET TATSD  BE CONSTANT (1756K)
*037        LET TAT       BE CONSTANT    (1656K)
*038  ! 
*039  RP..: SUBROUTINE (NO,LIS,ER) GLOBAL 
NO      NOP 
LIS     NOP 
ER      NOP 
RP..    NOP 
        JSB .ENTR 
        DEF NO
*040  ! 
*041        NAM_[LIS4_ [FYN_ @LIS+1] +3]+1
        LDA LIS 
        INA 
        STA FYN 
        ADA .1
        STA LIS4
        INA 
        STA NAM 
*042        IFNOT LIS THEN[IFNOT $LIS4 THEN[ER_50;RETURN],ELSE GOTO RP1]
        LDA LIS,I 
        SZA 
        JMP .2
        LDA LIS4,I
        SZA 
        JMP RP1 
        LDA .3
        STA ER,I
        JMP RP..,I
*043  ! 
*044        TR_ID.A($FYN)?[GO TO RP1] !CHECK FOR DOUBLY DEFINED 
.2      JSB ID.A
        DEF *+2 
        DEF FYN,I 
        SEZ 
        JMP RP1 
        STA TR
*045        DO[ER_23;RETURN] !NAME ALREADY IN SOME IDSEGMENT
        LDA .4
        STA ER,I
        JMP RP..,I
*046  ! 
*047  RP1:  ID2_ ID.A($NAM)?[IF LIS THEN [IF $NAM THEN[NAM_NAM+4; \ 
*                            MSS.(2009);GO TO RP1],ELSE ER_14],\
*                                   ELSE ER_2009;RETURN]+1
RP1     JSB ID.A
        DEF *+2 
        DEF NAM,I 
        SEZ,RSS 
        JMP .8
        LDA LIS,I 
        SZA,RSS 
        JMP .6
        LDA NAM,I 
        SZA,RSS 
        JMP .5
        LDA NAM 
        ADA .9
        STA NAM 
        JSB MSS.
        DEF *+2 
        DEF .10 
        JMP RP1 
.5      LDA .11 
        STA ER,I
        JMP .7
.6      LDA .10 
        STA ER,I
.7      JMP RP..,I
.8      INA 
        STA ID2 
*048        ID27_[ID18_[ID16_[ID15_[ID14_[ID13_[ID9_ID2+7]+\
*                     4]+1]+1]+1]+2]+9
        ADA .12 
        STA ID9 
        ADA .9
        STA ID13
        INA 
        STA ID14
        INA 
        STA ID15
        INA 
        STA ID16
        ADA .13 
        STA ID18
        ADA .14 
        STA ID27
*049        BF_@I.BUF 
        JSB .DRCT 
        DEF I.BUF 
        STA BF
*050        TR_0
        CLA 
        STA TR
*051        FOR T_BF TO BF+30 DO $T_0 
        LDA BF
        STA T 
        JMP .17 
.16     LDA T 
        INA 
        STA T 
.17     LDA BF
        ADA .19 
        CMA,INA 
        ADA T 
        CMA,INA 
        SSA 
        JMP .18 
        CLA 
        STA T,I 
        JMP .16 
*052        IFNOT LIS THEN GO TO RP4
.18     LDA LIS,I 
        SZA,RSS 
        JMP RP4 
*053  ! 
*054  RP2:  OPEN. (I.BUF, $ FYN,N.OPL,4)
RP2     JSB OPEN. 
        DEF *+5 
        DEF I.BUF 
        DEF FYN,I 
        DEF N.OPL 
        DEF .9
*055        LOCF (I.BUF,.E.R.,IR,IR,IR,IR,LU,TY)
        JSB LOCF
        DEF *+9 
        DEF I.BUF 
        DEF .E.R. 
        DEF IR
        DEF IR
        DEF IR
        DEF IR
        DEF LU
        DEF TY
*056        IF LU=2 THEN GO TO RP3
        LDB LU
        CPB .13 
        JMP RP3 
*057        IF LU=3 THEN [TR_100000K;GO TO RP3] 
        LDB LU
        CPB .1
        RSS 
        JMP .20 
        LDA .21 
        STA TR
        JMP RP3 
*058  ! 
*059        ER_16     !  FILE NOT ON LU2 OR 3 
.20     LDA .22 
        STA ER,I
*060        RETURN  !  SO ERROR 
        JMP RP..,I
*061  ! 
*062  RP3:  READF (I.BUF,.E.R.,BUF.,128)
RP3     JSB READF 
        DEF *+5 
        DEF I.BUF 
        DEF .E.R. 
        DEF BUF.
        DEF .23 
*063        IER.
        JSB IER.
        DEF *+1 
*064  ! 
*065        SUM_0 
        CLA 
        STA SUM 
*066        FOR  T_[BF_D.AD(BUF.)] TO  BF+27        DO \
*                             SUM_SUM +$T 
        JSB D.AD
        DEF *+2 
        DEF BUF.
        STA BF
        STA T 
        JMP .25 
.24     LDA T 
        INA 
        STA T 
.25     LDA BF
        ADA .27 
        CMA,INA 
        ADA T 
        CMA,INA 
        SSA 
        JMP .26 
        LDA SUM 
        ADA T,I 
        STA SUM 
        JMP .24 
*067  ! 
*068        IF  $T# SUM THEN GO TO CORUP !BAD SUM 
.26     LDB T,I 
        CPB SUM 
        RSS 
        JMP CORUP 
*069  ! 
*070        SUM_0 
        CLA 
        STA SUM 
*071  ! 
*072        FOR ADD_EQTA TO KEYWD,BPA1 TO DSCUN DO  SUM_ SUM+$ADD 
        LDA EQTA
        STA ADD 
        LDA .36 
        STA .32 
        JMP .32,I 
.28     LDA ADD 
        INA 
        STA ADD 
.29     LDA .37 
        STA .32 
        LDB ADD 
        CMB,INB 
        ADB KEYWD 
        SSB 
        JMP .33 
        JMP .34 
.33     LDA BPA1
        STA ADD 
        JMP .31 
.30     LDA ADD 
        INA 
        STA ADD 
.31     LDA .38 
        STA .32 
        LDB ADD 
        CMB,INB 
        ADB DSCUN 
        SSB 
        JMP .35 
.34     LDA SUM 
        ADA ADD,I 
        STA SUM 
        JMP .32,I 
*073        IF $(T+1)=SUM THEN GO TO RP4
.35     LDA T 
        INA 
        LDA .A.,I 
        CPA SUM 
        JMP RP4 
*074  ! 
*075  CORUP:DO [ER_19; RETURN]! CORRUPT  FILE - RETURN
CORUP   LDA .39 
        STA ER,I
        JMP RP..,I
*076  ! 
*077  RP4:  IFNOT [T_$ID13] THEN GO TO SETUP
RP4     LDA ID13,I
        STA T 
        SZA,RSS 
        JMP SETUP 
*078  !     IS CURRENT PROG ON A FILE TRACK?
*079        IF         $([IF $ID27<0 THEN $TATSD,\
*                    ELSE 0] +(($ID27 AND 77600K)\
*                      -<9) + $TAT)<0 THEN [ER_17;\ 
*                           RETURN] 
        LDB ID27,I
        SSB,RSS 
        JMP .40 
        LDA .43,I 
        JMP .41 
.40     LDA .44 
.41     STA .45 
        LDA ID27,I
        AND .46 
        ALF,ALF 
        RAL 
        ADA .45 
        ADA .47,I 
        LDA .A.,I 
        SSA,RSS 
        JMP .42 
        LDA .48 
        STA ER,I
        JMP RP..,I
*080  ! 
*081  !     YES  -   SO  WE  MIGHT  BE  ABLE  TO
*082  !              USE IT - PROG MUST 
*083  !              ALSO   BE  DORMANT 
*084  ! 
*085        IPUT ( ID13,0)   !  MARK ID AS OURS.
.42     JSB IPUT
        DEF *+3 
        DEF ID13
        DEF .44 
*086  ! 
*087        IF $ ID9 +$ ID16 +($ID18 AND 10000K) THEN \ 
*                [IPUT ( ID13,T);ER_18;RETURN]
        LDA ID9,I 
        ADA ID16,I
        STA .45 
        LDA ID18,I
        AND .50 
        ADA .45 
        SZA,RSS 
        JMP SETUP 
        JSB IPUT
        DEF *+3 
        DEF ID13
        DEF T 
        LDA .51 
        STA ER,I
        JMP RP..,I
*088  ! 
*089  !     IT IS DORMANT - SO CONTINUE.
*090  ! 
*091  SETUP:$( BF +12)_0 ! ZERO FIRST NAME WORD 
SETUP   LDA BF
        ADA .52 
        CLB 
        STB .A.,I 
*092  ! 
*093  !     MOVE THE NEW ID SEGMENT IN
*094  !     TO THE SYSTEM AREA. 
*095        IR_ID2
        LDA ID2 
        STA IR
*096        FOR  T_BF+1 TO BF +25 DO[IPUT( IR,$T);\ 
*                     IR_IR+1]
        LDA BF
        INA 
        STA T 
        JMP .54 
.53     LDA T 
        INA 
        STA T 
.54     LDA BF
        ADA .56 
        CMA,INA 
        ADA T 
        CMA,INA 
        SSA 
        JMP .55 
        JSB IPUT
        DEF *+3 
        DEF IR
        DEF T,I 
        LDA IR
        INA 
        STA IR
        JMP .53 
*097        LU,IR_0 
.55     CLA 
        STA LU
        STA IR
*098        IFNOT LIS THEN [FYN_BF;GO TO RP5] 
        LDA LIS,I 
        SZA 
        JMP .57 
        LDA BF
        STA FYN 
        JMP RP5 
*099  ! 
*100        T_[IR_[LU_D.AD(I.BUF)+3]+1]+4 
.57     JSB D.AD
        DEF *+2 
        DEF I.BUF 
        ADA .1
        STA LU
        INA 
        STA IR
        ADA .9
        STA T 
*101        IR_$IR+2 !SET SECTOR IN IR
        LDA IR,I
        ADA .13 
        STA IR
*102        LU_$LU  !SET TRACK IN LU
        LDA LU,I
        STA LU
*103        IFNOT IR<$T THEN[IR_0;LU_LU+1] !IF END OF TRACK ADJUST
        LDB T,I 
        CMB,INB 
        ADB IR
        SSB 
        JMP RP5 
        CLA 
        STA IR
        LDA LU
        INA 
        STA LU
*104  ! 
*105  RP5:  IPUT ( ID27,TR+(LU-<7)+IR)  !SET DISC ADDRESS 
RP5     LDA LU
        ALF 
        ALF,RAR 
        ADA TR
        ADA IR
        STA .45 
        JSB IPUT
        DEF *+3 
        DEF ID27
        DEF .45 
*106  ! 
*107  ! 
*108        IR_[LU_FYN+1]+1 
        LDA FYN 
        INA 
        STA LU
        INA 
        STA IR
*109  ! 
*110        IPUT ( ID14, $LU ) ! SET NAME 3,4 
        JSB IPUT
        DEF *+3 
        DEF ID14
        DEF LU,I
*111  ! 
*112        IPUT (  ID15, ($IR AND 177400K)+ ($ID15  \
*                        AND 7) + 200K)  !  5,TYPE
        LDA IR,I
        AND .59 
        STA .45 
        LDA ID15,I
        AND .12 
        ADA .45 
        ADA .23 
        STA .60 
        JSB IPUT
        DEF *+3 
        DEF ID15
        DEF .60 
*113  ! 
*114        IPUT ( ID13,$ FYN) ! SET NAME 1,2 
        JSB IPUT
        DEF *+3 
        DEF ID13
        DEF FYN,I 
*115  ! 
*116        IFNOT LIS THEN IPUT(ID15,0) 
        LDA LIS,I 
        SZA 
        JMP .61 
        JSB IPUT
        DEF *+3 
        DEF ID15
        DEF .44 
*117        RETURN
.61     JMP RP..,I
*118        END 
*119        END 
        END 
*120        END$
