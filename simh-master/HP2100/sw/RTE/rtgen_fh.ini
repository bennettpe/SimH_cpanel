set console -q -n log=log.txt 

; set debug -n -q debug.txt
; set debug stdout

; set clk debug=CSRW;PSERV;IOBUS
; set tty debug=CSRW;SERV;PSERV;XFER;IOBUS
; set ptr debug=SERV;XFER;IOBUS
; set ptp debug=CSRW;SERV;XFER;IOBUS
; set cpu debug=INSTR;DATA;FETCH;REG;OPNDEXEC;NOOS
; set mp  debug=IOBUS
; set drc debug=IOBUS

echo
echo ***
echo *** RTE FH (Fixed Head) Operating System (1971) 
echo *** Generation
echo ***
echo

; generates a new RTE system
;
; Sw installed:
;   EDIT       - Editor
;   ALGOL      - Algol Compiler
;   ASMB, XREF - Assembler
;   FTN        - Fortran II
;

set cpu 2116

set cpu 32k
SET CPU EAU

set ptr sc=10
set clk sc=11
set tty sc=16
set ptp sc=17
set lpt sc=20

set tty autolf
send after=200k
send delay=30k

; 12606B Fixed Head Disk Controller (DRC, DRD) with 2774A Disk (768KW)

set dpd dis
set dpc dis

SET drc 768K		
set drc sc=22
set drc ena
att drc -n -q tmp.RTE_FH.disc

; Load and configure 24K console SIO driver as SC 16
att ptr -q rtgen/sio/29100-60017_A_24K_SIO_TTY.abs
boot ptr
deposit S 16
deposit P 2
go

; Load and configure 24K paper tape reader SIO driver as SC 10
att ptr -q rtgen/sio/29100-60019_A_24K_SIO_RDR.abs
boot ptr
deposit S 10
deposit P 2
go

; Load and configure 24K paper tape punch SIO driver as SC 17
; load rtgen/sio/29100-60020_A_24K_SIO_PUNCH.abs
; deposit S 17
; deposit P 2
; go

; load RTGEN     29015-60001 B     FH-RTGEN REAL TIME SYSTEM GENERATOR

att ptr -q rtgen/29015-60001_B_FH-RTGEN.abs
boot ptr

; initialization phase

d s 0
d p 100
go until "FH DISC CHNL?" 
send "22\r"
go until "SYS DISC SIZE?" 
send "96\r"
go until "START SCRATCH?" 
send "0\r"
go until "NO. PROTECTED?" 
send "0\r"
go until "SECTORS/TRACK?" 
send "128\r"
go until "AUX DISC SIZE?" 
send "0\r"
go until "TBG CHNL?" 
send "11\r"
go until "PRIV. INT. CARD ADDR?" 
send "0\r"
go until "SWAPPING?" 
send "YES\r"
go until "LWA MEM?" 
send "77677\r"
go until "PRGM INPT?" 
send "PT\r"
go until "LIBR INPT?" 
send "PT\r"
go until "PRAM INPT?" 
send "TY\r"
go

; program input phase: Now load rel files for RTE

goto start_module_load

:load_module
echo ---> Load Module %1
att ptr -q rtgen/%1
d s 0
expect "ERR" goto load_err
go
noexpect
return

:load_err
go until "\n"
echo
echo ERROR! *** Paper tape load error
echo .      *** Press Enter to quit
set env -p "      " a
echo
bye
return

:start_module_load

; Core Resident System
call load_module 29016-RTE_CORE_EXEC.rel	; 29016       C     RTE SYSTEM
call load_module 29016-RTE_CORE_SCHED.rel
call load_module 29016-RTE_CORE_RTIOC.rel
call load_module 29029-60001_RTE_DVR00.rel	; 29029-60001 1543  RTE Multiple-Device System Control Driver Routine (DVR 00)
call load_module 20747-60001_RTE_DVR30.rel	; 20747-60001 C     RTE DISC/DRUM DRIVER (DVR30)

; 20874-60007 D     RTE ASSEMBLER 
call load_module 20874-60001_ASMB.rel
call load_module 20874-60002_ASMBD.rel
call load_module 20874-60003_ASMB1.rel
call load_module 20874-60004_ASMB2.rel
call load_module 20874-60005_ASMB3.rel
call load_module 20874-60006_ASMB4.rel
call load_module 20874-60007_ASMB5.rel

; 20875-60001 E     RTE FORTRAN II
call load_module 20875-60001_FTN.rel
call load_module 20875-60002_FTN.rel
call load_module 20875-60003_FTN.rel
call load_module 20875-60004_FTN.rel
call load_module 20875-60005_FTN.rel

; ALGOL
call load_module 24129-60001_ALGOL.rel
call load_module 24129-60002_ALGOL.rel

; RTE RELOCATABLE LOADER 
call load_module 29022-60001_LOADR.rel		; REV B

; Editor
call load_module 20805-60001_EDIT.rel

; Libraries
call load_module 24151-01_F2E.rel		; 24151-60001 REV D  RTE/DOS RELOCATABLE LIBRARY-F2E (EAU)
call load_module 24153-60001_FF.N.rel		; 24153-60001 C      FF.N    RTE/DOS  FORTRAN FORMATTER

; Parameter input phase

d s 01
go

go until   "PARAMETERS" 
call type  "/E"
call type2 "BLANK ID SEGMENTS?"   "10"
call type2 "FWA BP LINKAGE?"      "100"

go until   "EQUIPMENT TABLE ENTRY" 
call type  "22,DVR30,D"
call type  "16,DVR00,B"
call type  "10,DVR01"
call type  "17,DVR02"
call type  "/E"

go until   "DEVICE REFERENCE TABLE" 
call type2 "1 =EQT #?"   "2"
call type2 "2 =EQT #?"   "1"
call type2 "3 =EQT #?"   "0"
call type2 "4 =EQT #?"   "4"
call type2 "5 =EQT #?"   "3"
call type2 "6 =EQT #?"   "2"
call type2 "7 =EQT #?"   "0"
call type2 "8 =EQT #?"   "0"
call type2 "9 =EQT #?"   "/E"

go until   "INTERRUPT TABLE" 
call type  "10,EQT,3"
call type  "16,EQT,2"
call type  "17,EQT,4"
call type  "23,EQT,1"
call type  "/E"

go until "CHANGE BP LINKAGE?" 
send "1100\r"
go until "CHANGE FWA SYS AV MEM?" 
send "24000\r"
go until "BG BOUNDARY?" 
send "26000\r"
go

go 

det -q all

; system generated in tmp.RTE_FH.disc 

echo
echo ***
echo *** System generated 
echo *** Boot and test the system
echo ***
echo

set tty noautolf 
reset

; attach again discs
att drc -q tmp.RTE_FH.disc
d s 0
boot drc

go until "SET TIME\r"
send "\r"
go until "*" 

call typecmd "EQ,1"
call typecmd "EQ,2"
call typecmd "EQ,3"
call typecmd "EQ,4"

call typecmd "LU,1"
call typecmd "LU,2"
call typecmd "LU,3"
call typecmd "LU,4"
call typecmd "LU,5"
call typecmd "LU,6"
call typecmd "LU,7"
call typecmd "LU,8"

; list installed programs with ON,LOADR 
; Params must be 0,1,3 (instead 1,1,3 as in RTE-II)
; output terminates with "LOADR: $END"
call typecmd "ON,LOADR,0,1,3"     "LOADR: $END" 

; reserve 10 tracks for Load and Go
; this command gives no output on execution. 
; Just press again <cr> to claim the prompt
; 
send "LG,10\r"
go until "\n"
send "\r"
go until "*"

att ptr -q Sample/Sample.ALGOL.txt
att ptp -q nul

call typecmd "ON,ALGOL,99"  "$END ALGOL"
call typecmd "ON,LOADR,99"  "LOADR: $END" 

call typecmd "ON,HOLA1"

; Successfull test. Copy as production disk

det -q all
copy -q tmp.RTE_FH.disc    RTE_FH.disc
del  -q tmp.RTE_FH.disc

echo
echo
echo ***
echo *** Generation finished 
echo ***

if "%1"=="QUIT" quit
echo
echo *** Press Enter to quit
set env -p "   " a
echo
 
echo
quit
goto end

:type
; simulate typing on tty. 
; %1 (parameter one) is the text to type 
send "%1"
send "\r"
go until "\n"
return

:type2
; simulate typing on tty. 
; %1 (parameter one) is the question to be replied with %2 (param two)
go until "%1"
send "%2"
send "\r"
go until "\n"
return

:typecmd
; simulate typing on tty command for RTE. 
; %1 (parameter one) is the text to type 
; optional %2 (parameter two) is the text that signals the end of command execution
send "%1"
send "\r"
go until "\n"
; the command is executing here
if "%2"!="" go until "%2"
go until "\n"
; RTE does not shows a prompt after command execution end. 
; To claim the promt, just hit <cr>
send "\r"
go until "*" 
return

:end


