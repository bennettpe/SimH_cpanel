set console -q -n log=log.txt 

; set debug -n -q debug.txt
; set debug stdout

; set clk debug=CSRW;PSERV;IOBUS
; set tty debug=CSRW;SERV;PSERV;XFER;IOBUS
; set ptr debug=SERV;XFER;IOBUS
; set ptp debug=CSRW;SERV;XFER;IOBUS
; set cpu debug=INSTR;DATA;FETCH;REG;OPNDEXEC;NOOS
; set mp  debug=IOBUS
; set drc debug=IOBUS

echo
echo ***
echo *** RTE MH (Moving Head) Operating System (1971) 
echo *** Generation
echo ***
echo

; generates a new RTE system
;
; Sw installed:
;   EDIT       - Editor
;   ALGOL      - Algol Compiler
;   ASMB, XREF - Assembler
;   FTN        - Fortran II
;   STATS      - WHZAT like
;   FMP        - File Management Package
;   SXL        - RTE System Cross Loader
;   printer on LPT (EQT 5)
;

set cpu 2116

set cpu 32k
SET CPU EAU

set ptr sc=10
set clk sc=11
set tty sc=16
set ptp sc=17
set lpt sc=20

set tty autolf
; disable beep on BELL (^G) char
set console pchar=23400
send after=200k
send delay=30k

; 13210A Moving Head Disk Controller (DPC, DPD) with 7900 Disk 

set dpd dis
set drc dis

set dpc 13210A
set dpc sc=22
set dpc ena
att dpc -n -q tmp.RTE_MH.disc
att lpt -n -q printer.txt

; Load and configure 24K console SIO driver as SC 16
attach ptr -q rtgen/sio/29100-60017_A_24K_SIO_TTY.abs
boot ptr

deposit S 16
deposit P 2
go

; Load and configure 24K paper tape reader SIO driver as SC 10

attach ptr -q rtgen/sio/29100-60019_A_24K_SIO_RDR.abs
boot ptr

deposit S 10
deposit P 2
go

; Load and configure 24K paper tape punch SIO driver as SC 17
attach ptr -q rtgen/sio/29100-60020_A_24K_SIO_PUNCH.abs
boot ptr
 
deposit S 17
deposit P 2
go

; load MH RTGEN

attach ptr -q rtgen/29014-60001_B_MH-RTGEN.abs
boot ptr


; Run

deposit S 0
deposit P 100

; attach mh boot papertape

attach ptp -n -q rtgen/tmp.mh_boot.abs
  

; initialization phase

d s 0
d p 100
go until "MH DISC CHNL?" 
send "22\r"
go until "0?" 
send "203,0\r"
go until "1?" 
send "203,0\r"
go until "2?" 
send "/E\r"
go until "SYSTEM SUBCHNL?" 
send "0\r"
go until "AUX DISC (YES OR NO)?" 
send "YES\r"
go until "AUX DISC SUBCHNL?" 
send "1\r"
go until "SCRATCH SUBCHANL?" 
send "1\r"
go until "START SCRATCH?" 
send "0\r"
go until "SECTORS/TRACK?" 
send "48\r"
go until "TBG CHNL?" 
send "11\r"
go until "PRIV. INT. CARD ADDR?" 
send "0\r"
go until "SWAPPING?" 
send "YES\r"
go until "LWA MEM?" 
send "77677\r"
go until "PRGM INPT?" 
send "PT\r"
go until "LIBR INPT?" 
send "PT\r"
go until "PRAM INPT?" 
send "TY\r"
go until "PUNCH BOOT?" 
send "YES\r"
go until "PUNCH BOOT?" 
send "NO\r"
go

; program input phase: Now load rel files for RTE

goto start_module_load

:load_module
echo ---> Load Module %1
att ptr -q rtgen/%1
d s 0
cont
return

:start_module_load

; Core Resident System
call load_module 29016-RTE_CORE_EXEC.rel	; 29016       C     RTE SYSTEM
call load_module 29016-RTE_CORE_SCHED.rel
call load_module 29016-RTE_CORE_RTIOC.rel
call load_module 29029-60001_RTE_DVR00.rel	; 29029-60001 1543  RTE Multiple-Device System Control Driver Routine (DVR 00)
call load_module 29013-60001_RTE_DVR31.rel	; 29013-60001 C     RTE MOVING HEAD DISC 7900 DRIVER (DVR31)
call load_module 29028-60001_DVR12.rel		; 29028-60001 A     RTE HP2610A/2614A LINE    PRINTER DRIVER (DVR12)    

; FMP - File Management Package	
call load_module 29033-A_FMP.rel

; 20874-60007 D     RTE ASSEMBLER 
call load_module 20874-60001_ASMB.rel
call load_module 20874-60002_ASMBD.rel
call load_module 20874-60003_ASMB1.rel
call load_module 20874-60004_ASMB2.rel
call load_module 20874-60005_ASMB3.rel
call load_module 20874-60006_ASMB4.rel
call load_module 20874-60007_ASMB5.rel

; 20875-60001 E     RTE FORTRAN II
call load_module 20875-60001_FTN.rel
call load_module 20875-60002_FTN.rel
call load_module 20875-60003_FTN.rel
call load_module 20875-60004_FTN.rel
call load_module 20875-60005_FTN.rel

; ALGOL
call load_module 24129-60001_ALGOL.rel
call load_module 24129-60002_ALGOL.rel

; RTE RELOCATABLE LOADER 
call load_module 29022-60001_LOADR.rel		; Rev B

; RTE SXL LOADER 
call load_module sxl/29103-60001_Rev-A_0103.rbin
call load_module sxl/29103-60001_Rev-A_0203.rbin
call load_module sxl/29103-60001_Rev-A_0303.rbin
call load_module sxl/29103-60060_Rev-C.rbin	; New version of TERMF routine that patches the invalid RQ bug con closing files

; Editor
call load_module 20805-60001_EDIT.rel

; Stats - Whzat like program (in ALGOL)
call load_module stats.rel

; Libraries
call load_module 24151-01_F2E.rel		; 24151-60001 REV D  RTE/DOS RELOCATABLE LIBRARY-F2E (EAU)
call load_module 24153-60001_FF.N.rel		; 24153-60001 C      FF.N    RTE/DOS  FORTRAN FORMATTER

; d s 1      -> to end program input phase
; d s 100001 -> to end and print entry points
;               * -> entry points
;               just name -> library name
d s 100001
go

; Parameter input phase

go until   "PARAMETERS" 
call type  "/E"
call type2 "BLANK ID SEGMENTS?"   "40"
call type2 "FWA BP LINKAGE?"      "100"

go until   "EQUIPMENT TABLE ENTRY" 
call type  "22,DVR31,D"
call type  "16,DVR00,B"
call type  "10,DVR01"
call type  "17,DVR02"
call type  "20,DVR12"
call type  "/E"

go until   "DEVICE REFERENCE TABLE" 
call type2 "1 = EQT #?"   "2"
call type2 "2 = EQT #?"   "1,0"
call type2 "3 = EQT #?"   "1,1"
call type2 "4 = EQT #?"   "4"
call type2 "5 = EQT #?"   "3"
call type2 "6 = EQT #?"   "2"
call type2 "7 = EQT #?"   "0"
call type2 "8 = EQT #?"   "0"
call type2 "9 = EQT #?"   "/E"

go until   "INTERRUPT TABLE" 
call type  "10,EQT,3"
call type  "16,EQT,2"
call type  "17,EQT,4"
call type  "20,EQT,5"
call type  "22,EQT,1"
call type  "23,EQT,1"
call type  "/E"

go until "CHANGE BP LINKAGE?" 
send "1100\r"
go until "CHANGE FWA SYS AV MEM?" 
send "27000\r"
go until "BG BOUNDRY?" 
send "30000\r"
go

det -q all

; system generated in tmp.RTE_MH.disc 
; PaperTape tmp.mh_boot.abs created and prepared

echo
echo ***
echo *** System generated 
echo *** Boot, label the disk and test the system
echo ***
echo

set tty noautolf 
reset

; attach again discs
att dpc -q tmp.RTE_MH.disc

att lpt -n -q printer.txt
att ptr -e -q rtgen/tmp.mh_boot.abs
boot ptr

d s 0
go 100

; halt 11B occurs with A = 140001 (ATN, 1ST, ERR)
;
; bootstrap does:
;
;   LIA 22         GET THE DISC STATUS
;   RBL,CLE,ERB    SET THE STARTING EXECUTION ADDRESS
;   SLA,RSS        IS THE "ANY ERROR" BIT SET?
;   JMP 1,I        NO, SO EXECUTE THE RTE BOOTSTRAP EXTENSION
;   HLT 11         YES, SO REPORT THE PROBLEM
;   JMP 14         IF RESUMED, RETRY THE DISC SEEK AND READ 

; go 65

go until "FMGR 002"

goto Skip_RTE_Debug

; By commenting out "goto Skip_RTE_Debug" this script sets a brakpoint on RTE EXEC call execution
; that prints each call to OS

break 2136; goto sh1
go
goto end
:sh1
if a=01 echo EXEC 1 READ
if a=02 echo EXEC 2 WRITE
if a=03 echo EXEC 3 IO CNTRL
if a=15 echo EXEC 13 IO STATUS
if a=04 echo EXEC 4 DISC ALLOC Track to program
if a=17 echo EXEC 15 DISC ALLOC Track globally
if a=05 echo EXEC 5 DISC RELEASE program's Tracks
if a=20 echo EXEC 16 DISC RELEASE global Tracks
if a=06 echo EXEC 6 PRGM COMPLETION
if a=07 echo EXEC 7 PRGM SUSPEND
if a=10 echo EXEC 8 PRGM SEG LOAD
if a=11 echo EXEC 9 PRGM SCHED Waiting
if a=12 echo EXEC 10 PRGM SCHED No Waiting
if a=13 echo EXEC 11 TIME REQUEST
if a=14 echo EXEC 12 EXEC TIME - Sched prgm by time
if a=16 echo EXEC 14 ?????
if a>20 echo EXEC "??"; ex a 
echo Calling ADDR:
ex 2053
go

:Skip_RTE_Debug

go until ":" 
send "IN,RT,-2,2,SYS,100\r"
go until ":" 
send "IN,RT,-3,3,AUX,0\r\r"
go until "*" 

; run for 500K cycles before sending keys. 
; Not doing this makes the command to abort 
runlimit 500k
go -q
norunlimit

send "ON,FMGR\r"
go until ":" 
send "LL,1\r"
go until ":" 
send "CL\r"
go until ":" 
send "DL\r"
go until ":" 
send "EX\r"
go until "$END FMGR"
go until "\n"
; this \r is to get the * prompt
send "\r"
go until "*" 

call typecmd  "ON,STATS"   "T.END" 

; reserve 10 tracks for Load and Go
; this command gives no output on execution. 
; Just press again <cr> to claim the prompt
;
send "LG,10\r"
go until "\n" 
send "\n"
go until "*" 

att ptr -q Sample/Sample.ASMB.txt
att ptp -q nul

call typecmd  "ON,ASMB,99"   "$END ASMB"

; delete HOLA1 in disc in case it is there as a result of a previous test run
send "ON,FMGR\r"
go until ":"
send "PU,HOLA1\r"
go until ":"
send "EX\r"
go until "$END FMGR"
go until "\n"
send "\r"
go until "*"

; printer is directed to EQT 1 (screen) on sysgen. redirect it to EQT 5 (the printer)
; so the LU 6 writes to printer.txt file instead of to console
send "LU,6,5\r\r"
go until "*" 

send "ON,SXL,1,0,6,0\r"
go until "-"
send "RELOCATE L.G\r"
go until "-"
send "DISPLAY UNDEFS\r"
go until "-"
send "SEARCH LIBRY\r"
go until "-"
send "END\r"
go until "$END SXL"
go until "\n"
send "\r"
go until "*"

; SXL output is on printer.txt file

send "ON,FMGR\r"
go until ":"
; set HOLA1 as program to allow its execution with ON,HOLA1
send "RP,HOLA1\r"
go until ":"
send "EX\r"
go until "END FMGR"
send "\r"
go until "*"

call typecmd "ON,HOLA1"

; Successfull test. Copy as production disk

det -q all
copy -q tmp.RTE_MH.disc        RTE_MH.disc
copy -q rtgen/tmp.mh_boot.abs  rtgen/mh_boot.abs
del  -q tmp.RTE_MH.disc
del  -q rtgen/tmp.mh_boot.abs  

echo
echo
echo ***
echo *** Generation finished 
echo ***

if "%1"=="QUIT" quit
echo
echo *** Press Enter to quit
set env -p "   " a
echo
 
echo
quit
goto end

:type
; simulate typing on tty. 
; %1 (parameter one) is the text to type 
send "%1"
send "\r"
go until "\n"
return

:type2
; simulate typing on tty. 
; %1 (parameter one) is the question to be replied with %2 (param two)
go until "%1"
send "%2"
send "\r"
go until "\n"
return

:typecmd
; simulate typing on tty command for RTE. 
; %1 (parameter one) is the text to type 
; optional %2 (parameter two) is the text that signals the end of command execution
send "%1"
send "\r"
go until "\n"
; the command is executing here
if "%2"!="" go until "%2"
go until "\n"
; RTE does not shows a prompt after command execution end. 
; To claim the promt, just hit <cr>
send "\r"
go until "*" 
return

:end


