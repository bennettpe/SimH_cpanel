
; set console -n -q log=log.txt 
; set debug -n -q debug.txt
; set debug stdout
; set cpu debug=cmd;data;detail

; What this script does:
; compile and execute fortransit program 

set cpu 2k
set cpu StorageUnit

if "%CPANEL%"=="1" goto chk_cp_ok1

echo
echo ERROR!
echo i650 compiled without control panel support. Build again 
echo with CPANEL, USE_SIM_VIDEO and HAVE_LIBSDL symbols defined 
echo
goto end

:chk_cp_ok1

if exist ../cpanel/ibm650_photo.ini goto chk_cp_ok2

echo
echo ERROR!
echo cannot find the control panel definition file
echo "../cpanel/ibm650_photo.ini" 
echo
goto end

:chk_cp_ok2

; start control panel

echo *** 
echo *** Start Control Panel GUI
echo *** 
echo *** HotKeys on GUI: +/-  Zoom In/Zoom Out (also ^+ and ^-)
echo ***                 ^Y   Toggle zoom 100%% <-> 50%%
echo ***                 ^T   Toggle flash on clickable controls
echo ***                 ^I   Toggle info panel (readable at 100%% and 50%% zoom)      
echo ***                 ^F   Fast mode: while pressed, accelerates cpu to max speed
echo *** 
echo ***           Click on control panel image and drag mouse to move the window
echo ***           Right click mouse to show a tooltip with image at 100% scale
echo *** 

att cpanel ../cpanel/ibm650_photo.ini
set cpanel option=CardReadPunch
set cpanel scale=50
set cpanel on
set cpanel pos=0/220

set cpu speed=1.0
set realtime


; print FORTRANSIT source program 

att cdp0 -n -q print.txt
echo
carddeck -q print fortransit\fortransit_example_5_src.txt

; load FORTRANSIT translator but do not execute it


echo *** 
echo *** Load FORTRANSIT translator deck into drum (fast)
echo *** 

set cdr1 wiring=8word
att cdr1 -q -l fortransit/fortransit_translator.dck

set fast

d csw 70 1951 9999
d ar 8000
go

set realtime

; attach and load reconstructed add function title deck 

att cdr1 -q -l fortransit/fortransit_addfn.dck

set cpu speed=max

d csw 70 1951 9999
d ar 8000
go

set cpu speed=1.0

echo *** 
echo *** Run FORTRANSIT translator
echo *** 

; Now put source cards in reader and start translator (phase I)

att cdr1 -q fortransit\fortransit_example_5_src.txt
set cdr1 wiring=fortransit

att cdp1 -n -q deck_it.dck
set cdp1 echo, print, wiring=fortransit

d csw 00 0000 1999
d ar 8000
go

; check if programed stop because an error is detected
if not prop==01 goto translate_ok1;

echo 
echo *** (translation error code in Address Register AR)
echo

ex ar

echo 
echo *** (show last three source fortransit cards processed)
echo
carddeck -q echolast 3 cdr1

goto end

:translate_ok1

; check if programed stop because normal termination 
if ((PROP==70) && (AR==1951)) goto translate_ok2;
goto end

:translate_ok2

; separate last card (header card), and put it in the 
; top of deck

carddeck -q split -1 cdp1 deck_it.dck deck_it_header.dck
carddeck -q join  deck_it_header.dck deck_it.dck as deck_it.dck
det cdr1

; load IT compiler but do not execute it

echo *** 
echo *** Load IT compiler deck into drum
echo *** 

att cdr1 -q -l fortransit/it_compiler.dck

set cpu speed=max

d csw 70 1951 9999
d ar 8000
go

set cpu speed=1.0

echo *** 
echo *** Run IT compiler
echo *** 

; Now put IT source cards in reader and start compiler (phase II)

att cdr1 -q deck_it.dck
att cdp1 -n -q deck_out.dck

d csw 00 0000 1999
d ar 8000
go

; check if programed stop because an error is detected

if not ar==1234 goto compile_ok1;

echo 
echo *** (compilation error code in Upper ACC)
echo

ex accup
goto end

:compile_ok1

; check if programed stop because normal termination 
if ((PROP==70) && (AR==1951)) goto compile_ok2;
goto end

:compile_ok2

; separate first card (reservation card), from 
; generated soap source code deck

carddeck -q split 1 cdp1 deck_res.dck deck_soap.dck
det cdr1

; Load soap deck into drum (1 word per card format), but does not execute it

echo *** 
echo *** Load SOAP deck into drum
echo *** 

att cdr1 -q -l fortransit/soapII.dck

set cpu speed=max

d csw 7019519999
d ar 8000
go

set cpu speed=1.0

; create the phase III deck with
; - entry point cards for subroutines
; - reservation cards from phase II 
; - package reservation cards 
; - subroutines in symbolic SOAP format (if any)
; - rest of compilation output from phase II

carddeck -q join fortransit/pack_entry_src.txt deck_res.dck fortransit/pack_res2.txt deck_soap.dck as deck_soap.dck 

echo *** 
echo *** Run SOAP assembler
echo *** 

att cdr1 -q deck_soap.dck
set cdr1 wiring=soap

att cdp1 -n -q deck_out.dck
set cdp1 echo, print, wiring=soap

d ar 1000
go

; check if programed stop because an error is detected
if not prop==01 goto assemble_ok1;

echo 
echo *** (assembling error code in AR)
echo

ex ar
goto end

:assemble_ok1

; check if programed stop because normal termination 
if ((PROP==70) && (AR==1951)) goto assemble_ok2;
goto end

:assemble_ok2

det cdr1
det cdp1

; create object program deck with
; - package cards 
; - assembled program cards from phase III

carddeck -q join fortransit/pack.dck deck_out.dck as deck_out.dck

echo *** 
echo *** Read Object Program Deck 
echo *** 

; Load assembled deck into drum
; -l switch allows to load the symbolic info so debug cmd info will show 
; soap source code read from card.

set cdr1 wiring=8WORD
att cdr1 -q -l deck_out.dck

set cpu speed=max

d csw 7019519999
d ar 8000
go

set cpu speed=1.0

; attach input and output data deck

det cdr1

att cdp1 -n -q deck_out.dck
set cdp1 echo, print, wiring=fortransit

; Now execute the loaded program object deck

echo *** 
echo *** Run Program
echo *** 

; set csw negative to activate conditional punch statement
; normal program termination will halt cpu at AR=9999

d csw -01 0000 9999
d ar 1999
go

; clean up

del deck_it_header.dck
del deck_it.dck
del deck_res.dck
del deck_soap.dck

:end
