

 set console -n log=log.txt 
 set debug -n debug.txt
; set debug stdout
 set cpu debug=cmd;data;detail
 set mt debug=cmd;data;detail;exp
 set dsk debug=cmd;data;detail;exp


; params: %1 source card deck with data to sort

if "%1" != "" goto sort0a

echo
echo ERROR!
echo Must pass a parameter card deck file with data to sort
echo
goto end

:sort0a

if exist "%1" goto sort0b

echo
echo ERROR!
echo card deck file with data to sort "%1" does not exists
echo
goto end

:sort0b

; What this script does:
; - Assemble sort program source code using SOAP II
; - Load card deck file passed as parameter to tape mt0
; - Sort tape mt0 to mt1 using only tapes
; - Dump 10 prost records sorted from tape to cards
; - Put runnable sort program in tape mt5 


set cpu 2k
set cpu soapmne

set cpu CntrlUnit
set cpu StorageUnit

; use sort program in card deck. Assemble, then load it

set fast

do run_soap.ini  sort/sort.txt   
det -q cdr1
det -q cdp1
copy -q deck_out.dck   sort/sort_prog_deck.dck

echo *** 
echo *** Load sort program deck
echo *** 

set cdr1 wiring=8WORD
att cdr1 -q -l sort/sort_prog_deck.dck

att mt0 -q -n sort/mt0.tap
att mt1 -q -n sort/mt1.tap
att mt2 -q -n sort/mt2.tap
att mt3 -q -n sort/mt3.tap
att mt4 -q -n sort/mt4.tap
att mt5 -q -n sort/mt5.tap

att dsk0 -n -q sort/ramac0.dsk

d csw 7019519999
d ar 8000
go

; prepare input card deck with data to be sorted
; deck is  1) Control card
;          2) cards with data to load to tape 
;          3) end of deck card

carddeck -q join    sort/cntr_cards_cardtotape.dck   %1   sort/endofdata_card.dck as deck_in.dck 
set cdr1 wiring=8WORD
att cdr1 -q deck_in.dck 

echo *** 
echo *** Run load unsorted data cards to tape mt0
echo *** 

d ar 1000
go
if ((prop!=01) || (ar!=0000)) goto sort_err

echo
echo DIST holds the ammount of tape records loaded on tape
ex dist
echo

set realtime

echo *** 
echo *** Run sort mt0 to mt1
echo *** 

set cdr1 wiring=8WORD
att cdr1 -q sort/cntr_cards_sort.dck

; set smode to 0 to use only tapes, set to 1 to sort using tapes and ramac
d 1010 0

d ar 1000
go
if ((prop!=01) || (ar!=0000)) goto sort_err

echo
echo DIST contents is rr000nnnnn, 
echo .    where rr=number of runs, nnnnn=number of records sorted
ex dist
echo

sh cpu speed

; now resume cpu execution to process next control card on sort_cntr_card.dck deck
; this card will transcribe (copy) 10 records from mt1 to mt2

echo *** 
echo *** Run transcribe mt1 to mt2 (only 10 records)
echo *** 

go
if ((prop!=01) || (ar!=0000)) goto sort_err

echo
echo DIST holds the ammount of tape records copied 
ex dist
echo

; resume cpu execution to process next control card on sort_cntr_card.dck deck
; this card will punch the sorted records

echo *** 
echo *** Run mt2 tape to card
echo *** 

set cdp1 wiring=8WORD
att cdp1 -q deck_out.dck
set cdp1 echo, print

go
if ((prop!=01) || (ar!=0000)) goto sort_err

echo
echo DIST holds the ammount of tape records dumped to cards
ex dist
echo

; Now execute any pending control cards pending on read hopper
if (CDR1RDHOPPER==0) goto sort_ok

echo *** 
echo *** Now execute any pending control cards in CDR1 input hopper
echo *** 
ex CDR1RDHOPPER

:sort1
if (CDR1RDHOPPER==0) goto sort_ok

go
if ((prop!=01) || (ar!=0000)) goto sort_err

echo
ex dist
echo

; control card executed ok because stops on HLT 0000
goto sort1

:sort_err
echo
echo WARNING!
echo End script because cpu not stop on HLT 0000, so there is an error
echo
goto end

:sort_ok

; if everything is fine, then put the sort program deck into mt5 to 
; allow on future executions to load it from tape instead of load 
; it from card reader

set fast 

echo *** 
echo *** Now assemble and run build_mt5 program 
echo *** It will put sort program deck on mt5 to allow on the future to load 
echo *** sort program from tape mt5 instead of loading it from card reader
echo *** 
echo

carddeck -q join  sort/sort_prog_deck.dck  sort/endofdata_card.dck  as  deck_in.dck 
do run_soap.ini   sort/build_mt5.txt 1000  deck_in.dck

echo *** 
echo *** Now mt5 tape contains sort program 
echo *** can be loaded with load_mt5_card.dck
echo *** 
echo

det all
del -q sort/sort_prog_deck.dck
del -q sort/ramac0.dsk

:end
