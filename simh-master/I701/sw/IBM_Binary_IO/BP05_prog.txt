
                           Binary Punch 05 (BP 05) at 102663096-05-01-acc.pdf, page 38
                           BINARY INPUT AND OUTPUT for the IBM Type 701 EDPM - Bulletin 3
                           from Computer History Museum collection

                           Applied Science Department
                           (c) August 1952 by IBM

DEC                        DEC=Number are in decimal (default). OCT=Numbers are in octal

NNNN S OPNAME   OP ADDR    Remarks ... (max 79 chars)

0050   R ADD    10 0047    -\                                        (47 R)=Start of block to punch               1050
0051   STORE A  13 0060     |  Initialize ADD sequence, COPY         set 0060  R Add [R]                          0060  R Add 0060
0052   STORE A  13 0080     +-   sequence, COPY index, and           set 0080 -Copy  [R]                          0080 -Copy  0060
0053   ADD      09 0048     |    ADD index                           +(48 V)=Num of halfwords to punch
0054   STORE A  13 0000     |                                        (0 last halfword to punch)                   1094
0055   STORE A  13 0001    -/                                        
0056   R SUB    06 0049    -\                                        (49 R1)=Load addr for block being punched
0057   SUB      05 0048     |  Add half word count and loading       
0058   A RIGHT  23   17     |    address to check sum  
0059 - STORE    12 0002    -/
0060   R ADD    10 [  ]    -\                                        load (R) hword to punch 
0061   STORE    12 0047     |                                        save in checksum 
0062 - R SUB    06 0046     |                                        
0063   A LEFT   22    1     |
0064 - ADD      09 0002     |  ADD sequence for computing
0065 - STORE    12 0002     +-   card check sum
0066   R SUB    06 0060     |                                        
0067   SUB      05 0009     |
0068   STORE A  13 0060     |
0069   ADD      09 0001     |
0070   TR +     03 0060    -/
0071   WRITE    26 1024        Select card punch
0072 - COPY     31 0002        Punch nine left                       punch on row nine (card bottom) checksum (full word) 
0073 - COPY     31 0048        Punch nine right                      then V (len in half words) then R1 (load addr as half word)
0074   R ADD    10 0080    -\  initialize end of card index 
0075   SUB      05 0004     |  
0076   STORE A  13 0028    -/                                        (28)=(80 R)+47 last address of card
0077   R ADD    10 0080    -\                                        load current addr to punch
0078   SUB      05 0000     |                                        sub last addr to punch
0079   TR 0     04 0093     |                                        if =0 -> tr 93 end of punch
0080 - COPY     31 [  ]     |                                        punch (R) fullword
0081   R ADD    10 0080     +- COPY sequence                         incr addr of fullword to 
0082   SUB      05 0045     |                                          punch in 0080
0083   STORE A  13 0080     |                                            by 2
0084   SUB      05 0028     |                                         
0085   TR +     03 0077    -/
0086   R ADD    10 0080    -\  Coincidence test for end of card
0087   SUB      05 0000     |    and end of COPY conditions
0088   TR 0     04 0093    -/
0089   WRITE    26 1024        Select card punch
0090   R ADD    10 0028    -\  Set up end of card index
0091   ADD      09 0073    -/
0092   TR OV    02 0076        Continue punching
0093   STOP     00 0050        End of punching


                               Usage:

                               Punch block of mem into binary cards to be 
                               loaded by SL05 routine

                               loaded with SL05 

                               Put on halword at addr 
                                  0047 R=block to punch start addr 
                                  0048 V=number of half words to punch (min allowed 2, must be even)
                                  0049 R1=load addr: addr where block will be loaded by SL05 routine

                               then transfer to 0050

                               Note that SL05 will store in R1 the checksum fullword.
                               If R=1000, to generate cards to be loaded later at 
                               addr 1000, then R=1000 but R1 should be 0998


                               


