
                           Binary Punch 06 (BP 06) at 102663096-05-01-acc.pdf, page 39
                           BINARY INPUT AND OUTPUT for the IBM Type 701 EDPM - Bulletin 3
                           from Computer History Museum collection

                           Applied Science Department
                           (c) August 1952 by IBM

DEC                        DEC=Number are in decimal (default). OCT=Numbers are in octal

NNNN S OPNAME   OP ADDR    Remarks ... (max 79 chars)

0048   ADD      09 0117 
0049   STORE A  13 0056
0050   ADD      09 0116
0051   STORE A  13 0060    Preamble
0052   ADD      09 0116
0053   STORE A  13 0058
0054   ADD      09 0116
0055   STORE A  13 0111
0056   R ADD    10 [  ]    Preserve half word count
0057   STORE    12 0122
0058   R ADD    10 [  ]    Preserve loading address
0059   STORE    12 0123
0060   R ADD    10 [  ]    Obtain unloading address for
0061   STORE A  13 0072    storage check sum
0062   STORE A  13 0098
0063   ADD      09 0117    Initialize COPY and ADD sequence
0064   STORE A  13 0083
0065   STORE A  13 0100
0066   ADD      09 0122    Set up end of COPY index and
0067   STORE A  13 0114      end of ADD index
0068   STORE A  13 0056
0069   R SUB    06 0122
0070   SUB      05 0123    Modify storage check sum to
0071   A RIGHT  23   17      give card check sum
0072 - ADD      09 [  ]
0073 - STORE    12 0120
0074   WRITE    26 1024    Select card punch
0075   R ADD    10 0083 
0076   SUB      05 0097    Initialize end of card index
0077   STORE A  13 0113
0078 - COPY     31 0120    Image row nine left
0079 - COPY     31 0122    Image row nine right
0080   R ADD    10 0083
0081   ADD      09 0114
0082   TR 0     04 0098
0083 - COPY     31 [  ]
0084   R ADD    10 0083    COPY sequence
0085   SUB      05 0117
0086   STORE A  13 0083
0087   ADD      09 0113
0088   TR +     03 0080
0089   R ADD    10 0083    Coincidence test for end of card
0090   ADD      09 0114      and end of COPY conditions
0091   TR 0     04 0098
0092   WRITE    26 1024    Select card punch
0093   R ADD    10 0113
0094   ADD      09 0112    Step up end of card index
0095   STORE A  13 0113
0096   TR       01 0083    Continue copying
0097   STOP     00 0044    Constant for first card
0098   R ADD    10 [  ]    Begin adding record
0099   STORE    12 0120
0100   R ADD    10 [  ]    
0101   STORE    12 0119    
0102   R ADD    10 0100    
0103   ADD      09 0116
0104   STORE A  13 0100
0105   SUB      05 0056
0106 - LOAD MQ  15 0118    Adding sequence
0107   L LEFT   20   36
0108 - ADD      09 0120
0109 - STORE    12 0120
0110   TR OV    02 0100
0111   TR 0     04 [  ]    Exit and zero check 
0112   STOP     00 0048    Error stop          
0113   COPY     31 [  ]    End of card index   
0114   COPY     31 [  ]    End of COPY index
0115   STOP     00 0000
0116   STOP     00 0001    Necessary constants
0117   STOP     00 0002

0200   R ADD       0200
0201   TR          0048
0203   STOP        0060
0202   STOP        1000
0204   STOP        0998
0205   STOP        1111


                               Usage:

                               This program is designed to punch cards with binary 
                               information in such form that this information may later 
                               be reentered by SL 05. The information to be punched by a
                               single execution of BP 06 must occupy consecutively-numbered 
                               half-word locations, and the first two half words of this 
                               block, stored in locations R and R + 1, must contain a
                               storage check sum as described in the discussion of SL 05 
                               output. R may be any positive even integer such that the 
                               locations assigned to contain the block, of half words to be
                               punched do not conflict with those containing the instructions 
                               or associated constants of BP 06.

                               BP 06 is called in by a calling sequence of the following form:

                                  a     R ADD       a       Basic linkage
                                  a+1   TR       0048
                                  a+2   STOP        V       Half-word count
                                  a+3   STOP        R       Unloading address 
                                  a+4   STOP        R1      Reloading address

                               In this sequence three constants are specified: 

                               1) the number of half words (V) to be punched, not including 
                                  the two half words of the check sum
                               2) the unloading address (R) which is used to calculate the 
                                  location of the information upon which BP 06 is to
                                  operate
                               3) the reloading address (R1) which determines into which 
                                  locations the binary information is to be reloaded by 
                                  some loading program such as SL 05.

                               Following the execution of BP 06, control is transferred to 
                               location a+5 of the calling sequence.

                               The output of the program consists of a set of binary cards. 
                               The first card contains the card check sum, V, and R1 in its 
                               nine row. The remaining 44 half-word positions of the first 
                               card, and all 48 half-word positions of succeeding cards 
                               contains the V half words of the block of information whose 
                               punching was desired in the execution of BP 06.
