        100F0000 0000R0200                  MAIN PROGRAM
        103F0000 0000R0342                  GETCHRS ROUTINE
        104F0000 0000R0415                  GETREG ROUTINE
        105F0000 0000R0429                  RESOLVE ROUTINE
        106F0000 0000R0459                  PRINT PUNCH CARD ROUTINE
        107F0000 0000R0515                  ADD INSTR TO PUNCH BUFFER
        108F0000 0000R0562                  FLUSH OUTPUT BUF TO PUNCHED CARD
        185F0000 0000R0607                  ADD INSTR TO PUNCH BUFFER
        100C0000 0000R0666                  CARD IMAGE BUFFER
        100E0000 0000R0714                  ERASABLE RESULTS
        100B0000 0000R0732                  PROGRAM CONSTANTS
        101E0000 0000R0758                  ERASABLE RESULTS
        101F0000 0000R0766                  INSTRUCTIONAL CONSTANTS
        000F0000 1000B0015                  SET LAST ADDR AVAILAR ADD
        000F0001 1200E0014                  X                   STORE
        000F0002 1000B0016                  RESET               R ADD
        000F0003 1200E0009                  ... NUMBER OF WORDS STORE
        000F0004 1201E0000                  ... ORG 0 FLAG      STORE
        000F0005 1000B0017                  INIT CURRENT LOC ANDR ADD
        000F0006 1200E0015                  X                   STORE
        000F0007 1000E0014                  RESET FILE AS EMPTY R ADD
        000F0008 0500B0007                                      SUB
        000F0009 1200E0013                  ADD REGION 00R TO FISTORE
        000F0010 1300F0012                  FOR ABSOLUTE ADDRESSSTORE A
        000F0011 1000B0022                                      R ADD
        000F0012-1200R0000                                      STORE
        000F0013 1001F0004                  SET FIRST ADDR OF FIR ADD
        000F0014 0900B0007                  AS EVEN ADDR        ADD
        000F0015 2300R0019                  X                   A RIGHT
        000F0016 2200R0019                  X                   A LEFT
        000F0017 1200E0012                  RESET ADDR OF HEAD TSTORE
        000F0018 2600R2052                  INSURE THAT MQ NOT IWRITE
        000F0019 2400R2048                  PREPARE TO READ CARDREAD
        000F0020 1000B0016                  CLEAR ...           R ADD
        000F0021 1200E0000                  ... CARD TYPE       STORE
        000F0022 1200E0002                  ... LOCATION REGION STORE
        000F0023 1200E0003                  ... LOCATION INDEX  STORE
        000F0024 1200E0006                  ... ADDRESS REGION  STORE
        000F0025 1200E0007                  ... ADDRESS INDEX   STORE
        000F0026 1200E0004                  ... OPCODE SIGN     STORE
        000F0027 1200E0005                  ... ACTUAL OPERATIONSTORE
        000F0028 1200E0008                  ... ACTUAL OPERATIONSTORE
        000F0029 1001F0003                  RESET TO INITIAL COPR ADD
        000F0030 1300F0031                  X                   STORE A
        000F0031-3100R0000                  COPY WORD           COPY
        000F0032 0100F0035                  X                   TR
        000F0033 0100F0038                  PROCESS END OF FILE TR
        000F0034 0100F0042                  END OF CARD, PROCEEDTR
        000F0035 0900B0007                  INCR CDBUF ADDR     ADD
        000F0036 1300F0031                  X                   STORE A
        000F0037 0100F0031                  GO TO READ NEXT ROW TR
        000F0038 1000F0038                  FLUSH CURRENT OUTPUTR ADD
        000F0039 0106F0000                  BINARY CARD         TR
        000F0040 0000R0002                  AND TERMINATE ASSEMBLING
        000F0041 0000R0000                  STOP NO ERRORS      STOP
        000F0042 1001F0003                  GET CARD IMAGE WORD R ADD
        000F0043 0900B0020                  WILL BE NEGATIVE IF ADD
        000F0044 1300F0045                  CARD TYPE IS ONE    STORE A
        000F0045 1000R0000                                      R ADD
        000F0046 0300F0049                                      TR +
        000F0047 1000B0008                                      R ADD
        000F0048 1200E0000                                      STORE
        000F0049 1000B0015                  SET FIRST CARD COL TR ADD
        000F0050 0500B0008                                      SUB
        000F0051 1303F0024                                      STORE A
        000F0052 1000F0052                  CALL ROUTINE GETREG R ADD
        000F0053 0104F0000                  TO GET REGIONAL LOCATR
        000F0054-1200E0002                  SAVE REG LOC (FULL WSTORE
        000F0055 1000F0055                  CALL ROUTINE GETCHRSR ADD
        000F0056 0103F0000                  TO GET JUST ONE     TR
        000F0057-2400R0000                  CHAR/DIGIT/BLANK FOR SIGN
        000F0058 2200R0018                  RESULT TO 18B IN ACCA LEFT
        000F0059 0400F0067                  CAN BE BLANK (AS PLUTR 0
        000F0060 0500B0010                  CAN BE (-) MINUS PUNSUB
        000F0061 0400F0065                  CAN BE (+) PLUS PUNCTR 0
        000F0062 0500B0009                  IF COLUMN NOT PUNCHESUB
        000F0063 0400F0067                  AS PLUS. ANY OTHER PTR 0
        000F0064 0000R0002                  STOP BECAUSE INVALIDSTOP
        000F0065 1000B0008                  SIGN ZERO MEANS OPCOR ADD
        000F0066 1200E0004                  SIGN ONE MEANS OPCODSTORE
        000F0067 1000F0067                  CALL ROUTINE GETCHRSR ADD
        000F0068 0103F0000                  TO GET DECIMAL OPCODTR
        000F0069 0900R0000                  2 DECIMAL DIGIT
        000F0070 2200R0018                  STORE IN OPCODE     A LEFT
        000F0071 1200E0005                  THEN .*ECHO OPCODE: STORE
        000F0072 1000F0072                  CALL ROUTINE GETREG R ADD
        000F0073 0104F0000                  TO GET REGIONAL ADDRTR
        000F0074-1200E0006                  SAVE REG ADDR (FULL STORE
        000F0075 1000E0000                  PROCESS CARD TYPE   R ADD
        000F0076 0400F0117                  TR TO DECODE TYPE 0 TR 0
        000F0077 0500B0008                  CHECK IF CARD TYPE  SUB
        000F0078 0400F0080                  TR TO DECODE TYPE 1 TR 0
        000F0079 0000R0003                  STOP BECAUSE CARD TYSTOP
        000F0080 1000F0080                  FLUSH TO CARD       R ADD
        000F0081 0106F0000                  INSTR ALREADY       TR
        000F0082 0000R0002                  ASSEMBLED IF ANY
        000F0083 1000E0003                  DECODE CONTROL CARD R ADD
        000F0084 0400F0086                  LOCATION INDEX SHOULTR 0
        000F0085 0000R0004                  BE ZERO IN CONTROL CSTOP
        000F0086-1500E0002                  CHECK IF CAN RESOLVELOAD MQ
        000F0087 1000F0087                  IF SO THE REGION HASR ADD
        000F0088 0105F0000                  ALREADY BEEN DEFINEDTR
        000F0089 0500B0017                  SO STOP WITH ERROR  SUB
        000F0090 0400F0092                                      TR 0
        000F0091 0000R0005                  STOP BECAUSE REGION STOP
        000F0092-1500E0006                  RESOLVE REGIONAL    LOAD MQ
        000F0093 1000F0093                  ADDRESS (RADDR FULLWR ADD
        000F0094 0105F0000                  THIS IS THE ORIGIN OTR
        000F0095 1200E0003                  STORE IT AT ILOC    STORE
        000F0096 0300F0098                  IF CANNOT RESOLVE RETR +
        000F0097 0000R0006                  STOP BECAUSE UNDEF OSTOP
        000F0098 1000E0013                  DECR FILE ADDRESS POR ADD
        000F0099 0500B0007                  TO MAKE ROOM FOR NEWSUB
        000F0100 0500E0012                  CHECK IF OVERFLOWS  SUB
        000F0101 0300F0103                  TR IF HAS ROOM      TR +
        000F0102 0000R0007                  STOP BECAUSE FILE FUSTOP
        000F0103 0900E0012                  UPDATE FILE ADDRESS ADD
        000F0104 1200E0013                  FILEAD IN ACC .*ECHOSTORE
        000F0105 1300F0107                  SET ADDR TO STORE RESTORE A
        000F0106-1000E0002                  CODE AND BASEINTO FIR ADD
        000F0107-1200R0000                  STORE NEW REGION CODSTORE
        000F0108-0500B0024                  CHECK IF REGION OOF SUB
        000F0109 0400F0111                  HAS ORIGIN 0000.    TR 0
        000F0110 0100F0113                                      TR
        000F0111 1000B0008                  IF SO, SET ORG0FLAG R ADD
        000F0112 1201E0000                                      STORE
        000F0113 1000F0113                  PRINT CONTROL CARD  R ADD
        000F0114 0106F0000                                      TR
        000F0115 0000R0000                  
        000F0116 0100F0018                  NEXT INPUT CARD     TR
        000F0117-1500E0002                  DECODE INSTRUCTION CLOAD MQ
        000F0118 1000F0118                  CARD TYPE 0         R ADD
        000F0119 0105F0000                  RESOLVE LOCATION    TR
        000F0120 1200E0001                  IF CANNOT BE RESOLVESTORE
        000F0121 0300F0123                  THEN                TR +
        000F0122 0000R0008                  STOP BECAUSE LOC REGSTOP
        000F0123-1500E0006                  RESOLVE ADDRESS     LOAD MQ
        000F0124 1000F0124                  IF CANNOT BE RESOLVER ADD
        000F0125 0105F0000                  THEN                TR
        000F0126 1200E0008                  .*ECHO OPADDR:      STORE
        000F0127 0300F0129                                      TR +
        000F0128 0000R0009                  STOP BECAUSE ADDR RESTOP
        000F0129 1000E0005                                      R ADD
        000F0130 2200R0012                                      A LEFT
        000F0131 0900E0008                                      ADD
        000F0132 1200E0005                                      STORE
        000F0133 1000E0004                                      R ADD
        000F0134 0400F0137                                      TR 0
        000F0135 0600E0005                                      R SUB
        000F0136 1200E0005                                      STORE
        000F0137 0800R0000                                      NOOP
        000F0138 1000F0138                  PRINT CURRENT INSTRUR ADD
        000F0139 0106F0000                  CARD, AND ADD INSTR TR
        000F0140 0000R0001                  OUTPUT BINARY CARD
        000F0141 0100F0018                  PROCEED WITH NEXT INTR
        003F0000 0900B0007                  GET CHARS FROM CARD ADD
        003F0001 1303F0007                  SET FIRST PARAM ADDRSTORE A
        003F0002 0900B0008                  X                   ADD
        003F0003 1303F0071                  SET ROUTINE EXIT    STORE A
        003F0004 1000B0016                  DEFAULT NO BLANKS ALR ADD
        003F0005 1203F0072                  X                   STORE
        003F0006-1201E0004                  RESET RESULT        STORE
        003F0007 1000R0000                  READ FIRST ROUTINE PR ADD
        003F0008 1201E0002                  IS THE FORMAT OF CHASTORE
        003F0009 0303F0014                  IF FORMAT IS NEGATIVTR +
        003F0010 0601E0002                  THEN RESET FORMAT SIR SUB
        003F0011 1201E0002                  AND SIGNAL BLANK CHASTORE
        003F0012 1000B0008                  X                   R ADD
        003F0013 1203F0072                  X                   STORE
        003F0014 1001F0000                  RESET TO INITAL ROW R ADD
        003F0015 1303F0029                  X                   STORE A
        003F0016 1000B0016                  RESET COLUMN CHAR   R ADD
        003F0017 1201E0003                  X                   STORE
        003F0018 1001F0003                  RESET TO CARD ADDRESR ADD
        003F0019 1303F0023                  X                   STORE A
        003F0020 1003F0024                  SELECT NEXT CARD COLR ADD
        003F0021 0900B0008                  X                   ADD
        003F0022 1303F0024                  X                   STORE A
        003F0023-1500R0000                  READ ROWS LOOP      LOAD MQ
        003F0024 2000R0000                  SHIFT TO GET NCOL BIL LEFT
        003F0025 1000B0016                  FROM ROW            R ADD
        003F0026 2000R0001                  X                   L LEFT
        003F0027 0403F0031                  IF NO PUNCH TR PROCETR 0
        003F0028 1001E0003                  HAS PUNCH, SO ADD K R ADD
        003F0029 0900R0000                  TO CHAR             ADD
        003F0030 1201E0003                  X                   STORE
        003F0031 1003F0023                  SELECT NEXT LEFT ROWR ADD
        003F0032 0500B0005                  X                   SUB
        003F0033 1203F0023                  X                   STORE
        003F0034 1003F0029                  SELECT NEXT K VALUE R ADD
        003F0035 0900B0008                  X                   ADD
        003F0036 1303F0029                  X                   STORE A
        003F0037 0501F0001                  CHECK IF END OF ROWSSUB
        003F0038 0303F0040                  YES, CHAR READ      TR +
        003F0039 0103F0023                  NO, LOOP FOR MORE ROTR
        003F0040 1003F0072                  CHECK IF BLANK CHAR R ADD
        003F0041 0403F0044                  NOT ALLOWED, TR TO NTR 0
        003F0042 1001E0003                  BLANK ALLOWED (O VALR ADD
        003F0043 0103F0049                                      TR
        003F0044 1001E0003                  IF CHAR IS PUNCH AT R ADD
        003F0045 0403F0069                  SET IT TO ZERO, ERROTR 0
        003F0046 0500B0009                  X                   SUB
        003F0047 0403F0049                  X                   TR 0
        003F0048 0900B0009                  X                   ADD
        003F0049 1201E0003                  X .*ECHO CHAR:      STORE
        003F0050 1000B0016                  GET LEFTMOST OCTAL DR ADD
        003F0051 1501E0002                  1=DEC, 2=OCT, 3=ALPHLOAD MQ
        003F0052 2000R0003                  X                   L LEFT
        003F0053 1401E0002                  X                   STORE MQ
        003F0054 2200R0017                  X                   A LEFT
        003F0055 0500B0008                  NOW 0=DEC, 1=OCTAL, SUB
        003F0056 0901F0002                  SET MBASE TO 10,8,40ADD
        003F0057 1303F0059                  ON FORMAT           STORE A
        003F0058-1501E0004                  RESULT (36B) = RESULLOAD MQ
        003F0059 1600R0000                  +                   MPY
        003F0060-2000R0017                  CHAR (18B)          L LEFT
        003F0061-1201E0004                  X                   STORE
        003F0062 1001E0003                  X                   R ADD
        003F0063 2300R0018                  X                   A RIGHT
        003F0064-0901E0004                  X                   ADD
        003F0065-1201E0004                  X                   STORE
        003F0066 1001E0002                  IF NO MORE FORMAT   R ADD
        003F0067 0403F0070                  DIGITS THEN FINISH RTR 0
        003F0068 0103F0014                  ELSE PROCESS NEXT COTR
        003F0069 0000R0001                  STOP BECAUSE INVALIDSTOP
        003F0070-1001E0004                  RETURN RESULT       R ADD
        003F0071 0100R0000                  ROUTINE EXIT .*ECHO TR
        003F0072 0000R0000                  BLANK ALLOWED FLAG LOCAL VARIABLE
        004F0000 0900B0007                  GET 3 CHARS REGION FADD
        004F0001 1304F0013                  SET ROUTINE EXIT    STORE A
        004F0002 1004F0002                  CALL ROUTINE GETCHARR ADD
        004F0003 0103F0000                  TO GET REGIONAL CODETR
        004F0004 0900R1536                  7 CHARS: 2 X DEC DIGIT + 1 X ALPHA CHAR
        004F0005 2200R0018                  SET REGIONAL CODE INA LEFT
        004F0006 1200E0010                  STOTE REGIONAL CODE STORE
        004F0007 1004F0007                  CALL ROUTINE GETCHRSR ADD
        004F0008 0103F0000                  TO GET 4 DIGITS     TR
        004F0009 0900R0576                  DECIMAL VALUE
        004F0010 2200R0018                  RESULT TO 18B IN ACCA LEFT
        004F0011 1200E0011                  STOTE REGIONAL INDEXSTORE
        004F0012-1000E0010                                      R ADD
        004F0013 0100R0000                  ROUTINE EXIT        TR
        005F0000 0900B0007                  RESOLVE REGIONAL ADDADD
        005F0001 1305F0028                  RETURN IN ACC ACTUALSTORE A
        005F0002-1401E0004                  MINUS1 IF CANNOT BE STORE MQ
        005F0003 1000E0014                  SEARCH REG CODE FROMR ADD
        005F0004 1305F0029                  FILEAD TO FILELAST  STORE A
        005F0005 1000E0013                                      R ADD
        005F0006 1305F0007                                      STORE A
        005F0007 1000R0000                                      R ADD
        005F0008 0501E0004                                      SUB
        005F0009 0405F0017                                      TR 0
        005F0010 1005F0007                                      R ADD
        005F0011 0900B0007                                      ADD
        005F0012 1305F0007                                      STORE A
        005F0013 1005F0007                                      R ADD
        005F0014 0505F0029                                      SUB
        005F0015 0405F0027                                      TR 0
        005F0016 0105F0007                                      TR
        005F0017 1005F0007                  FOUND, GET REG ORIGIR ADD
        005F0018 1305F0019                                      STORE A
        005F0019-1000R0000                  SAVE AS             R ADD
        005F0020-1200E0016                  LAST FOUND .*ECHO FOSTORE
        005F0021-0901E0004                  APPLY ORIGIN TO REG ADD
        005F0022 2100R0012                  RETURN ACTUAL ADDR  L RIGHT
        005F0023 1000B0016                                      R ADD
        005F0024 2000R0012                                      L LEFT
        005F0025 2200R0018                                      A LEFT
        005F0026 0105F0028                  IN LEFT ACC         TR
        005F0027 1000B0017                  NOT FOUND, RETURN -1R ADD
        005F0028 0100R0000                  EXIT ROUTINE .*ECHO TR
        005F0029 1000R0000                  LOOP END VALUE      R ADD
        006F0000 0900B0007                                      ADD
        006F0001 1306F0004                                      STORE A
        006F0002 0900B0008                                      ADD
        006F0003 1308F0044                                      STORE A
        006F0004 1000R0000                                      R ADD
        006F0005 1285F0058                  X .*ECHO PRINT_MODE:STORE
        006F0006 0500B0007                                      SUB
        006F0007 0408F0000                                      TR 0
        006F0008 1085F0058                                      R ADD
        006F0009 0500B0008                                      SUB
        006F0010 0406F0012                                      TR 0
        006F0011 0106F0041                                      TR
        006F0012 1000B0008                  ADD ACTUAL OPCODE ANR ADD
        006F0013 2200R0013                  X                   A LEFT
        006F0014-1201E0006                  X .*ECHO PRINT_SETOPSTORE
        006F0015 1000E0005                  PRINT ACTUAL CURLOC R ADD
        006F0016 1200E0011                                      STORE
        006F0017 1000E0001                  X                   R ADD
        006F0018 1200E0010                                      STORE
        006F0019-1000E0010                                      R ADD
        006F0020 2100R0030                  SHIFT INTO MQ .*ECHOL RIGHT
        006F0021 1000B0016                                      R ADD
        006F0022 2000R0003                  X                   L LEFT
        006F0023 2200R0018                  X                   A LEFT
        006F0024 1201E0003                  X .*ECHO PRINT_CHAR:STORE
        006F0025 1000B0000                                      R ADD
        006F0026 0501E0003                                      SUB
        006F0027 2200R0002                                      A LEFT
        006F0028 0900B0008                                      ADD
        006F0029 0901F0003                                      ADD
        006F0030 1306F0033                                      STORE A
        006F0031 1306F0034                                      STORE A
        006F0032 1001E0006                                      R ADD
        006F0033 0900R0000                                      ADD
        006F0034 1200R0000                                      STORE
        006F0035 1001E0006                                      R ADD
        006F0036 2300R0001                                      A RIGHT
        006F0037 1201E0006                                      STORE
        006F0038 2300R0022                                      A RIGHT
        006F0039 0406F0041                                      TR 0
        006F0040 0106F0021                                      TR
        006F0041 2600R0512                  PREPARE TO WRITE CBUWRITE
        006F0042 1001F0003                  RESET TO INITIAL COPR ADD
        006F0043 1306F0047                  FOR CARD BUFFER     STORE A
        006F0044 1006F0047                  X .*ECHO PRINT      R ADD
        006F0045 0500B0018                  X                   SUB
        006F0046 1285F0057                  X                   STORE
        006F0047-3100R0000                  COPY WORD TO PRINTERCOPY
        006F0048 1006F0047                  X                   R ADD
        006F0049 0500B0007                  INCR CDBUF ADDR     SUB
        006F0050 1306F0047                  X                   STORE A
        006F0051 0585F0057                  CHECK FOR END       SUB
        006F0052 0406F0054                                      TR 0
        006F0053 0106F0047                                      TR
        006F0054 1085F0058                                      R ADD
        006F0055 0408F0044                  IF MODE ZERO EXIT ROTR 0
        007F0000 1000E0015                  ADD INSTR TO PUNCH BR ADD
        007F0001 0307F0004                  IF CARD EMPTY, INIT TR +
        007F0002 1000E0001                  CARD BASE ADDR      R ADD
        007F0003 1200E0015                                      STORE
        007F0004 1000E0001                  CHECK IF THERE IS A R ADD
        007F0005 0500E0015                  BETWEEN THIS INSTR ASUB
        007F0006 0500E0009                  PREVIOUS ONE        SUB
        007F0007 0407F0033                  TR IF NO GAP        TR 0
        007F0008 0307F0010                  TR IF POSITIVE GAP  TR +
        007F0009 0000R0010                  STOP BECAUSE NEGATIVSTOP
        007F0010 1201E0003                  NUMBER OF HWORDS OF STORE
        007F0011 1201E0004                                      STORE
        007F0012 1000E0009                                      R ADD
        007F0013 0900E0012                                      ADD
        007F0014 1307F0021                                      STORE A
        007F0015 0500E0013                  CHECK IF ROOM AVAILASUB
        007F0016 0900B0007                  GUARD               ADD
        007F0017 0307F0019                  TR IF NO ROOM       TR +
        007F0018 0107F0020                                      TR
        007F0019 0000R0011                  STOP BECAUSE GAP BETSTOP
        007F0020 1000B0016                                      R ADD
        007F0021 1200R0000                                      STORE
        007F0022 1001E0003                                      R ADD
        007F0023 0500B0008                                      SUB
        007F0024 0407F0030                                      TR 0
        007F0025 1201E0003                                      STORE
        007F0026 1007F0021                                      R ADD
        007F0027 0900B0008                                      ADD
        007F0028 1307F0021                                      STORE A
        007F0029 0107F0020                                      TR
        007F0030 1000E0009                                      R ADD
        007F0031 0901E0004                                      ADD
        007F0032 1200E0009                                      STORE
        007F0033 1000E0009                  ADD INSTR TO PUNCH BR ADD
        007F0034 0900E0012                  .*ECHO PUNCHOUTCOUNTADD
        007F0035 1307F0042                                      STORE A
        007F0036 0500E0013                  CHECK IF ROOM AVAILASUB
        007F0037 0900B0007                  GUARD               ADD
        007F0038 0307F0040                  TR IF NO ROOM       TR +
        007F0039 0107F0041                                      TR
        007F0040 0000R0012                  STOP BECAUSE ASSEMBLSTOP
        007F0041 1000E0005                  ADD INSTRUCTION     R ADD
        007F0042 1200R0000                  TO FILE             STORE
        007F0043 1000E0009                                      R ADD
        007F0044 0900B0008                                      ADD
        007F0045 1200E0009                                      STORE
        007F0046 0108F0044                                      TR
        008F0000 1000E0009                  FLUSH OUTPUT BUF TO R ADD
        008F0001 0408F0044                  NOTHING TO FLUSH, JUTR 0
        008F0002 1001E0000                                      R ADD
        008F0003 0408F0005                  PUNCH CARDS TO BE LOTR 0
        008F0004 0108F0018                  PUNCH RAW BINARY CARTR
        008F0005 1000E0009                                      R ADD
        008F0006 0900B0008                  MAKE WORDS TO PUNCH ADD
        008F0007 2300R0019                  WITH BP05 EVEN BEFORA RIGHT
        008F0008 2200R0019                  STORING THEM IN V   A LEFT
        008F0009 1285F0053                                      STORE
        008F0010 1000E0012                                      R ADD
        008F0011 1285F0052                                      STORE
        008F0012 1000E0015                                      R ADD
        008F0013 0500B0007                                      SUB
        008F0014 1285F0054                                      STORE
        008F0015 1008F0015                                      R ADD
        008F0016 0185F0000                                      TR
        008F0017 0108F0039                                      TR
        008F0018 1000E0012                                      R ADD
        008F0019 1308F0029                                      STORE A
        008F0020 1008F0029                                      R ADD
        008F0021 0500E0009                                      SUB
        008F0022 0500B0008                                      SUB
        008F0023 2300R0019                                      A RIGHT
        008F0024 2200R0019                                      A LEFT
        008F0025 1285F0057                                      STORE
        008F0026 2600R1024                  PREPARE TO PUNCH CARWRITE
        008F0027 1000B0021                                      R ADD
        008F0028 1201E0003                                      STORE
        008F0029-3100R0000                                      COPY
        008F0030 1008F0029                                      R ADD
        008F0031 0500B0007                                      SUB
        008F0032 1308F0029                                      STORE A
        008F0033 0585F0057                                      SUB
        008F0034 0408F0039                  EXIT PUNCH WORD LOOPTR 0
        008F0035 1001E0003                                      R ADD
        008F0036 0500B0008                                      SUB
        008F0037 0408F0027                                      TR 0
        008F0038 0108F0028                                      TR
        008F0039 2600R2052                                      WRITE
        008F0040 1000B0017                                      R ADD
        008F0041 1200E0015                                      STORE
        008F0042 1000B0016                                      R ADD
        008F0043 1200E0009                                      STORE
        008F0044 0100R0000                                      TR
        085F0000 0900B0007                                      ADD
        085F0001 1385F0045                                      STORE A
        085F0002 1085F0052                                      R ADD
        085F0003 1385F0012                  INITIALIZE ADD SEQUESTORE A
        085F0004 1385F0032                  SEQUENCE, COPY INDEXSTORE A
        085F0005 0985F0053                  ADD INDEX           ADD
        085F0006 1385F0046                                      STORE A
        085F0007 1385F0047                                      STORE A
        085F0008 0685F0054                                      R SUB
        085F0009 0585F0053                  ADD HALF WORD COUNT SUB
        085F0010 2300R0017                  ADDRESS TO CHECK SUMA RIGHT
        085F0011-1285F0055                                      STORE
        085F0012 1000R0000                                      R ADD
        085F0013 1285F0052                                      STORE
        085F0014-0685F0051                                      R SUB
        085F0015 2200R0001                                      A LEFT
        085F0016-0985F0055                  ADD SEQUENCE FOR COMADD
        085F0017-1285F0055                  CARD CHECK SUM      STORE
        085F0018 0685F0012                                      R SUB
        085F0019 0500B0008                                      SUB
        085F0020 1385F0012                                      STORE A
        085F0021 0985F0047                                      ADD
        085F0022 0385F0012                                      TR +
        085F0023 2600R1024                  SELECT CARD PUNCH   WRITE
        085F0024-3185F0055                  PUNCH NINE LEFT     COPY
        085F0025-3185F0053                  PUNCH NINE RIGHT    COPY
        085F0026 1085F0032                  INITIALIZE END OF CAR ADD
        085F0027 0500B0019                                      SUB
        085F0028 1385F0048                                      STORE A
        085F0029 1085F0032                                      R ADD
        085F0030 0585F0046                                      SUB
        085F0031 0485F0045                                      TR 0
        085F0032-3100R0000                                      COPY
        085F0033 1085F0032                  COPY SEQUENCE       R ADD
        085F0034 0500B0007                                      SUB
        085F0035 1385F0032                                      STORE A
        085F0036 0585F0048                                      SUB
        085F0037 0385F0029                                      TR +
        085F0038 1085F0032                  COINCIDENCE TEST FORR ADD
        085F0039 0585F0046                  AND END OF COPY CONDSUB
        085F0040 0485F0045                                      TR 0
        085F0041 2600R1024                  SELECT CARD PUNCH   WRITE
        085F0042 1085F0048                  SET UP END OF CARD IR ADD
        085F0043 0985F0049                                      ADD
        085F0044 0285F0028                  CONTINUE PUNCHING   TR OV
        085F0045 0100R0000                  END OF PUNCHING     TR
        085F0046-3100R0000                  LOOP END FOR COPY DACOPY
        085F0047 1000R0000                  LOOP END FOR READ DAR ADD
        085F0048-3100R0000                  COPY END LOOP   ADDRCOPY
        085F0049-3100R0048                                      COPY
        085F0051 0000R0000                  
        085F0052 0000R0000                  START OF BLOCK TO PUNCH (MUST BE EVEN)
        085F0053 0000R0000                  NUMBER OF HALF WORDS TO PUNCH (MUST BE EVEN)
        085F0054 0000R0000                  ADDR WHERE WILL BE RESTORED BY SL05 (=R-2)
        085F0057 0000R0000                  
        085F0058 0000R0000                  
        000B0000 0000R0009                  VALUE OF ROW 9
        000B0001 0000R0008                  
        000B0002 0000R0007                  
        000B0003 0000R0006                  
        000B0004 0000R0005                  
        000B0005 0000R0004                  
        000B0006 0000R0003                  
        000B0007 0000R0002                  
        000B0008 0000R0001                  VALUE OF ROW 1
        000B0009 0000R0010                  VALUE OF ROW 0(TEN)
        000B0010 0000R0020                  VALUE OF ROW X(11)
        000B0011 0000R0030                  VALUE OF ROW Y(12) HIGH PUNCH
        000B0012 0000R0010                  MULTIPLIER BASE DEPENDING ON CHAR
        000B0013 0000R0008                  FORMAT DECIMAL, OCTAL, ALPHA
        000B0014 0000R0100                  
        000B0015 0100R0000                  
        000B0016 0000R0000                  
        000B0017-0000R0001                  
        000B0018 0000R0048                  
        000B0019 0000R0044                  
        000B0020 0000R0032                  
        000B0021 0000R0024                  
        000B0022 0000R0029                  REGION 00R
        000B0023 0000R0000                  
        000B0024 0000R0036                  REGION 00F
        000B0025 0000R0000                  INDEX 0000
        001F0000 0000B0000                  ADDR OF START OF ROWSTOP
        001F0001 0900B0012                  ADDR OF END ROW K VAADD
        001F0002 0000B0012                  ADDR OF MBASE TABLE STOP
        001F0003 0000C0000                  ADDR OF CARD BUFFER STOP
        001F0004 0001F0004                  FILE START ADDR. MUSSTOP
