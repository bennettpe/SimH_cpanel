
                           MMA 000                           

                           Decimal to binary conversion of instruction card
                           Octionary Programming System 

                           Poughkeepsie laboratory
                           (c) 24 March 1952 by M.M.Astrahan

                           listing at 102663096-05-01-acc.pdf, page 192
                           from Computer History Museum collection

OCT                        DEC=Number are in decimal (default). OCT=Numbers are in octal

NNNN S OPNAME   OP ADDR    Remarks ... (max 79 chars)
                                                                                          
0000   77  0002            0.1   -   COPY       0002  \                   
0001   77  0004            0.2   -   COPY       0004   |
0002   77  0006            0.3   -   COPY       0006   |
0003   77  0010            0.4   -   COPY       0010   |
0004   12  0007            0.5       R ADD       0.8   |
0005   05  0011            0.6       SUB        0.10   |
0006   14  0007            0.7       STORE       0.8   |
0007   77  0010            0.8   -   COPY      (0010)   \  Self loading
0010   01  0004            0.9       TR          0.5    /  Sub program
0011   00  0002            0.10      STOP       0002   |
0012   12  0020            0.11      R ADD      0.17   |
0013   05  0011            0.12      SUB        0.10   |
0014   14  0020            0.13      STORE      0.17   |
0015   04  0021            0.14      TR 0        1.1   |
0016   30  4000            0.15      READ       4000   |
0017   01  0007            0.16      TR          0.8   |
0020   00  0006            0.17      STOP      (0006) / 

0021   30  4000            1.1       READ       4000      Card reader
0022   12  0130            1.2       R ADD      12.1                                   (12.1 = zero)   
0023   14  0154            1.3       STORE      11.3      Clear storage                clear (11.3 card instr loc)
0024   14  0155            1.4       STORE      11.4      space                        clear (11.4 card instr read)
0025   14  0152            1.5       STORE      10.3                                   clear (10.3 current row)
0026   12  0124            1.6       R ADD      11.5      Set K=9                 
0027   14  0153            1.7       STORE      11.2                                   (11.2=K=current card row index= 220000)
0030   37  0150            1.8       COPY       10.1      Read left hand cd.row        read row in 10.1 and 10.2 = 0150/1 
0031   01  0033            1.9       TR         1.11
0032   01  7737            1.10      TR         7737      E.F.                         end of file termination
0033   37  0151            1.11      COPY       10.2      Read right hand card row
0034   12  0153            1.12      R ADD      11.2      Is K=0                   
0035   04  0076            1.13      TR 0       5.1

0036   12  0150            2.1       R ADD      10.1      Accum rows for
0037   11  0152            2.2       ADD        10.3      check (K!=0)
0040   14  0152            2.3       STORE      10.3                                   (10.3=a bit indicated has digit)
0041   12  0150            2.4       R ADD      10.1                                   acc=cols 1..18
0042   27  0015            2.5       A RIGHT    15 (13)   cd col 5 is in 2^-17         nor acc=cols 1..5
0043   11  0123            2.6       ADD        11.1      pos at accum                 +130
0044   15  0055            2.7       STORE A    3.1       addr part of 3.1=(N+12.1)
0045   26  0023            2.8       A LEFT     23 (19)   Eliminate instruction
0046   27  0020            2.9       A RIGHT    20 (16)   Location digits
0047   11  0123            2.10      ADD        11.1
0050   15  0061            2.11      STORE A    3.5       Addr part of 3.5=(M+12.1)
0051   26  0023            2.12      A LEFT     23 (19)   Eliminate instruction
0052   27  0017            2.13      A RIGHT    17 (15)   op. part digits
0053   11  0123            2.14      ADD        11.1
0054   15  0066            2.15      STORE A    3.10      Addr part of 3.10=(L+12.1)   

                                     N=Instr. loc. decimal digits from current row
                                     M=Instr. op. part decimal digits from current row
                                     L=Instr. address. part decimal digits from current row

0055   17  0000            3.1       LOAD MQ   (12.i)     i=1, or 2,... or 16          0130,0131... 
0056   20  0153            3.2       MPY        11.2      Convert for current row
0057   11  0154            3.3       ADD        11.3      Accum parts of
0060   14  0154            3.4       STORE      11.3      Instr loc
0061   17  0000            3.5       LOAD MQ   (12.i)     i=1, or 2, or 3, or 4
0062   20  0153            3.6       MPY        11.2 
0063   26  0014            3.7       A LEFT     14(12)
0064   11  0155            3.8       ADD        11.4      Accum parts of
0065   14  0155            3.9       STORE      11.4      Instr op part
0066   17  0000            3.10      LOAD MQ   (12.i)     i=1, or 2,... or 16
0067   20  0153            3.11      MPY        11.2
0070   11  0155            3.12      ADD        11.4      Accum parts of 
0071   14  0155            3.13      STORE      11.4      Instr Addr part 

0072   12  0153            4.1       R ADD      11.2
0073   05  0125            4.2       SUB        11.6      Reduce K by 1
0074   14  0153            4.3       STORE      11.2
0075   01  0030            4.4       TR          1.8

0076   12  0150            5.1       R ADD      10.1      k=0
0077   11  0152            5.2       ADD        10.3      check reading of
0100   05  0127            5.3       SUB        11.8      digit rows     
0101   04  0103            5.4       TR 0        6.1      (There is a typo in listing. Stated 6.9 but should be 6.9) 
0102   00  0021            5.5       STOP        1.1      Error

0103   37  0150            6.1       COPY       10.1      Read "11" row
0104   37  0151            6.2       COPY       10.2              
0105   12  0154            6.3       R ADD      11.3      Prepare to store 
0106   15  0114            6.4       STORE A    6.10      instruction            .*echo Loc:
0107   12  0150            6.5       R ADD      10.1        
0110   04  0113            6.6       TR 0        6.9      
0111   06  0155            6.7       R SUB      11.4      Instruction is -
0112   01  0114            6.8       TR         6.10      
0113   12  0155            6.9       R ADD      11.4      Instruction is +
0114   14  0000            6.10      STORE   (Instr Loc)  Store instruction     .*echo Instr:   

0115   37  0152            7.1       COPY       10.3      Read left hand "12" row
0116   12  0152            7.2       R ADD      10.3      
0117   11  0150            7.3       ADD        10.1      Check reading of
0120   05  0126            7.4       SUB        11.7      sign rows
0121   04  0021            7.5       TR 0        1.1      
0122   00  0021            7.6       STOP        1.1      Error
   
0150          0            10.1      (left hand card words)   \
0151          0            10.2      (right hand card words)   + Temporary storage 
0152          0            10.3      (acc of rows for check)  /

0123   00  0130            11.1      Stop       12.1
0153          0            11.2      (row index = K)      K=(9,8,...,1,0) x 2^-4      
0154          0            11.3      (acc. of parts converted instr. loc.)
0155          0            11.4      (acc. of parts of converted instr)
0124   22  0000            11.5      9 x 2^-4
0125   02  0000            11.6      1 x 2^-4
0126   01  0000            11.7      1 x 2^-5             
 
0127   36  7700            11.8      1 x 2^-4 + 63 x 2^-11 = 367700 (octionary)

                           FOLLOWING TABLE FOR MMA-000 (DEC -> BIN)

0130   00  0000            12.1    00  0000   0
0131   00  0020            12.2    00  0016   (1)10 x 2^-13  
0132   00  0240            12.3    00  0160   (10)10 x 2^-13  
0133   00  0260            12.4    00  0176   (11)10 x 2^-13  
0134   00  3100            12.5    00  1600   100
0135   00  3120            12.6    00  1616   101
0136   00  3340            12.7    00  1760   110
0137   00  3360            12.8    00  1776   111
0140   03  7200            12.9    03  3712   1000
0141   03  7220            12.10   03  3728   1001
0142   03  7440            12.11   03  3872   1010
0143   03  7460            12.12   03  3888   1011
0144   04  2300            12.13   04  1216   1100
0145   04  2320            12.14   04  1232   1101
0146   04  2540            12.15   04  1376   (1110)10 x 2^-13   
0147   04  2560            12.16   04  1392   (1111)10 x 2^-13   



                               Usage:

                               Load a deck of decimal cards. Each card contains one half-word
                               and its location. MMA000 translates the half-word and store it 
                               in memory at the indicated location

                           
                               Input Card Deck:
                                  a) MMA000 (3 self loading binary cards)
                                  b) Decimal cards
                                  c) Control card (optional, decimal format)

                               Operation: MMA000 is a self-loading program:
                                  - Select load from card 
                                  - set address to 0000
                                  - press load button

                               Output:
                                  (none)

                               Normal Stops:
                                  - STOP At IC 4063 on termination (card reader end of file)

                               Error stops:
                                  - STOP At IC 0066 if digit misplaced
                                  - STOP At IC 0082 if sign +/- misplaced
                               

                               Control Card: 
                                  - Is a text octionary format card. Allows to auto-run program
                                    just loaded.

                                    Should be

                                        0017+01XXXX          XXXX=Start location of program (decimal)
                                   

                               Input octionary cards:

                                  - The decimal input are text cards (not binary) with the
                                    following format:

                                         column  1     blank (*not* 0)
                                                 2-5   location of instruction (decimal)
                                                 6     sign of instruction (row 11 punch for -, row 12 for +)
                                                 7-8   operation part of instruction (decimal)
                                                 9-12  address of instruction (decimal)
                                                 13-18 Blank



                                    Column:
                                             10  14 17        27
                                             v   v  v         v
                                      ------------------------------------------------------+ 
                                    /        LLLL+OOAAAA      Comment                       |
                                   |                                                        |
                                   |                                                        |
                                   |                                                        |
                                   |                                                        |
                                   |                                                        |
                                   |                                                        |
                                   |                                                        |
                                   |                                                        |
                                   |                                                        |
                                   |                                                        |
                                   +--------------------------------------------------------+





                       