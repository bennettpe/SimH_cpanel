        DEC
        NNNN OP ADDR COMMENTS
          88+ 9 2048 LOADCC   + ADD       TWO          LOAD PACTSCR INTO CARD IMAGE SO 
          89+13  108          + STORE A   CPCCEX       CURRENT PACT SOURCE CODE CAN BE PRINTED
          90+10 2045          + R ADD     ZERO         COPY TO LEFT SIDE OF SOURCE CODE CARD IMAGE
          91+13   95          + STORE A   CPCC1        AT 0..46 FROM PACTSCR
          92+10  111          + R ADD     CPCC2
          93+13   94          + STORE A   CPCC 
          94-10    0 CPCC     - R ADD     /   /
          95-12    0 CPCC1    - STORE     /   /
          96+10   95          + R ADD     CPCC1
          97+ 5 2048          + SUB       TWO
          98+13  100          + STORE A   CPCC1B
          99+10 2045          + R ADD     ZERO
         100-12    0 CPCC1B   - STORE     /   /
         101+10   94          + R ADD     CPCC
         102+ 5 2048          + SUB       TWO
         103+13   94          + STORE A   CPCC
         104+10   95          + R ADD     CPCC1
         105+ 5 2049          + SUB       D4
         106+13   95          + STORE A   CPCC1
         107+ 5  110          + SUB       CPCCE
         108+ 4    0 CPCCEX   + TR 0      /   /        RETURN TO CALLER
         109+ 1   94          + TR        CPCC
         110-12   48 CPCCE    - STORE     0048         LAST LOCATION TO COPY FROM 
         111+ 8  392 CPCC2    + NOOP      PACTSRC      PACTSRC = FIRST LOCATION TO COPY FROM
         112+10  112 INIT     + R ADD     *            
         113+ 1   55          + TR        PRTNLINE     
         114+ 0  101          + STOP      0101         STRINGZ AT COL 1
         115+ 0 2062          + STOP      MSGSTART     "FINAL ASSEMBLY PASS 3"
         116+ 0    6          + STOP      0006         END OF LINE. PRINT IF SWITCH 6 IS ON
         117+10 2045          + R ADD     ZERO         CLEAR CC RECORD
         118+12  416          + STORE     REGION     
         119+12  417          + STORE     STEP       
         120+12  418          + STORE     OP         
         121+12  419          + STORE     FACT       
         122+12  420          + STORE     S1         
         123+12  421          + STORE     S2         
         124+12  422          + STORE     QR         
         125+12  423          + STORE     QF         
         126-12  424          - STORE     NUM        
         127+12  426          + STORE     CLUE       
         128+12  427          + STORE     STEPN      
         129+12  428          + STORE     FACTN      
         130+12  429          + STORE     FACTREG    
         131+12  430          + STORE     S1N        
         132+12  431          + STORE     S2N        
         133+12  432          + STORE     D1N        
         134+12  433          + STORE     D2N        
         135+12  434          + STORE     NINST      
         136+12  435          + STORE     NINCR 
         137+10  636          + R ADD     CCLEN        NOT NEEDED. THIS INSTR IS JUST TO AVOID A "NOT REFERENCED" WARNING ON ASSEMBLING     
         138+10 2044          + R ADD     MAXNINST     NOT NEEDED. THIS INSTR IS JUST TO AVOID A "NOT REFERENCED" WARNING ON ASSEMBLING     
         139+10 2045          + R ADD     ZERO
         140+12 2043          + STORE     I.EXT        EXTENSION (=SIZE IN HALF WORDS) OF TOTAL INSTR OF PROGRAM
         141+12 1441          + STORE     NSYMBS       NUMBER OF ENTRIES IN TSYMBOLS TABLE (SYMBOLS USED BY ALL REGIONS)
         142+10 2048          + R ADD     TWO          TEMp REGION HAS A MIN SIZE OF 2 TO HOLE T0 USED AS TEMP VAR FOR ARITHMETIC CALCS 
         143+12 2042          + STORE     T.EXT        EXTENSION (=SIZE IN HALF WORDS) OF TEMP VARS REGION (IS EVEN)
         144+10  144          + R ADD     *
         145+ 1   69          + TR        RWDRUM       READ TSYMBREF TABLE (SYMBOLS USED BY ALL REGIONS) FROM DRUM 
         146+24  128          + READ      0128         DRUM INSTR
         147+ 0    0          + STOP      0000         DRUM ADDR 
         148+ 0 1440          + STOP      MAXNSYMB     ADDR OF START OF TABLES
         149+ 0  602          + STOP      0602         MAXNSYMB (1 HALF-WORD) + NSYMBS (1 HW) + TSYMBREF (600 HW) 
         150+28  258          + REWIND    TAPEIN       REWIND TAPE IN (PACT COMPACT CODE)
         151+28  257          + REWIND    TAPEINR      REWIND TAPE IN (REFERENCES RESOLVED)
         152+28  259          + REWIND    TAPEOUT      REWIND TAPE OUT WITH PACT COMPACT CODE WITH INSTR REFERENCES RESOLVED
         153+10  153 READREG  + R ADD     *            
         154+ 1   65          + TR        RDTAPE       READ MAGNETIC TAPE (REFERENCES TABLE)
         155+ 0  257          + STOP      TAPEINR
         156+ 0  638          + STOP      MAXNREFS     READ MAXREFS (1 HW) + NREFS (1 HW)
         157+ 2  166          + TR OV     RR3          NO MORE REFERENCES DATA 
         158+10  158          + R ADD     *            
         159+ 1   65          + TR        RDTAPE       READ MAGNETIC TAPE (STEPN REFERENCES FOR THIS REGION)
         160+ 0  257          + STOP      TAPEINR
         161+ 0  640          + STOP      TSTEPREF   
         162+10  162          + R ADD     *            
         163+ 1   65          + TR        RDTAPE       READ MAGNETIC TAPE 
         164+ 0  257          + STOP      TAPEINR
         165+ 0 1040          + STOP      TSTEPLOC   
         166+10 2045 RR3      + R ADD     ZERO
         167+12 2058          + STORE     IRELADDR     REL ADDRESS USED BY I REGION 
         168+10  168 READSTEP + R ADD     *            READ PACT USER PROGRAM SOURCE CODE FROM TAPE IN
         169+ 1   65          + TR        RDTAPE
         170+ 0  258          + STOP      TAPEIN
         171+ 0  392          + STOP      CCODE        BUF TO READ IN FROM TAPE
         172+ 2  298          + TR OV     EOF          TR IF END OF FILE
         173+10  418          + R ADD     OP
         174+ 4  286          + TR 0      EOR          TR IF END OF REGION
         175+10  175          + R ADD     *            LOAD PACTSCR INTO CARD IMAGE SO 
         176+ 1   88          + TR        LOADCC       CURRENT PACT SOURCE CODE CAN BE PRINTED
         177+10 2058          + R ADD     IRELADDR     I RELATIVE LOCATION STEP
         178+12 2059          + STORE     IREL0        I RELATIVE LOCATION OF THIS STEP
         179+ 9  434          + ADD       NINST        NUMBER OF INST IN THIS STEP
         180+12 2058          + STORE     IRELADDR 
         181+10 2043          + R ADD     I.EXT        EXTENSION (=SIZE IN HALF WORDS) OF TOTAL INSTR OF PROGRAM
         182+ 9  434          + ADD       NINST        NUMBER OF INST IN THIS STEP
         183+12 2043          + STORE     I.EXT     
         184+10 2045          + R ADD     ZERO         CHECK INSTR GENERATED IN THIS STEP
         185+12 2055          + STORE     MCNUM
         186+10 2055 MCLOOP   + R ADD     MCNUM
         187+ 5  434          + SUB       NINST
         188+ 4  269          + TR 0      NEXT         TR TO PROCESS NEXT STEP IF ALL NINST INSTRUCTIONS PRINTED
         189+10 2055          + R ADD     MCNUM        INCR COUNT
         190+ 9 2047          + ADD       ONE
         191+12 2055          + STORE     MCNUM        GET MC INSTR FROM TINST[ (PRTMCNUM-1)*2 ]
         192+ 9 2055          + ADD       MCNUM
         193+ 5 2048          + SUB       TWO
         194+ 9  230          + ADD       TINSTAD
         195+13  202          + STORE A   MCAD1
         196+13  253          + STORE A   MCAD1B
         197+ 9 2047          + ADD       ONE
         198+13  206          + STORE A   MCAD2
         199+13  255          + STORE A   MCAD2B
         200+10 2045          + R ADD     ZERO
         201+12 2053          + STORE     MC.REG       INIT REGION REFERENCED BY MC
         202+10    0 MCAD1    + R ADD     /   /         
         203+13 2053          + STORE A   MC.REG
         204+23   12          + A RIGHT   0012
         205+12 2052          + STORE     MC.OP        MC.OP HAS NOW THE SIGNED OPCODE -31..31 
         206+10    0 MCAD2    + R ADD     /   /
         207+12 2054          + STORE     MC.ADDR
         208+ 3  231          + TR +      MC3          IF MC.ADDR >=0 THEN MC.REG HOLDS THE REGION FOR MC.ADDR 
         209+ 6 2054          + R SUB     MC.ADDR      LOCATION IN STEP GIVEN BY MC.ADDR. 
         210+12 2056          + STORE     TRSTEPN      MAKES MC.ADDR POSITIVE. IT IS THE DESTINATION STEP
         211+10  211          + R ADD     *
         212+ 1   71          + TR        SRCHTBL      SEARCH TABLE, RETURN ACC=FOUND ENTRY (=0 IF NOT FOUND)
         213+ 0  640          + STOP      TSTEPREF     ... REFERENCES TABLE
         214+ 0  639          + STOP      NREFS        ... SEARCH FROM HALF-WORD 1 UP TO (AND INCLUDING) NREGIONS 
         215+ 0 2056          + STOP      TRSTEPN      ... THE VALUE TO FIND 
         216+ 4  285          + TR 0      BADREF       COMPILER ERROR: STEPN REFERENCE NOT FOUND IN REFERENCE TABLE
         217+12 2060          + STORE     IREF
         218+10  218          + R ADD     *            READ FIELDS FROM TREF TABLES
         219+ 1   73          + TR        READTBL
         220+ 0 1040          + STOP      TSTEPLOC
         221+ 0 2060          + STOP      IREF     
         222+ 0 2054          + STOP      MC.ADDR      = TSTEPLOC[IREF] 
         223+10 2054          + R ADD     MC.ADDR      MC.ADDR HAS NOW THE RESOLVED IREL ADDR FOR DESTINATION STEPN
         224+ 9 2053          + ADD       MC.REG       ADD MC.REG THAT CONTAINS THE LOCATION INTO THE STEP
         225+ 5 2047          + SUB       ONE          MINUS ONE BECAUSE LOCATION INTO STEP STARTS AT 1
         226+12 2054          + STORE     MC.ADDR
         227+10 2074          + R ADD     REG.I
         228+12 2053          + STORE     MC.REG       SET REGION 'I'
         229+ 1  247          + TR        MC5
         230+ 0  436 TINSTAD  + STOP      TINST      
         231+10 2053 MC3      + R ADD     MC.REG
         232+ 5 2076          + SUB       REG.S
         233+ 4  235          + TR 0      MC4          PROCESS A TR TO SYMBOL
         234+ 1  247          + TR        MC5          
         235+ 6 2054 MC4      + R SUB     MC.ADDR      MAKES MC.ADDR NEGATIVE. IT IS THE DESTINATION ALFA SYMBOL
         236+12 2057          + STORE     TRSYMBOL
         237+10  237          + R ADD     *
         238+ 1   71          + TR        SRCHTBL       SEARCH TABLE VALUE, RETURN ACC=FOUND ENTRY (=0 IF NOT FOUND)
         239+ 0 1442          + STOP      TSYMBREF     ... REFERENCES TABLE
         240+ 0 1441          + STOP      NSYMBS       ... SEARCH FROM HALF-WORD 1 UP TO (AND INCLUDING) NREFS 
         241+ 0 2057          + STOP      TRSYMBOL     ... THE VALUE TO FIND 
         242+ 4  285          + TR 0      BADREF       COMPILER ERROR: SYMBOL REFERENCE NOT FOUND IN REFERENCE TABLE
         243+12 2060          + STORE     IREF         IREF IS THE SYMBOL NUMBER (=THE ENTRY IN TABLE)
         244+ 5 2047          + SUB       ONE
         245+22    1          + A LEFT    0001         FOR IREF=1,2,3,... -> ADD=0000, 0002, 0004, ....
         246+12 2054          + STORE     MC.ADDR      STORE THE ADDR ON REGION TABLE FOR THIS SYMBOL 
         247+10 2052 MC5      + R ADD     MC.OP        REPACK MC.OP AND MC.ADDR, AND STORE THEM BACK INTO TINST TABLE OF CC RECORD
         248+22   12          + A LEFT    0012
         249+12 2052          + STORE     MC.OP        MC.OP HAS NOW THE SIGNED OPCODE -31..31 ON UPPER 6 BITS OG HALF WORD
         250+10 2053          + R ADD     MC.REG
         251+13 2052          + STORE A   MC.OP        ADD REG TO MC.OP (MC.OP KEEPS ITS SIGN)
         252+10 2052          + R ADD     MC.OP
         253+12    0 MCAD1B   + STORE     /   /         
         254+10 2054          + R ADD     MC.ADDR
         255+12    0 MCAD2B   + STORE     /   /
         256+10 2053          + R ADD     MC.REG       IF MC INSTR IS USING TEMP REGION
         257+ 5 2075          + SUB       REG.T        CHECK HI WATER TEMP ADDR USED
         258+ 4  260          + TR 0      MCT1
         259+ 1  267          + TR        MCT2
         260+10 2042 MCT1     + R ADD     T.EXT        EXTENSION (=SIZE IN HALF WORDS) OF TEMP VARS REGION (IS EVEN)
         261+ 5 2054          + SUB       MC.ADDR
         262+ 5 2048          + SUB       TWO
         263+ 3  267          + TR +      MCT2
         264+10 2054          + R ADD     MC.ADDR
         265+ 9 2048          + ADD       TWO
         266+12 2042          + STORE     T.EXT        EXTENSION (=SIZE IN HALF WORDS) OF TEMP VARS REGION (IS EVEN)
         267+ 8    0 MCT2     + NOOP      0000         
         268+ 1  186          + TR        MCLOOP
         269+ 8    0 NEXT     + NOOP      0000         CONTINUE 
         270+10  636          + R ADD     CCLEN        SAVE MC INSTRUCTIONS GENERATED SO FAR
         271+ 9  434          + ADD       NINST        ADD NINST TWICE AS EACH MC INSTR USES TWO HALF-WORDS
         272+ 9  434          + ADD       NINST
         273+12  637          + STORE     N
         274+10  274          + R ADD     *
         275+ 1   67          + TR        WRTAPE       WRITE MAGNETIC TAPE TAPEOUT (PACT COMPACT CODE)
         276+ 0  259          + STOP      TAPEOUT
         277+ 0  392          + STOP      CCODE        BUF TO WRITE TO TAPE
         278+ 0  637          + STOP      N            LEN
         279+30   74          + SENSE     0074         SENSE SWITCH 6
         280+ 1  283          + TR        ENDLOG1      TR IF NO LOG SELECTED
         281+10  281          + R ADD     *            PRINT STEP AND MC INSTR OF STEP
         282+ 1  323          + TR        PRTMC    
         283+ 8    0 ENDLOG1  + NOOP      0000 
         284+ 1  168          + TR        READSTEP
         285+ 0 1111 BADREF   + STOP      1111         INTERNAL COMPILER ERROR
         286+ 8    0 EOR      + NOOP      0000         END OF REGION  
         287+10  287          + R ADD     *            WRITE IN TAPE THE EOR STEP
         288+ 1   67          + TR        WRTAPE       WRITE MAGNETIC TAPE TAPEOUT (PACT COMPACT CODE)
         289+ 0  259          + STOP      TAPEOUT
         290+ 0  392          + STOP      CCODE        BUF TO WRITE TO TAPE
         291+ 0  636          + STOP      CCLEN        LEN
         292+10 2043          + R ADD     I.EXT        MAKE I.EXT EVEN AT END OF REGION
         293+ 9 2047          + ADD       ONE
         294+23   19          + A RIGHT   0019
         295+22   19          + A LEFT    0019
         296+12 2043          + STORE     I.EXT
         297+ 1  153          + TR        READREG      PROCEED WITH NEXT REGION
         298+ 8    0 EOF      + NOOP      0000         END OF FILE
         299+10  299          + R ADD     *
         300+ 1   69          + TR        RWDRUM       SAVE T.EXT AND I.EXT TO DRUM 
         301+26  130          + WRITE     0130         DRUM INSTR
         302+ 0    4          + STOP      0004         DRUM ADDR 
         303+ 0 2042          + STOP      T.EXT        
         304+ 0    2          + STOP      0002         T.EXT (1 HALF-WORD) + I.EXT (1 HW)
         305+27  259          + WRITE EF  TAPEOUT      WRITE EOF IN TAPE OUT (COMPACT CODE)
         306+30   74          + SENSE     0074         SENSE SWITCH 6
         307+ 1  315          + TR        ENDLOG1B     TR IF NO LOG SELECTED
         308+10  308          + R ADD     *
         309+ 1   55          + TR        PRTNLINE     
         310+ 0  101          + STOP      0101         STRINGZ AT COL 1
         311+ 0 2070          + STOP      MSGNMCIN     "MC INSTR"
         312+ 0  210          + STOP      0210         INT AT COL 10
         313+ 0 2043          + STOP      I.EXT        NUMBER OF MACHINE CODE INSTR GENERATED IN THE WHOLE PROG
         314+ 0    0          + STOP      0000         END OF LINE
         315+ 8    0 ENDLOG1B + NOOP      0000
         316+28  258          + REWIND    TAPEIN       REWIND TAPE IN (PACT COMPACT CODE)
         317+28  257          + REWIND    TAPEINR      REWIND TAPE IN (REFERENCES RESOLVED)
         318+28  259          + REWIND    TAPEOUT      REWIND TAPE OUT WITH PACT COMPACT CODE WITH INSTR REFERENCES RESOLVED
         319+10  319          + R ADD     *
         320+ 1   51          + TR        CHAIN        IF SW2 IS ON, A +STOP 4095 IS EXECUTED 
         321+ 0  256          + STOP      PACTCOMP     CHAIN TO NEXT STAGE IN PACT COMPILER TAPE
         322+ 0 4095          + STOP      4095
         323+ 9 2048 PRTMC    + ADD       TWO          PRINT TINST TABLE WITH MC INSTRUCTIONS GENERATED FOR THIS STEP
         324+13  390          + STORE A   PRTMCEX
         325+10 2045          + R ADD     ZERO
         326+12 2061          + STORE     PRTMCNUM
         327+10 2061 PMCLOOP  + R ADD     PRTMCNUM
         328+ 5  434          + SUB       NINST
         329+ 4  390          + TR 0      PRTMCEX      EXIT IF ALL NINST INSTRUCTIONS PRINTED
         330+10 2061          + R ADD     PRTMCNUM     INCR COUNT
         331+ 9 2047          + ADD       ONE
         332+12 2061          + STORE     PRTMCNUM     GET MC INSTR FROM TINST[ (PRTMCNUM-1)*2 ]
         333+ 9 2061          + ADD       PRTMCNUM
         334+ 5 2048          + SUB       TWO
         335+ 9  230          + ADD       TINSTAD
         336+13  341          + STORE A   PMCAD1
         337+ 9 2047          + ADD       ONE
         338+13  345          + STORE A   PMCAD2
         339+10 2045          + R ADD     ZERO
         340+12 2053          + STORE     MC.REG       INIT REGION REFERENCED BY MC
         341+10    0 PMCAD1   + R ADD     /   /
         342+13 2053          + STORE A   MC.REG
         343+23   12          + A RIGHT   0012
         344+12 2052          + STORE     MC.OP        MC.OP HAS NOW THE SIGNED OPCODE -31..31 
         345+10    0 PMCAD2   + R ADD     /   /
         346+12 2054          + STORE     MC.ADDR
         347+10 2059          + R ADD     IREL0        LOCATION FOR THIS STEP
         348+ 9 2061          + ADD       PRTMCNUM     ADD THE NUMBER OF INSTR (-1 BECAUSE STARTS AT 1)
         349+ 5 2047          + SUB       ONE
         350+21   35          + L RIGHT   0035         MQ=ACC
         351+10  351          + R ADD     *
         352+ 1   61          + TR        PRTINT
         353+ 0   41          + STOP      0041         AT COL 41 
         354+ 0    4          + STOP      0004         LEN=4
         355+15 2051          + LOAD MQ   D12          '+'
         356+10 2052          + R ADD     MC.OP
         357+ 3  359          + TR +      PMC6
         358+15 2050          + LOAD MQ   D11          '-'
         359+10  359 PMC6     + R ADD     *            PRINT OP SIGN
         360+ 1   63          + TR        PRTCHR
         361+ 0   46          + STOP      0046         AT COL 46
         362+10 2045          + R ADD     ZERO
         363+11 2052          + ADD AB    MC.OP
         364+ 9  388          + ADD       TMNEAD
         365+13  366          + STORE A   PMC7
         366+15    0 PMC7     + LOAD MQ   /   /
         367+10  367          + R ADD     *            PRINT OP MNEMONIC
         368+ 1   59          + TR        PRTALF
         369+ 0   47          + STOP      0047         AT COL 47
         370+10 2053          + R ADD     MC.REG
         371+ 9  389          + ADD       TREGMNEA     CHARS IN TREGMNE ARE TXT ALFA VALUES  
         372+13  373          + STORE A   PMC8         THUS ARE NEGATIVE
         373+ 6    0 PMC8     + R SUB     /   /        CHANGE SIGN BEFORE STORING IT IN MQ
         374+21   35          + L RIGHT   0035
         375+10  375          + R ADD     *            PRINT REGION LETTER V I S T A N
         376+ 1   63          + TR        PRTCHR
         377+ 0   50          + STOP      0050         AT COL 50
         378+15 2054          + LOAD MQ   MC.ADDR
         379+10  379          + R ADD     *
         380+ 1   61          + TR        PRTINT
         381+ 0   51          + STOP      0051         AT COL 51
         382+ 0    4          + STOP      0004         LEN=4
         383+10  383          + R ADD     *
         384+ 1   57          + TR        PRINTCRD
         385+10  385          + R ADD     *            START NEW LINE TO PRINT
         386+ 1   53          + TR        CLRBUF
         387+ 1  327          + TR        PMCLOOP    
         388+ 0 2085 TMNEAD   + STOP      TMNE
         389+ 0 2077 TREGMNEA + STOP      TREGMNE
         390+ 1    0 PRTMCEX  + TR        /   /        RETURN TO CALLER
         391+     0             ORG       EVEN
         392+     0  PACTSRC    RES       24           CARD IMAGE OF PACT SOURCE CODE CARD (12 FULL WORDS)
         416+     0  REGION     DEF       0
         417+     0  STEP       DEF       0            REGION = ALFA (<0)
         418+     0  OP         DEF       0            STEP   = INT (>0)
         419+     0  FACT       DEF       0            OP     = 0..43    =0 MEANS END OF REGION
         420+     0  S1         DEF       0            FACT   < 0 -> FACTOR IS AN ALFA SYMBOL (VAR, REGION, ...) 
         421+     0  S2         DEF       0            FACT = 0 -> BLANK FACTOR
         422+     0  QR         DEF       0            FACT = 0..9999 -> DESTINATION STEP FOR TRANSFER/RESULT OF STEP
         423+     0  QF         DEF       0            CLUE = -, R OR N
         424+     0  NUM        DEF       0            
         425+     0             DEF       0            S1/S2 = 0 -> BLANK, >0 -> INTEGER, <0 -> ALFA 
         426+     0  CLUE       DEF       0
         427+     0  STEPN      DEF       0            QR = +/- INTEGER OR BLANK. 
         428+     0  FACTN      DEF       0            QF = SET IF THERE IS AN INTEGER FACTOR/NUMBER IN CARD
         429+     0  FACTREG    DEF       0
         430+     0  S1N        DEF       0            STEPN = SEQUENTIAL NUMBER OF STEP            
         431+     0  S2N        DEF       0            IF OP IS TRANSFER -> FACTN=DESTINATION STEPN
         432+     0  D1N        DEF       0            FACTN=ADDR (0, 2, 4, ..) FACTREG=' ', 'T', 'V', 'N'
         433+     0  D2N        DEF       0            S1N/S2N=INDEX (IF <0), BLANK (IF =0), CONST (IF >0)
         434+     0  NINST      DEF       0            D1N/D2N=HALF-WORD SIZE OF EACH DIMENSION
         435+     0  NINCR      DEF       0
         436+     0  TINST      RES       200          MACHINE CODE: 1ST HALF-WORD OPCODE + REGION/LOCATION INTO STEP (FOR TRANSFERS)
         636+    44  CCLEN      DEF       0044         LENGTH OF COMPACT CODE RECORD 
         637+     0  N          DEF       0            TEMP VAR (HERE TO MAKE TABLES START AT EVEN LOCATION)
         638+   400  MAXNREFS   DEF       400          MAX 400 STEPN REFERENCES CAN DE DEFINED IN ONE REGION
         639+     0  NREFS      DEF       0            NUMBER OF ENTRIES IN TSTEPREF TABLE
         640+     0  TSTEPREF   RES       400          LOCAL STEP REFERENCES TABLE: STEPN REFERENCED BY A TR STEPN MC INSTR IN CURRENT REGION
        1040+     0  TSTEPLOC   RES       400          LOCATION OF STEP REFERENCED TABLE: LOCATION ON I-REGION OF EACH STEPN REFERENCED 
        1440+   600  MAXNSYMB   DEF       600          MAX 600 SYMBOL (LIBRARIES/REGION) REFERENCES CAN DE DEFINED IN THE WHOLE PROGRAM
        1441+     0  NSYMBS     DEF       0            NUMBER OF ENTRIES IN TSYMBREF GLOBAL SYMBOL TABLE
        1442+     0  TSYMBREF   RES       600          GLOBAL SYMBOL TABLE: ALFA VALUE OF SYMBOLS REFERENCED. 
        2042+     0  T.EXT      DEF       0            EXTENSION (=SIZE IN HALF WORDS) OF TEMP VARS REGION (IS EVEN)
        2043+     0  I.EXT      DEF       0            EXTENSION (=SIZE IN HALF WORDS) OF TOTAL INSTR OF PROGRAM
        2044+   100  MAXNINST   DEF       100          MAX NUMBER OF MACHINE CODE INSTRUTIONS PER STEP
        2045+     0  ZERO       DEF       0
        2046+     0             DEF       0
        2047+     1  ONE        DEF       1
        2048+     2  TWO        DEF       2
        2049+     4  D4         DEF       4
        2050+    11  D11        DEF       11
        2051+    12  D12        DEF       12
        2052+     0  MC.OP      DEF       0            MC OPCODE GENERATED
        2053+     0  MC.REG     DEF       0            REGION REFERENCED BY MC OPCODE GENERATED
        2054+     0  MC.ADDR    DEF       0            MC ADDR GENERATED. BOTH WILL BE STORED IN TINST TABLE IN COMPCAT CODE RECORD
        2055+     0  MCNUM      DEF       0            NEXT INSTR TO PROCESS
        2056+     0  TRSTEPN    DEF       0            THE DESTINATION STEP
        2057+     0  TRSYMBOL   DEF       0            THE SYMBOL DEFINED
        2058+     0  IRELADDR   DEF       0            I RELATIVE LOCATION OF STEP
        2059+     0  IREL0      DEF       0            I RELATIVE LOCATION OF CURRENT STEP
        2060+     0  IREF       DEF       0            TEMP
        2061+     0  PRTMCNUM   DEF       0            NEXT INSTR TO PRINT WITH PRTMC
        2062- 42506  MSGSTART   TXT       "FINAL ASSEMBLY PASS 3",0
        2063- 31104  
        2064- 31471  
        2065- 40382  
        2066- 57072  
        2067- 65167  
        2068- 71427  
        2069+     0  
        2070- 58320  MSGNMCIN   TXT       "MC INSTR",0
        2071- 49663  
        2072- 75168  
        2073+     0  
        2074+     1  REG.I      DEF       1            INSTRUCTIONS CODE I 0000
        2075+     3  REG.T      DEF       3            TEMP VARS T 0000
        2076+     7  REG.S      DEF       7            SYMBOL S 0000
        2077-    13  TREGMNE    TXT       '  A'
        2078-    21             TXT       '  I'
        2079-    34             TXT       '  V'
        2080-    32             TXT       '  T'
        2081-    26             TXT       '  N'
        2082-    28             TXT       '  P'        PERISHABLE STORAGE (=LIB LOCAL VARS/CONSTANTS)
        2083-    44             TXT       '  #'        UNUSED
        2084-    31             TXT       '  S'
        2085- 46080  TMNE       TXT       'H  '        STOP/HALT
        2086- 73728             TXT       'T  '        TRANSFER
        2087- 74592             TXT       'TF '        TRANSFER ON OVERLOF
        2088- 75072             TXT       'TP '        TRANSFER ON PLUS
        2089- 75552             TXT       'TZ '        TRANSFER ON ZERO
        2090- 71424             TXT       'S  '        SUBTRACT
        2091- 70608             TXT       'RS '        RESET AND SUBTRACT
        2092- 73056             TXT       'SV '        SUBTRACT ABSOLUTE VALUE
        2093- 59904             TXT       'N  '        NO OPERATION
        2094- 29952             TXT       'A  '        ADD
        2095- 69744             TXT       'RA '        RESET AND ADD
        2096- 31584             TXT       'AV '        ADD ABSOLUTE VALUE
        2097- 72960             TXT       'ST '        STORE
        2098- 72048             TXT       'SA '        STORE ADDRESS
        2099- 72624             TXT       'SM '        STORE MQ
        2100- 56496             TXT       'LM '        LOAD MQ
        2101- 57600             TXT       'M  '        MULTIPLY
        2102- 59040             TXT       'MR '        MULTIPLY AND ROUND
        2103- 36864             TXT       'D  '        DIVIDE
        2104- 69120             TXT       'R  '        ROUND
        2105- 56448             TXT       'LL '        LONG LEFT SHIFT
        2106- 56736             TXT       'LR '        LONG RIGHT SHIFT
        2107- 31104             TXT       'AL '        ACCUMULATOR LEFT SHIFT
        2108- 31392             TXT       'AR '        ACCUMULATOR RIGHT SHIFT
        2109- 69888             TXT       'RD '        READ
        2110- 69792             TXT       'RB '        READ BACKWARDs
        2111- 80640             TXT       'W  '        WRITE
        2112- 81456             TXT       'WE '        WRITE END OF FILE
        2113- 70800             TXT       'RW '        REWIND TAPE
        2114- 72192             TXT       'SD '        SET DRUM DDR
        2115- 72240             TXT       'SE '        SENSE
        2116- 34560             TXT       'C  '        COPY
        2118+15 2132 CLRBUF   + LOAD MQ   IOCL
        2119+14 2137          + STORE MQ  BUFIO
        2120+15 2158          + LOAD MQ   IOSTORE         
        2121+ 1 2129          + TR        INIT2
        2122+15 2154 READCRD  + LOAD MQ   IORDCRD
        2123+ 1 2127          + TR        INIT1
        2124+15 2156 WRITECRD + LOAD MQ   IOWRCRD
        2125+ 1 2127          + TR        INIT1
        2126+15 2157 PRINTCRD + LOAD MQ   IOPRCRD
        2127+14 2137 INIT1    + STORE MQ  BUFIO
        2128+15 2155          + LOAD MQ   IOCOPY         
        2129+14 2138 INIT2    + STORE MQ  BUFROW
        2130+ 9 2164          + ADD       TWO          
        2131+13 2153          + STORE A   EXIT
        2132+10 2160 IOCL     + R ADD     ZERO         RESET TO INITIAL COPY LOOP ADDRESS     
        2133+13 2138          + STORE A   BUFROW       FOR BUFFER
        2134+10 2138          + R ADD     BUFROW       X .*echo Print
        2135+ 5 2165          + SUB       D48          X 
        2136+12 2162          + STORE     ENDLP        X LOOP END VALUE
        2137- 0    0   BUFIO  - STOP      /   /        READ OR WRITE
        2138-31    0   BUFROW - COPY      /   /        COPY WORD TO/FROM PRINTER/CARDREADER
        2139+ 1 2143          + TR        BUFOK2       NORMAL PROCESSING 
        2140+ 1 2150          + TR        EODECK       FOR COPY READING END OF REG (=END OF DECK BEING READ)
        2141+ 6 2164          + R SUB     TWO          END OF FILE -> NO CARD TO READ -> STOP with Acc=-2
        2142+ 0 2137          + STOP      BUFIO        ON PRESSING START RETRY CARD READ
        2143+10 2138   BUFOK2 + R ADD     BUFROW       X
        2144+ 5 2164          + SUB       TWO          INCR BUF ADDR
        2145+13 2138          + STORE A   BUFROW       X
        2146+ 5 2162          + SUB       ENDLP        CHECK FOR END
        2147+ 4 2152          + TR 0      ENDIO
        2148+10 2160          + R ADD     ZERO         CLEAR ACC IN CASE WE ARE CLEANING THE BUFFER
        2149+ 1 2138          + TR        BUFROW
        2150+10 2163 EODECK   + R ADD     ONE          SET OV FLAG TO SIGNAL END OF DECK CONDITION
        2151+22   36          + A LEFT    36
        2152+26 2052 ENDIO    + WRITE     2052         END OF I/O: INSURE THAT MQ NOT IN USE            
        2153+ 1    0 EXIT     + TR        /   /
        2154+24 2048 IORDCRD  + READ      2048         PREPARE TO READ FROM CARD READER
        2155-31    0 IOCOPY   - COPY      /   /   
        2156+26 1024 IOWRCRD  + WRITE     1024         PREPARE TO PUNCH CARD 
        2157+26  512 IOPRCRD  + WRITE     0512         PREPARE WRITE PRTBUF ON PRINTER
        2158-12    0 IOSTORE  - STORE     /   /        CLEAR BUFFER
        2159+     0             ORG       EVEN           
        2160+     0  ZERO       DEF       0            
        2161+     0             DEF       0            
        2162+     0  ENDLP      DEF       0            LOOP END VALUE
        2163+     1  ONE        DEF       1
        2164+     2  TWO        DEF       2
        2165+    48  D48        DEF       48
        2166+ 9 2437 PRTPARM2 + ADD       TWO          GET 2 PARAMS: LEN AND COL (EITHER VALUE OR VAR ADDR)
        2167+13 2186          + STORE A   PRTPRMEX
        2168+10 2176          + R ADD     PRTP1
        2169+ 9 2437          + ADD       TWO          PRINT PACKED TEXT FROM FULL-WORD VALUE IN MQ REGISTER 
        2170+13 2176          + STORE A   PRTP1        STORE ADDR OF FIRST PARAM (LEN)
        2171+ 9 2436          + ADD       ONE
        2172+13 2178          + STORE A   PRTP2        STORE ADDR OF SECOND PARAM (COL)
        2173+ 9 2436          + ADD       ONE
        2174+13 2253          + STORE A   EXIT
        2175-14 2426          - STORE MQ  NUM          SAVE VALUE TO PRINT PARAM MQ (NUM IS ALIASED TO TXT)
        2176+10    0   PRTP1  + R ADD     /   /        GET LEN: NUMBER OF CHARS TO PRINT (1..6)
        2177+12 2430          + STORE     LEN
        2178+10    0   PRTP2  + R ADD     /   /        GET COLUMN PARAM 1..72
        2179+ 3 2182          + TR +      PRTP4
        2180+13 2181          + STORE A   PRTP3        COL<0 -> INTERPRET COL AS LOC(COL) = ADDR OF COL VAR
        2181+10    0   PRTP3  + R ADD     /   /        READ VAR COL PASED AS PARAM
        2182+ 4 2253   PRTP4  + TR 0      EXIT         COL=0 -> EXIT
        2183+ 3 2185          + TR +      PRTP5
        2184+ 1 2253          + TR        EXIT         COL<0 -> EXIT
        2185+12 2236   PRTP5  + STORE     COL
        2186+ 1    0 PRTPRMEX + TR        /   /        RETURN TO CALLER
        2187+13 2176 PRTSTR   + STORE A   PRTP1        PARSE PRINT PARAMS LEN AND COL
        2188+10 2188          + R ADD     *            FOR PRINT STRINGZ FROM MEM
        2189+ 1 2166          + TR        PRTPARM2
        2190+12 2200          + STORE     COLSZ
        2191+10 2430          + R ADD     LEN          LEN IS IN FACT THE LOCATION WHERE THE STRING STARTS
        2192+13 2195          + STORE A   STRZAD
        2193+10 2253          + R ADD     EXIT
        2194+13 2208          + STORE A   STRZEX
        2195+10    0 STRZAD   + R ADD     /   /        GET HALF-WORD WITH NEXT 3 CHARS TO PRINT
        2196+ 4 2208          + TR 0      STRZEX       IF +0 -> END OF STRING (-0 DOES NOT TERMINATES THE STRING)
        2197+21   35          + L RIGHT   0035         MQ=3-CHARS TO PRINT
        2198+10 2198          + R ADD     *            
        2199+ 1 2210          + TR        PRTALF       PRINT 3 CHARS
        2200+ 0    0 COLSZ    + STOP      0000         COL 
        2201+10 2195 STRZ1    + R ADD     STRZAD       INCR STRING ADDRESS
        2202+ 9 2436          + ADD       ONE
        2203+13 2195          + STORE A   STRZAD
        2204+10 2200          + R ADD     COLSZ        INCR COLUMN
        2205+ 9 2438          + ADD       D3
        2206+13 2200          + STORE A   COLSZ
        2207+ 1 2195          + TR        STRZAD
        2208+ 3    0 STRZEX   + TR +      /   /        IF ZERO -> END OF STRING
        2209+ 1 2201          + TR        STRZ1
        2210+ 9 2437 PRTALF   + ADD       TWO          PRINT 3-PACKED CHARS IN MQ REGISTER 
        2211+14 2432          + STORE MQ  TXT          SAVE TEXT TO PRINT (IN LEFT HALF WORD)
        2212+13 2215          + STORE A   PRTAP2       STORE ADDR OF PARAM (COL)
        2213+ 9 2436          + ADD       ONE
        2214+13 2253          + STORE A   EXIT
        2215+10    0   PRTAP2 + R ADD     /   /        GET COLUMN NUMBER PARAM 1..72
        2216+ 3 2219          + TR +      PRTAP4
        2217+13 2218          + STORE A   PRTAP3       COL<0 -> INTERPRET COL AS L(COL) = ADDR OF COL VAR
        2218+10    0   PRTAP3 + R ADD     /   /        READ VAR COL PASED AS PARAM
        2219+12 2236   PRTAP4 + STORE     COL
        2220+10 2438          + R ADD     D3
        2221+12 2430          + STORE     LEN
        2222+10 2420 PRT1     + R ADD     ZERO         UNPACK LEFTMOST CHAR 
        2223+11 2432          + ADD AB    TXT          GET TEXT DISCARD SIGN
        2224+21   35          + L RIGHT   0035         MQ=Acc
        2225+10 2420          + R ADD     ZERO
        2226+18 2445          + DIV       D48X48
        2227+12 2432          + STORE     TXT          remainder=char to print, mq=c2 * 48 + c3 in right half-word
        2228+10 2420          + R ADD     ZERO         CLEAR ACC TO AVOID OVERFLOW BIT SET
        2229+20   18          + L LEFT    0018         put c2 and c3 in left half-word of MQ to be saved in CHAR half word
        2230+14 2431          + STORE MQ  CHAR         CHAR TO PRINT
        2231+10 2431          + R ADD     CHAR 
        2232+ 4 2237          + TR 0      NXTCHR       IF BLANK PROCEED TO NEXT COL
        2233+21   35          + L RIGHT   0035         MQ=CHAR TO PRINT
        2234+10 2234          + R ADD     *            PRINT CHAR
        2235+ 1 2330          + TR        PRTCHR
        2236+ 0    0 COL      + STOP      0000         COL: COLUMN NUMBER TO PRINT (1..72)
        2237+10 2430 NXTCHR   + R ADD     LEN          DECR LEN COUNT
        2238+ 5 2436          + SUB       ONE
        2239+12 2430          + STORE     LEN
        2240+ 4 2253          + TR 0      EXIT         IF NO MORE CHARS TO PRINT EXIT
        2241+10 2236          + R ADD     COL          INCR COL POSITION
        2242+ 9 2436          + ADD       ONE
        2243+12 2236          + STORE     COL
        2244+ 5 2444          + SUB       D72          IF COL > 72 RETURN TO CALLER
        2245+ 4 2247          + TR 0      GNXTCHR      ELSE PROCEED WITH NEXT CHAR
        2246+ 3 2253          + TR +      EXIT
        2247+10 2420 GNXTCHR  + R ADD     ZERO         GET NEXT CHAR 
        2248+15 2432          + LOAD MQ   TXT
        2249+16 2443          + MPY       D48
        2250+22   17          + A LEFT    0017         GET RESULT IN LEFT HALF-WORD OF ACC
        2251+12 2432          + STORE     TXT
        2252+ 1 2222          + TR        PRT1         PROCEED TO PRINT CHAR
        2253+ 1    0 EXIT     + TR        /   /        RETURN TO CALLER
        2254+13 2176 PRTOCT   + STORE A   PRTP1        PARSE PRINT PARAMS LEN AND COL
        2255+10 2255          + R ADD     *            FOR PRINT OCTIONARY VALUE
        2256+ 1 2166          + TR        PRTPARM2
        2257+10 2430          + R ADD     LEN          LEN = OCTAL DIGITS TO PRINT
        2258+ 9 2236          + ADD       COL
        2259+ 5 2436          + SUB       ONE
        2260+12 2272          + STORE     COLN         COL POINTS TO LEAST SIGNIFICANT DIGIT
        2261+10 2426 PRTIOCG  + R ADD     NUM          GENERATE OCTINARY DIGIT
        2262+15 2420          + LOAD MQ   ZERO         CLEAR MQ
        2263+21   21          + L RIGHT   0021         3 LSB BITS OF LEFT HALF-WORD OF ACC TO MQ
        2264+22   18          + A LEFT    0018         BACK TO LEFT HALF OF ACC (BIT SHIFTED RIGHT 3 BIT)
        2265+12 2426          + STORE     NUM          SAVE BACK NUM WITH RIGHTMOST OCTIONARY DIGIY EXTRACTED (NUM'=NUM/8)
        2266+10 2420          + R ADD     ZERO
        2267+20   21          + L LEFT    0021         LEFT HALF-WORD OF ACC IS NOW RIGHTMOST OCTINARY DIGIT EXTRACTED FROM NUM 
        2268+ 4 2286          + TR 0      PRTIOZ       TR IF THIS DIGIT IS ZERO TO PRINT A '0' (BASE48 CODE = 10) INSTEAD OF A BLANK (BASE48 CODE = 0)
        2269+21   35          + L RIGHT   0035         PUT DIGIT 1..9 TO PRINT IN MQ
        2270+10 2270 PRTOCTD  + R ADD     *            PRINT OCTINARY DIGIT
        2271+ 1 2330          + TR        PRTCHR
        2272+ 0    0 COLN     + STOP      0000
        2273+10 2272          + R ADD     COLN        DECR COL NUMBER TO PRINT NEXT DIGIT
        2274+ 5 2436          + SUB       ONE
        2275+12 2272          + STORE     COLN
        2276+10 2430          + R ADD     LEN          DECR COL NUMBER TO PRINT NEXT DIGIT
        2277+ 5 2436          + SUB       ONE
        2278+ 4 2253          + TR 0      EXIT         PRINTED LEN OCTINARY DIGITS -> EXIT
        2279+12 2430          + STORE     LEN
        2280+10 2426          + R ADD     NUM          IF NUM < 0, ADD SIGN BIT TO LEFTMOST DIGIT
        2281+ 3 2261          + TR +      PRTIOCG
        2282+10 2446          + R ADD     OCT04K       
        2283+ 5 2426          + SUB       NUM
        2284+12 2426          + STORE     NUM
        2285+ 1 2261          + TR        PRTIOCG
        2286+15 2439   PRTIOZ + LOAD MQ   D10          ACC=BASE48 CODE FOR '0'
        2287+ 1 2270          + TR        PRTOCTD      TR TO PRINT IT
        2288+13 2176 PRTINT   + STORE A   PRTP1        PARSE PRINT PARAMS LEN AND COL
        2289+10 2289          + R ADD     *            FOR PRINT OCTIONARY VALUE
        2290+ 1 2166          + TR        PRTPARM2
        2291+10 2236          + R ADD     COL          PRINT DECIMAL NUMBER. VALUE OF LEN = DIGITS TO PRINT, NOT INCLUDING SIGN
        2292+ 9 2430          + ADD       LEN
        2293+ 5 2436          + SUB       ONE          
        2294+12 2315          + STORE     COLNI        COL POINTS TO END OF NUMBER
        2295+10 2420          + R ADD     ZERO
        2296+12 2429          + STORE     SGN          SIGN IS POSITIVE
        2297+10 2426          + R ADD     NUM
        2298+ 3 2303          + TR +      PRTINTG
        2299+ 6 2426          + R SUB     NUM          NUM IS NEGATIVE. CONVERT TO POSITIVE
        2300+12 2426          + STORE     NUM          AND SET SGN=1
        2301+10 2436          + R ADD     ONE
        2302+12 2429          + STORE     SGN          
        2303+10 2426 PRTINTG  + R ADD     NUM          GENERATE DECIMAL DIGIT
        2304+21   35          + L RIGHT   0035         MQ=Acc
        2305+10 2420          + R ADD     ZERO
        2306+18 2439          + DIV       D10
        2307+ 4 2328          + TR 0      PRTINZ
        2308+12 2431 PRTINTG2 + STORE     CHAR         acc=remainder=digit to print, mq=num/10
        2309+10 2420          + R ADD     ZERO         CLEAR ACC TO AVOID OVERFLOW BIT SET
        2310+20   18          + L LEFT    0018         digit in left half-word of MQ to be saved in CHAR half word
        2311+14 2426          + STORE MQ  NUM 
        2312+15 2431          + LOAD MQ   CHAR 
        2313+10 2313 PRTINTD  + R ADD     *            PRINT DECIMAL DIGIT
        2314+ 1 2330          + TR        PRTCHR
        2315+ 0    0 COLNI    + STOP      0000
        2316+10 2315          + R ADD     COLNI        DECR COL NUMBER TO PRINT NEXT DIGIT
        2317+ 5 2436          + SUB       ONE
        2318+12 2315          + STORE     COLNI
        2319+10 2426          + R ADD     NUM          DO NOT CARE ABOUT LEN, JUST CHECK IF NUM=0 
        2320+ 4 2322          + TR 0      PRTINS       (SO NO MORE DIGITS REMAINS TO BE PRINTED)
        2321+ 1 2303          + TR        PRTINTG      NUM NOT FINISHED, PROCEED WITH NEXT DIGIT
        2322+10 2429 PRTINS   + R ADD     SGN
        2323+ 4 2253          + TR 0      EXIT         NO SIGN -> NUM FINISHED
        2324+10 2420          + R ADD     ZERO
        2325+12 2429          + STORE     SGN          CLEAR SGN FLAG
        2326+15 2440          + LOAD MQ   D11          BASE48 CODE FOR '-' (MINUS) CHAR
        2327+ 1 2313          + TR        PRTINTD      GO TO PRINT IT
        2328+10 2439   PRTINZ + R ADD     D10          ACC=BASE48 CODE FOR '0'
        2329+ 1 2308          + TR        PRTINTG2     TR TO PRINT IT
        2330+ 9 2437 PRTCHR   + ADD       TWO          PRINT CHAR IN MQ REGISTER 
        2331+14 2431          + STORE MQ  CHAR         SAVE CHAR TO PRINT (IN LEFT HALF WORD)
        2332+13 2336          + STORE A   PRTCP2       STORE ADDR OF PARAM (COL)
        2333+ 9 2436          + ADD       ONE
        2334+13 2414          + STORE A   PRTCEX
        2335+ 2 2336          + TR OV     PRTCP2       CLEAR OV JUST IN CASE
        2336+10    0   PRTCP2 + R ADD     /   /        GET COLUMN NUMBER PARAM 1..72
        2337+ 3 2340          + TR +      PRTCP4
        2338+13 2339          + STORE A   PRTCP3       COL<0 -> INTERPRET COL AS L(COL) = ADDR OF COL VAR
        2339+10    0   PRTCP3 + R ADD     /   /        READ VAR COL PASED AS PARAM
        2340+ 5 2436   PRTCP4 + SUB       ONE
        2341+12 2434          + STORE     N            N=COL-1 -> IN RANGE 0..71
        2342+ 3 2344          + TR +      PRTSA        IF N >= 0 PROCEED WITH BASE BUFFER ADDR CALCULATION
        2343+ 1 2414          + TR        PRTCEX       IF N<0 EXIT
        2344+10 2420    PRTSA + R ADD     ZERO         CARD BUFFER USES LOCATION 0..47
        2345+13 2433          + STORE A   PRTROWAD     DETERMINE ADDRESS OF LOWER ROW TO PRINT
        2346+10 2434          + R ADD     N
        2347+ 5 2442          + SUB       D36
        2348+ 3 2350          + TR +      PRTC0
        2349+ 1 2356          + TR        PRTC1
        2350+12 2434    PRTC0 + STORE     N            COL NOW 0..35 
        2351+ 5 2442          + SUB       D36
        2352+ 3 2414          + TR +      PRTCEX       IF COL >= 36 (IE COL PASSED AS PARAM > 72) THEN EXIT
        2353+10 2433          + R ADD     PRTROWAD
        2354+ 9 2437          + ADD       TWO
        2355+13 2433          + STORE A   PRTROWAD     SET BASE BUFFER ADDR 
        2356+10 2436    PRTC1 + R ADD     ONE          DETERMINE MASKCOL WITH MASK TO SET IN CARD BUFFER
        2357+21   53          + L RIGHT   53           SET RIGHTMOST BIT OF MQ TO 1 (SHIFT 35+18=53)
        2358+10 2441          + R ADD     D35
        2359+ 5 2434          + SUB       N
        2360+13 2362          + STORE A   PRTC2
        2361+10 2420          + R ADD     ZERO         CLEAR ACC TO AVOID OVERFLOW
        2362+20    0    PRTC2 + L LEFT    /   /        SHIFT MQ LEFT N PLACES
        2363+ 4 2366          + TR 0      PRTC3        IF ACC STILL ZERO -> MASKCOL VALID
        2364+ 6 2436          + R SUB     ONE          ACC NOT ZERO -> SHOULD GENERATE -0 TO SET SIGN BIT ON
        2365+21   72          + L RIGHT   0072         NOW MQ = -0 -> LEFTMOST BIT OF MQ SET
        2366-14 2422    PRTC3 - STORE MQ  MASKCOL
        2367+10 2420          + R ADD     ZERO         READ THE BITMAP OF CHAR 
        2368+11 2431          + ADD AB    CHAR         DISCARD SIGN OF CHAR, IF ANY
        2369+12 2431          + STORE     CHAR
        2370+ 5 2443          + SUB       D48
        2371+ 3 2414          + TR +      PRTCEX       IF CHAR >= 48 EXIT
        2372+10 2428          + R ADD     BITMAPAD     IF ADDR OF BASE48 BITMAP NOT COMPUTED
        2373+ 4 2415          + TR 0      GETBMP1      TR TO LOAD IT
        2374+ 9 2431  GETBMP2 + ADD       CHAR         READ THE BITMAP OF CHAR 
        2375+13 2376          + STORE A   PRTC4        INDICATES THE BITS TO SET IN SELECTED 
        2376+10    0    PRTC4 + R ADD     /   /        COLUMN OF CARD BUFFER 
        2377+12 2435          + STORE     BITS
        2378+ 6 2436          + R SUB     ONE
        2379+12 2434          + STORE     N            SET TO -1
        2380+10 2434    LOOP1 + R ADD     N            CURRENT ROW (STARTS AT ZERO) = OFFSET ON PRTROWAD     
        2381+ 9 2436          + ADD       ONE
        2382+12 2434          + STORE     N
        2383+10 2435          + R ADD     BITS         EXTRACT RIGHTMOST BIT OF LEFT HALF OF ACC TO MQ
        2384+ 4 2414          + TR 0      PRTCEX       NO MORE BITS -> EXIT
        2385+21   19          + L RIGHT   0019         LSB BIT OF LEFT HALF-WORD OF ACC TO MQ
        2386+22   18          + A LEFT    0018         BACK TO LEFT HALF OF ACC (BIT SHIFTED RIGHT 1 BIT)
        2387+12 2435          + STORE     BITS         SAVE BACK BITS. LSB HAS BEEN EXTACTED, CONTENTS SHIFTED RIGHT ONE PLACE
        2388+10 2420          + R ADD     ZERO
        2389+20    1          + L LEFT    0001         PUT EXTACTED BIT BACK INTO ACC
        2390+ 4 2380          + TR 0      LOOP1        NO BIT 
        2391+10 2434          + R ADD     N            READ THE ROW N AT CARD BUFFER 
        2392+22    2          + A LEFT    0002         MULT N BY 4 AS THERE ARE 4 HALF WORDS PER ROW
        2393+ 9 2433          + ADD       PRTROWAD     
        2394+13 2396          + STORE A   PRTROWR
        2395+13 2412          + STORE A   PRTROWW
        2396-10    0  PRTROWR - R ADD     /   /        
        2397-12 2424          - STORE     ROW          CURRENT CONTENTS OF ROW
        2398-10 2422          - R ADD     MASKCOL      "OR" MASKCOL IN SELECTED ROW
        2399+ 3 2407          + TR +      PRTW2
        2400-10 2424          - R ADD     ROW 
        2401+ 4 2405          + TR 0      PRTW1         
        2402+10 2420          + R ADD     ZERO         MASKCOL IS MINUS ZERO AND ROW IS NOT-EMPTY (EITHER POSITIVE OR NEGATIVE) -> SET ROW AS NEGATIVE
        2403- 7 2424          - SUB AB    ROW 
        2404+ 1 2412          + TR        PRTROWW
        2405-10 2422    PRTW1 - R ADD     MASKCOL      MASKCOL IS MINUS ZERO AND ROW IS EMPTY -> SET ROW = MASKCOL = MINUS ZERO
        2406+ 1 2412          + TR        PRTROWW
        2407-10 2424    PRTW2 - R ADD     ROW          
        2408+ 3 2411          + TR +      PRTW3              
        2409- 5 2422          - SUB       MASKCOL      MASKCOL IS POSITIVE AND ROW IS NEGATIVE -> SUB MASKCOL FROM ROW
        2410+ 1 2412          + TR        PRTROWW
        2411- 9 2422    PRTW3 - ADD       MASKCOL      MASKCOL IS POSITIVE AND ROW IS POSITIVE OR EMPTY -> ADD MASKCOL TO ROW         
        2412-12    0  PRTROWW - STORE     /   /        ROW UPDTATE
        2413+ 1 2380          + TR        LOOP1        PROCEED TO NEXT ROW
        2414+ 1    0 PRTCEX   + TR        /   /
        2415+10 2415 GETBMP1  + R ADD     *
        2416+ 1   83          + TR        BMPAD        GET BASE48 CHARS BITMAP ADDRESS
        2417+12 2428          + STORE     BITMAPAD     
        2418+ 1 2374          + TR        GETBMP2      RETURN
        2419+     0             ORG       EVEN
        2420+     0  ZERO       DEF       0            
        2421+     0             DEF       0            
        2422+     0  MASKCOL    DEF       0
        2423+     0             DEF       0
        2424+     0  ROW        DEF       0
        2425+     0             DEF       0
        2426+     0  NUM        DEF       0
        2427+     0             DEF       0
        2428+     0  BITMAPAD   DEF       0
        2429+     0  SGN        DEF       0
        2430+     0  LEN        DEF       0
        2431+     0  CHAR       DEF       0
        2432+     0  TXT        DEF       0
        2433+     0  PRTROWAD   DEF       0
        2434+     0  N          DEF       0
        2435+     0  BITS       DEF       0
        2436+     1  ONE        DEF       1
        2437+     2  TWO        DEF       2
        2438+     3  D3         DEF       3
        2439+    10  D10        DEF       10
        2440+    11  D11        DEF       11
        2441+    35  D35        DEF       35
        2442+    36  D36        DEF       36
        2443+    48  D48        DEF       48
        2444+    72  D72        DEF       72
        2445+  2304  D48X48     DEF       2304
        2446+ 16384  OCT04K     DEF       *040000      BIT SIGN ON 5TH OCTINARY DIGIT
        2448+ 9 2523 PRTNLINE + ADD       TWO          PRINT A NEW LINE OF DATA
        2449+12 2526          + STORE     PARAM        SAVE PARAM LIST ADDR
        2450+10 2450          + R ADD     *            CLEAR CARD BUFFER
        2451+ 1   53          + TR        CLRBUF 
        2452+10 2526 GPARAM   + R ADD     PARAM        GET PARAM PAIR FMT/DATA
        2453+13 2458          + STORE A   P1
        2454+ 9 2522          + ADD       ONE
        2455+13 2462          + STORE A   P2
        2456+ 9 2522          + ADD       ONE
        2457+12 2526          + STORE     PARAM
        2458+10    0 P1       + R ADD     /   /
        2459+12 2528          + STORE     FMT
        2460+ 3 2462          + TR +      P2           IF FMT < 0 THEM SKIP THIS PAIR FMT/DATA
        2461+ 1 2452          + TR        GPARAM
        2462+10    0 P2       + R ADD     /   /
        2463+12 2488          + STORE     DATALOC      GET DATA ADDRESS PASED AS PARAM
        2464+13 2465          + STORE A   P2A
        2465+10    0 P2A      + R ADD     /   /
        2466+12 2527          + STORE     DATA         GET EFFECTIVE DATA
        2467+10 2521          + R ADD     ZERO
        2468+15 2528          + LOAD MQ   FMT
        2469+18 2525          + DIV       D100         ACC=REMAINDER=COL NUMBER, MQ=QUOTIEN=TYPE OF DATA
        2470+12 2529          + STORE     COL
        2471+10 2521          + R ADD     ZERO
        2472+20   18          + L LEFT    0018
        2473+14 2528          + STORE MQ  FMT
        2474+15 2527          + LOAD MQ   DATA
        2475+10 2479          + R ADD     TYPETRAD
        2476+ 9 2528          + ADD       FMT
        2477+13 2478          + STORE A   TYPETR
        2478+ 1    0 TYPETR   + TR        /   /        TR SELECTED ROUTINE
        2479+ 0 2480 TYPETRAD + STOP      TYPETRT      TYPE TRANSFER TABLE ADDRESS
        2480+ 1 2509 TYPETRT  + TR        EOL          FMT=0..6 (IE <100) -> END OF PARAM LIST -> END OF LINE 
        2481+ 1 2486          + TR        TYSTR        FMT=1 -> PRINT A STRINGZ
        2482+ 1 2491          + TR        TYINT        FMT=2 -> PRINT AN INT
        2483+ 1 2496          + TR        TYOCT        FMT=3 -> PRINT AN OCT
        2484+ 1 2501          + TR        TYCHR        FMT=4 -> PRINT A CHAR
        2485+ 1 2505          + TR        TYALF        FMT=5 -> PRINT A 3-CHR PACKED ALFA STRING
        2486+10 2486 TYSTR    + R ADD     *            PRINT STRINGZ
        2487+ 1   79          + TR        PRTSTR
        2488+ 0    0 DATALOC  + STOP      /   /
        2489- 0 2529          - STOP      COL          COLUMN WHERE TXT STARTS
        2490+ 1 2452          + TR        GPARAM
        2491+10 2491 TYINT    + R ADD     *            MQ ALREADY LOADED WITH DATA TO PRINT
        2492+ 1   61          + TR        PRTINT
        2493+ 0    6          + STOP      0006         UP TO 6 DECIMAL DIGITS 
        2494- 0 2529          - STOP      COL          COLUMN WHERE TXT STARTS
        2495+ 1 2452          + TR        GPARAM
        2496+10 2496 TYOCT    + R ADD     *            MQ ALREADY LOADED WITH DATA TO PRINT
        2497+ 1   81          + TR        PRTOCT
        2498+ 0    6          + STOP      0006         UP TO 6 DECIMAL DIGITS 
        2499- 0 2529          - STOP      COL          COLUMN WHERE TXT STARTS
        2500+ 1 2452          + TR        GPARAM
        2501+10 2501 TYCHR    + R ADD     *            MQ ALREADY LOADED WITH DATA TO PRINT
        2502+ 1   63          + TR        PRTCHR
        2503- 0 2529          - STOP      COL          COLUMN WHERE TXT STARTS
        2504+ 1 2452          + TR        GPARAM
        2505+10 2505 TYALF    + R ADD     *            MQ ALREADY LOADED WITH DATA TO PRINT
        2506+ 1   59          + TR        PRTALF
        2507- 0 2529          - STOP      COL          COLUMN WHERE TXT STARTS
        2508+ 1 2452          + TR        GPARAM
        2509+10 2529 EOL      + R ADD     COL          SEND CARD BUFFER TO PRINTER AND RETURN TO CALLER
        2510+ 4 2515          + TR 0      DOPRINT      =0 -> PRINT ALLWAYS (NO SENSE SW CHECK)
        2511+ 9 2524          + ADD       D68          =1..6 -> SENSE 69..74 = OPERATOR'S PANEL SENSE SWITCH 1..6
        2512+13 2513          + STORE A   CHKSW
        2513+30    0 CHKSW    + SENSE     /   /         
        2514+ 1 2517          + TR        RETURN       SW NOT AT ON POSITION
        2515+10 2515 DOPRINT  + R ADD     *            PRINT CARD BUFFER
        2516+ 1   57          + TR        PRINTCRD
        2517+10 2526 RETURN   + R ADD     PARAM        PARAM-1 IS THE RETURN ADDR      
        2518+ 5 2522          + SUB       ONE
        2519+13 2520          + STORE A   EXIT
        2520+ 1    0 EXIT     + TR        /   /        RETURN TO CALLER
        2521+ 0    0 ZERO     + STOP      0000
        2522+ 0    1 ONE      + STOP      0001
        2523+ 0    2 TWO      + STOP      0002
        2524+ 0   68 D68      + STOP      0068
        2525+ 0  100 D100     + STOP      100
        2526+ 0    0 PARAM    + STOP      0000
        2527+ 0    0 DATA     + STOP      0000
        2528+ 0    0 FMT      + STOP      0000
        2529+ 0    0 COL      + STOP      0000
        2530+ 9 2544 BMPAD    + ADD       TWO
        2531+13 2533          + STORE A   EXIT
        2532+10 2534          + R ADD     BITMAPAD
        2533+ 1    0 EXIT     + TR        /   /
        2534+ 0 2536 BITMAPAD + STOP      BITMAP
        2535+     0             ORG       EVEN
        2536+     0  BITMAP     DEF       0              <blank>     0     <none>
        2537+   256             DEF       256               1        1       1        256          =  256   
        2538+   128             DEF       128               2        2       2        128          =  128   
        2539+    64             DEF       64                3        3       3         64          =   64   
        2540+    32             DEF       32                4        4       4         32          =   32   
        2541+    16             DEF       16                5        5       5         16          =   16   
        2542+     8             DEF       8                 6        6       6          8          =    8   
        2543+     4             DEF       4                 7        7       7          4          =    4   
        2544+     2  TWO        DEF       2                 8        8       8          2          =    2   
        2545+     1             DEF       1                 9        9       9          1          =    1   
        2546+   512             DEF       512               0       10       0        512          =  512   
        2547+  1024             DEF       1024              -       11       X       1024          = 1024   
        2548+  2048             DEF       2048              +       12       Y       2048          = 2048   
        2549+  2304             DEF       2304              A       13      Y-1        256+2048    = 2304   
        2550+  2176             DEF       2176              B       14      Y-2        128+2048    = 2176   
        2551+  2112             DEF       2112              C       15      Y-3         64+2048    = 2112   
        2552+  2080             DEF       2080              D       16      Y-4         32+2048    = 2080   
        2553+  2064             DEF       2064              E       17      Y-5         16+2048    = 2064   
        2554+  2056             DEF       2056              F       18      Y-6          8+2048    = 2056   
        2555+  2052             DEF       2052              G       19      Y-7          4+2048    = 2052   
        2556+  2050             DEF       2050              H       20      Y-8          2+2048    = 2050   
        2557+  2049             DEF       2049              I       21      Y-9          1+2048    = 2049   
        2558+  1280             DEF       1280              J       22      X-1        256+1024    = 1280   
        2559+  1152             DEF       1152              K       23      X-2        128+1024    = 1152   
        2560+  1088             DEF       1088              L       24      X-3         64+1024    = 1088   
        2561+  1056             DEF       1056              M       25      X-4         32+1024    = 1056   
        2562+  1040             DEF       1040              N       26      X-5         16+1024    = 1040   
        2563+  1032             DEF       1032              O       27      X-6          8+1024    = 1032   
        2564+  1028             DEF       1028              P       28      X-7          4+1024    = 1028   
        2565+  1026             DEF       1026              Q       29      X-8          2+1024    = 1026   
        2566+  1025             DEF       1025              R       30      X-9          1+1024    = 1025   
        2567+   640             DEF       640               S       31      0-2        128+512     = 640    
        2568+   576             DEF       576               T       32      0-3         64+512     = 576    
        2569+   544             DEF       544               U       33      0-4         32+512     = 544    
        2570+   528             DEF       528               V       34      0-5         16+512     = 528    
        2571+   520             DEF       520               W       35      0-6          8+512     = 520    
        2572+   516             DEF       516               X       36      0-7          4+512     = 516    
        2573+   514             DEF       514               Y       37      0-8          2+512     = 514    
        2574+   513             DEF       513               Z       38      0-9          1+512     = 513    
        2575+   578             DEF       578               ,       39      8-3-0        2+64+512  = 578    
        2576+   546             DEF       546               %       40      8-4-0        2+32+512  = 546    
        2577+  1090             DEF       1090              $       41      8-3-X        2+64+1024 = 1090   
        2578+  1058             DEF       1058              *       42      8-4-X        2+32+1024 = 1058   
        2579+  2114             DEF       2114              .       43      8-3-Y        2+64+2048 = 2114   
        2580+  2082             DEF       2082              #       44      8-4-Y        2+32+2048 = 2082   
        2581+   768             DEF       768               /       45      0-1          512+256   = 768    
        2582+    66             DEF       66                +       46      8-3          2+64      = 66     
        2583+    34             DEF       34                -       47      8-4          2+32      = 34    This is the non-minus-sign separator
        2584+15 2651 SRCHTBL  + LOAD MQ   ZERO
        2585+ 1 2589          + TR        START
        2586+15 2652 EQTBL    + LOAD MQ   ONE
        2587+ 1 2589          + TR        START
        2588+15 2653 READTBL  + LOAD MQ   TWO
        2589+ 9 2653 START    + ADD       TWO 
        2590+13 2597          + STORE A   P1           PARM: ADDR OF TABLE
        2591+ 9 2652          + ADD       ONE          
        2592+13 2599          + STORE A   P2           PARM: LEN OF TABLE
        2593+ 9 2652          + ADD       ONE          
        2594+13 2604          + STORE A   P3           PARM: VAL TO FIND
        2595+ 9 2652          + ADD       ONE          
        2596+13 2645          + STORE A   EXIT
        2597+10    0 P1       + R ADD     /   /        GET ADDR OF TABLE
        2598+13 2648          + STORE A   TBL
        2599+10    0 P2       + R ADD     /   /        GET ADDR OF LEN OF TABLE/ENTRY ON TABLE
        2600+13 2601          + STORE A   P2A
        2601+10    0 P2A      + R ADD     /   /        DERREFERENCE -> ACC=LEN/ENTRY (1..LEN)
        2602+12 2646          + STORE     N
        2603+ 4 2645          + TR 0      EXIT         EXIT, CANNOT READ/STORE ON ENTRY 0, SEARCH ON EMPTY TABLE
        2604+10    0 P3       + R ADD     /   /        GET ADDR OF VAL TO FIND
        2605+13 2621          + STORE A   WRVAL
        2606+13 2607          + STORE A   P3A
        2607+10    0 P3A      + R ADD     /   /        DERREFERENCE -> ACC=VAL
        2608+12 2647          + STORE     VAL
        2609+14 2650          + STORE MQ  TEMP         JUMP TABLE DISPATCH
        2610+10 2650          + R ADD     TEMP
        2611+ 4 2626          + TR 0      LOOP0        TR TO SEARCH TABLE
        2612+10 2646          + R ADD     N            SUB ONE AS FIRST ENTRY ON TABLE IS "1"
        2613+ 5 2652          + SUB       ONE          
        2614+ 9 2648          + ADD       TBL          TABLE BASE ADDR
        2615+13 2624          + STORE A   WRTBL
        2616+13 2620          + STORE A   RDTBL2
        2617+10 2650          + R ADD     TEMP
        2618+ 5 2652          + SUB       ONE
        2619+ 4 2623          + TR 0      STORETBL 
        2620+10    0 RDTBL2   + R ADD     /   /        VAL=TBL[ENT]
        2621+12    0 WRVAL    + STORE     /   /
        2622+ 1 2645          + TR        EXIT
        2623+10 2647 STORETBL + R ADD     VAL          TBL[ENT]=VAL
        2624+12    0 WRTBL    + STORE     /   /    
        2625+ 1 2645          + TR        EXIT
        2626+10 2648 LOOP0    + R ADD     TBL
        2627+13 2633          + STORE A   RDTBL
        2628+10 2633          + R ADD     RDTBL
        2629+12 2649          + STORE     TBL0
        2630+ 9 2646          + ADD       N
        2631+12 2650          + STORE     TEMP         THE END ADDR OF TABLE
        2632+10 2647 LOOP     + R ADD     VAL          ACC=THE SEARCHED VALUE
        2633+ 5    0 RDTBL    + SUB       /   /    
        2634+ 2 2635          + TR OV     OVOK         CLEAR OV JUST IN CASE
        2635+ 4 2642 OVOK     + TR 0      FOUND        TR IF VAL FOUND IN ENTRY N
        2636+10 2633          + R ADD     RDTBL
        2637+ 9 2652          + ADD       ONE
        2638+13 2633          + STORE A   RDTBL
        2639+ 5 2650          + SUB       TEMP
        2640+ 4 2645          + TR 0      EXIT         NOT FOUND -> RETURN ZERO
        2641+ 1 2632          + TR        LOOP
        2642+10 2633 FOUND    + R ADD     RDTBL        RETURN ENTRY FOUND
        2643+ 5 2649          + SUB       TBL0
        2644+ 9 2652          + ADD       ONE
        2645+ 1    0 EXIT     + TR        /   /
        2646+ 0    0 N        + STOP      0000
        2647+ 0    0 VAL      + STOP      0000
        2648+ 0    0 TBL      + STOP      0000
        2649+ 0    0 TBL0     + STOP      0000
        2650+ 0    0 TEMP     + STOP      0000
        2651+ 0    0 ZERO     + STOP      0000
        2652+ 0    1 ONE      + STOP      0001         constant 1
        2653+ 0    2 TWO      + STOP      0002         constant 2
        2654+ 9 2727 RWDRUM   + ADD       TWO 
        2655+13 2664          + STORE A   PDR1         PARM1: DRUM INSTR: READ/WRITE 0128  0129  0130  0131
        2656+ 9 2726          + ADD       ONE          
        2657+13 2666          + STORE A   PDR2         PARM2: DRUM ADDRESS (0..4094)
        2658+ 9 2726          + ADD       ONE          
        2659+13 2668          + STORE A   PDR3         PARM3: BUF START ADDRESS
        2660+ 9 2726          + ADD       ONE          
        2661+13 2670          + STORE A   PDR4         PARM4: LEN: NUMBER OF HALF-WORDS (MUST BE EVEN)
        2662+ 9 2726          + ADD       ONE          
        2663+13 2724          + STORE A   EXIT               
        2664+10    0 PDR1     + R ADD     /   /        GET DRUM INSTR
        2665+12 2672          + STORE     DRIO
        2666+10    0 PDR2     + R ADD     /   /        GET DRUM ADDR
        2667+13 2673          + STORE A   DRADDR
        2668+10    0 PDR3     + R ADD     /   /        GET BUF ADDR (MUST BE EVEN)
        2669+13 2711          + STORE A   RWCOPY    
        2670+10    0 PDR4     + R ADD     /   /        GET BUF LEN (MUST BE EVEN, CAN BE 0)
        2671+12 2728          + STORE     LEN
        2672+ 0    0 DRIO     + STOP      /   /        INSTR: READ/WRITE 0128  0129  0130  0131
        2673+29    0 DRADDR   + SET DR    /   /
        2674+ 1 2707          + TR        LOOP
        2675+ 9 2727 RDTAPE   + ADD       TWO 
        2676+13 2683          + STORE A   PR1          PARM1: TAPE ADDRESS
        2677+ 9 2726          + ADD       ONE          
        2678+13 2685          + STORE A   PR2          PARM2: BUF START ADDRESS
        2679+ 9 2726          + ADD       ONE          
        2680+13 2724          + STORE A   EXIT
        2681+ 2 2682          + TR OV     CLOV1        CLEAR OV THAT MAY HAVE BEEN SET
        2682+ 8    0    CLOV1 + NOOP      0000
        2683+10    0 PR1      + R ADD     /   /        GET TAPE ADDR
        2684+13 2687          + STORE A   RTAPAD       TAPE UNITS: 0256  0257  0258  0259
        2685+10    0 PR2      + R ADD     /   /        GET BUF ADDR (MUST BE EVEN)
        2686+13 2711          + STORE A   RWCOPY    
        2687+24    0 RTAPAD   + READ      /   /
        2688+10 2725          + R ADD     ZERO
        2689+ 1 2709          + TR        LOOP1
        2690+ 9 2727 WRTAPE   + ADD       TWO 
        2691+13 2698          + STORE A   PW1          PARM1: TAPE ADDRESS
        2692+ 9 2726          + ADD       ONE          
        2693+13 2700          + STORE A   PW2          PARM2: BUF START ADDRESS
        2694+ 9 2726          + ADD       ONE          
        2695+13 2702          + STORE A   PW3          PARM3: BUF LEN
        2696+ 9 2726          + ADD       ONE          
        2697+13 2724          + STORE A   EXIT
        2698+10    0 PW1      + R ADD     /   /        GET TAPE ADDR
        2699+13 2706          + STORE A   WTAPAD       TAPE UNITS: 0256  0257  0258  0259
        2700+10    0 PW2      + R ADD     /   /        GET BUF ADDR (MUST BE EVEN)
        2701+13 2711          + STORE A   RWCOPY    
        2702+10    0 PW3      + R ADD     /   /        GET ADDR OF LEN 
        2703+13 2704          + STORE A   PW3A
        2704+10    0 PW3A     + R ADD     /   /        GET BUF LEN (MUST BE EVEN, CAN BE 0)
        2705+12 2728          + STORE     LEN
        2706+26    0 WTAPAD   + WRITE     /   /        PREPARE TO WRITE ON TAPE
        2707+10 2728 LOOP     + R ADD     LEN
        2708+ 4 2723          + TR 0      RWOK
        2709+ 5 2727 LOOP1    + SUB       TWO
        2710+12 2728          + STORE     LEN
        2711-31    0 RWCOPY   - COPY      /   /        WRITE BUFFER TO TAPE
        2712+ 1 2715          + TR        GO 
        2713+ 1 2719          + TR        EOF          END OF FILE
        2714+ 1 2721          + TR        EOR          END OF RECORD
        2715+10 2711 GO       + R ADD     RWCOPY
        2716+ 5 2727          + SUB       TWO
        2717+13 2711          + STORE A   RWCOPY
        2718+ 1 2707          + TR        LOOP
        2719+10 2726 EOF      + R ADD     ONE          SET OV FLAG TO SIGNAL END OF FILE CONDITION
        2720+22   36          + A LEFT    36
        2721+ 6 2728 EOR      + R SUB     LEN          RETURN NUMBER OF HALF-WORDS READ
        2722+ 5 2727          + SUB       TWO
        2723+26 2052 RWOK     + WRITE     2052         INSURE THAT MQ NOT IN USE            
        2724+ 1    0 EXIT     + TR        /   /        RETURN TO CALLER
        2725+ 0    0 ZERO     + STOP      0000
        2726+ 0    1 ONE      + STOP      0001         
        2727+ 0    2 TWO      + STOP      0002         
        2728+     0  LEN        RES       1
        2730+ 9 2745 CHAIN    + ADD       TWO
        2731+13 2732          + STORE A   CHP1
        2732+10    0 CHP1     + R ADD     /   /        GET TAPE NUMBER
        2733+13 2740          + STORE A   TAPELOAD
        2734+30   70          + SENSE     0070         SENSE SWITCH 2                                  
        2735+ 1 2739 CONTAD   + TR        ENDSTOP      (ON POSITION MAKES SENSE OPCODE TO SKIP NEXT INSTR)
        2736+10 2735          + R ADD     CONTAD       IF SW2 IS ON, A +STOP 4095 IS EXECUTED.  
        2737+12 4095          + STORE     4095         IF THEN USER PRESS START, EXECUTION WILL BE RESUMED 
        2738+ 0 4095          + STOP      4095         AND CHAINED PROGRAM WILL BE LOADED AND EXECUTED
        2739+ 8    0 ENDSTOP  + NOOP      0000
        2740+24    0 TAPELOAD + READ      0000         
        2741-31    0 TL0      - COPY      0000         READ 1ST WORD OF SELF-LOADER FROM TAPE
        2742+ 1    0          + TR        0000         TR TO SELF-LOADER
        2743+ 0 2221          + STOP      2221         ERROR LOADING: UNEXPECTED END OF FILE
        2744+ 0 2222          + STOP      2222         ERROR LOADING: UNEXPECTED END OF RECORD 
        2745+ 0    2 TWO      + STOP      0002         ERROR LOADING: UNEXPECTED END OF FILE
          48-     0  ROUTINE INIT
          49+ 1  112 ENTRY POINT
          50-     0  ROUTINE CHAIN
          51+ 1 2730 ENTRY POINT
          52-     0  ROUTINE CLRBUF
          53+ 1 2118 ENTRY POINT
          54-     0  ROUTINE PRTNLINE
          55+ 1 2448 ENTRY POINT
          56-     0  ROUTINE PRINTCRD
          57+ 1 2126 ENTRY POINT
          58-     0  ROUTINE PRTALF
          59+ 1 2210 ENTRY POINT
          60-     0  ROUTINE PRTINT
          61+ 1 2288 ENTRY POINT
          62-     0  ROUTINE PRTCHR
          63+ 1 2330 ENTRY POINT
          64-     0  ROUTINE RDTAPE
          65+ 1 2675 ENTRY POINT
          66-     0  ROUTINE WRTAPE
          67+ 1 2690 ENTRY POINT
          68-     0  ROUTINE RWDRUM
          69+ 1 2654 ENTRY POINT
          70-     0  ROUTINE SRCHTBL
          71+ 1 2584 ENTRY POINT
          72-     0  ROUTINE READTBL
          73+ 1 2588 ENTRY POINT
          74-     0  ROUTINE READCRD
          75+ 1 2122 ENTRY POINT
          76-     0  ROUTINE WRITECRD
          77+ 1 2124 ENTRY POINT
          78-     0  ROUTINE PRTSTR
          79+ 1 2187 ENTRY POINT
          80-     0  ROUTINE PRTOCT
          81+ 1 2254 ENTRY POINT
          82-     0  ROUTINE BMPAD
          83+ 1 2530 ENTRY POINT
          84-     0  ROUTINE EQTBL
          85+ 1 2586 ENTRY POINT
        4094+    48  REGION ORIGIN TABLE LOCATION
        4095+   112  INITIAL REGION
           0+ 1  112          + TR        INIT         PROGRAM START
