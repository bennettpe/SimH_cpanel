; SYMBOL TABLE
; Reg Addr   Len
;  I     0   302
;  T   302    29
;    Num  Op.  Addr  Name
; SY   0  DEF     0  READ
;  
         0000 +A  I 0300 READ     + ADD       TWO    
         0001 +SA I 0230          + STORE A   READEX       SAVE RETURN ADDR
         0002 -RD A 2048 READCRD  - READ      2048         START READING DATA PUNCHED CARD
         0003 +RS I 0298          + R SUB     ZERO
         0004 -ST T 0008          - STORE     NUM1         NUMn  = NUMBER PART OF DATA 1 TO 4
         0005 -ST T 0010          - STORE     LPQ1         LPQn  = LOCATION, PP AND QQ OF DATA 1 TO 4 
         0006 -ST T 0012          - STORE     NUM2
         0007 -ST T 0014          - STORE     LPQ2
         0008 -ST T 0016          - STORE     NUM3
         0009 -ST T 0018          - STORE     LPQ3
         0010 -ST T 0020          - STORE     NUM4
         0011 -ST T 0022          - STORE     LPQ4
         0012 -ST T 0026          - STORE     SUM
         0013 +RA I 0232          + R ADD     D9           CARD STARTS WITH ROW 9 
         0014 +ST T 0024 LOOPROW  + STORE     NROW         LOOP ON NROW=CARD ROW BEING PROCESSED
         0015 +RA I 0233          + R ADD     DATA1AD      
         0016 +SA I 0042          + STORE A   RDDATA1      SET INITIAL ADDRESS TO 
         0017 +RA I 0234          + R ADD     NUM1AD       READ FROM DATA1, UPDATE IN NUM1 AND LPQ1
         0018 +SA I 0068          + STORE A   RDNUM1
         0019 +SA I 0069          + STORE A   WRNUM1
         0020 +A  I 0300          + ADD       TWO
         0021 +SA I 0080          + STORE A   RDLPQ1
         0022 +SA I 0081          + STORE A   WRLPQ1
         0023 -C  T 0000          - COPY      DATA1          
         0024 +LL A 0000          + L LEFT    0000         MQ HAS READ FULLWORD, THIS SETS ACC SIGN=1ST COL OF READ CARD
         0025 +TP I 0028          + TR +      LR1          NO PUNCH ON COL 1 (LEFTMOST ONE)
         0026 -RA I 0298          - R ADD     ZERO         LOAD ZERO IN LEFT-HALF OF ACC, ONE IN RIGHT-HALF OF ACC
         0027 +LR A 0000          + L RIGHT   0000
         0028 +LL A 0017 LR1      + L LEFT    0017           
         0029 +AL A 0017          + A LEFT    0017         COL1 IN LEFTMOST BIT Of ACC, COL18 IN SIGN OF RIGHT HALF ACC
         0030 -ST T 0000          - STORE     DATA1        =octal 200000|400000 for 1 in col  1 and col 18
         0031 -SM T 0002          - STORE MQ  DATA2        =octal 200000|400000 for 1 in col 19 and col 36
         0032 -C  T 0004          - COPY      DATA3 
         0033 +LL A 0000          + L LEFT    0000
         0034 +TP I 0037          + TR +      LR2
         0035 -RA I 0298          - R ADD     ZERO         LOAD ZERO IN LEFT-HALF OF ACC, ONE IN RIGHT-HALF OF ACC
         0036 +LR A 0000          + L RIGHT   0000
         0037 +LL A 0017 LR2      + L LEFT    0017
         0038 +AL A 0017          + A LEFT    0017
         0039 -ST T 0004          - STORE     DATA3        =octal 200000|400000 for 1 in col 37 and col 54
         0040 -SM T 0006          - STORE MQ  DATA4        =octal 200000|400000 for 1 in col 55 and col 72
         0041 +RA I 0298 LOOPDATA + R ADD     ZERO         
         0042 -LM A 0000 RDDATA1  - LOAD MQ   /   /        MQ=DATA1, DATA2, DATA3, DATA4
         0043 +LL A 0004          + L LEFT    0004         
         0044 +AL A 0018          + A LEFT    0018         ACC=binary 0000..1111 (decimal 0..15) <- punches for LOCATION OF DATA On ROW NROW
         0045 +A  I 0235          + ADD       TBL1AD
         0046 +SA I 0070          + STORE A   LOC4D        SET ADDR TO RETRIEVE 4 DIGITS FOR LOCATION
         0047 +LL A 0005          + L LEFT    0005
         0048 +AL A 0018          + A LEFT    0018         ACC=columns 1..5 of number
         0049 +A  I 0235          + ADD       TBL1AD
         0050 +SA I 0064          + STORE A   NUM5D1       SET ADDR TO RETRIEVE 5 DIGITS FOR NUM 
         0051 +LL A 0005          + L LEFT    0005
         0052 +AL A 0018          + A LEFT    0018         ACC=columns 6..10 of number
         0053 +A  I 0235          + ADD       TBL1AD
         0054 +SA I 0062          + STORE A   NUM5D2       SET ADDR TO RETRIEVE NEXT 5 DIGITS FOR NUM 
         0055 +LL A 0002          + L LEFT    0002
         0056 +AL A 0018          + A LEFT    0018         ACC=PP columns
         0057 +A  I 0235          + ADD       TBL1AD
         0058 +SA I 0072          + STORE A   PP2D
         0059 +LL A 0020          + L LEFT    0020         ACC=QQ columns
         0060 +A  I 0235          + ADD       TBL1AD
         0061 +SA I 0074          + STORE A   QQ2D
         0062 +RA A 0000 NUM5D2   + R ADD     /   /        RETRIEVE DECIMAL DIGITS 6-10 FOR NUM 
         0063 +AR A 0018          + A RIGHT   0018
         0064 +A  A 0000 NUM5D1   + ADD       /   /        RETRIEVE DECIMAL DIGITS 1-5 FOR NUM 
         0065 +LR A 0035          + L RIGHT   0035
         0066 +M  T 0024          + MPY       NROW         MULT BY NROW
         0067 +LL A 0017          + L LEFT    0017
         0068 -A  A 0000 RDNUM1   - ADD       /   /        ACCUMULATE NUM VALUE AND STORE IT
         0069 -ST A 0000 WRNUM1   - STORE     /   /        
         0070 +RA A 0000 LOC4D    + R ADD     /   /        RETRIEVE 4 DECIMAL DIGITS 0000..1111 FOR LOCATION
         0071 +AR A 0018          + A RIGHT   0018
         0072 +A  A 0000 PP2D     + ADD       /   /        RETRIEVE 2 DECIMAL DIGITS 00..11 FOR PP VALUE
         0073 +LR A 0010          + L RIGHT   0010
         0074 +A  A 0000 QQ2D     + ADD       /   /        RETRIEVE 2 DECIMAL DIGITS 00..11 FOR QQ VALUE
         0075 +LL A 0010          + L LEFT    0010
         0076 +TZ I 0082          + TR 0      ZLOCPPQQ     LOC, PP AND QQ HAVE NO PUNCH
         0077 +LR A 0035          + L RIGHT   0035
         0078 +M  T 0024          + MPY       NROW         MULT BY NROW
         0079 +LL A 0017          + L LEFT    0017
         0080 -A  A 0000 RDLPQ1   - ADD       /   /        ACCUMULATE LOC, PP AND QQ VALUE
         0081 -ST A 0000 WRLPQ1   - STORE     /   /        LPQn= QQ (7bits) PP (10bits) | LOC (18bits)
         0082 +RA I 0042 ZLOCPPQQ + R ADD     RDDATA1      TEST IF END OF LOOPDATA
         0083 +A  I 0245          + ADD       LOOPDEND     
         0084 +TZ I 0096          + TR 0      NXTROW       TR IF LOOP ENDS -> ALL 4 DATA NUMBERS IN ROW PROCESSED, PROCEED TO NEXT CARD ROW
         0085 +RA I 0042          + R ADD     RDDATA1      INCREMENT TO ADDRESS
         0086 +S  I 0300          + SUB       TWO          READ DATAn -> n+1
         0087 +SA I 0042          + STORE A   RDDATA1      UPDATE NUMn -> n+1
         0088 +RA I 0080          + R ADD     RDLPQ1       UPDATE LOCn, PPn AND QQn -> n+1
         0089 +S  I 0300          + SUB       TWO
         0090 +SA I 0068          + STORE A   RDNUM1
         0091 +SA I 0069          + STORE A   WRNUM1
         0092 +S  I 0300          + SUB       TWO
         0093 +SA I 0080          + STORE A   RDLPQ1
         0094 +SA I 0081          + STORE A   WRLPQ1
         0095 +T  I 0041          + TR        LOOPDATA
         0096 -RA T 0000 NXTROW   - R ADD     DATA1        SUM=ALL PUNCHES ADDED TOGETHER FOR EACH DATA NUM
         0097 -A  T 0002          - ADD       DATA2 
         0098 -A  T 0004          - ADD       DATA3 
         0099 -A  T 0006          - ADD       DATA4 
         0100 +AR A 0017          + A RIGHT   0017
         0101 -A  T 0026          - ADD       SUM          
         0102 -ST T 0026          - STORE     SUM
         0103 +RA T 0024          + R ADD     NROW         SELECT NEXT ROW 
         0104 +S  I 0299          + SUB       ONE
         0105 +TP I 0014          + TR +      LOOPROW      AND TR TO ROW LOOP TO PROCESS IT
         0106 -C  T 0000          - COPY      DATA1        READ X(11) MINUS ROW IN DATA1 AND DATA2
         0107 -C  T 0002          - COPY      DATA2 
         0108 +RA I 0234          + R ADD     NUM1AD       LOOP ON NUM1..NUM3 TO COMPUTE EACH ONE AS 
         0109 +SA I 0120 LOOPNUM  + STORE A   RDNUM2       A WHOLE 10 DIGITS NUMBER
         0110 +SA I 0121          + STORE A   WRNUM2
         0111 +A  I 0299          + ADD       ONE
         0112 +SA I 0115          + STORE A   RDNUM2B
         0113 -RA I 0286          - R ADD     DEC10A
         0114 +LR A 0001          + L RIGHT   0001
         0115 +A  A 0000 RDNUM2B  + ADD       /   /        NOW ACC = RIGHTS DIGITS 6..10 OF NUM | 50000 (THE FRACT PART)
         0116 +LR A 0035          + L RIGHT   0035
         0117 -D  I 0286          - DIV       DEC10A       NOW ACC = RIGHTS DIGITS 6..10 OF NUM / 100.000 (THE FRACT PART)
         0118 +RA I 0298          + R ADD     ZERO
         0119 +LL A 0035          + L LEFT    0035
         0120 +A  A 0000 RDNUM2   + ADD       /   /        NOW ACC = LEFT DIGITS 1..5 OF NUM (INT PART) + RIGHTS DIGITS 6..10 OF NUM / 100.000 (THE FRACT PART)
         0121 -ST A 0000 WRNUM2   - STORE     /   /        STORE NUM AS PP=05 (5 DECIMAL DIGITS ON LEFT OF DECIMAL POINT) AND QQ=17 (17 BITS ON LEFT OF DECIMAL POINT)
         0122 +RA I 0120          + R ADD     RDNUM2
         0123 +S  I 0236          + SUB       LOOPNEND
         0124 +TZ I 0128          + TR 0      LSTROW       TR TO PROCESS LAST ROW OF CARD
         0125 +RA I 0115          + R ADD     RDNUM2B
         0126 +A  I 0301          + ADD       D3
         0127 +T  I 0109          + TR        LOOPNUM  
         0128 -C  T 0004 LSTROW   - COPY      DATA3        READ Y(12) PLUS ROW IN DATA3 AND DATA4. 
         0129 -C  T 0006          - COPY      DATA4        THIS IS THE LAST ROW OF CARD
         0130 -LM T 0026          - LOAD MQ   SUM          CHECK ALL COLUMNS WITH AT LEAST ONE PUNCH
         0131 +RA I 0298          + R ADD     ZERO
         0132 -D  I 0238          - DIV       D0001111
         0133 +TZ I 0137          + TR 0      WRVARS
         0134 +H  I 0002 L3634    + STOP      READCRD      STOP: NOT ALL 80 COLUMNS PUNCHED. 
         0135 +RA I 0298          + R ADD     ZERO         unreachable code. 
         0136 +T  I 0134          + TR        L3634
         0137 +RA I 0233 WRVARS   + R ADD     DATA1AD      WRITE DATA NUMBERS IN VARIABLES
         0138 +SA I 0164          + STORE A   RDDATA2
         0139 +SA I 0156          + STORE A   RDDATA3
         0140 +SA I 0211          + STORE A   RDDATA4
         0141 +RA I 0234          + R ADD     NUM1AD
         0142 +SA I 0179 LOOPVARS + STORE A   RDNUM3       LOOP TO WRITE NUM1..NUM4 IN VAR AT LOC1..LOC4
         0143 +SA I 0196          + STORE A   RDNUM4
         0144 +SA I 0205          + STORE A   RDNUM5
         0145 +A  I 0300          + ADD       TWO
         0146 +SA I 0154          + STORE A   RDLPQ2
         0147 +SA I 0148          + STORE A   RDLPQ3
         0148 -RA A 0000 RDLPQ3   - R ADD     /   /        LPQn= QQ (7bits) PP (10bits) | LOC (18bits) = QQ * 1024 + PP | LOC
         0149 +TZ I 0216          + TR 0      NXTVAR       RSV: On original code, the instructions here are "TR + QQOK, TR NXTVAR"
         0150 +T  I 0151          + TR        QQOK              This is a bug, as LPQ can never be negative at this point (QQ sign will be set at RDDATA3 label)
         0151 +AL A 0018 QQOK     + A LEFT    0018         NOW LEFT HALF OF ACC=LOCATION WHERE TO STORE DATA NUMBER
         0152 +A  I 0237          + ADD       VARAD        ADD LOCATION OF VARS REGION
         0153 +SA I 0215          + STORE A   WRVAR        SET ABSOLUTE VAR ADDR WHERE TO STORE DATA NUMBER
         0154 +RA A 0000 RDLPQ2   + R ADD     /   /        LPQn= QQ (7bits) PP (10bits) | LOC (18bits)
         0155 +LR A 0045          + L RIGHT   0045         NOW MQ=QQ IN LEFT HALFWORD
         0156 +RS A 0000 RDDATA3  + R SUB     /   /        ACC=-DATA1 -> bit=1 -> minus sign set in this column
         0157 +AL A 0016          + A LEFT    0016         NOW ACC <> 0 IF QQ HAS MINUS SIGN SET
         0158 +TZ I 0160          + TR 0      QQPLUS
         0159 +LR A 0000          + L RIGHT   0000         SEND ACC MINUS SIGN TO MQ -> MQ=-QQ
         0160 +SM T 0025 QQPLUS   + STORE MQ  QQ           SAVE QQ VALUE (-35 .. +35)
         0161 +LL A 0020          + L LEFT    0020
         0162 +RS I 0298          + R SUB     ZERO
         0163 +LR A 0010          + L RIGHT   0010
         0164 +RA A 0000 RDDATA2  + R ADD     /   /        ACC=DATA1 -> bit=1 -> minus sign set in this column
         0165 +AR A 0020          + A RIGHT   0020
         0166 +AL A 0035          + A LEFT    0035
         0167 +TZ I 0169          + TR 0      PPPLUS
         0168 +LR A 0000          + L RIGHT   0000
         0169 +LL A 0036 PPPLUS   + L LEFT    0036         NOW LEFT HALF OF ACC=-2*PP
         0170 +A  I 0279          + ADD       D10
         0171 +TZ I 0202          + TR 0      PP05         TR IF PP=05 -> SHOULD ADJUST ONLY TO DESIRED QQ BY SHIFTING
         0172 +TP I 0185          + TR +      PP04LS       TR IF PP<=04 -> SHOULD ADJUST TO DESIRED PP BY DIVIDING, THEN ADJUST TO DESIRED QQ BY SHIFTING 
         0173 +S  I 0240          + SUB       TBL2AD       HERE PP > 05
         0174 +SA I 0180          + STORE A   RDTBL2B      SHOULD ADJUST TO DESIRED PP BY MULTIPLYING, THEN ADJUST TO DESIRED QQ BY SHIFTING 
         0175 +RA I 0241          + R ADD     D52
         0176 +S  T 0025          + SUB       QQ
         0177 +SA I 0181          + STORE A   SHLQQB
         0178 +TF I 0179          + TR OV     RDNUM3
         0179 -LM A 0000 RDNUM3   - LOAD MQ   /   /
         0180 -M  A 0000 RDTBL2B  - MPY       /   /
         0181 +LL A 0000 SHLQQB   + L LEFT    /   /
         0182 +R  A 0000          + ROUND     0000
         0183 +TF I 0200          + TR OV     QQOV         QQ IS TO SMALL TO HOLD NUMBER -> OVERFLOW
         0184 +T  I 0210          + TR        NUMTOMQ      TR TO SAVE NUM IN MQ
         0185 +A  I 0240 PP04LS   + ADD       TBL2AD
         0186 +SA I 0194          + STORE A   RDTBL2A
         0187 +SA I 0198          + STORE A   DVTBL2A
         0188 +RA T 0025          + R ADD     QQ
         0189 +A  I 0242          + ADD       D18
         0190 +SA I 0197          + STORE A   SHRQQA
         0191 +RA I 0242          + R ADD     D18
         0192 +S  T 0025          + SUB       QQ
         0193 +SA I 0195          + STORE A   SHLQQA
         0194 -RA A 0000 RDTBL2A  - R ADD     /   /        READ TBL2[PP] -> PP=4 -> 10, PP=3 -> 100, PP=2 -> 1000 ...
         0195 +LR A 0000 SHLQQA   + L RIGHT   /   /
         0196 -A  A 0000 RDNUM4   - ADD       /   /
         0197 +LR A 0000 SHRQQA   + L RIGHT   /   /
         0198 -D  A 0000 DVTBL2A  - DIV       /   /        DIV BY 10, 100, 1000 ...
         0199 +T  I 0211          + TR        RDDATA4      TR TO APPY SIGN TO NUMBER
         0200 -RA I 0296 QQOV     - R ADD     DEC10E
         0201 +T  I 0198          + TR        DVTBL2A
         0202 +RA I 0243 PP05     + R ADD     D36          JUST SHIFT NUM TO MATCH DESIRES QQ
         0203 +S  T 0025          + SUB       QQ
         0204 +SA I 0208          + STORE A   SHLQQC
         0205 -RA A 0000 RDNUM5   - R ADD     /   /
         0206 +LM I 0298          + LOAD MQ   ZERO
         0207 +LR A 0019          + L RIGHT   0019
         0208 +LL A 0000 SHLQQC   + L LEFT    /   /
         0209 +R  A 0000          + ROUND     0000
         0210 +LR A 0035 NUMTOMQ  + L RIGHT   0035         NOW MQ=NUMBER TO STORE
         0211 +RS A 0000 RDDATA4  + R SUB     /   /        APPY SIGN: ACC=DATA1 -> bit=1 -> minus sign set in this column
         0212 +AR A 0031          + A RIGHT   0031         ISOLATE BIT FOR SIGN ON NUMBER
         0213 +TZ I 0215          + TR 0      WRVAR        TR TO WRITE NUMBER ON DESTINATION VAR IF NO SIGN       
         0214 +LR A 0000          + L RIGHT   0000         MAKE MQ NEGATIVE
         0215 -SM A 0000 WRVAR    - STORE MQ  /   /        WRITE DATA NUMBER IN VAR ABSOLUTE ADDR 
         0216 +RA I 0211 NXTVAR   + R ADD     RDDATA4
         0217 +S  I 0244          + SUB       LOOPWEND
         0218 +TZ I 0227          + TR 0      CARDDONE
         0219 +RA I 0211          + R ADD     RDDATA4
         0220 +A  I 0299          + ADD       ONE
         0221 +SA I 0156          + STORE A   RDDATA3
         0222 +SA I 0164          + STORE A   RDDATA2
         0223 +SA I 0211          + STORE A   RDDATA4
         0224 +RS I 0148          + R SUB     RDLPQ3
         0225 +A  I 0300          + ADD       TWO
         0226 +T  I 0142          + TR        LOOPVARS
         0227 +RA T 0007 CARDDONE + R ADD     DATA4B       IF Y(12) PUNCH ON COLUMN 80 -> THE LAST CARD HAS BEEN READ
         0228 +AL A 0018          + A LEFT    0018         ELSE TR TO READ NEXT DATA CARD
         0229 +TZ I 0002          + TR 0      READCRD      
         0230 +T  A 0000 READEX   + TR        /   /        RETURN TO CALLER
         0231 +000000               ORG       EVEN 
         0232 +000009    D9         DEF       9           
         0233 +H  T 0000 DATA1AD  + STOP      DATA1        ADDR OF DATA1
         0234 +H  T 0008 NUM1AD   + STOP      NUM1         ADDR OF NUM1
         0235 +H  I 0246 TBL1AD   + STOP      TBL1        
         0236 +A  T 0020 LOOPNEND + ADD       NUM4         END VALUE FOR LOOPNUM LOOP
         0237 +H  V 0000 VARAD    + STOP      V0000        LOCATION 1ST VAR (=VARS REGION ADDRESS)
         0238 +000000    D0001111   DEF       0            LEFT HALF WORD IS ZERO
         0239 -131071               DEF       *777777      RIGHT HALF WORD IS ALL ONES 
         0240 +H  I 0276 TBL2AD   + STOP      TBL2        
         0241 +000052    D52        DEF       52          
         0242 +000018    D18        DEF       18          
         0243 +000036    D36        DEF       36          
         0244 +RS T 0003 LOOPWEND + R SUB     DATA2B       END VALUE FOR LOOPERTV LOOP
         0245 +LM T 0006 LOOPDEND + LOAD MQ   DATA4        END VALUE FOR LOOPDATA LOOP
         0246 +000000    TBL1       DEF       0           
         0247 +000001               DEF       1           
         0248 +000010               DEF       10          
         0249 +000011               DEF       11          
         0250 +000100               DEF       100         
         0251 +000101               DEF       101         
         0252 +000110               DEF       110         
         0253 +000111               DEF       111         
         0254 +001000               DEF       1000        
         0255 +001001               DEF       1001        
         0256 +001010               DEF       1010        
         0257 +001011               DEF       1011        
         0258 +001100               DEF       1100        
         0259 +001101               DEF       1101        
         0260 +001110               DEF       1110        
         0261 +001111               DEF       1111        
         0262 +010000               DEF       10000       
         0263 +010001               DEF       10001       
         0264 +010010               DEF       10010       
         0265 +010011               DEF       10011       
         0266 +010100               DEF       10100       
         0267 +010101               DEF       10101       
         0268 +010110               DEF       10110       
         0269 +010111               DEF       10111       
         0270 +011000               DEF       11000       
         0271 +011001               DEF       11001       
         0272 +011010               DEF       11010       
         0273 +011011               DEF       11011       
         0274 +011100               DEF       11100       
         0275 +011101               DEF       11101       
         0276 +011110    TBL2       DEF       11110       
         0277 +011111               DEF       11111       
         0278 +000000               DEF       0           
         0279 +000010    D10        DEF       10          
         0280 +000000               DEF       0           
         0281 +000100               DEF       100         
         0282 +000000               DEF       0           
         0283 +001000               DEF       1000        
         0284 +000000               DEF       0           
         0285 +010000               DEF       10000       
         0286 +000000    DEC10A     DEF       0           
         0287 +100000               DEF       100000      
         0288 +000003               DEF       3            IS 1.000.000 = 10^6
         0289 -082496               DEF       -82496      
         0290 +000038               DEF       38           IS 10.000.000 = 10^7
         0291 +038528               DEF       38528       
         0292 +000381               DEF       381          IS 10^8
         0293 +123136               DEF       123136      
         0294 +003814               DEF       3814         IS 10^9
         0295 -051712               DEF       -51712      
         0296 +038146    DEC10E     DEF       38146        IS 10^10
         0297 -123904               DEF       -123904     
         0298 +H  A 0000 ZERO     + STOP      0000        
         0299 +H  A 0001 ONE      + STOP      0001        
         0300 +H  A 0002 TWO      + STOP      0002        
         0301 +H  A 0003 D3       + STOP      0003        
