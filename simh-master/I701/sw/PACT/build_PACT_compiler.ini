
; Builds PACT compiler tape from assembler source code
; using Ibm701Assembler.exe cross compiler and AddLib.exe as linker

 set console -q -n log=Tmp/log.txt 
; set debug stdout

del -q tmp/debug_*.txt

 set cpu debug=cmd;data;detail
 set cdr debug=cmd;data;detail
 set cdp debug=cmd;data;detail
 set lp debug=cmd;data;detail
 set mt debug=cmd;data;detail;exp

; ignore cols 1-8 on pact source cards
SET CDR SKIP_COL_1-8

SET CPU FAST
; set cpu speed=1.0

; SW6 ON -> PRINT LOG
switch "Option 6" to Off

echo 
echo *** Assemble compiler libs
echo 

call AsmbLib   Src/lib_01_PACT_LIST.txt            01
call AsmbLib   Src/lib_02_PACT_READ.txt            02
call AsmbLib   Src/lib_03_PACT_SQRT.txt            03
call AsmbLib   Src/lib_04_PACT_EXP.txt             04
call AsmbLib   Src/lib_05_PACT_LN.txt              05
call AsmbLib   Src/lib_06_PACT_ARCTAN.txt          06
call AsmbLib   Src/lib_07_PACT_SIN.txt             07
call AsmbLib   Src/lib_08_PACT_COS.txt             08

call AsmbLib   Src/lib_10_CL_PR_RD_WR.txt          10
call AsmbLib   Src/lib_11_PRTNUM.txt               11
call AsmbLib   Src/lib_12_PRTALF.txt               12
call AsmbLib   Src/lib_13_PRTNLINE.txt             13
call AsmbLib   Src/lib_14_BASE48.txt               14
call AsmbLib   Src/lib_15_RDINT_RDBMP.txt          15
call AsmbLib   Src/lib_16_RDALF.txt                16
call AsmbLib   Src/lib_17_WRCRD2.txt               17

call AsmbLib   Src/lib_20_CLMEM.txt                20
call AsmbLib   Src/lib_21_MEMCOPY.txt              21

call AsmbLib   Src/lib_31_TSRCH.txt                30
call AsmbLib   Src/lib_32_TSRCHA.txt               31
call AsmbLib   Src/lib_33_TREAD2.txt               32
call AsmbLib   Src/lib_34_TEQ2.txt                 33
call AsmbLib   Src/lib_35_TSORT.txt                34

call AsmbLib   Src/lib_40_RWTAP.txt                40
call AsmbLib   Src/lib_41_RWTAP2.txt               41
call AsmbLib   Src/lib_42_CHAIN.txt                42

call AsmbLib   Src/lib_50_CHKSUM.txt               50
call AsmbLib   Src/lib_51_WRIBREL.txt              51
call AsmbLib   Src/lib_52_DECOTREL.txt             52
call AsmbLib   Src/lib_53_WRIBABS.txt              53
call AsmbLib   Src/lib_54_DECOTABS.txt             54


call AsmbLib   Src/lib_99_DUMMY.txt                99

del  -q pactrel.txt       
del  -q prog.txt          

echo 
echo *** Assemble compiler stage decks
echo 

; Build compiler absolute stages decks (NN.txt)

del  -q Decks/??.txt         


call Asmb   Src/comp_01_CreateLibTapes.txt
call Link   01.txt 

call Asmb   Src/comp_02_CreateProgTape.txt
call Link   02.txt 

call Asmb   Src/comp_11_ReadCodeCards.txt
call Link   11.txt 

call Asmb   Src/comp_12_ComputeRegLenAndRefs.txt
call Link   12.txt 

call Asmb   Src/comp_13_ComputeFinalRegLen.txt
call Link   13.txt 

call Asmb   Src/comp_21_AbstractAssemblyPass1.txt
call Link   21.txt 

call Asmb   Src/comp_22_AbstractAssemblyPass2.txt
call Link   22.txt 

call Asmb   Src/comp_23_SeparateDupRegions.txt
call Link   23.txt 

call Asmb   Src/comp_24_DupExpansion.txt
call Link   24.txt 

call Asmb   Src/comp_31_ReadVarCards.txt
call Link   31.txt 

call Asmb   Src/comp_32_CheckVarsOnEQinstr.txt
call Link   32.txt 

call Asmb   Src/comp_33_ComputeVarLocation.txt
call Link   33.txt 

call Asmb   Src/comp_34_StorageAssignement.txt
call Link   34.txt 

call Asmb   Src/comp_41_OperationExpansion.txt
call Link   41.txt 

call Asmb   Src/comp_51_LoopExpansionPass1.txt 
call Link   51.txt 

call Asmb   Src/comp_52_LoopExpansionPass2.txt 
call Link   52.txt 

call Asmb   Src/comp_53_CallExpansion.txt 
call Link   53.txt 

call Asmb   Src/comp_61_FinalAssemblyPass1.txt
call Link   61.txt 

call Asmb   Src/comp_62_FinalAssemblyPass2.txt
call Link   62.txt 

call Asmb   Src/comp_63_FinalAssemblyPass3.txt
call Link   63.txt 

call Asmb   Src/comp_64_ScanLibrary.txt
call Link   64.txt 

call Asmb   Src/comp_65_PunchLoaderAndCtrlCards.txt
call Link   65.txt 

call Asmb   Src/comp_66_ListAndPunch.txt
call Link   66.txt 

call Asmb   Src/comp_67_PunchAbsText.txt
call Link   67.txt 

call Asmb   Src/comp_90A_SelfLoader.txt
call Abs    90A.txt

call Asmb   Src/comp_90B_RelLoader.txt
call Abs    90B.txt

call Asmb   Src/comp_91_Rewind.txt
call Abs    91.txt

del  -q pactrel.txt       
del  -q prog.txt          

; Build PACT compiler tapes

echo 
echo *** Create library tapes

CARDDECK -q PUNCH tmp/in.txt TEXT " R /LS$/ PACT LIST" AT 9
CARDDECK -q ADD   tmp/in.txt DECK Decks/lib_asm_01.txt 
CARDDECK -q ADD   tmp/in.txt TEXT " R /RD$/ PACT READ" AT 9
CARDDECK -q ADD   tmp/in.txt DECK Decks/lib_asm_02.txt 
CARDDECK -q ADD   tmp/in.txt TEXT " R /SQ$/ PACT SQRT" AT 9
CARDDECK -q ADD   tmp/in.txt DECK Decks/lib_asm_03.txt 
CARDDECK -q ADD   tmp/in.txt TEXT " R /EX$/ PACT EXP - E PWR X" AT 9
CARDDECK -q ADD   tmp/in.txt DECK Decks/lib_asm_04.txt 
CARDDECK -q ADD   tmp/in.txt TEXT " R /LO$/ PACT LOG - NATURAL LOG" AT 9
CARDDECK -q ADD   tmp/in.txt DECK Decks/lib_asm_05.txt 
CARDDECK -q ADD   tmp/in.txt TEXT " R /AT$/ PACT ARCT - ARC TANGENT" AT 9
CARDDECK -q ADD   tmp/in.txt DECK Decks/lib_asm_06.txt 
CARDDECK -q ADD   tmp/in.txt TEXT " R /SI$/ PACT SIN" AT 9
CARDDECK -q ADD   tmp/in.txt DECK Decks/lib_asm_07.txt 
CARDDECK -q ADD   tmp/in.txt TEXT " R /CO$/ PACT COS" AT 9
CARDDECK -q ADD   tmp/in.txt DECK Decks/lib_asm_08.txt 

switch "Option 6" to Off

att -q -n mt1 tmp/mtlibdir.tap
att -q -n mt2 tmp/mtlibbin.tap
att -q -n mt3 tmp/mtlibtxt.tap
att -q cdr tmp/in.txt

call run 01

det -q cdr
det -q mt1
det -q mt2
det -q mt3

switch "Option 6" to Off

echo 
echo *** Create Rewind all Tapes self-load card 

CARDDECK -q PUNCH tmp/in.txt TEXT "1           READ SELF-LOADER CODE      " AT 9
CARDDECK -q ADD   tmp/in.txt DECK  Decks/91.txt     
CARDDECK -q ADD   tmp/in.txt TEXT "+           END OF ROUTINE             " AT 9
CARDDECK -q ADD   tmp/in.txt TEXT "2 1024 2048 PUNCH REW ALL CARD         " AT 9

att -q    cdr tmp/in.txt 
att -q -n cdp Prod/rewind_all_card.crd

call run 02

det -q cdr
det -q cdp

CARDDECK  IDENT  Prod/rewind_all_card.crd   AS    "REWALL"   AT 1

echo 
echo *** Create PACT load card (to start compiler from magnetic tape)
echo *** Create tape with rel loader (to load and run compiled program deck)

CARDDECK -q PUNCH tmp/in.txt TEXT "1           READ SELF-LOADER CODE      " AT 9
CARDDECK -q ADD   tmp/in.txt DECK  Decks/90A.txt     
CARDDECK -q ADD   tmp/in.txt TEXT "+           END OF ROUTINE             " AT 9
CARDDECK -q ADD   tmp/in.txt TEXT "2 1024 0256 PUNCH PACT LOAD CARD       " AT 9
CARDDECK -q ADD   tmp/in.txt TEXT "2 0256 2048 ADD TO MT0 SELF-LOADER CARD" AT 9
CARDDECK -q ADD   tmp/in.txt TEXT "3 0256      ADD TO MT0 REL LOADER      " AT 9
CARDDECK -q ADD   tmp/in.txt DECK  Decks/90B.txt     
CARDDECK -q ADD   tmp/in.txt TEXT "+           END OF ROUTINE             " AT 9

att -q    cdr tmp/in.txt 
att -q -n cdp Prod/pact_load_card.crd
att -q -n mt0 tmp/mtloader.tap

; run program 02 already in memory
go

det -q cdr
det -q cdp
det -q mt0

CARDDECK  IDENT  Prod/pact_load_card.crd   AS    "PACTMTLD"   AT 1

echo 
echo *** Create pact compiler tape
 
; takes each compiler stage absolute text deck 
; and write it to tape. Continue using 02 program 
; already in storage

att -q -n mt0 tmp/mtpact.tap

call add 11  NOSL
call add 12
call add 13 

call add 21
call add 22
call add 23
call add 24

call add 31
call add 32
call add 33
call add 34

call add 41

call add 51
call add 52
call add 53

call add 61
call add 62
call add 63

call add 64  tmp/mtlibdir.tap "LIB DIRECTORY"
call add 65  tmp/mtloader.tap "REL LOADER"
call add 66  tmp/mtlibbin.tap "LIB BIN CODE"
call add 67  tmp/mtlibtxt.tap "LIB TEXT CODE"

det -q mt0
del -q tmp/in.txt 

; move generated pact compiler tape to production folder

copy -q tmp/mtpact.tap  Prod/mtpact.tap
del  -q tmp/mtpact.tap  

; save build log
copy -q tmp/log.txt Prod/Build_log.txt

; once added to compiler tape, these tapes are no longer necessary
; they are needed in "run_PACT_debug.ini" to support execution of compiler
; from absolute decks. Thus they are not erased
; del -q tmp/mtloader.tap
; del -q tmp/mtlibdir.tap
; del -q tmp/mtlibbin.tap
; del -q tmp/mtlibtxt.tap

echo 
echo *** Sample compilation with pact compiler tape 

do run_PACT_production.ini Validation/pact_Test1.txt

goto end

;======================

:add 
echo

; add a compiler stage to main compiler tape using
; program 02 already in memory

; if SW6 is ON -> activate debug
if ((sense_in&32)!=0) set debug -n -q tmp/debug_02.txt
if ((sense_in&32)==0) set -q nodebug

; prepare input deck for 02 program
; first card: comment with operation to perform
CARDDECK -q PUNCH tmp/in.txt TEXT "  ADD TO MT0 COMPILER STAGE %1 " AT 9

if ("%2"=="NOSL") goto endsl
; add stage self-loader card 
CARDDECK -q ADD   tmp/in.txt TEXT "2 0256 0256 ADD TO MT0 SELF-LOADER CARD" AT 9
:endsl

; read program deck in ABS text format, 
; write in 0256 (Tape MT0) device as ABS bin prog
CARDDECK -q ADD   tmp/in.txt TEXT "3 0256      ADD TO MT0 PACT STAGE DECK " AT 9
CARDDECK -q ADD   tmp/in.txt DECK  Decks/%1.txt     
CARDDECK -q ADD   tmp/in.txt TEXT "+           END OF ROUTINE             " AT 9

if (("%2"=="NOSL") || ("%2"=="")) goto enddata
; add data records from mt1 in mt0 just after stage program
CARDDECK -q ADD   tmp/in.txt TEXT "4 0256 0257 ADD TO MT0 DATA %3 FROM MT1 " AT 9
att -q mt1 %2
set env mt1att=1
:enddata

; place input deck for 02 program in card reader
att -q    cdr tmp/in.txt 

; run program 02 already in memory
go

; processing should terminate with "STOP 4095" instr. 
; If not, there was an error
if ir!=4095 call err "in 02 Create Tape"; goto end

det -q cdr

; detach tape mt1 if was attached
if ("%mt1att%"=="1") det -q mt1;set env mt1att=0

return

;======================

:run
; run absolute deck
echo *** Run %1

; if SW6 is ON -> activate debug
if ((sense_in&32)!=0) set debug -n -q tmp/debug_%1.txt
if ((sense_in&32)==0) set -q nodebug

if not exist Decks/%1.txt call err "Compiler ABS program stage %1.txt not found"; goto end
load Decks/%1.txt

dep ic 0
go

; compilation ends with "STOP 4095" instr. If not, there was a compilation error
if ir!=4095 call err "in PACT compiler"; goto end

return

;======================

:AsmbLib
echo Assemble      %1

; assemble %1 and generates pactrel.txt / prog.txt
; prog.txt is the absolute generated prog (ignored for libs) 
; pactrel.txt is the relative program. It is converted to pact text rel assembler
; format to be used in tape library. lib_asm_NN.txt is used by AddLib.exe program

!..\asm\Ibm701Assembler %1
if ("%STATUS%"!="00000000") call err "Assembler error"; goto end
copy -q pactrel.txt   Decks/lib_asm_%2.txt          
return

;======================

:Asmb

; assemble %1 and generates pactrel.txt / prog.txt
; prog.txt is the absolute generated prog ready to be used with SCP LOAD command
; pactrel.txt is the relative program, ready to be linked using AddLib

echo Assemble      %1
!..\asm\Ibm701Assembler %1
if ("%STATUS%"!="00000000") call err "Assembler error"; goto end
return

;======================

:Link

; links assembled prog (pactrel.txt) using libraries in Decks/lib_asm_NN.txt
; generates absolute prog.txt with same contest as generated by
; pact compiler when including %1 as user library
; change NOLOG to LOG to enable logging to screen

!..\asm\Link   NOLOG   pactrel.txt   Decks
if ("%STATUS%"!="00000000") call err "AddLib error"; goto end
        
:Abs
copy -q prog.txt      Decks/%1   
return

;======================

:err
echo
echo ERROR STOP %1 AT:
ex ic,ir
call pause
return

;======================

:pause
if "%CPANEL_ON%"=="1" goto pause_cpanel
set env -P "To continue press" name=Enter
return
:pause_cpanel
set cpanel interactive
return

:end

