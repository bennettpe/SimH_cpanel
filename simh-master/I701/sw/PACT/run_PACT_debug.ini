; compile and run a PACT program in debug mode
; uses compiler absolute stages decks (NN.txt) instead of production compiler tape
;      mtlibdir.tap, mtlibbin.tap, mtlibtxt.tap, mtloader.tap tapes
; generates debug_NN.txt for each compiler stage execution
; 

; Parameters:   PACT source code deck file  [LOG | NOLOG]  [PACT data deck file | NONE]  [EXIT]
;
;               LOG  -> Same as Setting Switch 6 On: activate compiler logging on printer
;               EXIT -> quit SimH on script termination (return code = 1 if any error found)

echo *** Compile PACT source program %1 (Debug mode)

if not exist %1 call err "PACT source code program %1 not found"; goto end

 set console -q -n log=Tmp/log.txt 

del -q tmp/debug_*.txt

 set cpu debug=cmd;data;detail
 set cdr debug=cmd;data;detail
 set cdp debug=cmd;data;detail
 set lp debug=cmd;data;detail
 set mt debug=cmd;data;detail;exp

set env EXIT_FLAG=0
if "%4"=="EXIT" set env EXIT_FLAG=1

set env LOG_FLAG=1
if "%2"=="NOLOG" set env LOG_FLAG=0

; check if needed tapes exists. 
; If not, please execute build_PACT_compiler.ini script to create them 

if not exist tmp/mtlibdir.tap call err "missing tmp/mtlibdir.tap library directory tape"; goto end
if not exist tmp/mtlibbin.tap call err "missing tmp/mtlibbin.tap library tape"; goto end
if not exist tmp/mtlibtxt.tap call err "missing tmp/mtlibtxt.tap library tape"; goto end
if not exist tmp/mtloader.tap call err "missing tmp/mtloader.tap library tape"; goto end

; here, we are executing each stage separatelly, so SW2 should be On
; Sw2 On  -> Stop at end of each compilation stage
; Sw2 Off -> Chain to next compilation stage (read from tape mt0) 
switch "Option 2" to On

; SW6 ON  -> PRINT COMPILATION LOG
; SW6 OFF -> DO NOT PRINT COMPILATION LOG
if ("%LOG_FLAG%"=="1") switch "Option 6" to On
if ("%LOG_FLAG%"=="0") switch "Option 6" to Off

; set card reader/punch to ignore cols 1-8 on cards
SET CDR SKIP_COL_1-8

; mount work tapes
att -q -n mt1 tmp/mt1.tap
att -q -n mt2 tmp/mt2.tap
att -q -n mt3 tmp/mt3.tap

; put PACT source code program in Card reader
att -q cdr %1

; prepare printer 
set lp0       wiring=NONE
att -q -n lp  tmp/print.txt

; set punch to binary format
set cdp0 format=bin

; prepare the output deck for compiled program
att -q -n cdp tmp/punch.crd

; run compiler stages 

call run 11 
call run 12
call run 13 

call run 21
call run 22
call run 23
call run 24

call run 31
call run 32
call run 33
call run 34

call run 41

call run 51
call run 52
call run 53

call run 61
call run 62
call run 63

att -q mt0 tmp/mtlibdir.tap
call run 64

att -q mt0 tmp/mtloader.tap
call run 65

att -q mt0 tmp/mtlibbin.tap
call run 66

; remove the compiled program self-loading binary deck from Card Punch 
det -q cdp

; now a new deck will be punched. this is the absolute text deck, 
; can be used for symbolic debugging
set cdp0 format=text
att -q -n cdp tmp/punch_abs.txt

; Deactivate log just for this stage (does not generates debug_27.txt) for perfomance
switch "Option 6" to Off

att -q mt0 tmp/mtlibtxt.tap
call run 67

; remove pact absolute text deck. Compilation terminated
det -q cdp

; set back SW6 
if ("%LOG_FLAG%"=="1") switch "Option 6" to On
if ("%LOG_FLAG%"=="0") switch "Option 6" to Off

; remove pact source code deck. Compilation terminated
det -q cdr 

set cdp0 format=auto

echo *** Load PACT compiled DECK 

; if SW6 is ON -> activate debug for PACT loader
if ((sense_in&32)!=0) set debug -n -q tmp/debug_90.txt
if ((sense_in&32)==0) set -q nodebug

; carddeck list bin tmp/punch.crd 
att -q cdr tmp/punch.crd

; stack on card reader data deck, if any
if (("%3"!="NONE") && ("%3"!="")) att cdr -q -s %3 

; set PACT run-time plugboard wiring on printer 
set lp0  wiring=PACT

; loads PACT loader symbolic info for debug log
load -s Decks/90A.txt
load -s Decks/90B.txt

; start self-loading deck from card reader
switch "Load selector" to Card
switch "Address" to 0000
press "load"

; because SW2 is On, loader should stop just before transfer to compiled program
; if not, the stop is because an error
if ir!=000000 call err "Load error"; goto end

echo *** Run PACT compiled program

; if SW6 is ON -> activate debug on PACT compiled program execution
if ((sense_in&32)!=0) set debug -n -q tmp/debug_PACT_compiled_prog.txt
if ((sense_in&32)==0) set -q nodebug

; loads PACT compiled program symbolic info for debug log
load -s tmp/punch_abs.txt

echo
; press start button to start the execution of compiled program
go

goto end

;======================

:run
echo *** Run %1

; if SW6 is ON -> activate debug
if ((sense_in&32)!=0) set debug -n -q tmp/debug_%1.txt
if ((sense_in&32)==0) set -q nodebug

if not exist Decks/%1.txt call err "Compiler ABS program stage %1.txt not found"; goto end
load Decks/%1.txt

dep ic 0
go

; compilation ends with "STOP 4095" instr. If not, there was a compilation error
if ir!=4095 call err "in PACT compiler"; goto end
return

;======================

:err
echo
echo ERROR STOP %1 AT:
ex ic,ir
call pause
if ("%EXIT_FLAG%"=="1") exit 1
return

;======================

:pause
if "%CPANEL_ON%"=="1" goto pause_cpanel
set env -P "To continue press" name=Enter
return
:pause_cpanel
set cpanel interactive
return

:end
if ("%EXIT_FLAG%"=="1") quit

