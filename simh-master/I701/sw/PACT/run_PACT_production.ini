; compile and run a PACT program
; using production compiler tape
 
; Parameters:   PACT source code deck file  [LOG | NOLOG]  [PACT data deck file | NONE]  [EXIT]
;
;               LOG -> Same as Setting Switch 6 On: activate compiler logging on printer
;               EXIT -> quit SimH on script termination (return code = 1 if any error found)


if not exist %1 call err "PACT source code program %1 not found"; goto end

; set the console log file
set console -q -n log=Tmp/log.txt 

; remove any debug log files, set to do not generate debug file
del -q tmp/debug_*.txt
set -q nodebug

 set cpu debug=cmd;data;detail
 set cdr debug=cmd;data;detail
 set cdp debug=cmd;data;detail
 set lp debug=cmd;data;detail
 set mt debug=cmd;data;detail;exp

; ignore cols 1-8 on pact source cards
SET CDR SKIP_COL_1-8

; set standard tape length
set mt0 length=1200

; select the emulation speed
; SET CPU FAST
; set cpu speed=1.0
; set cpu speed=max

; mount PACT compiler tape, and blank working tapes
att -q    mt0 Prod/mtpact.tap
att -q -n mt1 tmp/mt1.tap
att -q -n mt2 tmp/mt2.tap
att -q -n mt3 tmp/mt3.tap

echo *** Compile PACT program %1

; prepare input deck: place the loader card in front
; of source code deck

att -q    cdr Prod/pact_load_card.crd
att -q -s cdr %1

; prepare printer
set lp0       wiring=NONE
att -q -n lp  tmp/print.txt

; start compilation

set env EXIT_FLAG=0
if "%4"=="EXIT" set env EXIT_FLAG=1

; We are executing all compiler stage in sequence, so Sw2 should be Off
; Sw2 On  -> Stop at end of each compilation stage
; Sw2 Off -> Chain to next compilation stage (read from tape mt0) 
switch "Option 2" to Off

; set compiler progress logging according to optional param 
; Sw6 off -> no log
; Sw6 on  -> log each compilation stage in printer
switch "Option 6" to Off
if "%2"=="LOG" switch "Option 6" to On

; compiled program is generated in binary cards -> punch in binary mode 
set cdp0 format=bin

; prepare the output deck for compiled program
att -q -n cdp tmp/pact_prog.crd

; start the machine. Will load the 1st card from input deck (pact compiler loader card)
; this card will load the pact compiler from tape
; the pact compiler will read the source code deck and punch the compiled
; program

switch "Load selector" to Card
switch "Address" to 0000
press "load"

; check errors loading compiler tape
; stops on 90A Self-Loader 
if ir==002223 call err "TAPE: BAD CHECKSUM"; goto end
; stops on lib_42_CHAIN routine
if ir==002222 call err "TAPE: UNEXPECTED END OF RECORD"; goto end
if ir==002221 call err "TAPE: UNEXPECTED END OF FILE"; goto end

; compilation ends with "STOP 4095" instr. If not, there was a compilation error
if ir!=4095 goto err "in PACT compiler"

; compilation terminated. remove input deck, remove output deck (the compiled program)
det -q cdr
det -q cdp

set cdp0 format=auto

; run compiled deck
echo *** Run Compiled PACT program %1

; select the run-time wiring that drives the printout
; set run-time wiring
set lp0  wiring=PACT

; place the compiled program deck in card reader. 
; uncomment "carddeck list" command below to view the deck
; carddeck list bin tmp/pact_prog.crd

att -q    cdr Prod/rewind_all_card.crd
att -q -s cdr tmp/pact_prog.crd

; also stack in card reader the program data deck if any
if (("%3"!="NONE") && ("%3"!="")) att cdr -q -s %3 

; uncomment command belog to generate a compiled program execution log
; set debug -n -q tmp/debug_PACT_compiled_prog.txt

; start the machine. Will load the 1st card from input deck (pact program loader card)
; this card will load the pact compiled program on input deck, then 
; start the program. 

switch "Load selector" to Card
switch "Address" to 0000
press "load"

; PACT program can stop at any address. nevertheless the loader can stop 
; at given addresses if something goes wrong when loading compiled PACT program
; stops on 90B Rel Loader
if ir==003936 call err "REL LOAD ERROR: BAD CHECKSUM, PRESS START TO CONTINE PROCESSING CARD"; goto end
if ir==003890 call err "REL LOAD ERROR: SYMBOL IN CARD NOT FOUND, PRESS START TO READ NEXT CARD"; goto end
if ir==004031 call err "REL LOAD ERROR: SYMBOL ALREADY DEFINED, PRESS START TO OVERWRITE SYMBOL"; goto end
if ir==003989 call err "REL LOAD ERROR: INSTR USES SYMBOL NUM THAT HAS NOT BEEN DEFINED, PRESS START TO CONTINUE"; goto end
if ir==003890 call err "REL LOAD ERROR: OP.LOC/EXT IS ZERO. PRESS START TO READ NEXT CONTROL CARD"; goto end

det all

; clean-up
del -q tmp/pact_prog.crd
del -q tmp/mt1.tap
del -q tmp/mt2.tap
del -q tmp/mt3.tap

goto end

;======================

:err
echo
echo ERROR STOP %1 AT:
ex ic,ir
call pause
if ("%EXIT_FLAG%"=="1") exit 1
return

;======================

:pause
if "%CPANEL_ON%"=="1" goto pause_cpanel
set env -P "To continue press" name=Enter
return
:pause_cpanel
set cpanel interactive
return

:end
if ("%EXIT_FLAG%"=="1") quit
