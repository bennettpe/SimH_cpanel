
; set console -n -q log=log.txt 
; set debug -n -q debug.txt
; set debug stdout

; set cpu debug=cmd;data;detail
; set cdr debug=cmd;data;detail
; set cdp debug=cmd;data;detail
; set lp debug=cmd;data;detail
; set mt debug=cmd;data;detail;exp

reset cpu 
set cpu crtmemclear

echo
echo *** Build Octionary System using itself
echo

set cdr skip_col_1-8

echo
echo *** Prepare FEJ015 Binary loading
echo

; build FEJ015 - Binary Loading Program (of cards punched with FEJ018)
; it is a two-card self loading program starting at 0000

do run_NR9003_Assembly.ini  Octionary/FEJ015_assembly.txt
if not exist deck_out.dck goto end

carddeck  -q join   deck_out.dck          as   Octionary/FEJ015.dck
carddeck  -q ident  Octionary/FEJ015.dck  as    "FEJ015"    at 2
echo
carddeck list  bin  Octionary/FEJ015.dck
echo

echo
echo *** Prepare FEJ019 Binary Punch
echo

; build FEJ019 - Binary Punch Program (of cards to be loaded with FEJ015)
; it is a one-card self loading program starting at 0000

do run_NR9003_Assembly.ini  Octionary/FEJ019_assembly.txt
if not exist deck_out.dck goto end

carddeck  -q join   deck_out.dck          as   Octionary/FEJ019.dck
carddeck  -q ident  Octionary/FEJ019.dck  as    "FEJ019"    at 2
echo
carddeck list  bin  Octionary/FEJ019.dck
echo

echo
echo *** Prepare MMA011 Octionary to binary conversion of instruction card
echo

; build MMA011 - Octionary to binary conversion of instruction card
; it is a three-card self loading program starting at 0000

do run_NR9003_Assembly.ini  Octionary/MMA011_assembly.txt
if not exist deck_out.dck goto end

carddeck  -q join   deck_out.dck          as   Octionary/MMA011.dck
carddeck  -q ident  Octionary/MMA011.dck  as    "MMA011"    at 2
echo
carddeck list  bin  Octionary/MMA011.dck
echo

echo
echo *** Prepare MMA000 Decimal to binary conversion of instruction card
echo

; build MMA000 - Decimal to binary conversion of instruction card
; it is a three-card self loading program starting at 0000

do run_NR9003_Assembly.ini  Octionary/MMA000_assembly.txt
if not exist deck_out.dck goto end

carddeck  -q join   deck_out.dck          as   Octionary/MMA000.dck
carddeck  -q ident  Octionary/MMA000.dck  as    "MMA000"    at 2
echo

carddeck list  bin  Octionary/MMA000.dck
echo

echo
echo *** Prepare NR9007 Binary Transition
echo

; prepare a deck with 
;
;    1) MMA011 self loading program to load octionary instr cards in memory
;    2) NR9007 octionary instruction cards to be built
;    3) NT9008 octionary transition 
;    4) FEJ019 self loading program to punch memory to FEJ 015 format binary cards
;    5) FEJ019 control card with mem locations to be punched
;
; Then press LOAD to execute the deck.

carddeck -q punch  card.dck               oct    0304    0307
carddeck -q join   Octionary/MMA011.dck   Octionary/NR9007_oct.txt    Octionary/NR9008_oct.txt    Octionary/FEJ019.dck    card.dck    as    deck_in.dck

echo
carddeck list Octionary/NR9007_oct.txt
echo

del -q card.dck
att -q cdr deck_in.dck
att -q -n cdp deck_out.dck

set cdr0 echolevel=0

switch "Load selector" to Card
switch "Address" to 0000
press "load"

det cdr
det cdp

; add a FEJ 015 type control card after generated binary card (must have sign bit set)
; this is the NR9007 deck
carddeck  -q punch                card.dck              oct   0000 0000 0000 400305
carddeck  -q join  deck_out.dck   card.dck              as    Octionary/NR9007.dck
carddeck  -q ident                Octionary/NR9007.dck  as    "NR9007"    at 1   
del -q card.dck
del -q deck_in.dck
del -q deck_out.dck

echo
carddeck list bin Octionary/NR9007.dck
echo

echo
echo *** Prepare NR9003 Symbolic Assembler 
echo

; build NR9003 - Symbolic Assembler 
; Then convert to self program adding FEJ015 at the beginning

do run_NR9003_Assembly.ini  Octionary/NR9003_assembly.txt
if not exist deck_out.dck goto end

; prepare control card to be added at the end of deck being loaded
; this card indicated the start the loaded program (must have sign bit set)
carddeck  -q punch  card.dck              oct   0000 0000 0000 400310

; prepare assemble self loading auto start deck. contains 1) FEJ015, 2) assembly 
; binary program deck, 3) control card to start assembly prog at decimal 200 /octal 310
; Value 310 should be negative, so 400000 is aded to addres to set minus sign

carddeck  -q join   Octionary/FEJ015.dck  deck_out.dck  card.dck   as   Octionary/NR9003.dck
carddeck  -q ident  Octionary/NR9003.dck  as   "NR9003"    at 2

echo
carddeck list   Octionary/NR9003.dck
echo


echo
echo *** Prepare WHT014 print Tape
echo

; build WHT014 - print tape
; it is a 4-card program to be loaded with FEJ015 starting at 0310 octal

do run_NR9003_Assembly.ini  Octionary/WHT014_assembly.txt  KEEPMT0
if not exist deck_out.dck goto end

carddeck  -q punch  card.dck      oct  0000 0000 0000 400310
carddeck  -q join   deck_out.dck  card.dck  as   Octionary/WHT014.dck
carddeck  -q ident  Octionary/WHT014.dck    as   "WHT014"    at 2

echo
carddeck list  bin  Octionary/WHT014.dck
echo

echo
echo *** Test WHT014, RW01B
echo

; will print first two records from tape 0 of assembly

; prepare a deck with 
;
;    1) FEJ015 self loading program 
;    2) WHT014 print tape program 
;    3) WHT014 control card with tape records to be printed 
;
; Then press LOAD to execute the deck. 

carddeck  -q punch  card.dck               oct  0001 0002 0000 0400
carddeck  -q join   Octionary/FEJ015.dck   Octionary/WHT014.dck  card.dck   as  deck_in.dck

del -q card.dck
att -q cdr deck_in.dck
att -q mt0 mt0.tap
set cdr0 echolevel=0
set lp0 wiring=NONE

switch "Load selector" to Card
switch "Address" to 0000
press "load"

det cdr
det mt0

del -q card.dck
del -q mt0.tap
del -q deck_in.dck

echo
echo *** Prepare WHT016 print out memory
echo

; build WHT016 - print out memory
; it is a 4-card program to be loaded with FEJ015 starting at 0140 octal

do run_NR9003_Assembly.ini  Octionary/WHT016_assembly.txt
if not exist deck_out.dck goto end

carddeck  -q punch  card.dck      oct  0000 0000 0000 400140
carddeck  -q join   deck_out.dck  card.dck  as   Octionary/WHT016.dck
carddeck  -q ident  Octionary/WHT016.dck    as   "WHT016"    at 2

echo
carddeck list  bin  Octionary/WHT016.dck
echo

echo
echo *** Test NR9010, MMA000 and WHT016
echo

; will load NR9010 decimal program into memory and print it

; prepare a deck with 
;
;    1) MMA000 self loading program to load decimal instr cards in memory
;    2) NR9010 decimal transition instruction cards 
;    3) FEJ015 self loading program 
;    4) WHT016 print out memory program 
;    5) WHT016 control card with mem locations to be printed (octal 0305 to 0307)
;
; Then press LOAD to execute the deck. 

echo
carddeck list Octionary/NR9010_dec.txt    
echo

carddeck  -q join   Octionary/MMA000.dck   Octionary/NR9010_dec.txt   as  deck_in.dck

carddeck  -q punch  card.dck      oct  0304  0307
carddeck  -q join   deck_in.dck   Octionary/FEJ015.dck   Octionary/WHT016.dck  card.dck   as  deck_in.dck

del -q card.dck
att -q cdr deck_in.dck
set cdr0 echolevel=0
set lp0 wiring=NONE

switch "Load selector" to Card
switch "Address" to 0000
press "load"

det cdr

del -q card.dck
del -q deck_in.dck
del -q deck_out.dck

:end
echo
