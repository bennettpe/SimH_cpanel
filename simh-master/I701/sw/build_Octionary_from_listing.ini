
; set console -n -q log=log.txt 
; set debug -n -q debug.txt
; set debug stdout

; set cpu debug=cmd;data;detail
; set cdr debug=cmd;data;detail
; set cdp debug=cmd;data;detail
; set lp debug=cmd;data;detail
; set mt debug=cmd;data;detail;exp


reset cpu 
set cpu crtmemclear

echo
echo *** Build Octionary System 
echo *** using typed original binary listing, IBM 701 Cross Assembler 
echo *** Generates NR9003 Assembly sources and Self Loading card
echo

set cdr skip_col_1-8

echo
echo *** Prepare FEJ015 Binary loading
echo

; build FEJ015 - Binary Loading Program (of cards punched with FEJ018)
; it is a two-card self loading program starting at 0000

load             Octionary/FEJ015_prog.txt
carddeck  punch  Octionary/FEJ015.dck           bincards 1
carddeck  ident  Octionary/FEJ015.dck           as    "FEJ015"    at 1
echo
carddeck list  bin  Octionary/FEJ015.dck
echo

echo
echo *** Prepare FEJ019 Binary Punch
echo

; build FEJ019 - Binary Punch Program (of cards to be loaded with FEJ015)
; it is a one-card self loading program starting at 0000

load             Octionary/FEJ019_prog.txt
carddeck  punch  Octionary/FEJ019.dck           bincards 2
carddeck  ident  Octionary/FEJ019.dck           as    "FEJ019"    at 1
echo
carddeck list  bin  Octionary/FEJ019.dck
echo

echo
echo *** Prepare MMA011 Octionary to binary conversion of instruction card
echo

; build MMA011 - Octionary to binary conversion of instruction card
; it is a three-card self loading program starting at 0000

load             Octionary/MMA011_prog.txt
carddeck  punch  Octionary/MMA011.dck           bincards 3
carddeck  ident  Octionary/MMA011.dck           as    "MMA011"    at 1
echo
carddeck list  bin  Octionary/MMA011.dck
echo

echo
echo *** Prepare MMA000 Decimal to binary conversion of instruction card
echo

; build MMA000 - Decimal to binary conversion of instruction card
; it is a three-card self loading program starting at 0000

load             Octionary/MMA000_prog.txt
carddeck  punch  Octionary/MMA000.dck           bincards 3
carddeck  ident  Octionary/MMA000.dck           as    "MMA000"    at 1
echo
carddeck list  bin  Octionary/MMA000.dck
echo

echo
echo *** Prepare NR9007 Binary Transition
echo

; prepare a deck with 
;
;    1) MMA011 self loading program to load octionary instr cards in memory
;    2) NR9007 octionary instruction cards to be built
;    3) NT9008 octionary transition 
;    4) FEJ019 self loading program to punch memory to FEJ 015 format binary cards
;    5) FEJ019 control card (card) with mem locations to be punched
;
; Then press LOAD to execute the deck. Will generate one card 

carddeck  punch  card.dck               oct    0304    0307
carddeck  join   Octionary/MMA011.dck   Octionary/NR9007_oct.txt    Octionary/NR9008_oct.txt    Octionary/FEJ019.dck    card.dck    as    deck_in.dck

del -q card.dck
att -q cdr deck_in.dck
att -q -n cdp deck_out.dck

switch "Load selector" to Card
switch "Address" to 0000
press "load"

det cdr
det cdp

; add a FEJ 015 type control card after generated binary card
; this control card is just to transfer execution to address 0305 octal (must 
; have sign bit set)
; this is the NR9007 deck
carddeck  punch                card.dck              oct   0000 0000 0000 400305
carddeck  join  deck_out.dck   card.dck              as    Octionary/NR9007.dck
carddeck  ident                Octionary/NR9007.dck  as    "NR9007"    at 1   
del -q card.dck
del -q deck_in.dck
del -q deck_out.dck

echo
carddeck list bin Octionary/NR9007.dck
echo

echo
echo *** Prepare NR9003 Assembly (Nathaniel Rochester Symbolic Assembler)
echo

; build NR9003 - Assembly 

echo *** Cross Assemble NR9003 Rebuild Source
echo *** NR9003_asm.txt -> _prog.txt and _assembly.txt
echo
!asm\Ibm701Assembler.exe Octionary/NR9003_asm.txt
if exist prog.txt goto ok1
echo 
echo *** Cross Assembling error
echo
goto end
:ok1
copy -q prog.txt    Octionary/NR9003_prog.txt
copy -q nr9003.txt  Octionary/NR9003_assembly.txt
del prog.txt
del nr9003.txt

set cdr skip_col_1-8
set cdr0 echolevel=1
set cdp0 echolevel=0
set lp0 wiring=nr9003

att -q cdr Octionary/NR9003_assembly.txt
att -q -n cdp deck_out.dck 
att -n -q mt0 mt0.tap
att -n -q mt1 mt1.tap

; assemble assembly with itself
load Octionary/NR9003_prog.txt
dep ic 200
go

if (IR == 000000) goto ok2
echo 
echo *** Assembly error
echo
goto end

:ok2

det all
echo

; prepare control card to be added at the end of deck being loaded
; this card indicated the start the loaded program (must have sign bit set)
carddeck  punch  card.dck              oct   0000 0000 0000 400310

; prepare assemble self loading auto start deck. contains 1) FEJ015, 2) assembly 
; binary program deck, 3) control card to start assembly prog at decimal 200 /octal 310
; Value 310 should be negative, so 400000 is aded to addres to set minus sign

carddeck  join   Octionary/FEJ015.dck  deck_out.dck  card.dck   as   Octionary/NR9003.dck
carddeck  ident  Octionary/NR9003.dck  as   "NR9003"    at 1

echo
carddeck list   Octionary/NR9003.dck
echo

del -q card.dck
del -q deck_out.dck 
del -q mt0.tap
del -q mt1.tap

echo
echo *** Prepare WHT014 Print Tape 
echo

; build NR9003 - WHT014 Print Tape 

echo *** Cross Assemble WHT014 Print Tape 
echo *** NR9003_asm.txt -> _prog.txt and _assembly.txt
echo
!asm\Ibm701Assembler.exe Octionary/WHT014_asm.txt
if exist prog.txt goto ok3
echo 
echo *** Cross Assembling error
echo
goto end
:ok3
copy -q prog.txt    Octionary/WHT014_prog.txt
copy -q nr9003.txt  Octionary/WHT014_assembly.txt
del prog.txt
del nr9003.txt

; WHT014 and WHT016 are not assembled
; to build and test them use build_Octionary.ini

:end
echo