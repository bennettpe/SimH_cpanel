
set console -n -q log=console.txt 
; set debug -n -q debug.txt

set cpu debug=cmd;data;detail
set cdr debug=cmd;data;detail
set cdp debug=cmd;data;detail
set lp debug=cmd;data;detail
set mt debug=cmd;data;detail;exp

at cpanel ../cpanel/ibm701.ini

; set cpanel scale=100
set cpanel scale=50
set cpanel option=ShowInfo
; set cpanel option=EarlyConsole
; set cpanel option=Console
set cpanel on
set cpanel list=<free>


set cpanel pos=170/70

; set cpu speed=max
 set cpu speed=1.0
; set cpu speed=0.1
; set cpu speed=0.01

set mt0 length=400


do run_HelloWorld.ini

do build_NAA_Assembler_from_listing.ini
do build_Octionary_from_listing.ini
do build_IBM_Binary_IO_from_listing.ini
 
 do build_NAA_Assembler.ini
 do build_Octionary.ini
 do build_IBM_Binary_IO.ini

set cpanel interactive

goto end

do run_NAA_Assembler.ini NAA_Assembler\naa.txt
carddeck list bin deck_out.dck
!copy deck_out.dck NAA_Assembler\hello.dck
del deck_out.dck 
carddeck list bin NAA_Assembler\hello.dck
goto end

cd NAA_Assembler
!..\asm\Ibm701Assembler.exe HelloWorld_asm.txt
if exist prog.txt goto ok1
echo 
echo *** Assembling error
echo
goto end
:ok1
load prog.txt
dep ic 0040
go 
goto end

:aaa
set cdr skip_col_1-8
cd NAA_Assembler
!..\asm\Ibm701Assembler.exe PunchSelfLoadingCards_asm.txt
load prog.txt
carddeck list bin hello.dck
att -q cdr hello.dck
att -q -n cdp aaa.dck

dep IC 0040
go
carddeck list bin aaa.dck

goto end





set cdr skip_col_1-8
cd NAA_Assembler
!..\asm\Ibm701Assembler.exe SelfLoadingCard_asm.txt
load prog.txt
carddeck list bin hello.dck
att -q cdr hello.dck

dep IC 0006
go

goto end

  
; do run_NR9003_Assembly.ini Octionary/MMA011_assembly.txt KEEPMT0


; cd Octionary
cd IBM_Binary_IO
goto so2 


  dep 1000 2000
  dep 1001 2001
  dep 1002 2002
  dep 1003 2003
  dep 1004 2004
  dep 1005 2005
  dep 1006 2006
  dep 1007 2007
  dep 1008 2008
  dep 1009 2009

  dep 1040 2040
  dep 1041 2041
  dep 1042 2042
  dep 1043 2043
  dep 1044 2044
  dep 1045 2045
  dep 1046 2046
  dep 1047 2047
  dep 1048 2048
  dep 1049 2049

  ; goto bp05

  att -q -n cdp deck_out.dck
  set debug -n -q debug.txt
;  load BP06_prog.txt
!..\asm\Ibm701Assembler.exe BP05_asm.txt
if exist prog.txt goto ok1
echo 
echo *** Assembling error
echo
goto end
:ok1
load prog.txt

  dep 0247 1000
  dep 0248 0060
  dep 0249 0998

  goto aaa

  :bp05
  carddeck  punch               deck_in.dck   oct    1111 1111 0004 1000 0001 0002 0003 0004
  att -q cdr deck_in.dck
  att -q -n cdp deck_out.dck
  set debug -n -q debug.txt
  load BP05_prog.txt

  dep 0000 258048
  dep 0001 040960
  dep 0004 000044
  dep 0009 000001
  dep 0028 258048
  dep 0045 000002
  dep 0046 000000

  
  dep 0047 1000
  dep 0048 0060
  dep 0049 0998

  :aaa

  dep IC 0060
  go

  carddeck list bin deck_out.dck

  dep 1000-1100 00

  att -q cdr deck_out.dck
  load SL05_prog.txt

  dep IC 0006
  go
  
  goto end

 ; load FEJ015_prog.txt
 ; dep IC 0035
 ; go

 ; goto end

 :so2
echo
!..\asm\Ibm701Assembler.exe SO2_asm.txt
if exist prog.txt goto ok1a
echo 
echo *** Assembling error
echo
goto end
:ok1a

load prog.txt

att -q cdr sl05_regional.txt
; set cdr IGNORE_COL_72-80
set cdr skip_col_1-8
set lp0 wiring=so2
att -q -n cdp deck_out.dck 

set debug -n -q debug.txt
dep ic 200
go 
carddeck list bin deck_out.dck
det all

copy deck_out.dck SL05.dck

att -q cdr bp05_regional.txt
att -q -n cdp deck_out.dck 

dep ic 200
go 
carddeck list bin deck_out.dck

det all
carddeck join SL05.dck deck_out.dck as deck_in.dck

att -q cdr deck_in.dck
switch "Load selector" to Card
switch "Address" to 0000
press "load"

goto end

; set cdr skip_col_1-8
set cdr0 echolevel=1
set cdp0 echolevel=3
set lp0 wiring=so2

; att -q cdr deck_in.txt
att -q cdr WHT016_assembly.txt
; att -q cdr nr9003.txt
att -q -n cdp deck_out.dck 
att -n -q mt0 mt0.tap
att -n -q mt1 mt1.tap

set debug -n -q debug.txt
           
dep ic 200
go

det all
carddeck list bin deck_out.dck 
goto end



















goto end


cd octionary

set debug -q -n debug.txt
set cdr skip_col_1-8

; goto  test_MMA011
goto build_NR9007

goto end

; call build_octionary
; call test_FEJ019
; cd ..



:build_NR9007
; load in mem octionary card with NR9007 source code using MMA011
carddeck  join  MMA011.dck    NR9007_oct.txt    as    deck_in.dck
att -q cdr deck_in.dck

switch "Load selector" to Card
switch "Address" to 0000

press "load"

det cdr
det cdp

; punch binary NR9007 card from mem using FEJ 019
carddeck  punch               card.dck   oct    0304 0307
carddeck  join  FEJ019.dck    card.dck    as    deck_in.dck
del -q card.dck
att -q cdr deck_in.dck
att -q -n cdp deck_out.dck

switch "Load selector" to Card
switch "Address" to 0000

press "load"

det cdr
det cdp

goto end

; add a FEJ 015 type control card after generated binary card
; this is NR9007 deck
carddeck  punch                card.dck   oct    0000 0000 0000 0305
carddeck  join  deck_out.dck   card.dck    as    NR9007.dck
carddeck  ident                NR9007.dck  as    "NR9007"    at 1   
del -q card.dck
del -q deck_in.dck
del -q deck_out.dck

goto end



















; cd IBM_Binary_IO
; call build_sl05
; call build_bp05
; cd ..

goto end

:build_sl05
load SL05_prog.txt
att cdp SL05.dck
call puch_one_bin_card
det cdp
return 

:build_bp05
load SL05_prog.txt
load BP05_prog.txt

att cdp BP05.dck
dep 0047   0050  ; R=start addr to punch
dep 0048     46  ; V=number of half words to punch (min allowed 2, must be even)
dep 0049   0050  ; R1=load addr 
dep ic 0050
go
det cdp
return













;build_WHT016
; Program WHT016 is intended to be loaded with FEJ015. 
; This means that WHT016 cards are not plain binary cards, but has a format that includes 
; checksum+load address. 
; The original build procedure is assembling WHT016 source directly to octionary binary
; cards with program NR9003 Assembly (unfortunatelly lost)

; So, some hacking is necessary to build WHT016.
; We could load WHT016 in memory and then use FEJ019 to create the deck, BUT FEJ019 ocupies 
; same addesses that WHT016, so this is not possible
; The solution is 1) Load WHT016 in memory. 2) move it to addr 7000. 3) load 

; save WHT016 using FEJ019 
; so WHT016 can be loaded with FEJ015
; create control card to save WHT016
;    A=first addr to punch (must be odd)=0066 octal
;    B=last addr to punch (must be even)=0273 octal
carddeck  punch              ctrl_card.dck   oct    0066    0273

carddeck  join  FEJ019B.dck   ctrl_card.dck    as    deck_in.dck

att -q cdr deck_in.dck
att -q -n cdp WHT016.dck

set cdp0 echolevel=3
load WHT016_prog.txt

set nodebug
set debug -q -n debug.txt

switch "Load selector" to Card
switch "Address" to oct 7000
press "load"

det cdr
det cdp

del -q deck_in.dck
del -q deck_out.dck

return


:test_MMA011
; carddeck  punch              deck_in.dck   text "         1007+123456      COMMENT"
; carddeck  punch              deck_in.dck   text "         7654-543210      COMMENT"
carddeck  punch              deck_in.dck     text "         1234-220019      COMMENT"
carddeck  list               deck_in.dck 

; load MMA011_prog.txt
load MMA000_prog.txt

set debug -q -n debug.txt

att -q cdr deck_in.dck
set cdr SKIP_COL_1-8
dep ic 0017
go

det cdr

del -q deck_in.dck

goto end 



:end