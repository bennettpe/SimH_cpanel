
; set console -n -q log=console.txt 
; set debug -n -q debug.txt
; set debug stdout

; set cpu debug=cmd;data;detail
; set cdr debug=cmd;data;detail
; set cdp debug=cmd;data;detail
; set lp debug=cmd;data;detail
; set mt debug=cmd;data;detail;exp

; params: %1 source card deck to assemble with NAA SpeedEx Assembler
;         %2 data card deck of source prog ( "NONE" if no data )
;         %3 input deck for assembled program (if empty, do not run assembled prog, "NONE" if no input deck needed)

; create assembler deck
;    1) Self Loading card
;    2) Assembler Binary cards program Part 1
;    3) Source code deck (sorted descending on cols 10 to 14)
;    4) Assembler Binary cards program Part 2

if exist "%1" goto naa_ok1

echo NAA Assembler Source file (%1) not found
goto end

:naa_ok1

set cdr skip_col_1-8
set lp0 wiring=SpeedEx
; set cdr0 echolevel=1

echo *** 
echo *** Run NAA SpeedEx Assembler 
echo *** Source file: %1
echo *** 

carddeck -q sort %1 desc 10 14 to deck_in.dck
carddeck -q join NAA_Assembler/SelfLoading.dck NAA_Assembler/SpeedEx_part1.dck deck_in.dck NAA_Assembler/SpeedEx_part2.dck AS deck_in.dck

att -q cdr deck_in.dck
att -q -n cdp deck_out.dck
att -q -n mt0 mt0.tap

switch "Load selector" to Card
switch "Address" to 0000
press "load"

det mt0
det cdr
det cdp

if (IR == 000006) goto naa_ok2
echo
echo *** Assembler Error
echo *** Last 3 read cards:
carddeck echolast 3
echo *** Sense lights:
ex IC
ex IR
ex SENSE_OUT

det all
del -q deck_out.dck

!pause
goto clean

:naa_ok2

; check if data to add to assembled program
if "%2" == "" goto clean
if "%2" == "NONE" goto naa_ok3
if exist "%2" goto naa_ok2b

echo NAA Assembler Data Input file (%2) not found
goto clean

:naa_ok2b

; create deck for punch data program
;    1) Self Loading card
;    2) Punch Data Cards program 
;    3) Data deck

echo *** 
echo *** Run Punch Program Data 
echo *** NAA Data file: %2
echo *** 

; no need to add selfloader, because it is stills in mem. Just press GO
; to continue from addr 0006 and load again. If SelfLoader card is read again, 
; it will overwrite addr 0036-0040 (dec) (the adsolute trasition area) that contains
; the data region address set by previous assemble and needed by Punch Data cards
; program as input

carddeck -q join NAA_Assembler/PunchDataCards.dck %2 AS deck_in.dck

att -q cdr deck_in.dck
att -q -n cdp deck_data.dck

go

det cdr
det cdp 

if (IR == 000006) goto naa_ok3
echo
echo *** Punch Data card Error
ex IC
ex IR
ex SENSE_OUT
goto clean

:naa_ok3

; Put data deck in front of assembled binary program deck

echo *** 
echo *** Prepare assembled program binary deck
echo *** ready to be loaded with Self Loading card
echo *** 

if "%2" == "NONE" goto naa_ok3b
carddeck -q join   deck_data.dck deck_out.dck as deck_out.dck
:naa_ok3b

; put identification on unused columns 1-8 of binary card
carddeck -q ident  deck_out.dck as "NAA001" at 1 count at 4 6

if "%3" == "" goto clean

carddeck -q join NAA_Assembler/SelfLoading.dck deck_out.dck as deck_in.dck

if "%3" == "NONE" goto naa_ok4

; add program input deck if any
carddeck -q join deck_in.dck %3 as deck_in.dck

:naa_ok4

att -q cdr deck_in.dck
att -q -n cdp deck_out.dck

echo
echo *** 
echo *** Run assembled program 
echo *** 

press "Printer Carriage"
set lp0 wiring=none

switch "Load selector" to Card
switch "Address" to 0000
press "load"

det cdr
det cdp

echo
echo *** 
echo *** Run finished
echo *** 

:clean

del -q mt0.tap
del -q deck_data.dck
del -q deck_in.dck

press "Printer Carriage"

:end
echo

