set console -q -n log=log.txt 

; set debug -n -q debug.txt
;5set debug stdout
; set cpu hist=1000

; set mta debug=cmd;detail;exp;pos;data
; set cdr debug=cmd;detail;card;data
; set cdp debug=cmd;detail;card
; set lpr debug=cmd;detail
; set inq debug=cmd;detail;data
; set cpu debug=cmd;detail;exp;data;vma;inst;trace;cdata
; set da  debug=cmd;detail
; set dc  debug=cmd;detail

send after=1000

echo
echo ***
echo *** IBM DOS/360 R26.2 (1975) 
echo *** sysgen on 2314 discs
echo ***
echo

; Takes 2.90h (2h54min) whith SET CPU REALTIME 
; Takes 1.03h (1h02min) with SET CPU FAST
; Takes 45min without cpanel

set cpu 256k timer prot univ  

set da dev=130 model=2311
set db dev=190 model=2314
set mta0 dev=280
set cdr0 dev=00c
set cdp0 dev=00d
set lpr0 dev=00e
set inq0 dev=01f

att mta0 -q -r -f aws distrib/k360n-ma108a.aws
att mta1 -q -r -f aws distrib/k360n-ma110a.aws

att lpr -q -n printer.txt
att cdp -q -n deck_out.dck

; set lpr echo

; This script and the used JCLs are taken from excelent DOS/360 installation 
; instructions at https://sites.google.com/site/dos360install/home

; detect if a stage has being previously saved to restart 
; at this point. The system generation needs 2GB of host 
; hard disc free space to hold the restart dasd image files

if exist dasd/sv_POWER.2311.130.dsk goto verify
if exist dasd/sv_SYSGEN.2311.130.dsk goto power
if exist dasd/sv_MIGRATE.2311.130.dsk goto sysgen
if exist dasd/sv_DISTRIB.2311.130.dsk goto migrate

; Distrib stage
:distrib

echo
echo ***
echo *** DISTRIB01: Initialize 2311 RES11A on 130
echo ***            Initialize 2311 RES11B on 131
echo ***            Initialize 2311 RES11C on 132
echo ***
echo

; idlestop=1 to stop if CPU is stopped waiting interrupt from device
set -q idlestop=1
boot mta0

att da0 -q -n -i dasd/new.2311.130.dsk
att da1 -q -n -i dasd/new.2311.131.dsk
att da2 -q -n -i dasd/new.2311.132.dsk
att db0 -q -n -i dasd/new.2314.dosres.dsk
att db1 -q -n -i dasd/new.2314.spool1.dsk
att db2 -q -n -i dasd/new.2314.wrk14a.dsk
att db3 -q -n -i dasd/new.2314.wrk14b.dsk
echo

; attach first job to exec
; should use -e (simulates pressing End of Job button on card read)
; to avoid unit check when reading but no cards left in input hopper

att cdr -q -e jcl/sysgen_distrib01.jcl
go

echo
echo ***
echo *** DISTRIB02: restore distribution tape one to RES11A and RES11B
echo ***
echo

; restore distribution tape one to RES11A and RES11B
; do not rewind! should ipl to restore util that follows init disk utility on tape

set -q idlestop=1
boot mta0
set idlestop=0
att cdr -q -e jcl/sysgen_distrib02.jcl

go until "4307A"
; after message "R 43 ..", and "I " prompt appears
; Type 22 <CR> then <^X> to send an exteral interrupt to cpu 
go until "I"
send "22\r"
go until "\n"
send "\030"
go until "4308A"
go until "I"
send "22\r"
go until "\n"
send "\030"
go until "4307A"
go until "I"
send "22\r"
go until "\n"
send "\030"
set -q idlestop=1
go

echo
echo ***
echo *** DISTRIB03: Initialize 2314 DOSRES on 190
echo ***            Initialize 2314 SPOOL1 on 191
echo ***            Initialize 2314 WRK14A on 192
echo ***            Initialize 2314 WRK14B on 193
echo ***
echo

boot mta1
att cdr -q -e jcl/sysgen_distrib03.jcl
go

echo
echo ***
echo *** DISTRIB04: restore distribution tape to RES11C
echo ***
echo

; restore distribution tape to RES11C
; do not rewind! should ipl to restore util that follows init disk utility on tape

boot mta1
set idlestop=0
att cdr -q -e jcl/sysgen_distrib04.jcl

go until "4307A"
go until "I"
send "22\r"
go until "\n"
send "\030"
go until "4307A"
go until "I"
send "22\r"
go until "\n"
send "\030"
go until "4307A"
go until "I"
send "22\r"
go until "\n"
send "\030"
set -q idlestop=1
go

call save_disc sv_DISTRIB

; Migrate stage
:migrate

call load_disc sv_DISTRIB

echo
echo ***
echo *** MIGRATE01: Unload Libraries From the Distribution System
echo ***
echo

att mta0 -q -n tape/migrate-libs.tap

set -q idlestop=1
boot da2
set idlestop=0

att cdr -q -e jcl/sysgen_migrate01_ipl.jcl
go until "1C00A"
go until "I"

att cdr -q -e jcl/sysgen_migrate01d.jcl
send "\r"
go until "1C00A"
go until "I"

det mta0

echo
echo
echo ***
echo *** MIGRATE02: Create Sysres on 2314 drive DOSRES
echo ***

att mta0 -q -r tape/migrate-libs.tap

att cdr -q -e jcl/sysgen_migrate02d.jcl
send "\r"
go until "1C00A"
go until "I"

echo
echo
echo ***
echo *** MIGRATE03: Create and Load Starter System Residence and Private Libraries
echo ***
echo

set -q idlestop=1
boot db0
set idlestop=0
att cdr -q -e jcl/sysgen_migrate03_ipl.jcl
go until "1C00A"
go until "I"

att cdr -q -e jcl/sysgen_migrate03d.jcl
send "\r"
go until "1C00A"
go until "I"

det mta0
del -q tape/migrate-libs.tap

call save_disc sv_MIGRATE

; Sysgen stage
:sysgen

call load_disc sv_MIGRATE

echo
echo
echo ***
echo *** SYSGEN01: Edit and assemble the supervisor
echo ***
echo

att mta0 -q -n tape/supvr-objdeck.tap

set -q idlestop=1
boot db0
set idlestop=0
att cdr -q -e jcl/sysgen_sg01_ipl.jcl
go until "1C00A"
go until "I"

att cdr -q -e jcl/sysgen_sg01d.jcl
send "\r"
go until "PAUSE"
go until "\nI"
send "\r"
go until "1C00A"
go until "I"

det mta0

echo
echo
echo ***
echo *** SYSGEN02: Link new supervisor, CSERV, RSERV, CORGZ, $JOBACCT, ASSEMBLY
echo ***

att mta0 -q -r tape/supvr-objdeck.tap

att cdr -q -e jcl/sysgen_sg02.jcl
send "\r"
go until "PAUSE"
go until "\nI"
send "\r"
go until "1C90D"
go until "RESPONSE REQUIRED"
go until "I"
send "IGNORE\r"
go until "1C00A"
go until "I"

echo
echo
echo ***
echo *** SYSGEN03: IPL new supervisor, link system components and utilities
echo ***
echo

set -q idlestop=1
boot db0
set idlestop=0
att cdr -q -e jcl/sysgen_sg03_ipl.jcl
go until "BG  1C00A"
go until "I"

att cdr -q -e jcl/sysgen_sg03d.jcl
send "\r"
go until "BG  1C00A"
go until "I"

echo
echo
echo ***
echo *** SYSGEN03A: Assemble/Catalog ZAPRELO 
echo ***

att cdr -q -e jcl/sysgen_sg03da.jcl
send "\r"
go until "BG  1C00A"
go until "I"

echo
echo
echo ***
echo *** SYSGEN03B: Patch Cobol module ILACBL51
echo ***

att cdr -q -e jcl/sysgen_sg03db.jcl
send "\r"
go until "BG  1C00A"
go until "I"

echo
echo
echo ***
echo *** SYSGEN04: Link Sort/Merge programs
echo ***

att cdr -q -e jcl/sysgen_sg04.jcl
send "\r"
go until "BG  1C00A"
go until "I"

echo
echo
echo ***
echo *** SYSGEN05: Rename PL/I components
echo ***

att cdr -q -e jcl/sysgen_sg05.jcl
send "\r"
go until "BG  1C00A"
go until "I"

echo
echo
echo ***
echo *** SYSGEN06: Create the F2 Core Image Library
echo ***

att cdr -q -e jcl/sysgen_sg06.jcl
send "\r"
go until "BG  1C00A"
go until "I"

echo
echo
echo ***
echo *** SYSGEN07: Link compilers
echo ***

att cdr -q -e jcl/sysgen_sg07.jcl
send "\r"
go until "BG  1C00A"
go until "I"

echo
echo
echo ***
echo *** SYSGEN08: Assemble and link the DOS DITTO Utility
echo ***

att cdr -q -e jcl/sysgen_sg08.jcl
send "\r"
go until "BG  1C00A"
go until "I"

echo
echo
echo ***
echo *** SYSGEN09: Correct ISAM modules
echo ***

att cdr -q -e jcl/sysgen_sg09.jcl
send "\r"
go until "BG  1C00A"
go until "I"

echo
echo
echo ***
echo *** SYSGEN90: Condense All Libraries
echo ***

att cdr -q -e jcl/sysgen_sg90.jcl
send "\r"
go until "BG  1C00A"
go until "I"

det mta0 
del -q tape/supvr-objdeck.tap

call save_disc sv_SYSGEN

; POWER Stage
:power

call load_disc sv_SYSGEN

echo
echo
echo ***
echo *** POWER01: deblock POWER II tape and catalog source and relocatable modules
echo ***
echo 

send after=50000

att mta1 -q -n tape/power-deblock.tap
att mta0 -q -f aws distrib/ibm.360d052006.dos.power.II.with.rje.opt2.v4m1.aws

set -q idlestop=1
boot db0
set idlestop=0
att cdr -q -e jcl/sysgen_spower_ipl.jcl
go until "BG  1C00A"
go until "I"

att cdr -q -e jcl/sysgen_spower01.jcl
send "\r"
go until "8001D IS IT EOF"
go until "I "
send "Y\r"
go until "BG  1C00A"
go until "I"

echo
echo
echo ***
echo *** POWER02: Assemble and link the POWER II phase
echo ***

det mta0
det mta1

att cdr -q -e jcl/sysgen_spower02.jcl
send "\r"
go until "BG  1C00A"
go until "I"

echo
echo
echo ***
echo *** POWER03: Link remaining POWER phases
echo ***

att cdr -q -e jcl/sysgen_spower03.jcl
send "\r"
go until "BG  1C00A"
go until "\n"

echo
echo ***
echo *** POWER04: Define F1 Standard Labels for POWER
echo ***
echo

go until "I "
send "assgn syslst,ua\r"
go until "I "
send "assgn sysin,ua\r"
go until "I "
send "stop\r"
go until "\n"

send "\033"
go until "AR  1I60A"
go until "AR  "
send "batch f1\r"
go until "F1  I"
send "assgn sysin,x'00c'\r"
go until "F1  I"
att cdr -q -e jcl/sysgen_spower04.jcl
send "\r"
go until "PAUSE"
go until "F1  I"
send "\r"
go until "F1  1C00A"
go until "F1  I"
send "unbatch\r"
go until "\n"

send "\033"
go until "AR  1I60A"
go until "AR  "
send "start bg\r"
go until "BG  I"
send "assgn sysin,x'00c'\r"
go until "BG  I"

echo
echo
echo ***
echo *** POWER05: Load job stream for POWER to disk
echo ***

att cdr -q -e jcl/sysgen_spower05.jcl
send "\r"
go until "BG  1C00A"
go until "I"
send "stop\r"
go until "\n"

echo
echo ***
echo *** POWER06: Start POWER, unit record devices, and partitions BG and F2
echo ***
echo

send "\033"
go until "AR  1I60A"
go until "AR  "
send "batch f1\r"
go until "F1  I"
send "assgn sysin,x'191'\r"
go until "F1  I"
send "\r"
go until "FORMAT Q'S ?"
send "D\r"
go until "$OPC15I 17 DATA BUFFERS"
go until "\n"

send "\033"
go until "AR  1I60A"
go until "AR  "
send "s prt,00e\r"
go until "\n"
send "\033"
go until "AR  1I60A"
go until "AR  "
send "s pun,00d\r"
go until "\n"
send "\033"
go until "AR  1I60A"
go until "AR  "

att cdr -q -e jcl/sysgen_spower06.jcl

send "s rdr,00c\r"
go until "\n"

send "\033"
go until "AR  1I60A"
go until "AR  I"
send "start bg\r"
go until "BG  I"

; now press enter on console to start execution of
; partition bg job on alreay read deck

send "\r"
go until "EOJ STARTBG"
go until "BG WAITING FOR WORK"
go until "\n"

send "\033"
go until "AR  1I60A"
go until "AR  I"
send "batch f2\r"
go until "F2  I"

; now press enter on console to start execution of
; partition f2 job on alreay read deck

send "\r"
go until "F2 WAITING FOR WORK"
go until "\n"

echo
echo ***
echo *** POWER07: Link non-self-relocating utilities for F2's use
echo ***
echo

att cdr -q -e jcl/sysgen_spower07.jcl
go until "F2 WAITING FOR WORK"
go until "\n"

echo
echo ***
echo *** POWER08: Link Sort/Merge programs for F2's use
echo ***
echo

att cdr -q -e jcl/sysgen_spower08.jcl
go until "F2 WAITING FOR WORK"
go until "\n"

echo
echo ***
echo *** POWER09:  Link Compilers and Assembler For Use In F2
echo ***
echo

att cdr -q -e jcl/sysgen_spower09.jcl
go until "F2 WAITING FOR WORK"
go until "\n"

echo
echo ***
echo *** POWER99: Shut down POWER
echo ***
echo

send "\033"
go until "AR  1I60A"
go until "AR  "
send "e\r"
go until "1C10A  PLEASE ASSIGN SYSRDR"
go until "  I "
send "unbatch\r"
go until "1C10A  PLEASE ASSIGN SYSRDR"
go until "  I "
send "unbatch\r"
go until "1C10A  PLEASE ASSIGN SYSRDR"
go until "  I "
send "unbatch\r"
go until "BG  I"
send "assgn sysin,x'00c'\r"
go until "BG  I"
send "assgn syspch,x'00d'\r"
go until "BG  I"
send "assgn syslst,x'00e'\r"
go until "BG  I"

del -q tape/power-deblock.tap

echo
echo
echo ***
echo *** Copy production disc image files 
echo ***
echo

call save_disc dos360

echo
echo ***
echo *** Test generated system
echo ***
echo

call load_disc dos360

call save_disc sv_POWER

; VERIFY Stage
:verify

call load_disc sv_POWER

send after=50000

echo
echo ***
echo *** VERIFY00: Start / terminate DOS/360 and POWER for normal use
echo ***
echo

set -q idlestop=1
boot db0
set idlestop=0

att cdr -q -e jcl/DOS360_ipl.jcl
go until "BG  1C00A"
go until "BG  "

send "stop\r"
go until "\n"
; press REQUEST key on console (the ESC key) to 
; bring the AR prompt
send "\033"

go until "AR  1I60A"
go until "AR  "
send "batch f1\r"
go until "F1  I"
send "assgn sysin,x'191'\r"
go until "F1  I"
send "\r"
go until "FORMAT Q'S ?"
send "\r"
go until "$OPC15I 17 DATA BUFFERS"

; request AR prompt
send "\033"
go until "AR  1I60A"
go until "AR  I"
send "log\r"
go until "AR  I"
send "map\r"
go until "AR  I"
send "s prt,00e\r"
go until "\n"

; request AR prompt
send "\033"
go until "AR  1I60A"
go until "AR  I"
send "s pun,00d\r"
go until "\n"

; put the job on card reader so it can be read by spool.
; later start bg command will starts its execution

att cdr -q -e jcl/sysgen_ver00_ipl2.jcl

; request AR prompt
send "\033"
go until "AR  1I60A"
go until "AR  I"
send "s rdr,00c\r"
go until "\n"

; request AR prompt
send "\033"
go until "AR  1I60A"
go until "AR  I"
send "start bg\r"
go until "BG  I"

; now press enter on console to start execution of
; partition bg job on alreay read deck

send "\r"

; the following messages can arrive on any order depending
; on how fast commands are typed, send command delay or minor 
; changes in simulator. We just need them to arrive

noexpect
set env -a msg=0

expect "EOJ STARTBG"         set env -a msg=msg|1; continue
expect "BG WAITING FOR WORK" set env -a msg=msg|2; continue
expect "XXR00C CLOSED"       set env -a msg=msg|4; continue

:wait_for_msg1
go until "\n"
if (msg!=7) goto wait_for_msg1
noexpect

; request AR prompt
send "\033"
go until "AR  1I60A"
go until "AR  I"
send "batch f2\r"
go until "F2  I"

; now press enter on console to start execution of
; partition f2 job on alreay read deck

send "\r"
go until "F2 WAITING FOR WORK"

send "\033"
go until "AR  1I60A"
go until "AR  "
send "map\r"
go until "AR  I"

echo
echo
echo ***
echo *** VERIFY01: Test COBOL D and ANS COBOL Compile and Execute
echo ***

; Verify COBOL D
att cdr -q -e jcl/sysgen_ver01_vercob01.jcl
send "\r"
go until "BG WAITING FOR WORK"
go until "\n"

; Verify ANS COBOL
att cdr -q -e jcl/sysgen_ver01_vercob02.jcl
go until "BG WAITING FOR WORK"
go until "\n"

echo
echo ***
echo *** VERIFY02: Test Basic FORTRAN and FORTRAN IV Compile and Execute
echo ***
echo

; Verify Verify Basic FORTRAN
att cdr -q -e jcl/sysgen_ver02_verfor01.jcl
go until "BG WAITING FOR WORK"
go until "\n"

; Verify FORTRAN IV
att cdr -q -e jcl/sysgen_ver02_verfor02.jcl
go until "BG WAITING FOR WORK"
go until "\n"

echo
echo ***
echo *** VERIFY03: Test PL/I Compile and Execute
echo ***
echo

; Verify PL/I
att cdr -q -e jcl/sysgen_ver03_verpli01.jcl
go until "BG WAITING FOR WORK"
go until "\n"

echo
echo ***
echo *** VERIFY04:  Test RPG Compile and Execute
echo ***
echo

; Verify RPG
att cdr -q -e jcl/sysgen_ver04_verrpg01.jcl
go until "BG WAITING FOR WORK"
go until "\n"

echo
echo ***
echo *** VERIFY05: Test Assembler, Sort/Merge, Ditto, and BG and F2 operations
echo ***
echo

att cdr -q -e jcl/sysgen_ver05_verasm02.jcl
go until "BG WAITING FOR WORK"
go until "\n"

echo
echo ***
echo *** sysgen finished
echo ***

det all

call del_disc new
call del_disc sv_DISTRIB
call del_disc sv_MIGRATE
call del_disc sv_SYSGEN
call del_disc sv_POWER

; discard 2311 disc as now DOS is resident in 2314 discs

del -q  dasd/dos360.2311.130.dsk  
del -q  dasd/dos360.2311.131.dsk  
del -q  dasd/dos360.2311.132.dsk  
del -q  deck_out.dck

echo
echo *** Press Enter to quit
set env -p " " a
echo

echo
quit
goto end

:save_disc

det da0 
det da1 
det da2 
det db0 
det db1 
det db2 
det db3 

copy -q  dasd/new.2311.130.dsk  dasd/%1.2311.130.dsk
copy -q  dasd/new.2311.131.dsk  dasd/%1.2311.131.dsk
copy -q  dasd/new.2311.132.dsk  dasd/%1.2311.132.dsk

copy -q  dasd/new.2314.dosres.dsk  dasd/%1.2314.dosres.dsk
copy -q  dasd/new.2314.spool1.dsk  dasd/%1.2314.spool1.dsk
copy -q  dasd/new.2314.wrk14a.dsk  dasd/%1.2314.wrk14a.dsk
copy -q  dasd/new.2314.wrk14b.dsk  dasd/%1.2314.wrk14b.dsk

return

:load_disc

copy -q  dasd/%1.2311.130.dsk    dasd/new.2311.130.dsk  
copy -q  dasd/%1.2311.131.dsk    dasd/new.2311.131.dsk  
copy -q  dasd/%1.2311.132.dsk    dasd/new.2311.132.dsk  

copy -q  dasd/%1.2314.dosres.dsk    dasd/new.2314.dosres.dsk  
copy -q  dasd/%1.2314.spool1.dsk    dasd/new.2314.spool1.dsk  
copy -q  dasd/%1.2314.wrk14a.dsk    dasd/new.2314.wrk14a.dsk  
copy -q  dasd/%1.2314.wrk14b.dsk    dasd/new.2314.wrk14b.dsk  

att da0 -q dasd/new.2311.130.dsk
att da1 -q dasd/new.2311.131.dsk
att da2 -q dasd/new.2311.132.dsk
att db0 -q dasd/new.2314.dosres.dsk
att db1 -q dasd/new.2314.spool1.dsk
att db2 -q dasd/new.2314.wrk14a.dsk
att db3 -q dasd/new.2314.wrk14b.dsk

return

:del_disc

del -q  dasd/%1.2311.130.dsk    
del -q  dasd/%1.2311.131.dsk    
del -q  dasd/%1.2311.132.dsk    

del -q  dasd/%1.2314.dosres.dsk    
del -q  dasd/%1.2314.spool1.dsk    
del -q  dasd/%1.2314.wrk14a.dsk    
del -q  dasd/%1.2314.wrk14b.dsk    

return




:end
