
set console -q -n log=log.txt 
set debug -q -n debug.txt

echo
echo *********************************** 
echo Build PERT System for NORC
echo 

set cpu 2k

echo
echo *** assemble source programs
echo

call assemble PERT_Run02 conversion
call assemble PERT_Run02 print_tr
call assemble PERT_Run03 sort_merge
call assemble PERT_Run06 print_ev
call assemble PERT_Run09 output_sort
call assemble PERT_Run10 output_edit

echo
echo *** create program tape
echo

att -q -n mt2 PERT_program.tap
switch "Tape address 02" to MT2

; save program %2 to tape with identification number %1
call saveprog 3931 ../PERT_Run02/print_tr_prog.txt
call saveprog 3932 ../PERT_Run06/print_ev_prog.txt
call saveprog 3941 ../PERT_Run02/conversion_prog.txt
call saveprog 3942 ../PERT_Run03/sort_merge_prog.txt
call saveprog 3943 ../PERT_Run09/output_sort_prog.txt
call saveprog 3944 ../PERT_Run10/output_edit_prog.txt
call saveprog 3951 ../PERT_Run06/update_prog.txt
call saveprog 3952 ../PERT_Run07/sequence_prog.txt
call saveprog 3953 ../PERT_Run08/compute_prog.txt

echo
echo *** use ctc to create an empty active event tape 
echo

punch 1word ../PERT_Run06/card_create_dummy_event_tape_mt3.txt to deck_in.dck
ctc card deck_in.dck to tape empty_events_mt3.tap

det all
del -q prog.txt
del -q deck_in.dck

echo
echo *** use ctc to dump program tape to cards
echo

ctc tape PERT_program.tap to card PERT_program.dck
print 4words PERT_program.dck to PERT_program.txt

echo
echo *** Now performs Runs with sample data checking expected output
echo

cd ..

cd PERT_Run01
do Sample_Run01.ini
cd ..

cd PERT_Run06
do Sample_Run06.ini
cd ..

cd PERT_Run07
do Sample_Run07.ini
cd ..

cd PERT_Run08
do Sample_Run08.ini
cd ..

cd build

echo
echo Exec Build PERT Ok
echo ****************************** 
echo 

goto end

:assemble
echo Assemble %1 %2
del -q prog.txt
!..\..\asm\NorcAssembler ..\%1\%2_src.txt
if exist prog.txt goto aok1
echo
echo ERROR! Assemble error, cannot build
!pause
goto end
:aok1
copy -q prog.txt ..\%1\%2_prog.txt
echo Done
return


:saveprog %1 %2
; save program %2 to tape with identification number %1

set cpu crtmemclear 
; this is the program loader 
dep 0002 09 94 0008 0000 0000   load main prog to run on next tape block
dep 0003 00 68 0000 0000 0006   if tape check goto 0006
dep 0004 00 60 0000 0000 0008   start prog at addr 0008
dep 0005 00 00 0000 0000 0000
dep 0006 00 61 0000 0000 0001   stop because load error
dep 0007 00 00 0000 0000 %1     problem identification number

dep 0008 02 90 0002 0007 %1     save program loader. Problem identification is the block number   
dep 0009 00 61 0000 0000 0000   then strop
dep V 0008
go

; now load in memory main program 
set cpu crtmemclear 
load %2

; and save it on tape as continuation of loader 
; V contains the highest addr loaded

; set hi with V's value, 4 digits, padded with zeroes on left 
set env -a hi=V
if (v<10)   set env hi=0%hi%
if (v<100)  set env hi=0%hi%
if (v<1000) set env hi=0%hi%

dep 0001 02 91 0008 %hi% %1     save main program to tape
dep 0002 00 61 0000 0000 0000   then stop 
dep V 0001
go

echo saved on program tape with problem identification %1
return


:end
