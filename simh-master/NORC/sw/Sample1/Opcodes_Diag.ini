
set console -q -n log=log.txt 
set debug -q -n debug.txt

goto start

:error
echo
echo ERROR! Unexpected result from opcode
!pause
goto end

:error2
echo
echo ERROR! NSUBOP is not 0 nor 1 at start of instruction
!pause
goto end

:error3
echo
echo ERROR! REG1 != REG2 at the end of instruction
ex reg1
ex reg2
!pause
goto end

:exec
dep v 1000
:exec0
if (nsubop==1) goto exec1
if (nsubop!=0) goto error2
; step on instructions mode
step 
if (reg1!=reg2) goto error3
return
:exec1
; step on each suboperation
step
if (nsubop!=1) goto exec1
return

:start

echo *** 
echo *** NORC instructions diagnostic
echo *** 

echo
echo ****************************** 
echo *** 40 - Meta Add
echo *** 

dep 1000  00 40 1001 1002 1003
dep 1001  1
dep 1002  2

call exec

if (reg1 != 3) goto error
if (reg2 != 3) goto error

echo
echo ****************************** 
echo *** 41 - Meta Sub
echo *** 

dep 1000  00 41 1001 1002 1003
dep 1001  3
dep 1002  2

call exec

if (reg1 != 1) goto error
if (reg2 != 1) goto error

echo
echo ****************************** 
echo *** 57 - Clear M4 M6 M8 then add R S T to M4 M6 M8
echo *** 

dep 1000  00 57 1111 1222 1333

call exec

if (M4 != 1111) goto error
if (M6 != 1222) goto error
if (M8 != 1333) goto error

echo
echo ****************************** 
echo *** 56 - Clear M6 M8 then add R S T to M4 M6 M8
echo *** 

dep 1000  00 56 1000 1222 1333

call exec

if (M4 != 2111) goto error
if (M6 != 1222) goto error
if (M8 != 1333) goto error

echo
echo ****************************** 
echo *** 55 - Clear M4 M8 then add R S T to M4 M6 M8
echo *** 

dep 1000  00 55 1111 1000 1333

call exec

if (M4 != 1111) goto error
if (M6 != 2222) goto error
if (M8 != 1333) goto error

echo
echo ****************************** 
echo *** 54 - Clear M8 then add R S T to M4 M6 M8
echo *** 

dep 1000  00 54 1110 1000 1333

call exec

if (M4 != 2221) goto error
if (M6 != 3222) goto error
if (M8 != 1333) goto error

echo
echo ****************************** 
echo *** 53 - Clear M4 M6 then add R S T to M4 M6 M8
echo *** 

dep 1000  00 53 1110 1000 1333

call exec

if (M4 != 1110) goto error
if (M6 != 1000) goto error
if (M8 != 2666) goto error

echo
echo ****************************** 
echo *** 52 - Clear M6 then add R S T to M4 M6 M8
echo *** 

dep 1000  00 52 9999 1000 9900

call exec

if (M4 != 1109) goto error
if (M6 != 1000) goto error
if (M8 != 2566) goto error

echo
echo ****************************** 
echo *** 51 - Clear M4 then add R S T to M4 M6 M8
echo *** 

dep 1000  00 51 9999 9000 9900

call exec

if (M4 != 9999) goto error
if (M6 != 0) goto error
if (M8 != 2466) goto error

echo
echo ****************************** 
echo *** 50 - Add R S T to M4 M6 M8
echo *** 

dep 1000  00 50 9999 9999 9999

call exec

if (M4 != 9998) goto error
if (M6 != 9999) goto error
if (M8 != 2465) goto error

echo
echo ****************************** 
echo *** 58 - M4+R to M4, if M4 = S continue next instr, else (M4!=S) transfer to T
echo ***      transfer taken
echo *** 

dep M4 0002
dep 1000  00 58 0001 0010 1002

call exec

if (M4 != 3) goto error
if (V  != 1002) goto error

echo
echo ****************************** 
echo *** 58 - M4+R to M4, if M4 = S continue next instr, else (M4!=S) transfer to T
echo ***      transfer not taken
echo *** 

dep M4 0009
dep 1000  00 58 0001 0010 1002

call exec

if (M4 != 10) goto error
if (V  != 1001) goto error

echo
echo ****************************** 
echo *** 60 - Shift C(R) on P, move result to S, transfer to T
echo ***      read, write, no shift, transfer taken
echo *** 

dep 1001 0009
dep 1000  00 60 1001 1002 1003

call exec

if (REG1 != 9) goto error
if (V  != 1003) goto error

echo
echo ****************************** 
echo *** 60 - Shift C(R) on P, move result to S, transfer to T
echo ***      no read, write, no shift, no transfer 
echo *** 

dep reg1 0123
dep 1000  00 60 0000 1002 0000

call exec

if (REG1 != 123) goto error
if (V  != 1001) goto error

echo
echo ****************************** 
echo *** 60 - Shift C(R) on P, move result to S, transfer to T
echo ***      read, no write, shift left 2, no transfer 
echo *** 

dep 1002 0333
dep 1000  98 60 1002 0000 0000

call exec

if (REG1 != 33300) goto error
if (V  != 1001) goto error

echo
echo ****************************** 
echo *** 60 - Shift C(R) on P, move result to S, transfer to T
echo ***      no read, no write, shift right 2, no transfer 
echo *** 

dep REG1 44412
dep 1000  02 60 0000 0000 0000

call exec

if (REG1 != 444) goto error
if (V  != 1001) goto error


echo
echo ****************************** 
echo *** 61 - Shift C(R) on P, move result to S, transfer to T, stop
echo *** 

dep REG1 123
dep 1000  00 61 0000 0000 0000

call exec

ex V
ex REG1

if (REG1 != 123) goto error
if (V  != 1001) goto error


echo
echo ****************************** 
echo *** 62 - Shift C(R) on P, move result to S, transfer to T, round
echo ***      zero shift -> no round
echo *** 

dep REG1 1234
dep REG2    1
dep 1000  00 62 0000 0000 0000

call exec

if (REG1 != 1234) goto error

echo
echo ****************************** 
echo *** 62 - Shift C(R) on P, move result to S, transfer to T, round
echo ***      1 right shift -> 123/4 -> reg1 is odd -> no round
echo *** 

dep REG1 1234
dep REG2    1
dep 1000  01 62 0000 0000 0000

call exec

if (REG1 != 123) goto error

echo
echo ****************************** 
echo *** 62 - Shift C(R) on P, move result to S, transfer to T, round
echo ***      2 right shift -> 12/34 -> reg1=12 is even, reg2=34 nonzero -> round
echo *** 

dep REG1 1234
dep REG2    1
dep 1000  02 62 0000 0000 0000

call exec

if (REG1 != 13) goto error


echo
echo ****************************** 
echo *** 64 - if OV=0 transfer to next instr, else as instr 60
echo ***      OV=0 do not transfer
echo *** 

dep OV 0
dep 1000  00 64 0000 0000 1002

call exec

if (V != 1001) goto error

echo
echo ****************************** 
echo *** 64 - if OV=0 transfer to next instr, else as instr 60
echo ***      OV=1 transfer taken
echo *** 

dep OV 1
dep 1000  00 64 0000 0000 1002

call exec

if (V != 1002) goto error

echo
echo ****************************** 
echo *** 65 - if Adjusted Index=0 transfer to next instr, else as instr 60
echo ***      IA=0 do not transfer
echo *** 

dep IA 0
dep 1000  00 65 0000 0000 1002

call exec

if (V != 1001) goto error

echo
echo ****************************** 
echo *** 65 - if Adjusted Index=0 transfer to next instr, else as instr 60
echo ***      IA=1 transfer taken
echo *** 

dep IA 1
dep 1000  00 65 0000 0000 1002

call exec

if (V != 1002) goto error

echo
echo ****************************** 
echo *** 66 - if Zero result=0 transfer to next instr, else as instr 60
echo ***      ZR=0 do not transfer
echo *** 

dep ZR 0
dep 1000  00 66 0000 0000 1002

call exec

if (V != 1001) goto error

echo
echo ****************************** 
echo *** 66 - if Zero result=0 transfer to next instr, else as instr 60
echo ***      ZR=1 transfer taken
echo *** 

dep ZR 1
dep 1000  00 66 0000 0000 1002

call exec

if (V != 1002) goto error

echo
echo ****************************** 
echo *** 67 - if End of file=0 transfer to next instr, else as instr 60
echo ***      TEOF=0 do not transfer
echo *** 

dep TEOF 0
dep 1000  00 67 0000 0000 1002

call exec

if (V != 1001) goto error

echo
echo ****************************** 
echo *** 67 - if End of file=0 transfer to next instr, else as instr 60
echo ***      TEOF=1 transfer taken
echo *** 

dep TEOF 1
dep 1000  00 67 0000 0000 1002

call exec

if (V != 1002) goto error

echo
echo ****************************** 
echo *** 68 - if Tape Check failure=0 transfer to next instr, else as instr 60
echo ***      TCHK=0 do not transfer
echo *** 

dep TCHK 0
dep 1000  00 68 0000 0000 1002

call exec

if (V != 1001) goto error

echo
echo ****************************** 
echo *** 68 - if Tape Check failure=0 transfer to next instr, else as instr 60
echo ***      TCHK=1 transfer taken
echo *** 

dep TCHK 1
dep 1000  00 68 0000 0000 1002

call exec

if (V != 1002) goto error

echo
echo ****************************** 
echo *** 69 - if printer ready=0 transfer to next instr, else as instr 60
echo ***      PRT=0 do not transfer
echo *** 

dep PRT 1
dep 1000  00 69 0000 0000 1002

call exec

if (V != 1002) goto error

echo
echo ****************************** 
echo *** 69 - if printer ready=0 transfer to next instr, else as instr 60
echo ***      PRT=1 transfer taken
echo *** 

dep PRT 1
dep 1000  00 69 0000 0000 1002

call exec

if (V != 1002) goto error


echo
echo ****************************** 
echo *** 63 - if Reg >0 Transfer to R, =0 transfer to S, <0 transfer to T
echo ***      Reg=0
echo *** 

dep reg1 0
dep reg2 0
dep 1000  00 63 1101 1102 1103

call exec

if (V != 1102) goto error

echo
echo ****************************** 
echo *** 63 - if Reg >0 Transfer to R, =0 transfer to S, <0 transfer to T
echo ***      Reg<0
echo *** 

dep reg1 00 1 1234000000000
dep reg2 00 1 1234000000000

dep 1000  00 63 1101 1102 1103

call exec

if (V != 1103) goto error

echo
echo ****************************** 
echo *** 63 - if Reg >0 Transfer to R, =0 transfer to S, <0 transfer to T
echo ***      Reg>0
echo *** 

dep ZR 0
dep reg1 00 0 1234000000000
dep reg2 00 0 1234000000000

dep 1000  00 63 1101 1102 1103

call exec

if (V != 1101) goto error


echo
echo ****************************** 
echo *** 70 - if C(R)-C(S)=0 as 16 digit words, use T as next instr
echo ***      equal case, use address modifiers m4 m6
echo *** 

dep m4 1100
dep m6 3000

dep 1101 1
dep 1102 1

dep 1000 00 70 4001 6102 1103

call exec

if (reg1!=0) goto error
if (V != 1103) goto error

echo
echo ****************************** 
echo *** 70 - if C(R)-C(S)=0 as 16 digit words, use T as next instr
echo ***      non equal case, use address modifiers m8 
echo *** 

dep m8 9900

dep 1101 3
dep 3102 2

dep 1000 00 70 1101 9202 1103

call exec

if (reg1!=1) goto error
if (V != 1001) goto error


echo
echo ****************************** 
echo *** 71 - if C(R)-C(S)=0 as 16 digit words, use T as next instr, stop
echo ***      equal case
echo *** 

dep 1101 1
dep 1102 1

dep 1000 00 71 1101 1102 1103

call exec

if (reg1!=0) goto error
if (V != 1103) goto error

echo
echo ****************************** 
echo *** 71 - if C(R)-C(S)=0 as 16 digit words, use T as next instr, stop
echo ***      non equal case
echo *** 

dep 1101 33
dep 1102 22

dep 1000 00 71 1101 1102 1103

call exec

if (reg1!=11) goto error
if (V != 1001) goto error

echo
echo ****************************** 
echo *** 72 - if C(R)<>C(S)=0 as 16 digit words, use T as next instr
echo ***      equal case
echo *** 

dep 1101 1
dep 1102 1

dep 1000 00 72 1101 1102 1103

call exec

if (reg1!=0) goto error
if (V != 1001) goto error

echo
echo ****************************** 
echo *** 72 - if C(R)<>C(S)=0 as 16 digit words, use T as next instr
echo ***      non equal case
echo *** 

dep 1101 33
dep 1102 22

dep 1000 00 72 1101 1102 1103

call exec

if (reg1!=11) goto error
if (V != 1103) goto error

echo
echo ****************************** 
echo *** 73 - if C(R)<>C(S)=0 as 16 digit words, use T as next instr, stop
echo ***      equal case
echo *** 

dep 1101 1
dep 1102 1

dep 1000 00 73 1101 1102 1103

call exec

if (reg1!=0) goto error
if (V != 1001) goto error

echo
echo ****************************** 
echo *** 73 - if C(R)<>C(S)=0 as 16 digit words, use T as next instr, stop
echo ***      non equal case
echo *** 

dep 1101 33
dep 1102 22

dep 1000 00 73 1101 1102 1103

call exec

if (reg1!=11) goto error
if (V != 1103) goto error

echo
echo ****************************** 
echo *** 74 - if Sw74 off transfer to next instr, 
echo ***      if Sw74 is Transfer, do instr 60, if Sw74 is stop do instr 61 
echo ***      sw off
echo *** 

switch sw74 to off
dep 1000 00 74 0000 0000 1103

call exec

if (V != 1001) goto error

echo
echo ****************************** 
echo *** 74 - if Sw74 off transfer to next instr, 
echo ***      if Sw74 is Transfer, do instr 60, if Sw74 is stop do instr 61 
echo ***      sw Transfer, 
echo *** 

switch sw74 to transfer
dep 1000 00 74 0000 0000 1103

call exec

if (V != 1103) goto error

echo
echo ****************************** 
echo *** 74 - if Sw74 off transfer to next instr, 
echo ***      if Sw74 is Transfer, do instr 60, if Sw74 is stop do instr 61 
echo ***      sw stop
echo *** 

switch sw74 to stop
dep 1000 00 74 0000 0000 1103

call exec

if (V != 1103) goto error

echo
echo ****************************** 
echo *** 75 - if Sw75 off transfer to next instr, 
echo ***      if Sw75 is Transfer, do instr 60, if Sw75 is stop do instr 61 
echo ***      sw off
echo *** 

switch sw75 to off
dep 1000 00 75 0000 0000 1103

call exec

if (V != 1001) goto error

echo
echo ****************************** 
echo *** 75 - if Sw75 off transfer to next instr, 
echo ***      if Sw75 is Transfer, do instr 60, if Sw75 is stop do instr 61 
echo ***      sw Transfer, 
echo *** 

switch sw75 to transfer
dep 1000 00 75 0000 0000 1103

call exec

if (V != 1103) goto error

echo
echo ****************************** 
echo *** 75 - if Sw75 off transfer to next instr, 
echo ***      if Sw75 is Transfer, do instr 60, if Sw75 is stop do instr 61 
echo ***      sw stop
echo *** 

switch sw75 to stop
dep 1000 00 75 0000 0000 1103

call exec

if (V != 1103) goto error


echo
echo ****************************** 
echo *** 76 - if Sw76 off transfer to next instr, 
echo ***      if Sw76 is Transfer, do instr 60, if Sw76 is stop do instr 61 
echo ***      sw off
echo *** 

switch sw76 to off
dep 1000 00 76 0000 0000 1103

call exec

if (V != 1001) goto error

echo
echo ****************************** 
echo *** 76 - if Sw76 off transfer to next instr, 
echo ***      if Sw76 is Transfer, do instr 60, if Sw76 is stop do instr 61 
echo ***      sw Transfer, 
echo *** 

switch sw76 to transfer
dep 1000 00 76 0000 0000 1103

call exec

if (V != 1103) goto error

echo
echo ****************************** 
echo *** 76 - if Sw76 off transfer to next instr, 
echo ***      if Sw76 is Transfer, do instr 60, if Sw76 is stop do instr 61 
echo ***      sw stop
echo *** 

switch sw76 to stop
dep 1000 00 76 0000 0000 1103

call exec

if (V != 1103) goto error


echo
echo ****************************** 
echo *** 77 - if Sw77 off transfer to next instr, 
echo ***      if Sw77 is Transfer, do instr 60, if Sw77 is stop do instr 61 
echo ***      sw off
echo *** 

switch sw77 to off
dep 1000 00 77 0000 0000 1103

call exec

if (V != 1001) goto error

echo
echo ****************************** 
echo *** 77 - if Sw77 off transfer to next instr, 
echo ***      if Sw77 is Transfer, do instr 60, if Sw77 is stop do instr 61 
echo ***      sw Transfer, 
echo *** 

switch sw77 to transfer
dep 1000 00 77 0000 0000 1103

call exec

if (V != 1103) goto error

echo
echo ****************************** 
echo *** 77 - if Sw77 off transfer to next instr, 
echo ***      if Sw77 is Transfer, do instr 60, if Sw77 is stop do instr 61 
echo ***      sw stop
echo *** 

switch sw77 to stop
dep 1000 00 77 0000 0000 1103

call exec

if (V != 1103) goto error


echo
echo ****************************** 
echo *** 78 - if Sw78 off transfer to next instr, 
echo ***      if Sw78 is Transfer, do instr 60, if Sw78 is stop do instr 61 
echo ***      sw off
echo *** 

switch sw78 to off
dep 1000 00 78 0000 0000 1103

call exec

if (V != 1001) goto error

echo
echo ****************************** 
echo *** 78 - if Sw78 off transfer to next instr, 
echo ***      if Sw78 is Transfer, do instr 60, if Sw78 is stop do instr 61 
echo ***      sw Transfer, 
echo *** 

switch sw78 to transfer
dep 1000 00 78 0000 0000 1103

call exec

if (V != 1103) goto error

echo
echo ****************************** 
echo *** 78 - if Sw78 off transfer to next instr, 
echo ***      if Sw78 is Transfer, do instr 60, if Sw78 is stop do instr 61 
echo ***      sw stop
echo *** 

switch sw78 to stop
dep 1000 00 78 0000 0000 1103

call exec

if (V != 1103) goto error


echo
echo ****************************** 
echo *** 79 - if Sw79 off transfer to next instr, 
echo ***      if Sw79 is Transfer, do instr 60, if Sw79 is stop do instr 61 
echo ***      sw off
echo *** 

switch sw79 to off
dep 1000 00 79 0000 0000 1103

call exec

if (V != 1001) goto error

echo
echo ****************************** 
echo *** 79 - if Sw79 off transfer to next instr, 
echo ***      if Sw79 is Transfer, do instr 60, if Sw79 is stop do instr 61 
echo ***      sw Transfer, 
echo *** 

switch sw79 to transfer
dep 1000 00 79 0000 0000 1103

call exec

if (V != 1103) goto error

echo
echo ****************************** 
echo *** 79 - if Sw79 off transfer to next instr, 
echo ***      if Sw79 is Transfer, do instr 60, if Sw79 is stop do instr 61 
echo ***      sw stop
echo *** 

switch sw79 to stop
dep 1000 00 79 0000 0000 1103

call exec

if (V != 1103) goto error


; set this to avoild stop in paramter float exponents
switch "Program Check" to proceed


echo
echo ****************************** 
echo *** 20 - C(R) + C(S) to T      Ordinary - rounded
echo ***      simple float add, same exp, float result
echo *** 

; 0.0000 0000 1 x 10^12 = 1000
; resultado float= 3x10^3 = 3000

dep 1101 12 0 0 0000 0000 1000
dep 1102 12 0 0 0000 0000 2000

dep 1103 03 0 3 0000 0000 0000

dep 1000 50 20 1101 1102 0000
dep 1001 08 70 0000 1103 1111

call exec
call exec0
if (V!=1111) goto error

echo
echo ****************************** 
echo *** 20 - C(R) + C(S) to T      Ordinary - rounded
echo ***      simple float add, same exp, spec index result
echo *** 

; 0.0000 0000 1 x 10^12 = 1000
; resultado float= 0.0000 0000 3 x 10^12 = 3000

dep 1101 12 0 0 0000 0000 1000
dep 1102 12 0 0 0000 0000 2000

dep 1103 12 0 0 0000 0000 3000

dep 1000 12 20 1101 1102 0000
dep 1001 08 70 0000 1103 1111

call exec
call exec0 
if (V!=1111) goto error

echo
echo ****************************** 
echo *** 20 - C(R) + C(S) to T      Ordinary - rounded
echo ***      simple float add, same exp, used 1st and last digit
echo *** 

; 0.0000 0000 1 x 10^12 = 1000
; resultado float= 3x10^3 = 3000

dep 1101 12 0 1 0000 0000 1003
dep 1102 12 0 2 0000 0000 2004

dep 1103 12 0 3 0000 0000 3007

dep 1000 50 20 1101 1102 0000
dep 1001 08 70 0000 1103 1111

call exec
call exec0
if (V!=1111) goto error


echo
echo ****************************** 
echo *** 20 - C(R) + C(S) to T      Ordinary - rounded
echo ***      simple float add, same exp, other spec index result
echo *** 

; 0.0000 0000 1 x 10^12 = 1000
; resultado float= 0.0000 0030 x 10^10 = 3000

dep 1101 12 0 0 0000 0000 1000
dep 1102 12 0 0 0000 0000 2000

dep 1103 10 0 0 0000 0030 0000

dep 1000 10 20 1101 1102 0000
dep 1001 08 70 0000 1103 1111

call exec
call exec0 
if (V!=1111) goto error

echo
echo ****************************** 
echo *** 20 - C(R) + C(S) to T      Ordinary - rounded
echo ***      simple float add, add to last significative digit
echo *** 

dep 1101 88 0 1 3333 0000 0000
dep 1102 00 0 2 0000 0000 0000

dep 1103 00 0 2 0000 0000 0001

dep 1000 50 20 1101 1102 0000
dep 1001 08 70 0000 1103 1111

call exec
call exec0 
if (V!=1111) goto error


echo
echo ****************************** 
echo *** 20 - C(R) + C(S) to T      Ordinary - rounded
echo ***      simple float add, add past to last significative digit (will round)
echo *** 

dep 1101 87 0 1 3333 0000 0000
dep 1102 00 0 2 0000 0000 0000

dep 1103 00 0 2 0000 0000 0001

dep 1000 50 20 1101 1102 0000
dep 1001 08 70 0000 1103 1111

call exec
call exec0 
if (V!=1111) goto error

echo
echo ****************************** 
echo *** 30 - C(R) + C(S) to T      special - unrounded
echo ***      simple float add, add past to last significative digit (no round)
echo *** 

dep 1101 87 0 1 3333 0000 0000
dep 1102 00 0 2 0000 0000 0000

dep 1103 00 0 2 0000 0000 0000

dep 1000 50 30 1101 1102 0000
dep 1001 08 70 0000 1103 1111

call exec
call exec0 
if (V!=1111) goto error

echo
echo ****************************** 
echo *** 20 - C(R) + C(S) to T      Ordinary - rounded
echo ***      simple float add, add bigger number
echo *** 

dep 1101 04 0 1 3333 0000 0000
dep 1102 00 0 2 0000 0000 0000

dep 1103 04 0 1 3335 0000 0000

dep 1000 50 20 1101 1102 0000
dep 1001 08 70 0000 1103 1111

call exec
call exec0 
if (V!=1111) goto error

echo
echo ****************************** 
echo *** 20 - C(R) + C(S) to T      Ordinary - rounded
echo ***      simple float add bigger num that still leave some digits (will round) 
echo *** 

dep 1101 12 0 1 3333 0000 0000
dep 1102 00 0 2 4444 0000 0000

dep 1103 12 0 1 3333 0000 0003

dep 1000 50 20 1101 1102 0000
dep 1001 08 70 0000 1103 1111

call exec
call exec0 
if (V!=1111) goto error


echo
echo ****************************** 
echo *** 30 - C(R) + C(S) to T      special - unrounded
echo ***      simple float add bigger num that still leave some digits (no round) 
echo *** 

dep 1101 12 0 1 3333 0000 0000
dep 1102 00 0 2 4444 0000 0000

dep 1103 12 0 1 3333 0000 0002

dep 1000 50 30 1101 1102 0000
dep 1001 08 70 0000 1103 1111

call exec
call exec0 
if (V!=1111) goto error

echo
echo ****************************** 
echo *** 20 - C(R) + C(S) to T      Ordinary - rounded
echo ***      simple float add, add bigger number that flush out smaller one 
echo *** 

dep 1101 13 0 1 3333 0000 0000
dep 1102 00 0 2 4444 0000 0000

dep 1103 13 0 1 3333 0000 0001

dep 1000 50 20 1101 1102 0000
dep 1001 08 70 0000 1103 1111

call exec
call exec0 
if (V!=1111) goto error



echo
echo ****************************** 
echo *** 30 - C(R) + C(S) to T      special - unrounded
echo ***      simple float add, add bigger number that flush out smaller one 
echo *** 

dep 1101 13 0 1 3333 0000 0000
dep 1102 00 0 2 4444 0000 0000

dep 1103 13 0 1 3333 0000 0000

dep 1000 50 30 1101 1102 0000
dep 1001 08 70 0000 1103 1111

call exec
call exec0 
if (V!=1111) goto error


echo
echo ****************************** 
echo *** 20 - C(R) + C(S) to T      Ordinary - rounded
echo ***      simple float add, A+zero, clear sgn/exp if mantissa zero
echo *** 

dep 1101 00 0 1 3333 0000 0000
dep 1102 99 9 0 0000 0000 0000

dep 1103 00 0 1 3333 0000 0000

dep 1000 50 20 1101 1102 0000
dep 1001 08 70 0000 1103 1111

call exec
call exec0 
if (V!=1111) goto error

echo
echo ****************************** 
echo *** 20 - C(R) + C(S) to T      Ordinary - rounded
echo ***      simple float add, zero+A
echo *** 

dep 1101 00 0 0 0000 0000 0000
dep 1102 00 0 1 3333 0000 0000

dep 1103 00 0 1 3333 0000 0000

dep 1000 50 20 1101 1102 0000
dep 1001 08 70 0000 1103 1111

call exec
call exec0 
if (V!=1111) goto error

echo
echo ****************************** 
echo *** 20 - C(R) + C(S) to T      Ordinary - rounded
echo ***      add with carry
echo *** 

dep 1101 99 0 1 0080 0000 0000
dep 1102 00 0 1 3333 0000 0000

dep 1103 00 0 1 4341 0000 0000

dep 1000 50 20 1101 1102 0000
dep 1001 08 70 0000 1103 1111

call exec
call exec0 
if (V!=1111) goto error


echo
echo ****************************** 
echo *** 20 - C(R) + C(S) to T      Ordinary - rounded
echo ***      add with carry incr exp
echo *** 

dep 1101 00 0 8 0080 0000 0000
dep 1102 00 0 4 3333 0000 0000

dep 1103 01 0 1 2341 3000 0000

dep 1000 50 20 1101 1102 0000
dep 1001 08 70 0000 1103 1111

call exec
call exec0 
if (V!=1111) goto error


echo
echo ****************************** 
echo *** 20 - C(R) + C(S) to T      Ordinary - rounded
echo ***      add positive + negative -> positive
echo *** 

dep 1101 00 0 2 0010 0000 0000
dep 1102 00 1 1 0003 0000 0000

dep 1103 00 0 1 0007 0000 0000

dep 1000 50 20 1101 1102 0000
dep 1001 08 70 0000 1103 1111

call exec
call exec0 
if (V!=1111) goto error

echo
echo ****************************** 
echo *** 20 - C(R) + C(S) to T      Ordinary - rounded
echo ***      add positive + negative -> negative
echo *** 

dep 1101 00 0 1 0003 0000 0000
dep 1102 00 1 2 0010 0000 0000

dep 1103 00 1 1 0007 0000 0000

dep 1000 50 20 1101 1102 0000
dep 1001 08 70 0000 1103 1111

call exec
call exec0 
if (V!=1111) goto error

echo
echo ****************************** 
echo *** 20 - C(R) + C(S) to T      Ordinary - rounded
echo ***      add negative + negative -> negative
echo *** 

dep 1101 00 1 1 0003 0000 0000
dep 1102 00 1 2 0010 0000 0000

dep 1103 00 1 3 0013 0000 0000

dep 1000 50 20 1101 1102 0000
dep 1001 08 70 0000 1103 1111

call exec
call exec0 
if (V!=1111) goto error

echo
echo ****************************** 
echo *** 20 - C(R) + C(S) to T      Ordinary - rounded
echo ***      add negative + positive -> negative
echo *** 

dep 1101 00 1 2 0010 0000 0000
dep 1102 00 0 1 0003 0000 0000

dep 1103 00 1 1 0007 0000 0000

dep 1000 50 20 1101 1102 0000
dep 1001 08 70 0000 1103 1111


echo
echo ****************************** 
echo *** 20 - C(R) + C(S) to T      Ordinary - rounded
echo ***      add negative + positive -> positive
echo *** 

dep 1101 00 1 1 0003 0000 0000
dep 1102 00 0 2 0010 0000 0000

dep 1103 00 0 1 0007 0000 0000

dep 1000 50 20 1101 1102 0000
dep 1001 08 70 0000 1103 1111


echo
echo ****************************** 
echo *** 20 - C(R) + C(S) to T      Ordinary - rounded
echo ***      simple float add, negative+zero, 
echo *** 

dep 1101 00 1 1 3333 0000 0000
dep 1102 00 0 0 0000 0000 0000

dep 1103 00 1 1 3333 0000 0000

dep 1000 50 20 1101 1102 0000
dep 1001 08 70 0000 1103 1111

call exec
call exec0 
if (V!=1111) goto error

echo
echo ****************************** 
echo *** 20 - C(R) + C(S) to T      Ordinary - rounded
echo ***      simple float add, zero+negative
echo *** 

dep 1101 00 0 0 0000 0000 0000
dep 1102 00 1 1 3333 0000 0000

dep 1103 00 1 1 3333 0000 0000

dep 1000 50 20 1101 1102 0000
dep 1001 08 70 0000 1103 1111

call exec
call exec0 
if (V!=1111) goto error

echo
echo ****************************** 
echo *** 20 - C(R) + C(S) to T      Ordinary - rounded
echo ***      simple float add, zero+zero
echo *** 

dep 1101 00 1 0 0000 0000 0000
dep 1102 00 0 0 0000 0000 0000

dep 1103 00 0 0 0000 0000 0000

dep 1000 50 20 1101 1102 0000
dep 1001 08 70 0000 1103 1111

call exec
call exec0 
if (V!=1111) goto error

echo
echo ****************************** 
echo *** 20 - C(R) + C(S) to T      Ordinary - rounded
echo ***      decimal index specified add < 30
echo *** 

dep 1101 10 0 0 0010 0000 0000
dep 1102 10 0 0 0220 0000 0000

dep 1103 10 0 0 0230 0000 0000

dep 1000 10 20 1101 1102 0000
dep 1001 08 70 0000 1103 1111

call exec
call exec0 
if (V!=1111) goto error

echo
echo ****************************** 
echo *** 20 - C(R) + C(S) to T      Ordinary - rounded
echo ***      decimal index specified add > 70
echo *** 

dep 1101 90 0 0 0010 0000 0000
dep 1102 90 0 0 0220 0000 0000

dep 1103 90 0 0 0230 0000 0000

dep 1000 90 20 1101 1102 0000
dep 1001 08 70 0000 1103 1111

call exec
call exec0 
if (V!=1111) goto error

echo
echo ****************************** 
echo *** 20 - C(R) + C(S) to T      Ordinary - rounded
echo ***      max precision
echo *** 

dep 1101 00 0 1 2222 3333 4444
dep 1102 87 0 5 6666 7777 8888

dep 1103 00 0 1 2222 3333 4445

dep 1000 50 20 1101 1102 0000
dep 1001 08 70 0000 1103 1111

call exec
call exec0 
if (V!=1111) goto error


echo
echo ****************************** 
echo *** 30 - C(R) + C(S) to T      special - unrounded
echo ***      max precision
echo *** 

dep 1101 00 0 1 2222 3333 4444
dep 1102 87 0 5 6666 7777 8888

dep 1103 00 0 1 2222 3333 4444

dep 1000 50 30 1101 1102 0000
dep 1001 08 70 0000 1103 1111

call exec
call exec0 
if (V!=1111) goto error

echo
echo ****************************** 
echo *** 20 - C(R) + C(S) to T      Ordinary - rounded
echo ***      test maxint set index adjust
echo *** 

dep 1101 30 0 9 0000 9999 9999
dep 1102 30 0 8 8888 8888 8888

; expected result of operation is index 30, but result is index 31 + ia set
dep 1103 31 0 1 7888 9888 8889

dep ia 0
dep ov 0
dep 1000 30 20 1101 1102 0000
dep 1001 08 70 0000 1103 1111

call exec
call exec0 
if (V!=1111) goto error
if (ia!=1) goto error
if (ov!=0) goto error

echo
echo ****************************** 
echo *** 30 - C(R) + C(S) to T      special - unrounded
echo ***      test maxint set overflow
echo *** 

dep 1101 30 0 9 0000 9999 9999
dep 1102 30 0 8 8888 8888 8888

; expected result of opcode is index 30, but result is index 31 -> ov set but index still 30
dep 1103 30 0 7 8889 8888 8887

dep ia 0
dep ov 0
dep 1000 30 30 1101 1102 0000
dep 1001 08 70 0000 1103 1111

call exec
call exec0 
if (V!=1111) goto error
if (ov!=1) goto error
if (ia!=0) goto error

echo
echo ****************************** 
echo *** 20 - C(R) + C(S) to T      Ordinary - rounded
echo ***      test no maxint set index adjust
echo *** 

dep 1101 10 0 9 0000 9999 9999
dep 1102 10 0 8 8888 8888 8888

; expected result of operation is index 30, but result is index 31 + ia set
dep 1103 11 0 1 7888 9888 8889

dep ia 0
dep ov 0
dep 1000 10 20 1101 1102 0000
dep 1001 08 70 0000 1103 1111

call exec
call exec0 
if (V!=1111) goto error
if (ia!=1) goto error
if (ov!=0) goto error

echo
echo ****************************** 
echo *** 20 - C(R) + C(S) to T      Ordinary - rounded
echo ***      test no maxint set no index adjust
echo *** 

dep 1101 10 0 9 0000 9999 9999
dep 1102 10 0 8 8888 8888 8888

; expected result of operation is index 30, but result is index 31 + ia set
dep 1103 11 0 1 7888 9888 8889

dep ia 0
dep ov 0
dep 1000 11 20 1101 1102 0000
dep 1001 08 70 0000 1103 1111

call exec
call exec0 
if (V!=1111) goto error
if (ia!=0) goto error
if (ov!=0) goto error

echo
echo ****************************** 
echo *** 30 - C(R) + C(S) to T      special - unrounded
echo ***      test no maxint set overflow
echo *** 

dep 1101 10 0 9 0000 9999 9999
dep 1102 10 0 8 8888 8888 8888

; expected result of opcode is index 30, but result is index 31 -> ov set but index still 30
dep 1103 10 0 7 8889 8888 8887

dep ia 0
dep ov 0
dep 1000 10 30 1101 1102 0000
dep 1001 08 70 0000 1103 1111

call exec
call exec0 
if (V!=1111) goto error
if (ov!=1) goto error
if (ia!=0) goto error

echo
echo ****************************** 
echo *** 30 - C(R) + C(S) to T      special - unrounded
echo ***      test zero result
echo *** 

dep 1101 00 0 0 8888 8888 8888
dep 1102 00 1 0 8888 8888 8888

dep 1103 00 0 0 0000 0000 0000

dep zr 0
dep 1000 10 30 1101 1102 0000
dep 1001 08 70 0000 1103 1111

call exec
call exec0 
if (V!=1111) goto error
if (zr!=1) goto error


echo
echo ****************************** 
echo *** 22 - C(R) - C(S) to T      Ordinary - rounded
echo ***      sub result negative with carry
echo *** 

dep 1101 02 0 1 0100 0000 0000
dep 1102 03 0 2 6010 0000 0000 

dep 1103 03 1 2 5000 0000 0000

dep 1000 50 22 1101 1102 0000
dep 1001 08 70 0000 1103 1111

call exec
call exec0 
if (V!=1111) goto error

echo
echo ****************************** 
echo *** 22 - C(R) - C(S) to T      Ordinary - rounded
echo ***      sub result zero
echo *** 

dep 1101 02 0 1 0100 0000 0000
dep 1102 02 0 1 0100 0000 0000

dep 1103 00 0 0 0000 0000 0000

dep 1000 50 22 1101 1102 0000
dep 1001 08 70 0000 1103 1111

call exec
call exec0 
if (V!=1111) goto error

echo
echo ****************************** 
echo *** 32 - C(R) - C(S) to T      special
echo ***      sub when operands differs 10^13 
echo *** 

dep 1101 01 0 6 6666 6666 6666
dep 1102 88 0 8 4321 0000 0000

; result is 01 0 6 6666 6666 6665 2<-digit 14 of mantissa
; as is a subtraction with exp that differs 10^13, a 1 is subtracted from 
; lower digit of bigger operand, so result will be:
; 01 0 6 6666 6666 6665 1<-digit 14 of mantissa
; then shifted to left one opsition (special, 00 exp instead of 01)
; so result will be 00 0 6 6666 6666 6651 as stated in page 8 of 
; programming manual

dep 1103 00 0 6 6666 6666 6651

dep 1000 00 32 1101 1102 0000
dep 1001 08 70 0000 1103 1111

call exec
call exec0 
if (V!=1111) goto error

echo
echo ****************************** 
echo *** 32 - C(R) - C(S) to T      special
echo ***      sub when operands differs more that 10^13 
echo *** 

dep 1101 01 0 6 6666 6666 6666
dep 1102 87 0 8 4321 0000 0000

; result is 01 0 6 6666 6666 6666 0<-digit 14 of mantissa
; as is a subtraction with exp that differs more than 10^13, a 1 is subtracted from 
; lower digit of bigger operand, so result will be:
; 01 0 6 6666 6666 6665 9<-digit 14 of mantissa
; then shifted to left one opsition (special, 00 exp instead of 01)
; so result will be 00 0 6 6666 6666 6659 as stated in page 9 of 
; programming manual

dep 1103 00 0 6 6666 6666 6659

dep 1000 00 32 1101 1102 0000
dep 1001 08 70 0000 1103 1111

call exec
call exec0 
if (V!=1111) goto error


echo
echo ****************************** 
echo *** 32 - C(R) - C(S) to T      special
echo ***      sub when operands differs 10^13 minus
echo *** 

dep 1101 88 0 8 4321 0000 0000
dep 1102 01 0 6 6666 6666 6666

dep 1103 00 1 6 6666 6666 6651

dep 1000 00 32 1101 1102 0000
dep 1001 08 70 0000 1103 1111

call exec
call exec0 
if (V!=1111) goto error

echo
echo ****************************** 
echo *** 32 - C(R) - C(S) to T      special
echo ***      sub when operands differs more that 10^13 minus
echo *** 

dep 1101 87 0 8 4321 0000 0000
dep 1102 01 0 6 6666 6666 6666

dep 1103 00 1 6 6666 6666 6659

dep 1000 00 32 1101 1102 0000
dep 1001 08 70 0000 1103 1111

call exec
call exec0 
if (V!=1111) goto error


echo
echo ****************************** 
echo *** 20 - C(R) + C(S) to T      Ordinary - rounded
echo ***      test zero result
echo *** 

dep 1101 00 0 0 8888 8888 8888
dep 1102 00 1 0 8888 8888 8888

dep 1103 00 0 0 0000 0000 0000

dep zr 0
dep 1000 10 30 1101 1102 0000
dep 1001 08 70 0000 1103 1111

call exec
call exec0 
if (V!=1111) goto error
if (zr!=1) goto error

echo
echo ****************************** 
echo *** 20 - C(R) + C(S) to T      Ordinary - rounded
echo ***      13 digits mantissa on result 
echo *** 

dep 1101 00 0 4 1111 2222 3333
dep 1102 00 0 2 4444 5555 6666

dep 1103 00 0 6 5555 7777 9999

dep zr 0
dep 1000 00 20 1101 1102 0000
dep 1001 08 70 0000 1103 1111

call exec
call exec0 
if (V!=1111) goto error

echo
echo ****************************** 
echo *** 30 - C(R) + C(S) to T      special
echo ***      13 digits mantissa on result - shift result left 4 digits
echo *** 

dep 1101 00 0 4 1111 2222 3333
dep 1102 00 0 2 4444 5555 6666

dep 1103 96 0 5 7777 9999 0000

dep zr 0
dep 1000 96 30 1101 1102 0000
dep 1001 00 70 0000 1103 1111

call exec
call exec0 
if (V!=1111) goto error

echo
echo ****************************** 
echo *** 20 - C(R) + C(S) to T      Ordinary - rounded
echo ***      14 digits mantissa on result
echo *** 

dep 1101 01 0 4 1111 2222 3333
dep 1102 00 0 2 4444 5555 6666

dep 1103 01 0 4 3555 6777 8999

dep zr 0
dep 1000 01 20 1101 1102 0000
dep 1001 08 70 0000 1103 1111

call exec
call exec0 
if (V!=1111) goto error

echo
echo ****************************** 
echo *** 30 - C(R) + C(S) to T      special
echo ***      14 digits mantissa on result - shift result left 5 digits
echo *** 

dep 1101 01 0 4 1111 2222 3333
dep 1102 00 0 2 4444 5555 6666

dep 1103 96 0 6 7778 9996 0000

dep zr 0
dep 1000 96 30 1101 1102 0000
dep 1001 00 70 0000 1103 1111

call exec
call exec0 
if (V!=1111) goto error

echo
echo ****************************** 
echo *** 20 - C(R) + C(S) to T      Ordinary - rounded
echo ***      15 digits mantissa on result (because carry)
echo *** 

dep 1101 01 0 9 8888 8888 8888
dep 1102 00 0 4 4444 4445 4444

dep 1103 02 0 1 0333 3333 3433

dep zr 0
dep 1000 01 20 1101 1102 0000
dep 1001 08 70 0000 1103 1111

call exec
call exec0 
if (V!=1111) goto error

echo
echo ****************************** 
echo *** 30 - C(R) + C(S) to T      special
echo ***      15 digits mantissa on result (because carry) - shift result left 6 digits
echo *** 

dep 1101 01 0 9 8888 8888 8888
dep 1102 00 0 4 4444 4445 4444

dep 1103 96 0 3 3334 3324 0000

dep zr 0
dep 1000 96 30 1101 1102 0000
dep 1001 00 70 0000 1103 1111

call exec
call exec0 
if (V!=1111) goto error

echo
echo ****************************** 
echo *** 21  // -[C(R) + C(S)] to T     Ordinary - rounded
echo ***      test 1 sign computation 0 with -1/0/1
echo *** 

dep 1101 00 0 0 0000 0000 0000
dep 1102 00 1 0 0000 0000 0001

dep 1103 00 0 0 0000 0000 0001

dep zr 0
dep 1000 00 21 1101 1102 0000
dep 1001 08 70 0000 1103 1111

call exec
call exec0 
if (V!=1111) goto error


echo
echo ****************************** 
echo *** 21  // -[C(R) + C(S)] to T     Ordinary - rounded
echo ***      test 2 sign computation 0 with -1/0/1
echo *** 

dep 1101 00 0 0 0000 0000 0000
dep 1102 00 0 0 0000 0000 0000

dep 1103 00 0 0 0000 0000 0000

dep zr 0
dep 1000 00 21 1101 1102 0000
dep 1001 08 70 0000 1103 1111

call exec
call exec0 
if (V!=1111) goto error

echo
echo ****************************** 
echo *** 21  // -[C(R) + C(S)] to T     Ordinary - rounded
echo ***      test 3 sign computation 0 with -1/0/1
echo *** 

dep 1101 00 0 0 0000 0000 0000
dep 1102 00 0 0 0000 0000 0001

dep 1103 00 1 0 0000 0000 0001

dep zr 0
dep 1000 00 21 1101 1102 0000
dep 1001 08 70 0000 1103 1111

call exec
call exec0 
if (V!=1111) goto error

echo
echo ****************************** 
echo *** 21  // -[C(R) + C(S)] to T     Ordinary - rounded
echo ***      test 4 sign computation -1 with -1/0/1
echo *** 

dep 1101 00 1 0 0000 0000 0001
dep 1102 00 1 0 0000 0000 0001

dep 1103 00 0 0 0000 0000 0002

dep zr 0
dep 1000 00 21 1101 1102 0000
dep 1001 08 70 0000 1103 1111

call exec
call exec0 
if (V!=1111) goto error


echo
echo ****************************** 
echo *** 21  // -[C(R) + C(S)] to T     Ordinary - rounded
echo ***      test 5 sign computation -1 with -1/0/1
echo *** 

dep 1101 00 1 0 0000 0000 0001
dep 1102 00 0 0 0000 0000 0000

dep 1103 00 0 0 0000 0000 0001

dep zr 0
dep 1000 00 21 1101 1102 0000
dep 1001 08 70 0000 1103 1111

call exec
call exec0 
if (V!=1111) goto error

echo
echo ****************************** 
echo *** 21  // -[C(R) + C(S)] to T     Ordinary - rounded
echo ***      test 6 sign computation -1 with -1/0/1
echo *** 

dep 1101 00 1 0 0000 0000 0001
dep 1102 00 0 0 0000 0000 0001

dep 1103 00 0 0 0000 0000 0000

dep zr 0
dep 1000 00 21 1101 1102 0000
dep 1001 08 70 0000 1103 1111

call exec
call exec0 
if (V!=1111) goto error

echo
echo ****************************** 
echo *** 21  // -[C(R) + C(S)] to T     Ordinary - rounded
echo ***      test 7 sign computation 1 with -1/0/1
echo *** 

dep 1101 00 0 0 0000 0000 0001
dep 1102 00 1 0 0000 0000 0001

dep 1103 00 0 0 0000 0000 0000

dep zr 0
dep 1000 00 21 1101 1102 0000
dep 1001 08 70 0000 1103 1111

call exec
call exec0 
if (V!=1111) goto error


echo
echo ****************************** 
echo *** 21  // -[C(R) + C(S)] to T     Ordinary - rounded
echo ***      test 8 sign computation 1 with -1/0/1
echo *** 

dep 1101 00 0 0 0000 0000 0001
dep 1102 00 0 0 0000 0000 0000

dep 1103 00 1 0 0000 0000 0001

dep zr 0
dep 1000 00 21 1101 1102 0000
dep 1001 08 70 0000 1103 1111

call exec
call exec0 
if (V!=1111) goto error

echo
echo ****************************** 
echo *** 21  // -[C(R) + C(S)] to T     Ordinary - rounded
echo ***      test 9 sign computation 1 with -1/0/1
echo *** 

dep 1101 00 0 0 0000 0000 0001
dep 1102 00 0 0 0000 0000 0001

dep 1103 00 1 0 0000 0000 0002

dep zr 0
dep 1000 00 21 1101 1102 0000
dep 1001 08 70 0000 1103 1111

call exec
call exec0 
if (V!=1111) goto error




echo
echo ****************************** 
echo *** 22  //   C(R) - C(S) to T 
echo ***      test 1 sign computation 0 with -1/0/1
echo *** 

dep 1101 00 0 0 0000 0000 0000
dep 1102 00 1 0 0000 0000 0001

dep 1103 00 0 0 0000 0000 0001

dep zr 0
dep 1000 00 22 1101 1102 0000
dep 1001 08 70 0000 1103 1111

call exec
call exec0 
if (V!=1111) goto error


echo
echo ****************************** 
echo *** 22  //   C(R) - C(S) to T 
echo ***      test 2 sign computation 0 with -1/0/1
echo *** 

dep 1101 00 0 0 0000 0000 0000
dep 1102 00 0 0 0000 0000 0000

dep 1103 00 0 0 0000 0000 0000

dep zr 0
dep 1000 00 22 1101 1102 0000
dep 1001 08 70 0000 1103 1111

call exec
call exec0 
if (V!=1111) goto error

echo
echo ****************************** 
echo *** 22  //   C(R) - C(S) to T 
echo ***      test 3 sign computation 0 with -1/0/1
echo *** 

dep 1101 00 0 0 0000 0000 0000
dep 1102 00 0 0 0000 0000 0001

dep 1103 00 1 0 0000 0000 0001

dep zr 0
dep 1000 00 22 1101 1102 0000
dep 1001 08 70 0000 1103 1111

call exec
call exec0 
if (V!=1111) goto error

echo
echo ****************************** 
echo *** 22  //   C(R) - C(S) to T 
echo ***      test 4 sign computation -1 with -1/0/1
echo *** 

dep 1101 00 1 0 0000 0000 0001
dep 1102 00 1 0 0000 0000 0001

dep 1103 00 0 0 0000 0000 0000

dep zr 0
dep 1000 00 22 1101 1102 0000
dep 1001 08 70 0000 1103 1111

call exec
call exec0 
if (V!=1111) goto error


echo
echo ****************************** 
echo *** 22  //   C(R) - C(S) to T 
echo ***      test 5 sign computation -1 with -1/0/1
echo *** 

dep 1101 00 1 0 0000 0000 0001
dep 1102 00 0 0 0000 0000 0000

dep 1103 00 1 0 0000 0000 0001

dep zr 0
dep 1000 00 22 1101 1102 0000
dep 1001 08 70 0000 1103 1111

call exec
call exec0 
if (V!=1111) goto error

echo
echo ****************************** 
echo *** 22  //   C(R) - C(S) to T 
echo ***      test 6 sign computation -1 with -1/0/1
echo *** 

dep 1101 00 1 0 0000 0000 0001
dep 1102 00 0 0 0000 0000 0001

dep 1103 00 1 0 0000 0000 0002

dep zr 0
dep 1000 00 22 1101 1102 0000
dep 1001 08 70 0000 1103 1111

call exec
call exec0 
if (V!=1111) goto error

echo
echo ****************************** 
echo *** 22  //   C(R) - C(S) to T 
echo ***      test 7 sign computation 1 with -1/0/1
echo *** 

dep 1101 00 0 0 0000 0000 0001
dep 1102 00 1 0 0000 0000 0001

dep 1103 00 0 0 0000 0000 0002

dep zr 0
dep 1000 00 22 1101 1102 0000
dep 1001 08 70 0000 1103 1111

call exec
call exec0 
if (V!=1111) goto error


echo
echo ****************************** 
echo *** 22  //   C(R) - C(S) to T 
echo ***      test 8 sign computation 1 with -1/0/1
echo *** 

dep 1101 00 0 0 0000 0000 0001
dep 1102 00 0 0 0000 0000 0000

dep 1103 00 0 0 0000 0000 0001

dep zr 0
dep 1000 00 22 1101 1102 0000
dep 1001 08 70 0000 1103 1111

call exec
call exec0 
if (V!=1111) goto error

echo
echo ****************************** 
echo *** 22  //   C(R) - C(S) to T 
echo ***      test 9 sign computation 1 with -1/0/1
echo *** 

dep 1101 00 0 0 0000 0000 0001
dep 1102 00 0 0 0000 0000 0001

dep 1103 00 0 0 0000 0000 0000

dep zr 0
dep 1000 00 22 1101 1102 0000
dep 1001 08 70 0000 1103 1111

call exec
call exec0 
if (V!=1111) goto error

echo
echo ****************************** 
echo *** 23  //   -[C(R) - C(S)] to T     Ordinary - rounded
echo ***      test 1 sign computation 0 with -1/0/1
echo *** 

dep 1101 00 0 0 0000 0000 0000
dep 1102 00 1 0 0000 0000 0001

dep 1103 00 1 0 0000 0000 0001

dep zr 0
dep 1000 00 23 1101 1102 0000
dep 1001 08 70 0000 1103 1111

call exec
call exec0 
if (V!=1111) goto error


echo
echo ****************************** 
echo *** 23  //   -[C(R) - C(S)] to T     Ordinary - rounded
echo ***      test 2 sign computation 0 with -1/0/1
echo *** 

dep 1101 00 0 0 0000 0000 0000
dep 1102 00 0 0 0000 0000 0000

dep 1103 00 0 0 0000 0000 0000

dep zr 0
dep 1000 00 23 1101 1102 0000
dep 1001 08 70 0000 1103 1111

call exec
call exec0 
if (V!=1111) goto error

echo
echo ****************************** 
echo *** 23  //   -[C(R) - C(S)] to T     Ordinary - rounded
echo ***      test 3 sign computation 0 with -1/0/1
echo *** 

dep 1101 00 0 0 0000 0000 0000
dep 1102 00 0 0 0000 0000 0001

dep 1103 00 0 0 0000 0000 0001

dep zr 0
dep 1000 00 23 1101 1102 0000
dep 1001 08 70 0000 1103 1111

call exec
call exec0 
if (V!=1111) goto error

echo
echo ****************************** 
echo *** 23  //   -[C(R) - C(S)] to T     Ordinary - rounded
echo ***      test 4 sign computation -1 with -1/0/1
echo *** 

dep 1101 00 1 0 0000 0000 0001
dep 1102 00 1 0 0000 0000 0001

dep 1103 00 0 0 0000 0000 0000

dep zr 0
dep 1000 00 23 1101 1102 0000
dep 1001 08 70 0000 1103 1111

call exec
call exec0 
if (V!=1111) goto error


echo
echo ****************************** 
echo *** 23  //   -[C(R) - C(S)] to T     Ordinary - rounded
echo ***      test 5 sign computation -1 with -1/0/1
echo *** 

dep 1101 00 1 0 0000 0000 0001
dep 1102 00 0 0 0000 0000 0000

dep 1103 00 0 0 0000 0000 0001

dep zr 0
dep 1000 00 23 1101 1102 0000
dep 1001 08 70 0000 1103 1111

call exec
call exec0 
if (V!=1111) goto error

echo
echo ****************************** 
echo *** 23  //   -[C(R) - C(S)] to T     Ordinary - rounded
echo ***      test 6 sign computation -1 with -1/0/1
echo *** 

dep 1101 00 1 0 0000 0000 0001
dep 1102 00 0 0 0000 0000 0001

dep 1103 00 0 0 0000 0000 0002

dep zr 0
dep 1000 00 23 1101 1102 0000
dep 1001 08 70 0000 1103 1111

call exec
call exec0 
if (V!=1111) goto error

echo
echo ****************************** 
echo *** 23  //   -[C(R) - C(S)] to T     Ordinary - rounded
echo ***      test 7 sign computation 1 with -1/0/1
echo *** 

dep 1101 00 0 0 0000 0000 0001
dep 1102 00 1 0 0000 0000 0001

dep 1103 00 1 0 0000 0000 0002

dep zr 0
dep 1000 00 23 1101 1102 0000
dep 1001 08 70 0000 1103 1111

call exec
call exec0 
if (V!=1111) goto error


echo
echo ****************************** 
echo *** 23  //   -[C(R) - C(S)] to T     Ordinary - rounded
echo ***      test 8 sign computation 1 with -1/0/1
echo *** 

dep 1101 00 0 0 0000 0000 0001
dep 1102 00 0 0 0000 0000 0000

dep 1103 00 1 0 0000 0000 0001

dep zr 0
dep 1000 00 23 1101 1102 0000
dep 1001 08 70 0000 1103 1111

call exec
call exec0 
if (V!=1111) goto error

echo
echo ****************************** 
echo *** 23  //   -[C(R) - C(S)] to T     Ordinary - rounded
echo ***      test 9 sign computation 1 with -1/0/1
echo *** 

dep 1101 00 0 0 0000 0000 0001
dep 1102 00 0 0 0000 0000 0001

dep 1103 00 0 0 0000 0000 0000

dep zr 0
dep 1000 00 23 1101 1102 0000
dep 1001 08 70 0000 1103 1111

call exec
call exec0 
if (V!=1111) goto error


echo
echo ****************************** 
echo *** 28  //  |C(R)| - |C(S)| to T     Ordinary - rounded
echo ***      test 1 sign computation 0 with -1/0/1
echo *** 

dep 1101 00 0 0 0000 0000 0000
dep 1102 00 1 0 0000 0000 0001

dep 1103 00 1 0 0000 0000 0001

dep zr 0
dep 1000 00 28 1101 1102 0000
dep 1001 08 70 0000 1103 1111

call exec
call exec0 
if (V!=1111) goto error


echo
echo ****************************** 
echo *** 28  //  |C(R)| - |C(S)| to T     Ordinary - rounded
echo ***      test 2 sign computation 0 with -1/0/1
echo *** 

dep 1101 00 0 0 0000 0000 0000
dep 1102 00 0 0 0000 0000 0000

dep 1103 00 0 0 0000 0000 0000

dep zr 0
dep 1000 00 28 1101 1102 0000
dep 1001 08 70 0000 1103 1111

call exec
call exec0 
if (V!=1111) goto error

echo
echo ****************************** 
echo *** 28  //  |C(R)| - |C(S)| to T     Ordinary - rounded
echo ***      test 3 sign computation 0 with -1/0/1
echo *** 

dep 1101 00 0 0 0000 0000 0000
dep 1102 00 0 0 0000 0000 0001

dep 1103 00 1 0 0000 0000 0001

dep zr 0
dep 1000 00 28 1101 1102 0000
dep 1001 08 70 0000 1103 1111

call exec
call exec0 
if (V!=1111) goto error

echo
echo ****************************** 
echo *** 28  //  |C(R)| - |C(S)| to T     Ordinary - rounded
echo ***      test 4 sign computation -1 with -1/0/1
echo *** 

dep 1101 00 1 0 0000 0000 0001
dep 1102 00 1 0 0000 0000 0001

dep 1103 00 0 0 0000 0000 0000

dep zr 0
dep 1000 00 28 1101 1102 0000
dep 1001 08 70 0000 1103 1111

call exec
call exec0 
if (V!=1111) goto error


echo
echo ****************************** 
echo *** 28  //  |C(R)| - |C(S)| to T     Ordinary - rounded
echo ***      test 5 sign computation -1 with -1/0/1
echo *** 

dep 1101 00 1 0 0000 0000 0001
dep 1102 00 0 0 0000 0000 0000

dep 1103 00 0 0 0000 0000 0001

dep zr 0
dep 1000 00 28 1101 1102 0000
dep 1001 08 70 0000 1103 1111

call exec
call exec0 
if (V!=1111) goto error

echo
echo ****************************** 
echo *** 28  //  |C(R)| - |C(S)| to T     Ordinary - rounded
echo ***      test 6 sign computation -1 with -1/0/1
echo *** 

dep 1101 00 1 0 0000 0000 0001
dep 1102 00 0 0 0000 0000 0001

dep 1103 00 0 0 0000 0000 0000

dep zr 0
dep 1000 00 28 1101 1102 0000
dep 1001 08 70 0000 1103 1111

call exec
call exec0 
if (V!=1111) goto error

echo
echo ****************************** 
echo *** 28  //  |C(R)| - |C(S)| to T     Ordinary - rounded
echo ***      test 7 sign computation 1 with -1/0/1
echo *** 

dep 1101 00 0 0 0000 0000 0001
dep 1102 00 1 0 0000 0000 0001

dep 1103 00 0 0 0000 0000 0000

dep zr 0
dep 1000 00 28 1101 1102 0000
dep 1001 08 70 0000 1103 1111

call exec
call exec0 
if (V!=1111) goto error


echo
echo ****************************** 
echo *** 28  //  |C(R)| - |C(S)| to T     Ordinary - rounded
echo ***      test 8 sign computation 1 with -1/0/1
echo *** 

dep 1101 00 0 0 0000 0000 0001
dep 1102 00 0 0 0000 0000 0000

dep 1103 00 0 0 0000 0000 0001

dep zr 0
dep 1000 00 28 1101 1102 0000
dep 1001 08 70 0000 1103 1111

call exec
call exec0 
if (V!=1111) goto error

echo
echo ****************************** 
echo *** 28  //  |C(R)| - |C(S)| to T     Ordinary - rounded
echo ***      test 9 sign computation 1 with -1/0/1
echo *** 

dep 1101 00 0 0 0000 0000 0001
dep 1102 00 0 0 0000 0000 0001

dep 1103 00 0 0 0000 0000 0000

dep zr 0
dep 1000 00 28 1101 1102 0000
dep 1001 08 70 0000 1103 1111

call exec
call exec0 
if (V!=1111) goto error


echo
echo ****************************** 
echo ***  39  // truncating transfer C(R) with C(S) to T   Special - unrounded
echo ***      
echo *** 

dep 1101 12 0 0 0000 1111 2222
dep 1102 00 0 3 4444 5555 6666

dep 1103 08 0 0 1111 2222 3444

dep 1000 08 39 1101 1102 0000
dep 1001 08 70 0000 1103 1111

call exec
call exec0 
if (V!=1111) goto error

echo
echo ****************************** 
echo ***  24  //   C(R) x C(S) to T      Ordinary - rounded
echo ***           mult 2 integer nums (in floating point) 
echo *** 

dep 1101 12 0 0 0000 1111 2222
dep 1102 12 0 0 0000 0000 0002

dep 1103 12 0 0 0000 2222 4444

dep 1000 12 24 1101 1102 0000
dep 1001 08 70 0000 1103 1111

call exec
call exec0 
if (V!=1111) goto error

echo
echo ****************************** 
echo ***  24  //   C(R) x C(S) to T      Ordinary - rounded
echo ***           mult 2 float not aligned
echo *** 

dep 1101 13 0 0 0000 1111 2222
dep 1102 13 0 0 0000 0000 0002

dep 1103 12 0 0 0022 2244 4400

dep 1000 12 24 1101 1102 0000
dep 1001 08 70 0000 1103 1111

call exec
call exec0 
if (V!=1111) goto error


echo
echo ****************************** 
echo ***  24  //   C(R) x C(S) to T      Ordinary - rounded
echo ***           mult 0 with 1
echo *** 

dep 1101 00 0 0 0000 0000 0000
dep 1102 13 0 0 0000 0000 0002

dep 1103 00 0 0 0000 0000 0000

dep 1000 12 24 1101 1102 0000
dep 1001 08 70 0000 1103 1111

call exec
call exec0 
if (V!=1111) goto error


echo
echo ****************************** 
echo ***  24  //   C(R) x C(S) to T      Ordinary - rounded
echo ***           mult 1 with 1
echo *** 

dep 1101 13 0 0 0000 1111 2222
dep 1102 13 0 0 0000 0000 0002

dep 1103 12 0 0 0022 2244 4400

dep 1000 12 24 1101 1102 0000
dep 1001 08 70 0000 1103 1111

call exec
call exec0 
if (V!=1111) goto error

echo
echo ****************************** 
echo ***  24  //   C(R) x C(S) to T      Ordinary - rounded
echo ***           mult -1 with 1
echo *** 

dep 1101 13 1 0 0000 1111 2222
dep 1102 13 0 0 0000 0000 0002

dep 1103 12 1 0 0022 2244 4400

dep 1000 12 24 1101 1102 0000
dep 1001 08 70 0000 1103 1111

call exec
call exec0 
if (V!=1111) goto error

echo
echo ****************************** 
echo ***  24  //   C(R) x C(S) to T      Ordinary - rounded
echo ***           mult 0 with -1
echo *** 

dep 1101 00 0 0 0000 0000 0000
dep 1102 13 1 0 0000 0000 0002

dep 1103 00 0 0 0000 0000 0000

dep 1000 12 24 1101 1102 0000
dep 1001 08 70 0000 1103 1111

call exec
call exec0 
if (V!=1111) goto error


echo
echo ****************************** 
echo ***  24  //   C(R) x C(S) to T      Ordinary - rounded
echo ***           mult 1 with -1
echo *** 

dep 1101 13 0 0 0000 1111 2222
dep 1102 13 1 0 0000 0000 0002

dep 1103 12 1 0 0022 2244 4400

dep 1000 12 24 1101 1102 0000
dep 1001 08 70 0000 1103 1111

call exec
call exec0 
if (V!=1111) goto error

echo
echo ****************************** 
echo ***  24  //   C(R) x C(S) to T      Ordinary - rounded
echo ***           mult -1 with -1
echo *** 

dep 1101 13 1 0 0000 1111 2222
dep 1102 13 1 0 0000 0000 0002

dep 1103 12 0 0 0022 2244 4400

dep 1000 12 24 1101 1102 0000
dep 1001 08 70 0000 1103 1111

dep zr 0
call exec
call exec0 
if (V!=1111) goto error
if (zr!=0) goto error

echo
echo ****************************** 
echo ***  24  //   C(R) x C(S) to T      Ordinary - rounded
echo ***           mult 0 with 0
echo *** 

dep 1101 00 0 0 0000 0000 0000
dep 1102 13 0 0 0000 0000 0000

dep 1103 00 0 0 0000 0000 0000

dep 1000 12 24 1101 1102 0000
dep 1001 08 70 0000 1103 1111

dep zr 0
call exec
call exec0 
if (V!=1111) goto error
if (zr!=1) goto error

echo
echo ****************************** 
echo ***  24  //   C(R) x C(S) to T      Ordinary - rounded
echo ***           mult 1 with 0
echo *** 

dep 1101 13 0 0 0000 1111 2222
dep 1102 13 0 0 0000 0000 0000

dep 1103 00 0 0 0000 0000 0000

dep 1000 12 24 1101 1102 0000
dep 1001 08 70 0000 1103 1111

dep zr 0
call exec
call exec0 
if (V!=1111) goto error
if (zr!=1) goto error

echo
echo ****************************** 
echo ***  24  //   C(R) x C(S) to T      Ordinary - rounded
echo ***           mult -1 with 0
echo *** 

dep 1101 13 1 0 0000 1111 2222
dep 1102 13 0 0 0000 0000 0000

dep 1103 00 0 0 0000 0000 0000

dep 1000 12 24 1101 1102 0000
dep 1001 08 70 0000 1103 1111

call exec
call exec0 
if (V!=1111) goto error

echo
echo ****************************** 
echo ***  25  // -[C(R) x C(S)] to T      Ordinary - rounded
echo ***           mult big coef
echo *** 

dep 1101 12 0 1 2222 3333 4444
dep 1102 02 0 5 6666 7777 8888

dep 1103 14 1 6 9260 0247 6910

dep 1000 12 25 1101 1102 0000
dep 1001 08 70 0000 1103 1111

dep ia 0
call exec
call exec0 
if (V!=1111) goto error
if (ia!=1) goto error


echo
echo ****************************** 
echo ***  24  //   C(R) x C(S) to T      Ordinary - rounded
echo ***           underflow
echo *** 

dep 1101 70 0 0 0000 1111 2222
dep 1102 70 0 0 0000 3333 4444

dep 1103 00 0 0 0000 0000 0000

dep 1000 12 24 1101 1102 0000
dep 1001 08 70 0000 1103 1111

call exec
call exec0 
if (V!=1111) goto error


echo
echo ****************************** 
echo ***  24  //   C(R) x C(S) to T      Ordinary - rounded
echo ***           spec -30 a float between -30 and -42
echo *** 

dep 1101 70 0 0 0000 1111 2222
dep 1102 00 0 0 5000 0000 0000

dep 1103 70 0 0 0000 0555 6111

dep 1000 70 24 1101 1102 0000
dep 1001 08 70 0000 1103 1111

call exec
call exec0 
if (V!=1111) goto error

echo
echo ****************************** 
echo ***  24  //   C(R) x C(S) to T      Ordinary - rounded
echo ***           float between -30 and -42
echo *** 

dep 1101 70 0 0 0000 1111 2222
dep 1102 00 0 0 5000 0000 0000

dep 1103 70 0 0 0000 0555 6111

dep 1000 50 24 1101 1102 0000
dep 1001 08 70 0000 1103 1111

call exec
call exec0 
if (V!=1111) goto error


echo
echo ****************************** 
echo ***  26  //   C(R) / C(S) to T      Ordinary - rounded
echo ***           simple div
echo *** 

dep 1101 12 0 0 0000 4444 0002
dep 1102 12 0 0 0000 0000 0002

dep 1103 12 0 0 0000 2222 0001

dep 1000 12 26 1101 1102 0000
dep 1001 08 70 0000 1103 1111

call exec
call exec0 
if (V!=1111) goto error


echo
echo ****************************** 
echo ***  26  //   C(R) / C(S) to T      Ordinary - rounded
echo ***           big div
echo *** 

dep 1101 12 0 0 0000 4444 0002
dep 1102 12 0 0 0000 0000 0003

dep 1103 12 0 0 0000 1481 3333

dep 1000 12 26 1101 1102 0000
dep 1001 08 70 0000 1103 1111

call exec
call exec0 
if (V!=1111) goto error



echo
echo ****************************** 
echo ***  26  //   C(R) / C(S) to T      Ordinary - rounded
echo ***           no integer div
echo *** 

dep 1101 02 0 1 0100 0000 0000
dep 1102 01 0 5 1000 0000 0000

dep 1103 00 0 1 9803 9215 6863

dep 1000 50 26 1101 1102 0000
dep 1001 08 70 0000 1103 1111

call exec
call exec0 
if (V!=1111) goto error


echo
echo ****************************** 
echo ***  24  //   C(R) x C(S) to T      Ordinary - rounded
echo ***           index adjust
echo *** 

dep 1101 30 0 0 0000 1111 2222
dep 1102 30 0 0 0000 3333 4444

dep 1103 49 0 3 7041 9741 9745

dep 1000 12 24 1101 1102 0000
dep 1001 08 70 0000 1103 1111

dep ia 0
call exec
call exec0 
if (V!=1111) goto error
if (ia!=1) goto error

echo
echo ****************************** 
echo ***  34  //   C(R) x C(S) to T      special - unrounded
echo ***           overflow mantissa
echo *** 

dep 1101 15 0 1 0000 0000 2000
dep 1102 15 0 1 0000 0000 3000

dep 1103 28 0 0 0000 0050 0000

dep 1000 28 34 1101 1102 0000
dep 1001 08 70 0000 1103 1111

dep ov 0
call exec
call exec0 
if (V!=1111) goto error
if (ov!=1) goto error


echo
echo ****************************** 
echo ***  26  //   C(R) / C(S) to T      Ordinary - rounded
echo ***           0 div
echo *** 

dep 1101 00 0 0 0000 0000 0000
dep 1102 12 0 0 0000 0000 0002

dep 1103 00 0 0 0000 0000 0000

dep 1000 12 26 1101 1102 0000
dep 1001 08 70 0000 1103 1111

call exec
call exec0 
if (V!=1111) goto error

echo
echo ****************************** 
echo ***  26  //   C(R) / C(S) to T      Ordinary - rounded
echo ***           div by zero +  "Program Check" set to proceed
echo *** 

dep 1101 12 0 0 0000 0000 1111
dep 1102 00 0 0 0000 0000 0000

dep 1103 00 0 0 0000 0000 0000

dep 1000 12 26 1101 1102 0000
dep 1001 08 70 0000 1103 1111

switch "Program Check" to proceed

call exec
call exec0 
if (V!=1111) goto error

echo
echo ****************************** 
echo ***  Tape Opcodes
echo ***           

att mt1 -q -n mt1.tap
switch "Program Check" to stop
switch "Tape address 01" to MT1

echo
echo ****************************** 
echo ***  90-94  // write - read on tape P addr S to R as block T
echo ***            block num 100, 2 words len
echo *** 

dep 1201 00 0 0 0000 0000 0000
dep 1202 00 0 0 0000 0000 0000

dep 1101 12 0 0 0000 0000 1111
dep 1102 00 0 0 0000 2222 0000

set mt1 rew

dep tchk 0
dep 1000 01 90 1101 1102 0100
call exec
if (tchk) goto err

set mt1 rew

dep 1000 01 94 1201 1202 0100
call exec
if (tchk) goto err

dep 1000 08 70 1201 1101 1111
call exec
if (V!=1111) goto error
dep 1000 08 70 1202 1102 1111
call exec
if (V!=1111) goto error

echo
echo ****************************** 
echo ***  90-95  // write - read backward on tape P addr S to R as block T
echo ***            block num 100, 2 words len
echo *** 

dep 1201 00 0 0 0000 0000 0000
dep 1202 00 0 0 0000 0000 0000

dep 1101 12 0 0 3333 0000 1111
dep 1102 00 1 2 4444 2222 0000

set mt1 rew

dep tchk 0
dep 1000 01 90 1101 1102 0100
call exec
if (tchk) goto err

dep 1000 01 95 1202 1201 0100
call exec
if (tchk) goto err

dep 1000 08 70 1201 1101 1111
call exec
if (V!=1111) goto error
dep 1000 08 70 1202 1102 1111
call exec
if (V!=1111) goto error

echo
echo ****************************** 
echo ***  90-95  // write - read backward on tape P addr S to R as block T
echo ***            block num 100, 2 words len, no block len specied
echo *** 

dep 1201 00 0 0 0000 0000 0000
dep 1202 00 0 0 0000 0000 0000

dep 1101 12 0 0 3333 0000 1111
dep 1102 00 1 2 4444 2222 0000

set mt1 rew

dep tchk 0
dep 1000 01 90 1101 1102 0100
call exec
if (tchk) goto err

dep 1000 01 95 1202 0000 0100
call exec
if (tchk) goto err

dep 1000 08 70 1201 1101 1111
call exec
if (V!=1111) goto error
dep 1000 08 70 1202 1102 1111
call exec
if (V!=1111) goto error


echo
echo ****************************** 
echo ***  90-96  // write - verify on tape P addr S to R as block T
echo ***            block num 100, 2 words len
echo *** 

dep 1201 00 0 0 0000 0000 0000
dep 1202 00 0 0 0000 0000 0000

dep 1101 12 0 0 0000 0000 1111
dep 1102 00 0 0 0000 2222 0000

set mt1 rew

dep tchk 0
dep 1000 01 90 1101 1102 0100
call exec
if (tchk) goto err

set mt1 rew

dep 1000 01 96 1201 1202 0100
call exec
if (tchk) goto err

echo
echo ****************************** 
echo ***  90-97  // write - verify backward on tape P addr S to R as block T
echo ***            block num 100, 2 words len
echo *** 

dep 1201 00 0 0 0000 0000 0000
dep 1202 00 0 0 0000 0000 0000

dep 1101 12 0 0 3333 0000 1111
dep 1102 00 1 2 4444 2222 0000

set mt1 rew

dep tchk 0
dep 1000 01 90 1101 1102 0100
call exec
if (tchk) goto err

dep 1000 01 97 1202 1201 0100
call exec
if (tchk) goto err

echo
echo ****************************** 
echo ***  90-94  // write + Write Output switch - read on tape P addr S to R as block T
echo ***            block num 100, 300 words len, read any block, any block length
echo *** 

dep 1201 00 0 0 0000 0000 0000
dep 1202 00 0 0 0000 0000 0000

dep 1101 12 0 0 0000 0000 1111
dep 1102 00 0 0 0000 2222 0000

set mt1 rew
switch "Write Output" to on

dep tchk 0
dep 1000 01 90 1101 1300 0100
call exec
if (tchk) goto err

set mt1 rew

dep 1000 01 94 1201 0000 0000
call exec
if (tchk) goto err

dep 1000 08 70 1201 1101 1111
call exec
if (V!=1111) goto error
dep 1000 08 70 1202 1102 1111
call exec
if (V!=1111) goto error

echo
echo ****************************** 
echo ***  91-94  // write Output - read on tape P addr S to R as block T
echo ***            block num 100, 300 words len, read any block, any block length
echo *** 

dep 1201 00 0 0 0000 0000 0000
dep 1202 00 0 0 0000 0000 0000

dep 1101 12 0 0 0000 0000 1111
dep 1102 00 0 0 0000 2222 0000

set mt1 rew
switch "Write Output" to off

dep tchk 0
dep 1000 01 91 1101 1300 0100
call exec
if (tchk) goto err

set mt1 rew

dep 1000 01 94 1201 0000 0000
call exec
if (tchk) goto err

dep 1000 08 70 1201 1101 1111
call exec
if (V!=1111) goto error
dep 1000 08 70 1202 1102 1111
call exec
if (V!=1111) goto error

echo
echo ****************************** 
echo ***  90-98-94  // write - rewind - read on tape P addr S to R as block T
echo ***               block num 100, 2 words len
echo *** 

dep 1201 00 0 0 0000 0000 0000
dep 1202 00 0 0 0000 0000 0000

dep 1101 12 0 0 0000 0000 1111
dep 1102 00 0 0 0000 2222 0000

set mt1 rew

dep tchk 0
dep 1000 01 90 1101 1102 0100
call exec
if (tchk) goto err

dep 1000 01 98 0000 0000 0000
call exec
if (tchk) goto err

dep 1000 01 94 1201 1202 0100
call exec
if (tchk) goto err

dep 1000 08 70 1201 1101 1111
call exec
if (V!=1111) goto error
dep 1000 08 70 1202 1102 1111
call exec
if (V!=1111) goto error


det all
del -q mt1.tap


echo
echo ****************************** 
echo ***  fast loop to measure speed
echo *** 

set nodebug

dep 1000 60 1010 0000 0000
dep 1001 41 0000 1011 0000
dep 1002 63 1001 1001 0000
dep 1003 61 0000 0000 0000

dep 1010 00 0000 0002 0000
dep 1011 00 0000 0000 0001

dep V 1000
go

sh cpu speed

echo
echo All opcodes OK
echo ****************************** 
echo 

return

:end
exit 1
