* NAM BOOT
*
* BASED ON BOOT CP/68 PROGRAM FOR ICOM 8 INCH FLOPPY DISK PROGRAM BY J. HEMENWAY 1979
* 
* MODIFIED BY ROBERTO SANCHO TO SUPPORT MF68 DISKS ON SWTPC SIMH EMULATION
* APR/2022
*
* DISK GEOMETRY: 35 TRACKS X 18 SECTORS X 128 BYTES
* TRACK 0 HAS SECTORS NUMBERED 0,2..18 (NO SECTOR ONE, FIRST SECTOR IS ZERO).
* TRACK 1..34 HAS SECTORS NUMBERED 1,2..18
* THIS IS THE SAME LAYOUT AS FLEX 1.0 ON MF68 
*
* TRACK 0: SECTOR 0,2,3: HOLDS BOOT PROGRAM
* TRACK 0: SECTOR 4..18: DIRECTORY
* TRACK 1..34: DATA SECTORS FOR FILES
*
FDRSC  EQU $0B    RESTORE
FDSKI  EQU $1B    SEEK
FDRDC  EQU $8C    READ A SECTOR

DRVREG EQU $8014  DRIVE REGISTER
CMDREG EQU $8018  COMMAND REGISTER  
TRKREG EQU $8019  TRACK REGISTER
SECREG EQU $801A  SECTOR REGISTER
DATREG EQU $801B  DATA REGISTER
*
* BOOT BEGIN HERE
*
       ORG $2400
*       
START  JSR DRIVE     SETUP DRIVE 0
       LDA A #FDRSC  ISSUE RESTORE COMMAND
       STA A CMDREG
       JSR DEL30U    30 USEC DELAY
START2 LDA A CMDREG
       BIT A #1      BUSY?
       BNE START2    YES
*
* NOW GET SYSTEM LINK INFORMATION
*
       LDA A #3      SECTOR=3
       LDA B #0      TRACK=0        
       LDX #BUFFER
       JSR RDSEC     READ LINK SECTOR
       LDX #BUFFER+4
       STX INDEX     INIT BUFFER INDEX
       LDX #BUFFER
       LDA B 124,X   GET LAST TRACK
       LDA A 125,X   GET LAST SECTOR
       STA B LTS
       STA A LTS+1
       LDA B 122,X   GET FIRST TRACK
       BEQ NOTLNK    BR TO NOT LINKED ERROR MSG
       LDA A 123,X   GET FIRST SECTOR
       STA B FTS
       STA A FTS+1
       JSR RDSEC     READ FIRST SECTOR
*
* NOW LOAD SYSTEM FILE INTO MEMORY
*
BOOT1  BSR GETBYT    GET A DATA BYTE FROM FILE
       CMP A #$16    TRANSFER-ADDRESS?
       BNE BOOT2     NO
       BSR GETBYT
       STA A ADDRES  GET TRANSFER ADDRESS
       BSR GETBYT
       STA A ADDRES+1
       BRA BOOT1     GET NEW DATA FRAME
*       
NOTLNK LDX #NBMSG          MESSAGE NOT LINKED
       JMP PRERR           GO TO PRINT IT AND EXIT       
*
BOOT2  CMP A #$02    DATA FRAME?
       BNE BOOT4     NO
       BSR GETBYT
       STA A SAVEX   GET ADDRESS
       BSR GETBYT
       STA A SAVEX+1
       BSR GETBYT
       STA A FCNT    GET FRAME COUNTER
BOOT3  BSR GETBYT    GET DATA BYTE
       LDX SAVEX
       STA A 0,X     STORE BYTE
       INX
       STX SAVEX
       DEC FCNT
       BNE BOOT3
       BRA BOOT1     GET NEW DATA FRAME
*
BOOT4  LDX ADDRES    GET TRANSFER ADDRESS
       JMP 0,X       GO THERE
*
* READ A DATA BYTE FROM SYSTEM FILE
* RETURN BYTE IN A REGISTER
*
GETBYT LDX INDEX
       CPX #BUFFER+128   NEED NEW SECTOR?
       BEQ GETSEC        YES
GETB1  LDA A 0,X         GET BYTE 
       INX
       STX INDEX         MOVE POINTER
       RTS
GETSEC LDA B FTS         CURRENT TRACK
       LDA A FTS+1       CURRENT SECTOR
       CMP A LTS+1       CHECK FOR LAST SECTOR 
       BNE GETS2         NOT LAST
       CMP B LTS
       BNE GETS2         NOT LAST
       BRA BOOT4         EOF-GOTO TRANSFER ADDRESS
GETS2  LDX #BUFFER
       LDA B 0,X         GET FWD LINK TRACK
       LDA A 1,X         GET FWD LINK SECTOR
       STA B FTS         UPDATE CURRENT T/S
       STA A FTS+1
       BSR RDSEC
       LDX #BUFFER+4
       BRA GETB1
*
* SINGLE SECTOR READ ROUTINE
*
* DRIVE=0, TRACK=B, SECTOR=A, BUFFER=X
*
RDSEC  PSH A          SAVE SECTOR
       PSH B          SAVE TRACK
       STX SAVEX2     SAVE BUFFER POINTER
       JSR DRIVE      SETUP DRIVE 0
       LDX SAVEX2     RESTORE BUFFER POINTER
       LDA A #5       FIVE RETRIES
       STA A RCNT
RDSEC2 PUL B          GET TRACK
       PUL A          GET SECTOR
       LDX SAVEX2     GET BUFFER ADRESS
       PSH A
       PSH B          PUT BACK ON STACK 
RDSEC3 JSR SEEK
       LDA A #FDRDC   READ COMMAND
       STA A CMDREG
       JSR DEL30U     30 USEC WAIT
       LDA B #128     SECTOR SIZE=128
READ1  LDA A CMDREG
       BIT A #$02     DATA REG FULL?
       BNE READ2      YES
       BIT A #1       BUSY?
       BNE READ1      YES
       BRA READ3      ERROR
READ2  LDA A DATREG   GET A BYTE
       STA A 0,X      STORE IN BUFFER
       INX
       DEC B
       BNE READ1      DO AGAIN
READ3  LDA A CMDREG
       BIT A #1       BUSY?
       BNE READ3      YES
READ4  AND A #$1C     MASK OF STATUS BITS
       BEQ READ5      GOOD?
       DEC RCNT       NO, TRY AGAIN?
       BNE RDSEC2
QUIT   JMP ERROR      FAILED 5 TIMES, ERROR
READ5  PUL B          CLEAN STACK
       PUL A
       RTS            GOOD READ
*
* SEEK TRACK=B, SECTOR=A
*
SEEK   CMP B TRKREG   ON TRACK?
       BEQ SEEK2      YES
       STA B DATREG   NO
       BSR DEL30U
       LDA B #FDSKI   SEEK COMMAND
       STA B CMDREG
       BSR DEL30U
SEEK1  LDA B CMDREG
       BIT B #1       BUSY?
       BNE SEEK1      WAIT UNTIL DONE
SEEK2  STA A SECREG   SET SECTOR
*
* 30 USEC DELAY  FOR CONTROLLER CHIP
*
DEL30U INX
       DEX
       INX
       DEX
       INX
       DEX
       INX
       DEX
       RTS
*
* SELECT DRIVE 0
*
DRIVE  LDA B CMDREG
       AND B #$80     READY? 
       BEQ DRIVE1     YES
       LDX #0000
DRV0   INX
       BNE DRV0
DRV1   INX
       BNE DRV1
       LDA B CMDREG
       AND B #$80     READY?
       BEQ DRIVE1     YES
DRIVE0 JMP ERROR      NO, ERROR
DRIVE1 CLR DRVREG     SET DRIVE=0
       BRA DEL30U
*
* ERROR
*
ERROR  LDX #EMSG
PRERR  JSR $E07E      DISPLAY ERROR MSG USING SWTBUG PRINT STRING ROUTINE (PDATA1) 
       JMP $E113      GO TO SWTBUG PROMPT
EMSG   FCC 'DISK ERROR'
       FCB $0D,$0A,$04
NBMSG  FCC 'NOT LINKED'
       FCB $0D,$0A,$04

       FCB 0,0,0,0,0,0,0,0       FILL WITH ZEROS TO CHECK NOT EXCEDDING 3x128-2 BYTES
       FCB 0,0,0,0,0,0,0,0       FOR BOOT PROGRAM 
       FCB 0,0,0,0,0,0,0,0
       
*
* ENTRY POINT WHEN EXECUTED AS A CP68 TRANSIENT COMMAND
*
CSTART LDX #PRERR2    CHANGE PRERR CALL FROM SWTBUG PRINT STRING ROUTINE TO PRERR2 
       STX PRERR+1 
       JMP START      NORMAL START 
PRERR2 SWI PRTMSG     PRINT STRING USING CP68 SVC CALL
        FCB $31       
       SWI WARMS      CP68 WARM START
        FCB $1F
       
*
* VARIABLES:
*
BUFFER RMB 128   SECTOR BUFFER
FTS    RMB 2     CURRENT T/S 
LTS    RMB 2     LAST T/S
INDEX  RMB 2     PTR TO NEXT BYTE TO GET FROM SECTOR BUFFER
SAVEX  RMB 2     TEMP
SAVEX2 RMB 2     TEMP
ADDRES RMB 2     TRANSFER ADDRES (BOOTED PROG ENTRY POINT)
FCNT   RMB 1     COUNT OF BYTES IN LOADED PROG FRAME
RCNT   RMB 1     RETRY COUNT
       
       END







