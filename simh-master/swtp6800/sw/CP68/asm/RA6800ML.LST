                          ;        NAM ASM RESIDENT MACRO ASSEMBLER
                          *              (RELOCATING AND LINKING)
                          *              VERSION 1.0
                          *
                          * C.COPYRIGHT 1977 JACK E. HEMENWAY
                          * BOSTON MASS. ALL RIGHTS RESERVED
                          *
                          * MODIFIED BY ROBERTO SANCHO TO
                          * BE USED UNDER CP/68 OPERATING SYSTEM
                          * AND SIMH SWTPC MF68 DISK SIMULATOR
                          * (C) APR 2022
                          *
2000:                            ORG $2000
2000:                     *
2000:                     *     KEEP CP68 STACK POINTER
2000:                     *     DO NO ISSUE: LDS #$A042
2000:                     *
2000: 7E 23 8B                   JMP PASS1
2003:                     *
2003:                     * MNTAB MNEMONIC TABLE *
2003:                     *
2003: 41 42 41            MNTAB  FCC 'ABA'
2006: 30 6A                      FDB ADDR9
2008: 1B                         FCB $1B
2009: 41 44 43                   FCC 'ADC'
200C: 2E 00                      FDB ADDR1
200E: 09                         FCB $09
200F: 41 44 44                   FCC 'ADD'
2012: 2E 00                      FDB ADDR1
2014: 0B                         FCB $0B
2015: 41 4E 44                   FCC 'AND'
2018: 2E 00                      FDB ADDR1
201A: 04                         FCB $04
201B: 41 53 4C                   FCC 'ASL'
201E: 2E F9                      FDB ADDR3
2020: 08                         FCB $08
2021: 41 53 52                   FCC 'ASR'
2024: 2E F9                      FDB ADDR3
2026: 07                         FCB $07
2027: 42 43 43                   FCC 'BCC'
202A: 30 19                      FDB ADDR8
202C: 24                         FCB $24
202D: 42 43 53                   FCC 'BCS'
2030: 30 19                      FDB ADDR8
2032: 25                         FCB $25
2033: 42 45 51                   FCC 'BEQ'
2036: 30 19                      FDB ADDR8
2038: 27                         FCB $27
2039: 42 47 45                   FCC 'BGE'
203C: 30 19                      FDB ADDR8
203E: 2C                         FCB $2C
203F: 42 47 54                   FCC 'BGT'
2042: 30 19                      FDB ADDR8
2044: 2E                         FCB $2E
2045: 42 48 49                   FCC 'BHI'
2048: 30 19                      FDB ADDR8
204A: 22                         FCB $22
204B: 42 49 54                   FCC 'BIT'
204E: 2E 00                      FDB ADDR1
2050: 05                         FCB $05
2051: 42 4C 45                   FCC 'BLE'
2054: 30 19                      FDB ADDR8
2056: 2F                         FCB $2F
2057: 42 4C 53                   FCC 'BLS'
205A: 30 19                      FDB ADDR8
205C: 23                         FCB $23
205D: 42 4C 54                   FCC 'BLT'
2060: 30 19                      FDB ADDR8
2062: 2D                         FCB $2D
2063: 42 4D 49                   FCC 'BMI'
2066: 30 19                      FDB ADDR8
2068: 2B                         FCB $2B
2069: 42 4E 45                   FCC 'BNE'
206C: 30 19                      FDB ADDR8
206E: 26                         FCB $26
206F: 42 50 4C                   FCC 'BPL'
2072: 30 19                      FDB ADDR8
2074: 2A                         FCB $2A
2075: 42 52 41                   FCC 'BRA'
2078: 30 19                      FDB ADDR8
207A: 20                         FCB $20
207B: 42 53 52                   FCC 'BSR'
207E: 30 19                      FDB ADDR8
2080: 8D                         FCB $8D
2081: 42 56 53                   FCC 'BVS'
2084: 30 19                      FDB ADDR8
2086: 28                         FCB $28
2087: 42 56 53                   FCC 'BVS'
208A: 30 19                      FDB ADDR8
208C: 29                         FCB $29
208D: 43 42 41                   FCC 'CBA'
2090: 30 6A                      FDB ADDR9
2092: 11                         FCB $11
2093: 43 4C 43                   FCC 'CLC'
2096: 30 6A                      FDB ADDR9
2098: 0C                         FCB $0C
2099: 43 4C 49                   FCC 'CLI'
209C: 30 6A                      FDB ADDR9
209E: 0E                         FCB $0E
209F: 43 4C 52                   FCC 'CLR'
20A2: 2E F9                      FDB ADDR3
20A4: 0F                         FCB $0F
20A5: 43 4C 56                   FCC 'CLV'
20A8: 30 6A                      FDB ADDR9
20AA: 0A                         FCB $0A
20AB: 43 4D 4E                   FCC 'CMN'
20AE: 31 D4                      FDB POCMN
20B0: FF                         FCB $FF
20B1: 43 4D 50                   FCC 'CMP'
20B4: 2E 00                      FDB ADDR1
20B6: 01                         FCB $01
20B7: 43 4F 4D                   FCC 'COM'
20BA: 2E F9                      FDB ADDR3
20BC: 03                         FCB $03
20BD: 43 50 58                   FCC 'CPX'
20C0: 2F 68                      FDB ADDR5
20C2: 8C                         FCB $8C
20C3: 44 41 41                   FCC 'DAA'
20C6: 30 6A                      FDB ADDR9
20C8: 19                         FCB $19
20C9: 44 45 43                   FCC 'DEC'
20CC: 2E F9                      FDB ADDR3
20CE: 0A                         FCB $0A
20CF: 44 45 53                   FCC 'DES'
20D2: 30 6A                      FDB ADDR9
20D4: 34                         FCB $34
20D5: 44 45 58                   FCC 'DEX'
20D8: 30 6A                      FDB ADDR9
20DA: 09                         FCB $09
20DB: 45 4E 44                   FCC 'END'
20DE: 32 4E                      FDB POEND
20E0: FF                         FCB $FF
20E1: 45 4E 54                   FCC 'ENT'
20E4: 33 D8                      FDB POENT
20E6: FF                         FCB $FF
20E7: 45 4F 52                   FCC 'EOR'
20EA: 2E 00                      FDB ADDR1
20EC: 08                         FCB $08
20ED: 45 51 55                   FCC 'EQU'
20F0: 34 51                      FDB POEQU
20F2: FF                         FCB $FF
20F3: 45 58 54                   FCC 'EXT'
20F6: 34 AF                      FDB POEXT
20F8: FF                         FCB $FF
20F9: 46 43 42                   FCC 'FCB'
20FC: 35 11                      FDB POFCB
20FE: FF                         FCB $FF
20FF: 46 43 43                   FCC 'FCC'
2102: 35 46                      FDB POFCC
2104: FF                         FCB $FF
2105: 46 44 42                   FCC 'FDB'
2108: 35 9D                      FDB POFDB
210A: FF                         FCB $FF
210B: 49 46 20                   FCC 'IF '
210E: 35 F1                      FDB POIF
2110: FF                         FCB $FF
2111: 49 4E 43                   FCC 'INC'
2114: 2E F9                      FDB ADDR3
2116: 0C                         FCB $0C
2117: 49 4E 53                   FCC 'INS'
211A: 30 6A                      FDB ADDR9
211C: 31                         FCB $31
211D: 49 4E 58                   FCC 'INX'
2120: 30 6A                      FDB ADDR9
2122: 08                         FCB $08
2123: 4A 4D 50                   FCC 'JMP'
2126: 2F E6                      FDB ADDR7
2128: 6E                         FCB $6E
2129: 4A 53 52                   FCC 'JSR'
212C: 2F E6                      FDB ADDR7
212E: AD                         FCB $AD
212F: 4C 44 41                   FCC 'LDA'
2132: 2E 00                      FDB ADDR1
2134: 06                         FCB $06
2135: 4C 44 53                   FCC 'LDS'
2138: 2F 68                      FDB ADDR5
213A: 8E                         FCB $8E
213B: 4C 44 58                   FCC 'LDX'
213E: 2F 68                      FDB ADDR5
2140: CE                         FCB $CE
2141: 4C 53 52                   FCC 'LSR'
2144: 2E F9                      FDB ADDR3
2146: 04                         FCB $04
2147: 4D 41 43                   FCC 'MAC'
214A: 36 31                      FDB POMAC
214C: FF                         FCB $FF
214D: 4E 41 4D                   FCC 'NAM'
2150: 37 26                      FDB PONAM
2152: FF                         FCB $FF
2153: 4E 45 47                   FCC 'NEG'
2156: 2E F9                      FDB ADDR3
2158: 00                         FCB $00
2159: 4E 49 46                   FCC 'NIF'
215C: 37 5B                      FDB PONIF
215E: FF                         FCB $FF
215F: 4E 4F 50                   FCC 'NOP'
2162: 30 6A                      FDB ADDR9
2164: 02                         FCB $02
2165: 4F 52 41                   FCC 'ORA'
2168: 2E 00                      FDB ADDR1
216A: 0A                         FCB $0A
216B: 50 41 47                   FCC 'PAG'
216E: 37 A0                      FDB POPAG
2170: FF                         FCB $FF
2171: 50 53 48                   FCC 'PSH'
2174: 2F 48                      FDB ADDR4
2176: 36                         FCB $36
2177: 50 55 4C                   FCC 'PUL'
217A: 2F 48                      FDB ADDR4
217C: 32                         FCB $32
217D: 52 4D 42                   FCC 'RMB'
2180: 37 C1                      FDB PORMB
2182: FF                         FCB $FF
2183: 52 4F 4C                   FCC 'ROL'
2186: 2E F9                      FDB ADDR3
2188: 09                         FCB $09
2189: 52 4F 52                   FCC 'ROR'
218C: 2E F9                      FDB ADDR3
218E: 06                         FCB $06
218F: 52 54 49                   FCC 'RTI'
2192: 30 6A                      FDB ADDR9
2194: 3B                         FCB $3B
2195: 52 54 53                   FCC 'RTS'
2198: 30 6A                      FDB ADDR9
219A: 39                         FCB $39
219B: 53 42 41                   FCC 'SBA'
219E: 30 6A                      FDB ADDR9
21A0: 10                         FCB $10
21A1: 53 42 43                   FCC 'SBC'
21A4: 2E 00                      FDB ADDR1
21A6: 02                         FCB $02
21A7: 53 45 43                   FCC 'SEC'
21AA: 30 6A                      FDB ADDR9
21AC: 0D                         FCB $0D
21AD: 53 45 49                   FCC 'SEI'
21B0: 30 6A                      FDB ADDR9
21B2: 09                         FCB $09
21B3: 53 45 56                   FCC 'SEV'
21B6: 30 6A                      FDB ADDR9
21B8: 0B                         FCB $0B
21B9: 53 54 41                   FCC 'STA'
21BC: 2E 91                      FDB ADDR2
21BE: 07                         FCB $07
21BF: 53 54 53                   FCC 'STS'
21C2: 2F DA                      FDB ADDR6
21C4: 8F                         FCB $8F
21C5: 53 54 58                   FCC 'STX'
21C8: 2F DA                      FDB ADDR6
21CA: CF                         FCB $CF
21CB: 53 55 42                   FCC 'SUB'
21CE: 2E 00                      FDB ADDR1
21D0: 00                         FCB $00
21D1: 53 57 49                   FCC 'SWI'
21D4: 30 6A                      FDB ADDR9
21D6: 3F                         FCB $3F
21D7: 54 41 42                   FCC 'TAB'
21DA: 30 6A                      FDB ADDR9
21DC: 16                         FCB $16
21DD: 54 41 50                   FCC 'TAP'
21E0: 30 6A                      FDB ADDR9
21E2: 06                         FCB $06
21E3: 54 42 41                   FCC 'TBA'
21E6: 30 6A                      FDB ADDR9
21E8: 17                         FCB $17
21E9: 54 50 41                   FCC 'TPA'
21EC: 30 6A                      FDB ADDR9
21EE: 07                         FCB $07
21EF: 54 53 54                   FCC 'TST'
21F2: 2E F9                      FDB ADDR3
21F4: 0D                         FCB $0D
21F5: 54 53 58                   FCC 'TSX'
21F8: 30 6A                      FDB ADDR9
21FA: 30                         FCB $30
21FB: 54 58 53                   FCC 'TXS'
21FE: 30 6A                      FDB ADDR9
2200: 35                         FCB $35
2201: 57 41 49                   FCC 'WAI'
2204: 30 6A                      FDB ADDR9
2206: 3E                         FCB $3E
2207:                     * CHARACTER TABLE
2207:                     *
2207: 00                  CHRTAB FCB $00 SPACE  
2208: 00                         FCB $00 !
2209: 00                         FCB $00 "
220A: 04                         FCB $04 #
220B: 04                         FCB $04 $
220C: 04                         FCB $04 %
220D: 00                         FCB $00 &
220E: 04                         FCB $04 '
220F: 00                         FCB $00 (
2210: 00                         FCB $00 )
2211: 24                         FCB $24 *
2212: 24                         FCB $24 +
2213: 04                         FCB $04 ,
2214: 24                         FCB $24 -
2215: 80                         FCB $80 .
2216: 24                         FCB $24 /
2217: 42                         FCB $42 0
2218: 42                         FCB $42 1
2219: 42                         FCB $42 2
221A: 42                         FCB $42 3
221B: 42                         FCB $42 4
221C: 42                         FCB $42 5
221D: 42                         FCB $42 6
221E: 42                         FCB $42 7
221F: 42                         FCB $42 8
2220: 42                         FCB $42 9
2221: 00                         FCB $00 :
2222: 00                         FCB $00 ;
2223: 00                         FCB $00 <
2224: 00                         FCB $00 =
2225: 00                         FCB $00 >
2226: 00                         FCB $00 ?
2227: 80                         FCB $80 @
2228: 83                         FCB $83 A
2229: 83                         FCB $83 B
222A: 82                         FCB $82 C
222B: 82                         FCB $82 D
222C: 82                         FCB $82 E
222D: 82                         FCB $82 F
222E: 80                         FCB $80 G
222F: 80                         FCB $80 H
2230: 80                         FCB $80 I
2231: 80                         FCB $80 J
2232: 80                         FCB $80 K
2233: 80                         FCB $80 L
2234: 80                         FCB $80 M
2235: 80                         FCB $80 N
2236: 80                         FCB $80 O
2237: 80                         FCB $80 P
2238: 80                         FCB $80 Q
2239: 80                         FCB $80 R
223A: 80                         FCB $80 S
223B: 80                         FCB $80 T
223C: 80                         FCB $80 U
223D: 80                         FCB $80 V
223E: 80                         FCB $80 W
223F: 81                         FCB $81 X
2240: 80                         FCB $80 Y
2241: 80                         FCB $80 Z
2242: 00                         FCB $00 [
2243: 00                         FCB $00 BACK SLASH
2244: 00                         FCB $00 ]
2245: 00                         FCB $00 CAROT
2246: 00                         FCB $00 UNDERLINE
2247:                     *
2247:                     * MAIN PROGRAM LOOP
2247:                     *
2247:                     *
2247: 7E 3B EC            TABLES JMP ETABL    ENT TABLES  
224A: 7E 39 0C            UPDATE JMP EUPDT    ENT UPDATE
224D: 7E 39 19            MONTOR JMP EMON     ENT MONTOR
2250: 7E 38 E5            GETB   JMP EGETB    ENT GETB
2253: 7E 38 E8            OUTB   JMP EOUTB    ENT OUTB   
2256: 7E 39 08            WREOF  JMP EWREOF   ENT WREOF
2259: 7E 38 A0            INITIO JMP EINIIO   ENT INITIO
225C: 7E 39 09            RESTR  JMP EREST    ENT RESTR
225F:                     *
225F:                            ENT PDATA1
225F:                            ENT INEEE
225F:                            ENT CRLF
225F:                     *             
225F:                     MACTBL RMB 2 MACRO TABLE
2261:                     MACEND RMB 2 MACRO TABLE END
2263:                     MACSTK RMB 2 MACRO STACK
2265:                     SYMTAB RMB 2 SYMBOL TABLE
2267:                     NSYM   RMB 2 NUMBER OF SYMBOLS
2269:                     SYMEND RMB 2 SYMTAB END
226B:                     *
226B:                     *
226B:                     OPTNS  RMB 1  OPTIONS
226C:                     LNUM   RMB 2  LINE NUMBER
226E:                     TSTPH  RMB 2  PHASING ERR CHECK LOC
2270:                     LC     RMB 2  LOCATION COUNTER
2272:                     PASS   RMB 1
2273:                     LBFLG  RMB 1  LABEL FLAG
2274:                     RELFLG RMB 1  RELOCATION FLAG
2275:                     CMNFLG RMB 1  COMMON FLAG
2276:                     EXTFLG RMB 1  EXTERNAL FLAG
2277:                     ENTFLG RMB 1  ENTRY FLAG
2278:                     DESCRA RMB 2  DESCRIPTOR ADDRESS
227A:                     DESCRC RMB 1  DESCRIPTOR COUNT
227B:                     CUCHAR RMB 2  CURRENT CHARACTER ADDRESS
227D:                     CULINE RMB 2  CURRENT LINE ADDRESS
227F:                     SYMPTR RMB 2  SYMBOL TABLE POINTER
2281:                     LCN    RMB 1  # OF IN INSTRUCTION
2282:                     LSAVE  RMB 2  LC SAVE ADDRESS
2284:                     LCOUNT RMB 1  # OF LINE ON A PAGE
2285:                     ECOUNT RMB 2  ERROR COUNT
2287:                     MSTKPT RMB 2  MACRO STACK POINTER
2289:                     STKSAV RMB 2  MACSTK POINTER SAVE
228B:                     MXSAV1 RMB 2  MACRO TEMP SAVE
228D:                     MXSAV2 RMB 2  MACRO TEMP SAVE
228F:                     MACLIN RMB 72 MACRO EXPANSION LINE AREA
22D7:                     MACPAR RMB 50 MACRO PARAMETER AREA
2309:                     MACFLG RMB 1  MACRO FLAG
230A:                     MACPTR RMB 2  POINTER TO MACRO TABLE
230C:                     MACSAV RMB 2  MACRO X REG SAVE AREA
230E:                     MCLPTR RMB 2  MACLIN POINTER
2310:                     CMNLC  RMB 2  COMMON BLOCK LC
2312:                     INLINE RMB 80 INPUT LINE
2362:                            RMB 16 
2372: =$2372               IFSTK  EQU *  IF STACK
2372:                     IFSTKP RMB 2  IF STACK POINTER
2374:                     IFFLG  RMB 1  IF FLAG
2375:                     *
2375: 45 4E 54 45 52 20   OPTMSG FCC 'ENTER OPTIONS: '      
237B: 4F 50 54 49 4F 4E 
2381: 53 3A 20          
2384: 04                         FCB 4
2385:                     *
2385:                     *
2385: 7E 3B E6            INEEE  JMP EINCH   INPUT A CHAR FROM TTY
2388: 7E 3B E9            OUTEEE JMP EOUTCH  OUTPUT A CHAR TO TTY
238B:                     *
238B:                     *
238B:                     *
238B:                     *
238B:                     * PASS 1 IS ENTRY POINT TO ASSEMBLER
238B:                     *
238B:                     *
238B: 7F 22 72            PASS1  CLR PASS         PASS := 1
238E: BD 22 59                   JSR INITIO       INIT I/O
2391:                     *       
2391: CE 23 75            OPIN   LDX #OPTMSG      
2394: BD 38 61                   JSR PDATA1       
2397:                     *                      
2397: 7F 22 6B                   CLR OPTNS        
239A: 73 22 6B                   COM OPTNS        NL,NO,NM,NS
239D:                     *                      
239D: BD 23 85            OPIN1  JSR INEEE        GET OPTION
23A0: 81 0D                      CMPA #$0D       CR ?
23A2: 27 26                      BEQ OPIN3        YES
23A4:                     *                      
23A4: 81 4C                      CMPA #'L'        LIST?
23A6: 26 04                      BNE *+6          NO
23A8:                     *                      
23A8: 86 70                      LDAA #$70       YES 
23AA: 20 16                      BRA OPIN2        
23AC:                     *                      
23AC: 81 4F                      CMPA #'O'        OBJECT?
23AE: 26 04                      BNE *+6          NO
23B0:                     *                      
23B0: 86 B0                      LDAA #$B0       YES 
23B2: 20 0E                      BRA OPIN2        
23B4:                     *                      
23B4: 81 53                      CMPA #'S'        SYMBOL TABLE?
23B6: 26 04                      BNE *+6          NO
23B8:                     *                      
23B8: 86 D0                      LDAA #$D0       YES 
23BA: 20 06                      BRA OPIN2        
23BC:                     *                      
23BC: 81 4D                      CMPA #'M'        MACRO EXPANSION LISTING?
23BE: 26 DD                      BNE OPIN1        NO
23C0:                     *                      
23C0: 86 E0                      LDAA #$E0       YES 
23C2:                     *                      
23C2: B4 22 6B            OPIN2  ANDA OPTNS      TURN OFF "NOT" BIT
23C5: B7 22 6B                   STAA OPTNS      
23C8: 20 D3                      BRA OPIN1        GET ANOTHER OPTION
23CA:                     *                      
23CA: BD 33 BE            OPIN3  JSR CRLF         
23CD:                     *                      
23CD:                     * CONFIGURE TABLES     
23CD:                     *                      
23CD: FE 22 48                   LDX TABLES+1     
23D0: EE 00                      LDX 0,X          GET START OF TABLES
23D2: FF 22 5F                   STX MACTBL       INIT MACTBL
23D5:                     *                      
23D5: FF 27 E3                   STX PSTNG1       
23D8: CE 08 00                   LDX #$0800       
23DB: FF 27 E5                   STX PSTNG2       
23DE: CE 27 E3                   LDX #PSTNG1      
23E1: BD 2B EC                   JSR ADD16        
23E4: FE 27 E3                   LDX PSTNG1       
23E7: FF 22 61                   STX MACEND       INIT MACEND 
23EA:                     *                      
23EA: CE 01 00                   LDX #$0100       
23ED: FF 27 E5                   STX PSTNG2       
23F0: CE 27 E3                   LDX #PSTNG1      
23F3: BD 2B EC                   JSR ADD16        
23F6: FE 27 E3                   LDX PSTNG1       
23F9: FF 22 63                   STX MACSTK       INIT MACSTK
23FC:                     *                      
23FC: 08                         INX              
23FD: FF 22 65                   STX SYMTAB       INIT SYMTAB
2400:                     *                      
2400: FF 27 E5                   STX PSTNG2       
2403: CE 7F FF                   LDX #$7FFF       32K SYSTEM
2406: FF 27 E3                   STX PSTNG1       
2409: CE 27 E3                   LDX #PSTNG1      
240C: BD 2B FD                   JSR SUB16        
240F: B6 27 E3                   LDAA PSTNG1     
2412: F6 27 E4                   LDAB PSTNG1+1   
2415: CE 00 09                   LDX #0009        
2418: FF 27 E5                   STX PSTNG2       
241B: CE 27 E5                   LDX #PSTNG2      
241E: BD 2B A1                   JSR DIV16        
2421: B7 22 67                   STAA NSYM       
2424: F7 22 68                   STAB NSYM+1     INIT NSYM (NUMBER OF SYMBOLS)
2427:                     *                      
2427: CE 00 09                   LDX #$0009       
242A: FF 27 E3                   STX PSTNG1       
242D: CE 27 E3                   LDX #PSTNG1      
2430: BD 2B 7D                   JSR MPY16        
2433: B7 27 E3                   STAA PSTNG1     
2436: F7 27 E4                   STAB PSTNG1+1   
2439: FE 22 65                   LDX SYMTAB       
243C: FF 27 E5                   STX PSTNG2       
243F: CE 27 E3                   LDX #PSTNG1      
2442: BD 2B EC                   JSR ADD16        
2445: FE 27 E3                   LDX PSTNG1       
2448: FF 22 69                   STX SYMEND       
244B:                     *
244B: 86 20                      LDAA #$20       BLANKS TO SYMTAB (SYMBOL TABLE)
244D: FE 22 65                   LDX SYMTAB       POINT TO SYMTAB
2450: A7 00                      STAA 0,X        BLANK LOCATION
2452: 08                         INX              BUMP POINTER
2453: BC 22 69                   CPX SYMEND       ALL DONE?
2456: 26 F8                      BNE *-6          NO
2458:                     *                      
2458: CE 00 00                   LDX #$0000       
245B: FF 22 6E                   STX TSTPH        CLEAR TSTPH
245E: FF 22 85                   STX ECOUNT       CLEAR ECOUNT (ERRORS COUNT)
2461: CE 00 00                   LDX #$0000       
2464: FF 23 10                   STX CMNLC        INIT COMMON LC
2467:                     *                      
2467: BD 30 89            PASS2  JSR ADRINT       CLEAR FLAGS
246A: 7F 22 84                   CLR LCOUNT       LCOUNT := 0
246D: FE 22 5F                   LDX MACTBL       INIT MACPTR (MACRO TABLE POINTER)
2470: FF 23 0A                   STX MACPTR       
2473: 7F 23 09                   CLR MACFLG       MODE := NOT-MACRO
2476: FE 22 63                   LDX MACSTK       INIT MACRO STACK POINTER
2479: FF 22 87                   STX MSTKPT       
247C: 86 FF                      LDAA #$FF       
247E: B7 23 74                   STAA IFFLG      INIT TO ASSEMBLE
2481: CE 23 72                   LDX #IFSTK       
2484: FF 23 72                   STX IFSTKP       INIT IFSTK POINTER
2487: CE 00 00                   LDX #$0000       
248A: FF 22 70                   STX LC           INIT LC
248D: FF 22 6C                   STX LNUM         INIT LINE NUMBERS
2490:                     *             
2490:                     * MAIN IS THE DRIVER SECTION OE TOP LEVEL
2490:                     *      OF THE ASSEMBLER
2490:                     *             
2490: BD 25 68            MAIN1  JSR RDLINE       GET A LINE OF SOURCE
2493: 7F 22 73                   CLR LBFLG        SET FLAG TO NO LABEL
2496: FE 22 6C                   LDX LNUM    
2499: 08                         INX         
249A: FF 22 6C                   STX LNUM         BUMP LNUM
249D: FE 22 7D                   LDX CULINE       POINT TO LINE
24A0: A6 00                      LDAA 0,X        GET COL 1
24A2: 81 2A                      CMPA #$2A       COMMENT? (* CHAR)
24A4: 26 08                      BNE MAIN3        NO
24A6:                     *
24A6:                     * HANDLE COMMENT LINE
24A6:                     *
24A6: BD 30 89            MAIN1A JSR ADRINT       CLEAR PRINT FLAGS
24A9: BD 2C 0E                   JSR PRINTL       PRINT THE LINE
24AC: 20 E2                      BRA MAIN1        GET ANOTHER LINE
24AE:                     *                  
24AE: 7D 23 74            MAIN3  TST IFFLG        ASSEMBLING?
24B1: 26 22                      BNE MAIN3C       YES
24B3:                     *                  
24B3: 81 20                      CMPA #$20       COL 1 BLANK?
24B5: 27 03                      BEQ MAIN3A       YES
24B7:                     *                  
24B7: BD 26 F6                   JSR NXTOK        SCAN OVER LABEL
24BA: BD 26 F6            MAIN3A JSR NXTOK        GET MNEMONIC
24BD: B6 22 7A                   LDAA DESCRC     GET COUNT
24C0: 81 03                      CMPA #3         IS <=3?
24C2: 22 E2                      BHI MAIN1A       NO PRINT THE LINE
24C4:                     *                  
24C4: BD 29 40                   JSR MNLKP        SEARCH mbtab (MNEMONICs TABLE)
24C7: 8C 35 F1                   CPX #POIF        IF ?
24CA: 27 07                      BEQ MAIN3B       YES
24CC:                     *                  
24CC: 8C 37 5B                   CPX #PONIF       NIF?
24CF: 27 02                      BEQ MAIN3B       YES
24D1:                     *                  
24D1: 20 D3                      BRA MAIN1A       NEITHER
24D3:                     *                  
24D3: 6E 00               MAIN3B JMP 0,X          GOTO IF OR NIF PROCESSING ROUTINE
24D5:                     *                  
24D5: 81 20               MAIN3C CMPA #$20        COL 1 BLANK?
24D7: 27 1D                      BEQ MAIN5        YES (THERE IS NO LABEL)
24D9:                     *                  
24D9: BD 26 F6                   JSR NXTOK        GET LABEL
24DC: C1 01                      CMPB #$01        OK?
24DE: 27 0B                      BEQ MAIN4        YES
24E0:                     *                  
24E0: CE 02 05                   LDX #$0205       ERROR
24E3: BD 2D BB                   JSR PRINTE   
24E6: BD 2C 0E                   JSR PRINTL       PRINT LINE
24E9: 20 A5                      BRA MAIN1    
24EB:                     *                  
24EB: 7C 22 73            MAIN4  INC LBFLG        SET LABEL FLAG
24EE: 7D 22 72                   TST PASS         PASS?
24F1: 26 03                      BNE MAIN5        PASS2
24F3:                     *                  
24F3: BD 27 F8                   JSR STOSYM       STORE LABEL IN SYMTAB
24F6:                     *                  
24F6: BD 26 F6            MAIN5  JSR NXTOK        GET MNEMONIC
24F9: C1 01                      CMPB #$01        OK?
24FB: 27 0B                      BEQ MAIN7        YES
24FD:                     *                  
24FD: CE 02 02            MAIN6  LDX #$0202       ERROR
2500: BD 2D BB                   JSR PRINTE       
2503: BD 2C 0E                   JSR PRINTL       PRINT LINE
2506: 20 88                      BRA MAIN1    
2508:                     *                  
2508: BD 29 40            MAIN7  JSR MNLKP        SEARCH MBTAB (MNEMONICS TABLE)
250B: 81 00                      CMPA #$00       IN THE MNTAB?
250D: 27 2D                      BEQ MAIN9        YES
250F:                     *                  
250F: BD 28 57                   JSR LKPSYM       MACRO NAME?
2512: C1 FF                      CMPB #$FF       IN SYMTAB?
2514: 27 28                      BEQ MAIN8        NO, ERROR
2516:                     *                  
2516: C5 20                      BITB #$20       MACRO NAME?
2518: 27 24                      BEQ MAIN8        NO, ERROR
251A:                     *                  
251A:                     *                  
251A: 7D 23 09                   TST MACFLG       MACRO MODE?
251D: 27 08                      BEQ MAIN7A       NO
251F:                     *
251F:                     * PUSH PRESENT MACRO ONTO MACSTACK
251F:                     *
251F: BD 26 37                   JSR MACPSH
2522: 7D 23 09                   TST MACFLG       ERRORS?
2525: 27 20                      BEQ MAIN13       YES
2527:                     *                  
2527: FF 23 0A            MAIN7A STX MACPTR       SAVE MACRO LOC IN MACTBL
252A: BD 2C 0E                   JSR PRINTL   
252D: 7C 23 09                   INC MACFLG       MODE := MACRO
2530:                     *                  
2530: BD 26 F6                   JSR NXTOK        PARAM?
2533: C1 0D                      CMPB #$0D    
2535: 26 13                      BNE MAIN12       YES, SAVE THEM
2537:                     *                  
2537: F7 22 D7                   STAB MACPAR     NO, CR TO MACPAR
253A: 20 0B                      BRA MAIN13   
253C:                     *                  
253C: 6E 00               MAIN9  JMP 0,X          GO TO ROUTINE
253E:                     *                  
253E: CE 02 07            MAIN8  LDX #$0207       ERROR
2541: BD 2D BB                   JSR PRINTE       PRINT it
2544: BD 2C 0E            MAIN10 JSR PRINTL       PRINT LINE NUMBER
2547: 7E 24 90            MAIN13 JMP MAIN1        PROCESS NEXT LINE
254A:                     *
254A:                     * MOVE PARAMS ON MACRO CALL TO MACPAR
254A:                     *
254A: CE 22 D7            MAIN12 LDX #MACPAR      
254D: FF 23 0C                   STX MACSAV       INIT POINTER
2550:                     *                    
2550: FE 22 78            MAIN11 LDX DESCRA       POINT TO PARAMS
2553: A6 00                      LDAA 0,X        GET A CHAR
2555: 08                         INX            
2556: FF 22 78                   STX DESCRA       SAVE POINTER
2559:                     *                    
2559: FE 23 0C                   LDX MACSAV       GET POINTER
255C: A7 00                      STAA 0,X        MOVE CHAR
255E: 08                         INX            
255F: FF 23 0C                   STX MACSAV       SAVE POINTER
2562:                     *                    
2562: 81 0D                      CMPA #$0D        EOL?
2564: 26 EA                      BNE MAIN11       NO
2566:                     *                    
2566: 20 DF                      BRA MAIN13       YES
2568:                     *                    
2568:                     * GET A LINE OF SOURCE FROM INBUF *
2568:                     * RETURNS ADDRESS OF LINE IN CULINE *
2568:                     * CUCHAR:=ADDRESS OF FIRST CHARACTER*
2568:                     *                    
2568: 7D 23 09            RDLINE TST MACFLG       MACRO MODE?
256B: 27 09                      BEQ RDLINA       NO
256D:                     *                    
256D: BD 25 A5                   JSR RDMAC        EXPAND MACRO
2570:                     *                    
2570: 7D 23 09                   TST MACFLG       MACRO FULLY EXPANDED?
2573: 27 01                      BEQ RDLINA       YES
2575:                     *                    
2575: 39                         RTS            
2576:                     *                    
2576: CE 23 12            RDLINA LDX #INLINE    
2579: FF 22 7B                   STX CUCHAR     
257C: FF 22 7D                   STX CULINE     
257F:                     *                    
257F: BD 22 50            RDL1   JSR GETB       
2582: 24 06                      BCC RDL1A      
2584:                     *                    
2584: 8E A0 42                   LDS #$A042       FLUSH STACK, EOF
2587: 7E 32 54                   JMP POEND0     
258A:                     *                    
258A: 81 0A               RDL1A  CMPA #$0A       LF?
258C: 27 F1                      BEQ RDL1         YES
258E:                     *                    
258E: 81 00                      CMPA #$00       NULLS?
2590: 27 ED                      BEQ RDL1         YES
2592:                     *                    
2592: 8C 23 61                   CPX #INLINE+79   LINE TO LONG?
2595: 27 05                      BEQ RDL2         YES
2597:                     *                    
2597: A7 00                      STAA 0,X        STORE CHARACTER
2599: 08                         INX            
259A: 20 04                      BRA RDL3       
259C:                     *                    
259C: C6 0D               RDL2   LDAB #$0D       TRUNCATE LINE
259E: E7 00                      STAB 0,X       
25A0:                     *                    
25A0: 81 0D               RDL3   CMPA #$0D       CR?
25A2: 26 DB                      BNE RDL1         NO
25A4:                     *                    
25A4: 39                         RTS            
25A5:                     *                    
25A5:                     * RDMAC: EXPAND MACRO CALLS
25A5:                     *                    
25A5: FE 23 0A            RDMAC  LDX MACPTR     
25A8: A6 00                      LDAA 0,X        GET CHAR
25AA: 81 17                      CMPA #$17       ETB?
25AC: 26 0B                      BNE RDMAC1       NO
25AE:                     *                    
25AE: 7A 23 09                   DEC MACFLG       DEC MODE COUNT
25B1: 27 05                      BEQ RDMAC0       NO MORE MACROS
25B3:                     *                    
25B3:                     * PULL UP LAST MACRO STACKED
25B3:                     *                    
25B3: BD 26 9B                   JSR MACPUL     
25B6: 20 ED                      BRA RDMAC      
25B8:                     *                    
25B8: 39                  RDMAC0 RTS            
25B9:                     *                    
25B9: CE 22 8F            RDMAC1 LDX #MACLIN      POINT TO MACRO EXPANDAREA
25BC: FF 22 7D                   STX CULINE       INIT
25BF: FF 22 7B                   STX CUCHAR       INIT
25C2: FF 23 0E                   STX MCLPTR       INIT
25C5:                     *                    
25C5: FE 23 0A            RDMAC2 LDX MACPTR       POINT TO MACRO DEFINITION
25C8: A6 00                      LDAA 0,X       
25CA: 08                         INX            
25CB:                     *                    
25CB: FF 23 0A                   STX MACPTR     
25CE: 81 26                      CMPA #'&'       MACRO PARM?
25D0: 27 13                      BEQ RDMAC3      YES
25D2:                     *                    
25D2: FE 23 0E                   LDX MCLPTR       POINT TO MACLIN
25D5: A7 00                      STAA 0,X        MOVE CHAR TO MACLIN
25D7: 08                         INX            
25D8: FF 23 0E                   STX MCLPTR       SAVE POINTER
25DB: 8C 22 D6                   CPX #MACLIN+71   OVERFLOW?
25DE: 27 4B                      BEQ RDMERR       YES
25E0:                     *                    
25E0: 81 0D                      CMPA #$0D       EOL?
25E2: 26 E1                      BNE RDMAC2       NO
25E4: 39                         RTS              ALL DONE
25E5:                     *                    
25E5:                     * SUBSTITUTE POSITIONAL PARAMS
25E5:                     *                    
25E5: E6 00               RDMAC3 LDAB 0,X        GET POSITIONAL # OF PARAM
25E7: 80 2F                      SUBA #$2F       CONVERT TO BINARY
25E9: 08                         INX              SKIP OVER POS#
25EA: FF 23 0A                   STX MACPTR     
25ED: CE 22 D7                   LDX #MACPAR      POINT TO PARMS FROM CALL
25F0:                     *                    
25F0:                     * SCAN OVER PARAMS   
25F0:                     *                    
25F0: FF 23 0C            RDMAC6 STX MACSAV       SAVE
25F3:                     *                    
25F3: A6 00               RDMAC4 LDAA 0,X       GET A CHARACTER
25F5: 08                         INX            
25F6: 81 2C                      CMPA #','        END OF PARAM?
25F8: 27 04                      BEQ RDMAC7       YES
25FA:                     *                    
25FA: 81 0D                      CMPA #$0D       EOL?
25FC: 26 F5                      BNE RDMAC4       NO
25FE:                     *                    
25FE: 5A                  RDMAC7 DEC B            FOUND PARAM?
25FF: 26 EF                      BNE RDMAC6       NO
2601:                     *                    
2601: FE 23 0C                   LDX MACSAV       POINT TO PARAMETER
2604: A6 00                      LDAA 0,X        FOUND PARAM, GET CHAR
2606: 08                         INX            
2607: FF 23 0C                   STX MACSAV       SAVE POINTER
260A:                     *                    
260A: FE 23 0E            RDMAC5 LDX MCLPTR       POINT TO MACLIN
260D: A7 00                      STAA 0,X        MOVE CHAR
260F: 08                         INX            
2610: FF 23 0E                   STX MCLPTR       SAVE POINTER
2613: 8C 22 D6                   CPX #MACLIN+71   OVERFLOW?
2616: 27 13                      BEQ RDMERR       YES
2618:                     *                    
2618:                     *                    
2618: FE 23 0C                   LDX MACSAV       POINT TO MACPAR
261B: A6 00                      LDAA 0,X        GET NEXT CHAR
261D: 08                         INX            
261E: FF 23 0C                   STX MACSAV       SAVE 
2621: 81 2C                      CMPA #','        END OF PARAM?
2623: 27 A0                      BEQ RDMAC2       YES
2625:                     *                    
2625: 81 0D                      CMPA #$0D       EOL?
2627: 26 E1                      BNE RDMAC5       NO
2629:                     *                    
2629: 20 9A                      BRA RDMAC2     
262B:                     *                    
262B: 86 0D               RDMERR LDAA #$0D       END LINE
262D: A7 00                      STAA 0,X       
262F: CE 02 03                   LDX #$0203       ERROR MESSAGE
2632: BD 2D BB                   JSR PRINTE     
2635: 20 8E                      BRA RDMAC2     
2637:                     *                    
2637:                     * PUSH A MACRO ONTO THE MACRO STACK
2637:                     *                    
2637: FF 22 8B            MACPSH STX MXSAV1       SAVE X-REG
263A: BF 22 89                   STS STKSAV       SAVE STACK POINTER
263D: BE 22 87                   LDS MSTKPT       LOAD MACRO STACK POINTER
2640:                     *                    
2640:                     * PUSH MCLPTR,MACSAV,MACPTR ONTO STACK
2640:                     *                    
2640: CE 23 0F                   LDX #MCLPTR+1  
2643: C6 06                      LDAB #6        
2645:                     *                    
2645: A6 00               MPSH1  LDAA 0,X         GET A BYTE
2647: 09                         DEX            
2648: FF 22 8D                   STX MXSAV2       SAVE POINTER
264B: 30                         TSX              X:=STKPTR+1
264C: 09                         DEX            
264D: BC 22 61                   CPX MACEND       END OF STACK?
2650: 27 33                      BEQ MPSH5        YES, ERROR
2652:                     *                    
2652: FE 22 8D                   LDX MXSAV2       RESTORE POINTER
2655: 36                         PSH A            PUSH A BYTE ONTO STACK
2656: 5A                         DEC B            ALL DONE?
2657: 26 EC                      BNE MPSH1        NO
2659:                     *                    
2659:                     * PUSH MACPAR IN REVERSE ORDER
2659:                     *                    
2659: CE 22 D7                   LDX #MACPAR    
265C:                     *                    
265C: A6 00               MPSH2  LDAA 0,X         FIND EOL
265E: 81 0D                      CMPA #$0D       EOL?
2660: 27 03                      BEQ MPSH3        YES
2662:                     *                    
2662: 08                         INX            
2663: 20 F7                      BRA MPSH2      
2665:                     *                    
2665: A6 00               MPSH3  LDAA 0,X        GET A BYTE
2667: FF 22 8D                   STX MXSAV2       SAVE POINTER
266A: 30                         TSX              X:=STKPTR+1
266B: 09                         DEX            
266C: BC 22 61                   CPX MACEND       END OF STACK?
266F: 27 14                      BEQ MPSH5        YES, ERROR
2671:                     *                    
2671: FE 22 8D                   LDX MXSAV2       RESTORE POINTER
2674: 36                         PSH A            PUT ON STACK
2675: 09                         DEX              POINT TO NEXT CHAR
2676: 8C 22 D6                   CPX #MACPAR-1    ALL DONE?
2679: 26 EA                      BNE MPSH3        NO
267B:                     *                    
267B: BF 22 87                   STS MSTKPT       SAVE STACK POINTER
267E: BE 22 89                   LDS STKSAV       RESTORE STACK
2681: FE 22 8B                   LDX MXSAV1       RESTORE X-REGISTER
2684: 39                         RTS            
2685:                     *                    
2685:                     * MACRO NESTING OVERFLOW ERROR
2685:                     *                    
2685: BE 22 63            MPSH5  LDS MACSTK       FLUSH STACK
2688: BF 22 87                   STS MSTKPT     
268B: BE 22 89                   LDS STKSAV     
268E: CE 02 51                   LDX #$0251       ERROR NUMBER
2691: BD 2D BB                   JSR PRINTE     
2694: FE 22 8B                   LDX MXSAV1       RESTORE X-REG
2697: 7F 23 09                   CLR MACFLG       GET OUT OF MACRO MODE
269A: 39                         RTS            
269B:                     *                    
269B:                     * PULL A MACRO FROM STACK
269B:                     *                    
269B: FF 22 8B            MACPUL STX MXSAV1       SAVE X-REG
269E: BF 22 89                   STS STKSAV       SAVE STACK POINTER
26A1: BE 22 87                   LDS MSTKPT       LOAD MACRO STACK POINTER
26A4:                     *                    
26A4:                     * PULL MACPAR OFF OF THW FROM STACK
26A4:                     *                    
26A4: CE 22 D7                   LDX #MACPAR    
26A7:                     *                    
26A7: 32                  MPUL1  PULA             PULL A CHAR
26A8: A7 00                      STAA 0,X        SAVE IN MACPAR
26AA: 08                         INX            
26AB: 81 0D                      CMPA #$0D       EOL?
26AD: 26 F8                      BNE MPUL1        NO
26AF:                     *                    
26AF:                     * PULL MACPTR,MACSAV,MCLPTR
26AF:                     *                    
26AF: CE 23 0A                   LDX #MACPTR    
26B2: C6 06                      LDAB #6        
26B4:                     *                    
26B4: 32                  MPUL2  PUL A            PULL A CHARACTER
26B5: A7 00                      STAA 0,X        SAVE
26B7: 08                         INX            
26B8: 5A                         DEC B          
26B9: 26 F9                      BNE MPUL2        NOT DONE
26BB:                     *                    
26BB: BF 22 87                   STS MSTKPT       SAVE MACRO STACK POINTER
26BE: BE 22 89                   LDS STKSAV       RESTORE STACK POINTER
26C1: FE 22 8B                   LDX MXSAV1       RESTORE X-REG
26C4: 39                         RTS            
26C5:                     *                    
26C5:                     * COMPARE TWO STRINGS *
26C5:                     *                    
26C5:                     * ON ENTRY (X) = A PRAM LIST OF 5 BYTES *
26C5:                     *    ADDR(STRING1)   
26C5:                     *    ADDR(STRING2)   
26C5:                     *    COUNT OF # BYTES TO BE COMPARED
26C5:                     *                    
26C5:                     * ON RETURN IF CC Z BIT IS SET THERE IS A MATCH
26C5:                     *    EXAMPLE :       
26C5:                     *          LDX #STRING1
26C5:                     *          JSR COMPAR
26C5:                     *          BEQ ------   MATCH
26C5:                     *                    
26C5:                     *    STRING1 RMB 2   
26C5:                     *    STRING2 RMB 2   
26C5:                     *    COUNT   RMB 1   
26C5:                     *                    
26C5: 36                  COMPAR PSH A          
26C6: 37                         PSH B          
26C7: E6 04                      LDAB 4,X        GET COUNT
26C9: FF 26 F4                   STX XSAV         SAVE PARAM POINTER
26CC: FE 26 F4            CMP1   LDX XSAV         GET PARAM POINTER
26CF: EE 00                      LDX 0,X          GET ADDR(STRING1)
26D1: A6 00                      LDAA 0,X        GET CHARACTER
26D3: FE 26 F4                   LDX XSAV         GET PTR
26D6: 6C 01                      INC 1,X          PTR SET TO NEXT 
26D8: 26 02                      BNE CMP2         CHAR IN
26DA: 6C 00                      INC 0,X          STRING1
26DC: FE 26 F4            CMP2   LDX XSAV         GET PARAM POINTER
26DF: EE 02                      LDX 2,X          GET ADDR(STRING2)
26E1: A1 00                      CMPA 0,X        COMPARE 
26E3: 26 0C                      BNE CDONE        NOT EQUAL
26E5: FE 26 F4                   LDX XSAV         GET PARAM POINTER
26E8: 6C 03                      INC 3,X          PTR SET TO NEXT
26EA: 26 02                      BNE CMP3         CHAR IN
26EC: 6C 02                      INC 2,X          STRING2
26EE: 5A                  CMP3   DEC B            DECREMENT COUNTER
26EF: 26 DB                      BNE CMP1         TRY AGAIN
26F1: 33                  CDONE  PUL B            DONE
26F2: 32                         PUL A          
26F3: 39                         RTS            
26F4:                     *                    
26F4:                     XSAV   RMB 2            PARAM PTR SAVE AREA
26F6:                     *                    
26F6:                     * NEXT TOKEN ROUTINE 
26F6:                     * SCANS A LINE OF SOURCE CODE AND RETURNS
26F6:                     * THE NEXT TOKEN, CLASS &RC IN REGS A,B
26F6:                     * THE ADDRESS OF THE TOKEN IS RETURNED IN
26F6:                     * DESCRA AND THE NUM OF BYTES IN THE TOKEN IS
26F6:                     * THE RC AND CLASS ARE:
26F6:                     *                    
26F6:                     *   TYPE    RC(B)    CLASS(A)
26F6:                     *                    
26F6:                     * NAME       01        02        SUBSTRINGS
26F6:                     * HEX        03        02
26F6:                     * DECIMAL    09        02
26F6:                     *                    
26F6:                     * #          23        04        DELIMITERS
26F6:                     * ,          2C        04
26F6:                     * '          27        04
26F6:                     *                    
26F6:                     * *          2A        24        ARITHMETIC
26F6:                     * /          2F        24
26F6:                     * +          2B        24
26F6:                     * -          2D        24
26F6:                     *                    
26F6:                     * A          41        01        A,B,X REGS
26F6:                     * B          42        01
26F6:                     * X          58        01
26F6:                     *                    
26F6:                     * CR         0D        0D        EOL
26F6:                     *                    
26F6:                     * ERROR      00        00        ERRORS
26F6:                     *                    
26F6:                     *                    
26F6: 7F 22 7A            NXTOK  CLR DESCRC     
26F9: 7C 22 7A                   INC DESCRC       DESCRC := 1
26FC: FE 22 7B            NXT0   LDX CUCHAR       POINT TO CURRENT CHAR
26FF: FF 22 78                   STX DESCRA       INIT DESCRA
2702: A6 00                      LDAA 0,X        GET CHAR
2704: 08                         INX            
2705: FF 22 7B                   STX CUCHAR       POINT TO NEXT CHAR
2708: 81 20                      CMPA #$20       LESS THAN 20 HEX? (SPACE)
270A: 27 F0                      BEQ NXT0         BLANK,SKIP OVER
270C: 22 06                      BHI NXT1         IS > 20
270E:                     *                    
270E: 81 0D                      CMPA #$0D       CR?
2710: 26 47                      BNE NXTER        NO,UNRECOGNIZABLE CHAR
2712: 16                         TAB              YES, SET RC
2713: 39                         RTS            
2714:                     *                    
2714: 81 5F               NXT1   CMPA #$5F       IS >5F?
2716: 23 02                      BLS NXT3         NO
2718: 20 3F                      BRA NXTER        YES,UNRECOGNIZABLE CHAR
271A:                     *                    
271A: BD 27 C3            NXT3   JSR GCHRTB       GET BYTE FROM CHARTAB
271D: 85 01                      BITA #$01       A,B,X REG?
271F: 27 13                      BEQ NXT4         NO
2721:                     *                    
2721: FE 22 7B                   LDX CUCHAR       YES,CHECK NEXT CHAR
2724: E6 00                      LDAB 0,X       
2726: C1 20                      CMPB #$20       BLANK?
2728: 27 04                      BEQ NXT3A        YES 
272A: C1 0D                      CMPB #$0D       EOL?
272C: 26 0A                      BNE NXT4A        NO GOTO NSCAN
272E:                     *                    
272E: FE 22 78            NXT3A  LDX DESCRA       GET RC
2731: E6 00                      LDAB 0,X       
2733: 39                         RTS            
2734:                     *                    
2734: 85 80               NXT4   BITA #$80       NAME?
2736: 27 04                      BEQ NXT5         NO
2738: BD 27 73            NXT4A  JSR NSCAN        YES SCAN NAME STRING
273B: 39                         RTS            
273C:                     *                    
273C: 85 40               NXT5   BITA #$40       DECIMAL?
273E: 27 04                      BEQ NXT6         NO
2740: BD 27 5C                   JSR DSCAN        YES,SCAN DECIMAL STRING
2743: 39                         RTS            
2744:                     *                    
2744: 85 20               NXT6   BITA #$20       ARITHMETIC?
2746: 26 E6                      BNE NXT3A        YES GET RC AND RETURN
2748:                     *                    
2748: 85 04                      BITA #$04       DELIMITERS?
274A: 27 0D                      BEQ NXTER        NO,UNRCOGNIZABLE CHAR
274C: FE 22 78                   LDX DESCRA       GET CHAR
274F: E6 00                      LDAB 0,X       
2751: C1 24                      CMPB #$24       IS ? (HEX)
2753: 26 D9                      BNE NXT3A        NO,GET RC AND RTN
2755:                     *                    
2755: BD 27 98                   JSR HSCAN        SCAN HEX STRING
2758: 39                         RTS            
2759:                     *                    
2759: 4F                  NXTER  CLR A            TROUBLE,SET RC,CLASS=00
275A: 5F                         CLR B          
275B: 39                         RTS            
275C:                     *                    
275C:                     * DSCAN - SCAN DECIMAL STRING AND STOP AT
275C:                     * FIRST NON-DECMIAL CHARACTER.
275C:                     *                    
275C: FE 22 7B            DSCAN  LDX CUCHAR       POINT TO NEXT CHAR
275F: A6 00                      LDAA 0,X        GET CHAR
2761: 7C 22 7A                   INC DESCRC       INCR DESCRC COUNT
2764: 08                         INX            
2765: FF 22 7B                   STX CUCHAR       POINT TO NEXT CHAR
2768: BD 27 C3                   JSR GCHRTB       GET BYTE IN CHARTAB
276B: 85 40                      BITA #$40       DECIMAL?
276D: 26 ED                      BNE DSCAN        YES CONTINUE SCAN
276F: C6 09                      LDAB #$09      
2771: 20 43                      BRA ENDSCN       RETURN
2773:                     *                    
2773:                     * NSCAN SCAN NAME STRING AND STOP AT 
2773:                     * FIRST NON-ALPHANUMERIC CHAR
2773:                     *                    
2773: FE 22 7B            NSCAN  LDX CUCHAR       POINT TO NEXT CHAR
2776: A6 00                      LDAA 0,X        GET CHAR
2778: 7C 22 7A                   INC DESCRC       INCR DESCRC COUNT
277B: 08                         INX            
277C: FF 22 7B                   STX CUCHAR       POINT TO NEXT CHAR
277F: BD 27 C3                   JSR GCHRTB       GET BYTE FROM CHARTAB
2782: 85 80                      BITA #$80       ALPHA?
2784: 26 ED                      BNE NSCAN        YES CONTINUE SCAN
2786: 85 40                      BITA #$40       NUMERIC?
2788: 26 E9                      BNE NSCAN        YES CONTINUE SCAN
278A: C6 07                      LDAB #$07       NAME TO LONG?
278C: F1 22 7A                   CMPB DESCRC    
278F: 24 03                      BCC NSCANA       NO
2791: F7 22 7A                   STAB DESCRC     YES,TRUNCATE
2794: C6 01               NSCANA LDAB #$01       LOAD RC
2796: 20 1E                      BRA ENDSCN       RETURN
2798:                     *                    
2798:                     * HSCAN - SCAN A STRING OF HEX DATA AND STOP
2798:                     * AT FIRST NON-HEXADECIMAL CHARACTER.
2798:                     *                    
2798: 7F 22 7A            HSCAN  CLR DESCRC       DESCRC:=0
279B: FE 22 7B                   LDX CUCHAR       POINT TO NEXT CHAR
279E: FF 22 78                   STX DESCRA       INIT DESCRA
27A1: FE 22 7B            HSCAN1 LDX CUCHAR       POINT TO NEXT CHAR
27A4: A6 00                      LDAA 0,X        GET CHAR
27A6: 7C 22 7A                   INC DESCRC       INCR DESCRC COUNT
27A9: 08                         INX            
27AA: FF 22 7B                   STX CUCHAR       POINT TO NEXT CHAR
27AD: BD 27 C3                   JSR GCHRTB       GET BYTE FROM CHRTAB
27B0: 85 02                      BITA #$02       HEX?
27B2: 26 ED                      BNE HSCAN1       YES CONTINUE SCAN
27B4: C6 03                      LDAB #$03      
27B6:                     *                    
27B6: 7A 22 7A            ENDSCN DEC DESCRC       DESCRC := CORRECT COUNT
27B9: FE 22 7B                   LDX CUCHAR     
27BC: 09                         DEX            
27BD: FF 22 7B                   STX CUCHAR       CUCHAR:= CORRECT VALUE 
27C0: 86 02                      LDAA #$02       LOAD CLASS RC
27C2: 39                         RTS              ALL DONE
27C3:                     *                    
27C3:                     * GET A BYTE FROM CHARACTER TABLE INDEXED BY 
27C3:                     * VALUE IN A REGISTER.
27C3:                     *                    
27C3: 81 20               GCHRTB CMPA #$20       VALID CHAR?
27C5: 25 16                      BCS GCHRTR       NO <20
27C7: 81 5F                      CMPA #$5F       VALID CHAR?
27C9: 22 12                      BHI GCHRTR       NO >5F
27CB:                     *                    
27CB: 7F 27 DF                   CLR CHPTR        INIT PARAM
27CE: B7 27 E0                   STAA CHPTR+1    SAVE CHAR
27D1: CE 27 DF                   LDX #CHPTR       POINT TO PARAM
27D4: BD 2B EC                   JSR ADD16        ADD IN BASE OF CHARTAB
27D7: FE 27 DF                   LDX CHPTR        GET BYTE IN CHARTAB
27DA: A6 00                      LDAA 0,X       
27DC: 39                         RTS            
27DD:                     *                    
27DD: 4F                  GCHRTR CLR A          
27DE: 39                         RTS            
27DF:                     *                               
27DF:                     CHPTR  RMB 2            PARAM LIST
27E1: 21 E7                      FDB CHRTAB-$20 
27E3:                     *                    
27E3:                     * TABLE MANIPULATION ROUTINES FOR TABLES
27E3:                     * SYMTAB AND MNTAB   
27E3:                     *                    
27E3:                     * STORAGE LOCATIONS USED BY ROUTINES:
27E3:                     *                    
27E3:                     PSTNG1 RMB 2            ADDRESS OF MENMONIC
27E5:                     PSTNG2 RMB 2            ADDRESS IN THE TABLE
27E7:                     PCOUNT RMB 1            LENGTH OF MNEMONIC
27E8:                     TBADD  RMB 2            TABLE POINTER
27EA:                     HSMBL  RMB 6            SYMBOL TEMP LOC
27F0:                     HKEYA  RMB 2            HASHED CODE
27F2:                     HKEYB  RMB 2            TEMP LOC FOR HASHED CODE
27F4:                     HSAV1  RMB 2            TEMP LOC FOR PTR
27F6:                     HSAV2  RMB 2            TEMP LOC FOR PTR
27F8:                     *                    
27F8:                     *                    
27F8:                     * STORE A SYMBOL IN SYMTAB (SYMBOL TABLE)
27F8:                     * ON ENTRY DESCRA CONTAINS THE ADDRESS OF
27F8:                     * THE SYMBOL, AND DESCRC CONTAINS THE LENGTH
27F8:                     * A STANDARD HASH CODE ALGORITHM IS USED
27F8:                     *                    
27F8: BD 28 B9            STOSYM JSR HASH         GET HASHED KEY
27FB: FF 22 7F                   STX SYMPTR       SAVE 
27FE:                     *                    
27FE:                     * SEE IF LOC(HASH KEY) IS EMPTY
27FE:                     *                    
27FE: A6 00               SYMA   LDAA 0,X         GET FIRST CHARACTER
2800: 81 20                      CMPA #$20       BLANK?
2802: 26 2F                      BNE SYMB         NO
2804:                     *                    
2804:                     * STORE SYMBOL IN SYMTAB
2804:                     *                    
2804: FF 27 F6                   STX HSAV2        SAVE TABLE POINTER
2807: CE 27 EA                   LDX #HSMBL       POINT TO HSMBL
280A: FF 27 F4                   STX HSAV1        SAVE 
280D: C6 06                      LDAB #6         LOAD SYMBOL LENGTH
280F:                     *                    
280F:                     * DO TRANSFER        
280F:                     *                    
280F: FE 27 F4            SYM1   LDX HSAV1        POINT TO HSYMBL
2812: A6 00                      LDAA 0,X        GET CHAR
2814: 08                         INX            
2815: FF 27 F4                   STX HSAV1        POINT TO NEXT CHAR
2818: FE 27 F6                   LDX HSAV2        POINT TO TABLE SPACE
281B: A7 00                      STAA 0,X        STORE CHAR IN SYMTAB
281D: 08                         INX            
281E: FF 27 F6                   STX HSAV2        POINT TO NEXT POS
2821: 5A                         DEC B            ALL DONE?
2822: 26 EB                      BNE SYM1         NO
2824:                     *                    
2824:                     * STORE STORE LC, AND SET INFO BYTE
2824:                     *                    
2824: B6 22 70                   LDAA LC         GET LC
2827: A7 00                      STAA 0,X        STORE
2829: B6 22 71                   LDAA LC+1       GET LS BYTE OF LC
282C: A7 01                      STAA 1,X        STORE 
282E: 86 40                      LDAA #$40       INFO BYTE:=RELOC,DEFINED
2830: A7 02                      STAA 2,X       
2832: 39                         RTS              RETURN
2833:                     *                    
2833:                     * COMPARE HSMBL WITH ENTRY IN SYMTAB
2833:                     *                    
2833: BD 28 7E            SYMB   JSR SYMCMP       COMPARE
2836: 26 10                      BNE SYMC         NO MATCH
2838:                     *                    
2838:                     * ERROR, SYMBOL ALREADY IN TABLE
2838:                     *                    
2838: FE 22 7F                   LDX SYMPTR       GET ADDRESS OF ENTRY
283B: 86 80                      LDAA #$80      
283D: AA 08                      ORAA 8,X        SET REDEFINED BIT
283F: A7 08                      STAA 8,X       
2841: CE 02 06                   LDX #$0206       LOAD ERROR NUMBER
2844: BD 2D BB            SYMB1  JSR PRINTE       PRINT IT
2847: 39                         RTS              RETURN
2848:                     *                    
2848:                     * FIND ANOTHER SLOT IN SYMTAB FOR SYMBOL 
2848:                     *                    
2848: BD 28 93            SYMC   JSR SYMMOD       GET ADDR(NEXT SLOT)
284B: BC 27 F0                   CPX HKEYA        CHECKED ALREADY?
284E: 27 02                      BEQ *+4          YES,TABLE IS FULL
2850:                     *                    
2850: 20 AC                      BRA SYMA         TRY AGAIN
2852:                     *                    
2852: CE 02 21                   LDX #$0221       LOAD ERROR NUMBER
2855: 20 ED                      BRA SYMB1        PRINT IT & RETURN
2857:                     *                    
2857:                     * LOOK UP SYMBOL IN SYMTAB
2857:                     * ON ENTRY DESCRA = ADDRESS OF SYMBOL
2857:                     *          DESCRC = SYMBOL LENGTH
2857:                     * ON RETURN B = VALUE OF INFO BYTE
2857:                     *             = FF SYMBOL NOT FOUND
2857:                     *           X = VALUE OF SYMBOL
2857:                     *                    
2857:                     *                    
2857: BD 28 B9            LKPSYM JSR HASH         GET KEY
285A: FF 22 7F                   STX SYMPTR       SAVE 
285D:                     *                    
285D: A6 00               LKPSM1 LDAA 0,X        GET CHARACTER
285F: 81 20                      CMPA #$20       BLANK?
2861: 26 03                      BNE LKPSM3       NO
2863:                     *                    
2863:                     * ENTRY NOT IN SYMTAB
2863:                     *                    
2863: C6 FF               LKPSM2 LDAB #$FF       LOAD RC
2865: 39                         RTS              RETURN
2866:                     *                    
2866:                     * COMPARE SYMBOL WITH ENTRY IN SYMTAB
2866:                     *                    
2866: BD 28 7E            LKPSM3 JSR SYMCMP       COMPARE 
2869: 26 08                      BNE LKPSM4       NO MATCH 
286B:                     *                    
286B:                     * FOUND, EXTRACT INFO, AND VALUE
286B:                     *                    
286B: FE 22 7F                   LDX SYMPTR       POINT TO ENTRY
286E: E6 08                      LDAB 8,X        GET INFO BYTE
2870: EE 06                      LDX 6,X          GET VALUE
2872: 39                         RTS            
2873:                     *                    
2873:                     * PROBE AGAIN FOR SYMBOL IN SYMTAB
2873:                     *                    
2873: BD 28 93            LKPSM4 JSR SYMMOD       GET NEXT KEY
2876: BC 27 F0                   CPX HKEYA        ALREADY CHECKED?
2879: 26 E2                      BNE LKPSM1       NO,TRY AGAIN
287B: C6 FF                      LDAB #$FF       SET RC
287D: 39                         RTS            
287E:                     *                    
287E:                     * ROUTINE TO COMPARE SYMBOL WITH ENTRY
287E:                     *                    
287E: FF 27 E3            SYMCMP STX PSTNG1       SAVE PTR TO ENTRY
2881: 86 06                      LDAA #6        
2883: B7 27 E7                   STAA PCOUNT     PCOUNT := LENGTH(SYMBOL)
2886: CE 27 EA                   LDX #HSMBL     
2889: FF 27 E5                   STX PSTNG2       POINT TO HSMBL
288C: CE 27 E3                   LDX #PSTNG1      POINT TO PARAMS
288F: BD 26 C5                   JSR COMPAR       COMPARE
2892: 39                         RTS            
2893:                     *                    
2893:                     * FIND NEXT SLOT IN SYMTAB 
2893:                     * SYMPTR:=SYMPTR+9 (MODULO NSYM)
2893:                     *                    
2893: FE 22 7F            SYMMOD LDX SYMPTR       GET ADDR(CURRENT SLOT)
2896: 08                         INX            
2897: 08                         INX            
2898: 08                         INX            
2899: 08                         INX            
289A: 08                         INX            
289B: 08                         INX            
289C: 08                         INX            
289D: 08                         INX            
289E: 08                         INX            
289F:                     *                    
289F:                     * BEYOND SYMTAB?     
289F:                     *                    
289F: BC 22 69                   CPX SYMEND     
28A2: 26 03                      BNE *+5          NO
28A4: FE 22 65                   LDX SYMTAB       POINT TO FIRST ENTRY
28A7: FF 22 7F                   STX SYMPTR       SAVE PTR TO ENTRY
28AA: 39                         RTS            
28AB:                     *                    
28AB:                     * DELETE LAST SYMBOL ENTERED
28AB:                     *                    
28AB: FE 22 7F            DELSYM LDX SYMPTR     
28AE: 86 20                      LDAA #$20       LOAD BLANK
28B0: C6 09                      LDAB #9         LOAD ENTRY LENGTH
28B2:                     *                    
28B2: A7 00               DEL1   STAA 0,X        BLANK BYTE
28B4: 08                         INX              POINT TO NEXT BYTE
28B5: 5A                         DEC B            ALL DONE ?
28B6: 26 FA                      BNE DEL1         NO
28B8:                     *                    
28B8: 39                         RTS              YES, RETURN
28B9:                     *                    
28B9:                     * HASH SYMBOL TO PRODUCE A KEY
28B9:                     *                    
28B9: CE 20 20            HASH   LDX #$2020       BLANK HSMBL
28BC: FF 27 EA                   STX HSMBL      
28BF: FF 27 EC                   STX HSMBL+2    
28C2: FF 27 EE                   STX HSMBL+4    
28C5:                     *                    
28C5:                     * MOVE SYMBOL TO HSMBL
28C5:                     *                    
28C5: CE 27 EA                   LDX #HSMBL       POINT TO HSMBL
28C8: FF 27 F6                   STX HSAV2        SAVE 
28CB: FE 22 78                   LDX DESCRA       POINT TO SYMBOL
28CE: FF 27 F4                   STX HSAV1        SAVE 
28D1: F6 22 7A                   LDAB DESCRC     GET LENGTH(SYMBOL)
28D4:                     *                    
28D4: FE 27 F4            HASH1  LDX HSAV1        POINT TO SYMBOL
28D7: A6 00                      LDAA 0,X        GET CHAR
28D9: 08                         INX            
28DA: FF 27 F4                   STX HSAV1        POINT TO NEXT CHAR
28DD: FE 27 F6                   LDX HSAV2        POINT TO HSYMBL
28E0: A7 00                      STAA 0,X        STORE CHAR
28E2: 08                         INX            
28E3: FF 27 F6                   STX HSAV2        POINT TO NEXT CHAR
28E6: 5A                         DEC B            ALL DONE
28E7: 26 EB                      BNE HASH1        NO
28E9:                     *                    
28E9:                     * FOLD HSMBL TO CREATE A KEYA
28E9:                     *                    
28E9: FE 27 EA                   LDX HSMBL        HKEYA:=HSMBL(2)
28EC: FF 27 F0                   STX HKEYA      
28EF: FE 27 EC                   LDX HSMBL+2    
28F2: FF 27 F2                   STX HKEYB      
28F5: CE 27 F0                   LDX #HKEYA     
28F8: BD 2B EC                   JSR ADD16              +HSMBL+2(2)
28FB: FE 27 EE                   LDX HSMBL+4    
28FE: FF 27 F2                   STX HKEYB      
2901: CE 27 F0                   LDX #HKEYA     
2904: BD 2B EC                   JSR ADD16              +HSMBL+4(2)
2907:                     *                    
2907:                     * HKEYA:=REMAINDER OF HKEYA/NSYM       
2907:                     *                    
2907: B6 27 F0                   LDAA HKEYA      LOAD VALUES     
290A: F6 27 F1                   LDAB HKEYA+1   
290D: FE 22 67                   LDX NSYM       
2910: FF 27 F2                   STX HKEYB      
2913: CE 27 F2                   LDX #HKEYB       POINT TO NSYM
2916: BD 2B A1                   JSR DIV16      
2919: FF 27 F0                   STX HKEYA        SAVE REMAINDER
291C:                     *                    
291C:                     * HKEYA:=HKEYA*9     
291C:                     *                    
291C: 4F                         CLR A          
291D: C6 09                      LDAB #9        
291F: CE 27 F0                   LDX #HKEYA     
2922: BD 2B 7D                   JSR MPY16      
2925: B7 27 F0                   STAA HKEYA     
2928: F7 27 F1                   STAB HKEYA+1   
292B:                     *                    
292B:                     * ADD IN BASE OF SYMTAB
292B:                     *                    
292B: FE 22 65                   LDX SYMTAB     
292E: FF 27 F2                   STX HKEYB      
2931: CE 27 F0                   LDX #HKEYA     
2934: BD 2B EC                   JSR ADD16      
2937: FE 27 F0                   LDX HKEYA      
293A: 39                         RTS            
293B:                     *                    
293B:                     * LOOK UP MNEMONIC IN MNTAB
293B:                     * ON ENTRY DESCRA = ADDR OF MNEMONIC
293B:                     *          DESCRC = LENGTH OF MNEMONIC
293B:                     * ON RETURN          
293B:                     *  REG A = 00 FOUND  
293B:                     *  REG A = FF NOT IN TABLE 
293B:                     *  REG X = ADDR OF ROUTINE TO PROCESS 
293B:                     *          THE OPCODE/PSEUDOP
293B:                     *  REG B = MACHINE CODE FOR OPCODES
293B:                     *        = FF FOR PSEUDOPS
293B:                     *                    
293B:                     * THE ALGORITHM USED IS A BINARY SEARCH
293B:                     *                    
293B:                     * TEMPORARY LOCATIONS:
293B:                     LP     RMB 1            ONE BELOW LOWEST ENTRY
293C:                     MP     RMB 1            ONE HIGHER THAN HIGHEST ENTRY
293D:                     IP     RMB 1            CALCULATED PROBE VALUE
293E: 00 06               ENSIZ  FDB 6            LENGTH OF ENTRY IN MNTAB
2940:                     *                    
2940: B6 22 7A            MNLKP  LDAA DESCRC    
2943: B7 27 E7                   STAA PCOUNT     INIT PCOUNT
2946: 86 57                      LDAA #$57      $57=CHRTAB-MNTAB/6+1 (# OF ENTRIES+1)
2948: B7 29 3C                   STAA MP         INIT MP
294B: 4F                         CLR A          
294C: B7 29 3B                   STAA LP         INIT LP
294F:                     *                    
294F: B6 29 3B            MNLKPA LDAA LP        
2952: 4C                         INC A            A:=LP+1
2953: B1 29 3C                   CMPA MP         MP:=LP+1 ?
2956: 26 03                      BNE MNLKPB       NO
2958:                     *                    
2958: 86 FF                      LDAA #$FF       YES, ENTRY NOT IN TABLE
295A: 39                         RTS            
295B:                     *                    
295B:                     * IP:=(LP+MP)/2 TRUNCATED
295B:                     *                    
295B: F6 29 3B            MNLKPB LDAB LP        
295E: FB 29 3C                   ADDB MP         B:=LP+MP 
2961: 56                         ROR B            B:=B/2
2962: F7 29 3D                   STAB IP         SAVE IP
2965:                     *                    
2965:                     * GET 16 BITADDRESS OF ENTRY
2965:                     *                    
2965: 4F                         CLR A          
2966: CE 29 3E                   LDX #ENSIZ       GET ENTRY LENGTH
2969: 5A                         DEC B            B:=IP-1
296A: BD 2B 7D                   JSR MPY16        GET (IP-1)*6
296D: B7 27 E3                   STAA PSTNG1     SAVE
2970: F7 27 E4                   STAB PSTNG1+1  
2973: CE 20 03                   LDX #MNTAB     
2976: FF 27 E5                   STX PSTNG2       PSTNG2:=BASE OF MNTAB
2979: CE 27 E3                   LDX #PSTNG1      POINT TO PARAMS
297C: BD 2B EC                   JSR ADD16        PSTNG1:=(IP-1)*6+MNTAB
297F: FE 27 E3                   LDX PSTNG1     
2982: FF 27 E8                   STX TBADD        SAVE
2985:                     *                    
2985:                     * COMPARE MNEMONIC WITH ENTRY IN MNTAB
2985:                     *                    
2985: FE 22 78                   LDX DESCRA       GET MNEMONIC ADDRESS
2988: FF 27 E5                   STX PSTNG2       INIT PARAM FOR COMPARE
298B: CE 27 E3                   LDX #PSTNG1      POINT TO PARAMS
298E: BD 26 C5                   JSR COMPAR       COMPARE
2991: 25 0B                      BCS MNLI         ENTRY<MNEMONIC
2993: 26 11                      BNE MNMI         ENTRY>MNEMONIC
2995:                     *                    
2995: 4F                         CLR A            ENTRY FOUND
2996: FE 27 E8                   LDX TBADD        POINT TO ENTRY
2999: E6 05                      LDAB 5,X        GET MACHINE CODE
299B: EE 03                      LDX 3,X          GET BRANCH TO ROUTINE ADDR
299D: 39                         RTS            
299E:                     *                    
299E:                     * ENTRY<MNEMONIC LP:=IP
299E:                     *                    
299E: B6 29 3D            MNLI   LDAA IP        
29A1: B7 29 3B                   STAA LP        
29A4: 20 A9                      BRA MNLKPA       TRY AGAIN
29A6:                     *                    
29A6:                     * ENTRY>MNEMONIC MP:=IP
29A6:                     *                    
29A6: B6 29 3D            MNMI   LDAA IP        
29A9: B7 29 3C                   STAA MP        
29AC: 20 A1                      BRA MNLKPA       TRY AGAIN
29AE:                     *                    
29AE:                     * EVALUATE NUMBERS, SYMBOLS AND EXPRESSIONS
29AE:                     *                    
29AE:                     VALUE  RMB 2          
29B0:                     TMPVAL RMB 2          
29B2:                     CLFLG  RMB 1            CLASS OF PREVIOUS TOKEN
29B3:                     CLASS  RMB 1            CLASS OF CURRENT TOKEN
29B4:                     OPERN  RMB 1            ARITHMETIC OPERATOR 
29B5:                     *                    
29B5: 7F 29 AE            NSEVL  CLR VALUE      
29B8: 7F 29 AF                   CLR VALUE+1      VALUE := 0
29BB: 7F 29 B2                   CLR CLFLG        CLFLG := 0
29BE: B7 29 B3                   STAA CLASS      SAVE CLASS OF TOKEN
29C1: C1 2A                      CMPB #$2A       IS * ?
29C3: 26 2D                      BNE NSVLC1       NO
29C5:                     *                    
29C5: FE 22 70                   LDX LC           YES
29C8: FF 29 AE                   STX VALUE        VALUE := LC
29CB: 86 02                      LDAA #2        
29CD: B7 29 B2                   STAA CLFLG      CLFLG:=2
29D0: 73 22 74                   COM RELFLG       RELFLG:=RELOC
29D3:                     *                    
29D3: FE 22 7B            NSVLA  LDX CUCHAR     
29D6: A6 00                      LDAA 0,X        GET NEXT CHAR
29D8: 81 20                      CMPA #$20       BLANK?
29DA: 27 08                      BEQ NSVLB        YES
29DC: 81 0D                      CMPA #$0D       EOL?
29DE: 27 04                      BEQ NSVLB        YES
29E0: 81 2C                      CMPA #$2C       COMMA?
29E2: 26 08                      BNE NSVLC        NO
29E4:                     *                    
29E4: FE 29 AE            NSVLB  LDX VALUE      
29E7: FF 2C 68                   STX ADR1         ADR1,2:=VALUE
29EA: 5F                         CLR B            RC := 00
29EB: 39                         RTS              ALL DONE
29EC:                     *                    
29EC: BD 26 F6            NSVLC  JSR NXTOK        GET NEXT TOKEN
29EF: B7 29 B3                   STAA CLASS      SAVE TOKEN CLASS
29F2: B1 29 B2            NSVLC1 CMPA CLFLG      CLASS = CLFLG?
29F5: 26 06                      BNE NSVLF        NO
29F7:                     *                    
29F7: CE 02 04            NSVLD  LDX #$0204       ERROR 
29FA: 5F                  NSVLE  CLR B          
29FB: 53                         COM B            RC := FF
29FC: 39                         RTS              RETURN
29FD:                     *                    
29FD: 81 02               NSVLF  CMPA #$02       IS STRING?
29FF: 27 14                      BEQ NSVLH        YES
2A01:                     *                    
2A01: 81 24                      CMPA #$24       ARITHMETIC OPERATOR?
2A03: 27 02                      BEQ NSVLG        YES
2A05: 20 F0                      BRA NSVLD        ERROR
2A07:                     *                    
2A07: 7D 29 B2            NSVLG  TST CLFLG        CLFLG=0?
2A0A: 27 EB                      BEQ NSVLD        YES,ERROR
2A0C:                     *                    
2A0C: F7 29 B4                   STAB OPERN      SAVE OPERATOR
2A0F: B7 29 B2                   STAA CLFLG      CLFLG:=CLASS
2A12: 7E 29 D3                   JMP NSVLA        SCAN AGAIN
2A15:                     *                    
2A15: C1 03               NSVLH  CMPB #$03        HEX STRING?
2A17: 26 11                      BNE NSVLJ        NO
2A19:                     *                    
2A19: F6 22 7A                   LDAB DESCRC     YES
2A1C: C1 04                      CMPB #4         IS > 4?
2A1E: 2F 05                      BLE NSVLH1       NO 
2A20:                     *                    
2A20: CE 02 10                   LDX #$0210       YES,ERROR
2A23: 20 D5                      BRA NSVLE      
2A25:                     *                    
2A25: BD 2A CE            NSVLH1 JSR CVHB         CONVERT
2A28: 20 3B                      BRA NSVLM      
2A2A:                     *                    
2A2A: C1 09               NSVLJ  CMPB #$09        DECIMAL?
2A2C: 26 11                      BNE NSVLK        NO
2A2E:                     *                    
2A2E: F6 22 7A                   LDAB DESCRC    
2A31: C1 05                      CMPB #5         LENGTH > 5?
2A33: 2F 05                      BLE NSVLJ1       NO 
2A35:                     *                    
2A35: CE 02 10                   LDX #$0210       YES,ERROR 
2A38: 20 C0                      BRA NSVLE      
2A3A:                     *                    
2A3A: BD 2B 2A            NSVLJ1 JSR CVDB         CONVERT
2A3D: 20 26                      BRA NSVLM      
2A3F:                     *                    
2A3F: C1 01               NSVLK  CMPB #$01       SYMBOL?
2A41: 27 03                      BEQ NSVLL        YES
2A43:                     *                    
2A43: 7E 29 F7                   JMP NSVLD        NO,ERROR
2A46:                     *                    
2A46: BD 28 57            NSVLL  JSR LKPSYM       LOOKUP SYMBOL 
2A49: C5 80                      BITB #$80       REDEFINED?
2A4B: 26 12                      BNE NSVLLA       YES
2A4D:                     *                    
2A4D: C5 40                      BITB #$40       RELOC?
2A4F: 27 05                      BEQ *+7          NO
2A51:                     *                    
2A51: 73 22 74                   COM RELFLG       YES RELFLG:=RELOC
2A54: 20 0F                      BRA NSVLM      
2A56:                     *                    
2A56: C5 10                      BITB #$10       COMMON?
2A58: 27 03                      BEQ *+5          NO
2A5A:                     *                    
2A5A: 73 22 75                   COM CMNFLG       YES
2A5D: 20 06                      BRA NSVLM      
2A5F:                     *                    
2A5F: CE 02 11            NSVLLA LDX #$0211       NO,ERROR 
2A62: 7E 29 FA                   JMP NSVLE      
2A65:                     *                    
2A65: FF 29 B0            NSVLM  STX TMPVAL       SAVE,CONVERTED VALUE
2A68: 7D 29 B2                   TST CLFLG        CLFLG=0?
2A6B: 26 0F                      BNE NSVLP        NO
2A6D:                     *                    
2A6D: FE 29 B0                   LDX TMPVAL       YES
2A70: FF 29 AE                   STX VALUE        VALUE:=TMPVAL
2A73:                     *                    
2A73: B6 29 B3            NSVLN  LDAA CLASS     
2A76: B7 29 B2                   STAA CLFLG      CLFLG:=CLASS
2A79: 7E 29 D3                   JMP NSVLA        SCAN AGAIN
2A7C:                     *                    
2A7C: B6 29 B4            NSVLP  LDAA OPERN      GET LAST OPERATOR
2A7F: 81 2B                      CMPA #$2B       IS + ?
2A81: 26 08                      BNE NSVLP1       NO
2A83:                     *                    
2A83: CE 29 AE                   LDX #VALUE     
2A86: BD 2B EC                   JSR ADD16        VALUE:=VALUE+TMPVAL
2A89: 20 E8                      BRA NSVLN      
2A8B:                     *                    
2A8B: 81 2D               NSVLP1 CMPA #$2D       IS - ?
2A8D: 26 08                      BNE NSVLP2       NO
2A8F:                     *                    
2A8F: CE 29 AE                   LDX #VALUE       YES
2A92: BD 2B FD                   JSR SUB16        VALUE:=VALUE-TMPVAL
2A95: 20 DC                      BRA NSVLN      
2A97:                     *                    
2A97: 81 2A               NSVLP2 CMPA #$2A       IS * ?
2A99: 26 15                      BNE NSVLP3       NO
2A9B:                     *                    
2A9B: B6 29 AE                   LDAA VALUE     
2A9E: F6 29 AF                   LDAB VALUE+1   
2AA1: CE 29 B0                   LDX #TMPVAL    
2AA4: BD 2B 7D                   JSR MPY16        VALUE:=VALUE*TMPVAL 
2AA7: B7 29 AE                   STAA VALUE     
2AAA: F7 29 AF                   STAB VALUE+1   
2AAD: 7E 2A 73                   JMP NSVLN       
2AB0:                     *                    
2AB0: 81 2F               NSVLP3 CMPA #$2F       IS / ?
2AB2: 27 03                      BEQ NSVLP4       YES
2AB4:                     *                    
2AB4: 7E 29 F7                   JMP NSVLD        NO, ERROR
2AB7:                     *                    
2AB7: B6 29 AE            NSVLP4 LDAA VALUE     
2ABA: F6 29 AF                   LDAB VALUE+1   
2ABD: CE 29 B0                   LDX #TMPVAL    
2AC0: BD 2B A1                   JSR DIV16        VALUE:=VALUE/TMPVAL
2AC3: B7 29 AE                   STAA VALUE     
2AC6: F7 29 AF                   STAB VALUE+1   
2AC9: 7E 2A 73                   JMP NSVLN      
2ACC:                     *                    
2ACC:                     * CVHB CONVERT HEX TO BINARY
2ACC:                     *                    
2ACC:                     * ON ENTRY DESCRA = ADDRESS OF STRING
2ACC:                     *          DESCRC = # OF BYTES IN STRING
2ACC:                     * ON RETURN [X]=VALUE
2ACC:                     *                    
2ACC:                     HVAL   RMB 2            TEMP STORAGE
2ACE:                     *                    
2ACE: FE 22 78            CVHB   LDX DESCRA       GET ADDRESS OF STRING
2AD1: 7F 2A CC                   CLR HVAL       
2AD4: 7F 2A CD                   CLR HVAL+1     
2AD7: F6 22 7A                   LDAB DESCRC     GET COUNT
2ADA: 09                         DEX              DECR PTR TO STRING
2ADB: 08                  CVHB1  INX              POINT TO RIGHT MOST
2ADC: 5A                         DEC B            BYTE OF THE 
2ADD: 26 FC                      BNE CVHB1        STRING
2ADF:                     *                    
2ADF: F6 22 7A                   LDAB DESCRC     GET COUNT 
2AE2: BD 2B 18                   JSR CVHBS        CONVERT
2AE5: B7 2A CD                   STAA HVAL+1     SAVE
2AE8: 5A                         DEC B            DECR COUNT
2AE9: 27 29                      BEQ CVHBD        (1 HEX DIGIT) 
2AEB: 09                         DEX              POINT TO NEXT LEFT BYTE
2AEC: BD 2B 18                   JSR CVHBS        CONVERT
2AEF: 48                         ASL A            SHIFT TO LEFT NIBBLE
2AF0: 48                         ASL A          
2AF1: 48                         ASL A          
2AF2: 48                         ASL A          
2AF3: BA 2A CD                   ORAA HVAL+1     CONVERT TO BYTE
2AF6: B7 2A CD                   STAA HVAL+1     SAVE
2AF9: 5A                         DEC B            DECREMENT COUNT
2AFA: 27 18                      BEQ CVHBD        (2 HEX DIGITS)
2AFC: 09                         DEX              POINT TO NEXT LEFT BYTE
2AFD: BD 2B 18                   JSR CVHBS        CONVERT
2B00: B7 2A CC                   STAA HVAL       SAVE
2B03: 5A                         DEC B            DECREMENT COUNT
2B04: 27 0E                      BEQ CVHBD        (3 HEX DIGITS)
2B06:                     *                    
2B06: 09                         DEX              POINT TO NEXT LEFT BYTE
2B07: BD 2B 18                   JSR CVHBS        CONVERT
2B0A: 48                         ASL A            SHIFT TO LEFT NIBBLE
2B0B: 48                         ASL A          
2B0C: 48                         ASL A          
2B0D: 48                         ASL A          
2B0E: BA 2A CC                   ORAA HVAL       CONVERT TO BYTE
2B11: B7 2A CC                   STAA HVAL       SAVE 
2B14: FE 2A CC            CVHBD  LDX HVAL         GET FINAL VALUE
2B17: 39                         RTS              RETURN
2B18:                     *                    
2B18:                     * ROUTINE TO CONVERT ASCII TO BINARY
2B18:                     *                    
2B18: A6 00               CVHBS  LDAA 0,X        GET BYTE
2B1A: 80 30                      SUBA #$30       CONVERT
2B1C: 81 09                      CMPA #$09       0 - 9 ?
2B1E: 2F 02                      BLE *+4          YES
2B20: 80 07                      SUBA #$07       NO, 10 - 15
2B22: 39                         RTS            
2B23:                     *                    
2B23:                     * CVDB: CONVERT DECIMAL TO BINARY
2B23:                     * ON ENTRY DESCRA = ADDRESS OF DECIMAL STRING
2B23:                     *          DESCRC = # BYTES IN DECIMAL STRING
2B23:                     * ON RETURN [X] = VALUE IN BINARY
2B23:                     *                    
2B23:                     DVAL   RMB 2            TEMP STORAGE FOR BINARY
2B25:                     DCOUNT RMB 1            DIGIT COUNT 
2B26:                     TENVL  RMB 2            POWER OF TEN
2B28:                     DXSAV  RMB 2            TEMPORARY STORAGE FOR X
2B2A:                     *                    
2B2A: 7F 2B 23            CVDB   CLR DVAL         DVAL:=0
2B2D: 7F 2B 24                   CLR DVAL+1     
2B30: 7F 2B 26                   CLR TENVL      
2B33: 7F 2B 27                   CLR TENVL+1    
2B36: 7C 2B 27                   INC TENVL+1      TENVL:=1
2B39: FE 22 78                   LDX DESCRA       POINT TO STRING
2B3C: 09                         DEX            
2B3D: F6 22 7A                   LDAB DESCRC    
2B40: F7 2B 25                   STAB DCOUNT     INIT DCOUNT
2B43:                     *                    
2B43: 08                  CVDB1  INX              POINT TO
2B44: 5A                         DEC B            LEAST SIGNIFICANT
2B45: 26 FC                      BNE CVDB1        DIGIT
2B47:                     *                    
2B47: FF 2B 28            CVDB2  STX DXSAV        SAVE POINTER
2B4A: E6 00                      LDAB 0,X        GET DIGIT
2B4C: C4 0F                      ANDB #$0F       CONVERT TO BCD
2B4E: 4F                         CLR A            CLEAR ACCUMULATOR
2B4F: CE 2B 26                   LDX #TENVL       POINT TO POWER OF TEN
2B52: BD 2B 7D                   JSR MPY16        (A,B):=TENVL*DIGIT
2B55: FB 2B 24                   ADDB DVAL+1     DVAL:=DVAL+TENVL*DIGIT
2B58: B9 2B 23                   ADCA DVAL     
2B5B: B7 2B 23                   STAA DVAL      
2B5E: F7 2B 24                   STAB DVAL+1    
2B61: 4F                         CLR A          
2B62: C6 0A                      LDAB #$0A       B:=10 
2B64: CE 2B 26                   LDX #TENVL       POINT TO POWER OF TEN
2B67: BD 2B 7D                   JSR MPY16        TENVL:=TENVL*10
2B6A: B7 2B 26                   STAA TENVL     
2B6D: F7 2B 27                   STAB TENVL+1   
2B70: FE 2B 28                   LDX DXSAV        RESTORE POINTER TO STRING
2B73: 09                         DEX              POINT NEXT LEFT DIGIT
2B74: 7A 2B 25                   DEC DCOUNT       DONE?
2B77: 26 CE                      BNE CVDB2        NO 
2B79: FE 2B 23                   LDX DVAL         GET FINAL VALUE
2B7C: 39                         RTS              RETURN
2B7D:                     *                    
2B7D:                     * MPY16 16 BIT MULTIPLY ROUTINE
2B7D:                     * (A,B):=(A,B)*(2 BYTES POINTED AT BY X REG)
2B7D:                     * USES 7 BYTES ON THE STACK
2B7D:                     *                    
2B7D: 37                  MPY16  PSH B            PUT VALUES ON THE STACK
2B7E: 36                         PSH A          
2B7F: A6 01                      LDAA 1,X       
2B81: 36                         PSH A          
2B82: A6 00                      LDAA 0,X       
2B84: 36                         PSH A          
2B85: 86 10                      LDAA #16       
2B87: 36                         PSH A          
2B88: 30                         TSX              POINT TO DATA
2B89: A6 03                      LDAA 3,X       
2B8B:                     *                    
2B8B: 58                  MPY163 ASL B          
2B8C: 49                         ROL A            FORM ANSWER
2B8D: 68 02                      ASL 2,X          SHIFT MULTIPLICAND
2B8F: 69 01                      ROL 1,X        
2B91: 24 04                      BCC MPY167     
2B93: EB 04                      ADDB 4,X        ADD MULTIPLIER
2B95: A9 03                      ADCA 3,X      
2B97: 6A 00               MPY167 DEC 0,X        
2B99: 26 F0                      BNE MPY163       COUNT NOT ZERO
2B9B: 31                         INS            
2B9C: 31                         INS            
2B9D: 31                         INS            
2B9E: 31                         INS            
2B9F: 31                         INS            
2BA0: 39                         RTS              ALL DONE
2BA1:                     *                    
2BA1:                     * DIV16 16 BIT DIVIDE (UNSIGNED)
2BA1:                     * (A,B):=(A,B)/ (X),(X+1)
2BA1:                     * [X]=REMAINDER      
2BA1:                     *                    
2BA1: 37                  DIV16  PSH B            DIVIDEND TO STACK
2BA2: 36                         PSH A          
2BA3: A6 00                      LDAA 0,X       
2BA5: E6 01                      LDAB 1,X       
2BA7: 37                         PSH B            DIVISOR TO STACK
2BA8: 36                         PSH A          
2BA9: 34                         DES              LEAVE R(X)M FOR COUNT
2BAA: 30                         TSX              (X) PNTR TO STACKED DATA
2BAB: 86 01                      LDAA #1        
2BAD: 6D 01                      TST 1,X        
2BAF: 2B 0B                      BMI DIV153     
2BB1: 4C                  DIV151 INC A          
2BB2: 68 02                      ASL 2,X        
2BB4: 69 01                      ROL 1,X        
2BB6: 2B 04                      BMI DIV153     
2BB8: 81 11                      CMPA #17       
2BBA: 26 F5                      BNE DIV151     
2BBC: A7 00               DIV153 STAA 0,X        SAVE COUNT
2BBE: A6 03                      LDAA 3,X       
2BC0: E6 04                      LDAB 4,X       
2BC2: 6F 03                      CLR 3,X        
2BC4: 6F 04                      CLR 4,X        
2BC6: E0 02               DIV163 SUBB 2,X      
2BC8: A2 01                      SBCA 1,X      
2BCA: 24 07                      BCC DIV165       DIVISOR STILL OK
2BCC: EB 02                      ADDB 2,X        DIVISOR TOO LARGE
2BCE: A9 01                      ADCA 1,X        RESTORE
2BD0: 0C                         CLC            
2BD1: 20 01                      BRA DIV167     
2BD3: 0D                  DIV165 SEC            
2BD4: 69 04               DIV167 ROL 4,X        
2BD6: 69 03                      ROL 3,X        
2BD8: 64 01                      LSR 1,X          ADJUST DIVISOR
2BDA: 66 02                      ROR 2,X        
2BDC: 6A 00                      DEC 0,X        
2BDE: 26 E6                      BNE DIV163     
2BE0:                     *                    
2BE0: A7 00                      STAA 0,X        SAVE REMAINDER IN X
2BE2: E7 01                      STAB 1,X       
2BE4: EE 00                      LDX 0,X        
2BE6: 31                         INS              CLEAN UP STACK
2BE7: 31                         INS            
2BE8: 31                         INS            
2BE9: 32                         PUL A          
2BEA: 33                         PUL B          
2BEB: 39                         RTS            
2BEC:                     *                    
2BEC:                     * ADD16 16 BITADDITION
2BEC:                     *[X] POINTS:         
2BEC:                     *           LOC(2),TEMP(2)
2BEC:                     * LOC(2):=LOC(2)+TEMP(2)
2BEC:                     *                    
2BEC: 36                  ADD16  PSH A          
2BED: 37                         PSH B          
2BEE: A6 01                      LDAA 1,X       
2BF0: E6 00                      LDAB 0,X       
2BF2: AB 03                      ADDA 3,X      
2BF4: E9 02                      ADCB 2,X      
2BF6: A7 01                      STAA 1,X       
2BF8: E7 00                      STAB 0,X       
2BFA: 33                         PUL B          
2BFB: 32                         PUL A          
2BFC: 39                         RTS            
2BFD:                     *                    
2BFD:                     * SUB16 16 BIT SUBTRACTION
2BFD:                     * [X] POINTS:        
2BFD:                     *            LOC(2),TEMP(2)
2BFD:                     * LOC(2):=LOC(2)-TEMP(2)
2BFD:                     *                    
2BFD: 36                  SUB16  PSH A          
2BFE: 37                         PSH B          
2BFF: A6 01                      LDAA 1,X       
2C01: E6 00                      LDAB 0,X       
2C03: A0 03                      SUBA 3,X      
2C05: E2 02                      SBCB 2,X      
2C07: A7 01                      STAA 1,X       
2C09: E7 00                      STAB 0,X       
2C0B: 33                         PUL B          
2C0C: 32                         PUL A          
2C0D: 39                         RTS            
2C0E:                     *                    
2C0E:                     * PRINTL PRINT A LINE ON THE TTY 
2C0E:                     *                    
2C0E: B6 22 6B            PRINTL LDAA OPTNS      GET OPTIONS
2C11: 85 80                      BITA #$80       LIST?
2C13: 26 14                      BNE PLEND        NO
2C15: 7D 22 72                   TST PASS         PASS2
2C18: 27 0F                      BEQ PLEND        PASS1
2C1A: 7D 23 09                   TST MACFLG       MACRO FLAG SET?
2C1D: 27 04                      BEQ PRINT1       NO
2C1F:                     *                    
2C1F: 85 10                      BITA #$10       PRINT MACROS?
2C21: 26 06                      BNE PLEND        NO
2C23:                     *                    
2C23: BD 2C 2A            PRINT1 JSR LINCK        CHECK LINE #
2C26: BD 2C 71                   JSR OUTL         PRINT A LINE
2C29: 39                  PLEND  RTS              ALL DONE
2C2A:                     *                    
2C2A:                     * LINE CHECK FOR TOP OF PAGE, ETC.
2C2A:                     *                    
2C2A: 37                  LINCK  PSH B          
2C2B: F6 22 84                   LDAB LCOUNT    
2C2E: C1 00                      CMPB #$00       END OF PAGE?
2C30: 26 03                      BNE LINCKA       NO
2C32: BD 2C 44                   JSR SPACER       YES SPACE TO TOP OF PAGE
2C35: 7C 22 84            LINCKA INC LCOUNT       BUMP LCOUNT 
2C38: F6 22 84                   LDAB LCOUNT    
2C3B: C1 3C                      CMPB #$3C       LCOUNT = 60?
2C3D: 26 03                      BNE LINCKB       NO
2C3F: 7F 22 84                   CLR LCOUNT       YES,SET FOR TOP OF PAGE
2C42: 33                  LINCKB PUL B          
2C43: 39                         RTS            
2C44:                     *                    
2C44:                     * SPACE TO TOP OF PAGE AND PRINT PAGE MARK
2C44:                     *                    
2C44: CE 2C 4B            SPACER LDX #HEADR       POINT TO DATA
2C47: BD 38 61                   JSR PDATA1       PRINT ON TTY
2C4A: 39                         RTS            
2C4B:                     *                    
2C4B: 0D 0C               HEADR  FDB $0D0C        CRLF
2C4D: 0D 0A                      FDB $0D0A      
2C4F: 0D 0A                      FDB $0D0A      
2C51: 2E 2E 2E 2E 2E 2E          FCC '.............'
2C57: 2E 2E 2E 2E 2E 2E 
2C5D: 2E                
2C5E: 0D 0A                      FDB $0D0A      
2C60: 0D 0A                      FDB $0D0A      
2C62: 0D 0A                      FDB $0D0A      
2C64: 04                         FCB $04          EOT  zzz
2C65:                     *                    
2C65:                     * PRINT A FORMATED LINE OF LISTING ON THE TTY
2C65:                     *                    
2C65:                     MCOUNT RMB 1            # BYTES OF MACHINE CODE
2C66:                     POP    RMB 1            PSEUDOPIO:=N0;1,2 BYTES
2C67:                     OPCD   RMB 1            OPCODE IN HEX 
2C68:                     ADR1   RMB 1            INSTRUCTION ADDRESS
2C69:                     ADR2   RMB 1            
2C6A:                     LINEN  RMB 5            LINENUM IN ASCII
2C6F: 20 04                      FDB $2004        EOT    
2C71:                     *                    
2C71:                     *                    
2C71: CE 2C 6A            OUTL   LDX #LINEN       LOAD PARAMS
2C74: B6 22 6C                   LDAA LNUM       LOAD LINNUM (BINARY)
2C77: F6 22 6D                   LDAB LNUM+1    
2C7A: BD 2D 5C                   JSR CVBTD        CONVERT TO DECIMAL (ASCII)
2C7D: CE 2C 6B                   LDX #LINEN+1     POINT TO DECIMAL LINE#
2C80: BD 38 61                   JSR PDATA1       PRINT LINE NUM
2C83:                     *                    
2C83: 7D 23 09                   TST MACFLG       MACRO LINE?
2C86: 27 08                      BEQ OUTLB1       NO
2C88:                     *                    
2C88: 86 2B                      LDAA #'+'      
2C8A: BD 38 88                   JSR OUTCHR     
2C8D:                     *                    
2C8D: CE 2D 59                   LDX #BLANK6    
2C90: BD 38 61            OUTLB1 JSR PDATA1       PRINT 2 BLANKS
2C93:                     *                    
2C93: 7D 2C 65                   TST MCOUNT       PRINT LC ?
2C96: 26 0D                      BNE OUTLA        YES
2C98: 7D 2C 66                   TST POP          PRINT LC?
2C9B: 26 08                      BNE OUTLA        YES
2C9D:                     *                    
2C9D: CE 2D 56                   LDX #BLANK3      NO, PRINT BLANKS (5)
2CA0: BD 38 61                   JSR PDATA1     
2CA3: 20 2B                      BRA OUTL2      
2CA5:                     *                    
2CA5: CE 22 70            OUTLA  LDX #LC          POINT TO LC
2CA8: BD 38 71                   JSR OUT4HS       PRINT IN HEX, SPACE
2CAB: F6 2C 66                   LDAB POP        PSEUDOP?
2CAE: 27 20                      BEQ OUTL2        NO
2CB0: C1 01                      CMPB #$01       1 BYTE?
2CB2: 27 0E                      BEQ OUTL1        YES
2CB4: CE 2C 68                   LDX #ADR1        POINT TO ADR1, ADR2
2CB7: BD 38 71                   JSR OUT4HS       PRINT 2 BYTES 4 HEX, SPACE
2CBA: CE 2D 58                   LDX #BLANK5      POINT TO SPACES
2CBD: BD 38 61                   JSR PDATA1       PRINT BLANKS
2CC0: 20 45                      BRA OUTL6      
2CC2:                     *                    
2CC2: CE 2C 69            OUTL1  LDX #ADR2        POINT TO ADR2
2CC5: BD 38 73                   JSR OUT2HS       PRINT 1 BYTE 2 HEX, SPACE
2CC8: CE 2D 56                   LDX #BLANK3      POINT TO BLANKS
2CCB: BD 38 61                   JSR PDATA1       PRINT BLANKS 
2CCE: 20 37                      BRA OUTL6      
2CD0: F6 2C 65            OUTL2  LDAB MCOUNT     PRINT NOTHING?
2CD3: 26 08                      BNE OUTL3        NO 
2CD5: CE 2D 53                   LDX #BLANK       PRINT JUST 8 BLANKS
2CD8: BD 38 61                   JSR PDATA1     
2CDB: 20 2A                      BRA OUTL6      
2CDD:                     *                    
2CDD: CE 2C 67            OUTL3  LDX #OPCD      
2CE0: BD 38 73                   JSR OUT2HS       PRINT OPCODE(HEX), SPACE
2CE3: C1 01                      CMPB #$01       ONLY OP CODE?
2CE5: 26 08                      BNE OUTL4        NO
2CE7: CE 2D 56                   LDX #BLANK3      PRINT BLANKS
2CEA: BD 38 61                   JSR PDATA1     
2CED: 20 18                      BRA OUTL6      
2CEF:                     *                    
2CEF: C1 02               OUTL4  CMPB #$02       1 BYTE ADDRESS?
2CF1: 26 0E                      BNE OUTL5        NO,2 BYTES
2CF3: CE 2C 69                   LDX #ADR2        POINT TO OPERAND
2CF6: BD 38 73                   JSR OUT2HS       PRINT 1 BYTE ADDRESS,SPACE
2CF9: CE 2D 59                   LDX #BLANK6      PRINT BLANKS
2CFC: BD 38 61                   JSR PDATA1     
2CFF: 20 06                      BRA OUTL6      
2D01:                     *                    
2D01: CE 2C 68            OUTL5  LDX #ADR1        POINT TO ADR1,ADR2
2D04: BD 38 71                   JSR OUT4HS     
2D07:                     *                    
2D07: 7D 22 75            OUTL6  TST CMNFLG       COMMON?
2D0A: 27 04                      BEQ *+6          NO
2D0C:                     *                    
2D0C: 86 43                      LDAA #'C'      
2D0E: 20 1D                      BRA OUTL6B     
2D10:                     *                    
2D10: 7D 22 76                   TST EXTFLG       EXTERNAL?
2D13: 27 04                      BEQ *+6          NO
2D15:                     *                    
2D15: 86 58                      LDAA #'X'      
2D17: 20 14                      BRA OUTL6B     
2D19:                     *                    
2D19: 7D 22 77                   TST ENTFLG       ENTRY?
2D1C: 27 04                      BEQ *+6          NO
2D1E:                     *                    
2D1E: 86 4E                      LDAA #'N'      
2D20: 20 0B                      BRA OUTL6B     
2D22:                     *                    
2D22: 7D 22 74                   TST RELFLG       RELOCATABLE?
2D25: 27 04                      BEQ *+6          NO
2D27:                     *                    
2D27: 86 52                      LDAA #'R'      
2D29: 20 02                      BRA OUTL6B     
2D2B:                     *                    
2D2B: 86 20               OUTL6A LDAA #$20       LOAD SPACE
2D2D: BD 38 88            OUTL6B JSR OUTCHR       PRINT (A)
2D30: 86 20                      LDAA #$20       LOAD SPACE
2D32: BD 38 88                   JSR OUTCHR       PRINT SPACE
2D35: FE 22 7D            OUTL7A LDX CULINE       POINT TO LINE
2D38: A6 00               OUTL7  LDAA 0,X        GET CHAR
2D3A: 36                         PSH A            SAVE A
2D3B: BD 38 88                   JSR OUTCHR       PRINT CHAR
2D3E: 08                         INX              BUMP POINTER
2D3F: 32                         PUL A            RESTORE A
2D40: 81 0D                      CMPA #$0D       CR?
2D42: 26 F4                      BNE OUTL7        NO
2D44: 86 0A                      LDAA #$0A       YES
2D46: BD 38 88                   JSR OUTCHR       PRINT LF
2D49: 7F 2C 66                   CLR POP        
2D4C: 7F 2C 65                   CLR MCOUNT     
2D4F: 7F 22 74                   CLR RELFLG     
2D52: 39                         RTS            
2D53:                     *                    
2D53: 20                  BLANK  FCB $20          BLANKS
2D54: 20                         FCB $20          
2D55: 20                         FCB $20          
2D56: 20                  BLANK3 FCB $20          
2D57: 20                         FCB $20          
2D58: 20                  BLANK5 FCB $20          
2D59: 20                  BLANK6 FCB $20          
2D5A: 20                         FCB $20          
2D5B: 04                         FCB $04          EOT
2D5C:                     *                    
2D5C:                     * CONVERT BINARY 16 BITS TO 5 DECIMAL DIGITS
2D5C:                     * ON ENTRY (A,B) = 16 BITBINARY VALUE
2D5C:                     * [X] = ADDRESS OF 5 BYTE STRING FOR DECIMAL
2D5C:                     * (ASCII) CONVERTED VALUE
2D5C:                     *                    
2D5C: FF 2D 9D            CVBTD  STX SAVEX        SAVE DATA PTR
2D5F: CE 2D 92                   LDX #KIOK        LOAD PTR TO CONSTANTS
2D62: 7F 2D 9C            CVDEC1 CLR SAVEA        INIT DEC CHAR
2D65: E0 01               CVDEC2 SUBB 1,X      
2D67: A2 00                      SBCA 0,X      
2D69: 25 05                      BCS CVDEC5       OVERFLOW
2D6B: 7C 2D 9C                   INC SAVEA        BUMP CHAR BEING BUILT
2D6E: 20 F5                      BRA CVDEC2     
2D70:                     *                    
2D70: EB 01               CVDEC5 ADDB 1,X        RESTORE PARTIAL RESULT
2D72: A9 00                      ADCA 0,X      
2D74: 36                         PSH A          
2D75: FF 2D 9F                   STX SAVEX1     
2D78: FE 2D 9D                   LDX SAVEX        LOAD STORE CHAR PTR
2D7B: B6 2D 9C                   LDAA SAVEA     
2D7E: 8B 30                      ADDA #$30       MAKE ASCII CHAR
2D80: A7 00                      STAA 0,X       
2D82: 32                         PUL A          
2D83: 08                         INX            
2D84: FF 2D 9D                   STX SAVEX      
2D87: FE 2D 9F                   LDX SAVEX1       LOAD PTR TO CONSTANTS
2D8A: 08                         INX            
2D8B: 08                         INX            
2D8C: 8C 2D 9C                   CPX #KIOK+10   
2D8F: 26 D1                      BNE CVDEC1     
2D91: 39                         RTS            
2D92:                     *                    
2D92:                     * CONSTANTS          
2D92:                     *                    
2D92: 27 10               KIOK   FDB 10000      
2D94: 03 E8                      FDB 1000       
2D96: 00 64                      FDB 100        
2D98: 00 0A                      FDB 10         
2D9A: 00 01                      FDB 1          
2D9C:                     *                    
2D9C:                     * TEMPORARY STORAGE  
2D9C:                     *                    
2D9C:                     SAVEA  RMB 1          
2D9D:                     SAVEX  RMB 2          
2D9F:                     SAVEX1 RMB 2          
2DA1:                     *                    
2DA1:                     * PRINT ERROR MESSAGE ROUTINE
2DA1:                     * ON ENTRY [X] = ERROR NUM IN BCD
2DA1:                     *                    
2DA1:                     ERNUM  RMB 2            ERROR NUM IN BCD
2DA3: 2A 2A 2A 2A 20 45   ERMSA  FCC '**** ERROR# '
2DA9: 52 52 4F 52 23 20 
2DAF:                     ERMSB  RMB 3            ERROR NUM IN ASCII
2DB2: 20                         FCB $20          BLANK
2DB3:                     ERMSC  RMB 5            ERROR NUM IN ASCII
2DB8: 20                         FCB $20          BLANK
2DB9: 3A                         FCC ':'       
2DBA: 04                         FCB $04          EOT
2DBB:                     *                    
2DBB: 36                  PRINTE PSH A          
2DBC: 37                         PSH B          
2DBD: FF 2D A1                   STX ERNUM        SAVE ERROR NUM
2DC0: B6 2D A1                   LDAA ERNUM      GET ERROR NUM
2DC3: 8B 30                      ADDA #$30       CONVERT TO ASCII
2DC5: B7 2D AF                   STAA ERMSB      SAVE 
2DC8: B6 2D A2                   LDAA ERNUM+1    GET ERROR NUM
2DCB: 44                         LSR A            SHIFT TO RIGHT NIBBLE
2DCC: 44                         LSR A          
2DCD: 44                         LSR A          
2DCE: 44                         LSR A          
2DCF: 8B 30                      ADDA #$30       CONVERT TO ASCII
2DD1: B7 2D B0                   STAA ERMSB+1    SAVE
2DD4: B6 2D A2                   LDAA ERNUM+1    GET ERROR NUM
2DD7: 84 0F                      ANDA #$0F       MASK OUT LEFT NIBBLE
2DD9: 8B 30                      ADDA #$30       CONVERT TO ASCII
2DDB: B7 2D B1                   STAA ERMSB+2    SAVE
2DDE: CE 2D B3                   LDX #ERMSC       POINT TO LNUM AREA
2DE1: B6 22 6C                   LDAA LNUM      
2DE4: F6 22 6D                   LDAB LNUM+1    
2DE7: BD 2D 5C                   JSR CVBTD        CONVERT LNUM TO DECIMAL 
2DEA: CE 2D A3                   LDX #ERMSA       PRINT MESSAGE
2DED: BD 38 61                   JSR PDATA1     
2DF0: BD 2D 35                   JSR OUTL7A       PRINT LAST PART OF LINE
2DF3: 33                         PUL B          
2DF4: 32                         PUL A          
2DF5: FE 22 85                   LDX ECOUNT       BUMP ECOUNT
2DF8: 08                         INX            
2DF9: FF 22 85                   STX ECOUNT     
2DFC: FE 2D A1            PEXIT  LDX ERNUM      
2DFF: 39                         RTS            
2E00:                     *                    
2E00:                     *        ADDRESS TYPE 1
2E00:                     *                    
2E00:                     * [ADCADDAND BIT CMP EOR LDA ORA SBC SUB]
2E00:                     *                    
2E00:                     * IMMEDIATE (2 BYTES):
2E00:                     *   CCC A #NUMBER      CCC B #NUMBER
2E00:                     *   CCC A #SYMBOL      CCC B #SYMBOL
2E00:                     *   CCC A #EXPRESSION  CCC B #EXPRESSION
2E00:                     *   CCC A #'C'         CCC B #'C
2E00:                     *                    
2E00:                     * DIRECT (2 BYTES) OR EXTENDED (3 BYTES):
2E00:                     *   CCC A NUMBER       CCC B NUMBER
2E00:                     *   CCC A SYMBOL       CCC B SYMBOL
2E00:                     *   CCC A EXPRESSION   CCC B EXPRESSION
2E00:                     *                    
2E00:                     * INDEXED (2 BYTE):  
2E00:                     *   CCC A NUMBER,X     CCC B NUMBER,X
2E00:                     *   CCC A SYMBOL,X     CCC B SYMBOL,X
2E00:                     *   CCC A EXPRESSION,X CCC B EXPRESSION,X
2E00:                     *                    
2E00: BD 30 89            ADDR1  JSR ADRINT       INIT ADDR FIELD VALUES
2E03: BD 26 F6                   JSR NXTOK        GET NEXT TOKEN
2E06: C1 0D                      CMPB #$0D       EOL?
2E08: 26 08                      BNE ADDR1B       NO
2E0A:                     *                    
2E0A: CE 02 04            ADDR1A LDX #$0204       ERROR
2E0D: BD 2D BB                   JSR PRINTE       PRINT 
2E10: 20 5B                      BRA ADDR1E       RETURN
2E12:                     *                    
2E12: BD 30 B7            ADDR1B JSR ABRCK        CHECK FOR REG A OR B
2E15: F6 30 84                   LDAB ABR        NEITHER?
2E18: 27 F0                      BEQ ADDR1A       YES ERROR
2E1A: BD 26 F6                   JSR NXTOK        GET NEXT TOKEN
2E1D: C1 23                      CMPB #$23       IMMEDIATE MODE?
2E1F: 26 14                      BNE ADDR1C       NO
2E21: 73 30 85                   COM IMMED        SET IMMEDIATE FLAG
2E24: BD 26 F6                   JSR NXTOK        GET NEXT TOKEN
2E27: C1 27                      CMPB #$27       "'" ?
2E29: 26 0A                      BNE ADDR1C       NO
2E2B:                     *                    
2E2B: FE 22 7B                   LDX CUCHAR       GET NEXT CHARACTER
2E2E: A6 00                      LDAA 0,X       
2E30: B7 2C 69                   STAA ADR2      
2E33: 20 0B                      BRA ADDR1K     
2E35:                     *                    
2E35: BD 29 B5            ADDR1C JSR NSEVL        EVALUATE OPERAND
2E38: BD 30 D7                   JSR P2ERR        PRINT PASS 2 ERRORS
2E3B: F6 30 85                   LDAB IMMED      IMMEDIATE MODE?
2E3E: 27 0C                      BEQ ADDR1D       NO
2E40: C6 80               ADDR1K LDAB #$80       IMMEDIATE FORM A
2E42: F7 30 87                   STAB ORBYA      NIBBLE
2E45: C6 C0                      LDAB #$C0       OF
2E47: F7 30 88                   STAB ORBYB      MACHINE CODE
2E4A: 20 3C                      BRA ADDR1H     
2E4C:                     *                    
2E4C: BD 26 F6            ADDR1D JSR NXTOK        GET NEXT TOKEN
2E4F: BD 30 C4                   JSR INXCK        INDEXED?
2E52: 26 2A                      BNE ADDR1G       YES
2E54:                     *                    
2E54: 7D 22 75                   TST CMNFLG       COMMON?
2E57: 26 0A                      BNE ADDR1L       YES
2E59:                     *                    
2E59: 7D 22 74                   TST RELFLG       RELOC?
2E5C: 26 05                      BNE ADDR1L       YES
2E5E:                     *                    
2E5E: F6 2C 68                   LDAB ADR1       DIRECT?
2E61: 27 0F                      BEQ ADDR1F       YES
2E63:                     *                    
2E63: C6 B0               ADDR1L LDAB #$B0       EXTENDED,FORM A
2E65: F7 30 87                   STAB ORBYA      NIBBLE
2E68: C6 F0                      LDAB #$F0       OF
2E6A: F7 30 88                   STAB ORBYB      MACHINE CODE
2E6D:                     *                    
2E6D: BD 31 5E            ADDR1E JSR LCNAB3       FORM MACHINE CODE
2E70: 20 19                      BRA ADDR1J     
2E72:                     *                    
2E72: C6 90               ADDR1F LDAB #$90       DIRECT,FORM A
2E74: F7 30 87                   STAB ORBYA      NIBBLE
2E77: C6 D0                      LDAB #$D0       OF
2E79: F7 30 88                   STAB ORBYB      MACHINE CODE
2E7C: 20 0A                      BRA ADDR1H     
2E7E:                     *                    
2E7E: C6 A0               ADDR1G LDAB #$A0       INDEXED,FORM A
2E80: F7 30 87                   STAB ORBYA      NIBBLE 
2E83: C6 E0                      LDAB #$E0       OF
2E85: F7 30 88                   STAB ORBYB      MACHINE CODE
2E88:                     *                    
2E88: BD 31 13            ADDR1H JSR LCNAB2       FORM MACHINE CODE
2E8B: BD 31 C2            ADDR1J JSR LCLCN        LC:=LC+LCN
2E8E: 7E 24 90                   JMP MAIN1        RETURN TO MAIN LOOP
2E91:                     *                    
2E91:                     *        ADDRESS TYPE 2
2E91:                     *                    
2E91:                     * [STA]              
2E91:                     *                    
2E91:                     * DIRECT (2 BYTES) OR EXTENDED (3 BYTES)
2E91:                     *   CCC A NUMBER        CCC B NUMBER
2E91:                     *   CCC A SYMBOL        CCC B SYMBOL
2E91:                     *   CCC A EXPRESSION    CCC B EXPRESSION
2E91:                     *                    
2E91:                     * INDEXED (2 BYTES)  
2E91:                     *   CCC A NUMBER,X      CCC B NUMBER,X
2E91:                     *   CCC A SYMBOL,X      CCC B SYMBOL,X
2E91:                     *   CCC A EXPRESSION,X  CCC B EXPRESSION,X
2E91:                     *                    
2E91: BD 30 89            ADDR2  JSR ADRINT       INIT ADR FIELD FLAGS
2E94: BD 26 F6                   JSR NXTOK        GET NEXT TOKEN
2E97: C1 0D                      CMPB #$0D       EOL?
2E99: 26 08                      BNE ADDR2B       NO
2E9B:                     *                    
2E9B: CE 02 04            ADDR2A LDX #$0204       ERROR
2E9E: BD 2D BB                   JSR PRINTE       PRINT 
2EA1: 20 32                      BRA ADDR2E       RETURN
2EA3:                     *                    
2EA3: BD 30 B7            ADDR2B JSR ABRCK        CHECK FOR REGISTER A OR B
2EA6: F6 30 84                   LDAB ABR        NEITHER?
2EA9: 27 F0                      BEQ ADDR2A       YES ERROR
2EAB: BD 26 F6                   JSR NXTOK        GET NEXT TOKEN
2EAE: BD 29 B5                   JSR NSEVL        EVALUATE OPERAND
2EB1: BD 30 D7                   JSR P2ERR        PRINT PASS 2 ERRORS
2EB4: BD 26 F6                   JSR NXTOK        GET NEXT TOKEN
2EB7: BD 30 C4                   JSR INXCK        INDEXED?
2EBA: 26 2A                      BNE ADDR2G       YES
2EBC:                     *                    
2EBC: 7D 22 75                   TST CMNFLG       COMMON?
2EBF: 26 0A                      BNE ADDR2K       YES
2EC1:                     *                    
2EC1: 7D 22 74                   TST RELFLG       RELOC?
2EC4: 26 05                      BNE ADDR2K       YES
2EC6:                     *                    
2EC6: F6 2C 68                   LDAB ADR1       DIRECT?
2EC9: 27 0F                      BEQ ADDR2F       YES
2ECB:                     *                    
2ECB: C6 B0               ADDR2K LDAB #$B0       EXTENDED,FORM A
2ECD: F7 30 87                   STAB ORBYA      NIBBLE 
2ED0: C6 F0                      LDAB #$F0       OF
2ED2: F7 30 88                   STAB ORBYB      MACHINE CODE
2ED5:                     *                    
2ED5: BD 31 5E            ADDR2E JSR LCNAB3       FORM MACHINE CODE
2ED8: 20 19                      BRA ADDR2J     
2EDA:                     *                    
2EDA: C6 90               ADDR2F LDAB #$90       DIRECT,FORM A
2EDC: F7 30 87                   STAB ORBYA      NIBBLE
2EDF: C6 D0                      LDAB #$D0       OF
2EE1: F7 30 88                   STAB ORBYB      MACHINE CODE
2EE4: 20 0A                      BRA ADDR2H     
2EE6:                     *                    
2EE6: C6 A0               ADDR2G LDAB #$A0       INDEXED,FORM A
2EE8: F7 30 87                   STAB ORBYA      NIBBLE
2EEB: C6 E0                      LDAB #$E0       OF
2EED: F7 30 88                   STAB ORBYB      MACHINE CODE
2EF0:                     *                    
2EF0: BD 31 13            ADDR2H JSR LCNAB2      FORM MACHINE CODE
2EF3: BD 31 C2            ADDR2J JSR LCLCN       LC:=LC+LCN
2EF6: 7E 24 90                   JMP MAIN1       RETURN TO MAIN LOOP
2EF9:                     *                    
2EF9:                     *        ADDRESS TYPE 3
2EF9:                     *                    
2EF9:                     * [ASL ASR CLR COM DEC INC LSR NEG ROL ROR TST]
2EF9:                     *                    
2EF9:                     * ACCUMULATOR (1 BYTE)
2EF9:                     *   CCC A            
2EF9:                     *   CCC B            
2EF9:                     *                    
2EF9:                     * EXTENDED (3 BYTES) 
2EF9:                     *   CCC NUMBER       
2EF9:                     *   CCC SYMBOL       
2EF9:                     *   CCC EXPRESSION   
2EF9:                     *                    
2EF9:                     * INDEXED (2 BYTES)  
2EF9:                     *   CCC NUMBER,X     
2EF9:                     *   CCC SYMBOL,X     
2EF9:                     *   CCC EXPRESSION,X 
2EF9:                     *                    
2EF9: BD 30 89            ADDR3  JSR ADRINT       INIT ADR FIELD FLAGS
2EFC: BD 26 F6                   JSR NXTOK        GET NEXT TOKEN
2EFF: C1 0D                      CMPB #$0D       EOL?
2F01: 26 08                      BNE ADDR3B       NO
2F03:                     *                    
2F03: CE 02 04                   LDX #$0204       ERROR
2F06: BD 2D BB                   JSR PRINTE       PRINT
2F09: 20 2A                      BRA ADDR3D       RETURN
2F0B:                     *                    
2F0B: BD 30 B7            ADDR3B JSR ABRCK        CHECK FOR REGISTER A OR B
2F0E: 7D 30 84                   TST ABR          NEITHER?
2F11: 27 0F                      BEQ ADDR3C       YES
2F13: C6 40                      LDAB #$40       ACCUMULATOR,FORM A
2F15: F7 30 87                   STAB ORBYA      NIBBLE
2F18: C6 50                      LDAB #$50       OF
2F1A: F7 30 88                   STAB ORBYB      MACHINE CODE
2F1D: BD 30 EA                   JSR LCNAB1       FORM MACHINE CODE
2F20: 20 20                      BRA ADDR3F     
2F22:                     *                    
2F22: BD 29 B5            ADDR3C JSR NSEVL        EVALUATE OPERAND
2F25: BD 30 D7                   JSR P2ERR        PRINT PASS 2 ERRORS
2F28: BD 26 F6                   JSR NXTOK        GET NEXT TOKEN
2F2B: BD 30 C4                   JSR INXCK        INDEXED?
2F2E: 26 0A                      BNE ADDR3E       YES  
2F30:                     *                    
2F30: C6 70                      LDAB #$70       EXTENDED,FORM A 
2F32: F7 30 87                   STAB ORBYA      NIBBLE OF MACHINE CODE
2F35:                     *                    
2F35: BD 31 7C            ADDR3D JSR LCN3         FORM MACHINE CODE
2F38: 20 08                      BRA ADDR3F     
2F3A:                     *                    
2F3A: C6 60               ADDR3E LDAB #$60       INDEXED,FORM A
2F3C: F7 30 87                   STAB ORBYA      NIBBLE OF MACHINE CODE
2F3F: BD 31 31                   JSR LCN2         FORM MACHINE CODE
2F42:                     *                    
2F42: BD 31 C2            ADDR3F JSR LCLCN        LC:=LC+LCN
2F45: 7E 24 90                   JMP MAIN1        RETURN TO MAIN LOOP
2F48:                     *                    
2F48:                     *        ADDRESS TYPE 4
2F48:                     *                    
2F48:                     * [PSH PUL]          
2F48:                     *                    
2F48:                     * ACCUMULATOR (1 BYTE)
2F48:                     *   PSH A            
2F48:                     *   PSH B            
2F48:                     *   PUL A            
2F48:                     *   PUL B            
2F48:                     *                    
2F48: BD 30 89            ADDR4  JSR ADRINT       INIT ADDRESS FIELD FLAGS
2F4B: BD 26 F6                   JSR NXTOK        GET NEXT TOKEN
2F4E: BD 30 B7                   JSR ABRCK        CHECK FOR A, B REG
2F51: 7D 30 84                   TST ABR          NEITHER ?
2F54: 26 06                      BNE ADDR4A       NO
2F56:                     *                    
2F56: CE 02 04                   LDX #$0204       ERROR 
2F59: BD 2D BB                   JSR PRINTE     
2F5C:                     *                    
2F5C: 7C 30 88            ADDR4A INC ORBYB        ORBYB:=01
2F5F: BD 30 EA                   JSR LCNAB1       FORM MC
2F62: BD 31 C2                   JSR LCLCN        LC:=LC+LCN
2F65: 7E 24 90                   JMP MAIN1        RETURN TO MAIN LOOP
2F68:                     *                    
2F68:                     *        ADDRESS TYPE 5
2F68:                     *                    
2F68:                     * [CPX LDS LDX]      
2F68:                     *                    
2F68:                     * IMMEDIATE (3 BYETS)
2F68:                     *   CCC #NUMBER      
2F68:                     *   CCC #SYMBOL      
2F68:                     *   CCC #EXPRESSION  
2F68:                     *   CCC #'CC         
2F68:                     *                    
2F68:                     * DIRECT (2 BYTES) OR EXTENDED (3 BYTES)
2F68:                     *   CCC NUMBER       
2F68:                     *   CCC SYMBOL       
2F68:                     *   CCC EXPRESSION   
2F68:                     *                    
2F68:                     * INDEXED (2 BYTES)  
2F68:                     *   CCC NUMBER,X     
2F68:                     *   CCC SYMBOL,X     
2F68:                     *   CCC EXPESSION,X  
2F68:                     *                    
2F68: BD 30 89            ADDR5  JSR ADRINT       INIT ADDRESS FIELD FLAGS
2F6B: BD 26 F6                   JSR NXTOK        GET NEXT TOKEN
2F6E: C1 0D                      CMPB #$0D       EOL?
2F70: 26 08                      BNE ADDR5B       NO
2F72:                     *                    
2F72: CE 02 40            ADDR5A LDX #$0240       ERROR
2F75: BD 2D BB                   JSR PRINTE       PRINT 
2F78: 20 46                      BRA ADDR5E       RETURN
2F7A:                     *                    
2F7A: C1 23               ADDR5B CMPB #$23       IMMEDIATE?
2F7C: 26 19                      BNE ADDR5C       NO
2F7E: 73 30 85                   COM IMMED        SET IMMEDIATE FLAG
2F81: BD 26 F6                   JSR NXTOK        GET NEXT TOKEN
2F84: C1 27                      CMPB #$27       "'" ?
2F86: 26 0F                      BNE ADDR5C       NO
2F88:                     *                    
2F88: FE 22 7B                   LDX CUCHAR       YES,GET NEXT 2 CHARACTERS
2F8B: A6 00                      LDAA 0,X       
2F8D: B7 2C 68                   STAA ADR1      
2F90: A6 01                      LDAA 1,X       
2F92: B7 2C 69                   STAA ADR2      
2F95: 20 29                      BRA ADDR5E     
2F97:                     *                    
2F97: BD 29 B5            ADDR5C JSR NSEVL        EVALUATE OPERAND
2F9A: BD 30 D7                   JSR P2ERR        PRINT PASS 2 ERRORS
2F9D: F6 30 85                   LDAB IMMED      IMMEDIATE?
2FA0: 27 02                      BEQ ADDR5D       NO
2FA2: 20 1C                      BRA ADDR5E       YES
2FA4:                     *                    
2FA4: BD 26 F6            ADDR5D JSR NXTOK        GET NEXT TOKEN
2FA7: BD 30 C4                   JSR INXCK        INDEXED?
2FAA: 26 20                      BNE ADDR5G       YES
2FAC:                     *                    
2FAC: 7D 22 75                   TST CMNFLG       COMMON?
2FAF: 26 0A                      BNE ADDR5K       YES
2FB1:                     *                    
2FB1: 7D 22 74                   TST RELFLG       RELOC?
2FB4: 26 05                      BNE ADDR5K       YES
2FB6:                     *                    
2FB6: F6 2C 68                   LDAB ADR1       DIRECT?
2FB9: 27 0A                      BEQ ADDR5F       YES
2FBB:                     *                    
2FBB: C6 30               ADDR5K LDAB #$30       EXTENDED,FORM A
2FBD: F7 30 87                   STAB ORBYA      NIBBLE OF MACHINE CODE
2FC0: BD 31 7C            ADDR5E JSR LCN3         FORM MACHINE CODE
2FC3: 20 0F                      BRA ADDR5J     
2FC5:                     *                    
2FC5: C6 10               ADDR5F LDAB #$10       DIRECT,FORM A
2FC7: F7 30 87                   STAB ORBYA      NIBBLE OF MACHINE CODE
2FCA: 20 05                      BRA ADDR5H     
2FCC:                     *                    
2FCC: C6 20               ADDR5G LDAB #$20       INDEXED,FORM A
2FCE: F7 30 87                   STAB ORBYA      NIBBLE OF MC
2FD1:                     *                    
2FD1: BD 31 31            ADDR5H JSR LCN2         FORM MC
2FD4: BD 31 C2            ADDR5J JSR LCLCN        LC:=LC+LCN
2FD7: 7E 24 90                   JMP MAIN1        RETURN TO MAIN LOOP
2FDA:                     *                    
2FDA:                     *        ADDRESS TYPE 6
2FDA:                     *                    
2FDA:                     * [STX STS]          
2FDA:                     *                    
2FDA:                     * DIRECT (2 BYTES) OR EXTENDED (3 BYTES)
2FDA:                     *   CCC NUMBER       
2FDA:                     *   CCC SYMBOL       
2FDA:                     *   CCC EXPRESSION   
2FDA:                     *                    
2FDA:                     * INDEXED (2 BYTES)  
2FDA:                     *   CCC NUMBER,X     
2FDA:                     *   CCC SYMBOL,X     
2FDA:                     *   CCC EXPRESSION,X 
2FDA:                     *                    
2FDA: BD 30 89            ADDR6  JSR ADRINT       INIT ADDRESS FIELD FLAGS
2FDD: BD 26 F6                   JSR NXTOK        GET NEXT TOKEN
2FE0: C1 0D                      CMPB #$0D       EOL?
2FE2: 26 B3                      BNE ADDR5C       NO
2FE4: 20 8C                      BRA ADDR5A       YES,ERROR
2FE6:                     *                    
2FE6:                     *        ADDRESS TYPE 7
2FE6:                     *                    
2FE6:                     * [JMP JSR]          
2FE6:                     *                    
2FE6:                     * INDEXED (2 BYTES)  
2FE6:                     *   CCC NUMBER,X     
2FE6:                     *   CCC SYMBOL,X     
2FE6:                     *   CCC EXPRESSION,X 
2FE6:                     *                    
2FE6: BD 30 89            ADDR7  JSR ADRINT       INIT ADDRESS FIELF FLAGS
2FE9: BD 26 F6                   JSR NXTOK        GET NEXT TOKEN
2FEC: C1 0D                      CMPB #$0D       EOL?
2FEE: 26 08                      BNE ADDR7A       NO
2FF0:                     *                    
2FF0: CE 02 04                   LDX #$0204       ERROR 
2FF3: BD 2D BB                   JSR PRINTE       PRINT
2FF6: 20 0E                      BRA ADDR7B     
2FF8:                     *                    
2FF8: BD 29 B5            ADDR7A JSR NSEVL        EVALUATE OPERAND
2FFB: BD 30 D7                   JSR P2ERR        PRINT PASS 2 ERRORS
2FFE: BD 26 F6                   JSR NXTOK        GET NEXT TOKEN
3001: BD 30 C4                   JSR INXCK        INDEXED?
3004: 26 0A                      BNE ADDR7C       YES
3006:                     *                    
3006: C6 10               ADDR7B LDAB #$10       EXTENDED,FORM A NIBBLE
3008: F7 30 87                   STAB ORBYA      OF MC
300B: BD 31 7C                   JSR LCN3         FORM MACHINE CODE
300E: 20 03                      BRA ADDR7D     
3010:                     *                    
3010: BD 31 31            ADDR7C JSR LCN2         FORM MACHINE CODE
3013: BD 31 C2            ADDR7D JSR LCLCN        LC:=LC+LCN 
3016: 7E 24 90                   JMP MAIN1        RETURN TO MAIN LOOP 
3019:                     *                    
3019:                     *        ADDRESS TYPE 8
3019:                     *                    
3019:                     * [BCC BCS BEQ BGE BGT BHI BLE BLS
3019:                     *  BLT BMI BNE BPL BRA BSR BVC BVS]
3019:                     *                    
3019:                     * RELATIVE (2 BYTES) 
3019:                     *   CCC NUMBER       
3019:                     *   CCC SYMBOL       
3019:                     *   CCC EXPRESSION   
3019:                     *                    
3019: BD 30 89            ADDR8  JSR ADRINT       INIT ADDRESS FIELD FLAGS
301C: BD 26 F6                   JSR NXTOK        GET NEXT TOKEN
301F: C1 0D                      CMPB #$0D       EOL?
3021: 26 08                      BNE ADDR8A       NO
3023:                     *                    
3023: CE 02 04                   LDX #$0204       ERROR
3026: BD 2D BB                   JSR PRINTE       PRINT
3029: 20 36                      BRA ADDR8D     
302B:                     *                    
302B: 7D 22 72            ADDR8A TST PASS         PASS ?
302E: 27 31                      BEQ ADDR8D       PASS1
3030:                     *                    
3030: BD 29 B5                   JSR NSEVL        PASS 2 EVAL OPERAND
3033: BD 30 D7                   JSR P2ERR        PRINT PASS 2 ERRORS
3036: FE 22 70                   LDX LC           LSAVE:=LC+2
3039: 08                         INX            
303A: 08                         INX            
303B: FF 22 82                   STX LSAVE      
303E: B6 2C 69                   LDAA ADR2       CALCULATE OFFSET 
3041: F6 2C 68                   LDAB ADR1      
3044: B0 22 83                   SUBA LSAVE+1  
3047: F2 22 82                   SBCB LSAVE    
304A:                     *                    
304A: C1 FF                      CMPB #$FF       CHECK FOR OUT OF RANGE 
304C: 26 03                      BNE ADDR8E     
304E: 4D                         TST A            NEGATIVE? (FF - 80)
304F: 2B 0D                      BMI ADDR8C       OK
3051:                     *                    
3051: C1 00               ADDR8E CMPB #$00      
3053: 26 03                      BNE ADDR8F       OUT OF RANGE 
3055: 4D                         TST A            POSITIVE? (00 - 7F)
3056: 2A 06                      BPL ADDR8C       OK
3058:                     *                    
3058: CE 02 08            ADDR8F LDX #$0208       ERROR
305B: BD 2D BB                   JSR PRINTE       PRINT
305E:                     *                    
305E: B7 2C 69            ADDR8C STAA ADR2       SAVE OFFSET
3061: BD 31 31            ADDR8D JSR LCN2         FORM MC
3064: BD 31 C2                   JSR LCLCN        LC:=LC+LCN
3067: 7E 24 90                   JMP MAIN1        RETURN TO MAIN LOOP
306A:                     *                    
306A:                     *        ADDRESS TYPE 9
306A:                     *                    
306A:                     * [ABA CBA CLC CLI CLV DES DEX INS
306A:                     *  INX NOP RTI RTS SBA SEC SEI SEV
306A:                     *  SWI TAB TAP TBA TPA TSX TXS WAI]
306A:                     *                    
306A:                     * INHERENT (1 BYTE)  
306A:                     *   CCC              
306A:                     *                    
306A: BD 30 89            ADDR9  JSR ADRINT       INIT ADDRESS FIELD FLAGS
306D: 7D 22 72                   TST PASS         PASS ? 
3070: 27 03                      BEQ ADDR9A       PASS 1
3072:                     *                    
3072: BD 38 2E                   JSR OUTBIN       OUTPUT MC
3075:                     *                    
3075: 7C 2C 65            ADDR9A INC MCOUNT       MCOUNT:=1
3078: 7C 22 81                   INC LCN          LCN:=1
307B: BD 2C 0E                   JSR PRINTL     
307E: BD 31 C2                   JSR LCLCN        LC:=LC+LCN  
3081: 7E 24 90                   JMP MAIN1        RETURN TO MAIN LOOP
3084:                     *                    
3084:                     * ROUTINES USED TO INIT AND CHECK ADDRESS FIELD
3084:                     * FLAGS,MC FORMS AND LISTING FLAGS.
3084:                     *                    
3084:                     ABR    RMB 1            REG A OR B FLAG
3085:                     IMMED  RMB 1            IMMEDIATE MODE FLAG
3086:                     INDEX  RMB 1            INDEX MODE FLAG
3087:                     ORBYA  RMB 1            FORM FOR A NIBBLE OF MC
3088:                     ORBYB  RMB 1            FORM FOR A NIBBLE OF MC
3089:                     *                    
3089: 7F 22 81            ADRINT CLR LCN        
308C: 7F 22 74                   CLR RELFLG     
308F: 7F 22 75                   CLR CMNFLG     
3092: 7F 22 76                   CLR EXTFLG     
3095: 7F 22 77                   CLR ENTFLG     
3098: 7F 2C 66                   CLR POP        
309B: F7 2C 67                   STAB OPCD       SAVE OPCODE
309E: 7F 2C 65                   CLR MCOUNT     
30A1: 7F 30 84                   CLR ABR        
30A4: 7F 30 85                   CLR IMMED      
30A7: 7F 30 86                   CLR INDEX      
30AA: 7F 2C 68                   CLR ADR1       
30AD: 7F 2C 69                   CLR ADR2       
30B0: 7F 30 87                   CLR ORBYA      
30B3: 7F 30 88                   CLR ORBYB      
30B6: 39                         RTS            
30B7:                     *                    
30B7:                     * CHECK FOR PRESENCE OF A OR B REG
30B7:                     *                    
30B7: C1 41               ABRCK  CMPB #'A'        IS "A"?
30B9: 27 05                      BEQ ABRCKA       YES
30BB: C1 42                      CMPB #'B'        IS "B"?
30BD: 27 01                      BEQ ABRCKA       YES
30BF: 39                         RTS              NEITHER, RETURN
30C0:                     *                    
30C0: F7 30 84            ABRCKA STAB ABR        SAVE REG
30C3: 39                         RTS            
30C4:                     *                    
30C4:                     * CHECK FOR INDEXED MODE
30C4:                     *                    
30C4: C1 2C               INXCK  CMPB #$2C        COMMA?
30C6: 26 0B                      BNE INXCKR       NO
30C8: BD 26 F6                   JSR NXTOK        GET NEXT TOKEN
30CB: C1 58                      CMPB #'X'        IS "X"?
30CD: 26 04                      BNE INXCKR       NO 
30CF: 73 30 86                   COM INDEX        INDEX:=FF
30D2: 39                         RTS            
30D3:                     *                    
30D3: 7F 30 86            INXCKR CLR INDEX      
30D6: 39                         RTS            
30D7:                     *                    
30D7:                     * CHECK FOR PASS 2 ERRORS
30D7:                     *                    
30D7: C1 FF               P2ERR  CMPB #$FF       ERROR (FROM NSEVL)?
30D9: 26 0E                      BNE P2ERRB       NO
30DB:                     *                    
30DB: 7D 22 72                   TST PASS         YES,PASS?
30DE: 27 03                      BEQ P2ERRA       PASS1
30E0: BD 2D BB                   JSR PRINTE       PASS 2,PRINT ERROR
30E3: 7F 2C 68            P2ERRA CLR ADR1       
30E6: 73 2C 68                   COM ADR1         ADR1:=FF (TO KILL DIRECT)
30E9: 39                  P2ERRB RTS            
30EA:                     *                    
30EA:                     * ROUTINES TO FINISH UP ADDRESS TYPE PROCESSING
30EA:                     * THESE ROUTINES DO THE FOLLOWING:
30EA:                     *   PASS 1:          
30EA:                     *     A. LCN := # OF BYTES IN THE INSTRUCTION
30EA:                     *   PASS 2:          
30EA:                     *     A. FORM COMPLETE OPCODE
30EA:                     *     B. OUTPUT MACHINE CODE GENERATED
30EA:                     *     C. PRINT A LINE OF LISTIN
30EA:                     *     D. LCN := # OF BYTES IN THE INSTRUCTION
30EA:                     *                    
30EA:                     * LCNAB1 - 1 BYTE ACCUMULATOR INSTRUCTIONS
30EA:                     *                    
30EA: 7D 22 72            LCNAB1 TST PASS         PASS?  
30ED: 27 20                      BEQ LNAB1S       PASS 1
30EF:                     *                    
30EF: F6 2C 67                   LDAB OPCD       PASS 2,LOAD PARTIAL OPCODE
30F2:                     *                    
30F2:                     * EXTENDED (3 BYTES):
30F2:                     *   CCC  NUMBER      
30F2:                     *   CCC  SYMBOL      
30F2:                     *   CCC  EXPRESSION  
30F2:                     *                    
30F2: B6 30 84                   LDAA ABR        A OR B?
30F5: 27 0F                      BEQ LNAB1O       NEITHER
30F7:                     *                    
30F7: 81 42                      CMPA #$42       IS "B"?
30F9: 27 05                      BEQ LNAB1B       YES
30FB: FA 30 87                   ORAB ORBYA      A FORM COMPLETE OPCODE
30FE: 20 03                      BRA LNAB1C     
3100:                     *                    
3100: FA 30 88            LNAB1B ORAB ORBYB      B FORM COMPLETE OPCODE
3103: F7 2C 67            LNAB1C STAB OPCD       SAVE
3106: BD 38 2E            LNAB1O JSR OUTBIN       OUTPUT OPCODE
3109: 7C 2C 65                   INC MCOUNT       MCOUNT:=1
310C: BD 2C 0E                   JSR PRINTL       PRINT A LINE OF LISTING
310F: 7C 22 81            LNAB1S INC LCN          LCN=1
3112: 39                         RTS              RETURN
3113:                     *                    
3113:                     * LCNAB2 2 BYTE REGISTER (A,B); INDEXED,
3113:                     * DIRECT, AND IMMEDIATE TYPE INSTRUCTIONS
3113:                     *                    
3113: 7D 22 72            LCNAB2 TST PASS         PASS ?
3116: 27 3F                      BEQ LCN2B        PASS 1
3118:                     *                    
3118: F6 2C 67                   LDAB OPCD       PASS 2,GET PARTIAL OPCODE
311B: B6 30 84                   LDAA ABR        A OR B ?
311E: 27 25                      BEQ LCN2A        NEITHER
3120:                     *                    
3120: 81 42                      CMPA #'B'        B ?
3122: 27 05                      BEQ LNB2         YES
3124: FA 30 87                   ORAB ORBYA      A, FORM COMPLETE OPCODE
3127: 20 03                      BRA LNAB2S     
3129:                     *                    
3129: FA 30 88            LNB2   ORAB ORBYB      B, FORM COMPLETE OPCODE
312C: F7 2C 67            LNAB2S STAB OPCD       SAVE 
312F: 20 14                      BRA LCN2A        FINISH UP
3131:                     *                    
3131:                     * LCN2 2 BYTE INDEXED, DIRECT, AND IMMEDIATE TYPE 
3131:                     * INSTRUCTIONS       
3131:                     *                    
3131: 7D 22 72            LCN2   TST PASS         PASS ?
3134: 27 21                      BEQ LCN2B        PASS 1
3136:                     *                    
3136: 7F 22 74                   CLR RELFLG     
3139: 7F 22 75                   CLR CMNFLG     
313C: F6 2C 67                   LDAB OPCD       PASS 2,GET PARTIAL OPCODE
313F: FA 30 87                   ORAB ORBYA      FORM COMPLETE OPCODE
3142: F7 2C 67                   STAB OPCD       SAVE
3145:                     *                    
3145: BD 38 2E            LCN2A  JSR OUTBIN       OUPUT OPCODE
3148: F6 2C 69                   LDAB ADR2       GET ADDRESS PART OF MC
314B: BD 38 2E                   JSR OUTBIN       OUTPUT IT
314E: 7C 2C 65                   INC MCOUNT       MCOUNT:=2
3151: 7C 2C 65                   INC MCOUNT     
3154: BD 2C 0E                   JSR PRINTL       PRINT A LINE OF LISTING
3157:                     *                    
3157: 7C 22 81            LCN2B  INC LCN          LCN:=2
315A: 7C 22 81                   INC LCN        
315D: 39                         RTS              RETURN
315E:                     *                    
315E:                     * LCNAB3 3 BYTE REGISTER (A,B) EXTENDED TYPE 
315E:                     * INSTRUCTIONS       
315E:                     *                    
315E: 7D 22 72            LCNAB3 TST PASS         PASS ?
3161: 27 55                      BEQ LCN3B        PASS 1
3163:                     *                    
3163: F6 2C 67                   LDAB OPCD       PASS 2 GET PARTIAL OPCODE
3166: B6 30 84                   LDAA ABR        A OR B ?
3169: 27 1F                      BEQ LCN3A        NEITHER
316B: 81 42                      CMPA #'B'        B ?
316D: 27 05                      BEQ LNB3         YES
316F: FA 30 87                   ORAB ORBYA      A, FORM COMPLETE OPCODE  
3172: 20 03                      BRA LNAB3S     
3174:                     *                    
3174: FA 30 88            LNB3   ORAB ORBYB      B, FORM COMPLETE OPCODE
3177: F7 2C 67            LNAB3S STAB OPCD       SAVE
317A: 20 0E                      BRA LCN3A        FINISH UP
317C:                     *                    
317C:                     * LCN3 3 BYTE EXTENDED AND IMMEDIATE TYPE
317C:                     * INSTRUCTIONS       
317C:                     *                    
317C: 7D 22 72            LCN3   TST PASS         PASS ?
317F: 27 37                      BEQ LCN3B        PASS 1
3181:                     *                    
3181: F6 2C 67                   LDAB OPCD       GET PARTIAL OPCODE
3184: FA 30 87                   ORAB ORBYA      FORM COMPLETE OPCODE
3187: F7 2C 67                   STAB OPCD       SAVE
318A:                     *                    
318A: BD 38 2E            LCN3A  JSR OUTBIN       OUTPUT OPCODE
318D: F6 2C 68                   LDAB ADR1       OUTPUT THE REST OF THE MC
3190: BD 38 2E                   JSR OUTBIN     
3193: F6 2C 69                   LDAB ADR2      
3196: BD 38 2E                   JSR OUTBIN     
3199:                     *                    
3199: 7D 22 75                   TST CMNFLG       COMMON?
319C: 27 04                      BEQ *+6          NO
319E:                     *                    
319E: C6 4D                      LDAB #'M'       "COMMON"
31A0: 20 07                      BRA LCN3C      
31A2:                     *                    
31A2: 7D 22 74                   TST RELFLG       RELOC?
31A5: 27 05                      BEQ *+7          NO
31A7:                     *                    
31A7: C6 52                      LDAB #'R'       LOAD "R"
31A9: BD 38 42            LCN3C  JSR OUTBNR     
31AC:                     *                    
31AC: 7C 2C 65                   INC MCOUNT       MCOUNT:=3  
31AF: 7C 2C 65                   INC MCOUNT     
31B2: 7C 2C 65                   INC MCOUNT     
31B5: BD 2C 0E                   JSR PRINTL       PRINT A LINE OF LISTING
31B8:                     *                    
31B8: 7C 22 81            LCN3B  INC LCN          LCN:=3
31BB: 7C 22 81                   INC LCN        
31BE: 7C 22 81                   INC LCN        
31C1: 39                         RTS              RETURN
31C2:                     *                    
31C2:                     * LCLCN  LC := LC + LCN
31C2:                     *                    
31C2: B6 22 71            LCLCN  LDAA LC+1      
31C5: F6 22 70                   LDAB LC        
31C8: BB 22 81                   ADDA LCN        ADD LCN
31CB: C9 00                      ADCB #$00     
31CD: B7 22 71                   STAA LC+1       SAVE LC
31D0: F7 22 70                   STAB LC        
31D3: 39                         RTS              RETURN
31D4:                     *                    
31D4:                     * POCMN: ALLOCATE COMMON STORAGE AREAS
31D4:                     *                    
31D4: BD 30 89            POCMN  JSR ADRINT     
31D7: BD 38 1A                   JSR LBLCK      
31DA: BD 26 F6                   JSR NXTOK        GET SYMBOL NAME
31DD: C1 01                      CMPB #1         OK?
31DF: 27 08                      BEQ POCMN2       YES
31E1:                     *                    
31E1: CE 02 16            POCMN0 LDX #$0216       ERROR
31E4: BD 2D BB            POCMN1 JSR PRINTE     
31E7: 20 5D                      BRA POCMN4     
31E9:                     *                    
31E9: 7D 22 72            POCMN2 TST PASS         PASS ?
31EC: 26 41                      BNE POCMN3       PASS 2
31EE:                     *                    
31EE: BD 27 F8                   JSR STOSYM       ENTER NAME IN SYMTAB
31F1: FE 22 7F                   LDX SYMPTR     
31F4: FF 32 4C                   STX CMNXS        SAVE ENTRY ADDRESS
31F7:                     *                    
31F7: BD 26 F6                   JSR NXTOK        GET DELIMITER
31FA: C1 2C                      CMPB #$2C       IS COMMA?
31FC: 26 E3                      BNE POCMN0       NO
31FE:                     *                    
31FE: BD 26 F6                   JSR NXTOK        POINT TO OPERAND
3201: BD 29 B5                   JSR NSEVL        GET VALUE
3204: C1 FF                      CMPB #$FF       OK?
3206: 27 DC                      BEQ POCMN1       NO
3208:                     *                    
3208: FE 32 4C                   LDX CMNXS        POINT TO ENTRY
320B: 86 BF                      LDAA #$BF      
320D: A4 08                      ANDA 8,X       TURN OFF REL BIT
320F: 8A 10                      ORAA #$10      TURN ON COMMON BIT
3211: A7 08                      STAA 8,X       
3213:                     *                    
3213: B6 23 10                   LDAA CMNLC     GET COMMON LC
3216: A7 06                      STAA 6,X       STORE IN ENTRY
3218: B6 23 11                   LDAA CMNLC+1   
321B: A7 07                      STAA 7,X       
321D:                     *                    
321D:                     * CMNLC := CMNLC + [ADR1,ADR2]
321D:                     *                    
321D: B6 2C 69                   LDAA ADR2      
3220: F6 2C 68                   LDAB ADR1      
3223: BB 23 11                   ADDA CMNLC+1  
3226: F9 23 10                   ADCB CMNLC    
3229: B7 23 11                   STAA CMNLC+1   
322C: F7 23 10                   STAB CMNLC     
322F:                     *                    
322F: BD 28 57            POCMN3 JSR LKPSYM       LOOK UP SYMBOL
3232: FE 22 7F                   LDX SYMPTR       POINT TO ENTRY
3235: EE 06                      LDX 6,X          GET COMMON ADDRESS
3237: FF 2C 68                   STX ADR1         SET UP FOR PRINTL
323A: 73 2C 66                   COM POP        
323D: 73 22 75                   COM CMNFLG     
3240: 7C 2C 65                   INC MCOUNT     
3243: 7C 2C 65                   INC MCOUNT     
3246:                     *                    
3246: BD 2C 0E            POCMN4 JSR PRINTL     
3249: 7E 24 90                   JMP MAIN1      
324C:                     *                    
324C:                     CMNXS  RMB 2          
324E:                     *                    
324E:                     * POEND: PROCESS END PSEUDO OP
324E:                     *                    
324E: BD 30 89            POEND  JSR ADRINT       INIT FLAGS
3251: BD 38 1A                   JSR LBLCK        CHECK FOR A LABEL
3254: 7D 22 72            POEND0 TST PASS         PASS ?
3257: 26 0F                      BNE POEND2       PASS2
3259:                     *                    
3259: FE 22 70                   LDX LC           PASS1      
325C: FF 22 6E                   STX TSTPH        TSTPH:=LC
325F: 73 22 72                   COM PASS         PASS:=PASS 2
3262:                     *                    
3262: BD 22 5C                   JSR RESTR        REWIND INPUT FILE
3265:                     *                    
3265: 7E 24 67                   JMP PASS2        EXECUTE PASS2
3268:                     *                    
3268: FE 22 6E            POEND2 LDX TSTPH        PHASING ERRORS?
326B: BC 22 70                   CPX LC         
326E: 27 06                      BEQ ENDP2        NO
3270:                     *                    
3270: CE 02 20                   LDX #$0220     
3273: BD 2D BB                   JSR PRINTE       PRINT ERROR 
3276:                     *                    
3276: B6 22 6B            ENDP2  LDAA OPTNS     
3279: 85 80                      BITA #$80       LISTING?
327B: 26 06                      BNE ENDP3        NO     
327D:                     *                    
327D: BD 2C 0E                   JSR PRINTL     
3280: BD 33 BE                   JSR CRLF       
3283:                     *                    
3283: B6 22 6B            ENDP3  LDAA OPTNS     
3286: 85 20                      BITA #$20       LIST SYMTAB?
3288: 27 03                      BEQ SORT1        YES
328A:                     *                    
328A: 7E 33 4D                   JMP ENDP6        NO
328D:                     *                    
328D: CE 33 C8            SORT1  LDX #ZZZ         INIT SORT
3290: FF 33 D1                   STX CBLOCK     
3293: 7F 33 D5                   CLR SORTF        CLEAR SORT FLAG
3296: FE 22 65                   LDX SYMTAB       POINT TO TABLE
3299: 20 09                      BRA SORT3      
329B:                     *                    
329B: 08                  SORT2  INX            
329C: 08                         INX            
329D: 08                         INX            
329E: 08                         INX            
329F: 08                         INX            
32A0: 08                         INX            
32A1: 08                         INX            
32A2: 08                         INX            
32A3: 08                         INX            
32A4:                     *                    
32A4: BC 22 69            SORT3  CPX SYMEND       AT TABLE END?
32A7: 26 0B                      BNE SORT2A       NO
32A9:                     *                    
32A9: 7D 33 D5                   TST SORTF        FOUND AN ENTRY?
32AC: 27 03                      BEQ *+5        
32AE:                     *                    
32AE: 7E 32 EB                   JMP SORT5        PRINT ENTRY
32B1: 7E 33 4D                   JMP ENDP6        ALL DONE
32B4:                     *                    
32B4: E6 00               SORT2A LDAB 0,X       
32B6: C1 20                      CMPB #$20       BLANK?
32B8: 27 E1                      BEQ SORT2        YES, GET NEXT ENTRY
32BA:                     *                    
32BA: E6 08                      LDAB 8,X       
32BC: C1 FF                      CMPB #$FF       USED ENTRY?
32BE: 27 DB                      BEQ SORT2        YES
32C0:                     *                    
32C0:                     * COMPARE ENTRY AT CBLOCK WITH NEW ENTRY
32C0:                     *                    
32C0: FF 33 D3                   STX CXS2         SET UP FOR COMPARISON
32C3: FF 27 E5                   STX PSTNG2     
32C6: FE 33 D1                   LDX CBLOCK     
32C9: FF 27 E3                   STX PSTNG1     
32CC: C6 06                      LDAB #6        
32CE: F7 27 E7                   STAB PCOUNT    
32D1: CE 27 E3                   LDX #PSTNG1    
32D4: BD 26 C5                   JSR COMPAR     
32D7: 22 05                      BHI SORT4        NEED SWITCH
32D9:                     *                    
32D9: FE 33 D3                   LDX CXS2       
32DC: 20 BD                      BRA SORT2      
32DE:                     *                    
32DE: FE 33 D3            SORT4  LDX CXS2         NEW CBLOCK POINTERS
32E1: FF 33 D1                   STX CBLOCK     
32E4: C6 FF                      LDAB #$FF      
32E6: F7 33 D5                   STAB SORTF      SET SORT FLAG
32E9: 20 B0                      BRA SORT2      
32EB:                     *                    
32EB: BD 2C 2A            SORT5  JSR LINCK      
32EE: C6 06                      LDAB #6        
32F0: FE 33 D1                   LDX CBLOCK     
32F3:                     *                    
32F3: A6 00               ENDP4  LDAA 0,X        GET CHAR
32F5: BD 38 88                   JSR OUTCHR       PRINT 
32F8: 08                         INX              POINT TO NEXT CHAR
32F9: 5A                         DEC B            DECR COUNT
32FA: 26 F7                      BNE ENDP4        NOT DONE
32FC:                     *                    
32FC: 86 20                      LDAA #$20       PRINT SPACE
32FE: BD 38 88                   JSR OUTCHR     
3301: BD 38 71                   JSR OUT4HS       PRINT 4 HEX LOCATION
3304: FF 33 D6                   STX ENDXS      
3307: E6 00                      LDAB 0,X       
3309: C5 40                      BITB #$40       RELOC?
330B: 27 05                      BEQ *+7          NO
330D:                     *                    
330D: 86 52                      LDAA #'R'       LOAD "R" 
330F: BD 38 88                   JSR OUTCHR       PRINT IT
3312:                     *                    
3312: C5 20                      BITB #$20       MACRO NAME?
3314: 27 05                      BEQ *+7          NO      
3316:                     *                    
3316: 86 4D                      LDAA #'M'       LOAD "M"
3318: BD 38 88                   JSR OUTCHR       PRINT IT
331B:                     *                    
331B: C5 10                      BITB #$10       COMMON?
331D: 27 05                      BEQ *+7          NO
331F:                     *                    
331F: 86 43                      LDAA #'C'      
3321: BD 38 88                   JSR OUTCHR     
3324:                     *                    
3324: C5 08                      BITB #$08       EXTERNAL?
3326: 27 05                      BEQ *+7          NO
3328:                     *                    
3328: 86 58                      LDAA #'X'      
332A: BD 38 88                   JSR OUTCHR     
332D:                     *                    
332D: C5 04                      BITB #$04       ENTRY?
332F: 27 05                      BEQ *+7        
3331:                     *                    
3331: 86 4E                      LDAA #'N'      
3333: BD 38 88                   JSR OUTCHR     
3336:                     *                    
3336: E6 00                      LDAB 0,X        REDEFIEND?
3338: 2A 06                      BPL ENDP5        NO
333A:                     *                    
333A: CE 33 8A                   LDX #REDEF       PRINT ERROR MESSAGE
333D: BD 38 61                   JSR PDATA1     
3340:                     *                    
3340: FE 33 D6            ENDP5  LDX ENDXS      
3343: C6 FF                      LDAB #$FF       GET DONE
3345: E7 00                      STAB 0,X       
3347: BD 33 BE                   JSR CRLF      
334A: 7E 32 8D                   JMP SORT1      
334D:                     *                    
334D: BD 33 BE            ENDP6  JSR CRLF      
3350: BD 33 BE                   JSR CRLF      
3353: CE 33 A1                   LDX #ENDMB       PRINT # OF ERRORS MSG
3356: B6 22 85                   LDAA ECOUNT    
3359: F6 22 86                   LDAB ECOUNT+1  
335C: BD 2D 5C                   JSR CVBTD        CONVERT TO ASCII
335F: CE 33 95                   LDX #ENDMA     
3362: BD 38 61                   JSR PDATA1       PRINT IT
3365:                     *                    
3365: BD 33 BE                   JSR CRLF      
3368: BD 33 BE                   JSR CRLF      
336B:                     *                    
336B: CE 33 AE                   LDX #CMSG        COMMON AREA MESSAGE
336E: BD 38 61                   JSR PDATA1     
3371:                     *                    
3371: CE 23 10                   LDX #CMNLC       POINT TO COMMON LENGTH
3374: BD 38 71                   JSR OUT4HS     
3377: BD 33 BE                   JSR CRLF      
337A:                     *                    
337A: B6 22 6B                   LDAA OPTNS     
337D: 85 40                      BITA #$40       OBJECT?
337F: 26 06                      BNE ENDP7        NO
3381:                     *                    
3381: BD 22 56            ENDP6A JSR WREOF        WRITE EOF
3384: 7E 22 4A                   JMP UPDATE       CLOSE FILE AND EXIT TO MONTOR
3387:                     *                    
3387: 7E 22 4D            ENDP7  JMP MONTOR     
338A:                     *                    
338A: 20 52 45 44 45 46   REDEF  FCC ' REDEFINED'
3390: 49 4E 45 44       
3394: 04                         FCB $04           EOT
3395:                     *                    
3395: 54 48 45 52 45 20   ENDMA  FCC 'THERE WERE: '
339B: 57 45 52 45 3A 20 
33A1:                     ENDMB  RMB 5          
33A6: 20 45 52 52 4F 52          FCC ' ERRORS'  
33AC: 53                
33AD: 04                         FCB 4          
33AE:                     *                    
33AE: 43 4F 4D 4D 4F 4E   CMSG   FCC 'COMMON LENGTH= '
33B4: 20 4C 45 4E 47 54 
33BA: 48 3D 20          
33BD: 04                         FCB 4          
33BE:                     *                    
33BE: CE 33 C5            CRLF   LDX #MCRLF     
33C1: BD 38 61                   JSR PDATA1     
33C4: 39                         RTS            
33C5:                     *                    
33C5: 0D 0A               MCRLF  FDB $0D0A        CR,LF       
33C7: 04                         FCB $04          EOT
33C8:                     *                    
33C8: 5B 5B 5B 5B 5B 5B   ZZZ    FCC '[[[[[['   
33CE: 00 00                      FDB 0000       
33D0: 00                         FCB 0          
33D1:                     CBLOCK RMB 2          
33D3:                     CXS2   RMB 2          
33D5:                     SORTF  RMB 1          
33D6:                     ENDXS  RMB 2          
33D8:                     *                    
33D8:                     *                    
33D8:                     * POENT: PROCESS "ENTRY" PSEUDO OP
33D8:                     *        DEFINES AN ENTRY POINT FOR 
33D8:                     *        REFERENCE BY OTHER MODULES.
33D8:                     *                    
33D8: BD 30 89            POENT  JSR ADRINT       INIT
33DB: BD 38 1A                   JSR LBLCK        CHECK FOR A LABEL
33DE:                     *                    
33DE: BD 26 F6                   JSR NXTOK        GET ENTRY NAME
33E1: C1 01                      CMPB #1         OK?
33E3: 27 08                      BEQ POENT1       YES
33E5:                     *                    
33E5: CE 02 16                   LDX #$0216       NO, ERROR
33E8: BD 2D BB                   JSR PRINTE     
33EB: 20 39                      BRA POENT3     
33ED:                     *                    
33ED: 7D 22 72            POENT1 TST PASS         PASS? 
33F0: 27 43                      BEQ POENT4       PASS 1
33F2:                     *                    
33F2: BD 28 57                   JSR LKPSYM       GET ENTRY ADDRESS
33F5: C1 FF                      CMPB #$FF       IN SYMTAB
33F7: 26 08                      BNE POENT2       YES
33F9:                     *                    
33F9: CE 02 11                   LDX #$0211       NO, ERROR
33FC: BD 2D BB                   JSR PRINTE     
33FF: 20 25                      BRA POENT3     
3401:                     *                    
3401: FF 2C 68            POENT2 STX ADR1         SAVE ENTRY ADDRESS
3404: FE 22 7F                   LDX SYMPTR       POINT TO ENTRY
3407: A6 08                      LDAA 8,X        GET INFO BYTE
3409: 8A 04                      ORAA #$04       TURN ON ENTRY BIT
340B: A7 08                      STAA 8,X       
340D:                     *                    
340D: BD 34 38                   JSR PBLOCK       OUTPUT LABEL
3410: F6 2C 68                   LDAB ADR1       OUTPUT ENTRY ADDRESS     
3413: BD 38 2E                   JSR OUTBIN     
3416: F6 2C 69                   LDAB ADR2      
3419: BD 38 2E                   JSR OUTBIN     
341C: C6 52                      LDAB #'R'       "RELOCATABLE"
341E: BD 38 42                   JSR OUTBNR     
3421: C6 4E                      LDAB #'N'       ENTRY  "ENT"
3423: BD 38 42                   JSR OUTBNR     
3426:                     *                    
3426: 73 2C 66            POENT3 COM POP        
3429: 73 22 77                   COM ENTFLG     
342C: 7C 2C 65                   INC MCOUNT     
342F: 7C 2C 65                   INC MCOUNT     
3432: BD 2C 0E                   JSR PRINTL     
3435: 7E 24 90            POENT4 JMP MAIN1        ALL DONE
3438:                     *                    
3438:                     * PBLOCK: ROUTINE TO WRITE LOADED ENTRY
3438:                     * SYMBOL ON TAPE     
3438:                     *                    
3438: FE 22 7F            PBLOCK LDX SYMPTR       POINT TO ENTRY SYMBOL
343B: 86 06                      LDAA #6         LENGTH
343D:                     *                    
343D: E6 00               PBLK2  LDAB 0,X        GET A CHAR
343F: 36                         PSH A          
3440: FF 34 4F                   STX PBXS       
3443: BD 38 2E                   JSR OUTBIN     
3446: 32                         PUL A          
3447: FE 34 4F                   LDX PBXS       
344A: 08                         INX            
344B: 4A                         DEC A            ALL DONE?
344C: 26 EF                      BNE PBLK2        NO
344E:                     *                    
344E: 39                         RTS            
344F:                     *                    
344F:                     PBXS   RMB 2          
3451:                     *                    
3451:                     * POEQU: PROCESS EQU PSEUDOP
3451:                     *                    
3451: BD 30 89            POEQU  JSR ADRINT       INIT ADDRESS FIELD FLAGS
3454: FE 22 7F                   LDX SYMPTR     
3457: FF 34 AD                   STX EQUXS        SAVE SYMPTR
345A: 7D 22 73                   TST LBFLG        LABEL?
345D: 26 08                      BNE EQUB         YES
345F:                     *                    
345F: CE 02 13                   LDX #$0213       NO,ERROR
3462: BD 2D BB            EQUA   JSR PRINTE       PRINT ERROR
3465: 20 40                      BRA EQUE       
3467:                     *                    
3467: BD 26 F6            EQUB   JSR NXTOK        GET NEXT TOKEN
346A: C1 0D                      CMPB #$0D       EOL?
346C: 26 05                      BNE EQUC         NO
346E:                     *                    
346E: CE 02 16                   LDX #$0216       ERROR
3471: 20 EF                      BRA EQUA       
3473:                     *                    
3473: BD 29 B5            EQUC   JSR NSEVL        EVALUATE OPERAND
3476: C1 FF                      CMPB #$FF       ERRORS?
3478: 27 E8                      BEQ EQUA         YES
347A:                     *                    
347A: 7D 22 72                   TST PASS         PASS?
347D: 26 1F                      BNE EQUD         PASS2
347F:                     *                    
347F: FE 34 AD                   LDX EQUXS      
3482: A6 08                      LDAA 8,X        GET INFO BYTE
3484: 7D 22 74                   TST RELFLG       RELOCATE?
3487: 26 09                      BNE EQUF         YES
3489: 84 BF                      ANDA #$BF       NO, - TURN OFF IN INFO BYTE
348B:                     *                    
348B: 7D 22 75                   TST CMNFLG       COMMON?
348E: 27 02                      BEQ EQUF         NO
3490:                     *                    
3490: 8A 10                      ORAA #$10       YES TURN ON IN INFO BYTE
3492:                     *                    
3492: A7 08               EQUF   STAA 8,X       
3494: B6 2C 69                   LDAA ADR2       STORE VALUE
3497: A7 07                      STAA 7,X       
3499: B6 2C 68                   LDAA ADR1      
349C: A7 06                      STAA 6,X       
349E:                     *                    
349E: 73 2C 66            EQUD   COM POP          SET PSEUDOP FLAG
34A1: 7C 2C 65                   INC MCOUNT       MCOUNT:=2
34A4: 7C 2C 65                   INC MCOUNT     
34A7:                     *                    
34A7: BD 2C 0E            EQUE   JSR PRINTL       PRINT A LINE OF LISTING
34AA: 7E 24 90                   JMP MAIN1        RETURN TO MAIN LOOP
34AD:                     *                    
34AD:                     EQUXS  RMB 2            SAVE AREA
34AF:                     *                    
34AF:                     * POEXT: PROCESS "EXTERNAL" PSEUDOP
34AF:                     *        MAKE EXTERNALLY-DEFINED SUBROUTINE
34AF:                     *        AVAILABLE TO MODULE
34AF:                     *                    
34AF: BD 30 89            POEXT  JSR ADRINT       INIT
34B2: BD 38 1A                   JSR LBLCK        CHECK FOR A LABEL
34B5:                     *                    
34B5: BD 26 F6                   JSR NXTOK        GET EXTERNAL ENTRY NAME
34B8: C1 01                      CMPB #1         OK?
34BA: 27 0B                      BEQ POEXT1       YES
34BC:                     *                    
34BC: CE 02 16                   LDX #$0216       NO, ERROR
34BF: BD 2D BB                   JSR PRINTE     
34C2: BD 2C 0E                   JSR PRINTL     
34C5: 20 47                      BRA POEXT4     
34C7:                     *                    
34C7: 7C 22 81            POEXT1 INC LCN        
34CA: 7C 22 81                   INC LCN        
34CD: 7C 22 81                   INC LCN        
34D0:                     *                    
34D0: 7D 22 72                   TST PASS         PASS?
34D3: 26 0E                      BNE POEXT2       PASS2
34D5:                     *                    
34D5: BD 27 F8                   JSR STOSYM       PUT NAME IN SYMBOL TABLE
34D8: FE 22 7F                   LDX SYMPTR     
34DB: A6 08                      LDAA 8,X       
34DD: 8A 08                      ORAA #$08       SET EXT BIT
34DF: A7 08                      STAA 8,X       
34E1: 20 28                      BRA POEXT3     
34E3:                     *                    
34E3: C6 7E               POEXT2 LDAB #$7E       "JMP"
34E5: F7 2C 67                   STAB OPCD      
34E8: BD 38 2E                   JSR OUTBIN     
34EB: BD 28 57                   JSR LKPSYM       SET UP ENTRY NAME
34EE: BD 34 38                   JSR PBLOCK       OUTPUT NAME
34F1: C6 58                      LDAB #'X'       "EXT"
34F3: BD 38 42                   JSR OUTBNR     
34F6: 7F 2C 68                   CLR ADR1       
34F9: 7F 2C 69                   CLR ADR2       
34FC: 7C 2C 65                   INC MCOUNT     
34FF: 7C 2C 65                   INC MCOUNT     
3502: 7C 2C 65                   INC MCOUNT     
3505: 73 22 76                   COM EXTFLG     
3508: BD 2C 0E                   JSR PRINTL     
350B:                     *                    
350B: BD 31 C2            POEXT3 JSR LCLCN      
350E: 7E 24 90            POEXT4 JMP MAIN1        ALL DONE
3511:                     *                    
3511:                     * POFCB: PROCESS FCB PSEUDOP
3511:                     *                    
3511: BD 30 89            POFCB  JSR ADRINT       INIT ADDRESS FIELD FLAGS
3514: BD 26 F6                   JSR NXTOK        GET NEXT TOKEN
3517: C1 0D                      CMPB #$0D       EOL?
3519: 26 08                      BNE FCBB         NO
351B:                     *                    
351B: CE 02 16            FCBA   LDX #$0216       ERROR
351E: BD 2D BB                   JSR PRINTE       PRINT
3521: 20 1A                      BRA FCBC         FINISH UP
3523:                     *                    
3523: BD 29 B5            FCBB   JSR NSEVL        EVALUATE OPERAND
3526: BD 30 D7                   JSR P2ERR        PRINT PASS ERRORS
3529: 7C 22 81                   INC LCN          LCN:=1
352C: 7D 22 72                   TST PASS         PASS? 
352F: 27 0F                      BEQ FCBD         PASS1
3531:                     *                    
3531: F6 2C 69                   LDAB ADR2       PASS2,OUTPUT MC
3534: BD 38 2E                   JSR OUTBIN     
3537: 7C 2C 65                   INC MCOUNT       MCOUNT:=1
353A: 7C 2C 66                   INC POP          POP:=1
353D:                     *                    
353D: BD 2C 0E            FCBC   JSR PRINTL       PRINT A LINE OF LISTING
3540: BD 31 C2            FCBD   JSR LCLCN        LC:=LC+LCN
3543: 7E 24 90                   JMP MAIN1        RETURN TO MAIN LOOP
3546:                     *                    
3546:                     * POFCC: PROCESS FCC PSEUDO OP
3546:                     *                    
3546: BD 30 89            POFCC  JSR ADRINT       INIT ADDRESS FIELD FLAGS
3549: BD 26 F6                   JSR NXTOK        GET NEXT TOKEN
354C: C1 27                      CMPB #$27       QUOTE?
354E: 27 08                      BEQ FCCB         YES
3550:                     *                    
3550: CE 02 04            FCCA   LDX #$0204       ERROR
3553: BD 2D BB                   JSR PRINTE       PRINT
3556: 20 3C                      BRA FCCG         FINISH UP 
3558:                     *                    
3558: FE 22 7B            FCCB   LDX CUCHAR       GET CURRENT CHAR
355B: E6 00                      LDAB 0,X       
355D: C1 0D                      CMPB #$0D       EOL? 
355F: 27 EF                      BEQ FCCA         YES
3561: F7 2C 69                   STAB ADR2       NO, SAVE CHAR
3564:                     *                    
3564: 7D 22 72            FCCC   TST PASS         PASS ?
3567: 27 03                      BEQ FCCD         PASS1
3569: BD 38 2E                   JSR OUTBIN       OUTPUT MC 
356C: FE 22 7B            FCCD   LDX CUCHAR       CUCHAR:=CUCHAR+1
356F: 08                         INX            
3570: FF 22 7B                   STX CUCHAR     
3573: 7C 22 81                   INC LCN          LCN:=LCN+1
3576: E6 00                      LDAB 0,X        GET CHAR 
3578: C1 27                      CMPB #$27       QUOTE?
357A: 27 06                      BEQ FCCE         YES
357C:                     *                    
357C: C1 0D                      CMPB #$0D       EOL?
357E: 26 E4                      BNE FCCC         NO 
3580: 20 0C                      BRA FCCF         YES 
3582:                     *                    
3582: E6 01               FCCE   LDAB 1,X        GET NEXT CHAR
3584: C1 27                      CMPB #$27       TWO QUOTES?
3586: 26 06                      BNE FCCF         NO
3588: 08                         INX            
3589: FF 22 7B                   STX CUCHAR       CUCHAR:=CUCHAR+1
358C: 20 D6                      BRA FCCC       
358E:                     *                    
358E: 7C 2C 66            FCCF   INC POP          POP:=1
3591: 7C 2C 65                   INC MCOUNT       MCOUNT:=1
3594:                     *                    
3594: BD 2C 0E            FCCG   JSR PRINTL       PRINT LINE OF LISTING
3597: BD 31 C2                   JSR LCLCN        LC:=LC+LCN
359A: 7E 24 90                   JMP MAIN1        RETURN TO MAIN LOOP
359D:                     *                    
359D:                     * PROCESS FDB PSEUDO OP
359D:                     *                    
359D: BD 30 89            POFDB  JSR ADRINT       INIT ADDRESS FIELD FLAGS
35A0: BD 26 F6                   JSR NXTOK        GET NEXT TOKEN
35A3: C1 0D                      CMPB #$0D       EOL?
35A5: 26 08                      BNE FDBB         NO
35A7:                     *                    
35A7: CE 02 16            FDBA   LDX #$0216       ERROR
35AA: BD 2D BB                   JSR PRINTE       PRINT 
35AD: 20 39                      BRA FDBC         FINISH UP
35AF:                     *                    
35AF: BD 29 B5            FDBB   JSR NSEVL        EVALUATE OPERAND
35B2: BD 30 D7                   JSR P2ERR        PRINT PASS 2 ERRORS
35B5:                     *                    
35B5: 7C 22 81                   INC LCN          LCN:=2
35B8: 7C 22 81                   INC LCN        
35BB: 7D 22 72                   TST PASS         PASS?
35BE: 27 2B                      BEQ FDBD         PASS1
35C0:                     *                    
35C0: F6 2C 68                   LDAB ADR1       OUTPUT MC
35C3: BD 38 2E                   JSR OUTBIN     
35C6: F6 2C 69                   LDAB ADR2      
35C9: BD 38 2E                   JSR OUTBIN     
35CC: 7D 22 74                   TST RELFLG       RELOC?
35CF: 27 04                      BEQ FDCF         NO
35D1:                     *                    
35D1: C6 52                      LDAB #'R'       YES
35D3: 20 07                      BRA FDCG       
35D5:                     *                    
35D5: 7D 22 75            FDCF   TST CMNFLG       COMMON?
35D8: 27 05                      BEQ FDCE         NO
35DA:                     *                    
35DA: C6 4D                      LDAB #'M'       YES
35DC:                     *                    
35DC: BD 38 42            FDCG   JSR OUTBNR       OUTPUT "R" OR "M"
35DF: 7C 2C 65            FDCE   INC MCOUNT       MCOUNT:=2
35E2: 7C 2C 65                   INC MCOUNT     
35E5: 73 2C 66                   COM POP          POP:=FF
35E8:                     *                    
35E8: BD 2C 0E            FDBC   JSR PRINTL       PRINT A LINE OF LISTING
35EB: BD 31 C2            FDBD   JSR LCLCN        LC:=LC+LCN
35EE: 7E 24 90                   JMP MAIN1        RETURN TO MAIN LOOP
35F1:                     *                    
35F1:                     * PROCESS THE IF PSEUDO OP
35F1:                     *                    
35F1: BD 30 89            POIF   JSR ADRINT     
35F4: BD 38 1A                   JSR LBLCK      
35F7: BD 26 F6                   JSR NXTOK      
35FA: C1 0D                      CMPB #$0D       EOL?
35FC: 26 08                      BNE POIFB        NO
35FE:                     *                    
35FE: CE 02 16            POIFA  LDX #$0216     
3601: BD 2D BB                   JSR PRINTE     
3604: 20 23                      BRA POIFE      
3606:                     *                    
3606: BD 29 B5            POIFB  JSR NSEVL        EVALUATE OPERAND
3609: C1 FF                      CMPB #$FF       ERRORS? 
360B: 27 F1                      BEQ POIFA        YES
360D:                     *                    
360D: BD 37 6A                   JSR PSHIF        STACK PRESENT IFFLG
3610: 7D 23 74                   TST IFFLG        ASSEMBLING?
3613: 27 14                      BEQ POIFE        NO
3615:                     *                    
3615: 7D 2C 68                   TST ADR1         IS =0?
3618: 26 0A                      BNE POIFC        NO
361A:                     *                    
361A: 7D 2C 69                   TST ADR2         IS =0?
361D: 26 05                      BNE POIFC        NO
361F:                     *                    
361F: 7F 23 74                   CLR IFFLG        TURN OFF ASSEMBLING
3622: 20 05                      BRA POIFE      
3624:                     *                    
3624: 86 FF               POIFC  LDAA #$FF       TURN ON ASSEMBLING     
3626: B7 23 74                   STAA IFFLG     
3629:                     *                    
3629: BD 2C 0E            POIFE  JSR PRINTL     
362C: 7E 24 90                   JMP MAIN1      
362F:                     *                    
362F:                     * PROCESS THE MAC PSEUDOP
362F:                     *                    
362F:                     CMFLG  RMB 1            COMMENT FLAG 0=NO,FF=YES
3630:                     MACERR RMB 1            MAC ERROR 0=NO,FF=YES    
3631:                     *                    
3631: BD 30 89            POMAC  JSR ADRINT       INIT FLAGS
3634: BD 2C 0E                   JSR PRINTL     
3637: 7F 36 2F                   CLR CMFLG      
363A: 7F 36 30                   CLR MACERR     
363D: 7D 22 72                   TST PASS         PASS?
3640: 26 30                      BNE POMAC2       PASS2
3642:                     *                    
3642: 7D 22 73                   TST LBFLG        LABELED?
3645: 26 0B                      BNE POMAC1       YES, OK
3647:                     *                    
3647: 73 36 30                   COM MACERR       SET ERROR FLAG
364A: CE 02 26                   LDX #$0226       ERROR
364D: BD 2D BB                   JSR PRINTE     
3650: 20 DF                      BRA POMAC      
3652:                     *                    
3652: FE 22 7F            POMAC1 LDX SYMPTR       PT TO LABEL
3655: 86 20                      LDAA #$20      
3657: A7 08                      STAA 8,X        SET MACRO FLAG IN SYMTAB
3659: B6 23 0A                   LDAA MACPTR    
365C: A7 06                      STAA 6,X        SAVE MACRO LOC
365E: B6 23 0B                   LDAA MACPTR+1  
3661: A7 07                      STAA 7,X       
3663:                     *                    
3663: BD 26 F6                   JSR NXTOK        CHECK FOR "C"
3666: FE 22 78                   LDX DESCRA     
3669: A6 00                      LDAA 0,X       
366B: 81 43                      CMPA #'C'        "C"? 
366D: 26 03                      BNE *+5          NO
366F:                     *                    
366F: 73 36 2F                   COM CMFLG        YES,SAVE COMMENTS
3672:                     *                    
3672: BD 25 76            POMAC2 JSR RDLINA       GET NEXT LINE
3675: FE 22 6C                   LDX LNUM       
3678: 08                         INX            
3679: FF 22 6C                   STX LNUM       
367C: BD 2C 0E                   JSR PRINTL     
367F: FE 22 7D                   LDX CULINE       PT TO LINE
3682: A6 00                      LDAA 0,X        GET FIRST CHAR
3684: 81 2A                      CMPA #'*'        COMMENT?
3686: 26 0A                      BNE POMAC5       NO
3688:                     *                    
3688: 7D 36 2F                   TST CMFLG        SAVE COMMENTS?
368B: 27 E5                      BEQ POMAC2       NO
368D:                     *                    
368D: BD 36 E6                   JSR MACMOV       YES, SAVE
3690:                     *                    
3690: 20 E0                      BRA POMAC2     
3692:                     *                    
3692: 7F 22 73            POMAC5 CLR LBFLG        CLEAR LABEL FLAG
3695: FE 22 7D                   LDX CULINE       POINT TO LINE
3698: A6 00                      LDAA 0,X        GET CHAR
369A: 81 20                      CMPA #$20       BLANK?
369C: 27 06                      BEQ POMAC6       YES
369E:                     *                    
369E: BD 26 F6                   JSR NXTOK        GET LABEL
36A1: 73 22 73                   COM LBFLG        SET LABEL FLAG
36A4:                     *                    
36A4: BD 26 F6            POMAC6 JSR NXTOK        GET MNEMONIC
36A7: 86 04                      LDAA #4         SET FOR COMPARE
36A9: B7 27 E7                   STAA PCOUNT    
36AC: FE 22 78                   LDX DESCRA     
36AF: FF 27 E3                   STX PSTNG1     
36B2: CE 37 22                   LDX #MEND      
36B5: FF 27 E5                   STX PSTNG2     
36B8: CE 27 E3                   LDX #PSTNG1      POINT TO PARAMS
36BB: BD 26 C5                   JSR COMPAR       COMPARE
36BE: 26 0D                      BNE POMAC8       MEND NOT FOUND
36C0:                     *                    
36C0: 7D 22 73                   TST LBFLG        LABELED?
36C3: 27 0E                      BEQ POMAC7       YES
36C5:                     *                    
36C5: CE 02 27                   LDX #$0227       ERROR
36C8: BD 2D BB                   JSR PRINTE     
36CB: 20 06                      BRA POMAC7     
36CD:                     *                    
36CD: BD 36 E6            POMAC8 JSR MACMOV       PUT INTO MACTBL
36D0: 7E 36 72                   JMP POMAC2     
36D3:                     *                    
36D3: 7D 22 72            POMAC7 TST PASS         PASS?
36D6: 26 0B                      BNE POMACA       PASS2
36D8:                     *                    
36D8: 86 17                      LDAA #$17       ETB TO END OF MACRO
36DA: FE 23 0A                   LDX MACPTR     
36DD: A7 00                      STAA 0,X       
36DF: 08                         INX            
36E0: FF 23 0A                   STX MACPTR     
36E3:                     *                    
36E3: 7E 24 90            POMACA JMP MAIN1        ALL DONE
36E6:                     *                    
36E6:                     * MOVE MACRO TO MACRO TABLE
36E6:                     *                    
36E6: 7D 22 72            MACMOV TST PASS         PASS?
36E9: 26 36                      BNE MACMVE       PASS2
36EB:                     *                    
36EB: 7D 36 30                   TST MACERR       ERRORS?
36EE: 26 31                      BNE MACMVE       YES
36F0:                     *                    
36F0: FE 22 7D                   LDX CULINE     
36F3: FF 22 7B                   STX CUCHAR     
36F6:                     *                    
36F6: FE 22 7B            MACLOP LDX CUCHAR       GET CHAR FROM INBUF
36F9: A6 00                      LDAA 0,X       
36FB: 08                         INX            
36FC: FF 22 7B                   STX CUCHAR     
36FF: FE 23 0A                   LDX MACPTR       POINT TO MACTBL
3702: BC 22 61                   CPX MACEND       FULL?
3705: 26 10                      BNE MACMV1       NO
3707:                     *                    
3707: 86 0D                      LDAA #$0D       CR TO MACTBL
3709: A7 00                      STAA 0,X       
370B: 08                         INX            
370C: FF 23 0A                   STX MACPTR     
370F:                     *                    
370F: CE 02 28                   LDX #$0228       ERROR 
3712: BD 2D BB                   JSR PRINTE     
3715: 20 0A                      BRA MACMVE     
3717:                     *                    
3717: A7 00               MACMV1 STAA 0,X        STORE CHAR IN MACTBL
3719: 08                         INX            
371A: FF 23 0A                   STX MACPTR     
371D: 81 0D                      CMPA #$0D       EOL?
371F: 26 D5                      BNE MACLOP       NO
3721:                     *                    
3721: 39                  MACMVE RTS              ALL DONE
3722:                     *                    
3722: 4D 45 4E 44         MEND   FCC 'MEND'     
3726:                     *                    
3726:                     * PONAM: PROCESS NAM PSEUDOP
3726:                     *                    
3726: BD 30 89            PONAM  JSR ADRINT     
3729: BD 38 1A                   JSR LBLCK      
372C:                     *                    
372C: BD 26 F6                   JSR NXTOK        GET PROGRAM NAME
372F: C1 01                      CMPB #1         OK?
3731: 27 09                      BEQ PONAM1       YES
3733:                     *                    
3733: CE 02 16                   LDX #$0216       ERROR
3736: BD 2D BB                   JSR PRINTE     
3739: 7E 34 26                   JMP POENT3       
373C:                     *                    
373C: 7D 22 72            PONAM1 TST PASS         PASS?
373F: 26 06                      BNE PONAM2       PASS 2
3741:                     *                    
3741: BD 27 F8                   JSR STOSYM       SAVE NAME IN SYMTAB
3744: 7E 33 ED                   JMP POENT1     
3747:                     *                    
3747: F6 23 10            PONAM2 LDAB CMNLC      OUTPUT COMMON BLOCK SIZE
374A: BD 38 2E                   JSR OUTBIN       
374D: F6 23 11                   LDAB CMNLC+1   
3750: BD 38 2E                   JSR OUTBIN     
3753:                     *                    
3753: C6 50                      LDAB #'P'       "PROGRAM"
3755: BD 38 42                   JSR OUTBNR     
3758:                     *                    
3758: 7E 33 ED                   JMP POENT1       PROCESS AS ENTRY NAME
375B:                     *                    
375B:                     * PONIF: PROCESS NIF PSEUDOP
375B:                     *                    
375B: BD 30 89            PONIF  JSR ADRINT     
375E: BD 38 1A                   JSR LBLCK      
3761: BD 37 7E                   JSR PULIF        GET LAST IFFLG
3764: BD 2C 0E                   JSR PRINTL     
3767: 7E 24 90                   JMP MAIN1      
376A:                     *                    
376A:                     * PSHIF: PUSH THE CURRENT IFFLG ONTO THE IFSTACK
376A:                     *                    
376A: BF 22 89            PSHIF  STS STKSAV       SAVE STACK POINTER
376D: FE 23 72                   LDX IFSTKP       LOAD IF STACK POINTER
3770: 8C 23 6A                   CPX #IFSTK-8      FULL?
3773: 27 1D                      BEQ PSPLER       YES
3775:                     *                    
3775: BE 23 72                   LDS IFSTKP       LOAD STACK POINTER
3778: B6 23 74                   LDAA IFFLG     
377B: 36                         PSH A            STACK IFFLG
377C: 20 1B                      BRA PSPLCM     
377E:                     *                    
377E:                     * PULIF: PULL LAST IFFLG OFF OF THE IFSTACK
377E:                     *                    
377E: BF 22 89            PULIF  STS STKSAV       SAVE STACK POINTER
3781: FE 23 72                   LDX IFSTKP       LOAD IF STACK POINTER
3784: 8C 23 72                   CPX #IFSTK       UNDERFLOW? 
3787: 27 09                      BEQ PSPLER       YES
3789:                     *                    
3789: BE 23 72                   LDS IFSTKP       LOAD STACK POINTER
378C: 32                         PUL A            POP LAST IFFLG
378D: B7 23 74                   STAA IFFLG     
3790: 20 07                      BRA PSPLCM     
3792:                     *                    
3792: CE 02 54            PSPLER LDX #$0254     
3795: BD 2D BB                   JSR PRINTE     
3798: 39                         RTS            
3799:                     *                    
3799: BF 23 72            PSPLCM STS IFSTKP     
379C: BE 22 89                   LDS STKSAV     
379F: 39                         RTS            
37A0:                     *                    
37A0:                     * POPAG: PROCESS THE PAGE PSEUDOP
37A0:                     *                    
37A0: BD 30 89            POPAG  JSR ADRINT       INIT FLAGS
37A3: BD 38 1A                   JSR LBLCK        CHECK FOR LABEL
37A6: 7D 22 72                   TST PASS         PASS ?
37A9: 27 13                      BEQ PAGEND       PASS 1
37AB:                     *                    
37AB: F6 22 84                   LDAB LCOUNT     LCOUNT=0?
37AE: 27 0E                      BEQ PAGEND       YES
37B0:                     *                    
37B0: 86 3C                      LDAA #$3C       B:=60
37B2: F0 22 84                   SUBB LCOUNT     B:=60-LCOUNT
37B5:                     *                    
37B5: BD 33 BE            PAGEA  JSR CRLF       
37B8: 5A                         DEC B            TO
37B9: 26 FA                      BNE PAGEA        TOP OF PAGE       
37BB: 7F 22 84                   CLR LCOUNT       LCOUNT:=0
37BE: 7E 24 90            PAGEND JMP MAIN1        RETURN TO MAIN LOOP
37C1:                     *                    
37C1:                     * PORMB: PROCESS RMB PSEUDOP
37C1:                     *                    
37C1: BD 30 89            PORMB  JSR ADRINT       INIT ADDRESS FIELD FLAGS 
37C4: BD 26 F6                   JSR NXTOK        GET NEXT TOKEN
37C7: C1 0D                      CMPB #$0D       EOL? 
37C9: 26 08                      BNE RMBB         NO
37CB:                     *                    
37CB: CE 02 16                   LDX #$0216       ERROR
37CE: BD 2D BB            RMBA   JSR PRINTE       PRINT
37D1: 20 18                      BRA RMBC         FINISH UP
37D3:                     *                    
37D3: BD 29 B5            RMBB   JSR NSEVL        EVALUATE OPERAND
37D6: C1 FF                      CMPB #$FF       ERRORS?
37D8: 27 F4                      BEQ RMBA         YES
37DA:                     *                    
37DA: 7D 22 72                   TST PASS         PASS?
37DD: 27 0F                      BEQ RMBD         PASS1
37DF:                     *                    
37DF: BD 38 03                   JSR RMBOUT       OUTPUT MC
37E2: 7C 2C 65                   INC MCOUNT       MCOUNT:=2
37E5: 7C 2C 65                   INC MCOUNT     
37E8: 73 2C 66                   COM POP          SET PSEUDOOP FLAG
37EB:                     *                    
37EB: BD 2C 0E            RMBC   JSR PRINTL       PRINT A LINE OF LISTING
37EE: B6 22 71            RMBD   LDAA LC+1       LC:=LC+ADR1,ADR2
37F1: F6 22 70                   LDAB LC        
37F4: BB 2C 69                   ADDA ADR2     
37F7: F9 2C 68                   ADCB ADR1     
37FA: B7 22 71                   STAA LC+1      
37FD: F7 22 70                   STAB LC        
3800: 7E 24 90                   JMP MAIN1        RETURN TO MAIN LOOP
3803:                     *                    
3803: 5F                  RMBOUT CLR B            LOAD 00
3804: FE 2C 68                   LDX ADR1         LSAVE:=#BYTES FROM RMB
3807: FF 22 82                   STX LSAVE      
380A:                     *                    
380A: BD 38 2E            RMBOTA JSR OUTBIN       OUTPUT MC
380D: FE 22 82                   LDX LSAVE      
3810: 09                         DEX            
3811: 27 06                      BEQ RMBOTB       DONE
3813:                     *                    
3813: FF 22 82                   STX LSAVE      
3816: 5F                         CLR B          
3817: 20 F1                      BRA RMBOTA       DO AGAIN
3819:                     *                    
3819: 39                  RMBOTB RTS              RETURN
381A:                     *                    
381A:                     * LBLCK: CHECK FOR AN ILLEGAL LABEL ON A
381A:                     *        PSEUDOOP. IF THERE IS ONE DELETE IT.
381A:                     *        AND PRINT AN ERROR MESSAGE.
381A:                     *                    
381A: 7D 22 73            LBLCK  TST LBFLG        LABEL?
381D: 27 0E                      BEQ LBLCK2       NO
381F:                     *                    
381F: 7D 22 72                   TST PASS         PASS? 
3822: 26 03                      BNE LBLCK1       PASS2
3824:                     *                    
3824: BD 28 AB                   JSR DELSYM       PASS1 DELETE LAST SYMBOL
3827:                     *                    
3827: CE 02 23            LBLCK1 LDX #$0223       ERROR
382A: BD 2D BB                   JSR PRINTE       PRINT 
382D:                     *                    
382D: 39                  LBLCK2 RTS              RETURN
382E:                     *                    
382E:                     * OUTBIN: OUTPUT A BYTE AS TWO HEX ASCII CHARS.
382E:                     * OUTBNR: OUTPUT "R", "N", OR "X".
382E:                     *                    
382E: B6 22 6B            OUTBIN LDAA OPTNS     
3831: 85 40                      BITA #$40       OUTPUT?
3833: 26 0C                      BNE OUTRET       NO
3835:                     *                    
3835: 17                         TBA            
3836: 8D 16                      BSR OUTHL        CONVERT LEFT NIBBLE
3838: BD 22 53                   JSR OUTB       
383B: 17                         TBA            
383C: 8D 14                      BSR OUTHR        CONVERT RIGHT NIBBLE 
383E: BD 22 53                   JSR OUTB       
3841: 39                  OUTRET RTS            
3842:                     *                    
3842: B6 22 6B            OUTBNR LDAA OPTNS     
3845: 85 40                      BITA #$40       OUTPUT?
3847: 26 F8                      BNE OUTRET       NO 
3849:                     *                    
3849: 17                         TBA            
384A: BD 22 53                   JSR OUTB       
384D: 39                         RTS            
384E:                     *                    
384E: 44                  OUTHL  LSR A          
384F: 44                         LSR A          
3850: 44                         LSR A          
3851: 44                         LSR A          
3852: 84 0F               OUTHR  ANDA #$0F      
3854: 8B 30                      ADDA #$30     
3856: 81 39                      CMPA #$39      
3858: 23 02                      BLS *+4        
385A: 8B 07                      ADDA #$07     
385C: 39                         RTS            
385D:                     *                    
385D:                     * ASSORTED I/O ROUTINES
385D:                     *                    
385D: BD 38 88            PDATA2 JSR OUTCHR     
3860: 08                         INX            
3861: A6 00               PDATA1 LDAA 0,X       
3863: 81 04                      CMPA #$04      
3865: 26 F6                      BNE PDATA2     
3867: 39                         RTS            
3868:                     *                    
3868: A6 00               OUT2H  LDAA 0,X       
386A: 8D 0E               OUT2HA BSR OUTHLL     
386C: A6 00                      LDAA 0,X       
386E: 08                         INX            
386F: 20 0D                      BRA OUTHRR     
3871:                     *                    
3871: 8D F5               OUT4HS BSR OUT2H      
3873: 8D F3               OUT2HS BSR OUT2H      
3875: 86 20               OUTS   LDAA #$20      
3877: 7E 38 88                   JMP OUTCHR     
387A:                     *                    
387A: 44                  OUTHLL LSR A          
387B: 44                         LSR A          
387C: 44                         LSR A          
387D: 44                         LSR A          
387E:                     *                    
387E: 84 0F               OUTHRR ANDA #$0F      
3880: 8B 30                      ADDA #$30     
3882: 81 39                      CMPA #$39      
3884: 23 02                      BLS OUTCHR     
3886:                     *                    
3886: 8B 07                      ADDA #$07     
3888:                     *                    
3888: 36                  OUTCHR PSH A          
3889: BD 23 88                   JSR OUTEEE     
388C: 32                         PUL A          
388D: 81 0A                      CMPA #$0A       LF?
388F: 26 0E                      BNE OUTCHE       NO
3891:                     *                    
3891: 36                         PSH A          
3892: 37                         PSH B          
3893: C6 08                      LDAB #8        
3895:                     *                    
3895: 86 00               OUTCHL LDA #$00       
3897: BD 23 88                   JSR OUTEEE     
389A: 5A                         DEC B          
389B: 26 F8                      BNE OUTCHL     
389D:                     *                    
389D: 33                         PUL B          
389E: 32                         PUL A              
389F: 39                  OUTCHE RTS            
38A0:                     * 
38A0:                     * 
38A0:                     * DRIVER FOR CP/68 OPERATING SYSTEM
38A0:                     * WITH MF68 FLOPPY DISK
38A0:                     * IN SIMH SWTPC SIMULATOR
38A0:                     * 
38A0:                     * 
38A0:                     * 
38A0: =$5                  FCBSTA EQU 5  ERROR STATUS FLAG
38A0: =$7                  FCBDBA EQU 7  DATA BUFFER ADDRESS
38A0: =$9                  FCBDRV EQU 9  DRIVE NUMBER
38A0: =$A                  FCBTRK EQU 10 TRACK NUMBER
38A0: =$B                  FCBSCT EQU 11 SECTOR NUMBER
38A0: =$C                  FCBTlK EQU 12 TRACK LINK POINTER
38A0: =$D                  FCBSLK EQU 13 SECTOR LINK POINTER
38A0:                     
38A0:                     *
38A0:                     * COMMAND-LINE INTERPRETER BASE-PAGE LOCATIONS
38A0:                     *
38A0: =$20                 DSCRA  EQU $20   ADDRESS OF TOKEN FOR CP68
38A0: =$22                 DSCRC  EQU $22   NUMBER OF CHARS IN CURRENT TOKEN FOR CP68  
38A0: =$23                 CUCHR  EQU $23   ADDR OF NEXT CHAR TO BE PROCESSED IN CP68 COMMAND LIEN
38A0:                     
38A0: 7F 39 1B            EINIIO CLR OFOFL    CLEAR OUTPUT FILE OPEN FLAG
38A3: 3F                         SWI NXTOK GET NEXT TOKEN TO SKIP .CMD PART OF TRANSIENT COMMAND IN COMMAND LINE
38A4: 2F                          FCB $2F
38A5: CE 3B 1C                   LDX #ERRIFN   SET ERROR MSG
38A8: FF 3A 82                   STX OPERRM
38AB: CE 39 1C                   LDX #INFCB   X=INPUT FCB
38AE: BD 38 D8                   JSR GETFN    GET FNAME FROM COMMAND LINE, STORE IT IN FCB
38B1: BD 3A 70                   JSR OPENI    OPEN INPUT FILE
38B4: DE 23                      LDX CUCHR
38B6: 09                         DEX
38B7: 08                  EINI0  INX
38B8: A6 00                      LDAA 0,X     GET NEXT CHAR IN COMMAND LINE
38BA: 81 0D                      CMPA #$0D    IS EOL?
38BC: 27 19                      BEQ EINI1    BR IF COMMAND LINE TERMINATED
38BE: 81 20                      CMPA #$20     IS BLANK?
38C0: 27 F5                      BEQ EINI0    BR TO SKIP CHAR IF IT IS 
38C2: 81 2C                      CMPA #','    IS COMMA?
38C4: 27 F1                      BEQ EINI0    BR TO SKIP CHAR IF IT IS 
38C6: DF 23                      STX CUCHR    SET BEGGINING OF SECOND FNAME IN CMD LINE
38C8: CE 3B 36                   LDX #ERROFN   SET ERROR MSG
38CB: FF 3A 82                   STX OPERRM
38CE: CE 39 C6                   LDX #OUTFCB  X=OUTPUT FCB
38D1: BD 38 D8                   JSR GETFN    GET FNAME FROM COMMAND LINE, STORE IT IN FCB
38D4: 7C 39 1B                   INC OFOFL    SIGNAL OUTPUT FILENAME SET
38D7: 39                  EINI1  RTS
38D8:                     
38D8: 3F                  GETFN  SWI FMTFCB PROCESS COMMAND LINE (POINTED BY CUCHR) TO GET FILENAME AND STORE IT IN FCB POINTED BY X-REG
38D9: 2C                           FCB $2C
38DA: A6 05                      LDAA FCBSTA,X
38DC: 27 06                      BEQ GETFN1    BR IF STATUS OK
38DE: FE 3A 82                   LDX OPERRM    GET ERR MSG
38E1: 7E 3A A0                   JMP DSKERR    PRINT IT AND RETERN TO O/S 
38E4: 39                  GETFN1 RTS 
38E5:                     
38E5: 7E 3B A0            EGETB  JMP FGETB    GETB ROUTINE: READ A BYTE FROM INPUT FILE
38E8:                     
38E8: 36                  EOUTB  PSHA         SAVE BYTE TO WRITE TO FILE 
38E9: B6 39 1B                   LDAA OFOFL   IS OUTPUT FILE PROVIDED IN CMD LINE?
38EC: 27 14                      BEQ EOUTB5   BR IF NOT (ERROR, MISSING OUTPUT FILE)
38EE: 81 02                      CMPA #2       
38F0: 27 0C                      BEQ EOUTB4   BR IF OUTPUT FILE ALREADY OPEN
38F2: 37                         PSHB
38F3: 3F                         SWI PSHX
38F4: 05                          FCB $05       
38F5: BD 3A 84                   JSR OPENO    OPEN OUTPUT FILE
38F8: 7C 39 1B                   INC OFOFL    SIGNAL FILE OPEN IN FLAG
38FB: 3F                         SWI PULX
38FC: 06                          FCB $06
38FD: 33                         PULB        
38FE: 32                  EOUTB4 PULA         RETRIEVE BYTE TO WRITE TO FILE
38FF: 7E 3B C0                   JMP FOUTB    OUTB ROUTINE: WRITE A BYTE TO OUTPUT FILE
3902: CE 3B 51            EOUTB5 LDX #ERRMOF  MSG 'MISSIGN OUTPUT FILENAME' 
3905: 7E 3A A0                   JMP DSKERR   PRINT ERROR    
3908:                                   
3908: 39                  EWREOF RTS          WRITE EOF ROUTINE
3909:                     
3909: 7E 3B D6            EREST  JMP REWIND  RESTR ROUTINE: REOPEN INPUT FILE FOR PASS2
390C:                     
390C: BD 3B 89            EUPDT  JSR CLOSEI   UPDATE ROUTINE: OUTPUT/INPUT FILE CLOSE, THEN RETURN TO O/S
390F: B6 39 1B                   LDAA OFOFL   CHECK IF OUTPUT FILE OPEN
3912: 81 02                      CMPA #2 
3914: 26 03                      BNE EMON     BR IF NOT
3916: BD 3B 8E                   JSR CLOSEO   CLOSE OUTPUT FILE
3919: 3F                  EMON   SWI WARMS      CP68 WARM START
391A: 1F                          FCB $1F       RETURN TO OPERATING SYSTEM
391B:                     
391B:                     OFOFL  RMB 1        OUTPUT FILE OPEN FLAG (1=FILE OPEN)
391C:                     
391C: 00 00               INFCB  FCB 0,0      INPUT FILE FCB
391E: 44 53 4B                   FCC 'DSK' 
3921: 00                         FCB 0        FCBSTA=5
3922: 00                         FCB 0        FCBDTT=6  00 FOR FILE READ, FF FOR FILE WRITE
3923: 39 46                      FDB INBUF
3925: 00                         FCB 0        FCBDRV=9
3926: 00                         FCB 0        FCBTRK=10
3927: 00                         FCB 0        FCBSCT=11
3928: 00 00 00 00                FCB 0,0,0,0  FCBFWD=12, FCBBAK=14
392C:                            RMB 8        FCBNAM=16
3934: 2E                         FCC '.'  
3935:                            RMB 3        FCBEXT=25
3938: 04                         FCB $04      END OF FILENAME
3939: 00                         FCB 0        FCBTYP=29  FILETYPE
393A: 00                         FCB 0        FCBACS=30  FILE ACCESS CODE
393B: 00 00                      FCB 0,0      FCBFTS=31  FIRST TRACK/SECT
393D: 00 00                      FCB 0,0      FCBLTS=33  LAST TRACK/SECT
393F: 00 00                      FCB 0,0      FCBNMS=35  NUMBER OF SECTORS
3941: 00 00                      FCB 0,0      FCBNFB=37  NEXT FCB IN ACTIVE CHAIN
3943: 00 00                      FCB 0,0      FCBIND=39  INDEX IN DATA BUFFER
3945: 00                         FCB 0        FCBSCF=41  SPACE COMPRESSION FLAG (COMPRESSION OFF)
3946:                           
3946:                     INBUF  RMB 128      INPUT BUFFER        
39C6:                     
39C6: 00 00               OUTFCB FCB 0,0      OUTPUT FILE
39C8: 44 53 4B                   FCC 'DSK' 
39CB: 00                         FCB 0
39CC: FF                         FCB $FF      OUTPUT FILE
39CD: 39 F0                      FDB OUTBUF
39CF: 00                         FCB 0        FCBDRV=9
39D0: 00                         FCB 0        FCBTRK=10
39D1: 00                         FCB 0        FCBSCT=11
39D2: 00 00 00 00                FCB 0,0,0,0  FCBFWD=12, FCBBAK=14
39D6:                            RMB 8        FCBNAM=16
39DE: 2E                         FCC '.'  
39DF:                            RMB 3        FCBEXT=25
39E2: 04                         FCB $04      END OF FILENAME
39E3: 00                         FCB 0        FCBTYP=29  FILETYPE
39E4: 00                         FCB 0        FCBACS=30  FILE ACCESS CODE
39E5: 00 00                      FCB 0,0      FCBFTS=31  FIRST TRACK/SECT
39E7: 00 00                      FCB 0,0      FCBLTS=33  LAST TRACK/SECT
39E9: 00 00                      FCB 0,0      FCBNMS=35  NUMBER OF SECTORS
39EB: 00 00                      FCB 0,0      FCBNFB=37  NEXT FCB IN ACTIVE CHAIN
39ED: 00 00                      FCB 0,0      FCBIND=39  INDEX IN DATA BUFFER
39EF: 00                         FCB 0        FCBSCF=41  SPACE COMPRESSION FLAG (COMPRESSION OFF)
39F0:                     OUTBUF RMB 128      OUTPUT BUFFER        
3A70:                     
3A70: CE 39 1C            OPENI  LDX #INFCB   
3A73: 6F 05                      CLR FCBSTA,X CLEAR STATUS
3A75: 3F                         SWI OPEN
3A76: 14                          FCB $14
3A77: 6D 05                      TST FCBSTA,X ERROR?
3A79: 27 06                      BEQ OPEN2
3A7B: CE 3A A6                   LDX #ERROIN  SET THE ERROR MSG TO PRINT IF OPEN FAILS
3A7E: 7E 3A A0                   JMP DSKERR
3A81: 39                  OPEN2  RTS 
3A82:                     OPERRM RMB 2         * THE ERROR MSG TP PRINT IF OPEN FAILS
3A84:                            
3A84: CE 39 C6            OPENO  LDX #OUTFCB
3A87: 6F 05                      CLR FCBSTA,X CLEAR STATUS
3A89: 3F                         SWI OPEN
3A8A: 14                          FCB $14
3A8B: A6 05                      LDAA FCBSTA,X ERROR?
3A8D: 27 10                      BEQ OPEN4
3A8F: 81 03                      CMPA #03     OUTPUT FILE ALREADY EXISTS?
3A91: 27 06                      BEQ OPEN3   BR IF SO
3A93: CE 3A BE                   LDX #ERROOU
3A96: 7E 3A A0                   JMP DSKERR
3A99: CE 3B 6C            OPEN3  LDX #ERROFE  
3A9C: 7E 3A A0                   JMP DSKERR
3A9F: 39                  OPEN4  RTS 
3AA0:                            
3AA0: BD 38 61            DSKERR JSR PDATA1    PRINT ERROR MESSAGE
3AA3: 7E 39 19                   JMP EMON      AND RETURN TO OS
3AA6: 49 4E 50 55 54 20   ERROIN FCC 'INPUT FILE OPEN ERROR'
3AAC: 46 49 4C 45 20 4F 
3AB2: 50 45 4E 20 45 52 
3AB8: 52 4F 52          
3ABB: 0D 0A 04                   FCB $0D,$0A,$04
3ABE: 4F 55 54 50 55 54   ERROOU FCC 'OUTPUT FILE OPEN ERROR'
3AC4: 20 46 49 4C 45 20 
3ACA: 4F 50 45 4E 20 45 
3AD0: 52 52 4F 52       
3AD4: 0D 0A 04                   FCB $0D,$0A,$04
3AD7: 43 4C 4F 53 45 20   ERRCLS FCC 'CLOSE FILE ERROR'
3ADD: 46 49 4C 45 20 45 
3AE3: 52 52 4F 52       
3AE7: 0D 0A 04                   FCB $0D,$0A,$04
3AEA: 49 4E 50 55 54 20   ERRGET FCC 'INPUT FILE READ ERROR'
3AF0: 46 49 4C 45 20 52 
3AF6: 45 41 44 20 45 52 
3AFC: 52 4F 52          
3AFF: 0D 0A 04                   FCB $0D,$0A,$04
3B02: 4F 55 54 50 55 54   ERROUT FCC 'OUTPUT FILE WRITE ERROR'
3B08: 20 46 49 4C 45 20 
3B0E: 57 52 49 54 45 20 
3B14: 45 52 52 4F 52    
3B19: 0D 0A 04                   FCB $0D,$0A,$04
3B1C: 49 4E 56 41 4C 49   ERRIFN FCC 'INVALID INPUT FILE NAME'
3B22: 44 20 49 4E 50 55 
3B28: 54 20 46 49 4C 45 
3B2E: 20 4E 41 4D 45    
3B33: 0D 0A 04                   FCB $0D,$0A,$04
3B36: 49 4E 56 41 4C 49   ERROFN FCC 'INVALID OUTPUT FILE NAME'
3B3C: 44 20 4F 55 54 50 
3B42: 55 54 20 46 49 4C 
3B48: 45 20 4E 41 4D 45 
3B4E: 0D 0A 04                   FCB $0D,$0A,$04
3B51: 4D 49 53 53 49 4E   ERRMOF FCC 'MISSING OUTPUT FILE NAME'
3B57: 47 20 4F 55 54 50 
3B5D: 55 54 20 46 49 4C 
3B63: 45 20 4E 41 4D 45 
3B69: 0D 0A 04                   FCB $0D,$0A,$04
3B6C: 4F 55 54 50 55 54   ERROFE FCC 'OUTPUT FILE ALREADY EXISTS'
3B72: 20 46 49 4C 45 20 
3B78: 41 4C 52 45 41 44 
3B7E: 59 20 45 58 49 53 
3B84: 54 53             
3B86: 0D 0A 04                   FCB $0D,$0A,$04      
3B89:                     
3B89: CE 39 1C            CLOSEI LDX #INFCB
3B8C: 20 03                      BRA CLOSE2
3B8E: CE 39 C6            CLOSEO LDX #OUTFCB
3B91: 6F 05               CLOSE2 CLR FCBSTA,X 
3B93: 3F                         SWI CLOSE
3B94: 15                          FCB $15
3B95: 6D 05                      TST FCBSTA,X ERROR?
3B97: 27 06                      BEQ CLOSE3
3B99: CE 3A D7                   LDX #ERRCLS
3B9C: 7E 3A A0                   JMP DSKERR
3B9F: 39                  CLOSE3 RTS 
3BA0:                     
3BA0: 37                  FGETB  PSHB  GET BYTE FROM INPUT FILE, CARRY SET IF EOF
3BA1: 3F                         SWI PSHX
3BA2: 05                          FCB $05
3BA3: CE 39 1C                   LDX #INFCB
3BA6: 3F                         SWI READ
3BA7: 18                          FCB $18
3BA8: E6 05                      LDAB FCBSTA,X  GET STATUS                       
3BAA: 27 0A                      BEQ FGETB1
3BAC: C1 08                      CMPB #8   STATUS 8 IS END OF FILE     
3BAE: 27 0B                      BEQ FGETB2      
3BB0: CE 3A EA                   LDX #ERRGET OTHERWISE READ ERROR
3BB3: 7E 3A A0                   JMP DSKERR
3BB6: 3F                  FGETB1 SWI PULX
3BB7: 06                          FCB $06
3BB8: 33                         PULB
3BB9: 0C                         CLC
3BBA: 39                         RTS       
3BBB: 3F                  FGETB2 SWI PULX
3BBC: 06                          FCB $06
3BBD: 33                         PULB
3BBE: 0D                         SEC
3BBF: 39                         RTS       
3BC0:                     
3BC0: 37                  FOUTB  PSHB   WRITE BYTE INTO OUTPUT FILE
3BC1: 3F                         SWI PSHX
3BC2: 05                          FCB $05
3BC3: CE 39 C6                   LDX #OUTFCB
3BC6: 3F                         SWI WRITE
3BC7: 19                          FCB $19
3BC8: 6D 05                      TST FCBSTA,X  GET STATUS                       
3BCA: 27 06                      BEQ FOUTB1
3BCC: CE 3B 02                   LDX #ERROUT WRITE ERROR
3BCF: 7E 3A A0                   JMP DSKERR
3BD2: 3F                  FOUTB1 SWI PULX
3BD3: 06                          FCB $06
3BD4: 33                         PULB
3BD5: 39                         RTS       
3BD6:                             
3BD6: CE 39 1C            REWIND LDX #INFCB REWIND INPUT FILE
3BD9: 3F                         SWI REWD         
3BDA: 16                          FCB $16
3BDB: 6D 05                      TST FCBSTA,X  GET STATUS                       
3BDD: 27 06                      BEQ REW1
3BDF: CE 3A A6                   LDX #ERROIN RE-OPEN ERROR
3BE2: 7E 3A A0                   JMP DSKERR
3BE5: 39                  REW1   RTS        
3BE6:                             
3BE6:                     
3BE6: 7E E1 AC            EINCH  JMP $E1AC   INPUT A CHAR FROM TTY: USE SWTBUF EINCH
3BE9: 7E E1 D1            EOUTCH JMP $E1D1   OUTPUT A CHAR TO TTY: USE SWTBUF OUTEEE
3BEC:                     
3BEC:                     * START OF ASSEMBLER TABLES
3BEC: 3B EE               ETABL  FDB *+2
3BEE:                     
3BEE:                            END
