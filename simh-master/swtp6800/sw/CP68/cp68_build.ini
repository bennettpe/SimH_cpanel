set console -n -q log=console.txt 
set debug -n -q debug.txt

set bootrom 2708
attach bootrom swtbug.bin
set cpu hex
set cpu noitrap
set cpu nomtrap
set cpu nodebug
reset
set mp-b2 bd0, bd1, bd2, bd3, bd4, bd5

set dc-4 fmt=cp68
att dc-40 CP68.DSK
set dc-40 rw
att dc-41 Blank.DSK
set dc-41 rw

; CP/68 for MF68 Disk - 1978

echo

load SWTBUG.LST

echo load CP68 resident program
load asm/CP68_Resident.hex S19
load asm/CP68_Resident.LST

echo load CP68 driver for MF68
load asm/CP68_SWTPDK.hex s19
load asm/CP68_SWTPDK.LST

; start symbolic trace
; set cpu debug=symb;inst
; set dc-4 debug=all

; set ENTRY POINT 
; JMP 1D5D
dep 0100 7E 
dep 0101 1D 
dep 0102 5D 

; set RDSEC/WRSEC jump vectors for MF68 disk drive
dep 075F 1D
dep 0760 60

dep 0762 1D
dep 0763 63

; set correct number of sectors per track for MF68 disks
; into CLI SEMPTY processing
dep 16b8 12
; into directory GETDR processing
dep 192A 13

; Load and run INIT
; clears all sector, write boot prog 
; disk geometry: 35 tracks x 18 sectors x 128 bytes
; track 0..34 has sectors numbered 1,2..18

echo
echo load INIT command
load asm/INIT.hex S19
load asm/INIT.LST

; load boot prog (it loads at $2400)
; then copy prog from $2400-257A -> 2239-23B3
; to fill boot prog area into init.cmd  

echo
echo load BOOT command
load asm/BOOT.hex s19
load asm/BOOT.lst

; LDX #$2400
dep 5000 ce
dep 5001 24
dep 5002 00
; LDA A 0,X
dep 5003 a6
dep 5004 00
; INX
dep 5005 08
; STX $5001
dep 5006 ff
dep 5007 50
dep 5008 01
; LDX #$2239
dep 5009 ce
dep 500a 22
dep 500b 39
; STA A 0,X
dep 500c a7
dep 500d 00
; INX
dep 500e 08
; STX $500a
dep 500f ff
dep 5010 50
dep 5011 0a
; CPX #$23b3
dep 5012 8c
dep 5013 23
dep 5014 B3
; BNE $5000
dep 5015 26
dep 5016 e9

; add path to call init.cmd loaded in mem
; LDA A #$00
dep 5017 86
dep 5018 00
; STA A $28  DRIVE TO INIT
dep 5019 97
dep 501a 28
; JSR 20C3   INIT.CMD ENTRY POINT
dep 501b bd
dep 501c 20
dep 501d c3
; SWI WARMSTART  CP68 WARM START
dep 501e 3f
dep 501f 1f

; start CP/68
dep pc 0100

; transfer addr for INIT
go until "\n."
send "JUMP $5000"
send "\r"
go until "INIT. DISK IN DRIVE 0 ? ."
send "Y"
send "\r"
go until "\n."

send "SAVE 0:CP68.SYS,$0100,$1EDD,$0100"
send "\r"
go until "\n."

send "SAVE 0:INIT.CMD,$2000,$23B3,$20C3"
send "\r"
go until "\n."

send "SAVE 0:BOOT.CMD,$2400,$2590,$2583"
send "\r"
go until "\n."

send "DIR"
send "\r"
go until "\n."

send "INIT 1"
send "\r"
go until "INIT. DISK IN DRIVE 1 ? ."
send "Y"
send "\r"
go until "\n."

send "DIR 1"
send "\r"
go until "\n."

send "BOOT"
send "\r"
go until "\n."

echo
echo load LINK command
load asm/link.hex S19

echo
; send ^U (char 15hex, 25 octal) to discard the current cmd line
send "\025"
go until "."

send "SAVE 0:LINK.CMD,$2000,$21F0,$20AA"
send "\r"
go until "\n."

send "DIR"
send "\r"
go until "\n."

send "LINK"
send "\r"
go until "SYSTEM FILE NAME? ."
send "CP68.SYS"
send "\r"
go until "\n."

send "BOOT"
send "\r"
go until "\n."

send "EXIT"
send "\r"
go until "$"

send "D"
go until "\n."

echo
echo load ASSIGN command
load asm/assign.hex S19

echo
send "\025"
go until "."

send "SAVE 0:ASSIGN.CMD,$2000,$2120,$2000"
send "\r"
go until "\n."

send "DIR"
send "\r"
go until "\n."

echo
echo load DELETE command
load asm/delete.hex S19

echo
send "\025"
go until "."

send "SAVE 0:DELETE.CMD,$2000,$2243,$20B8"
send "\r"
go until "\n."

send "DIR"
send "\r"
go until "\n."

echo
echo load SECURITY command
load asm/security.hex S19

echo
send "\025"
go until "."

send "SAVE 0:SECURITY.CMD,$2000,$21B0,$20AA"
send "\r"
go until "\n."

send "DIR"
send "\r"
go until "\n."

echo
echo load SET command
load asm/set.hex S19

echo
send "\025"
go until "."

send "SAVE 0:SET.CMD,$2000,$2100,$2000"
send "\r"
go until "\n."

send "DIR"
send "\r"
go until "\n."

echo
echo load PIP command
load asm/PIP.hex S19

; patch for disk-to-disk copy 
; start on track 0, sector 3 (cannot start on T/S 0,1 as
: flex 1.0 disk format has on track 0 sectors numbered as 0,2,3..18
; track 1 up to track 24 has sectors numbered as 1,2,3..18)
dep 273f 03
; path for MF68 disk geometry: trksiz = 18, dsksiz = 34
dep 2786 12
dep 278d 22

echo
send "\025"
go until "."

send "SAVE 0:PIP.CMD,$2000,$2E40,$2458"
send "\r"
go until "\n."

send "DIR"
send "\r"
go until "\n."

echo
echo load STATUS command
load asm/status.hex S19

echo
send "\025"
go until "."

send "SAVE 0:STATUS.CMD,$2000,$2070,$2000"
send "\r"
go until "\n."

send "DIR"
send "\r"
go until "\n."

; set operating system commands as non delete-able, 
; and non rename-able

send "SECURITY CP68.SYS,2"
send "\r"
go until "\n."
send "SECURITY INIT.CMD,2"
send "\r"
go until "\n."
send "SECURITY BOOT.CMD,2"
send "\r"
go until "\n."
send "SECURITY LINK.CMD,2"
send "\r"
go until "\n."
send "SECURITY ASSIGN.CMD,2"
send "\r"
go until "\n."
send "SECURITY DELETE.CMD,2"
send "\r"
go until "\n."
send "SECURITY SECURITY.CMD,2"
send "\r"
go until "\n."
send "SECURITY SET.CMD,2"
send "\r"
go until "\n."
send "SECURITY PIP.CMD,2"
send "\r"
go until "\n."
send "SECURITY STATUS.CMD,2"
send "\r"
go until "\n."

send "DIR"
send "\r"
go until "\n."

send "STATUS"
send "\r"
go until "\n."

; crate text file asm from console
; cp/68 has no built-in editor

send "PIP 1:HELLO.ASM/T=CON"
send "\r"
call type "START  LDX #MSG"
call type "       SWI PRTMSG  PRINT A STRING"
call type "        FCB $31"
call type "       SWI WARMS   RETURN TO CP68"
call type "        FCB $1F "
call type "MSG    FCC 'Hola'  "
call type "       FCB 13"
call type "       FCB 10"
call type "       FCB 4"
call type "       FCB 0"
call type "       END"
go until "\n."
; send ^D (char 004) = end of file character
send "\004"
send "\r"
go until "DONE"
go until "."
; send ESC (char 27 dec, 033 octal) = escape pip
send "\033"
send "\r"
go until "\n."

send "DIR 1"
send "\r"
go until "\n."

; show contents of text file

send "PIP CON=1:HELLO.ASM"
send "\r"
go until "DONE"
go until "."
send "\033"
send "\r"
go until "\n."

echo
echo load RA6800ML command (the assembler)
load asm/RA6800ML.hex S19
load asm/RA6800ML.LST

echo
send "\025"
go until "."

send "SAVE 0:RA6800ML.CMD,$2000,$3C00,$2000"
send "\r"
go until "\n."

send "DIR"
send "\r"
go until "\n."

; In cp/68, file open for write
; fails if file already exists

send "RA6800ML.CMD,1:HELLO.ASM,1:HELLO.OBJ"
send "\r"
go until "OPTIONS:"
send "L,M,S,O"
send "\r"
go until "\nTHERE WERE:"
go until "\n."

send "DIR 1"
send "\r"
go until "\n."

echo
echo load LINK68 command (the linker loader for assembled object code)
load asm/LINK68.hex S19
load asm/LINK68.LST

echo
send "\025"
go until "."

; the command name cannot be LINK68, because it starts 
; with LIN that is the abreviature for CP68 transient 
; command LINK that is checked before searching for
; external command
; so instead of saving it as LINK68 we save it as LNK68

send "SAVE 0:LNK68.CMD,$B000,$B912,$B000"
send "\r"
go until "\n."

send "DIR"
send "\r"
go until "\n."

send "LNK68.CMD,1:HELLO.OBJ,1:HELLO.S19"
send "\r"
go until "BASE ADDRESS:"
send "2000"
go until "MEMORY LIMIT:"
send "7FFF"
go until "COMMON:"
send "7000"
go until "SAVE LOADED FILE? Y OR N:"
send "Y"
go until "\n."

send "DIR 1"
send "\r"
go until "\n."

; view in console S19 program generated

send "PIP CON=1:HELLO.S19"
send "\r"
go until "DONE"
go until "."
send "\033"
send "\r"
go until "\n."

send "DIR 1"
send "\r"
go until "\n."

; conver S19 file to binary

send "PIP 1:HELLO.BIN/B=1:HELLO.S19"
send "\r"
go until "DONE"
go until "."
send "\033"
send "\r"
go until "\n."

send "DIR 1"
send "\r"
go until "\n."

; load bin generated program and run it

send "LOAD 1:HELLO.BIN"
send "\r"
go until "\n."

send "JUMP $2000"
send "\r"
go until "\n."

; save as a command

send "SAVE 1:HELLO.CMD,$2000,$2010,$2000"
send "\r"
go until "\n."

send "DIR 1"
send "\r"
go until "\n."

; run the command

send "1:HELLO.CMD"
send "\r"
go until "\n."

go

goto end


       set cpu debug=symb;inst
       set dc-4 debug=all


:type
go until "\n."
send "%1"
send "\r"
return

:end
