



ASM/6800 1.4A0: 0000 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 1; Form 0       SDOS REVISION HISTORY
SDOS6800.ASM
  0000            1: IOPKDEFS   EQU  0 
  0038            2: MEMSIZE    EQU 56 
  0C39            3: OKRTS      EQU  $0C39   ;CLC,RTS 
  0D39            4: ERRORRTS   EQU  $0D39   ;SEC,RTS 
  0047            5: SDOSSUBREVISION   EQU  'G 




ASM/6800 1.4A0: 0000 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 2; Form 1       SDOS REVISION HISTORY
SDOS6800.ASM
  0034            3: SC:GETLINEFLAGSHINT     EQU     $34     *** FIGURE OUT WHERE TO PUT THIS!!
                  4:         NAME    SDOS1.1
                  5: ********************************************************************************
                  6: ******** Copyright (C) 1978, 1979, 1980, 1981, 1982 by Software Dynamics ********
                  7: ********************************************************************************
                  8: *       This file, and all derivatives of it, in either source or object format,
                  9: *       are a copyright and Trade Secret of Software Dynamics.
                 10: *       Possession of its contents, modification or distribution of all
                 11: *       or any part of this information without explicit written permission
                 12: *       from Software Dynamics is strictly prohibited.
                 13: ***************************************************************************
                 14: *
                 15: *       SDOS REVISION HISTORY:
                 16: *
                 17: *       9/2/78  SDOS1.0f        Original SDOS for 6800 only
                 18: *
                 19: *       11/21/81        SDOS1.1c        6800/6809 SDOS identical to SDOS1.0f
                 20: *                       All bugs fixed by 1.0f patch file are corrected
                 21: *                       Can use SDOS1.1 with I/O packages built for SDOS1.0f
                 22: *                       MIKBUG no longer accepted
                 23: *
                 24: *       1/2/82          SDOS1.1d        Trivial fixes to 1.1c
                 25: *       2/1/82          SDOS1.1e        More fixes
                 26: *       3/16/82         SDOS1.1f        6809 Test flight version. Works fine.
                 27: *
                 28: *       8/16/82         SDOS1.1g        Several modifications.
                 29: *                                       1) Changed so serialnumber can be
                 30: *                                          in fixed memory location, to allow
                 31: *                                          SDOS to run on mass-produced computers
                 32: *                                          that have boot ROMs that cannot be
                 33: *                                          changed to match requirements of
                 34: *                                          encryption scheme.
                 35: *                                       2) Enhanced performance of Block move
                 36: *                                          for 6800 slightly.
                 37: *                                       3) Improved disk I/O to enhance
                 38: *                                          performance on floppies.
                 39: *                                       4) Fixed "LOG doesn't print
                 40: *                                          characters typed on CONSOLE:"
                 41: *                                       5) Verifies that SERIALNUMBER.SYS
                 42: *                                          is an encrypted file




ASM/6800 1.4A0: 0000 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 3; Form 1       SDOS REVISION HISTORY
SDOS6800.ASM
                 44: *       Known Bugs:
                 45: *               After a Write at EOF, SC:GETEOF doesn't always claim
                 46: *               that EOF condition has occurred.
                 47: *




ASM/6800 1.4A0: 0000 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 4; Form 1       SDOS REVISION HISTORY
SDOS6800.ASM
                 49: *   SDOS1.1 improvements to SDOS1.0f:
                 50: *   1)  Fixed sparse file problem.
                 51: *   2)  Fixed Rename to same name to re-hash to proper directory slot.
                 52: *   3)  Replaced block move by very fast block move routine; added entry point
                 53: *       for fast block move to entry point table.
                 54: *   4)  Installed Illegal LSN check in SDOS so it need not be replicated
                 55: *       in drivers.
                 56: *   5)  Changed Mount logic to use BOOT:DIRLSN pointer instead of NLCN/2.
                 57: *       SDOS now verifies that DIRECTORY.SYS is present in directory entry
                 58: *   6)  Dumpbuffers modified to move contents of modified FCBs back
                 59: *       to disk.
                 60: *   7)  EXIT changed so that if error when fetching DEFAULTPROGRAM,
                 61: *       then the disk is dismounted and SDOS tries again.
                 62: *   8)  Installed Serial Numbering (SERIALNUMBER.SYS) in SDOSINIT.
                 63: *       SERIALNUMBER.SYS chains to INITIALIZE.SYS if present,
                 64: *       and sets up INITIALIZE.DO as DO file.
                 65: *       Added Decrypting loader for encrypted files.
                 66: *   9)  Changed Disk File and Device drivers to zero column count on Ascii:FF,
                 67: *       decrement column count on Ascii:BS, and to advance column count to
                 68: *       next multiple of 8 on Ascii:HT.
                 69: *   10) Modified Dismount to delete ErrorMsgs.sys if it is marked as deleted.
                 70: *       Also modified SDOS to allow ErrorMsgs.sys to be opened on the disk
                 71: *       selected by DEFAULTDISK.
                 72: *   11) Changed so Dumpbuffers no longer checks for open files; now only
                 73: *       Dismount checks for open files.
                 74: *   12) Changed Dumpbuffers so it do it does NOT mark sectors as invalid.
                 75: *   13) Modified SetMap logic to mark Last Bad LSN as invalid, and mark
                 76: *       all sectors in the pool as invalid.
                 77: *   14) Changed PARSENAME so it no longer skips leading blanks on disk file name
                 78: *   15) Changed checksum over SDOS so it cannot be trivially defeated by
                 79: *       exchanging 2 bytes, and so that it is statically computed at assembly time.
                 80: *   16) Modified CHAIN to make a Zero start addresss illegal. Also revised
                 81: *       so CHAIN will return errors to caller if no bytes are loaded, and to
                 82: *       use the stack at the top of the address space once some bytes are loaded.
                 83: *   17) Added patch space to SDOS.
                 84: *   18) Added check in Disk File/Device driver so that ^C^C...
                 85: *       while "READA"ing nulls will terminate relatively quickly.
                 86: *   19) Fixed DisplayError to close Log channel if it gets an error, and
                 87: *       then try to display the error again before giving up completely.
                 88: *   20) Changed file name parser to recognize disk device names of the form




ASM/6800 1.4A0: 0000 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 5; Form 1       SDOS REVISION HISTORY
SDOS6800.ASM
                 89: *       xxxx:<blank or control char> so that D0:<CR> is recognized properly.
                 90: *   21) Changed Disk File Close to automaticallly deallocate extra space
                 91: *       allocated to a file when the FCB is freed.
                 92: *   22) All updates to a file (Create, Rename, Writea, WriteB, CC:SetFileSize)
                 93: *       cause the file creation date to be modified, and to reset a new
                 94: *       bit in the directory flags that sez: "This file has been backed up."
                 95: *   23) Added SYSCALL:LUNNAME to convert a logical unit number into the text string
                 96: *       that gives the name of that device.
                 97: *   24) Added SC:GETFILEDATE, SC:GETFILEPROT, CC:SETFILEDATE, CC:SETFILESIZE,
                 98: *       CC:SETFILEPROT to allow utility programs to manipulate files more easily.
                 99: *   25) Need to add disassembler confusers around the code:
                100: *       1) assemble in location dependent code
                101: *       2) Mix data constants into the code
                102: *       3) insert dummy instructions into code whose body overlaps
                103: *          a real instruction to throw off disassembly synchronization.
                104: *   26) Allow CC:DUMPBUFFERS to be invoked on a file; dumps all sectors
                105: *       intended for the device
                106: *   27) SYSCALL:CREATE syscall block extension optionally specifies file size
                107: *   28) ERR:NOSUCHPROGRAM issued if LOAD/CHAIN can't find file
                108: *   29) Date not set --> can't create or update files!
                109: *   30) Modified CC:Position for disk device and files to zero the column count
                110: *   31) Added SYSCALL:DELAY, (dummy) SYSCALL:INTERLOCK system calls
                111: *   32) Implemented Write Protect bit (can't rename, delete, write or chop)
                112: *   33) Added implied positioning on Read/Write system calls
                113: *   34) Added CC:POSITIONTOEND file system call
                114: *   35) Made SDOS:ERROR logic fully re-entrant by placing errorcode in TEMPX
                115: *   36) Made SC:GETERRORSTATS a built-in function of SDOS disk driver.
                116: *       Includes Operation Count, Error Statuses, and LastErroringLSN
                117: *
                118: *       END REVISION HISTORY
                119: 
                120: *
                121: *       Things to do:
                122: *
                123: *       for SDOS 1.2
                124: *               after user-selectable timeout, start dumping dirty pages
                125: *               optimize interface to disk read/write routines
                126: *               add write protect checking
                127: *               gettype should return value of DCB:DVTYP byte
                128: *               should not allow ':' as last character of file name




ASM/6800 1.4A0: 0000 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 6; Form 1       SDOS REVISION HISTORY
SDOS6800.ASM
                129: *               reply buffer outside of user space or in scratchpad s/b illegal
                130: *
                131:         WITH    WI=107,DE=51
                132: *
  0000          133:         IFUND   MEMSIZE
 *S*            134: MEMSIZE EQU     56      We can't beleive you would want it smaller...
                135:         FIN
  0400          136: K       EQU     1024
                137: 
  0001          138:         IF      M6800!M6801
  3200          139: SDOS:ESTSIZE    EQU     $3200
  0001          140:         ELSE    (M6809)
 *S*            141: SDOS:ESTSIZE    EQU     $2E00
                142:         FIN
                143: 
  0001          144:         IFUND   CODE
  AE00          145: CODE    EQU     MEMSIZE*K-SDOS:ESTSIZE
                146:         FIN
                147: 
  0001          148: LISTDEFS        EQU     1       FORCE LISTING OF EQUATES FILE
  0001          149: SYSTEMDEFS      EQU     1       WE WANT ALL THE DEFINITIONS!
                  0:         INCLUDE SDOS11DEFS.ASM  GO PROCESS THE DEFINITIONS FILE




ASM/6800 1.4A0: 0000 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 7; Form 1       *** SDOS 1.1 DEFINITIONS ***
SDOS11DEFS.ASM
                  2: *       SDOS 1.1 DEFINITIONS FILE (AS OF 8/16/82)
                  3: *
  0011            4: SDOSVERSION     EQU     $11     1.1 IN HEX
                  6: 
  0000            7:         IFUND   LISTDEFS
 *S*              8: LISTDEFS        EQU     0
                  9:         FIN
                 10: 
  0001           11:         IF      LISTDEFS
  0001           12:         ELSE
 *S*             13:         LIST    0
                 14:         FIN
                 15: 
                 16: *
                 17: *
                 18: *       The Definitions are broken into 3 parts:
                 19: *               A) THOSE NEEDED TO ASSEMBLE SDOS PROPER OR SYSTEM PROGRAMS
                 20: *               B) THOSE NEEDED TO BUILD AN I/O PACKAGE (A SUBSET OF "A")
                 21: *               C) THOSE NEEDED BY EVERYDAY USER PROGRAMS (A SUBSET OF "B")
                 22: *
                 23: 
  0000           24:         IFUND   SYSTEMDEFS
 *S*             25: SYSTEMDEFS      EQU     0       DON'T WANT SYSTEM DEFINITIONS
                 26:         FIN
                 27: 
  0000           28:         IFUND   IOPKDEFS
 *S*             29: IOPKDEFS        EQU     0       DON'T WANT I/O PACKAGE DEFINITIONS
                 30:         FIN
                 31: 
  00FB           32: SYSCALL$        EQU     $FB     JMP TO SDOS; RESERVED SYSCALL ENTRY POINT
                 33: *       CONTENTS OF ($FC,$FD) POINTS TO END OF USER RAM
                 34: *       CONTENTS OF ($FE,$FF) ARE SACRED; THEY BELONG TO THE ROM




ASM/6800 1.4A0: 0000 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 8; Form 1       *** SDOS 1.1 DEFINITIONS ***
SDOS11DEFS.ASM
                 36: *       SYSCALL$ OPCODE DEFINITIONS
                 37: *
  0000           38:         ORG     0
0000 0001        39: SYSCALL:OPEN    RMB     1       OPEN FILE
0001 0001        40: SYSCALL:CREATE  RMB     1       CREATE A NEW FILE
0002 0001        41: SYSCALL:CLOSE   RMB     1       CLOSE A FILE
0003 0001        42: SYSCALL:RENAME  RMB     1       RENAME A FILE
0004 0001        43: SYSCALL:DELETE  RMB     1       DELETE A FILE
0005 0001        44: SYSCALL:LOAD    RMB     1       LOAD AN OVERLAY
0006 0001        45: SYSCALL:CHAIN   RMB     1       CHAIN TO A FILE
0007 0001        46: SYSCALL:CREATELOG       RMB     1       CREATE THE LOG FILE
0008 0001        47: SYSCALL:CLOSELOG        RMB     1       CLOSE THE LOG FILE
0009 0001        48: SYSCALL:DISKDEFAULT     RMB     1       SELECT DEFAULT DISK DEVICE
000A 0001        49: SYSCALL:READA   RMB     1       READ ASCII BYTES FROM A FILE
000B 0001        50: SYSCALL:READB   RMB     1       READ BINARY BYTES FROM A FILE
000C 0001        51: SYSCALL:WRITEA  RMB     1       WRITE ASCII BYTES TO A FILE
000D 0001        52: SYSCALL:WRITEB  RMB     1       WRITE BINARY BYTES TO A FILE
000E 0001        53: SYSCALL:CONTROL RMB     1       PERFORM A CONTROL OPERATION ON A FILE/DEVICE
000F 0001        54: SYSCALL:STATUS  RMB     1       READ FILE/DEVICE STATUS
0010 0001        55: SYSCALL:WAITDONE        RMB     1       WAIT FOR I/O ON CHANNEL TO COMPLETE
0011 0001        56: SYSCALL:EXIT    RMB     1       GIVE CONTROL BACK TO THE OPERATING SYSTEM
0012 0001        57: SYSCALL:ERROREXIT       RMB     1       EXIT TO SYSTEM WITH ERROR CODE
0013 0001        58: SYSCALL:SETERROR        RMB     1       REPORT AN ERROR TO THE SYSTEM
0014 0001        59: SYSCALL:GETERROR        RMB     1       READ BACK THE LAST ERROR CODE
0015 0001        60: SYSCALL:DISPERROR       RMB     1       DISPLAY ERROR MESSAGE CORRESPONDING TO LAST ER
0016 0001        61: SYSCALL:KILLPROOF       RMB     1       PREVENT USER PROGRAM FROM BEING KILLED
0017 0001        62: SYSCALL:KILLENABLE      RMB     1       ALLOW USER PROGRAM TO BE KILLED
0018 0001        63: SYSCALL:DEBUG   RMB     1       CALL SYSTEM DEBUGGER
0019 0001        64: SYSCALL:ATTNCHECK       RMB     1       OPERATOR ATTENTION REQUEST CHECK
001A 0001        65: SYSCALL:ISCONSOLE       RMB     1       CHECK FOR CHANNEL 0 INPUT DEVICE = CONSOLE:
001B 0001        66: SYSCALL:INTERLOCK       RMB     1       PERFORM INTERLOCK FUNCTIONS ON OBJECTS
001C 0001        67: SYSCALL:DELAY   RMB     1       DELAY FOR n 1/60ths OF A SECOND
001D 0001        68: SYSCALL:READLUN RMB     1       CONVERT LOGICAL UNIT NUMBER TO DEVICE NAME
001E 0001        69: SYSCALL:GETSERIALNUMBER RMB     1       GET PROCESSOR SERIAL NUMBER
001F 0001        70: SYSCALL:JOBCONTROL      RMB     1       CREATE/TEST/DESTROY OTHER JOBS




ASM/6800 1.4A0: 001F SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 9; Form 1       *** SDOS 1.1 DEFINITIONS ***
SDOS11DEFS.ASM
                 72: *
                 73: *       SYSCALL BLOCK DISPLACEMENTS
                 74: *
  0000           75:         ORG     0
0000 0001        76: SCBLK:OPCODE    RMB     1       PRIMARY SYSCALL FUNCTION (OPEN, READ, ETC.)
0001 0001        77: SCBLK:WLEN      RMB     1       WAIT FLAG BIT (0=WAIT) AND SYSCALL BLOCK LENGTH (0..12
0002 0002        78: SCBLK:PARAMS    RMB     2       PARAMETER BYTES TO OPCODE (SECONDARY OPCODE, CHANNEL #
0004 0002        79: SCBLK:WRBUF     RMB     2       POINTER TO WRITE DATA BUFFER
0006 0002        80: SCBLK:WRLEN     RMB     2       NUMBER OF BYTES IN WRITE DATA BUFFER
0008 0002        81: SCBLK:RPLEN     RMB     2       LENGTH OF REPLY (RESULT OF SYSCALL)
000A 0002        82: SCBLK:RDBUF     RMB     2       POINTER TO READ DATA BUFFER (WHERE RESULT GOES)
000C 0002        83: SCBLK:RDLEN     RMB     2       CEILING ON SIZE OF REPLY (READ DATA BUFFER)
000E 0000        84: SCBLK:DATA      RMB     0       OTHER PARAMETERS FOR SYSCALL; UP TO 127-12 BYTES
000E 0000        85: SCBLK:END       RMB     0       END OF SYSCALL BLOCK; ASSERT SCBLK:WLEN[1..7]=SCBLK:EN
                 86: *
                 87: *       SYSCALL PARAMETER LIST DEFINITIONS
                 88: *
  0002           89: OPEN:CHANNEL    EQU     SCBLK:PARAMS    CHANNEL NUMBER
  0006           90: OPEN:LENGTH     EQU     SCBLK:WRLEN     FILE NAME LENGTH
  0004           91: OPEN:NAMEP      EQU     SCBLK:WRBUF     POINTER TO FILE NAME
  000E           92: OPEN:SCLEN      EQU     SCBLK:DATA      OPEN SYSCALL BLOCK LENGTH
                 93: *
  0002           94: CREATE:CHANNEL  EQU     SCBLK:PARAMS    CHANNEL NUMBER
  0006           95: CREATE:LENGTH   EQU     SCBLK:WRLEN     FILE NAME LENGTH
  0004           96: CREATE:NAMEP    EQU     SCBLK:WRBUF     POINTER TO FILE NAME
  000E           97: CREATE:SCLEN    EQU     SCBLK:DATA      CREATE SYSCALL BLOCK LENGTH
  000E           98: CREATE:FILESIZE EQU     SCBLK:DATA      4 BYTE FILE SIZE INITIAL ALLOCATION
  0012           99: CREATE:FILESIZESCLEN    EQU     CREATE:FILESIZE+4       END OF CREATE BLOCK WITH FILE 
                100: *
  0002          101: CLOSE:CHANNEL   EQU     SCBLK:PARAMS    CHANNEL NUMBER
  0003          102: CLOSE:SCLEN     EQU     SCBLK:PARAMS+1  CLOSE SYSCALL BLOCK LENGTH
                103: *
  0002          104: RENAME:CHANNEL  EQU     SCBLK:PARAMS    CHANNEL NUMBER
  0006          105: RENAME:LENGTH   EQU     SCBLK:WRLEN     NEW FILE NAME LENGTH
  0004          106: RENAME:NAMEP    EQU     SCBLK:WRBUF     POINTER TO NEW FILE NAME
  000E          107: RENAME:SCLEN    EQU     SCBLK:DATA      RENAME SYSCALL BLOCK LENGTH
                108: *
  0006          109: DELETE:LENGTH   EQU     SCBLK:WRLEN     FILE NAME LENGTH
  0004          110: DELETE:NAMEP    EQU     SCBLK:WRBUF     POINTER TO NAME
  000E          111: DELETE:SCLEN    EQU     SCBLK:DATA      DELETE SYSCALL BLOCK LENGTH




ASM/6800 1.4A0: 000E SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 10; Form 1      *** SDOS 1.1 DEFINITIONS ***
SDOS11DEFS.ASM
                112: *
  0006          113: LOAD:LENGTH     EQU     SCBLK:WRLEN     LENGTH OF FILE NAME
  0004          114: LOAD:NAMEP      EQU     SCBLK:WRBUF     POINTER TO FILE NAME
  000E          115: LOAD:SCLEN      EQU     SCBLK:DATA      LOAD SYSCALL BLOCK LENGTH
                116: *
  0006          117: CHAIN:LENGTH    EQU     SCBLK:WRLEN     LENGTH OF FILE NAME
  0004          118: CHAIN:NAMEP     EQU     SCBLK:WRBUF     POINTER TO FILE NAME
  000E          119: CHAIN:SCLEN     EQU     SCBLK:DATA      CHAIN SYSCALL BLOCK LENGTH
                120: *
  0006          121: CREATELOG:LENGTH        EQU     SCBLK:WRLEN     LENGTH OF FILE NAME
  0004          122: CREATELOG:NAMEP EQU     SCBLK:WRBUF     POINTER TO FILE NAME
  000E          123: CREATELOG:SCLEN EQU     SCBLK:DATA      CREATELOG SYSCALL BLOCK LENGTH
                124: *
  0002          125: CLOSELOG:SCLEN  EQU     SCBLK:PARAMS    CLOSELOG SYSCALL BLOCK LENGTH
                126: *
  0006          127: DISKDEFAULT:LENGTH      EQU     SCBLK:WRLEN     FILE NAME LENGTH
  0004          128: DISKDEFAULT:NAMEP       EQU     SCBLK:WRBUF     POINTER TO FILE NAME
  000E          129: DISKDEFAULT:SCLEN       EQU     SCBLK:DATA      DISKDEFAULT SYSCALL BLOCK LENGTH
                130: *
  0002          131: READA:CHANNEL   EQU     SCBLK:PARAMS    CHANNEL NUMBER
  0003          132: READA:LMFLAG    EQU     SCBLK:PARAMS+1  LINE MODE FLAG BYTE
  000A          133: READA:BUFFERP   EQU     SCBLK:RDBUF     BUFFER POINTER
  000C          134: READA:MAXCOUNT  EQU     SCBLK:RDLEN     BYTE COUNT
  0008          135: READA:ACTUALCOUNT       EQU     SCBLK:RPLEN     ACTUAL NUMBER OF BYTES TRANSFERRED
  000E          136: READA:SCLEN     EQU     SCBLK:DATA      READA SYSCALL BLOCK LENGTH
  000E          137: RW:POSITION     EQU     SCBLK:DATA      READ/WRITE IMPLICIT FILE POSITION
  0012          138: RWPOSITION:SCLEN        EQU     RW:POSITION+4   END OF R/W SYSCALL WITH IMPLICIT FILE 
                139: *
  0002          140: READB:CHANNEL   EQU     SCBLK:PARAMS    CHANNEL NUMBER
  000A          141: READB:BUFFERP   EQU     SCBLK:RDBUF     BUFFER POINTER
  000C          142: READB:MAXCOUNT  EQU     SCBLK:RDLEN     BYTE COUNT
  0008          143: READB:ACTUALCOUNT       EQU     SCBLK:RPLEN     ACTUAL NUMBER OF BYTES TRANSFERRED
  000E          144: READB:SCLEN     EQU     SCBLK:DATA      READB SYSCALL BLOCK LENGTH
                145: *
  0002          146: WRITEA:CHANNEL  EQU     SCBLK:PARAMS    CHANNEL NUMBER
  0004          147: WRITEA:BUFFERP  EQU     SCBLK:WRBUF     BUFFER POINTER
  0006          148: WRITEA:COUNT    EQU     SCBLK:WRLEN     BYTE COUNT
  0008          149: WRITEA:SCLEN    EQU     SCBLK:RPLEN     WRITEA SYSCALL BLOCK LENGTH
                150: *
  0002          151: WRITEB:CHANNEL  EQU     SCBLK:PARAMS    CHANNEL NUMBER




ASM/6800 1.4A0: 000E SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 11; Form 1      *** SDOS 1.1 DEFINITIONS ***
SDOS11DEFS.ASM
  0004          152: WRITEB:BUFFERP  EQU     SCBLK:WRBUF     BUFFER POINTER
  0006          153: WRITEB:COUNT    EQU     SCBLK:WRLEN     BYTE COUNTER
  0008          154: WRITEB:SCLEN    EQU     SCBLK:RPLEN     WRITEB SYSCALL BLOCK LENGTH
                155: *
  0002          156: CONTROL:CHANNEL EQU     SCBLK:PARAMS    CHANNEL NUMBER
  0003          157: CONTROL:CODE    EQU     SCBLK:PARAMS+1  CONTROL CODE
  0004          158: CONTROL:SCLEN   EQU     SCBLK:WRBUF     CONTROL SYSCALL BLOCK MINIMUM LENGTH
  0000          159: CONTROL:DATA    EQU     0       DISPLACEMENT INTO WRITE BUFFER FOR CONTROL DATA
                160: *
  0002          161: STATUS:CHANNEL  EQU     SCBLK:PARAMS    CHANNEL NUMBER
  0003          162: STATUS:CODE     EQU     SCBLK:PARAMS+1  STATUS SELECTOR CODE
  000A          163: STATUS:BUFFERP  EQU     SCBLK:RDBUF     POINTER TO STATUS TARGET BUFFER
  000C          164: STATUS:MAXCOUNT EQU     SCBLK:RDLEN     SIZE OF STATUS READ-BACK BUFFER
  0008          165: STATUS:ACTUALCOUNT      EQU     SCBLK:RPLEN     ACTUAL # STATUS BYTES READ
  000E          166: STATUS:SCLEN    EQU     SCBLK:DATA      STATUS SYSCALL BLOCK MINIMUM LENGTH
  0000          167: STATUS:DATA     EQU     0       DISPLACEMENT INTO READ BUFFER FOR READ-BACK STATUS
                168: *
  0002          169: WAITDONE:CHANNEL        EQU     SCBLK:PARAMS    CHANNEL NUMBER
  0003          170: WAITDONE:SCLEN  EQU     SCBLK:PARAMS+1  WAITDONE SYSCALL BLOCK LENGTH
                171: *
  0002          172: EXIT:SCLEN      EQU     SCBLK:PARAMS    EXIT SYSCALL BLOCK LENGTH
                173: *
  0002          174: ERROREXIT:CODE  EQU     SCBLK:PARAMS    ERROR CODE NUMBER
  0004          175: ERROREXIT:SCLEN EQU     SCBLK:WRBUF     ERROREXIT SYSCALL BLOCK LENGTH
                176: *
  0002          177: SETERROR:CODE   EQU     SCBLK:PARAMS    ERROR CODE NUMBER
  0004          178: SETERROR:SCLEN  EQU     SCBLK:WRBUF     SETERROR SYSCALL BLOCK LENGTH
                179: *
  000A          180: GETERROR:BUFFERP        EQU     SCBLK:RDBUF     POINTER TO ERROR READ-BACK AREA
  000C          181: GETERROR:MAXCOUNT       EQU     SCBLK:RDLEN     SHOULD BE 2
  0008          182: GETERROR:ACTUALCOUNT    EQU     SCBLK:RPLEN     SHOULD BE RETURNED AS 2
  000E          183: GETERROR:SCLEN  EQU     SCBLK:DATA      GETERROR SYSCALL BLOCK LENGTH
                184: *
  0002          185: DISPERROR:SCLEN EQU     SCBLK:PARAMS    DISPERROR SYSCALL BLOCK LENGTH
                186: *
  0002          187: KILLPROOF:SCLEN EQU     SCBLK:PARAMS    KILLPROOF SYSCALL BLOCK LENGTH
                188: *
  0002          189: KILLENABLE:SCLEN        EQU     SCBLK:PARAMS    KILLENABLE SYSCALL BLOCK LENGTH
                190: *
  0002          191: DEBUG:SCLEN     EQU     SCBLK:PARAMS    DEBUG SYSCALL BLOCK LENGTH




ASM/6800 1.4A0: 000E SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 12; Form 1      *** SDOS 1.1 DEFINITIONS ***
SDOS11DEFS.ASM
                192: *
  0002          193: ATTNCHECK:SCLEN EQU     SCBLK:PARAMS    ATTNCHECK SYSCALL BLOCK LENGTH
                194: *
  0002          195: ISCONSOLE:SCLEN EQU     SCBLK:PARAMS    ISCONSOLE SYSCALL BLOCK LENGTH
                196: *
  0002          197: INTERLOCK:FUNCTION      EQU     SCBLK:PARAMS    INTERLOCK FUNCTION
  0004          198: INTERLOCK:BUFFERP       EQU     SCBLK:WRBUF     POINTER TO OBJECT
  0006          199: INTERLOCK:COUNT EQU     SCBLK:WRLEN     LENGTH OF OBJECT
  0008          200: INTERLOCK:SCLEN EQU     SCBLK:RPLEN     INTERLOCK SYSCALL BLOCK LENGTH
                201: *
  0002          202: DELAY:PERIOD    EQU     SCBLK:PARAMS    DELAY PERIOD
  0004          203: DELAY:SCLEN     EQU     SCBLK:WRBUF     DELAY SYSCALL BLOCK LENGTH
                204: *
                205: *READLUNNAME:LUN        EQU     SCBLK:PARAMS    LOGICAL UNIT NUMBER
                206: *READLUNNAME:BUFFERP    EQU     SCBLK:RDBUF     WHERE TO READ NAME BACK
                207: *READLUNNAME:MAXCOUNT   EQU     SCBLK:RDLEN     MAXIMUM LENGTH OF REPLY
                208: *READLUNNAME:ACTUALCOUNT        EQU     SCBLK:RPLEN     ACTUAL NAME LENGTH
  000E          209: READLUNNAME:SCLEN       EQU     SCBLK:DATA      READLUN SYSCALL BLOCK LENGTH
                210: *
  000A          211: GETSERIALNUMBER:BUFFERP EQU     SCBLK:RDBUF     POINTER TO SERIAL NUMBER REPLY BUFFER
  000C          212: GETSERIALNUMBER:MAXCOUNT        EQU     SCBLK:RDLEN     SIZE OF BUFFER
  0008          213: GETSERIALNUMBER:ACTUALCOUNT     EQU     SCBLK:RPLEN     SIZE OF REPLY
  000E          214: GETSERIALNUMBER:SCLEN   EQU     SCBLK:DATA      MINIMUM SIZE OF BLOCK
                215: *
  0002          216: JOBCONTROL:FUNCTION     EQU     SCBLK:PARAMS    JOB CONTROL FUNCTION
  0004          217: JOBCONTROL:BUFFERP      EQU     SCBLK:WRBUF     POINTER TO JOB CAPABILITY
  0006          218: JOBCONTROL:COUNT        EQU     SCBLK:WRLEN     SIZE OF CAPABILITY
  000C          219: JOBCONTROL:MAXCOUNT     EQU     SCBLK:RDLEN     MAXIMUM LENGTH OF REPLY
  0008          220: JOBCONTROL:ACTUALCOUNT  EQU     SCBLK:RPLEN     ACTUAL SIZE OF CAPABILITY
  0008          221: JOBCONTROL:SCLEN        EQU     SCBLK:WRLEN+2   JOBCONTROL SYSCALL MINIMUM BLOCK LENGT




ASM/6800 1.4A0: 000E SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 13; Form 1      *** SDOS 1.1 DEFINITIONS ***
SDOS11DEFS.ASM
  0003          223: LSN:SIZE        EQU     3       # BYTES OCCUPIED BY AN LSN
  0002          224: LCN:SIZE        EQU     2       # BYTES OCCUPIED BY AN LCN
                225: *
                226: *       STANDARD STATUS SYSCALL SUB-CODES
                227: *
  0000          228:         ORG     0
0000 0001       229: SC:GETPOS       RMB     1       GET BYTE POSITION
0001 0001       230: SC:GETCOL       RMB     1       GET COLUMN COUNT
0002 0001       231: SC:GETEOF       RMB     1       GET EOF FLAG
0003 0001       232: SC:GETFILESIZE  RMB     1       GET FILE SIZE
0004 0001       233: SC:GETTYPE      RMB     1       GET DEVICE TYPE AND CHARACTERISTICS
0005 0001       234: SC:GETPARAMS    RMB     1       GET DEVICE SPECIFIC PARAMETERS
                235: 
  0010          236: SC:DEVICESPECIFICOP     EQU     $10     BASE FOR DEVICE SPECIFIC STATUS CODES
                237: *
                238: *       STANDARD CONTROL SYSCALL SUB-CODES
                239: *
  0000          240:         ORG     0
0000 0001       241: CC:POSITION     RMB     1       POSITION TO THIS PLACE IN THE FILE
0001 0001       242: CC:DUMPBUFFERS  RMB     1       DUMP BUFFERS TO THE DEVICE (MAINLY FOR DISK)
                243: 
  0010          244: CC:DEVICESPECIFICOP     EQU     $10     BASE FOR DEVICE-SPECIFIC CONTROL CODES
                245: *
                246: *       STANDARD INTERLOCK SYSCALL SUB-CODES
                247: *
  0000          248:         ORG     0
0000 0001       249: IC:CREATE       RMB     1       CREATE AN OBJECT IDENTIFIER
0001 0001       250: IC:DESTROY      RMB     1       DESTROY AN OBJECT IDENTIFIER
0002 0001       251: IC:RESET        RMB     1       RESET OBJECT REFERENCE LIST
0003 0001       252: IC:LOCK RMB     1       LOCK AN OBJECT OR BLOCK UNTIL AVAILABLE
0004 0001       253: IC:RELEASE      RMB     1       RELEASE A LOCKED OBJECT
0005 0001       254: IC:TEST RMB     1       LOCK AN OBJECT OR ERROR IF UNAVAILABLE




ASM/6800 1.4A0: 0005 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 14; Form 1      *** SDOS 1.1 DEFINITIONS ***
SDOS11DEFS.ASM
                256: *       VIRTUAL TERMINAL SPECIFIC STATUS REQUESTS
                257: *
                258: *
  0010          259:         ORG     SC:DEVICESPECIFICOP
0010 0001       260: SC:GETPROFILE   RMB     1       GET CURRENT DEVICE PROFILE NAME
0011 0001       261: SC:GETACTCOL    RMB     1       GET ACTIVATION COLUMN
0012 0001       262: SC:GETPROFILEALTERATION RMB 1   GET PROFILE ALTERATION INFORMATION
0013 0001       263: SC:GETOUTPUTTIMEOUT RMB  1      GET OUTPUT TIMEOUT
0014 0001       264: SC:GETBAUDRATE  RMB     1       GET CURRENT BAUD RATE
0015 0001       265:                 RMB     1       (RESERVED)
0016 0001       266: SC:GETTABS      RMB     1       GET CURRENT TAB SETTINGS
0017 0001       267: SC:GETIDLES     RMB     1       GET NUMBER OF IDLES SENT AFTER NEWLINE
0018 0001       268: SC:GETWRAP      RMB     1       GET WRAP/NO WRAP FLAG
0019 0001       269: SC:GETCOLORING  RMB     1       GET CURRENT COLORING INFORMATION
001A 0001       270: SC:GETBACKGROUND RMB    1       GET BACKGROUND COLORING INFORMATION
001B 0001       271: SC:GETPROFILENAME RMB   1       GET NAME OF CURRENT PROFILE
                272: 
  002C          273:         ORG     SC:DEVICESPECIFICOP+$1C (DON'T ASK!!!)
002C 0001       274: SC:GETLINEFLAGS RMB     1       GET LINE FLAGS
                275: *
                276: *       DISK FILE SPECIFIC STATUS REQUESTS
                277: *
  0010          278:         ORG     SC:DEVICESPECIFICOP
0010 0001       279: SC:GETFILEDATE  RMB     1       READ BACK CREATION DATE OF FILE IN CLOCK FORMAT
0011 0001       280: SC:GETFILEPROT  RMB     1       READ BACK FILE PROTECTION BYTE
                281: *
                282: *       DISK DEVICE STATUS REQUESTS
                283: *
  0010          284:         ORG     SC:DEVICESPECIFICOP
0010 0001       285: SC:GETLASTBADLSN        RMB     1       READ BACK LSN THAT CAUSED DRIVER A PROBLEM
0011 0001       286: SC:GETERRORSTATS        RMB     1       GET DEVICE ERROR (HISTORY) STATISTICS
                287: *
                288: *       VIRTUAL TERMINAL SPECIFIC CONTROL OPERATIONS
                289: *
  0010          290:         ORG     CC:DEVICESPECIFICOP
0010 0001       291: CC:ECHO RMB     1       TURN ECHO ON
0011 0001       292: CC:NOECHO       RMB     1       TURN ECHO OFF
0012 0001       293: CC:IDLES        RMB     1       SET TTY IDLES
0013 0001       294: CC:TABS RMB     1       SET TTY TABS
0014 0001       295: CC:SETACTBLOCK  RMB     1       DECLARE ACTIVATION SET




ASM/6800 1.4A0: 0015 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 15; Form 1      *** SDOS 1.1 DEFINITIONS ***
SDOS11DEFS.ASM
0015 0001       296: CC:CLRINPUT     RMB     1       CLEAR INPUT BUFFER
0016 0001       297: CC:CLROUTPUT    RMB     1       CLEAR OUTPUT BUFFER
0017 0001       298: CC:SETREADTIMEOUT       RMB     1       SET TIMEOUT PERIOD FOR READA
0018 0001       299: CC:SETPROFILE   RMB     1       DECLARE DEVICE PROFILE
0019 0001       300: CC:ALTERPROFILE RMB     1       ALTER MALLEABLE DEVICE PROFILE
001A 0001       301: CC:WRITEEDITLINE        RMB     1       PUT LINE IN TYPE-AHEAD BUFFER
001B 0001       302: CC:SETFIELDSIZE RMB     1       DECLARE WIDTH OF INPUT FIELD
001C 0001       303: CC:SETPARAMS    RMB     1       DECLARE DEVICE WIDTH AND DEPTH
001D 0001       304: CC:ACTIVATIONCK RMB     1       CHECK FOR READA DATA READY
001E 0001       305: CC:WRAP RMB     1       ALLOW FORE- AND BACK-WRAP
001F 0001       306: CC:NOWRAP       RMB     1       DISALLOW FORE- AND BACK-WRAP
0020 0001       307: CC:COLORING     RMB     1       DECLARE AND SET FOREGROUND COLORING
0021 0001       308: CC:BACKGROUND   RMB     1       DECLARE AND SET BACKGROUND COLORING
0022 0001       309: CC:KILLPROOF    RMB     1       KILLPROOF VT DEVICE
0023 0001       310: CC:KILLENABLE   RMB     1       KILLENABLE VT DEVICE
0024 0001       311: CC:SETOUTPUTTIMEOUT RMB 1       SET OUTPUT TIMEOUT FOR DEVICE
0025 0001       312: CC:SETBAUDRATE  RMB     1       SET BAUD RATE FOR DEVICE
0026 0001       313: CC:SETINPUTTRANSLATION RMB 1    SET INPUT TRANSLATION
                314: *
                315: *       DISK FILE SPECIFIC CONTROL OPERATIONS
                316: *
  0010          317:         ORG     CC:DEVICESPECIFICOP
0010 0001       318: CC:SETFILEDATE  RMB     1       SET CREATION DATE OF FILE (USE CLOCK FORMAT)
0011 0001       319: CC:SETFILEPROT  RMB     1       SET FILE PROTECTION BYTE
0012 0001       320: CC:SETFILESIZE  RMB     1       SET SIZE OF FILE
0013 0001       321: CC:POSITIONTOEND        RMB     1       POSITION TO END OF FILE
                322: *
                323: *       DISK DEVICE SPECIFIC CONTROL OPS
                324: *
  0010          325:         ORG     CC:DEVICESPECIFICOP
0010 0001       326: CC:UNLOCKDISK   RMB     1       UNLOCK THE DISK DEVICE FOR WRITING
0011 0001       327: CC:DISMOUNTDISK RMB     1       DISMOUNT THE DISK
0012 0001       328: CC:SETMAPALGORITHM      RMB     1       SET MAP ALGORITHM NUMBER FOR DRIVE
0013 0001       329: CC:MULTISECTORREAD      RMB     1       READ MULTIPLE SECTORS
0014 0001       330: CC:MULTISECTORWRITE     RMB     1       WRITE MULTIPLE, ACCORDING TO SYSCALL EXTENSION
0015 0001       331: CC:FORMAT       RMB     1       FORMAT DISK
0016 0001       332: CC:WAITDONE     RMB     1       WAIT FOR CONTROLLER OPERATION COMPLETE




ASM/6800 1.4A0: 0016 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 16; Form 1      *** SDOS 1.1 DEFINITIONS ***
SDOS11DEFS.ASM
                334: *       RETURNED STATUS DISPLACEMENTS
                335: *
  0000          336:         ORG     0
0000 0004       337: STATUS:DIST     RMB     4       POSITION IN DISK FILE
                338: *
  0000          339:         ORG     0
0000 0001       340: STATUS:COLUMN   RMB     1       COLUMN NUMBER
                341: *
  0000          342:         ORG     0
0000 0001       343: STATUS:EOFFLAG  RMB     1       END OF FILE FLAG
                344: *
  0000          345:         ORG     0
0000 0001       346: STATUS:DEVTYPE  RMB     1       DEVICE TYPE DATA FOR DIRECTORIED DISK
                347: *
  0000          348:         ORG     0
0000 0002       349: STATUS:NBPS     RMB     2       NUMBER OF BYTES PER SECTOR
0002 0000       350: STATUS:NSPC     RMB     0       NUMBER OF SECTORS PER CLUSTER FOR DISK FILE
0002 0002       351: STATUS:NSPT     RMB     2       NUMBER OF SECTORS PER TRACK
0004 0002       352: STATUS:NTPC     RMB     2       NUMBER OF TRACKS PER CYLINDER
0006 0002       353: STATUS:NCYL     RMB     2       NUMBER OF CYLINDERS
                354: *
  0000          355:         ORG     0
0000 0004       356: STATUS:FILESIZE RMB     4       SIZE OF DISK FILE IN BYTES
                357: *
  0000          358:         ORG     0
0000 0003       359: STATUS:LASTBADLSN       RMB     3       LSN OF LAST BAD SECTOR ON DISK
                360: *
                361: *       SC:GETFILEDATE REPLY BUFFER
                362: *
  0000          363:         ORG     0
0000 0003       364: STATUS:DATETICKS        RMB     3       24 BITS OF TICKS SINCE MIDNITE
0003 0001       365: STATUS:DATEDAY  RMB     1       BCD VALUE OF DAY (1..31)
0004 0001       366: STATUS:DATEMONTH        RMB     1       BCD VALUE OF MONTH (1..12)
0005 0001       367: STATUS:DATEYEAR RMB     1       BCD VALUE OF YEAR MOD 100 (00.99)
                368: *
                369: *       SC:GETFILEPROT REPLY BUFFER
                370: *
  0000          371:         ORG     0
0000 0001       372: STATUS:PROT     RMB     1       PROTECTION BYTE FROM FILE




ASM/6800 1.4A0: 0000 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 17; Form 1      *** SDOS 1.1 DEFINITIONS ***
SDOS11DEFS.ASM
                374: *       SC:GETERRORSTATS REPLY BUFFER
                375: *
  0000          376:         ORG     0
0000 0002       377: STATUS:SEEKERRCNT       RMB     2       # SEEK ERRORS SINCE MOUNT
0002 0002       378: STATUS:SEEKERRSTS       RMB     2       16 BITS OF LAST "SEEK" STATUS IN ERROR
0004 0002       379: STATUS:WRITEERRCNT      RMB     2       # WRITE ERRORS SINCE MOUNT
0006 0002       380: STATUS:WRITEERRSTS      RMB     2       16 BITS OF LAST "WRITE" STATUS IN ERROR
0008 0002       381: STATUS:READERRCNT       RMB     2       # READ ERRORS SINCE MOUNT
000A 0002       382: STATUS:READERRSTS       RMB     2       16 BITS OF LAST "READ" STATUS IN ERROR
000C 0003       383: STATUS:OPSCOUNT RMB     3       24 BITS OF # DRIVER OPERATIONS SINCE MOUNT
000F 0003       384: STATUS:ERRLSN   RMB     LSN:SIZE        LSN CAUSING ANY SOFT OR HARD ERROR




ASM/6800 1.4A0: 000F SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 18; Form 1      *** SDOS 1.1 DEFINITIONS ***
SDOS11DEFS.ASM
                386: *       CC:POSITION WRITE BUFFER
                387: *
  0000          388:         ORG     0
0000 0004       389: CONTROL:DIST    RMB     4       VALUE OF POSITIONING COMMANDS
                390: *
                391: *       CC:SETFILEDATE WRITE BUFFER
                392: *
  0000          393:         ORG     0
0000 0003       394: CONTROL:DATETICKS       RMB     3       24 BITS OF TICKS SINCE MIDNITE
0003 0001       395: CONTROL:DATEDAY RMB     1       BCD VALUE OF DAY (1..31)
0004 0001       396: CONTROL:DATEMONTH       RMB     1       BCD VALUE OF MONTH (1..12)
0005 0001       397: CONTROL:DATEYEAR        RMB     1       BCD VALUE OF YEAR MOD 100 (00..99)
                398: *
                399: *       CC:SETFILEPROT WRITE BUFFER
                400: *
  0000          401:         ORG     0
0000 0001       402: CONTROL:PROT    RMB     1       PROTECTION BYTE FOR FILE
                403: *
                404: *       CC:SETMAPALGORITHM WRITE BUFFER
                405: *
  0000          406:         ORG     0
0000 0002       407: CONTROL:MAPALGORITHM    RMB     2       PARAMETER BLOCK FOR SET MAP ALGORITHM CALL
                408: *
                409: *       JOB CONTROL SUB-CODES
                410: *
  0000          411:         ORG     0
0000 0001       412: JC:CREATE       RMB     1       CREATE A NEW JOB
0001 0001       413: JC:TESTDONE     RMB     1       TEST TO SEE IF A JOB IS DONE
0002 0001       414: JC:DESTROY      RMB     1       DESTROY A JOB




ASM/6800 1.4A0: 0002 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 19; Form 1      *** SDOS 1.1 DEFINITIONS ***
SDOS11DEFS.ASM
                416: *
                417: *       SYSTEM-DEFINED ERROR CODES
                418: *
  0000          419:         ORG     0
0000 0001       420: ERR:NONE        RMB     1       CODE 0 --> NO ERROR
0001 0001       421: ERR:ATTENTION   RMB     1       OPERATOR REQUESTED ATTENTION
                422: 
  0064          423:         ORG     100
0064 0001       424: ERR:FATALCOMPILE        RMB     1       COMPILATION OR ASSEMBLY HAD FATAL ERRORS
0065 0001       425: ERR:WARNINGCOMPILE      RMB     1       COMPILATION OR ASSEMBLY HAD NON-FATAL ERRORS
0066 0001       426: ERR:BADCMDFORMAT        RMB     1       BAD COMMAND FORMAT (SYNTAX ERROR!)
0067 0001       427: ERR:CANTGOTO    RMB     1       CAN'T DO GOTO FROM CONSOLE:
0068 0001       428: ERR:ABNORMALSTOP        RMB     1       PROGRAM TERMINATED ABNORMALLY
0069 0001       429: ERR:NOTENUFMEM  RMB     1       NOT ENOUGH MEMORY TO EXECUTE COMMAND
                430: *
                431: *       SDOS ERROR CODES
                432: *
                433: *
                434: *       ERROR CODES FOR SDOS ARE RESERVED BETWEEN 1000-1999
                435: *
  03E8          436:         ORG     1000
03E8 0001       437: ERR:BOOTCKSUMFAIL       RMB     1       BOOT SECTOR DISKINFO CHECK SUM FAILED
03E9 0001       438: ERR:EOFHIT      RMB     1       END OF FILE HIT
03EA 0001       439: ERR:FILEISOPEN  RMB     1       A FILE IS OPEN DURING DISMOUNT REQUEST
03EB 0001       440: ERR:NODEBUGGER  RMB     1       NO DEBUGGER TO CALL!
03EC 0001       441: ERR:BADPOSITION RMB     1       BAD POSITIONING REQUEST
03ED 0001       442: ERR:NBPCTOOBIG  RMB     1       NUMBER OF BYTES PER CLUSTER >= 65536
03EE 0001       443: ERR:NODISKMAP   RMB     1       NO DISK MAP, CAN'T ALLOC OR FREE
03EF 0001       444: ERR:NOMATCHFCB  RMB     1       NO MATCHING FILE CONTROL BLOCK FOUND
03F0 0001       445: ERR:NODEFAULTPROGRAM    RMB     1       NO "DEFAULTPROGRAM" ON THIS DISK
03F1 0001       446:         RMB     1       **** UNUSED ****
03F2 0001       447: ERR:FILEWRTPROT RMB     1       FILE IS WRITE PROTECTED
03F3 0001       448: ERR:FILENOTFOUND        RMB     1       FILE NOT FOUND
03F4 0001       449: ERR:ILLEGALLCN  RMB     1       LCN OUT OF RANGE
03F5 0001       450: ERR:BADFNAMESIZE        RMB     1       LENGTH OF FILE NAME > 16 CHARACTERS
03F6 0001       451: ERR:NEWFILEEXISTS       RMB     1       NEW FILE ALREADY EXISTS!
03F7 0001       452: ERR:NODISKSPACE RMB     1       DISK SPACE EXHAUSTED
03F8 0001       453: ERR:LCNWASNTALLOCATED   RMB     1       LCN ENCOUNTERED BY FREECLUSTERS WASN'T ALLOCAT
03F9 0001       454: ERR:NOFREEFCBS  RMB     1       RAN OUT OF FCBS (*SYSTEM*)
03FA 0001       455: ERR:WRONGFILESYSTEM     RMB     1       FILE SYSTEM INCOMPATIBLE WITH THIS VERSION OF 




ASM/6800 1.4A0: 03FB SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 20; Form 1      *** SDOS 1.1 DEFINITIONS ***
SDOS11DEFS.ASM
03FB 0001       456: ERR:FILEINCREATE        RMB     1       FILE IS BEING CREATED
03FC 0001       457: ERR:DISKMOUNTED RMB     1       DISK IS MOUNTED, CAN'T CHANGE MAPALGORITHM
03FD 0001       458: ERR:CANTOPENMUSTCREATE  RMB     1       MUST CREATE TO OPEN OUTPUT ONLY DEVICE
03FE 0001       459: ERR:NOERRORMSGS RMB     1       NO $ERRORMESSAGES FILE ON DRIVE 0
03FF 0001       460: ERR:BADFILENAME RMB     1       FILENAME DOESN'T START WITH A-Z OR $
0400 0001       461: ERR:ILLFILESIZE RMB     1       ILLEGAL FILE SIZE SPECIFICATION (SYNTAX OR OVFLOW)
0401 0001       462: ERR:HCSICTOOSMALL       RMB     1       HEADER CLUSTER NOT INITZED FOR RDCN FETCH
0402 0001       463: ERR:NOTENOUGHPOOL       RMB     1       NOT ENOUGH DISKBUFFER POOL (*SYSTEM*)
0403 0001       464: ERR:PWRFAILDISKF        RMB     1       DISK FILE HANDLERS DON'T IMPLEMENT POWER FAIL
0404 0001       465: ERR:NOTALOADFILE        RMB     1       CAN'T LOAD THAT - WRONG FORMAT
0405 0001       466: ERR:BADFILEVERSION      RMB     1       FILE VERSION NUMBER HAS NO DIGITS OR IS >255!
0406 0001       467: ERR:CHTOOBIG    RMB     1       CHANNEL # IS TOO BIG
0407 0001       468: ERR:CHBUSY      RMB     1       CHANNEL IS ALREADY OPEN
0408 0001       469: ERR:CLOSED      RMB     1       CHANNEL IS ALREADY CLOSED
0409 0001       470: ERR:ILLEGALSYSCALL      RMB     1       ILLEGAL SYSCALL #
040A 0001       471: ERR:ILLDEVICEOP RMB     1       ILLEGAL DEVICE OPERATION
040B 0001       472: ERR:RENAMEDEVICE        RMB     1       CAN'T RENAME TO DIFFERENT DEVICE
040C 0001       473: ERR:BADLOADRECORD       RMB     1       LOAD RECORD FORMAT ERROR
040D 0001       474: ERR:NOTENOUGHROOM       RMB     1       PROGRAM TOO BIG TO LOAD
040E 0001       475: ERR:ILLLSN      RMB     1       ILLEGAL LSN PASSED TO PHYSICAL DISK DRIVERS
040F 0001       476: ERR:DIRECTORYDAMAGED    RMB     1       DIRECTORY.SYS DIRECTORY ENTRY IS DAMAGED
0410 0001       477: ERR:IBUFOVERFLOW        RMB     1       INPUT BUFFER OVERFLOW IN THE DRIVERS
0411 0001       478: ERR:PROGRAMKILLED       RMB     1       PROGRAM KILLED BY OPERATOR
0412 0001       479: ERR:DEVICETIMEDOUT      RMB     1       DEVICE TIMED OUT
0413 0001       480: ERR:SECTORSIZE2 RMB     1       SECTORSIZE IS NOT A POWER OF 2!
0414 0001       481: ERR:SYSTEMCROAKED       RMB     1       ...WHILE DOING AN EXIT OR CHAIN (*SYSTEM*)
0415 0001       482: ERR:DISKREAD    RMB     1       DISK READ ERROR
0416 0001       483: ERR:DISKWRITE   RMB     1       DISK WRITE ERROR
0417 0001       484: ERR:DISKSEEK    RMB     1       DISK SEEK ERROR
0418 0001       485: ERR:DSKWRTPROT  RMB     1       DISK IS WRITE PROTECTED
0419 0001       486: ERR:DISKWRITELOCKED     RMB     1       DISK DEVICE IS SOFTWARE WRITE LOCKED
041A 0001       487: ERR:SDOSCKSUM   RMB     1       SDOS GOT A KNIFE IN THE RIBS!
041B 0001       488: ERR:NLSNGE224   RMB     1       NLSN >= 2^24, ILLEGAL
041C 0001       489: ERR:CLUSTERSIZELIMITSFILE       RMB     1       CLUSTER SIZE IS TOO SMALL TO SUPPORT A
041D 0001       490: ERR:SYSCALLTOOSHORT     RMB     1       SYSCALL BLOCK IS TOO SMALL FOR SPECIFIED SYSCA
041E 0001       491: ERR:RDBUFTOOSMALL       RMB     1       READ BUFFER SPECIFIED BY SYSCALL IS TOO SHORT 
041F 0001       492: ERR:WRBUFTOOSMALL       RMB     1       WRITE BUFFER SPECIFIED BY SYSCALL IS TOO SHORT
0420 0001       493: ERR:NOSUCHDEVICE        RMB     1       NO SUCH DEVICE IN THIS CONFIGURATION
0421 0001       494: ERR:DEVICEERRORED       RMB     1       DEVICE HARDWARE DID NOT RESPOND REASONABLY
0422 0001       495: ERR:MUSTBEDISK  RMB     1       MUST SELECT DISK DEVICE




ASM/6800 1.4A0: 0423 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 21; Form 1      *** SDOS 1.1 DEFINITIONS ***
SDOS11DEFS.ASM
0423 0001       496: ERR:NOTOPENTOCONSOLE    RMB     1       CHANNEL 0 IS NOT OPEN TO CONSOLE DEVICE
0424 0001       497: ERR:DEVICENOTREADY      RMB     1       DEVICE IS NOT READY
0425 0001       498: ERR:TIMENOTSET  RMB     1       TIME NOT SET TO NON-ZERO DAY/MONTH!
0426 0001       499: ERR:NOSUCHLUN   RMB     1       NO SUCH LOGICAL UNIT NUMBER
0427 0001       500: ERR:ZEROSTARTADDRESS    RMB     1       OBJECT FILE HAS NO (ZERO) START ADDRESS
0428 0001       501: ERR:NOSUCHPROGRAM       RMB     1       NO SUCH PROGRAM EXISTS (ERROR ISSUED BY LOADER
0429 0001       502: ERR:OLDFILEEXISTS       RMB     1       OLD FILE BY SAME NAME ALREADY EXISTS
042A 0001       503:         RMB     1       *** UNUSED ***
042B 0001       504: ERR:ALLOC0CLUSTERS      RMB     1       "ALLOC" CALL WITH REQUEST FOR 0 CLUSTERS!
042C 0001       505: ERR:FILEALREADYDELETED  RMB     1       FILE WAS DELETED BUT NOT CLOSED BEFORE RENAME 
042D 0001       506: ERR:PRINTERNOTREADY     RMB     1       PRINTER IS NOT READY
042E 0001       507: ERR:INPUTTIMEOUT        RMB     1       INPUT TIMED OUT, ABORTED
042F 0001       508: ERR:ENDOFMEDIUM RMB     1       END OF MEDIUM ON DEVICE
0430 0001       509: ERR:SELFTESTCKSUM       RMB     1       PROGRAM SELF-TEST CHECKSUM FAILED
0431 0001       510: ERR:NOTIMEOUTBLKS       RMB     1       ZERO TIME OUT BLOCKS IN I/O PKG NOT LEGAL
0432 0001       511: ERR:SERIALNOWRONG       RMB     1       THIS CPU HAS WRONG SERIAL NUMBER TO RUN PROGRA
0433 0001       512: ERR:NOSUCHKEY   RMB     1       NO SUCH KEY EXISTS IN INDEX
0434 0001       513: ERR:DUPLICATEKEY        RMB     1       KEY ALREADY EXISTS IN INDEX
0435 0001       514: ERR:BRANCHFACTORSIZE    RMB     1       KEY BRANCHING FACTOR IS TOO SMALL
0436 0001       515: ERR:SDOSNOTREGISTERED   RMB     1       THIS COPY OF SDOS NOT REGISTERED WITH SD YET
0437 0001       516: ERR:DECRYPTIONKEYSDONTMATCH     RMB     1       LAST FILE LOADED HAS DIFFERENT DECRYPT
                517: *
  076E          518: ERR:WRONGDISKTYPE       EQU     1902    WRONG DISK TECHNOLOGY (DENSITY, SIDES, ETC.)
                519: *
                520: *       VIRTUAL TERMINAL DRIVER ERROR CODES
                521: *
  0771          522:         ORG     1905
0771 0001       523: ERR:IOINPROGRESS        RMB     1       LAST REQUEST HAS NOT COMPLETED
0772 0001       524: ERR:BUSYFORANOTHERPROCESS       RMB     1       DCB OPEN TO ANOTHER PROCESS
0773 0001       525: ERR:ACTIVATIONNOTINBUFFER       RMB     1       RDBUF DOES NOT HOLD ACTIVATION
0774 0001       526: ERR:BADFIELDWIDTH       RMB     1       CRT SCREEN FEILD SPECIFICATION IS TOO WIDE
0775 0001       527: ERR:ACTIVATIONRECEIVED  RMB     1       ACTIV. REC'D PER CC:ACTIVATIONCK
0776 0001       528: ERR:TIMEDINPUTEXPIRED   RMB     1       TIMED INPUT PERIOD EXPIRED
0777 0001       529: ERR:PROFILENOTFOUND     RMB     1       DEVICE PROFILE NOT FOUND
0778 0001       530: ERR:PROFILENOTMALLEABLE RMB     1       DEVICE PROFILE NOT MALLEABLE
0779 0001       531:         RMB     1       *** RESERVED ***
                532: *
  04B0          533:         ORG     1200    SDOS/MT ERROR CODES
04B0 0001       534: ERR:BADREADBUF  RMB     1       SYSCALL REPLY BUFFER NOT WITHIN USER SPACE
04B1 0001       535: ERR:BADWRITEBUF RMB     1       SYSCALL WRITE BUFFER NOT WITHIN USER SPACE




ASM/6800 1.4A0: 04B2 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 22; Form 1      *** SDOS 1.1 DEFINITIONS ***
SDOS11DEFS.ASM
04B2 0001       536: ERR:RDBUFTOOBIG RMB     1       SYSCALL REPLY BUFFER > 255 BYTES
04B3 0001       537: ERR:WRBUFTOOBIG RMB     1       SYSCALL WRITE BUFFER > 255 BYTES
04B4 0001       538: ERR:NOTENOUGHCHANNELS   RMB     1       AVAILABLE I/O CHANNELS EXHAUSTED
04B5 0001       539: ERR:NOTUNDERTIMESHARE   RMB     1       FUNCTION NOT AVAILABLE UNDER SDOS/MT
04B6 0001       540: ERR:MTNOROOM    RMB     1       NOT ENOUGH ROOM TO RUN SDOS/MT
04B7 0001       541: ERR:MTBADCONFIG RMB     1       INCORRECT CONFIGURATION FOR SDOS/MT
04B8 0001       542: ERR:ALREADYLOCKED       RMB     1       INTERLOCK OBJECT IS ALREADY LOCKED
04B9 0001       543: ERR:NOSUCHOBJECT        RMB     1       BAD CAPABILITY GIVEN
04BA 0001       544: ERR:NOTLOCKED   RMB     1       INTERLOCK OBJECT IS NOT LOCKED
04BB 0001       545: ERR:OBJECTDESTROYED     RMB     1       INTERLOCK OBJECT DESTROYED WHILE WAITING FOR I
04BC 0001       546: ERR:LOCKRESET   RMB     1       INTERLOCK OBJECT WAS RESET WHILE WAITING FOR IT
04BD 0001       547: ERR:IMPLEMENTATIONLIMITREACHED  RMB     1       CAN'T HANDLE MORE INTERLOCK OBJECTS NO
04BE 0001       548: ERR:ILLEGALINTERLOCKFUNCTION    RMB     1       ILLEGAL INTERLOCK FUNCTION REQUESTED
04BF 0001       549: ERR:MEMORYMGMTFAIL      RMB     1       SDOS/MT INTERNAL MEMORY MANAGEMENT FAILURE
04C0 0001       550: ERR:NOMOREJOBS  RMB     1       ALL AVAILABLE JOBS ARE BUSY NOW
04C1 0001       551: ERR:ILLEGALJOBCONTROL   RMB     1       ILLEGAL JOB CONTROL REQUEST
04C2 0001       552: ERR:CAPABILITYFAILURE   RMB     1       CAPABILITY DOES NOT HAVE RIGHTS TO PERFORM OPE
04C3 0001       553: ERR:JOBKILLED   RMB     1       THIS JOB HAS BEEN KILLED BY ANOTHER
04C4 0001       554: ERR:JOBCOMPLETED        RMB     1       JOB SUCCESSFULLY COMPLETED 




ASM/6800 1.4A0: 04C4 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 23; Form 2      *** SDOS 1.1 DEFINITIONS ***
SDOS11DEFS.ASM
                  1: *       DEVICE TYPE DEFINITIONS 
                  2: *
  0000            3:         ORG     0
0000 0001         4: DVTYP.FILE      RMB     1       FILE (MANAGED BY SDOS)
0001 0001         5: DVTYP.DISK      RMB     1       DISK DEVICE (MANAGED BY SDOS)
0002 0001         6: DVTYP.STAPE     RMB     1       SERIAL TAPE DEVICE
0003 0001         7: DVTYP.DTAPE     RMB     1       DIRECTORIED TAPE DEVICE
0004 0001         8: DVTYP.CONSOLE   RMB     1       CONSOLE (HUMAN'S INTERFACE)
0005 0001         9: DVTYP.PRINTER   RMB     1       LINE PRINTER DEVICE
0006 0001        10: DVTYP.SERIALOUT RMB     1       ILL-DEFINED
0007 0001        11: DVTYP.SERIALIN  RMB     1
0008 0001        12: DVTYP.PAROUT    RMB     1       PARALLEL OUT
0009 0001        13: DVTYP.PARIN     RMB     1       PARALLEL IN
000A 0001        14: DVTYP.DUMMY     RMB     1       BLACK HOLE FOR DATA BYTES
000B 0001        15: DVTYP.CLOCK     RMB     1       CLOCK DEVICE
                 16: *
                 17: *
                 18: *
                 19: *
                 20: *       DEVICE TYPE DATA DISPLACEMENTS
                 21: *
  0000           22:         ORG     0
0000 0001        23: DVTYP:TYPE      RMB     1       DEVICE TYPE
                 24: *
                 25: *       DEVICE-TYPE SPECIFIC DATA
                 26: *
  0000           27:         ORG     0       DISK DEVICE SPECIFIC DATA
0000 0002        28: DVDAT:NBPS      RMB     2       NUMBER OF BYTES PER SECTOR
0002 0002        29: DVDAT:NSPT      RMB     2       NUMBER OF SECTORS PER TRACK
0004 0002        30: DVDAT:NTPC      RMB     2       NUMBER OF TRACKS PER CYLINDER
0006 0002        31: DVDAT:NCYL      RMB     2       NUMBER OF CYLINDERS
                 32: *
  0000           33:         ORG     0       CONSOLE/PRINTER DEVICE SPECIFIC DATA
0000 0001        34: DVDAT:WIDTH     RMB     1       LINE WIDTH IN CHARACTERS
0001 0001        35: DVDAT:DEPTH     RMB     1       PAGE DEPTH (DEFAULT DEPTH FOR PRINTERS)
                 36: *                               (0=INFINITY)
                 37: *
  0002           38:         ORG     DVDAT:NBPS+2    (DISK) FILE DEVICE SPECIFIC DATA
0002 0001        39: DVDAT:NSPC      RMB     1       NUMBER OF SECTORS PER CLUSTER




ASM/6800 1.4A0: 0002 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 24; Form 2      *** SDOS 1.1 DEFINITIONS ***
SDOS11DEFS.ASM
                 41: **********************************************************************
  0010           42: FILESYSTEMVERSION       EQU     $10     VERSION 1.0 OF FILESYSTEM FORMAT
                 43: ********************************************************************
                 44: *
                 45: *       FUNNY VALUES TO MAKE DATA STORAGE ALLOCATION USES MORE CLEAR
                 46: *
  0000           47: IGNORED EQU     0       SO I CAN MARK PLACES AS IGNORED
  0000           48: CHANGED EQU     0       SO I CAN MARK PLACES AS CHANGED
                 49: *
                 50: *       LOCATIONS 0-7 ARE TREATED AS PART OF TASK'S CONTEXT
                 51: *       AND SAVED DURING A CONTEXT SWITCH
                 52: *
                 53: *       DEFINED TEMPORARIES
                 54: *       USED TO PUSH (X) ONTO STACK IN INTERRUPTABLE WAY
                 55: *       FOR USE BY TASK-LEVEL SUBROUTINES
                 56: *
  0001           57:         IFUND   SCRATCHPAD
  0000           58:         ORG     $0
0000 0002        59: TEMPX   RMB     2       ANY SUBROUTINE MAY STEP ON THIS!!!
  0000           60: TEMP    EQU     TEMPX   FOR CONVENIENCE
  0000           61: TEMPA   EQU     TEMPX   TEMP STORAGE FOR A REGISTER
  0001           62: TEMPB   EQU     TEMPX+1 TEMP STORAGE FOR B REGISTER
                 63:         FIN     SCRATCHPAD
                 64: *
                 65: *       PROTECTION BITS FOR DIR:PROTECTION
                 66: *
  0040           67: PROT::WRITE     EQU     $40     PROTECT AGAINST WRITES
  0001           68: PROT::BACKUP    EQU     $1      PROTECT AGAINST BACKING UP




ASM/6800 1.4A0: 0000 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 25; Form 2      *** SDOS 1.1 DEFINITIONS ***
SDOS11DEFS.ASM
                 70: *       ASCII CHARACTER SET
                 71: *
  0000           72: ASCII:NULL      EQU     0       ^@ NULL
  0001           73: ASCII:SOH       EQU     1       ^A START OF HEADING
  0002           74: ASCII:STX       EQU     2       ^B START OF TEXT
  0003           75: ASCII:ETX       EQU     3       ^C END OF TEXT
  0004           76: ASCII:EOT       EQU     4       ^D END OF TRANSMISSION
  0005           77: ASCII:ENQ       EQU     5       ^E ENQUIRY (WRU- WHO ARE YOU)
  0006           78: ASCII:ACK       EQU     6       ^F ACKNOWLEDGE
  0007           79: ASCII:BEL       EQU     7       ^G BELL
  0008           80: ASCII:BS        EQU     8       ^H BACKSPACE
  0009           81: ASCII:HT        EQU     9       ^I HORIZONTAL TAB
  000A           82: ASCII:LF        EQU     $A      ^J LINE FEED
  000B           83: ASCII:VT        EQU     $B      ^K VERTICAL TAB
  000C           84: ASCII:FF        EQU     $C      ^L FORM FEED
  000D           85: ASCII:CR        EQU     $D      ^M CARRIAGE RETURN
  000E           86: ASCII:SO        EQU     $E      ^N SHIFT OUT
  000F           87: ASCII:SI        EQU     $F      ^O SHIFT IN
  0010           88: ASCII:DLE       EQU     $10     ^P DATA LINK ESCAPE
  0011           89: ASCII:DC1       EQU     $11     ^Q DEVICE CONTROL 1
  0012           90: ASCII:DC2       EQU     $12     ^R DEVICE CONTROL 2
  0013           91: ASCII:DC3       EQU     $13     ^S DEVICE CONTROL 3
  0014           92: ASCII:DC4       EQU     $14     ^T DEVICE CONTROL 4
  0015           93: ASCII:NAK       EQU     $15     ^U NEGATIVE ACKNOWLEDGE
  0016           94: ASCII:SYN       EQU     $16     ^V SYNCHRONOUS IDLE
  0017           95: ASCII:ETB       EQU     $17     ^W END OF TRANSMISSION BLOCK
  0018           96: ASCII:CAN       EQU     $18     ^X CANCEL
  0019           97: ASCII:EM        EQU     $19     ^Y END OF MEDIUM
  001A           98: ASCII:SUB       EQU     $1A     ^Z SUBSTITUTE
  001B           99: ASCII:ESC       EQU     $1B     ^[ ESCAPE
  001C          100: ASCII:FS        EQU     $1C     ^\ FILE SEPERATOR
  001D          101: ASCII:GS        EQU     $1D     ^] GROUP SEPERATOR
  001E          102: ASCII:RS        EQU     $1E     ^^ RECORD SEPERATOR
  001F          103: ASCII:US        EQU     $1F     ^_ UNIT SEPERATOR
  0020          104: ASCII:SPACE     EQU     $20     SPACE (WORD SEPERATOR)
  007F          105: ASCII:RUBOUT    EQU     $7F     DELETE (RUBOUT)
  007F          106: ASCII:MASK      EQU     $7F     TO MASK OFF ALL BUT 7 LEGAL ASCII BITS




ASM/6800 1.4A0: 0000 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 26; Form 3      *** SDOS 1.1 DEFINITIONS ***
SDOS11DEFS.ASM
  0001            2:         IF      SYSTEMDEFS!IOPKDEFS
                  3: *       THIS BEGINS START OF DEFINITIONS REQUIRED FOR I/O PACKAGES
                  4: *
                  5: *       SDOS ENTRY POINTS
                  6: *
  0000            7:         ORG     0
0000 0001         8: SDOS:VERSIONNUMBER      RMB     1       VERSION NUMBER BYTE ($AB = VERSION A.B)
0001 0002         9: SDOS:LASTERROR  RMB     2       MOST RECENT ERROR ENCOUNTERED BY SDOS
0003 0002        10: SDOS:CONFIGURATION      RMB     2       POINTER TO CONFIGURATION TABLE (SUPPLIED BY  I
0005 0002        11: SDOS:SERIALNUMBER       RMB     2       SERIAL NUMBER ASSIGNED TO THIS COPY
0007 0002        12: SDOS:IOBLOCKPTR RMB     2       POINTER TO I/O REQUEST (PASSED TO DRIVERS)
0009 0002        13: SDOS:IOCBPOINTER        RMB     2       POINTER TO IOCB FOR THIS CHANNEL
000B 0003        14: SDOS:CLOCK      RMB     3       TIME OF DAY IN 1/60 SEC UNITS (0..5,183,999)
000E 0001        15: SDOS:DAY        RMB     1       DAY NUMBER IN MONTH (1..31) BCD
000F 0001        16: SDOS:MONTH      RMB     1       MONTH OF YEAR (1..12) BCD
0010 0001        17: SDOS:YEAR       RMB     1       YEAR MODULO 100 (78..99) BCD
0011 0001        18: SDOS:STACKSWITCHED      RMB     1       "SWITCHED TO INTERRUPT STACK" COUNTER
0012 0003        19: SDOS:IOINT      RMB     3       I/O INTERRUPT GOES HERE FIRST!
0015 0003        20: SDOS:RTI        RMB     3       JMP TO "RETURN FROM INTERRUPT; NO EVENT"
0018 0003        21: SDOS:RESCHEDULE RMB     3       JMP TO "RETURN FROM INTERRUPT; PLEASE RESCHEDULE"
001B 0003        22: SDOS:CLOCKTICKED        RMB     3       JMP TO "CLOCKTICKED" WITH (A) = # TICKS
001E 0002        23: SDOS:CURRENTASK RMB     2       POINTER TO TCB OF CURRENTLY ACTIVE TASK
0020 0001        24: SDOS:KILLPROOF  RMB     1       0 --> USER TASK IS KILLABLE
0021 0003        25: SDOS:KILLUSERPROGRAM    RMB     3       JMP TO "KILL USER PROGRAM" ROUTINE
0024 0003        26: SDOS:STARTIO    RMB     3       JMP TO START I/O ROUTINE (X POINTS TO INTERRUPT ROUTIN
0027 0003        27: SDOS:WAITCOND   RMB     3       JMP TO WAIT FOR CONDITION IN (A,B)
002A 0003        28: SDOS:WAITEVENT  RMB     3       JMP TO WAIT FOR EVENT SELECTED BY (X)
002D 0003        29: SDOS:ERROR      RMB     3       ERROR SUBROUTINE; INLINE 2 BYTE ERROR CODE
0030 0003        30: SDOS:ERRORSAVE  RMB     3       ERROR CODE SAVE ROUTINE; SAVES (X) AS ERROR CODE
0033 0003        31: SDOS:ERRORED    RMB     3       "ERROR CAN'T BE HANDLED BY ME" ENTRY
0036 0003        32: SDOS:CHECKRDLEN RMB     3       CHECK READ LENGTH SUBROUTINE ENTRY POINT
0039 0003        33: SDOS:CHECKWRLEN RMB     3       CHECK WRITE LENGTH SUBROUTINE ENTRY POINT
003C 0003        34: SDOS:CHECKSCLEN RMB     3       CHECK SYSCALL BLOCK LENGTH SUBROUTINE ENTRY POINT
003F 0003        35: SDOS:TABLEBRANCH        RMB     3       TABLE BRANCH ROUTINE FOR SYSCALL DECODING
0042 0003        36: SDOS:BLOCKMOVE  RMB     3       "HOT DOG" BLOCK MOVE ENTRY POINT
0045 0003        37: SDOS:GETRUNNINGENCRYPTED        RMB     3       GET ADDRESS OF RUNNING ENCRYPTED BYTE 
  0048           38: SDOS:ENTRYSIZE  EQU     *




ASM/6800 1.4A0: 0045 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 27; Form 3      *** SDOS 1.1 DEFINITIONS ***
SDOS11DEFS.ASM
                 40: *
                 41: *       SDOS CONFIGURATION TABLE
                 42: *
  0000           43:         ORG     0
0000 0002        44: CNFG:DISKDCBS   RMB     2       POINTER TO DISK DEVICE CONTROL BLOCKS
0002 0002        45: CNFG:DEVICEDCBS RMB     2       POINTER TO LIST OF NON-DISK DEVICE CONTROL BLOCKS
0004 0002        46: CNFG:IOCBPOINTERS       RMB     2       POINTER LIST TO IOCB'S
0006 0001        47: CNFG:NIOCHANNELS        RMB     1       NUMBER OF I/O CHANNELS
0007 0002        48: CNFG:DSKBUFFERPOOL      RMB     2       POINTER TO THE DISK BUFFER POOL
0009 0002        49: CNFG:DSKPOOLSIZE        RMB     2       SIZE OF THE BUFFER POOL
000B 0002        50: CNFG:ATTNCHECK  RMB     2       ADDRESS OF ATTENTION CHECK ROUTINE
000D 0002        51: CNFG:DEBUGGER   RMB     2       = ADDRESS OF DEBUGGER (0 IF NONE)
000F 0002        52: CNFG:DRIVERBASE RMB     2       LOWEST ADDRESS USED BY DRIVERS
0011 0002        53: CNFG:INTSETUP   RMB     2       POINTER TO INTERRUPT SYSTEM SETUP ROUTINE
0013 0003        54: CNFG:INTDISABLE RMB     3       SUBROUTINE (OR "JMP") TO DISABLE ALL INTERRUPTS
0016 0003        55: CNFG:INTENABLE  RMB     3       SUBROUTINE (OR "JMP") TO ENABLE ALL INTERRUPTS
0019 0003        56: CNFG:INTRTI     RMB     3       CODE TO ENABLE PRIORITY INTERRUPT AND DO RTI (USUALLY 
001C 0002        57: CNFG:INTERRUPTSTACK     RMB     2       POINTER TO LAST BYTE OF INTERRUPT STACK SPACE
                 58: *                       (USED BY AN "LDS" INSTRUCTION)
001E 0002        59: CNFG:IOINTPOLL  RMB     2       POINTER TO I/O INTERRUPT SERVICE DEVICE POLL ROUTINE
0020 0002        60: CNFG:TASKQUEUE  RMB     2       POINTER TO FIRST TASK IN TASK QUEUE
0022 0002        61: CNFG:TIMEOUTLIST        RMB     2       POINTER TO CHAINED LIST OF TIMEOUT BLOCKS
0024 0002        62: CNFG:VTPROFILES RMB     2       POINTS TO FIRST PROFILE BLOCK IN CHAIN
0026 0002        63: CNFG:VTDEBUG    RMB     2       INTERRUPT LEVEL ENTRY POINT TO DEBUGGER
0028 0002        64: CNFG:MTPRIMS    RMB     2       POINTS TO /MT,/ES PRIMITIVES TABLE
002A 0002        65: CNFG:BOOTDEFAULTDISKDCB RMB     2       POINTS TO DCB TO USE FOR DEFAULTDISK AT BOOT T
002C 0002        66: CNFG:BOOTCONSOLEDCB     RMB     2       POINTS TO DCB TO USE FOR "CONSOLE:" AT BOOT TI
002E 0002        67: CNFG:RETURNELAPSEDMILLISECONDS  RMB     2       RETURNS ELAPSED TIME IN MILLISECONDS S
0030 0002        68: CNFG:SETCLOCKINTERVALMILLISECONDS       RMB     2       CAUSE CALL TO SDOS:MSTICK
                 69: *       VIA INTERRUPT AFTER DELAY SPECIFIED IN MILLISECONDS




ASM/6800 1.4A0: 0030 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 28; Form 3      *** SDOS 1.1 DEFINITIONS ***
SDOS11DEFS.ASM
                 71: *
                 72: *       DEVICE DRIVER ROUTINE ENTRY POINTS
                 73: *
  0000           74:         ORG     0
0000 0002        75: DRIVER:OPEN     RMB     2       OPEN FILE
0002 0002        76: DRIVER:CLOSE    RMB     2       CLOSE FILE
0004 0002        77: DRIVER:READA    RMB     2       READ ASCII
0006 0002        78: DRIVER:WRITEA   RMB     2       WRITE ASCII
0008 0002        79: DRIVER:READB    RMB     2       READ BINARY
000A 0002        80: DRIVER:WRITEB   RMB     2       WRITE BINARY
000C 0002        81: DRIVER:CREATE   RMB     2       CREATE FILE
000E 0002        82: DRIVER:RENAME   RMB     2       RENAME FILE
0010 0002        83: DRIVER:DELETE   RMB     2       DELETE FILE
0012 0002        84: DRIVER:CONTROL  RMB     2       DO CONTROL OPERATION
0014 0002        85: DRIVER:STATUS   RMB     2       READ DEVICE (DRIVER) STATUS
0016 0002        86: DRIVER:RESET    RMB     2       RESET DRIVER (ON BOOT)
0018 0002        87: DRIVER:STARTIO  RMB     2       POINTER TO START I/O ENTRY OF INTERRUPT CODE
001A 0002        88: DRIVER:PFRESTART        RMB     2       POWER FAIL RESTART
                 89: *
                 90: *       DISK SECTOR I/O DRIVER ROUTINE ENTRY POINTS
                 91: *
  0000           92:         ORG     0
0000 0002        93: DRIVER:DISKRESET        RMB     2       RESET THIS DISK DRIVER
0002 0002        94: DRIVER:DISKREAD RMB     2       INITIATE A DISK SECTOR READ
0004 0002        95: DRIVER:DISKWRITE        RMB     2       INITIATE A DISK SECTOR WRITE
0006 0002        96: DRIVER:DISKWAIT RMB     2       WAIT FOR DISK I/O COMPLETE
0008 0002        97: DRIVER:DISKSTATUS       RMB     2       READ DISK-SPECIFIC STATUS
000A 0002        98: DRIVER:DISKCONTROL      RMB     2       PERFORM DISK-SPECIFIC CONTROL OPERATION
000C 0002        99: DRIVER:DISKWRITEPROTQ   RMB     2       DETERMINE IF DISK IS WRITE PROTECTED
000E 0002       100: DRIVER:DISKVERIFY       RMB     2       INITIATE A DISK SECTOR VERIFY
0010 0002       101: DRIVER:DISKLSNTOPSN     RMB     2       CONVERT LSN TO PHYSICAL CYLINDER, TRACK AND SE




ASM/6800 1.4A0: 0010 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 29; Form 3      *** SDOS 1.1 DEFINITIONS ***
SDOS11DEFS.ASM
                103: *
                104: *       TIMEOUT ELEMENT DISPLACEMENTS
                105: *
  0000          106:         ORG     0
0000 0002       107: TIMEOUT:LINK    RMB     2       POINTER TO NEXT TIMEOUT QUEUE ELEMENT
0002 0002       108: TIMEOUT:FUSE    RMB     2       16 BIT TIMEOUT COUNT (1/60 SEC UNITS); 0--> NO TIMEOUT
0004 0002       109: TIMEOUT:ROUTINE RMB     2       POINTER TO TIMEOUT INTERRUPT ROUTINE FOR DEVICE
0006 0002       110: TIMEOUT:DCB     RMB     2       POINTER TO DCB BEING TIMED OUT
  0008          111: TIMEOUT:SIZE    EQU     *
                112: *
                113: *       REGISTER DISPLACEMENTS INTO A CONTEXT BLOCK
                114: *       THESE VALUES ASSUME THAT (S) AFTER INTERRUPT, HAS BEEN COPIED INTO (X)
                115: *
  0001          116:         IF      M6800!M6801
  0001          117:         ORG     1       THIS WORKS, DON'T KNOCK IT!
0001 0001       118: REG:CC  RMB     1       CONDITION CODE BITS
0002 0001       119: REG:B   RMB     1       B REGISTER
0003 0001       120: REG:A   RMB     1       A REGISTER
0004 0002       121: REG:X   RMB     2       X REGISTER (REG:X+1 IS LOW BYTE OF INDEX REGISTER)
0006 0002       122: REG:PC  RMB     2       P REGISTER (REG:P+1 IS LOW BYTE OF P COUNTER)
  0007          123: CONTEXTBLOCK:SIZE       EQU     *-1
  0002          124:         ELSE    (M6809)
 *S*            125:         ORG     0
 *S*            126: REG:CC  RMB     1       CONDITION CODE BITS
 *S*            127: REG:A   RMB     1       A REGISTER
 *S*            128: REG:B   RMB     1       B REGISTER
 *S*            129: REG:DP  RMB     1       DIRECT PAGE REGISTER
 *S*            130: REG:X   RMB     2       X REGISTER
 *S*            131: REG:Y   RMB     2       Y REGISTER
 *S*            132: REG:U   RMB     2       U REGISTER
 *S*            133: REG:PC  RMB     2       P REGISTER
 *S*            134: CONTEXTBLOCK:SIZE       EQU     *
                135:         FIN




ASM/6800 1.4A0: 0006 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 30; Form 3      *** SDOS 1.1 DEFINITIONS ***
SDOS11DEFS.ASM
                137: *
                138: *       INTERRUPT SYSTEM DEFINITIONS
                139: 
                140: *       MINIMUM STACK SIZE HAS ROOM FOR 3 CONTEXT BLOCKS:
                141: *       ONE FOR INTERRUPT, ONE FOR NMI AND ONE FOR DEBUGGER CONTEXT
                142: *       WORKING SPACE REQUIRED BY A TASK MUST BE ADDED TO MINSTACK!
  0015          143: MINSTACK        EQU     3*CONTEXTBLOCK:SIZE
                144: 
                145: *       TCB (TASK CONTROL BLOCK) DISPLACEMENTS
                146: 
  0000          147:         ORG     0
0000 0002       148: TCB:LNK RMB     2       POINTER TO NEXT TCB IN QUEUE
0002 0002       149: TCB:STACK       RMB     2       STACK POINTER FOR TASK
                150: *       ON TOP OF A STACK IS ALWAYS A CONTEXT BLOCK
0004 0002       151: TCB:COND        RMB     2       TASK'S WAKE UP ROUTINE
0006 0002       152: TCB:PARAM       RMB     2       PARAMETER TO TCB:CND ROUTINE
0008 0008       153: TCB:SCRATCHPAD  RMB     8       SPACE FOR TASK'S SCRATCHPAD (LOCATIONS 0-7)
  0010          154: TCB:SIZE        ; SIZE OF TASK CONTROL BLOCK
                155: *
  0006          156: DCBPOINTER      EQU     $6      POINTER TO DEVICE CONTROL BLOCK
                157: *
  00F0          158:         ORG     $F0
00F0 0000       159: SYSDEPENDENT    RMB     0       16 BYTES RESERVED FOR SYSTEM DEPENDENT USE
00F0 0001       160: BASICFLAGS      RMB     1       $F0 IS OWNED BY BASIC/I/O PACK FOR TRACE FLAGS
                161: *
                162: *       DEVICE CONTROL BLOCK DISPLACEMENTS
                163: *
  0000          164:         ORG     0
0000 0001       165: DCB:DONEFLAG    RMB     1       0 --> DEVICE IS BUSY; <>0 --> DEVICE IS DONE
0001 0002       166: DCB:LASTERROR   RMB     2       IF DCB IS DONE, CONTAINS ERROR STATUS (0 = NONE )
0003 0002       167: DCB:NAME        RMB     2       POINTER TO DEVICE NAME STRING TERMINATED BY ZERO BYTE
0005 0002       168: DCB:NEXTDCB     RMB     2       POINTER TO NEXT DCB IN LIST OR ZERO
0007 0002       169: DCB:DRIVER      RMB     2       POINTER TO DRIVER ENTRY POINT LIST
                170: *DCB:DVTYP      RMB     1       TYPE OF DEVICE
  0009          171: DCB:SIZE        ; DEVICE SPECIFIC DATA EXTENDS DCB FROM HERE




ASM/6800 1.4A0: 0007 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 31; Form 3      *** SDOS 1.1 DEFINITIONS ***
SDOS11DEFS.ASM
                173: *
                174: *       DISKINFO TABLE DISPLACEMENTS
                175: *
  0009          176:         ORG     DCB:SIZE
0009 0002       177: DSKINFO:NBPS    RMB     2       NUMBER OF BYTES PER SECTOR
000B 0002       178: DSKINFO:NSPT    RMB     2       NUMBER OF SECTORS PER TRACK
000D 0002       179: DSKINFO:NTPC    RMB     2       NUMBER OF TRACKS PER CYLINDER
000F 0002       180: DSKINFO:NCYL    RMB     2       NUMBER OF CYLINDERS PER DRIVE
                181: *
                182: *       THE FOLLOWING ARE FILLED FROM THE BOOT SECTOR
0011 0001       183: DSKINFO:NSPC    RMB     1       NUMBER OF SECTORS PER CLUSTER
0012 0002       184: DSKINFO:MINALLOC        RMB     LCN:SIZE        ALLOCATION MINIMUM FOR NEW FILES
0014 0002       185: DSKINFO:MIDALLOC        RMB     LCN:SIZE        ALLOCATION MIN FOR FILE EXTENSION
0016 0002       186: DSKINFO:MAPALGORITHM    RMB     2       CODE TO SELECT LOGICAL TO PHYSICAL SECTOR MAP 
  0007          187: BOOT:PARAMSIZE  EQU     *-DSKINFO:NSPC  SYSTEM DEPENDENT PARAMETERS IN BOOT BLOCK
                188: *       END OF BOOT SECTOR DISK INFO
                189: *DSKINFO:DISKID RMB     BOOT:DISKIDSIZE CONTAINS DISK ID FOR MOUNTED DISKS
                190: *
0018 0001       191: DSKINFO:LOG2NBPS        RMB     1       LOG BASE 2 OF DSKINFO:NBPS
0019 0002       192: DSKINFO:NBPSM1  RMB     2       = NBPS-1 FOR USE AS MASK (QUICK "MOD NBPS")
001B 0003       193: DSKINFO:NLSN    RMB     LSN:SIZE        NUMBER OF LSNS FOR THIS DISK = NSPT*NTPC*NCYL
001E 0002       194: DSKINFO:NLCN    RMB     LCN:SIZE        NUMBER OF LCNS FOR THIS DISK = NLSN/NSPC
0020 0002       195: DSKINFO:NBPC    RMB     2       NUMBER OF BYTES PER CLUSTER
0022 0002       196: DSKINFO:RANDMAP RMB     LCN:SIZE        "RANDOM" LCN TO DISTRIBUTE NEW FILES
0024 0003       197: DSKINFO:MAPLSN  RMB     LSN:SIZE        LSN OF 1ST SECTOR IN DISK...
                198: *                       ALLOCATION MAP CLUSTER
0027 0002       199: DSKINFO:DIRFCB  RMB     2       POINTER TO FCB FOR $DIRECTORY FILE
0029 0002       200: DSKINFO:MAPFCB  RMB     2       POINTER TO FCB FOR $DISKMAP FILE
002B 0002       201: DSKINFO:SECTORDB        RMB     2       POINTER TO RDSI CONTAINING LSN, ADDRESS PARAME
002D 0003       202: DSKINFO:BADLSN  RMB     3       LSN OF LAST SECTOR THAT COULDN'T READ/WRITE/SEEK
0030 0002       203: DSKINFO:SEEKERRCNT      RMB     2       # SEEK ERRORS SINCE MOUNT
0032 0002       204: DSKINFO:SEEKERRSTS      RMB     2       16 BITS OF LAST "SEEK" STATUS IN ERROR
0034 0002       205: DSKINFO:WRITEERRCNT     RMB     2       # WRITE ERRORS SINCE MOUNT
0036 0002       206: DSKINFO:WRITEERRSTS     RMB     2       16 BITS OF LAST "WRITE" STATUS IN ERROR
0038 0002       207: DSKINFO:READERRCNT      RMB     2       # READ ERRORS SINCE MOUNT
003A 0002       208: DSKINFO:READERRSTS      RMB     2       16 BITS OF LAST "READ" STATUS IN ERROR
003C 0003       209: DSKINFO:OPSCOUNT        RMB     3       24 BITS OF # DRIVER OPERATIONS SINCEMOUNT
003F 0003       210: DSKINFO:ERRLSN  RMB     LSN:SIZE        LSN CAUSING ANY SOFT OR HARD ERROR
0042 0001       211: DSKINFO:WRITEPROTSTATE  RMB     1       0 --> WRITEABLE
  0043          212: DSKINFO:SIZE    EQU     *




ASM/6800 1.4A0: 0042 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 32; Form 3      *** SDOS 1.1 DEFINITIONS ***
SDOS11DEFS.ASM
                214: *
                215: *       SECTOR DESCRIPTOR BLOCK DISPLACEMENTS
                216: *
  0000          217:         ORG     0
0000 0002       218: SECTORDB:DISKINFO       RMB     2       POINTER TO DISKINFO TABLE FOR DRIVE CONTAINING
0002 0003       219: SECTORDB:LSN    RMB     LSN:SIZE        LOGICAL SECTOR NUMBER OF SECTOR
0005 0002       220: SECTORDB:ADDRESS        RMB     2       MEMORY ADDRESS FOR SECTOR
  0007          221: SECTORDB:SIZE   EQU     *
                222: *
                223: *       RESIDENT DISK SECTOR INFORMATION BLOCK DISPLACEMENTS
                224: *
  0000          225:         ORG     0
0000 0002       226: RDSI:DISKINFO   RMB     2       POINTER TO DISKINFO TABLE FOR THIS DRIVE
0002 0003       227: RDSI:LSN        RMB     LSN:SIZE        LOGICAL SECTOR NUMBER OF SECTOR
0005 0002       228: RDSI:SECTORBASE RMB     2       POINTER TO ACTUAL SECTOR CONTENTS
0007 0002       229: RDSI:FLINK      RMB     2       FORWARD LINK IN LRU CHAIN
0009 0002       230: RDSI:BLINK      RMB     2       BACKWARD LINK IN LRU CHAIN
000B 0001       231: RDSI:MODIFIED   RMB     1       "THIS SECTOR MODIFIED" FLAG
000C 0001       232: RDSI:STATE      RMB     1       STATE OF RDSI (READING, WRITING, VERIFYING, IDLE)
000D 0001       233: RDSI:RETRYCOUNT RMB     1       NUMBER OF TRIES LEFT BEFORE ERROR REPORTED
000E 0002       234: RDSI:SECTOR     RMB     2       PHYSICAL SECTOR NUMBER OF LSN
0010 0002       235: RDSI:TRACK      RMB     2       PHYSICAL TRACK NUMBER OF LSN
0012 0002       236: RDSI:CYLINDER   RMB     2       PHYSICAL CYLINDER NUMBER OF LSN
  0014          237: RDSI:SIZE       EQU     *
                238: *
                239: *       RDSI STATE DEFINITIONS
                240: *
  0000          241: RDSISTATE:IDLE  EQU     0       SECTOR TRANSFER IS COMPLETE
  0001          242: RDSISTATE:READING       EQU     1       SECTOR IS BEING READ INTO MEMORY
  0002          243: RDSISTATE:WRITING       EQU     2       SECTOR IS BEING WRITTEN FROM MEMORY
  0003          244: RDSISTATE:VERIFYING     EQU     3       SECTOR IS BEING VERIFIED AFTER WRITE




ASM/6800 1.4A0: 0012 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 33; Form 3      *** SDOS 1.1 DEFINITIONS ***
SDOS11DEFS.ASM
                246: *
                247: *       FILE CONTROL BLOCK DISPLACEMENTS
                248: *
  0000          249:         ORG     0
0000 0002       250: FCB:DISKINFO    RMB     2       POINTER TO DISKINFO TABLE FOR THIS DRIVE
0002 0003       251: FCB:DIRLSN      RMB     LSN:SIZE        LSN OF DIRECTORY ENTRY
0005 0002       252: FCB:DIRDISP     RMB     2       DISPLACEMENT FOR DIRECTORY ENTRY FROM TOP OF SECTOR IN
0007 0003       253: FCB:HLSN        RMB     LSN:SIZE        = FCB:HLCN*DSKINFO:NSPC
000A 0001       254: FCB:FLAGS       RMB     1       FLAG BITS DESCRIBING FCB
000B 0001       255: FCB:REFCOUNT    RMB     1       NUMBER OF IOCBS USING THIS FCB
000C 0002       256: FCB:HLCN        RMB     LCN:SIZE        HEADER LOGICAL CLUSTER NUMBER OF FILE
000E 0001       257: FCB:HCSIC       RMB     1       HEADER CLUSTER INITIALIZED COUNT
000F 0002       258: FCB:NCLUSTERS   RMB     LCN:SIZE        NUMBER OF CLUSTERS ALLOCATED TO THE FILE
0011 0004       259: FCB:FILESIZE    RMB     4       SIZE OF THE FILE IN BYTES
0015 0001       260: FCB:PROT        RMB     1       PROTECTION BITS FROM DIRECTORY
0016 0001       261: FCB:DAY         RMB     1       DATE OF FILE CREATION
0017 0001       262: FCB:MONTH       RMB     1       MONTH OF FILE CREATION
0018 0001       263: FCB:YEAR        RMB     1       YEAR OF FILE CREATION MODULO 100
0019 0001       264: FCB:VERSION     RMB     1       VERSION # OF FILE (NOT USED IN 1.0)
  001A          265: FCB:SIZE        EQU     *
                266: *
  0001          267:         IF      SYSTEMDEFS
  0080          268: FCBFLG::NEWFILE EQU     $80     FCB:FLAGS --> THIS FILE WAS CREATED
  0040          269: FCBFLG::UPDATEDIR       EQU     $40     FCB:FLAGS --> COPY FCB DATA BACK TO DIRECTORY
  0020          270: FCBFLG::DELETED EQU     $20     FCB:FLAGS --> THIS FILE WAS DELETED
  0010          271: FCBFLG::MODIFIED        EQU     $10     FCB:FLAGS --> THIS FILE WAS MODIFIED WHILE OPE
                272:         FIN     SYSTEMDEFS
                273: *
                274: *
                275: *
  0002          276: NMAGICFCBS      EQU     2       FOR ERRMSGFCB, SYSFCB




ASM/6800 1.4A0: 0019 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 34; Form 3      *** SDOS 1.1 DEFINITIONS ***
SDOS11DEFS.ASM
                278: *
                279: *       IOCB DEFINITIONS
                280: *
  0000          281:         ORG     0
0000 0002       282: IOCB:DCB        RMB     2       POINTER TO DEVICE CONTROL BLOCK
0002 0003       283: IOCB:CURLSN     RMB     LSN:SIZE        LOGICAL SECTOR # OF CURBYTE
0005 0002       284: IOCB:BUFFERP    RMB     2       ADDRESS OF 1ST BYTE TO TRANSFER
0007 0002       285: IOCB:FCB        RMB     2       POINTER TO FILE CONTROL BLOCK
0009 0002       286: IOCB:DRIVER     RMB     2       POINTER TO DRIVER VECTOR FOR DEVICE
000B 0001       287: IOCB:EOFFLAG    RMB     1       END OF FILE HIT FLAG
000C 0001       288: IOCB:COLCNT     RMB     1       COLUMN COUNTER
000D 0004       289: IOCB:CURBYTE    RMB     4       VIRTUAL BYTE # TO READ/WRITE FROM/TO NEXT
0011 0001       290: IOCB:LOCATEDF   RMB     1       0 --> NEED TO DO A LOCATECURBYTE
                291: *                       1 --> LOCATECURBYTE DONE
0012 0002       292: IOCB:DRDSI      RMB     2       POINTER TO DATA RESIDENT DISK SECTOR INFO
0014 0002       293: IOCB:NEXTBYTE   RMB     2       POINTER TO NEXT BYTE OF DISK SECTOR
0016 0002       294: IOCB:BYTECOUNT  RMB     2       NUMBER OF BYTES LEFT TO PROCESS IN SECTOR
0018 0002       295: IOCB:CURLCN     RMB     LCN:SIZE        CURRENT LOGICAL CLUSTER NUMBER BEING PROCESSED
001A 0001       296: IOCB:DRSN       RMB     1       RELATIVE DATA SECTOR NUMBER WITHIN CLUSTER
001B 0002       297: IOCB:RDCN       RMB     LCN:SIZE        RELATIVE DATA CLUSTER NUMBER W/ RESPECT TO DAT
                298: *                       CLUSTERS WITHIN THE FILE (0=HEADER CLUSTER)
001D 0002       299: IOCB:RBN        RMB     2       RELATIVE BYTE # WITHIN A CLUSTER
001F 0002       300: IOCB:HRDSI      RMB     2       POINTER TO RDSI FOR CURRENT HEADER BLOCK
0021 0001       301: IOCB:HRSN       RMB     1       RELATIVE SECTOR NUMBER OF HEADER SECTOR
                302: *IOCB:SEGMENTRDCN       RMB     LCN:SIZE        RELATIVE DATA CLUSTER FOR START OF SEG
                303: *IOCB:SEGMENTBASELCN    RMB     LCN:SIZE        BASE LCN OF CONTIGUOUS SEGMENT
                304: *IOCB:SEGMENTLENGTH     RMB     LCN:SIZE        NUMBER OF CLUSTERS IN CONTIGUOUS SEGME
                305: *IOCB:ENCRYPTIONKEY     RMB     8       HOLDS ENCRYPT/DECRYPT KEY FOR CURRENTLY OPEN F
  0022          306: IOCB:SIZE       EQU     *
                307: 
  0001          308:         IF      SYSTEMDEFS
  0011          309: IOCB:DISKWRITELOCKED    EQU     IOCB:LOCATEDF   1 --> DISK "DEVICE" IS WRITE LOCKED
                310:         FIN     SYSTEMDEFS
                311:         FIN     SYSTEMDEFS!IOPKDEFS




ASM/6800 1.4A0: 0021 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 35; Form 3      *** SDOS 1.1 DEFINITIONS ***
SDOS11DEFS.ASM
  0001          313:         IF      SYSTEMDEFS
                314: *
                315: *       SDOS LOADER FORMAT:  RECORD TYPE DEFINITIONS
                316: *
  0000          317: LOAD:TYPE0      EQU     0       "SKIP" RECORD
  0001          318:         IF      M6800
  0001          319: LOAD:TYPE1      EQU     1       STARTUP RECORD
  0002          320:         ELSEIF  M6801
 *S*            321: LOAD:TYPE1      EQU     3
 *S*            322:         ELSEIF  M6809
 *S*            323: LOAD:TYPE1      EQU     2
                324:         FIN
  0002          325: LOAD:TYPE2      EQU     2       LOAD BYTES RECORD
  0003          326: LOAD:TYPE3      EQU     3       LOAD BYTES AND STOP RECORD
  0005          327: LOAD:ENCRYPTED  EQU     5       "THIS FILE IS ENCRYPTED" LOAD RECORD
                328: *
                329: *       BOOT SECTOR DISPLACEMENTS
                330: *
  0000          331:         ORG     0
0000 0010       332: BOOT:IPLDATA    RMB     16      CONTAINS "JMP BOOTSIZE" OR OTHER BOOTSTRAP DATA
0010 0000       333: BOOT:DISKINFO   RMB     0       SPACE FOR DISKINFO TABLES
  0010          334: BOOT:DISKINFOLEN        EQU     16
0010 0001       335: BOOT:FILESYSTEMVERSION  RMB     1       SDOS FILE SYSTEM FORMAT VERSION NUMBER $AB = A
0011 0001       336: BOOT:NSPC       RMB     1       NUMBER OF SECTORS PER CLUSTER
0012 0002       337: BOOT:MINALLOC   RMB     LCN:SIZE        ALLOCATION MINIMUM FOR NEW FILES
0014 0002       338: BOOT:MIDALLOC   RMB     LCN:SIZE        ALLOCATION MIN FOR FILE EXTENSION
0016 0002       339: BOOT:MAPALGORITHM       RMB     2       LOGICAL TO PHYSICAL CONVERSION ALGORITHM #
0018 0003       340: BOOT:CREATIONDATE       RMB     3       DD/MM/YY IN HEX
001B 0003       341: BOOT:DIRLSN     RMB     LSN:SIZE        LSN OF DIRECTORY SECTOR CONTAINING "DIRECTORY.
001E 0001       342:         RMB     BOOT:DISKINFOLEN+BOOT:DISKINFO-*-1
001F 0001       343: BOOT:CHECKSUM   RMB     1       SUCH THAT SUM OF DISKINFO BYTES (INCL CKSUM) = $FF
  0020          344: BOOT:DISKIDSIZE EQU     32      # BYTES RESERVED FOR ASCII DISK IDENTIFICATION
0020 0020       345: BOOT:DISKID     RMB     BOOT:DISKIDSIZE TEXT NAME OF DISK (TRAILING BLANK PADDED)
  0040          346: BOOT:SIZE       EQU     *




ASM/6800 1.4A0: 0020 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 36; Form 3      *** SDOS 1.1 DEFINITIONS ***
SDOS11DEFS.ASM
                348: *
                349: *       DIRECTORY ENTRY DISPLACEMENTS
                350: *
                351: 
  0000          352:         ORG     0
  0010          353: DIR:NAMESIZE    EQU     16      LENGTH OF DIRECTORY NAME
0000 0010       354: DIR:FILENAME    RMB     DIR:NAMESIZE    FILENAME IN ASCII
0010 0000       355: DIR:FCBDATA     RMB     0       FCB DATA FOR FILE MANAGEMENT STARTS HERE
0010 0002       356: DIR:HLCN        RMB     LCN:SIZE        LCN OF HEADER CLUSTER
0012 0001       357: DIR:HCSIC       RMB     1       HEADER CLUSTER INITIALIZED COUNT
0013 0002       358: DIR:NCLUSTERS   RMB     LCN:SIZE        NUMBER OF CLUSTERS ALLOCATED TO FILE
0015 0004       359: DIR:FILESIZE    RMB     4       LOGICAL SIZE OF FILE IN BYTES
0019 0001       360: DIR:PROTECTION  RMB     1       PROTECTION BITS
001A 0001       361: DIR:DAY RMB     1       CREATION DATE OF FILE
001B 0001       362: DIR:MONTH       RMB     1       MONTH OF FILE CREATION
001C 0001       363: DIR:YEAR        RMB     1       YEAR OF FILE CREATION
001D 0001       364: DIR:VERSION     RMB     1       VERSION NUMBER OF FILE (0-255)
  000E          365: DIR:FCBDATASIZE EQU     *-DIR:FCBDATA   # BYTES REQUIRED TO MANAGE FILES IN FCBS
001E 0002       366:         RMB     32-*    SPACE FOR SLOP
  0020          367: DIR:ENTRYSIZE   EQU     *




ASM/6800 1.4A0: 001E SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 37; Form 3      *** SDOS 1.1 DEFINITIONS ***
SDOS11DEFS.ASM
                369: *
                370: *
                371: *       DISKMAP DISPLACEMENTS
                372: *
  0000          373:         ORG     0
0000 0001       374: DISKMAP:BYTE    RMB     1
  0008          375: NMBPB   EQU     8       # MAP BITS PER BYTE
                376: *
  0000          377: SECTOR:BYTE     EQU     0       USED AS DISPLACEMENT ON SECTOR BYTE FETCH
                378: *
  0003          379: READAHEADRDSIMIN        EQU     3       READ-AHEAD HAPPENS ONLY IF MORE BUFFERS AVAILA
  FFFF          380: DUMMYLCN        EQU     $FFFF   "NO LCN" CODE
                381: *
                382: *       HEADER CLUSTER DISPLACEMENTS
                383: *
  0000          384:         ORG     0
0000 0002       385: HEADER:LCN      RMB     LCN:SIZE
                386: *
  0008          387: SERIALNUMBER:SIZE       EQU     8       SIZE OF SERIAL NUMBERS
                388: *
                389: *       WEIRD CHANNEL DEFINITIONS
                390: *
  00FF          391: LOGCHANNEL      EQU     $FF     (LOG CHANNEL MUST BE LOWEST OF THESE)
  00FE          392: SYSCHANNEL      EQU     $FE     SYSTEM I/O CHANNEL (RESERVED)
                393:         FIN     SYSTEMDEFS
  0001          394:         IF      LISTDEFS
  0001          396:         ELSE
 *S*            397:         LIST    1       FORCE LISTING AGAIN
                398:         FIN




ASM/6800 1.4A0: 0000 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 38; Form 4      *** SDOS 1.1 DEFINITIONS ***
SDOS11DEFS.ASM
                  1: 
                150: 
                151: 




ASM/6800 1.4A0: 0000 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 39; Form 2      *** SDOS Boot time Initialization Code ***
SDOS6800.ASM
                  2: *        "SDOSINIT" -- SDOS INITIALIZING CODE
                  3: *
                  4: 
  00FB            5:          ORG     SYSCALL$
                  6:          ;JMP    SDOSINIT    SO BOOT'S EXIT SYSCALL RESETS SDOS
00FB 7E2000       7:          JMP     SDOSINIT
                  8: *        THIS PLACE IS CHANGED TO A "JMP SYSCALLENTRY" BY INIT CODE




ASM/6800 1.4A0: 00FB SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 40; Form 2      *** SDOS Boot time Initialization Code ***
SDOS6800.ASM
  2000           10:          Org     $2000       BOOT.SYS owns $0-$1FFF when loading SDOS.SYS
                 11: 
  2000           12: SDOSINIT EQU     *
                 13: *
                 14: *        SET UP SDOS STACK POINTER
                 15: *        ASSERT: DP REGISTER CONTAINS ZERO HERE!
                 16: *
                 17:          ;LDX    CODE+SDOS:CONFIGURATION GET THE STACK POINTER
2000 FEAE03      18:          LDX     CODE+SDOS:CONFIGURATION
                 19:          ;LDX    CNFG:DRIVERBASE,X
2003 EE0F        20:          LDX     CNFG:DRIVERBASE,X
2005 35          21:          TXS                 SO (S) POINTS TO 1ST BYTE BELOW DRIVER PACKAGE
2006 BFAF22      22:          STS     SDOSSTACK   AND SAVE FOR RE-USE BY EXIT
2009 867E        23:          LDAA    #$7E        ("JMP" OPCODE) SET UP I/O PACKAGE BASE...
200B A700        24:          STAA    ,X          TO POINT TO SDOS ENTRY POINT
                 25:          ;LDD    #SYSCALLENTRY
200D C6B2        26:          LDAB    #(SYSCALLENTRY)&$FF
200F 86B1        27:          LDAA    #(SYSCALLENTRY)/256
                 28:          ;STD    1,X
2011 E702        29:          STAB    (1)+1,X
2013 A701        30:          STAA    1,X
2015 4F          31:          CLRA                MAKE SURE SDOSINIT CODE IS OK!
                 32:          ;LDX    #SDOSINIT   BASE OF AREA TO CHECKSUM
2016 CE2000      33:          LDX     #SDOSINIT
  2019           34: SDOSINITCKSUML   ; LOOP TO CHECKSUM BYTES
2019 48          35:          ASLA                MAKE CHECKSUM DEPEND ON ORDER OF BYTES
  0001           36:          IF      M6800!M6801
201A A900        37:          ADCA    0,X
201C 08          38:          INX
  0001           39:          ELSE
 *S*             40:          ADCA    ,X+
                 41:          FIN
201D 8C26BD      42:          CPX     #SDOSINITEND
2020 26F7        43:          BNE     SDOSINITCKSUML
                 44:          ;LDX    #ERR:SELFTESTCKSUM ASSUME WE'RE SCREWED UP!
2022 CE0430      45:          LDX     #ERR:SELFTESTCKSUM
2025 8BFF        46:          ADDA    #$FF
2027 25FE        47:          BCS     *           CHECKSUM <> 0, I'M SICK!
                 48:          ;JSR    SDOSINITS   CALL THE INITIALIZING SUBROUTINE
2029 BD22F9      49:          JSR     SDOSINITS




ASM/6800 1.4A0: 202C SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 41; Form 2      *** SDOS Boot time Initialization Code ***
SDOS6800.ASM
202C 25FE        50:          BCS     *           B/ CROAKED IN CRITICAL INITIALIZATION CODE




ASM/6800 1.4A0: 202C SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 42; Form 2      *** SDOS Boot time Initialization Code ***
SDOS6800.ASM
                 52: *        Now test the ROM for proper construction.
                 53: *        If SERIALNUMBERLOCATION is zero,
                 54: *        Then: Follow Restart Vector to JMP around Serial number,
                 55: *        Verify presence of ROM serial number,
                 56: *        Restart-zeros-memory when RunningEncrypted code,
                 57: *        and NMI-is-nop code when RunningEncrypted.
                 58: *        Verify that all this stuff is in ROM so it cannot be turned off.
                 59: *
                 60: *        If SERIALNUMBERLOCATION is not zero, simply check
                 61: *        that serial number (as specified by SERIALNUMBERLOCATION) is in ROM.
                 62: *        Don't check SELECTBANK or NMI routine structure or operation;
                 63: *        don't fool with the RUNNINGENCRYPTED byte.  This allows SDOS
                 64: *        to operate in mass-produced, commercial micros such as
                 65: *        the Radio Shack Color Computer, which have Mask ROMs that cannot
                 66: *        be changed by SD (Sigh!)
                 67: *
                 68: *
                 69:          ;ldx    SerialNumberLocation get pointer to S/N in mask-rom system
202E FEB844      70:          LDX     SerialNumberLocation
2031 2708        71:          beq     VerifyRestartCode0 b/ Standard ROM structure
                 72:          ;lda    #SerialNumber:Size = size of serial number
2033 8608        73:          LDAA    #SerialNumber:Size
                 74:          ;jsr    WriteRandom Verify serial number is in ROM
2035 BD217A      75:          JSR     WriteRandom
                 76:          ;jmp    FetchSerialNumberSys All done with ROM checking
2038 7E211E      77:          JMP     FetchSerialNumberSys
                 78: 
  203B           79: VerifyRestartCode0 ; Check for standard ROM structure
                 80:          ;ldx    $fffe       follow restart vector to JMP around serial number
203B FEFFFE      81:          LDX     $fffe
203E FF2786      82:          stx     CopyofRestartVector
                 83:          ;ldx    $fffc       Get NMI vector pointer
2041 FEFFFC      84:          LDX     $fffc
2044 FF2784      85:          stx     CopyofNMIVector
                 86:          ;ldx    #$fffc      make sure NMI and RESTART vectors are ROM
2047 CEFFFC      87:          LDX     #$fffc
204A 8604        88:          ldaa    #4          = size of region to write on
                 89:          ;jsr    WriteRandom write all over region
204C BD217A      90:          JSR     WriteRandom
                 91:          ;ldx    $fffe       Get "trashed-if-RAM" Restart Vector




ASM/6800 1.4A0: 204F SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 43; Form 2      *** SDOS Boot time Initialization Code ***
SDOS6800.ASM
204F FEFFFE      92:          LDX     $fffe
2052 BC2786      93:          cpx     CopyofRestartVector Did it get trashed?
2055 2674        94:          bne     IncorrectROM b/ yes, so-called "ROM" is not.
2057 860B        95:          ldaa    #8+3        verify ROM serial number is in ROM.
                 96:          ;jsr    Writerandom over region (X) thru (X+A)
2059 BD217A      97:          JSR     Writerandom
                 98: *
                 99: *        Verify presence of Reset code to zero memory if Encryted flag is set
                100: *        Including checks for RunningEncrypted flag is in RAM,
                101: *        that SelectBank subroutine actually works,
                102: *        and that the entire thing is in ROM
                103: *        Also verify that ROM causes NMI when encrypted to be ignored
                104: *
                105:          ;ldx    1,x         pointer to "Zero Memory if encrypted" code
205C EE01       106:          LDX     1,X
                107: *
                108: *
205E 8618       109:          ldaa    #DontZeroMemory-Restart = length of Zero Memory sequence
                110:          ;jsr    writerandom write randomly over region x thru x+a
2060 BD217A     111:          JSR     writerandom
  0001          112:          if      m6800!m6801
2063 A600       113:          ldaa    0,x         Must be LDS immediate opcode
                114:          ;cmpa   #$8E
2065 818E       115:          CMPA    #$8E
  0001          116:          else    (m6809)
 *S*            117:          ;ldd    0,x         Must be LDS immediate opcode
 *S*            118:          LDAB    (0)+1,X
 *S*            119:          LDAA    0,X
 *S*            120:          ;cmpd   Restart
 *S*            121:          CMPA    Restart
 *S*            122:          BNE     MACRO:0001
 *S*            123:          CMPB    Restart+1
 *S*            124: MACRO:0001
                125:          fin
2067 2662       126:          bne     IncorrectROM b/ Nope.
2069 A603       127:          ldaa    LdaEncrypted-Restart,x This must be "ldaa" extended opcode
206B E606       128:          ldab    LdaEncrypted+3-Restart,x and this must be "Beq" opcode
                129:          ;cmpd   #$B627
206D 81B6       130:          CMPA    #($B627)/256
206F 2602       131:          BNE     MACRO:0002




ASM/6800 1.4A0: 2071 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 44; Form 2      *** SDOS Boot time Initialization Code ***
SDOS6800.ASM
2071 C127       132:          CMPB    #($B627)&$FF
  2073          133: MACRO:0002
2073 2656       134:          bne     IncorrectROM b/ its not...
2075 A608       135:          ldaa    LdaEncrypted+5-Restart,x Must be "ldaa" immediate opcode
2077 E60A       136:          ldab    EraseBank-Restart,x and this must be "Jsr" extended opcode
                137:          ;cmpd   #$86BD      check...
2079 8186       138:          CMPA    #($86BD)/256
207B 2602       139:          BNE     MACRO:0003
207D C1BD       140:          CMPB    #($86BD)&$FF
  207F          141: MACRO:0003
207F 264A       142:          bne     IncorrectROM Wrong code --> won't run program
                143:          ;ldd    LdaEncrypted+1-Restart,x = address of RunningEncrypted
2081 E605       144:          LDAB    (LdaEncrypted+1-Restart)+1,X
2083 A604       145:          LDAA    LdaEncrypted+1-Restart,X
                146:          ;std    RunningEncryptedp
2085 F72783     147:          STAB    RunningEncryptedp+1
2088 B72782     148:          STAA    RunningEncryptedp
208B C60B       149:          ldab    #DontZeroMemory-EraseMem = # bytes to push before compare...
  208D          150: VerifyRestartCode1 ; push bytes from Restart-zeros-memory into stack...
208D 09         151:          dex     back up to previous byte
208E A618       152:          ldaa    DontzeroMemory-Restart,x push a byte...
2090 36         153:          psha
2091 5A         154:          decb
2092 26F9       155:          bne     VerifyRestartCode1 b/ didn't push enough bytes yet
                156:          ;ldx    #EraseMem-1 = code to compare against
2094 CE216E     157:          LDX     #EraseMem-1
2097 C60B       158:          ldab    #DontZeroMemory-EraseMem = # bytes to compare
  2099          159: VerifyRestartCodeloop
2099 08         160:          inx                 advance pointer to next byte to match
209A 32         161:          pula                pop byte to compare
                162:          ;cmpa   0,x
209B A100       163:          CMPA    0,X
209D 262C       164:          bne     IncorrectROM b/ contents of Restart-zeros-mem is wrong
209F 5A         165:          decb
20A0 26F7       166:          bne     VerifyRestartCodeloop b/ more bytes to compare
                167: *
                168: *        Reset code has correct structure.
                169: *        Verify that RunningEncrypted byte is in RAM, and is thus not always 0.
                170: *
                171:          ;ldx    Runningencryptedp Verify runningencrypted is in RAM




ASM/6800 1.4A0: 20A2 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 45; Form 2      *** SDOS Boot time Initialization Code ***
SDOS6800.ASM
20A2 FE2782     172:          LDX     Runningencryptedp
                173:          ;clr    0,x         will it store a zero?
20A5 6F00       174:          CLR     0,X
20A7 A600       175:          ldaa    0,x
20A9 2620       176:          bne     IncorrectROM b/ RunningEncrypted is not in RAM
20AB 8639       177:          ldaa    #$39        Verify that RunningEncrypted byte is RAM
20AD A700       178:          staa    0,x         (Store an "RTS" instruction there!)
                179:          ;cmpa   0,x         (SELECTBANK will blow up if zeros RunningEncrypted flag
20AF A100       180:          CMPA    0,X
20B1 2618       181:          bne     IncorrectROM b/ RunningEncrypted is not in RAM




ASM/6800 1.4A0: 20B1 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 46; Form 2      *** SDOS Boot time Initialization Code ***
SDOS6800.ASM
                183: *
                184: *        Now verify that SELECTBANK works properly.
                185: *        Note: a theif could build a phony SelectBank that checks the
                186: *        return address to see if it points to EraseMem (or the stack pointer
                187: *        to see if it contains the Restart value - 2), and if so,
                188: *        simply jumps to Dontzeromemory (see ROM descripton of Encrypted files)
                189: *        That defeats our purpose. I hope nobody figures it out.
                190: *        We can actually verify that for this machine, the Selectbank
                191: *        routine is correct by examining the serial number, which tells us
                192: *        the distributor, and therefore the machine organization;
                193: *        this in turn tells us exactly what the SelectBank code should be.
                194: *        But we don't do that yet, because a hole in I/O package is easier to
                195: *        take advantage of, so fixing this wouldn't really help much.
                196: *        We could also check (??) that select bank has no instructions
                197: *        in it that reference the stack register. That is, instructions
                198: *        that compare the stack pointer to anything, or copy the stack
                199: *        pointer (i.e., push it, store it, etc.) (to prevent copying it and
                200: *        THEN comparing), and indexed references to it
                201: *        (to prevent the return address from being examined)]. This is
                202: *        lots tougher! But DOABLE!
                203: *
                204:          ;ldd    #VerifyNMIisnop where to come back to...
20B3 C6D6       205:          LDAB    #(VerifyNMIisnop)&$FF
20B5 8620       206:          LDAA    #(VerifyNMIisnop)/256
                207:          ;pshd               Call SelectBank to make sure it works!
20B7 37         208:          PSHB
20B8 36         209:          PSHA
                210:          ;ldd    RunningEncryptedp With Return address = RunningEncrypted-1
20B9 F62783     211:          LDAB    RunningEncryptedp+1
20BC B62782     212:          LDAA    RunningEncryptedp
                213:          ;pshd               Push "Return address" to byte on stack
20BF 37         214:          PSHB
20C0 36         215:          PSHA
20C1 4F         216:          clra                Verify that Select Bank subroutine works..
                217:          ;ldx    $fffe       Get address of RunningEncrypted routine
20C2 FEFFFE     218:          LDX     $fffe
                219:          ;ldx    1,x         = address of Reset-zeros-memory code
20C5 EE01       220:          LDX     1,X
                221:          ;ldx    EraseBank-Restart+1,x = pointer to SelectBank routine
20C7 EE0B       222:          LDX     EraseBank-Restart+1,X




ASM/6800 1.4A0: 20C7 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 47; Form 2      *** SDOS Boot time Initialization Code ***
SDOS6800.ASM
                223:          ;jmp    0,x         invoke it to select bank 0
20C9 6E00       224:          JMP     0,X




ASM/6800 1.4A0: 20C9 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 48; Form 2      *** SDOS Boot time Initialization Code ***
SDOS6800.ASM
  20CB          226: IncorrectROM ; Contents of Boot ROM is incorrect
                227:          ;ldd    #SayInvalidROM-$1275 pass control to routine to print it...
20CB C6EF       228:          LDAB    #(SayInvalidROM-$1275)&$FF
20CD 860F       229:          LDAA    #(SayInvalidROM-$1275)/256
                230:          ;addd   #$1275      in a non-obvious way
20CF CB75       231:          ADDB    #($1275)&$FF
20D1 8912       232:          ADCA    #($1275)/256
                233:          ;pshd               people with disassemblers will never get it
20D3 37         234:          PSHB
20D4 36         235:          PSHA
20D5 39         236:          rts
                237: *
                238: *        Verify that NMI routine acts as NOP when RunningEncrypted
                239: *
  20D6          240: VerifyNMIisnop
                241:          ;ldx    $fffc       = address of NMI code
20D6 FEFFFC     242:          LDX     $fffc
20D9 BC2784     243:          cpx     CopyofNMIVector Ensure NMI vector is in ROM
20DC 26ED       244:          bne     IncorrectROM b/ its not.
20DE 8605       245:          ldaa    #5          size of NMI code that we wish to test
                246:          ;jsr    WriteRandom all over the NMI code
20E0 BD217A     247:          JSR     WriteRandom
20E3 A600       248:          ldaa    0,x         this is sposd to be LDAA opcode
20E5 E603       249:          ldab    3,x         and this is sposd to be "BNE" opcode
                250:          ;cmpd   #$B626      check them both...
20E7 81B6       251:          CMPA    #($B626)/256
20E9 2602       252:          BNE     MACRO:0004
20EB C126       253:          CMPB    #($B626)&$FF
  20ED          254: MACRO:0004
20ED 26DC       255:          bne     IncorrectROM b/ NMI routine is RAM or wrong
                256:          ;ldd    1,x         sposd to be address of RunningEncrypted
20EF E602       257:          LDAB    (1)+1,X
20F1 A601       258:          LDAA    1,X
                259:          ;cmpd   RunningEncryptedp heck it out...
20F3 B12782     260:          CMPA    RunningEncryptedp
20F6 2603       261:          BNE     MACRO:0005
20F8 F12783     262:          CMPB    RunningEncryptedp+1
  20FB          263: MACRO:0005
20FB 26CE       264:          bne     IncorrectROM b/ pointers are different!
20FD E604       265:          ldab    4,x         = displacement to RTI in BNE instruction




ASM/6800 1.4A0: 20FD SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 49; Form 2      *** SDOS Boot time Initialization Code ***
SDOS6800.ASM
  0001          266:          if      m6800!m6801
20FF 17         267:          tba
2100 47         268:          asra                shift right, propogating the sign bit
2101 47         269:          asra                shift right, propogating the sign bit
2102 47         270:          asra                shift right, propogating the sign bit
2103 47         271:          asra                shift right, propogating the sign bit
2104 47         272:          asra                shift right, propogating the sign bit
2105 47         273:          asra                shift right, propogating the sign bit
2106 47         274:          asra                shift right, propogating the sign bit
                275:          ;addd   $fffc       = address of RTI,-5
2107 FBFFFD     276:          ADDB    $fffc+1
210A B9FFFC     277:          ADCA    $fffc
                278:          ;tdx
210D 9700       279:          STAA    TEMPA
210F D701       280:          STAB    TEMPB
2111 DE00       281:          LDX     TEMPX
  0001          282:          else    (m6809)
 *S*            283:          ;leax   b,x         = address of RTI,-5
 *S*            284:          IF      b<0
 *S*            285:          RPT     -b
 *S*            286:          DEX
 *S*            287:          ELSE
 *S*            288:          RPT     b
 *S*            289:          INX
 *S*            290:          FIN
                291:          fin
                292:          ;clr    5,x         make sure RTI is in ROM
2113 6F05       293:          CLR     5,X
2115 A605       294:          ldaa    5,x         should be an RTI opcode
                295:          ;cmpa   #$3B        an RTI instruction?
2117 813B       296:          CMPA    #$3B
                297:          ;lbne   IncorrectROM b/ NMI routine is incorrect!
2119 2703       298:          BEQ     MACRO:0006
211B 7E20CB     299:          JMP     IncorrectROM
  211E          300: MACRO:0006
                301: *
                302: *        End ROM checking
                303: *        Assert: RunningEncrypted is now set!




ASM/6800 1.4A0: 211B SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 50; Form 2      *** SDOS Boot time Initialization Code ***
SDOS6800.ASM
  211E          305: FetchSerialNumberSys ; Pass control to SERIALNUMBER.SYS
                306:          ;LDX    #OPENSERIALNO.SYS SEE IF SERIALNUMBER.SYS IS ENCRYPTED
211E CE2746     307:          LDX     #OPENSERIALNO.SYS
                308:          ;JSR    DOSYSCALL
2121 BD2194     309:          JSR     DOSYSCALL
                310:          ;LDX    #READSERIALNUMBERFILETYPE GO GET 1ST LOAD RECORD OF FILE
2124 CE2773     311:          LDX     #READSERIALNUMBERFILETYPE
                312:          ;JSR    DOSYSCALL
2127 BD2194     313:          JSR     DOSYSCALL
                314:          ;LDX    #CLOSESERIALNO.SYS LEAVE THE SLATE CLEAN, CLOSE THE FILE
212A CE2758     315:          LDX     #CLOSESERIALNO.SYS
                316:          ;JSR    DOSYSCALL   (WE MUST DO THIS BECAUSE FIRSTCHAIN DOESN'T CALL EXITS)
212D BD2194     317:          JSR     DOSYSCALL
                318:          ;LDX    #ERR:NOTALOADFILE ASSUME THE WORST...
2130 CE0404     319:          LDX     #ERR:NOTALOADFILE
                320:          ;LDA    DECRYPTBUFFER FETCH LOAD RECORD TYPE
2133 B6B05D     321:          LDAA    DECRYPTBUFFER
                322:          ;CMPA   #LOAD:ENCRYPTED AN ENCRYPTED LOAD FILE ?
2136 8105       323:          CMPA    #LOAD:ENCRYPTED
2138 2613       324:          BNE     INITIALIZEERR B/ NOT ENCRYPTED, GO TELL USER AND DIE...
                325:          ;LDX    #CHAINTOSERIALNO.SYS GO GET SERIALNUMBER.SYS
213A CE2728     326:          LDX     #CHAINTOSERIALNO.SYS
213D FFAE07     327:          STX     CODE+SDOS:IOBLOCKPTR SET UP SYSCALL BLOCK POINTER LIKE SYSCALLENTRY
                328:          ;INC    SDOSRECURSIVECALL LIKE SYSCALL ENTRY
2140 7CAF8D     329:          INC     SDOSRECURSIVECALL
                330:          ;JSR    FIRSTCHAIN  AVOID SYSCALL ENTRY SO "SAFEGAURD" NOT INVOKED FOR THIS C
2143 BDB94F     331:          JSR     FIRSTCHAIN
2146 24FE       332:          BCC     *           CAN'T COME BACK WITH CARRY CLEAR!
2148 8C0432     333:          CPX     #ERR:SERIALNOWRONG WRONG MACHINE?
214B 274D       334:          BEQ     ERRWRONGSERIALNUMBER B/ YES, TELL THE GUY.
                335: *
                336: *        If no SERIALNUMBER.SYS, or phony SERIALNUMBER.SYS,
                337: *        then the Secret Long-term operation enabling signal...
                338: *        will not be passed to SDOS, and so SDOS will die relatively quickly!
                339: *
  214D          340: INITIALIZEERR    ; PROBLEM OCCURRED AFTER INITIALIZING SDOS
214D FF275D     341:          STX     ERRORCODE   PROBLEM WASN'T WHAT I EXPECTED
                342:          ;LDX    #SETINITERROR SO TELL THE OPERATOR...
2150 CE275B     343:          LDX     #SETINITERROR
                344:          ;JSR    SYSCALLENTRY




ASM/6800 1.4A0: 2153 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 51; Form 2      *** SDOS Boot time Initialization Code ***
SDOS6800.ASM
2153 BDB1B2     345:          JSR     SYSCALLENTRY
2156 25FE       346:          BCS     *           B/ THIS ISN'T OUR DAY FOR THINGS TO GO RIGHT
                347:          ;LDX    #DISPLAYINITERROR
2158 CE275F     348:          LDX     #DISPLAYINITERROR
                349:          ;JSR    SYSCALLENTRY
215B BDB1B2     350:          JSR     SYSCALLENTRY
215E 25FE       351:          BCS     *
2160 20FE       352:          BRA     *           IT CAN'T GET HERE, BUT I'M PARANOID ANYWAY...




ASM/6800 1.4A0: 2160 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 52; Form 2      *** SDOS Boot time Initialization Code ***
SDOS6800.ASM
                354: *
                355: *        Copy of code that is required to be in ROM Restart Routine
                356: *
2162 8E1234     357: Restart Lds      #$1234      Reset the stack pointer
  2165          358: LdaEncrypted
2165 B61234     359:          Ldaa    $1234       "RunningEncrypted"
2168 2710       360:          Beq     DontzeroMemory B/ don't have to erase the world
216A 8612       361:          Ldaa    #$12        Number of banks, -1
  216C          362: EraseBank
                363:          ;Jsr    $1234       "JSR SelectBank" (1234 is dummy)
216C BD1234     364:          JSR     $1234
  216F          365: EraseMem ; This is copy of code that is required to be in ROM Restart routine
                366:          ;Ldx    #$BFFF      (this code zeros memory)
216F CEBFFF     367:          LDX     #$BFFF
  2172          368: EraseLoop
                369:          ;Clr    0,x
2172 6F00       370:          CLR     0,X
2174 09         371:          Dex
2175 26FB       372:          Bne     EraseLoop
2177 4A         373:          Deca                (decrements Bank number)
2178 2AF2       374:          bpl     Erasebank
  217A          375: DontzeroMemory ; end of code required to be in ROM Restart routine




ASM/6800 1.4A0: 2178 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 53; Form 2      *** SDOS Boot time Initialization Code ***
SDOS6800.ASM
                377: *
                378: *        WriteRandom -- Write Random numbers over the Region (X) to (X)+(A)
                379: *        Exits with (X) = value on entry
  217A          380: WriteRandom
217A DF00       381:          stx     tempx       preserve (X)
  217C          382: WriteRandomL
217C F62781     383:          ldab    seed        generate new random number
217F 2702       384:          beq     WriteRandom1 b/ zero seed, handle as special case
2181 2A02       385:          bpl     WriteRandom2
  2183          386: WriteRandom1 ;   THIS ROUTINE NEEDS WORK!!!
                387:          ;eorb   #$81
2183 C881       388:          EORB    #$81
  2185          389: WriteRandom2
2185 58         390:          aslb
2186 C900       391:          adcb    #0
2188 F72781     392:          stab    seed
                393:          ;stb    ,x+         store random trash on the byte
218B E700       394:          STAB    0,X
218D 08         395:          INX
218E 4A         396:          deca                down count # bytes to trash
218F 26EB       397:          bne     WriteRandomL
                398:          ;ldx    tempx       restore x to original value
2191 DE00       399:          LDX     tempx
2193 39         400:          rts




ASM/6800 1.4A0: 2193 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 54; Form 2      *** SDOS Boot time Initialization Code ***
SDOS6800.ASM
  2194          402: DoSyscall ; Execute syscall (X) and print error if failed
                403:          ;jsr    syscallentry
2194 BDB1B2     404:          JSR     syscallentry
2197 25B4       405:          bcs     initializeerr
2199 39         406:          rts
                407: 
  219A          408: ERRWRONGSERIALNUMBER ; print out serial no of CPU, SerialNumber.sys and die.
                409:          ;jsr    getserialnumberaddress get pointer to ROM serial number
219A BDBA83     410:          JSR     getserialnumberaddress
                411:          ;ldd    #CPUSerialNumber Where to put converted serial number
219D C651       412:          LDAB    #(CPUSerialNumber)&$FF
219F 8622       413:          LDAA    #(CPUSerialNumber)/256
                414:          ;jsr    cvttohexserialno convert (X) to hexadecimal serial # string
21A1 BD22B8     415:          JSR     cvttohexserialno
                416:          ;ldx    #openserialno.sys
21A4 CE2746     417:          LDX     #openserialno.sys
21A7 8DEB       418:          bsr     dosyscall
                419:          ;ldx    #ReadSerialNumberFromFile into DecryptBuffer
21A9 CE2761     420:          LDX     #ReadSerialNumberFromFile
21AC 8DE6       421:          bsr     dosyscall
                422:          ;ldx    #decryptbuffer
21AE CEB05D     423:          LDX     #decryptbuffer
                424:          ;ldd    #SDOSSerialNumber where to put Ascii hex version of Serial #
21B1 C61B       425:          LDAB    #(SDOSSerialNumber)&$FF
21B3 8622       426:          LDAA    #(SDOSSerialNumber)/256
                427:          ;jsr    cvttohexserialno
21B5 BD22B8     428:          JSR     cvttohexserialno
                429:          ;ldx    #PrintCantRun
21B8 CE21ED     430:          LDX     #PrintCantRun
21BB 8DD7       431:          bsr     dosyscall




ASM/6800 1.4A0: 21BB SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 55; Form 2      *** SDOS Boot time Initialization Code ***
SDOS6800.ASM
  21BD          433: WaitforMessagePrinted
21BD 862D       434:          ldaa    #4*(CantRunMsgEnd-CantRunmsg)//10 max time to print message
  21BF          435: delayloop ; wait for 8 * 65536 * .5 sec = .262 second
21BF 09         436:          dex
21C0 26FD       437:          bne     delayloop
21C2 4A         438:          deca    down count # quarter-seconds to delay...
21C3 26FA       439:          bne     delayloop
                440:          ;ldx    zapmemoryloop copy zap memory routine to $100
21C5 FE21E5     441:          LDX     zapmemoryloop
21C8 FF0100     442:          stx     $100
                443:          ;ldx    zapmemoryloop+2
21CB FE21E7     444:          LDX     zapmemoryloop+2
21CE FF0102     445:          stx     $102
                446:          ;ldx    zapmemoryloop+4
21D1 FE21E9     447:          LDX     zapmemoryloop+4
21D4 FF0104     448:          stx     $104
                449:          ;ldx    zapmemoryloop+6
21D7 FE21EB     450:          LDX     zapmemoryloop+6
21DA FF0106     451:          stx     $106
                452:          ;ldx    #$c000      erase memory (Paranoia strikes!)
21DD CEC000     453:          LDX     #$c000
21E0 863E       454:          ldaa    #$3E        wait for interrupt opcode
                455:          ;jmp    $100        go destory memory
21E2 7E0100     456:          JMP     $100
                457: 
  21E5          458: zapmemoryloop ; destroy memory contents
                459:          ;sta    ,-x         this loop will stop...
21E5 09         460:          DEX
21E6 A700       461:          STAA    0,X
                462:          ;sta    ,-x         when ZapLast is overwritten
21E8 09         463:          DEX
21E9 A700       464:          STAA    0,X
21EB 20F8       465:          bra     zapmemoryloop




ASM/6800 1.4A0: 21EB SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 56; Form 2      *** SDOS Boot time Initialization Code ***
SDOS6800.ASM
  21ED          467: PrintCantRun ; Syscall to print "Can't run on this CPU"
21ED 0C08       468:          fcb     Syscall:Writea,Writea:Sclen
21EF 0000       469:          fcb     0,ignored
21F1 21F5006F   470:          fdb     CantRunMsg,CantRunMsgEnd-CantRunMsg
                471: 
  21F5          472: Cantrunmsg
21F5 43616E6E   473:          fcc     "Cannot run SDOS for CPU serial number "
  221B          474: SDOSSerialNumber
221B 78787878   475:          fcc     "xxxxxxxxxxxxxxxx"
222B 0D         476:          fcb     ascii:cr
222C 6F6E2074   477:          fcc     "on this processor (CPU serial number "
  2251          478: CPUSerialNumber
2251 78787878   479:          fcc     "xxxxxxxxxxxxxxxx)."
2263 0D         480:          fcb     ascii:cr
  2264          481: Cantrunmsgend
                482: 
  2264          483: SayInvalidROM ; Tell would-be theif that ROM isn't right!
                484: *        Transfers to this location must be via RTS with registers trashed...
                485: *        So that a breakpoint here cannot be used to trace backwards...
                486: *        to the code jumping here
                487:          ;ldx    #PrintInvalidROM Let the theif know
2264 CE226D     488:          LDX     #PrintInvalidROM
                489:          ;jsr    dosyscall
2267 BD2194     490:          JSR     dosyscall
                491:          ;jmp    WaitforMessagePrinted and then erase memory
226A 7E21BD     492:          JMP     WaitforMessagePrinted
                493: 
  226D          494: PrintInvalidROM ; Syscall to display "Invalid ROM"
226D 0C08       495:          fcb     Syscall:Writea,Writea:Sclen
226F 0000       496:          fcb     0,ignored
2271 22750043   497:          fdb     InvalidROMMsg,InvalidROMMsgEnd-InvalidROMMSG
                498: 
  2275          499: InvalidROMMsg
2275 426F6F74   500:          fcc     "Boot ROM not constructed properly for Serial Numbered SDOS Systems"
22B7 0D         501:          fcb     ascii:cr
  22B8          502: InvalidROMMsgEnd




ASM/6800 1.4A0: 22B7 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 57; Form 2      *** SDOS Boot time Initialization Code ***
SDOS6800.ASM
                504: *
                505: *        CvttoHexSerialNo -- Convert (X) for 8 bytes to Ascii serial number
                506: *        (D) points to target string buffer
                507: *
  22B8          508: CvttoHexSerialNo
                509:          ;std    topointer   save pointer to target
22B8 F70001     510:          STAB    topointer+1
22BB B70000     511:          STAA    topointer
22BE C608       512:          ldab    #SerialNumber:Size # bytes to convert
  22C0          513: CvttoHexSerialNoloop ; convert a byte
22C0 37         514:          pshb
                515:          ;lda    ,x+
22C1 A600       516:          LDAA    0,X
22C3 08         517:          INX
22C4 8D17       518:          bsr     HextoD      Ascii of both nibbles to (D)
22C6 FF0002     519:          stx     frompointer
                520:          ;ldx    topointer   target buffer pointer
22C9 FE0000     521:          LDX     topointer
                522:          ;std    ,x++
22CC E701       523:          STAB    (0)+1,X
22CE A700       524:          STAA    0,X
22D0 08         525:          INX
22D1 08         526:          INX
22D2 FF0000     527:          stx     topointer
                528:          ;ldx    frompointer
22D5 FE0002     529:          LDX     frompointer
22D8 33         530:          pulb
22D9 5A         531:          decb
22DA 26E4       532:          bne     CvttoHexSerialNoLoop b/ more byte to convert
22DC 39         533:          rts
                534: 
  22DD          535: Hextod ; Convert (A) to Ascii Hex in (a,b)
22DD 16         536:          tab     duplicate byte so we can split into nibbles
22DE 44         537:          lsra    move upper nibble to lower part of (a)
22DF 44         538:          lsra
22E0 44         539:          lsra
22E1 44         540:          lsra
22E2 C40F       541:          andb    #$F         extract lower nibble
22E4 8B30       542:          adda    #'0         convert (a) to hex digit
                543:          ;cmpa   #'9         valid digit?




ASM/6800 1.4A0: 22E6 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 58; Form 2      *** SDOS Boot time Initialization Code ***
SDOS6800.ASM
22E6 8139       544:          CMPA    #'9
22E8 2302       545:          bls     Hextod1     b/ yep.
22EA 8B07       546:          adda    #'A-10-'0   no, convert to A-F hex.
  22EC          547: Hextod1
22EC CB30       548:          addb    #'0         convert (b) to hex ascii
                549:          ;cmpb   #'9         valid digit?
22EE C139       550:          CMPB    #'9
22F0 2302       551:          bls     Hextod2     b/ yep.
22F2 CB07       552:          addb    #'A-10-'0   no, convert to A-F hex
  22F4          553: Hextod2
22F4 39         554:          rts
                555: 
22F5 00         556: SDOSINITCKSUM    FCB         CHANGED CHECKSUM OVER SDOSINIT CODE
                557: *
                558: *        SDOSINITCKSUM has a value such that the "sum" of all bytes...
                559: *        between SDOSINIT and SDOSINITEND is zero.
                560: *        Note that SDOSINITCKSUM is part of that sum.




ASM/6800 1.4A0: 22F5 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 59; Form 3      *** SDOS Boot time Initialization Code ***
SDOS6800.ASM
  22F6            1: SDOSINITERRED    EQU         *
                  2:          ;JMP    ERRORINX
22F6 7EB200       3:          JMP     ERRORINX
                  4: 
  22F9            5: SDOSINITS        ; INITIALIZING SUBROUTINE
                  6: *
                  7: *        WITH INTERRUPTS DISABLED, GO RESET ALL THE DEVICE DRIVERS
                  8: *
                  9:          ;LDX    CODE+SDOS:CONFIGURATION SCAN THROUGH THE DEVICE LIST
22F9 FEAE03      10:          LDX     CODE+SDOS:CONFIGURATION
                 11:          ;LDX    CNFG:DEVICEDCBS,X AND RESET EACH DEVICE FOUND IN THE LIST
22FC EE02        12:          LDX     CNFG:DEVICEDCBS,X
22FE DF06        13:          STX     DCBPOINTER  SAVE POINTER TO DCB LIST
                 14:          ;LDX    DCB:DRIVER,X SAVE POINTER TO CONSOLE DRIVER FOR USE BY READA
2300 EE07        15:          LDX     DCB:DRIVER,X
2302 FFAE52      16:          STX     CONSOLEDRIVER
                 17:          ;LDX    DCBPOINTER  FIND OUT LENGTH OF CONSOLE DEVICE NAME
2305 DE06        18:          LDX     DCBPOINTER
                 19:          ;LDX    DCB:NAME,X
2307 EE03        20:          LDX     DCB:NAME,X
2309 FFAF96      21:          STX     CONSOLENAMEPTR SAVE ADDRESS OF CONSOLE NAME
  230C           22: SDOSINIT0        ; LOOP TO COMPUTE LENGTH OF CONSOLE DEVICE NAME
230C 08          23:          INX                 BUMP POINTER TO CONSOLE DEVICE NAME PAST NAME CHARACTER
                 24:          ;INC    CONSOLENAMELEN+1 BUMP # CHARACTERS IN CONSOLE NAME LENGTH
230D 7CAF99      25:          INC     CONSOLENAMELEN+1
2310 A600        26:          LDAA    ,X          LOOK AT BYTE OF CONSOLE NAME
2312 26F8        27:          BNE     SDOSINIT0   B/ NOT END OF CONSOLE DEVICE NAME
2314 2002        28:          BRA     SDOSINIT1A  GO RESET THE DEVICES IN THE LIST
                 29: 
  2316           30: SDOSINIT1        ; FIND END OF NEXT DEVICE NAME
2316 DF06        31:          STX     DCBPOINTER  SAVE POINTER TO REST OF DEVICE NAME LIST
  2318           32: SDOSINIT1A       EQU         *
                 33:          ;LDX    DCBPOINTER  RESET A DEVICE
2318 DE06        34:          LDX     DCBPOINTER
                 35:          ;LDX    DCB:DRIVER,X WITH INTERRUPTS OFF....
231A EE07        36:          LDX     DCB:DRIVER,X
231C FFAE54      37:          STX     DRIVERVPOINTER AND INTERRUPT SYSTEM NOT READY!
                 38:          ;JSR    [DRIVER:RESET,X]
231F EE16        39:          LDX     DRIVER:RESET,X
2321 AD00        40:          JSR     0,X




ASM/6800 1.4A0: 2323 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 60; Form 3      *** SDOS Boot time Initialization Code ***
SDOS6800.ASM
2323 25D1        41:          BCS     SDOSINITERRED B/ DRIVER HAD AN ERROR!
                 42:          ;LDX    DCBPOINTER  GET ADDRESS OF REST OF DEVICE NAME LIST
2325 DE06        43:          LDX     DCBPOINTER
                 44:          ;LDX    DCB:NEXTDCB,X END OF LIST ?
2327 EE05        45:          LDX     DCB:NEXTDCB,X
2329 26EB        46:          BNE     SDOSINIT1   B/ NO, GO RESET THE NEXT DEVICE
                 47:          ;JSR    [DRIVER:RESET+DISKFILEDRIVER] RESET THE DISK FILE DRIVER
232B FEBCCA      48:          LDX     DRIVER:RESET+DISKFILEDRIVER
232E AD00        49:          JSR     0,X
                 50:          ;JSR    [DRIVER:RESET+DISKDEVICEDRIVER] RESET THE DISK DEVICE DRIVER
2330 FEBCA9      51:          LDX     DRIVER:RESET+DISKDEVICEDRIVER
2333 AD00        52:          JSR     0,X
                 53: *** NOTE: THE DISK DRIVERS ARE RESET LAST SO THAT THE INIT ROUTINES...
                 54: *** FOR ALL THE OTHER DEVICES CAN BE ASSEMBLED AND EXECUTED IN THE
                 55: *** DISK BUFFER AREA (SETTING UP THE DISK DRIVERS DESTROYS THE CONTENTS OF THE BUFFER 




ASM/6800 1.4A0: 2333 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 61; Form 3      *** SDOS Boot time Initialization Code ***
SDOS6800.ASM
                 57: *
                 58: *        SET UP INTERRUPT SYSTEM
                 59: *
                 60:          ;LDX    CODE+SDOS:CONFIGURATION SET UP THE INTERRUPT STACK POINTER...
2335 FEAE03      61:          LDX     CODE+SDOS:CONFIGURATION
                 62:          ;LDX    CNFG:INTERRUPTSTACK,X SO SCHEDULER CAN GRAB ITS VALUE QUICKLY
2338 EE1C        63:          LDX     CNFG:INTERRUPTSTACK,X
233A FFAF86      64:          STX     INTERRUPTSTACK
                 65:          ;LDX    CODE+SDOS:CONFIGURATION MAKE A "JMP IOINTPOLL"...
233D FEAE03      66:          LDX     CODE+SDOS:CONFIGURATION
                 67:          ;LDX    CNFG:IOINTPOLL,X SO WE CAN GET TO DEVICE POLL ROUTINE QUICKLY
2340 EE1E        68:          LDX     CNFG:IOINTPOLL,X
2342 FFAF89      69:          STX     JMPIOINT+1  THE "JMP" PART IS ASSEMBLED IN, ALREADY
                 70:          ;LDX    CODE+SDOS:CONFIGURATION SET UP "INTDISABLE"
2345 FEAE03      71:          LDX     CODE+SDOS:CONFIGURATION
2348 A613        72:          LDAA    CNFG:INTDISABLE,X GRAB THE 3 BYTES FROM THE CONFIGURATION TABLE
                 73:          ;LDX    CNFG:INTDISABLE+1,X
234A EE14        74:          LDX     CNFG:INTDISABLE+1,X
234C B7AF7D      75:          STAA    INTDISABLE  AND STORE THEM IN A MORE CONVENIENT PLACE
234F FFAF7E      76:          STX     INTDISABLE+1
                 77:          ;LDX    CODE+SDOS:CONFIGURATION SET UP "INTENABLE"
2352 FEAE03      78:          LDX     CODE+SDOS:CONFIGURATION
2355 A616        79:          LDAA    CNFG:INTENABLE,X
                 80:          ;LDX    CNFG:INTENABLE+1,X
2357 EE17        81:          LDX     CNFG:INTENABLE+1,X
2359 B7AF80      82:          STAA    INTENABLE
235C FFAF81      83:          STX     INTENABLE+1
                 84:          ;LDX    CODE+SDOS:CONFIGURATION SET UP "INTRTI"
235F FEAE03      85:          LDX     CODE+SDOS:CONFIGURATION
2362 A619        86:          LDAA    CNFG:INTRTI,X
                 87:          ;LDX    CNFG:INTRTI+1,X
2364 EE1A        88:          LDX     CNFG:INTRTI+1,X
2366 B7AF83      89:          STAA    INTRTI
2369 FFAF84      90:          STX     INTRTI+1
                 91:          ;LDX    CODE+SDOS:CONFIGURATION SET UP NUMBER OF TIME OUT BLOCKS
236C FEAE03      92:          LDX     CODE+SDOS:CONFIGURATION
                 93:          ;LDD    CNFG:TIMEOUTLIST,X GRAB POINTER TO LIST OF TIMEOUT BLOCKS
236F E623        94:          LDAB    (CNFG:TIMEOUTLIST)+1,X
2371 A622        95:          LDAA    CNFG:TIMEOUTLIST,X
                 96:          ;STD    DELAYBLOCK+TIMEOUT:LINK ATTACH TO DELAYBLOCK TIMEOUT BLOCK




ASM/6800 1.4A0: 2373 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 62; Form 3      *** SDOS Boot time Initialization Code ***
SDOS6800.ASM
2373 F7AE5F      97:          STAB    DELAYBLOCK+TIMEOUT:LINK+1
2376 B7AE5E      98:          STAA    DELAYBLOCK+TIMEOUT:LINK
                 99:          ;LDD    #DELAYBLOCK MAKE CONFIGURATION TABLE POINT TO DELAY BLOCK
2379 C65E       100:          LDAB    #(DELAYBLOCK)&$FF
237B 86AE       101:          LDAA    #(DELAYBLOCK)/256
                102:          ;STD    CNFG:TIMEOUTLIST,X ASSERT: # TIMEOUT BLOCKS NOW >= 1!
237D E723       103:          STAB    (CNFG:TIMEOUTLIST)+1,X
237F A722       104:          STAA    CNFG:TIMEOUTLIST,X
                105:          ;LDX    CNFG:TIMEOUTLIST,X COUNT NUMBER OF TIMEOUT BLOCKS
2381 EE22       106:          LDX     CNFG:TIMEOUTLIST,X
                107: 
  2383          108: SDOSINIT1L       ; COUNT # TIMEOUT BLOCKS
                109:          ;INC    NTIMEOUTBLKS COUNT A TIMEOUT BLOCK
2383 7CAE5A     110:          INC     NTIMEOUTBLKS
                111:          ;LDX    TIMEOUT:LINK,X FIND ADDRESS OF NEXT TIMEOUT BLOCK
2386 EE00       112:          LDX     TIMEOUT:LINK,X
2388 26F9       113:          BNE     SDOSINIT1L  B/ ANOTHER TIMEOUT BLOCK FOUND!
  238A          114: SDOSINIT1B       EQU         *




ASM/6800 1.4A0: 2388 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 63; Form 3      *** SDOS Boot time Initialization Code ***
SDOS6800.ASM
                116: *
                117: *        SET UP TASKS
                118: *
                119: *        ADD TIMEOUT TASK AND USER TASK TO END OF TASK QUEUE
                120: *
                121:          ;LDD    CODE+SDOS:CONFIGURATION COMPUTE POINTER TO "CNFG:TASKQUEUE"
238A F6AE04     122:          LDAB    CODE+SDOS:CONFIGURATION+1
238D B6AE03     123:          LDAA    CODE+SDOS:CONFIGURATION
                124:          ;ADDD   #CNFG:TASKQUEUE
2390 CB20       125:          ADDB    #(CNFG:TASKQUEUE)&$FF
2392 8900       126:          ADCA    #(CNFG:TASKQUEUE)/256
                127:          ;TDX
2394 9700       128:          STAA    TEMPA
2396 D701       129:          STAB    TEMPB
2398 DE00       130:          LDX     TEMPX
  239A          131: SDOSINITTCB1     ; FIND END OF TASK QUEUE SO WE CAN TACK ON SDOS TASKS
239A DF00       132:          STX     TEMPX       IN CASE THIS TCB IS THE LAST IN THE QUEUE
                133:          ;LDX    TCB:LNK,X   FOLLOW LINK TO NEXT TCB
239C EE00       134:          LDX     TCB:LNK,X
239E 26FA       135:          BNE     SDOSINITTCB1 B/ NO, CHARGE!
                136:          ;LDX    TEMPX       THIS GUY IS LAST IN QUEUE
23A0 DE00       137:          LDX     TEMPX
                138:          ;LDD    #TIMEOUTTASKTCB MAKE HIM POINT TO SDOS'S TWO TASKS
23A2 C67A       139:          LDAB    #(TIMEOUTTASKTCB)&$FF
23A4 86AE       140:          LDAA    #(TIMEOUTTASKTCB)/256
                141:          ;STD    TCB:LNK,X
23A6 E701       142:          STAB    (TCB:LNK)+1,X
23A8 A700       143:          STAA    TCB:LNK,X
                144:          ;LDX    CODE+SDOS:CONFIGURATION INITIALIZE THE TASK CONTROL BLOCKS
23AA FEAE03     145:          LDX     CODE+SDOS:CONFIGURATION
                146:          ;LDX    CNFG:TASKQUEUE,X GET POINTER TO FIRST TCB IN LIST
23AD EE20       147:          LDX     CNFG:TASKQUEUE,X
  23AF          148: SDOSINITTCBL     ; MARK TASK AS "EXECUTING"
                149:          ;LDD    #EXECUTING
23AF C63C       150:          LDAB    #(EXECUTING)&$FF
23B1 86DE       151:          LDAA    #(EXECUTING)/256
                152:          ;STD    TCB:COND,X
23B3 E705       153:          STAB    (TCB:COND)+1,X
23B5 A704       154:          STAA    TCB:COND,X
                155:          ;LDX    TCB:LNK,X   FIND NEXT TASK




ASM/6800 1.4A0: 23B7 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 64; Form 3      *** SDOS Boot time Initialization Code ***
SDOS6800.ASM
23B7 EE00       156:          LDX     TCB:LNK,X
23B9 26F4       157:          BNE     SDOSINITTCBL B/ MORE TASKS TO MARK
                158:          ;LDX    CODE+SDOS:CONFIGURATION LET I/O PACKAGE SET UP ITS END OF INTERRUPT S
23BB FEAE03     159:          LDX     CODE+SDOS:CONFIGURATION
                160:          ;JSR    [CNFG:INTSETUP,X] THIS MUST BE LAST SO I/O PACK CAN TACK...
23BE EE11       161:          LDX     CNFG:INTSETUP,X
23C0 AD00       162:          JSR     0,X
                163: *        LOW PRIORITY TIMEOUT TASK ON TASK QUEUE
                164:          ;LDX    #FORCESCHEDULE TRIGGER INTERRRUPT
23C2 CEDDCB     165:          LDX     #FORCESCHEDULE
                166:          ;JSR    CODE+SDOS:STARTIO TO CAUSE ALL TASKS TO START RUNNING
23C5 BDAE24     167:          JSR     CODE+SDOS:STARTIO
                168: *        INTERRUPTS ARE ON WHEN WE RETURN!
                169: *
                170: *        RESET THE I/O CONTROL BLOCKS
                171: *
                172:          ;JSR    INITIOCBS   SO THEY ALL APPEAR TO BE CLOSED
23C8 BD2686     173:          JSR     INITIOCBS
                174: *
                175: *        MAKE THE LOG AND THE SYS CHANNEL FREE
                176: *
                177:          ;LDX    #0
23CB CE0000     178:          LDX     #0
23CE FFAF3E     179:          STX     LOGIOCB+IOCB:DRIVER
23D1 FFAF60     180:          STX     SYSIOCB+IOCB:DRIVER




ASM/6800 1.4A0: 23D1 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 65; Form 3      *** SDOS Boot time Initialization Code ***
SDOS6800.ASM
                182: *
                183: *        DOUBLE-CHECK CHECKSUM COMPUTED BY SDOSINIT
                184: *        IF WRONG, ASSUME WE'VE BEEN TAMPERED WITH, AND GET EVEN!
                185: *
                186:          ;LDX    #SDOSINIT-26 NO POINT IN MAKING THIS OBVIOUS...
23D4 CE1FE6     187:          LDX     #SDOSINIT-26
23D7 5F         188:          CLRB                ZERO A CHECKSUM REGISTER
  23D8          189: SDOSINITDBLCHECKL
23D8 08         190:          INX                 DO THIS OUT OF ORDER TO MAKE CODE HARD TO RECOGNIZE
23D9 58         191:          ASLB
23DA C900       192:          ADCB    #0          DON'T DO "ADCB n,X" CAUSE THAT'S EASY TO FIND...
23DC EB19       193:          ADDB    25,X        AND THIS HAS THE SAME EFFECT ANYWAY!
23DE 8C26A3     194:          CPX     #SDOSINITEND-25-1 DONE CHECKSUMMING?
23E1 26F5       195:          BNE     SDOSINITDBLCHECKL B/ NO
23E3 9F00       196:          STS     TEMPX       NOW ADD (B) TO (S)...
23E5 DB01       197:          ADDB    TEMPX+1     (S) WON'T CHANGE IF CHECKSUM IS CORRECT (ZERO!)
                198:          ;STB    TEMPX+1     OTHERWISE, IT WILL CHANGE BY SOME AMOUNT...
23E7 D701       199:          STAB    TEMPX+1
23E9 9E00       200:          LDS     TEMPX       THAT WILL CAUSE "RTS" BELOW TO BLOW UP!
                201:          ;JSR    OPENCONSOLE OPEN UP CHANNEL 0 TO THE CONSOLE
23EB BDB899     202:          JSR     OPENCONSOLE
                203:          ;LDX    #EXITCOPYRIGHT THEN SAY "HELLO!"
23EE CE2707     204:          LDX     #EXITCOPYRIGHT
                205:          ;JSR    SYSCALLENTRY
23F1 BDB1B2     206:          JSR     SYSCALLENTRY
                207: *
                208: *        PRINT DISK IDENTIFICATION
                209: *
                210:          ;LDX    DEFAULTDISKDCB SET UP TO READ LSN 0 ON DRIVE 0
23F4 FEAE4C     211:          LDX     DEFAULTDISKDCB
23F7 FFAF12     212:          STX     SYSSECTORDB+SECTORDB:DISKINFO
                213:          ;LDX    #SYSSECTORDB MAKE A ZEROED LSN
23FA CEAF12     214:          LDX     #SYSSECTORDB
                215:          ;CLR    SECTORDB:LSN,X
23FD 6F02       216:          CLR     SECTORDB:LSN,X
                217:          ;CLR    SECTORDB:LSN+1,X
23FF 6F03       218:          CLR     SECTORDB:LSN+1,X
                219:          ;CLR    SECTORDB:LSN+2,X
2401 6F04       220:          CLR     SECTORDB:LSN+2,X
                221:          ;JSR    READSECTOR  GO READ SECTOR ZERO




ASM/6800 1.4A0: 2403 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 66; Form 3      *** SDOS Boot time Initialization Code ***
SDOS6800.ASM
2403 BDD8F3     222:          JSR     READSECTOR
                223:          ;LDX    RDSI:SECTORBASE,X GET BASE OF SECTOR BUFFER
2406 EE05       224:          LDX     RDSI:SECTORBASE,X
2408 8620       225:          LDAA    #BOOT:DISKID FIND BEGINNING OF DISK ID MESSAGE
  240A          226: SDOSINIT2        EQU         *
240A 08         227:          INX
240B 4A         228:          DECA
240C 26FC       229:          BNE     SDOSINIT2   = BASE OF SECTOR + BOOT:DISKID
240E FF2713     230:          STX     SDOSINITID+WRITEA:BUFFERP SAVE POINTER TO STRING
                231:          ;JSR    WAITRDSI    ...
2411 BDDAA1     232:          JSR     WAITRDSI
                233:          ;LDX    RDSI:SECTORBASE,X GET POINTER TO SECTOR ZERO BUFFER
2414 EE05       234:          LDX     RDSI:SECTORBASE,X
2416 A619       235:          LDAA    BOOT:CREATIONDATE+1,X DISPLAY CREATION DATE
                236:          ;JSR    BCDTOASCII  CONVERT BCD DIGITS TO ASCII IN (A,B)
2418 BD2448     237:          JSR     BCDTOASCII
                238:          ;STD    INITDATE    STORE DAY INTO INITIALIZED DATE STRING
241B F72720     239:          STAB    INITDATE+1
241E B7271F     240:          STAA    INITDATE
2421 A61A       241:          LDAA    BOOT:CREATIONDATE+2,X CONVERT YEAR
                242:          ;JSR    BCDTOASCII
2423 BD2448     243:          JSR     BCDTOASCII
                244:          ;STD    INITDATE+6
2426 F72726     245:          STAB    INITDATE+6+1
2429 B72725     246:          STAA    INITDATE+6
242C A618       247:          LDAA    BOOT:CREATIONDATE,X GET BCD EQUIVALENT OF CREATION DATE
                248:          ;JSR    BCDTOASCII
242E BD2448     249:          JSR     BCDTOASCII
                250:          ;STD    INITDATE+3
2431 F72723     251:          STAB    INITDATE+3+1
2434 B72722     252:          STAA    INITDATE+3
                253:          ;LDX    #DISPLAYINITDATE
2437 CE2717     254:          LDX     #DISPLAYINITDATE
                255:          ;JSR    SYSCALLENTRY DISPLAY DATE THE DISK WAS INITIALIZED
243A BDB1B2     256:          JSR     SYSCALLENTRY
                257:          ;LDX    #SDOSINITID AND GO PRINT THE DISK ID
243D CE270F     258:          LDX     #SDOSINITID
                259:          ;JSR    SYSCALLENTRY
2440 BDB1B2     260:          JSR     SYSCALLENTRY
                261:          ;JSR    EXITCR      AND PRINT A TERMINATING "CR"




ASM/6800 1.4A0: 2443 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 67; Form 3      *** SDOS Boot time Initialization Code ***
SDOS6800.ASM
2443 BDB87D     262:          JSR     EXITCR
2446 0C39       263:          OKRTS               ALL DONE!




ASM/6800 1.4A0: 2446 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 68; Form 3      *** SDOS Boot time Initialization Code ***
SDOS6800.ASM
                265: *
                266: *        BCDTOASCII -- CONVERT BCD DIGIT PAIR IN (A)...
                267: *                INTO ITS CONSTITUENT ASCII DIGITS IN (A,B)
                268: *
  2448          269: BCDTOASCII       EQU         *
2448 16         270:          TAB
2449 44         271:          LSRA
244A 44         272:          LSRA
244B 44         273:          LSRA
244C 44         274:          LSRA
244D C40F       275:          ANDB    #$F
                276:          ;ADDD   #'0*256+'0
244F CB30       277:          ADDB    #('0*256+'0)&$FF
2451 8930       278:          ADCA    #('0*256+'0)/256
2453 39         279:          RTS
                280: *
                281: *        DSKFRESET -- DISK FILE DRIVER RESET
                282: *
  2454          283: DSKFRESET        EQU         *
                284:          ;JSR    INITDISKINFO SET UP ALL THE TABLES
2454 BD25C4     285:          JSR     INITDISKINFO
                286:          ;JSR    INITFCBS
2457 BD2593     287:          JSR     INITFCBS
                288:          ;JSR    INITRDSI
245A BD245F     289:          JSR     INITRDSI
245D 0C39       290:          OKRTS




ASM/6800 1.4A0: 245D SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 69; Form 4      *** SDOS Boot time Initialization Code ***
SDOS6800.ASM
                  2: *
                  3: *        INITRDSI -- SETS UP RESIDENT DISK SECTOR INFO TABLE
                  4: *                ALLOCATES FROM CNFG:FREESPACE IN FOLLOWING WAY
                  5: *                1)  FIND FIRST WORD IN FREESPACE WHICH IS ON A SECTOR BOUNDARY
                  6: *                2)  COUNT # RDSIS ALLOCATABLE BELOW THAT
                  7: *                3)  COUNT # SECTOR BUFFERS ALLOCATABLE FROM FREESPACE REMAINING
                  8: *                4)  COUNT # RDSIS ALLOCATABLE FROM REMAINDER
                  9: *                5)  IF # RDSIS<# SECTOR BUFFS, USE A SECTOR BUFF FOR MORE RDSIS
                 10: *                6)  LOOP ON 5 UNTIL # RDSIS>=#SECTOR BUFFERS
                 11: *                7)  ALLOCATE RDSIS
                 12: *                8)  ALLOCATE SECTORS AS A LUMP
                 13: *                9)  ALLOCATE REST OF RDSIS
                 14: *                10) DISTRIBUTE SECTOR BUFFERS TO RDSIS
                 15: *                11) DONE
                 16: *
  245F           17: INITRDSI EQU     *
                 18: * 1)  FIND FIRST WORD IN FREESPACE THAT CAN BE A SECTOR BOUNDARY
                 19:          ;LDX    CODE+SDOS:CONFIGURATION
245F FEAE03      20:          LDX     CODE+SDOS:CONFIGURATION
                 21:          ;LDD    CNFG:DSKBUFFERPOOL,X FIND 1ST POWER OF 2 BOUNDARY
2462 E608        22:          LDAB    (CNFG:DSKBUFFERPOOL)+1,X
2464 A607        23:          LDAA    CNFG:DSKBUFFERPOOL,X
                 24: *        WHICH IS A MULTIPLE OF CNFG:SECSIZE
                 25:          ;ADDD   MAXSECTORSIZE
2466 FBAF0F      26:          ADDB    MAXSECTORSIZE+1
2469 B9AF0E      27:          ADCA    MAXSECTORSIZE
                 28:          ;SUBD   #1          ROUND UP TO NEXT BOUNDARY
246C C001        29:          SUBB    #(1)&$FF
246E 8200        30:          SBCA    #(1)/256
                 31:          ;PSHD               SAVE POINTER INTO 1ST SECTOR BUFFER
2470 37          32:          PSHB
2471 36          33:          PSHA
                 34:          ;LDD    MAXSECTORSIZE MAKE A BOUNDARY MASK
2472 F6AF0F      35:          LDAB    MAXSECTORSIZE+1
2475 B6AF0E      36:          LDAA    MAXSECTORSIZE
                 37:          ;SUBD   #1
2478 C001        38:          SUBB    #(1)&$FF
247A 8200        39:          SBCA    #(1)/256
                 40:          ;COMD
247C 53          41:          COMB




ASM/6800 1.4A0: 247D SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 70; Form 4      *** SDOS Boot time Initialization Code ***
SDOS6800.ASM
247D 43          42:          COMA
                 43:          ;ANDD   0,S         MASK TO OBTAIN FIRST SECTOR BOUNDARY
247E 30          44:          TSX
247F E401        45:          ANDB    (0)+1,X
2481 A400        46:          ANDA    0,X
                 47:          ;LEAS   2,S
  0000           48:          IF      2<0
 *S*             49:          RPT     -2
 *S*             50:          DES
                 51:          ELSE
  0002           52:          RPT     2
2483 31          53:          INS
                 54:          FIN
                 55:          ;STD    FIRSTBUF
2485 F72700      56:          STAB    FIRSTBUF+1
2488 B726FF      57:          STAA    FIRSTBUF
                 58: * 2) COUNT # RDSI'S ALLOCATABLE
                 59:          ;LDX    CODE+SDOS:CONFIGURATION
248B FEAE03      60:          LDX     CODE+SDOS:CONFIGURATION
                 61:          ;SUBD   CNFG:DSKBUFFERPOOL,X COMPUTE # WORDS BETWEEN
248E E008        62:          SUBB    (CNFG:DSKBUFFERPOOL)+1,X
2490 A207        63:          SBCA    CNFG:DSKBUFFERPOOL,X
                 64:          ;CMPD   CNFG:DSKPOOLSIZE,X FIRST WORD OF FS AND FIRSTBUF
2492 A109        65:          CMPA    CNFG:DSKPOOLSIZE,X
2494 2602        66:          BNE     MACRO:0007
2496 E10A        67:          CMPB    (CNFG:DSKPOOLSIZE)+1,X
  2498           68: MACRO:0007
2498 2260        69:          BHI     ERRNOTENOUGHPOOL B/ >, ILLEGAL SPACE ALLOCATION
  249A           70: INITRDSI1        EQU         *
                 71:          ;STD    FIRSTSEGSIZE SAVE 1ST SEGMENT SIZE
249A F72702      72:          STAB    FIRSTSEGSIZE+1
249D B72701      73:          STAA    FIRSTSEGSIZE
                 74:          ;CLR    NRDSIS      NRDSIS := 0
24A0 7FAF09      75:          CLR     NRDSIS
  24A3           76: INITRDSI2        EQU         *
                 77:          ;INC    NRDSIS      ROOM FOR ONE MORE RDSI
24A3 7CAF09      78:          INC     NRDSIS
24A6 2706        79:          BEQ     INITRDSI2A  B/ QUIT IF 255 RDSI'S AVAILABLE
                 80:          ;SUBD   #RDSI:SIZE
24A8 C014        81:          SUBB    #(RDSI:SIZE)&$FF




ASM/6800 1.4A0: 24AA SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 71; Form 4      *** SDOS Boot time Initialization Code ***
SDOS6800.ASM
24AA 8200        82:          SBCA    #(RDSI:SIZE)/256
24AC 24F5        83:          BCC     INITRDSI2   B/ MORE SPACE AVAILABLE
  24AE           84: INITRDSI2A       EQU         *
                 85:          ;DEC    NRDSIS      = ACTUAL # RDSI'S AVAILABLE SO FAR
24AE 7AAF09      86:          DEC     NRDSIS
                 87: * 3) COUNT # POTENTIAL SECTOR BUFFERS
                 88:          ;LDX    CODE+SDOS:CONFIGURATION
24B1 FEAE03      89:          LDX     CODE+SDOS:CONFIGURATION
                 90:          ;LDD    CNFG:DSKPOOLSIZE,X ALL OF FREE SPACE - SIZE OF 1ST SEGMENT
24B4 E60A        91:          LDAB    (CNFG:DSKPOOLSIZE)+1,X
24B6 A609        92:          LDAA    CNFG:DSKPOOLSIZE,X
                 93:          ;SUBD   FIRSTSEGSIZE
24B8 F02702      94:          SUBB    FIRSTSEGSIZE+1
24BB B22701      95:          SBCA    FIRSTSEGSIZE
                 96:          ;CLR    NBUFFERS    ASSUME 0 SECTOR BUFFERS AVAILABLE
24BE 7F2703      97:          CLR     NBUFFERS
  24C1           98: INITRDSI3        EQU         *
                 99:          ;INC    NBUFFERS    COUNT A BUFFER
24C1 7C2703     100:          INC     NBUFFERS
24C4 2708       101:          BEQ     INITRDSI3A  B/ QUIT IF 255 BUFFERS AVAILABLE
                102:          ;SUBD   MAXSECTORSIZE
24C6 F0AF0F     103:          SUBB    MAXSECTORSIZE+1
24C9 B2AF0E     104:          SBCA    MAXSECTORSIZE
24CC 24F3       105:          BCC     INITRDSI3   B/ MORE ROOM STILL
  24CE          106: INITRDSI3A       EQU         *
                107:          ;DEC    NBUFFERS    = ACTUAL NUMBER OF BUFFERS AVAILABLE
24CE 7A2703     108:          DEC     NBUFFERS
24D1 2727       109:          BEQ     ERRNOTENOUGHPOOL B/ NO BUFFERS AVAILABLE!
                110: * 4) COUNT # RDSI'S AVAILABLE FROM REMAINDER
  24D3          111: INITRDSI4L       EQU         *
                112:          ;ADDD   MAXSECTORSIZE
24D3 FBAF0F     113:          ADDB    MAXSECTORSIZE+1
24D6 B9AF0E     114:          ADCA    MAXSECTORSIZE
  24D9          115: INITRDSI4        EQU         *
                116:          ;INC    NRDSIS      BUMP # RDSI'S AVAILABLE
24D9 7CAF09     117:          INC     NRDSIS
24DC 270A       118:          BEQ     INITRDSI4A  B/ AT LEAST 255 AVAILABLE
                119:          ;SUBD   #RDSI:SIZE
24DE C014       120:          SUBB    #(RDSI:SIZE)&$FF
24E0 8200       121:          SBCA    #(RDSI:SIZE)/256




ASM/6800 1.4A0: 24E2 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 72; Form 4      *** SDOS Boot time Initialization Code ***
SDOS6800.ASM
24E2 24F5       122:          BCC     INITRDSI4   B/ MORE SPACE!
                123:          ;ADDD   #RDSI:SIZE  (A,B):= NUMBER OF BYTES LEFT OVER
24E4 CB14       124:          ADDB    #(RDSI:SIZE)&$FF
24E6 8900       125:          ADCA    #(RDSI:SIZE)/256
  24E8          126: INITRDSI4A       EQU         *
                127:          ;DEC    NRDSIS      = ACTUAL # RDSI'S AVAILABLE
24E8 7AAF09     128:          DEC     NRDSIS
                129: * 5) CHECK TO MAKE SURE # RDSI'S >= # SECTOR BUFFERS
24EB 36         130:          PSHA                SAVE (A)
24EC B6AF09     131:          LDAA    NRDSIS
                132:          ;CMPA   NBUFFERS
24EF B12703     133:          CMPA    NBUFFERS
24F2 32         134:          PULA                RESTORE (A)
24F3 240A       135:          BCC     INITRDSI7   B/ NRDSIS >= NBUFFERS
  24F5          136: INITRDSI6        ; NRDSIS < NBUFFERS
                137:          ;DEC    NBUFFERS    THROW AWAY A BUFFER
24F5 7A2703     138:          DEC     NBUFFERS
24F8 26D9       139:          BNE     INITRDSI4L  USE THROWN AWAY BUFFER AS SPACE FOR RDSI'S
  24FA          140: ERRNOTENOUGHPOOL EQU         *
                141:          ;JSR    ERRET
24FA BDB1F6     142:          JSR     ERRET
24FD 0402       143:          FDB     ERR:NOTENOUGHPOOL
                144: 
  24FF          145: INITRDSI7        ; NRDSIS >= NBUFFERS, USE NBUFFERS
24FF B62703     146:          LDAA    NBUFFERS
2502 B7AF09     147:          STAA    NRDSIS
                148:          ;CMPA   #1          ENOUGH RDSIS TO MAKE SDOS RUN?
2505 8101       149:          CMPA    #1
2507 23F1       150:          BLS     ERRNOTENOUGHPOOL B/ NOPE, MUST BE AT LEAST 2!
                151:          ;LDX    #LASTSECTORREADQ NOW ALLOCATE RDSI'S FROM FIRST SEGMENT
2509 CEAEEF     152:          LDX     #LASTSECTORREADQ
250C FFAEF6     153:          STX     LASTSECTORREADQ+RDSI:FLINK MAKE RDSI QUEUE EMPTY
250F FFAEF8     154:          STX     LASTSECTORREADQ+RDSI:BLINK
                155:          ;LDX    CODE+SDOS:CONFIGURATION
2512 FEAE03     156:          LDX     CODE+SDOS:CONFIGURATION
                157:          ;LDD    CNFG:DSKBUFFERPOOL,X GET POINTER TO NEXT POSSIBLE RDSI
2515 E608       158:          LDAB    (CNFG:DSKBUFFERPOOL)+1,X
2517 A607       159:          LDAA    CNFG:DSKBUFFERPOOL,X
2519 8D45       160:          BSR     ALLOCRDSIS  GO ALLOCATE SOME RDSI'S
                161: * 8) SKIP OVER SECTOR BUFFERS AS A LUMP




ASM/6800 1.4A0: 251B SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 73; Form 4      *** SDOS Boot time Initialization Code ***
SDOS6800.ASM
251B B6AF09     162:          LDAA    NRDSIS      = # BUFFERS TO SKIP (>=1)
251E B70004     163:          STAA    COUNT
                164:          ;LDD    FIRSTBUF
2521 F62700     165:          LDAB    FIRSTBUF+1
2524 B626FF     166:          LDAA    FIRSTBUF
  2527          167: INITRDSI8        ; SKIP A SECTOR BUFFER
                168:          ;ADDD   MAXSECTORSIZE
2527 FBAF0F     169:          ADDB    MAXSECTORSIZE+1
252A B9AF0E     170:          ADCA    MAXSECTORSIZE
                171:          ;DEC    COUNT       DOWN COUNT # BUFFERS TO SKIP
252D 7A0004     172:          DEC     COUNT
2530 26F5       173:          BNE     INITRDSI8   B/ MORE BUFFERS TO SKIP
                174:          ;LDX    #$FFFF      SET SEGMENT SIZE = "BIGGEST"
2532 CEFFFF     175:          LDX     #$FFFF
2535 FF2701     176:          STX     FIRSTSEGSIZE (A,B) = POINTER TO REST OF RDSI'S
2538 8D26       177:          BSR     ALLOCRDSIS  AND ALLOCATE REST OF RDSI'S
                178: * 9) NOW DISTRIBUTE SECTOR BUFFERS TO RDSI'S
                179:          ;LDX    LASTSECTORREADQ+RDSI:FLINK 1ST RDSI
253A FEAEF6     180:          LDX     LASTSECTORREADQ+RDSI:FLINK
                181:          ;LDD    FIRSTBUF    STORE SECTOR BUFFER ADDRESS
253D F62700     182:          LDAB    FIRSTBUF+1
2540 B626FF     183:          LDAA    FIRSTBUF
  2543          184: INITRDSI9        EQU         *
                185:          ;STD    RDSI:SECTORBASE,X
2543 E706       186:          STAB    (RDSI:SECTORBASE)+1,X
2545 A705       187:          STAA    RDSI:SECTORBASE,X
                188:          ;CLR    RDSI:DISKINFO,X SET DRIVE = "SECTOR NOT IN BUFFER"
2547 6F00       189:          CLR     RDSI:DISKINFO,X
                190:          ;CLR    RDSI:DISKINFO+1,X SO A LDX DETECTS THAT IT IS ZERO!
2549 6F01       191:          CLR     RDSI:DISKINFO+1,X
254B A704       192:          STAA    RDSI:LSN+2,X MAKE LSN <> 0 SO IT IS NOT THE MAGIC "0" SECTOR!!
                193:          ;CLR    RDSI:MODIFIED,X TAG "SECTOR NOT MODIFIED"
254D 6F0B       194:          CLR     RDSI:MODIFIED,X
                195:          ;CLR    RDSI:STATE,X MARK RDSI AS "IDLE"
254F 6F0C       196:          CLR     RDSI:STATE,X
                197: * NOTE: RDSI:TRACK is GARBAGE if RDSI:DSKINFO=0
                198:          ;ADDD   MAXSECTORSIZE FIND NEXT SECTOR BUFFER
2551 FBAF0F     199:          ADDB    MAXSECTORSIZE+1
2554 B9AF0E     200:          ADCA    MAXSECTORSIZE
                201:          ;LDX    RDSI:FLINK,X FIND NEXT RDSI




ASM/6800 1.4A0: 2557 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 74; Form 4      *** SDOS Boot time Initialization Code ***
SDOS6800.ASM
2557 EE07       202:          LDX     RDSI:FLINK,X
2559 8CAEEF     203:          CPX     #LASTSECTORREADQ ALL RDSI'S INITZD?
255C 26E5       204:          BNE     INITRDSI9   B/ NO
255E 0C39       205:          OKRTS               YES, LET'S SPLIT!!




ASM/6800 1.4A0: 255E SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 75; Form 4      *** SDOS Boot time Initialization Code ***
SDOS6800.ASM
                207: *
                208: *        ALLOCRDSIS -- AND ADD TO LASTSECTORREADQ
                209: *                (A,B) POINTS TO NEXT POSSIBLE RDSI
                210: *                FIRSTSEGSIZE CONTAINS CONTIGUOUS SPACE REMAINING
                211: *                ALLOCATES NO MORE THAN "NRDSIS" RDSI'S
                212: *
  2560          213: ALLOCRDSIS       EQU         *
                214:          ;STD    RDSIPOINTER SAVE NEXT POTENTIAL RDSI ADDRESS
2560 F7AEA5     215:          STAB    RDSIPOINTER+1
2563 B7AEA4     216:          STAA    RDSIPOINTER
                217:          ;LDD    FIRSTSEGSIZE GET SIZE OF REMAINING SEGMENT
2566 F62702     218:          LDAB    FIRSTSEGSIZE+1
2569 B62701     219:          LDAA    FIRSTSEGSIZE
                220:          ;SUBD   #RDSI:SIZE  ENOUGH SPACE LEFT TO ALLOCATE?
256C C014       221:          SUBB    #(RDSI:SIZE)&$FF
256E 8200       222:          SBCA    #(RDSI:SIZE)/256
2570 2520       223:          BCS     ALLOCRDSISRTS B/ NOT ENOUGH ROOM LEFT
                224:          ;STD    FIRSTSEGSIZE
2572 F72702     225:          STAB    FIRSTSEGSIZE+1
2575 B72701     226:          STAA    FIRSTSEGSIZE
2578 B62703     227:          LDAA    NBUFFERS    GET # RDSI'S TO ALLOCATE
257B 2715       228:          BEQ     ALLOCRDSISRTS B/ DON'T ALLOCATE ANY MORE
                229:          ;DEC    NBUFFERS    = ONE PER BUFFER
257D 7A2703     230:          DEC     NBUFFERS
                231:          ;LDX    RDSIPOINTER GET POINTER TO RDSI TO ALLOCATE
2580 FEAEA4     232:          LDX     RDSIPOINTER
                233:          ;JSR    ENQUELASTSECTORREAD ADD TO LASTSECTORREADQ
2583 BDDA78     234:          JSR     ENQUELASTSECTORREAD
                235:          ;LDD    #RDSI:SIZE  FIND NEXT RDSI
2586 C614       236:          LDAB    #(RDSI:SIZE)&$FF
2588 8600       237:          LDAA    #(RDSI:SIZE)/256
                238:          ;ADDD   RDSIPOINTER
258A FBAEA5     239:          ADDB    RDSIPOINTER+1
258D B9AEA4     240:          ADCA    RDSIPOINTER
2590 20CE       241:          BRA     ALLOCRDSIS  GO ALLOCATE ANOTHER
                242: 
  2592          243: ALLOCRDSISRTS    EQU         *
2592 39         244:          RTS




ASM/6800 1.4A0: 2592 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 76; Form 4      *** SDOS Boot time Initialization Code ***
SDOS6800.ASM
                246: *
                247: *        INITFCBS -- COMPUTES NUMBER OF FCBS AND STORES IN NFCBS
                248: *                THEN SCANS ALL FCBS ZEROING FCB:REFCOUNT
                249: *
  2593          250: INITFCBS EQU     *
                251:          ;LDX    CODE+SDOS:CONFIGURATION COMPUTE # OF FCBS...
2593 FEAE03     252:          LDX     CODE+SDOS:CONFIGURATION
2596 A606       253:          LDAA    CNFG:NIOCHANNELS,X = 1 PER I/O CHANNEL
2598 BBAF0B     254:          ADDA    NDRIVES     +2 PER DISK DRIVE
259B BBAF0B     255:          ADDA    NDRIVES
259E 8B02       256:          ADDA    #NMAGICFCBS + ODDBALL ASSORTMENT
25A0 B7AF0A     257:          STAA    NFCBS       FOR USE BY FINDFREEFCBS, SEARCHFCBS
25A3 B70004     258:          STAA    COUNT       SO WE KNOW HOW MANY TO ZAP
                259:          ;LDD    [CNFG:IOCBPOINTERS,X] GET ADDRESS OF 1ST IOCB
25A6 EE04       260:          LDX     CNFG:IOCBPOINTERS,X
25A8 E601       261:          LDAB    1,X
25AA A600       262:          LDAA    0,X
  25AC          263: INITFCBL EQU     *
                264:          ;SUBD   #FCB:SIZE   FIND PREVIOUS FCB = THIS FCB - SIZE OF FCB
25AC C01A       265:          SUBB    #(FCB:SIZE)&$FF
25AE 8200       266:          SBCA    #(FCB:SIZE)/256
                267:          ;TDX                COPY ADDRESS TO (X)
25B0 9700       268:          STAA    TEMPA
25B2 D701       269:          STAB    TEMPB
25B4 DE00       270:          LDX     TEMPX
                271:          ;CLR    FCB:REFCOUNT,X ZAP THE REFERENCE COUNT
25B6 6F0B       272:          CLR     FCB:REFCOUNT,X
                273:          ;DEC    COUNT
25B8 7A0004     274:          DEC     COUNT
25BB 26EF       275:          BNE     INITFCBL    B/ MORE TO INIT
                276:          ;LDX    #0          RESET POINTER TO ERROR MESSAGE FCB
25BD CE0000     277:          LDX     #0
25C0 FFAF0C     278:          STX     ERRFCBPOINTER
25C3 39         279:          RTS




ASM/6800 1.4A0: 25C3 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 77; Form 4      *** SDOS Boot time Initialization Code ***
SDOS6800.ASM
                281: *
                282: *        INITDISKINFO -- INITIALIZES ALL DISKINFO TABLES TO "DISMOUNTED"
                283: *        COMPUTE MAXSECTORSIZE = MAX OF ALL SECTOR SIZES
                284: *        COUNT # DRIVES
                285: *
  25C4          286: INITDISKINFO     EQU         *
                287:          ;LDX    #0          ZERO MAX SECTOR SIZE FOUND SO FAR
25C4 CE0000     288:          LDX     #0
25C7 FFAF0E     289:          STX     MAXSECTORSIZE
                290:          ;CLR    NDRIVES     ASSUME NO DISK DRIVES IN THIS SYSTEM (A LITTE FUNNY)
25CA 7FAF0B     291:          CLR     NDRIVES
                292:          ;LDX    CODE+SDOS:CONFIGURATION FIND ADDRESS OF 1ST DISKINFO TABLE
25CD FEAE03     293:          LDX     CODE+SDOS:CONFIGURATION
                294:          ;LDX    CNFG:DISKDCBS,X
25D0 EE00       295:          LDX     CNFG:DISKDCBS,X
25D2 FFAE4C     296:          STX     DEFAULTDISKDCB SO WE KNOW WHICH DISK TO DEFAULT TO
  25D5          297: INITDISKINFOL    EQU         *
25D5 DF06       298:          STX     DCBPOINTER  SAVE THIS A MOMENT
                299:          ;INC    NDRIVES     COUNT # DISKINFO TABLES (NOT TO EXCEED 255)
25D7 7CAF0B     300:          INC     NDRIVES
                301:          ;CLR    DSKINFO:DIRFCB,X MARK "NO DIRFCB SET UP" (DISMOUNTED)
25DA 6F27       302:          CLR     DSKINFO:DIRFCB,X
                303:          ;CLR    DSKINFO:DIRFCB+1,X
25DC 6F28       304:          CLR     DSKINFO:DIRFCB+1,X
                305:          ;CLR    DSKINFO:MAPFCB,X DITCH MAP FCB...
25DE 6F29       306:          CLR     DSKINFO:MAPFCB,X
                307:          ;CLR    DSKINFO:MAPFCB+1,X
25E0 6F2A       308:          CLR     DSKINFO:MAPFCB+1,X
                309:          ;CLR    DSKINFO:SECTORDB,X MARK THIS DRIVE AS "NOT DOING ANY I/O"
25E2 6F2B       310:          CLR     DSKINFO:SECTORDB,X
                311:          ;CLR    DSKINFO:SECTORDB+1,X
25E4 6F2C       312:          CLR     DSKINFO:SECTORDB+1,X
25E6 86FF       313:          LDAA    #-1         SET BAD LSN TO "NO BAD LSN"
25E8 A72D       314:          STAA    DSKINFO:BADLSN,X
25EA A72E       315:          STAA    DSKINFO:BADLSN+1,X
25EC A72F       316:          STAA    DSKINFO:BADLSN+2,X
25EE A73F       317:          STAA    DSKINFO:ERRLSN,X RESET LAST ERRORING LSN, TOO!
25F0 A740       318:          STAA    DSKINFO:ERRLSN+1,X
25F2 A741       319:          STAA    DSKINFO:ERRLSN+2,X
                320:          ;LDD    DSKINFO:NBPS,X COMPARE SECTOR SIZE FOR THIS DISK...




ASM/6800 1.4A0: 25F4 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 78; Form 4      *** SDOS Boot time Initialization Code ***
SDOS6800.ASM
25F4 E60A       321:          LDAB    (DSKINFO:NBPS)+1,X
25F6 A609       322:          LDAA    DSKINFO:NBPS,X
                323:          ;CMPD   MAXSECTORSIZE TO BIGGEST SECTOR SIZE FOUND SO FAR
25F8 B1AF0E     324:          CMPA    MAXSECTORSIZE
25FB 2603       325:          BNE     MACRO:0008
25FD F1AF0F     326:          CMPB    MAXSECTORSIZE+1
  2600          327: MACRO:0008
2600 2506       328:          BCS     INITDISKINFO2 B/ SMALLER
                329:          ;STD    MAXSECTORSIZE KEEP BIGGEST SECTOR SIZE FOUND SO FAR
2602 F7AF0F     330:          STAB    MAXSECTORSIZE+1
2605 B7AF0E     331:          STAA    MAXSECTORSIZE
  2608          332: INITDISKINFO2    EQU         *
                333:          ;CLR    DSKINFO:LOG2NBPS,X NOW COMPUTE LOG(2) OF NBPS
2608 6F18       334:          CLR     DSKINFO:LOG2NBPS,X
                335:          ;DEC    DSKINFO:LOG2NBPS,X (INIT TO -1)
260A 6A18       336:          DEC     DSKINFO:LOG2NBPS,X
  260C          337: INITDISKINFO2L   EQU         *
                338:          ;INC    DSKINFO:LOG2NBPS,X LOG2 = LOG2 + 1
260C 6C18       339:          INC     DSKINFO:LOG2NBPS,X
                340:          ;LSRD               DIVIDE SECTOR SIZE BY POWER OF TWO
260E 44         341:          LSRA
260F 56         342:          RORB
2610 24FA       343:          BCC     INITDISKINFO2L B/ STILL >= 1, KEEP COUNTING!
                344:          ;TSTD               ALL SIGNIFICANCE SHOULD BE SHIFTED OUT
2612 4D         345:          TSTA
                346:          ;BNED   ERRSECTORSIZE2 B/ SECTOR SIZE NOT A POWER OF 2!
2613 263B       347:          BNE     ERRSECTORSIZE2
2615 5D         348:          TSTB
2616 2638       349:          BNE     ERRSECTORSIZE2
                350:          ;LDD    DSKINFO:NBPS,X SET DSKINFO:NBPSM1 := DSKINFO:NBPS-1
2618 E60A       351:          LDAB    (DSKINFO:NBPS)+1,X
261A A609       352:          LDAA    DSKINFO:NBPS,X
                353:          ;SUBD   #1          FOR EVERYONE ELSE'S CONVENIENCE
261C C001       354:          SUBB    #(1)&$FF
261E 8200       355:          SBCA    #(1)/256
                356:          ;STD    DSKINFO:NBPSM1,X
2620 E71A       357:          STAB    (DSKINFO:NBPSM1)+1,X
2622 A719       358:          STAA    DSKINFO:NBPSM1,X
                359: *
                360: *        NOW COMPUTE NLSN = (NSPT*NTPC*NCYL)




ASM/6800 1.4A0: 2622 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 79; Form 4      *** SDOS Boot time Initialization Code ***
SDOS6800.ASM
                361: *
                362:          ;LDD    DSKINFO:NCYL,X SET NLSN:=NCYL
2624 E610       363:          LDAB    (DSKINFO:NCYL)+1,X
2626 A60F       364:          LDAA    DSKINFO:NCYL,X
                365:          ;CLR    DSKINFO:NLSN,X
2628 6F1B       366:          CLR     DSKINFO:NLSN,X
                367:          ;STD    DSKINFO:NLSN+1,X
262A E71D       368:          STAB    (DSKINFO:NLSN+1)+1,X
262C A71C       369:          STAA    DSKINFO:NLSN+1,X
                370:          ;LDD    DSKINFO:NTPC,X THEN SET NLSN:=NLSN*NTPC
262E E60E       371:          LDAB    (DSKINFO:NTPC)+1,X
2630 A60D       372:          LDAA    DSKINFO:NTPC,X
2632 8D21       373:          BSR     MULNLSNBYAB
                374:          ;LDD    DSKINFO:NSPT,X AND THEN SET NLSN:=NLSN*NSPT
2634 E60C       375:          LDAB    (DSKINFO:NSPT)+1,X
2636 A60B       376:          LDAA    DSKINFO:NSPT,X
2638 8D1B       377:          BSR     MULNLSNBYAB
                378: *
                379: *        NOW RESET THE DISK DEVICE
                380: *
                381:          ;LDX    DCB:DRIVER,X CALL THE DISK DRIVER RESET ROUTINE
263A EE07       382:          LDX     DCB:DRIVER,X
                383:          ;LDD    DRIVER:DISKRESET,X
263C E601       384:          LDAB    (DRIVER:DISKRESET)+1,X
263E A600       385:          LDAA    DRIVER:DISKRESET,X
                386:          ;JSR    SECTORDRIVER WHICH SETS (X) = DCBPOINTER
2640 BDDBCB     387:          JSR     SECTORDRIVER
2643 2508       388:          BCS     INITDISKERRED B/ OOPS...
                389:          ;LDX    DCBPOINTER  NOW FIND NEXT DISK INFO TABLE
2645 DE06       390:          LDX     DCBPOINTER
                391:          ;LDX    DCB:NEXTDCB,X
2647 EE05       392:          LDX     DCB:NEXTDCB,X
2649 268A       393:          BNE     INITDISKINFOL
264B 0C39       394:          OKRTS
                395: 
  264D          396: INITDISKERRED    EQU         *
                397:          ;JMP    ERRORINX
264D 7EB200     398:          JMP     ERRORINX




ASM/6800 1.4A0: 264D SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 80; Form 4      *** SDOS Boot time Initialization Code ***
SDOS6800.ASM
  2650          400: ERRSECTORSIZE2   EQU         *
                401:          ;JSR    ERRET
2650 BDB1F6     402:          JSR     ERRET
2653 0413       403:          FDB     ERR:SECTORSIZE2 SECTOR SIZE IS NOT A POWER OF 2!
                404: *
                405: *        MULNLSNBYAB -- MULTIPLY DSKINFO:NLSN BY (A,B)
                406: *        (X) POINTS TO DCB FOR DISK; (X) IS PRESERVED
                407: *        PLACES PRODUCT IN DSKINFO:NLSN
                408: *        OKRET IF PRODUCT < 2^24
                409: *        ERRET IF PRODUCT >= 2^24
                410: *
                411: ********* SHOULD THIS BE DONE USING "MUL" INSTRUCTION???
                412: *
  2655          413: MULNLSNBYAB      EQU         *
                414:          ;STD    TEMP.MPCND  SAVE MULTIPLICAND
2655 F70001     415:          STAB    TEMP.MPCND+1
2658 B70000     416:          STAA    TEMP.MPCND
265B 8619       417:          LDAA    #25         # MULTIPLIER BITS (THE 25TH BIT IS GAURANTEED = 0)
265D B70004     418:          STAA    COUNT       SET UP LOOP COUNT
2660 4F         419:          CLRA                ZERO THE PARTIAL PRODUCT
2661 5F         420:          CLRB                AND THE CARRY OUT OF THE PARTIAL PRODUCT
  2662          421: MULNLSNBYABL     ; PROCESS NEXT MULTIPLIER BIT
                422:          ;RORD               PRESERVE CARRY OUT OF PARTIAL PRODUCT
2662 46         423:          RORA
2663 56         424:          RORB
                425: *                            RIGHT SHIFT PARTIAL PRODUCT...
2664 661B       426:          ROR     DSKINFO:NLSN,X INTO MULTIPLIER
2666 661C       427:          ROR     DSKINFO:NLSN+1,X
2668 661D       428:          ROR     DSKINFO:NLSN+2,X AND SHIFT OUT MULTIPLIER BIT
266A 2406       429:          BCC     MULNLSNBYAB1 B/ DON'T ADD (SET CARRY OUT OF PARTIAL PRODUCT TO 0)
                430:          ;ADDD   TEMP.MPCND  ADD MULTIPLICAND TO PARTIAL PRODUCT
266C FB0001     431:          ADDB    TEMP.MPCND+1
266F B90000     432:          ADCA    TEMP.MPCND
  2672          433: MULNLSNBYAB1     EQU         *
                434:          ;DEC    COUNT       DOWN COUNT # MULTIPLIER BITS
2672 7A0004     435:          DEC     COUNT
2675 26EB       436:          BNE     MULNLSNBYABL B/ MORE MULTIPLIER BITS TO PROCESS
2677 2508       437:          BCS     ERRNLSNGE224 B/ PRODUCT >= 2^24
                438:          ;TSTD               UPPER 2 BYTES OF 5 BYTE PRODUCT <> 0 ?
2679 4D         439:          TSTA




ASM/6800 1.4A0: 2679 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 81; Form 4      *** SDOS Boot time Initialization Code ***
SDOS6800.ASM
                440:          ;BNED   ERRNLSNGE224 B/ YES, PRODUCT TOO BIG
267A 2605       441:          BNE     ERRNLSNGE224
267C 5D         442:          TSTB
267D 2602       443:          BNE     ERRNLSNGE224
267F 0C39       444:          OKRTS
                445: 
  2681          446: ERRNLSNGE224     EQU         *
                447:          ;JSR    ERRET
2681 BDB1F6     448:          JSR     ERRET
2684 041B       449:          FDB     ERR:NLSNGE224




ASM/6800 1.4A0: 2684 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 82; Form 4      *** SDOS Boot time Initialization Code ***
SDOS6800.ASM
                451: *
                452: *        INITIOCBS -- SETS UP IOCBS FOR USE BY DISKFILE DRIVERS,
                453: *                DISKDEVICEDRIVERS
                454: *
  2686          455: INITIOCBS        EQU         *
                456:          ;LDX    CODE+SDOS:CONFIGURATION SCAN ALL THE IOCBS
2686 FEAE03     457:          LDX     CODE+SDOS:CONFIGURATION
2689 A606       458:          LDAA    CNFG:NIOCHANNELS,X
268B B72704     459:          STAA    INITCOUNTER
                460:          ;LDX    CNFG:IOCBPOINTERS,X
268E EE04       461:          LDX     CNFG:IOCBPOINTERS,X
  2690          462: INITIOCBL        ; INIT NEXT IOCB
2690 FF2705     463:          STX     INITX
                464:          ;LDX    ,X          GET IOCB ADDRESS
2693 EE00       465:          LDX     0,X
2695 8D16       466:          BSR     INITIOCB    DUH
                467:          ;LDX    INITX       FIND NEXT IOCB POINTER
2697 FE2705     468:          LDX     INITX
                469:          ;LEAX   2,X
  0000          470:          IF      2<0
 *S*            471:          RPT     -2
 *S*            472:          DEX
                473:          ELSE
  0002          474:          RPT     2
269A 08         475:          INX
                476:          FIN
                477:          ;DEC    INITCOUNTER
269C 7A2704     478:          DEC     INITCOUNTER
269F 26EF       479:          BNE     INITIOCBL   B/ MORE IOCBS
                480:          ;LDX    #SYSIOCB    INIT THE SYSTEM IOCB
26A1 CEAF57     481:          LDX     #SYSIOCB
26A4 8D07       482:          BSR     INITIOCB
                483:          ;LDX    #LOGIOCB    INIT THE LOG FILE IOCB
26A6 CEAF35     484:          LDX     #LOGIOCB
26A9 8D02       485:          BSR     INITIOCB
26AB 0C39       486:          OKRTS               AND EXIT
                487: *
                488: *        INITIOCB -- RESET IOCB(X)
                489: *
  26AD          490: INITIOCB EQU     *




ASM/6800 1.4A0: 26AB SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 83; Form 4      *** SDOS Boot time Initialization Code ***
SDOS6800.ASM
                491:          ;CLR    IOCB:DRIVER,X
26AD 6F09       492:          CLR     IOCB:DRIVER,X
                493:          ;CLR    IOCB:DRIVER+1,X
26AF 6F0A       494:          CLR     IOCB:DRIVER+1,X
26B1 39         495:          RTS




ASM/6800 1.4A0: 26B1 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 84; Form 4      *** SDOS Boot time Initialization Code ***
SDOS6800.ASM
                497: *
                498: *        TimeoutTask Initialization
                499: *
  0002          500: ExitScanPtr      Equ         2 Pointer used to Scan Exit code for checking
  0004          501: ExitPartialChksum            Equ 4 Partially computed checksum
                502: 
  26B2          503: TimeouttaskSetup ; Timeout Task initializing code
                504:          ;Clr    ExitPartialChksum zero initial value of checksum
26B2 7F0004     505:          CLR     ExitPartialChksum
                506:          ;Ldx    #Exitchksumbase-15 don't make base of checksum obvious
26B5 CEB7FB     507:          LDX     #Exitchksumbase-15
26B8 DF02       508:          Stx     Exitscanptr
                509:          ;Jmp    Timeouttaskbored
26BA 7EDD5C     510:          JMP     Timeouttaskbored
                511: 
  26BD          512: SDOSINITEND      ; END OF SDOSINIT CHECKSUMMED CODE




ASM/6800 1.4A0: 26BA SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 85; Form 4      *** SDOS Boot time Initialization Code ***
SDOS6800.ASM
                514: *        The following routine is used by SD personnel after SDOS is assembled or patc
                515: *        to compute the various checksum values required to make SDOS operate.
                516: *        Control is transferred here (instead of to SDOSINIT);
                517: *        the checksum bytes are modified until the correct checksums are obtained
                518: *        (this process presumes that the memory of the computer works!)
                519: *        The values in the checksum bytes must then be patched into SDOS with BMP.
                520: *        The code is a little obscure because we don't want it accidentally found
                521: *
26BD BF         522:          Fcb     $BF         Red herring for would-be disassemblers
  26BE          523: ComputeChecksums; Compute checksums over SDOS
                524: *        Note: Exit Checksum must be computed before MainChecksum!
  26BE          525: ComputeExitChecksum ; loop back here until SDOSEXITCHKSUM gives zero
                526:          ;ldx    #EXITCODECHKSUM-51 don't make it obvious where checksum byte is
26BE CEB7F9     527:          LDX     #EXITCODECHKSUM-51
                528:          ;inc    51,x        old value didn't work, try this one!
26C1 6C33       529:          INC     51,X
                530:          ;ldx    #EXITCHKSUMBASE-41 don't make it obvious where checksum byte is
26C3 CEB7E1     531:          LDX     #EXITCHKSUMBASE-41
26C6 5F         532:          clrb                zero the checksum accumulator
  26C7          533: ComputeExitChecksuml         ; loop here to checksum a byte
26C7 58         534:          aslb                make checksum depend on order of the data
26C8 E929       535:          adcb    41,x
26CA 08         536:          inx
26CB 8CB81D     537:          cpx     #EXITCHKSUMEND-41 done?
26CE 26F7       538:          bne     ComputeExitChecksuml b/ no
26D0 50         539:          negb                did we get proper checksum?
26D1 26EB       540:          bne     ComputeExitChecksum
  26D3          541: ComputeMainChecksum ; loop back here until main SDOS checksum gives zero
                542:          ;ldx    #SDOSCODECHKSUM-49 don't make it obvious where checksum byte is
26D3 CEB815     543:          LDX     #SDOSCODECHKSUM-49
                544:          ;inc    49,x        old value didn't work, try this one!
26D6 6C31       545:          INC     49,X
                546:          ;ldx    #SDOSCHKSUMBASE-7 where to start checksumming over SDOS
26D8 CEB0BC     547:          LDX     #SDOSCHKSUMBASE-7
26DB 5F         548:          clrb                zero the checksum accumulator
  26DC          549: ComputeMainChecksuml ; loop here to checksum a byte
26DC 58         550:          aslb                make checksum depend on order of the data
26DD E907       551:          adcb    7,x
26DF 08         552:          inx
26E0 8CDEF4     553:          cpx     #SDOS:END-7




ASM/6800 1.4A0: 26E3 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 86; Form 4      *** SDOS Boot time Initialization Code ***
SDOS6800.ASM
26E3 26F7       554:          bne     ComputeMainChecksuml b/ more bytes to checksum
26E5 CB00       555:          addb    #0          did checksum come up zero?
26E7 26EA       556:          bne     ComputeMainChecksum b/ no, try a new value!




ASM/6800 1.4A0: 26E7 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 87; Form 4      *** SDOS Boot time Initialization Code ***
SDOS6800.ASM
  26E9          558: ComputeInitChecksum ; loop back here until SDOSINIT checksum gives zero
                559:          ;ldx    #SDOSINITCKSUM-22 don't make it obvious where checksum byte is
26E9 CE22DF     560:          LDX     #SDOSINITCKSUM-22
                561:          ;inc    22,x        old value didn't work, try this one!
26EC 6C16       562:          INC     22,X
                563:          ;ldx    #SDOSINIT-75 don't make it obvious where checksum byte is
26EE CE1FB5     564:          LDX     #SDOSINIT-75
26F1 5F         565:          clrb                zero the checksum accumulator
  26F2          566: ComputeInitChecksuml         ; loop here to checksum a byte
26F2 58         567:          aslb                make checksum depend on order of the data
26F3 08         568:          inx                 do this one first to be confusing!
26F4 E94A       569:          adcb    74,x
26F6 8C2672     570:          cpx     #SDOSINITEND-74-1 done?
26F9 26F7       571:          bne     ComputeInitChecksuml b/ no
26FB 50         572:          negb                did we get proper checksum?
26FC 26EB       573:          bne     ComputeInitChecksum
26FE 3B         574:          rti                 if you let it get here, you don't know what you're doing.




ASM/6800 1.4A0: 26FE SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 88; Form 4      *** SDOS Boot time Initialization Code ***
SDOS6800.ASM
                576: *
                577: *        STORAGE USED ONLY BY INITIALIZATION ROUTINES
                578: *
26FF 0002       579: FIRSTBUF RMB     2           POINTER TO 1ST SECTOR BUFFER
2701 0002       580: FIRSTSEGSIZE     RMB         2 SIZE OF 1ST REGION FROM WHICH TO ALLOCATE RDSI'S
2703 0001       581: NBUFFERS RMB     1           # OF SECTOR BUFFERS AVAILABLE
2704 0001       582: INITCOUNTER      RMB         1
2705 0002       583: INITX    RMB     2
                584: *
  2707          585: EXITCOPYRIGHT    ; USED TO DISPLAY SDOS BANNER, COPYRIGHT MESSAGE
2707 0C         586:          FCB     SYSCALL:WRITEA FUNCTION
2708 08         587:          FCB     WRITEA:SCLEN
2709 00         588:          FCB     0           CHANNEL
270A 0001       589:          RMB     1           ANY GARBAGE
270B B119       590:          FDB     SDOSMSG     BUFFER ADDRESS
270D 003A       591:          FDB     COPYRIGHTEND-SDOSMSG REQUESTED COUNT
                592: *
  270F          593: SDOSINITID       ; USED TO DISPLAY DISK IDENTIFICATION STRING
270F 0C         594:          FCB     SYSCALL:WRITEA FUNCTION
2710 08         595:          FCB     WRITEA:SCLEN
2711 00         596:          FCB     0           CHANNEL
2712 0001       597:          RMB     1           ANY OLD GARBAGE FOR 2ND PARAMETER BYTE
2713 0002       598:          RMB     2           POINTER TO ID STRING IN BOOT SECTOR
2715 0020       599:          FDB     BOOT:SIZE-BOOT:DISKID LENGTH OF ID STRING
                600: *
  2717          601: DISPLAYINITDATE  ; SYSCALL USED TO DISPLAY DISK INITZ DATE
2717 0C         602:          FCB     SYSCALL:WRITEA
2718 08         603:          FCB     WRITEA:SCLEN
2719 00         604:          FCB     0           CHANNEL NUMBER
271A 0001       605:          RMB     1           ANY GARBAGE BYTE
271B 271F       606:          FDB     INITDATE    STRING TO DISPLAY
271D 0009       607:          FDB     INITDATELEN SIZE OF STRING TO DISPLAY
                608: 
271F 30302F30   609: INITDATE FCC     "00/00/00 "
  0009          610: INITDATELEN      EQU         *-INITDATE




ASM/6800 1.4A0: 2727 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 89; Form 4      *** SDOS Boot time Initialization Code ***
SDOS6800.ASM
  2728          612: CHAINTOSERIALNO.SYS ; SYSTEM CALL TO CHAIN TO SERIALNUMBER.SYS
2728 060E       613:          FCB     SYSCALL:CHAIN,CHAIN:SCLEN
272A 0000       614:          FCB     IGNORED,IGNORED
272C 27360010   615:          FDB     SERIALNUMBER.SYS,SERIALNUMBER.SYSL
2730 0000       616:          FDB     CHANGED
2732 27540004   617:          FDB     SCRATCH,4
                618: 
2736 53455249   619: SERIALNUMBER.SYS FCC         "SERIALNUMBER.SYS"
  0010          620: SERIALNUMBER.SYSL            EQU *-SERIALNUMBER.SYS
                621: 
  2746          622: OPENSERIALNO.SYS ; SYSTEM CALL TO OPEN SERIALNUMBER.SYS
2746 000E       623:          FCB     SYSCALL:OPEN,OPEN:SCLEN
2748 0100       624:          FCB     1,IGNORED
274A 27360010   625:          FDB     SERIALNUMBER.SYS,SERIALNUMBER.SYSL
274E 0000       626:          FDB     CHANGED
2750 27540004   627:          FDB     SCRATCH,4
                628: 
2754 0004       629: SCRATCH  RMB     4
                630: 
  2758          631: CLOSESERIALNO.SYS            ; SYSTEM CALL TO CLOSE SERIALNUMBER.SYS
2758 0203       632:          FCB     SYSCALL:CLOSE,CLOSE:SCLEN
275A 01         633:          FCB     1
                634: 
  275B          635: SETINITERROR     ; SYSCALL TO TELL SDOS WHAT ERROR CODE WE WANT DISPLAYED
275B 1304       636:          FCB     SYSCALL:SETERROR,SETERROR:SCLEN
275D 0000       637: ERRORCODE        FDB         CHANGED
                638: 
  275F          639: DisplayInitError ; Syscall to display error code last set
275F 1502       640:          Fcb     Syscall:Disperror,Disperror:Sclen
                641: 
  2761          642: ReadSerialNumberFromFile     ; Syscall to read Serial number from encrypted file
2761 0B12       643:          fcb     Syscall:Readb,RWposition:sclen
2763 0100       644:          fcb     1,ignored
2765 00000000   645:          fdb     ignored,ignored
2769 0000       646:          fdb     changed     expected value of 8
276B B05D0008   647:          fdb     DecryptBuffer,SerialNumber:Size where to read serial number
276F 00000008   648:          fdb     $0000,$0008 file position to start reading at
                649: 
  2773          650: ReadSerialNumberFileType ; Syscall to read type of 1st load record of file
2773 0B0E       651:          fcb     Syscall:Readb,Readb:Sclen




ASM/6800 1.4A0: 2775 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 90; Form 4      *** SDOS Boot time Initialization Code ***
SDOS6800.ASM
2775 0100       652:          fcb     1,ignored
2777 00000000   653:          fdb     ignored,ignored
277B 0000       654:          fdb     changed     expected value of 1
277D B05D0001   655:          fdb     DecryptBuffer,1 where to read load record type byte to
                656: 
2781 0001       657: seed     rmb     1           self-initializes with garbage
                658: 
2782 0002       659: RunningEncryptedp            rmb 2 Pointer to Running Encrypted byte
                660: 
  2784          661: CopyofNMIVector ; save copy of NMI vector for NMI-vector-not-in-RAM test
2784 0000       662:          fdb     changed
  2786          663: CopyofRestartVector ; copy of Restart vector for Restart-vector-not-in-RAM test
2786 0000       664:          fdb     changed
                665: 
  0000          666:          IF      *>/CODE
 *S*            667:          ?SDOS INITIALIZATION CODE OVERLAPS SDOS?
                668:          FIN




ASM/6800 1.4A0: 2786 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 91; Form 5      --- SDOS FRONT END ---
SDOS6800.ASM
                  2: *        SDOS ENTRY POINTS, AND DATA SHARED WITH I/O PACKAGE
                  3: *                (SEE SDOS:XXX DISPLACEMENTS)
                  4: *
  AE00            5:          ORG     CODE        BASE OF SDOS
AE00 11           6:          FCB     SDOSVERSION FOR REFERENCE PURPOSES
AE01 0000         7: LASTERROR        FDB         0 LAST ERROR ENCOUNTERED BY SDOS
AE03 0002         8:          RMB     2           POINTER TO CONFIGURATION LIST
AE05 0002         9:          RMB     2           TO IDENTIFY WHICH USER WE SOLD IT TO
                 10: *
                 11: *        THIS AREA CONTAINS THE VARIABLES THAT ARE PASSED
                 12: *        TO THE DRIVERS
                 13: *
AE07 0002        14:          RMB     2           POINTER TO THE I/O CALL BLOCK
AE09 0002        15: IOCBPOINTER      RMB         2 POINTER TO I/O CONTROL BLOCK SPECIFIED BY SYSCALL CHANN
AE0B 0003        16:          RMB     3           CLOCK: 100THS OF A SECOND (0..100*60*60*24)
AE0E 0003        17:          RMB     3           CLOCK: DD/MM/YY (BCD)
AE11 FF          18:          FCB     -1          STACKSWITCHED: -1 --> RUNNING UNDER TASK'S STACK
                 19: *                            >= 0 --> RUNNING UNDER INTERRUPT STACK
                 20:          ;JMP    IOINTERRUPT IN SIMPLE INTERRRUPT SCHEME, I/O INTERRUPT GOES HERE FIRS
AE12 7EDEC3      21:          JMP     IOINTERRUPT
                 22:          ;JMP    IORTI       RTI WITHOUT EVENT
AE15 7EDDCE      23:          JMP     IORTI
                 24:          ;JMP    FORCESCHEDULE RTI WITH EVENT
AE18 7EDDCB      25:          JMP     FORCESCHEDULE
                 26:          ;JMP    CLOCKTICKED ENTRY POINT FOR "CLOCKTICKED" SUBROUTINE
AE1B 7EDCCF      27:          JMP     CLOCKTICKED
AE1E AE8A        28:          FDB     USERTASKTCB POINTER TO CURRENTLY ACTIVE TASK'S CONTROL BLOCK
AE20 01          29:          FCB     1           0 --> KILLABLE; <>0 --> UNKILLABLE (KILLPROOFFLAG)
                 30: *        INITIALLY KILLPROOF TO PREVENT "SDOSINIT" FROM BEING STOPPED
                 31:          ;JMP    KILLUSERPROGRAM ENTRY POINT FOR "KILL USER PROGRAM" SUBROUTINE
AE21 7EB78A      32:          JMP     KILLUSERPROGRAM
                 33:          ;JMP    STARTIO$    (TASK) SIMULATE INTERRUPT TO (X)
AE24 7EDEA5      34:          JMP     STARTIO$
                 35:          ;JMP    WAIT$       (TASK) WAIT FOR CONDITION (A,B)
AE27 7EDE7A      36:          JMP     WAIT$
                 37:          ;JMP    WAITEVENT$  (TASK) WAIT FOR EVENT (X)
AE2A 7EDE72      38:          JMP     WAITEVENT$
                 39:          ;JMP    ERRET       ENTRY POINT FOR ERROR SIGNALING ROUTINE
AE2D 7EB1F6      40:          JMP     ERRET
                 41:          ;JMP    ERRORSAVE   ENTRY POINT TO SAVE ERROR CODE IN (X)




ASM/6800 1.4A0: AE30 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 92; Form 5      --- SDOS FRONT END ---
SDOS6800.ASM
AE30 7EB218      42:          JMP     ERRORSAVE
                 43:          ;JMP    ERRORED     ENTRY POINT TO SIGNAL "I CAN'T HANDLE THAT ERROR"
AE33 7EB209      44:          JMP     ERRORED
                 45:          ;JMP    CHECKRDLEN  ENTRY POINT FOR "CHECK REPLY DATA LENGTH"
AE36 7EB89F      46:          JMP     CHECKRDLEN
                 47:          ;JMP    CHECKWRLEN  ENTRY POINT FOR "CHECK WRITE DATA LENGTH"
AE39 7EB8DB      48:          JMP     CHECKWRLEN
                 49:          ;JMP    CHECKSCLEN  ENTRY POINT FOR "CHECK SYSCALL BLOCK LENGTH"
AE3C 7EB8FC      50:          JMP     CHECKSCLEN
                 51:          ;JMP    TABLEBRANCH ENTRY POINT FOR "BRANCH THRU TABLE" ROUTINE
AE3F 7EC20B      52:          JMP     TABLEBRANCH
                 53:          ;JMP    BLOCKMOVE   ENTRY POINT FOR "FAST BLOCK MOVE"
AE42 7EDBD0      54:          JMP     BLOCKMOVE
                 55:          ;JMP    GETRUNNINGENCRYPTED ENTRY POINT TO GET ADDRESS OF RUNNING ENCRYPTED F
AE45 7EBA93      56:          JMP     GETRUNNINGENCRYPTED
AE48 0000        57:          RMB     SDOS:ENTRYSIZE-(*-CODE)




ASM/6800 1.4A0: AE48 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 93; Form 5      --- SDOS FRONT END ---
SDOS6800.ASM
                 59: *        TEMPS FOR SDOS FRONT END
                 60: *
AE48 0002        61: STARTADDRESS     RMB         2 EXECUTION START ADDRESS
AE4A 0002        62: LOADCOUNT        RMB         2 COUNTER FOR LOADER
                 63: 
AE4C 0002        64: DEFAULTDISKDCB   RMB         2 POINTER TO DISK INFO TABLE FOR DEFAULT DISK
AE4E 0002        65: NAMESCANPTR      RMB         2 USED TO SCAN USER-SUPPLIED DEVICE NAME
AE50 0002        66: NAMESIZE RMB     2           SIZE OF USER-SUPPLIED DEVICE NAME
AE52 0002        67: CONSOLEDRIVER    RMB         2 POINTER TO CONSOLE DEVICE DRIVER (SET UP BY SDOSINIT)
AE54 0002        68: DRIVERVPOINTER   RMB         2 POINTER TO DEVICE DRIVER ENTRY VECTOR
AE56 0002        69: ERRORADDRESS     RMB         2 HOLDS LAST ERROR ADDRESS (CONVENIENCE FOR SYSTEMS PROGR
                 70: *
                 71: *        CLOCKTICK AND TIMEOUT ROUTINE DATA STORAGE
                 72: *
AE58 DD00        73: DAYSPERMONTHX    FDB         DAYSPERMONTH&$FF00 USED TO ACCESS DAYS PER MONTH GIVEN MO
AE5A 00          74: NTIMEOUTBLKS     FCB         0 SET BY SDOSINIT TO # TIMEOUT BLOCKS
AE5B 00          75: CLOCKTICKEDEVENT FCB         0 # CLOCK TICKS FOR TIMEOUT TASK TO PROCESS
AE5C 0002        76: TIMEOUTLEPTR     RMB         2 TIMEOUT LIST ENTRY POINTER
                 77: 
  AE5E           78: DELAYBLOCK       ; TIMEOUT BLOCK USED BY SYSCALL:DELAY ROUTINE
AE5E 0000        79:          FDB     CHANGED     to point to rest of timeout blocks (TIMEOUT:LINK)
AE60 FFFF        80:          FDB     $FFFF       Timeout:fuse, initialized to 18.2 minutes
AE62 B3CD        81:          FDB     SDOSNOTREGISTERED WHERE TO GO IF SECRET DELAY CALL NOT ISSUED!
                 82: 
AE64 00          83: DELAYCOMPLETE    FCB         0 EVENT MARKING COMPLETION OF DELAY SYSCALL TIMEOUT




ASM/6800 1.4A0: AE64 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 94; Form 5      --- SDOS FRONT END ---
SDOS6800.ASM
                 85: *
                 86: *        TIMEOUT AND USER TASK STUFF
                 87: *
  0001           88:          IF      M6800!M6801
AE65 000E        89:          RMB     MINSTACK-CONTEXTBLOCK:SIZE STACK SPACE FOR TIMEOUT TASK
  AE72           90: TIMEOUTTASKSTKINIT           EQU *-1  INITIAL VALUE FOR TIMEOUT TASK'S STACK
AE73 00000000    91:          FCB     0,IGNORED,IGNORED,IGNORED,IGNORED ZERO CC SO INTERRUPTS ARE ENABLED
AE78 26B2        92:          FDB     TIMEOUTTASKSETUP INITIAL PC OF TIMEOUT TASK
  0001           93:          ELSE    (M6809)
 *S*             94:          RMB     MINSTACK-CONTEXTBLOCK:SIZE STACK SPACE FOR TIMEOUT TASK
 *S*             95: TIMEOUTTASKSTKINIT           EQU * INITIAL VALUE FOR TIMEOUT TASK'S STACK
 *S*             96:          FCB     $80,IGNORED,IGNORED,0 CC WITH INTS ENABLED, GARBAGE (D), (DP) = 0
 *S*             97:          FDB     IGNORED     GARBAGE (X)
 *S*             98:          FDB     IGNORED     GARBAGE (Y)
 *S*             99:          FDB     IGNORED     GARBAGE (U)
 *S*            100:          FDB     TIMEOUTTASKSETUP INITIAL PC OF TIMEOUT TASK
                101:          FIN
                102: 
  AE7A          103: TIMEOUTTASKTCB   EQU         *
AE7A AE8A       104:          FDB     USERTASKTCB TCB:LNK POINTS TO USER TASK
AE7C AE72       105:          FDB     TIMEOUTTASKSTKINIT TCB:STACK INITIAL VALUE
AE7E 000C       106:          RMB     TCB:SIZE-(*-TIMEOUTTASKTCB)
                107: 
  AE8A          108: USERTASKTCB      ; USER TASK CONTROL BLOCK
AE8A 0000       109:          FDB     0           END OF TCB CHAIN
AE8C 000E       110:          RMB     TCB:SIZE-(*-USERTASKTCB)




ASM/6800 1.4A0: AE8C SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 95; Form 5      WORKING STORAGE FOR DISK FILE DRIVERS
SDOS6800.ASM
                112: *
                113: *        VARIABLE STORAGE FOR DISK FILE DRIVER
                114: *
                115: *        SCRATCH PAD VARIABLES (USE TO SHORTEN/SPEED UP INSTRUCTIONS IN SDOS)
                116: *
  0000          117: TOPOINTER        EQU         0 COPY TARGET
  0002          118: FROMPOINTER      EQU         2 COPY SOURCE
  0004          119: COUNT    EQU     4           1 BYTE COUNTER, GP
                120: 
  0000          121: TEMP.MPCND       EQU         TEMPX MULTIPLICAND
  0000          122: TEMP.DIVISOR     EQU         TEMPX DIVISOR
  0000          123: TEMP.QUOTIENT    EQU         0 QUOTIENT (2 BYTES)
  0002          124: TEMP.DIVIDEND    EQU         2 DIVIDEND (2 BYTES)
  0005          125: TEMP.MPR EQU     5           MULTIPLIER (1 BYTE)
                126: *
                127: *        HIGH RAM SCRATCH AREA
                128: *
AE9A 0001       129: WRITEFLAG        RMB         1 0--> READ; 1--> WRITE REQUEST
AE9B 0002       130: BUFFERPOINTER    RMB         2 POINTER INTO USER'S BUFFER
AE9D 0002       131: TRANSFERCOUNT    RMB         2 # BYTES AVAILABLE TO BE TRANSFERRED FROM SECTOR
AE9F 0002       132: USEDCOUNT        RMB         2 # BYTES ACTUALLY TRANSFERRED
AEA1 0001       133: COLUMNCOUNT      RMB         1 COLUMN COUNTER
AEA2 0002       134: USERIOCBPOINTER  RMB         2 HOLDS REAL IOCBPOINTER DURING A SEARCHDIR
AEA4 0002       135: RDSIPOINTER      RMB         2 POINTER TO RDSI OF LAST SECTOR READ
AEA6 0002       136: FCBPOINTER       RMB         2 POINTER TO FCB FOR CURRENT IOCB
AEA8 0002       137: DIRENTRY RMB     2           POINTER TO DIRECTORY ENTRY FOUND BY SEARCHDIR
AEAA 0002       138: DIRENTRYDISP     RMB         2 DISPLACEMENT FROM SECTORBASE OF DIRENTRY
                139: *
AEAC 0002       140: SEARCHNAMEP      RMB         2 POINTER TO 16 BYTE FILENAME TO SEARCH FOR
AEAE 0002       141: SEARCHSAVEP      RMB         2 SAVED VALUE OF SEARCHNAMEP
AEB0 0003       142: SEARCHSTARTLSN   RMB         LSN:SIZE STARTING LSN OF DIRECTORY SEARCH
AEB3 0003       143: FREEDIRLSN       RMB         LSN:SIZE LSN OF FREE DIRECTORY SLOT
AEB6 0002       144: FREEDIRENTRYDISP RMB         2 DISPLACEMENT FROM SECTORBASE OF FREE ENTRY
AEB8 0002       145: DIRSECTOREND     RMB         2 ADDRESS OF BYTE PAST END OF DIRECTORY SECTOR
                146: *
AEBA 0010       147: FILENAMEBUF      RMB         DIR:NAMESIZE BUFFER TO HOLD PARSED FILENAME
AECA 0002       148: FILENAMEFILL     RMB         2 POINTER USED TO FILL FILENAMEBUF
AECC 0001       149: FILENAMELENGTH   RMB         1 LENGTH OF FILENAME
AECD 0004       150: FILESIZERQSTD    RMB         4 REQUESTED FILE SIZE IN BYTES
AED1 00000000   151: FILESIZE2        FCB         0,0,0,CHANGED TEMP TO HOLD 32 BIT DIGIT




ASM/6800 1.4A0: AED5 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 96; Form 5      WORKING STORAGE FOR DISK FILE DRIVERS
SDOS6800.ASM
AED5 0002       152: PARSECOUNT       RMB         2 UNUSED LENGTH OF NAME TO BE PARSED
AED7 0001       153: FILEPROT RMB     1           REQUESTED FILE PROTECTION BITS
                154: *
AED8 0002       155: ALLOCATIONCOUNT  RMB         LCN:SIZE NUMBER OF CLUSTERS TO ALLOCATE TO A FILE
AEDA 0002       156: ALLOCATIONPLCN   RMB         LCN:SIZE PREVIOUS LCN ALLOCATED TO FILE
AEDC 0002       157: DIVIDEPOINTLCN   RMB         LCN:SIZE DIVIDES $DISKMAP FOR FWD/BKWD SEARCH
AEDE 0002       158: SEARCHLCN        RMB         LCN:SIZE LCN OF CURRENT MAP BIT
AEE0 0002       159: AVAILABLELCN     RMB         LCN:SIZE LCN OF FREE CLUSTER
AEE2 0002       160: AVAILABLECOUNT   RMB         LCN:SIZE NUMBER OF FREE CLUSTERS STARTING AT AVAILABLELCN
AEE4 0002       161: DESIREDLCN       RMB         LCN:SIZE VALUE OF LCN WHICH WE'D LIKE TO ALLOCATE
AEE6 0002       162: LCNGROUPLENGTH   RMB         LCN:SIZE LENGTH OF GROUP OF FREE CLUSTERS WE'RE LOOKING A
AEE8 0002       163: DISKMAPSECTORSTART           RMB 2 POINTER TO 1ST BYTE OF $DISKMAP SECTOR
AEEA 0002       164: DISKMAPSECTOREND RMB         2 POINTER TO BYTE PAST END OF $DISKMAP SECTOR
AEEC 0002       165: DISKMAPBYTEPOINTER           RMB 2 POINTER TO $DISKMAP BYTE CONTAINING LCN BIT
AEEE 0001       166: DISKMAPMASK      RMB         1 MASK REPRESENTING BIT IN BYTE CONTTAINING LCN
                167: *
  AEEF          168: LASTSECTORREADQ  ; QUEUE OF RDSI'S IN LRU ORDER
AEEF 0014       169:          RMB     RDSI:SIZE   ONLY RDSI:FLINK,RDSI:BLINK ARE VALID
                170: *
AF03 0001       171: READFLAG RMB     1           WHICH ENTRY: INVENTSECTOR OR READSECTOR
AF04 0002       172: READSECTORDBP    RMB         2 POINTER TO SECTORDB BLOCK FOR READSECTOR
AF06 0001       173: REMOVESECTORCNT  RMB         1 IOCB COUNTER FOR REMOVERDSI
AF07 0002       174: REMOVEIOCBPTR    RMB         2 POINTER FOR REMOVERDSI
                175: *
AF09 0001       176: NRDSIS   RMB     1           # RDSI'S ACTUALLY SET UP (255 MAX)
AF0A 0001       177: NFCBS    RMB     1           NUMBER OF FCBS TO SEARCH (SEARCHFCBS)
AF0B 0001       178: NDRIVES  RMB     1           NUMBER OF DISKINFO TABLES
                179: *
AF0C 0000       180: ERRFCBPOINTER    FDB         0 POINTER TO ERROR MESSAGE FCB
                181: *        INIT AS ZERO IN CASE OF ERROR DURING INIT PROCESS
AF0E 0002       182: MAXSECTORSIZE    RMB         2 SIZE OF LARGEST SECTOR
AF10 0002       183: SYSFCBPOINTER    RMB         2 POINTER TO SPECIAL SYSTEM FCB (USED BY DELETE)
AF12 0007       184: SYSSECTORDB      RMB         SECTORDB:SIZE SPECIAL SYSTEM SECTORDB
                185: *
AF19 0002       186: LOCATERDCNX      RMB         2 TEMP FOR LOCATERDCN
AF1B 0002       187: DCBPTRSAVE       RMB         2 SAVED COPY OF DCBPOINTER (USED BY DISKxxx)
                188: *
AF1D 0002       189: LOADSYSCALLPTR   RMB         2 POINTER TO LOAD SYSCALL BLOCK




ASM/6800 1.4A0: AF1F SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 97; Form 5      SDOS FRONT END VARIABLE STORAGE
SDOS6800.ASM
AF1F B100       191: SYSCALLX FDB     OPCODES&$FF00 USED BY "SYSCALL$" TO JUMP INDEXED ON OPCODE
  AF22          192:          ORG     (*+1)/2*2   ENSURES EVEN ADDRESS FOR SDOSSTACK
AF22 0002       193: SDOSSTACK        RMB         2 POINTER TO BASE OF STACK USED BY SDOS
AF24 0002       194:          RMB     2           THIS HOLE MUST FOLLOW SDOSSTACK
                195: *                            BECAUSE IT'S USED BY THE COPYRIGHT CHECK
AF26 0002       196: USERSLASTERROR   RMB         2
AF28 92         197: EXITDAMAGEPTR    FCB         ((EXITDAMAGE-22)/2)&$FF
AF29 5C         198:          FCB     ((EXITDAMAGE-22)/2)/256
AF2A 0003       199: DECBUF   RMB     3           CONVERSION BUFFER FOR DISPLAYERROR
AF2D 0002       200: ERRORNUMBER      RMB         2 THIS MUST FOLLOW DECBUF
AF2F 0006       201: STRINGBUFFER     RMB         6 ASCII BUFFER FOR DISPLAYERROR
AF35 0022       202: LOGIOCB  RMB     IOCB:SIZE
AF57 0022       203: SYSIOCB  RMB     IOCB:SIZE
                204: *
                205: *        TASKING SYSTEM VARIABLES
                206: *
AF79 00         207: DONTSTOPME       FCB         0 0 --> OK TO SCHEDULE
                208: *                            1 --> IN TASK CRITICAL REGION; DON'T RESCHEDULE!
AF7A 0001       209: SURPRISE RMB     1           <> 0 --> SCHEDULING DECISION IS OK
                210: *
AF7B 0002       211: SCHEDX   RMB     2           TEMPORARY X STORAGE FOR SCHEDULING ROUTINES
                212: 
                213: *        THE FOLLOWING ARE SET UP BY SDOSINIT FROM THE CONFIGURATION TABLE
                214: *
  AF7D          215: INTDISABLE       ;JMP        INTDISABLE DISABLE ALL INTERRUPTS SUBROUTINE (PRESERVES (
AF7D 7EAF7D     216:          JMP     INTDISABLE
  AF80          217: INTENABLE        ;JMP        INTENABLE ENABLE ALL INTERRUPTS SUBROUTINE (PRESERVES (X)
AF80 7EAF80     218:          JMP     INTENABLE
  AF83          219: INTRTI   ;JMP    INTRTI      SET PRIORITY INTERRUPT MASK AND DO RTI (CODE)
AF83 7EAF83     220:          JMP     INTRTI
AF86 0002       221: INTERRUPTSTACK   RMB         2 COPY OF CNFG:INTERRUPTSTACK
  AF88          222: JMPIOINT ;JMP    JMPIOINT    JUMPS TO I/O DEVICE POLL CHAIN
AF88 7EAF88     223:          JMP     JMPIOINT
                224: *
                225: *        STUFF NEEDED TO KILL USER PROGRAMS
                226: *
AF8B 01         227: KILLREQUESTEDF   FCB         1 0 --> KILL WAS REQUESTED WHILE UNKILLABLE
AF8C 01         228: KILLEDF  FCB     1           0 --> ALREADY KILLED; 1--> NOT KILLED
AF8D 00         229: SDOSRECURSIVECALL            FCB 0 0 --> SDOS NOT CALLED
                230: *                            > 0 --> SDOS CALLED, USERRETAPTR IS VALID




ASM/6800 1.4A0: AF8E SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 98; Form 5      SDOS FRONT END VARIABLE STORAGE
SDOS6800.ASM
AF8E 0002       231: USERRETAPTR      RMB         2 USER PROGRAM'S STACK REGISTER CONTENTS ON ENTRY TO SDOS
                232: *                            POINTS TO HIS RETURN ADDRESS (USED BY "KILLUSERPROGRAM")
AF90 0002       233: USERSYSCALLPTR   RMB         2 POINTS TO USER'S LAST SYSCALL BLOCK




ASM/6800 1.4A0: AF90 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 99; Form 5      SDOS FRONT END VARIABLE STORAGE
SDOS6800.ASM
                235: *
                236: *        INTERNAL SYSCALL CONTROL BLOCKS
                237: *
AF92 00         238: CONSOLEOPEN      FCB         SYSCALL:OPEN USED TO OPEN CONSOLE WHEN EOF HIT ON "DO" FI
AF93 0E         239:          FCB     OPEN:SCLEN
AF94 00         240:          FCB     0           CHANNEL
AF95 00         241:          FCB     IGNORED     2ND PARAMETER BYTE
AF96 0000       242: CONSOLENAMEPTR   FDB         CHANGED POINTER TO CONSOLE NAME (SET BY SDOSINIT)
AF98 0000       243: CONSOLENAMELEN   FDB         CHANGED LENGTH OF CONSOLE NAME (SET BY SDOSINIT)
AF9A 0000       244:          FDB     CHANGED     EXPECTED VALUE OF 2
AF9C AFE8       245:          FDB     BUFFER      WHERE TO PUT # BYTES OF FILENAME USED
AF9E 0002       246:          FDB     2           SIZE OF EXPECTED RESPONSE
                247: *
AFA0 0F         248: ACKCONTROLC      FCB         SYSCALL:STATUS SYSCALL USED TO ACK ^C^C
AFA1 0E         249:          FCB     STATUS:SCLEN
AFA2 0034       250:          FCB     0,SC:GETLINEFLAGSHINT
AFA4 00000000   251:          FDB     IGNORED,IGNORED
AFA8 0000       252:          FDB     CHANGED
AFAA AFE80001   253:          FDB     BUFFER,1    READ LINE FLAGS TO GET ^C ERROR
                254: *
AFAE 0C         255: LOGOUT   FCB     SYSCALL:WRITEA USED TO COPY CONSOLE OUTPUT TO LOG FILE
AFAF 08         256:          FCB     WRITEA:SCLEN
AFB0 FF         257:          FCB     LOGCHANNEL  CHANNEL
AFB1 00         258:          FCB     IGNORED     2ND PARAM
AFB2 0000       259:          FDB     CHANGED     BUFFER ADDRESS
AFB4 0000       260:          FDB     CHANGED     REQUESTED COUNT
AFB6 0000       261:          FDB     CHANGED     REPLY COUNT -- ALWAYS ZEROED
AFB8 00000000   262:          FDB     IGNORED,IGNORED REPLY BUFFER AND LENGTH
AFBC 00000000   263:          FDB     CHANGED,CHANGED = DESIRED FILE POSITION
                264: *
AFC0 0C         265: DISPOUT  FCB     SYSCALL:WRITEA USED TO WRITE ERROR NUMBER ON CONSOLE
AFC1 08         266:          FCB     WRITEA:SCLEN
AFC2 00         267:          FCB     0           CHANNEL
AFC3 00         268:          FCB     IGNORED
AFC4 AF2F       269:          FDB     STRINGBUFFER BUFFER ADDRESS
AFC6 0000       270:          FDB     CHANGED     REQUESTED COUNT
                271: *
AFC8 0B         272: DISPREADB3       FCB         SYSCALL:READB USED TO READ POINTER FROM $ERRORMSGS FILE
AFC9 0E         273:          FCB     READB:SCLEN
AFCA FE         274:          FCB     SYSCHANNEL  CHANNEL




ASM/6800 1.4A0: AFCB SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 100; Form 5     SDOS FRONT END VARIABLE STORAGE
SDOS6800.ASM
AFCB 00         275:          FCB     IGNORED
AFCC 00000000   276:          FDB     IGNORED,IGNORED WRBUF,WRLEN
AFD0 0000       277:          FDB     CHANGED     REPLY LENGTH: EXPECTED VALUE OF 3
AFD2 AFD7       278:          FDB     DISPPOS1+1  BUFFER ADDRESS
AFD4 0003       279:          FDB     3           REQUESTED COUNT
  AFD6          280: DISPPOS1 ; THESE 4 BYTES GET MODIFIED BY DISPREADB3, DISPUSERERROR
AFD6 00000000   281:          FCB     0,CHANGED,CHANGED,CHANGED
                282: *
AFDA 0A         283: DISPGETCHAR      FCB         SYSCALL:READA USED TO READ ERROR MESSAGE FROM $ERRORMESSA
AFDB 0E         284:          FCB     READA:SCLEN
AFDC FE         285:          FCB     SYSCHANNEL  CHANNEL
AFDD 00         286:          FCB     0           LINE MODE FLAG: NOT LINE MODE
AFDE 00000000   287:          FDB     IGNORED,IGNORED WRBUF,WRLEN
AFE2 0000       288:          FDB     CHANGED     RPLEN: EXPECTED VALUE OF 1
AFE4 AFE8       289:          FDB     BUFFER      BUFFER ADDRESS
AFE6 0001       290:          FDB     1           REQUESTED COUNT
                291: *
AFE8 00000000   292: BUFFER   FDB     CHANGED,CHANGED 4 BYTE SCRATCH AREA
                293: *
  AFEC          294: EXITCHAIN        ; USED TO CHAIN TO "DEFAULTPROGRAM"
AFEC 06         295:          FCB     SYSCALL:CHAIN
AFED 0E         296:          FCB     CHAIN:SCLEN
AFEE 0000       297:          FCB     IGNORED,IGNORED PARAMS
AFF0 B86F000E   298:          FDB     DEFAULTPROG,DEFAULTPROGL WRBUF,WRLEN
AFF4 0000       299:          FDB     CHANGED     RESULT SIZE: EXPECTED VALUE OF 4
AFF6 B02D0004   300:          FDB     LOADFILEPOS,4 READ-BACK BUFFER DEFINITION
                301: *
  AFFA          302: EXITSCLOSE       ; USED BY EXITS TO CLOSE THE I/O CHANNELS
AFFA 02         303:          FCB     SYSCALL:CLOSE
AFFB 03         304:          FCB     CLOSE:SCLEN
AFFC 00         305:          FCB     CHANGED     CHANNEL NUMBER TO BE CLOSED
                306: *
  AFFD          307: IOBLOCK  ; ADJUSTED I/O REQUEST GETS COPIED HERE
  000E          308:          RPT     SCBLK:DATA
AFFD 00         309:          FCB     CHANGED




ASM/6800 1.4A0: B00A SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 101; Form 5     SDOS FRONT END VARIABLE STORAGE
SDOS6800.ASM
                311: *        SDOS SAFEGUARD CODE
                312: *        THIS CODE IS USED TO ENSURE THAT SD'S VERSION OF SERIALNUMBER.SYS...
                313: *        WAS TRULY EXECUTED PROPERLY.  OUR VERSION PASSES A SECRET SIGNAL
                314: *        TO "CHAIN" IN THE SYSCALL:PARAMS FEILD; THIS CODE IS PASSED TO
                315: *        THIS ROUTINE IN THE (X) REGISTER.  ANY OTHER CODE PASSED IN (X)
                316: *        WILL CAUSE SDOS TO EVENTUALLY BLOW UP (I.E., LONG TERM UNRELIABLE).
                317: *        THIS CODE IS INTENDED TO BE EXTREMELY OBTUSE, TO PREVENT WOULD-BE
                318: *        PIRATES FROM UNDERSTANDING (A DISASSEMBLY OF) IT, AND THEREFORE
                319: *        BREAKING OUR PROTECTION.  WE HOPE IT WORKS!
                320: *
B00B 01         321:          NOP                 FORCE DISASSEMBLER IN SYNC WITH THE WRONG STUFF
B00C 01         322:          NOP
B00D 01         323:          NOP
B00E F7         324:          FCB     $F7         STAB EXTENDED OPCODE, TO KEEP DISASSEMBLER IN FALSE SYNC
  0001          325:          IF      M6800!M6801
  B00F          326: SAFEGAURD        ; ENTRY POINT TO SDOS SAFEGAURDING CODE
B00F FF         327:          FCB     $FF         STX EXTENDED ONTO ADDRESS PART OF INSTRUCTION...
B010 B010       328:          FDB     *           THEREBY SETTING UP SECRET MESSAGE AS EXECUTABLE CODE
  B012          329: SAFEGAURD1
B012 49         330:          ROLA                RED HERRING INSTRUCTION
                331:          ;LDX    #$3B3B      "RTI, RTI" OPCODES
B013 CE3B3B     332:          LDX     #$3B3B
                333:          ;LDA    #$34        "DES" OPCODE
B016 8634       334:          LDAA    #$34
B018 FFB012     335:          STX     SAFEGAURD1  PLANT RTI, RTI AFTER SDOS ENABLING KEY
                336:          ;STA    SAFEGAURD   PLANT "DES" AT SAFEGAURD ENTRY POINT
B01B B7B00F     337:          STAA    SAFEGAURD
B01E 39         338:          RTS                 CHAINING TO INITIALIZE.SYS OR DEFAULTPGM...
                339: *        WILL ZERO USER SPACE BECAUSE OF INCOMPATIBLE DECRYPTION KEYS!




ASM/6800 1.4A0: B01E SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 102; Form 5     SDOS FRONT END VARIABLE STORAGE
SDOS6800.ASM
                341: *        AFTER EXECUTION WITH "INS, RTS" SDOS ENABLING KEY IN (X),
                342: *        THE SAFEGAURD CODE CONVERTS ITSELF INTO THE FOLLOWING:
                343: *
                344: *        SAFEGAURD
                345: *                DES
                346: *                INS
                347: *                RTS
                348: *                RTI
                349: *                RTI
                350: *                RTI
                351: *                RTI
                352: *
                353: *        IF THE PROPER ENABLING KEY IS NOT GIVEN, THE "DES" ... "RTI" SEQUENCE
                354: *        WILL BLOW UP ON SUCCESSIVE CALLS TO SAFEGAURD!
  0001          355:          ELSE    (M6809)
 *S*            356: SAFEGAURD        ; ENTRY POINT TO SDOS SAFEGAURDING CODE
 *S*            357:          ;LDD    #$7F32      = BYTES OF "LEAS -1,S" REVERSED (WHEEE!)
 *S*            358:          LDAB    #($7F32)&$FF
 *S*            359:          LDAA    #($7F32)/256
 *S*            360:          STX     *           STORE USER'S PURPORTED "(LEAS) 1,S/RTS"
 *S*            361:          ;LDX    #$3B3B      "RTI","RTI" OPCODES
 *S*            362:          LDX     #$3B3B
 *S*            363:          STX     SAFEGAURD+5 PLANT "RTI","RTI"
 *S*            364:          ;STD    SAFEGAURD+1 PLANT "    ...-1,S/LEAS ..."
 *S*            365:          STAB    SAFEGAURD+1+1
 *S*            366:          STAA    SAFEGAURD+1
 *S*            367:          ;STB    SAFEGAURD   PLANT "LEAS..."
 *S*            368:          STAB    SAFEGAURD
 *S*            369:          RTS
                370:          FIN




ASM/6800 1.4A0: B01F SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 103; Form 5     SDOS FRONT END VARIABLE STORAGE
SDOS6800.ASM
B01F 0F         372: LOADGETPOS       FCB         SYSCALL:STATUS USED BY LOADER TO PERFORM A "SKIP N BYTES"
B020 0E         373:          FCB     STATUS:SCLEN
B021 FE         374:          FCB     SYSCHANNEL
B022 00         375:          FCB     SC:GETPOS
B023 00000000   376:          FDB     IGNORED,IGNORED WRBUF,WRLEN
B027 0000       377:          FDB     CHANGED     RPLEN: EXPECTED VALUE OF 4
B029 B02D       378:          FDB     LOADFILEPOS PLACE TO PUT LOAD FILE POSITION
B02B 0004       379:          FDB     4           SIZE OF LOAD FILE POSITION BUFFER
                380: *
  B02D          381: LOADFILEPOS      ; CURRENT POSITION OF LOAD FILE
B02D 00000000   382:          FCB     CHANGED,CHANGED,CHANGED,CHANGED
                383: *
  B031          384: FILLDECRYPTBUFFER ; SYSCALL BLOCK TO READ 8 BYTES INTO DECRYPTBUFFER
B031 0B0E       385:           FCB     SYSCALL:READB,READB:SCLEN
B033 FE00       386:           FCB     SYSCHANNEL,IGNORED
B035 00000000   387:           FDB     IGNORED,IGNORED
B039 0000       388:           FDB     CHANGED     EXPECTED VALUE IS 8
B03B B05D0008   389:           FDB     DECRYPTBUFFER,8
                390: 
  B03F          391: LOADMULTIPLEOF8   ; SYSCALL BLOCK TO LOAD MULTIPLE OF 8 BYTES
B03F 0B0E       392:           FCB     SYSCALL:READB,READB:SCLEN
B041 FE00       393:           FCB     SYSCHANNEL,IGNORED
B043 00000000   394:           FDB     IGNORED,IGNORED
B047 0000       395:           FDB     CHANGED     EXPECTED VALUE = OPTIMIZEDLOADCOUNT
  B049          396: LOADADDRESS ; THIS IS WHERE LOADER WILL PLACE NEXT LOADED BYTE
B049 0000       397:           FDB     CHANGED     REPLY BUFFER
  B04B          398: OPTIMIZEDLOADCOUNT ; THIS IS NUMBER OF BYTES TO LOAD
B04B 0000       399:           FDB     CHANGED     ALWAYS A MULTIPLE OF 8
                400: 
  B04D          401: GET1BYTE ; SYSCALL BLOCK USED TO READ 1 BYTE FROM SYSCHANNEL INTO BUFFER
B04D 0B0E       402:          FCB     SYSCALL:READB,READB:SCLEN
B04F FE00       403:          FCB     SYSCHANNEL,IGNORED
B051 00000000   404:          FDB     IGNORED,IGNORED
B055 0000       405:          FDB     CHANGED     RPLEN: EXPECTED VALUE OF 1
B057 AFE80001   406:          FDB     BUFFER,1    WHERE TO PLACE REPLY
                407: 
B05B B05D       408: DECRYPTBUFPTR FDB DECRYPTBUFFER POINTER TO SCAN DECRYPTBUFFER
                409: 
  B05D          410: DECRYPTBUFFER     ; THIS IS WHERE CHUNKS OF 8 BYTES GET READ FOR DECRYPTION
B05D 00010203   411:          fcb     0,1,2,3,4,5,6,7 Loader decryption area




ASM/6800 1.4A0: B061 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 104; Form 5     SDOS FRONT END VARIABLE STORAGE
SDOS6800.ASM
  B065          412: DECRYPTBUFFEREND  ; END OF DECRYPT BUFFER
                413: 
B065 00         414: NKEYS    FCB     CHANGED     TYPE 5 RECORD: KEY COUNT
                415: 
B066 01         416: RUNNINGENCRYPTEDFLAG         FCB 1 HOLDS RUNNINGENCRYPTED FLAG IF MASK ROM
                417: ;                            initially TRUE so VTDRIVER will not recognize ^D during b
                418: 
B067 00         419: OKTODECRYPTFLAG  FCB         CHANGED 1 --> OK TO DECRYPT THIS MODULE
                420: 
  B068          421: OLDKEYENCRYPTED  ; ENCRYPTED VERSION OF LAST DECRYPTION KEY USED
B068 00000000   422:          FCB     0,0,0,0,0,0,0,0 SPACE TO HOLD KEY (8 BYTES)
                423: 
  B070          424: NEWKEYENCRYPTED  ; ENCRYPTED VERSION OF KEY USED TO LOAD THIS FILE
B070 00000000   425:          FCB     0,0,0,0,0,0,0,0 SPACE TO HOLD 8 BYTE KEY




ASM/6800 1.4A0: B074 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 105; Form 6     SDOS FRONT END VARIABLE STORAGE
SDOS6800.ASM
                  1: *        Encryption Subroutine
                  2: *        Encrypts 8 data bytes pointed to by (X)...
                  3: *            according to 8 byte key stored in locations KEY
                  4: *        Result is stored as 8 byte string at (X)
                  5: *
                  6: *        Encryption algorithm is logically as follows:
                  7: *        (Some minor modifications make it fast enough to run on a 6800)
                  8: *            Result:=ValuetobeEncrypted
                  9: *            For bit=64 to 1 -- one iteration per bit
                 10: *                If MSB(Result) -- Inspect MSB of Result to decide what to do
                 11: *                Then
                 12: *                    -- Encrypt step: XOR with KEY
                 13: *                    Result:=(Result XOR KEY)*2+[MSB(Result) XOR MSB(KEY)]
                 14: *                Else
                 15: *                    -- Randomize step: XOR with Randomizing constant
                 16: *                    Result:=(Result XOR RNDIZER)*2+[MSB(Result) XOR MSB(KEY)]
                 17: *                Fi
                 18: *            Endloop -- Encrypted result is in Result
                 19: *
                 20: *       Decryption algorithm is logically as follows:
                 21: *            Result:=ValuetobeDecrypted
                 22: *            For bit=64 to 1 -- one iteration per bit
                 23: *                If LSB(Result) XOR MSB(KEY) -- Decrypt LSB to decide how undo
                 24: *                Then -- Decrypt step
                 25: *                     Result:=[INT(Result/2)+LSB(Result)*2^63] XOR KEY
                 26: *                Else -- "UnRandomize" step
                 27: *                     Result:=INT([Result XOR (Randomizer*2)]/2)
                 28: *                Fi
                 29: *             Endloop -- Decrypted result is in "Result"




ASM/6800 1.4A0: B074 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 106; Form 6     SDOS FRONT END VARIABLE STORAGE
SDOS6800.ASM
                 31: *
                 32: *        Randomizer constant is as follows (random 64 bit string):
                 33: *        To prevent loss of this string due to accidental damage to this text,
                 34: *        it is repeated 5 times here:
                 35: *        %0101010110100110000010101001110011100011010101111010110000111001
                 36: *        %0101010110100110000010101001110011100011010101111010110000111001
                 37: *        %0101010110100110000010101001110011100011010101111010110000111001
                 38: *        %0101010110100110000010101001110011100011010101111010110000111001
                 39: *        %0101010110100110000010101001110011100011010101111010110000111001
                 40: *
                 41: *        The Hex equivalent of the randomizer string is:
                 42: *
                 43: *        $55 A6 0A 9C E3 57 AC 39
                 44: *
                 45: *
                 46: *        KEY is a buffer of 8 bytes; it should be in page zero for speed!
                 47: *        We have chosen to put it inline in EORA #.. instructions instead
                 48: *        in the Decrypt routine.  Encrypt simply references the decrypt bytes.
                 49: *
                 50: *        NOTE: IT MIGHT BE POSSIBLE TO SPEED UP THIS CODE FOR 6801/6809!




ASM/6800 1.4A0: B074 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 107; Form 6     SDOS FRONT END VARIABLE STORAGE
SDOS6800.ASM
  B078           52: decrypt1 ; do "decrypt step"
B078 A700        53:          staa    0,x
B07A A601        54:          ldaa    1,x         EOR with this byte of key
B07C 46          55:          rora                shift right, saving carry from left
  B07E           56: Key1     equ     *+1
                 57:          ;eora   #$16        $16 is red herring
B07D 8816        58:          EORA    #$16
B07F A701        59:          staa    1,x
B081 A602        60:          ldaa    2,x         EOR with this byte of key
B083 46          61:          rora                shift right, saving carry from left
  B085           62: Key2     equ     *+1
                 63:          ;eora   #$73        $73 is red herring
B084 8873        64:          EORA    #$73
B086 A702        65:          staa    2,x
B088 A603        66:          ldaa    3,x         EOR with this byte of key
B08A 46          67:          rora                shift right, saving carry from left
  B08C           68: Key3     equ     *+1
                 69:          ;eora   #$F6        $F6 is red herring
B08B 88F6        70:          EORA    #$F6
B08D A703        71:          staa    3,x
B08F A604        72:          ldaa    4,x         EOR with this byte of key
B091 46          73:          rora                shift right, saving carry from left
  B093           74: Key4     equ     *+1
                 75:          ;eora   #$09        $09 is red herring
B092 8809        76:          EORA    #$09
B094 A704        77:          staa    4,x
B096 A605        78:          ldaa    5,x         EOR with this byte of key
B098 46          79:          rora                shift right, saving carry from left
  B09A           80: Key5     equ     *+1
                 81:          ;eora   #$56        $56 is red herring
B099 8856        82:          EORA    #$56
B09B A705        83:          staa    5,x
B09D A606        84:          ldaa    6,x         EOR with this byte of key
B09F 46          85:          rora                shift right, saving carry from left
  B0A1           86: Key6     equ     *+1
                 87:          ;eora   #$ED        $ED is red herring
B0A0 88ED        88:          EORA    #$ED
B0A2 A706        89:          staa    6,x
B0A4 A607        90:          ldaa    7,x         EOR with this byte of key
B0A6 46          91:          rora                shift right, saving carry from left




ASM/6800 1.4A0: B0A6 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 108; Form 6     SDOS FRONT END VARIABLE STORAGE
SDOS6800.ASM
  B0A8           92: Key7     equ     *+1
                 93:          ;eora   #$41        $41 is red herring
B0A7 8841        94:          EORA    #$41
B0A9 A707        95:          staa    7,x
B0AB 5A          96:          decb                down count # iterations
B0AC 260F        97:          bne     decryptloop b/ more to do
                 98:          ;jmp    decryptrts  all done, go clean up and exit!
B0AE 7EB102      99:          JMP     decryptrts




ASM/6800 1.4A0: B0AE SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 109; Form 6     SDOS FRONT END VARIABLE STORAGE
SDOS6800.ASM
                101: *        Decrypt -- Undoes Encrypt
                102: *        Decryption key is stored inline in locations KEY0, KEY1, ... KEY7
                103: *        Block of 8 bytes at (X) is decrypted in place
                104: *
  B0B1          105: Decrypt ; Do the encryption in reverse, literally
                106: *        ldab    #64         64 iterations of reverse encryption required
B0B1 F6B0A8     107:          ldab    key7        do 8 + 2 lsb of key iterations
B0B4 C403       108:          andb    #3
B0B6 CB08       109:          addb    #8
                110:          ;jsr    eorall8bytes unscramble least significant byte
B0B8 BDB108     111:          JSR     eorall8bytes
B0BB A707       112:          staa    7,x         do first decryption iteration
  B0BD          113: decryptloop ; right shift current value and EOR with key
B0BD 46         114:          rora                Shift encrypted "encrypt" bit into carry...
B0BE A600       115:          ldaa    0,x         EOR with this byte of key
B0C0 46         116:          rora                shift right, saving carry from left
  B0C2          117: Key0     equ     *+1
                118:          ;eora   #$92        92 is red herring
B0C1 8892       119:          EORA    #$92
  B0C3          120: SDOSCHKSUMBASE   ; ALL CODE FROM HERE TO END OF SDOS IS CHECKSUMMED!!
B0C3 2BB3       121:          bmi     decrypt1    b/ encrypt bit was 1, go do "decrypt step"
  B0C5          122: decrypt0 ; "encrypt" bit was 0, right shift current value and EOR with randomizer
                123:          ;eora   key0        undo "eora key" done by decryptloop
B0C5 B8B0C2     124:          EORA    key0
B0C8 847F       125:          anda    #$7F        force MSB to be zero
                126:          ;eora   #$55        EOR with randomizer byte
B0CA 8855       127:          EORA    #$55
B0CC A700       128:          staa    0,x         (Note: MSB(Randomizer) must be zero)
B0CE A601       129:          ldaa    1,x         EOR with this byte of key
B0D0 46         130:          rora                shift right, saving carry from left
                131:          ;eora   #$A6
B0D1 88A6       132:          EORA    #$A6
B0D3 A701       133:          staa    1,x
B0D5 A602       134:          ldaa    2,x         EOR with this byte of key
B0D7 46         135:          rora                shift right, saving carry from left
                136:          ;eora   #$0A
B0D8 880A       137:          EORA    #$0A
B0DA A702       138:          staa    2,x
B0DC A603       139:          ldaa    3,x         EOR with this byte of key
B0DE 46         140:          rora                shift right, saving carry from left




ASM/6800 1.4A0: B0DE SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 110; Form 6     SDOS FRONT END VARIABLE STORAGE
SDOS6800.ASM
                141:          ;eora   #$9C
B0DF 889C       142:          EORA    #$9C
B0E1 A703       143:          staa    3,x
B0E3 A604       144:          ldaa    4,x         EOR with this byte of key
B0E5 46         145:          rora                shift right, saving carry from left
                146:          ;eora   #$E3
B0E6 88E3       147:          EORA    #$E3
B0E8 A704       148:          staa    4,x
B0EA A605       149:          ldaa    5,x         EOR with this byte of key
B0EC 46         150:          rora                shift right, saving carry from left
                151:          ;eora   #$57
B0ED 8857       152:          EORA    #$57
B0EF A705       153:          staa    5,x
B0F1 A606       154:          ldaa    6,x         EOR with this byte of key
B0F3 46         155:          rora                shift right, saving carry from left
                156:          ;eora   #$AC
B0F4 88AC       157:          EORA    #$AC
B0F6 A706       158:          staa    6,x
B0F8 A607       159:          ldaa    7,x         EOR with this byte of key
B0FA 46         160:          rora                shift right, saving carry from left
                161:          ;eora   #$39
B0FB 8839       162:          EORA    #$39
B0FD A707       163:          staa    7,x
B0FF 5A         164:          decb                down count # iterations
B100 26BB       165:          bne     decryptloop b/ more iterations to try
  B102          166: decryptrts
                167:          ;jsr    eorall8bytes now unscramble Most significant byte
B102 BDB108     168:          JSR     eorall8bytes
B105 A700       169:          staa    0,x
B107 39         170:          rts                 decryption complete, result is in Result




ASM/6800 1.4A0: B107 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 111; Form 6     SDOS FRONT END VARIABLE STORAGE
SDOS6800.ASM
  B108          172: Eorall8bytes ; Compute XOR of all 8 bytes
B108 A604       173:          ldaa    4,x         Why are the index displacements all mixed up?
                174:          ;eora   7,x         Because it puzzles the hell out of whoever...
B10A A807       175:          EORA    7,X
                176:          ;eora   5,x         attempts to dis-assemble it!
B10C A805       177:          EORA    5,X
                178:          ;eora   0,x
B10E A800       179:          EORA    0,X
                180:          ;eora   2,x
B110 A802       181:          EORA    2,X
                182:          ;eora   6,x
B112 A806       183:          EORA    6,X
                184:          ;eora   1,x
B114 A801       185:          EORA    1,X
                186:          ;eora   3,x         so Most sig byte of result depends on all 64 bits
B116 A803       187:          EORA    3,X
B118 39         188:          rts
                189: 
  0000          190:          if      0           Encrypt is not needed by this version of SDOS
 *S*            191: EncryptLSB ; Set MSB to XOR of all 8 bytes
 *S*            192: *        think about this, someday...
 *S*            193: *        Dennis Painter sez: put key just below (S) and run with
 *S*            194: *        Interrupts disabled. Then it cannot be damaged unless an
 *S*            195: *        NMI occurs, which will erase it.
 *S*            196: Encrypt  ; And now it begins
 *S*            197: *        ldab    #64         = # iterations to execute (too slow!)
 *S*            198:          ldab    key+7       do 8 + 2 lsb of key iterations
 *S*            199:          andb    #3
 *S*            200:          addb    #8
 *S*            201:          ;jsr    Eorall8bytes scramble MSB
 *S*            202:          JSR     Eorall8bytes
 *S*            203:          staa    0,x         examine sign bit to decide what to do
 *S*            204:          bpl     encryptrandomize b/ MSB is zero, go do randomize step
 *S*            205: encryptstep ; MSB is one, perform encryption step
 *S*            206: *        EOR current value with key, shift left
 *S*            207:          ldaa    7,x         EOR this byte with key byte
 *S*            208:          ;eora   key+7
 *S*            209:          EORA    key+7
 *S*            210:          asla                shift left, forcing LSB=0
 *S*            211:          staa    7,x




ASM/6800 1.4A0: B118 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 112; Form 6     SDOS FRONT END VARIABLE STORAGE
SDOS6800.ASM
 *S*            212:          ldaa    6,x         EOR this byte with key byte
 *S*            213:          ;eora   key+6
 *S*            214:          EORA    key+6
 *S*            215:          rola                shift left, saving carry from byte to right
 *S*            216:          staa    6,x
 *S*            217:          ldaa    5,x         EOR this byte with key byte
 *S*            218:          ;eora   key+5
 *S*            219:          EORA    key+5
 *S*            220:          rola                shift left, saving carry from byte to right
 *S*            221:          staa    5,x
 *S*            222:          ldaa    4,x         EOR this byte with key byte
 *S*            223:          ;eora   key+4
 *S*            224:          EORA    key+4
 *S*            225:          rola                shift left, saving carry from byte to right
 *S*            226:          staa    4,x
 *S*            227:          ldaa    3,x         EOR this byte with key byte
 *S*            228:          ;eora   key+3
 *S*            229:          EORA    key+3
 *S*            230:          rola                shift left, saving carry from byte to right
 *S*            231:          staa    3,x
 *S*            232:          ldaa    2,x         EOR this byte with key byte
 *S*            233:          ;eora   key+2
 *S*            234:          EORA    key+2
 *S*            235:          rola                shift left, saving carry from byte to right
 *S*            236:          staa    2,x
 *S*            237:          ldaa    1,x         EOR this byte with key byte
 *S*            238:          ;eora   key+1
 *S*            239:          EORA    key+1
 *S*            240:          rola                shift left, saving carry from byte to right
 *S*            241:          staa    1,x
 *S*            242:          ldaa    0,x         EOR this byte with key byte
 *S*            243:          ;eora   key+0
 *S*            244:          EORA    key+0
 *S*            245:          rola                shift left, saving carry from byte to right
 *S*            246:          bcc     encryptstep0 b/ encrypted MSB is now zero
 *S*            247:          ;inc    7,x         remember that encrypted MSB is a one
 *S*            248:          INC     7,X
 *S*            249: encryptstep0 ; encrypted MSB has been recorded in LSB of result
 *S*            250:          decb                down count # iterations to perform
 *S*            251:          beq     encryptrts  b/ done encrypting




ASM/6800 1.4A0: B118 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 113; Form 6     SDOS FRONT END VARIABLE STORAGE
SDOS6800.ASM
 *S*            252:          staa    0,x
 *S*            253:          bmi     encryptstep b/ new MSB is one, go do encrypt step
 *S*            254: encryptrandomize ; MSB is zero, perform randomize step
 *S*            255:          ldaa    7,x         EOR this byte with randomizer byte
 *S*            256:          ;eora   #$39
 *S*            257:          EORA    #$39
 *S*            258:          asla                shift left, forcing LSB to be zeroed
 *S*            259:          staa    7,x
 *S*            260:          ldaa    6,x         EOR this byte with randomizer byte
 *S*            261:          ;eora   #$AC
 *S*            262:          EORA    #$AC
 *S*            263:          rola                shift left, saving carry from byte to right
 *S*            264:          staa    6,x
 *S*            265:          ldaa    5,x         EOR this byte with randomizer byte
 *S*            266:          ;eora   #$57
 *S*            267:          EORA    #$57
 *S*            268:          rola                shift left, saving carry from byte to right
 *S*            269:          staa    5,x
 *S*            270:          ldaa    4,x         EOR this byte with randomizer byte
 *S*            271:          ;eora   #$E3
 *S*            272:          EORA    #$E3
 *S*            273:          rola                shift left, saving carry from byte to right
 *S*            274:          staa    4,x
 *S*            275:          ldaa    3,x         EOR this byte with randomizer byte
 *S*            276:          ;eora   #$9C
 *S*            277:          EORA    #$9C
 *S*            278:          rola                shift left, saving carry from byte to right
 *S*            279:          staa    3,x
 *S*            280:          ldaa    2,x         EOR this byte with randomizer byte
 *S*            281:          ;eora   #$0A
 *S*            282:          EORA    #$0A
 *S*            283:          rola                shift left, saving carry from byte to right
 *S*            284:          staa    2,x
 *S*            285:          ldaa    1,x         EOR this byte with randomizer byte
 *S*            286:          ;eora   #$A6
 *S*            287:          EORA    #$A6
 *S*            288:          rola                shift left, saving carry from byte to right
 *S*            289:          staa    1,x
 *S*            290:          ldaa    key         EOR MSB of result with MSB of key
 *S*            291:          anda    #$80        (Note: this requires that MSB(randomizer) be zero)




ASM/6800 1.4A0: B118 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 114; Form 6     SDOS FRONT END VARIABLE STORAGE
SDOS6800.ASM
 *S*            292:          ;eora   0,x         EOR MSB with MSB of key
 *S*            293:          EORA    0,X
 *S*            294:          ;eora   #$55        and EOR rest with randomizer
 *S*            295:          EORA    #$55
 *S*            296:          rola                shift left, saving carry from byte to right
 *S*            297:          bcc     encryptrand0 b/ encrypted MSB=0
 *S*            298:          ;inc    7,x         record that encrypted MSB is 1
 *S*            299:          INC     7,X
 *S*            300: encryptrand0 ; encrypted MSB is now saved in LSB of result
 *S*            301:          decb                down count # iterations to perform
 *S*            302:          beq     encryptrts  b/ done encrypting
 *S*            303:          staa    0,x
 *S*            304:          bpl     encryptrandomize b/ next bit is zero
 *S*            305:          ;jmp    encryptstep
 *S*            306:          JMP     encryptstep
 *S*            307: 
 *S*            308: encryptrts ; encryption is complete
 *S*            309:          staa    0,x         store MSB of final result
 *S*            310:          ;jsr    eorall8bytes scramble lsbyte
 *S*            311:          JSR     eorall8bytes
 *S*            312:          staa    7,x
 *S*            313:          rts
                314:          fin




ASM/6800 1.4A0: B119 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 115; Form 7     SDOS FRONT END CODE
SDOS6800.ASM
B119 0C0D         2: SDOSMSG  FCB     ASCII:FF,ASCII:CR
B11B 53444F53     3:          FCC     'SDOS Version '
B128 31           4:          FCB     '0+((SDOSVERSION/$10)&$F)
B129 2E           5:          FCB     '.
B12A 31           6:          FCB     '0+((SDOSVERSION/$1)&$F)
B12B 47           7:          FCB     SDOSSUBREVISION
B12C 2C20         8:          FCC     ', '
  0036            9: COPYRIGHTCHECKSUM            EQU $36
B12E 436F7079    10: COPYRIGHT        FCC         'Copyright (C) 1978 Software Dynamics'
B152 0D          11:          FCB     ASCII:CR
  B153           12: COPYRIGHTEND     EQU         *




ASM/6800 1.4A0: B152 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 116; Form 7     SDOS FRONT END CODE
SDOS6800.ASM
                 14: *
                 15: *        SYSCALL MINIMUM SIZE, N-WAY OPCODE BRANCH TABLE
                 16: *
B153 0EB3F7      17: OPCODES  OPEN:SCLEN,#OPEN    OPEN FILE
B156 0EB458      18:          CREATE:SCLEN,#CREATE CREATE A NEW FILE
B159 03B4A8      19:          CLOSE:SCLEN,#CLOSE  CLOSE A FILE
B15C 0EB4CB      20:          RENAME:SCLEN,#RENAME RENAME A FILE
B15F 0EB461      21:          DELETE:SCLEN,#DELETE DELETE A FILE
B162 0EBA42      22:          LOAD:SCLEN,#LOAD    LOAD A FILE INTO MEMORY
B165 0EB93C      23:          CHAIN:SCLEN,#CHAIN  CHAIN TO A FILE
B168 0EB44B      24:          CREATELOG:SCLEN,#CREATELOG CREATE A FILE FOR OUTPUT ON LOG CHANNEL
B16B 02B4C2      25:          CLOSELOG:SCLEN,#CLOSELOG CLOSE LOG OUTPUT FILE
B16E 0EB495      26:          DISKDEFAULT:SCLEN,#DISKDEFAULT SET DISK DEFAULT DEVICE
B171 0EB4FA      27:          READA:SCLEN,#READA  READ ASCII BYTES FROM A FILE
B174 0EB468      28:          READB:SCLEN,#READB  READ BINARY BYTES FROM A FILE
B177 08B5E2      29:          WRITEA:SCLEN,#WRITEA WRITE ASCII BYTES TO A FILE
B17A 08B46F      30:          WRITEB:SCLEN,#WRITEB WRITE BINARY BYTES TO A FILE
B17D 04B605      31:          CONTROL:SCLEN,#CONTROL PERFORM A CONTROL OPERATION ON AN I/O CHANNEL
B180 0EB629      32:          STATUS:SCLEN,#STATUS READ STATUS FROM AN I/O CHANNEL
B183 03B652      33:          WAITDONE:SCLEN,#WAITDONE WAIT FOR I/O CHANNEL OPERATION DONE
B186 02B80A      34:          EXIT:SCLEN,#EXIT    GIVE CONTROL BACK TO THE OPERATING SYSTEM
B189 04B7ED      35:          ERROREXIT:SCLEN,#ERROREXIT EXIT TO SYSTEM WITH ERROR CODE
B18C 04B64A      36:          SETERROR:SCLEN,#SETERROR REPORT AN ERROR TO THE SYSTEM
B18F 0EB654      37:          GETERROR:SCLEN,#GETERROR RETURN THE LAST ERROR CODE
B192 02B667      38:          DISPERROR:SCLEN,#DISPLAYERROR DISPLAY USER'S LAST ERROR
B195 02B7B5      39:          KILLPROOF:SCLEN,#KILLPROOF MAKE USER PROGRAM KILL-PROOF
B198 02B7B9      40:          KILLENABLE:SCLEN,#KILLENABLE MAKE USER PROGRAM KILLABLE
B19B 02B62F      41:          DEBUG:SCLEN,#DEBUG  CALL SYSTEM DEBUGGER
B19E 02B643      42:          ATTNCHECK:SCLEN,#ATTNCHECK OPERATOR ATTENTION CHECK
B1A1 02B21F      43:          ISCONSOLE:SCLEN,#ISCONSOLE IS CHANNEL ZERO OPEN TO CONSOLE PREDICATE
B1A4 08B39E      44:          INTERLOCK:SCLEN,#INTERLOCK OPERATE ON INTERLOCK OBJECT
B1A7 04B3B0      45:          DELAY:SCLEN,#DELAY  DELAY FOR SPECIFIED NUMBER OF CLOCK TICKS
B1AA 0EB1EE      46:          READLUNNAME:SCLEN,#READLUNNAME READ NAME OF LOGICAL UNIT
B1AD 0EBA73      47:          GETSERIALNUMBER:SCLEN,#GETSERIALNUMBER GET SERIAL NUMBER OF COMPUTER
  001E           48: OPCODEMAX        EQU         (*-OPCODES)/3-1




ASM/6800 1.4A0: B1AD SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 117; Form 7     SDOS FRONT END CODE
SDOS6800.ASM
                 50: *        THE FOLLOWING POINTER CAN BE USED TO LOCATE THE SDOS:XXX TABLE
                 51: *        IT IS INTENDED TO BE USED IN DIAGNOSING SYSTEM FAILURES;
                 52: *        ($FC,$FD) POINT TO I/O PAK, WHICH HAS 3 BYTE JMP TO SYSCALLENTRY
                 53: *        THE SDOS:XXX TABLE CONTAINS THE LAST ERROR DETECTED BY SDOS
                 54: *
B1B0 AE00        55:          FDB     CODE        POINTER TO SDOS:XXX TABLE
                 56: *
  B1B2           57: SYSCALLENTRY     EQU         *
B1B2 B6AF8D      58:          LDAA    SDOSRECURSIVECALL CHECK # TIMES SDOS HAS BEEN RECURSIVELY CALLED
B1B5 2606        59:          BNE     SYSCALL1    B/ NOT FIRST TIME SDOS WAS CALLED
B1B7 BFAF8E      60:          STS     USERRETAPTR SAVE STACK SO WE CAN KILL USER PROGRAM IF NEEDED
B1BA FFAF90      61:          STX     USERSYSCALLPTR SAVE POINTER TO USER'S SYSCALL
  B1BD           62: SYSCALL1 EQU     *
B1BD FFAE07      63:          STX     CODE+SDOS:IOBLOCKPTR
B1C0 E600        64:          LDAB    SCBLK:OPCODE,X GET THE OPCODE
                 65:          ;CMPB   #OPCODEMAX  IS THE OPCODE LEGAL?
B1C2 C11E        66:          CMPB    #OPCODEMAX
B1C4 2228        67:          BHI     ERRILLSYSCALL B/ NO
B1C6 58          68:          ASLB                MULTIPLY OPCODE VALUE BY 3
B1C7 EB00        69:          ADDB    SCBLK:OPCODE,X N*2+N = N*3
  0000           70:          IF      OPCODEMAX*3>>255
 *S*             71:          +ERROR  OPCODE INDEXING WON'T WORK
                 72:          FIN
B1C9 F7AF20      73:          STAB    SYSCALLX+1  LOCATE OPCODE TABLE SLOT CORRESPONDING TO OPCODE
B1CC A601        74:          LDAA    SCBLK:WLEN,X COPY SYSCALL BLOCK LENGTH TO (A)
B1CE 847F        75:          ANDA    #%01111111  MASK OFF WAIT FLAG
                 76:          ;CMPA   #SCBLK:RPLEN+1 DOES SYSCALL BLOCK INCLUDE SPACE FOR REPLY LENGTH ?
B1D0 8109        77:          CMPA    #SCBLK:RPLEN+1
B1D2 2304        78:          BLS     SYSCALL2    B/ NO, LEAVE SCBLK:RPLEN ALONE
                 79:          ;CLR    SCBLK:RPLEN,X YES, ZERO IT (CONVENIENCE FOR SYSCALL PROCESSORS)
B1D4 6F08        80:          CLR     SCBLK:RPLEN,X
                 81:          ;CLR    SCBLK:RPLEN+1,X
B1D6 6F09        82:          CLR     SCBLK:RPLEN+1,X
                 83: *        CHECK TO SEE IF SCBLK:RDBUF POINTS INTO SCRATCHPAD ?
  B1D8           84: SYSCALL2 EQU     *
                 85: *        CMPA    SCBLK:WLEN,X COPY WAIT FLAG TO CARRY BIT
                 86:          ;LDX    SYSCALLX    GRAB POINTER TO OPCODE TABLE SLOT
B1D8 FEAF1F      87:          LDX     SYSCALLX
                 88:          ;CMPA   OPCODES&$FF,X IS SIZE OF SYSCALL BLOCK >= NECESSARY MINIMUM ?
B1DB A153        89:          CMPA    OPCODES&$FF,X




ASM/6800 1.4A0: B1DD SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 118; Form 7     SDOS FRONT END CODE
SDOS6800.ASM
B1DD 2513        90:          BCS     ERRSYSCALLTOOSHORT B/ NO, YOU DIE!
                 91:          ;INC    SDOSRECURSIVECALL NOW THAT USERRETAPTR IS VALID,...
B1DF 7CAF8D      92:          INC     SDOSRECURSIVECALL
                 93: *                            LET KILLUSER PROGRAM KNOW ABOUT IT
                 94:          ;JSR    [(OPCODES&$FF)+1,X] GO DO THE SYSCALL FUNCTION
B1E2 EE54        95:          LDX     (OPCODES&$FF)+1,X
B1E4 AD00        96:          JSR     0,X
B1E6 2500        97:          BCS     *+2         MAKE SURE WE GET CONTROL EVEN IF ERROR OCCURS
                 98:          ;DEC    SDOSRECURSIVECALL DOWN COUNT # RECURSIVE CALLS TO SDOS
B1E8 7AAF8D      99:          DEC     SDOSRECURSIVECALL
B1EB 251C       100:          BCS     ERRORED     B/ SOME ERROR DID HAPPEN, ABORT!
B1ED 39         101:          RTS                 RETURN TO CALLER
                102: *
B1EE 8D06       103: ERRILLSYSCALL    BSR         ERRET
B1F0 0409       104:          FDB     ERR:ILLEGALSYSCALL
                105: 
  B1F2          106: ERRSYSCALLTOOSHORT           EQU *
B1F2 8D02       107:          BSR     ERRET
B1F4 041D       108:          FDB     ERR:SYSCALLTOOSHORT




ASM/6800 1.4A0: B1F4 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 119; Form 7     SDOS FRONT END CODE
SDOS6800.ASM
                110: *        SDOS ERROR HANDLING
                111: *
                112: *        ERRET -- CALLED VIA A JSR WITH IN-LINE 2-BYTE ERROR CODE
                113: *                ERROR CODE IS LOADED INTO (X)
                114: *                CARRY IS SET TO INDICATE ERROR CONDITION
                115: *                AND A RTS IS PERFORMED
                116: *                IF CALLING ROUTINE HAS NO BCS/BCC AFTER JSR,
                117: *                ERRET AUTOMATICALLY POPS THE STACK ONE SUBROUTINE LEVEL
                118: *                AND LOOKS AGAIN FOR A BCS
                119: *                ***NOTE: THIS MEANS TOP LEVEL (USER!) MUST HAVE BCC/BCS!***
                120: *                This routine places error code in TEMPX while unwinding stack
                121: *
  B1F6          122: ERRET    ;PULX               GET RETURN ADDRESS TO (X)
B1F6 30         123:          TSX
B1F7 EE00       124:          LDX     0,X
B1F9 31         125:          INS
B1FA 31         126:          INS
B1FB FFAE56     127:          STX     ERRORADDRESS THIS HELPS WHEN WE'RE DEBUGGING SDOS
                128:          ;LDX    ,X          GET ERROR CODE INTO (X)
B1FE EE00       129:          LDX     0,X
  B200          130: ERRORINX ; ENTRY POINT IF ERROR CODE IS ALREADY IN (X)
B200 FFAE01     131:          STX     LASTERROR   SAVE THE ERROR CODE IN CASE OF CRASH
B203 DF00       132:          STX     TEMPX       SAVE ERROR CODE IN RE-ENTRANT WAY
B205 2002       133:          BRA     ERRORED     SKIP INTO BCC/BCS STACK POP LOOP
                134: 
  B207          135: ERRETL   ; POP RETURN ADDRESS FROM THE STACK
                136:          ;LEAS   2,S
  0000          137:          IF      2<0
 *S*            138:          RPT     -2
 *S*            139:          DES
                140:          ELSE
  0002          141:          RPT     2
B207 31         142:          INS
                143:          FIN
  B209          144: ERRORED  ; NOW FAKE "RTS" UNTIL BCC/BCS ENCOUNTERED
                145:          ;LDX    0,S         GRAB RETURN ADDRESS
B209 30         146:          TSX
B20A EE00       147:          LDX     0,X
B20C A600       148:          LDAA    ,X          DOES RETURN ADDRESS POINT TO BCS/BCC ?
  0001          149:          IF      M6800!M6801




ASM/6800 1.4A0: B20C SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 120; Form 7     SDOS FRONT END CODE
SDOS6800.ASM
                150: *        SIMULATED LONG BRANCHES START WITH BCC/BCS!
  0001          151:          ELSE    (M6809)
 *S*            152:          ;CMPA   #$10        EXTENDED OPCODE?
 *S*            153:          CMPA    #$10
 *S*            154:          BNE     ERRORED1    B/ NO
 *S*            155:          LDAA    1,X         YES, GET 2ND BYTE OF OPCODE
 *S*            156: ERRORED1 ; (A) CONTAINS OPCODE TO INSPECT
                157:          FIN
B20E 84FE       158:          ANDA    #\%1        (MASK OFF "INVERT BRANCH CONDITION" BIT)
                159:          ;CMPA   #$24        (BCS OPCODE FOR 6800/6801 AND 6809)
B210 8124       160:          CMPA    #$24
B212 26F3       161:          BNE     ERRETL      NO, SIMULATE "BCS TO A RTS"
                162:          ;LDX    TEMPX       GET THE ERROR CODE AGAIN
B214 DE00       163:          LDX     TEMPX
B216 0D39       164:          ERRORRTS            SET THE CARRY AND EXIT
                165: 
  B218          166: ERRORSAVE        ; SAVE THE ERROR CODE IN (X)
B218 FFAE01     167:          STX     LASTERROR   SAVE CODE IN CASE OF CRASH
B21B DF00       168:          STX     TEMPX       SAVE ERROR CODE IN RE-ENTRANT FASHION
B21D 0D39       169:          ERRORRTS            AND EXIT




ASM/6800 1.4A0: B21D SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 121; Form 7     SYSCALL:ISCONSOLE HANDLER
SDOS6800.ASM
                171: *
                172: *        ISCONSOLE -- PERFORM "SYSCALL:ISCONSOLE"
                173: *
  B21F          174: ISCONSOLE        EQU         *
                175:          ;LDX    CODE+SDOS:CONFIGURATION FIND IOCB POINTER FOR CHANNEL 0
B21F FEAE03     176:          LDX     CODE+SDOS:CONFIGURATION
                177:          ;LDX    [CNFG:IOCBPOINTERS,X] (GET POINTER TO LIST OF IOCB POINTERS)
B222 EE04       178:          LDX     CNFG:IOCBPOINTERS,X
B224 EE00       179:          LDX     0,X
                180:          ;LDX    IOCB:DRIVER,X GET POINTER TO DRIVER FOR DEVICE
B226 EE09       181:          LDX     IOCB:DRIVER,X
B228 2709       182:          BEQ     ERRCLOSED   B/ CHANNEL IS NOT OPEN
B22A BCAE52     183:          CPX     CONSOLEDRIVER OPEN TO CONSOLE DRIVER ?
B22D 2723       184:          BEQ     ISCONSOLEOKRTS B/ YES, TAKE "OK" EXIT
B22F 8DC5       185:          BSR     ERRET       NO
B231 0423       186:          FDB     ERR:NOTOPENTOCONSOLE
                187: 
  B233          188: ERRCLOSED        EQU         *
B233 8DC1       189:          BSR     ERRET
B235 0408       190:          FDB     ERR:CLOSED
                191: 
  B237          192: ERRCHBUSY        EQU         *
B237 8DBD       193:          BSR     ERRET
B239 0407       194:          FDB     ERR:CHBUSY
                195: 
  B23B          196: ERRCHTOOBIG      EQU         *
B23B 8DB9       197:          BSR     ERRET
B23D 0406       198:          FDB     ERR:CHTOOBIG




ASM/6800 1.4A0: B23D SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 122; Form 7     CHANNEL NUMBER CHECKING/IOCB DETERMINATION
SDOS6800.ASM
                200: *        CHECKCHANNELOPEN -- CHECK THAT CHANNEL SPECIFIED BY SYSCALL IS OPEN
                201: *        RETURNS POINTER TO IOCB FOR CHANNEL IN IOCBPOINTER
                202: *        ALSO SETS UP DRIVERVPOINTER, DCBPOINTER FROM IOCB IF CHANNEL IS OPEN
                203: *
  B23F          204: CHECKCHANNELOPEN EQU         *
B23F 8D1B       205:          BSR     GETIOCBPOINTER FIRST, LOCATE THE IOCB FOR THE DESIRED CHANNEL
                206:          ;LDX    IOCB:DRIVER,X GRAB POINTER TO DEVICE DRIVER FOR CHANNEL
B241 EE09       207:          LDX     IOCB:DRIVER,X
B243 27EE       208:          BEQ     ERRCLOSED   B/ CHANNEL IS NOT OPEN!
B245 FFAE54     209:          STX     DRIVERVPOINTER FOR LATER USE
                210:          ;LDX    IOCBPOINTER SET UP DCB POINTER FROM IOCB, ALSO
B248 FEAE09     211:          LDX     IOCBPOINTER
                212:          ;LDX    IOCB:DCB,X
B24B EE00       213:          LDX     IOCB:DCB,X
B24D DF06       214:          STX     DCBPOINTER
                215:          ;LDX    DRIVERVPOINTER FOR CONVENIENCE OF CALLERS
B24F FEAE54     216:          LDX     DRIVERVPOINTER
  B252          217: ISCONSOLEOKRTS   EQU         *
B252 0C39       218:          OKRTS
                219: *
                220: *        CHECKCHANNELCLOSED -- CHECK THAT CHANNEL SPECIFIED BY SYSCALL IS CLOSED
                221: *        SETS IOCBPOINTER TO POINTER TO I/O CONTROL BLOCK FOR SPECIFIED CHANNEL
                222: *
  B254          223: CHECKCHANNELCLOSED           EQU *
B254 8D06       224:          BSR     GETIOCBPOINTER FIRST, LOCATE THE PROPER IOCB
  B256          225: CHECKCHANNELCL1  ; ENTRY POINT FOR CREATELOG
                226:          ;LDX    IOCB:DRIVER,X GRAB POINTER TO DEVICE DRIVER
B256 EE09       227:          LDX     IOCB:DRIVER,X
B258 26DD       228:          BNE     ERRCHBUSY   B/ CHANNEL IS ALREADY BUSY!
B25A 0C39       229:          OKRTS




ASM/6800 1.4A0: B25A SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 123; Form 7     CHANNEL NUMBER CHECKING/IOCB DETERMINATION
SDOS6800.ASM
                231: *
                232: *        GETIOCBPOINTER -- SETS IOCBPOINTER USING SCBLK:PARAMS AS CHANNEL NUMBER
                233: *        ALSO RETURNS IOCBPOINTER IN (X)
                234: *
  B25C          235: GETIOCBPOINTER   EQU         *
                236:          ;LDX    CODE+SDOS:IOBLOCKPTR GRAB POINTER TO SYSCALL BLOCK
B25C FEAE07     237:          LDX     CODE+SDOS:IOBLOCKPTR
B25F E602       238:          LDAB    SCBLK:PARAMS,X THIS IS WHERE ***ALL*** CHANNEL NUMBERS MUST BE!
                239:          ;LDX    CODE+SDOS:CONFIGURATION VALID CHANNEL NUMBER ?
B261 FEAE03     240:          LDX     CODE+SDOS:CONFIGURATION
                241:          ;CMPB   CNFG:NIOCHANNELS,X ...?
B264 E106       242:          CMPB    CNFG:NIOCHANNELS,X
B266 2414       243:          BCC     GETIOCB1    B/ NO!
B268 4F         244:          CLRA                MAKE CHANNEL NUMBER INTO 16 BIT QUANTITY
                245:          ;ASLD               DOUBLE TO MAKE INDEX INTO CHANNEL POINTER TABLE
B269 58         246:          ASLB
B26A 49         247:          ROLA
                248:          ;ADDD   CNFG:IOCBPOINTERS,X COMPUTE POINTER TO IOCB POINTER
B26B EB05       249:          ADDB    (CNFG:IOCBPOINTERS)+1,X
B26D A904       250:          ADCA    CNFG:IOCBPOINTERS,X
                251:          ;TDX                GRAB POINTER TO IOCB
B26F 9700       252:          STAA    TEMPA
B271 D701       253:          STAB    TEMPB
B273 DE00       254:          LDX     TEMPX
                255:          ;LDX    0,X
B275 EE00       256:          LDX     0,X
  B277          257: GETIOCBX EQU     *
B277 FFAE09     258:          STX     IOCBPOINTER
B27A 0C39       259:          OKRTS
                260: 
  B27C          261: GETIOCB1 ; INVALID CHANNEL NUMBER FOUND
B27C B6AF8D     262:          LDAA    SDOSRECURSIVECALL USER SYSCALL?
B27F 4A         263:          DECA                (NESTING = 1?)
B280 27B9       264:          BEQ     ERRCHTOOBIG B/ YES, REALLY IS INVALID CHANNEL NUMBER
                265:          ;LDX    #LOGIOCB    ASSUME LOG IOCB WAS MEANT
B282 CEAF35     266:          LDX     #LOGIOCB
                267:          ;CMPB   #LOGCHANNEL ASSUMPTION CORRECT ?
B285 C1FF       268:          CMPB    #LOGCHANNEL
B287 27EE       269:          BEQ     GETIOCBX    B/ YES
                270:          ;LDX    #SYSIOCB    NO, ALL OTHERS GET TURNED INTO SYSIOCB CHANNELS




ASM/6800 1.4A0: B289 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 124; Form 7     CHANNEL NUMBER CHECKING/IOCB DETERMINATION
SDOS6800.ASM
B289 CEAF57     271:          LDX     #SYSIOCB
B28C 20E9       272:          BRA     GETIOCBX




ASM/6800 1.4A0: B28C SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 125; Form 7     CHANNEL NUMBER CHECKING/IOCB DETERMINATION
SDOS6800.ASM
                274: *
                275: *        ISDIG -- IS (A) A DIGIT ?
                276: *        RETURNS CARRY RESET IF YES
                277: *        RETURNS CARRY SET IF NO
                278: *        (A) LEFT UNDISTURBED
                279: *
  B28E          280: ISDIG    EQU     *
                281:          ;CMPA   #'9         DIGIT ?
B28E 8139       282:          CMPA    #'9
B290 2203       283:          BHI     ISDNO       B/ NOPE
                284:          ;CMPA   #'0         ...?
B292 8130       285:          CMPA    #'0
B294 39         286:          RTS                 WITH CARRY SET PROPERLY
                287: 
  B295          288: ISDNO    EQU     *
B295 0D         289:          SEC                 MEANING "NOPE..."
B296 39         290:          RTS
                291: *
                292: *        ISALPHANUM -- IS (A) AN ALPHA OR NUMERIC CHARACTER ?
                293: *        RETURNS CARRY RESET IF TRUE; LOWER CASE LETTER FOLDED INTO UPPER CASE
                294: *        OTHERWISE, RETURNS CARRY SET
                295: *        (A) IS UNDISTURBED
                296: *
  B297          297: ISALPHANUM       EQU         *
B297 8DF5       298:          BSR     ISDIG       TRY FOR A DIGIT, FIRST...
B299 240A       299:          BCC     ISALPHANUMRTS B/ ITS A DIGIT, GET OUT NOW!
                300:          ;CMPA   #'Z+32      LOWER CASE ALPHA ?
B29B 817A       301:          CMPA    #'Z+32
B29D 22F6       302:          BHI     ISDNO       B/ NO, AND ITS NOT UPPER CASE, EITHER
                303:          ;CMPA   #'A+32      ...?
B29F 8161       304:          CMPA    #'A+32
B2A1 2503       305:          BCS     ISALPHANUM1 B/ NO, MIGHT BE UPPER CASE
B2A3 845F       306:          ANDA    #%01011111  IS LOWER CASE, CONVERT TO UPPER CASE
  B2A5          307: ISALPHANUMRTS    ; CHEAP EXIT
B2A5 39         308:          RTS                 WITH THE CARRY RESET
                309: 
  B2A6          310: ISALPHANUM1      ; MIGHT BE UPPER CASE
                311:          ;CMPA   #'Z         ...?
B2A6 815A       312:          CMPA    #'Z
B2A8 22EB       313:          BHI     ISDNO       B/ NOPE




ASM/6800 1.4A0: B2A8 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 126; Form 7     CHANNEL NUMBER CHECKING/IOCB DETERMINATION
SDOS6800.ASM
                314:          ;CMPA   #'A         ...?
B2AA 8141       315:          CMPA    #'A
B2AC 39         316:          RTS




ASM/6800 1.4A0: B2AC SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 127; Form 7     CHANNEL NUMBER CHECKING/IOCB DETERMINATION
SDOS6800.ASM
                318: *
                319: *        FINDDRIVER -- CONVERT DEVICE NAME TO DRIVER ENTRY POINTER VECTOR ADDRESS
                320: *                ALSO FILLS IN DCBPOINTER
                321: *        SYSCALL POINTED TO BY FNAMESYSCALLPTR SELECTS FILENAME AND SIZE
                322: *        RETURNS (X) POINTING TO DRIVER
                323: *        SETS RDBUF TO LENGTH OF PREFIX OF USER-SUPPLIED FILENAME THAT MATCHES DEVICE 
                324: *
  B2AD          325: FINDDRIVER       EQU         *
                326:          ;LDX    CODE+SDOS:IOBLOCKPTR CHECK FOR DEVICE NAME GIVEN
B2AD FEAE07     327:          LDX     CODE+SDOS:IOBLOCKPTR
                328:          ;LDX    SCBLK:WRLEN,X GET LENGTH OF FILENAME
B2B0 EE06       329:          LDX     SCBLK:WRLEN,X
B2B2 DF00       330:          STX     TEMPX       SAVE AS LOOP COUNTER
                331:          ;LDX    CODE+SDOS:IOBLOCKPTR GET ADDRESS OF FILE NAME
B2B4 FEAE07     332:          LDX     CODE+SDOS:IOBLOCKPTR
                333:          ;LDX    SCBLK:WRBUF,X
B2B7 EE04       334:          LDX     SCBLK:WRBUF,X
B2B9 DF02       335:          STX     FROMPOINTER SAVE STRING SCAN POINTER
  B2BB          336: FINDDRIVER1L     ; CHECK NEXT CHARACTER TO SEE IF VALID DEVICE NAME
                337:          ;LDX    TEMPX       GET REMAINING STRING COUNT
B2BB DE00       338:          LDX     TEMPX
B2BD 2750       339:          BEQ     FINDDEFAULT B/ NO BYTES LEFT, VALID DEVICE NAME NOT SEEN
B2BF 09         340:          DEX                 DOWN COUNT # BYTES REMAINING
B2C0 DF00       341:          STX     TEMPX
                342:          ;LDX    FROMPOINTER GET BYTE FROM STRING
B2C2 DE02       343:          LDX     FROMPOINTER
                344:          ;LDA    ,X+
B2C4 A600       345:          LDAA    0,X
B2C6 08         346:          INX
B2C7 DF02       347:          STX     FROMPOINTER
B2C9 8DCC       348:          BSR     ISALPHANUM  ALPHANUMERIC CHARACTER ?
B2CB 24EE       349:          BCC     FINDDRIVER1L B/ YES, CONTINUE SCAN FOR ":"
  B2CD          350: FINDDRIVER2      ; END OF ALPHANUMERIC DEVICE NAME PREFIX FOUND
                351:          ;CMPA   #':         MUST HAVE ":" OR A DEVICE NAME IS NOT SPECIFIED
B2CD 813A       352:          CMPA    #':
B2CF 263E       353:          BNE     FINDDEFAULT NO ":", MUST BE FILE NAME ON DEFAULT DISK




ASM/6800 1.4A0: B2CF SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 128; Form 7     CHANNEL NUMBER CHECKING/IOCB DETERMINATION
SDOS6800.ASM
                355: *        FOUND SOMETHING THAT LOOKS LIKE A DEVICE NAME
                356: *
                357:          ;LDX    CODE+SDOS:CONFIGURATION FIRST, LOOK FOR A DISK DEVICE NAME
B2D1 FEAE03     358:          LDX     CODE+SDOS:CONFIGURATION
                359:          ;LDX    CNFG:DISKDCBS,X
B2D4 EE00       360:          LDX     CNFG:DISKDCBS,X
  B2D6          361: FINDDISK EQU     *
B2D6 DF06       362:          STX     DCBPOINTER  POINTER TO DISK INFO ENTRY
                363:          ;LDX    DCB:NAME,X  GET POINTER TO DEVICE NAME STRING
B2D8 EE03       364:          LDX     DCB:NAME,X
B2DA 8D73       365:          BSR     CMPDVNAME   COMPARE AGAINST FILENAME STRING
B2DC 2458       366:          BCC     FOUNDDISK   B/ THAT'S IT!
                367:          ;LDX    DCBPOINTER  GET ADDRESS OF NEXT DISK INFO ENTRY
B2DE DE06       368:          LDX     DCBPOINTER
                369:          ;LDX    DCB:NEXTDCB,X
B2E0 EE05       370:          LDX     DCB:NEXTDCB,X
B2E2 26F2       371:          BNE     FINDDISK    B/ NOT END OF LIST
                372:          ;LDX    DEFAULTDISKDCB ASSUME DEFAULT DISK CHOSEN
B2E4 FEAE4C     373:          LDX     DEFAULTDISKDCB
B2E7 DF06       374:          STX     DCBPOINTER  REMEMBER IT...
                375:          ;LDX    #DEFAULTDISKNAME CHECK TO MAKE SURE...
B2E9 CEB349     376:          LDX     #DEFAULTDISKNAME
B2EC 8D61       377:          BSR     CMPDVNAME   CHECK DEFAULT DISK NAME AGAINST GIVEN DEVICE NAME
B2EE 2446       378:          BCC     FOUNDDISK   B/ IT MATCHES, FAKE IT FROM HERE!
                379: *
                380: *        SEARCH THE NON-DISK LIST
                381: *
                382:          ;LDX    CODE+SDOS:CONFIGURATION
B2F0 FEAE03     383:          LDX     CODE+SDOS:CONFIGURATION
                384:          ;LDX    CNFG:DEVICEDCBS,X GET POINTER TO LIST OF NON-DISK DEVICES
B2F3 EE02       385:          LDX     CNFG:DEVICEDCBS,X
  B2F5          386: FINDDEVICEL      ; SEE IF THIS IS IT
B2F5 DF06       387:          STX     DCBPOINTER  SAVE POINTER TO NON-DISK DCB
                388:          ;LDX    DCB:DRIVER,X GET DEVICE DRIVER ADDRESS IN CASE OF MATCH
B2F7 EE07       389:          LDX     DCB:DRIVER,X
B2F9 FFAE54     390:          STX     DRIVERVPOINTER AND SAVE
                391:          ;LDX    DCBPOINTER  NOW COMPARE DEVICE NAME STRINGS
B2FC DE06       392:          LDX     DCBPOINTER
                393:          ;LDX    DCB:NAME,X  GET ADDRESS OF NON-DISK DEVICE NAME
B2FE EE03       394:          LDX     DCB:NAME,X




ASM/6800 1.4A0: B300 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 129; Form 7     CHANNEL NUMBER CHECKING/IOCB DETERMINATION
SDOS6800.ASM
B300 8D4D       395:          BSR     CMPDVNAME   GO SEE IF DEVICE NAME IS IN LIST
B302 241E       396:          BCC     FOUNDDEVICE B/ WE FOUND IT!
                397:          ;LDX    DCBPOINTER  NO MATCH, FIND NEXT ENTRY IN DCB LIST
B304 DE06       398:          LDX     DCBPOINTER
                399:          ;LDX    DCB:NEXTDCB,X END OF DCB LIST HIT ?
B306 EE05       400:          LDX     DCB:NEXTDCB,X
B308 26EB       401:          BNE     FINDDEVICEL B/ NO
                402:          ;JSR    ERRET       NOT A VALID DEVICE NAME
B30A BDB1F6     403:          JSR     ERRET
B30D 0420       404:          FDB     ERR:NOSUCHDEVICE




ASM/6800 1.4A0: B30D SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 130; Form 7     CHANNEL NUMBER CHECKING/IOCB DETERMINATION
SDOS6800.ASM
                406: *
                407: *        NO DEVICE NAME, ASSUME A FILE ON DEFAULT DISK DRIVE
                408: *
  B30F          409: FINDDEFAULT      EQU         *
                410:          ;LDX    CODE+SDOS:IOBLOCKPTR SET NAMESIZE BACK TO USER-SUPPLIED SIZE
B30F FEAE07     411:          LDX     CODE+SDOS:IOBLOCKPTR
                412:          ;LDX    SCBLK:WRLEN,X
B312 EE06       413:          LDX     SCBLK:WRLEN,X
B314 FFAE50     414:          STX     NAMESIZE    (INDICATES 0 BYTES MATCHED A DEVICE NAME)
                415:          ;LDX    DEFAULTDISKDCB GET POINTER TO DEFAULT DISK INFO TABLE
B317 FEAE4C     416:          LDX     DEFAULTDISKDCB
B31A DF06       417:          STX     DCBPOINTER
  B31C          418: FOUNDDISK1       EQU         *
                419:          ;LDX    #DISKFILEDRIVER SET UP POINTER TO SDOS DISK FILE DRIVER
B31C CEBCB4     420:          LDX     #DISKFILEDRIVER
  B31F          421: FOUNDDISK2       EQU         *
B31F FFAE54     422:          STX     DRIVERVPOINTER AND SAVE WHICH DISK DRIVER TO USE!
  B322          423: FOUNDDEVICE      EQU         *
                424:          ;LDX    CODE+SDOS:IOBLOCKPTR COMPUTE LENGTH OF DEVICE PREFIX
B322 FEAE07     425:          LDX     CODE+SDOS:IOBLOCKPTR
                426:          ;LDD    SCBLK:WRLEN,X = USER SUPPLIED LENGTH - # OF BYTES REMAINING AFTER MAT
B325 E607       427:          LDAB    (SCBLK:WRLEN)+1,X
B327 A606       428:          LDAA    SCBLK:WRLEN,X
                429:          ;SUBD   NAMESIZE
B329 F0AE51     430:          SUBB    NAMESIZE+1
B32C B2AE50     431:          SBCA    NAMESIZE
                432:          ;LDX    SCBLK:RDBUF,X PUT SIZE OF SCANNED DEVICE NAME IN REPLY BUFFER
B32F EE0A       433:          LDX     SCBLK:RDBUF,X
                434:          ;STD    0,X
B331 E701       435:          STAB    (0)+1,X
B333 A700       436:          STAA    0,X
B335 39         437:          RTS
                438: *
  B336          439: FOUNDDISK        EQU         *
                440:          ;LDX    NAMESIZE    NULL FILENAME?
B336 FEAE50     441:          LDX     NAMESIZE
B339 2709       442:          BEQ     FOUNDDISK3  B/ YES, HE SPECIFIED ONLY A DISK
                443:          ;LDX    NAMESCANPTR LOOK AT 1ST BYTE FOLLOWING DISK NAME
B33B FEAE4E     444:          LDX     NAMESCANPTR
B33E A600       445:          LDAA    0,X




ASM/6800 1.4A0: B33E SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 131; Form 7     CHANNEL NUMBER CHECKING/IOCB DETERMINATION
SDOS6800.ASM
                446:          ;CMPA   #ASCII:SPACE A NON-BLANK PRINTING CHARACTER?
B340 8120       447:          CMPA    #ASCII:SPACE
B342 22D8       448:          BHI     FOUNDDISK1  B/ YES, FILENAME HAS BEEN SPECIFIED
  B344          449: FOUNDDISK3       ; ONLY NAME OF DISK DEVICE SPECIFIED
                450:          ;LDX    #DISKDEVICEDRIVER
B344 CEBC93     451:          LDX     #DISKDEVICEDRIVER
B347 20D6       452:          BRA     FOUNDDISK2
                453: 
B349 4449534B   454: DEFAULTDISKNAME  FCC         "DISK:"
B34E 00         455:          FCB     0




ASM/6800 1.4A0: B34E SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 132; Form 7     CHANNEL NUMBER CHECKING/IOCB DETERMINATION
SDOS6800.ASM
                457: *        CMPDVNAM -- COMPARE FILENAME TO DEVICE NAME
                458: *        (X) POINTS TO DEVICE NAME ENDED BY 0
                459: *        FILENAME TO MATCH AGAINST IS SELECTED BY SYSCALL
                460: *        EXIT WITH CARRY RESET IF FOUND
                461: *        NAMESCANPTR IS ADVANCED PAST DEVICE NAME IF FOUND
                462: *        CARRY SET IF NOT FOUND
                463: *        SETS NAMESIZE TO # BYTES OF FILENAME GIVEN MINUS SIZE OF DEVICE NAME PREFIX
                464: *
  B34F          465: CMPDVNAME ; COMPARE FILENAME TO DEVICE NAME
B34F DF00       466:          STX     TEMPX       SAVE POINTER TO NAME IN DCB
                467:          ;LDX    CODE+SDOS:IOBLOCKPTR GET SIZE OF USER-SPECIFIED FILE NAME
B351 FEAE07     468:          LDX     CODE+SDOS:IOBLOCKPTR
                469:          ;LDX    SCBLK:WRLEN,X
B354 EE06       470:          LDX     SCBLK:WRLEN,X
B356 FFAE50     471:          STX     NAMESIZE
B359 2738       472:          BEQ     CMPDVNAMENF B/ ZERO LENGTH --> NOT FOUND!
                473:          ;LDX    CODE+SDOS:IOBLOCKPTR GET POINTER TO USER-SPECIFIED FILE NAME
B35B FEAE07     474:          LDX     CODE+SDOS:IOBLOCKPTR
                475:          ;LDX    SCBLK:WRBUF,X
B35E EE04       476:          LDX     SCBLK:WRBUF,X
B360 FFAE4E     477:          STX     NAMESCANPTR
  B363          478: CMPDVNAML        ; COMPARE NEXT BYTE OF USER-SPECIFIED NAME WITH DEVICE NAME
                479:          ;LDX    NAMESCANPTR GET BYTE FROM USER-SPECIFIED NAME
B363 FEAE4E     480:          LDX     NAMESCANPTR
                481:          ;LDA    ,X+
B366 A600       482:          LDAA    0,X
B368 08         483:          INX
B369 FFAE4E     484:          STX     NAMESCANPTR
                485:          ;CMPA   #$60        FOLD TO UPPER CASE IF LOWER CASE
B36C 8160       486:          CMPA    #$60
B36E 2306       487:          BLS     CMPDVNAML1  B/ NOT LOWER CASE
                488:          ;CMPA   #$7A
B370 817A       489:          CMPA    #$7A
B372 2202       490:          BHI     CMPDVNAML1  B/ NOT LOWER CASE
B374 845F       491:          ANDA    #%01011111  FOLD IT!
  B376          492: CMPDVNAML1 ; FOLDED CHARACTER OF USER SPECIFIED NAME IN (A)
                493:          ;LDX    TEMPX       COMPARE TO NEXT BYTE OF DCB NAME
B376 DE00       494:          LDX     TEMPX
                495:          ;CMPA   ,X          CHARACTERS MATCH?
B378 A100       496:          CMPA    0,X




ASM/6800 1.4A0: B37A SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 133; Form 7     CHANNEL NUMBER CHECKING/IOCB DETERMINATION
SDOS6800.ASM
B37A 2619       497:          BNE     CMPDVNAMENM B/ NO, END OF DCB NAME ?
B37C 08         498:          INX                 BUMP POINTER
B37D DF00       499:          STX     TEMPX       UPDATE DCB NAME SCAN POINTER
                500:          ;LDX    NAMESIZE    EXHAUSTED USER-SPECIFIED NAME?
B37F FEAE50     501:          LDX     NAMESIZE
B382 09         502:          DEX                 (REMEMBER THAT WE HAVE LOOKED AT ANOTHER BYTE)
B383 FFAE50     503:          STX     NAMESIZE
B386 26DB       504:          BNE     CMPDVNAML   B/ NO, COMPARE NEXT BYTE
  B388          505: CMPDVNAMEZ       ; USER-SPECIFIED NAME IS EXHAUSTED
                506:          ;LDA    [TEMPX]     AT END OF DCB-SPECIFIED NAME ?
B388 DE00       507:          LDX     TEMPX
B38A A600       508:          LDAA    0,X
B38C 2605       509:          BNE     CMPDVNAMENF B/ NO, USER NAME DOESN'T MATCH DCB NAME
                510:          ;LDX    NAMESCANPTR YES, GET POINTER TO UNSCANNED PART OF USER NAME
B38E FEAE4E     511:          LDX     NAMESCANPTR
B391 0C39       512:          OKRTS               AND SIGNAL 'MATCH!'
                513: 
  B393          514: CMPDVNAMENF      ; USER FILE NAME DOESN'T START WITH THIS DEVICE NAME
B393 0D39       515:          ERRORRTS             SAY "NO MATCH"
                516: 
  B395          517: CMPDVNAMENM      ; NAME DOESN'T MATCH
                518:          ;LDX    NAMESCANPTR BACK UP THE SCAN POINTER
B395 FEAE4E     519:          LDX     NAMESCANPTR
B398 09         520:          DEX
B399 FFAE4E     521:          STX     NAMESCANPTR
B39C 20EA       522:          BRA     CMPDVNAMEZ




ASM/6800 1.4A0: B39C SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 134; Form 7     SYSCALL:INTERLOCK/SYSCALL:DELAY HANDLERS
SDOS6800.ASM
                524: *
                525: *        INTERLOCK -- PERFORM SYSCALL:INTERLOCK
                526: *        (EXECUTE A NO-OP SINCE SINGLE USER SYSTEMS CANNOT INTERLOCK!)
                527: *
  B39E          528: INTERLOCK
                529:          ;JSR    CHECKWRLEN  MAKE SURE WRITE BUFFER IS SUPPLIED
B39E BDB8DB     530:          JSR     CHECKWRLEN
B3A1 0010       531:          FDB     16          AND THAT IT IS THE PROPER LENGTH
                532:          ;LDA    INTERLOCK:FUNCTION+1,X GET INTERLOCK OPCODE
B3A3 A603       533:          LDAA    INTERLOCK:FUNCTION+1,X
                534:          ;CMPA   #IC:CREATE  A CREATE CALL?
B3A5 8100       535:          CMPA    #IC:CREATE
B3A7 2605       536:          BNE     INTERLOCKOKRTS B/ NO, JUST EXIT
                537:          ;JSR    CHECKRDLEN  YES, MAKE SURE A REPLY BUFFER IS GIVEN
B3A9 BDB89F     538:          JSR     CHECKRDLEN
B3AC 0010       539:          FDB     16
  B3AE          540: INTERLOCKOKRTS
B3AE 0C39       541:          OKRTS
                542: *
                543: *        DELAY -- PERFORM SYSCALL:DELAY
                544: *
  B3B0          545: DELAY
                546:          ;LDX    CODE+SDOS:IOBLOCKPTR FETCH DELAY PERIOD
B3B0 FEAE07     547:          LDX     CODE+SDOS:IOBLOCKPTR
                548:          ;LDX    DELAY:PERIOD,X
B3B3 EE02       549:          LDX     DELAY:PERIOD,X
B3B5 2608       550:          BNE     DELAY1      B/ DON'T DEFUSE 12 HOUR DELAY
                551:          ;LDX    #DELAYDONE  SECRET DELAY SIGNAL PASSED, DEFUSE 12 HOUR TIMEOUT BOMB
B3B7 CEB3F1     552:          LDX     #DELAYDONE
B3BA FFAE62     553:          STX     DELAYBLOCK+TIMEOUT:ROUTINE
B3BD 0C39       554:          OKRTS
                555: 
  B3BF          556: DELAY1   ;CLR    DELAYCOMPLETE RESET DELAY COMPLETED EVENT
B3BF 7FAE64     557:          CLR     DELAYCOMPLETE
B3C2 FFAE60     558:          STX     DELAYBLOCK+TIMEOUT:FUSE SET FUSE TO DESIRED DELAY
                559:          ;LDX    #DELAYCOMPLETE NOW WAIT FOR DELAY COMPLETE EVENT
B3C5 CEAE64     560:          LDX     #DELAYCOMPLETE
                561:          ;JSR    WAITEVENT$
B3C8 BDDE72     562:          JSR     WAITEVENT$
B3CB 0C39       563:          OKRTS




ASM/6800 1.4A0: B3CB SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 135; Form 7     SYSCALL:INTERLOCK/SYSCALL:DELAY HANDLERS
SDOS6800.ASM
                564: *
                565: *        SDOS NOT REGISTERED TIME BOMB
                566: *
  B3CD          567: SDOSNOTREGISTERED
                568:          ;LDX    #$FFFF      SET UP 18.2 MINUTE TIMEOUT AGAIN
B3CD CEFFFF     569:          LDX     #$FFFF
B3D0 FFAE60     570:          STX     DELAYBLOCK+TIMEOUT:FUSE
                571:          ;LDA    DELAYCOMPLETE HAVE 12 HOURS PASSED YET ?
B3D3 B6AE64     572:          LDAA    DELAYCOMPLETE
                573:          ;CMPA   #12*60//18  (= THIS MANY 18.5 MINUTE TIMEOUTS ?)
B3D6 8128       574:          CMPA    #12*60//18
B3D8 2317       575:          BLS     DELAYDONE   B/ ...TICK... NOT YET
                576:          ;LDX    #EXITCHAIN-9 *** BANG! **** MODIFY EXIT TO DISPLAY ERROR NEXT TIME
B3DA CEAFE3     577:          LDX     #EXITCHAIN-9
                578:          ;LDD    #ERR:SDOSNOTREGISTERED+1206 WHAT TO DISPLAY ON NEXT EXIT
B3DD C6EC       579:          LDAB    #(ERR:SDOSNOTREGISTERED+1206)&$FF
B3DF 8608       580:          LDAA    #(ERR:SDOSNOTREGISTERED+1206)/256
                581:          ;SUBD   #1206       FIX UP NON-OBVIOUS CONSTANT TO CORRECT VALUE
B3E1 C0B6       582:          SUBB    #(1206)&$FF
B3E3 8204       583:          SBCA    #(1206)/256
                584:          ;STD    ERROREXIT:CODE+9,X MAKE "CHAIN DEFPGM" INTO "ERROREXIT"
B3E5 E70C       585:          STAB    (ERROREXIT:CODE+9)+1,X
B3E7 A70B       586:          STAA    ERROREXIT:CODE+9,X
                587:          ;SUBD   #ERR:SDOSNOTREGISTERED-(SYSCALL:ERROREXIT*256+ERROREXIT:SCLEN)
B3E9 C032       588:          SUBB    #(ERR:SDOSNOTREGISTERED-(SYSCALL:ERROREXIT*256+ERROREXIT:SCLEN))&$FF
B3EB 82F2       589:          SBCA    #(ERR:SDOSNOTREGISTERED-(SYSCALL:ERROREXIT*256+ERROREXIT:SCLEN))/256
                590:          ;STD    SCBLK:OPCODE+9,X
B3ED E70A       591:          STAB    (SCBLK:OPCODE+9)+1,X
B3EF A709       592:          STAA    SCBLK:OPCODE+9,X
  B3F1          593: DELAYDONE ; DELAY IS DONE, SIGNAL COMPLETION OF DELAY EVENT
                594:          ;INC    DELAYCOMPLETE MARK THE EVENT
B3F1 7CAE64     595:          INC     DELAYCOMPLETE
                596:          ;JMP    IORTI
B3F4 7EDDCE     597:          JMP     IORTI




ASM/6800 1.4A0: B3F4 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 136; Form 8     MAJOR CHANNEL OPERATIONS
SDOS6800.ASM
                  2: *        OPEN -- PERFORM "SYSCALL:OPEN"
                  3: *
  B3F7            4: OPEN     EQU     *
                  5: *
                  6: *        HERE'S WHERE WE DO THE COPYRIGHT CHECK
                  7: *
                  8:          ;LDX    #COPYRIGHTEND-1-98 COMPUTE CHECKSUM BACKWARDS
B3F7 CEB0F0       9:          LDX     #COPYRIGHTEND-1-98
B3FA 86CA        10:          LDAA    #(-COPYRIGHTCHECKSUM)&$FF
B3FC AB62        11: OPEN1    ADDA    98,X
B3FE 09          12:          DEX
B3FF 8CB0CB      13:          CPX     #COPYRIGHT-98-1
B402 26F8        14:          BNE     OPEN1
                 15: *
                 16: *        IF A USER CHANGED THE COPYRIGHT STRING CHECKSUM...
                 17: *        WE WILL COMPUTE AN ADDRESS CORRESPONDING TO SDOSSTACK
                 18: *        IF THE CHECKSUM IS OK, WE WILL COMPUTE AN ADDRESS
                 19: *        CORRESPONDING TO SDOSSTACK+2
                 20: *
                 21: *        INTO THIS MAGIC COMPUTED ADDRESS, WE WILL
                 22: *        PLACE THE MANUFACTURED ADDRESS OF EXITDAMAGE (A CRITICAL PLACE)
                 23: *        THE RESULT IS TO HAVE EXIT AND CHAIN LOAD UP A BAD STACK POINTER
                 24: *        WHICH WILL EVENTUALLY DESTROY EXITDAMAGE
                 25: *        WHICH WILL EVENTUALLY BRING DOWN THE SYSTEM (WE HOPE)
                 26: *        ALL OF THIS IS TO TRY TO PREVENT THEFT
                 27: *
B404 8001        28:          SUBA    #1          IF YOU DON'T UNDERSTAND THIS, IMAGINE A GUY DISASSEMBLING
B406 8600        29:          LDAA    #0          USE THE Z-BIT TO FORM AN ADDRESS
B408 8900        30:          ADCA    #0          = 1 IF CHECKSUM OK, = 0 OTHERWISE
B40A 5F          31:          CLRB
B40B 8B80        32:          ADDA    #((SDOSSTACK-34)/2)&$FF THIS IS PURPOSELY DONE WIERD
B40D C957        33:          ADCB    #((SDOSSTACK-34)/2)/256 TO DEFEAT WOULD BE DISASSEMBLERS AND THEIVES
B40F 48          34:          ASLA
B410 59          35:          ROLB
B411 36          36:          PSHA
B412 37          37:          PSHB
                 38:          ;LDD    EXITDAMAGEPTR
B413 F6AF29      39:          LDAB    EXITDAMAGEPTR+1
B416 B6AF28      40:          LDAA    EXITDAMAGEPTR
B419 48          41:          ASLA                THIS CODE DOES FUNNY THINGS...




ASM/6800 1.4A0: B41A SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 137; Form 8     MAJOR CHANNEL OPERATIONS
SDOS6800.ASM
B41A 59          42:          ROLB                TO CONFUSE WOULD-BE DISASSEMBLERS AND THEIVES
B41B 8B16        43:          ADDA    #22
B41D C900        44:          ADCB    #0
                 45:          ;LDX    ,S++
B41F 30          46:          TSX
B420 EE00        47:          LDX     0,X
B422 31          48:          INS
B423 31          49:          INS
B424 A723        50:          STAA    35,X
B426 E722        51:          STAB    34,X
                 52: *
                 53: *        END OF COPYRIGHT CHECK
                 54: *
                 55:          ;JSR    FNAMEPROCESS PROCESS THE FILE NAME TO GET THE DRIVER ADDRESS
B428 BDB485      56:          JSR     FNAMEPROCESS
                 57:          ;JSR    [DRIVER:OPEN,X] GO OPEN THE FILE
B42B EE00        58:          LDX     DRIVER:OPEN,X
B42D AD00        59:          JSR     0,X
B42F 2519        60:          BCS     OPENERRED   B/ DRIVER GOT AN ERROR ON OPEN
  B431           61: OPEN2    EQU     *
                 62:          ;LDD    DRIVERVPOINTER GET PTR TO DEVICE DRIVER VECTOR
B431 F6AE55      63:          LDAB    DRIVERVPOINTER+1
B434 B6AE54      64:          LDAA    DRIVERVPOINTER
                 65:          ;LDX    IOCBPOINTER
B437 FEAE09      66:          LDX     IOCBPOINTER
                 67:          ;STD    IOCB:DRIVER,X SAVE IN OPEN CHANNEL TABLE
B43A E70A        68:          STAB    (IOCB:DRIVER)+1,X
B43C A709        69:          STAA    IOCB:DRIVER,X
                 70: *
                 71: *        PLANTDCBINIOCB -- SET DCB POINTER INTO IOCB
                 72: *
  B43E           73: PLANTDCBINIOCB   EQU         *
                 74:          ;LDX    IOCBPOINTER GET IOCB ADDRESS
B43E FEAE09      75:          LDX     IOCBPOINTER
                 76:          ;LDD    DCBPOINTER  SAVE DCB ADDRESS IN IOCB, TOO!
B441 D607        77:          LDAB    DCBPOINTER+1
B443 9606        78:          LDAA    DCBPOINTER
                 79:          ;STD    IOCB:DCB,X
B445 E701        80:          STAB    (IOCB:DCB)+1,X
B447 A700        81:          STAA    IOCB:DCB,X




ASM/6800 1.4A0: B449 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 138; Form 8     MAJOR CHANNEL OPERATIONS
SDOS6800.ASM
B449 0C          82:          CLC
  B44A           83: OPENERRED
B44A 39          84:          RTS




ASM/6800 1.4A0: B44A SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 139; Form 8     MAJOR CHANNEL OPERATIONS
SDOS6800.ASM
                 86: *
                 87: *        CREATELOG -- PERFORM "SYSCALL:CREATELOG"
                 88: *
  B44B           89: CREATELOG        EQU         *
                 90:          ;LDX    #LOGIOCB    SET UP IOCBPOINTER...
B44B CEAF35      91:          LDX     #LOGIOCB
B44E FFAE09      92:          STX     IOCBPOINTER AS THOUGH "CHECKCHANNELCLOSED" HAD BEEN CALLED
                 93:          ;JSR    CHECKCHANNELCL1 MAKE SURE THAT LOG CHANNEL IS CLOSED
B451 BDB256      94:          JSR     CHECKCHANNELCL1
B454 8D32        95:          BSR     FNAMEPROCESS1 TO FIND DRIVER ADDRESS
B456 2002        96:          BRA     CREATE1     AND GO CREATE THE FILE
                 97: *
                 98: *        CREATE -- PERFORM "SYSCALL:CREATE"
                 99: *
  B458          100: CREATE   EQU     *
B458 8D2B       101:          BSR     FNAMEPROCESS PROCESS CHANNEL NUMBER AND FILE NAME
  B45A          102: CREATE1  EQU     *
                103:          ;JSR    [DRIVER:CREATE,X] GO CREATE THE FILE
B45A EE0C       104:          LDX     DRIVER:CREATE,X
B45C AD00       105:          JSR     0,X
B45E 24D1       106:          BCC     OPEN2       OPEN THE CHANNEL
B460 39         107:          RTS                 OOPS, EXIT WITH ERROR
                108: *
                109: *        DELETE -- PERFORM "SYSCALL:DELETE"
                110: *
  B461          111: DELETE   EQU     *
                112:          ;JSR    FNAMEPROCESS1 GO PARSE FILENAME TO DETERMINE DRIVER ADDRESS
B461 BDB488     113:          JSR     FNAMEPROCESS1
                114:          ;JMP    [DRIVER:DELETE,X] NOW DELETE THE FILE
B464 EE10       115:          LDX     DRIVER:DELETE,X
B466 6E00       116:          JMP     0,X
                117: *
                118: *        READB -- PERFORM "SYSCALL:READB"
                119: *
  B468          120: READB    ;JSR    CHECKCHANNELOPEN
B468 BDB23F     121:          JSR     CHECKCHANNELOPEN
                122:          ;JMP    [DRIVER:READB,X] INVOKE THE DRIVER TO DO THE WORK
B46B EE08       123:          LDX     DRIVER:READB,X
B46D 6E00       124:          JMP     0,X
                125: *




ASM/6800 1.4A0: B46D SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 140; Form 8     MAJOR CHANNEL OPERATIONS
SDOS6800.ASM
                126: *        WRITEB -- PERFORM "SYSCALL:WRITEB"
                127: *
  B46F          128: WRITEB   ;JSR    CHECKCHANNELOPEN
B46F BDB23F     129:          JSR     CHECKCHANNELOPEN
B472 BCAE52     130:          CPX     CONSOLEDRIVER DON'T WRITE IF CHANNEL 0 AND NOT CONSOLE!
B475 270A       131:          BEQ     WRITEB1     B/ OK TO WRITE
                132:          ;LDX    CODE+SDOS:IOBLOCKPTR ISN'T CONSOLE, IS THIS CHANNEL ZERO ?
B477 FEAE07     133:          LDX     CODE+SDOS:IOBLOCKPTR
                134:          ;LDA    WRITEB:CHANNEL,X ...?
B47A A602       135:          LDAA    WRITEB:CHANNEL,X
B47C 2715       136:          BEQ     WRITEBOKRTS B/ YES, DON'T DO THE WRITE!
                137:          ;LDX    DRIVERVPOINTER NOPE, MUST DO THE WRITE
B47E FEAE54     138:          LDX     DRIVERVPOINTER
  B481          139: WRITEB1
                140:          ;JMP    [DRIVER:WRITEB,X]
B481 EE0A       141:          LDX     DRIVER:WRITEB,X
B483 6E00       142:          JMP     0,X




ASM/6800 1.4A0: B483 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 141; Form 8     MAJOR CHANNEL OPERATIONS
SDOS6800.ASM
                144: *        FNAMEPROCESS -- CHECK TO MAKE SURE CHANNEL IS CLOSED
                145: *        LOCATE DRIVER AND STRIP OFF DEVICE NAME
                146: *        BUILDS COPY OF SYSCALL IN IOBLOCK
                147: *        EXCEPT THAT FILENAME POINTER HAS BEEN STEPPED PAST DEVICE NAME PREFIX
                148: *        ASSUMES THAT A FILENAME SYSCALL WITH SCLEN=SCLEN:DATA WAS PASSED BY USER
                149: *
  B485          150: FNAMEPROCESS     ; ENTRY POINT FOR OPEN/CREATE
                151:          ;JSR    CHECKCHANNELCLOSED AND LOCATE THE IOCB FOR THE SPECIFIED CHANNEL
B485 BDB254     152:          JSR     CHECKCHANNELCLOSED
  B488          153: FNAMEPROCESS1    ; ENTRY POINT FOR OTHER FILENAME SYSCALLS
                154:          ;JSR    CHECKRDLEN  MAKE SURE READ-BACK BUFFER HAS AT LEAST 2 BYTES
B488 BDB89F     155:          JSR     CHECKRDLEN
B48B 0002       156:          FDB     2           TO PLACE SIZE OF FILENAME INTO
                157:          ;JSR    FINDDRIVER  SPECIFIED BY FILENAME STRING
B48D BDB2AD     158:          JSR     FINDDRIVER
                159:          ;LDX    DRIVERVPOINTER FOR CONVENIENCE OF EVERYBODY ELSE
B490 FEAE54     160:          LDX     DRIVERVPOINTER
  B493          161: WRITEBOKRTS
B493 0C39       162:          OKRTS               AND EXIT




ASM/6800 1.4A0: B493 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 142; Form 8     MAJOR CHANNEL OPERATIONS
SDOS6800.ASM
                164: *        DISKDEFAULT -- PERFORM "SYSCALL:DISKDEFAULT"
                165: *
  B495          166: DISKDEFAULT      EQU         *
B495 8DF1       167:          BSR     FNAMEPROCESS1 GO PROCESS FILE NAME TO GET DEVICE NAME
B497 8CBC93     168:          CPX     #DISKDEVICEDRIVER THIS IS ONLY LEGAL DRIVER THAT CAN RESULT
B49A 2607       169:          BNE     ERRMUSTBEDISK B/ SPECIFIED OTHER THAN DISK DEVICE
                170:          ;LDX    DCBPOINTER  USE THIS DISK INFO TABLE FOR DEFAULT FROM NOW ON
B49C DE06       171:          LDX     DCBPOINTER
B49E FFAE4C     172:          STX     DEFAULTDISKDCB !
B4A1 0C39       173:          OKRTS               HOW EASY!
  B4A2          174: CLOSERTS EQU     *-1
                175: 
  B4A3          176: ERRMUSTBEDISK    EQU         *
                177:          ;JSR    ERRET
B4A3 BDB1F6     178:          JSR     ERRET
B4A6 0422       179:          FDB     ERR:MUSTBEDISK
                180: *
                181: *        CLOSE -- PERFORM "SYSCALL:CLOSE"
                182: *
  B4A8          183: CLOSE    ;JSR    CHECKCHANNELOPEN
B4A8 BDB23F     184:          JSR     CHECKCHANNELOPEN
                185:          ;JSR    [DRIVER:CLOSE,X]
B4AB EE02       186:          LDX     DRIVER:CLOSE,X
B4AD AD00       187:          JSR     0,X
B4AF 2403       188:          BCC     CLOSE1      B/ NO ERROR
                189:          ;JSR    ERRORSAVE   GO SET THE ERROR
B4B1 BDB218     190:          JSR     ERRORSAVE
                191: *        THE FOLLOWING CODE DOES NOT FIDDLE THE CARRY BIT
                192: *        DON'T FOOL AROUND WITH IT, OR ELSE...
  B4B4          193: CLOSE1   ;LDX    IOCBPOINTER
B4B4 FEAE09     194:          LDX     IOCBPOINTER
B4B7 8600       195:          LDAA    #0
B4B9 A709       196:          STAA    IOCB:DRIVER,X
B4BB A70A       197:          STAA    IOCB:DRIVER+1,X
B4BD 24E3       198:          BCC     CLOSERTS    (OKRTS)
                199:          ;JMP    ERRORED
B4BF 7EB209     200:          JMP     ERRORED
                201: *
                202: *        CLOSELOG -- PERFORM "SYSCALL:CLOSELOG"
                203: *




ASM/6800 1.4A0: B4BF SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 143; Form 8     MAJOR CHANNEL OPERATIONS
SDOS6800.ASM
  B4C2          204: CLOSELOG ;LDX    #LOGCLOSE
B4C2 CEB4C8     205:          LDX     #LOGCLOSE
                206:          ;JMP    SYSCALLENTRY
B4C5 7EB1B2     207:          JMP     SYSCALLENTRY
                208: *
B4C8 02         209: LOGCLOSE FCB     SYSCALL:CLOSE FUNCTION
B4C9 03         210:          FCB     CLOSE:SCLEN
B4CA FF         211:          FCB     LOGCHANNEL  CHANNEL




ASM/6800 1.4A0: B4CA SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 144; Form 8     MAJOR CHANNEL OPERATIONS
SDOS6800.ASM
                213: *
                214: *        RENAME -- PERFORM "SYSCALL:RENAME"
                215: *
  B4CB          216: RENAME   EQU     *
                217:          ;JSR    CHECKCHANNELOPEN OR YOU'RE DEAD!
B4CB BDB23F     218:          JSR     CHECKCHANNELOPEN
                219:          ;JSR    FNAMEPROCESS1 TO FIND OUT THE DEVICE DRIVER
B4CE BDB488     220:          JSR     FNAMEPROCESS1
                221:          ;LDX    IOCBPOINTER RENAME TO SAME DEVICE ?
B4D1 FEAE09     222:          LDX     IOCBPOINTER
                223:          ;LDX    IOCB:DRIVER,X ...?
B4D4 EE09       224:          LDX     IOCB:DRIVER,X
B4D6 BCAE54     225:          CPX     DRIVERVPOINTER ...?
B4D9 2615       226:          BNE     ERRRENAMEDEVICE B/ TO DIFFERENT DEVICE, I CAN'T ALLOW THAT...
B4DB 8CBCB4     227:          CPX     #DISKFILEDRIVER IS THIS THE DISK FILE DRIVER ?
B4DE 2609       228:          BNE     RENAME1     B/ NO
                229:          ;LDX    IOCBPOINTER RENAME A FILE ON ONE DISK TO ANOTHER DISK ?
B4E0 FEAE09     230:          LDX     IOCBPOINTER
                231:          ;LDX    IOCB:DCB,X  ...?
B4E3 EE00       232:          LDX     IOCB:DCB,X
B4E5 9C06       233:          CPX     DCBPOINTER  ...?
B4E7 2607       234:          BNE     ERRRENAMEDEVICE B/ YES, THAT'S ILLEGAL TOO!
  B4E9          235: RENAME1  EQU     *
                236:          ;LDX    DRIVERVPOINTER GO DO THE RENAME
B4E9 FEAE54     237:          LDX     DRIVERVPOINTER
                238:          ;JMP    [DRIVER:RENAME,X]
B4EC EE0E       239:          LDX     DRIVER:RENAME,X
B4EE 6E00       240:          JMP     0,X
                241: 
  B4F0          242: ERRRENAMEDEVICE  EQU         *
                243:          ;JSR    ERRET
B4F0 BDB1F6     244:          JSR     ERRET
B4F3 040B       245:          FDB     ERR:RENAMEDEVICE




ASM/6800 1.4A0: B4F3 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 145; Form 8     MAJOR CHANNEL OPERATIONS
SDOS6800.ASM
  B4F5          247: READAEOF ; RE-CAUSE EOF ERROR
                248:          ;JSR    ERRET
B4F5 BDB1F6     249:          JSR     ERRET
B4F8 03E9       250:          FDB     ERR:EOFHIT
                251: *
                252: *        READA -- PERFORM "SYSCALL:READA"
                253: *
  B4FA          254: READA    ;JSR    CHECKCHANNELOPEN
B4FA BDB23F     255:          JSR     CHECKCHANNELOPEN
                256:          ;JSR    [DRIVER:READA,X] ISSUE THE READ
B4FD EE04       257:          LDX     DRIVER:READA,X
B4FF AD00       258:          JSR     0,X
                259:          ;LBCC   READALOG    B/ ALL OK, SEE IF WE LOG IT
B501 2503       260:          BCS     MACRO:0009
B503 7EB594     261:          JMP     READALOG
  B506          262: MACRO:0009
                263:          ;PSHX               SAVE THE ERROR CODE
B506 DF00       264:          STX     TEMPX
B508 D601       265:          LDAB    TEMPB
B50A 37         266:          PSHB
B50B D600       267:          LDAB    TEMPA
B50D 37         268:          PSHB
                269:          ;JSR    READALOG    LOG WHAT WAS COLLECTED SO FAR
B50E BDB594     270:          JSR     READALOG
B511 2500       271:          BCS     *+2         WE CAN ONLY RECOVER FROM 1 ERROR, LOSE THE 2ND
                272:          ;PULX               GET ORIGINAL ERROR CAUSE
B513 30         273:          TSX
B514 EE00       274:          LDX     0,X
B516 31         275:          INS
B517 31         276:          INS
B518 8C03E9     277:          CPX     #ERR:EOFHIT DID WE HIT EOF?
                278:          ;LBNE   ERRORINX    B/ NO, SOME OTHER ERROR
B51B 2703       279:          BEQ     MACRO:000A
B51D 7EB200     280:          JMP     ERRORINX
  B520          281: MACRO:000A
                282:          ;LDX    USERSYSCALLPTR EOF ON CHANNEL 0 ?
B520 FEAF90     283:          LDX     USERSYSCALLPTR
B523 A602       284:          LDAA    READA:CHANNEL,X (GRAB THE CHANNEL NUMBER)
B525 26CE       285:          BNE     READAEOF    B/ NO, EOF ON A NON-ZERO CHANNEL!
                286:          ;JSR    ISCONSOLE   IS CHANNEL ZERO OPEN TO THE CONSOLE?




ASM/6800 1.4A0: B527 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 146; Form 8     MAJOR CHANNEL OPERATIONS
SDOS6800.ASM
B527 BDB21F     287:          JSR     ISCONSOLE
B52A 24C9       288:          BCC     READAEOF    B/ YES, PASS EOF ERROR BACK TO CALLER
                289:          ;LDX    #CLOSECHANNEL0 CLOSE CHANNEL 0
B52C CEB5CF     290:          LDX     #CLOSECHANNEL0
                291:          ;JSR    SYSCALLENTRY
B52F BDB1B2     292:          JSR     SYSCALLENTRY
                293:          ;LDX    LOGIOCB+IOCB:DRIVER IS LOG CHANNEL OPEN ?
B532 FEAF3E     294:          LDX     LOGIOCB+IOCB:DRIVER
B535 2708       295:          BEQ     READA2      B/ NO, LEAVE IT ALONE!
B537 BCAE52     296:          CPX     CONSOLEDRIVER YES, OPEN TO THE CONSOLE ?
B53A 2603       297:          BNE     READA2      B/ NO, LEAVE IT ALONE!
                298:          ;JSR    CLOSELOG    YES, CLOSE THE LOG FILE!
B53C BDB4C2     299:          JSR     CLOSELOG
  B53F          300: READA2   EQU     *
                301:          ;JSR    OPENCONSOLE RE-OPEN CHANNEL 0 TO THE CONSOLE
B53F BDB899     302:          JSR     OPENCONSOLE
                303: *
                304: *        BUILD NEW "READA" REQUEST IN "IOBLOCK" TO...
                305: *        READ REMAINDER OF INPUT REQUEST
                306: *
                307:          ;LDX    #SYSCALL:READA*256+READA:SCLEN SET UP SYSCALL OPCODE AND LENGTH
B542 CE0A0E     308:          LDX     #SYSCALL:READA*256+READA:SCLEN
B545 FFAFFD     309:          STX     IOBLOCK+SCBLK:OPCODE
                310:          ;LDX    USERSYSCALLPTR COMPUTE NEW BUFFER POINTER
B548 FEAF90     311:          LDX     USERSYSCALLPTR
                312:          ;LDD    READA:ACTUALCOUNT,X
B54B E609       313:          LDAB    (READA:ACTUALCOUNT)+1,X
B54D A608       314:          LDAA    READA:ACTUALCOUNT,X
                315:          ;ADDD   READA:BUFFERP,X
B54F EB0B       316:          ADDB    (READA:BUFFERP)+1,X
B551 A90A       317:          ADCA    READA:BUFFERP,X
                318:          ;STD    IOBLOCK+READA:BUFFERP
B553 F7B008     319:          STAB    IOBLOCK+READA:BUFFERP+1
B556 B7B007     320:          STAA    IOBLOCK+READA:BUFFERP
                321:          ;LDD    READA:MAXCOUNT,X COMPUTE NEW MAX COUNT
B559 E60D       322:          LDAB    (READA:MAXCOUNT)+1,X
B55B A60C       323:          LDAA    READA:MAXCOUNT,X
                324:          ;SUBD   READA:ACTUALCOUNT,X
B55D E009       325:          SUBB    (READA:ACTUALCOUNT)+1,X
B55F A208       326:          SBCA    READA:ACTUALCOUNT,X




ASM/6800 1.4A0: B55F SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 147; Form 8     MAJOR CHANNEL OPERATIONS
SDOS6800.ASM
                327:          ;STD    IOBLOCK+READA:MAXCOUNT
B561 F7B00A     328:          STAB    IOBLOCK+READA:MAXCOUNT+1
B564 B7B009     329:          STAA    IOBLOCK+READA:MAXCOUNT
B567 A603       330:          LDAA    READA:LMFLAG,X
                331:          ;LDX    #IOBLOCK
B569 CEAFFD     332:          LDX     #IOBLOCK
B56C A703       333:          STAA    READA:LMFLAG,X
                334:          ;CLR    READA:CHANNEL,X
B56E 6F02       335:          CLR     READA:CHANNEL,X
                336:          ;CLR    READA:ACTUALCOUNT,X ZERO THE ACTUAL # BYTES MOVED
B570 6F08       337:          CLR     READA:ACTUALCOUNT,X
                338:          ;CLR    READA:ACTUALCOUNT+1,X
B572 6F09       339:          CLR     READA:ACTUALCOUNT+1,X
B574 FFAE07     340:          STX     CODE+SDOS:IOBLOCKPTR
                341:          ;LDX    DRIVERVPOINTER STILL VALID BECAUSE OF OPENCONSOLE
B577 FEAE54     342:          LDX     DRIVERVPOINTER
                343:          ;JSR    [DRIVER:READA,X] ISSUE READ TO CONSOLE
B57A EE04       344:          LDX     DRIVER:READA,X
B57C AD00       345:          JSR     0,X
                346:          ;LBCS   ERRORINX    ERROR IN FINISHING THE READ!
B57E 2403       347:          BCC     MACRO:000B
B580 7EB200     348:          JMP     ERRORINX
  B583          349: MACRO:000B
  B583          350: READA1   ;LDX    USERSYSCALLPTR DOCTOR UP THE ORIGINAL I/O BLOCK
B583 FEAF90     351:          LDX     USERSYSCALLPTR
                352:          ;LDD    READA:ACTUALCOUNT,X (ADJUSTS THE # BYTES XFERRED BY 2ND AND LATER "RE
B586 E609       353:          LDAB    (READA:ACTUALCOUNT)+1,X
B588 A608       354:          LDAA    READA:ACTUALCOUNT,X
                355:          ;ADDD   IOBLOCK+READA:ACTUALCOUNT DONE BECAUSE OF "EOFHIT"S ON CHANNEL ZERO)
B58A FBB006     356:          ADDB    IOBLOCK+READA:ACTUALCOUNT+1
B58D B9B005     357:          ADCA    IOBLOCK+READA:ACTUALCOUNT
                358:          ;STD    READA:ACTUALCOUNT,X
B590 E709       359:          STAB    (READA:ACTUALCOUNT)+1,X
B592 A708       360:          STAA    READA:ACTUALCOUNT,X
                361: *
                362: *        LOG THE CHANNEL ZERO ACTIVITY
                363: *
  B594          364: READALOG EQU     *
                365:          ;LDX    CODE+SDOS:IOBLOCKPTR SET UP WRITE BUFFER DATA...
B594 FEAE07     366:          LDX     CODE+SDOS:IOBLOCKPTR




ASM/6800 1.4A0: B594 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 148; Form 8     MAJOR CHANNEL OPERATIONS
SDOS6800.ASM
                367:          ;LDD    READA:ACTUALCOUNT,X FOR LOG SYSCALL BLOCK...
B597 E609       368:          LDAB    (READA:ACTUALCOUNT)+1,X
B599 A608       369:          LDAA    READA:ACTUALCOUNT,X
                370:          ;LDX    READA:BUFFERP,X IN CASE WE ARE LOGGING
B59B EE0A       371:          LDX     READA:BUFFERP,X
  B59D          372: WRITEALOG        ; ENTRY POINT FOR WRITEA TO HANDLE LOGGING
                373:          ;STD    LOGOUT+WRITEA:COUNT SAVE LENGTH OF STUFF TO WRITE TO LOG
B59D F7AFB5     374:          STAB    LOGOUT+WRITEA:COUNT+1
B5A0 B7AFB4     375:          STAA    LOGOUT+WRITEA:COUNT
B5A3 FFAFB2     376:          STX     LOGOUT+WRITEA:BUFFERP SAVE LOCATION OF DATA TO LOG
B5A6 8D2A       377:          BSR     DOWELOG     OUTPUT DUPLICATE OF READ/WRITE DATA TO LOG DEVICE ?
B5A8 2437       378:          BCC     READARTS    B/ NOT LOGGING
                379:          ;LDX    CODE+SDOS:IOBLOCKPTR SET UP TO WRITE TO LOG DEVICE
B5AA FEAE07     380:          LDX     CODE+SDOS:IOBLOCKPTR
                381:          ;LDA    SCBLK:WLEN,X COPY LENGTH OF SYSCALL BLOCK
B5AD A601       382:          LDAA    SCBLK:WLEN,X
B5AF 847F       383:          ANDA    #$7F        MASK OFF "NO WAIT" BIT
                384:          ;CMPA   #RWPOSITION:SCLEN LONGER THAN LONGEST REASONABLE ?
B5B1 8112       385:          CMPA    #RWPOSITION:SCLEN
B5B3 2302       386:          BLS     READALOG0   B/ NOPE
                387:          ;LDA    #RWPOSITION:SCLEN YES, SHORTEN TO SIZE SET ASIDE FOR LOG BLOCK
B5B5 8612       388:          LDAA    #RWPOSITION:SCLEN
  B5B7          389: READALOG0
                390:          ;STA    LOGOUT+SCBLK:WLEN SET SIZE OF LOG REQUEST
B5B7 B7AFAF     391:          STAA    LOGOUT+SCBLK:WLEN
                392:          ;LDD    RW:POSITION,X COPY POSITION FROM ORIGINAL BLOCK...
B5BA E60F       393:          LDAB    (RW:POSITION)+1,X
B5BC A60E       394:          LDAA    RW:POSITION,X
                395:          ;STD    LOGOUT+RW:POSITION IN CASE IT WAS SUPPLIED
B5BE F7AFBD     396:          STAB    LOGOUT+RW:POSITION+1
B5C1 B7AFBC     397:          STAA    LOGOUT+RW:POSITION
                398:          ;LDX    RW:POSITION+2,X
B5C4 EE10       399:          LDX     RW:POSITION+2,X
B5C6 FFAFBE     400:          STX     LOGOUT+RW:POSITION+2
                401:          ;LDX    #LOGOUT     SEND COPY TO LOG CHANNEL
B5C9 CEAFAE     402:          LDX     #LOGOUT
                403:          ;JMP    SYSCALLENTRY
B5CC 7EB1B2     404:          JMP     SYSCALLENTRY
                405: 
B5CF 02         406: CLOSECHANNEL0    FCB         SYSCALL:CLOSE




ASM/6800 1.4A0: B5D0 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 149; Form 8     MAJOR CHANNEL OPERATIONS
SDOS6800.ASM
B5D0 03         407:          FCB     CLOSE:SCLEN
B5D1 00         408:          FCB     0           CHANNEL




ASM/6800 1.4A0: B5D1 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 150; Form 8     MAJOR CHANNEL OPERATIONS
SDOS6800.ASM
                410: *        CHECK IF WE ARE LOGGING
                411: *        C SET IF YES, CLEAR IF NO
                412: *
  B5D2          413: DOWELOG  ;LDX    CODE+SDOS:IOBLOCKPTR
B5D2 FEAE07     414:          LDX     CODE+SDOS:IOBLOCKPTR
  0000          415:          IF      READA:CHANNEL#WRITEA:CHANNEL
 *S*            416:          ?DOWELOG WON'T WORK?
                417:          FIN
B5D5 A602       418:          LDAA    READA:CHANNEL,X IS IT CHANNEL 0?
B5D7 2607       419:          BNE     DONTLOG     B/ NO, DON'T LOG
                420:          ;LDX    LOGIOCB+IOCB:DRIVER IS THE LOG FILE OPEN?
B5D9 FEAF3E     421:          LDX     LOGIOCB+IOCB:DRIVER
B5DC 2702       422:          BEQ     DONTLOG     B/ NO, DON'T LOG
B5DE 0D         423:          SEC                 "WE ARE LOGGING"
B5DF 39         424:          RTS
B5E0 0C         425: DONTLOG  CLC                 "WE ARE NOT LOGGING"
B5E1 39         426: READARTS RTS




ASM/6800 1.4A0: B5E1 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 151; Form 8     MAJOR CHANNEL OPERATIONS
SDOS6800.ASM
                428: *
                429: *        WRITEA -- PERFORM "SYSCALL:WRITEA"
                430: *
  B5E2          431: WRITEA   ;JSR    CHECKCHANNELOPEN
B5E2 BDB23F     432:          JSR     CHECKCHANNELOPEN
B5E5 BCAE52     433:          CPX     CONSOLEDRIVER DON'T WRITE IF IS CHANNEL 0 AND IS NOT CONSOLE!
B5E8 270A       434:          BEQ     WRITEA0     B/ IS CONSOLE, IS ALWAYS OK TO WRITE
                435:          ;LDX    CODE+SDOS:IOBLOCKPTR NOT CONSOLE, IS THIS CHANNEL 0 ?
B5EA FEAE07     436:          LDX     CODE+SDOS:IOBLOCKPTR
                437:          ;LDA    WRITEA:CHANNEL,X ...?
B5ED A602       438:          LDAA    WRITEA:CHANNEL,X
B5EF 2709       439:          BEQ     WRITEA1     B/ YES, DON'T DO WRITE, WOULD DAMAGE "DO" FILE!
                440:          ;LDX    DRIVERVPOINTER MUST DO WRITE, GET POINTER TO DRIVER VECTOR
B5F1 FEAE54     441:          LDX     DRIVERVPOINTER
  B5F4          442: WRITEA0
                443:          ;JSR    [DRIVER:WRITEA,X] GO DO THE WRITE
B5F4 EE06       444:          LDX     DRIVER:WRITEA,X
B5F6 AD00       445:          JSR     0,X
B5F8 25E7       446:          BCS     READARTS    B/ ERROR, GIVE UP NOW!
  B5FA          447: WRITEA1  ;LDX    CODE+SDOS:IOBLOCKPTR SET UP TO HANDLE LOGGING
B5FA FEAE07     448:          LDX     CODE+SDOS:IOBLOCKPTR
                449:          ;LDD    WRITEA:COUNT,X GET NUMBER OF BYTES TO WRITE
B5FD E607       450:          LDAB    (WRITEA:COUNT)+1,X
B5FF A606       451:          LDAA    WRITEA:COUNT,X
                452:          ;LDX    WRITEA:BUFFERP,X AND WHERE TO WRITE THEM FROM
B601 EE04       453:          LDX     WRITEA:BUFFERP,X
B603 2098       454:          BRA     WRITEALOG   GO SEE IF WE SHOULD LOG THIS DATA




ASM/6800 1.4A0: B603 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 152; Form 9     MISCELLANEOUS SYSCALLS
SDOS6800.ASM
                  2: *
                  3: *        CONTROL -- PERFORM "SYSCALL:CONTROL"
                  4: *
  B605            5: CONTROL  EQU     *
B605 8D04         6:          BSR     STATUSCONTROL DO ALL THE COMMON WORK
                  7:          ;JMP    [DRIVER:CONTROL,X] CALL THE DRIVER
B607 EE12         8:          LDX     DRIVER:CONTROL,X
B609 6E00         9:          JMP     0,X
                 10: *
                 11: *        STATUSCONTROL -- COMMON SUBROUTINE FOR "CONTROL", "STATUS" SYSCALLS
                 12: *        IF OPERATION IS ON CHANNEL 0, IT IS AIMED AT LOG CHANNEL IF LOG IS OPEN
                 13: *        SETS UP (A) TO CONTAIN THE ACTUAL STATUS (CONTROL) REQUEST CODE
                 14: *        RETURNS (X) = DRIVERVPOINTER
                 15: *
  B60B           16: STATUSCONTROL    EQU         *
                 17:          ;JSR    CHECKCHANNELOPEN OR WE CAN'T DO ANYTHING AT ALL!
B60B BDB23F      18:          JSR     CHECKCHANNELOPEN
B60E 8DC2        19:          BSR     DOWELOG     LOGGING ?
B610 240D        20:          BCC     STATUSCONTROL1 B/ NOT LOGGING
B612 FFAE54      21:          STX     DRIVERVPOINTER LOGGING, USE LOGIOCB'S DRIVER...
                 22:          ;LDX    #LOGIOCB    SET EVERYTHING ELSE UP...
B615 CEAF35      23:          LDX     #LOGIOCB
B618 FFAE09      24:          STX     IOCBPOINTER
                 25:          ;LDX    IOCB:DCB,X  AS THOUGH "OPEN" ON THE LOG CHANNEL...
B61B EE00        26:          LDX     IOCB:DCB,X
B61D DF06        27:          STX     DCBPOINTER  HAD BEEN PERFORMED
  B61F           28: STATUSCONTROL1   EQU         *
                 29:          ;LDX    CODE+SDOS:IOBLOCKPTR GET STATUS REQUEST CODE TO (A)
B61F FEAE07      30:          LDX     CODE+SDOS:IOBLOCKPTR
B622 A603        31:          LDAA    STATUS:CODE,X
                 32:          ;LDX    DRIVERVPOINTER GET DRIVER ADDRESS TO (X), AS PROMISED
B624 FEAE54      33:          LDX     DRIVERVPOINTER
B627 0C39        34:          OKRTS
                 35: *
                 36: *        STATUS -- PERFORM "SYSCALL:STATUS"
                 37: *
  B629           38: STATUS   EQU     *
B629 8DE0        39:          BSR     STATUSCONTROL DO COMMON WORK
                 40:          ;JMP    [DRIVER:STATUS,X] CALL THE DEVICE DRIVER
B62B EE14        41:          LDX     DRIVER:STATUS,X




ASM/6800 1.4A0: B62D SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 153; Form 9     MISCELLANEOUS SYSCALLS
SDOS6800.ASM
B62D 6E00        42:          JMP     0,X




ASM/6800 1.4A0: B62D SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 154; Form 9     MISCELLANEOUS SYSCALLS
SDOS6800.ASM
                 44: *        DEBUG -- PERFORM "SYSCALL:DEBUG"
                 45: *        ASSERT: SDOSRECURSIVECALL=1 (I.E., SDOS ITSELF DOES NOT INVOKE THIS!)
                 46: *
  B62F           47: DEBUG    ;LDX    CODE+SDOS:CONFIGURATION
B62F FEAE03      48:          LDX     CODE+SDOS:CONFIGURATION
                 49:          ;LDX    CNFG:DEBUGGER,X IS THERE A DEBUGGER?
B632 EE0D        50:          LDX     CNFG:DEBUGGER,X
B634 2707        51:          BEQ     DEBUG1      B/ NOPE
                 52:          ;LEAS   2,S         POP RETURN ADDRESS PUSHED BY "SYSCALL2"
  0000           53:          IF      2<0
 *S*             54:          RPT     -2
 *S*             55:          DES
                 56:          ELSE
  0002           57:          RPT     2
B636 31          58:          INS
                 59:          FIN
                 60:          ;DEC    SDOSRECURSIVECALL FLAG "NOT IN SDOS"
B638 7AAF8D      61:          DEC     SDOSRECURSIVECALL
                 62:          ;JMP    ,X          NOW ENTER THE DEBUGGER (RETURN VIA RTS)
B63B 6E00        63:          JMP     0,X
                 64: 
  B63D           65: DEBUG1   EQU     *
                 66:          ;LDX    #ERR:NODEBUGGER YOU GUESSED IT!
B63D CE03EB      67:          LDX     #ERR:NODEBUGGER
                 68:          ;JMP    EXIT1       GO STICK USER WITH THIS ERROR
B640 7EB80D      69:          JMP     EXIT1
                 70: *
                 71: *        ATTNCHECK -- PERFORM "SYSCALL:ATTNCHECK"
                 72: *
  B643           73: ATTNCHECK        ;LDX        CODE+SDOS:CONFIGURATION DOES OKRTS IF OPERATOR INTERVENTI
B643 FEAE03      74:          LDX     CODE+SDOS:CONFIGURATION
                 75:          ;JMP    [CNFG:ATTNCHECK,X]
B646 EE0B        76:          LDX     CNFG:ATTNCHECK,X
B648 6E00        77:          JMP     0,X
                 78: *
                 79: *        SETERROR -- PERFORM "SYSCALL:SETERROR"
                 80: *
  B64A           81: SETERROR ;LDX    CODE+SDOS:IOBLOCKPTR
B64A FEAE07      82:          LDX     CODE+SDOS:IOBLOCKPTR
                 83:          ;LDX    SETERROR:CODE,X




ASM/6800 1.4A0: B64D SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 155; Form 9     MISCELLANEOUS SYSCALLS
SDOS6800.ASM
B64D EE02        84:          LDX     SETERROR:CODE,X
B64F FFAF26      85:          STX     USERSLASTERROR
  B652           86: WAITDONE ; FOR NOW, SINCE IT'S NOT REALLY IMPLEMENTED
B652 0C39        87:          OKRTS
                 88: *
                 89: *        GETERROR -- PERFORM "SYSCALL:GETERROR"
                 90: *
  B654           91: GETERROR EQU     *
                 92:          ;JSR    CHECKRDLEN  MAKE SURE READ BUFFER IS LARGE ENOUGH
B654 BDB89F      93:          JSR     CHECKRDLEN
B657 0002        94:          FDB     2           2 BYTES OF ERROR CODE TO READ BACK
                 95:          ;LDD    USERSLASTERROR COPY ERROR CODE TO READ BUFFER
B659 F6AF27      96:          LDAB    USERSLASTERROR+1
B65C B6AF26      97:          LDAA    USERSLASTERROR
                 98:          ;STD    [SCBLK:RDBUF,X]
B65F EE0A        99:          LDX     SCBLK:RDBUF,X
B661 E701       100:          STAB    1,X
B663 A700       101:          STAA    0,X
B665 0C39       102:          OKRTS




ASM/6800 1.4A0: B665 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 156; Form 9     ERROR DISPLAY
SDOS6800.ASM
                104: *        DISPLAYERROR -- DISPLAY "USERSLASTERROR" ON THE CONSOLE...
                105: *        AS EITHER AN ERROR STRING FROM THE $ERRORMESSAGES FILE
                106: *        OR AS "ERROR ddddd" IF WE CAN'T GET TO $ERRORMESSAGES SOMEHOW
                107: *        IF WE CANNOT PRINT THE ERROR MESSAGE, CROAK AND DIE!
                108: *        (EXAMINE "LASTERROR" IN SDOS:XXXX TO FIND OUT WHY)
                109: *
  B667          110: DISPLAYERROR     ;LDX        USERSLASTERROR DO IT NOW, IN CASE OF ERROR WHILE
B667 FEAF26     111:          LDX     USERSLASTERROR
B66A FFAF2D     112:          STX     ERRORNUMBER PROCESSING THIS ERROR
  B66D          113: DISPLAYERRORRETRY ; TRY TO DISPLAY ERROR AGAIN
                114:          ;JSR    OPENCONSOLE MAKE SURE WE CAN OUTPUT THE ERROR MESSAGE
B66D BDB899     115:          JSR     OPENCONSOLE
B670 2405       116:          BCC     DISPLAYERRORA B/ NO ERROR
B672 8C0407     117:          CPX     #ERR:CHBUSY IS CHANNEL ALREADY OPEN ?
B675 26FE       118:          BNE     *           LOOP IF NOT, CAN'T RECOVER!
  B677          119: DISPLAYERRORA    EQU         *
                120:          ;JSR    DSKFOPENERRORFILE TRY TO OPEN THE "ERRORMSGS.SYS" FILE
B677 BDC27F     121:          JSR     DSKFOPENERRORFILE
B67A 2577       122:          BCS     DISPLAYERROR4A B/ CAN'T OPEN, GO DISPLAY ERROR IN NUMERIC FORMAT
                123: *        NOW THE ERRORMSGS.SYS FILE IS OPEN!
                124: *
                125: *        POSITION TO THE ERROR MESSAGE POINTER
                126: *        = 3 * ERROR NUMBER
                127: *
                128:          ;LDX    #DISPPOS1
B67C CEAFD6     129:          LDX     #DISPPOS1
                130:          ;CLR    1,X         (0,X IS ASSEMBLED AS A ZERO!)
B67F 6F01       131:          CLR     1,X
                132:          ;LDD    ERRORNUMBER
B681 F6AF2E     133:          LDAB    ERRORNUMBER+1
B684 B6AF2D     134:          LDAA    ERRORNUMBER
                135:          ;ASLD               *2
B687 58         136:          ASLB
B688 49         137:          ROLA
B689 6901       138:          ROL     1,X
                139:          ;ADDD   ERRORNUMBER *3
B68B FBAF2E     140:          ADDB    ERRORNUMBER+1
B68E B9AF2D     141:          ADCA    ERRORNUMBER
B691 2402       142:          BCC     DISPLAYERROR0
                143:          ;INC    1,X




ASM/6800 1.4A0: B693 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 157; Form 9     ERROR DISPLAY
SDOS6800.ASM
B693 6C01       144:          INC     1,X
  B695          145: DISPLAYERROR0    ;STD        2,X
B695 E703       146:          STAB    (2)+1,X
B697 A702       147:          STAA    2,X
                148:          ;LDX    #DISPPOS    NOW POSITION ERRORMSGS.SYS FILE...
B699 CEB772     149:          LDX     #DISPPOS
                150:          ;JSR    SYSCALLENTRY TO THE ERROR MESSAGE STRING POINTER
B69C BDB1B2     151:          JSR     SYSCALLENTRY
B69F 2550       152:          BCS     DISPLAYERROR4 B/ OOPS, SOME PROBLEM OCCURRED
                153:          ;LDX    #DISPREADB3 READ IN THE STRING ADDRESS
B6A1 CEAFC8     154:          LDX     #DISPREADB3
                155:          ;JSR    SYSCALLENTRY
B6A4 BDB1B2     156:          JSR     SYSCALLENTRY
B6A7 2548       157:          BCS     DISPLAYERROR4
                158:          ;LDX    DISPPOS1+2  IS THE ERROR MSG IN THE FILE?
B6A9 FEAFD8     159:          LDX     DISPPOS1+2
B6AC 2605       160:          BNE     DISPLAYERROR1A B/ YUP
B6AE B6AFD7     161:          LDAA    DISPPOS1+1  ...?
B6B1 273E       162:          BEQ     DISPLAYERROR4 B/ NO, PRINT THE ERROR CODE THE HARD WAY
  B6B3          163: DISPLAYERROR1A   EQU         *
                164:          ;LDX    #DISPPOS    POSITION TO THE STRING
B6B3 CEB772     165:          LDX     #DISPPOS
                166:          ;JSR    SYSCALLENTRY
B6B6 BDB1B2     167:          JSR     SYSCALLENTRY
B6B9 2536       168:          BCS     DISPLAYERROR4 B/ ERROR
                169: *
                170: *        COPY THE STRING TO CHANNEL 0
                171: *
  B6BB          172: DISPLAYERROR1    ;LDX        #DISPGETCHAR
B6BB CEAFDA     173:          LDX     #DISPGETCHAR
                174:          ;JSR    SYSCALLENTRY
B6BE BDB1B2     175:          JSR     SYSCALLENTRY
B6C1 252E       176:          BCS     DISPLAYERROR4
B6C3 B6AFE8     177:          LDAA    BUFFER
                178:          ;CMPA   #ASCII:CR
B6C6 810D       179:          CMPA    #ASCII:CR
B6C8 271E       180:          BEQ     DISPLAYERRORDONE B/ I'M DONE!
                181:          ;LDX    #DISPPUTCHAR NOT DONE, OUTPUT THIS CHARACTER TO CONSOLE
B6CA CEB77A     182:          LDX     #DISPPUTCHAR
                183:          ;JSR    SYSCALLENTRY




ASM/6800 1.4A0: B6CD SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 158; Form 9     ERROR DISPLAY
SDOS6800.ASM
B6CD BDB1B2     184:          JSR     SYSCALLENTRY
B6D0 24E9       185:          BCC     DISPLAYERROR1 B/ NO ERROR, GO OUTPUT NEXT CHARACTER
  B6D2          186: DISPERRKILLLOG   ; PERHAPS ERROR IS CAUSED BY LOG DEVICE
B6D2 8D14       187:          BSR     DISPLAYERRORDONE CLOSE ERRORMSGS.SYS FILE TO KEEP THINGS NEAT
                188:          ;JSR    CLOSELOG    GET RID OF POTENTIAL SOURCE OF PROBLEM
B6D4 BDB4C2     189:          JSR     CLOSELOG
B6D7 2405       190:          BCC     DISPERRKILLLOG1 B/ MANAGED TO CLOSE LOG FILE!
B6D9 8C0408     191:          CPX     #ERR:CLOSED FAIL BECAUSE ALREADY CLOSED ?
B6DC 27FE       192:          BEQ     *           B/ YES, SITUATION IS HOPELESS...
  B6DE          193: DISPERRKILLLOG1  ; MANAGED TO CLOSE THE LOG FILE (PERHAPS WITH ERROR)
                194:          ;LDX    #CLOSECHANNEL0 TURN OFF THE "DO" FILE
B6DE CEB5CF     195:          LDX     #CLOSECHANNEL0
                196:          ;JSR    SYSCALLENTRY
B6E1 BDB1B2     197:          JSR     SYSCALLENTRY
B6E4 25FE       198:          BCS     *           B/ BUT IT WAS OPEN A MINUTE AGO!!!???
B6E6 2085       199:          BRA     DISPLAYERRORRETRY
                200: *
                201: *        CLOSE THE ERROR FILE (I'M DONE & ALL IS WELL)
                202: *
  B6E8          203: DISPLAYERRORDONE ;LDX        #DISPCLOSE
B6E8 CEB76F     204:          LDX     #DISPCLOSE
                205:          ;JSR    SYSCALLENTRY
B6EB BDB1B2     206:          JSR     SYSCALLENTRY
B6EE 25FE       207:          BCS     *           IF ITS NOT PERFECT, I WON'T LET YOU PLAY WITH MY BALL!
B6F0 39         208:          RTS




ASM/6800 1.4A0: B6F0 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 159; Form 9     ERROR DISPLAY
SDOS6800.ASM
                210: *        AN ERROR WAS DETECTED WHILE TRYING TO PRINT AN ERROR STRING
                211: *        IGNORE THE ERROR, AND ATTEMPT TO PRINT "ERROR <ERRORNUMBER>" INSTEAD
                212: *        (IN DECIMAL FORMAT)
                213: *
B6F1 8DF5       214: DISPLAYERROR4    BSR         DISPLAYERRORDONE CLOSE THE ERROR FILE
  B6F3          215: DISPLAYERROR4A   EQU         *
                216:          ;LDX    #DISPERROR
B6F3 CEB782     217:          LDX     #DISPERROR
                218:          ;JSR    SYSCALLENTRY
B6F6 BDB1B2     219:          JSR     SYSCALLENTRY
B6F9 25D7       220:          BCS     DISPERRKILLLOG IF I CAN'T PRINT THE ERROR, WE DON'T GO NOWHERE!
B6FB C610       221:          LDAB    #16         (16 BITS TO CONVERT)
                222:          ;LDX    #DECBUF     CONVERT 16 BITS BINARY TO 3 DIGITS BCD
B6FD CEAF2A     223:          LDX     #DECBUF
                224:          ;CLR    0,X
B700 6F00       225:          CLR     0,X
                226:          ;CLR    1,X
B702 6F01       227:          CLR     1,X
                228:          ;CLR    2,X
B704 6F02       229:          CLR     2,X
  B706          230: DISPLAYERROR5    EQU         *
B706 6804       231:          ASL     ERRORNUMBER-DECBUF+1,X
B708 6903       232:          ROL     ERRORNUMBER-DECBUF,X
B70A A602       233:          LDAA    2,X
B70C A902       234:          ADCA    2,X
B70E 19         235:          DAA
B70F A702       236:          STAA    2,X
B711 A601       237:          LDAA    1,X
B713 A901       238:          ADCA    1,X
B715 19         239:          DAA
B716 A701       240:          STAA    1,X
B718 A600       241:          LDAA    0,X
B71A A900       242:          ADCA    0,X
B71C 19         243:          DAA
B71D A700       244:          STAA    0,X
B71F 5A         245:          DECB
B720 26E4       246:          BNE     DISPLAYERROR5
B722 C603       247:          LDAB    #3          (3 BYTES OF BCD)
B724 A602       248: DISPLAYERROR6    LDAA        2,X
B726 840F       249:          ANDA    #$F




ASM/6800 1.4A0: B728 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 160; Form 9     ERROR DISPLAY
SDOS6800.ASM
B728 36         250:          PSHA
B729 A602       251:          LDAA    2,X
B72B 44         252:          LSRA
B72C 44         253:          LSRA
B72D 44         254:          LSRA
B72E 44         255:          LSRA
B72F 840F       256:          ANDA    #$F
B731 36         257:          PSHA
B732 09         258:          DEX
B733 5A         259:          DECB
B734 26EE       260:          BNE     DISPLAYERROR6
                261:          ;LDX    #STRINGBUFFER
B736 CEAF2F     262:          LDX     #STRINGBUFFER
B739 8630       263:          LDAA    #'0
B73B A700       264:          STAA    0,X
B73D C606       265:          LDAB    #6          (6 BYTES ON THE STACK)
  B73F          266: DISPLAYERROR7
B73F 32         267:          PULA
B740 5A         268:          DECB
B741 2703       269:          BEQ     DISPLAYERROR9 B/ NO MORE (THEY WERE ALL ZERO)
B743 4D         270:          TSTA
B744 27F9       271:          BEQ     DISPLAYERROR7 B/ ZERO SUPPRESS
B746 5C         272: DISPLAYERROR9    INCB
B747 2001       273:          BRA     DISPLAYERROR8A
                274: 
  B749          275: DISPLAYERROR8
B749 32         276:          PULA
  B74A          277: DISPLAYERROR8A
B74A 8B30       278:          ADDA    #'0
                279:          ;STA    ,X+
B74C A700       280:          STAA    0,X
B74E 08         281:          INX
B74F A700       282:          STAA    0,X
B751 5A         283:          DECB
B752 26F5       284:          BNE     DISPLAYERROR8
B754 09         285:          DEX
B755 DF00       286:          STX     TEMPX       COMPUTE LENGTH OF THE STRING (ALWAYS < 256)
B757 D601       287:          LDAB    TEMPX+1
B759 C02E       288:          SUBB    #(STRINGBUFFER&$FF)-1
                289:          ;LDX    #DISPOUT




ASM/6800 1.4A0: B75B SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 161; Form 9     ERROR DISPLAY
SDOS6800.ASM
B75B CEAFC0     290:          LDX     #DISPOUT
B75E E707       291:          STAB    WRITEA:COUNT+1,X
                292:          ;JSR    SYSCALLENTRY
B760 BDB1B2     293:          JSR     SYSCALLENTRY
                294:          ;LBCS   DISPERRKILLLOG ITS GOTTA BE PERFECT, OR I QUIT!
B763 2403       295:          BCC     MACRO:000C
B765 7EB6D2     296:          JMP     DISPERRKILLLOG
  B768          297: MACRO:000C
B768 39         298:          RTS
                299: *
B769 4572726F   300: DISPERRORMSG     FCC         'Error '
  0006          301: DISPERRORMSGL    EQU         *-DISPERRORMSG
                302: *
B76F 02         303: DISPCLOSE        FCB         SYSCALL:CLOSE FUNCTION
B770 03         304:          FCB     CLOSE:SCLEN
B771 FE         305:          FCB     SYSCHANNEL  OPEN
                306: *
  B772          307: DISPPOS  ; USED TO POSITION $ERRORMESSAGES FILE
B772 0E         308:          FCB     SYSCALL:CONTROL
B773 08         309:          FCB     CONTROL:SCLEN+4 ROOM FOR POINTER TO WRBUF
B774 FE         310:          FCB     SYSCHANNEL  CHANNEL
B775 00         311:          FCB     CC:POSITION CONTROL SUB-CODE
B776 AFD6       312:          FDB     DISPPOS1    POINTER TO 4 BYTE FILE POSITION DESIRED
B778 0004       313:          FDB     4           SIZE OF FILE POSITION DATA
                314: *
  B77A          315: DISPPUTCHAR      ; USED TO WRITE ERROR MESSAGE BYTES TO CONSOLE
B77A 0C         316:          FCB     SYSCALL:WRITEA
B77B 08         317:          FCB     WRITEA:SCLEN
B77C 00         318:          FCB     0           CHANNEL
B77D 00         319:          FCB     IGNORED
B77E AFE8       320:          FDB     BUFFER      THIS IS WHERE CHARACTER IS
B780 0001       321:          FDB     1           ALL OF 1 BYTE!
                322: *
  B782          323: DISPERROR        ; USED TO DISPLAY "Error " ON CONSOLE
B782 0C         324:          FCB     SYSCALL:WRITEA
B783 08         325:          FCB     WRITEA:SCLEN
B784 00         326:          FCB     0           CHANNEL
B785 00         327:          FCB     IGNORED
B786 B769       328:          FDB     DISPERRORMSG BUFFER ADDRESS
B788 0006       329:          FDB     DISPERRORMSGL # BYTES TO PRINT




ASM/6800 1.4A0: B788 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 162; Form 9     USER PROGRAM EXIT LOGIC
SDOS6800.ASM
                331: *        KILLUSERPROGRAM -- ENTERED TO ABORT THE CURRENT USER PROGRAM
                332: *        CAN BE CALLED FROM WITHIN SDOS
                333: *        OR FROM WITHIN AN I/O PACKAGE SUBROUTINE OF SDOS
                334: *        OR FROM AN INTERRUPT ROUTINE
                335: *        RETURNS CARRY SET IF CAN'T KILL USER INSTANTLY, SO INPUT ROUTINES DON'T ABORT
                336: *
  B78A          337: KILLUSERPROGRAM  EQU         *
B78A B6AE20     338:          LDAA    CODE+SDOS:KILLPROOF IS USER PROGRAM KILL PROOF ?
B78D 2621       339:          BNE     KILLUSERRTS B/ YES, DON'T KILL IT!
                340:          ;CLR    KILLEDF     REMEMBER THAT WE KILLED HIM (USED BY "CHAIN")
B78F 7FAF8C     341:          CLR     KILLEDF
                342:          ;JSR    KILLPROOF   ONCE KILLED, DON'T LET IT BE KILLED AGAIN!
B792 BDB7B5     343:          JSR     KILLPROOF
                344:          ;LDD    #KILLPROGRAM (A,B):= DESIRED PC OF USER TASK
B795 C6C4       345:          LDAB    #(KILLPROGRAM)&$FF
B797 86B7       346:          LDAA    #(KILLPROGRAM)/256
B799 7DAF8D     347:          TST     SDOSRECURSIVECALL USER TASK EXECUTING INSIDE SDOS SOMEWHERE ?
B79C 2609       348:          BNE     KILLUSER2   B/ YES, FIX UP HIS RETURN ADDRESS AND WE'RE DONE!
                349:          ;LDX    USERTASKTCB+TCB:STACK GET STACK POINTER FOR USER TASK
B79E FEAE8C     350:          LDX     USERTASKTCB+TCB:STACK
                351:          ;STD    REG:PC,X    MODIFY CONTEXT BLOCK'S PC...
B7A1 E707       352:          STAB    (REG:PC)+1,X
B7A3 A706       353:          STAA    REG:PC,X
                354: *        SO THAT THE "RTI" WILL TAKE USER TASK TO "KILLPROGRAM"
B7A5 0C39       355:          OKRTS
                356: 
  B7A7          357: KILLUSER2        ; MODIFY USER'S RETURN ADDRESS SO HE GOES TO "KILLPROGRAM"
  0001          358:          IF      M6800!M6801
                359:          ;LDX    USERRETAPTR GET USER'S (S) ON ENTRY TO SDOS
B7A7 FEAF8E     360:          LDX     USERRETAPTR
                361:          ;STD    1,X         THIS IS WHERE PC IS IN STACK
B7AA E702       362:          STAB    (1)+1,X
B7AC A701       363:          STAA    1,X
  0001          364:          ELSE    (M6809)
 *S*            365:          ;STD    [USERRETAPTR]
 *S*            366:          LDX     USERRETAPTR
 *S*            367:          STAB    1,X
 *S*            368:          STAA    0,X
                369:          FIN
B7AE 0C39       370:          OKRTS




ASM/6800 1.4A0: B7AE SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 163; Form 9     USER PROGRAM EXIT LOGIC
SDOS6800.ASM
                371: *
  B7B0          372: KILLUSERRTS      ; USER IS KILL PROOF
                373:          ;CLR    KILLREQUESTEDF CAN'T KILL HIM NOW, SET TIME BOMB
B7B0 7FAF8B     374:          CLR     KILLREQUESTEDF
B7B3 0D39       375:          ERRORRTS




ASM/6800 1.4A0: B7B3 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 164; Form 9     USER PROGRAM EXIT LOGIC
SDOS6800.ASM
                377: *        KILLPROOF -- PERFORM "SYSCALL:KILLPROOF"
                378: *        KILLENABLE -- PERFORM "SYSCALL:KILLENABLE"
                379: *
  B7B5          380: KILLPROOF        EQU         *
B7B5 8601       381:          LDAA    #1          MAKE USER PROGRAM UNKILLABLE (FOR THE NONCE)
B7B7 2001       382:          BRA     KILLPROOF1
                383: 
  B7B9          384: KILLENABLE       ; MAKE USER PROGRAM KILLABLE
B7B9 4F         385:          CLRA                0 --> KILLABLE
B7BA B7AE20     386: KILLPROOF1       STAA        CODE+SDOS:KILLPROOF
B7BD BAAF8B     387:          ORAA    KILLREQUESTEDF DID SOMEBODY ASK FOR THIS GUY TO BE KILLED ?
  B7C0          388: KILLEDTEST       ; CHECK TO SEE IF USER HAS BEEN KILLED
B7C0 2702       389:          BEQ     KILLPROGRAM B/ NOT KILLPROOF, AND KILL REQUESTED IN PAST
B7C2 0C39       390:          OKRTS               ALL IS DANDY, GET OUT!
                391: *
                392: *        KILLPROGRAM -- THIS IS WHERE USER TASK IS FORCED TO GO
                393: *        HERE WE MAKE USER TASK DO A FORCED EXIT
                394: *
  B7C4          395: KILLPROGRAM      EQU         *
B7C4 2500       396:          BCS     *+2         EAT USER ERROR IF KILLED ****IS THIS WHAT WE WANT???***
                397:          ;INC    SDOSRECURSIVECALL SO SYSCALLS WITH FUNNY CHANNEL NUMBERS ARE LEGAL
B7C6 7CAF8D     398:          INC     SDOSRECURSIVECALL
                399:          ;LDX    #CLOSECHANNEL0 KILL ANY "DO" FILE THAT MIGHT BE OPEN
B7C9 CEB5CF     400:          LDX     #CLOSECHANNEL0
                401:          ;JSR    SYSCALLENTRY
B7CC BDB1B2     402:          JSR     SYSCALLENTRY
B7CF 253C       403:          BCS     EXIT1       B/ MORE IMPORTANT ERROR OCCURRED
                404:          ;JSR    CLOSELOG    IF ITS OPEN
B7D1 BDB4C2     405:          JSR     CLOSELOG
B7D4 2405       406:          BCC     KILLPROGRAM1 B/ IT WAS OPEN, AND WE CLOSED IT SUCCESSFULLY
B7D6 8C0408     407:          CPX     #ERR:CLOSED THIS IS OK, TOO!
B7D9 2632       408:          BNE     EXIT1       B/ WRONG REASON, GO SHOW TO USER
  B7DB          409: KILLPROGRAM1     EQU         *
                410:          ;JSR    OPENCONSOLE RE-OPEN THE CONSOLE ON CHANNEL 0
B7DB BDB899     411:          JSR     OPENCONSOLE
B7DE 252D       412:          BCS     EXIT1       B/ MORE IMPORTANT ERROR OCCURRED
                413:          ;LDX    #ACKCONTROLC ACKNOWLEDGE RECEIPT OF ^C^C
B7E0 CEAFA0     414:          LDX     #ACKCONTROLC
                415:          ;JSR    SYSCALLENTRY
B7E3 BDB1B2     416:          JSR     SYSCALLENTRY




ASM/6800 1.4A0: B7E6 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 165; Form 9     USER PROGRAM EXIT LOGIC
SDOS6800.ASM
B7E6 2525       417:          BCS     EXIT1       B/ RECEIPT ACKNOWLEDGED WITH ERROR 1041
                418:          ;LDX    #ERR:PROGRAMKILLED NOW CAUSE APPROPRIATE ERROR TO OCCUR
B7E8 CE0411     419:          LDX     #ERR:PROGRAMKILLED
B7EB 2020       420:          BRA     EXIT1




ASM/6800 1.4A0: B7EB SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 166; Form 9     USER PROGRAM EXIT LOGIC
SDOS6800.ASM
                422: *        EXIT -- EXIT FROM USER PROGRAM BACK TO COMMAND INTERPRETER
                423: *        CLOSES ALL OPEN CHANNELS EXCEPT 0 & FLUSHES THE BUFFERS
                424: *        THEN EXITS TO OPERATING SYSTEM
                425: *
  B7ED          426: ERROREXIT        ;LDX        CODE+SDOS:IOBLOCKPTR
B7ED FEAE07     427:          LDX     CODE+SDOS:IOBLOCKPTR
                428:          ;LDX    ERROREXIT:CODE,X
B7F0 EE02       429:          LDX     ERROREXIT:CODE,X
B7F2 2019       430:          BRA     EXIT1
                431: *
  B7F4          432: EXITERRED        ; EXIT GOT AN ERROR, DISPLAY IT!
                433:          ;PSHX               SAVE THIS ERROR CODE
B7F4 DF00       434:          STX     TEMPX
B7F6 D601       435:          LDAB    TEMPB
B7F8 37         436:          PSHB
B7F9 D600       437:          LDAB    TEMPA
B7FB 37         438:          PSHB
                439:          ;JSR    DISPLAYERRORCR DISPLAY THE PREVIOUS ERROR
B7FC BDB88B     440:          JSR     DISPLAYERRORCR
                441:          ;PULD               GET EXIT'S ERROR CODE BACK
B7FF 32         442:          PULA
B800 33         443:          PULB
                444:          ;STD    USERSLASTERROR SAVE THE ERROR CODE
B801 F7AF27     445:          STAB    USERSLASTERROR+1
B804 B7AF26     446:          STAA    USERSLASTERROR
                447:          ;JSR    DISPLAYERRORCR SHOW EXIT'S ERROR
B807 BDB88B     448:          JSR     DISPLAYERRORCR




ASM/6800 1.4A0: B807 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 167; Form 9     USER PROGRAM EXIT LOGIC
SDOS6800.ASM
  B80A          450: EXITCHKSUMBASE   ; CODE FROM HERE TO EXITCHKSUMEND IS CHECKSUMMED
  B80A          451: EXIT     ;LDX    #0          PICK UP ERROR CODE FOR "NORMAL EXIT"
B80A CE0000     452:          LDX     #0
  B80D          453: EXIT1    ;JSR    KILLPROOF   SO WE DON'T GET KILLED BY SOME ZEALOT
B80D BDB7B5     454:          JSR     KILLPROOF
B810 8601       455:          LDAA    #1          GET RID OF ANY OLD KILL REQUESTS
B812 B7AF8B     456:          STAA    KILLREQUESTEDF
B815 B7AF8C     457:          STAA    KILLEDF     FORGET THAT USER MIGHT HAVE BEEN KILLED
B818 BEAF22     458:          LDS     SDOSSTACK   PICK UP A REASONABLE STACK POINTER
B81B FFAF26     459:          STX     USERSLASTERROR SAVE LAST ERROR CODE
                460:          ;JSR    INTENABLE   IN CASE SOMEBODY MANAGED TO TURN THEM OFF
B81E BDAF80     461:          JSR     INTENABLE
                462:          ;JSR    EXITS       GO CLOSE UP THE FILES
B821 BDB907     463:          JSR     EXITS
B824 25CE       464:          BCS     EXITERRED   B/ ERROR, GO TRY TO DEAL WITH IT
B826 8D63       465:          BSR     DISPLAYERRORCR
                466:          ;LDX    #SDOSCHKSUMBASE
B828 CEB0C3     467:          LDX     #SDOSCHKSUMBASE
  B82C          468: EXITCODECHKSUM   EQU         *+1 CONTAINS VALUE THAT MAKES CHECKSUM OVER EXIT ALL ZERO
B82B C600       469:          LDAB    #CHANGED    CHANGED BYTE IS CHECKSUM BYTE
B82D 4F         470:          CLRA                COMPUTE CHECKSUM ON SDOS CODE
  B82E          471: EXITCKSUML       ; DO CHECKSUM THAT IS HARD TO BEAT BY TRANSPOSITION OF BYTES
B82E 48         472:          ASLA
  0001          473:          IF      M6800!M6801
B82F A900       474:          ADCA    0,X
B831 08         475:          INX
  0001          476:          ELSE    (M6809)
 *S*            477:          ADCA    ,X+
                478:          FIN
B832 8CDEFB     479:          CPX     #SDOS:END
B835 26F7       480:          BNE     EXITCKSUML
B837 4D         481:          TSTA                IS CHECKSUM OK (=0?)
B838 270D       482:          BEQ     EXIT2       B/ YES, GO CHAIN TO DEFAULTPROGRAM
                483:          ;LDX    #ERR:SDOSCKSUM DISPLAY THE ERROR!
B83A CE041A     484:          LDX     #ERR:SDOSCKSUM
B83D FFAF26     485:          STX     USERSLASTERROR
B840 8D49       486:          BSR     DISPLAYERRORCR
B842 20FE       487:          BRA     *           WE'RE DEAD...




ASM/6800 1.4A0: B842 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 168; Form 9     USER PROGRAM EXIT LOGIC
SDOS6800.ASM
                489: ;        SerialNumberLocation is included in the critically secure "EXIT" region...
                490: ;        because of the importance of knowing that its contents are not forged.
                491: 
B844 0000       492: SerialNumberLocation         fdb 0 Points to SerialNumber if Mass-produced ROM
                493:                  ; Points to different place for each Mass-Produced computer type
                494:                  ; Contains Zero if Standard SDOS boot ROM structure.
                495: 
  B846          496: EXITCHKSUMEND    ; ALL CODE BETWEEN EXITCHKSUMBASE AND HERE IS CHECKSUMMED
                497: *
                498: *        SDOSCODECHKSUM contains a value that makes the checksum over SDOS give 0
                499: *
B846 00         500: SDOSCODECHKSUM   FCB         CHANGED




ASM/6800 1.4A0: B846 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 169; Form 9     USER PROGRAM EXIT LOGIC
SDOS6800.ASM
  B847          502: EXIT2    ;CLR    SDOSRECURSIVECALL SWITCH TO USER MODE ("NOT IN SDOS")
B847 7FAF8D     503:          CLR     SDOSRECURSIVECALL
                504:          ;JSR    KILLENABLE  ALLOW USER PROGRAM TO GET KILLED
B84A BDB7B9     505:          JSR     KILLENABLE
                506:          ;LDX    #EXITCHAIN  ALL IS OK, GO GET THE DEFAULT PROGRAM
B84D CEAFEC     507:          LDX     #EXITCHAIN
                508:          ;JSR    SYSCALLENTRY
B850 BDB1B2     509:          JSR     SYSCALLENTRY
B853 24FE       510:          BCC     *           WE GOT HERE WITHOUT AN ERROR???
                511:          ;INC    SDOSRECURSIVECALL SWITCH BACK TO "IN SDOS" MODE
B855 7CAF8D     512:          INC     SDOSRECURSIVECALL
B858 8C0428     513:          CPX     #ERR:NOSUCHPROGRAM THIS KIND OF ERROR ?
B85B 2603       514:          BNE     EXIT3       B/ NO, TELL THE USER
                515:          ;LDX    #ERR:NODEFAULTPROGRAM SCREAM "NO DEFAULTPROGRAM"!
B85D CE03F0     516:          LDX     #ERR:NODEFAULTPROGRAM
B860 FFAF26     517: EXIT3    STX     USERSLASTERROR
B863 8D26       518:          BSR     DISPLAYERRORCR
                519: *
                520: *        Since there is no DEFAULTPROGRAM on this disk, dismount the disk.
                521: *
                522:          ;LDX    DEFAULTDISKDCB THIS IS THE DISK TO DISMOUNT.
B865 FEAE4C     523:          LDX     DEFAULTDISKDCB
B868 DF06       524:          STX     DCBPOINTER
                525:          ;JSR    DSKDDISMOUNT
B86A BDC5A6     526:          JSR     DSKDDISMOUNT
B86D 209B       527:          BRA     EXIT        AND START OVER AGAIN
                528: 
B86F 44454641   529: DEFAULTPROG      FCC         'DEFAULTPROGRAM'
  000E          530: DEFAULTPROGL     EQU         *-DEFAULTPROG
                531: *
  B87D          532: EXITCR   ;LDX    #EXITCR1
B87D CEB883     533:          LDX     #EXITCR1
                534:          ;JMP    SYSCALLENTRY
B880 7EB1B2     535:          JMP     SYSCALLENTRY
                536: *
  B883          537: EXITCR1  ; SYSCALL USED TO PRINT A <CR> ON CHANNEL 0
B883 0C         538:          FCB     SYSCALL:WRITEA
B884 08         539:          FCB     WRITEA:SCLEN
B885 0000       540:          FCB     0,IGNORED   CHANNEL
B887 B152       541:          FDB     COPYRIGHTEND-1 YOU'LL SEE A :0D THERE...




ASM/6800 1.4A0: B889 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 170; Form 9     USER PROGRAM EXIT LOGIC
SDOS6800.ASM
B889 0001       542:          FDB     1           THIS IS ALL WE WANT TO WRITE!




ASM/6800 1.4A0: B889 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 171; Form 9     USER PROGRAM EXIT LOGIC
SDOS6800.ASM
                544: *
                545: *        DISPLAYERRORCR -- DISPLAY USER'S LAST ERROR, FOLLOWED BY <CRLF>
                546: *
  B88B          547: DISPLAYERRORCR   EQU         *
                548:          ;LDX    USERSLASTERROR GET ERROR NUMBER
B88B FEAF26     549:          LDX     USERSLASTERROR
B88E 2707       550:          BEQ     DISPLAYERRORCR1 B/ NO ERROR!
                551:          ;JSR    DISPLAYERROR GO PRINT THE ERROR STRING OR NUMBER
B890 BDB667     552:          JSR     DISPLAYERROR
B893 8DE8       553:          BSR     EXITCR      GO DISPLAY <CRLF>
B895 25FE       554:          BCS     *           LOOP HERE IF WE CAN'T GET IT OUT!
  B897          555: DISPLAYERRORCR1  EQU         *
B897 0C39       556:          OKRTS
                557: *
                558: *        OPEN UP CHANNEL 0 TO THE FIRST DEVICE IN THE
                559: *        DEVICE NAME LIST
                560: *        ***** RULE *****
                561: *        THE FIRST DEVICE IN THE DEVICE LIST IS THE CONSOLE
                562: *
  B899          563: OPENCONSOLE      ;LDX        #CONSOLEOPEN
B899 CEAF92     564:          LDX     #CONSOLEOPEN
                565:          ;JMP    SYSCALLENTRY
B89C 7EB1B2     566:          JMP     SYSCALLENTRY




ASM/6800 1.4A0: B89C SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 172; Form 9     USER PROGRAM EXIT LOGIC
SDOS6800.ASM
  0000          568:          IF      0           this code is cute, but is wrong evolutionary path...
 *S*            569: *
 *S*            570: *        SCANDCBSFORLUN -- SCAN DOWN DCB CHAIN, DECREMENT LOGICAL UNIT # IN D...
 *S*            571: *        UNTIL ZERO OR DCB CHAIN IS EXHAUSTED
 *S*            572: *        RETURNS (X)=0 --> NOT FOUND; <>0 --> FOUND
 *S*            573: *
 *S*            574: SCANDCBSFORLUN1  ; CHECK: IS LUN ZERO?
 *S*            575:          ;TSTD
 *S*            576:          TSTA
 *S*            577:          ;BEQD   SCANDCBSFORLUNF B/ YES, WE FOUND DEVICE NAME!
 *S*            578:          BNE     MACRO:000D
 *S*            579:          TSTB
 *S*            580:          BEQ     SCANDCBSFORLUNF
 *S*            581: MACRO:000D
 *S*            582:          ;SUBD   #1          DECREMENT LUN
 *S*            583:          SUBB    #(1)&$FF
 *S*            584:          SBCA    #(1)/256
 *S*            585:          ;LDX    DCB:NEXTDCB,X FIND NEXT DCB
 *S*            586:          LDX     DCB:NEXTDCB,X
 *S*            587: SCANDCBSFORLUN   ; SCAN DCB CHAIN FOR LUN (D)
 *S*            588:          BNE     SCANDCBSFORLUN1 B/ MORE DCB CHAIN TO SEARCH
 *S*            589:          RTS                 WITH "Z" SET --> NOT FOUND!
 *S*            590: 
 *S*            591: SCANDCBSFORLUNF  ; FOUND DCB THAT MATCHES LOGICAL UNIT NUMBER!
 *S*            592:          ;LDX    DCB:NAME,X  GET POINTER TO NAME
 *S*            593:          LDX     DCB:NAME,X
 *S*            594:          RTS                 WITH "Z" BIT RESET
 *S*            595: 
 *S*            596: ERRNOSUCHLUN
 *S*            597:          ;JSR    ERRET
 *S*            598:          JSR     ERRET
 *S*            599:          FDB     ERR:NOSUCHLUN
 *S*            600: *
 *S*            601: *        READLUNNAME -- PERFORM "SYSCALL:READLUNNAME"
 *S*            602: *        CONVERTS LOGICAL UNIT NUMBER TO DEVICE NAME STRING
 *S*            603: *
 *S*            604: READLUNNAME
 *S*            605:          ;LDX    CODE+SDOS:IOBLOCKPTR GET LOGICAL UNIT NUMBER
 *S*            606:          LDX     CODE+SDOS:IOBLOCKPTR
 *S*            607:          ;LDD    READLUNNAME:LUN,X




ASM/6800 1.4A0: B89C SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 173; Form 9     USER PROGRAM EXIT LOGIC
SDOS6800.ASM
 *S*            608:          LDAB    (READLUNNAME:LUN)+1,X
 *S*            609:          LDAA    READLUNNAME:LUN,X
 *S*            610:          ;LDX    CODE+SDOS:CONFIGURATION SEE IF LUN IS IN DISK DCBS
 *S*            611:          LDX     CODE+SDOS:CONFIGURATION
 *S*            612:          ;LDX    CNFG:DISKDCBS,X
 *S*            613:          LDX     CNFG:DISKDCBS,X
 *S*            614:          BSR     SCANDCBSFORLUN
 *S*            615:          BNE     READLUNNAME1 B/ YES!
 *S*            616:          ;LDX    CODE+SDOS:CONFIGURATION SEE IF LUN IS IN DEVICE DCBS
 *S*            617:          LDX     CODE+SDOS:CONFIGURATION
 *S*            618:          ;LDX    CNFG:DEVICEDCBS,X
 *S*            619:          LDX     CNFG:DEVICEDCBS,X
 *S*            620:          BSR     SCANDCBSFORLUN
 *S*            621:          BEQ     ERRNOSUCHLUN B/ LUN IS NOT LEGAL IN THIS CONFIGURATION
 *S*            622: READLUNNAME1     ; (X) = ADDRESS OF DEVICE NAME FOR SPECIFIED LUN
 *S*            623:          STX     FROMPOINTER SAVE DEVICE NAME ADDRESS
 *S*            624:          LDAB    #-1         GET LENGTH OF DEVICE NAME
 *S*            625: READLUNNAME2     ; SCAN DEVICE NAME TO GET LENGTH
 *S*            626:          INCB                BUMP LENGTH
 *S*            627:          IF      M6800!M6801
 *S*            628:          LDAA    ,X          GET BYTE OF DEVICE NAME
 *S*            629:          BEQ     READLUNNAME3 B/ END OF NAME
 *S*            630:          INX
 *S*            631:          BRA     READLUNNAME2
 *S*            632: READLUNNAME3
 *S*            633:          ELSE    (M6809)
 *S*            634:          ;LDA    ,X+
 *S*            635:          LDAA    0,X
 *S*            636:          INX
 *S*            637:          BNE     READLUNNAME2
 *S*            638:          FIN
 *S*            639:          CLRA
 *S*            640:          ;STD    TEMPX       = LENGTH OF DEVICE NAME
 *S*            641:          STAB    TEMPX+1
 *S*            642:          STAA    TEMPX
 *S*            643:          ;LDX    CODE+SDOS:IOBLOCKPTR GET USER BUFFER ADDRESS
 *S*            644:          LDX     CODE+SDOS:IOBLOCKPTR
 *S*            645:          ;LDD    READLUNNAME:MAXCOUNT,X = MAX # BYTES TO TRANSFER
 *S*            646:          LDAB    (READLUNNAME:MAXCOUNT)+1,X
 *S*            647:          LDAA    READLUNNAME:MAXCOUNT,X




ASM/6800 1.4A0: B89C SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 174; Form 9     USER PROGRAM EXIT LOGIC
SDOS6800.ASM
 *S*            648:          ;SUBD   TEMPX       ROOM FOR REPLY?
 *S*            649:          SUBB    TEMPX+1
 *S*            650:          SBCA    TEMPX
 *S*            651:          BCS     ERRSYSTOOSHORTJ
 *S*            652:          ;LDD    TEMPX       SET REPLY LENGTH
 *S*            653:          LDAB    TEMPX+1
 *S*            654:          LDAA    TEMPX
 *S*            655:          ;STD    READLUNNAME:ACTUALCOUNT,X
 *S*            656:          STAB    (READLUNNAME:ACTUALCOUNT)+1,X
 *S*            657:          STAA    READLUNNAME:ACTUALCOUNT,X
 *S*            658:          IF      M6800!M6801
 *S*            659:          ;LDX    READLUNNAME:BUFFERP,X = WHERE TO PUT NAME
 *S*            660:          LDX     READLUNNAME:BUFFERP,X
 *S*            661:          STX     TOPOINTER
 *S*            662:          ELSE    (M6809)
 *S*            663:          LDY     READLUNNAME:BUFFERP,X = WHERE TO PUT NAME
 *S*            664:          FIN
 *S*            665:          ;LDX    FROMPOINTER
 *S*            666:          LDX     FROMPOINTER
 *S*            667:          ;JSR    BLOCKMOVE
 *S*            668:          JSR     BLOCKMOVE
 *S*            669:          OKRTS
                670:          ELSE
  B1EE          671: READLUNNAME      EQU         ERRILLSYSCALL to cauterize the wound...
                672:          FIN




ASM/6800 1.4A0: B89C SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 175; Form 9     USER PROGRAM EXIT LOGIC
SDOS6800.ASM
                674: *        CHECKRDLEN -- CHECK SCBLK:RDLEN...
                675: *        TO MAKE SURE ITS VALUE >= 2 BYTES AT RETURN ADDRESS
                676: *        ALSO CHECKS THAT SYSCALL BLOCK IS LONG ENOUGH TO INCLUDE SCBLK:RDLEN
                677: *        SETS SCBLK:RPLEN TO 2 BYTE INLINE VALUE IF RDLEN IS OK
                678: *        (X) = CODE+SDOS:IOBLOCKPTR ON EXIT
                679: *        SKIPS AROUND 2 BYTE INLINE VALUE IF OK
                680: *        ERROR EXIT IF NOT OK
                681: *        **** CHECKWRLEN, CHECKRDLEN SHOULD BE RECODED SO THAT THE FOLLOWING WORKS:
                682: *        JSR     CHECKRDLEN
                683: *        FDB     XXXX
                684: *        BCS     error...
                685: *
  B89F          686: CHECKRDLEN       EQU         *
                687:          ;LDX    CODE+SDOS:IOBLOCKPTR CHECK THAT READ DATA BUFFER IS INCLUDED...
B89F FEAE07     688:          LDX     CODE+SDOS:IOBLOCKPTR
B8A2 A601       689:          LDAA    SCBLK:WLEN,X IN THE SYSCALL BLOCK
B8A4 847F       690:          ANDA    #$7F        BYEBYE WAIT BIT
                691:          ;CMPA   #SCBLK:RDLEN+2 IS SYSCALL BLOCK LONG ENOUGH ?
B8A6 810E       692:          CMPA    #SCBLK:RDLEN+2
B8A8 2529       693:          BCS     ERRSYSTOOSHORTJ B/ NOPE, STICK THE USER WITH AN ERROR
                694:          ;LDD    [0,S]       IS 0 > MINLENGTH-RDLEN-1 ?
B8AA 30         695:          TSX
B8AB EE00       696:          LDX     0,X
B8AD E601       697:          LDAB    1,X
B8AF A600       698:          LDAA    0,X
B8B1 0D         699:          SEC                 (-1 PART)
                700:          ;LDX    CODE+SDOS:IOBLOCKPTR SUBTRACT RDLEN
B8B2 FEAE07     701:          LDX     CODE+SDOS:IOBLOCKPTR
B8B5 E20D       702:          SBCB    SCBLK:RDLEN+1,X
B8B7 A20C       703:          SBCA    SCBLK:RDLEN,X
B8B9 241B       704:          BCC     ERRRDBUFTOOSMALL B/ NO, NOT ENOUGH READ BUFFER
B8BB E90D       705:          ADCB    SCBLK:RDLEN+1,X SET REPLY LENGTH = DESIRED # BYTES
B8BD A90C       706:          ADCA    SCBLK:RDLEN,X (A,B):=DESIRED # BYTES
                707:          ;STD    SCBLK:RPLEN,X RPLEN:=(A,B)
B8BF E709       708:          STAB    (SCBLK:RPLEN)+1,X
B8C1 A708       709:          STAA    SCBLK:RPLEN,X
  B8C3          710: CHECKRDLEN1      EQU         *
                711:          ;LDA    1,S         ALL IS OK, TAKE SKIP EXIT
B8C3 30         712:          TSX
B8C4 A601       713:          LDAA    1,X




ASM/6800 1.4A0: B8C6 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 176; Form 9     USER PROGRAM EXIT LOGIC
SDOS6800.ASM
B8C6 8B02       714:          ADDA    #2          BUMP RETURN PAST INLINE ARGUMENT
  0001          715:          IF      M6800!M6801
B8C8 A701       716:          STAA    1,X
B8CA 2402       717:          BCC     CHECKRDLEN2
                718:          ;INC    0,X
B8CC 6C00       719:          INC     0,X
  0001          720:          ELSE    (M6809)
 *S*            721:          STAA    1,S
 *S*            722:          BCC     CHECKRDLEN2
 *S*            723:          ;INC    0,S
 *S*            724:          TSX
 *S*            725:          INC     0,X
                726:          FIN
  B8CE          727: CHECKRDLEN2      EQU         *
                728:          ;LDX    CODE+SDOS:IOBLOCKPTR
B8CE FEAE07     729:          LDX     CODE+SDOS:IOBLOCKPTR
B8D1 0C39       730:          OKRTS




ASM/6800 1.4A0: B8D1 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 177; Form 9     USER PROGRAM EXIT LOGIC
SDOS6800.ASM
  B8D3          732: ERRSYSTOOSHORTJ  EQU         *
                733:          ;JMP    ERRSYSCALLTOOSHORT
B8D3 7EB1F2     734:          JMP     ERRSYSCALLTOOSHORT
                735: 
  B8D6          736: ERRRDBUFTOOSMALL EQU         *
                737:          ;JSR    ERRET
B8D6 BDB1F6     738:          JSR     ERRET
B8D9 041E       739:          FDB     ERR:RDBUFTOOSMALL
                740: *
                741: *        CHECKWRLEN -- CHECK SCBLK:WRLEN...
                742: *        TO MAKE SURE ITS VALUE >= 2 BYTES AT RETURN ADDRESS
                743: *        ERROR EXIT IF NOT
                744: *        RETURNS WITH (X) CONTAINING CODE+SDOS:IOBLOCKPTR OTHERWISE
                745: *        SKIPS AROUND 2 BYTE INLINE VALUE
                746: *
  B8DB          747: CHECKWRLEN       EQU         *
                748:          ;LDX    CODE+SDOS:IOBLOCKPTR CHECK THAT WRBUF INFO IS INCLUDED...
B8DB FEAE07     749:          LDX     CODE+SDOS:IOBLOCKPTR
B8DE A601       750:          LDAA    SCBLK:WLEN,X IN THE SYSCALL
B8E0 847F       751:          ANDA    #$7F        BYEBYE WAIT BIT
                752:          ;CMPA   #SCBLK:WRLEN+2 SYSCALL BLOCK LONG ENOUGH ?
B8E2 8108       753:          CMPA    #SCBLK:WRLEN+2
B8E4 25ED       754:          BCS     ERRSYSTOOSHORTJ B/ NO, GO STICK IT TO THE USER
                755:          ;LDD    [0,S]       IS 0 > MINLENGTH - WRLEN -1 ?
B8E6 30         756:          TSX
B8E7 EE00       757:          LDX     0,X
B8E9 E601       758:          LDAB    1,X
B8EB A600       759:          LDAA    0,X
B8ED 0D         760:          SEC                 (-1 PART)
                761:          ;LDX    CODE+SDOS:IOBLOCKPTR NOW SUBTRACT WRLEN
B8EE FEAE07     762:          LDX     CODE+SDOS:IOBLOCKPTR
B8F1 E207       763:          SBCB    SCBLK:WRLEN+1,X
B8F3 A206       764:          SBCA    SCBLK:WRLEN,X
B8F5 25CC       765:          BCS     CHECKRDLEN1 B/ ITS OK
  B8F7          766: ERRWRBUFTOOSMALL EQU         *
                767:          ;JSR    ERRET
B8F7 BDB1F6     768:          JSR     ERRET
B8FA 041F       769:          FDB     ERR:WRBUFTOOSMALL
                770: *
                771: *        CHECKSCLEN -- CHECK SCBLK:WLEN...




ASM/6800 1.4A0: B8FA SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 178; Form 9     USER PROGRAM EXIT LOGIC
SDOS6800.ASM
                772: *        TO MAKE SURE IT IS LARGER THAN (B), ERROR EXIT IF NOT
                773: *
  B8FC          774: CHECKSCLEN
                775:          ;LDX    CODE+SDOS:IOBLOCKPTR GET WLEN OF SYSCALL BLOCK
B8FC FEAE07     776:          LDX     CODE+SDOS:IOBLOCKPTR
                777:          ;LDA    SCBLK:WLEN,X
B8FF A601       778:          LDAA    SCBLK:WLEN,X
B901 847F       779:          ANDA    #$7F        AND MASK OFF THE NO WAIT BIT
B903 11         780:          CBA                 IS SYSCALL BLOCK LONG ENOUGH?
B904 25CD       781:          BCS     ERRSYSTOOSHORTJ B/ NOPE, STAB USER IN BACK TO GET EVEN!
B906 39         782:          RTS                 ALL IS WONDERFUL...




ASM/6800 1.4A0: B906 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 179; Form 9     USER PROGRAM EXIT LOGIC
SDOS6800.ASM
                784: *        EXITS -- DO CLEAN UP APPROPRIATE FOR PROGRAM COMPLETION
                785: *        CLOSES ALL I/O CHANNELS EXCEPT 0
                786: *        DUMPS ALL DISK BUFFERS TO DISK
                787: *
  B907          788: EXITS    ;LDX    CODE+SDOS:CONFIGURATION
B907 FEAE03     789:          LDX     CODE+SDOS:CONFIGURATION
B90A A606       790:          LDAA    CNFG:NIOCHANNELS,X
B90C B7AFFC     791:          STAA    EXITSCLOSE+CLOSE:CHANNEL SET UP CHANNEL-CLOSING SYSCALL
  B90F          792: EXITS2   ;LDX    #EXITSCLOSE CLOSE A CHANNEL
B90F CEAFFA     793:          LDX     #EXITSCLOSE
                794:          ;DEC    CLOSE:CHANNEL,X
B912 6A02       795:          DEC     CLOSE:CHANNEL,X
B914 270D       796:          BEQ     EXITS3      B/ ALL USER I/O CHANNELS EXCEPT ZERO CLOSED
                797:          ;JSR    SYSCALLENTRY GO CLOSE THIS CHANNEL
B916 BDB1B2     798:          JSR     SYSCALLENTRY
B919 24F4       799:          BCC     EXITS2
B91B 8C0408     800:          CPX     #ERR:CLOSED WAS THE CHANNEL CLOSED?
B91E 27EF       801:          BEQ     EXITS2      B/ YEP, GO ON
  B920          802: EXITSERRED       ; NOPE, HE'S DEAD (CARRY IS STILL SET)
                803:          ;JMP    ERRORED
B920 7EB209     804:          JMP     ERRORED
                805: *
                806: *        NOW GO THROUGH AND DUMP THE DISK BUFFERS ON ALL THE DRIVES
                807: *
  B923          808: EXITS3   ;LDX    CODE+SDOS:CONFIGURATION
B923 FEAE03     809:          LDX     CODE+SDOS:CONFIGURATION
                810:          ;LDX    CNFG:DISKDCBS,X
B926 EE00       811:          LDX     CNFG:DISKDCBS,X
B928 DF06       812: EXITS4   STX     DCBPOINTER
                813:          ;JSR    DSKDUMPBUFFERS
B92A BDDADA     814:          JSR     DSKDUMPBUFFERS
B92D 2405       815:          BCC     EXITS6      B/ NO PROBLEMS
B92F 8C03EA     816:          CPX     #ERR:FILEISOPEN WAS IT THE FILE OPEN PROBLEM?
B932 26EC       817:          BNE     EXITSERRED  B/ NOPE, YOU'RE DEAD
  B934          818: EXITS6   ;LDX    DCBPOINTER
B934 DE06       819:          LDX     DCBPOINTER
                820:          ;LDX    DCB:NEXTDCB,X
B936 EE05       821:          LDX     DCB:NEXTDCB,X
B938 26EE       822:          BNE     EXITS4
  0000          823:          IF      *&1         FORCE EXITDAMAGE TO BE EVEN ADDRESS




ASM/6800 1.4A0: B938 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 180; Form 9     USER PROGRAM EXIT LOGIC
SDOS6800.ASM
 *S*            824:          NOP
                825:          FIN
  B93A          826: EXITDAMAGE       ; THIS PLACE IS MASHED BY COPYRIGHT CHECK FAILURE
B93A 0C39       827:          OKRTS




ASM/6800 1.4A0: B93A SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 181; Form 10    CHAIN/LOAD SYSCALLS
SDOS6800.ASM
                  2: *        CHAIN -- PERFORM "SYSCALL:CHAIN"
                  3: *        ALWAYS RETURNS CONTROL TO CALLER AFTER ERROR UNTIL TYPE 1 RECORD VALIDATED
                  4: *        ONCE TYPE 1 RECORD SEEN, ERROREXIT IS FORCED ON AN ERROR.
                  5: *        CHAIN SWITCHES STACK TO TOP OF USER SPACE ONCE TYPE 1 RECORD SEEN.
                  6: *
                  7: *        CHAIN Transition/action table:
                  8: *        Unencrypted --> Unencrypted: Do nothing
                  9: *        Unencrypted --> Encrypted: Zero the user space, save key, mark 'running encry
                 10: *        Encrypted --> Encrypted: Do nothing
                 11: *        Encrypted --> Encrypted': Zero the user space, save decryption key
                 12: *        Encrypted --> Unencrypted: Zero the user space, save key, mark 'runencrypted'
                 13: 
                 14: *        LOAD Transition/action table:
                 15: *        Unencrypted --> Unencrypted: Do nothing
                 16: *        Unencrypted --> Encrypted: Signal error
                 17: *        Encrypted --> Encrypted: Do nothing
                 18: *        Encrypted --> Encrypted': Signal error
                 19: *        Encrypted --> Unencrypted: Signal error
                 20: *
                 21: *        These routines use OldKeyEncrypted and NewKeyEncrypted to decide transitions
                 22: *        Definition: If OldKeyEncrypted=0, then we were running Unencrypted
                 23: *                If NewKeyEncrypted=0, then we are transiting to Unencrypted
                 24: *
  B93C           25: CHAIN    EQU     *
                 26:          ;LDX    CODE+SDOS:IOBLOCKPTR REMEMBER WHERE THE CHAIN SYSCALL IS
B93C FEAE07      27:          LDX     CODE+SDOS:IOBLOCKPTR
B93F FFAF90      28:          STX     USERSYSCALLPTR (THIS IS NEEDED BECAUSE EXIT DOES A CHAIN)
B942 8DC3        29:          BSR     EXITS       GO CLOSE ALL THE CHANNELS
                 30:          ;LDX    USERSYSCALLPTR GRAB ADDRESS OF CHAIN SYSCALL AGAIN
B944 FEAF90      31:          LDX     USERSYSCALLPTR
B947 FFAE07      32:          STX     CODE+SDOS:IOBLOCKPTR MAKE IT THE OFFICIAL "BEING PROCESSED" SYSCALL A
                 33:          ;LDX    SCBLK:PARAMS,X GET LONG-TERM OPERATION ENABLING KEY
B94A EE02        34:          LDX     SCBLK:PARAMS,X
                 35:          ;JSR    SAFEGAURD   SET UP A DISASTER IF WRONG KEY IS PASSED
B94C BDB00F      36:          JSR     SAFEGAURD
  B94F           37: FIRSTCHAIN       ; ENTRY POINT USED TO CHAIN TO "SERIALNUMBER.SYS"
B94F 8D5B        38:          BSR     LOADINIT    OPEN THE FILE AND VERIFY IT IS AN OBJECT FILE
                 39:          ;LDX    STARTADDRESS CHECK THE START ADDRESS FOR ILLEGAL VALUE
B951 FEAE48      40:          LDX     STARTADDRESS
B954 272F        41:          BEQ     ERRZEROSTARTADDRESS B/ NO START ADDRESS!




ASM/6800 1.4A0: B956 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 182; Form 10    CHAIN/LOAD SYSCALLS
SDOS6800.ASM
B956 BEAF22      42:          LDS     SDOSSTACK   FILE IS OK, SWITCH TO STANDARD STACK FOR CHAINING
                 43: *** ^C^C IS PERFECTLY SAFE HERE, BECAUSE SDOSRECURSIVE CALL IS SET!
B959 8D30        44:          BSR     COMPAREDECRYPTIONKEYS ARE OLD AND NEW ENCRYPTION KEYS IDENTICAL ?
B95B 2412        45:          BCC     CHAINOK     B/ DECRYPTION KEYS MATCH, DO NOTHING
                 46:          ;JSR    ZAPUSERSPACE MAKE TRASH OUT OF INFORMATION IN USER SPACE
B95D BDBC89      47:          JSR     ZAPUSERSPACE
  0001           48:          if      m6800!m6801
                 49:          ;ldx    #OldKeyEncrypted save this "key" as last "key" used
B960 CEB068      50:          LDX     #OldKeyEncrypted
B963 DF00        51:          stx     topointer
  0001           52:          else    (m6809)
 *S*             53:          ldy     #OldKeyEncrypted
                 54:          fin
                 55:          ;LDX    #NEWKEYENCRYPTED = FROM ADDRESS
B965 CEB070      56:          LDX     #NEWKEYENCRYPTED
                 57:          ;ldd    #8          = # bytes to save
B968 C608        58:          LDAB    #(8)&$FF
B96A 8600        59:          LDAA    #(8)/256
                 60:          ;jsr    blockmove   Note: it is NOT secure to call code+sdos:blockmove here!
B96C BDDBD0      61:          JSR     blockmove
  B96F           62: CHAINOK  ; ITS OK TO DO THE CHAIN, HOP TO IT!
                 63:          ;JSR    LOADREST    GO LOAD THE REST OF THE FILE
B96F BDBA4A      64:          JSR     LOADREST
B972 2403        65:          BCC     CHAIN1      B/ NO LOADER ERROR
                 66:          ;JMP    EXIT1       I GIVE UP
B974 7EB80D      67:          JMP     EXIT1
                 68: 
  B977           69: CHAIN1   ;CLR    SDOSRECURSIVECALL FLAG "NOT IN SDOS"
B977 7FAF8D      70:          CLR     SDOSRECURSIVECALL
B97A B6AF8C      71:          LDAA    KILLEDF     SEE IF USER GOT KILLED WHILE LOADING!
                 72:          ;JSR    KILLEDTEST  ...?
B97D BDB7C0      73:          JSR     KILLEDTEST
                 74:          ;LDX    STARTADDRESS ALL IS DONE...
B980 FEAE48      75:          LDX     STARTADDRESS
                 76:          ;JMP    ,X          PASS CONTROL TO USER PROGRAM!
B983 6E00        77:          JMP     0,X
                 78: 
  B985           79: ERRZEROSTARTADDRESS          ; START ADDRESS IS ZERO ON A CHAIN
                 80:          ;LDX    #ERR:ZEROSTARTADDRESS GET ERROR CODE
B985 CE0427      81:          LDX     #ERR:ZEROSTARTADDRESS




ASM/6800 1.4A0: B985 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 183; Form 10    CHAIN/LOAD SYSCALLS
SDOS6800.ASM
                 82:          ;JMP    LOADER2     GO CLOSE THE FILE, TRASH THE KEY, AND EXIT!
B988 7EBA2D      83:          JMP     LOADER2




ASM/6800 1.4A0: B988 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 184; Form 10    CHAIN/LOAD SYSCALLS
SDOS6800.ASM
                 85: *        COMPAREDECRYPTIONKEYS -- COMPARE OLD AND NEW DECRYPTION KEYS
                 86: *        SIGNAL ERROR IF NO MATCH
                 87: *        (DO SO IN A SUBTLE WAY, SO IT IS NOT EASY TO FIND WHO GENERATES THE ERROR COD
                 88: *
  B98B           89: COMPAREDECRYPTIONKEYS
  0001           90:          IF      M6800!M6801
                 91:          ;LDX    #OLDKEYENCRYPTED = COMPARE "TO" ADDRESS
B98B CEB068      92:          LDX     #OLDKEYENCRYPTED
B98E DF00        93:          STX     TOPOINTER
  0001           94:          ELSE    (M6809)
 *S*             95:          LDY     #OLDKEYENCRYPTED
                 96:          FIN
                 97:          ;LDX    #NEWKEYENCRYPTED = COMPARE "FROM" ADDRESS
B990 CEB070      98:          LDX     #NEWKEYENCRYPTED
                 99:          ;LDB    #8          = # BYTES TO COMPARE (KEY SIZE)
B993 C608       100:          LDAB    #8
                101:          ;JSR    BLOCKCOMPARE
B995 BDCA27     102:          JSR     BLOCKCOMPARE
B998 2710       103:          BEQ     COMPAREDECRYPTIONMATCH B/ ALL IS OK
                104:          ;LDD    #ERR:DECRYPTIONKEYSDONTMATCH-1234 GENERATE ERROR CODE...
B99A C665       105:          LDAB    #(ERR:DECRYPTIONKEYSDONTMATCH-1234)&$FF
B99C 86FF       106:          LDAA    #(ERR:DECRYPTIONKEYSDONTMATCH-1234)/256
                107:          ;ADDD   #1234       IN SUBTLE WAY
B99E CBD2       108:          ADDB    #(1234)&$FF
B9A0 8904       109:          ADCA    #(1234)/256
                110:          ;TDX
B9A2 9700       111:          STAA    TEMPA
B9A4 D701       112:          STAB    TEMPB
B9A6 DE00       113:          LDX     TEMPX
B9A8 0D39       114:          ERRORRTS             AND TAKE ERROR EXIT
                115: 
  B9AA          116: COMPAREDECRYPTIONMATCH       ; OLD AND NEW KEYS MATCH!
B9AA 0C39       117:          OKRTS




ASM/6800 1.4A0: B9AA SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 185; Form 10    CHAIN/LOAD SYSCALLS
SDOS6800.ASM
                119: *
                120: *        LOADINIT -- OPEN LOAD FILE, COMPUTE DECRYPTION KEY,
                121: *        AND VERIFY OBJECT FORMAT CONTENT
                122: *        IF AN ERROR OCCURS, CLOSE THE LOAD FILE
                123: *
  B9AC          124: LOADINIT
                125:          ;LDX    CODE+SDOS:IOBLOCKPTR REMEMBER ADDRESS OF SYSTEM CALL
B9AC FEAE07     126:          LDX     CODE+SDOS:IOBLOCKPTR
B9AF FFAF1D     127:          STX     LOADSYSCALLPTR SO WE CAN SAVE START ADDRESS IN REPLY BUFFER, LATER
B9B2 867E       128:          LDAA    #$7E        SET UP SYSCALL JUMP IN PAGE ZERO...
B9B4 97FB       129:          STAA    SYSCALL$    TO JUMP TO I/O PACKAGE BASE
                130:          ;LDX    CODE+SDOS:CONFIGURATION (SO USER KNOWS WHERE BASE OF I/O PACK IS!)
B9B6 FEAE03     131:          LDX     CODE+SDOS:CONFIGURATION
                132:          ;LDX    CNFG:DRIVERBASE,X
B9B9 EE0F       133:          LDX     CNFG:DRIVERBASE,X
B9BB DFFC       134:          STX     SYSCALL$+1
                135:          ;JSR    CHECKRDLEN  NEED 4 BYTE READ-BACK AREA
B9BD BDB89F     136:          JSR     CHECKRDLEN
B9C0 0004       137:          FDB     2+2         2 FOR FILENAME LENGTH, 2 FOR START ADDRESS
                138:          ;LDX    #SYSIOCB    FAKE A CHECKCHANNEL CALL ON SYS CHANNEL
B9C2 CEAF57     139:          LDX     #SYSIOCB
B9C5 FFAE09     140:          STX     IOCBPOINTER
                141:          ;JSR    FNAMEPROCESS1 GO FIGGER OUT DA DRIVER ADDRESS
B9C8 BDB488     142:          JSR     FNAMEPROCESS1
                143:          ;JSR    [DRIVER:OPEN,X] AND OPEN IT!
B9CB EE00       144:          LDX     DRIVER:OPEN,X
B9CD AD00       145:          JSR     0,X
B9CF 2566       146:          BCS     LOADINITCANTOPEN B/ HAD A PROBLEM!
                147:          ;JSR    OPEN2       GO ADJUST FILE NAME, AND MARK SYSIOCB AS "OPEN"
B9D1 BDB431     148:          JSR     OPEN2
                149:          ;CLR    OKTODECRYPTFLAG FLAG "DON'T DECRYPT!"
B9D4 7FB067     150:          CLR     OKTODECRYPTFLAG
                151:          ;LDX    #DECRYPTBUFFER SET UP SO GET BYTE GETS 1ST BYTE OF FILE
B9D7 CEB05D     152:          LDX     #DECRYPTBUFFER
B9DA FFB05B     153:          STX     DECRYPTBUFPTR
                154:          ;LDX    #FILLDECRYPTBUFFER READ 1ST 8 BYTES OF FILE
B9DD CEB031     155:          LDX     #FILLDECRYPTBUFFER
                156:          ;JSR    SYSCALLENTRY
B9E0 BDB1B2     157:          JSR     SYSCALLENTRY
B9E3 2548       158:          BCS     LOADER2     B/ PROBABLY EOF, TOO BAD!




ASM/6800 1.4A0: B9E3 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 186; Form 10    CHAIN/LOAD SYSCALLS
SDOS6800.ASM
                159:          ;JSR    GETBYTE     GET ME A BYTE
B9E5 BDBC2C     160:          JSR     GETBYTE
                161:          ;CMPA   #LOAD:ENCRYPTED IS THIS AN ENCRYPTED FILE?
B9E8 8105       162:          CMPA    #LOAD:ENCRYPTED
                163:          ;LBEQ   LOADENCRYPTED B/ YES, GO COMPUTE DECRYPTION KEY AND PROCESS 1ST LOAD 
B9EA 2603       164:          BNE     MACRO:000E
B9EC 7EBAA4     165:          JMP     LOADENCRYPTED
  B9EF          166: MACRO:000E
                167:          ;LDX    #NEWKEYENCRYPTED SET NEWKEYENCRYPTED = 0 --> UNENCRYPTED FILE
B9EF CEB070     168:          LDX     #NEWKEYENCRYPTED
                169:          ;LDB    #8          = # BYTES TO ZERO
B9F2 C608       170:          LDAB    #8
  B9F4          171: ZERONEWKEYLOOP
                172:          ;CLR    ,X+
B9F4 6F00       173:          CLR     0,X
B9F6 08         174:          INX
B9F7 5A         175:          DECB
B9F8 26FA       176:          BNE     ZERONEWKEYLOOP
  B9FA          177: LOADSTART        ; VERIFY THAT THIS IS A PROPERLY CONSTRUCTED START RECORD
                178:          ;CMPA   #LOAD:TYPE1 DOES IT APPEAR TO BE SDOS BINARY FORMAT ?
B9FA 8101       179:          CMPA    #LOAD:TYPE1
B9FC 2707       180:          BEQ     LOADTYPE1   B/ YES
  B9FE          181: CANTLOAD ; THIS IS NOT AN OBJECT FILE
B9FE 8D4F       182:          BSR     LOADCLOSE   CLOSE THE FILE
                183:          ;JSR    ERRET
BA00 BDB1F6     184:          JSR     ERRET
BA03 0404       185:          FDB     ERR:NOTALOADFILE
                186: *
  BA05          187: LOADTYPE1        ; FETCH START ADDRESS AND VERIFY COMPLEMENT IN TYPE1 RECORD
                188:          ;JSR    GETWORD     GET THE EXECUTION ADDRESS
BA05 BDBC58     189:          JSR     GETWORD
                190:          ;STD    STARTADDRESS
BA08 F7AE49     191:          STAB    STARTADDRESS+1
BA0B B7AE48     192:          STAA    STARTADDRESS
                193:          ;LDX    LOADSYSCALLPTR COPY START ADDRESS TO SYSCALL REPLY BUFFER
BA0E FEAF1D     194:          LDX     LOADSYSCALLPTR
                195:          ;LDX    SCBLK:RDBUF,X
BA11 EE0A       196:          LDX     SCBLK:RDBUF,X
                197:          ;STD    2,X
BA13 E703       198:          STAB    (2)+1,X




ASM/6800 1.4A0: BA15 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 187; Form 10    CHAIN/LOAD SYSCALLS
SDOS6800.ASM
BA15 A702       199:          STAA    2,X
                200:          ;JSR    GETWORD
BA17 BDBC58     201:          JSR     GETWORD
                202:          ;ADDD   STARTADDRESS
BA1A FBAE49     203:          ADDB    STARTADDRESS+1
BA1D B9AE48     204:          ADCA    STARTADDRESS
                205:          ;CMPD   #-1
BA20 81FF       206:          CMPA    #(-1)/256
BA22 2602       207:          BNE     MACRO:000F
BA24 C1FF       208:          CMPB    #(-1)&$FF
  BA26          209: MACRO:000F
BA26 26D6       210:          BNE     CANTLOAD    B/ NOT TYPE 1 RECORD!
  BA28          211: LOADINITOKRTS
BA28 0C39       212:          OKRTS
                213: 
  BA2A          214: ERRSERIALNOWRONG
                215:          ;LDX    #ERR:SERIALNOWRONG
BA2A CE0432     216:          LDX     #ERR:SERIALNOWRONG
  BA2D          217: LOADER2  ; ERRORED WHILE TRYING TO LOAD
BA2D FFAE48     218:          STX     STARTADDRESS SAVE THE ERROR CODE
BA30 8D1D       219:          BSR     LOADCLOSE   CLOSE UP THE LOAD FILE
                220:          ;LDX    STARTADDRESS GET ERROR CODE BACK
BA32 FEAE48     221:          LDX     STARTADDRESS
BA35 2008       222:          BRA     LOADINITCANT1 GO STICK USER WITH ERROR
                223: 
  BA37          224: LOADINITCANTOPEN ; ERROR WHEN OPENING LOAD FILE
BA37 8C03F3     225:          CPX     #ERR:FILENOTFOUND IS THIS THE CAUSE?
BA3A 2603       226:          BNE     LOADINITCANT1 B/ NO
                227:          ;LDX    #ERR:NOSUCHPROGRAM YES, CHANGE ERROR CODES
BA3C CE0428     228:          LDX     #ERR:NOSUCHPROGRAM
  BA3F          229: LOADINITCANT1
                230:          ;JMP    ERRORINX    TRIGGER THE ERROR AGAIN
BA3F 7EB200     231:          JMP     ERRORINX




ASM/6800 1.4A0: BA3F SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 188; Form 10    CHAIN/LOAD SYSCALLS
SDOS6800.ASM
                233: *        LOAD -- PERFORM "SYSCALL:LOAD"
                234: *
  BA42          235: LOAD     EQU     *
                236:          ;JSR    LOADINIT    LOAD THE FILE INTO MEMORY
BA42 BDB9AC     237:          JSR     LOADINIT
                238:          ;JSR    COMPAREDECRYPTIONKEYS ARE OLD AND NEW DECRYPTION KEYS IDENTICAL ?
BA45 BDB98B     239:          JSR     COMPAREDECRYPTIONKEYS
BA48 25E3       240:          BCS     LOADER2     B/ KEYS DON'T MATCH, CLOSE FILES AND SIGNAL ERROR!
                241: *
  BA4A          242: LOADREST ; LOAD OBJECT RECORDS FROM FILE
                243:          ;JSR    LOADCONTENTS LOAD THE CONTENTS OF THIS FILE
BA4A BDBB7A     244:          JSR     LOADCONTENTS
BA4D 25DE       245:          BCS     LOADER2     B/ ERRORED IN LOADING FILE CONTENTS
  BA4F          246: LOADCLOSE        ; CLOSE THE LOAD FILE AND QUIT
                247:          ;LDX    #OLDKEYENCRYPTED DECIDE IF WE SHOULD RUN ENCRYPTED OR NOT
BA4F CEB068     248:          LDX     #OLDKEYENCRYPTED
                249:          ;JSR    SETKEY      (TRASH THE DECRYPTION KEY, THIS PATH ALWAYS TAKEN!)
BA52 BDBC60     250:          JSR     SETKEY
BA55 A600       251:          LDAA    ,X          IF OLDKEYENCRYPTED<>0, THEN RUN ENCRYPTED!
BA57 AA01       252:          ORAA    1,X
BA59 AA02       253:          ORAA    2,X
BA5B AA03       254:          ORAA    3,X
BA5D AA04       255:          ORAA    4,X
BA5F AA05       256:          ORAA    5,X
BA61 AA06       257:          ORAA    6,X
BA63 AA07       258:          ORAA    7,X
                259:          ;JSR    GETRUNNINGENCRYPTED SET RUNNINGENCRYPTED FLAG
BA65 BDBA93     260:          JSR     GETRUNNINGENCRYPTED
                261:          ;STA    ,X          SET RUNNINGENCRYPTED TO PROPER STATE
BA68 A700       262:          STAA    0,X
                263:          ;LDX    #LOADCLOSE1 NOW CLOSE THE LOAD FILE
BA6A CEBA70     264:          LDX     #LOADCLOSE1
                265:          ;JMP    SYSCALLENTRY
BA6D 7EB1B2     266:          JMP     SYSCALLENTRY
                267: 
  BA70          268: LOADCLOSE1       EQU         *
BA70 02         269:          FCB     SYSCALL:CLOSE
BA71 03         270:          FCB     CLOSE:SCLEN
BA72 FE         271:          FCB     SYSCHANNEL




ASM/6800 1.4A0: BA72 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 189; Form 10    CHAIN/LOAD SYSCALLS
SDOS6800.ASM
                273: *
                274: *        SYSCALL:GETSERIALNUMBER
                275: *        RETURNS SERIALNUMBER OF PROCESSOR IN REPLY BUFFER
                276: *
  BA73          277: GETSERIALNUMBER
                278:          ;JSR    CHECKRDLEN  MAKE SURE REPLY BUFFER IS LARGE ENOUGH
BA73 BDB89F     279:          JSR     CHECKRDLEN
BA76 0008       280:          FDB     SERIALNUMBER:SIZE
  0001          281:          IF      M6800!M6801
                282:          ;LDX    SCBLK:RDBUF,X WHERE TO PUT SERIAL NUMBER
BA78 EE0A       283:          LDX     SCBLK:RDBUF,X
BA7A DF00       284:          STX     TEMPX       = COPY-TO ADDRESS
  0001          285:          ELSE    (M6809)
 *S*            286:          LDY     SCBLK:RDBUF,X WHERE TO PUT SERIAL NUMBER
                287:          FIN
BA7C 8D05       288:          BSR     GETSERIALNUMBERADDRESS GET ADDRESS AND SIZE OF SERIAL NUMBER
                289:          ;JSR    BLOCKMOVE   *** NOT SAFE TO USE SDOS:BLOCKMOVE ENTRY POINT ***
BA7E BDDBD0     290:          JSR     BLOCKMOVE
BA81 0C39       291:          OKRTS
                292: *
                293: *        GETSERIALNUMBERADDRESS -- RETURNS LOCATION AND SIZE OF SERIALNUMBER
                294: *
  BA83          295: GETSERIALNUMBERADDRESS
                296:          ;LDD    #SERIALNUMBER:SIZE GET SIZE OF SERIAL NUMBER TO (D)
BA83 C608       297:          LDAB    #(SERIALNUMBER:SIZE)&$FF
BA85 8600       298:          LDAA    #(SERIALNUMBER:SIZE)/256
                299:          ;LDX    SERIALNUMBERLOCATION GET LOCATION OF S/N FOR MASK ROM
BA87 FEB844     300:          LDX     SERIALNUMBERLOCATION
BA8A 2606       301:          BNE     GETSERIALNUMBERADDRESSRTS B/ MASK ROM
                302:          ;LDX    $FFFE       STANDARD SDOS BOOT ROM, FIND JMP PRECEDING S/N
BA8C FEFFFE     303:          LDX     $FFFE
                304:          ;LEAX   3,X         ADVANCE POINTER SO IT POINTS AT S/N IN ROM
  0000          305:          IF      3<0
 *S*            306:          RPT     -3
 *S*            307:          DEX
                308:          ELSE
  0003          309:          RPT     3
BA8F 08         310:          INX
                311:          FIN
  BA92          312: GETSERIALNUMBERADDRESSRTS




ASM/6800 1.4A0: BA92 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 190; Form 10    CHAIN/LOAD SYSCALLS
SDOS6800.ASM
BA92 39         313:          RTS




ASM/6800 1.4A0: BA92 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 191; Form 10    SDOS BINARY FORMAT LOADER
SDOS6800.ASM
  BA93          315: GETRUNNINGENCRYPTED ; GET ADDRESS OF RUNNING ENCRYPTED FLAG TO (X)
                316:          ;LDX    SERIALNUMBERLOCATION MASK ROM ?
BA93 FEB844     317:          LDX     SERIALNUMBERLOCATION
BA96 2704       318:          BEQ     GETRUNNINGENCRYPTED1 B/ NO, GO LOCATE VIA RESTART VECTOR
                319:          ;LDX    #RUNNINGENCRYPTEDFLAG YES, USE DEFAULT RUNNING ENCRYPTED FLAG
BA98 CEB066     320:          LDX     #RUNNINGENCRYPTEDFLAG
BA9B 39         321:          RTS
                322: 
  BA9C          323: GETRUNNINGENCRYPTED1 ; STANDARD SDOS ROM STRUCTURE
                324:          ;LDX    $FFFE       GET ADDRESS OF JMP PRECEDING SERIAL NUMBER
BA9C FEFFFE     325:          LDX     $FFFE
                326:          ;LDX    1,X         GET POINTER TO RESTART CODE
BA9F EE01       327:          LDX     1,X
                328:          ;LDX    LDAENCRYPTED-RESTART+1,X = ADDRESS OF RUNNINGENCRYPTED FLAG
BAA1 EE04       329:          LDX     LDAENCRYPTED-RESTART+1,X
BAA3 39         330:          RTS
                331: 
  BAA4          332: LOADENCRYPTED ; LOAD AN ENCRYPTED FILE, PROCESS TYPE 5 RECORD
BAA4 8DED       333:          BSR     GETRUNNINGENCRYPTED GET ADDRESS OF RUNNING ENCRYPTED
                334:          ;INC    ,X          BUMP RUNNINGENCRYPTED; = 2 --> WAS ALREADY RUNNING ENCRYP
BAA6 6C00       335:          INC     0,X
                336:          ;LDX    SERIALNUMBERLOCATION SHOULD WE CHECK SELECT BANK ROUTINE ?
BAA8 FEB844     337:          LDX     SERIALNUMBERLOCATION
BAAB 260A       338:          BNE     LOADENCRYPTED1 B/ NO, THIS MACHINE HAS MASK-ROM --> NO SELECT BANK!
                339:          ;LDX    $FFFE       LOCATE SELECT BANK VIA RESTART VECTOR
BAAD FEFFFE     340:          LDX     $FFFE
                341:          ;LDX    1,X         CALL SELECTBANK TO VERIFY THAT IT REALLY WORKS!
BAB0 EE01       342:          LDX     1,X
BAB2 4F         343:          CLRA                SELECT BANK 0
                344:          ;JSR    [ERASEBANK-RESTART+1,X]
BAB3 EE0B       345:          LDX     ERASEBANK-RESTART+1,X
BAB5 AD00       346:          JSR     0,X
  BAB7          347: LOADENCRYPTED1
                348:          ;LDB    DECRYPTBUFFER+1 GET KEY COUNT FROM TYPE 5 RECORD
BAB7 F6B05E     349:          LDAB    DECRYPTBUFFER+1
                350:          ;STB    NKEYS       = # OF KEYS ENCODED
BABA F7B065     351:          STAB    NKEYS
                352:          ;LDX    #SDOSSECRETKEY
BABD CEBB1A     353:          LDX     #SDOSSECRETKEY
                354:          ;JSR    SETKEY      TO START DECRYPT CASCADE THAT GENERATES KEY




ASM/6800 1.4A0: BAC0 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 192; Form 10    SDOS BINARY FORMAT LOADER
SDOS6800.ASM
BAC0 BDBC60     355:          JSR     SETKEY
                356:          ;LDX    #DECRYPTBUFFER START CASCADE OF DECRYPTING 05 RECORD
BAC3 CEB05D     357:          LDX     #DECRYPTBUFFER
                358:          ;JSR    DECRYPT     THIS RANDOMIZES AS MUCH AS ENCRYPT
BAC6 BDB0B1     359:          JSR     DECRYPT
                360:          ;JSR    SETKEY      SET KEY TO CONTENTS OF BUFFER
BAC9 BDBC60     361:          JSR     SETKEY
                362:          ;CLR    OKTODECRYPTFLAG FLAG 'NO SERIAL NUMBER MATCHES'
BACC 7FB067     363:          CLR     OKTODECRYPTFLAG
  BACF          364: LOADCASCADELOOP ; PROCESS SERIAL NUMBERS BY CASCADING THEM
                365:          ;LDX    #FILLDECRYPTBUFFER READ IN THE NEXT SERIAL NUMBER
BACF CEB031     366:          LDX     #FILLDECRYPTBUFFER
                367:          ;JSR    SYSCALLENTRY
BAD2 BDB1B2     368:          JSR     SYSCALLENTRY
  0001          369:          IF      M6800!M6801
                370:          ;LDX    #DECRYPTBUFFER = COMPARE "TO" ADDRESS
BAD5 CEB05D     371:          LDX     #DECRYPTBUFFER
BAD8 DF00       372:          STX     TOPOINTER
  0001          373:          ELSE    (M6809)
 *S*            374:          LDY     #DECRYPTBUFFER
                375:          FIN
BADA 8DA7       376:          BSR     GETSERIALNUMBERADDRESS GET POINTER TO SERIAL NUMBER IN ROM
                377:          ; ASSERT: GETSERIALNUMBERADDRESS SETS (D) TO 8
                378:          ;JSR    BLOCKCOMPARE COMPARE DECRYPTBUFFER AGAINST ROM SERIAL NUMBER
BADC BDCA27     379:          JSR     BLOCKCOMPARE
BADF 07         380:          TPA                 HAS 4'S BIT SET IF MATCHED
BAE0 8404       381:          ANDA    #4          = 0 IF NO MATCH, <>0 IF MATCH
                382: *        SET OKTODECRYPTFLAG IF THERE IS A MATCH
                383: *        DON'T USE CONDITIONAL BRANCH AS THEY ARE EASY TO FIND
                384: *
                385:          ;EORA   OKTODECRYPTFLAG NOW SET FLAG IF OK TO DECRYPT
BAE2 B8B067     386:          EORA    OKTODECRYPTFLAG
                387:          ;STA    OKTODECRYPTFLAG
BAE5 B7B067     388:          STAA    OKTODECRYPTFLAG
                389: *** IF DECRYPT KEY WERE FUNCTION OF ROM, THEN WE WOULD NOT HAVE TO CHECK SERIAL
                390: *** NUMBER IN ROM AT ALL; SIMPLY TRY TO LOAD IT. ILLEGAL LOAD RECORD REPORTS AS
                391: *** WRONG SERIAL NUMBER!
                392:          ;LDX    #DECRYPTBUFFER START CASCADE OF DECRYPTING 05 RECORD
BAE8 CEB05D     393:          LDX     #DECRYPTBUFFER
                394:          ;JSR    DECRYPT     THIS RANDOMIZES AS MUCH AS ENCRYPT




ASM/6800 1.4A0: BAEB SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 193; Form 10    SDOS BINARY FORMAT LOADER
SDOS6800.ASM
BAEB BDB0B1     395:          JSR     DECRYPT
                396:          ;JSR    SETKEY      SET KEY TO CONTENTS OF BUFFER
BAEE BDBC60     397:          JSR     SETKEY
                398:          ;DEC    NKEYS       PROCESSED A KEY...
BAF1 7AB065     399:          DEC     NKEYS
BAF4 26D9       400:          BNE     LOADCASCADELOOP B/ MORE KEYS TO PROCESS
BAF6 7DB067     401:          TST     OKTODECRYPTFLAG DID WE FIND A MATCHING SERIAL NUMBER?
                402:          ;LBEQ   ERRSERIALNOWRONG
BAF9 2603       403:          BNE     MACRO:0010
BAFB 7EBA2A     404:          JMP     ERRSERIALNOWRONG
  BAFE          405: MACRO:0010
                406: *
                407: *        AT THIS POINT, THE DECRYPTION KEY FOR THE OBJECT RECORDS IS COMPLETE
                408: *        NOW WE START THE ACTUAL LOADING PROCESS
                409: *        WE STILL CHECK FOR OBJECT FILE FORMAT IN CASE THE DECRYPTION KEY IS BAD




ASM/6800 1.4A0: BAFB SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 194; Form 10    SDOS BINARY FORMAT LOADER
SDOS6800.ASM
                411: *        NOW GENERATE AN ENCRYPTED VERSION OF THE DECRYPTION KEY...
                412: *        SO THAT CHAIN/LOAD CAN COMPARE TO OLD VERSION OF "DECRYPTION" KEY
                413: *
                414:          ;jsr    decrypt     "Encrypt" the key using itself
BAFE BDB0B1     415:          JSR     decrypt
  0001          416:          IF      M6800!M6801
                417:          ;LDX    #NEWKEYENCRYPTED = "TO" ADDRESS
BB01 CEB070     418:          LDX     #NEWKEYENCRYPTED
BB04 DF00       419:          STX     TOPOINTER
  0001          420:          ELSE    (M6809)
 *S*            421:          LDY     #NEWKEYENCRYPTED
                422:          FIN
                423:          ;LDX    #DECRYPTBUFFER = FROM ADDRESS
BB06 CEB05D     424:          LDX     #DECRYPTBUFFER
                425:          ;LDD    #8          = SIZE OF KEY
BB09 C608       426:          LDAB    #(8)&$FF
BB0B 8600       427:          LDAA    #(8)/256
                428:          ;JSR    BLOCKMOVE   SAVE NEWKEY, ENCRYPTED FOR LATER COMPARISION
BB0D BDDBD0     429:          JSR     BLOCKMOVE
                430: *        LDX     #DECRYPTBUFFEREND SET UP TO GET PRESUMED TYPE1 RECORD CODE
BB10 FFB05B     431:          STX     DECRYPTBUFPTR
                432:          ;JSR    GETBYTE GET ME A BYTE
BB13 BDBC2C     433:          JSR     GETBYTE
                434:          ;jmp    loadstart   go process type1 load record
BB16 7EB9FA     435:          JMP     loadstart
                436: 
BB19 CE         437:          FCB     $CE         TO THROW OFF WOULD-BE DISASSEMBLERS
BB1A 4CB0B74E   438: SDOSSECRETKEY FCB $4C,$B0,$B7,$4E,$9B,$65,$72,$C9




ASM/6800 1.4A0: BB1E SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 195; Form 10    SDOS BINARY FORMAT LOADER
SDOS6800.ASM
  BB22          440: LOADSETPOS       ; SYSCALL TO POSITION LOAD FILE PAST SKIP RECORD
BB22 0E         441:          FCB     SYSCALL:CONTROL USED BY LOADER TO EXECUTE "SKIP N BYTES"
BB23 08         442:          FCB     CONTROL:SCLEN+4
BB24 FE         443:          FCB     SYSCHANNEL
BB25 00         444:          FCB     CC:POSITION
BB26 B02D       445:          FDB     LOADFILEPOS POINTER TO POSITION SELECT BUFFER
BB28 0004       446:          FDB     4           SIZE OF POSITION SELECT BUFFER
                447: 
  BB2A          448: LOADTYPE0        ; IGNORE "LOADCOUNT" BYTES (ASSERT: CANNOT OCCUR IN ENCRYPTED FILES!!
                449:          ;JSR    GETWORD
BB2A BDBC58     450:          JSR     GETWORD
  BB2D          451: LOADTYPE0L       ; USE UP BYTES IN DECRYPT BUFFER
                452:          ;STD    LOADCOUNT   SAVE # BYTES TO SKIP
BB2D F7AE4B     453:          STAB    LOADCOUNT+1
BB30 B7AE4A     454:          STAA    LOADCOUNT
                455:          ;LDX    DECRYPTBUFFER USE UP BYTES IN DECRYPTBUFFER, FIRST
BB33 FEB05D     456:          LDX     DECRYPTBUFFER
BB36 8CB065     457:          CPX     #DECRYPTBUFFEREND DECRYPT BUFFER EXHAUSTED?
BB39 2714       458:          BEQ     LOADTYPE0.2 B/ YES
                459:          ;JSR    GETBYTE     NO, USE UP A BYTE
BB3B BDBC2C     460:          JSR     GETBYTE
                461:          ;LDD    LOADCOUNT   DECREMENT SKIP LOADCOUNT
BB3E F6AE4B     462:          LDAB    LOADCOUNT+1
BB41 B6AE4A     463:          LDAA    LOADCOUNT
                464:          ;SUBD   #1
BB44 C001       465:          SUBB    #(1)&$FF
BB46 8200       466:          SBCA    #(1)/256
                467:          ;BNED   LOADTYPE0L  B/ MORE BYTES TO SKIP
BB48 26E3       468:          BNE     LOADTYPE0L
BB4A 5D         469:          TSTB
BB4B 26E0       470:          BNE     LOADTYPE0L
BB4D 202B       471:          BRA     LOADNEXT    EXHAUSTED SKIP LOADCOUNT!
                472: 
  BB4F          473: LOADTYPE0.2 ; SKIP OVER BIG CHUNK OF BYTES IN FILE
                474:          ;LDX    #LOADGETPOS GET FILE POSITION
BB4F CEB01F     475:          LDX     #LOADGETPOS
                476:          ;JSR    SYSCALLENTRY
BB52 BDB1B2     477:          JSR     SYSCALLENTRY
                478:          ;LDD    BUFFER      ADD LOADCOUNT BYTES TO CURRENT POSITION
BB55 F6AFE9     479:          LDAB    BUFFER+1




ASM/6800 1.4A0: BB58 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 196; Form 10    SDOS BINARY FORMAT LOADER
SDOS6800.ASM
BB58 B6AFE8     480:          LDAA    BUFFER
                481:          ;ADDD   LOADFILEPOS+2
BB5B FBB030     482:          ADDB    LOADFILEPOS+2+1
BB5E B9B02F     483:          ADCA    LOADFILEPOS+2
                484:          ;STD    LOADFILEPOS+2
BB61 F7B030     485:          STAB    LOADFILEPOS+2+1
BB64 B7B02F     486:          STAA    LOADFILEPOS+2
BB67 2407       487:          BCC     LOADTYPE0.1
                488:          ;LDX    LOADFILEPOS PROPOGATE CARRY TO UPPER 16 BITS
BB69 FEB02D     489:          LDX     LOADFILEPOS
BB6C 08         490:          INX
BB6D FFB02D     491:          STX     LOADFILEPOS
  BB70          492: LOADTYPE0.1      EQU         *
                493:          ;LDX    #LOADSETPOS AND POSITION THERE
BB70 CEBB22     494:          LDX     #LOADSETPOS
                495:          ;JSR    SYSCALLENTRY
BB73 BDB1B2     496:          JSR     SYSCALLENTRY
BB76 2002       497:          BRA     LOADNEXT




ASM/6800 1.4A0: BB76 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 197; Form 10    SDOS BINARY FORMAT LOADER
SDOS6800.ASM
                499: *        LOAD BYTES AND THEN LOOK FOR NEXT RECORD
                500: *
  BB78          501: LOADTYPE2
BB78 8D19       502:          BSR     LOAD2AND3
                503: *
                504: *        GET NEXT RECORD, TYPE 0, 2, & 3 ALLOWED HERE
                505: *
  BB7A          506: LOADCONTENTS     ; LOAD CONTENTS OF OBJECT FILE
  BB7A          507: LOADNEXT ;JSR    GETBYTE
BB7A BDBC2C     508:          JSR     GETBYTE
                509:          ;CMPA   #LOAD:TYPE2 DATA RECORD ?
BB7D 8102       510:          CMPA    #LOAD:TYPE2
BB7F 27F7       511:          BEQ     LOADTYPE2   B/ YES
                512:          ;CMPA   #LOAD:TYPE3 LAST DATA RECORD ?
BB81 8103       513:          CMPA    #LOAD:TYPE3
BB83 270E       514:          BEQ     LOADTYPE3   B/ YES
                515:          ;CMPA   #LOAD:TYPE0 SKIP RECORD ?
BB85 8100       516:          CMPA    #LOAD:TYPE0
BB87 27A1       517:          BEQ     LOADTYPE0   B/ YES
  BB89          518: ERRBADLOADRECORD EQU         *
                519:          ;JSR    ERRET
BB89 BDB1F6     520:          JSR     ERRET
BB8C 040C       521:          FDB     ERR:BADLOADRECORD
                522: 
  BB8E          523: ERRNOTENOUGHROOM EQU         *
                524:          ;JSR    ERRET
BB8E BDB1F6     525:          JSR     ERRET
BB91 040D       526:          FDB     ERR:NOTENOUGHROOM




ASM/6800 1.4A0: BB91 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 198; Form 10    SDOS BINARY FORMAT LOADER
SDOS6800.ASM
                528: *        LOAD BYTES AND THEN QUIT
                529: *
  BB93          530: LOADTYPE3 ; LAST LOAD RECORD, LOAD THE BYTES AND QUIT
                531: *
                532: *
                533: *        LOAD BYTES FROM DISK FILE INTO USER SPACE
                534: *
  BB93          535: LOAD2AND3 ; LOAD CONTENTS OF TYPE 2 OR TYPE 3 RECORD
                536:          ;JSR    GETWORD GO GET THE LOAD ADDRESS
BB93 BDBC58     537:          JSR     GETWORD
                538:          ;STD    LOADADDRESS
BB96 F7B04A     539:          STAB    LOADADDRESS+1
BB99 B7B049     540:          STAA    LOADADDRESS
                541:          ;JSR    GETWORD
BB9C BDBC58     542:          JSR     GETWORD
                543:          ;STD    LOADCOUNT
BB9F F7AE4B     544:          STAB    LOADCOUNT+1
BBA2 B7AE4A     545:          STAA    LOADCOUNT
                546:          ;ADDD   LOADADDRESS = ADDRESS OF LAST BYTE LOADED, +1
BBA5 FBB04A     547:          ADDB    LOADADDRESS+1
BBA8 B9B049     548:          ADCA    LOADADDRESS
                549: *
                550: *        LOADBOUNDSCHECK -- MAKE SURE (A,B) <= DRIVER BASE
                551: *        WE SHOULD ALSO CHECK TO MAKE SURE WE ARE LOADING ON TOP OF THE STACK, TOO!
                552: *
                553:          ;LDX    CODE+SDOS:CONFIGURATION
BBAB FEAE03     554:          LDX     CODE+SDOS:CONFIGURATION
BBAE 0D         555:          SEC                 ACTUALLY TEST FOR (A,B)-1 < DRIVERBASE
BBAF E210       556:          SBCB    CNFG:DRIVERBASE+1,X ...?
BBB1 A20F       557:          SBCA    CNFG:DRIVERBASE,X ...?
BBB3 24D9       558:          BCC     ERRNOTENOUGHROOM B/ HE'S DEAD!
  BBB5          559: LOAD2AND3.1 ; CHECK FOR DONE LOADING BYTES FROM THIS RECORD
                560:          ;LDX    LOADCOUNT   ARE WE DONE?
BBB5 FEAE4A     561:          LDX     LOADCOUNT
BBB8 2770       562:          BEQ     LOAD2AND3RTS B/ YES
  BBBA          563: LOAD2AND3LOOP ; LOAD SOME BYTES FROM THIS RECORD
                564:          ;LDX    DECRYPTBUFPTR TRY TO OPTIMIZE THE LOAD PROCESS
BBBA FEB05B     565:          LDX     DECRYPTBUFPTR
BBBD 8CB065     566:          CPX     #DECRYPTBUFFEREND IS THERE STILL STUFF IN THE DECRYPT BUFFER?
BBC0 2654       567:          BNE     LOAD2AND3BYTE B/ STUFF STILL IN THE BUFFER




ASM/6800 1.4A0: BBC0 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 199; Form 10    SDOS BINARY FORMAT LOADER
SDOS6800.ASM
                568:          ;LDD    LOADCOUNT   AT LEAST 8 BYTES TO LOAD?
BBC2 F6AE4B     569:          LDAB    LOADCOUNT+1
BBC5 B6AE4A     570:          LDAA    LOADCOUNT
BBC8 C4F8       571:          ANDB    #(\7)&$FF   (D) = MULTIPLE OF 8 BYTES TO LOAD
                572:          ;STD    OPTIMIZEDLOADCOUNT
BBCA F7B04C     573:          STAB    OPTIMIZEDLOADCOUNT+1
BBCD B7B04B     574:          STAA    OPTIMIZEDLOADCOUNT
                575:          ;BEQD   LOAD2AND3BYTE B/ NOT ENOUGH BYTES TO LOAD
BBD0 2603       576:          BNE     MACRO:0011
BBD2 5D         577:          TSTB
BBD3 2741       578:          BEQ     LOAD2AND3BYTE
  BBD5          579: MACRO:0011
                580: *
                581: *        LOAD A MULTIPLE OF 8 BYTES INTO MEMORY QUICKLY
                582: *
                583:          ;LDD    LOADCOUNT   COMPUTE REMAINING LOADCOUNT AFTER OPTIMIZED LOAD
BBD5 F6AE4B     584:          LDAB    LOADCOUNT+1
BBD8 B6AE4A     585:          LDAA    LOADCOUNT
BBDB 4F         586:          CLRA
BBDC C407       587:          ANDB    #7          = REMAINING LOADCOUNT AFTER MULTIPLE OF 8 LOADED
                588:          ;STD    LOADCOUNT
BBDE F7AE4B     589:          STAB    LOADCOUNT+1
BBE1 B7AE4A     590:          STAA    LOADCOUNT
                591:          ;LDX    #LOADMULTIPLEOF8
BBE4 CEB03F     592:          LDX     #LOADMULTIPLEOF8
                593:          ;JSR    SYSCALLENTRY EOF WILL OCCUR IF LOAD FILE IS NOT MULTIPLE OF 8 BYTES I
BBE7 BDB1B2     594:          JSR     SYSCALLENTRY
                595:          ;LDX    LOADADDRESS WHERE TO START DECRYPTING
BBEA FEB049     596:          LDX     LOADADDRESS
                597:          ;LDD    LOADADDRESS COMPUTE WHERE TO END DECRYPTING
BBED F6B04A     598:          LDAB    LOADADDRESS+1
BBF0 B6B049     599:          LDAA    LOADADDRESS
                600:          ;ADDD   OPTIMIZEDLOADCOUNT
BBF3 FBB04C     601:          ADDB    OPTIMIZEDLOADCOUNT+1
BBF6 B9B04B     602:          ADCA    OPTIMIZEDLOADCOUNT
                603:          ;STD    LOADADDRESS = 1ST PLACE NOT YET LOADED
BBF9 F7B04A     604:          STAB    LOADADDRESS+1
BBFC B7B049     605:          STAA    LOADADDRESS
BBFF 7DB067     606:          TST     OKTODECRYPTFLAG ARE WE DECRYPTING?
BC02 27B1       607:          BEQ     LOAD2AND3.1 B/ NO, GO LOAD MORE BYTES




ASM/6800 1.4A0: BC02 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 200; Form 10    SDOS BINARY FORMAT LOADER
SDOS6800.ASM
  BC04          608: LOAD2AND3MASSDECRYPT ; DECRYPT JUST LOADED BLOCK OF BYTES
                609:          ;JSR    DECRYPT     GO DECRYPT A BLOCK OF 8 BYTES
BC04 BDB0B1     610:          JSR     DECRYPT
                611:          ;LEAX   8,X         FIND NEXT BLOCK OF 8 BYTES
  0000          612:          IF      8<0
 *S*            613:          RPT     -8
 *S*            614:          DEX
                615:          ELSE
  0008          616:          RPT     8
BC07 08         617:          INX
                618:          FIN
BC0F BCB049     619:          CPX     LOADADDRESS ALL LOADED BYTES DECRYPTED YET?
BC12 26F0       620:          BNE     LOAD2AND3MASSDECRYPT B/ NO, GO DECRYPT SOME MORE
BC14 209F       621:          BRA     LOAD2AND3.1 YES, GO SEE IF MORE BYTES TO LOAD
                622: *
                623: *        LOAD A BYTE THE HARD WAY
                624: *
  BC16          625: LOAD2AND3BYTE ; LOAD ONE BYTE THE UNOPTIMIZED WAY
BC16 8D14       626:          BSR     GETBYTE
                627:          ;LDX    LOADADDRESS
BC18 FEB049     628:          LDX     LOADADDRESS
                629:          ;STA    ,X+
BC1B A700       630:          STAA    0,X
BC1D 08         631:          INX
BC1E FFB049     632:          STX     LOADADDRESS
                633:          ;LDX    LOADCOUNT
BC21 FEAE4A     634:          LDX     LOADCOUNT
BC24 09         635:          DEX
BC25 FFAE4A     636:          STX     LOADCOUNT
BC28 2690       637:          BNE     LOAD2AND3LOOP
BC2A 0C39       638: LOAD2AND3RTS     OKRTS       YOU GUESS...




ASM/6800 1.4A0: BC2A SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 201; Form 10    SDOS BINARY FORMAT LOADER
SDOS6800.ASM
                640: *
                641: *
  BC2C          642: GETBYTE ; GET NEXT DECRYPTED BYTE FROM THE FILE INTO (A)
                643:          ;LDX    DECRYPTBUFPTR IS THE BUFFER EMPTY?
BC2C FEB05B     644:          LDX     DECRYPTBUFPTR
BC2F 8CB065     645:          CPX     #DECRYPTBUFFEREND
BC32 261C       646:          BNE     GETBYTE1    B/ NOPE
BC34 7DB067     647:          TST     OKTODECRYPTFLAG BUFFER IS EMPTY, ARE WE DECRYPTING?
BC37 260B       648:          BNE     GETBYTED    B/ YES, GO FETCH ANOTHER BUFFERFUL TO DECRYPT
                649:          ;LDX    #GET1BYTE   NO, FETCH NEXT LOAD RECORD HEADER BYTE
BC39 CEB04D     650:          LDX     #GET1BYTE
                651:          ;JSR    SYSCALLENTRY
BC3C BDB1B2     652:          JSR     SYSCALLENTRY
                653:          ;LDA    BUFFER      GET THE BYTE
BC3F B6AFE8     654:          LDAA    BUFFER
BC42 0C39       655:          OKRTS
                656: 
  BC44          657: GETBYTED ; GET NEXT 8 BYTES FROM FILE AND DECRYPT
                658:          ;LDX    #FILLDECRYPTBUFFER
BC44 CEB031     659:          LDX     #FILLDECRYPTBUFFER
                660:          ;JSR    SYSCALLENTRY
BC47 BDB1B2     661:          JSR     SYSCALLENTRY
                662:          ;LDX    #DECRYPTBUFFER START BUFFER POINTER AT BEGIN BUFFER
BC4A CEB05D     663:          LDX     #DECRYPTBUFFER
                664:          ;JSR    DECRYPT     DECRYPT THE 8 BYTES JUST READ
BC4D BDB0B1     665:          JSR     DECRYPT
  BC50          666: GETBYTE1 ; FETCH DECRYPTED BYTE FROM BUFFER
                667:          ;LDA    ,X+         GET THE CHAR
BC50 A600       668:          LDAA    0,X
BC52 08         669:          INX
BC53 FFB05B     670:          STX     DECRYPTBUFPTR
BC56 0C39       671:          OKRTS               I'M DONE
                672: *
  BC58          673: GETWORD ; GET 2 BYTES FROM THE DISK BUFFER INTO (D)
BC58 8DD2       674:          BSR     GETBYTE
BC5A 36         675:          PSHA
BC5B 8DCF       676:          BSR     GETBYTE
BC5D 16         677:          TAB
BC5E 32         678:          PULA
BC5F 39         679:          RTS




ASM/6800 1.4A0: BC5F SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 202; Form 10    SDOS BINARY FORMAT LOADER
SDOS6800.ASM
  BC60          681: SETKEY ; SET "KEY" TO 8 BYTES POINTED TO BY (X)
                682:          ;LDD    4,X         COPY KEY BYTES TO INLINE CODE
BC60 E605       683:          LDAB    (4)+1,X
BC62 A604       684:          LDAA    4,X
                685:          ;STB    KEY5        DO SO IN AS APPARENTLY DISORGANIZED WAY AS POSSIBLE
BC64 F7B09A     686:          STAB    KEY5
                687:          ;STA    KEY4
BC67 B7B093     688:          STAA    KEY4
                689:          ;LDD    0,X
BC6A E601       690:          LDAB    (0)+1,X
BC6C A600       691:          LDAA    0,X
                692:          ;STA    KEY0
BC6E B7B0C2     693:          STAA    KEY0
                694:          ;STB    KEY1
BC71 F7B07E     695:          STAB    KEY1
                696:          ;LDD    6,X
BC74 E607       697:          LDAB    (6)+1,X
BC76 A606       698:          LDAA    6,X
                699:          ;STB    KEY7
BC78 F7B0A8     700:          STAB    KEY7
                701:          ;STA    KEY6
BC7B B7B0A1     702:          STAA    KEY6
                703:          ;LDD    2,X
BC7E E603       704:          LDAB    (2)+1,X
BC80 A602       705:          LDAA    2,X
                706:          ;STA    KEY2
BC82 B7B085     707:          STAA    KEY2
                708:          ;STB    KEY3
BC85 F7B08C     709:          STAB    KEY3
BC88 39         710:          RTS
                711: 
  BC89          712: ZAPUSERSPACE     ; OLD DECRYPTION KEY <> NEW, ERASE USER SPACE!
                713: ;        Note: If this Trashed the user space, it would be much harder to
                714: ;        determine program bounds of decrypted program
  0001          715:          IF      M6800!M6801
BC89 30         716:          TSX
  BC8A          717: ZAPUSERSPACEL ; ZAP ANOTHER USER SPACE BYTE
                718:          ;CLR    ,-X
BC8A 09         719:          DEX
BC8B 6F00       720:          CLR     0,X




ASM/6800 1.4A0: BC8D SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 203; Form 10    SDOS BINARY FORMAT LOADER
SDOS6800.ASM
BC8D 8C0100     721:          CPX     #$100       STOP ZEROING AT $100
BC90 26F8       722:          BNE     ZAPUSERSPACEL
BC92 39         723:          RTS
  0001          724:          ELSE    (M6809)
 *S*            725:          ;LDX    #$100       USE BLOCKMOVE LIKE 360 MVC INSTRUCTION TO ZERO MEMORY
 *S*            726:          LDX     #$100
 *S*            727:          STX     ,X          ZERO $100 THRU 101, FIRST
 *S*            728:          ;DEC    ,X          DON'T YOU LOVE OBSCURE CODE?
 *S*            729:          DEC     0,X
 *S*            730:          ;LDD    SDOSSTACK   = TOP OF SPACE TO ZERO
 *S*            731:          LDAB    SDOSSTACK+1
 *S*            732:          LDAA    SDOSSTACK
 *S*            733:          SUBA    #2          (D) = # BYTES TO CLEAR, NOT COUNT PZ AND 256 BYTES OF STA
 *S*            734:          LEAY    2,X         WHERE TO MOVE STUFF TO...
 *S*            735:          ;JMP    BLOCKMOVE   NOT SECURE TO CALL CODE+SDOS:BLOCKMOVE
 *S*            736:          JMP     BLOCKMOVE
                737:          FIN




ASM/6800 1.4A0: BC92 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 204; Form 11    DISK FILE/DEVICE DRIVER
SDOS6800.ASM
                  2: *        DISK DEVICE DRIVER ENTRY VECTOR
                  3: *
  BC93            4: DISKDEVICEDRIVER EQU         *
BC93 C4CD         5:          FDB     DSKDOPEN    OPEN
BC95 C587         6:          FDB     DSKDCLOSE   CLOSE
BC97 C008         7:          FDB     DSKDREADA   READA
BC99 C1F4         8:          FDB     DSKDWRITEA  WRITEA
BC9B BF9F         9:          FDB     DSKDREADB   READB
BC9D C16A        10:          FDB     DSKDWRITEB  WRITEB
BC9F C4CD        11:          FDB     DSKDOPEN    CREATE
BCA1 BCAD        12:          FDB     ILLDEVICEOP RENAME
BCA3 BCAD        13:          FDB     ILLDEVICEOP DELETE
BCA5 C4F1        14:          FDB     DSKDCONTROL CONTROL
BCA7 C3CA        15:          FDB     DSKDSTATUS  STATUS
BCA9 BCB2        16:          FDB     DISKRTS     RESET
BCAB BCAD        17:          FDB     ILLDEVICEOP PFRESTART
                 18: 
  BCAD           19: ILLDEVICEOP      ; ILLEGAL DEVICE OPERATION ATTEMPTED
                 20:          ;JSR    ERRET
BCAD BDB1F6      21:          JSR     ERRET
BCB0 040A        22:          FDB     ERR:ILLDEVICEOP
                 23: *
BCB2 0C39        24: DISKRTS  OKRTS




ASM/6800 1.4A0: BCB2 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 205; Form 11    DISK FILE/DEVICE DRIVER
SDOS6800.ASM
                 26: *
                 27: *        DISK FILE DRIVER ENTRY VECTOR
                 28: *
  BCB4           29: DISKFILEDRIVER   EQU         *
BCB4 BDA3        30:          FDB     DSKFOPEN
BCB6 BE6E        31:          FDB     DSKFCLOSE
BCB8 BFE0        32:          FDB     DSKFREADA
BCBA C199        33:          FDB     DSKFWRITEA
BCBC BF84        34:          FDB     DSKFREADB
BCBE C14C        35:          FDB     DSKFWRITEB
BCC0 BCD3        36:          FDB     DSKFCREATE
BCC2 BEE9        37:          FDB     DSKFRENAME
BCC4 BE0F        38:          FDB     DSKFDELETE
BCC6 C25B        39:          FDB     DSKFCONTROL
BCC8 C3A4        40:          FDB     DSKFSTATUS
BCCA 2454        41:          FDB     DSKFRESET
BCCC BCCE        42:          FDB     DSKFPFRESTART
                 43: *
                 44: *        DSKFPFRESTART -- DISK FILE DRIVER POWER FAIL RESET
                 45: *
  BCCE           46: DSKFPFRESTART    EQU         *
                 47:          ;JSR    ERRET
BCCE BDB1F6      48:          JSR     ERRET
BCD1 0403        49:          FDB     ERR:PWRFAILDISKF




ASM/6800 1.4A0: BCD1 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 206; Form 11    DISK FILE/DEVICE DRIVER
SDOS6800.ASM
                 51: *
                 52: *        DSKFCREATE -- CREATE A NEW DISK FILE
                 53: *
  BCD3           54: DSKFCREATE       EQU         *
                 55:          ;JSR    PLANTDCBINIOCB SO DISK I/O ROUTINES CAN FIND DRIVERS
BCD3 BDB43E      56:          JSR     PLANTDCBINIOCB
                 57:          ;JSR    PARSEFILENAME GO PROCESS THE DISK FILE NAME
BCD6 BDCBB9      58:          JSR     PARSEFILENAME
                 59:          ;JSR    SEARCHDIRCREATE GO FIND OUT IF FILE ALREADY EXISTS
BCD9 BDC935      60:          JSR     SEARCHDIRCREATE
                 61:          ;JSR    SEARCHFCBINIT SET UP TO SEARCH FCBS
BCDC BDCB4E      62:          JSR     SEARCHFCBINIT
                 63:          ;JSR    SEARCHFCBS  IS FILE OPEN ALREADY?
BCDF BDCB5E      64:          JSR     SEARCHFCBS
BCE2 2516        65:          BCS     DSKFCREATE1 B/ FILE IS NOT OPEN ANYWHERE
BCE4 A60A        66:          LDAA    FCB:FLAGS,X FILE BY THAT NAME IS ALREADY OPEN
BCE6 8580        67:          BITA    #FCBFLG::NEWFILE A NEW FILE ?
BCE8 260B        68:          BNE     ERRFILEINCREATE B/ FILE ALREADY BEING CREATED
                 69: *        LDAA    FILEREPLACEMENTFLAG IS "!" PRESENT TO ALLOW FILE OVERWRITE?
                 70: *        BNE     ERROLDFILEEXISTS B/ NO, CAN'T OVERWRITE OLD FILE!
BCEA A615        71:          LDAA    FCB:PROT,X  IS OLD FILE WRITE PROTECTED ?
BCEC 8540        72:          BITA    #PROT::WRITE IS FILE WRITE PROTECTED ?
BCEE 2617        73:          BNE     ERRFILEWRTPROT B/ YES, CAN'T CREATE A NEW ONE
                 74:          ;JSR    SEARCHFCBS  OLD FILE IS OPEN ALREADY
BCF0 BDCB5E      75:          JSR     SEARCHFCBS
BCF3 2545        76:          BCS     DSKFCREATEF B/ NO REPLACEMENT EXISTS FOR OLD FILE
  BCF5           77: ERRFILEINCREATE  ; FILE BY THAT NAME IS BEING CREATED
                 78:          ;JSR    ERRET
BCF5 BDB1F6      79:          JSR     ERRET
BCF8 03FB        80:          FDB     ERR:FILEINCREATE




ASM/6800 1.4A0: BCF8 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 207; Form 11    DISK FILE/DEVICE DRIVER
SDOS6800.ASM
  BCFA           82: DSKFCREATE1      ; OLD VERSION OF FILE IS NOT OPEN
                 83:          ;LDX    DIRENTRY    IS DIRECTORY ENTRY A FREE ENTRY?
BCFA FEAEA8      84:          LDX     DIRENTRY
BCFD A612        85:          LDAA    DIR:HCSIC,X
BCFF 2736        86:          BEQ     DSKFCREATEC B/ YES, GO COPY NAME TO DIRECTORY
                 87: *        LDAA    FILEREPLACEMENTFLAG IS "!" PRESENT TO ALLOW FILE OVERWRITE?
                 88: *        BNE     ERROLDFILEEXISTS B/ NO, CAN'T OVERWRITE OLD FILE!
BD01 A619        89:          LDAA    DIR:PROTECTION,X NO, IS OLD FILE DELETE PROTECTED ?
BD03 8540        90:          BITA    #PROT::WRITE IS FILE WRITE PROTECTED ?
BD05 2733        91:          BEQ     DSKFCREATEF B/ NO, WE CAN DO THE CREATE
  BD07           92: ERRFILEWRTPROT   EQU         *
                 93:          ;JSR    ERRET
BD07 BDB1F6      94:          JSR     ERRET
BD0A 03F2        95:          FDB     ERR:FILEWRTPROT
                 96: 
                 97: *        UPDATEFILEDATE -- SET CREATION DATE OF FILE TO CURRENT DATE
                 98: *        THIS ROUTINE IS CALLED WHENEVER A FILE IS MODIFIED
                 99: *        FCBPOINTER SPECIFIES WHICH FILE
                100: *
  BD0C          101: UPDATEFILEDATE
                102:          ;LDX    FCBPOINTER  GET POINTER TO DESIRED FILE
BD0C FEAEA6     103:          LDX     FCBPOINTER
                104:          ;LDA    FCB:PROT,X  IS FILE WRITE PROTECTED?
BD0F A615       105:          LDAA    FCB:PROT,X
BD11 8540       106:          BITA    #PROT::WRITE ...?
BD13 26F2       107:          BNE     ERRFILEWRTPROT B/ YES, DON'T ALLOW UPDATE!
                108:          ;LDB    CODE+SDOS:DAY STAMP THE FCB WITH THE CREATION DATE
BD15 F6AE0E     109:          LDAB    CODE+SDOS:DAY
BD18 2718       110:          BEQ     ERRTIMENOTSET B/ TIME NOT SET, CANNOT MODIFY FILE!
BD1A 84FE       111:          ANDA    #(\PROT::BACKUP)&$FF TURN OFF "FILE IS BACKED UP" FLAG
                112:          ;STA    FCB:PROT,X
BD1C A715       113:          STAA    FCB:PROT,X
                114:          ;STB    FCB:DAY,X   TIME STAMP FILE WITH DATE OF CHANGE
BD1E E716       115:          STAB    FCB:DAY,X
                116:          ;LDD    CODE+SDOS:MONTH
BD20 F6AE10     117:          LDAB    CODE+SDOS:MONTH+1
BD23 B6AE0F     118:          LDAA    CODE+SDOS:MONTH
                119:          ;STD    FCB:MONTH,X
BD26 E718       120:          STAB    (FCB:MONTH)+1,X
BD28 A717       121:          STAA    FCB:MONTH,X




ASM/6800 1.4A0: BD28 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 208; Form 11    DISK FILE/DEVICE DRIVER
SDOS6800.ASM
                122:          ;LDA    FCB:FLAGS,X UPDATE FILE FLAGS...
BD2A A60A       123:          LDAA    FCB:FLAGS,X
BD2C 8A50       124:          ORAA    #FCBFLG::UPDATEDIR!FCBFLG::MODIFIED REMEMBER THAT THIS DATA MUST GO T
BD2E A70A       125:          STAA    FCB:FLAGS,X
BD30 0C39       126:          OKRTS
                127: 
  BD32          128: ERRTIMENOTSET ; CLOCK DATE IS ZEROED, CAN'T CREATE A FILE!
                129:          ;JSR    ERRET
BD32 BDB1F6     130:          JSR     ERRET
BD35 0425       131:          FDB     ERR:TIMENOTSET




ASM/6800 1.4A0: BD35 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 209; Form 11    DISK FILE/DEVICE DRIVER
SDOS6800.ASM
  BD37          133: DSKFCREATEC      EQU         *
                134:          ;JSR    COPYNAMETODIR COPY FILE NAME TO DIRENTRY
BD37 BDBF6D     135:          JSR     COPYNAMETODIR
  BD3A          136: DSKFCREATEF      ; NOW CREATE A NEW FILE IN AN FCB
                137: ***      JSR     DRIVER:WRTPROTCHECK VERIFY THAT DISK DRIVE IS NOT WRITE PROTECTED
                138:          ;JSR    FINDFREEFCB GO FIND AN FCB TO USE
BD3A BDCAC8     139:          JSR     FINDFREEFCB
                140:          ;CLR    FCB:HCSIC,X INITIALIZE FCB FOR NEW FILE
BD3D 6F0E       141:          CLR     FCB:HCSIC,X
                142:          ;CLR    FCB:FILESIZE,X RESET FILE SIZE TO ZIP
BD3F 6F11       143:          CLR     FCB:FILESIZE,X
                144:          ;CLR    FCB:FILESIZE+1,X
BD41 6F12       145:          CLR     FCB:FILESIZE+1,X
                146:          ;CLR    FCB:FILESIZE+2,X
BD43 6F13       147:          CLR     FCB:FILESIZE+2,X
                148:          ;CLR    FCB:FILESIZE+3,X
BD45 6F14       149:          CLR     FCB:FILESIZE+3,X
BD47 8680       150:          LDAA    #FCBFLG::NEWFILE MARK FCB AS "NEW FILE"
BD49 A70A       151:          STAA    FCB:FLAGS,X
                152:          ;CLR    FCB:PROT,X  RESET THE PROTECTION BITS
BD4B 6F15       153:          CLR     FCB:PROT,X
BD4D 8DBD       154:          BSR     UPDATEFILEDATE UPDATE FILE DATE
BD4F 254A       155:          BCS     DSKFCREATEOOPS B/ TIME NOT SET, CAN'T CREATE FILE!
                156:          ;JSR    DSKFOPEN1   GO SET UP IOCB TO REMEMBER FCB
BD51 BDBDC5     157:          JSR     DSKFOPEN1
                158:          ;CLR    IOCB:RDCN,X TELL ALLOCATOR TO START ...
BD54 6F1B       159:          CLR     IOCB:RDCN,X
BD56 8601       160:          LDAA    #1          WITH RDCN 1 (= 1ST DATA CLUSTER)
BD58 A71C       161:          STAA    IOCB:RDCN+1,X
                162:          ;LDX    FILESIZERQSTD DID USER SPECIFY INITIAL FILESIZE ?
BD5A FEAECD     163:          LDX     FILESIZERQSTD
BD5D 2605       164:          BNE     DSKFCREATE3 B/ YES, USE SPECIFIED FILE SIZE
                165:          ;LDX    FILESIZERQSTD+2
BD5F FEAECF     166:          LDX     FILESIZERQSTD+2
BD62 271E       167:          BEQ     DSKFCREATEMIN B/ NO, USE MINIMUM ALLOCATION
  BD64          168: DSKFCREATE3      EQU         *
                169:          ;LDX    IOCBPOINTER COPY FILESIZE DESIRED...
BD64 FEAE09     170:          LDX     IOCBPOINTER
                171:          ;LDD    FILESIZERQSTD TO IOCB:CURBYTE SO WE CAN USE COMPUTERDCN...
BD67 F6AECE     172:          LDAB    FILESIZERQSTD+1




ASM/6800 1.4A0: BD6A SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 210; Form 11    DISK FILE/DEVICE DRIVER
SDOS6800.ASM
BD6A B6AECD     173:          LDAA    FILESIZERQSTD
                174:          ;STD    IOCB:CURBYTE,X TO DETERMINE HOW MANY CLUSTERS TO ALLOCATE
BD6D E70E       175:          STAB    (IOCB:CURBYTE)+1,X
BD6F A70D       176:          STAA    IOCB:CURBYTE,X
                177: *** NOTE: THIS CAN ACTUALLY ALLOCATE 1 CLUSTER TOO MANY, SINCE...
                178: *        COMPUTERDCN COMPUTES CLUSTER # THAT CONTAINS THE SPECIFIED BYTE!
                179: *        TO BE EXACT, NEED TO SUBTRACT 1 FROM "CURBYTE"
                180: *        BUT THATS OK, SINCE CLOSE WILL FREE THE EXTRA CLUSTER
                181:          ;LDD    FILESIZERQSTD+2
BD71 F6AED0     182:          LDAB    FILESIZERQSTD+2+1
BD74 B6AECF     183:          LDAA    FILESIZERQSTD+2
                184:          ;STD    IOCB:CURBYTE+2,X
BD77 E710       185:          STAB    (IOCB:CURBYTE+2)+1,X
BD79 A70F       186:          STAA    IOCB:CURBYTE+2,X
                187:          ;JSR    COMPUTERDCN COMPUTE # DATA CLUSTERS NEEDED
BD7B BDD704     188:          JSR     COMPUTERDCN
BD7E 251B       189:          BCS     DSKFCREATEOOPS B/ SOME ERROR OCCURRED!
BD80 2006       190:          BRA     DSKFCREATEALLOC GO ALLOCATE THE DISK SPACE




ASM/6800 1.4A0: BD80 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 211; Form 11    DISK FILE/DEVICE DRIVER
SDOS6800.ASM
  BD82          192: DSKFCREATEMIN    ; USE MINIMUM ALLOCATION
                193:          ;LDX    DCBPOINTER  WE NEED THIS, SO WE CAN...
BD82 DE06       194:          LDX     DCBPOINTER
                195:          ;LDD    DSKINFO:MINALLOC,X USE MIN ALLOCATION FOR FILE CREATES
BD84 E613       196:          LDAB    (DSKINFO:MINALLOC)+1,X
BD86 A612       197:          LDAA    DSKINFO:MINALLOC,X
  BD88          198: DSKFCREATEALLOC  ; ALLOCATE SPACE TO A NEW FILE
                199:          ;JSR    ALLOCATECLUSTERS GO INVENT NEW FILE HEADER CLUSTER
BD88 BDCD19     200:          JSR     ALLOCATECLUSTERS
BD8B 2502       201:          BCS     DSKFCREATEE B/ RAN OUT OF DISK SPACE
  BD8D          202: DSKFCREATE2      EQU         *
BD8D 2036       203:          BRA     DSKFOPEN1   RESET THE IOCB TO MAKE SURE RDCN=DUMMY
                204: 
  BD8F          205: DSKFCREATEE      ; RAN OUT OF DISK SPACE WHILE ALLOCATING FILE
BD8F 8C03F7     206:          CPX     #ERR:NODISKSPACE DOUBLE-CHECK, MIGHT BE SOMETHING ELSE
BD92 2607       207:          BNE     DSKFCREATEOOPS IT WAS SOMETHING ELSE, CLOSE UP SHOP!
                208:          ;LDX    FCBPOINTER  RAN OUT OF SPACE ALRIGHT!
BD94 FEAEA6     209:          LDX     FCBPOINTER
                210:          ;LDX    FCB:NCLUSTERS,X WAS HEADER CLUSTER ALLOCATED?
BD97 EE0F       211:          LDX     FCB:NCLUSTERS,X
BD99 26F2       212:          BNE     DSKFCREATE2 B/ YES, TREAT LIKE NORMAL FILE CREATE
  BD9B          213: DSKFCREATEOOPS   ; DIDN'T CREATE FILE, OR SOME OTHER PROBLEM
                214:          ;LDX    FCBPOINTER  FREE THE FCB, ITS NOT VALID ANYWAY
BD9B FEAEA6     215:          LDX     FCBPOINTER
                216:          ;CLR    FCB:REFCOUNT,X
BD9E 6F0B       217:          CLR     FCB:REFCOUNT,X
                218:          ;JMP    ERRORED     AND TRAP UPWARDS
BDA0 7EB209     219:          JMP     ERRORED




ASM/6800 1.4A0: BDA0 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 212; Form 11    DISK FILE/DEVICE DRIVER
SDOS6800.ASM
                221: *
                222: *        DSKFOPEN -- OPEN A DISK FILE
                223: *        ON ENTRY DCBPOINTER HAS BEEN SET UP
                224: *
  BDA3          225: DSKFOPEN EQU     *
                226:          ;JSR    PLANTDCBINIOCB SO DISK I/O ROUTINES CAN FIND DRIVERS
BDA3 BDB43E     227:          JSR     PLANTDCBINIOCB
                228:          ;JSR    PARSEFILENAME GO PROCESS THE DISK FILE NAME
BDA6 BDCBB9     229:          JSR     PARSEFILENAME
                230:          ;JSR    SEARCHDIR   GO LOOK IT UP IN DIRECTORY
BDA9 BDC67D     231:          JSR     SEARCHDIR
BDAC A612       232:          LDAA    DIR:HCSIC,X DOES FILE EXIST ?
BDAE 2767       233:          BEQ     ERRFILENOTFNDJ B/ NOPE
                234:          ;JSR    SEARCHFCBINIT SET UP TO SEARCH FCBS
BDB0 BDCB4E     235:          JSR     SEARCHFCBINIT
  BDB3          236: DSKFOPENL        EQU         *
                237:          ;JSR    SEARCHFCBS  SEE IF FILE ALREADY OPENED
BDB3 BDCB5E     238:          JSR     SEARCHFCBS
BDB6 250A       239:          BCS     DSKFOPEN0   NO FCB SET UP FOR FILE
BDB8 A60A       240:          LDAA    FCB:FLAGS,X IS THE FCB FOR A NEW FILE ?
BDBA 8580       241:          BITA    #FCBFLG::NEWFILE ...?
BDBC 26F5       242:          BNE     DSKFOPENL   B/ YES, TREAT AS IF FCB DIDN'T EXIST
                243:          ;INC    FCB:REFCOUNT,X NO, FCB IS ALREADY SET UP FOR FILE
BDBE 6C0B       244:          INC     FCB:REFCOUNT,X
BDC0 2003       245:          BRA     DSKFOPEN1   PLACE HOLD ON FCB AND GO OPEN




ASM/6800 1.4A0: BDC0 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 213; Form 11    DISK FILE/DEVICE DRIVER
SDOS6800.ASM
  BDC2          247: DSKFOPEN0        ; NO FCB EXISTS FOR FILE YET
                248:          ;JSR    FINDFREEFCB OOPS, NO FCB FOR THIS FILE YET
BDC2 BDCAC8     249:          JSR     FINDFREEFCB
  BDC5          250: DSKFOPEN1        ; ENTRY POINT FOR DSKFOPENERRORFILE
                251:          ;LDX    IOCBPOINTER NOW FILL IN THE IOCB
BDC5 FEAE09     252:          LDX     IOCBPOINTER
                253:          ;LDD    FCBPOINTER  REMEMBER THE FCB ADDRESS
BDC8 F6AEA7     254:          LDAB    FCBPOINTER+1
BDCB B6AEA6     255:          LDAA    FCBPOINTER
                256:          ;STD    IOCB:FCB,X
BDCE E708       257:          STAB    (IOCB:FCB)+1,X
BDD0 A707       258:          STAA    IOCB:FCB,X
                259:          ;CLR    IOCB:CURBYTE,X ASSUME WE WILL START ...
BDD2 6F0D       260:          CLR     IOCB:CURBYTE,X
                261:          ;CLR    IOCB:CURBYTE+1,X AT BYTE ZERO OF THE FILE
BDD4 6F0E       262:          CLR     IOCB:CURBYTE+1,X
                263:          ;CLR    IOCB:CURBYTE+2,X
BDD6 6F0F       264:          CLR     IOCB:CURBYTE+2,X
                265:          ;CLR    IOCB:CURBYTE+3,X
BDD8 6F10       266:          CLR     IOCB:CURBYTE+3,X
                267:          ;CLR    IOCB:LOCATEDF,X MARK "LOCATE OPERATION NEEDED"
BDDA 6F11       268:          CLR     IOCB:LOCATEDF,X
                269:          ;LDD    #DUMMYLCN   SET "LAST EXAMINED DATA CLUSTER"...
BDDC C6FF       270:          LDAB    #(DUMMYLCN)&$FF
BDDE 86FF       271:          LDAA    #(DUMMYLCN)/256
                272:          ;STD    IOCB:RDCN,X
BDE0 E71C       273:          STAB    (IOCB:RDCN)+1,X
BDE2 A71B       274:          STAA    IOCB:RDCN,X
                275:          ;CLR    IOCB:DRDSI,X MARK RDSI POINTERS AS "MUST BE READ"
BDE4 6F12       276:          CLR     IOCB:DRDSI,X
                277:          ;CLR    IOCB:DRDSI+1,X
BDE6 6F13       278:          CLR     IOCB:DRDSI+1,X
                279:          ;CLR    IOCB:HRDSI,X
BDE8 6F1F       280:          CLR     IOCB:HRDSI,X
                281:          ;CLR    IOCB:HRDSI+1,X
BDEA 6F20       282:          CLR     IOCB:HRDSI+1,X
BDEC 86FF       283:          LDAA    #-1         SET HRSN = "NONE"
BDEE A721       284:          STAA    IOCB:HRSN,X
                285:          ;CLR    IOCB:COLCNT,X START OUT ON COLUMN 0
BDF0 6F0C       286:          CLR     IOCB:COLCNT,X




ASM/6800 1.4A0: BDF0 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 214; Form 11    DISK FILE/DEVICE DRIVER
SDOS6800.ASM
                287:          ;JSR    DSKFEOFTEST AFTER ALL, THE FILE MIGHT BE (SIGH!) EMPTY!
BDF2 BDC307     288:          JSR     DSKFEOFTEST
BDF5 2500       289:          BCS     *+2         IGNORE EOF HIT ERROR
                290:          ;LDX    IOCBPOINTER BECUZ EOF TEST BOMBS (X)!
BDF7 FEAE09     291:          LDX     IOCBPOINTER
BDFA 0C39       292:          OKRTS
                293: *
                294: *        DSKFOPENSYSIOCB -- SET UP SYSIOCB AS THOUGH "OPEN" WAS CALLED
                295: *
  BDFC          296: DSKFOPENSYSIOCB  EQU         *
                297:          ;LDX    #SYSIOCB    SET UP IOCBPOINTER
BDFC CEAF57     298:          LDX     #SYSIOCB
BDFF FFAE09     299:          STX     IOCBPOINTER
                300:          ;LDX    DCBPOINTER  POKE DCB ADDRESS INTO IOCB
BE02 DE06       301:          LDX     DCBPOINTER
BE04 FFAF57     302:          STX     SYSIOCB+IOCB:DCB
                303:          ;LDX    #DISKFILEDRIVER SET UP FILE DRIVER
BE07 CEBCB4     304:          LDX     #DISKFILEDRIVER
BE0A FFAF60     305:          STX     SYSIOCB+IOCB:DRIVER
BE0D 20B6       306:          BRA     DSKFOPEN1   GO SET UP REST OF IOCB FOR FILE I/O




ASM/6800 1.4A0: BE0D SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 215; Form 11    DISK FILE/DEVICE DRIVER
SDOS6800.ASM
                308: *
                309: *        DSKFDELETE -- DELETE A DISK FILE
                310: *
  BE0F          311: DSKFDELETE       EQU         *
                312:          ;JSR    PARSEFILENAME GO PROCESS THE DISK FILE NAME
BE0F BDCBB9     313:          JSR     PARSEFILENAME
                314:          ;JSR    SEARCHDIR   GO LOOK IT UP IN DIRECTORY
BE12 BDC67D     315:          JSR     SEARCHDIR
BE15 A612       316:          LDAA    DIR:HCSIC,X IS THIS DIRECTORY SLOT BUSY ?
  BE17          317: ERRFILENOTFNDJ   EQU         *
BE17 2750       318:          BEQ     ERRFILENOTFOUND B/ NO, NO FILE TO DELETE !
                319:          ;JSR    SEARCHFCBINIT SET UP TO SEARCH FCBS
BE19 BDCB4E     320:          JSR     SEARCHFCBINIT
  BE1C          321: DSKFDELETEL      EQU         *
                322:          ;JSR    SEARCHFCBS  IS THE FILE ALREADY OPENED?
BE1C BDCB5E     323:          JSR     SEARCHFCBS
BE1F 251A       324:          BCS     DSKFDELETE1 B/ NO, MUST SET UP FCB TO DELETE
BE21 A60A       325:          LDAA    FCB:FLAGS,X A NEWLY CREATED FILE?
BE23 8580       326:          BITA    #FCBFLG::NEWFILE ...?
BE25 26F5       327:          BNE     DSKFDELETEL B/ YES, IGNORE THIS FCB
BE27 E615       328:          LDAB    FCB:PROT,X  SINCE FILE IS OPEN...
BE29 C540       329:          BITB    #PROT::WRITE FCB IS MORE UP-TO-DATE THAN DIRECTORY
BE2B 2639       330:          BNE     ERRFILEWRTPROTJ B/ FILE HAS BEEN WRITE PROTECTED
BE2D 8A20       331:          ORAA    #FCBFLG::DELETED NEITHER ONE, FORCE DELETION OF FILE ...
BE2F A70A       332:          STAA    FCB:FLAGS,X WHEN IT IS CLOSED
  BE31          333: DSKFDELETEDE     ; DELETE DIRECTORY ENTRY
                334:          ;JSR    LOCATEDIRENTRY ZAP THE DIRECTORY ENTRY NOW!
BE31 BDC9B3     335:          JSR     LOCATEDIRENTRY
                336:          ;CLR    DIR:HCSIC,X SO FILE NO LONGER APPEARS TO EXIST
BE34 6F12       337:          CLR     DIR:HCSIC,X
                338:          ;JSR    MARKMODIFIED MARK DIRECTORY SECTOR AS MODIFIED
BE36 BDBF7C     339:          JSR     MARKMODIFIED
BE39 0C39       340:          OKRTS




ASM/6800 1.4A0: BE39 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 216; Form 11    DISK FILE/DEVICE DRIVER
SDOS6800.ASM
  BE3B          342: DSKFDELETE1      ; MUST SET UP FCB TO DELETE FILE
                343:          ;LDX    DIRENTRY
BE3B FEAEA8     344:          LDX     DIRENTRY
BE3E A619       345:          LDAA    DIR:PROTECTION,X IS FILE WRITE PROTECTED?
BE40 8540       346:          BITA    #PROT::WRITE
BE42 2622       347:          BNE     ERRFILEWRTPROTJ B/ YES, CAN'T DELETE
                348:          ;JSR    FINDFREEFCB INVENT AN FCB FOR THIS STUNT
BE44 BDCAC8     349:          JSR     FINDFREEFCB
  BE47          350: DSKFDELETEFCB    ; DELETE FILE REPRESENTED BY FCB POINTER
BE47 8DE8       351:          BSR     DSKFDELETEDE DELETE THE DIRECTORY ENTRY
  BE49          352: DSKFDELETESYSIOCB ; DELETE FILE USING SYSTEM IOCB
BE49 8DB1       353:          BSR     DSKFOPENSYSIOCB SET UP USING SYSIOCB
  BE4B          354: DSKFDELETEIOCBFCB ; DELETE FILE REPRESENTED BY IOCBPOINTER AND FCBPOINTER
                355:          ;LDX    IOCBPOINTER (DIRENTRY ALREADY DELETED)
BE4B FEAE09     356:          LDX     IOCBPOINTER
                357:          ;CLR    IOCB:RDCN,X MARK ZEROTH CLUSTER AS START POINT OF DELETE
BE4E 6F1B       358:          CLR     IOCB:RDCN,X
                359:          ;CLR    IOCB:RDCN+1,X
BE50 6F1C       360:          CLR     IOCB:RDCN+1,X
                361:          ;LDX    FCBPOINTER  DELETE ALL THE CLUSTERS ...
BE52 FEAEA6     362:          LDX     FCBPOINTER
                363:          ;CLR    FCB:REFCOUNT,X LET GO OF THIS FCB
BE55 6F0B       364:          CLR     FCB:REFCOUNT,X
                365:          ;LDD    FCB:NCLUSTERS,X
BE57 E610       366:          LDAB    (FCB:NCLUSTERS)+1,X
BE59 A60F       367:          LDAA    FCB:NCLUSTERS,X
                368:          ;JSR    FREECLUSTERS
BE5B BDCEFD     369:          JSR     FREECLUSTERS
                370:          ;LDX    #0          MARK SYSIOCB...
BE5E CE0000     371:          LDX     #0
BE61 FFAF60     372:          STX     SYSIOCB+IOCB:DRIVER AS CLOSED
BE64 0C39       373:          OKRTS
                374: 
  BE66          375: ERRFILEWRTPROTJ
                376:          ;JMP    ERRFILEWRTPROT
BE66 7EBD07     377:          JMP     ERRFILEWRTPROT
                378: 
  BE69          379: ERRFILENOTFOUND  EQU         *
                380:          ;JSR    ERRET
BE69 BDB1F6     381:          JSR     ERRET




ASM/6800 1.4A0: BE6C SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 217; Form 11    DISK FILE/DEVICE DRIVER
SDOS6800.ASM
BE6C 03F3       382:          FDB     ERR:FILENOTFOUND




ASM/6800 1.4A0: BE6C SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 218; Form 11    DISK FILE/DEVICE DRIVER
SDOS6800.ASM
                384: *
                385: *        DSKFCLOSE -- CLOSE A DISK FILE
                386: *
  BE6E          387: DSKFCLOSE        EQU         *
                388:          ;JSR    GETFCBFROMIOCB SET UP FCBPOINTER
BE6E BDC11C     389:          JSR     GETFCBFROMIOCB
                390:          ;LDX    FCBPOINTER  IS FILE OPEN ON MORE THAN ONE CHANNEL ?
BE71 FEAEA6     391:          LDX     FCBPOINTER
                392:          ;DEC    FCB:REFCOUNT,X IF SOME OTHER CHANNEL HAS THIS FILE OPEN ...
BE74 6A0B       393:          DEC     FCB:REFCOUNT,X
BE76 264C       394:          BNE     DSKFCLOSEOKRTS WE'LL LET HIM DO THE CLEANUP WHEN HE CLOSES
BE78 A60A       395:          LDAA    FCB:FLAGS,X HAS THIS FILE BEEN DELETED FROM DIRECTORY?
BE7A 8520       396:          BITA    #FCBFLG::DELETED
BE7C 26CD       397:          BNE     DSKFDELETEIOCBFCB B/ YES, LET'S DELETE IT!
BE7E 8510       398:          BITA    #FCBFLG::MODIFIED HAS FILE BEEN MODIFIED ?
BE80 2715       399:          BEQ     DSKFCLOSE1  B/ NO, DON'T TRUNCATE!
                400: *
                401: *        NOW SHORTEN UP THE FILE (CHOP OFF ALL DATA CLUSTERS PAST EOF)
                402: *
                403:          ;JSR    DSKFPOSITIONTOEND POSITION TO END OF FILE
BE82 BDC2CE     404:          JSR     DSKFPOSITIONTOEND
                405:          ;JSR    COMPUTERDCN FIND RELATIVE DATA CLUSTER OF EOF
BE85 BDD704     406:          JSR     COMPUTERDCN
BE88 250D       407:          BCS     DSKFCLOSE1  B/ OFF END OF HEADER CLUSTER, NOTHING TO DEALLOCATE
                408:          ;ADDD   #1          ROUND UP TO NEXT DATA CLUSTER
BE8A CB01       409:          ADDB    #(1)&$FF
BE8C 8900       410:          ADCA    #(1)/256
                411:          ;STD    IOCB:RDCN,X AND START DELETING THERE
BE8E E71C       412:          STAB    (IOCB:RDCN)+1,X
BE90 A71B       413:          STAA    IOCB:RDCN,X
BE92 4F         414:          CLRA                (D):=0 --> DELETE TILL END OF HEADER CLUSTER
BE93 5F         415:          CLRB
                416:          ;JSR    FREECLUSTERS GO CHOP OFF THE FILE
BE94 BDCEFD     417:          JSR     FREECLUSTERS
  BE97          418: DSKFCLOSE1
                419:          ;LDX    FCBPOINTER  FILE HAS BEEN SHORTENED TO MATCH FILESIZE
BE97 FEAEA6     420:          LDX     FCBPOINTER
                421:          ;LDA    FCB:FLAGS,X LOOK AT THE FLAGS AGAIN
BE9A A60A       422:          LDAA    FCB:FLAGS,X
BE9C 8580       423:          BITA    #FCBFLG::NEWFILE A NEW FILE?




ASM/6800 1.4A0: BE9E SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 219; Form 11    DISK FILE/DEVICE DRIVER
SDOS6800.ASM
BE9E 2721       424:          BEQ     DSKFCLOSEOLD B/ NO
BEA0 8A40       425:          ORAA    #FCBFLG::UPDATEDIR CHANGE FILE STATUS
BEA2 A70A       426:          STAA    FCB:FLAGS,X SO DIRECTORY WILL GET UPDATED
                427:          ;JSR    LOCATEDIRENTRY GO GET THE DIRECTORY ENTRY
BEA4 BDC9B3     428:          JSR     LOCATEDIRENTRY
BEA7 A612       429:          LDAA    DIR:HCSIC,X IS THERE AN OLD FILE HERE?
BEA9 2716       430:          BEQ     DSKFCLOSEOLD B/ NO, TREAT LIKE UPDATE DIRECTORY
                431: *
                432: *        MUST DELETE OLD VERSION OF FILE
                433: *
                434:          ;JSR    SEARCHFCBINIT IS OLD FILE OPEN ON SOME CHANNEL?
BEAB BDCB4E     435:          JSR     SEARCHFCBINIT
                436:          ;JSR    SEARCHFCBS  SEE IF ANOTHER FCB MATCHES
BEAE BDCB5E     437:          JSR     SEARCHFCBS
BEB1 2513       438:          BCS     DSKFCLOSEDOLD1 B/ NO, JUST DELETE IT
BEB3 A60A       439:          LDAA    FCB:FLAGS,X MARK FCB OF OLD FILE...
BEB5 8A20       440:          ORAA    #FCBFLG::DELETED AS 'DELETED'
BEB7 A70A       441:          STAA    FCB:FLAGS,X SO OLD FILE WILL GO AWAY ...
                442:          ;LDX    IOCBPOINTER WHEN IT IS CLOSED
BEB9 FEAE09     443:          LDX     IOCBPOINTER
                444:          ;LDX    IOCB:FCB,X  GET THE FCB OF THE NEW FILE BACK
BEBC EE07       445:          LDX     IOCB:FCB,X
BEBE FFAEA6     446:          STX     FCBPOINTER
  BEC1          447: DSKFCLOSEOLD     ; OLD FILE TO BE CLOSED
                448:          ;JSR    UPDATEDIRFROMFCB GO UPDATE THE DIRECTORY IF NEEDED
BEC1 BDC9EB     449:          JSR     UPDATEDIRFROMFCB
  BEC4          450: DSKFCLOSEOKRTS   EQU         *
BEC4 0C39       451:          OKRTS




ASM/6800 1.4A0: BEC4 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 220; Form 11    DISK FILE/DEVICE DRIVER
SDOS6800.ASM
  BEC6          453: DSKFCLOSEDOLD1   ; OLD VERSION OF FILE IS NOT OPEN
                454:          ;LDX    IOCBPOINTER DAMN! MARK THIS FCB AS BUSY AGAIN
BEC6 FEAE09     455:          LDX     IOCBPOINTER
                456:          ;LDX    IOCB:FCB,X
BEC9 EE07       457:          LDX     IOCB:FCB,X
                458:          ;INC    FCB:REFCOUNT,X (SET REFCOUNT TO 1)
BECB 6C0B       459:          INC     FCB:REFCOUNT,X
                460:          ;JSR    FINDFREEFCB COPY OLD FILE INFORMATION
BECD BDCAC8     461:          JSR     FINDFREEFCB
BED0 FFAF10     462:          STX     SYSFCBPOINTER AND REMEMBER WHERE WE PUT IT
                463:          ;LDX    IOCBPOINTER RESTORE FCBPOINTER TO NEW FILE
BED3 FEAE09     464:          LDX     IOCBPOINTER
                465:          ;LDX    IOCB:FCB,X
BED6 EE07       466:          LDX     IOCB:FCB,X
                467:          ;CLR    FCB:REFCOUNT,X NOW LET GO OF NEW FCB AGAIN
BED8 6F0B       468:          CLR     FCB:REFCOUNT,X
BEDA FFAEA6     469:          STX     FCBPOINTER  SINCE SETUPFCB STOMPED ON FCBPOINTER
                470:          ;JSR    UPDATEDIRFROMFCB TO RECORD NEW FILE
BEDD BDC9EB     471:          JSR     UPDATEDIRFROMFCB
                472:          ;LDX    SYSFCBPOINTER SET UP FCBPOINTER...
BEE0 FEAF10     473:          LDX     SYSFCBPOINTER
BEE3 FFAEA6     474:          STX     FCBPOINTER  TO SELECT OLD FILE TO BE DELETED
                475:          ;JMP    DSKFDELETEIOCBFCB NOW GO DELETE FILE REPRESENTED BY FCBPOINTER
BEE6 7EBE4B     476:          JMP     DSKFDELETEIOCBFCB




ASM/6800 1.4A0: BEE6 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 221; Form 11    DISK FILE/DEVICE DRIVER
SDOS6800.ASM
                478: *
                479: *        DSKFRENAME -- RENAME A DISK FILE
                480: *
  BEE9          481: DSKFRENAME       EQU         *
                482:          ;JSR    GETFCBFROMIOCB GET FCB ADDRESS
BEE9 BDC11C     483:          JSR     GETFCBFROMIOCB
                484:          ;JSR    PARSEFILENAME GO PROCESS THE DISK FILE NAME
BEEC BDCBB9     485:          JSR     PARSEFILENAME
                486:          ;LDA    CODE+SDOS:DAY IS TIME SET ?
BEEF B6AE0E     487:          LDAA    CODE+SDOS:DAY
                488:          ;LBEQ   ERRTIMENOTSET B/ NO, CAN'T RENAME THE FILE!
BEF2 2603       489:          BNE     MACRO:0012
BEF4 7EBD32     490:          JMP     ERRTIMENOTSET
  BEF7          491: MACRO:0012
                492:          ;LDX    FCBPOINTER  MAKE SURE WE CAN RENAME THE FILE
BEF7 FEAEA6     493:          LDX     FCBPOINTER
BEFA A615       494:          LDAA    FCB:PROT,X  GET PROTECTION BITS
BEFC 8540       495:          BITA    #PROT::WRITE WRITE PROTECTED ?
                496:          ;LBNE   ERRFILEWRTPROT B/ YES, CAN'T RENAME!
BEFE 2703       497:          BEQ     MACRO:0013
BF00 7EBD07     498:          JMP     ERRFILEWRTPROT
  BF03          499: MACRO:0013
BF03 A60A       500:          LDAA    FCB:FLAGS,X IS THE FILE ALREADY DELETED ?
BF05 8520       501:          BITA    #FCBFLG::DELETED ...?
BF07 2624       502:          BNE     ERRFILEALREADYDELETED B/ YES, CAN'T RENAME IT!
                503:          ;JSR    LOCATEDIRENTRY PULL IN THE DIRECTORY ENTRY FROM THE DISK
BF09 BDC9B3     504:          JSR     LOCATEDIRENTRY
                505:          ;JSR    SEARCHFCBINIT YES, GO SEE IF ITS BEING CREATED
BF0C BDCB4E     506:          JSR     SEARCHFCBINIT
  BF0F          507: DSKFRENAMEL      EQU         *
                508:          ;JSR    SEARCHFCBS  LOOK FOR AN FCB USING THIS DIRECTORY SLOT
BF0F BDCB5E     509:          JSR     SEARCHFCBS
BF12 251E       510:          BCS     DSKFRENAME1 B/ NO, LOOKS GOOD SO FAR
BF14 A60A       511:          LDAA    FCB:FLAGS,X RATS, MUST BE AT LEAST ONE: LOOK AT OPEN FILE
BF16 8580       512:          BITA    #FCBFLG::NEWFILE IS IT A NEW FILE?
BF18 27F5       513:          BEQ     DSKFRENAMEL B/ NO, IGNORE THIS FCB
                514:          ;JMP    ERRFILEINCREATE
BF1A 7EBCF5     515:          JMP     ERRFILEINCREATE
                516: 
  BF1D          517: DSKFRENAMEERR1   ; DESIRED NAME IS IN USE




ASM/6800 1.4A0: BF1A SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 222; Form 11    DISK FILE/DEVICE DRIVER
SDOS6800.ASM
                518:          ;JSR    GETFCBFROMIOCB PUT OLD DIRECTORY ENTRY BACK LIKE IT WAS
BF1D BDC11C     519:          JSR     GETFCBFROMIOCB
                520:          ;LDX    FCBPOINTER  AND THEN GO COMPLAIN!
BF20 FEAEA6     521:          LDX     FCBPOINTER
                522:          ;DEC    FCB:DIRDISP+1,X MAKE DIRENTRY DISPLACEMENT VALID ONCE AGAIN
BF23 6A06       523:          DEC     FCB:DIRDISP+1,X
                524:          ;JSR    LOCUPDATEDIRENTRY GO LOCATE DIR ENTRY AND UPDATE IT
BF25 BDC9F8     525:          JSR     LOCUPDATEDIRENTRY
  BF28          526: ERRNEWFILEEXISTS EQU         *
                527:          ;JSR    ERRET
BF28 BDB1F6     528:          JSR     ERRET
BF2B 03F6       529:          FDB     ERR:NEWFILEEXISTS
                530: 
  BF2D          531: ERRFILEALREADYDELETED        EQU *
                532:          ;JSR    ERRET
BF2D BDB1F6     533:          JSR     ERRET
BF30 042C       534:          FDB     ERR:FILEALREADYDELETED




ASM/6800 1.4A0: BF30 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 223; Form 11    DISK FILE/DEVICE DRIVER
SDOS6800.ASM
  BF32          536: DSKFRENAME1      ; NO PROBLEM WITH FILE TO BE RENAMED
                537:          ;JSR    GETFCBFROMIOCB SET FCBPOINTER BACK TO FCB BEING RENAMED
BF32 BDC11C     538:          JSR     GETFCBFROMIOCB
                539:          ;LDX    FCBPOINTER  MAKE SURE THIS FCB DOESN'T MATCH ANY DIRECTORY SLOT
BF35 FEAEA6     540:          LDX     FCBPOINTER
                541:          ;INC    FCB:DIRDISP+1,X BY MAKING DIRENTRY DISPLACEMENT INVALID
BF38 6C06       542:          INC     FCB:DIRDISP+1,X
                543:          ;LDX    DIRENTRY    LET GO OF THIS DIRECTORY ENTRY
BF3A FEAEA8     544:          LDX     DIRENTRY
                545:          ;CLR    DIR:HCSIC,X (IN CASE DIRECTORY IS FULL)
BF3D 6F12       546:          CLR     DIR:HCSIC,X
                547:          ;JSR    MARKMODIFIED (ALSO PREVENTS SEARCHDIRCREATE FROM GIVING...)
BF3F BDBF7C     548:          JSR     MARKMODIFIED
                549:          ;LDX    #FILENAMEBUF (US THE SAME SLOT BACK, THEREBY REHASHING)
BF42 CEAEBA     550:          LDX     #FILENAMEBUF
                551:          ;JSR    SEARCHDIRCREATE GO LOOK FOR FREE DIRECTORY SLOT
BF45 BDC935     552:          JSR     SEARCHDIRCREATE
                553: *        NO ERROR CHECK NEEDED, BECAUSE FREE DIRECTORY SLOT IS KNOWN TO BE AVAILABLE
BF48 A612       554:          LDAA    DIR:HCSIC,X IS DIRECTORY ENTRY BUSY?
BF4A 26D1       555:          BNE     DSKFRENAMEERR1 B/ YES, CAN'T RENAME TO THIS FILE
                556:          ;JSR    SEARCHFCBINIT SET UP TO SEARCH FCBS
BF4C BDCB4E     557:          JSR     SEARCHFCBINIT
                558:          ;JSR    SEARCHFCBS  DOES MATCHING FCB EXIST?
BF4F BDCB5E     559:          JSR     SEARCHFCBS
BF52 250A       560:          BCS     DSKFRENAME2 B/ NOBODY USING THIS SLOT
                561:          ;LDX    IOCBPOINTER IS THIS SLOT IN USE...
BF54 FEAE09     562:          LDX     IOCBPOINTER
                563:          ;LDX    IOCB:FCB,X  BY FILE BEING RENAMED ?
BF57 EE07       564:          LDX     IOCB:FCB,X
BF59 BCAEA6     565:          CPX     FCBPOINTER  ...?
BF5C 26BF       566:          BNE     DSKFRENAMEERR1 B/ NO, NEW NAME IS OCCUPIED!
  BF5E          567: DSKFRENAME2      EQU         *
                568:          ;JSR    GETFCBFROMIOCB RESET FCB POINTER SINCE SEARCHFCBS BOMBED IT!
BF5E BDC11C     569:          JSR     GETFCBFROMIOCB
                570:          ;JSR    UPDATEFILEDATE MAKE SURE DATE IS MODIFIED (ASSERT: NO ERROR POSSIBLE!
BF61 BDBD0C     571:          JSR     UPDATEFILEDATE
                572:          ;JSR    SETUPFCBDIRPOS GO COPY DIRECTORY ENTRY DATA INTO FCB
BF64 BDCB2D     573:          JSR     SETUPFCBDIRPOS
                574:          ;LDX    DIRENTRY    SET UP (X) PROPERLY...
BF67 FEAEA8     575:          LDX     DIRENTRY




ASM/6800 1.4A0: BF67 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 224; Form 11    DISK FILE/DEVICE DRIVER
SDOS6800.ASM
                576:          ;JSR    UPDATEDIRENTRY TO SAVE CRITICAL FILE DATA
BF6A BDC9FA     577:          JSR     UPDATEDIRENTRY
                578: *        JSR     COPYNAMETODIR SET UP NEW NAME IN DIRENTRY
                579: *        OKRTS




ASM/6800 1.4A0: BF6A SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 225; Form 11    DISK FILE/DEVICE DRIVER
SDOS6800.ASM
                581: *
                582: *        COPYNAMETODIR -- COPY "FILENAME" TO DIRENTRY
                583: *                MARKS RDSI AS MODIFIED
                584: *
  BF6D          585: COPYNAMETODIR    EQU         *
  0001          586:          IF      M6800!M6801
                587:          ;LDX    DIRENTRY    SET UP TARGET POINTER
BF6D FEAEA8     588:          LDX     DIRENTRY
BF70 DF00       589:          STX     TOPOINTER
  0001          590:          ELSE    (M6809)
 *S*            591:          LDY     DIRENTRY
                592:          FIN
                593:          ;LDX    #FILENAMEBUF GET SOURCE POINTER
BF72 CEAEBA     594:          LDX     #FILENAMEBUF
                595:          ;LDD    #DIR:NAMESIZE AND # BYTES TO COPY
BF75 C610       596:          LDAB    #(DIR:NAMESIZE)&$FF
BF77 8600       597:          LDAA    #(DIR:NAMESIZE)/256
                598:          ;JSR    BLOCKMOVE
BF79 BDDBD0     599:          JSR     BLOCKMOVE
                600: *        JSR     MARKMODIFIED SO DIRECTORY ENTRY WILL GO BACK TO DISK
                601: *        RTS
                602: *
                603: *        MARKMODIFIED -- MARKS RDSI(RDSIPOINTER) AS MODIFIED
                604: *
  BF7C          605: MARKMODIFIED     EQU         *
                606:          ;LDX    RDSIPOINTER WHAT CAN I SAY?
BF7C FEAEA4     607:          LDX     RDSIPOINTER
                608:          ;CLR    RDSI:MODIFIED,X (RESETS CARRY TO MAKE "OKRTS")
BF7F 6F0B       609:          CLR     RDSI:MODIFIED,X
                610:          ;INC    RDSI:MODIFIED,X
BF81 6C0B       611:          INC     RDSI:MODIFIED,X
BF83 39         612:          RTS




ASM/6800 1.4A0: BF83 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 226; Form 12    DISK FILE/DEVICE DRIVER
SDOS6800.ASM
  0000            2: SWAPPING EQU     0           ******** TAKE NOTE!
  0000            3:          IF      SWAPPING
 *S*              4: DSKFREADBOPT     ; TRY TO OPTIMIZE NEXT SECTOR READ
 *S*              5:          ;JSR    CHECKTRANSFERDONE COMPUTE REMAINING # BYTES TO MOVE
 *S*              6:          JSR     CHECKTRANSFERDONE
 *S*              7:          ;LDX    DCBPOINTER
 *S*              8:          LDX     DCBPOINTER
 *S*              9:          ;SUBD   DSKINFO:NBPS,X
 *S*             10:          SUBB    (DSKINFO:NBPS)+1,X
 *S*             11:          SBCA    DSKINFO:NBPS,X
 *S*             12:          BCS     DSKFREADBL1 B/ NO, CAN'T TRANSFER A SECTOR'S WORTH
 *S*             13:          ;LDX    FCBPOINTER  ARE THERE ENOUGH BYTES LEFT IN THE FILE ?
 *S*             14:          LDX     FCBPOINTER
 *S*             15:          ;LDD    FCB:FILESIZE,X (I.E., IS FCB:FILESIZE - IOCB:CURBYTE >=NBPS ?)
 *S*             16:          LDAB    (FCB:FILESIZE)+1,X
 *S*             17:          LDAA    FCB:FILESIZE,X
 *S*             18:          ;PSHD                (GET FCB:FILESIZE TO (TOS-1,TOS),(A,B))
 *S*             19:          PSHB
 *S*             20:          PSHA
 *S*             21:          ;LDD    FCB:FILESIZE+2,X
 *S*             22:          LDAB    (FCB:FILESIZE+2)+1,X
 *S*             23:          LDAA    FCB:FILESIZE+2,X
 *S*             24:          ;LDX    FCB:DISKINFO,X (NOW SUBTRACT DSKINFO:NBPS)
 *S*             25:          LDX     FCB:DISKINFO,X
 *S*             26:          ;SUBD   DSKINFO:NBPS,X
 *S*             27:          SUBB    (DSKINFO:NBPS)+1,X
 *S*             28:          SBCA    DSKINFO:NBPS,X
 *S*             29:          BCC     DSKFREADBO1 B/ NO BORROW BIT TO PROPOGATE
 *S*             30:          TST     1,S         DO DOUBLE PRECISION DECREMENT
 *S*             31:          BNE     DSKFREADBO2 B/ DON'T HAVE TO DECREMENT UPPER HALF
 *S*             32:          IF      M6800!M6801
 *S*             33:          ;DEC    ,X          NOTE: THIS MIGHT GO NEGATIVE!
 *S*             34:          DEC     0,X
 *S*             35: DSKFREADBO2      EQU         *
 *S*             36:          ;DEC    1,X         PROPOGATE THE BORROW
 *S*             37:          DEC     1,X
 *S*             38:          ELSE    (M6809)
 *S*             39:          ;DEC    0,S
 *S*             40:          TSX
 *S*             41:          DEC     0,X




ASM/6800 1.4A0: BF83 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 227; Form 12    DISK FILE/DEVICE DRIVER
SDOS6800.ASM
 *S*             42: DSKFREADBO2
 *S*             43:          ;DEC    1,S
 *S*             44:          TSX
 *S*             45:          DEC     1,X
 *S*             46:          FIN
 *S*             47: DSKFREADBO1      EQU         *
 *S*             48:          ;LDX    IOCBPOINTER NOW SUBTRACT IOCB:CURBYTE...
 *S*             49:          LDX     IOCBPOINTER
 *S*             50:          ;SUBD   IOCB:CURBYTE+2,X SO WE CAN FIND OUT IF FCB:FILESIZE-IOCB:CURBYTE...
 *S*             51:          SUBB    (IOCB:CURBYTE+2)+1,X
 *S*             52:          SBCA    IOCB:CURBYTE+2,X
 *S*             53:          ;PULD               -DSKINFO:NBPS>=0
 *S*             54:          PULA
 *S*             55:          PULB
 *S*             56:          SBCB    IOCB:CURBYTE+1,X
 *S*             57:          SBCA    IOCB:CURBYTE,X
 *S*             58:          BMI     DSKFREADBL1 B/ NOPE, NOT ENOUGH BYTES LEFT IN FILE
 *S*             59:          BVS     DSKFREADBL1 THOROUGH BASTARD, AREN'T I ?
 *S*             60: ****NEEDS WORK!!!*****
 *S*             61:          ;JSR    LOCATESECTOR SEEMS WE CAN DO OPTIMIZED READ
 *S*             62:          JSR     LOCATESECTOR
 *S*             63:          ;JSR    READDIRECT  DO DIRECT READ
 *S*             64:          JSR     READDIRECT
 *S*             65: DSKFREADBO3      ; UPDATE IOBLOCK
 *S*             66:          ;LDX    DCBPOINTER  NOW ADJUST EVERYTHING
 *S*             67:          LDX     DCBPOINTER
 *S*             68:          ;LDD    DSKINFO:NBPS,X ADD NBPS TO ACTUAL COUNT READ
 *S*             69:          LDAB    (DSKINFO:NBPS)+1,X
 *S*             70:          LDAA    DSKINFO:NBPS,X
 *S*             71:          ;LDX    CODE+SDOS:IOBLOCKPTR
 *S*             72:          LDX     CODE+SDOS:IOBLOCKPTR
 *S*             73:          ;ADDD   READB:ACTUALCOUNT,X
 *S*             74:          ADDB    (READB:ACTUALCOUNT)+1,X
 *S*             75:          ADCA    READB:ACTUALCOUNT,X
 *S*             76:          ;STD    READB:ACTUALCOUNT,X
 *S*             77:          STAB    (READB:ACTUALCOUNT)+1,X
 *S*             78:          STAA    READB:ACTUALCOUNT,X
 *S*             79:          BRA     DSKFREADBOPT GO SEE IF WE CAN TRANSFER ANOTHER BLOCK
                 80:          FIN




ASM/6800 1.4A0: BF83 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 228; Form 12    DISK FILE/DEVICE DRIVER
SDOS6800.ASM
                 82: *
                 83: *        DSKFREADB -- DISK FILE READ BINARY
                 84: *
  BF84           85: DSKFREADB        EQU         *
                 86:          ;JSR    DSKFIMPLIEDPOSITION HANDLE IMPLIED POSITIONING IF GIVEN
BF84 BDC2B8      87:          JSR     DSKFIMPLIEDPOSITION
                 88:          ;JSR    SETUPFORREAD COPY BUFFER ADDRESS TO BUFFERPOINTER
BF87 BDC108      89:          JSR     SETUPFORREAD
                 90: *                            AND SET UP FCB AND DISKINFO POINTERS
                 91:          ;CLR    IOCB:COLCNT,X (YOU DID A READ BINARY, YOUR COL COUNT GETS ZAPPED)
BF8A 6F0C        92:          CLR     IOCB:COLCNT,X
  BF8C           93: DSKFREADBL       ; READ BINARY BYTE LOOP
  0000           94:          IF      SWAPPING
 *S*             95:          ;LDX    IOCBPOINTER BECAUSE AN (EOF) ERROR BOMBS (X)
 *S*             96:          LDX     IOCBPOINTER
 *S*             97:          ;LDD    IOCB:CURBYTE+2,X AT A SECTOR BOUNDARY (I.E., IS CURBYTE MOD NBPS = 0 
 *S*             98:          LDAB    (IOCB:CURBYTE+2)+1,X
 *S*             99:          LDAA    IOCB:CURBYTE+2,X
 *S*            100:          ;LDX    IOCB:DCB,X  AT SECTOR BOUNDARY ?
 *S*            101:          LDX     IOCB:DCB,X
 *S*            102:          BITB    DSKINFO:NBPSM1+1,X (AND WITH NBPS - 1 FOR QUICK CHECK)
 *S*            103:          BNE     DSKFREADBL1 B/ NO, READ A BYTE AT A TIME
 *S*            104:          BITA    DSKINFO:NBPSM1,X ... ?
 *S*            105:          BEQ     DSKFREADBOPT B/ YES, MAYBE WE CAN DO A DIRECT READ!
 *S*            106: DSKFREADBL1      ; MUST READ INTO RDSI BUFFER AND COPY
                107:          FIN
                108:          ;JSR    CHECKREADDONE ALL BYTES REQUESTED COPIED ?
BF8C BDC128     109:          JSR     CHECKREADDONE
BF8F 270C       110:          BEQ     DSKFREADBOKRTS B/ YES, ALL DONE
                111:          ;JSR    LOCATECURBYTE LOCATE THE BYTE WE WANT
BF91 BDD2B1     112:          JSR     LOCATECURBYTE
BF94 8D20       113:          BSR     DSKREADBCHUNK GO COPY SOME BYTES TO THE DISK
                114:          ;JSR    UPDATECURBYTEF ADJUST CURBYTE
BF96 BDD5B9     115:          JSR     UPDATECURBYTEF
BF99 24F1       116:          BCC     DSKFREADBL  GO SEE IF MORE BYTES TO COPY
BF9B 20EF       117:          BRA     DSKFREADBL  IGNORE EOF ERROR
                118: 
  BF9D          119: DSKFREADBOKRTS   ; READ BINARY COMPLETED SUCCESSFULLY
BF9D 0C39       120:          OKRTS




ASM/6800 1.4A0: BF9D SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 229; Form 12    DISK FILE/DEVICE DRIVER
SDOS6800.ASM
                122: *        DSKDREADB -- DISK DEVICE READ BINARY
                123: *
  BF9F          124: DSKDREADB        EQU         *
                125:          ;JSR    DSKDIMPLIEDPOSITION HANDLE IMPLIED POSITIONING IF GIVEN
BF9F BDC513     126:          JSR     DSKDIMPLIEDPOSITION
                127:          ;JSR    SETUPFORREAD AND SET UP DCBPOINTER
BFA2 BDC108     128:          JSR     SETUPFORREAD
  BFA5          129: DSKDREADBL       EQU         *
                130:          ;JSR    CHECKREADDONE SEE IF ANY MORE BYTES TO MOVE TO BUFFER
BFA5 BDC128     131:          JSR     CHECKREADDONE
BFA8 27F3       132:          BEQ     DSKFREADBOKRTS B/ ALL BYTES COPIED
                133:          ;JSR    LOCDSKD     NO, SET UP PARAMETERS FOR THE COPY
BFAA BDD5D5     134:          JSR     LOCDSKD
BFAD 8D07       135:          BSR     DSKREADBCHUNK GO COPY THE CHUNK OF BYTES SET UP BY LOCDSKD
                136:          ;JSR    UPDATECURBYTED UPDATE POINTERS AND STUFF FOR DISK DEVICE
BFAF BDD5C6     137:          JSR     UPDATECURBYTED
BFB2 24F1       138:          BCC     DSKDREADBL  AND LOOP UNTIL USER'S BUFFER IS FILLED
BFB4 20EF       139:          BRA     DSKDREADBL  IGNORE EOF ERROR
                140: *
                141: *        DSKREADBCHUNK -- READ A CHUNK OF BYTES FROM FILE TO BUFFER
                142: *                CHUNK PARAMETERS ARE ALL SET UP BY LOCATECURBYTE
                143: *
  BFB6          144: DSKREADBCHUNK    EQU         *
                145:          ;LDX    CODE+SDOS:IOBLOCKPTR GET THE # BYTES MOVED SO FAR
BFB6 FEAE07     146:          LDX     CODE+SDOS:IOBLOCKPTR
                147:          ;LDD    READB:ACTUALCOUNT,X
BFB9 E609       148:          LDAB    (READB:ACTUALCOUNT)+1,X
BFBB A608       149:          LDAA    READB:ACTUALCOUNT,X
                150:          ;ADDD   USEDCOUNT   ADD # BYTES WE'LL MOVE THIS TIME
BFBD FBAEA0     151:          ADDB    USEDCOUNT+1
BFC0 B9AE9F     152:          ADCA    USEDCOUNT
                153:          ;STD    READB:ACTUALCOUNT,X
BFC3 E709       154:          STAB    (READB:ACTUALCOUNT)+1,X
BFC5 A708       155:          STAA    READB:ACTUALCOUNT,X
  0001          156:          IF      M6800!M6801
                157:          ;LDX    BUFFERPOINTER SET "TO" POINTER
BFC7 FEAE9B     158:          LDX     BUFFERPOINTER
BFCA DF00       159:          STX     TOPOINTER
  0001          160:          ELSE    (M6809)
 *S*            161:          LDY     BUFFERPOINTER




ASM/6800 1.4A0: BFCA SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 230; Form 12    DISK FILE/DEVICE DRIVER
SDOS6800.ASM
                162:          FIN
                163:          ;LDX    IOCBPOINTER GET THE SOURCE POINTER
BFCC FEAE09     164:          LDX     IOCBPOINTER
                165:          ;LDX    IOCB:NEXTBYTE,X
BFCF EE14       166:          LDX     IOCB:NEXTBYTE,X
                167:          ;LDD    USEDCOUNT   FETCH TRANSFER COUNT
BFD1 F6AEA0     168:          LDAB    USEDCOUNT+1
BFD4 B6AE9F     169:          LDAA    USEDCOUNT
                170:          ;JSR    CODE+SDOS:BLOCKMOVE GO MOVE THE BYTES
BFD7 BDAE42     171:          JSR     CODE+SDOS:BLOCKMOVE
                172: *        NOTE: THIS USES SDOS ENTRY POINT VECTOR...
                173: *        SO THAT A PATCH TO ENTRY POINT VECTOR CAN SUPPLY A DIFFERENT...
                174: *        (PRESUMABLY MUCH FASTER) BLOCK MOVE ROUTINE OF ITS OWN!
  0001          175:          IF      M6800!M6801
                176:          ;LDX    TOPOINTER   UPDATE BUFFER POINTER PAST COPIED BYTES
BFDA DE00       177:          LDX     TOPOINTER
BFDC FFAE9B     178:          STX     BUFFERPOINTER
  0001          179:          ELSE    (M6809)
 *S*            180:          STY     BUFFERPOINTER
                181:          FIN
BFDF 39         182:          RTS




ASM/6800 1.4A0: BFDF SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 231; Form 13    DISK FILE/DEVICE DRIVER
SDOS6800.ASM
                  2: *
                  3: *        DSKFREADA -- DISK FILE READ ASCII
                  4: *
  BFE0            5: DSKFREADA        EQU         *
                  6:          ;JSR    DSKFIMPLIEDPOSITION HANDLE IMPLIED POSITIONING IF REQUESTED
BFE0 BDC2B8       7:          JSR     DSKFIMPLIEDPOSITION
                  8:          ;JSR    SETUPFORREAD COPY BUFFER ADDRESS TO BUFFERPOINTER
BFE3 BDC108       9:          JSR     SETUPFORREAD
                 10: *                            AND SET UP FCB AND DISKINFO POINTERS
  BFE6           11: DSKFREADAL       EQU         *
                 12:          ;JSR    CHECKREADDONE ALL BYTES READ THAT WERE REQUESTED ?
BFE6 BDC128      13:          JSR     CHECKREADDONE
BFE9 2713        14:          BEQ     DSKFREADADONE B/ YES, DON'T READ ANY MORE BYTES
                 15:          ;JSR    LOCATECURBYTE LOCATE THE BYTE WE WANT
BFEB BDD2B1      16:          JSR     LOCATECURBYTE
BFEE 8D38        17:          BSR     DSKREADACHUNK READ A CHUNK OF BYTES SELECTED BY LOCATECURBYTE
BFF0 2607        18:          BNE     DSKFREADALINE B/ LINE MODE INPUT COMPLETED
                 19:          ;JSR    UPDATECURBYTEF ADJUST CURBYTE
BFF2 BDD5B9      20:          JSR     UPDATECURBYTEF
BFF5 24EF        21:          BCC     DSKFREADAL  GO CHECK FOR MORE BYTES TO MOVE
BFF7 20ED        22:          BRA     DSKFREADAL  IGNORE EOF ERROR
                 23: 
  BFF9           24: DSKFREADALINE    EQU         *
                 25:          ;JSR    UPDATECURBYTEF UPDATE CURBYTE FOR THE FILE
BFF9 BDD5B9      26:          JSR     UPDATECURBYTEF
BFFC 2500        27:          BCS     DSKFREADADONE IGNORE EOF ERROR
  BFFE           28: DSKFREADADONE    ; DONE FILLING SYSCALL REQUEST
BFFE B6AEA1      29:          LDAA    COLUMNCOUNT COPY COLUMN COUNT BACK TO IOCB
                 30:          ;LDX    IOCBPOINTER
C001 FEAE09      31:          LDX     IOCBPOINTER
C004 A70C        32:          STAA    IOCB:COLCNT,X
C006 0C39        33:          OKRTS




ASM/6800 1.4A0: C006 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 232; Form 13    DISK FILE/DEVICE DRIVER
SDOS6800.ASM
                 35: *
                 36: *        DSKDREADA -- DISK DEVICE READ ASCII
                 37: *
  C008           38: DSKDREADA        EQU         *
                 39:          ;JSR    DSKDIMPLIEDPOSITION HANDLE IMPLIED POSITIONING IF REQUESTED
C008 BDC513      40:          JSR     DSKDIMPLIEDPOSITION
                 41:          ;JSR    SETUPFORREAD AND SET UP DISKINFO AND COLUMNCOUNT
C00B BDC108      42:          JSR     SETUPFORREAD
  C00E           43: DSKDREADAL       EQU         *
                 44:          ;JSR    CHECKREADDONE TO SEE IF ALL DESIRED BYTES WERE COPIED
C00E BDC128      45:          JSR     CHECKREADDONE
C011 27EB        46:          BEQ     DSKFREADADONE B/ ALL DONE, GO CLEAN UP
                 47:          ;JSR    LOCDSKD     GO LOCATE THE CHUNK OF BYTES TO COPY
C013 BDD5D5      48:          JSR     LOCDSKD
C016 8D10        49:          BSR     DSKREADACHUNK READ THEM INTO THE USER'S BUFFER
C018 2607        50:          BNE     DSKDREADALINE B/ LINE MODE REQUEST SATISFIED
                 51:          ;JSR    UPDATECURBYTED UPDATE THE POINTERS FOR THE DISK DEVICE
C01A BDD5C6      52:          JSR     UPDATECURBYTED
C01D 24EF        53:          BCC     DSKDREADAL  AND GO SEE IF THERE ARE MORE BYTES TO COPY
C01F 20ED        54:          BRA     DSKDREADAL  IGNORE EOF ERROR
                 55: 
  C021           56: DSKDREADALINE    EQU         *
                 57:          ;JSR    UPDATECURBYTED UPDATE POINTERS FOR THE DISK DEVICE
C021 BDD5C6      58:          JSR     UPDATECURBYTED
C024 24D8        59:          BCC     DSKFREADADONE B/ NO ERROR, GET OUT QUICK!
C026 20D6        60:          BRA     DSKFREADADONE AND GO CLEAN UP




ASM/6800 1.4A0: C026 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 233; Form 13    DISK FILE/DEVICE DRIVER
SDOS6800.ASM
                 62: *
                 63: *        DSKREADACHUNK -- READ AN ASCII CHUNK OF BYTES SELECTED BY LOCATECURBYTE
                 64: *        RETURNS CC=0 IF EXHAUSTED CHUNK, NEED TO READ MORE
                 65: *                <>0 IF LINE MODE REQUEST WAS SATISFIED
                 66: *        THIS ROUTINE SHOULD TEST ACTIVATION CHARACTER SET LIKE VT DRIVER!
                 67: *
  C028           68: DSKREADACHUNK    EQU         *
                 69:          ;LDD    USEDCOUNT   MAKE EASY-TO-INCREMENT 16 BIT COUNT
C028 F6AEA0      70:          LDAB    USEDCOUNT+1
C02B B6AE9F      71:          LDAA    USEDCOUNT
                 72:          ;NEGD
C02E 40          73:          NEGA
C02F 50          74:          NEGB
C030 8200        75:          SBCA    #0
                 76:          ;STD    TRANSFERCOUNT
C032 F7AE9E      77:          STAB    TRANSFERCOUNT+1
C035 B7AE9D      78:          STAA    TRANSFERCOUNT
                 79:          ;LDX    CODE+SDOS:IOBLOCKPTR GET THE # BYTES MOVED SO FAR
C038 FEAE07      80:          LDX     CODE+SDOS:IOBLOCKPTR
                 81:          ;LDD    READA:ACTUALCOUNT,X
C03B E609        82:          LDAB    (READA:ACTUALCOUNT)+1,X
C03D A608        83:          LDAA    READA:ACTUALCOUNT,X
                 84:          ;ADDD   USEDCOUNT   ADD # BYTES WE'LL MOVE THIS TIME
C03F FBAEA0      85:          ADDB    USEDCOUNT+1
C042 B9AE9F      86:          ADCA    USEDCOUNT
                 87:          ;STD    READA:ACTUALCOUNT,X
C045 E709        88:          STAB    (READA:ACTUALCOUNT)+1,X
C047 A708        89:          STAA    READA:ACTUALCOUNT,X
                 90:          ;LDX    IOCBPOINTER GET THE SOURCE POINTER
C049 FEAE09      91:          LDX     IOCBPOINTER
  0001           92:          IF      M6800!M6801
                 93:          ;LDX    IOCB:NEXTBYTE,X
C04C EE14        94:          LDX     IOCB:NEXTBYTE,X
C04E DF02        95:          STX     FROMPOINTER
  C050           96: DSKREADACHUNKL   ; COPY BYTES FROM SECTOR TO BUFFER
                 97:          ;LDX    FROMPOINTER
C050 DE02        98:          LDX     FROMPOINTER
                 99:          ;LDA    ,X+         COPY A BYTE...
C052 A600       100:          LDAA    0,X
C054 08         101:          INX




ASM/6800 1.4A0: C055 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 234; Form 13    DISK FILE/DEVICE DRIVER
SDOS6800.ASM
C055 DF02       102:          STX     FROMPOINTER
C057 847F       103:          ANDA    #ASCII:MASK A NULL ?
C059 272A       104:          BEQ     DSKREADANULL B/ YES, ADJUST ACTUAL COUNT READ
                105:          ;CMPA   #ASCII:LF   A LINE FEED ?
C05B 810A       106:          CMPA    #ASCII:LF
C05D 2726       107:          BEQ     DSKREADANULL B/ YES, IGNORE IT
                108:          ;CMPA   #ASCII:RUBOUT ?
C05F 817F       109:          CMPA    #ASCII:RUBOUT
C061 2722       110:          BEQ     DSKREADANULL B/ YES, IGNORE IT
                111:          ;JSR    ADJUSTCOLUMNCOUNT NO, GO UPDATE THE COLUMN COUNTER
C063 BDC0C7     112:          JSR     ADJUSTCOLUMNCOUNT
                113:          ;LDX    BUFFERPOINTER TO THE USER'S BUFFER
C066 FEAE9B     114:          LDX     BUFFERPOINTER
                115:          ;STA    ,X+
C069 A700       116:          STAA    0,X
C06B 08         117:          INX
C06C FFAE9B     118:          STX     BUFFERPOINTER
                119:          ;CMPA   #ASCII:CR   END OF LINE CODE ?
C06F 810D       120:          CMPA    #ASCII:CR
C071 2607       121:          BNE     DSKREADACHUNKL1 B/ NO
                122:          ;LDX    CODE+SDOS:IOBLOCKPTR YES, LINE MODE ?
C073 FEAE07     123:          LDX     CODE+SDOS:IOBLOCKPTR
C076 A603       124:          LDAA    READA:LMFLAG,X ...?
C078 2628       125:          BNE     DSKREADACR  B/ YES, CR IS IMPORTANT
  C07A          126: DSKREADACHUNKL1 ; ADJUST NUMBER OF BYTES TRANSFERRED
  0001          127:          ELSE    (M6809)
 *S*            128:          PAGE
 *S*            129:          LDY     IOCB:NEXTBYTE,X GET SOURCE POINTER
 *S*            130:          LDU     BUFFERPOINTER GET TARGET BUFFER ADDRESS
 *S*            131: DSKREADACHUNKL   ; COPY BYTES FROM SECTOR TO BUFFER
 *S*            132:          ;LDA    ,Y+         COPY A BYTE...
 *S*            133:          LDAA    
 *S*            134:          ANDA    #ASCII:MASK A NULL?
 *S*            135:          BEQ     DSKREADANULL B/ YES
 *S*            136:          ;CMPA   #ASCII:LF   LINE FEED?
 *S*            137:          CMPA    #ASCII:LF
 *S*            138:          BEQ     DSKREADANULL B/ YES, IGNORE IT
 *S*            139:          ;CMPA   #ASCII:RUBOUT RUBOUT?
 *S*            140:          CMPA    #ASCII:RUBOUT
 *S*            141:          BEQ     DSKREADANULL B/ YES, IGNORE IT




ASM/6800 1.4A0: C078 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 235; Form 13    DISK FILE/DEVICE DRIVER
SDOS6800.ASM
 *S*            142:          ;JSR    ADJUSTCOLUMNCOUNT NO, GO UPDATE THE COLUMN COUNT
 *S*            143:          JSR     ADJUSTCOLUMNCOUNT
 *S*            144:          ;STA    ,U+         STORE THE BYTE INTO THE USER'S BUFFER
 *S*            145:          STAA    
 *S*            146:          ;CMPA   #ASCII:CR   END OF LINE MARK?
 *S*            147:          CMPA    #ASCII:CR
 *S*            148:          BNE     DSKREADACHUNKL1 B/ NO, KEEP COPYING
 *S*            149:          ;LDX    CODE+SDOS:IOBLOCKPTR YES, LINE MODE?
 *S*            150:          LDX     CODE+SDOS:IOBLOCKPTR
 *S*            151:          ;LDA    READA:LMFLAG,X ...?
 *S*            152:          LDAA    READA:LMFLAG,X
 *S*            153:          BNE     DSKREADACR  B/ YES, CR MARKS END OF TRANSFER
 *S*            154: DSKREADACHUNKL1  EQU         *
                155:          FIN
                156:          ;INC    TRANSFERCOUNT+1 DOWN COUNT # BYTES TO MOVE
C07A 7CAE9E     157:          INC     TRANSFERCOUNT+1
C07D 26D1       158:          BNE     DSKREADACHUNKL B/ MORE TO MOVE
  0000          159:          IF      M6809
 *S*            160:          STU     BUFFERPOINTER ENSURE BUFFER POINTER IS UP TO DATE IN CASE WE EXIT
                161:          FIN
                162:          ;INC    TRANSFERCOUNT
C07F 7CAE9D     163:          INC     TRANSFERCOUNT
C082 26CC       164:          BNE     DSKREADACHUNKL B/ MORE
C084 39         165:          RTS                 WITH CC=0 IF ALL BYTES SPECIFIED WERE COPIED




ASM/6800 1.4A0: C084 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 236; Form 13    DISK FILE/DEVICE DRIVER
SDOS6800.ASM
  C085          167: DSKREADANULL     ; RATS, ENCOUNTERED A NULL!
                168:          ;LDX    USERRETAPTR HAS THIS USER BEEN KILLED ?
C085 FEAF8E     169:          LDX     USERRETAPTR
                170:          ;LDD    M6800!M6801,X (FETCH HIS RETURN ADDRESS)
C088 E602       171:          LDAB    (M6800!M6801)+1,X
C08A A601       172:          LDAA    M6800!M6801,X
                173:          ;CMPD   #KILLPROGRAM (DOES PC POINT TO KILL PROGRAM?)
C08C 81B7       174:          CMPA    #(KILLPROGRAM)/256
C08E 2602       175:          BNE     MACRO:0014
C090 C1C4       176:          CMPB    #(KILLPROGRAM)&$FF
  C092          177: MACRO:0014
C092 270B       178:          BEQ     DSKREADANULL2 B/ YES, STOP IGNORING NULLS --> RELATIVELY QUICK EXIT!
                179:          ;LDX    CODE+SDOS:IOBLOCKPTR ACTUALCOUNT:=ACTUALCOUNT-1
C094 FEAE07     180:          LDX     CODE+SDOS:IOBLOCKPTR
C097 A609       181:          LDAA    READA:ACTUALCOUNT+1,X (WE CAN'T COPY THE NULL...
C099 2602       182:          BNE     DSKREADANULL1 TO THE USER'S BUFFER!)
                183:          ;DEC    READA:ACTUALCOUNT,X
C09B 6A08       184:          DEC     READA:ACTUALCOUNT,X
  C09D          185: DSKREADANULL1    EQU         *
                186:          ;DEC    READA:ACTUALCOUNT+1,X
C09D 6A09       187:          DEC     READA:ACTUALCOUNT+1,X
  C09F          188: DSKREADANULL2
                189:          ;JMP    DSKREADACHUNKL1 GO GRAB THE NEXT BYTE (JMP FOR SPEED)
C09F 7EC07A     190:          JMP     DSKREADACHUNKL1
                191: 
  C0A2          192: DSKREADACR       ; WE JUST SAW A CR IN LINE MODE
                193:          ;LDD    READA:ACTUALCOUNT,X ADJUST THE ACTUAL # BYTES XFERRED
C0A2 E609       194:          LDAB    (READA:ACTUALCOUNT)+1,X
C0A4 A608       195:          LDAA    READA:ACTUALCOUNT,X
C0A6 0D         196:          SEC                 (COUNT THE CR BYTE)
C0A7 F9AE9E     197:          ADCB    TRANSFERCOUNT+1 THESE GUYS...
C0AA B9AE9D     198:          ADCA    TRANSFERCOUNT WE DIDN'T ACTUALLY TRANSFER
                199:          ;STD    READA:ACTUALCOUNT,X UPDATE THE ACTUAL # OF BYTES XFERRED
C0AD E709       200:          STAB    (READA:ACTUALCOUNT)+1,X
C0AF A708       201:          STAA    READA:ACTUALCOUNT,X
                202:          ;LDD    USEDCOUNT   ADJUST THE ACTUAL # OF BYTES USED THIS TIME
C0B1 F6AEA0     203:          LDAB    USEDCOUNT+1
C0B4 B6AE9F     204:          LDAA    USEDCOUNT
C0B7 0D         205:          SEC                 (AGAIN, COUNT THE CR)
C0B8 F9AE9E     206:          ADCB    TRANSFERCOUNT+1 THESE GUYS WE DIDN'T TRANSFER




ASM/6800 1.4A0: C0BB SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 237; Form 13    DISK FILE/DEVICE DRIVER
SDOS6800.ASM
C0BB B9AE9D     207:          ADCA    TRANSFERCOUNT
                208:          ;STD    USEDCOUNT
C0BE F7AEA0     209:          STAB    USEDCOUNT+1
C0C1 B7AE9F     210:          STAA    USEDCOUNT
  0000          211:          IF      M6809
 *S*            212:          STU     BUFFERPOINTER ENSURE THAT BUFFER POINTER IS UP TO DATE
                213:          FIN
C0C4 8601       214:          LDAA    #1          RETURN WITH CC<>0...
C0C6 39         215:          RTS                 SINCE LINEMODE REQUEST WAS SATISFIED




ASM/6800 1.4A0: C0C6 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 238; Form 13    DISK FILE/DEVICE DRIVER
SDOS6800.ASM
                217: *
                218: *        ADJUSTCOLUMNCOUNT -- ADJUST COLUMNCOUNT ACCORDING TO (A)
                219: *                MASKS PARITY ON (A)
                220: *
  C0C7          221: ADJUSTCOLUMNCOUNT            EQU *
C0C7 847F       222:          ANDA    #ASCII:MASK DITCH THE PARITY BIT
                223:          ;CMPA   #ASCII:SPACE-1 A PRINTING CHARACTER ?
C0C9 811F       224:          CMPA    #ASCII:SPACE-1
C0CB 2214       225:          BHI     ADJUSTCOLBUMP B/ YEP, GO PROCESS
                226:          ;CMPA   #ASCII:CR   MUST BE A CONTROL CHARACTER
C0CD 810D       227:          CMPA    #ASCII:CR
C0CF 270C       228:          BEQ     ADJUSTCOLZERO B/ NEW LINE MARK, ZERO THE COLUMN COUNT
                229:          ;CMPA   #ASCII:BS   BACKSPACE ?
C0D1 8108       230:          CMPA    #ASCII:BS
C0D3 2714       231:          BEQ     ADJUSTCOLBS B/ YES, GO HANDLE
                232:          ;CMPA   #ASCII:HT   A TAB CHARACTER ?
C0D5 8109       233:          CMPA    #ASCII:HT
C0D7 2719       234:          BEQ     ADJUSTCOLTAB B/ YES, GO PROCESS
                235:          ;CMPA   #ASCII:FF   FORM FEED ?
C0D9 810C       236:          CMPA    #ASCII:FF
C0DB 2603       237:          BNE     ADJUSTCOLRTS B/ NO, LEAVE COLUMN COUNT ALONE
  C0DD          238: ADJUSTCOLZERO ; MUST ZERO THE COLUMN COUNT
                239:          ;CLR    COLUMNCOUNT CR --> ZERO THE COLUMN COUNTER
C0DD 7FAEA1     240:          CLR     COLUMNCOUNT
  C0E0          241: ADJUSTCOLRTS     EQU         *
C0E0 39         242:          RTS
                243: 
  C0E1          244: ADJUSTCOLBUMP    ; LOOKS LIKE WE SHOULD BUMP COLUMN COUNT
                245:          ;CMPA   #ASCII:RUBOUT ALL CODES > $20 ARE PRINTING CHARACTERS...
C0E1 817F       246:          CMPA    #ASCII:RUBOUT
C0E3 27FB       247:          BEQ     ADJUSTCOLRTS WITH THE EXCEPTION OF RUBOUT
                248:          ;INC    COLUMNCOUNT BUMP THE COLUMN COUNT (TOO BAD IF IT OVERFLOWS!)
C0E5 7CAEA1     249:          INC     COLUMNCOUNT
C0E8 39         250:          RTS
                251: 
C0E9 7DAEA1     252: ADJUSTCOLBS      TST         COLUMNCOUNT HANDLE BACKSPACE
C0EC 27F2       253:          BEQ     ADJUSTCOLRTS B/ AT COL 0, CANNOT BACKSPACE
                254:          ;DEC    COLUMNCOUNT ELSE BACK UP THE COLUMN COUNT
C0EE 7AAEA1     255:          DEC     COLUMNCOUNT
C0F1 39         256:          RTS




ASM/6800 1.4A0: C0F1 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 239; Form 13    DISK FILE/DEVICE DRIVER
SDOS6800.ASM
                257: 
  C0F2          258: ADJUSTCOLTAB     ;LDB        COLUMNCOUNT TAB SEEN
C0F2 F6AEA1     259:          LDAB    COLUMNCOUNT
                260:          ;ORB    #7          BUMP COLUMN COUNT TO NEXT MULTIPLE OF 8
C0F5 CA07       261:          ORAB    #7
C0F7 5C         262:          INCB
                263:          ;STB    COLUMNCOUNT
C0F8 F7AEA1     264:          STAB    COLUMNCOUNT
C0FB 39         265:          RTS




ASM/6800 1.4A0: C0FB SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 240; Form 13    DISK FILE/DEVICE DRIVER
SDOS6800.ASM
                267: *        SETUPFORWRITE -- SET UP FOR "WRITEA" OR "WRITEB"
                268: *        WORKS JUST LIKE SETUPFORREAD, EXCEPT THAT WRITEFLAG IS SET
                269: *
  C0FC          270: SETUPFORWRITE    EQU         *
C0FC 8601       271:          LDAA    #1          REMEMBER, THIS IS A WRITE!
C0FE B7AE9A     272:          STAA    WRITEFLAG
                273:          ;LDX    CODE+SDOS:IOBLOCKPTR GET SCBLK:WRBUF...
C101 FEAE07     274:          LDX     CODE+SDOS:IOBLOCKPTR
                275:          ;LDX    SCBLK:WRBUF,X AND COPY INTO BUFFERPOINTER
C104 EE04       276:          LDX     SCBLK:WRBUF,X
C106 2008       277:          BRA     SETUPFORREAD1
                278: *
                279: *        SETUPFORREAD -- COPY BUFFERADDRESS FROM IOBLOCK TO BUFFERPOINTER
                280: *                ALSO GETS FCB AND DISKINFO POINTERS FROM IOCB
                281: *                FINALLY, RESETS THE WRITEFLAG AND COPIES IOCB:COLCNT INTO COLUMNCOUNT
                282: *
  C108          283: SETUPFORREAD     EQU         *
                284:          ;CLR    WRITEFLAG   THIS IS A READ, REMEMBER?
C108 7FAE9A     285:          CLR     WRITEFLAG
  0000          286:          IF      READA:BUFFERP#READB:BUFFERP
 *S*            287:          ?SETUPFORREAD WON'T WORK?
                288:          FIN
                289:          ;LDX    CODE+SDOS:IOBLOCKPTR GET BUFFER POINTER FROM I/O BLOCK
C10B FEAE07     290:          LDX     CODE+SDOS:IOBLOCKPTR
                291:          ;LDX    READA:BUFFERP,X
C10E EE0A       292:          LDX     READA:BUFFERP,X
  C110          293: SETUPFORREAD1    EQU         *
C110 FFAE9B     294:          STX     BUFFERPOINTER
                295:          ;LDX    IOCBPOINTER AND SET UP THE COLUMNCOUNT
C113 FEAE09     296:          LDX     IOCBPOINTER
C116 A60C       297:          LDAA    IOCB:COLCNT,X IN CASE THIS IS AN ASCII READ OR WRITE
C118 B7AEA1     298:          STAA    COLUMNCOUNT
C11B 39         299:          RTS
                300: *
                301: *        GETFCBFROMIOCB -- SETS UP FCBPOINTER FROM IOCB
                302: *        PRESERVES (A) FOR DISK DRIVER CONTROL, STATUS CALLS
                303: *
  C11C          304: GETFCBFROMIOCB   EQU         *
                305:          ;LDX    IOCBPOINTER GRAB IOCB ADDRESS
C11C FEAE09     306:          LDX     IOCBPOINTER




ASM/6800 1.4A0: C11C SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 241; Form 13    DISK FILE/DEVICE DRIVER
SDOS6800.ASM
                307:          ;LDX    IOCB:FCB,X  COPY FCB ADDRESS OUT OF IOCB...
C11F EE07       308:          LDX     IOCB:FCB,X
C121 FFAEA6     309:          STX     FCBPOINTER  INTO A CONVENIENT PLACE
                310:          ;LDX    IOCBPOINTER JUST TO BE NICE
C124 FEAE09     311:          LDX     IOCBPOINTER
C127 39         312:          RTS




ASM/6800 1.4A0: C127 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 242; Form 13    DISK FILE/DEVICE DRIVER
SDOS6800.ASM
                314: *        CHECKREADDONE -- CHECKS TO SEE IF READB:MAXCOUNT = READB:ACTUALCOUNT
                315: *                RETURNS Z BIT SET IF EQUAL
                316: *                ...RESET IF NOT EQUAL
                317: *                RETURNS (A,B):=READB:MAXCOUNT-READB:ACTUALCOUNT
                318: *
  C128          319: CHECKREADDONE    EQU         *
  0000          320:          IF      READA:BUFFERP#READB:BUFFERP
 *S*            321:          ?CHECKREADDONE WON'T WORK?
                322:          FIN
                323:          ;LDX    CODE+SDOS:IOBLOCKPTR IS ACTUALCOUNT TRANSFERRED...
C128 FEAE07     324:          LDX     CODE+SDOS:IOBLOCKPTR
                325:          ;LDD    READB:MAXCOUNT,X = MAXCOUNT ?
C12B E60D       326:          LDAB    (READB:MAXCOUNT)+1,X
C12D A60C       327:          LDAA    READB:MAXCOUNT,X
                328:          ;SUBD   READB:ACTUALCOUNT,X (COMPUTE NUMBER OF BYTES LEFT TO TRANSFER)
C12F E009       329:          SUBB    (READB:ACTUALCOUNT)+1,X
C131 A208       330:          SBCA    READB:ACTUALCOUNT,X
  0001          331:          IF      M6800!M6801
C133 2601       332:          BNE     CHECKREADDONE1 B/ WE STILL NEED TO MOVE LOTSA BYTES
C135 5D         333:          TSTB                ... ?
  C136          334: CHECKREADDONE1   EQU         *
                335:          FIN
C136 39         336:          RTS
                337: *
                338: *        CHECKWRITEDONE -- CHECKS TO SEE IF WRBUF+WRLEN = BUFFERPOINTER
                339: *                RETURNS Z BIT SET IF EQUAL, RESET IF NOT EQUAL
                340: *                RETURNS (A,B):=WRBUF+WRLEN-BUFFERPOINTER (# BYTES LEFT TO WRITE)
                341: *
  C137          342: CHECKWRITEDONE   EQU         *
  0000          343:          IF      WRITEA:BUFFERP#WRITEB:BUFFERP
 *S*            344:          ?CHECKWRITEDONE WON'T WORK?
                345:          FIN
                346:          ;LDX    CODE+SDOS:IOBLOCKPTR FIND END OF WRBUF
C137 FEAE07     347:          LDX     CODE+SDOS:IOBLOCKPTR
                348:          ;LDD    SCBLK:WRBUF,X
C13A E605       349:          LDAB    (SCBLK:WRBUF)+1,X
C13C A604       350:          LDAA    SCBLK:WRBUF,X
                351:          ;ADDD   SCBLK:WRLEN,X
C13E EB07       352:          ADDB    (SCBLK:WRLEN)+1,X
C140 A906       353:          ADCA    SCBLK:WRLEN,X




ASM/6800 1.4A0: C140 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 243; Form 13    DISK FILE/DEVICE DRIVER
SDOS6800.ASM
                354:          ;SUBD   BUFFERPOINTER HAS BUFFERPOINTER ARRIVED THERE ?
C142 F0AE9C     355:          SUBB    BUFFERPOINTER+1
C145 B2AE9B     356:          SBCA    BUFFERPOINTER
  0001          357:          IF      M6800!M6801
C148 2601       358:          BNE     CHECKWRITEDONE1 B/ GO FIND OUT.
C14A 5D         359:          TSTB
  C14B          360: CHECKWRITEDONE1
                361:          FIN
C14B 39         362:          RTS




ASM/6800 1.4A0: C14B SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 244; Form 13    DISK FILE/DEVICE DRIVER
SDOS6800.ASM
                364: *
                365: *        DSKFWRITEB -- WRITE BINARY TO DISK FILE
                366: *
  C14C          367: DSKFWRITEB       EQU         *
                368:          ;JSR    DSKFIMPLIEDPOSITION HANDLE IMPLIED POSITIONING IF REQUESTED
C14C BDC2B8     369:          JSR     DSKFIMPLIEDPOSITION
C14F 2500       370:          BCS     *+2         IGNORE EOF ERROR IF GIVEN
C151 8DA9       371:          BSR     SETUPFORWRITE SO WE CAN MODIFY IT AS WE PLEASE
                372: *                AND GET FCB AND DISKINFO POINTERS
                373:          ;CLR    IOCB:COLCNT,X YOU SAY, "WRITE BINARY", I SAY "ZAP THE COLUMN COUNT"
C153 6F0C       374:          CLR     IOCB:COLCNT,X
                375:          ;JSR    UPDATEFILEDATE SET DATE OF FILE TO TODAY
C155 BDBD0C     376:          JSR     UPDATEFILEDATE
  C158          377: DSKFWRITEBL      ; WRITE BINARY BYTES TO DISK FILE
C158 8DDD       378:          BSR     CHECKWRITEDONE ARE ALL BYTES FROM BUFFER WRITTTEN ?
C15A 270C       379:          BEQ     DSKFWRITEBDONE B/ YES, ALL DONE WRITING BYTES
                380:          ;JSR    LOCATECURBYTE LOCATE THE BYTE WE WANT
C15C BDD2B1     381:          JSR     LOCATECURBYTE
C15F 8D21       382:          BSR     DSKWRITEBCHUNK COPY A CHUNK OF BYTES FROM THE BUFFER TO THE DISK
                383:          ;JSR    UPDATECURBYTEF ADJUST CURBYTE
C161 BDD5B9     384:          JSR     UPDATECURBYTEF
C164 24F2       385:          BCC     DSKFWRITEBL GO LOOK FOR MORE BYTES TO MOVE
C166 20F0       386:          BRA     DSKFWRITEBL IGNORE EOF ERROR
                387: 
  C168          388: DSKFWRITEBDONE   EQU         *
C168 0C39       389:          OKRTS               AND EXIT
                390: *
                391: *        DSKDWRITEB -- WRITE BINARY TO DISK FILE
                392: *
  C16A          393: DSKDWRITEB       EQU         *
                394:          ;JSR    DSKDIMPLIEDPOSITION HANDLE IMPLIED POSITIONING IF REQUESTED
C16A BDC513     395:          JSR     DSKDIMPLIEDPOSITION
                396:          ;JSR    SETUPFORWRITE AND SET UP DISKINFO POINTER
C16D BDC0FC     397:          JSR     SETUPFORWRITE
                398:          ;CLR    IOCB:COLCNT,X SINCE YOU ASKED FOR A WRITE BINARY
C170 6F0C       399:          CLR     IOCB:COLCNT,X
  C172          400: DSKDWRITEBL      EQU         *
C172 8DC3       401:          BSR     CHECKWRITEDONE ALL BYTES MOVED FROM BUFFER TO DISK ?
C174 27F2       402:          BEQ     DSKFWRITEBDONE B/ YES, QUIT NOW
                403:          ;JSR    LOCDSKD     LOCATE THE CHUNK OF BYTES TO WRITE INTO




ASM/6800 1.4A0: C176 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 245; Form 13    DISK FILE/DEVICE DRIVER
SDOS6800.ASM
C176 BDD5D5     404:          JSR     LOCDSKD
C179 8D07       405:          BSR     DSKWRITEBCHUNK GO COPY A CHUNK OF BYTES TO THE DISK
                406:          ;JSR    UPDATECURBYTED AND UPDATE THE POINTERS TELLING US WHERE WE ARE
C17B BDD5C6     407:          JSR     UPDATECURBYTED
C17E 24F2       408:          BCC     DSKDWRITEBL GO SEE IF SOME MORE WORK TO DO
C180 20F0       409:          BRA     DSKDWRITEBL IGNORE EOF ERROR




ASM/6800 1.4A0: C180 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 246; Form 13    DISK FILE/DEVICE DRIVER
SDOS6800.ASM
                411: *
                412: *        DSKWRITEBCHUNK -- WRITE A CHUNK OF BYTES FROM BUFFER TO DISK FILE
                413: *                PARAMETERS SPECIFYING THE CHUNK ARE SET UP BY LOCATECURBYTE
                414: *
  C182          415: DSKWRITEBCHUNK   EQU         *
                416:          ;LDX    IOCBPOINTER GET THE TARGET POINTER
C182 FEAE09     417:          LDX     IOCBPOINTER
  0001          418:          IF      M6800!M6801
                419:          ;LDX    IOCB:NEXTBYTE,X
C185 EE14       420:          LDX     IOCB:NEXTBYTE,X
C187 DF00       421:          STX     TOPOINTER
  0001          422:          ELSE    (M6809)
 *S*            423:          LDY     IOCB:NEXTBYTE,X
                424:          FIN
                425:          ;LDX    BUFFERPOINTER GET FROM POINTER TO (A,B)
C189 FEAE9B     426:          LDX     BUFFERPOINTER
                427:          ;LDD    USEDCOUNT   # BYTES TO MOVE
C18C F6AEA0     428:          LDAB    USEDCOUNT+1
C18F B6AE9F     429:          LDAA    USEDCOUNT
                430:          ;JSR    CODE+SDOS:BLOCKMOVE GO MOVE THE BYTES
C192 BDAE42     431:          JSR     CODE+SDOS:BLOCKMOVE
                432: *        NOTE: THIS USES SDOS ENTRY POINT VECTOR...
                433: *        SO THAT A PATCH TO ENTRY POINT VECTOR CAN SUPPLY A DIFFERENT...
                434: *        (PRESUMABLY MUCH FASTER) BLOCK MOVE ROUTINE OF ITS OWN!
C195 FFAE9B     435:          STX     BUFFERPOINTER UPDATE POINTER PAST COPIED BYTES
C198 39         436:          RTS




ASM/6800 1.4A0: C198 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 247; Form 13    DISK FILE/DEVICE DRIVER
SDOS6800.ASM
                438: *
                439: *        DSKFWRITEA -- WRITE ASCII TO DISK FILE
                440: *
  C199          441: DSKFWRITEA       EQU         *
                442:          ;JSR    DSKFIMPLIEDPOSITION HANDLE IMPLIED POSITIONING IF REQUESTED
C199 BDC2B8     443:          JSR     DSKFIMPLIEDPOSITION
C19C 2500       444:          BCS     *+2         IGNORE EOF ERROR IF GIVEN
                445:          ;JSR    SETUPFORWRITE SO WE CAN MODIFY IT AS WE PLEASE
C19E BDC0FC     446:          JSR     SETUPFORWRITE
                447: *                            AND SET UP FCB AND DISKINFO TABLE POINTERS
                448:          ;JSR    UPDATEFILEDATE TO MATCH TODAY'S DATE!
C1A1 BDBD0C     449:          JSR     UPDATEFILEDATE
  C1A4          450: DSKFWRITEAL      ; WRITE A BYTE TO DISK FILE
                451:          ;JSR    CHECKWRITEDONE ALL BYTES COPIED FROM BUFFER TO DISK FILE ?
C1A4 BDC137     452:          JSR     CHECKWRITEDONE
C1A7 270C       453:          BEQ     DSKFWRITEADONE B/ YES, ALL DONE WRITING BYTES
                454:          ;JSR    LOCATECURBYTE LOCATE THE BYTE WE WANT
C1A9 BDD2B1     455:          JSR     LOCATECURBYTE
C1AC 8D11       456:          BSR     DSKWRITEACHUNK WRITE A CHUNK OF BYTES FROM BUFFER TO DISK FILE
                457:          ;JSR    UPDATECURBYTEF ADJUST CURBYTE
C1AE BDD5B9     458:          JSR     UPDATECURBYTEF
C1B1 24F1       459:          BCC     DSKFWRITEAL GO SEE IF WE MUST STILL MOVE MORE BYTES
C1B3 20EF       460:          BRA     DSKFWRITEAL IGNORE EOF ERROR
                461: 
  C1B5          462: DSKFWRITEADONE   EQU         *
                463:          ;LDX    IOCBPOINTER RESET THE WRITE MODE FLAG
C1B5 FEAE09     464:          LDX     IOCBPOINTER
C1B8 B6AEA1     465:          LDAA    COLUMNCOUNT AND UPDATE THE COLUMN COUNTER
C1BB A70C       466:          STAA    IOCB:COLCNT,X
C1BD 0C39       467:          OKRTS               AND EXIT




ASM/6800 1.4A0: C1BD SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 248; Form 13    DISK FILE/DEVICE DRIVER
SDOS6800.ASM
                469: *
                470: *        DSKWRITEACHUNK -- WRITE A CHUNK OF ASCII BYTES TO A DISK SECTOR
                471: *                CHUNK PARAMETERS SET UP BY LOCATECURBYTE
                472: *
  C1BF          473: DSKWRITEACHUNK   EQU         *
  0001          474:          IF      M6800!M6801
                475:          ;LDD    USEDCOUNT   = # BYTES TO TRANSFER
C1BF F6AEA0     476:          LDAB    USEDCOUNT+1
C1C2 B6AE9F     477:          LDAA    USEDCOUNT
                478:          ;NEGD               MAKE EASY-TO-INCREMENT COUNTER
C1C5 40         479:          NEGA
C1C6 50         480:          NEGB
C1C7 8200       481:          SBCA    #0
                482:          ;STD    TRANSFERCOUNT
C1C9 F7AE9E     483:          STAB    TRANSFERCOUNT+1
C1CC B7AE9D     484:          STAA    TRANSFERCOUNT
                485:          ;LDX    IOCBPOINTER GET THE TARGET POINTER
C1CF FEAE09     486:          LDX     IOCBPOINTER
                487:          ;LDX    IOCB:NEXTBYTE,X
C1D2 EE14       488:          LDX     IOCB:NEXTBYTE,X
C1D4 DF00       489:          STX     TOPOINTER   AND SAVE IT
  C1D6          490: DSKWRITEACHUNKL  ; COPY BYTES FROM SECTOR TO BUFFER
                491:          ;LDX    BUFFERPOINTER
C1D6 FEAE9B     492:          LDX     BUFFERPOINTER
                493:          ;LDA    ,X+         COPY A BYTE...
C1D9 A600       494:          LDAA    0,X
C1DB 08         495:          INX
C1DC FFAE9B     496:          STX     BUFFERPOINTER
                497:          ;JSR    ADJUSTCOLUMNCOUNT NEED I SAY MORE ?
C1DF BDC0C7     498:          JSR     ADJUSTCOLUMNCOUNT
                499:          ;LDX    TOPOINTER   TO THE DATA SECTOR
C1E2 DE00       500:          LDX     TOPOINTER
                501:          ;STA    ,X+
C1E4 A700       502:          STAA    0,X
C1E6 08         503:          INX
C1E7 DF00       504:          STX     TOPOINTER
                505:          ;INC    TRANSFERCOUNT+1 DOWN COUNT # BYTES TO MOVE
C1E9 7CAE9E     506:          INC     TRANSFERCOUNT+1
C1EC 26E8       507:          BNE     DSKWRITEACHUNKL B/ MORE TO MOVE
                508:          ;INC    TRANSFERCOUNT




ASM/6800 1.4A0: C1EE SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 249; Form 13    DISK FILE/DEVICE DRIVER
SDOS6800.ASM
C1EE 7CAE9D     509:          INC     TRANSFERCOUNT
C1F1 26E3       510:          BNE     DSKWRITEACHUNKL B/ MORE
  0001          511:          ELSE    (M6809)
 *S*            512:          LDY     USEDCOUNT   = # BYTES TO MOVE
 *S*            513:          ;LDX    IOCBPOINTER GET TARGET POINTER TO (U)
 *S*            514:          LDX     IOCBPOINTER
 *S*            515:          LDU     IOCB:NEXTBYTE,X
 *S*            516:          ;LDX    BUFFERPOINTER SOURCE POINTER
 *S*            517:          LDX     BUFFERPOINTER
 *S*            518: DSKWRITEACHUNKL ; COPY BYTES FROM SECTOR TO USER SPACE BUFFER
 *S*            519:          ;LDA    ,X+         COPY A BYTE...
 *S*            520:          LDAA    0,X
 *S*            521:          INX
 *S*            522:          ;JSR    ADJUSTCOLUMNCOUNT NEED I SAY MORE?
 *S*            523:          JSR     ADJUSTCOLUMNCOUNT
 *S*            524:          ;STA    ,U+         ... TO TARGET SECTOR BUFFER
 *S*            525:          STAA    
 *S*            526:          LEAY    -1,Y        DOWN COUNT NUMBER OF BYTES TO MOVE
 *S*            527:          BNE     DSKWRITEACHUNKL B/ MORE BYTES TO MOVE!
 *S*            528:          STX     BUFFERPOINTER MAKE SURE BUFFERPOINTER IS UP TO DATE ON EXIT
                529:          FIN
C1F3 39         530:          RTS




ASM/6800 1.4A0: C1F3 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 250; Form 13    DISK FILE/DEVICE DRIVER
SDOS6800.ASM
                532: *
                533: *        DSKDWRITEA -- WRITE ASCII TO DISK DEVICE
                534: *
  C1F4          535: DSKDWRITEA       EQU         *
                536:          ;JSR    DSKDIMPLIEDPOSITION HANDLE IMPLIED POSITIONING IF REQUESTED
C1F4 BDC513     537:          JSR     DSKDIMPLIEDPOSITION
                538:          ;JSR    SETUPFORWRITE AND SET UP DISKINFO POINTER
C1F7 BDC0FC     539:          JSR     SETUPFORWRITE
  C1FA          540: DSKDWRITEAL      EQU         *
                541:          ;JSR    CHECKWRITEDONE ALL BYTES WRITTEN ?
C1FA BDC137     542:          JSR     CHECKWRITEDONE
C1FD 27B6       543:          BEQ     DSKFWRITEADONE B/ YES, QUIT NOW
                544:          ;JSR    LOCDSKD     GO FIGURE OUT THE BOUNDARIES OF THE CHUNK
C1FF BDD5D5     545:          JSR     LOCDSKD
C202 8DBB       546:          BSR     DSKWRITEACHUNK GO COPY THE BYTES TO A DISK SECTOR
                547:          ;JSR    UPDATECURBYTED UPDATE THE DISK DEVICE POINTERS
C204 BDD5C6     548:          JSR     UPDATECURBYTED
C207 24F1       549:          BCC     DSKDWRITEAL AND LOOP UNTIL ALL THE BYTES ARE COPIED
C209 20EF       550:          BRA     DSKDWRITEAL IGNORE EOF ERROR




ASM/6800 1.4A0: C209 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 251; Form 14    DISK FILE/DEVICE DRIVER
SDOS6800.ASM
                  2: *
                  3: *        TABLEBRANCH -- BRANCH THRU TABLE ON (A)
                  4: *        ENTERED WITH POINTER TO TABLE IN (X)
                  5: *        @X IS BYTE CONTAINING MINIMUM VALUE FOR (A)
                  6: *        @(X+1) IS BYTE CONTAINING MAXIMUM VALUE FOR (A) [ MUST BE < MIN + 64]
                  7: *        @(X+2) IS POINTER TO ROUTINE FOR MIN VALUE OF (A)
                  8: *        @(X+4) IS POINTER TO ROUTINE FOR MIN VALUE OF (A), + 1
                  9: *                ETC.
                 10: *        CONTROL IS RETURNED ONLY IF (A) IS NOT IN BOUNDS SPECIFIED BY TABLE
                 11: *
  C20B           12: TABLEBRANCH
                 13:          ;CMPA   ,X          < MIN VALUE?
C20B A100        14:          CMPA    0,X
C20D 251B        15:          BCS     TABLEBRANCHCANT B/ NOT IN RANGE FOR THIS TABLE
                 16:          ;CMPA   1,X         <= MAX VALUE?
C20F A101        17:          CMPA    1,X
C211 2217        18:          BHI     TABLEBRANCHCANT B/ NOT IN RANGE FOR THIS TABLE
                 19:          ;LEAS   2,S         MAKE RETURN ADDRESS GO AWAY...
  0000           20:          IF      2<0
 *S*             21:          RPT     -2
 *S*             22:          DES
                 23:          ELSE
  0002           24:          RPT     2
C213 31          25:          INS
                 26:          FIN
C215 A000        27:          SUBA    ,X          FORM 0-ORIGIN OFFSET INTO BRANCH TABLE
C217 48          28:          ASLA                ASSERT: CAN'T OVERFLOW OR SET THE SIGN BIT!
C218 16          29:          TAB
  0001           30:          IF      M6800!M6801
C219 4F          31:          CLRA                COMPUTE POINTER INTO TABLE
C21A DF00        32:          STX     TEMPX
                 33:          ;ADDD   TEMPX
C21C DB01        34:          ADDB    TEMPX+1
C21E 9900        35:          ADCA    TEMPX
                 36:          ;TDX
C220 9700        37:          STAA    TEMPA
C222 D701        38:          STAB    TEMPB
C224 DE00        39:          LDX     TEMPX
  0001           40:          ELSE    (M6809)
 *S*             41:          ;LEAX   B,X




ASM/6800 1.4A0: C224 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 252; Form 14    DISK FILE/DEVICE DRIVER
SDOS6800.ASM
 *S*             42:          IF      B<0
 *S*             43:          RPT     -B
 *S*             44:          DEX
 *S*             45:          ELSE
 *S*             46:          RPT     B
 *S*             47:          INX
 *S*             48:          FIN
                 49:          FIN
                 50:          ;JMP    [2,X]       GO TO ROUTINE
C226 EE02        51:          LDX     2,X
C228 6E00        52:          JMP     0,X
                 53: 
C22A 39          54: TABLEBRANCHCANT  RTS




ASM/6800 1.4A0: C22A SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 253; Form 14    DISK FILE/DEVICE DRIVER
SDOS6800.ASM
  C22B           56: DSKFSETDATE      ; SET DATE OF DISK FILE
                 57:          ;JSR    CHECKWRLEN  WRITE BUFFER FORMAT MATCHES CLOCK
C22B BDB8DB      58:          JSR     CHECKWRLEN
C22E 0006        59:          FDB     6
                 60:          ;LDX    SCBLK:WRBUF,X
C230 EE04        61:          LDX     SCBLK:WRBUF,X
                 62:          ;LDA    CONTROL:DATA+3,X FETCH NEW DAY NUMBER
C232 A603        63:          LDAA    CONTROL:DATA+3,X
C234 36          64:          PSHA                AND SAVE IT
                 65:          ;LDD    CONTROL:DATA+4,X FETCH MONTH AND YEAR NUMBER
C235 E605        66:          LDAB    (CONTROL:DATA+4)+1,X
C237 A604        67:          LDAA    CONTROL:DATA+4,X
                 68:          ;LDX    FCBPOINTER  THIS FCB, PLEASE...
C239 FEAEA6      69:          LDX     FCBPOINTER
                 70:          ;STD    FCB:MONTH,X SET MONTH AND YEAR
C23C E718        71:          STAB    (FCB:MONTH)+1,X
C23E A717        72:          STAA    FCB:MONTH,X
C240 32          73:          PULA                GET DAY NUMBER BACK
C241 A716        74:          STAA    FCB:DAY,X   AND STORE IT
  C243           75: DSKFSET1 ; MARK DIRECTORY ENTRY AS CHANGED
C243 A60A        76:          LDAA    FCB:FLAGS,X NOTE: SETTING DATE DOES NOT ALTER "BACKUP" BIT
C245 8A40        77:          ORAA    #FCBFLG::UPDATEDIR
C247 A70A        78:          STAA    FCB:FLAGS,X
C249 0C39        79:          OKRTS
                 80: 
  C24B           81: DSKFSETPROT      ; SET PROTECTION BITS
                 82:          ;JSR    CHECKWRLEN
C24B BDB8DB      83:          JSR     CHECKWRLEN
C24E 0001        84:          FDB     1           SINGLE BYTE WRITE BUFFER
                 85:          ;LDX    SCBLK:WRBUF,X GET POINTER TO WRITE BUFFER
C250 EE04        86:          LDX     SCBLK:WRBUF,X
C252 A600        87:          LDAA    CONTROL:DATA,X GET NEW PROTECTION BITS
                 88:          ;LDX    FCBPOINTER  WHICH FILE TO CHANGE
C254 FEAEA6      89:          LDX     FCBPOINTER
C257 A715        90:          STAA    FCB:PROT,X  CHANGE PROT AFTER UPDATEFILEDATE...
C259 20E8        91:          BRA     DSKFSET1    GO MARK DIRECTORY ENTRY AS CHANGED




ASM/6800 1.4A0: C259 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 254; Form 14    DISK FILE/DEVICE DRIVER
SDOS6800.ASM
                 93: *        DSKFCONTROL -- DO A CONTROL OPERATION ON DISK FILE
                 94: *
  C25B           95: DSKFCONTROL      EQU         *
                 96:          ;JSR    GETFCBFROMIOCB SET UP FCB POINTER
C25B BDC11C      97:          JSR     GETFCBFROMIOCB
                 98:          ;LDX    #DSKFCONTROL0 BRANCH ON STANDARD DISK FILE CONTROL OPERATIONS
C25E CEC26F      99:          LDX     #DSKFCONTROL0
                100:          ;JSR    TABLEBRANCH
C261 BDC20B     101:          JSR     TABLEBRANCH
                102:          ;LDX    #DSKFCONTROL10 BRANCH ON DISK FILE SPECIFIC CONTROL OPERATIONS
C264 CEC275     103:          LDX     #DSKFCONTROL10
                104:          ;JSR    TABLEBRANCH
C267 BDC20B     105:          JSR     TABLEBRANCH
  C26A          106: ERRILLDEVOP      EQU         *
                107:          ;JSR    ERRET       NO, NOT A VALID CONTROL REQUEST
C26A BDB1F6     108:          JSR     ERRET
C26D 040A       109:          FDB     ERR:ILLDEVICEOP
                110: 
  C26F          111: DSKFCONTROL0 ; BRANCH TABLE FOR STANDARD DISK FILE CONTROL OPERATIONS
C26F 0001       112:          FCB     CC:POSITION,CC:DUMPBUFFERS
C271 C2E3       113:          #DSKFPOSITION       CC:POSITION
C273 DADA       114:          #DSKDUMPBUFFERS     CC:DUMPBUFFERS
                115: 
  C275          116: DSKFCONTROL10    ; BRANCH TABLE FOR DISK FILE SPECIFIC CONTROL OPERATIONS
C275 1013       117:          FCB     CC:SETFILEDATE,CC:POSITIONTOEND
C277 C22B       118:          #DSKFSETDATE        CC:SETFILEDATE
C279 C24B       119:          #DSKFSETPROT        CC:SETFILEPROT
C27B C295       120:          #DSKFSETSIZE        CC:SETFILESIZE
C27D C2CE       121:          #DSKFPOSITIONTOEND  CC:POSITIONTOEND
                122: *        #DSKFTABS           CC:TABS
                123: *        #DSKDFSETACTBLOCK   CC:SETACTBLOCK
                124: 
  C27F          125: DSKFOPENERRORFILE            ; INTENDED FOR USE ONLY WITH SYSIOCB
                126:          ;LDX    ERRFCBPOINTER DOES ERROR FILE EXIST?
C27F FEAF0C     127:          LDX     ERRFCBPOINTER
C282 270C       128:          BEQ     ERRNOERRMSGS B/ NO ERROR FILE!?
C284 FFAEA6     129:          STX     FCBPOINTER  RECORD FCB ADDRESS OF ERROR FILE
                130:          ;INC    FCB:REFCOUNT,X SINCE THIS IS SECOND TIME WE'LL OPEN...
C287 6C0B       131:          INC     FCB:REFCOUNT,X
                132:          ;LDX    FCB:DISKINFO,X SET UP DISKINFO POINTER...




ASM/6800 1.4A0: C289 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 255; Form 14    DISK FILE/DEVICE DRIVER
SDOS6800.ASM
C289 EE00       133:          LDX     FCB:DISKINFO,X
C28B DF06       134:          STX     DCBPOINTER  JUST LIKE A CALL TO OPEN WOULD HAVE DONE
                135:          ;JMP    DSKFOPENSYSIOCB DO REST LIKE A NORMAL OPEN
C28D 7EBDFC     136:          JMP     DSKFOPENSYSIOCB
                137: 
  C290          138: ERRNOERRMSGS     EQU         *
                139:          ;JSR    ERRET
C290 BDB1F6     140:          JSR     ERRET
C293 03FE       141:          FDB     ERR:NOERRORMSGS




ASM/6800 1.4A0: C293 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 256; Form 14    DISK FILE/DEVICE DRIVER
SDOS6800.ASM
  C295          143: DSKFSETSIZE      ; SET SIZE OF DISK FILE TO CURRENT FILE POSITION
                144:          ;JSR    UPDATEFILEDATE CHANGE DATE OF FILE
C295 BDBD0C     145:          JSR     UPDATEFILEDATE
                146:          ;LDX    IOCBPOINTER GET FILE SIZE DESIRED
C298 FEAE09     147:          LDX     IOCBPOINTER
                148:          ;LDD    IOCB:CURBYTE,X
C29B E60E       149:          LDAB    (IOCB:CURBYTE)+1,X
C29D A60D       150:          LDAA    IOCB:CURBYTE,X
                151:          ;PSHD
C29F 37         152:          PSHB
C2A0 36         153:          PSHA
                154:          ;LDD    IOCB:CURBYTE+2,X
C2A1 E610       155:          LDAB    (IOCB:CURBYTE+2)+1,X
C2A3 A60F       156:          LDAA    IOCB:CURBYTE+2,X
                157:          ;LDX    FCBPOINTER  STUFF INTO FCB
C2A5 FEAEA6     158:          LDX     FCBPOINTER
                159:          ;STD    FCB:FILESIZE+2,X
C2A8 E714       160:          STAB    (FCB:FILESIZE+2)+1,X
C2AA A713       161:          STAA    FCB:FILESIZE+2,X
                162:          ;PULD
C2AC 32         163:          PULA
C2AD 33         164:          PULB
                165:          ;STD    FCB:FILESIZE,X
C2AE E712       166:          STAB    (FCB:FILESIZE)+1,X
C2B0 A711       167:          STAA    FCB:FILESIZE,X
C2B2 8D53       168:          BSR     DSKFEOFTEST SET EOF FLAG
C2B4 2500       169:          BCS     *+2         SURPRESS EOF ERROR THAT WILL OCCUR
  C2B6          170: DSKFIMPLIEDPOSOKRTS
C2B6 0C39       171:          OKRTS
                172: 
  C2B8          173: DSKFIMPLIEDPOSITION          ; HANDLE IMPLIED CC:POSITION BEFORE READ/WRITE
                174:          ;JSR    GETFCBFROMIOCB THIS IS REQUIRED BEFORE WE DO ANYTHING...
C2B8 BDC11C     175:          JSR     GETFCBFROMIOCB
                176:          ;LDB    #RWPOSITION:SCLEN IS SYSCALL BLOCK LONG ENOUGH TO INCLUDE A POSITION 
C2BB C612       177:          LDAB    #RWPOSITION:SCLEN
                178:          ;JSR    CHECKSCLEN  ...?
C2BD BDB8FC     179:          JSR     CHECKSCLEN
C2C0 25F4       180:          BCS     DSKFIMPLIEDPOSOKRTS B/ NO, SO DON'T POSITION THE FILE
                181:          ;LDD    RW:POSITION,X YES, GET THE DESIRED FILE POSITION
C2C2 E60F       182:          LDAB    (RW:POSITION)+1,X




ASM/6800 1.4A0: C2C4 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 257; Form 14    DISK FILE/DEVICE DRIVER
SDOS6800.ASM
C2C4 A60E       183:          LDAA    RW:POSITION,X
                184:          ;PSHD
C2C6 37         185:          PSHB
C2C7 36         186:          PSHA
                187:          ;LDD    RW:POSITION+2,X
C2C8 E611       188:          LDAB    (RW:POSITION+2)+1,X
C2CA A610       189:          LDAA    RW:POSITION+2,X
C2CC 2026       190:          BRA     DSKFPOSITION1 GO DO FILE POSITION, GIVE EOF ERROR IF PAST EOF
                191: 
  C2CE          192: DSKFPOSITIONTOEND ; POSITION FILE TO END
C2CE 8D04       193:          BSR     DSKFPOSITIONTOEND1
C2D0 2500       194:          BCS     *+2         IGNORE EOF ERROR IF IT OCCURS
C2D2 0C39       195:          OKRTS
                196: 
  C2D4          197: DSKFPOSITIONTOEND1           ; SUBROUTINE FOR DSKFPOSITIONTOEND
                198:          ;LDX    FCBPOINTER  GET FILESIZE, SO WE CAN...
C2D4 FEAEA6     199:          LDX     FCBPOINTER
                200:          ;LDD    FCB:FILESIZE,X POSITION TO EOF
C2D7 E612       201:          LDAB    (FCB:FILESIZE)+1,X
C2D9 A611       202:          LDAA    FCB:FILESIZE,X
                203:          ;PSHD
C2DB 37         204:          PSHB
C2DC 36         205:          PSHA
                206:          ;LDD    FCB:FILESIZE+2,X
C2DD E614       207:          LDAB    (FCB:FILESIZE+2)+1,X
C2DF A613       208:          LDAA    FCB:FILESIZE+2,X
C2E1 2011       209:          BRA     DSKFPOSITION1 GO DO POSITIONING
                210: 
  C2E3          211: DSKFPOSITION     ; SET IOCB:CURBYTE TO POSITION:DIST
                212:          ;JSR    CHECKWRLEN  MAKE SURE THERE ARE AT LEAST...
C2E3 BDB8DB     213:          JSR     CHECKWRLEN
C2E6 0004       214:          FDB     4           BYTES IN WRITE LENGTH
                215:          ;LDX    SCBLK:WRBUF,X
C2E8 EE04       216:          LDX     SCBLK:WRBUF,X
                217:          ;LDD    CONTROL:DATA,X COPY POSITION DATA TO (TOS,TOS-1),(A,B)
C2EA E601       218:          LDAB    (CONTROL:DATA)+1,X
C2EC A600       219:          LDAA    CONTROL:DATA,X
                220:          ;PSHD
C2EE 37         221:          PSHB
C2EF 36         222:          PSHA




ASM/6800 1.4A0: C2EF SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 258; Form 14    DISK FILE/DEVICE DRIVER
SDOS6800.ASM
                223:          ;LDD    CONTROL:DATA+2,X
C2F0 E603       224:          LDAB    (CONTROL:DATA+2)+1,X
C2F2 A602       225:          LDAA    CONTROL:DATA+2,X
  C2F4          226: DSKFPOSITION1    ; ENTRY POINT FOR DSKFCLOSE
                227:          ;LDX    IOCBPOINTER NOW COPY TO IOCB:CURBYTE
C2F4 FEAE09     228:          LDX     IOCBPOINTER
                229:          ;CLR    IOCB:LOCATEDF,X MARK "LOCATECURBYTE REQ'D"
C2F7 6F11       230:          CLR     IOCB:LOCATEDF,X
                231:          ;CLR    IOCB:COLCNT,X ALSO, ZERO THE COLUMN COUNTER
C2F9 6F0C       232:          CLR     IOCB:COLCNT,X
                233:          ;STD    IOCB:CURBYTE+2,X
C2FB E710       234:          STAB    (IOCB:CURBYTE+2)+1,X
C2FD A70F       235:          STAA    IOCB:CURBYTE+2,X
                236:          ;PULD
C2FF 32         237:          PULA
C300 33         238:          PULB
                239:          ;STD    IOCB:CURBYTE,X
C301 E70E       240:          STAB    (IOCB:CURBYTE)+1,X
C303 A70D       241:          STAA    IOCB:CURBYTE,X
C305 2B28       242:          BMI     ERRBADPOSITION B/ POSITION < 0!!
                243: *        BRA     DSKFEOFTEST GO TEST FOR EOF HIT




ASM/6800 1.4A0: C305 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 259; Form 14    DISK FILE/DEVICE DRIVER
SDOS6800.ASM
                245: *
                246: *        DSKFEOFTEST -- TEST FOR CURBYTE >= FILESIZE
                247: *                SET EOFFLAG IF SO, TAKE ERRET
                248: *
  C307          249: DSKFEOFTEST      ; TEST TO SEE IF POSITION OFF END OF FILE
                250:          ;LDX    FCBPOINTER  NOW MOVE FCB:FILESIZE...
C307 FEAEA6     251:          LDX     FCBPOINTER
                252:          ;LDD    FCB:FILESIZE,X TO (TOS-2),(TOS-1),(TOS),(A)
C30A E612       253:          LDAB    (FCB:FILESIZE)+1,X
C30C A611       254:          LDAA    FCB:FILESIZE,X
                255:          ;PSHD
C30E 37         256:          PSHB
C30F 36         257:          PSHA
                258:          ;LDD    FCB:FILESIZE+2,X
C310 E614       259:          LDAB    (FCB:FILESIZE+2)+1,X
C312 A613       260:          LDAA    FCB:FILESIZE+2,X
                261:          ;LDX    IOCBPOINTER COMPUTE FCB:FILESIZE-IOCB:CURBYTE-1
C314 FEAE09     262:          LDX     IOCBPOINTER
                263:          ;CLR    IOCB:EOFFLAG,X ASSUME NOT EOF
C317 6F0B       264:          CLR     IOCB:EOFFLAG,X
C319 0D         265:          SEC                 (THE -1 IS BECAUSE FILESIZE IS 1 ORIGIN)
C31A E210       266:          SBCB    IOCB:CURBYTE+3,X I.E., CHECK IF IOCB:CURBYTE >= FCB:FILESIZE
C31C A20F       267:          SBCA    IOCB:CURBYTE+2,X
                268:          ;PULD
C31E 32         269:          PULA
C31F 33         270:          PULB
C320 E20E       271:          SBCB    IOCB:CURBYTE+1,X
C322 A20D       272:          SBCA    IOCB:CURBYTE,X
  C324          273: DSKFEOFTESTROL   ; ENTRY POINT FOR DSKDEOFTEST
C324 690B       274:          ROL     IOCB:EOFFLAG,X A BORROW BIT IN CARRY --> EOF
C326 2602       275:          BNE     ERREOFHIT   B/ RAN OFF END OF FILE
C328 0C39       276:          OKRTS
                277: 
  C32A          278: ERREOFHIT        EQU         *
                279:          ;JSR    ERRET
C32A BDB1F6     280:          JSR     ERRET
C32D 03E9       281:          FDB     ERR:EOFHIT
                282: 
  C32F          283: ERRBADPOSITION   EQU         *
                284:          ;CLR    IOCB:CURBYTE,X RESET POINTER TO FILE START




ASM/6800 1.4A0: C32F SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 260; Form 14    DISK FILE/DEVICE DRIVER
SDOS6800.ASM
C32F 6F0D       285:          CLR     IOCB:CURBYTE,X
                286:          ;CLR    IOCB:CURBYTE+1,X
C331 6F0E       287:          CLR     IOCB:CURBYTE+1,X
                288:          ;CLR    IOCB:CURBYTE+2,X
C333 6F0F       289:          CLR     IOCB:CURBYTE+2,X
                290:          ;CLR    IOCB:CURBYTE+3,X
C335 6F10       291:          CLR     IOCB:CURBYTE+3,X
C337 8DCE       292:          BSR     DSKFEOFTEST IN CASE THE FILE IS EMPTY
                293:          ;JSR    ERRET
C339 BDB1F6     294:          JSR     ERRET
C33C 03EC       295:          FDB     ERR:BADPOSITION




ASM/6800 1.4A0: C33C SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 261; Form 14    DISK FILE/DEVICE DRIVER
SDOS6800.ASM
  C33E          297: DSKFGETFILESIZE  ; GET FILE SIZE BACK FROM FILE
                298:          ;JSR    CHECKRDLEN  MAKE SURE THERE ARE 4 BYTES IN THE READ-BACK BUFFER
C33E BDB89F     299:          JSR     CHECKRDLEN
C341 0004       300:          FDB     4
                301:          ;LDX    FCBPOINTER  COPY FCB:FILESIZE...
C343 FEAEA6     302:          LDX     FCBPOINTER
                303:          ;LDD    FCB:FILESIZE,X TO (TOS,TOS-1), (A,B)
C346 E612       304:          LDAB    (FCB:FILESIZE)+1,X
C348 A611       305:          LDAA    FCB:FILESIZE,X
                306:          ;PSHD
C34A 37         307:          PSHB
C34B 36         308:          PSHA
                309:          ;LDD    FCB:FILESIZE+2,X
C34C E614       310:          LDAB    (FCB:FILESIZE+2)+1,X
C34E A613       311:          LDAA    FCB:FILESIZE+2,X
C350 2012       312:          BRA     DSKFGETPOS4 GO COPY TO READ BACK BUFFER
                313: *
  C352          314: DSKFGETPOS       ; GET POSITION BACK FROM FILE
                315:          ;JSR    CHECKRDLEN  MAKE SURE THERE IS A 4 BYTE BUFFER
C352 BDB89F     316:          JSR     CHECKRDLEN
C355 0004       317:          FDB     4
                318:          ;LDX    IOCBPOINTER COPY IOCB:CURBYTE...
C357 FEAE09     319:          LDX     IOCBPOINTER
                320:          ;LDD    IOCB:CURBYTE,X TO (TOS,TOS-1), (A,B)
C35A E60E       321:          LDAB    (IOCB:CURBYTE)+1,X
C35C A60D       322:          LDAA    IOCB:CURBYTE,X
                323:          ;PSHD
C35E 37         324:          PSHB
C35F 36         325:          PSHA
                326:          ;LDD    IOCB:CURBYTE+2,X
C360 E610       327:          LDAB    (IOCB:CURBYTE+2)+1,X
C362 A60F       328:          LDAA    IOCB:CURBYTE+2,X
  C364          329: DSKFGETPOS4      EQU         *
                330:          ;LDX    CODE+SDOS:IOBLOCKPTR AND THEN TO TARGET BUFFER
C364 FEAE07     331:          LDX     CODE+SDOS:IOBLOCKPTR
                332:          ;LDX    SCBLK:RDBUF,X GET POINTER TO PLACE TO PUT POSITION
C367 EE0A       333:          LDX     SCBLK:RDBUF,X
C369 E703       334:          STAB    STATUS:DATA+3,X
  C36B          335: DSKFGETPOS3      ; STORE 3 BYTES INTO READ-BACK BUFFER
C36B A702       336:          STAA    STATUS:DATA+2,X




ASM/6800 1.4A0: C36B SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 262; Form 14    DISK FILE/DEVICE DRIVER
SDOS6800.ASM
                337:          ;PULD
C36D 32         338:          PULA
C36E 33         339:          PULB
                340:          ;STD    STATUS:DATA+0,X
C36F E701       341:          STAB    (STATUS:DATA+0)+1,X
C371 A700       342:          STAA    STATUS:DATA+0,X
C373 0C39       343:          OKRTS




ASM/6800 1.4A0: C373 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 263; Form 14    DISK FILE/DEVICE DRIVER
SDOS6800.ASM
  C375          345: DSKDGETBADLSN    ; READ BACK THE LAST BAD LSN
                346:          ;JSR    CHECKRDLEN  MAKE SURE WE HAVE ROOM FOR REPLY
C375 BDB89F     347:          JSR     CHECKRDLEN
C378 0003       348:          FDB     3
                349:          ;LDX    DCBPOINTER  COPY LAST BAD LSN TO (TOS,TOS-1,A)
C37A DE06       350:          LDX     DCBPOINTER
                351:          ;LDD    DSKINFO:BADLSN,X
C37C E62E       352:          LDAB    (DSKINFO:BADLSN)+1,X
C37E A62D       353:          LDAA    DSKINFO:BADLSN,X
                354:          ;PSHD
C380 37         355:          PSHB
C381 36         356:          PSHA
C382 A62F       357:          LDAA    DSKINFO:BADLSN+2,X
C384 C6FF       358:          LDAB    #$FF        FORGET WE HAD A BAD LSN
C386 E72D       359:          STAB    DSKINFO:BADLSN,X
C388 E72E       360:          STAB    DSKINFO:BADLSN+1,X
C38A E72F       361:          STAB    DSKINFO:BADLSN+2,X
  C38C          362: DSKFGETPOS3A     EQU         *
                363:          ;LDX    CODE+SDOS:IOBLOCKPTR GET POINTER TO READ BACK BUFFER
C38C FEAE07     364:          LDX     CODE+SDOS:IOBLOCKPTR
                365:          ;LDX    SCBLK:RDBUF,X
C38F EE0A       366:          LDX     SCBLK:RDBUF,X
C391 20D8       367:          BRA     DSKFGETPOS3 GO STORE 3 BYTES INTO READ-BACK BUFFER
                368: 
  C393          369: DSKFGETPARAMS    ; GET FILE "DEVICE" PARAMETERS
                370:          ;JSR    CHECKRDLEN  = SECTOR SIZE, NUMBER OF SECTORS PER CLUSTER
C393 BDB89F     371:          JSR     CHECKRDLEN
C396 0003       372:          FDB     2+1         2 BYTES FOR SECTOR SIZE; 1 FOR # SECTORS PER CLUSTER
                373:          ;LDX    DCBPOINTER  GET POINTER TO TABLE
C398 DE06       374:          LDX     DCBPOINTER
                375:          ;LDD    DSKINFO:NBPS,X GRAB SECTOR SIZE
C39A E60A       376:          LDAB    (DSKINFO:NBPS)+1,X
C39C A609       377:          LDAA    DSKINFO:NBPS,X
                378:          ;PSHD
C39E 37         379:          PSHB
C39F 36         380:          PSHA
C3A0 A611       381:          LDAA    DSKINFO:NSPC,X GET CLUSTER SIZE
C3A2 20E8       382:          BRA     DSKFGETPOS3A




ASM/6800 1.4A0: C3A2 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 264; Form 14    DISK FILE/DEVICE DRIVER
SDOS6800.ASM
                384: *
                385: *        DSKFSTATUS -- DO A STATUS READ ON DISK FILE
                386: *
  C3A4          387: DSKFSTATUS       EQU         *
                388:          ;JSR    GETFCBFROMIOCB SET UP FCB POINTER
C3A4 BDC11C     389:          JSR     GETFCBFROMIOCB
                390:          ;LDX    #DSKFSTATUS0 BRANCH TABLE FOR STANDARD DISK FILE STATUS OPERATIONS
C3A7 CEC3B6     391:          LDX     #DSKFSTATUS0
                392:          ;JSR    TABLEBRANCH
C3AA BDC20B     393:          JSR     TABLEBRANCH
                394:          ;LDX    #DSKFSTATUS10 BRANCH TABLE FOR DISK FILE SPECIFIC STATUS
C3AD CEC3C4     395:          LDX     #DSKFSTATUS10
                396:          ;JSR    TABLEBRANCH
C3B0 BDC20B     397:          JSR     TABLEBRANCH
                398:          ;JMP    ERRILLDEVOP
C3B3 7EC26A     399:          JMP     ERRILLDEVOP
                400: 
  C3B6          401: DSKFSTATUS0      ; BRANCH TABLE FOR STANDARD DISK FILE STATUS OPERATIONS
C3B6 0005       402:          FCB     SC:GETPOS,SC:GETPARAMS
C3B8 C352       403:          #DSKFGETPOS         SC:GETPOS
C3BA C457       404:          #DSKFGETCOL         SC:GETCOL
C3BC C46A       405:          #DSKFGETEOF         SC:GETEOF
C3BE C33E       406:          #DSKFGETFILESIZE    SC:GETFILESIZE
C3C0 C44E       407:          #DSKFGETTYPE        SC:GETTYPE
C3C2 C393       408:          #DSKFGETPARAMS      SC:GETPARAMS
                409: 
  C3C4          410: DSKFSTATUS10     ; BRANCH TABLE FOR DISK FILE SPECIFIC OPERATIONS
C3C4 1011       411:          FCB     SC:GETFILEDATE,SC:GETFILEPROT
C3C6 C422       412:          #DSKFGETDATE        SC:GETFILEDATE
C3C8 C416       413:          #DSKFGETPROT        SC:GETFILEPROT




ASM/6800 1.4A0: C3C8 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 265; Form 14    DISK FILE/DEVICE DRIVER
SDOS6800.ASM
                415: *
                416: *        DSKDSTATUS -- DO A STATUS READ ON DISK DEVICE
                417: *
  C3CA          418: DSKDSTATUS       EQU         *
                419:          ;LDX    #DSKDSTATUS0 BRANCH TABLE FOR DISK DEVICE STANDARD STATUS CALLS
C3CA CEC3DE     420:          LDX     #DSKDSTATUS0
                421:          ;JSR    TABLEBRANCH
C3CD BDC20B     422:          JSR     TABLEBRANCH
                423:          ;LDX    #DSKDSTATUS10 BRANCH TABLE FOR DISK DEVICE SPECIFIC STATUS CALLS
C3D0 CEC3EC     424:          LDX     #DSKDSTATUS10
                425:          ;JSR    TABLEBRANCH
C3D3 BDC20B     426:          JSR     TABLEBRANCH
                427:          ;LDX    DCBPOINTER  I DON'T RECOGNIZE THE STATUS CALL...
C3D6 DE06       428:          LDX     DCBPOINTER
                429:          ;LDX    DCB:DRIVER,X SO LET I/O PACKAGE DISK DRIVER HANDLE IT
C3D8 EE07       430:          LDX     DCB:DRIVER,X
                431:          ;JMP    [DRIVER:DISKSTATUS,X] WITH (A) = STATUS REQUEST CODE
C3DA EE08       432:          LDX     DRIVER:DISKSTATUS,X
C3DC 6E00       433:          JMP     0,X
                434: 
  C3DE          435: DSKDSTATUS0 ; BRANCH TABLE FOR DISK DEVICE STANDARD STATUS CALLS
C3DE 0005       436:          FCB     SC:GETPOS,SC:GETPARAMS
C3E0 C352       437:          #DSKFGETPOS         SC:GETPOS
C3E2 C457       438:          #DSKFGETCOL         SC:GETCOL
C3E4 C46A       439:          #DSKFGETEOF         SC:GETEOF
C3E6 C26A       440:          #ERRILLDEVOP        SC:GETFILESIZE CAN'T WE DO THIS BETTER?
C3E8 C445       441:          #DSKDGETTYPE        SC:GETTYPE
C3EA C476       442:          #DSKDGETPARAMS      SC:GETPARAMS
                443: 
  C3EC          444: DSKDSTATUS10     ; BRANCH TABLE FOR DISK DEVICE SPECIFIC STATUS CALLS
C3EC 1011       445:          FCB     SC:GETLASTBADLSN,SC:GETERRORSTATS
C3EE C375       446:          #DSKDGETBADLSN      SC:GETLASTBADLSN
C3F0 C3F2       447:          #DSKDGETERRORSTATS  SC:GETERRORSTATS




ASM/6800 1.4A0: C3F0 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 266; Form 14    DISK FILE/DEVICE DRIVER
SDOS6800.ASM
  C3F2          449: DSKDGETERRORSTATS ; GET DISK DEVICE ERROR STATISTICS
                450:          ;JSR    CHECKRDLEN  ENOUGH ROOM IN REPLY BUFFER FOR ERROR STATS?
C3F2 BDB89F     451:          JSR     CHECKRDLEN
C3F5 0012       452:          FDB     (DSKINFO:ERRLSN+LSN:SIZE)-DSKINFO:SEEKERRCNT
  0001          453:          IF      M6800!M6801
                454:          ;LDD    SCBLK:RDBUF,X GET TARGET ADDRESS
C3F7 E60B       455:          LDAB    (SCBLK:RDBUF)+1,X
C3F9 A60A       456:          LDAA    SCBLK:RDBUF,X
                457:          ;STD    TOPOINTER
C3FB D701       458:          STAB    TOPOINTER+1
C3FD 9700       459:          STAA    TOPOINTER
  0001          460:          ELSE    (M6809)
 *S*            461:          LDY     SCBLK:RDBUF,X
                462:          FIN
  0001          463:          IF      M6800!M6801
                464:          ;LDD    DCBPOINTER  FIGURE OUT THE SOURCE ADDRESS
C3FF D607       465:          LDAB    DCBPOINTER+1
C401 9606       466:          LDAA    DCBPOINTER
                467:          ;ADDD   #DSKINFO:SEEKERRCNT
C403 CB30       468:          ADDB    #(DSKINFO:SEEKERRCNT)&$FF
C405 8900       469:          ADCA    #(DSKINFO:SEEKERRCNT)/256
                470:          ;STD    FROMPOINTER
C407 D703       471:          STAB    FROMPOINTER+1
C409 9702       472:          STAA    FROMPOINTER
                473:          ;LDD    SCBLK:RPLEN,X HOW MANY BYTES TO MOVE...
C40B E609       474:          LDAB    (SCBLK:RPLEN)+1,X
C40D A608       475:          LDAA    SCBLK:RPLEN,X
                476:          ;LDX    FROMPOINTER
C40F DE02       477:          LDX     FROMPOINTER
  0001          478:          ELSE    (M6809)
 *S*            479:          ;LDD    SCBLK:RPLEN,X HOW MANY BYTES TO MOVE...
 *S*            480:          LDAB    (SCBLK:RPLEN)+1,X
 *S*            481:          LDAA    SCBLK:RPLEN,X
 *S*            482:          ;LDX    DCBPOINTER  = WHERE TO GET BYTES FROM
 *S*            483:          LDX     DCBPOINTER
 *S*            484:          ;LEAX   DSKINFO:SEEKERRCNT,X
 *S*            485:          IF      DSKINFO:SEEKERRCNT<0
 *S*            486:          RPT     -DSKINFO:SEEKERRCNT
 *S*            487:          DEX
 *S*            488:          ELSE




ASM/6800 1.4A0: C40F SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 267; Form 14    DISK FILE/DEVICE DRIVER
SDOS6800.ASM
 *S*            489:          RPT     DSKINFO:SEEKERRCNT
 *S*            490:          INX
 *S*            491:          FIN
                492:          FIN
                493:          ;JSR    CODE+SDOS:BLOCKMOVE USE ENTRY POINT VECTOR SO BLOCKMOVE CAN BE REPLAC
C411 BDAE42     494:          JSR     CODE+SDOS:BLOCKMOVE
C414 0C39       495:          OKRTS




ASM/6800 1.4A0: C414 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 268; Form 14    DISK FILE/DEVICE DRIVER
SDOS6800.ASM
  C416          497: DSKFGETPROT      ; GET FILE PROTECTION/BACKUP BITS
                498:          ;JSR    CHECKRDLEN  MAKE SURE REPLY BUFFER IS LARGE ENOUGH!
C416 BDB89F     499:          JSR     CHECKRDLEN
C419 0001       500:          FDB     1
                501:          ;LDX    FCBPOINTER  THIS FILE...
C41B FEAEA6     502:          LDX     FCBPOINTER
C41E A615       503:          LDAA    FCB:PROT,X
C420 203F       504:          BRA     DSKFGETCOL1 GO STORE FLAG DATA IN USER BUFFER
                505: 
  C422          506: DSKFGETDATE ; GET CREATION DATE INFORMATION IN CLOCK FORMAT
                507:          ;JSR    CHECKRDLEN  MUST BE 6 BYTES
C422 BDB89F     508:          JSR     CHECKRDLEN
C425 0006       509:          FDB     6
                510:          ;LDX    FCBPOINTER  THIS FILE...
C427 FEAEA6     511:          LDX     FCBPOINTER
C42A A616       512:          LDAA    FCB:DAY,X
C42C 36         513:          PSHA
                514:          ;LDD    FCB:MONTH,X AND THE YEAR
C42D E618       515:          LDAB    (FCB:MONTH)+1,X
C42F A617       516:          LDAA    FCB:MONTH,X
                517:          ;LDX    CODE+SDOS:IOBLOCKPTR = USER SYSCALL BLOCK
C431 FEAE07     518:          LDX     CODE+SDOS:IOBLOCKPTR
                519:          ;LDX    SCBLK:RDBUF,X WHERE TO PUT REPLY
C434 EE0A       520:          LDX     SCBLK:RDBUF,X
                521:          ;STD    STATUS:DATA+4,X
C436 E705       522:          STAB    (STATUS:DATA+4)+1,X
C438 A704       523:          STAA    STATUS:DATA+4,X
C43A 32         524:          PULA
C43B A703       525:          STAA    STATUS:DATA+3,X
                526:          ;CLR    STATUS:DATA,X SET TIME TO MIDNITE
C43D 6F00       527:          CLR     STATUS:DATA,X
                528:          ;CLR    STATUS:DATA+1,X
C43F 6F01       529:          CLR     STATUS:DATA+1,X
                530:          ;CLR    STATUS:DATA+2,X
C441 6F02       531:          CLR     STATUS:DATA+2,X
C443 0C39       532:          OKRTS
                533: 
  C445          534: DSKDGETTYPE      ; GET DISK DEVICE TYPE
                535:          ;JSR    CHECKRDLEN  MAKE SURE READ-BACK BUFFER HAS ENOUGH ROOM
C445 BDB89F     536:          JSR     CHECKRDLEN




ASM/6800 1.4A0: C448 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 269; Form 14    DISK FILE/DEVICE DRIVER
SDOS6800.ASM
C448 0001       537:          FDB     1
                538: *
                539: *        IT SHOULD WORK THIS WAY! (SDOS1.2)
                540: *        LDX     DCBPOINTER
                541: *        LDA     DCB:DVTYP,X
                542: *
C44A 8601       543:          LDAA    #DVTYP.DISK
C44C 2013       544:          BRA     DSKFGETCOL1
                545: 
  C44E          546: DSKFGETTYPE      ; GET (DISK) FILE DEVICE TYPE
                547:          ;JSR    CHECKRDLEN  MAKE SURE READ-BACK BUFFER HAS ENOUGH ROOM
C44E BDB89F     548:          JSR     CHECKRDLEN
C451 0001       549:          FDB     1
C453 8600       550:          LDAA    #DVTYP.FILE
C455 200A       551:          BRA     DSKFGETCOL1




ASM/6800 1.4A0: C455 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 270; Form 14    DISK FILE/DEVICE DRIVER
SDOS6800.ASM
  C457          553: DSKFGETCOL       ; GET COLUMN COUNTER FOR FILE
                554:          ;JSR    CHECKRDLEN  MAKE SURE READ BACK BUFFER HAS ONE BYTE
C457 BDB89F     555:          JSR     CHECKRDLEN
C45A 0001       556:          FDB     1
                557:          ;LDX    IOCBPOINTER
C45C FEAE09     558:          LDX     IOCBPOINTER
C45F A60C       559:          LDAA    IOCB:COLCNT,X
  C461          560: DSKFGETCOL1      EQU         *
                561:          ;LDX    CODE+SDOS:IOBLOCKPTR
C461 FEAE07     562:          LDX     CODE+SDOS:IOBLOCKPTR
                563:          ;LDX    SCBLK:RDBUF,X GET ADDRESS OF PLACE TO STORE COLUMN
C464 EE0A       564:          LDX     SCBLK:RDBUF,X
C466 A700       565:          STAA    STATUS:DATA,X
C468 0C39       566:          OKRTS
                567: 
  C46A          568: DSKFGETEOF       ; GET END OF FILE FLAG FOR FILE
                569:          ;JSR    CHECKRDLEN  ENSURE AT LEAST 1 BYTE READ BUFFER
C46A BDB89F     570:          JSR     CHECKRDLEN
C46D 0001       571:          FDB     1
                572:          ;LDX    IOCBPOINTER
C46F FEAE09     573:          LDX     IOCBPOINTER
C472 A60B       574:          LDAA    IOCB:EOFFLAG,X
C474 20EB       575:          BRA     DSKFGETCOL1
                576: 
  C476          577: DSKDGETPARAMS    ; GET DISK DEVICE PARAMETERS
                578:          ;JSR    CHECKRDLEN  MAKE SURE THERE'S ENOUGH SPACE TO READ TYPE DATA BACK
C476 BDB89F     579:          JSR     CHECKRDLEN
C479 0008       580:          FDB     DSKINFO:NCYL+1-DSKINFO:NBPS+1
  0001          581:          IF      M6800!M6801
                582:          ;LDX    SCBLK:RDBUF,X GET POINTER TO READ-BACK BUFFER
C47B EE0A       583:          LDX     SCBLK:RDBUF,X
C47D DF00       584:          STX     TOPOINTER   SET UP TO COPY DISKINFO PHYSICAL DISK DATA
  0001          585:          ELSE    (M6809)
 *S*            586:          LDY     SCBLK:RDBUF,X GET POINTER TO TARGET BUFFER
                587:          FIN
                588:          ;LDX    DCBPOINTER  GET POINTER TO SOURCE BUFFER
C47F DE06       589:          LDX     DCBPOINTER
                590:          ;LEAX   DSKINFO:NBPS,X
  0000          591:          IF      DSKINFO:NBPS<0
 *S*            592:          RPT     -DSKINFO:NBPS




ASM/6800 1.4A0: C47F SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 271; Form 14    DISK FILE/DEVICE DRIVER
SDOS6800.ASM
 *S*            593:          DEX
                594:          ELSE
  0009          595:          RPT     DSKINFO:NBPS
C481 08         596:          INX
                597:          FIN
                598:          ;LDD    #DSKINFO:NCYL+1-DSKINFO:NBPS+1 = BYTE COUNT TO COPY
C48A C608       599:          LDAB    #(DSKINFO:NCYL+1-DSKINFO:NBPS+1)&$FF
C48C 8600       600:          LDAA    #(DSKINFO:NCYL+1-DSKINFO:NBPS+1)/256
                601:          ;JSR    CODE+SDOS:BLOCKMOVE MOVE THE DATA TO USERS BUFFER
C48E BDAE42     602:          JSR     CODE+SDOS:BLOCKMOVE
C491 0C39       603:          OKRTS               ALL DONE!




ASM/6800 1.4A0: C491 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 272; Form 14    DISK FILE/DEVICE DRIVER
SDOS6800.ASM
                605: *        DSKDSETMAPALGORITHM -- SETS DSKINFO:MAPALGORITHM TO SPECIFIED VALUE
                606: *
  C493          607: DSKDSETMAPALGORITHM          EQU *
                608:          ;JSR    CHECKWRLEN  MAKE SURE AT LEAST 2 BYTES IN WRITE BUFFER
C493 BDB8DB     609:          JSR     CHECKWRLEN
C496 0002       610:          FDB     2
                611:          ;LDX    SCBLK:WRBUF,X GET POINTER TO MAPALGORITHM DESIRED
C498 EE04       612:          LDX     SCBLK:WRBUF,X
                613:          ;LDD    CONTROL:DATA,X GET DESIRED MAP ALGORITHM NUMBER
C49A E601       614:          LDAB    (CONTROL:DATA)+1,X
C49C A600       615:          LDAA    CONTROL:DATA,X
                616:          ;LDX    DCBPOINTER  UPDATE THE DISKINFO TABLE
C49E DE06       617:          LDX     DCBPOINTER
C4A0 6D27       618:          TST     DSKINFO:DIRFCB,X IS THIS DRIVE DISMOUNTED ?
C4A2 2624       619:          BNE     ERRDISKMOUNTED B/ NO, CAN'T CHANGE MAP ALGORITHM UNLESS DISMOUNTED!
                620: *
                621: *        DSKDSETMAPALGDUMP -- CHECK TO SEE IF DUMPBUFFERS IS REQUIRED...
                622: *        BEFORE WE SET THE MAP ALGORITHM
                623: *        (A,B) CONTAINS NEW MAP ALGORITHM
                624: *        (X) = DCBPOINTER
                625: *
  C4A4          626: DSKDSETMAPALGDUMP            EQU *
                627:          ;CMPD   DSKINFO:MAPALGORITHM,X SAME MAP ALGORITHM AS LAST TIME ?
C4A4 A116       628:          CMPA    DSKINFO:MAPALGORITHM,X
C4A6 2602       629:          BNE     MACRO:0015
C4A8 E117       630:          CMPB    (DSKINFO:MAPALGORITHM)+1,X
  C4AA          631: MACRO:0015
C4AA 271A       632:          BEQ     DSKDSETMAPALGRTS B/ YES, DON'T NEED TO DO ANYTHING!
  C4AC          633: DSKDSETMAPALG0   ; MUST DUMP BUFFERS BEFORE CHANGING MAPALGORITHM
                634:          ;PSHD               SAVE NEW MAP ALGORITHM
C4AC 37         635:          PSHB
C4AD 36         636:          PSHA
                637:          ;JSR    DSKDUMPBUFFERS USING OLD ALGORITHM
C4AE BDDADA     638:          JSR     DSKDUMPBUFFERS
C4B1 2405       639:          BCC     DSKDSETMAPALG1 B/ NO ERRORS
                640:          ;LEAS   2,S         ERROR OCCURRED! FORGET NEW MAP ALGORITHM
  0000          641:          IF      2<0
 *S*            642:          RPT     -2
 *S*            643:          DES
                644:          ELSE




ASM/6800 1.4A0: C4B1 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 273; Form 14    DISK FILE/DEVICE DRIVER
SDOS6800.ASM
  0002          645:          RPT     2
C4B3 31         646:          INS
                647:          FIN
                648:          ;JMP    ERRORED     AND RETURN TO CALLER
C4B5 7EB209     649:          JMP     ERRORED
                650: 
  C4B8          651: DSKDSETMAPALG1   ; BUFFERS ARE DUMPED
                652:          ;PULD               RETRIEVE NEW MAP ALGORITHM
C4B8 32         653:          PULA
C4B9 33         654:          PULB
  C4BA          655: DSKDSETMAPALG2   ; ENTRY POINT FOR DISK DISMOUNT
                656:          ;LDX    DCBPOINTER
C4BA DE06       657:          LDX     DCBPOINTER
                658:          ;STD    DSKINFO:MAPALGORITHM,X UPATE THE TABLE TO REFLECT NEW ALGORITHM NUMBE
C4BC E717       659:          STAB    (DSKINFO:MAPALGORITHM)+1,X
C4BE A716       660:          STAA    DSKINFO:MAPALGORITHM,X
                661:          ;JSR    MARKINVALID MARK ALL SECTORS IN POOL FROM DISK AS INVALID
C4C0 BDC653     662:          JSR     MARKINVALID
                663:          ;JSR    FORGETLASTBADLSN MAKE LAST BAD LSN DATA DISAPPEAR
C4C3 BDC589     664:          JSR     FORGETLASTBADLSN
  C4C6          665: DSKDSETMAPALGRTS EQU         *
C4C6 0C39       666:          OKRTS
                667: 
  C4C8          668: ERRDISKMOUNTED   EQU         *
                669:          ;JSR    ERRET
C4C8 BDB1F6     670:          JSR     ERRET
C4CB 03FC       671:          FDB     ERR:DISKMOUNTED




ASM/6800 1.4A0: C4CB SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 274; Form 14    DISK FILE/DEVICE DRIVER
SDOS6800.ASM
                673: *
                674: *        DSKDOPEN -- OPEN THE DISK DEVICE
                675: *
  C4CD          676: DSKDOPEN EQU     *
                677:          ;LDX    DCBPOINTER  IS THE DISK MOUNTED ?
C4CD DE06       678:          LDX     DCBPOINTER
C4CF A627       679:          LDAA    DSKINFO:DIRFCB,X ... ?
C4D1 2604       680:          BNE     DSKDOPEN1   B/ YES, USE MAP ALGORITHM SPECIFIED BY DISK
C4D3 C601       681:          LDAB    #1          NO, DEFAULT TO MAPALGORITHM :0001
C4D5 8DCD       682:          BSR     DSKDSETMAPALGDUMP GO SET THE MAP ALGORITHM
  C4D7          683: DSKDOPEN1        ; NOW SET UP THE IOCB
                684:          ;LDX    IOCBPOINTER
C4D7 FEAE09     685:          LDX     IOCBPOINTER
                686:          ;LDD    #0
C4DA C600       687:          LDAB    #(0)&$FF
C4DC 8600       688:          LDAA    #(0)/256
C4DE A70C       689:          STAA    IOCB:COLCNT,X ZERO THE COLUMN COUNT
                690:          ;STD    IOCB:CURBYTE,X SET FILE POSITION TO START OF DISK
C4E0 E70E       691:          STAB    (IOCB:CURBYTE)+1,X
C4E2 A70D       692:          STAA    IOCB:CURBYTE,X
                693:          ;STD    IOCB:CURBYTE+2,X
C4E4 E710       694:          STAB    (IOCB:CURBYTE+2)+1,X
C4E6 A70F       695:          STAA    IOCB:CURBYTE+2,X
                696:          ;STD    IOCB:DRDSI,X FLAG 'NO DATA SECTOR READ'
C4E8 E713       697:          STAB    (IOCB:DRDSI)+1,X
C4EA A712       698:          STAA    IOCB:DRDSI,X
C4EC 4C         699:          INCA                = LDAA #1
C4ED A711       700:          STAA    IOCB:DISKWRITELOCKED,X MUST "UNLOCK" BEFORE ANY WRITES
C4EF 2055       701:          BRA     DSKDEOFTEST GO COMPUTE CURLSN




ASM/6800 1.4A0: C4EF SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 275; Form 14    DISK FILE/DEVICE DRIVER
SDOS6800.ASM
                703: *        DSKDCONTROL -- DO A CONTROL OPERATION ON THE DISK DEVICE
                704: *
  C4F1          705: DSKDCONTROL      EQU         *
                706:          ;LDX    #DSKDCONTROL0 BRANCH TABLE FOR DISK DEVICE STANDARD CONTROL OPERATORS
C4F1 CEC505     707:          LDX     #DSKDCONTROL0
                708:          ;JSR    TABLEBRANCH
C4F4 BDC20B     709:          JSR     TABLEBRANCH
                710:          ;LDX    #DSKDCONTROL10 BRANCH TABLE FOR DISK DEVICE SPECIFIC CONTROL OPERATIO
C4F7 CEC50B     711:          LDX     #DSKDCONTROL10
                712:          ;JSR    TABLEBRANCH
C4FA BDC20B     713:          JSR     TABLEBRANCH
  C4FD          714: DSKDCONTROL1     ; RE-ENTRY POINT FOR "DSKDDISMOUNT"
                715:          ;LDX    DCBPOINTER  NOT ANY CONTROL OPERATION I RECOGNIZE...
C4FD DE06       716:          LDX     DCBPOINTER
                717:          ;LDX    DCB:DRIVER,X SO LET I/O PACKAGE HANDLE IT
C4FF EE07       718:          LDX     DCB:DRIVER,X
                719:          ;JMP    [DRIVER:DISKCONTROL,X] WITH (A) = CONTROL CODE
C501 EE0A       720:          LDX     DRIVER:DISKCONTROL,X
C503 6E00       721:          JMP     0,X
                722: 
  C505          723: DSKDCONTROL0     ; BRANCH TABLE FOR DISK DEVICE STANDARD CONTROL OPERATIONS
C505 0001       724:          FCB     CC:POSITION,CC:DUMPBUFFERS
C507 C526       725:          #DSKDPOSITION       CC:POSITION
C509 DADA       726:          #DSKDUMPBUFFERS     CC:DUMPBUFFERS
                727: 
  C50B          728: DSKDCONTROL10    ; BRANCH TABLE FOR DISK DEVICE SPECIFIC CONTROL OPERATIONS
C50B 1012       729:          FCB     CC:UNLOCKDISK,CC:SETMAPALGORITHM
C50D C582       730:          #DSKDUNLOCK         CC:UNLOCKDISK
C50F C5A6       731:          #DSKDDISMOUNT       CC:DISMOUNTDISK
C511 C493       732:          #DSKDSETMAPALGORITHM CC:SETMAPALGORITHM




ASM/6800 1.4A0: C511 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 276; Form 14    DISK FILE/DEVICE DRIVER
SDOS6800.ASM
                734: *        DSKDIMPLIEDPOSITION -- DO IMPLIED POSITIONING ON DISK DEVICE, IF REQUESTED
                735: *
  C513          736: DSKDIMPLIEDPOSITION
                737:          ;LDB    #RWPOSITION:SCLEN DOES SYSCALL BLOCK CONTAIN FILE POSITION ?
C513 C612       738:          LDAB    #RWPOSITION:SCLEN
                739:          ;JSR    CHECKSCLEN  ...?
C515 BDB8FC     740:          JSR     CHECKSCLEN
C518 256D       741:          BCS     DSKDIMPLIEDPOSOKRTS B/ NO, DON'T POSITION DISK DEVICE
                742:          ;LDD    RW:POSITION+2,X GET, GET THE POSITION DESIRED
C51A E611       743:          LDAB    (RW:POSITION+2)+1,X
C51C A610       744:          LDAA    RW:POSITION+2,X
                745:          ;PSHD
C51E 37         746:          PSHB
C51F 36         747:          PSHA
                748:          ;LDD    RW:POSITION,X
C520 E60F       749:          LDAB    (RW:POSITION)+1,X
C522 A60E       750:          LDAA    RW:POSITION,X
C524 2011       751:          BRA     DSKDPOSITION1 GO SET POSITION OF DISK DEVICE AND CAUSE EOF IF PAST EN
                752: *
                753: *        DSKDPOSITION -- DO POSITIONING ON DISK DEVICE
                754: *
  C526          755: DSKDPOSITION     EQU         *
                756:          ;JSR    CHECKWRLEN  MUST HAVE AT LEAST 4 BYTES OF POSITION DATA
C526 BDB8DB     757:          JSR     CHECKWRLEN
C529 0004       758:          FDB     4
                759:          ;LDX    SCBLK:WRBUF,X GET POINTER TO POSITIONING DATA
C52B EE04       760:          LDX     SCBLK:WRBUF,X
                761:          ;LDD    CONTROL:DATA+2,X COPY DESIRED POSITION TO (A,B,TOS,TOS-1)
C52D E603       762:          LDAB    (CONTROL:DATA+2)+1,X
C52F A602       763:          LDAA    CONTROL:DATA+2,X
                764:          ;PSHD
C531 37         765:          PSHB
C532 36         766:          PSHA
                767:          ;LDD    CONTROL:DATA+0,X
C533 E601       768:          LDAB    (CONTROL:DATA+0)+1,X
C535 A600       769:          LDAA    CONTROL:DATA+0,X
  C537          770: DSKDPOSITION1    ; ENTRY POINT FOR DSKDIMPLIEDPOSITION
                771:          ;LDX    IOCBPOINTER NOW COPY DESIRED POSITION INTO CURBYTE
C537 FEAE09     772:          LDX     IOCBPOINTER
                773:          ;STD    IOCB:CURBYTE,X




ASM/6800 1.4A0: C53A SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 277; Form 14    DISK FILE/DEVICE DRIVER
SDOS6800.ASM
C53A E70E       774:          STAB    (IOCB:CURBYTE)+1,X
C53C A70D       775:          STAA    IOCB:CURBYTE,X
                776:          ;PULD
C53E 32         777:          PULA
C53F 33         778:          PULB
                779:          ;STD    IOCB:CURBYTE+2,X
C540 E710       780:          STAB    (IOCB:CURBYTE+2)+1,X
C542 A70F       781:          STAA    IOCB:CURBYTE+2,X
                782:          ;CLR    IOCB:COLCNT,X ZERO THE COLUMN COUNTER
C544 6F0C       783:          CLR     IOCB:COLCNT,X
                784: *
                785: *        DSKDEOFTEST -- COMPUTE "EOFFLAG" AND CURLSN
                786: *
  C546          787: DSKDEOFTEST      EQU         *
                788:          ;LDX    DCBPOINTER  SET CURLSN = CURBYTE / (2^LOG2NBPS)
C546 DE06       789:          LDX     DCBPOINTER
C548 E618       790:          LDAB    DSKINFO:LOG2NBPS,X I.E., THE DESIRED SECTOR NUMBER ON THE DISK
                791:          ;LDX    IOCBPOINTER FIRST, SET (A,CURLSN) := CURBYTE
C54A FEAE09     792:          LDX     IOCBPOINTER
C54D A610       793:          LDAA    IOCB:CURBYTE+3,X
C54F A704       794:          STAA    IOCB:CURLSN+2,X
C551 A60F       795:          LDAA    IOCB:CURBYTE+2,X
C553 A703       796:          STAA    IOCB:CURLSN+1,X
C555 A60E       797:          LDAA    IOCB:CURBYTE+1,X
C557 A702       798:          STAA    IOCB:CURLSN,X
C559 A60D       799:          LDAA    IOCB:CURBYTE,X
  C55B          800: DSKDEOFTESTL     ; DIVIDE CURLSN BY 2^1
C55B 44         801:          LSRA                NOW, SET CURLSN := CURLSN / (2^LOG2NBPS)
C55C 6602       802:          ROR     IOCB:CURLSN,X
C55E 6603       803:          ROR     IOCB:CURLSN+1,X
C560 6604       804:          ROR     IOCB:CURLSN+2,X
C562 5A         805:          DECB                DOWN COUNT # RIGHT SHIFTS TO MAKE
C563 26F6       806:          BNE     DSKDEOFTESTL B/ MUST RIGHT SHIFT SOME MORE
                807:          ;CLR    IOCB:BYTECOUNT,X FORCE LOCATION OF NEXT BYTE AGAIN
C565 6F16       808:          CLR     IOCB:BYTECOUNT,X
                809:          ;CLR    IOCB:BYTECOUNT+1,X
C567 6F17       810:          CLR     IOCB:BYTECOUNT+1,X
                811:          ;CLR    IOCB:EOFFLAG,X ASSUME WE'RE NOT AT EOF
C569 6F0B       812:          CLR     IOCB:EOFFLAG,X
                813:          ;LDX    DCBPOINTER  NOW DECIDE IF WE'RE AT EOF ON DISK DEVICE




ASM/6800 1.4A0: C56B SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 278; Form 14    DISK FILE/DEVICE DRIVER
SDOS6800.ASM
C56B DE06       814:          LDX     DCBPOINTER
C56D A61B       815:          LDAA    DSKINFO:NLSN,X I.E., IF CURLSN >= NLSN...
C56F 36         816:          PSHA                I.E., IF 0 > NLSN - CURLSN - 1...
                817:          ;LDD    DSKINFO:NLSN+1,X I.E., IF NLSN - CURLSN CAUSES A BORROW
C570 E61D       818:          LDAB    (DSKINFO:NLSN+1)+1,X
C572 A61C       819:          LDAA    DSKINFO:NLSN+1,X
                820:          ;LDX    IOCBPOINTER SUBTRACT CURLSN, LOOKING FOR BORROW
C574 FEAE09     821:          LDX     IOCBPOINTER
C577 0D         822:          SEC                 THIS DOES THE "...- 1" PART
C578 E204       823:          SBCB    IOCB:CURLSN+2,X
C57A A203       824:          SBCA    IOCB:CURLSN+1,X
C57C 32         825:          PULA
C57D A202       826:          SBCA    IOCB:CURLSN,X
                827:          ;JMP    DSKFEOFTESTROL CARRY NOW CONTAINS BORROW BIT; GO SAVE IT
C57F 7EC324     828:          JMP     DSKFEOFTESTROL
                829: *
                830: *        DSKDUNLOCK -- UNLOCK THE DISK DEVICE WRITE PROTECT
                831: *
  C582          832: DSKDUNLOCK       EQU         *
                833:          ;LDX    IOCBPOINTER TURN THE WRITE LOCK FLAG OFF
C582 FEAE09     834:          LDX     IOCBPOINTER
                835:          ;CLR    IOCB:DISKWRITELOCKED,X
C585 6F11       836:          CLR     IOCB:DISKWRITELOCKED,X
                837: *
                838: *        DSKDCLOSE -- CLOSE A DISK DEVICE
                839: *
  C587          840: DSKDCLOSE        EQU         *
  C587          841: DSKDIMPLIEDPOSOKRTS          ; NO IMPLIED POSITION REQUIRED
C587 0C39       842:          OKRTS




ASM/6800 1.4A0: C587 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 279; Form 14    DISK FILE/DEVICE DRIVER
SDOS6800.ASM
                844: *        FORGETLASTBADLSN -- RESET DSKINFO:BADLSN TO :FFFFFF
                845: *
  C589          846: FORGETLASTBADLSN
                847:          ;LDX    DCBPOINTER
C589 DE06       848:          LDX     DCBPOINTER
C58B 86FF       849:          LDAA    #$FF        FORGET ANY LAST BAD LSN
C58D A72D       850:          STAA    DSKINFO:BADLSN,X
C58F A72E       851:          STAA    DSKINFO:BADLSN+1,X
C591 A72F       852:          STAA    DSKINFO:BADLSN+2,X
C593 39         853:          RTS
                854: *
                855: *        ERRFCBOPENQ -- TEST FOR ERRORMSGS.SYS FCB SET UP ON DISK "DCBPOINTER"
                856: *        RETURN CARRY RESET IF ERRORMSGS.SYS FCB SET UP ON DISK "DCBPOINTER"
                857: *        ELSE RETURN WITH CARRY SET
                858: *
  C594          859: ERRFCBOPENQ
                860:          ;LDX    ERRFCBPOINTER IS ERR FCB SET UP AT ALL?
C594 FEAF0C     861:          LDX     ERRFCBPOINTER
C597 270B       862:          BEQ     ERRFCBOPENERRRTS B/ NOT OPEN
                863:          ;LDX    FCB:DISKINFO,X ARE ERRORMESSAGES ON CURRENTLY SELECTED DRIVE ?
C599 EE00       864:          LDX     FCB:DISKINFO,X
C59B 9C06       865:          CPX     DCBPOINTER  ...
C59D 2605       866:          BNE     ERRFCBOPENERRRTS B/ NO, LEAVE ERROR MESSAGE FILE ALONE
                867:          ;LDX    ERRFCBPOINTER THIS WILL BE CONVENIENT FOR CALLER
C59F FEAF0C     868:          LDX     ERRFCBPOINTER
C5A2 0C39       869:          OKRTS
                870: 
  C5A4          871: ERRFCBOPENERRRTS ; ERROR MSG FCB NOT OPEN TO THIS DRIVE
C5A4 0D39       872:          ERRORRTS




ASM/6800 1.4A0: C5A4 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 280; Form 14    DISK FILE/DEVICE DRIVER
SDOS6800.ASM
                874: *
                875: *        DSKDDISMOUNT -- DUMP ALL DISK DEPENDENT DATA BACK TO DISK
                876: *        RELEASES ALL FCBS ATTACHED TO DISK
                877: *        ALSO ZEROS DISKINFO'S IN RDSI'S
                878: *        IF DISK I/O ERROR, LEAVE "DISK MOUNTED"
                879: *
  C5A6          880: DSKDDISMOUNT     ; DISMOUNT A DISK DRIVE
                881: *        FIRST, MAKE SURE THERE ARE NO OPEN FILES!
C5A6 B6AF0A     882:          LDAA    NFCBS       # FCBS TO SEARCH
C5A9 9704       883:          STAA    COUNT
                884:          ;LDX    CODE+SDOS:CONFIGURATION NOW SCAN ALL THE FCBS
C5AB FEAE03     885:          LDX     CODE+SDOS:CONFIGURATION
                886:          ;LDD    [CNFG:IOCBPOINTERS,X] = ADDRESS OF LAST FCB + FCB:SIZE
C5AE EE04       887:          LDX     CNFG:IOCBPOINTERS,X
C5B0 E601       888:          LDAB    1,X
C5B2 A600       889:          LDAA    0,X
  C5B4          890: DSKDDISMOUNTL    ; CHECK NEXT FCB TO SEE IF OPEN TO THIS DRIVE
                891:          ;SUBD   #FCB:SIZE   FIND NEXT FCB
C5B4 C01A       892:          SUBB    #(FCB:SIZE)&$FF
C5B6 8200       893:          SBCA    #(FCB:SIZE)/256
                894:          ;STD    FCBPOINTER
C5B8 F7AEA7     895:          STAB    FCBPOINTER+1
C5BB B7AEA6     896:          STAA    FCBPOINTER
                897:          ;LDX    FCBPOINTER  IS THIS FCB ACTIVE ?
C5BE FEAEA6     898:          LDX     FCBPOINTER
                899:          ;LDA    FCB:REFCOUNT,X ...?
C5C1 A60B       900:          LDAA    FCB:REFCOUNT,X
C5C3 2722       901:          BEQ     DSKDDISMOUNT0 B/ NO, IGNORE IT!
                902:          ;LDX    FCB:DISKINFO,X IS THIS FCB FOR DISK BEING DISMOUNTED?
C5C5 EE00       903:          LDX     FCB:DISKINFO,X
C5C7 9C06       904:          CPX     DCBPOINTER  ...?
C5C9 261C       905:          BNE     DSKDDISMOUNT0 B/ NOPE, IGNORE IT
                906:          ;CMPA   #1          IS IT A SYSTEM FILE OPEN ON SOME I/O CHANNEL ?
C5CB 8101       907:          CMPA    #1
C5CD 227F       908:          BHI     ERRFILEISOPEN (REF COUNT > 1 ?)
                909:          ;LDX    DSKINFO:DIRFCB,X NO, DIRECTORY FCB FOR THIS DRIVE ?
C5CF EE27       910:          LDX     DSKINFO:DIRFCB,X
C5D1 BCAEA6     911:          CPX     FCBPOINTER  ... ?
C5D4 2711       912:          BEQ     DSKDDISMOUNT0 B/ YES, THAT'S OK...
                913:          ;LDX    FCB:DISKINFO,X NO, MAYBE DISKMAP.SYS FCB ?




ASM/6800 1.4A0: C5D6 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 281; Form 14    DISK FILE/DEVICE DRIVER
SDOS6800.ASM
C5D6 EE00       914:          LDX     FCB:DISKINFO,X
                915:          ;LDX    DSKINFO:MAPFCB,X ... ?
C5D8 EE29       916:          LDX     DSKINFO:MAPFCB,X
C5DA BCAEA6     917:          CPX     FCBPOINTER  ... ?
C5DD 2708       918:          BEQ     DSKDDISMOUNT0 B/ YES, THAT'S OK
                919:          ;LDX    ERRFCBPOINTER IS IT THE ERROR MESSAGE FILE ?
C5DF FEAF0C     920:          LDX     ERRFCBPOINTER
C5E2 BCAEA6     921:          CPX     FCBPOINTER  ... ?
C5E5 2667       922:          BNE     ERRFILEISOPEN B/ NO, A NON-SYSTEM FILE IS STILL OPEN!
  C5E7          923: DSKDDISMOUNT0    ; THIS FCB IS NOT OPEN TO THIS DISK, OR IS A SYSTEM FILE OPEN ONLY ON
                924:          ;LDD    FCBPOINTER  GET FCB ADDRESS
C5E7 F6AEA7     925:          LDAB    FCBPOINTER+1
C5EA B6AEA6     926:          LDAA    FCBPOINTER
                927:          ;DEC    COUNT       DECREMENT # FCBS TO SEARCH
C5ED 7A0004     928:          DEC     COUNT
C5F0 26C2       929:          BNE     DSKDDISMOUNTL B/ MORE FCBS TO CHECK FOR OPEN TO THIS DISK
                930: *        ASSERT: NO NON-SYSTEM FCBS ARE OPEN TO DISK BEING DISMOUNTED
C5F2 8DA0       931:          BSR     ERRFCBOPENQ IS FCB FOR ERRORMSGS.SYS SET UP?
C5F4 250C       932:          BCS     DSKDDISMOUNT2 B/ NOPE
C5F6 FFAEA6     933:          STX     FCBPOINTER  YES, CHECK TO SEE IF ERRORMSGS.SYS IS DELETED
C5F9 A60A       934:          LDAA    FCB:FLAGS,X IS IT DELETED?
C5FB 8520       935:          BITA    #FCBFLG::DELETED ...?
C5FD 2703       936:          BEQ     DSKDDISMOUNT2 B/ NO, NO SPECIAL ACTION NEEDED
                937:          ;JSR    DSKFDELETESYSIOCB YES, PUT CLUSTERS BACK IN FREE SPACE
C5FF BDBE49     938:          JSR     DSKFDELETESYSIOCB
  C602          939: DSKDDISMOUNT2    ; RELEASE HOLD ON DISKMAP.SYS
                940:          ;JSR    DSKDUMPBUFFERS DUMP ALL THE SECTOR BUFFERS BACK TO DISK
C602 BDDADA     941:          JSR     DSKDUMPBUFFERS
C605 8611       942:          LDAA    #CC:DISMOUNTDISK LET DRIVER KNOW THAT WE ARE DONE WITH THIS DISK
                943:          ;JSR    DSKDCONTROL1 (DO A CONTROL OPERATION!)
C607 BDC4FD     944:          JSR     DSKDCONTROL1
                945:          ;LDD    #1           NOW SET DISK MAP ALGORITHM BACK TO ONE, JUST TO BE SAFE
C60A C601       946:          LDAB    #(1)&$FF
C60C 8600       947:          LDAA    #(1)/256
                948:          ;JSR    DSKDSETMAPALG2 MARK ALL SECTORS INVALID, FORGET LAST BAD LSN
C60E BDC4BA     949:          JSR     DSKDSETMAPALG2
                950:          ;LDX    DCBPOINTER  RESET THE ERROR STATISTICS
C611 DE06       951:          LDX     DCBPOINTER
                952:          ;LDA    #$FF        MARK "NO ERROR LSN"
C613 86FF       953:          LDAA    #$FF




ASM/6800 1.4A0: C613 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 282; Form 14    DISK FILE/DEVICE DRIVER
SDOS6800.ASM
                954:          ;STA    DSKINFO:ERRLSN,X
C615 A73F       955:          STAA    DSKINFO:ERRLSN,X
                956:          ;STA    DSKINFO:ERRLSN+1,X
C617 A740       957:          STAA    DSKINFO:ERRLSN+1,X
                958:          ;STA    DSKINFO:ERRLSN+2,X
C619 A741       959:          STAA    DSKINFO:ERRLSN+2,X
                960:          ;LDB    #DSKINFO:ERRLSN-DSKINFO:SEEKERRCNT
C61B C60F       961:          LDAB    #DSKINFO:ERRLSN-DSKINFO:SEEKERRCNT
  C61D          962: DSKDDISMOUNTZ    ; ZERO THE ERROR STATISTICS LOOP
                963:          ;CLR    DSKINFO:SEEKERRCNT,X ZERO A STATISTIC BYTE
C61D 6F30       964:          CLR     DSKINFO:SEEKERRCNT,X
C61F 08         965:          INX
C620 5A         966:          DECB
C621 26FA       967:          BNE     DSKDDISMOUNTZ B/ MORE BYTES TO ZERO
                968:          ;LDX    DCBPOINTER  RELEASE DIRFCB
C623 DE06       969:          LDX     DCBPOINTER
                970:          ;LDX    DSKINFO:DIRFCB,X
C625 EE27       971:          LDX     DSKINFO:DIRFCB,X
C627 2723       972:          BEQ     DSKDDISMOUNTOKRTS B/ NOT BUSY, THIS DRIVE WASN'T MOUNTED
                973:          ;CLR    FCB:REFCOUNT,X WAS BUSY, LET GO OF FCB
C629 6F0B       974:          CLR     FCB:REFCOUNT,X
                975:          ;LDX    DCBPOINTER
C62B DE06       976:          LDX     DCBPOINTER
                977:          ;LDX    DSKINFO:MAPFCB,X
C62D EE29       978:          LDX     DSKINFO:MAPFCB,X
C62F 2702       979:          BEQ     DSKDDISMOUNT1 B/ UNUSUAL, THERE WAS NO MAP FILE!
                980:          ;CLR    FCB:REFCOUNT,X LET GO OF MAP FCB
C631 6F0B       981:          CLR     FCB:REFCOUNT,X
  C633          982: DSKDDISMOUNT1    EQU         *
                983:          ;LDX    DCBPOINTER  MARK ALL SYSTEM FCBS OPEN TO DISK AS AVAILABLE
C633 DE06       984:          LDX     DCBPOINTER
C635 4F         985:          CLRA                THE UNIVERSAL "INITIAL" VALUE
C636 5F         986:          CLRB
                987:          ;STD    DSKINFO:DIRFCB,X MARK DISKINFO FCBS AS NOT SET UP
C637 E728       988:          STAB    (DSKINFO:DIRFCB)+1,X
C639 A727       989:          STAA    DSKINFO:DIRFCB,X
                990:          ;STD    DSKINFO:MAPFCB,X (I.E., MARK DISK AS DISMOUNTED)
C63B E72A       991:          STAB    (DSKINFO:MAPFCB)+1,X
C63D A729       992:          STAA    DSKINFO:MAPFCB,X
                993:          ;JSR    ERRFCBOPENQ IS ERRORMSGS.SYS FCB SET UP?




ASM/6800 1.4A0: C63F SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 283; Form 14    DISK FILE/DEVICE DRIVER
SDOS6800.ASM
C63F BDC594     994:          JSR     ERRFCBOPENQ
C642 2508       995:          BCS     DSKDDISMOUNTOKRTS B/ NO, LEAVE ERR FCB ALONE
                996:          ;CLR    FCB:REFCOUNT,X RELEASE OUR HOLD ON ERRORMSGS.SYS FILE
C644 6F0B       997:          CLR     FCB:REFCOUNT,X
                998:          ;STD    ERRFCBPOINTER AND FORGET THE FCB
C646 F7AF0D     999:          STAB    ERRFCBPOINTER+1
C649 B7AF0C    1000:          STAA    ERRFCBPOINTER
  C64C         1001: DSKDDISMOUNTOKRTS
C64C 0C39      1002:          OKRTS
               1003: 
  C64E         1004: ERRFILEISOPEN    ; SOMETHING OTHER THAN A SYSTEM FILE IS OPEN!
               1005:          ;JSR    ERRET
C64E BDB1F6    1006:          JSR     ERRET
C651 03EA      1007:          FDB     ERR:FILEISOPEN
               1008: *                            NOTE: DELETED FILES ARE IMPORTANT...
               1009: *                            BECAUSE THEY STILL OWN VALUABLE DISK SPACE
               1010: *                            THAT HAS NOT YET BEEN DE-ALLOCATED!




ASM/6800 1.4A0: C651 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 284; Form 14    DISK FILE/DEVICE DRIVER
SDOS6800.ASM
               1012: *        MARKINVALID -- MARK DISK SECTORS FROM DISK "DCBPOINTER" AS INVALID
               1013: *
  C653         1014: MARKINVALID
               1015:          ;LDX    LASTSECTORREADQ+RDSI:FLINK POINTER TO BASE OF LRU QUEUE
C653 FEAEF6    1016:          LDX     LASTSECTORREADQ+RDSI:FLINK
  C656         1017: MARKINVALIDL     ; MARK THIS DISK SECTOR AS INVALID IF FROM DISK "DCBPOINTER"
               1018:          ;LDD    RDSI:DISKINFO,X IS SECTOR FROM DISK WE'RE MARKING INVALID?
C656 E601      1019:          LDAB    (RDSI:DISKINFO)+1,X
C658 A600      1020:          LDAA    RDSI:DISKINFO,X
               1021:          ;CMPD   DCBPOINTER  ...?
C65A 9106      1022:          CMPA    DCBPOINTER
C65C 2602      1023:          BNE     MACRO:0016
C65E D107      1024:          CMPB    DCBPOINTER+1
  C660         1025: MACRO:0016
C660 2612      1026:          BNE     MARKINVALID1 B/ NO, LEAVE SECTOR BUFFER ALONE
               1027:          ;CLR    RDSI:MODIFIED,X MARK SECTOR AS INVALID.
C662 6F0B      1028:          CLR     RDSI:MODIFIED,X
               1029:          ;CLR    RDSI:STATE,X ASSERT: MODIFIED=STATE=0, BUT I'M PARANOID ANYWAY!
C664 6F0C      1030:          CLR     RDSI:STATE,X
               1031:          ;CLR    RDSI:DISKINFO,X MARK RDSI AS "INITRDSIS" DID...
C666 6F00      1032:          CLR     RDSI:DISKINFO,X
               1033:          ;CLR    RDSI:DISKINFO+1,X SO THEY POINT TO DUMMY DISKINFO TABLE
C668 6F01      1034:          CLR     RDSI:DISKINFO+1,X
               1035:          ;LDA    #1          AND MAKE SURE IT DOESN'T SELECT MAGIC "0" SECTOR!
C66A 8601      1036:          LDAA    #1
C66C A702      1037:          STAA    RDSI:LSN,X  (I.E., RDSI:LSN,...+1,...+2 <> 0)
               1038: *        THIS IS IN CASE MAP ALGORITHM GETS CHANGED...
               1039: *        WHICH INVALIDATES THE LOGICAL TO PHYSICAL MAPPING!
C66E FFAEA4    1040:          STX     RDSIPOINTER SAVE POINTER FOR NEXT ITERATION
               1041:          ;JSR    REMOVERDSI  SO THAT IOCB REFERENCES TO SECTOR DISAPPEAR
C671 BDDA00    1042:          JSR     REMOVERDSI
  C674         1043: MARKINVALID1     ; PROCESS NEXT SECTOR ON LIST
               1044:          ;LDX    RDSI:FLINK,X FIND NEXT RDSI
C674 EE07      1045:          LDX     RDSI:FLINK,X
C676 8CAEEF    1046:          CPX     #LASTSECTORREADQ
C679 26DB      1047:          BNE     MARKINVALIDL B/ NOT END OF LRU QUEUE
C67B 0C39      1048:          OKRTS               ALL DONE!




ASM/6800 1.4A0: C67B SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 285; Form 15    DISK FILE DRIVERS -- DIRECTORY MANAGEMENT ROUTINES
SDOS6800.ASM
                  2: *  SEARCHDIR -- SEARCHES DIRECTORY FILE FOR NAME (X)...
                  3: *        ON DRIVE SPECIFIED BY DCBPOINTER
                  4: *        IF DSKINFO:DIRFCB IS ZERO FOR THIS DRIVE,
                  5: *                SEARCHDIR AUTOMATICALLY LOCATES DIRECTORY.SYS, DISKMAP.SYS, AND ERROR
                  6: *                AND FILLS IN THE FCBS IN THE DISKINFO TABLE FOR THESE FILES
                  7: *                (EFFECTIVELY AN AUTOMATIC "MOUNT" DISK COMMAND)
                  8: *        OKRTS MEANS "FILE FOUND" (BUT DIR:HCSIC MIGHT BE ZERO!)
                  9: *                (X), DIRENTRY POINTS TO DIRECTORY ENTRY
                 10: *                DIRENTRYDISP SPECIFIES DISPLACEMENT INTO SECTOR OF DIRECTORY ENTRY
                 11: *                SYSIOCB:CURLSN CONTAINS LOGICAL SECTOR NUMBER OF DIRECTORY SECTOR
                 12: *                FCBPOINTER SELECTS DIRECTORY.SYS FILE
                 13: *                RDSIPOINTER SELECTS DIRECTORY SECTOR POINTED TO BY (X)
                 14: *        ERRET ON EXIT WITH (X) = "NOT FOUND" MEANS:
                 15: *                FREEDIRLSN CONTAINS LSN OF DIRECTORY SECTOR CONTAINING FREE ENTRY
                 16: *                 = 0 --> DIRECTORY IS FULL
                 17: *                FREEDIRENTRYDISP SPECIFIES DISPLACEMENT INTO SECTOR OF DIRECTORY ENTR
                 18: *                FCBPOINTER SELECTS DIRECTORY.SYS FILE
                 19: *        ERRET WITH (X) <> "FILE NOT FOUND" MEANS
                 20: *                SOME FATAL PROBLEM OCCURRED
                 21: *                NO GAURANTEES ABOUT ANYTHING!
                 22: *
                 23: *  SEARCHDIRCREATE -- SEARCH DIRECTORY FOR FILENAME(X)
                 24: *        AND CREATE EMPTY DIRECTORY SLOT IF FILENAME IS NOT IN DIRECTORY
                 25: *        OKRTS MEANS EITHER THE NAME WAS FOUND, OR AN EMPTY SLOT WAS FOUND
                 26: *                SYSIOCB:CURLSN CONTAINS LSN OF DIRECTORY SECTOR
                 27: *                (X), DIRENTRY CONTAINS POINTER TO DIRECTORY ENTRY (SECTOR IS READ IN)
                 28: *                RDSIPOINTER SELECTS DIRECTORY SECTOR POINTED TO BY (X)
                 29: *                DIRENTRYDISP CONTAINS DISPLACEMENT TO DIRECTORY ENTRY FROM SECTORBASE
                 30: *                IF DIR:HCSIC(DIRENTRY) <> 0, THEN AN OLD FILE EXISTS TO BE REPLACED
                 31: *                IF =0, THIS DIRECTORY ENTRY IS FREE IF NO CURRENTLY OPEN FCB OWNS IT
                 32: *                IF DIRECTORY WAS FULL, AND NO FREE SLOTS WERE AVAILABLE,
                 33: *                THE DIRECTORY WAS AUTOMATICALLY EXPANDED BY MINALLOC CLUSTERS
                 34: *                FCBPOINTER SELECTS DIRECTORY.SYS FILE
                 35: *        ERRET MEANS DIRECTORY IS FULL, AND CANNOT BE EXPANDED
                 36: *                SO THERE IS NO ROOM FOR NEW FILE
                 37: *                FCBPOINTER SELECTS DIRECTORY.SYS FILE




ASM/6800 1.4A0: C67B SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 286; Form 15    DISK FILE DRIVERS -- DIRECTORY MANAGEMENT ROUTINES
SDOS6800.ASM
                 39: *  NOTES:
                 40: *  SEARCHDIR ALWAYS COMPARES DESIRED FILENAME WITH DIRENTRY
                 41: *  IF MATCH, THEN SEARCHDIR CHECKS VALIDITY OF DIRENTRY (DIR:HCSIC<>0)
                 42: *  IF AN "EMPTY" DIRENTRY SLOT IS MATCHED, AND SLOT IS OWNED BY AN OPEN FCB,
                 43: *  THEN SEARCHDIR TREATS SLOT AS IF A REAL FILE EXISTED THERE
                 44: *  FILES WHICH ARE BRAND NEW (AREN'T REPLACEMENTS) BUT HAVE NOT YET
                 45: *  BEEN CLOSED MUST HAVE THEIR NAME PLACED IN A DIRENTRY WITH DIR:HCSIC=0
                 46: *  SO IF SYSTEM CRASHES, DIRENTRY IS AUTOMATICALLY FREE




ASM/6800 1.4A0: C67B SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 287; Form 15    DISK FILE DRIVERS -- DIRECTORY MANAGEMENT ROUTINES
SDOS6800.ASM
  C67D           48: SEARCHDIR        ; SEARCH DIRECTORY FOR FILENAME (X)
C67D 8D1F        49:          BSR     SAVEUSERIOCB SO WE CAN SET UP OUR OWN AS "IOCBPOINTER"
C67F 8D2A        50:          BSR     SEARCHDIRE  GO SEARCH DIRECTORY USING SYSIOCB
C681 2516        51:          BCS     SEARCHDIRERRED B/ CAN'T FIND IT
                 52: *
                 53: *        RESTOREUSERIOCB -- RESTORES IOCBPOINTER TO USERIOCBPOINTER
                 54: *                RESTORES FCBPOINTER TO IOCB:FCB(USERIOCBPOINTER)
                 55: *
  C683           56: RESTOREUSERIOCB  EQU         *
                 57:          ;LDX    USERIOCBPOINTER RESTORE VALUES TO THOSE OF INITIAL CALL TO DRIVER
C683 FEAEA2      58:          LDX     USERIOCBPOINTER
C686 FFAE09      59:          STX     IOCBPOINTER
                 60:          ;LDX    IOCB:FCB,X  RESTORE FCB POINTER TO ITS ORIGINAL VALUE, TOO
C689 EE07        61:          LDX     IOCB:FCB,X
C68B FFAEA6      62:          STX     FCBPOINTER
                 63:          ;LDX    #0          MARK SYSTEM IOCB AS "CLOSED"
C68E CE0000      64:          LDX     #0
C691 FFAF60      65:          STX     SYSIOCB+IOCB:DRIVER
                 66:          ;LDX    DIRENTRY    TO BE NICE
C694 FEAEA8      67:          LDX     DIRENTRY
C697 0C39        68:          OKRTS               SAY "WE FOUND AN ENTRY.."
                 69: 
  C699           70: SEARCHDIRERRED   ; DIDN'T FIND THE FILE NAME IN THE DIRECTORY
C699 8DE8        71:          BSR     RESTOREUSERIOCB SWITCH BACK TO ORIGINAL IOCBPOINTER
                 72:          ;JMP    ERRORED     GRAB THE ERROR CODE AND EXIT AGAIN
C69B 7EB209      73:          JMP     ERRORED
                 74: *
                 75: *        SAVEUSERIOCB -- COPIES IOCBPOINTER INTO USERIOCBPOINTER
                 76: *                PRESERVES (X) ON ENTRY AS "SEARCHNAMEP"
                 77: *
  C69E           78: SAVEUSERIOCB     EQU         *
C69E FFAEAC      79:          STX     SEARCHNAMEP SAVE POINTER TO DESIRED NAME
                 80:          ;LDX    IOCBPOINTER SAVE USER'S DESIRED IOCB
C6A1 FEAE09      81:          LDX     IOCBPOINTER
C6A4 FFAEA2      82:          STX     USERIOCBPOINTER SO WE CAN SET UP SYSIOCB AS "THE" IOCB
                 83:          ;LDX    SEARCHNAMEP TO BE COMPATIBLE WITH THE SPECIAL ENTRY POINT
C6A7 FEAEAC      84:          LDX     SEARCHNAMEP
C6AA 39          85:          RTS




ASM/6800 1.4A0: C6AA SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 288; Form 15    DISK FILE DRIVERS -- DIRECTORY MANAGEMENT ROUTINES
SDOS6800.ASM
                 87: *
                 88: *        SEARCHDIRE -- ENTRY POINT TO SEARCH DIRECTORY...
                 89: *                ASSUMING IOCBPOINTER IS FREE
                 90: *
  C6AB           91: SEARCHDIRE       EQU         *
C6AB FFAEAC      92:          STX     SEARCHNAMEP SAVE POINTER TO NAME TO SEARCH FOR
                 93: *        NOW SET UP TO USE SYSIOCB FOR DIRECTORY SEARCH
                 94: *                MAKES IOCBPOINTER POINT TO SYSIOCB
                 95: *                MAKES SYSIOCB+IOCB:FCB, FCBPOINTER POINT TO...
                 96: *                FCB FOR DIRECTORY.SYS IN DISKINFO TABLES
                 97: *
                 98:          ;LDX    DCBPOINTER  NOW SET UP SYSIOCB
C6AE DE06        99:          LDX     DCBPOINTER
                100:          ;LDX    DSKINFO:DIRFCB,X GET FCB ADDRESS
C6B0 EE27       101:          LDX     DSKINFO:DIRFCB,X
C6B2 FFAEA6     102:          STX     FCBPOINTER
                103:          ;JSR    DSKFOPENSYSIOCB SET UP SYSIOCB SO WE CAN SEARCH THE DIRECTORY
C6B5 BDBDFC     104:          JSR     DSKFOPENSYSIOCB
C6B8 B6AEA6     105:          LDAA    FCBPOINTER  GET FCB ADDRESS FOR DIRECTORY
C6BB 2712       106:          BEQ     SEARCHDIRMOUNT B/ MUST MOUNT THE DISK
                107:          ;JMP    SEARCHDIR1  B/ DISK HAS ALREADY BEEN MOUNTED
C6BD 7EC82B     108:          JMP     SEARCHDIR1
                109: 
  C6C0          110: ERRBOOTCKSUMFAIL EQU         *
                111:          ;JSR    ERRET
C6C0 BDB1F6     112:          JSR     ERRET
C6C3 03E8       113:          FDB     ERR:BOOTCKSUMFAIL
                114: 
  C6C5          115: ERRNBPCTOOBIG    EQU         *
                116:          ;JSR    ERRET
C6C5 BDB1F6     117:          JSR     ERRET
C6C8 03ED       118:          FDB     ERR:NBPCTOOBIG
                119: 
  C6CA          120: ERRWRONGFILESYSTEM           ; FILE STRUCTURE FORMAT IS WRONG VERSION
                121:          ;JSR    ERRET
C6CA BDB1F6     122:          JSR     ERRET
C6CD 03FA       123:          FDB     ERR:WRONGFILESYSTEM




ASM/6800 1.4A0: C6CD SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 289; Form 15    DISK FILE DRIVERS -- DIRECTORY MANAGEMENT ROUTINES
SDOS6800.ASM
                125: **** MUST MOUNT DISK, SET UP DIRECTORY.SYS, DISKMAP.SYS, AND ERRORMSGS.SYS FCBS
                126: **** FIRST, SET UP DSKINFO INFORMATION
  C6CF          127: SEARCHDIRMOUNT   EQU         *
                128:          ;JSR    DSKDDISMOUNT DUMP BUFFERS, WAIT FOR READAHEADS TO QUIT;
C6CF BDC5A6     129:          JSR     DSKDDISMOUNT
                130: **** SHOULD THIS CALL DUMP BUFFERS INSTEAD???
                131: *                             MARK THE MAP ALGORITHM AS INVALID
                132:          ;LDX    #SYSIOCB    GO READ BOOT SECTOR FOR DISK
C6D2 CEAF57     133:          LDX     #SYSIOCB
                134:          ;CLR    IOCB:CURLSN,X = SECTOR ZERO
C6D5 6F02       135:          CLR     IOCB:CURLSN,X
                136:          ;CLR    IOCB:CURLSN+1,X
C6D7 6F03       137:          CLR     IOCB:CURLSN+1,X
                138:          ;CLR    IOCB:CURLSN+2,X
C6D9 6F04       139:          CLR     IOCB:CURLSN+2,X
                140:          ;JSR    FETCHSECTOR
C6DB BDDA9A     141:          JSR     FETCHSECTOR
                142:          ;LDX    RDSI:SECTORBASE,X GET ADDRESS OF BOOT SECTOR
C6DE EE05       143:          LDX     RDSI:SECTORBASE,X
C6E0 DF02       144:          STX     FROMPOINTER SAVE BOOT SECTOR ADDRESS
C6E2 A610       145:          LDAA    BOOT:FILESYSTEMVERSION,X PROPER FILE SYSTEM VERSION ?
C6E4 8010       146:          SUBA    #FILESYSTEMVERSION ...?
C6E6 26E2       147:          BNE     ERRWRONGFILESYSTEM B/ NOPE, WE CAN'T READ THIS DISKETTE!
C6E8 C610       148:          LDAB    #BOOT:DISKINFOLEN DO CHECKSUM ON INFO STORED IN BOOT SECTOR
                149: *        CLRA                ZERO THE CHECKSUM
  C6EA          150: SEARCHDI1        ; ADD BYTE TO CHECKSUM
C6EA AB10       151:          ADDA    BOOT:DISKINFO,X
C6EC 08         152:          INX                 BUMP CHECKSUM SCAN POINTER
C6ED 5A         153:          DECB                # BYTES LEFT TO CHECKSUM
C6EE 26FA       154:          BNE     SEARCHDI1   B/ MORE TO CHECKSUM
C6F0 4C         155:          INCA                CHECKSUM OK (=-1)?
C6F1 26CD       156:          BNE     ERRBOOTCKSUMFAIL B/ BAD BOOT SECTOR, I QUIT!
  0001          157:          IF      M6800!M6801
                158:          ;LDD    FROMPOINTER NOW COPY BOOTSECTOR STUFF TO DISKINFO TABLE
C6F3 D603       159:          LDAB    FROMPOINTER+1
C6F5 9602       160:          LDAA    FROMPOINTER
                161:          ;ADDD   #BOOT:NSPC  = SOURCE OF BOOTSECTOR STUFF
C6F7 CB11       162:          ADDB    #(BOOT:NSPC)&$FF
C6F9 8900       163:          ADCA    #(BOOT:NSPC)/256
                164:          ;TDX




ASM/6800 1.4A0: C6FB SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 290; Form 15    DISK FILE DRIVERS -- DIRECTORY MANAGEMENT ROUTINES
SDOS6800.ASM
C6FB 9700       165:          STAA    TEMPA
C6FD D701       166:          STAB    TEMPB
C6FF DE00       167:          LDX     TEMPX
                168:          ;LDD    DCBPOINTER  FIGURE OUT WHERE TO PUT THE STUFF
C701 D607       169:          LDAB    DCBPOINTER+1
C703 9606       170:          LDAA    DCBPOINTER
                171:          ;ADDD   #DSKINFO:NSPC
C705 CB11       172:          ADDB    #(DSKINFO:NSPC)&$FF
C707 8900       173:          ADCA    #(DSKINFO:NSPC)/256
                174:          ;STD    TOPOINTER   = TARGET
C709 D701       175:          STAB    TOPOINTER+1
C70B 9700       176:          STAA    TOPOINTER
  0001          177:          ELSE    (M6809)
 *S*            178:          ;LDX    FROMPOINTER NOW COPY BOOTSECTOR STUFF TO DISKINFO TABLE
 *S*            179:          LDX     FROMPOINTER
 *S*            180:          ;LEAX   BOOT:NSPC,X = WHERE TO GET BOOTSECTOR STUFF
 *S*            181:          IF      BOOT:NSPC<0
 *S*            182:          RPT     -BOOT:NSPC
 *S*            183:          DEX
 *S*            184:          ELSE
 *S*            185:          RPT     BOOT:NSPC
 *S*            186:          INX
 *S*            187:          FIN
 *S*            188:          LDY     DCBPOINTER  DECIDE WHERE TO PUT IT
 *S*            189:          LEAY    BOOT:NSPC,Y
                190:          FIN
                191:          ;LDD    #BOOT:PARAMSIZE = # BYTES TO COPY
C70D C607       192:          LDAB    #(BOOT:PARAMSIZE)&$FF
C70F 8600       193:          LDAA    #(BOOT:PARAMSIZE)/256
                194:          ;JSR    CODE+SDOS:BLOCKMOVE GO MOVE IT!
C711 BDAE42     195:          JSR     CODE+SDOS:BLOCKMOVE
                196:          ;LDX    DCBPOINTER  COMPUTE NUMBER OF BYTES PER CLUSTER
C714 DE06       197:          LDX     DCBPOINTER
C716 A618       198:          LDAA    DSKINFO:LOG2NBPS,X = DSKINFO:NSPC*2^DSKINFO:LOG2NBPS
C718 9700       199:          STAA    TEMPA       (NUMBER OF TIMES TO LEFT SHIFT)
C71A 4F         200:          CLRA                DO MULTIPLY BY SHIFTING
C71B E611       201:          LDAB    DSKINFO:NSPC,X *** NOTE: DSKINFO:NBPC <= 65535 !! ****
  C71D          202: SEARCHDI3        ; SHIFT LEFT ONE PLACE
                203:          ;ASLD               * 2^1
C71D 58         204:          ASLB




ASM/6800 1.4A0: C71E SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 291; Form 15    DISK FILE DRIVERS -- DIRECTORY MANAGEMENT ROUTINES
SDOS6800.ASM
C71E 49         205:          ROLA
C71F 25A4       206:          BCS     ERRNBPCTOOBIG B/ DISKINFONBPC >= 65536!
                207:          ;DEC    TEMPA       # PLACES LEFT TO LEFT SHIFT
C721 7A0000     208:          DEC     TEMPA
C724 26F7       209:          BNE     SEARCHDI3   B/ SHIFT LEFT SOME MORE
                210:          ;STD    DSKINFO:NBPC,X STORE NUMBER OF BYTES PER CLUSTER
C726 E721       211:          STAB    (DSKINFO:NBPC)+1,X
C728 A720       212:          STAA    DSKINFO:NBPC,X




ASM/6800 1.4A0: C728 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 292; Form 15    DISK FILE DRIVERS -- DIRECTORY MANAGEMENT ROUTINES
SDOS6800.ASM
                214: *
                215: *        COMPUTE NLCN:=INT(NLSN/NSPC)
                216: *
C72A 8611       217:          LDAA    #17         # QUOTIENT BITS TO GENERATE
C72C 9700       218:          STAA    TEMPA       (FIRST Q BIT MUST ALWAYS BE 0!)
                219:          ;LDB    DSKINFO:NLSN+2,X SET (A,B,TEMP.DIVIDEND):=NLSN
C72E E61D       220:          LDAB    DSKINFO:NLSN+2,X
                221:          ;STB    TEMPB
C730 D701       222:          STAB    TEMPB
                223:          ;LDD    DSKINFO:NLSN,X
C732 E61C       224:          LDAB    (DSKINFO:NLSN)+1,X
C734 A61B       225:          LDAA    DSKINFO:NLSN,X
  C736          226: SEARCHDI5L       ; GENERATE COMPLEMENTED QUOTIENT BIT
C736 A011       227:          SUBA    DSKINFO:NSPC,X
C738 2402       228:          BCC     SEARCHDI5A  B/ WENT IN, Q BIT = 1!
C73A AB11       229:          ADDA    DSKINFO:NSPC,X DIDN'T GO IN, RESTORE DIVIDEND (ASSERT: SETS CARRY)
  C73C          230: SEARCHDI5A       EQU         *
C73C 691F       231:          ROL     DSKINFO:NLCN+1,X SHIFT COMPLEMENTED QUOTIENT BIT INTO QUOTIENT
C73E 691E       232:          ROL     DSKINFO:NLCN,X
C740 780001     233:          ASL     TEMPB       SHIFT DIVIDEND LEFT ONE BIT
                234:          ;ROLD
C743 59         235:          ROLB
C744 49         236:          ROLA
                237:          ;DEC    TEMPA       DOWN COUNT # Q BITS TO GENERATE
C745 7A0000     238:          DEC     TEMPA
C748 26EC       239:          BNE     SEARCHDI5L  B/ GEN ANOTHER Q BIT
                240:          ;COM    DSKINFO:NLCN,X COMPLEMENT QUOTIENT TO GET TRUE VALUE
C74A 631E       241:          COM     DSKINFO:NLCN,X
                242:          ;COM    DSKINFO:NLCN+1,X
C74C 631F       243:          COM     DSKINFO:NLCN+1,X




ASM/6800 1.4A0: C74C SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 293; Form 15    DISK FILE DRIVERS -- DIRECTORY MANAGEMENT ROUTINES
SDOS6800.ASM
                245: *
                246: *        NOW GO LOOK UP CRITICAL SYSTEM FILES ***
                247: *
                248: *
                249:          ;LDD    DSKINFO:NLCN,X COMPUTE LCN OF MIDDLE OF DISK
C74E E61F       250:          LDAB    (DSKINFO:NLCN)+1,X
C750 A61E       251:          LDAA    DSKINFO:NLCN,X
                252:          ;LSRD               = INT(NLCN/2)
C752 44         253:          LSRA
C753 56         254:          RORB
                255:          ;STD    DSKINFO:RANDMAP,X INITZ RANDMAP TO MIDDLE OF DISK
C754 E723       256:          STAB    (DSKINFO:RANDMAP)+1,X
C756 A722       257:          STAA    DSKINFO:RANDMAP,X
                258:          ;LDX    RDSIPOINTER USE BOOT:DIRLSN TO FIND DIRECTORY.SYS ENTRY
C758 FEAEA4     259:          LDX     RDSIPOINTER
                260:          ;LDX    RDSI:SECTORBASE,X
C75B EE05       261:          LDX     RDSI:SECTORBASE,X
C75D A61B       262:          LDAA    BOOT:DIRLSN,X FETCH BOOT:DIRLSN FROM BOOT SECTOR...
C75F B7AF59     263:          STAA    SYSIOCB+IOCB:CURLSN AND STUFF INTO SYSTEM IOCB
                264:          ;LDX    BOOT:DIRLSN+1,X
C762 EE1C       265:          LDX     BOOT:DIRLSN+1,X
C764 FFAF5A     266:          STX     SYSIOCB+IOCB:CURLSN+1
                267:          ;LDX    #SYSIOCB
C767 CEAF57     268:          LDX     #SYSIOCB
                269:          ;JSR    FETCHSECTOR READ IN DIRECTORY DATA SECTOR
C76A BDDA9A     270:          JSR     FETCHSECTOR
                271: *                            GET ADDRESS OF DIRECTORY.SYS ENTRY...
                272:          ;LDX    RDSI:SECTORBASE,X WHICH (RULE!!) MUST BE 1ST ENTRY BOOT:DIRLSN
C76D EE05       273:          LDX     RDSI:SECTORBASE,X
C76F FFAEA8     274:          STX     DIRENTRY    SET UP SO WE CAN FIND A FREE FCB
C772 A612       275:          LDAA    DIR:HCSIC,X IS DIRECTORY.SYS ENTRY VALID?
                276:          ;LBEQ   ERRDIRECTORYDAMAGED B/ NO
C774 2603       277:          BNE     MACRO:0017
C776 7EC826     278:          JMP     ERRDIRECTORYDAMAGED
  C779          279: MACRO:0017
                280:          ;LDX    #0          SET UP DIRENTRYDISP CORRECTLY
C779 CE0000     281:          LDX     #0
C77C FFAEAA     282:          STX     DIRENTRYDISP
                283:          ;LDX    #DIRECTORYNAME VERIFY VALIDITY OF DIRECTORY.SYS ENTRY
C77F CEC905     284:          LDX     #DIRECTORYNAME




ASM/6800 1.4A0: C77F SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 294; Form 15    DISK FILE DRIVERS -- DIRECTORY MANAGEMENT ROUTINES
SDOS6800.ASM
                285:          ;JSR    COMPARENAMES
C782 BDCA20     286:          JSR     COMPARENAMES
                287:          ;LBNE   ERRDIRECTORYDAMAGED B/ DIRECTORY.SYS NAME IS TRASH
C785 2703       288:          BEQ     MACRO:0018
C787 7EC826     289:          JMP     ERRDIRECTORYDAMAGED
  C78A          290: MACRO:0018
                291:          ;JSR    FINDFREEFCB SINCE THIS DISK IS BEING MOUNTED, CAN'T BE ANY OPEN FCBS 
C78A BDCAC8     292:          JSR     FINDFREEFCB
                293:          ;LDX    DCBPOINTER  SET UP FCB FOR DIRECTORY.SYS
C78D DE06       294:          LDX     DCBPOINTER
                295:          ;STD    DSKINFO:DIRFCB,X SO THAT SUBSEQUENT CALLS TO "SEARCHDIR" WILL WORK
C78F E728       296:          STAB    (DSKINFO:DIRFCB)+1,X
C791 A727       297:          STAA    DSKINFO:DIRFCB,X
                298:          ;LDX    SEARCHNAMEP SAVE POINTER TO NAME THAT WE REALLY WANTED
C793 FEAEAC     299:          LDX     SEARCHNAMEP
C796 FFAEAE     300:          STX     SEARCHSAVEP SO WE CAN SEARCH FOR DISKMAP.SYS, ERRORMSGS.SYS FILE
                301:          ;LDX    #DISKMAPNAME NOW GO FIND THE DISKMAP.SYS FILE
C799 CEC915     302:          LDX     #DISKMAPNAME
                303:          ;JSR    SEARCHDIRE  (IOCBPOINTER IS FREE)
C79C BDC6AB     304:          JSR     SEARCHDIRE
C79F 252E       305:          BCS     SEARCHDI3A  B/ NO DISKMAP.SYS, WON'T BE ABLE TO MAKE NEW FILES
                306:          ;JSR    FINDFREEFCB FIND FCB FOR MAP FILE
C7A1 BDCAC8     307:          JSR     FINDFREEFCB
                308:          ;LDX    DCBPOINTER  SAVE FCB ADDRESS OF MAP FILE
C7A4 DE06       309:          LDX     DCBPOINTER
                310:          ;STD    DSKINFO:MAPFCB,X IN CASE SOMEONE INSISTS IN OPENING MAP
C7A6 E72A       311:          STAB    (DSKINFO:MAPFCB)+1,X
C7A8 A729       312:          STAA    DSKINFO:MAPFCB,X
                313:          ;CLR    SYSIOCB+IOCB:HRSN COMPUTE LSN OF 1ST SECTOR IN MAP CLUSTER
C7AA 7FAF78     314:          CLR     SYSIOCB+IOCB:HRSN
                315:          ;JSR    GENHLSNPLUSHRSN SET UP TO READ 1ST SECTOR OF MAP HEADER CLUSTER
C7AD BDD7C5     316:          JSR     GENHLSNPLUSHRSN
                317:          ;JSR    FETCHSECTOR GO READ SECTOR ZERO OF MAP HEADER
C7B0 BDDA9A     318:          JSR     FETCHSECTOR
                319:          ;LDX    RDSI:SECTORBASE,X
C7B3 EE05       320:          LDX     RDSI:SECTORBASE,X
                321:          ;LDD    HEADER:LCN+LCN:SIZE,X =2ND LCN IN HEADER
C7B5 E603       322:          LDAB    (HEADER:LCN+LCN:SIZE)+1,X
C7B7 A602       323:          LDAA    HEADER:LCN+LCN:SIZE,X
                324:          ;CLR    SYSIOCB+IOCB:DRSN SO CONVERSION WILL NOT BE AFFECTED




ASM/6800 1.4A0: C7B9 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 295; Form 15    DISK FILE DRIVERS -- DIRECTORY MANAGEMENT ROUTINES
SDOS6800.ASM
C7B9 7FAF71     325:          CLR     SYSIOCB+IOCB:DRSN
                326:          ;JSR    CONVERTLCNTOLSN CONVERT LCN OF CLUSTER INTO LSN
C7BC BDD778     327:          JSR     CONVERTLCNTOLSN
C7BF A602       328:          LDAA    SECTORDB:LSN,X COPY LSN TO (TOS), (A,B)
C7C1 36         329:          PSHA    
                330:          ;LDD    SECTORDB:LSN+1,X
C7C2 E604       331:          LDAB    (SECTORDB:LSN+1)+1,X
C7C4 A603       332:          LDAA    SECTORDB:LSN+1,X
                333:          ;LDX    DCBPOINTER  NOW MOVE MAP CLUSTER LSN ...
C7C6 DE06       334:          LDX     DCBPOINTER
                335:          ;STD    DSKINFO:MAPLSN+1,X INTO DISKINFO TABLE FOR EASY ACCESS
C7C8 E726       336:          STAB    (DSKINFO:MAPLSN+1)+1,X
C7CA A725       337:          STAA    DSKINFO:MAPLSN+1,X
C7CC 32         338:          PULA
C7CD A724       339:          STAA    DSKINFO:MAPLSN,X




ASM/6800 1.4A0: C7CD SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 296; Form 15    DISK FILE DRIVERS -- DIRECTORY MANAGEMENT ROUTINES
SDOS6800.ASM
  C7CF          341: SEARCHDI3A       EQU         *
                342:          ;LDX    DEFAULTDISKDCB ARE WE MOUNTING THE DEFAULTDISK ?
C7CF FEAE4C     343:          LDX     DEFAULTDISKDCB
C7D2 9C06       344:          CPX     DCBPOINTER  (I.E., DO WE NEED TO SET UP ERROR MESSAGE FCB ?)
C7D4 2616       345:          BNE     SEARCHDI4   B/ NO, WE'D NEVER USE IT!
                346:          ;LDX    ERRFCBPOINTER IS ERRORMESSAGE FILE ALREADY SET UP?
C7D6 FEAF0C     347:          LDX     ERRFCBPOINTER
C7D9 2611       348:          BNE     SEARCHDI4   B/ YES, LEAVE IT ALONE
                349:          ;LDX    #ERRMSGSNAME GO LOOK UP ERRORMSGS.SYS FILE
C7DB CEC925     350:          LDX     #ERRMSGSNAME
                351: *        IF FILE IS ALREADY SET UP ON SAME OTHER DISK, IT SHOULD BE RELEASED AND MOVED
                352:          ;JSR    SEARCHDIRE  (IOCBPOINTER IS FREE)
C7DE BDC6AB     353:          JSR     SEARCHDIRE
C7E1 2509       354:          BCS     SEARCHDI4   B/ NOT IN DIRECTORY, TOO BAD
                355:          ;JSR    FINDFREEFCB FOUND ERROR MESSAGES FILE
C7E3 BDCAC8     356:          JSR     FINDFREEFCB
                357:          ;STD    ERRFCBPOINTER SAVE ERRORMSGS.SYS FCB ADDRESS SO WE CAN DO A QUICK OPE
C7E6 F7AF0D     358:          STAB    ERRFCBPOINTER+1
C7E9 B7AF0C     359:          STAA    ERRFCBPOINTER
  C7EC          360: SEARCHDI4        EQU         *
                361:          ;LDX    SEARCHSAVEP GET POINTER TO NAME WE ORIGINALLY WANTED
C7EC FEAEAE     362:          LDX     SEARCHSAVEP
                363:          ;JMP    SEARCHDIRE  GO SEARCH THE DIRECTORY AS WE ORIGINALLY INTENDED!
C7EF 7EC6AB     364:          JMP     SEARCHDIRE
                365: 
  C7F2          366: SEARCHDIRF       ; FOUND FILE NAME MATCH
C7F2 8D1B       367:          BSR     COMPUTEDIRENTRYDISPLACEMENT
                368:          ;LDX    DIRENTRY    IS THIS DIRECTORY ENTRY ACTUALLY IN USE ?
C7F4 FEAEA8     369:          LDX     DIRENTRY
C7F7 A612       370:          LDAA    DIR:HCSIC,X ...?
C7F9 260F       371:          BNE     SEARCHDIROKRTS B/ YES, WE FOUND DESIRED DIRECTORY ENTRY
                372:          ;JSR    SEARCHFCBINIT START UP THE SEARCH
C7FB BDCB4E     373:          JSR     SEARCHFCBINIT
                374:          ;JSR    SEARCHFCBS  DOES SOME FCB OWN THIS SLOT ?
C7FE BDCB5E     375:          JSR     SEARCHFCBS
C801 257B       376:          BCS     SEARCHDIRL1 ITS JUST AN EMPTY SLOT!!!
                377:          ;LDX    DCBPOINTER  SET UP FCB POINTER TO SELECT DIRECTORY.SYS AGAIN
C803 DE06       378:          LDX     DCBPOINTER
                379:          ;LDX    DSKINFO:DIRFCB,X SINCE SEARCHFCBS BOMBED IT
C805 EE27       380:          LDX     DSKINFO:DIRFCB,X




ASM/6800 1.4A0: C807 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 297; Form 15    DISK FILE DRIVERS -- DIRECTORY MANAGEMENT ROUTINES
SDOS6800.ASM
C807 FFAEA6     381:          STX     FCBPOINTER
  C80A          382: SEARCHDIROKRTS   EQU         *
                383:          ;LDX    DIRENTRY    GRAB POINTER TO DIRECTORY ENTRY AGAIN
C80A FEAEA8     384:          LDX     DIRENTRY
C80D 0C39       385:          OKRTS               WE FOUND THE FILE!
                386: *
                387: *        COMPUTEDIRENTRYDISPLACEMENT -- COMPUTES DIRENTRYDISP
                388: *
  C80F          389: COMPUTEDIRENTRYDISPLACEMENT
                390:          ;LDD    DIRENTRY    COMPUTE DIRECTORY ENTRY DISPLACEMENT
C80F F6AEA9     391:          LDAB    DIRENTRY+1
C812 B6AEA8     392:          LDAA    DIRENTRY
                393:          ;LDX    SYSIOCB+IOCB:DRDSI ASSERT: IOCB:DRDSI <> 0
C815 FEAF69     394:          LDX     SYSIOCB+IOCB:DRDSI
C818 FFAEA4     395:          STX     RDSIPOINTER CHEAT, CHEAT! MAKE THIS MOST RECENTLY READ SECTOR
                396:          ;SUBD   RDSI:SECTORBASE,X
C81B E006       397:          SUBB    (RDSI:SECTORBASE)+1,X
C81D A205       398:          SBCA    RDSI:SECTORBASE,X
                399:          ;STD    DIRENTRYDISP
C81F F7AEAB     400:          STAB    DIRENTRYDISP+1
C822 B7AEAA     401:          STAA    DIRENTRYDISP
C825 39         402:          RTS
                403: 
  C826          404: ERRDIRECTORYDAMAGED
                405:          ;JSR    ERRET
C826 BDB1F6     406:          JSR     ERRET
C829 040F       407:          FDB     ERR:DIRECTORYDAMAGED




ASM/6800 1.4A0: C829 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 298; Form 15    DISK FILE DRIVERS -- DIRECTORY MANAGEMENT ROUTINES
SDOS6800.ASM
  C82B          409: SEARCHDIR1       ; DISKINFO IS ALL SET, LET'S GO!
                410:          ;LDX    SEARCHNAMEP GET POINTER TO NAME
C82B FEAEAC     411:          LDX     SEARCHNAMEP
                412:          ;JSR    HASHNAME    DO INITIAL HASH
C82E BDCA55     413:          JSR     HASHNAME
                414:          ;CLR    WRITEFLAG   TELL LOCATECURBYTE THAT WE'RE READING
C831 7FAE9A     415:          CLR     WRITEFLAG
                416:          ;LDX    DCBPOINTER  GET DIRECTORY SECTOR SIZE
C834 DE06       417:          LDX     DCBPOINTER
                418:          ;LDD    DSKINFO:NBPS,X
C836 E60A       419:          LDAB    (DSKINFO:NBPS)+1,X
C838 A609       420:          LDAA    DSKINFO:NBPS,X
                421:          ;JSR    LOCATECURBYTE GO FIND DIRECTORY ENTRY
C83A BDD2B1     422:          JSR     LOCATECURBYTE
C83D B6AF59     423:          LDAA    SYSIOCB+IOCB:CURLSN REMEMBER STARTING LSN OF DIRECTORY SEARCH
C840 B7AEB0     424:          STAA    SEARCHSTARTLSN SO WE KNOW WHEN TO STOP
                425:          ;LDX    SYSIOCB+IOCB:CURLSN+1
C843 FEAF5A     426:          LDX     SYSIOCB+IOCB:CURLSN+1
C846 FFAEB1     427:          STX     SEARCHSTARTLSN+1
                428:          ;CLR    FREEDIRLSN  MARK 'NO FREE DIRECTORY ENTRY FOUND'
C849 7FAEB3     429:          CLR     FREEDIRLSN
                430:          ;CLR    FREEDIRLSN+1
C84C 7FAEB4     431:          CLR     FREEDIRLSN+1
                432:          ;CLR    FREEDIRLSN+2
C84F 7FAEB5     433:          CLR     FREEDIRLSN+2




ASM/6800 1.4A0: C84F SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 299; Form 15    DISK FILE DRIVERS -- DIRECTORY MANAGEMENT ROUTINES
SDOS6800.ASM
  C852          435: SEARCHDIRS       ; SEARCH DIRECTORY SECTOR FOR NAME
                436:          ;LDX    SYSIOCB+IOCB:DRDSI GET ADDRESS OF DIRECTORY SECTOR
C852 FEAF69     437:          LDX     SYSIOCB+IOCB:DRDSI
                438:          ;LDX    RDSI:SECTORBASE,X NOTE: THIS DEPENDS ON AT LEAST 2 RDSI'S AVAILABLE!
C855 EE05       439:          LDX     RDSI:SECTORBASE,X
C857 FFAEA8     440:          STX     DIRENTRY    AND USE AS SEARCH STARTING POINT
                441:          ;LDX    DCBPOINTER  COMPUTE END OF DIRECTORY SECTOR
C85A DE06       442:          LDX     DCBPOINTER
                443:          ;LDD    DSKINFO:NBPS,X =SECTORBASE + DSKINFO:NBPS
C85C E60A       444:          LDAB    (DSKINFO:NBPS)+1,X
C85E A609       445:          LDAA    DSKINFO:NBPS,X
                446:          ;ADDD   DIRENTRY
C860 FBAEA9     447:          ADDB    DIRENTRY+1
C863 B9AEA8     448:          ADCA    DIRENTRY
                449:          ;STD    DIRSECTOREND REMEMBER END OF DIRSECTORY
C866 F7AEB9     450:          STAB    DIRSECTOREND+1
C869 B7AEB8     451:          STAA    DIRSECTOREND
  C86C          452: SEARCHDIRL       EQU         *
                453:          ;LDX    SEARCHNAMEP GET ADDRESS OF NAME TO FIND
C86C FEAEAC     454:          LDX     SEARCHNAMEP
                455:          ;JSR    COMPARENAMES COMPARE AGAINST DIRECTORY ENTRY
C86F BDCA20     456:          JSR     COMPARENAMES
                457:          ;LBEQ   SEARCHDIRF  B/ WE FOUND IT!
C872 2603       458:          BNE     MACRO:0019
C874 7EC7F2     459:          JMP     SEARCHDIRF
  C877          460: MACRO:0019
                461:          ;LDX    DIRENTRY    IS THIS DIRECTORY ENTRY VALID?
C877 FEAEA8     462:          LDX     DIRENTRY
C87A A612       463:          LDAA    DIR:HCSIC,X
C87C 2634       464:          BNE     SEARCHDIRN  B/ YES, GO FIND NEXT ENTRY
  C87E          465: SEARCHDIRL1      EQU         *
C87E B6AEB3     466:          LDAA    FREEDIRLSN  NO, FOUND EMPTY DIRECTORY ENTRY
C881 BAAEB4     467:          ORAA    FREEDIRLSN+1 HAVE WE RECORDED EXISTENCE...
C884 BAAEB5     468:          ORAA    FREEDIRLSN+2 OF FREE DIRECTORY ENTRY YET?
C887 2622       469:          BNE     SEARCHDIR2  B/ YES, DON'T RECORD ANOTHER
C889 8D84       470:          BSR     COMPUTEDIRENTRYDISPLACEMENT
                471:          ;JSR    SEARCHFCBINIT SET UP TO SEARCH THE FCBS
C88B BDCB4E     472:          JSR     SEARCHFCBINIT
                473:          ;JSR    SEARCHFCBS  IS THIS ENTRY IN USE?
C88E BDCB5E     474:          JSR     SEARCHFCBS




ASM/6800 1.4A0: C891 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 300; Form 15    DISK FILE DRIVERS -- DIRECTORY MANAGEMENT ROUTINES
SDOS6800.ASM
C891 2418       475:          BCC     SEARCHDIR2  B/ YES, FIND NEXT DIRECTORY ENTRY
C893 B6AF59     476:          LDAA    SYSIOCB+IOCB:CURLSN SAVE LSN OF CURRENT DIRECTORY SECTOR
C896 B7AEB3     477:          STAA    FREEDIRLSN  AS LSN OF FREE ENTRY
                478:          ;LDX    SYSIOCB+IOCB:CURLSN+1
C899 FEAF5A     479:          LDX     SYSIOCB+IOCB:CURLSN+1
C89C FFAEB4     480:          STX     FREEDIRLSN+1
                481:          ;LDD    DIRENTRYDISP 
C89F F6AEAB     482:          LDAB    DIRENTRYDISP+1
C8A2 B6AEAA     483:          LDAA    DIRENTRYDISP
                484:          ;STD    FREEDIRENTRYDISP AND SAVE IN CASE WE DON'T FIND THE NAME IN THE DIREC
C8A5 F7AEB7     485:          STAB    FREEDIRENTRYDISP+1
C8A8 B7AEB6     486:          STAA    FREEDIRENTRYDISP




ASM/6800 1.4A0: C8A8 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 301; Form 15    DISK FILE DRIVERS -- DIRECTORY MANAGEMENT ROUTINES
SDOS6800.ASM
  C8AB          488: SEARCHDIR2       EQU         *
                489:          ;LDX    DCBPOINTER  MAKE FCBPOINTER SELECT DIRECTORY.SYS FILE AGAIN
C8AB DE06       490:          LDX     DCBPOINTER
                491:          ;LDX    DSKINFO:DIRFCB,X
C8AD EE27       492:          LDX     DSKINFO:DIRFCB,X
C8AF FFAEA6     493:          STX     FCBPOINTER  SINCE SEARCHFCBS DESTROYED IT!
  C8B2          494: SEARCHDIRN       EQU         *
                495:          ;LDD    DIRENTRY    NOT HERE, FIND NEXT DIRECTORY ENTRY
C8B2 F6AEA9     496:          LDAB    DIRENTRY+1
C8B5 B6AEA8     497:          LDAA    DIRENTRY
                498:          ;ADDD   #DIR:ENTRYSIZE =THIS ENTRY + DIR:ENTRYSIZE
C8B8 CB20       499:          ADDB    #(DIR:ENTRYSIZE)&$FF
C8BA 8900       500:          ADCA    #(DIR:ENTRYSIZE)/256
                501:          ;STD    DIRENTRY
C8BC F7AEA9     502:          STAB    DIRENTRY+1
C8BF B7AEA8     503:          STAA    DIRENTRY
                504:          ;LDX    DIRENTRY    HIT END OF DIRECTORY SECTOR?
C8C2 FEAEA8     505:          LDX     DIRENTRY
C8C5 BCAEB8     506:          CPX     DIRSECTOREND
C8C8 26A2       507:          BNE     SEARCHDIRL
                508:          ;JSR    UPDATECURBYTEF RECORD FILE ADVANCE DELTA
C8CA BDD5B9     509:          JSR     UPDATECURBYTEF
C8CD 2414       510:          BCC     SEARCHDIRT  B/ NOT EOF, GO LOCATE NEXT SECTOR
C8CF 8C03E9     511:          CPX     #ERR:EOFHIT CHECK: END OF FILE HIT ?
C8D2 262B       512:          BNE     SEARCHDIRERRED4 B/ NO, SOME REAL PROBLEM!
                513:          ;CLR    SYSIOCB+IOCB:EOFFLAG RESET "EOF HIT" FLAG
C8D4 7FAF62     514:          CLR     SYSIOCB+IOCB:EOFFLAG
                515:          ;LDX    #0          HIT END OF DIRECTORY
C8D7 CE0000     516:          LDX     #0
C8DA FFAF64     517:          STX     SYSIOCB+IOCB:CURBYTE RESET CURBYTE TO START OF DIRECTORY
C8DD FFAF66     518:          STX     SYSIOCB+IOCB:CURBYTE+2
                519:          ;CLR    SYSIOCB+IOCB:LOCATEDF FORCE RE-LOCATION OF SECTOR
C8E0 7FAF68     520:          CLR     SYSIOCB+IOCB:LOCATEDF
  C8E3          521: SEARCHDIRT       ; TEST FOR ENTIRE DIRECTORY SEARCHED
                522:          ;LDX    DCBPOINTER  GET DIRECTORY SECTOR SIZE
C8E3 DE06       523:          LDX     DCBPOINTER
                524:          ;LDD    DSKINFO:NBPS,X
C8E5 E60A       525:          LDAB    (DSKINFO:NBPS)+1,X
C8E7 A609       526:          LDAA    DSKINFO:NBPS,X
                527:          ;JSR    LOCATECURBYTE AND GO LOCATE THE DESIRED SECTOR




ASM/6800 1.4A0: C8E9 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 302; Form 15    DISK FILE DRIVERS -- DIRECTORY MANAGEMENT ROUTINES
SDOS6800.ASM
C8E9 BDD2B1     528:          JSR     LOCATECURBYTE
                529:          ;LDX    SYSIOCB+IOCB:CURLSN+1 I.E., IS CURLSN=START-OF-SEARCH LSN?
C8EC FEAF5A     530:          LDX     SYSIOCB+IOCB:CURLSN+1
C8EF BCAEB1     531:          CPX     SEARCHSTARTLSN+1 (TEST LS 16 BITS FIRST...
C8F2 2608       532:          BNE     SEARCHDIRSJ BECAUSE OF HIGHEST PROBABILITY
C8F4 B6AF59     533:          LDAA    SYSIOCB+IOCB:CURLSN OF MISMATCH)
                534:          ;CMPA   SEARCHSTARTLSN
C8F7 B1AEB0     535:          CMPA    SEARCHSTARTLSN
C8FA 2704       536:          BEQ     SEARCHDIRNF B/ FILE NOT FOUND
  C8FC          537: SEARCHDIRSJ      EQU         *
                538:          ;JMP    SEARCHDIRS  GO SEARCH ANOTHER DIRECTORY SECTOR
C8FC 7EC852     539:          JMP     SEARCHDIRS
                540: 
  C8FF          541: SEARCHDIRERRED4  EQU         *
C8FF 39         542:          RTS




ASM/6800 1.4A0: C8FF SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 303; Form 15    DISK FILE DRIVERS -- DIRECTORY MANAGEMENT ROUTINES
SDOS6800.ASM
  C900          544: SEARCHDIRNF      ; FILE NOT FOUND IN DIRECTORY
                545:          ;JSR    ERRET       CAUSE AN ERROR OF APPROPRIATE TYPE
C900 BDB1F6     546:          JSR     ERRET
C903 03F3       547:          FDB     ERR:FILENOTFOUND
                548: 
C905 44495245   549: DIRECTORYNAME    FCC         "DIRECTORY.SYS"
  0003          550:          RPT     DIR:NAMESIZE-(*-DIRECTORYNAME)
C912 20         551:          FCC     " "
                552: 
C915 4449534B   553: DISKMAPNAME      FCC         "DISKMAP.SYS"
  0005          554:          RPT     DIR:NAMESIZE-(*-DISKMAPNAME)
C920 20         555:          FCC     " "
                556: 
C925 4552524F   557: ERRMSGSNAME      FCC         "ERRORMSGS.SYS"
  0003          558:          RPT     DIR:NAMESIZE-(*-ERRMSGSNAME)
C932 20         559:          FCC     " "




ASM/6800 1.4A0: C934 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 304; Form 15    DISK FILE DRIVERS -- DIRECTORY MANAGEMENT ROUTINES
SDOS6800.ASM
  C935          561: SEARCHDIRCREATE  ; SEARCH DIRECTORY AND EXPAND IF NECESSARY
                562:          ;JSR    SAVEUSERIOCB SO WE CAN SET UP SYSIOCB AS IOCBPOINTER
C935 BDC69E     563:          JSR     SAVEUSERIOCB
  C938          564: SEARCHDIRCREAT1  EQU         *
                565:          ;JSR    SEARCHDIRE  GO LOOK FOR FILE FIRST
C938 BDC6AB     566:          JSR     SEARCHDIRE
C93B 2470       567:          BCC     SEARCHDIRCOKRTS B/ FOUND IT, GET OUT!
C93D 8C03F3     568:          CPX     #ERR:FILENOTFOUND A TRUE 'FILE NOT FOUND' ERROR ?
C940 266E       569:          BNE     SEARCHDIRCERRED B/ NOPE, I GIVE UP!
C942 B6AEB3     570:          LDAA    FREEDIRLSN  NOT FOUND, DID WE FIND A FREE SLOT?
C945 BAAEB4     571:          ORAA    FREEDIRLSN+1
C948 BAAEB5     572:          ORAA    FREEDIRLSN+2
C94B 2632       573:          BNE     SEARCHDIRCNEW B/ YES, TAKE OK EXIT
                574:          ;CLR    SYSIOCB+IOCB:EOFFLAG FORCE ALLOCCLUSTERS TO ZERO
C94D 7FAF62     575:          CLR     SYSIOCB+IOCB:EOFFLAG
                576:          ;LDX    SYSIOCB+IOCB:FCB SET UP IOCB:RDCN...
C950 FEAF5E     577:          LDX     SYSIOCB+IOCB:FCB
                578:          ;LDX    FCB:NCLUSTERS,X TO ALLOCATE ANOTHER CLUSTER
C953 EE0F       579:          LDX     FCB:NCLUSTERS,X
C955 FFAF72     580:          STX     SYSIOCB+IOCB:RDCN
                581:          ;LDD    #1          (A,B):= # CLUSTERS TO ALLOCATE
C958 C601       582:          LDAB    #(1)&$FF
C95A 8600       583:          LDAA    #(1)/256
                584:          ;JSR    ALLOCATECLUSTERS GO ALLOCATE (AND ZERO!) ANOTHER CLUSTER
C95C BDCD19     585:          JSR     ALLOCATECLUSTERS
C95F 254F       586:          BCS     SEARCHDIRCERRED B/ PROBABLY NO DISK SPACE
                587:          ;LDX    DCBPOINTER  ADD 1 CLUSTER SIZE TO FILE LENGTH
C961 DE06       588:          LDX     DCBPOINTER
                589:          ;LDD    DSKINFO:NBPC,X
C963 E621       590:          LDAB    (DSKINFO:NBPC)+1,X
C965 A620       591:          LDAA    DSKINFO:NBPC,X
                592:          ;LDX    SYSIOCB+IOCB:FCB
C967 FEAF5E     593:          LDX     SYSIOCB+IOCB:FCB
                594:          ;ADDD   FCB:FILESIZE+2,X
C96A EB14       595:          ADDB    (FCB:FILESIZE+2)+1,X
C96C A913       596:          ADCA    FCB:FILESIZE+2,X
                597:          ;STD    FCB:FILESIZE+2,X
C96E E714       598:          STAB    (FCB:FILESIZE+2)+1,X
C970 A713       599:          STAA    FCB:FILESIZE+2,X
C972 2406       600:          BCC     SEARCHDIRCREAT2 B/ NO CARRY TO PROPOGATE




ASM/6800 1.4A0: C972 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 305; Form 15    DISK FILE DRIVERS -- DIRECTORY MANAGEMENT ROUTINES
SDOS6800.ASM
                601:          ;INC    FCB:FILESIZE+1,X
C974 6C12       602:          INC     FCB:FILESIZE+1,X
C976 2602       603:          BNE     SEARCHDIRCREAT2
                604:          ;INC    FCB:FILESIZE,X
C978 6C11       605:          INC     FCB:FILESIZE,X
  C97A          606: SEARCHDIRCREAT2  EQU         *
                607:          ;LDX    SEARCHNAMEP GET POINTER TO DESIRED FILE NAME
C97A FEAEAC     608:          LDX     SEARCHNAMEP
C97D 20B9       609:          BRA     SEARCHDIRCREAT1 AND START OVER AGAIN




ASM/6800 1.4A0: C97D SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 306; Form 15    DISK FILE DRIVERS -- DIRECTORY MANAGEMENT ROUTINES
SDOS6800.ASM
  C97F          611: SEARCHDIRCNEW    ; MUST BE NEW SLOT
                612:          ;LDX    FREEDIRENTRYDISP SET UP DIRENTRYDISP
C97F FEAEB6     613:          LDX     FREEDIRENTRYDISP
C982 FFAEAA     614:          STX     DIRENTRYDISP
                615:          ;LDX    FREEDIRLSN+1 MAKE SURE DIRECTORY ENTRY DESIRED...
C985 FEAEB4     616:          LDX     FREEDIRLSN+1
C988 FFAF5A     617:          STX     SYSIOCB+IOCB:CURLSN+1 IS IN MEMORY BY READING IT IN AGAIN!
                618:          ;LDX    #SYSIOCB    COPY FREEDIRLSN TO SYSIOCB...
C98B CEAF57     619:          LDX     #SYSIOCB
C98E B6AEB3     620:          LDAA    FREEDIRLSN  SO IT LOOKS JUST LIKE SEARCHDIR FOUND IT
C991 A702       621:          STAA    IOCB:CURLSN,X
                622:          ;JSR    READSECTOR  READ IN THIS DISK SECTOR
C993 BDD8F3     623:          JSR     READSECTOR
C996 2518       624:          BCS     SEARCHDIRCERRED B/ DISK I/O PROBLEM
                625:          ;LDD    RDSI:SECTORBASE,X COMPUTE DIRENTRY POINTER JUST LIKE SEARCHDIR WOULD 
C998 E606       626:          LDAB    (RDSI:SECTORBASE)+1,X
C99A A605       627:          LDAA    RDSI:SECTORBASE,X
                628:          ;ADDD   FREEDIRENTRYDISP
C99C FBAEB7     629:          ADDB    FREEDIRENTRYDISP+1
C99F B9AEB6     630:          ADCA    FREEDIRENTRYDISP
                631:          ;STD    DIRENTRY
C9A2 F7AEA9     632:          STAB    DIRENTRY+1
C9A5 B7AEA8     633:          STAA    DIRENTRY
                634:          ;JSR    WAITRDSI    WAIT FOR SECTOR TO ARRIVE
C9A8 BDDAA1     635:          JSR     WAITRDSI
C9AB 2503       636:          BCS     SEARCHDIRCERRED B/ DISK I/O ERROR
  C9AD          637: SEARCHDIRCOKRTS  ; FOUND A DIRECTORY ENTRY FOR NEW FILE
                638:          ;JMP    RESTOREUSERIOCB AND EXIT
C9AD 7EC683     639:          JMP     RESTOREUSERIOCB
                640: 
  C9B0          641: SEARCHDIRCERRED  EQU         *
                642:          ;JMP    SEARCHDIRERRED
C9B0 7EC699     643:          JMP     SEARCHDIRERRED




ASM/6800 1.4A0: C9B0 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 307; Form 15    DISK FILE DRIVERS -- DIRECTORY MANAGEMENT ROUTINES
SDOS6800.ASM
                645: *
                646: *        LOCATEDIRENTRY -- GET DIRECTORY SECTOR FOR FCB INTO MEMORY
                647: *                SET UP DIRENTRY TO POINT TO DIRECTORY SLOT FOR FCB
                648: *                EXIT PRODUCES EXACTLY THE SAME RESULTS AS OKRTS FROM "SEARCHDIR"
                649: *                            (EXCEPT FCBPOINTER IS NOT DISTURBED!)
                650: *
  C9B3          651: LOCATEDIRENTRY   EQU         *
                652:          ;LDX    FCBPOINTER  GET POINTER TO DIRECTORY SECTOR DESCRIPTOR
C9B3 FEAEA6     653:          LDX     FCBPOINTER
                654:          ;JSR    READSECTOR  READ IN DIRLSN
C9B6 BDD8F3     655:          JSR     READSECTOR
C9B9 A602       656:          LDAA    RDSI:LSN,X  SAVE LSN IN SYSIOCB IN CASE WE NEED IT LATER!
C9BB B7AF59     657:          STAA    SYSIOCB+IOCB:CURLSN
                658:          ;LDD    RDSI:LSN+1,X
C9BE E604       659:          LDAB    (RDSI:LSN+1)+1,X
C9C0 A603       660:          LDAA    RDSI:LSN+1,X
                661:          ;STD    SYSIOCB+IOCB:CURLSN+1
C9C2 F7AF5B     662:          STAB    SYSIOCB+IOCB:CURLSN+1+1
C9C5 B7AF5A     663:          STAA    SYSIOCB+IOCB:CURLSN+1
                664:          ;LDD    RDSI:SECTORBASE,X ADD SECTOR BASE TO DIR DISPLACEMENT
C9C8 E606       665:          LDAB    (RDSI:SECTORBASE)+1,X
C9CA A605       666:          LDAA    RDSI:SECTORBASE,X
                667:          ;LDX    FCBPOINTER  TO GET DIRENTRY ADDRESS
C9CC FEAEA6     668:          LDX     FCBPOINTER
                669:          ;ADDD   FCB:DIRDISP,X
C9CF EB06       670:          ADDB    (FCB:DIRDISP)+1,X
C9D1 A905       671:          ADCA    FCB:DIRDISP,X
                672:          ;STD    DIRENTRY
C9D3 F7AEA9     673:          STAB    DIRENTRY+1
C9D6 B7AEA8     674:          STAA    DIRENTRY
                675:          ;LDD    FCB:DIRDISP,X SET UP DIRECTORY ENTRY DISPLACEMENT
C9D9 E606       676:          LDAB    (FCB:DIRDISP)+1,X
C9DB A605       677:          LDAA    FCB:DIRDISP,X
                678:          ;STD    DIRENTRYDISP
C9DD F7AEAB     679:          STAB    DIRENTRYDISP+1
C9E0 B7AEAA     680:          STAA    DIRENTRYDISP
                681:          ;JSR    WAITRDSI    WAIT FOR SECTOR TO ARRIVE
C9E3 BDDAA1     682:          JSR     WAITRDSI
                683:          ;LDX    DIRENTRY
C9E6 FEAEA8     684:          LDX     DIRENTRY




ASM/6800 1.4A0: C9E9 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 308; Form 15    DISK FILE DRIVERS -- DIRECTORY MANAGEMENT ROUTINES
SDOS6800.ASM
C9E9 0C39       685:          OKRTS




ASM/6800 1.4A0: C9E9 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 309; Form 15    DISK FILE DRIVERS -- DIRECTORY MANAGEMENT ROUTINES
SDOS6800.ASM
                687: *
                688: *        UPDATEDIRFROMFCB -- UPDATE DIRECTORY FROM FCB(FCBPOINTER)
                689: *        UPDATE DIRECTORY ENTRY IF FCB IS MARKED AS "UPDATEDIR" AND NOT "DELETED"
                690: *
  C9EB          691: UPDATEDIRFROMFCB EQU         *
                692:          ;LDX    FCBPOINTER  PEEK AT FCB
C9EB FEAEA6     693:          LDX     FCBPOINTER
C9EE A60A       694:          LDAA    FCB:FLAGS,X DELETED FILE ?
C9F0 8520       695:          BITA    #FCBFLG::DELETED ...?
C9F2 262A       696:          BNE     UPDATEDIROKRTS B/ YES, DON'T BOTHER UPDATING DIRECTORY
C9F4 8540       697:          BITA    #FCBFLG::UPDATEDIR MUST WE UPDATE THE DIRECTORY ? 
C9F6 2726       698:          BEQ     UPDATEDIROKRTS B/ DON'T HAVE TO UPDATE DIRECTORY
  C9F8          699: LOCUPDATEDIRENTRY            ; ENTRY POINT TO LOCATE AND UPDATE DIRECTORY ENTRY
C9F8 8DB9       700:          BSR     LOCATEDIRENTRY RATS, MUST UPDATE DIRECTORY
  C9FA          701: UPDATEDIRENTRY   ; ENTRY FOR DIRENTRY ALREADY LOCATED
C9FA DF00       702:          STX     TOPOINTER   COPY ALL PERTINANT FCB DATA TO DIRECTORY ENTRY
                703:          ;LDX    FCBPOINTER  FCB DATA IS STORED IN SAME FORMAT...
C9FC FEAEA6     704:          LDX     FCBPOINTER
C9FF C60E       705:          LDAB    #DIR:FCBDATASIZE (# FCB BYTES TO COPY TO DIR)
  CA01          706: UPDATEDIRL       EQU         *
CA01 A60C       707:          LDAA    FCB:HLCN,X  AS DIRECTORY ENTRY DATA
CA03 08         708:          INX                 UPDATE "FROM" POINTER
CA04 DF02       709:          STX     FROMPOINTER
                710:          ;LDX    TOPOINTER   STORE FCB ENTRY INTO DIRECTORY ENTRY
CA06 DE00       711:          LDX     TOPOINTER
CA08 A710       712:          STAA    DIR:HLCN,X  
CA0A 08         713:          INX                 UPDATE "TO" POINTER
CA0B DF00       714:          STX     TOPOINTER
                715:          ;LDX    FROMPOINTER
CA0D DE02       716:          LDX     FROMPOINTER
CA0F 5A         717:          DECB                DOWN COUNT # BYTES TO COPY
CA10 26EF       718:          BNE     UPDATEDIRL
                719:          ;JSR    MARKMODIFIED FORCE DIRECTORY SECTOR BACK TO DISK
CA12 BDBF7C     720:          JSR     MARKMODIFIED
                721:          ;LDX    FCBPOINTER  RESET THE "UPDATEDIR" FLAG
CA15 FEAEA6     722:          LDX     FCBPOINTER
CA18 A60A       723:          LDAA    FCB:FLAGS,X
CA1A 84BF       724:          ANDA    #(\FCBFLG::UPDATEDIR)&$FF
CA1C A70A       725:          STAA    FCB:FLAGS,X
  CA1E          726: UPDATEDIROKRTS   EQU         *




ASM/6800 1.4A0: CA1E SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 310; Form 15    DISK FILE DRIVERS -- DIRECTORY MANAGEMENT ROUTINES
SDOS6800.ASM
CA1E 0C39       727:          OKRTS




ASM/6800 1.4A0: CA1E SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 311; Form 15    DISK FILE DRIVERS -- DIRECTORY MANAGEMENT ROUTINES
SDOS6800.ASM
                729: *
                730: *        COMPARENAMES -- COMPARES (X) TO (DIRENTRY) FOR DIR:NAMESIZE BYTES
                731: *                DOES NOT DISTURB BUFFER
                732: *                RETURNS Z SET IF MATCH
                733: *                RESET IF NO MATCH
                734: *
  CA20          735: COMPARENAMES     EQU         *
  0001          736:          IF      M6800!M6801
CA20 DF00       737:          STX     TOPOINTER   SAVE "COMPARE TO" POINTER
                738:          ;LDX    DIRENTRY    GET COMPARE AGAINST POINTER
CA22 FEAEA8     739:          LDX     DIRENTRY
  0001          740:          ELSE    (M6809)
 *S*            741:          LDY     DIRENTRY    GET COMPARE AGAINST POINTER
                742:          FIN
CA25 C610       743:          LDAB    #DIR:NAMESIZE NUMBER OF BYTES TO COMPARE
                744: *
                745: *        BLOCKCOMPARE -- COMPARE (X) TO (Y) FOR (B) BYTES
                746: *        (ON 6800/6801, (Y) IS LOCATION 0)
                747: *        RETURN CC "Z" BIT SET IF MATCH, ELSE RESET IF NO MATCH
                748: *
  CA27          749: BLOCKCOMPARE     ; COMPARE (X) TO (Y) FOR (B) BYTES
  0001          750:          IF      M6800!M6801
                751:          ;LDA    ,X+         GET BYTE TO COMPARE
CA27 A600       752:          LDAA    0,X
CA29 08         753:          INX
CA2A DF02       754:          STX     FROMPOINTER SAVE "FROM" POINTER
                755:          ;LDX    TOPOINTER   = "TO" POINTER
CA2C DE00       756:          LDX     TOPOINTER
                757:          ;CMPA   ,X          COMPARE BYTES
CA2E A100       758:          CMPA    0,X
CA30 2608       759:          BNE     BLOCKCOMPARERTS B/ STRINGS DON'T MATCH
CA32 08         760:          INX
CA33 DF00       761:          STX     TOPOINTER   SAVE UPDATE "TO" POINTER
                762:          ;LDX    FROMPOINTER GET SOURCE POINTER BACK
CA35 DE02       763:          LDX     FROMPOINTER
  0001          764:          ELSE    (M6809)
 *S*            765:          ;LDA    ,X+         GET A BYTE TO COMPARE
 *S*            766:          LDAA    0,X
 *S*            767:          INX
 *S*            768:          ;CMPA   ,Y+         COMPARE THEM




ASM/6800 1.4A0: CA35 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 312; Form 15    DISK FILE DRIVERS -- DIRECTORY MANAGEMENT ROUTINES
SDOS6800.ASM
 *S*            769:          CMPA    
 *S*            770:          BNE     BLOCKCOMPARERTS B/ NO MATCH
                771:          FIN
CA37 5A         772:          DECB                DOWN COUNT # BYTES TO COMPARE
CA38 26ED       773:          BNE     BLOCKCOMPARE B/ MORE TO COMPARE
  CA3A          774: BLOCKCOMPARERTS
CA3A 39         775:          RTS




ASM/6800 1.4A0: CA3A SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 313; Form 15    DISK FILE DRIVERS -- DIRECTORY MANAGEMENT ROUTINES
SDOS6800.ASM
                777: *
                778: *        HASHFOLD -- SUM NEXT 4 BYTES(X), MASK TO 6 BITS
                779: *                RETURN SIX BIT SUM IN (A)
                780: *                BUMP (X) BY 4
                781: *
  CA3B          782: HASHFOLD EQU     *
CA3B A600       783:          LDAA    ,X          SUM NEXT 4 BYTES
CA3D AB01       784:          ADDA    1,X
CA3F AB02       785:          ADDA    2,X
CA41 AB03       786:          ADDA    3,X
CA43 843F       787:          ANDA    #%00111111  MASK OFF ASCII ZONE BITS
                788:          ;LEAX   4,X         BUMP (X) BY 4
  0000          789:          IF      4<0
 *S*            790:          RPT     -4
 *S*            791:          DEX
                792:          ELSE
  0004          793:          RPT     4
CA45 08         794:          INX
                795:          FIN
CA49 39         796:          RTS
                797: *
                798: *        HASHINSERT6 -- LEFT SHIFT (IOCB:CURBYTE+1,+2,(A)) 6 BITS
                799: *
  CA4A          800: HASHINSERT6      EQU         *
CA4A C606       801:          LDAB    #6          GET COUNT OF 6
  CA4C          802: HASHINSERT6L     EQU         *
CA4C 48         803:          ASLA                SHIFT LEFT 1 BIT
CA4D 690F       804:          ROL     IOCB:CURBYTE+2,X
CA4F 690E       805:          ROL     IOCB:CURBYTE+1,X
CA51 5A         806:          DECB                DO IT 6 TIMES
CA52 26F8       807:          BNE     HASHINSERT6L
CA54 39         808:          RTS




ASM/6800 1.4A0: CA54 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 314; Form 15    DISK FILE DRIVERS -- DIRECTORY MANAGEMENT ROUTINES
SDOS6800.ASM
                810: *
                811: *        HASHNAME --  CONVERT NAME INTO INITIAL PROBE INTO DIRECTORY
                812: *                FOLDS NAME(X) INTO 3 BYTES
                813: *                DIVIDES BY DIRECTORYSIZE TO GET REMAINDER
                814: *                AND PLACES REMAINDER IN IOCB:CURBYTE(SYSIOCB)
                815: *                GUARANTEES INITIAL PROBE IS TO START OF SECTOR
                816: *
  CA55          817: HASHNAME EQU     *
CA55 8DE4       818:          BSR     HASHFOLD    FOLD LEFT MOST 4 BYTES...
CA57 36         819:          PSHA                TO GET RIGHTMOST 6 BITS
CA58 8DE1       820:          BSR     HASHFOLD    FOLD MIDDLE LEFT 4 BYTES...
CA5A 36         821:          PSHA                TO GET BITS 11-6
CA5B 8DDE       822:          BSR     HASHFOLD    FOLD MIDDLE RIGHT 4 BYTES...
CA5D 36         823:          PSHA                TO GET BITS 17-12
CA5E 8DDB       824:          BSR     HASHFOLD    FOLD RIGHTMOST 4 BYTES...
                825:          ;LDX    #SYSIOCB    TO GET LEFTMOST 6 BITS
CA60 CEAF57     826:          LDX     #SYSIOCB
CA63 8DE5       827:          BSR     HASHINSERT6 INSERT BITS 17-12
CA65 33         828:          PULB
CA66 1B         829:          ABA
CA67 8DE1       830:          BSR     HASHINSERT6 INSERT BITS 11-7
CA69 33         831:          PULB
CA6A 1B         832:          ABA
CA6B 8DDD       833:          BSR     HASHINSERT6 INSERT BITS 6-0
CA6D 33         834:          PULB
CA6E 1B         835:          ABA
CA6F A710       836:          STAA    IOCB:CURBYTE+3,X STORE RESULT IN IOCB:CURBYTE,X
                837: *        CLR     IOCB:CURBYTE,X NOW WE HAVE 24 BITS OF FOLDED NAME
                838:          ;LDX    IOCB:DCB,X  NOW COMPUTE # SECTORS IN DIRECTORY
CA71 EE00       839:          LDX     IOCB:DCB,X
CA73 A618       840:          LDAA    DSKINFO:LOG2NBPS,X = DIRSIZE/NBPS
CA75 9704       841:          STAA    COUNT       = DIRSIZE/2^LOG2NBPS
CA77 36         842:          PSHA                WE'LL NEED THIS LATER
                843:          ;LDX    FCBPOINTER  GET ADDRESS OF DIRECTORY.SYS FCB
CA78 FEAEA6     844:          LDX     FCBPOINTER
                845:          ;LDD    FCB:FILESIZE+2,X COPY DIRSIZE TO (A,B,TEMP.DIVISOR,TEMP.DIVISOR+1)
CA7B E614       846:          LDAB    (FCB:FILESIZE+2)+1,X
CA7D A613       847:          LDAA    FCB:FILESIZE+2,X
                848:          ;STD    TEMP.DIVISOR
CA7F D701       849:          STAB    TEMP.DIVISOR+1




ASM/6800 1.4A0: CA81 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 315; Form 15    DISK FILE DRIVERS -- DIRECTORY MANAGEMENT ROUTINES
SDOS6800.ASM
CA81 9700       850:          STAA    TEMP.DIVISOR
                851:          ;LDD    FCB:FILESIZE,X
CA83 E612       852:          LDAB    (FCB:FILESIZE)+1,X
CA85 A611       853:          LDAA    FCB:FILESIZE,X
  CA87          854: HASHNAMEL1       EQU         *
                855:          ;LSRD               DIVISOR:=DIVISOR/2...
CA87 44         856:          LSRA
CA88 56         857:          RORB
CA89 760000     858:          ROR     TEMP.DIVISOR
CA8C 760001     859:          ROR     TEMP.DIVISOR+1 NOTE: NUMBER OF SECTORS IN DIRECTORY <= 32767
                860:          ;DEC    COUNT       LOG2NBPS TIMES
CA8F 7A0004     861:          DEC     COUNT
CA92 26F3       862:          BNE     HASHNAMEL1  LEAVING (A,B) = 0
                863: *        NOW DIVIDE FOLDED NAME BY # OF SECTORS IN DIRECTORY TO GET REMAINDER
                864:          ;LDX    #SYSIOCB    GET ADDRESS OF WORK IOCB
CA94 CEAF57     865:          LDX     #SYSIOCB
CA97 C618       866:          LDAB    #24         # QUOTIENT BITS TO GENERATE
CA99 D704       867:          STAB    COUNT       (AND IGNORE)
CA9B 4F         868:          CLRA                ZERO OUT THE REMAINDER
CA9C 5F         869:          CLRB
  CA9D          870: HASHNAMEL2       EQU         *
CA9D 6810       871:          ASL     IOCB:CURBYTE+3,X SHIFT NEW DIVIDEND BIT INTO REMAINDER
CA9F 690F       872:          ROL     IOCB:CURBYTE+2,X NOTE: CARRIES ARE NOT IMPORTANT...
CAA1 690E       873:          ROL     IOCB:CURBYTE+1,X BECAUSE WE ONLY WANT REMAINDER, NOT QUOTIENT
                874:          ;ROLD
CAA3 59         875:          ROLB
CAA4 49         876:          ROLA
                877:          ;SUBD   TEMP.DIVISOR DOES DIVISOR GO IN?
CAA5 D001       878:          SUBB    TEMP.DIVISOR+1
CAA7 9200       879:          SBCA    TEMP.DIVISOR
CAA9 2404       880:          BCC     HASHNAME2   B/ YEP, LEAVE IT IN
                881:          ;ADDD   TEMP.DIVISOR NO, RESTORE BACK
CAAB DB01       882:          ADDB    TEMP.DIVISOR+1
CAAD 9900       883:          ADCA    TEMP.DIVISOR
  CAAF          884: HASHNAME2        EQU         *
                885:          ;DEC    COUNT       DOWN COUNT # QUOTIENT BITS TO IGNORE
CAAF 7A0004     886:          DEC     COUNT
CAB2 26E9       887:          BNE     HASHNAMEL2  B/ MORE Q BITS TO IGNORE
CAB4 A70F       888:          STAA    IOCB:CURBYTE+2,X STORE FOLDEDNAME MOD NUMBERSECTORS...
                889:          ;CLR    IOCB:CURBYTE+1,X INTO (IOCB:CURBYTE,B)




ASM/6800 1.4A0: CAB6 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 316; Form 15    DISK FILE DRIVERS -- DIRECTORY MANAGEMENT ROUTINES
SDOS6800.ASM
CAB6 6F0E       890:          CLR     IOCB:CURBYTE+1,X
                891:          ;CLR    IOCB:CURBYTE,X
CAB8 6F0D       892:          CLR     IOCB:CURBYTE,X
CABA 32         893:          PULA                NOW MULTIPLY BY 2^LOG2NBPS...
  CABB          894: HASHNAMEL3       ; TO GET LOGICAL BYTE NUMBER OF DESIRED SECTOR
CABB 58         895:          ASLB
CABC 690F       896:          ROL     IOCB:CURBYTE+2,X
CABE 690E       897:          ROL     IOCB:CURBYTE+1,X
CAC0 690D       898:          ROL     IOCB:CURBYTE,X
CAC2 4A         899:          DECA                DOWN COUNT # TIMES TO LEFT SHIFT
CAC3 26F6       900:          BNE     HASHNAMEL3
CAC5 E710       901:          STAB    IOCB:CURBYTE+3,X STORE LAST BYTE OF :CURBYTE
CAC7 39         902:          RTS                 AND EXIT




ASM/6800 1.4A0: CAC7 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 317; Form 16    DISK FILE DRIVERS -- DIRECTORY MANAGEMENT ROUTINES
SDOS6800.ASM
                  2: *
                  3: *        FINDFREEFCB -- LOOKS FOR FCB WITH ZEROED REF COUNT
                  4: *                OKRTS IF FOUND
                  5: *                            FCB IS INITIALIZED FROM DIRENTRY
                  6: *                            REF COUNT IS SET TO ONE
                  7: *                FCBPOINTER, (X), (A,B) ARE LEFT POINTING TO FCB
                  8: *                ERRET IF NONE AVAIALABLE
                  9: *
  CAC8           10: FINDFREEFCB      EQU         *
CAC8 B6AF0A      11:          LDAA    NFCBS       GET # FCBS TO SEARCH
  0001           12:          IF      M6800!M6801
CACB 9704        13:          STAA    COUNT
                 14:          ;LDX    CODE+SDOS:CONFIGURATION
CACD FEAE03      15:          LDX     CODE+SDOS:CONFIGURATION
                 16:          ;LDD    [CNFG:IOCBPOINTERS,X] GET ADDRESS OF 1ST IOCB
CAD0 EE04        17:          LDX     CNFG:IOCBPOINTERS,X
CAD2 E601        18:          LDAB    1,X
CAD4 A600        19:          LDAA    0,X
  CAD6           20: FINDFREEFCBL     EQU         *
                 21:          ;SUBD   #FCB:SIZE   BACK UP TO PREVIOUS FCB
CAD6 C01A        22:          SUBB    #(FCB:SIZE)&$FF
CAD8 8200        23:          SBCA    #(FCB:SIZE)/256
                 24:          ;TDX
CADA 9700        25:          STAA    TEMPA
CADC D701        26:          STAB    TEMPB
CADE DE00        27:          LDX     TEMPX
CAE0 6D0B        28:          TST     FCB:REFCOUNT,X IS THIS FCB BUSY?
CAE2 270A        29:          BEQ     SETUPFCB    B/ NO
                 30:          ;DEC    COUNT       YES, DOWN COUNT # FCB'S TO CHECK
CAE4 7A0004      31:          DEC     COUNT
  0001           32:          ELSE    (M6809)
 *S*             33:          ;LDX    CODE+SDOS:CONFIGURATION
 *S*             34:          LDX     CODE+SDOS:CONFIGURATION
 *S*             35:          ;LDX    [CNFG:IOCBPOINTERS,X] GET ADDRESS OF 1ST DCB
 *S*             36:          LDX     CNFG:IOCBPOINTERS,X
 *S*             37:          LDX     0,X
 *S*             38: FINDFREEFCBL
 *S*             39:          ;LEAX   -FCB:SIZE,X FIND PREVIOUS FCB
 *S*             40:          IF      -FCB:SIZE<0
 *S*             41:          RPT     --FCB:SIZE




ASM/6800 1.4A0: CAE4 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 318; Form 16    DISK FILE DRIVERS -- DIRECTORY MANAGEMENT ROUTINES
SDOS6800.ASM
 *S*             42:          DEX
 *S*             43:          ELSE
 *S*             44:          RPT     -FCB:SIZE
 *S*             45:          INX
 *S*             46:          FIN
 *S*             47:          TST     FCB:REFCOUNT,X IS THIS FCB BUSY?
 *S*             48:          BEQ     SETUPFCB    B/ NO
 *S*             49:          DECA                 YES, DOWN COUNT # FCBS TO SEARCH
                 50:          FIN
CAE7 26ED        51:          BNE     FINDFREEFCBL B/ MORE TO CHECK
                 52:          ;JSR    ERRET       OOPS... NO MORE FCBS???
CAE9 BDB1F6      53:          JSR     ERRET
CAEC 03F9        54:          FDB     ERR:NOFREEFCBS




ASM/6800 1.4A0: CAEC SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 319; Form 16    DISK FILE DRIVERS -- DIRECTORY MANAGEMENT ROUTINES
SDOS6800.ASM
                 56: *        SETUPFCB -- COPY CRITICAL DIRENTRY DATA TO FCB(X)
                 57: *                SET REFCOUNT ON FCB(X) TO 1
                 58: *                ALSO COMPUTES FCB:HLSN FROM FCB:HLCN
                 59: *
  CAEE           60: SETUPFCB EQU     *
CAEE FFAEA6      61:          STX     FCBPOINTER  SAVE FCB ADDRESS
CAF1 DF00        62:          STX     TOPOINTER   SET UP TARGET POINTER
                 63:          ;LDX    DIRENTRY    COPY MOST OF DIRECTORY ENTRY...
CAF3 FEAEA8      64:          LDX     DIRENTRY
CAF6 C60E        65:          LDAB    #DIR:FCBDATASIZE INTO THE FCB
  CAF8           66: SETUPFCBCL       ; COPY A DIRECTORY ENTRY BYTE
CAF8 A610        67:          LDAA    DIR:HLCN,X
CAFA 08          68:          INX
CAFB DF02        69:          STX     FROMPOINTER
                 70:          ;LDX    TOPOINTER   INTO FCB BYTE
CAFD DE00        71:          LDX     TOPOINTER
CAFF A70C        72:          STAA    FCB:HLCN,X  NOTE: DIR AND FCB FORMATS...
CB01 08          73:          INX                 ARE ISOMETRIC WRT DIRECTORY INFO
CB02 DF00        74:          STX     TOPOINTER
                 75:          ;LDX    FROMPOINTER
CB04 DE02        76:          LDX     FROMPOINTER
CB06 5A          77:          DECB
CB07 26EF        78:          BNE     SETUPFCBCL  B/ MORE BYTES TO COPY
                 79:          ;LDD    DCBPOINTER  NOW FINISH FILLING THE FCB
CB09 D607        80:          LDAB    DCBPOINTER+1
CB0B 9606        81:          LDAA    DCBPOINTER
                 82:          ;LDX    FCBPOINTER
CB0D FEAEA6      83:          LDX     FCBPOINTER
                 84:          ;STD    FCB:DISKINFO,X
CB10 E701        85:          STAB    (FCB:DISKINFO)+1,X
CB12 A700        86:          STAA    FCB:DISKINFO,X
CB14 8601        87:          LDAA    #1          MARK FCB AS 'BUSY'
CB16 A70B        88:          STAA    FCB:REFCOUNT,X
                 89:          ;CLR    FCB:FLAGS,X RESET ALL THE FLAG BITS
CB18 6F0A        90:          CLR     FCB:FLAGS,X
                 91:          ;LDD    FCB:HLCN,X  NOW COMPUTE FCB:HLSN = FCB:HLCN * DSKINFO:NSPC
CB1A E60D        92:          LDAB    (FCB:HLCN)+1,X
CB1C A60C        93:          LDAA    FCB:HLCN,X
                 94:          ;JSR    CONVERTLCNTO1ST
CB1E BDD790      95:          JSR     CONVERTLCNTO1ST




ASM/6800 1.4A0: CB1E SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 320; Form 16    DISK FILE DRIVERS -- DIRECTORY MANAGEMENT ROUTINES
SDOS6800.ASM
                 96:          ;LDX    FCBPOINTER  MOVE LSN OF 1ST HEADER SECTOR INTO FCB
CB21 FEAEA6      97:          LDX     FCBPOINTER
                 98:          ;STD    FCB:HLSN+1,X
CB24 E709        99:          STAB    (FCB:HLSN+1)+1,X
CB26 A708       100:          STAA    FCB:HLSN+1,X
CB28 B6AF14     101:          LDAA    SYSSECTORDB+SECTORDB:LSN
CB2B A707       102:          STAA    FCB:HLSN,X
  CB2D          103: SETUPFCBDIRPOS   ; SETUP DIRENTRY DATA IN FCB
CB2D B6AF59     104:          LDAA    SYSIOCB+IOCB:CURLSN SAVE LSN OF DIRECTORY SECTOR
CB30 A702       105:          STAA    FCB:DIRLSN,X
                106:          ;LDD    SYSIOCB+IOCB:CURLSN+1
CB32 F6AF5B     107:          LDAB    SYSIOCB+IOCB:CURLSN+1+1
CB35 B6AF5A     108:          LDAA    SYSIOCB+IOCB:CURLSN+1
                109:          ;STD    FCB:DIRLSN+1,X
CB38 E704       110:          STAB    (FCB:DIRLSN+1)+1,X
CB3A A703       111:          STAA    FCB:DIRLSN+1,X
                112:          ;LDD    DIRENTRYDISP AND DISPLACEMENT TO ENTRY
CB3C F6AEAB     113:          LDAB    DIRENTRYDISP+1
CB3F B6AEAA     114:          LDAA    DIRENTRYDISP
                115:          ;STD    FCB:DIRDISP,X
CB42 E706       116:          STAB    (FCB:DIRDISP)+1,X
CB44 A705       117:          STAA    FCB:DIRDISP,X
                118:          ;LDD    FCBPOINTER  SET (A,B):=FCBPOINTER BECAUSE THIS IS SOMETIMES CONVENIEN
CB46 F6AEA7     119:          LDAB    FCBPOINTER+1
CB49 B6AEA6     120:          LDAA    FCBPOINTER
CB4C 0C39       121:          OKRTS




ASM/6800 1.4A0: CB4C SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 321; Form 16    DISK FILE DRIVERS -- DIRECTORY MANAGEMENT ROUTINES
SDOS6800.ASM
                123: *
                124: *        SEARCHFCBINIT -- INITIALIZE FOR SEARCH OF FCBS
                125: *                SETS UP FCBPOINTER, COUNT
                126: *                SO THAT "SEARCHFCBS" MAY BE CALLED REPEATEDLY
                127: *                UNTIL IT FAILS
                128: *
  CB4E          129: SEARCHFCBINIT    EQU         *
CB4E B6AF0A     130:          LDAA    NFCBS       GET # FCBS TO SEARCH
CB51 9704       131:          STAA    COUNT
                132:          ;LDX    CODE+SDOS:CONFIGURATION GET ADDRESS OF FIRST IOCB
CB53 FEAE03     133:          LDX     CODE+SDOS:CONFIGURATION
                134:          ;LDX    [CNFG:IOCBPOINTERS,X]
CB56 EE04       135:          LDX     CNFG:IOCBPOINTERS,X
CB58 EE00       136:          LDX     0,X
CB5A FFAEA6     137:          STX     FCBPOINTER
CB5D 39         138:          RTS
                139: *
                140: *        SEARCHFCBS -- SEARCH FCBS FOR MATCHING SYSIOCB+IOCB:CURLSN AND DIRENTRYDISP
                141: *                OKRTS IF FOUND; DOES NOT BUMP REFCOUNT, SETS FCBPOINTER
                142: *                WILL NOT MATCH AGAINST FCBS WHOSE "DELETED" BIT IS SET
                143: *                ERRET IF NO MATCH
                144: *
  CB5E          145: SEARCHFCBS       EQU         *
                146:          ;LDD    FCBPOINTER  FIND NEXT FCB
CB5E F6AEA7     147:          LDAB    FCBPOINTER+1
CB61 B6AEA6     148:          LDAA    FCBPOINTER
                149:          ;SUBD   #FCB:SIZE   = THIS FCB - FCB:SIZE
CB64 C01A       150:          SUBB    #(FCB:SIZE)&$FF
CB66 8200       151:          SBCA    #(FCB:SIZE)/256
                152:          ;STD    FCBPOINTER  REMEMBER FCB ADDRESS
CB68 F7AEA7     153:          STAB    FCBPOINTER+1
CB6B B7AEA6     154:          STAA    FCBPOINTER
                155:          ;LDX    FCBPOINTER  IS FCB FREE ?
CB6E FEAEA6     156:          LDX     FCBPOINTER
CB71 A60B       157:          LDAA    FCB:REFCOUNT,X
CB73 272F       158:          BEQ     SEARCHFCBCMPNO B/ YES, CAN'T MATCH
                159:          ;LDD    SYSIOCB+IOCB:CURLSN+1 (THESE TESTS ORDERED ACCORDING TO PROBABILTY OF
CB75 F6AF5B     160:          LDAB    SYSIOCB+IOCB:CURLSN+1+1
CB78 B6AF5A     161:          LDAA    SYSIOCB+IOCB:CURLSN+1
                162:          ;CMPD   FCB:DIRLSN+1,X DIRECTORY LSN = FCB:DIRLSN ?




ASM/6800 1.4A0: CB7B SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 322; Form 16    DISK FILE DRIVERS -- DIRECTORY MANAGEMENT ROUTINES
SDOS6800.ASM
CB7B A103       163:          CMPA    FCB:DIRLSN+1,X
CB7D 2602       164:          BNE     MACRO:001A
CB7F E104       165:          CMPB    (FCB:DIRLSN+1)+1,X
  CB81          166: MACRO:001A
CB81 2621       167:          BNE     SEARCHFCBCMPNO B/ NOPE
CB83 B6AF59     168:          LDAA    SYSIOCB+IOCB:CURLSN
                169:          ;CMPA   FCB:DIRLSN,X
CB86 A102       170:          CMPA    FCB:DIRLSN,X
CB88 261A       171:          BNE     SEARCHFCBCMPNO B/ WRONG LSN
                172:          ;LDD    DIRENTRYDISP CORRECT DIR ENTRY DISPLACMENT ?
CB8A F6AEAB     173:          LDAB    DIRENTRYDISP+1
CB8D B6AEAA     174:          LDAA    DIRENTRYDISP
                175:          ;CMPD   FCB:DIRDISP,X
CB90 A105       176:          CMPA    FCB:DIRDISP,X
CB92 2602       177:          BNE     MACRO:001B
CB94 E106       178:          CMPB    (FCB:DIRDISP)+1,X
  CB96          179: MACRO:001B
CB96 260C       180:          BNE     SEARCHFCBCMPNO B/ WRONG DISPLACEMENT
CB98 A60A       181:          LDAA    FCB:FLAGS,X IS THIS FCB MARK AS DELETED ?
CB9A 8520       182:          BITA    #FCBFLG::DELETED (IF SO, IGNORE IT)
CB9C 2606       183:          BNE     SEARCHFCBCMPNO B/ NO
                184:          ;LDX    FCB:DISKINFO,X LAST BUT NOT LEAST,
CB9E EE00       185:          LDX     FCB:DISKINFO,X
CBA0 9C06       186:          CPX     DCBPOINTER  IS FCB FOR FILE ON THE CORRECT DISK ?
CBA2 270A       187:          BEQ     SEARCHFCBRTS B/ NO, WE FOUND A MATCH !
  CBA4          188: SEARCHFCBCMPNO   ; THIS FCB WASN'T IT!
                189:          ;DEC    COUNT       DOWN COUNT # FCBS LEFT TO EXAMINE
CBA4 7A0004     190:          DEC     COUNT
CBA7 26B5       191:          BNE     SEARCHFCBS  B/ MORE FCBS TO SEARCH
                192:          ;JSR    ERRET
CBA9 BDB1F6     193:          JSR     ERRET
CBAC 03EF       194:          FDB     ERR:NOMATCHFCB
                195: 
  CBAE          196: SEARCHFCBRTS     EQU         *
                197:          ;LDX    FCBPOINTER
CBAE FEAEA6     198:          LDX     FCBPOINTER
                199:          ;LDD    FCBPOINTER  BECAUSE THIS IS USEFUL, SOMETIMES
CBB1 F6AEA7     200:          LDAB    FCBPOINTER+1
CBB4 B6AEA6     201:          LDAA    FCBPOINTER
CBB7 0C39       202:          OKRTS




ASM/6800 1.4A0: CBB7 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 323; Form 16    DISK FILE DRIVERS -- DIRECTORY MANAGEMENT ROUTINES
SDOS6800.ASM
                204: *
                205: *        PARSEFILENAME -- PASSED POINTER IN SYSCALL BLOCK TO FILENAME
                206: *                BUILDS FILE NAME INTO "FILENAME" BLOCK
                207: *                COLLECTS SPACE ALLOCATION IF SPECIFIED
                208: *        OKRTS IF LEGAL NAME
                209: *        SETS @SCBLK:RDBUF = # BYTES OF FILENAME ACTUALLY SCANNED
                210: *        RETURNS (X) = POINTER TO FILENAME BLOCK
                211: *        ERRET IF ILLEGAL NAME
                212: *
  CBB9          213: PARSEFILENAME    EQU         *
                214:          ;LDX    #0          ZERO OUT 4 BYTE REQUESTED FILE SIZE
CBB9 CE0000     215:          LDX     #0
CBBC FFAECD     216:          STX     FILESIZERQSTD
CBBF FFAECF     217:          STX     FILESIZERQSTD+2
                218:          ;JSR    CHECKRDLEN  MAKE SURE THERE'S ENOUGH ROOM TO READ BACK THE FILE NAME 
CBC2 BDB89F     219:          JSR     CHECKRDLEN
CBC5 0002       220:          FDB     2
                221:          ;LDB    #CREATE:FILESIZESCLEN IS INITIAL FILE ALLOCATION INCLUDED IN CREATE B
CBC7 C612       222:          LDAB    #CREATE:FILESIZESCLEN
                223:          ;JSR    CHECKSCLEN  ...?
CBC9 BDB8FC     224:          JSR     CHECKSCLEN
CBCC 2514       225:          BCS     PARSENAME0  B/ NO, USE USER SPECIFIED SIZE OR 0
                226:          ;LDD    CREATE:FILESIZE,X YES, GET SIZE FROM 1ST 4 BYTES OF DATA
CBCE E60F       227:          LDAB    (CREATE:FILESIZE)+1,X
CBD0 A60E       228:          LDAA    CREATE:FILESIZE,X
                229:          ;STD    FILESIZERQSTD
CBD2 F7AECE     230:          STAB    FILESIZERQSTD+1
CBD5 B7AECD     231:          STAA    FILESIZERQSTD
                232:          ;LDD    CREATE:FILESIZE+2,X
CBD8 E611       233:          LDAB    (CREATE:FILESIZE+2)+1,X
CBDA A610       234:          LDAA    CREATE:FILESIZE+2,X
                235:          ;STD    FILESIZERQSTD+2
CBDC F7AED0     236:          STAB    FILESIZERQSTD+2+1
CBDF B7AECF     237:          STAA    FILESIZERQSTD+2
  CBE2          238: PARSENAME0 ; DEFAULT FILE SIZE SET, NOW PARSE THE NAME ITSELF
                239:          ;LDX    CODE+SDOS:IOBLOCKPTR
CBE2 FEAE07     240:          LDX     CODE+SDOS:IOBLOCKPTR
                241:          ;LDD    SCBLK:WRLEN,X GET SIZE OF USER-SPECIFIED FILE NAME
CBE5 E607       242:          LDAB    (SCBLK:WRLEN)+1,X
CBE7 A606       243:          LDAA    SCBLK:WRLEN,X




ASM/6800 1.4A0: CBE7 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 324; Form 16    DISK FILE DRIVERS -- DIRECTORY MANAGEMENT ROUTINES
SDOS6800.ASM
                244:          ;LDX    SCBLK:RDBUF,X SUBTRACT NUMBER OF CHARACTERS EXTRACTED FOR DEVICE NAME
CBE9 EE0A       245:          LDX     SCBLK:RDBUF,X
                246:          ;SUBD   0,X
CBEB E001       247:          SUBB    (0)+1,X
CBED A200       248:          SBCA    0,X
                249:          ;STD    PARSECOUNT  SAVE SIZE OF FILENAME
CBEF F7AED6     250:          STAB    PARSECOUNT+1
CBF2 B7AED5     251:          STAA    PARSECOUNT
                252:          ;BEQD   ERRBADFILENAMEJ B/ ZERO LENGTH FILE NAME
CBF5 2603       253:          BNE     MACRO:001C
CBF7 5D         254:          TSTB
CBF8 2742       255:          BEQ     ERRBADFILENAMEJ
  CBFA          256: MACRO:001C




ASM/6800 1.4A0: CBF8 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 325; Form 16    DISK FILE DRIVERS -- DIRECTORY MANAGEMENT ROUTINES
SDOS6800.ASM
                258:          ;LDX    CODE+SDOS:IOBLOCKPTR GRAB POINTER TO USER-SPECIFIED FILE NAME
CBFA FEAE07     259:          LDX     CODE+SDOS:IOBLOCKPTR
                260:          ;LDD    SCBLK:WRBUF,X
CBFD E605       261:          LDAB    (SCBLK:WRBUF)+1,X
CBFF A604       262:          LDAA    SCBLK:WRBUF,X
                263:          ;LDX    SCBLK:RDBUF,X SKIP PAST DEVICE NAME
CC01 EE0A       264:          LDX     SCBLK:RDBUF,X
                265:          ;ADDD   0,X
CC03 EB01       266:          ADDB    (0)+1,X
CC05 A900       267:          ADCA    0,X
                268:          ;STD    NAMESCANPTR SET UP TO SCAN FILE NAME
CC07 F7AE4F     269:          STAB    NAMESCANPTR+1
CC0A B7AE4E     270:          STAA    NAMESCANPTR
                271:          ;LDA    [NAMESCANPTR] GRAB THE FIRST BYTE OF THE FILE NAME
CC0D FEAE4E     272:          LDX     NAMESCANPTR
CC10 A600       273:          LDAA    0,X
                274:          ;CMPA   #'.         A PERIOD ?
CC12 812E       275:          CMPA    #'.
CC14 2726       276:          BEQ     ERRBADFILENAMEJ B/ YES, ILLEGAL FILE NAME
                277:          ;JSR    ISDIG       NO, A DIGIT ?
CC16 BDB28E     278:          JSR     ISDIG
CC19 246A       279:          BCC     ERRBADFILENAME B/ YES, MUST START WITH ALPHA OR '$'!
                280:          ;LDX    #FILENAMEBUF
CC1B CEAEBA     281:          LDX     #FILENAMEBUF
CC1E DF00       282:          STX     TOPOINTER
                283:          ;CLR    FILENAMELENGTH = # CHARACTERS ACTUALLY COMPRISING FILENAME
CC20 7FAECC     284:          CLR     FILENAMELENGTH
CC23 C610       285:          LDAB    #DIR:NAMESIZE
  CC25          286: PARSENAME1       EQU         *
                287:          ;JSR    PARSENAMEB
CC25 BDCCDA     288:          JSR     PARSENAMEB
                289:          ;LDX    TOPOINTER
CC28 DE00       290:          LDX     TOPOINTER
                291:          ;STA    ,X+
CC2A A700       292:          STAA    0,X
CC2C 08         293:          INX
CC2D DF00       294:          STX     TOPOINTER   SAVE NEXT PLACE TO STORE BYTE
CC2F 5A         295:          DECB
CC30 26F3       296:          BNE     PARSENAME1
                297: *        NOW SCAN PAST REST OF NAME




ASM/6800 1.4A0: CC30 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 326; Form 16    DISK FILE DRIVERS -- DIRECTORY MANAGEMENT ROUTINES
SDOS6800.ASM
                298: *
  CC32          299: PARSESCANL       EQU         *
                300:          ;JSR    PARSENAMEB
CC32 BDCCDA     301:          JSR     PARSENAMEB
                302:          ;CMPA   #ASCII:SPACE
CC35 8120       303:          CMPA    #ASCII:SPACE
CC37 26F9       304:          BNE     PARSESCANL  B/ VALID CHARACTER FOR FILENAME, IGNORE IT
CC39 B6AECC     305:          LDAA    FILENAMELENGTH IS NAME OF REASONABLE LENGTH ?
  CC3C          306: ERRBADFILENAMEJ
CC3C 2747       307:          BEQ     ERRBADFILENAME B/ NAME IS OF ZERO LENGTH!
                308:          ;CMPA   #DIR:NAMESIZE ...?
CC3E 8110       309:          CMPA    #DIR:NAMESIZE
CC40 2262       310:          BHI     ERRBADFNAMESIZE B/ NO, ITS TOO LONG!




ASM/6800 1.4A0: CC40 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 327; Form 16    DISK FILE DRIVERS -- DIRECTORY MANAGEMENT ROUTINES
SDOS6800.ASM
                312:          ;JSR    PARSENAMEB1
CC42 BDCD03     313:          JSR     PARSENAMEB1
                314:          ;CMPA   #'(         START OF REQUESTED FILESIZE ?
CC45 8128       315:          CMPA    #'(
CC47 2643       316:          BNE     PARSEQUIT   COLLECT # OF BYTES TO ALLOCATE FOR FILE
                317:          ;LDX    #0          OVERRIDE THE DEFAULT GIVEN IN SYSCALL BLOCK
CC49 CE0000     318:          LDX     #0
CC4C FFAECD     319:          STX     FILESIZERQSTD
CC4F FFAECF     320:          STX     FILESIZERQSTD+2
  CC52          321: PARSESCAND       EQU         *
                322:          ;JSR    PARSENAMEB1 LOOKS LIKE DEFAULT FILESIZE
CC52 BDCD03     323:          JSR     PARSENAMEB1
                324:          ;CMPA   #')         END OF FILESIZE
CC55 8129       325:          CMPA    #')
CC57 2733       326:          BEQ     PARSEQUIT   B/ YES
                327:          ;JSR    ISDIG       NO, A DIGIT ?
CC59 BDB28E     328:          JSR     ISDIG
CC5C 2575       329:          BCS     ERRILLFILESIZE NO, OOPS!
CC5E 8030       330:          SUBA    #'0         CONVERT TO BINARY
CC60 B7AED4     331:          STAA    FILESIZE2+3 SAVE THE DIGIT
                332:          ;LDX    FILESIZERQSTD MULTIPLY OLD FILESIZE BY 10
CC63 FEAECD     333:          LDX     FILESIZERQSTD
CC66 DF00       334:          STX     TEMP        FIRST COPY FILESIZERQSTD TO TEMP
                335:          ;LDX    FILESIZERQSTD+2
CC68 FEAECF     336:          LDX     FILESIZERQSTD+2
CC6B DF02       337:          STX     TEMP+2
                338:          ;LDX    #FILESIZERQSTD COMPUTE...
CC6D CEAECD     339:          LDX     #FILESIZERQSTD
CC70 8D3A       340:          BSR     ADDTOFILESIZE 2*FILESIZERQSTD
CC72 8D38       341:          BSR     ADDTOFILESIZE 4*FILESIZERQSTD
                342:          ;LDX    #TEMP
CC74 CE0000     343:          LDX     #TEMP
CC77 8D33       344:          BSR     ADDTOFILESIZE 5*FILESIZERQSTD
                345:          ;LDX    #FILESIZERQSTD
CC79 CEAECD     346:          LDX     #FILESIZERQSTD
CC7C 8D2E       347:          BSR     ADDTOFILESIZE 10*FILESIZERQSTD
                348:          ;LDX    #FILESIZE2  = (0,0,0,DIGIT)
CC7E CEAED1     349:          LDX     #FILESIZE2
CC81 8D29       350:          BSR     ADDTOFILESIZE + DIGIT
CC83 20CD       351:          BRA     PARSESCAND




ASM/6800 1.4A0: CC83 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 328; Form 16    DISK FILE DRIVERS -- DIRECTORY MANAGEMENT ROUTINES
SDOS6800.ASM
                352: 
  CC85          353: ERRBADFILENAME   EQU         *
CC85 8D05       354:          BSR     PARSEQUIT   GO SET LENGTH OF FILENAME INTO REPLY BUFFER
                355:          ;JSR    ERRET
CC87 BDB1F6     356:          JSR     ERRET
CC8A 03FF       357:          FDB     ERR:BADFILENAME
                358: 
  CC8C          359: PARSEQUIT        ; COMPUTE AND STORE LENGTH OF FILENAME
                360:          ;LDD    NAMESCANPTR = NAMESCANPTR - WRBUF FROM SYSCALL BLOCK
CC8C F6AE4F     361:          LDAB    NAMESCANPTR+1
CC8F B6AE4E     362:          LDAA    NAMESCANPTR
                363:          ;LDX    CODE+SDOS:IOBLOCKPTR
CC92 FEAE07     364:          LDX     CODE+SDOS:IOBLOCKPTR
                365:          ;SUBD   SCBLK:WRBUF,X
CC95 E005       366:          SUBB    (SCBLK:WRBUF)+1,X
CC97 A204       367:          SBCA    SCBLK:WRBUF,X
                368:          ;STD    [SCBLK:RDBUF,X] THIS IS READ-BACK BUFFER ADDRESS
CC99 EE0A       369:          LDX     SCBLK:RDBUF,X
CC9B E701       370:          STAB    1,X
CC9D A700       371:          STAA    0,X
                372:          ;LDX    #FILENAMEBUF AS PROMISED
CC9F CEAEBA     373:          LDX     #FILENAMEBUF
CCA2 0C39       374:          OKRTS




ASM/6800 1.4A0: CCA2 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 329; Form 16    DISK FILE DRIVERS -- DIRECTORY MANAGEMENT ROUTINES
SDOS6800.ASM
  CCA4          376: ERRBADFNAMESIZE  EQU         *
                377:          ;JSR    PARSEQUIT   SET FILE NAME LENGTH INTO REPLY BUFFER
CCA4 BDCC8C     378:          JSR     PARSEQUIT
                379:          ;JSR    ERRET
CCA7 BDB1F6     380:          JSR     ERRET
CCAA 03F5       381:          FDB     ERR:BADFNAMESIZE
                382: *
                383: *        ADDTOFILESIZE -- ADDS 4 BYTE NUMBER(X) TO FILESIZERQSTD
                384: *        IF SUM >= 2^31, POPS RETURN OFF STACK AND EXITS TO ERRILLFILESIZE
                385: *
  CCAC          386: ADDTOFILESIZE    EQU         *
                387:          ;LDD    FILESIZERQSTD+2
CCAC F6AED0     388:          LDAB    FILESIZERQSTD+2+1
CCAF B6AECF     389:          LDAA    FILESIZERQSTD+2
                390:          ;ADDD   2,X
CCB2 EB03       391:          ADDB    (2)+1,X
CCB4 A902       392:          ADCA    2,X
                393:          ;STD    FILESIZERQSTD+2
CCB6 F7AED0     394:          STAB    FILESIZERQSTD+2+1
CCB9 B7AECF     395:          STAA    FILESIZERQSTD+2
                396:          ;LDD    FILESIZERQSTD
CCBC F6AECE     397:          LDAB    FILESIZERQSTD+1
CCBF B6AECD     398:          LDAA    FILESIZERQSTD
CCC2 E901       399:          ADCB    1,X
CCC4 A900       400:          ADCA    0,X
CCC6 2B09       401:          BMI     ADDTOFILEOV
CCC8 2507       402:          BCS     ADDTOFILEOV
                403:          ;STD    FILESIZERQSTD
CCCA F7AECE     404:          STAB    FILESIZERQSTD+1
CCCD B7AECD     405:          STAA    FILESIZERQSTD
CCD0 39         406:          RTS
                407: 
  CCD1          408: ADDTOFILEOV      ; ANSWER IS TOO BIG TO BE LEGAL
                409:          ;LEAS   2,S
  0000          410:          IF      2<0
 *S*            411:          RPT     -2
 *S*            412:          DES
                413:          ELSE
  0002          414:          RPT     2
CCD1 31         415:          INS




ASM/6800 1.4A0: CCD2 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 330; Form 16    DISK FILE DRIVERS -- DIRECTORY MANAGEMENT ROUTINES
SDOS6800.ASM
                416:          FIN
  CCD3          417: ERRILLFILESIZE   EQU         *
CCD3 8DB7       418:          BSR     PARSEQUIT   SET FILE NAME LENGTH INTO REPLY BUFFER
                419:          ;JSR    ERRET
CCD5 BDB1F6     420:          JSR     ERRET
CCD8 0400       421:          FDB     ERR:ILLFILESIZE




ASM/6800 1.4A0: CCD8 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 331; Form 16    DISK FILE DRIVERS -- DIRECTORY MANAGEMENT ROUTINES
SDOS6800.ASM
                423: *
                424: *        PARSENAMEB -- GET BYTE OF FILE NAME PROPER
                425: *                RETURN ASCII:SPACE IF END OF NAME, OR NOT ., $, A-Z, 0-9
                426: *
  CCDA          427: PARSENAMEB       EQU         *
                428:          ;LDX    PARSECOUNT  CHECK FOR NO MORE BYTES IN SOURCE OF FILENAME
CCDA FEAED5     429:          LDX     PARSECOUNT
CCDD 2712       430:          BEQ     PARSENAMEBLANK B/ NO MORE, USE A BLANK TO PAD
                431:          ;LDX    NAMESCANPTR GRAB NEXT BYTE FROM SOURCE STRING
CCDF FEAE4E     432:          LDX     NAMESCANPTR
CCE2 A600       433:          LDAA    0,X
                434:          ;CMPA   #'.         VALID CHARACTER FOR FILENAME ?
CCE4 812E       435:          CMPA    #'.
CCE6 270C       436:          BEQ     PARSENAMEBOK B/ YES
                437:          ;CMPA   #'$
CCE8 8124       438:          CMPA    #'$
CCEA 2708       439:          BEQ     PARSENAMEBOK B/ YES
                440:          ;JSR    ISALPHANUM  CHECK FOR ALPHA-NUMERIC AND FOLD
CCEC BDB297     441:          JSR     ISALPHANUM
CCEF 2403       442:          BCC     PARSENAMEBOK B/ IS OK.
  CCF1          443: PARSENAMEBLANK   EQU         *
CCF1 8620       444:          LDAA    #ASCII:SPACE USE A BLANK TO PAD NAME
CCF3 39         445:          RTS
                446: *
  CCF4          447: PARSENAMEBOK     EQU         *
                448:          ;INC    FILENAMELENGTH SO WE KNOW HOW LONG THE ORIGINAL NAME WAS
CCF4 7CAECC     449:          INC     FILENAMELENGTH
  CCF7          450: PARSENAMEBX      ; UPDATE POINTER TO SOURCE STRING
CCF7 08         451:          INX
CCF8 FFAE4E     452:          STX     NAMESCANPTR
                453:          ;LDX    PARSECOUNT  DOWN COUNT # CHARS REMAINING IN SOURCE STRING
CCFB FEAED5     454:          LDX     PARSECOUNT
CCFE 09         455:          DEX
CCFF FFAED5     456:          STX     PARSECOUNT
CD02 39         457:          RTS




ASM/6800 1.4A0: CD02 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 332; Form 16    DISK FILE DRIVERS -- DIRECTORY MANAGEMENT ROUTINES
SDOS6800.ASM
                459: *
                460: *        PARSENAMEB1 -- GET BYTE OF FILENAME
                461: *                RETURN NEXT BYTE OF FILENAME OR BLANK
                462: *
  CD03          463: PARSENAMEB1      EQU         *
                464:          ;LDX    PARSECOUNT  ANY BYTES OF SOURCE STRING UNPROCESSED ?
CD03 FEAED5     465:          LDX     PARSECOUNT
CD06 27E9       466:          BEQ     PARSENAMEBLANK B/ NO, USE A BLANK INSTEAD
                467:          ;LDX    NAMESCANPTR YES, GRAB THE NEXT SOURCE STRING BYTE
CD08 FEAE4E     468:          LDX     NAMESCANPTR
CD0B A600       469:          LDAA    0,X
CD0D 20E8       470:          BRA     PARSENAMEBX AND EXIT WITH IT
                471: *
  CD0F          472: ERRNODISKMAP     EQU         *
                473:          ;JSR    ERRET
CD0F BDB1F6     474:          JSR     ERRET
CD12 03EE       475:          FDB     ERR:NODISKMAP




ASM/6800 1.4A0: CD12 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 333; Form 17    DISK FILE DRIVERS -- DISK SPACE MANAGEMENT
SDOS6800.ASM
                  2: *        ALLOCATECLUSTERS -- ALLOCATES (A,B) DATA CLUSTERS TO FILE
                  3: *                SPECIFIED IN IOCB, STARTING AT IOCB:RDCN
                  4: *                (A,B) MUST BE <> 0 ON ENTRY
                  5: *                CLUSTER SPECIFIED BY IOCB:RDCN MUST NOT CURRENTLY BE ALLOCATED
                  6: *                UPDATES FCB:NCLUSTERS, FCB:HCSIC
                  7: *                IOCBPOINTER POINTS TO IOCB WHOSE FILE IS TO BE IMPROVED
                  8: *                FCBPOINTER MUST SELECT FCB OF FILE TO BE IMPROVED
                  9: *                IF FCB:HCSIC = 0, A HEADER CLUSTER IS ALLOCATED
                 10: *                OKRTS TAKEN IF AT LEAST 1 DATA CLUSTER WAS ALLOCATED
                 11: *                DESTROYS RDCN!
                 12: *                ERRET TAKEN IF NO DISK SPACE AVAILABLE
                 13: *                ZEROES ALLOCATED DATA CLUSTERS IF IOCB:EOFFLAG IS RESET
                 14: *
  CD14           15: ERRALLOC0CLUSTERS
                 16:          ;JSR    ERRET
CD14 BDB1F6      17:          JSR     ERRET
CD17 042B        18:          FDB     ERR:ALLOC0CLUSTERS
                 19: 
  CD19           20: ALLOCATECLUSTERS EQU         *
                 21:          ;STD    ALLOCATIONCOUNT SAVE DESIRED ALLOCATION
CD19 F7AED9      22:          STAB    ALLOCATIONCOUNT+1
CD1C B7AED8      23:          STAA    ALLOCATIONCOUNT
                 24:          ;BEQD   ERRALLOC0CLUSTERS B/ ALLOCATE ZERO CLUSTERS!!??
CD1F 2603        25:          BNE     MACRO:001D
CD21 5D          26:          TSTB
CD22 27F0        27:          BEQ     ERRALLOC0CLUSTERS
  CD24           28: MACRO:001D
                 29:          ;LDX    DCBPOINTER
CD24 DE06        30:          LDX     DCBPOINTER
CD26 A629        31:          LDAA    DSKINFO:MAPFCB,X MAKE SURE DISK HAS A DISKMAP
CD28 27E5        32:          BEQ     ERRNODISKMAP B/ NOPE, I GIVE UP!
                 33:          ;LDX    FCBPOINTER  NOW CHECK EXISTENCE OF HEADER
CD2A FEAEA6      34:          LDX     FCBPOINTER
CD2D A60E        35:          LDAA    FCB:HCSIC,X HCSIC = 0 ?
CD2F 265C        36:          BNE     ALLOC2      B/ HEADER CLUSTER IS ALLOCATED
                 37:          ;CLR    FCB:NCLUSTERS,X MARK '0 CLUSTERS'
CD31 6F0F        38:          CLR     FCB:NCLUSTERS,X
                 39:          ;CLR    FCB:NCLUSTERS+1,X IN FILE
CD33 6F10        40:          CLR     FCB:NCLUSTERS+1,X
                 41:          ;LDX    ALLOCATIONCOUNT BUMP DESIRED DATA CLUSTER COUNT...




ASM/6800 1.4A0: CD35 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 334; Form 17    DISK FILE DRIVERS -- DISK SPACE MANAGEMENT
SDOS6800.ASM
CD35 FEAED8      42:          LDX     ALLOCATIONCOUNT
CD38 08          43:          INX                 TO INSURE HEADER CLUSTER...
CD39 FFAED8      44:          STX     ALLOCATIONCOUNT GETS INCLUDED IN MAP SEARCH
                 45:          ;LDD    #DUMMYLCN   GET 'CHOOSE RANDOM START POINT' CODE AS PREVIOUSLY ALLOCA
CD3C C6FF        46:          LDAB    #(DUMMYLCN)&$FF
CD3E 86FF        47:          LDAA    #(DUMMYLCN)/256
                 48:          ;JSR    SEARCHMAP   GO LOOK FOR DISK SPACE
CD40 BDCF84      49:          JSR     SEARCHMAP
                 50:          ;LDX    ALLOCATIONCOUNT REMOVE HEADER CLUSTER...
CD43 FEAED8      51:          LDX     ALLOCATIONCOUNT
CD46 09          52:          DEX                 FROM DESIRED ALLOCATION
CD47 FFAED8      53:          STX     ALLOCATIONCOUNT
                 54:          ;LDX    FCBPOINTER  STORE LCN OF HEADER CLUSTER
CD4A FEAEA6      55:          LDX     FCBPOINTER
                 56:          ;STD    FCB:HLCN,X
CD4D E70D        57:          STAB    (FCB:HLCN)+1,X
CD4F A70C        58:          STAA    FCB:HLCN,X
                 59:          ;LDX    IOCBPOINTER
CD51 FEAE09      60:          LDX     IOCBPOINTER
                 61:          ;CLR    IOCB:DRSN,X INVENT THE 1ST SECTOR OF HEADER...
CD54 6F1A        62:          CLR     IOCB:DRSN,X
                 63:          ;JSR    CONVERTLCNTOLSN SO WE CAN INITIALIZE IT
CD56 BDD778      64:          JSR     CONVERTLCNTOLSN
                 65:          ;JSR    INVENTSECTOR
CD59 BDD8F0      66:          JSR     INVENTSECTOR
                 67:          ;JSR    ALLOCINITHS INITIALIZE THE 1ST SECTOR OF HEADER CLUSTER
CD5C BDCE94      68:          JSR     ALLOCINITHS
                 69:          ;LDX    FCBPOINTER  BUMP # SECTORS IN HEADER THAT ARE INITZED
CD5F FEAEA6      70:          LDX     FCBPOINTER
                 71:          ;INC    FCB:HCSIC,X (=1)
CD62 6C0E        72:          INC     FCB:HCSIC,X
                 73:          ;INC    FCB:NCLUSTERS+1,X MAKE SURE HEADER CLUSTER IS COUNTED (=1)
CD64 6C10        74:          INC     FCB:NCLUSTERS+1,X
CD66 A60A        75:          LDAA    FCB:FLAGS,X FORCE FCB CONTENTS BACK TO DIRECTORY, ALSO
CD68 8A40        76:          ORAA    #FCBFLG::UPDATEDIR
CD6A A70A        77:          STAA    FCB:FLAGS,X
                 78:          ;LDD    FCB:HLCN,X  PUT SELF POINTER INTO 1ST BYTES OF SECTOR
CD6C E60D        79:          LDAB    (FCB:HLCN)+1,X
CD6E A60C        80:          LDAA    FCB:HLCN,X
                 81:          ;LDX    RDSIPOINTER




ASM/6800 1.4A0: CD70 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 335; Form 17    DISK FILE DRIVERS -- DISK SPACE MANAGEMENT
SDOS6800.ASM
CD70 FEAEA4      82:          LDX     RDSIPOINTER
                 83:          ;LDX    RDSI:SECTORBASE,X
CD73 EE05        84:          LDX     RDSI:SECTORBASE,X
                 85:          ;STD    HEADER:LCN,X NOW 1ST SECTOR OF HEADER CLUSTER IS SET UP
CD75 E701        86:          STAB    (HEADER:LCN)+1,X
CD77 A700        87:          STAA    HEADER:LCN,X
                 88:          ;LDX    IOCBPOINTER COPY LSN OF 1ST HEADER SECTOR...
CD79 FEAE09      89:          LDX     IOCBPOINTER
CD7C A602        90:          LDAA    IOCB:CURLSN,X INTO FCB FOR FILE
CD7E 36          91:          PSHA                COPY LSN TO (TOS),(A,B)
                 92:          ;LDD    IOCB:CURLSN+1,X
CD7F E604        93:          LDAB    (IOCB:CURLSN+1)+1,X
CD81 A603        94:          LDAA    IOCB:CURLSN+1,X
                 95:          ;LDX    FCBPOINTER  THEN INTO FCB
CD83 FEAEA6      96:          LDX     FCBPOINTER
                 97:          ;STD    FCB:HLSN+1,X
CD86 E709        98:          STAB    (FCB:HLSN+1)+1,X
CD88 A708        99:          STAA    FCB:HLSN+1,X
CD8A 32         100:          PULA
CD8B A707       101:          STAA    FCB:HLSN,X




ASM/6800 1.4A0: CD8B SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 336; Form 17    DISK FILE DRIVERS -- DISK SPACE MANAGEMENT
SDOS6800.ASM
  CD8D          103: ALLOC2   ; HEADER CLUSTER EXISTS, CHECK FOR INITIALIZED
                104:          ;LDX    IOCBPOINTER
CD8D FEAE09     105:          LDX     IOCBPOINTER
                106:          ;LDD    IOCB:RDCN,X FIND OUT WHICH HEADER CLUSTER SECTOR...
CD90 E61C       107:          LDAB    (IOCB:RDCN)+1,X
CD92 A61B       108:          LDAA    IOCB:RDCN,X
                109:          ;ADDD   ALLOCATIONCOUNT CONTAINS LAST CLUSTER DESCRIPTOR WE'LL ALLOCATE
CD94 FBAED9     110:          ADDB    ALLOCATIONCOUNT+1
CD97 B9AED8     111:          ADCA    ALLOCATIONCOUNT
                112:          ;SUBD   #1          = RDCN+ALLOCATIONCOUNT-1
CD9A C001       113:          SUBB    #(1)&$FF
CD9C 8200       114:          SBCA    #(1)/256
                115:          ;ASLD               CONVERT # CLUSTERS DESIRED INTO # BYTES REQUIRED TO HOLD 
CD9E 58         116:          ASLB
CD9F 49         117:          ROLA
                118:          ;LDX    DCBPOINTER  MAKE SURE WE DON'T OVERRUN THE HEADER CLUSTER
CDA0 DE06       119:          LDX     DCBPOINTER
                120:          ;CMPD   DSKINFO:NBPC,X (I.E., # BYTES NEEDED IN HEADER CLUSTER < NBPC )
CDA2 A120       121:          CMPA    DSKINFO:NBPC,X
CDA4 2602       122:          BNE     MACRO:001E
CDA6 E121       123:          CMPB    (DSKINFO:NBPC)+1,X
  CDA8          124: MACRO:001E
CDA8 2504       125:          BCS     ALLOC2A     B/ WILL FIT IN HEADER CLUSTER
  CDAA          126: ALLOC2BIG        ; ALLOCATION REQUEST WILL RUN OFF END OF HEADER CLUSTER
CDAA E611       127:          LDAB    DSKINFO:NSPC,X MAKE SURE THIS MANY HEADER SECTORS ARE INITZED
CDAC 2004       128:          BRA     ALLOC2B     GO DO IT!




ASM/6800 1.4A0: CDAC SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 337; Form 17    DISK FILE DRIVERS -- DISK SPACE MANAGEMENT
SDOS6800.ASM
  CDAE          130: ALLOC2A  EQU     *
                131:          ;JSR    COMPUTERSN  COMPUTE RELATIVE SECTOR NUMBER
CDAE BDD771     132:          JSR     COMPUTERSN
CDB1 5C         133:          INCB                (B) NOW CONTAINS # HEADER SECTORS THAT NEED TO BE INITZ'D
  CDB2          134: ALLOC2B  EQU     *
                135:          ;LDX    FCBPOINTER  CHECK TO MAKE SURE ALL OF THEM ARE INITZ'D
CDB2 FEAEA6     136:          LDX     FCBPOINTER
                137:          ;CMPB   FCB:HCSIC,X (I.E., IS HCSIC >= NUMBER NEEDED ?)
CDB5 E10E       138:          CMPB    FCB:HCSIC,X
CDB7 2528       139:          BCS     ALLOC3      B/ ALL NEEDED HEADER SECTORS ARE INITZ'D
CDB9 2726       140:          BEQ     ALLOC3      B/ # NEEDED = # INITZED, ALL IS OK
CDBB 8640       141:          LDAA    #FCBFLG::UPDATEDIR *** MUST INITZ HEADER CLUSTER SECTORS ***
CDBD AA0A       142:          ORAA    FCB:FLAGS,X MAKE SURE DIRECTORY GETS UPDATED
CDBF A70A       143:          STAA    FCB:FLAGS,X SINCE WE'LL CHANGE FCB:HCSIC
CDC1 A60E       144:          LDAA    FCB:HCSIC,X GRAB THE CURRENTLY INITZ'D COUNT
CDC3 E70E       145:          STAB    FCB:HCSIC,X STORE THE NEW VALUE
                146:          ;LDX    IOCBPOINTER STUFF VALUE INTO IOCB
CDC5 FEAE09     147:          LDX     IOCBPOINTER
CDC8 A721       148:          STAA    IOCB:HRSN,X SO WE CAN USE GENHLSNPLUSHRSN
  CDCA          149: ALLOCINITHC      ; NOW INITIALIZE HEADER SECTORS
                150:          ;JSR    GENHLSNPLUSHRSN GEN HLSN PLUS RELATIVE HEADER SECTOR NUMBER
CDCA BDD7C5     151:          JSR     GENHLSNPLUSHRSN
                152:          ;JSR    INVENTSECTOR DON'T BOTHER READING THE SECTOR FROM THE DISK
CDCD BDD8F0     153:          JSR     INVENTSECTOR
                154:          ;JSR    ALLOCINITHS GO INITIALIZE THE HEADER SECTOR
CDD0 BDCE94     155:          JSR     ALLOCINITHS
                156:          ;LDX    IOCBPOINTER RETRIEVE NEXT RELATIVE SECTOR NUMBER TO INITZ
CDD3 FEAE09     157:          LDX     IOCBPOINTER
                158:          ;INC    IOCB:HRSN,X = LAST RELATIVE SECTOR NUMBER + 1
CDD6 6C21       159:          INC     IOCB:HRSN,X
CDD8 A621       160:          LDAA    IOCB:HRSN,X
                161:          ;LDX    FCBPOINTER  DONE INITIALIZING HEADER SECTORS ?
CDDA FEAEA6     162:          LDX     FCBPOINTER
                163:          ;CMPA   FCB:HCSIC,X ...?
CDDD A10E       164:          CMPA    FCB:HCSIC,X
CDDF 26E9       165:          BNE     ALLOCINITHC B/ NO, GO INIT ANOTHER ONE




ASM/6800 1.4A0: CDDF SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 338; Form 17    DISK FILE DRIVERS -- DISK SPACE MANAGEMENT
SDOS6800.ASM
  CDE1          167: ALLOC3   ; REQUIRED HEADER SECTORS ARE ALL INITIALIZED
                168:          ;JSR    LOCATERDCN  JUST TO MAKE SURE THAT RDCN SLOT EXISTS IN HEADER
CDE1 BDD66B     169:          JSR     LOCATERDCN
                170: * WE'RE TRYING TO GAURANTEE AT LEAST 1 DATA CLUSTER GETS ALLOCATED TO FILE!
                171:          ;LDX    IOCBPOINTER TO MAKE SURE ITS RIGHT
CDE4 FEAE09     172:          LDX     IOCBPOINTER
                173:          ;LDD    IOCB:RDCN,X FIND CLUSTER # ALLOCATED...
CDE7 E61C       174:          LDAB    (IOCB:RDCN)+1,X
CDE9 A61B       175:          LDAA    IOCB:RDCN,X
                176: *        JUST PREVIOUS TO THE SLOT WE'RE ABOUT TO FILL
                177:          ;SUBD   #1          FIND RELATIVE DATA CLUSTER NUMBER OF PREVIOUS DATA CLUSTE
CDEB C001       178:          SUBB    #(1)&$FF
CDED 8200       179:          SBCA    #(1)/256
                180:          ;STD    IOCB:RDCN,X AND SAVE IT (WE'LL BUMP IT BACK TO ORIGINAL VALUE LATER)
CDEF E71C       181:          STAB    (IOCB:RDCN)+1,X
CDF1 A71B       182:          STAA    IOCB:RDCN,X
                183:          ;JSR    LOCATERDCN  GO FIND PREVIOUS LCN
CDF3 BDD66B     184:          JSR     LOCATERDCN
                185:          ;LDD    HEADER:LCN,X NOW GET THE PREVIOUSLY ALLOCATED CLUSTER NUMBER
CDF6 E601       186:          LDAB    (HEADER:LCN)+1,X
CDF8 A600       187:          LDAA    HEADER:LCN,X
                188:          ;JSR    SEARCHMAP   LET'S ALLOCATE THE FIRST DATA CLUSTER
CDFA BDCF84     189:          JSR     SEARCHMAP
                190:          ;LDX    IOCBPOINTER SET RDCN BACK TO ENTRY VALUE
CDFD FEAE09     191:          LDX     IOCBPOINTER
                192:          ;INC    IOCB:RDCN+1,X
CE00 6C1C       193:          INC     IOCB:RDCN+1,X
CE02 2618       194:          BNE     ALLOCDC2
                195:          ;INC    IOCB:RDCN,X
CE04 6C1B       196:          INC     IOCB:RDCN,X
CE06 2014       197:          BRA     ALLOCDC2    FOUND A FREE CLUSTER, SKIP INTO LOOP
                198: 
  CE08          199: ALLOCERRED       EQU         *
CE08 39         200:          RTS
                201: 
  CE09          202: ALLOCDC5 ; SEARCHMAP FAILED ON 2ND OR LATER DATA CLUSTER
CE09 8C03F7     203:          CPX     #ERR:NODISKSPACE OUT OF DISK SPACE ?
CE0C 26FA       204:          BNE     ALLOCERRED  B/ NO, PROBLEM IS MORE SERIOUS
                205:          ;JMP    ALLOCDONE   ELSE WE CAN QUIT; WE ALLOCATED A SECTOR
CE0E 7ECE83     206:          JMP     ALLOCDONE




ASM/6800 1.4A0: CE0E SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 339; Form 17    DISK FILE DRIVERS -- DISK SPACE MANAGEMENT
SDOS6800.ASM
  CE11          208: ALLOCDATACLUSTERS            ; ALLOCATE MORE DATA CLUSTERS TO FILE
                209:          ;LDD    ALLOCATIONPLCN GET PREVIOUSLY ALLOCATED LCN
CE11 F6AEDB     210:          LDAB    ALLOCATIONPLCN+1
CE14 B6AEDA     211:          LDAA    ALLOCATIONPLCN
                212:          ;JSR    SEARCHMAP   GO FIND ME A PLACE!
CE17 BDCF84     213:          JSR     SEARCHMAP
CE1A 25ED       214:          BCS     ALLOCDC5    NO MORE SECTORS AVAILABLE FOR ALLOCATION
  CE1C          215: ALLOCDC2 ; ENTRY POINT FOR FIRST DATA CLUSTER ALLOCATION
                216:          ;STD    ALLOCATIONPLCN SAVE LCN JUST FOUND FOR USE NEXT ROUND (POETIC, HUH?)
CE1C F7AEDB     217:          STAB    ALLOCATIONPLCN+1
CE1F B7AEDA     218:          STAA    ALLOCATIONPLCN
                219:          ;JSR    LOCATERDCN  GET POINTER TO RDCN IN SECTOR
CE22 BDD66B     220:          JSR     LOCATERDCN
                221:          ;LDD    ALLOCATIONPLCN STORE NEWLY ALLOCATED LCN INTO HEADER SECTOR OF FILE
CE25 F6AEDB     222:          LDAB    ALLOCATIONPLCN+1
CE28 B6AEDA     223:          LDAA    ALLOCATIONPLCN
                224:          ;STD    HEADER:LCN,X
CE2B E701       225:          STAB    (HEADER:LCN)+1,X
CE2D A700       226:          STAA    HEADER:LCN,X
                227:          ;LDX    IOCBPOINTER MARK HEADER SECTOR AS MODIFIED
CE2F FEAE09     228:          LDX     IOCBPOINTER
                229:          ;LDX    IOCB:HRDSI,X LOCATERDCN MAKES THIS VALID!
CE32 EE1F       230:          LDX     IOCB:HRDSI,X
CE34 8601       231:          LDAA    #1
CE36 A70B       232:          STAA    RDSI:MODIFIED,X
                233:          ;LDX    IOCBPOINTER IS THIS ALLOCATION...
CE38 FEAE09     234:          LDX     IOCBPOINTER
CE3B A60B       235:          LDAA    IOCB:EOFFLAG,X OCCURRING IN THE MIDDLE OF THE FILE ?
CE3D 260D       236:          BNE     ALLOCDC4    B/ NO, ALLOCATION OCCURRING PAST END OF FILE
                237:          ;CLR    IOCB:LOCATEDF,X FORCE RE-LOCATION TO OCCUR AGAIN
CE3F 6F11       238:          CLR     IOCB:LOCATEDF,X
                239:          ;CLR    IOCB:DRSN,X SELECT SECTOR ZERO OF CLUSTER
CE41 6F1A       240:          CLR     IOCB:DRSN,X
                241:          ;LDD    ALLOCATIONPLCN GET CLUSTER NUMBER
CE43 F6AEDB     242:          LDAB    ALLOCATIONPLCN+1
CE46 B6AEDA     243:          LDAA    ALLOCATIONPLCN
                244:          ;JSR    ZEROCLUSTER GO ZERO THE CLUSTER
CE49 BDCEC9     245:          JSR     ZEROCLUSTER
  CE4C          246: ALLOCDC4 ; DONE ZEROING CLUSTER
                247:          ;LDX    FCBPOINTER  BUMP # CLUSTERS ALLOCATED TO FILE




ASM/6800 1.4A0: CE4C SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 340; Form 17    DISK FILE DRIVERS -- DISK SPACE MANAGEMENT
SDOS6800.ASM
CE4C FEAEA6     248:          LDX     FCBPOINTER
                249:          ;INC    FCB:NCLUSTERS+1,X
CE4F 6C10       250:          INC     FCB:NCLUSTERS+1,X
CE51 2602       251:          BNE     ALLOCDC3
                252:          ;INC    FCB:NCLUSTERS,X
CE53 6C0F       253:          INC     FCB:NCLUSTERS,X
  CE55          254: ALLOCDC3 EQU     *
CE55 A60A       255:          LDAA    FCB:FLAGS,X FORCE FCB BACK TO DIRECTORY
CE57 8A40       256:          ORAA    #FCBFLG::UPDATEDIR
CE59 A70A       257:          STAA    FCB:FLAGS,X
                258:          ;LDX    ALLOCATIONCOUNT REMEMBER THAT WE ALLOCATED A CLUSTER
CE5B FEAED8     259:          LDX     ALLOCATIONCOUNT
CE5E 09         260:          DEX                 BY DECREMENTING NUMBER OF CLUSTERS LEFT TO ALLOCATE
CE5F FFAED8     261:          STX     ALLOCATIONCOUNT REMEMBER NUMBER OF CLUSTERS LEFT TO ALLOCATE
CE62 271F       262:          BEQ     ALLOCDONE   B/ ALL DONE ALLOCATING
                263:          ;LDX    IOCBPOINTER BUMP RELATIVE DATA CLUSTER NUMBER...
CE64 FEAE09     264:          LDX     IOCBPOINTER
                265:          ;INC    IOCB:RDCN+1,X SO WE WILL FILL THE NEXT ONE
CE67 6C1C       266:          INC     IOCB:RDCN+1,X
CE69 2602       267:          BNE     ALLOCDC1    B/ NO CARRY TO PROPOGATE
                268:          ;INC    IOCB:RDCN,X
CE6B 6C1B       269:          INC     IOCB:RDCN,X
  CE6D          270: ALLOCDC1 EQU     *
                271:          ;LDD    IOCB:RDCN,X WILL WE RUN OFF END OF HEADER CLUSTER ?
CE6D E61C       272:          LDAB    (IOCB:RDCN)+1,X
CE6F A61B       273:          LDAA    IOCB:RDCN,X
                274:          ;ASLD               (I.E., IS RDCN*2 >= NBPC ? )
CE71 58         275:          ASLB
CE72 49         276:          ROLA
                277:          ;LDX    DCBPOINTER
CE73 DE06       278:          LDX     DCBPOINTER
                279:          ;SUBD   DSKINFO:NBPC,X (I.E., IS RDCN-NBPC >= 0?)
CE75 E021       280:          SUBB    (DSKINFO:NBPC)+1,X
CE77 A220       281:          SBCA    DSKINFO:NBPC,X
CE79 2408       282:          BCC     ALLOCDONE   B/ YES, QUIT ALLOCATING NOW
                283:          ;JSR    LOCATERDCN  LOCATE NEXT LCN FOR DATA CLUSTER
CE7B BDD66B     284:          JSR     LOCATERDCN
                285:          ;LDX    HEADER:LCN,X IS LCN FOR :RDCN UNALLOCATED ?
CE7E EE00       286:          LDX     HEADER:LCN,X
CE80 08         287:          INX                 ...?




ASM/6800 1.4A0: CE81 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 341; Form 17    DISK FILE DRIVERS -- DISK SPACE MANAGEMENT
SDOS6800.ASM
CE81 270E       288:          BEQ     ALLOCDATACLUSTJ B/ YES, GO FILL UNALLOCATED SLOT
  CE83          289: ALLOCDONE        ; AT LEAST ONE DATA CLUSTER WAS ALLOCATED
                290:          ;LDD    ALLOCATIONPLCN UPDATE RANDOM MAP SEARCH START POINT
CE83 F6AEDB     291:          LDAB    ALLOCATIONPLCN+1
CE86 B6AEDA     292:          LDAA    ALLOCATIONPLCN
                293:          ;LDX    DCBPOINTER  TO LAST ALLOCATED SECTOR...
CE89 DE06       294:          LDX     DCBPOINTER
                295:          ;STD    DSKINFO:RANDMAP,X WHICH IS NEAR A REGION OF FREE CLUSTERS
CE8B E723       296:          STAB    (DSKINFO:RANDMAP)+1,X
CE8D A722       297:          STAA    DSKINFO:RANDMAP,X
CE8F 0C39       298:          OKRTS
                299: 
  CE91          300: ALLOCDATACLUSTJ  EQU         *
                301:          ;JMP    ALLOCDATACLUSTERS
CE91 7ECE11     302:          JMP     ALLOCDATACLUSTERS




ASM/6800 1.4A0: CE91 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 342; Form 17    DISK FILE DRIVERS -- DISK SPACE MANAGEMENT
SDOS6800.ASM
                304: *
                305: *        ALLOCINITHS -- INITIALIZE HEADER CLUSTER SECTOR...
                306: *                WHOSE RDSI IS IN RDSIPOINTER
                307: *                RETURN (X)= IOCBPOINTER
                308: *                MARKS SECTOR AS MODIFIED
                309: *
  CE94          310: ALLOCINITHS      EQU         *
                311:          ;LDX    DCBPOINTER  GET NEGATIVE OF NUMBER OF BYTES PER SECTOR
CE94 DE06       312:          LDX     DCBPOINTER
CE96 4F         313:          CLRA
CE97 5F         314:          CLRB
                315:          ;SUBD   DSKINFO:NBPS,X
CE98 E00A       316:          SUBB    (DSKINFO:NBPS)+1,X
CE9A A209       317:          SBCA    DSKINFO:NBPS,X
CE9C 9700       318:          STAA    TEMPA
                319:          ;LDX    RDSIPOINTER TAG SECTOR AS MODIFIED
CE9E FEAEA4     320:          LDX     RDSIPOINTER
CEA1 8601       321:          LDAA    #1
CEA3 A70B       322:          STAA    RDSI:MODIFIED,X
                323:          ;LDX    RDSI:SECTORBASE,X GET SECTOR BUFFER ADDRESS
CEA5 EE05       324:          LDX     RDSI:SECTORBASE,X
CEA7 40         325:          NEGA                GET -1 CODE TO STORE INTO HEADER SECTOR
                326: *
                327: *        STAASECTORL -- COPY (A) INTO SECTOR BUFFER (X)
                328: *                (TEMPA,B) = - # BYTES TO COPY
                329: *
  CEA8          330: STAASECTORL      ; INITZ A SECTOR BYTE
                331:          ;STA    ,X+         FILL SECTOR WITH -1'S
CEA8 A700       332:          STAA    0,X
CEAA 08         333:          INX
CEAB 5C         334:          INCB
CEAC 26FA       335:          BNE     STAASECTORL B/ MORE TO FILL
                336:          ;INC    TEMPA       = UPPER HALF OF COUNTER
CEAE 7C0000     337:          INC     TEMPA
CEB1 26F5       338:          BNE     STAASECTORL B/ MORE TO FILL
                339:          ;LDX    IOCBPOINTER AS PROMISED
CEB3 FEAE09     340:          LDX     IOCBPOINTER
CEB6 39         341:          RTS




ASM/6800 1.4A0: CEB6 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 343; Form 17    DISK FILE DRIVERS -- DISK SPACE MANAGEMENT
SDOS6800.ASM
                343: *
                344: *        ZEROSECTOR -- ZERO OUT THE SECTOR BUFFER OF RDSIPOINTER
                345: *        DOES NOT MARK SECTOR AS MODIFIED
                346: *        (BECAUSE IT MIGHT BE A READ OF A SPARSE SECTOR)
                347: *
  CEB7          348: ZEROSECTOR       EQU         *
                349:          ;LDX    DCBPOINTER  GET NEGATIVE OF NUMBER OF BYTES PER SECTOR
CEB7 DE06       350:          LDX     DCBPOINTER
CEB9 4F         351:          CLRA                = 0 - DSKINFO:NBPS
CEBA 5F         352:          CLRB
                353:          ;SUBD   DSKINFO:NBPS,X
CEBB E00A       354:          SUBB    (DSKINFO:NBPS)+1,X
CEBD A209       355:          SBCA    DSKINFO:NBPS,X
CEBF 9700       356:          STAA    TEMPA       SINCE (A) WILL BE BUSY WITH ZERO
                357:          ;LDX    RDSIPOINTER MARK SECTOR AS MODIFIED
CEC1 FEAEA4     358:          LDX     RDSIPOINTER
                359:          ;LDX    RDSI:SECTORBASE,X GET SECTOR BUFFER ADDRESS
CEC4 EE05       360:          LDX     RDSI:SECTORBASE,X
CEC6 4F         361:          CLRA                MAKE A ZERO TO STORE
CEC7 20DF       362:          BRA     STAASECTORL AND GO STORE A SECTORFUL
                363: *
                364: *        ZEROCLUSTER -- ZEROS OUT CLUSTER WHOSE LCN IS IN (A,B)
                365: *
  CEC9          366: ZEROCLUSTER      EQU         *
                367:          ;JSR    CONVERTLCNTOLSN AND GO FIND FIRST SECTOR OF CLUSTER !
CEC9 BDD778     368:          JSR     CONVERTLCNTOLSN
  CECC          369: ZEROCLUSTERL     ; ZERO OUT A DATA CLUSTER LOOP
                370:          ;LDX    IOCBPOINTER GET SECTOR DESCRIPTOR ADDRESS
CECC FEAE09     371:          LDX     IOCBPOINTER
                372:          ;JSR    INVENTSECTOR INVENT THE DATA SECTOR ADDRESS
CECF BDD8F0     373:          JSR     INVENTSECTOR
CED2 8DE3       374:          BSR     ZEROSECTOR  GO ZERO IT!
                375:          ;JSR    MARKMODIFIED MARK THIS SECTOR AS MODIFIED
CED4 BDBF7C     376:          JSR     MARKMODIFIED
                377:          ;JSR    INCIOCB:CURLSN FIND NEXT DATA SECTOR ADDRESS
CED7 BDD7F0     378:          JSR     INCIOCB:CURLSN
                379:          ;INC    IOCB:DRSN,X BUMP RELATIVE SECTOR NUMBER WITHIN CLUSTER
CEDA 6C1A       380:          INC     IOCB:DRSN,X
CEDC A61A       381:          LDAA    IOCB:DRSN,X ZEROED ALL THE SECTORS IN THE CLUSTER ?
                382:          ;LDX    IOCB:DCB,X  ...?




ASM/6800 1.4A0: CEDE SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 344; Form 17    DISK FILE DRIVERS -- DISK SPACE MANAGEMENT
SDOS6800.ASM
CEDE EE00       383:          LDX     IOCB:DCB,X
                384:          ;CMPA   DSKINFO:NSPC,X ...?
CEE0 A111       385:          CMPA    DSKINFO:NSPC,X
CEE2 26E8       386:          BNE     ZEROCLUSTERL B/ NO, GO ZERO ANOTHER!
CEE4 0C39       387:          OKRTS




ASM/6800 1.4A0: CEE4 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 345; Form 17    DISK FILE DRIVERS -- DISK SPACE MANAGEMENT
SDOS6800.ASM
                389: *        FREECLUSTER -- FREE CLUSTER (A,B) (I.E., RESET MAP BIT)
                390: *        ERROR EXIT IF THAT CLUSTER WAS NOT PREVIOUSLY ALLOCATED
                391: *
  CEE6          392: FREECLUSTER      EQU         *
                393:          ;JSR    FINDLCNMAPBIT GO LOCATE THE MAP BIT
CEE6 BDD227     394:          JSR     FINDLCNMAPBIT
CEE9 A500       395:          BITA    DISKMAP:BYTE,X DOUBLE-CHECK: WAS MAP BIT SET ?
CEEB 2708       396:          BEQ     FREEERROR   B/ NO, TAKE ERROR EXIT
CEED 43         397:          COMA                YES, MAKE MASK TO RESET BIT
CEEE A400       398:          ANDA    DISKMAP:BYTE,X FREE THE CLUSTER
CEF0 A700       399:          STAA    DISKMAP:BYTE,X
                400:          ;JMP    MARKMODIFIED MAKE SURE MAP SECTOR GOES BACK TO DISK
CEF2 7EBF7C     401:          JMP     MARKMODIFIED
                402: 
  CEF5          403: FREEERROR        EQU         *
                404:          ;JSR    ERRET       LCN WASN'T MARKED AS ALLOCATED
CEF5 BDB1F6     405:          JSR     ERRET
CEF8 03F8       406:          FDB     ERR:LCNWASNTALLOCATED
                407: *
  CEFA          408: ERRNODISKMAPJ1   EQU         *
                409:          ;JMP    ERRNODISKMAP
CEFA 7ECD0F     410:          JMP     ERRNODISKMAP
                411: *
                412: *        FREECLUSTERS -- FREE (D) DATA CLUSTERS FROM FILE(IOCB)
                413: *                IF (D)=0, DELETES UNTIL END OF HEADER CLUSTER ENCOUNTERED ("CHOP")
                414: *                DELETES STARTING AT IOCB:RDCN (0 IF DELETING FILE)
                415: *                UPDATES IOCB:NCLUSTERS
                416: *                IF FCB:NCLUSTERS DROPS TO 0 (HLCN DEALLOCATED)
                417: *                THEN FCB:HCSIC IS ZEROED
                418: *                IF DELETING FILE, DOESN'T WRITE HEADER BLOCKS BACK TO DISK
                419: *                ERRET TAKEN IF ILLEGAL LCN OR UNALLOCATED LCN SEEN
                420: *
  CEFD          421: FREECLUSTERS     EQU         *
                422:          ;STD    ALLOCATIONCOUNT REMEMBER HOW MANY CLUSTERS TO DELETE
CEFD F7AED9     423:          STAB    ALLOCATIONCOUNT+1
CF00 B7AED8     424:          STAA    ALLOCATIONCOUNT
                425:          ;LDX    DCBPOINTER  MAP FILE EXIST ?
CF03 DE06       426:          LDX     DCBPOINTER
CF05 A629       427:          LDAA    DSKINFO:MAPFCB,X ...?
CF07 27F1       428:          BEQ     ERRNODISKMAPJ1 B/ NOPE, CAN'T DEALLOCATE




ASM/6800 1.4A0: CF07 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 346; Form 17    DISK FILE DRIVERS -- DISK SPACE MANAGEMENT
SDOS6800.ASM
  CF09          429: FREECLUSTERL     EQU         *
                430:          ;JSR    LOCATERDCN  ALSO CHECK FOR LEGAL RDCN
CF09 BDD66B     431:          JSR     LOCATERDCN
CF0C 2551       432:          BCS     FREECLUSTERE B/ OFF END OF HEADER CLUSTER!
                433:          ;LDD    HEADER:LCN,X GET LCN FROM HEADER SECTOR
CF0E E601       434:          LDAB    (HEADER:LCN)+1,X
CF10 A600       435:          LDAA    HEADER:LCN,X
                436:          ;CMPD   #DUMMYLCN   IS LCN UNALLOCATED?
CF12 81FF       437:          CMPA    #(DUMMYLCN)/256
CF14 2602       438:          BNE     MACRO:001F
CF16 C1FF       439:          CMPB    #(DUMMYLCN)&$FF
  CF18          440: MACRO:001F
CF18 273A       441:          BEQ     FREECLUSTERN B/ NEVER WAS ALLOCATED, PROCESS NEXT
                442:          ;CLR    HEADER:LCN,X ZAP LCN IN HEADER SECTOR
CF1A 6F00       443:          CLR     HEADER:LCN,X
                444:          ;DEC    HEADER:LCN,X (I.E., SET TO DUMMYLCN (=-1))
CF1C 6A00       445:          DEC     HEADER:LCN,X
                446:          ;CLR    HEADER:LCN+1,X
CF1E 6F01       447:          CLR     HEADER:LCN+1,X
                448:          ;DEC    HEADER:LCN+1,X
CF20 6A01       449:          DEC     HEADER:LCN+1,X
                450:          ;LDX    FCBPOINTER  DELETING THE FILE ?
CF22 FEAEA6     451:          LDX     FCBPOINTER
                452:          ;LDX    FCB:NCLUSTERS,X (I.E., IS # CLUSTERS TO DELETE...
CF25 EE0F       453:          LDX     FCB:NCLUSTERS,X
CF27 BCAED8     454:          CPX     ALLOCATIONCOUNT = # CLUSTERS REMAINING IN FILE ?)
CF2A 2709       455:          BEQ     FREECLUSTER0 B/ DON'T BOTHER MOVING HEADER SECTOR BACK TO DISK
                456:          ;LDX    IOCBPOINTER MAKE SURE HEADER SECTOR GOES BACK TO DISK
CF2C FEAE09     457:          LDX     IOCBPOINTER
                458:          ;LDX    IOCB:HRDSI,X
CF2F EE1F       459:          LDX     IOCB:HRDSI,X
                460:          ;CLR    RDSI:MODIFIED,X MARK RDSI AS MODIFIED
CF31 6F0B       461:          CLR     RDSI:MODIFIED,X
                462:          ;INC    RDSI:MODIFIED,X
CF33 6C0B       463:          INC     RDSI:MODIFIED,X
  CF35          464: FREECLUSTER0     EQU         *
                465:          ;JSR    FREECLUSTER GO FREE THE CLUSTER WE FOUND
CF35 BDCEE6     466:          JSR     FREECLUSTER
                467:          ;LDX    FCBPOINTER  DOWN COUNT # CLUSTERS ALLOCATED TO FILE
CF38 FEAEA6     468:          LDX     FCBPOINTER




ASM/6800 1.4A0: CF3B SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 347; Form 17    DISK FILE DRIVERS -- DISK SPACE MANAGEMENT
SDOS6800.ASM
CF3B A610       469:          LDAA    FCB:NCLUSTERS+1,X
CF3D 2602       470:          BNE     FREECLUSTER3
                471:          ;DEC    FCB:NCLUSTERS,X
CF3F 6A0F       472:          DEC     FCB:NCLUSTERS,X
  CF41          473: FREECLUSTER3     EQU         *
                474:          ;DEC    FCB:NCLUSTERS+1,X
CF41 6A10       475:          DEC     FCB:NCLUSTERS+1,X
CF43 A60A       476:          LDAA    FCB:FLAGS,X MARK FCB AS REQUIRING...
CF45 8A40       477:          ORAA    #FCBFLG::UPDATEDIR A DIRECTORY UPDATE
CF47 A70A       478:          STAA    FCB:FLAGS,X
                479:          ;LDX    ALLOCATIONCOUNT DOWN COUNT # CLUSTERS LEFT TO DEALLOCATE
CF49 FEAED8     480:          LDX     ALLOCATIONCOUNT
CF4C 2706       481:          BEQ     FREECLUSTERN B/ 0, DELETE TILL END OF HEADER CLUSTER
CF4E 09         482:          DEX
CF4F FFAED8     483:          STX     ALLOCATIONCOUNT
CF52 2723       484:          BEQ     FREECLUSTERDONE B/ DEALLOCATION COMPLETED
  CF54          485: FREECLUSTERN     ; PROCESS NEXT CLUSTER
                486:          ;LDX    IOCBPOINTER COMPUTE RELATIVE CLUSTER #
CF54 FEAE09     487:          LDX     IOCBPOINTER
                488:          ;INC    IOCB:RDCN+1,X
CF57 6C1C       489:          INC     IOCB:RDCN+1,X
CF59 2602       490:          BNE     FREECLUSTER2
                491:          ;INC    IOCB:RDCN,X
CF5B 6C1B       492:          INC     IOCB:RDCN,X
  CF5D          493: FREECLUSTER2     EQU         *
CF5D 20AA       494:          BRA     FREECLUSTERL GO FREE ANOTHER CLUSTER




ASM/6800 1.4A0: CF5D SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 348; Form 17    DISK FILE DRIVERS -- DISK SPACE MANAGEMENT
SDOS6800.ASM
  CF5F          496: FREECLUSTERE     ; ERROR ENCOUNTERED
                497:          ;LDD    ALLOCATIONCOUNT DELETEING TILL END OF HEADER CLUSTER ?
CF5F F6AED9     498:          LDAB    ALLOCATIONCOUNT+1
CF62 B6AED8     499:          LDAA    ALLOCATIONCOUNT
                500:          ;BNED   FREECLUSTERE1 B/ NO, WE GOOFED SOMEHOW!
CF65 260D       501:          BNE     FREECLUSTERE1
CF67 5D         502:          TSTB
CF68 260A       503:          BNE     FREECLUSTERE1
CF6A 8C0401     504:          CPX     #ERR:HCSICTOOSMALL YES, VALID REASON TO QUIT?
CF6D 2708       505:          BEQ     FREECLUSTERDONE B/ YES
CF6F 8C041C     506:          CPX     #ERR:CLUSTERSIZELIMITSFILE A DIFFERENT, BUT ALSO VALID REASON?
CF72 2703       507:          BEQ     FREECLUSTERDONE B/ YES
  CF74          508: FREECLUSTERE1 ; FATAL ERROR IN FREE CLUSTER
                509:          ;JMP    ERRORED
CF74 7EB209     510:          JMP     ERRORED
                511: 
  CF77          512: FREECLUSTERDONE  EQU         *
                513:          ;LDX    FCBPOINTER
CF77 FEAEA6     514:          LDX     FCBPOINTER
  0001          515:          IF      M6800
CF7A A60F       516:          LDAA    FCB:NCLUSTERS,X IS NCLUSTERS = 0?
CF7C AA10       517:          ORAA    FCB:NCLUSTERS+1,X
  0001          518:          ELSE    (M6801!M6809)
 *S*            519:          ;LDD    FCB:NCLUSTERS,X IS NCLUSTERS = 0 ?
 *S*            520:          LDAB    (FCB:NCLUSTERS)+1,X
 *S*            521:          LDAA    FCB:NCLUSTERS,X
                522:          FIN
CF7E 2602       523:          BNE     FREECLUSTEREXIT B/ NO, FILE JUST SMALLER
CF80 A70E       524:          STAA    FCB:HCSIC,X YES, ZAP :HCSIC
  CF82          525: FREECLUSTEREXIT  EQU         *
CF82 0C39       526:          OKRTS




ASM/6800 1.4A0: CF82 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 349; Form 18    DISK FILE DRIVERS -- DISK SPACE MANAGEMENT
SDOS6800.ASM
                  1: *        SEARCHMAP -- SEARCHES DISK MAP FOR ALLOCATIONCOUNT CONTIGUOUS CLUSTERS
                  2: *                STARTS WITH FORWARD SEARCH FROM LCN(A,B)
                  3: *                IF LCN(A,B) = :FFFF, CHOOSES RANDOM PLACE IN MAP
                  4: *                SEARCHES FOR CONTIGUOUS AREA OF ALLOCATIONCOUNT CLUSTERS
                  5: *                USES 1ST FREE CLUSTER FOUND IF ALLOCATION SPACE NOT AVAILABLE
                  6: *                QUITS IF FIRST FREE CLUSTER = 1 UNIT FORWARD FROM LCN(A,B)
                  7: *                IF FREE GROUP FOUND, FINDS BEGINNING OF GROUP
                  8: *                THEN TRIES BACKWARD SEARCH
                  9: *                ALSO RECORDS 1ST FREE CLUSTER IF CLOSER THAN FWD SEARCH POINT
                 10: *                UPDATES DISKMAP BY SETTING THE CORRESPONDING BIT
                 11: *                USES IOCB SELECTED BY IOCBPOINTER; DCB SELECTED BY DCBPOINTER
                 12: *        OKRTS: RETURNS ALLOCATED LCN IN (A,B); UPDATES MAP
                 13: *        ERRET: NO DISK BLOCK AVAILABLE
                 14: *
  CF84           15: SEARCHMAP        EQU         *
                 16:          ;STD    DESIREDLCN  SAVE # OF (DESIRED LCN -1)
CF84 F7AEE5      17:          STAB    DESIREDLCN+1
CF87 B7AEE4      18:          STAA    DESIREDLCN
                 19:          ;LDX    #DUMMYLCN   SET BEST DISCOVERED LCN TO "DUMMY"
CF8A CEFFFF      20:          LDX     #DUMMYLCN
CF8D FFAEE0      21:          STX     AVAILABLELCN
CF90 BCAEE4      22:          CPX     DESIREDLCN  IS (A,B) = DUMMYLCN ?
CF93 2606        23:          BNE     SEARCHMAP1  (UNALLOCATED LCN AS START POINT?)
                 24:          ;LDX    DCBPOINTER  YES, CHOOSE "RANDOM" POINT IN MAP
CF95 DE06        25:          LDX     DCBPOINTER
                 26:          ;LDD    DSKINFO:RANDMAP,X = LAST PLACE WE FOUND SOME FREE SPACE
CF97 E623        27:          LDAB    (DSKINFO:RANDMAP)+1,X
CF99 A622        28:          LDAA    DSKINFO:RANDMAP,X
  CF9B           29: SEARCHMAP1       EQU         *
                 30:          ;STD    SEARCHLCN   REMEMBER SEARCH STARTING POINT
CF9B F7AEDF      31:          STAB    SEARCHLCN+1
CF9E B7AEDE      32:          STAA    SEARCHLCN
  CFA1           33: SEARCHM5 EQU     *
                 34:          ;LDD    SEARCHLCN   GET DESIRED START POINT
CFA1 F6AEDF      35:          LDAB    SEARCHLCN+1
CFA4 B6AEDE      36:          LDAA    SEARCHLCN
                 37:          ;JSR    FINDLCNMAPBIT
CFA7 BDD227      38:          JSR     FINDLCNMAPBIT
  CFAA           39: SEARCHM2 EQU     *
CFAA A500        40:          BITA    DISKMAP:BYTE,X ARE WE IN MIDDLE OF GROUP OF FREE CLUSTERS?




ASM/6800 1.4A0: CFAC SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 350; Form 18    DISK FILE DRIVERS -- DISK SPACE MANAGEMENT
SDOS6800.ASM
CFAC 2668        41:          BNE     SEARCHMF    B/ NO, START FORWARD SEARCH
CFAE F6AEDF      42:          LDAB    SEARCHLCN+1 MUST SCAN BACKWARDS TO BEGINNING OF GROUP
CFB1 2603        43:          BNE     SEARCHM3    BACK UP LCN WE'RE LOOKING AT
                 44:          ;DEC    SEARCHLCN   DON'T YOU HATE DBL PRECISION DECREMENTS?
CFB3 7AAEDE      45:          DEC     SEARCHLCN
  CFB6           46: SEARCHM3 EQU     *
                 47:          ;DEC    SEARCHLCN+1
CFB6 7AAEDF      48:          DEC     SEARCHLCN+1
CFB9 44          49:          LSRA                MOVE BIT MASK DOWN
CFBA 24EE        50:          BCC     SEARCHM2    B/ NOT ALL BITS IN DISKMAP BYTE PROCESSED
  CFBC           51: SEARCHM4 ; ASSERT: SEARCHLCN MOD 8 = 7 HERE
CFBC 09          52:          DEX                 BACK UP THE BYTE POINTER
CFBD BCAEE8      53:          CPX     DISKMAPSECTORSTART WILL WE RUN OFF BOTTOM OF MAP SECTOR?
CFC0 27DF        54:          BEQ     SEARCHM5    B/ YEP, TIME TO READ ANOTHER MAP SECTOR
CFC2 8680        55:          LDAA    #$80        BE OPTIMISTIC, GET NEW MASK
CFC4 E600        56:          LDAB    DISKMAP:BYTE,X DO QUICK CHECK ON MAP BYTE
CFC6 26E2        57:          BNE     SEARCHM2    B/ WE'LL FIND AN ALLOCATED CLUSTER
                 58:          ;LDD    SEARCHLCN   SKIP UNALLOCATED CLUSTERS
CFC8 F6AEDF      59:          LDAB    SEARCHLCN+1
CFCB B6AEDE      60:          LDAA    SEARCHLCN
                 61: *        *** ASSUMES LCN 0 ALWAYS ALLOCATED!
                 62:          ;SUBD   #NMBPB      NUMBER OF MAP BITS PER BYTE
CFCE C008        63:          SUBB    #(NMBPB)&$FF
CFD0 8200        64:          SBCA    #(NMBPB)/256
                 65:          ;STD    SEARCHLCN   UPDATE NEXT LCN TO LOOK AT
CFD2 F7AEDF      66:          STAB    SEARCHLCN+1
CFD5 B7AEDE      67:          STAA    SEARCHLCN
                 68:          ;JMP    SEARCHM4    A SPEEDUP IS SPOSD TO BE FAST!
CFD8 7ECFBC      69:          JMP     SEARCHM4
                 70: 
  CFDB           71: SEARCHMFQJ1      EQU         *
                 72:          ;JMP    SEARCHMFQ
CFDB 7ED0C8      73:          JMP     SEARCHMFQ




ASM/6800 1.4A0: CFDB SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 351; Form 18    DISK FILE DRIVERS -- DISK SPACE MANAGEMENT
SDOS6800.ASM
  CFDE           75: SEARCHMFE        ; EXHAUSTED MAP BYTE WHILE LOOKING FOR FREE LCN
CFDE 8601        76:          LDAA    #1          GET MASK FOR NEXT LCN TO CHECK
CFE0 08          77:          INX                 BUMP MAP BYTE POINTER
CFE1 BCAEEA      78:          CPX     DISKMAPSECTOREND RUN OFF END OF MAP SECTOR?
CFE4 2714        79:          BEQ     SEARCHMFE1  B/ YES
  CFE6           80: SEARCHMFE2       EQU         *
CFE6 E600        81:          LDAB    DISKMAP:BYTE,X NO, CHECK WHOLE MAP BYTE...
CFE8 5C          82:          INCB                TO SEE IF ALL ENTRIES IN IT ARE ALLOCATED
CFE9 2642        83:          BNE     SEARCHMF1A  B/ NOPE, SEARCH MAP BYTE THE HARD WAY
CFEB F6AEDF      84:          LDAB    SEARCHLCN+1 ENTIRE BYTE IS ALLOCATED
CFEE CB08        85:          ADDB    #NMBPB      SKIP SEARCHLCN FORWARD THAT MANY LCN'S
CFF0 F7AEDF      86:          STAB    SEARCHLCN+1
CFF3 26E9        87:          BNE     SEARCHMFE   AND GO CHECK NEXT MAP BYTE
                 88:          ;INC    SEARCHLCN   (PROPOGATE CARRY TO UPPER HALF)
CFF5 7CAEDE      89:          INC     SEARCHLCN
CFF8 20E4        90:          BRA     SEARCHMFE
                 91: 
  CFFA           92: SEARCHMFE1       ; RAN OFF END OF MAP SECTOR LOOKING FOR FREE LCN
                 93:          ;LDD    SEARCHLCN   GO FIND THE MAP SECTOR...
CFFA F6AEDF      94:          LDAB    SEARCHLCN+1
CFFD B6AEDE      95:          LDAA    SEARCHLCN
                 96:          ;JSR    FINDLCNMAPBIT WHICH CONTAINS THE BIT WE WANT
D000 BDD227      97:          JSR     FINDLCNMAPBIT
D003 25D6        98:          BCS     SEARCHMFQJ1 OOPS, RAN OFF END OF MAP
                 99:          ;LDX    IOCBPOINTER INITIATE READ-AHEAD OF NEXT MAP SECTOR
D005 FEAE09     100:          LDX     IOCBPOINTER
                101:          ;JSR    READAHEAD
D008 BDD804     102:          JSR     READAHEAD
                103:          ;LDX    DISKMAPBYTEPOINTER GET POINTER TO MAP BYTE
D00B FEAEEC     104:          LDX     DISKMAPBYTEPOINTER
D00E B6AEEE     105:          LDAA    DISKMAPMASK AND BIT MASK FOR MAP BIT
D011 20D3       106:          BRA     SEARCHMFE2  GO CHECK BYTE CONTENTS
                107: 
  D013          108: SEARCHMFQXITJ1   EQU         *
                109:          ;JMP    SEARCHMFQXIT
D013 7ED1CC     110:          JMP     SEARCHMFQXIT




ASM/6800 1.4A0: D013 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 352; Form 18    DISK FILE DRIVERS -- DISK SPACE MANAGEMENT
SDOS6800.ASM
  D016          112: SEARCHMF ; NOW START FORWARD MAP SEARCH
D016 F6AEDE     113:          LDAB    SEARCHLCN   REMEMBER DIVIDING POINT IN MAP...
D019 F7AEDC     114:          STAB    DIVIDEPOINTLCN SO WE CAN START BACKWARDS SEARCH LATER
D01C F6AEDF     115:          LDAB    SEARCHLCN+1
D01F F7AEDD     116:          STAB    DIVIDEPOINTLCN+1
  D022          117: SEARCHMF0        EQU         *
                118:          ;INC    SEARCHLCN+1 BUMP LCN WE'RE ABOUT TO LOOK AT
D022 7CAEDF     119:          INC     SEARCHLCN+1
D025 2603       120:          BNE     SEARCHMF1
                121:          ;INC    SEARCHLCN
D027 7CAEDE     122:          INC     SEARCHLCN
  D02A          123: SEARCHMF1        ; LOOK AT NEXT BIT IN BIT MAP
D02A 48         124:          ASLA                SWITCH BIT MASK'S ATTN TO PROPER BIT
D02B 25B1       125:          BCS     SEARCHMFE   B/ EXHAUSTED BYTE
  D02D          126: SEARCHMF1A       EQU         *
D02D A500       127:          BITA    DISKMAP:BYTE,X IS THIS LCN ALSO ALLOCATED?
D02F 26F1       128:          BNE     SEARCHMF0   B/ YES, SKIP OVER IT
D031 FFAEEC     129:          STX     DISKMAPBYTEPOINTER SAVE MAP BYTE ADDRESS
                130:          ;LDX    AVAILABLELCN FOUND A FREE CLUSTER!
D034 FEAEE0     131:          LDX     AVAILABLELCN
D037 08         132:          INX                 SEE IF ANOTHER HAS ALREADY BEEN FOUND
D038 261D       133:          BNE     SEARCHMF4   B/ YES, DON'T RECORD THIS ONE
                134:          ;LDX    SEARCHLCN   NO, SAVE LCN IN CASE...
D03A FEAEDE     135:          LDX     SEARCHLCN
D03D FFAEE0     136:          STX     AVAILABLELCN WE CAN'T FIND CONTIGUOUS ALLOCATION
                137:          ;LDX    #1          SET GROUPSIZE TO 1
D040 CE0001     138:          LDX     #1
D043 FFAEE2     139:          STX     AVAILABLECOUNT
D046 F6AEDF     140:          LDAB    SEARCHLCN+1 IS JUST-FOUND CLUSTER...
D049 0D         141:          SEC                 = DESIRED CLUSTER + 1 ?
D04A F2AEE5     142:          SBCB    DESIREDLCN+1 (I.E., IS SEARCHLCN-DESIREDLCN=1?)
D04D 2608       143:          BNE     SEARCHMF4   B/ NO
D04F F6AEDE     144:          LDAB    SEARCHLCN   (I.E. IS SEARCHLCN-DESIREDLCN-1=0?)
D052 F2AEE4     145:          SBCB    DESIREDLCN  ...?
D055 27BC       146:          BEQ     SEARCHMFQXITJ1 B/ YES, TAKE QUICK EXIT




ASM/6800 1.4A0: D055 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 353; Form 18    DISK FILE DRIVERS -- DISK SPACE MANAGEMENT
SDOS6800.ASM
  D057          148: SEARCHMF4        EQU         *
                149:          ;LDX    DISKMAPBYTEPOINTER GET ADDRESS OF MAP BYTE CONTAINING FREE CLUSTER
D057 FEAEEC     150:          LDX     DISKMAPBYTEPOINTER
                151:          ;CLR    LCNGROUPLENGTH FIND OUT HOW LONG...
D05A 7FAEE6     152:          CLR     LCNGROUPLENGTH
                153:          ;CLR    LCNGROUPLENGTH+1 THE GROUP OF FREE LCN'S IS
D05D 7FAEE7     154:          CLR     LCNGROUPLENGTH+1
  D060          155: SEARCHMF2        EQU         *
                156:          ;INC    LCNGROUPLENGTH+1 BUMP LENGTH OF FREE GROUP OF LCNS
D060 7CAEE7     157:          INC     LCNGROUPLENGTH+1
D063 2603       158:          BNE     SEARCHMF3
                159:          ;INC    LCNGROUPLENGTH
D065 7CAEE6     160:          INC     LCNGROUPLENGTH
  D068          161: SEARCHMF3        ; LOOK AT NEXT BIT
D068 F6AEE6     162:          LDAB    LCNGROUPLENGTH IS SIZE OF THIS FREE GROUP...
                163:          ;CMPB   ALLOCATIONCOUNT >= TO ALLOCATION COUNT?
D06B F1AED8     164:          CMPB    ALLOCATIONCOUNT
D06E 2508       165:          BCS     SEARCHMF5   B/ NO (ELSE MUST BE EQUAL!)
D070 F6AEE7     166:          LDAB    LCNGROUPLENGTH+1 = COMPARE IS SUFFICIENT, SINCE...
                167:          ;CMPB   ALLOCATIONCOUNT+1 LCN GROUPLENGTH IS MONOTONICALLY INCREASING
D073 F1AED9     168:          CMPB    ALLOCATIONCOUNT+1
D076 2732       169:          BEQ     SEARCHMFG   AND WAS < ALLOCATION COUNT LAST TIME WE CHECKED
  D078          170: SEARCHMF5        EQU         *
                171:          ;INC    SEARCHLCN+1 BUMP LCN TO LOOK AT
D078 7CAEDF     172:          INC     SEARCHLCN+1
D07B 2603       173:          BNE     SEARCHMF6   B/ EXHAUSTED MAP BYTE
                174:          ;INC    SEARCHLCN   BUMP LCN WE'LL BE LOOKING AT
D07D 7CAEDE     175:          INC     SEARCHLCN
  D080          176: SEARCHMF6        EQU         *
D080 48         177:          ASLA                SHIFT BIT MASK OVER
D081 2506       178:          BCS     SEARCHMF8   B/ EXHAUSTED MAP BYTE
  D083          179: SEARCHMF7        EQU         *
D083 A500       180:          BITA    DISKMAP:BYTE,X LOOK AT NEXT LCN BIT
D085 27D9       181:          BEQ     SEARCHMF2   B/ ITS FREE, COUNT IT
D087 2099       182:          BRA     SEARCHMF0   FREE GROUP NOT LONG ENOUGH TO USE




ASM/6800 1.4A0: D087 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 354; Form 18    DISK FILE DRIVERS -- DISK SPACE MANAGEMENT
SDOS6800.ASM
  D089          184: SEARCHMF8        ; EXHAUSTED MAP BYTE WHILE SCANNING FREE GROUP OF LCN'S
D089 8601       185:          LDAA    #1          GET MASK FOR MAP BIT IN NEXT BYTE
D08B 08         186:          INX                 BUMP MAP BYTE POITER
D08C BCAEEA     187:          CPX     DISKMAPSECTOREND EXHAUST MAP SECTOR?
D08F 26F2       188:          BNE     SEARCHMF7   B/ NO, KEEP SEARCHING
                189:          ;LDD    SEARCHLCN   DISK MAP SECTOR EXHAUSTED, GET NEXT LCN TO CHECK
D091 F6AEDF     190:          LDAB    SEARCHLCN+1
D094 B6AEDE     191:          LDAA    SEARCHLCN
                192:          ;JSR    FINDLCNMAPBIT SET UP TO SEARCH NEXT MAP SECTOR
D097 BDD227     193:          JSR     FINDLCNMAPBIT
D09A 252C       194:          BCS     SEARCHMFQ   QUIT IF WE RUN OFF END OF MAP
                195:          ;LDX    IOCBPOINTER INITIATE PRE-FETCH...
D09C FEAE09     196:          LDX     IOCBPOINTER
                197:          ;JSR    READAHEAD   OF NEXT MAP SECTOR
D09F BDD804     198:          JSR     READAHEAD
                199:          ;LDX    DISKMAPBYTEPOINTER GET POINTER TO MAP BYTE...
D0A2 FEAEEC     200:          LDX     DISKMAPBYTEPOINTER
D0A5 B6AEEE     201:          LDAA    DISKMAPMASK AND BIT MASK
D0A8 20D9       202:          BRA     SEARCHMF7   GO CHECK BIT TO SEE IF FREE
                203: 
  D0AA          204: SEARCHMFG        ; FORWARD SEARCH FOUND ALLOCATION COUNT FREE CLUSTERS
                205:          ;LDD    LCNGROUPLENGTH RECORD SIZE OF FREE GROUP OF LCN'S
D0AA F6AEE7     206:          LDAB    LCNGROUPLENGTH+1
D0AD B6AEE6     207:          LDAA    LCNGROUPLENGTH
                208:          ;STD    AVAILABLECOUNT
D0B0 F7AEE3     209:          STAB    AVAILABLECOUNT+1
D0B3 B7AEE2     210:          STAA    AVAILABLECOUNT
                211:          ;COMD               COMPUTE LCN OF FIRST LCN IN THIS FREE GROUP
D0B6 53         212:          COMB
D0B7 43         213:          COMA
                214:          ;ADDD   SEARCHLCN   = LCN OF CLUSTER TERMINATING GROUP
D0B8 FBAEDF     215:          ADDB    SEARCHLCN+1
D0BB B9AEDE     216:          ADCA    SEARCHLCN
                217:          ;ADDD   #2          - SIZE OF GROUP +1 = COMPLEMENT(GROUPLENGTH) + 2
D0BE CB02       218:          ADDB    #(2)&$FF
D0C0 8900       219:          ADCA    #(2)/256
                220:          ;STD    AVAILABLELCN REMEMBER WHERE THE GROUP STARTS
D0C2 F7AEE1     221:          STAB    AVAILABLELCN+1
D0C5 B7AEE0     222:          STAA    AVAILABLELCN
  D0C8          223: SEARCHMFQ        ; QUIT FORWARD SEARCH




ASM/6800 1.4A0: D0C5 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 355; Form 18    DISK FILE DRIVERS -- DISK SPACE MANAGEMENT
SDOS6800.ASM
                224:          ;LDD    DIVIDEPOINTLCN START BACKWARDS SEARCH...
D0C8 F6AEDD     225:          LDAB    DIVIDEPOINTLCN+1
D0CB B6AEDC     226:          LDAA    DIVIDEPOINTLCN
                227:          ;STD    SEARCHLCN   AT DIVIDING POINT IN MAP
D0CE F7AEDF     228:          STAB    SEARCHLCN+1
D0D1 B7AEDE     229:          STAA    SEARCHLCN
                230:          ;JSR    FINDLCNMAPBIT
D0D4 BDD227     231:          JSR     FINDLCNMAPBIT




ASM/6800 1.4A0: D0D4 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 356; Form 18    DISK FILE DRIVERS -- DISK SPACE MANAGEMENT
SDOS6800.ASM
                233:          ;JSR    READBEHIND  INITIATE THE READ BEHIND
D0D7 BDD7E2     234:          JSR     READBEHIND
                235:          ;LDX    DISKMAPBYTEPOINTER GET MAP BYTE POINTER AND MASK
D0DA FEAEEC     236:          LDX     DISKMAPBYTEPOINTER
D0DD B6AEEE     237:          LDAA    DISKMAPMASK
  D0E0          238: SEARCHMR EQU     *
D0E0 A500       239:          BITA    DISKMAP:BYTE,X SCAN MAP BACKWARDS FOR FREE LCN
D0E2 2746       240:          BEQ     SEARCHMR1   B/ FOUND FREE LCN
  D0E4          241: SEARCHMR0        EQU         *
D0E4 F6AEDF     242:          LDAB    SEARCHLCN+1 THIS LCN NOT FREE
D0E7 2603       243:          BNE     SEARCHMR0A  COMPUTE PREVIOUS LCN
                244:          ;DEC    SEARCHLCN
D0E9 7AAEDE     245:          DEC     SEARCHLCN
  D0EC          246: SEARCHMR0A       EQU         *
                247:          ;DEC    SEARCHLCN+1
D0EC 7AAEDF     248:          DEC     SEARCHLCN+1
D0EF 44         249:          LSRA                ADJUST BIT MASK FOR PREVIOUS LCN
D0F0 24EE       250:          BCC     SEARCHMR    B/ MORE BITS TO CHECK IN MAP
  D0F2          251: SEARCHMRE        EQU         *
D0F2 09         252:          DEX                 PROCESS PREVIOUS MAP BYTE
D0F3 BCAEE8     253:          CPX     DISKMAPSECTORSTART HIT BOTTOM OF MAP SECTOR?
D0F6 2719       254:          BEQ     SEARCHMRE1  B/ YES, MUST PROCESS PRECEDING SECTOR
  D0F8          255: SEARCHMRE2       EQU         *
D0F8 8680       256:          LDAA    #$80        SET UP MASK FOR NEXT MAP BYTE
D0FA E600       257:          LDAB    DISKMAP:BYTE,X TAKE QUICK LOOK AT ENTIRE BYTE
D0FC 5C         258:          INCB                ALL LCN'S IN BYTE ALLOCATED?
D0FD 26E1       259:          BNE     SEARCHMR    B/ NO, LET'S GO FIND UNALLOCATED LCN
D0FF F6AEDF     260:          LDAB    SEARCHLCN+1 YES, BACK UP OVER BYTE OF LCN'S
                261:          ;CMPB   #NMBPB-1    NEED TO PROPOGATE A BORROW ?
D102 C107       262:          CMPB    #NMBPB-1
D104 2603       263:          BNE     SEARCHMRE3  ADJUST SEARCHLCN
                264:          ;DEC    SEARCHLCN
D106 7AAEDE     265:          DEC     SEARCHLCN
  D109          266: SEARCHMRE3       EQU         *
D109 C008       267:          SUBB    #NMBPB
D10B F7AEDF     268:          STAB    SEARCHLCN+1
                269:          ;JMP    SEARCHMRE   CHECK NEXT MAP BYTE OUT
D10E 7ED0F2     270:          JMP     SEARCHMRE




ASM/6800 1.4A0: D10E SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 357; Form 18    DISK FILE DRIVERS -- DISK SPACE MANAGEMENT
SDOS6800.ASM
  D111          272: SEARCHMRE1       ; RAN OFF BOTTOM OF MAP SECTOR
                273:          ;LDD    SEARCHLCN   GO FIND MAP SECTOR CONTAINING PREVIOUS BYTE
D111 F6AEDF     274:          LDAB    SEARCHLCN+1
D114 B6AEDE     275:          LDAA    SEARCHLCN
                276:          ;JSR    FINDLCNMAPBIT
D117 BDD227     277:          JSR     FINDLCNMAPBIT
D11A 250B       278:          BCS     SEARCHMREBJ1 B/ RAN OFF BOTTOM OF MAP
                279:          ;JSR    READBEHIND  KEEP THE READ BEHIND RUNNING
D11C BDD7E2     280:          JSR     READBEHIND
                281:          ;LDX    DISKMAPBYTEPOINTER GET MAP BYTE POITER...
D11F FEAEEC     282:          LDX     DISKMAPBYTEPOINTER
D122 B6AEEE     283:          LDAA    DISKMAPMASK AND MASK
D125 20D1       284:          BRA     SEARCHMRE2
                285: 
  D127          286: SEARCHMREBJ1     EQU         *
                287:          ;JMP    SEARCHMREB
D127 7ED1E2     288:          JMP     SEARCHMREB




ASM/6800 1.4A0: D127 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 358; Form 18    DISK FILE DRIVERS -- DISK SPACE MANAGEMENT
SDOS6800.ASM
  D12A          290: SEARCHMR1        ; FOUND FREE LCN DURING BACKWARDS SEARCH
D12A FFAEEC     291:          STX     DISKMAPBYTEPOINTER SAVE ADDRESS OF MAP BYTE CONTAINING FREE CLUSTER
                292:          ;LDX    AVAILABLELCN EFFECTIVELY THE SAME CODE AS SEARCHMF
D12D FEAEE0     293:          LDX     AVAILABLELCN
D130 08         294:          INX                 HAVE WE ALREADY FOUND A FREE CLUSTER ?
D131 270D       295:          BEQ     SEARCHMR4C  B/ NO, RETAIN JUST-FOUND LCN
                296:          ;LDX    AVAILABLECOUNT FOUND FREE LCN, AVAILABLE LCN IS TAKEN
D133 FEAEE2     297:          LDX     AVAILABLECOUNT
D136 08         298:          INX                 IS IT TAKEN BY A FIRST FREE LCN FOUND ?
D137 2613       299:          BNE     SEARCHMR4   B/ AVAILABLELCN TAKEN BY ALLOCATIONCOUNT GROUP
                300: *                            (WHICH MEANS A SINGLE FREE LCN DOESN'T OVERRIDE IT)
D139 36         301:          PSHA                DON'T LOSE MAP MASK!
                302:          ;JSR    SEARCHOOSE  DECIDE WHICH LCN IS CLOSEST
D13A BDD1F5     303:          JSR     SEARCHOOSE
D13D 32         304:          PULA                GET MAP MASK BACK
D13E 250C       305:          BCS     SEARCHMR4   B/ AVAILABLELCN WAS CLOSEST
  D140          306: SEARCHMR4C       EQU         *
                307:          ;LDX    SEARCHLCN   RETAIN JUST-FOUND CLUSTER
D140 FEAEDE     308:          LDX     SEARCHLCN
D143 FFAEE0     309:          STX     AVAILABLELCN
                310:          ;LDX    #1          SET GROUP SIZE TO "1"
D146 CE0001     311:          LDX     #1
D149 FFAEE2     312:          STX     AVAILABLECOUNT
  D14C          313: SEARCHMR4        EQU         *
                314:          ;LDX    #0          FIND OUT HOW LONG THIS GROUP OF FREE CLUSTERS IS
D14C CE0000     315:          LDX     #0
D14F FFAEE6     316:          STX     LCNGROUPLENGTH
                317:          ;LDX    DISKMAPBYTEPOINTER GET POINTER TO MAP BYTE BACK
D152 FEAEEC     318:          LDX     DISKMAPBYTEPOINTER
  D155          319: SEARCHMR2        EQU         *
                320:          ;INC    LCNGROUPLENGTH+1
D155 7CAEE7     321:          INC     LCNGROUPLENGTH+1
D158 2603       322:          BNE     SEARCHMR3
                323:          ;INC    LCNGROUPLENGTH
D15A 7CAEE6     324:          INC     LCNGROUPLENGTH
  D15D          325: SEARCHMR3        EQU         *
D15D F6AEE6     326:          LDAB    LCNGROUPLENGTH
                327:          ;CMPB   ALLOCATIONCOUNT
D160 F1AED8     328:          CMPB    ALLOCATIONCOUNT
D163 250A       329:          BCS     SEARCHMR5




ASM/6800 1.4A0: D165 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 359; Form 18    DISK FILE DRIVERS -- DISK SPACE MANAGEMENT
SDOS6800.ASM
D165 223E       330:          BHI     SEARCHMRG
D167 F6AEE7     331:          LDAB    LCNGROUPLENGTH+1
                332:          ;CMPB   ALLOCATIONCOUNT+1
D16A F1AED9     333:          CMPB    ALLOCATIONCOUNT+1
D16D 2736       334:          BEQ     SEARCHMRG   *** NOTE: ASSUMES LCN 0 IS ALWAYS ALLOCATED ***
  D16F          335: SEARCHMR5        EQU         *
D16F F6AEDF     336:          LDAB    SEARCHLCN+1 DECREMENT POSITION IN MAP
D172 2603       337:          BNE     SEARCHMR6   B/ DON'T HAVE TO DECREMENT UPPER HALF
                338:          ;DEC    SEARCHLCN
D174 7AAEDE     339:          DEC     SEARCHLCN
  D177          340: SEARCHMR6        EQU         *
                341:          ;DEC    SEARCHLCN+1
D177 7AAEDF     342:          DEC     SEARCHLCN+1
D17A 44         343:          LSRA
D17B 2507       344:          BCS     SEARCHMR8
  D17D          345: SEARCHMR7        EQU         *
D17D A500       346:          BITA    DISKMAP:BYTE,X
D17F 27D4       347:          BEQ     SEARCHMR2
                348:          ;JMP    SEARCHMR0
D181 7ED0E4     349:          JMP     SEARCHMR0




ASM/6800 1.4A0: D181 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 360; Form 18    DISK FILE DRIVERS -- DISK SPACE MANAGEMENT
SDOS6800.ASM
  D184          351: SEARCHMR8        ; RAN OFF END OF BYTE
D184 8680       352:          LDAA    #$80        PICK UP MASK FOR NEXT BYTE
D186 09         353:          DEX                 BACK UP POINTER
D187 BCAEE8     354:          CPX     DISKMAPSECTORSTART HIT BEGIN SECTOR ?
D18A 26F1       355:          BNE     SEARCHMR7   B/ NO, GO PROCESS BYTE
                356:          ;LDD    SEARCHLCN   YES, MUST PROCESS PREVIOUS SECTOR
D18C F6AEDF     357:          LDAB    SEARCHLCN+1
D18F B6AEDE     358:          LDAA    SEARCHLCN
                359:          ;JSR    FINDLCNMAPBIT GO FIND IT
D192 BDD227     360:          JSR     FINDLCNMAPBIT
D195 254B       361:          BCS     SEARCHMREB  OOPS...
                362:          ;LDX    IOCBPOINTER INITIATE READ-BEHIND
D197 FEAE09     363:          LDX     IOCBPOINTER
                364:          ;JSR    READBEHIND
D19A BDD7E2     365:          JSR     READBEHIND
                366:          ;LDX    DISKMAPBYTEPOINTER RESTORE BIT MASK
D19D FEAEEC     367:          LDX     DISKMAPBYTEPOINTER
D1A0 B6AEEE     368:          LDAA    DISKMAPMASK AND MAP BYTE ADDRESS
D1A3 20D8       369:          BRA     SEARCHMR7   GO PROCESS NEXT BYTE
                370: 
  D1A5          371: SEARCHMRG        ; FOUND ALLOCATION COUNT FREE CLUSTERS
                372:          ;LDX    AVAILABLELCN ON BACKWARDS SEARCH
D1A5 FEAEE0     373:          LDX     AVAILABLELCN
D1A8 08         374:          INX                 FIRST DECIDE IF ANY ALLOCATION FOUND YET
D1A9 270C       375:          BEQ     SEARCHUS    B/ NO DISK SPACE FOUND PREVIOUSLY
                376:          ;LDX    AVAILABLECOUNT IF AVAILABLE COUNT = ALLOCATION COUNT,
D1AB FEAEE2     377:          LDX     AVAILABLECOUNT
D1AE BCAED8     378:          CPX     ALLOCATIONCOUNT THEN CHOOSE CLOSEST FREE GROUP
D1B1 2604       379:          BNE     SEARCHUS    ELSE USE JUST FOUND FREE GROUP
D1B3 8D40       380:          BSR     SEARCHOOSE  CHOOSE CLOSER OF (SEARCHLCN,AVAILABLELCN)
D1B5 240C       381:          BCC     SEARCHFLCN  AVAILABLELCN WAS CLOSER
  D1B7          382: SEARCHUS ; USE SEARCHLCN AS RESULT
                383:          ;LDD    SEARCHLCN   COPY TO AVAILABLELCN
D1B7 F6AEDF     384:          LDAB    SEARCHLCN+1
D1BA B6AEDE     385:          LDAA    SEARCHLCN
                386:          ;STD    AVAILABLELCN
D1BD F7AEE1     387:          STAB    AVAILABLELCN+1
D1C0 B7AEE0     388:          STAA    AVAILABLELCN
  D1C3          389: SEARCHFLCN       ; FOUND AVAILABLE LCN IN MAP
                390:          ;LDD    AVAILABLELCN LOCATE IT AGAIN SINCE IT IS PROBABLY NOT...




ASM/6800 1.4A0: D1C3 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 361; Form 18    DISK FILE DRIVERS -- DISK SPACE MANAGEMENT
SDOS6800.ASM
D1C3 F6AEE1     391:          LDAB    AVAILABLELCN+1
D1C6 B6AEE0     392:          LDAA    AVAILABLELCN
                393:          ;JSR    FINDLCNMAPBIT IN CURRENT MAP BLOCK
D1C9 BDD227     394:          JSR     FINDLCNMAPBIT
  D1CC          395: SEARCHMFQXIT     ; QUICK EXIT
                396:          ;LDX    DISKMAPBYTEPOINTER GET POINTER TO MAP BYTE BACK
D1CC FEAEEC     397:          LDX     DISKMAPBYTEPOINTER
D1CF AA00       398:          ORAA    DISKMAP:BYTE,X SET BIT IN MAP...
D1D1 A700       399:          STAA    DISKMAP:BYTE,X MARKING SECTOR AS ALLOCATED
                400:          ;LDX    IOCBPOINTER TAG SECTOR AS MODIFIED
D1D3 FEAE09     401:          LDX     IOCBPOINTER
                402:          ;LDX    IOCB:DRDSI,X GET RDSI OF THIS MAP SECTOR
D1D6 EE12       403:          LDX     IOCB:DRDSI,X
D1D8 A70B       404:          STAA    RDSI:MODIFIED,X SINCE READAHEAD BOMBED RDSIPOINTER (A<>0)
                405:          ;LDD    AVAILABLELCN AND RETURN THE LCN ALLOCATED
D1DA F6AEE1     406:          LDAB    AVAILABLELCN+1
D1DD B6AEE0     407:          LDAA    AVAILABLELCN
D1E0 0C39       408:          OKRTS
                409: 
  D1E2          410: SEARCHMREB       ; BOTTOM OF MAP HIT
D1E2 8C03F4     411:          CPX     #ERR:ILLEGALLCN DOUBLE CHECK TO MAKE SURE
D1E5 260B       412:          BNE     SEARCHMERRED3 B/ WASN'T BOTTOM OF MAP!!?
                413:          ;LDX    AVAILABLELCN ANY AVAILABLE LCN FOUND ?
D1E7 FEAEE0     414:          LDX     AVAILABLELCN
D1EA 08         415:          INX                 ...?
D1EB 26D6       416:          BNE     SEARCHFLCN  B/ YES, TAKE SUCCESS EXIT
                417:          ;JSR    ERRET       NO, NO DISK SPACE AVAILABLE
D1ED BDB1F6     418:          JSR     ERRET
D1F0 03F7       419:          FDB     ERR:NODISKSPACE
                420: 
  D1F2          421: SEARCHMERRED3    EQU         *
                422:          ;JMP    ERRORED
D1F2 7EB209     423:          JMP     ERRORED




ASM/6800 1.4A0: D1F2 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 362; Form 18    DISK FILE DRIVERS -- DISK SPACE MANAGEMENT
SDOS6800.ASM
                425: *
                426: *        SEARCHOOSE -- DECIDE WHETHER AVAILABLELCN OR SEARCHLCN...
                427: *                IS CLOSEST TO DIVIDEPOINTLCN
                428: *                RETURN CARRY RESET IF AVAILABLELCN IS THE ONE TO KEEP
                429: *
  D1F5          430: SEARCHOOSE       EQU         *
                431:          ;LDD    DIVIDEPOINTLCN IS ABS(DIVIDEPOINTLCN-AVAILABLELCN)
D1F5 F6AEDD     432:          LDAB    DIVIDEPOINTLCN+1
D1F8 B6AEDC     433:          LDAA    DIVIDEPOINTLCN
                434:          ;SUBD   AVAILABLELCN > ABS(DIVIDEPOINTLCN-SEARCHLCN)?
D1FB F0AEE1     435:          SUBB    AVAILABLELCN+1
D1FE B2AEE0     436:          SBCA    AVAILABLELCN
D201 2404       437:          BCC     SEARCHOOSE1
                438:          ;NEGD               (TAKE -(A,B) TO GET ABS VALUE)
D203 40         439:          NEGA
D204 50         440:          NEGB
D205 8200       441:          SBCA    #0
  D207          442: SEARCHOOSE1      EQU         *
                443:          ;STD    TEMPX       SAVE ABS(DIVIDEPOINTLCN-AVAILABLELCN)
D207 D701       444:          STAB    TEMPX+1
D209 9700       445:          STAA    TEMPX
                446:          ;LDD    DIVIDEPOINTLCN (COMPUTE ABS(DIVIDEPOINTLCN-SEARCHLCN))
D20B F6AEDD     447:          LDAB    DIVIDEPOINTLCN+1
D20E B6AEDC     448:          LDAA    DIVIDEPOINTLCN
                449:          ;SUBD   SEARCHLCN
D211 F0AEDF     450:          SUBB    SEARCHLCN+1
D214 B2AEDE     451:          SBCA    SEARCHLCN
D217 2404       452:          BCC     SEARCHOOSE2 B/ ITS ALREADY NEGATIVE
                453:          ;NEGD               COMPUTE ABS(A,B)
D219 40         454:          NEGA
D21A 50         455:          NEGB
D21B 8200       456:          SBCA    #0
  D21D          457: SEARCHOOSE2      EQU         *
                458:          ;SUBD   TEMPX       = ABS(DIVIDEPOINTLCN-AVAILABLELCN)...
D21D D001       459:          SUBB    TEMPX+1
D21F 9200       460:          SBCA    TEMPX
D221 39         461:          RTS                 -ABS(DIVIDEPOINTLCN-SEARCHLCN)
                462: 
  D222          463: FINDLCNERREXIT   EQU         *
                464:          ;JSR    ERRET       ILLEGAL LCN




ASM/6800 1.4A0: D222 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 363; Form 18    DISK FILE DRIVERS -- DISK SPACE MANAGEMENT
SDOS6800.ASM
D222 BDB1F6     465:          JSR     ERRET
D225 03F4       466:          FDB     ERR:ILLEGALLCN




ASM/6800 1.4A0: D225 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 364; Form 18    DISK FILE DRIVERS -- DISK SPACE MANAGEMENT
SDOS6800.ASM
                468: *        FINDLCNMAPBIT -- TAKES (D) AS LCN IN DISKMAP
                469: *                RETURNS VIA ERRET IF ILLEGAL LCN
                470: *                COMPUTES DESIRED LSN OF MAP, READS IT IN
                471: *                RETURNS BYTE POINTER IN (X) AND BIT MASK IN (A) FOR LCN
                472: *                ASSUMES IOCBPOINTER SET UP TO PROCESS MAP CLUSTER
                473: *                SETS UP DISKMAPSECTORSTART TO BEGINNING OF BUFFER-1
                474: *                SETS UP DISKMAPSECTOREND TO END OF BUFFER
                475: *                RETURNS RDSIPOINTER, IOCB:RDSI POINTING TO MAP SECTOR
                476: *
  D227          477: FINDLCNMAPBIT    EQU         *
                478:          ;LDX    DCBPOINTER  CHECK LCN(A,B)...
D227 DE06       479:          LDX     DCBPOINTER
                480:          ;CMPD   DSKINFO:NLCN,X TO MAKE SURE ITS LEGAL
D229 A11E       481:          CMPA    DSKINFO:NLCN,X
D22B 2602       482:          BNE     MACRO:0020
D22D E11F       483:          CMPB    (DSKINFO:NLCN)+1,X
  D22F          484: MACRO:0020
D22F 24F1       485:          BCC     FINDLCNERREXIT B/ ILLEGAL LCN
D231 F7AEEE     486:          STAB    DISKMAPMASK SAVE BIT NUMBER DESIRED
                487:          ;LSRD               SHIFT OFF BIT NUMBER...
D234 44         488:          LSRA
D235 56         489:          RORB
                490:          ;LSRD               TO GET BYTE ADDRESS WITHIN DISK MAP
D236 44         491:          LSRA
D237 56         492:          RORB
                493:          ;LSRD
D238 44         494:          LSRA
D239 56         495:          RORB
                496:          ;STD    DISKMAPBYTEPOINTER SAVE BYTE NUMBER DESIRED
D23A F7AEED     497:          STAB    DISKMAPBYTEPOINTER+1
D23D B7AEEC     498:          STAA    DISKMAPBYTEPOINTER
                499:          ;JSR    COMPUTERSN  COMPUTE RELATIVE SECTOR NUMBER
D240 BDD771     500:          JSR     COMPUTERSN
D243 E71A       501:          STAB    IOCB:DRSN,X SAVE RELATIVE SECTOR # WITHIN MAP CLUSTER
                502:          ;LDX    DCBPOINTER  COMPUTE LSN OF DESIRED MAP FILE SECTOR
D245 DE06       503:          LDX     DCBPOINTER
D247 EB26       504:          ADDB    DSKINFO:MAPLSN+2,X = LSN(MAP CLUSTER)+RSN
D249 37         505:          PSHB                (THIS IS VALID BECUZ ALLOC CHECKS ON ENTRY)
                506:          ;LDD    DSKINFO:MAPLSN,X
D24A E625       507:          LDAB    (DSKINFO:MAPLSN)+1,X




ASM/6800 1.4A0: D24C SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 365; Form 18    DISK FILE DRIVERS -- DISK SPACE MANAGEMENT
SDOS6800.ASM
D24C A624       508:          LDAA    DSKINFO:MAPLSN,X
D24E C900       509:          ADCB    #0          PROPOGATE ANY CARRY
D250 8900       510:          ADCA    #0
                511:          ;LDX    IOCBPOINTER STORE DESIRED LSN INTO IOCB
D252 FEAE09     512:          LDX     IOCBPOINTER
                513:          ;STD    IOCB:CURLSN,X
D255 E703       514:          STAB    (IOCB:CURLSN)+1,X
D257 A702       515:          STAA    IOCB:CURLSN,X
D259 32         516:          PULA
D25A A704       517:          STAA    IOCB:CURLSN+2,X
                518:          ;JSR    READSECTOR  AND GO GET MAP SECTOR
D25C BDD8F3     519:          JSR     READSECTOR
                520:          ;LDX    IOCBPOINTER REMEMBER RDSI FOR MAP SECTOR
D25F FEAE09     521:          LDX     IOCBPOINTER
                522:          ;STD    IOCB:DRDSI,X SINCE READAHEAD WILL DESTROY RDSIPOINTER
D262 E713       523:          STAB    (IOCB:DRDSI)+1,X
D264 A712       524:          STAA    IOCB:DRDSI,X
                525:          ;LDD    DISKMAPBYTEPOINTER GET BYTE NUMBER DESIRED BACK
D266 F6AEED     526:          LDAB    DISKMAPBYTEPOINTER+1
D269 B6AEEC     527:          LDAA    DISKMAPBYTEPOINTER
                528:          ;LDX    DCBPOINTER  NOW MASK BYTE NUMBER...
D26C DE06       529:          LDX     DCBPOINTER
D26E A419       530:          ANDA    DSKINFO:NBPSM1,X TO GET DESIRED BYTE DISPLACMENT INTO MAP SECTOR
D270 E41A       531:          ANDB    DSKINFO:NBPSM1+1,X
                532:          ;LDX    RDSIPOINTER ADD SECTOR BUFFER BASE...
D272 FEAEA4     533:          LDX     RDSIPOINTER
                534:          ;ADDD   RDSI:SECTORBASE,X TO GET REAL POINTER TO MAP BYTE
D275 EB06       535:          ADDB    (RDSI:SECTORBASE)+1,X
D277 A905       536:          ADCA    RDSI:SECTORBASE,X
                537:          ;STD    DISKMAPBYTEPOINTER
D279 F7AEED     538:          STAB    DISKMAPBYTEPOINTER+1
D27C B7AEEC     539:          STAA    DISKMAPBYTEPOINTER
                540:          ;LDX    RDSI:SECTORBASE,X COMPUTE START AND END OF
D27F EE05       541:          LDX     RDSI:SECTORBASE,X
D281 09         542:          DEX                 AS A CONVENIENCE TO SEARCHMAP
D282 FFAEE8     543:          STX     DISKMAPSECTORSTART DISK BUFFERS FOR THIS BLOCK
                544:          ;LDX    DCBPOINTER
D285 DE06       545:          LDX     DCBPOINTER
                546:          ;LDD    DSKINFO:NBPS,X
D287 E60A       547:          LDAB    (DSKINFO:NBPS)+1,X




ASM/6800 1.4A0: D289 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 366; Form 18    DISK FILE DRIVERS -- DISK SPACE MANAGEMENT
SDOS6800.ASM
D289 A609       548:          LDAA    DSKINFO:NBPS,X
D28B 0D         549:          SEC                 TO OFFSET THE "DEX"
D28C F9AEE9     550:          ADCB    DISKMAPSECTORSTART+1
D28F B9AEE8     551:          ADCA    DISKMAPSECTORSTART
                552:          ;STD    DISKMAPSECTOREND
D292 F7AEEB     553:          STAB    DISKMAPSECTOREND+1
D295 B7AEEA     554:          STAA    DISKMAPSECTOREND
D298 F6AEEE     555:          LDAB    DISKMAPMASK GET DESIRED BIT # BACK
D29B C407       556:          ANDB    #NMBPB-1    TAKE MODULO # BITS PER MAP BYTE
D29D 4F         557:          CLRA                CONVERT INTO A BIT MASK
D29E 0D         558:          SEC
  D29F          559: FINDLCNMAPBITL   EQU         *
D29F 49         560:          ROLA                BY SHIFTING
D2A0 5A         561:          DECB
D2A1 2AFC       562:          BPL     FINDLCNMAPBITL
D2A3 B7AEEE     563:          STAA    DISKMAPMASK
                564:          ;JSR    WAITRDSI    WAIT FOR MAP SECTOR TO ARRIVE
D2A6 BDDAA1     565:          JSR     WAITRDSI
D2A9 B6AEEE     566:          LDAA    DISKMAPMASK GET BIT MASK FOR DISKMAP.SYS BYTE
                567:          ;LDX    DISKMAPBYTEPOINTER GET POINTER TO MAP BYTE
D2AC FEAEEC     568:          LDX     DISKMAPBYTEPOINTER
D2AF 0C39       569:          OKRTS




ASM/6800 1.4A0: D2AF SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 367; Form 19    DISK FILE DRIVERS -- SUBROUTINES
SDOS6800.ASM
                  2: *        LOCATECURBYTE -- PROCESSES IOCB:CURBYTE
                  3: *        TO SET UP VALUE FOR IOCB:CURLSN
                  4: *        ALSO SETS UP IOCB:FILESIZE, IOCB:BYTECOUNT, IOCB:CURLCN, IOCB:RSN
                  5: *        ASSUMES THAT IOCB:CURLCN IS VALID
                  6: *        ZEROS IOCB:DRDSI UNLESS BYTE IS IN LSN SELECTED BY RDSI
                  7: *        ASSUMES THAT IOCBPOINTER, DCBPOINTER ARE SET UP
                  8: *        (A,B) CONTAIN # BYTES REQUESTED FOR TRANSFER ON ENTRY
                  9: *        RETURNS VIA OKRTS:
                 10: *                IOCB:CURLCN<>-1 --> LOCATED BYTE
                 11: *                IOCB:CURLCN=-1  --> CLUSTER FOR BYTE NOT ALLOCATED
                 12: *                USEDCOUNT = # BYTES AVAILABLE TO BE MOVED
                 13: *                ( 0 < USEDCOUNT <= REQUESTED )
                 14: *                USEDCOUNT MUST BE ADJUSTED IF ALL THE BYTES ARE NOT USED
                 15: *                (X) = IOCBPOINTER
                 16: *        RETURN VIA ERRET:
                 17: *                DISK SPACE EXHAUSTED ON WRITE ATTEMPT
                 18: *        LOCATECURBYTE ENSURES DESIRED SECTOR IS BROUGHT INTO MEMORY
                 19: *        IF WRITEFLAG=0 (READ MODE) AND NON-EXISTENT DATA CLUSTER IS ENCOUNTERED,
                 20: *        AN IMAGINARY SECTOR IS ZEROED AND USED
                 21: *        NOBODY MAY MODIFY THIS IMAGINARY SECTOR!!!
                 22: *        IF WRITEFLAG<>0, AND LOCATE IS DIRECTED TO
                 23: *        BYTE BEYOND CURRENT LENGTH OF FILE, THEN
                 24: *        A ZEROED SECTOR IS INVENTED
                 25: 
  D2B1           26: LOCATECURBYTE    EQU         *
                 27:          ;STD    USEDCOUNT   STORE # BYTES REQUESTED FOR THIS TRANSFER
D2B1 F7AEA0      28:          STAB    USEDCOUNT+1
D2B4 B7AE9F      29:          STAA    USEDCOUNT
                 30:          ;LDX    IOCBPOINTER LOCATE ALREADY DONE ?
D2B7 FEAE09      31:          LDX     IOCBPOINTER
D2BA A611        32:          LDAA    IOCB:LOCATEDF,X ...?
D2BC 276C        33:          BEQ     LOCATECURBYTE0 B/ NO, GO DO IT IN ALL OF ITS GLORY
                 34:          ;LDX    IOCB:BYTECOUNT,X ANY BYTES REMAINING TO BE PROCESSED ?
D2BE EE16        35:          LDX     IOCB:BYTECOUNT,X
D2C0 2718        36:          BEQ     LOCATECURBYTEE B/ NO, GO FIGURE OUT WHY
                 37:          ;LDX    IOCBPOINTER YES, IS THE DATA SECTOR STILL HERE ?
D2C2 FEAE09      38:          LDX     IOCBPOINTER
                 39:          ;LDX    IOCB:DRDSI,X ... ?
D2C5 EE12        40:          LDX     IOCB:DRDSI,X
D2C7 2756        41:          BEQ     LOCATECURBYTEE3 B/ NO, GO FIGURE OUT STUFF THE HARD WAY!




ASM/6800 1.4A0: D2C7 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 368; Form 19    DISK FILE DRIVERS -- SUBROUTINES
SDOS6800.ASM
                 42:          ;JSR    REQUERDSI   MAKE SURE THIS SECTOR DOESN'T GET KICKED OUT SOON
D2C9 BDDA5B      43:          JSR     REQUERDSI
D2CC B6AE9A      44:          LDAA    WRITEFLAG   DATA SECTOR IS STILL AROUND, IS THIS A WRITE ?
D2CF 2603        45:          BNE     LOCATECURBYTEWJ B/ YES, GO PROCESS
                 46:          ;JMP    LOCATECURBYTED B/ READ MODE, GO SET UP XFER COUNT
D2D1 7ED446      47:          JMP     LOCATECURBYTED
                 48: 
  D2D4           49: LOCATECURBYTEWJ  EQU         *
                 50:          ;JMP    LOCATECURBYTEW
D2D4 7ED46D      51:          JMP     LOCATECURBYTEW
                 52: 
  D2D7           53: LOCATECURBYTE9J  EQU         *
                 54:          ;JMP    LOCATECURBYTE9
D2D7 7ED466      55:          JMP     LOCATECURBYTE9
                 56: 
  D2DA           57: LOCATECURBYTEE   ; EXHAUSTED BYTECOUNT
                 58:          ;LDX    IOCBPOINTER LOADING :BYTECOUNT INTO (X) DESTROYED THIS...
D2DA FEAE09      59:          LDX     IOCBPOINTER
D2DD B6AE9A      60:          LDAA    WRITEFLAG   IS THIS A WRITE ?
D2E0 2604        61:          BNE     LOCATECURBYTEE2 B/ YES
D2E2 A60B        62:          LDAA    IOCB:EOFFLAG,X NO, ARE WE AT EOF ?
D2E4 26F1        63:          BNE     LOCATECURBYTE9J B/ YES, GO COMPLAIN!
  D2E6           64: LOCATECURBYTEE2  EQU         *
                 65:          ;LDD    IOCB:CURBYTE+2,X HMMM... ARE WE ON A SECTOR BOUNDARY ?
D2E6 E610        66:          LDAB    (IOCB:CURBYTE+2)+1,X
D2E8 A60F        67:          LDAA    IOCB:CURBYTE+2,X
                 68:          ;LDX    IOCB:DCB,X
D2EA EE00        69:          LDX     IOCB:DCB,X
D2EC E51A        70:          BITB    DSKINFO:NBPSM1+1,X
D2EE 2637        71:          BNE     LOCATECURBYTEGJ B/ NO, GO RE-READ THE SECTOR
D2F0 A519        72:          BITA    DSKINFO:NBPSM1,X
D2F2 2633        73:          BNE     LOCATECURBYTEGJ B/ NO, GO RE-READ THE SECTOR
                 74:          ;LDX    IOCBPOINTER MUST BE AT END OF SECTOR
D2F4 FEAE09      75:          LDX     IOCBPOINTER
                 76:          ;INC    IOCB:DRSN,X FIGURE OUT DRSN OF NEXT SECTOR IN CLUSTER
D2F7 6C1A        77:          INC     IOCB:DRSN,X
D2F9 A61A        78:          LDAA    IOCB:DRSN,X GET NEXT SECTOR NUMBER WITHIN CLUSTER
                 79:          ;LDX    IOCB:DCB,X  CLUSTER EXHAUSTED ?
D2FB EE00        80:          LDX     IOCB:DCB,X
                 81:          ;CMPA   DSKINFO:NSPC,X ...?




ASM/6800 1.4A0: D2FD SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 369; Form 19    DISK FILE DRIVERS -- SUBROUTINES
SDOS6800.ASM
D2FD A111        82:          CMPA    DSKINFO:NSPC,X
D2FF 270E        83:          BEQ     LOCATECURBYTEE4 B/ YES
                 84:          ;LDX    IOCBPOINTER NO, IS THIS CLUSTER ALLOCATED ?
D301 FEAE09      85:          LDX     IOCBPOINTER
                 86:          ;LDX    IOCB:CURLCN,X
D304 EE18        87:          LDX     IOCB:CURLCN,X
D306 08          88:          INX                 ... ?
D307 2732        89:          BEQ     LOCATECURBYTE4 B/ NO, GO DECIDE WHAT TO DO
                 90:          ;JSR    INCIOCB:CURLSN SELECT NEXT SECTOR NUMBER
D309 BDD7F0      91:          JSR     INCIOCB:CURLSN
                 92:          ;JMP    LOCATECURBYTE8 GO ISSUE THE READ TO GET THAT DATA SECTOR
D30C 7ED3C2      93:          JMP     LOCATECURBYTE8




ASM/6800 1.4A0: D30C SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 370; Form 19    DISK FILE DRIVERS -- SUBROUTINES
SDOS6800.ASM
  D30F           95: LOCATECURBYTEE4  ; CLUSTER IS EXHAUSTED
                 96:          ;LDX    IOCBPOINTER YES, CLUSTER IS EXHAUSTED
D30F FEAE09      97:          LDX     IOCBPOINTER
                 98:          ;CLR    IOCB:RBN,X  SET RELATIVE BYTE # WITHIN CLUSTER...
D312 6F1D        99:          CLR     IOCB:RBN,X
                100:          ;CLR    IOCB:RBN+1,X TO ZERO
D314 6F1E       101:          CLR     IOCB:RBN+1,X
                102:          ;INC    IOCB:RDCN+1,X BUMP TO NEXT DATA CLUSTER NUMBER
D316 6C1C       103:          INC     IOCB:RDCN+1,X
D318 2602       104:          BNE     LOCATECURBYTEE1
                105:          ;INC    IOCB:RDCN,X
D31A 6C1B       106:          INC     IOCB:RDCN,X
  D31C          107: LOCATECURBYTEE1  EQU         *
                108:          ;JMP    LOCATECURBYTE3 GO LOCATE LCN FOR DATA CLUSTER
D31C 7ED386     109:          JMP     LOCATECURBYTE3
                110: 
  D31F          111: LOCATECURBYTEE3  ; DATA SECTOR DISAPPEARED!
                112:          ;LDX    IOCBPOINTER BECAUSE X IS TRASHED
D31F FEAE09     113:          LDX     IOCBPOINTER
                114:          ;LDX    IOCB:CURLCN,X IS CURRENT CLUSTER ALLOCATED ?
D322 EE18       115:          LDX     IOCB:CURLCN,X
D324 08         116:          INX                 ... ?
D325 2714       117:          BEQ     LOCATECURBYTE4 B/ NO, GO DECIDE WHAT TO DO
  D327          118: LOCATECURBYTEGJ  EQU         *
                119:          ;JMP    LOCATECURBYTEG AND GO GET THE SECTOR AGAIN
D327 7ED3E5     120:          JMP     LOCATECURBYTEG




ASM/6800 1.4A0: D327 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 371; Form 19    DISK FILE DRIVERS -- SUBROUTINES
SDOS6800.ASM
  D32A          122: LOCATECURBYTE0   ; START WITH IOCB:CURBYTE AND DO A FULL LOCATE
                123:          ;JSR    COMPUTERDCN COMPUTE RELATIVE DATA CLUSTER NUMBER
D32A BDD704     124:          JSR     COMPUTERDCN
                125:          ;CMPD   IOCB:RDCN,X IN SAME DATA CLUSTER IOCB HAS ALREADY SELECTED?
D32D A11B       126:          CMPA    IOCB:RDCN,X
D32F 2602       127:          BNE     MACRO:0021
D331 E11C       128:          CMPB    (IOCB:RDCN)+1,X
  D333          129: MACRO:0021
D333 2761       130:          BEQ     LOCATECURBYTE5 B/ YES, DON'T NEED TO READ HEADER CLUSTER
                131: *** This is where Segment size stuff should be inserted!
  D335          132: LOCATECURBYTE1   ; MUST READ BLOCK OF HEADER CLUSTER (SIGH!)
                133:          ;STD    IOCB:RDCN,X SAVE NEW RELATIVE DATA CLUSTER NUMBER
D335 E71C       134:          STAB    (IOCB:RDCN)+1,X
D337 A71B       135:          STAA    IOCB:RDCN,X
D339 204B       136:          BRA     LOCATECURBYTE3 GO FIND LCN OF DATA CLUSTER
                137: 
  D33B          138: LOCATECURBYTE4   ; NO DATA LCN YET ALLOCATED
D33B B6AE9A     139:          LDAA    WRITEFLAG   IS THIS A WRITE ATTEMPT?
D33E 2636       140:          BNE     LOCATECURBYTE2 B/ WRITE ATTEMPTED
                141:          ;LDD    #DUMMYLCN   READ ATTEMPT, SET CURLCN:=DUMMY
D340 C6FF       142:          LDAB    #(DUMMYLCN)&$FF
D342 86FF       143:          LDAA    #(DUMMYLCN)/256
                144:          ;LDX    IOCBPOINTER THIS SEEMS TO BE IMPORTANT
D344 FEAE09     145:          LDX     IOCBPOINTER
                146:          ;STD    IOCB:CURLCN,X
D347 E719       147:          STAB    (IOCB:CURLCN)+1,X
D349 A718       148:          STAA    IOCB:CURLCN,X
                149:          ;LDX    #0          WATCH ME PULL A RABBIT OUT OF A HAT!
D34B CE0000     150:          LDX     #0
D34E FFAF12     151:          STX     SYSSECTORDB+SECTORDB:DISKINFO INVENT A ZERO SECTOR
D351 FFAF15     152:          STX     SYSSECTORDB+SECTORDB:LSN+1 USE AN IMAGINARY DISK DRIVE
                153:          ;LDX    #SYSSECTORDB AND "READ" SECTOR ZERO FROM THAT DRIVE
D354 CEAF12     154:          LDX     #SYSSECTORDB
                155:          ;CLR    SECTORDB:LSN,X THIS IMAGINARY SECTOR MATCHES ALL IMAGINARY SECTORS
D357 6F02       156:          CLR     SECTORDB:LSN,X
                157:          ;JSR    INVENTSECTOR *** POOF ***
D359 BDD8F0     158:          JSR     INVENTSECTOR
D35C 4F         159:          CLRA                NOW ZERO IT OUT
D35D 5F         160:          CLRB
                161:          ;SUBD   MAXSECTORSIZE (GET - # BYTES TO ZAP)




ASM/6800 1.4A0: D35E SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 372; Form 19    DISK FILE DRIVERS -- SUBROUTINES
SDOS6800.ASM
D35E F0AF0F     162:          SUBB    MAXSECTORSIZE+1
D361 B2AF0E     163:          SBCA    MAXSECTORSIZE
D364 9700       164:          STAA    TEMPA       FOR STAASECTORL
                165:          ;LDX    RDSI:SECTORBASE,X GET SECTOR ADDRESS
D366 EE05       166:          LDX     RDSI:SECTORBASE,X
D368 4F         167:          CLRA                MAKE THE ZERO FOR STAASECTORL TO STORE
                168:          ;JSR    STAASECTORL AND GO ZERO THE SECTOR OUT
D369 BDCEA8     169:          JSR     STAASECTORL
D36C 207D       170:          BRA     LOCATECURBYTE5A GO SET UP THE WORLD




ASM/6800 1.4A0: D36C SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 373; Form 19    DISK FILE DRIVERS -- SUBROUTINES
SDOS6800.ASM
  D36E          172: LOCATECURBYTE3A  ; CAN'T LOCATE RDCN
D36E 8C0401     173:          CPX     #ERR:HCSICTOOSMALL IS THIS WHY ?
D371 27C8       174:          BEQ     LOCATECURBYTE4 B/ YES, MUST ALLOCATE MORE SPACE
                175:          ;JMP    ERRORED     NO, GO CAUSE AN ERROR
D373 7EB209     176:          JMP     ERRORED
                177: 
  D376          178: LOCATECURBYTE2   ; WRITE TO UNALLOCATED CLUSTER
                179:          ;LDX    DCBPOINTER  ALLOCATE CLUSTERS IN MIDDLE OF FILE
D376 DE06       180:          LDX     DCBPOINTER
                181:          ;LDD    DSKINFO:MIDALLOC,X GET # TO ALLOCATE
D378 E615       182:          LDAB    (DSKINFO:MIDALLOC)+1,X
D37A A614       183:          LDAA    DSKINFO:MIDALLOC,X
                184:          ;JSR    ALLOCATECLUSTERS
D37C BDCD19     185:          JSR     ALLOCATECLUSTERS
                186:          ;JSR    COMPUTERDCN ALLOC BOMBED IOCB:RDCN...
D37F BDD704     187:          JSR     COMPUTERDCN
                188:          ;STD    IOCB:RDCN,X SO WE NEED TO RE-COMPUTE IT
D382 E71C       189:          STAB    (IOCB:RDCN)+1,X
D384 A71B       190:          STAA    IOCB:RDCN,X
  D386          191: LOCATECURBYTE3   ; GET LCN FROM HEADER CLUSTER
                192:          ;JSR    LOCATERDCN  GO LOCATE THE DATA CLUSTER NUMBER
D386 BDD66B     193:          JSR     LOCATERDCN
D389 25E3       194:          BCS     LOCATECURBYTE3A B/ ERROR OCCURRED
                195:          ;LDD    HEADER:LCN,X GRAB DESIRED LCN
D38B E601       196:          LDAB    (HEADER:LCN)+1,X
D38D A600       197:          LDAA    HEADER:LCN,X
                198:          ;LDX    IOCBPOINTER AND SAVE IT FOR NEXT ROUND
D38F FEAE09     199:          LDX     IOCBPOINTER
                200:          ;STD    IOCB:CURLCN,X
D392 E719       201:          STAB    (IOCB:CURLCN)+1,X
D394 A718       202:          STAA    IOCB:CURLCN,X
  D396          203: LOCATECURBYTE5   EQU         *
                204:          ;LDD    IOCB:RBN,X  NOW DIVIDE RELATIVE BYTE # BY SECTOR SIZE
D396 E61E       205:          LDAB    (IOCB:RBN)+1,X
D398 A61D       206:          LDAA    IOCB:RBN,X
                207:          ;JSR    COMPUTERSN  TO GET RELATIVE SECTOR #
D39A BDD771     208:          JSR     COMPUTERSN
D39D E71A       209:          STAB    IOCB:DRSN,X
                210:          ;LDX    IOCB:CURLCN,X IS DATA LCN ALLOCATED ?
D39F EE18       211:          LDX     IOCB:CURLCN,X




ASM/6800 1.4A0: D3A1 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 374; Form 19    DISK FILE DRIVERS -- SUBROUTINES
SDOS6800.ASM
D3A1 08         212:          INX                 ...= DUMMYLCN ?
D3A2 2797       213:          BEQ     LOCATECURBYTE4 B/ DUMMY LCN, GO DECIDE WHAT TO DO
                214: *        THE FOLLOWING IS THE "FAST PATH" FOR HANDLING WRITING AT END OF FILE
D3A4 B6AE9A     215:          LDAA    WRITEFLAG   ARE WE WRITING ?
D3A7 270F       216:          BEQ     LOCATECURBYTE5B B/ NO, DON'T HAVE TO ZERO CLUSTERS OF SPARSE FILE
                217:          ;LDX    IOCBPOINTER AT END OF FILE ?
D3A9 FEAE09     218:          LDX     IOCBPOINTER
                219:          ;LDA    IOCB:EOFFLAG,X ...?
D3AC A60B       220:          LDAA    IOCB:EOFFLAG,X
D3AE 2708       221:          BEQ     LOCATECURBYTE5B B/ NO, DON'T HAVE TO ZERO CLUSTERS OF SPARSE FILE
                222:          ;JSR    CHECKMUSTZERO DOES SECTOR AT EOF CONTAIN IOCB:CURBYTE ?
D3B0 BDD55F     223:          JSR     CHECKMUSTZERO
                224:          ;LBCS   ZEROTOCURBYTE B/ NO, MUST ZERO CLUSTERS AT END OF SPARSE FILE
D3B3 2403       225:          BCC     MACRO:0022
D3B5 7ED4E6     226:          JMP     ZEROTOCURBYTE
  D3B8          227: MACRO:0022
  D3B8          228: LOCATECURBYTE5B ; NOW COMPUTE LSN OF DESIRED SECTOR
                229:          ;LDX    IOCBPOINTER NOW FIND LSN OF DESIRED SECTOR
D3B8 FEAE09     230:          LDX     IOCBPOINTER
                231:          ;LDD    IOCB:CURLCN,X
D3BB E619       232:          LDAB    (IOCB:CURLCN)+1,X
D3BD A618       233:          LDAA    IOCB:CURLCN,X
                234:          ;JSR    CONVERTLCNTOLSN
D3BF BDD778     235:          JSR     CONVERTLCNTOLSN




ASM/6800 1.4A0: D3BF SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 375; Form 19    DISK FILE DRIVERS -- SUBROUTINES
SDOS6800.ASM
  D3C2          237: LOCATECURBYTE8   ;  DATA CLUSTER CONTAINING CURBYTE EXISTS!
                238: *        SEE IF WE CAN OPTIMIZE THE FETCH
                239:          ;LDX    IOCBPOINTER SIGH!
D3C2 FEAE09     240:          LDX     IOCBPOINTER
D3C5 A60B       241:          LDAA    IOCB:EOFFLAG,X AT OR PAST END OF FILE ?
D3C7 271C       242:          BEQ     LOCATECURBYTEG B/ NO, MUST FETCH DATA SECTOR
                243:          ;LDX    FCBPOINTER  IS FILESIZE ON A SECTOR BOUNDARY ?
D3C9 FEAEA6     244:          LDX     FCBPOINTER
                245:          ;LDD    FCB:FILESIZE+2,X ...?
D3CC E614       246:          LDAB    (FCB:FILESIZE+2)+1,X
D3CE A613       247:          LDAA    FCB:FILESIZE+2,X
                248:          ;LDX    DCBPOINTER  (I.E., IS FILESIZE MOD NBPS = 0 ?)
D3D0 DE06       249:          LDX     DCBPOINTER
D3D2 E51A       250:          BITB    DSKINFO:NBPSM1+1,X ... ?
D3D4 260F       251:          BNE     LOCATECURBYTEG B/ NO, MUST FETCH DATA SECTOR
D3D6 A519       252:          BITA    DSKINFO:NBPSM1,X ... ?
D3D8 260B       253:          BNE     LOCATECURBYTEG B/ NO, MUST FETCH DATA SECTOR
                254:          ;LDX    IOCBPOINTER YES! INVENT A ZEROED SECTOR INSTEAD OF READING
D3DA FEAE09     255:          LDX     IOCBPOINTER
                256:          ;JSR    INVENTSECTOR
D3DD BDD8F0     257:          JSR     INVENTSECTOR
                258:          ;JSR    ZEROSECTOR  GO ZERO THE SECTOR INVENTED
D3E0 BDCEB7     259:          JSR     ZEROSECTOR
D3E3 2006       260:          BRA     LOCATECURBYTE5A AND CONTINUE AS THOUGH WE DID A READ
                261: 
  D3E5          262: LOCATECURBYTEG   ; GET THE DATA SECTOR
                263:          ;LDX    IOCBPOINTER GET POINTER TO SECTOR DESCRIPTOR
D3E5 FEAE09     264:          LDX     IOCBPOINTER
                265:          ;JSR    READSECTOR  AND INITIATE THE READ
D3E8 BDD8F3     266:          JSR     READSECTOR
  D3EB          267: LOCATECURBYTE5A ; SECTOR HAS BEEN FETCHED
                268:          ;LDX    IOCBPOINTER SAVE RDSI ADDRESS IN IOCB
D3EB FEAE09     269:          LDX     IOCBPOINTER
                270:          ;LDD    RDSIPOINTER
D3EE F6AEA5     271:          LDAB    RDSIPOINTER+1
D3F1 B6AEA4     272:          LDAA    RDSIPOINTER
                273:          ;STD    IOCB:DRDSI,X
D3F4 E713       274:          STAB    (IOCB:DRDSI)+1,X
D3F6 A712       275:          STAA    IOCB:DRDSI,X
                276:          ;JSR    COMPUTENEXTBYTE SET UP POINTER INTO DATA SECTOR




ASM/6800 1.4A0: D3F8 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 376; Form 19    DISK FILE DRIVERS -- SUBROUTINES
SDOS6800.ASM
D3F8 BDD6C9     277:          JSR     COMPUTENEXTBYTE
D3FB B6AE9A     278:          LDAA    WRITEFLAG   ARE WE WRITING ?
                279:          ;LBNE   LOCATECURBYTEW B/ YES
D3FE 2703       280:          BEQ     MACRO:0023
D400 7ED46D     281:          JMP     LOCATECURBYTEW
  D403          282: MACRO:0023
  D403          283: LOCATECURBYTER   ; READING FROM THE FILE
D403 A60B       284:          LDAA    IOCB:EOFFLAG,X HIT EOF?
D405 265F       285:          BNE     LOCATECURBYTE9 B/ YES, GO BITCH
                286:          ;LDX    IOCB:FCB,X  NO, COMPUTE FILESIZE - CURBYTE
D407 EE07       287:          LDX     IOCB:FCB,X
                288:          ;LDD    FCB:FILESIZE,X
D409 E612       289:          LDAB    (FCB:FILESIZE)+1,X
D40B A611       290:          LDAA    FCB:FILESIZE,X
                291:          ;PSHD
D40D 37         292:          PSHB
D40E 36         293:          PSHA
                294:          ;LDD    FCB:FILESIZE+2,X
D40F E614       295:          LDAB    (FCB:FILESIZE+2)+1,X
D411 A613       296:          LDAA    FCB:FILESIZE+2,X
                297:          ;LDX    IOCBPOINTER DO THE SUBTRACT
D413 FEAE09     298:          LDX     IOCBPOINTER
                299:          ;SUBD   IOCB:CURBYTE+2,X
D416 E010       300:          SUBB    (IOCB:CURBYTE+2)+1,X
D418 A20F       301:          SBCA    IOCB:CURBYTE+2,X
                302:          ;STD    TEMPX       WE NEED DISTANCE TO EOF LATER
D41A D701       303:          STAB    TEMPX+1
D41C 9700       304:          STAA    TEMPX
                305:          ;PULD               (RETREIVE UPPER HALF OF FCB:FILESIZE)
D41E 32         306:          PULA
D41F 33         307:          PULB
D420 E20E       308:          SBCB    IOCB:CURBYTE+1,X
D422 A20D       309:          SBCA    IOCB:CURBYTE,X
D424 2613       310:          BNE     LOCATECURBYTE7 B/ > 2^24 BYTES FROM END OF FILE
D426 5D         311:          TSTB
D427 2610       312:          BNE     LOCATECURBYTE7 B/ > 65536 BYTES FROM END OF FILE
                313:          ;LDD    TEMPX       "CLOSE" TO END OF FILE
D429 D601       314:          LDAB    TEMPX+1
D42B 9600       315:          LDAA    TEMPX
                316:          ;CMPD   IOCB:BYTECOUNT,X < 65536 BYTES FROM END OF FILE




ASM/6800 1.4A0: D42D SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 377; Form 19    DISK FILE DRIVERS -- SUBROUTINES
SDOS6800.ASM
D42D A116       317:          CMPA    IOCB:BYTECOUNT,X
D42F 2602       318:          BNE     MACRO:0024
D431 E117       319:          CMPB    (IOCB:BYTECOUNT)+1,X
  D433          320: MACRO:0024
D433 2204       321:          BHI     LOCATECURBYTE7 B/ USE NBPS-DISPLACEMENT
  D435          322: LOCATECURBYTE6   EQU         *
                323:          ;STD    IOCB:BYTECOUNT,X SAVE # BYTES TO MOVE MAX
D435 E717       324:          STAB    (IOCB:BYTECOUNT)+1,X
D437 A716       325:          STAA    IOCB:BYTECOUNT,X
  D439          326: LOCATECURBYTE7   EQU         *
                327:          ;JSR    WAITRDSI    WAIT FOR I/O COMPLETED
D439 BDDAA1     328:          JSR     WAITRDSI
                329:          ;LDX    IOCBPOINTER
D43C FEAE09     330:          LDX     IOCBPOINTER
D43F 8601       331:          LDAA    #1          FLAG "CURBYTE HAS BEEN LOCATED"
D441 A711       332:          STAA    IOCB:LOCATEDF,X
                333:          ;JSR    READAHEAD   FIRE UP THE READ-AHEAD
D443 BDD804     334:          JSR     READAHEAD
  D446          335: LOCATECURBYTED   ; ALMOST DONE!
                336:          ;LDX    IOCBPOINTER COMPUTE MIN(BYTECOUNT,REQUESTED)
D446 FEAE09     337:          LDX     IOCBPOINTER
                338:          ;LDD    USEDCOUNT
D449 F6AEA0     339:          LDAB    USEDCOUNT+1
D44C B6AE9F     340:          LDAA    USEDCOUNT
                341:          ;CMPD   IOCB:BYTECOUNT,X
D44F A116       342:          CMPA    IOCB:BYTECOUNT,X
D451 2602       343:          BNE     MACRO:0025
D453 E117       344:          CMPB    (IOCB:BYTECOUNT)+1,X
  D455          345: MACRO:0025
D455 250A       346:          BCS     LOCATECURBYTED2 B/ USE REQUESTED
                347:          ;LDD    IOCB:BYTECOUNT,X USE BYTECOUNT
D457 E617       348:          LDAB    (IOCB:BYTECOUNT)+1,X
D459 A616       349:          LDAA    IOCB:BYTECOUNT,X
                350:          ;STD    USEDCOUNT   SAVE # BYTES USED AT THIS STEP
D45B F7AEA0     351:          STAB    USEDCOUNT+1
D45E B7AE9F     352:          STAA    USEDCOUNT
  D461          353: LOCATECURBYTED2  EQU         *
                354:          ;LDX    IOCBPOINTER AS PROMISED
D461 FEAE09     355:          LDX     IOCBPOINTER
D464 0C39       356:          OKRTS




ASM/6800 1.4A0: D464 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 378; Form 19    DISK FILE DRIVERS -- SUBROUTINES
SDOS6800.ASM
                357: 
  D466          358: LOCATECURBYTE9   ; WHEN WE GET HERE, IOCB:EOF IS ALREADY SET
                359:          ;CLR    IOCB:BYTECOUNT,X ZAP THE BYTECOUNT
D466 6F16       360:          CLR     IOCB:BYTECOUNT,X
                361:          ;CLR    IOCB:BYTECOUNT+1,X
D468 6F17       362:          CLR     IOCB:BYTECOUNT+1,X
                363:          ;JMP    ERREOFHIT
D46A 7EC32A     364:          JMP     ERREOFHIT




ASM/6800 1.4A0: D46A SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 379; Form 19    DISK FILE DRIVERS -- SUBROUTINES
SDOS6800.ASM
  D46D          366: LOCATECURBYTEW   ; WRITING TO FILE
                367:          ;LDX    IOCBPOINTER JUST IN CASE
D46D FEAE09     368:          LDX     IOCBPOINTER
                369:          ;LDX    IOCB:DRDSI,X DID WE END UP...
D470 EE12       370:          LDX     IOCB:DRDSI,X
D472 A600       371:          LDAA    RDSI:DISKINFO,X TRYING TO WRITE ON THE IMAGINARY SECTOR ?
                372:          ;LBEQ   LOCATECURBYTE2 B/ YES, GO ALLOCATE THE ACTUAL DATA CLUSTER
D474 2603       373:          BNE     MACRO:0026
D476 7ED376     374:          JMP     LOCATECURBYTE2
  D479          375: MACRO:0026
D479 A70B       376:          STAA    RDSI:MODIFIED,X MAKE SURE THIS DATA SECTOR GOES BACK TO DISK
                377:          ;LDX    IOCBPOINTER
D47B FEAE09     378:          LDX     IOCBPOINTER
                379:          ;LDD    USEDCOUNT   COMPUTE MIN OF REQUESTED COUNT,
D47E F6AEA0     380:          LDAB    USEDCOUNT+1
D481 B6AE9F     381:          LDAA    USEDCOUNT
                382:          ;CMPD   IOCB:BYTECOUNT,X AND NBPS-DISPLACMENT INTO SECTOR
D484 A116       383:          CMPA    IOCB:BYTECOUNT,X
D486 2602       384:          BNE     MACRO:0027
D488 E117       385:          CMPB    (IOCB:BYTECOUNT)+1,X
  D48A          386: MACRO:0027
D48A 250A       387:          BCS     LOCATECURBYTEW2 B/ REQUESTED COUNT IS SMALLER
                388:          ;LDD    IOCB:BYTECOUNT,X USE NBPS-DISPLACEMENT AS # BYTES
D48C E617       389:          LDAB    (IOCB:BYTECOUNT)+1,X
D48E A616       390:          LDAA    IOCB:BYTECOUNT,X
                391:          ;STD    USEDCOUNT   SAVE # BYTES TO MOVE, MAX
D490 F7AEA0     392:          STAB    USEDCOUNT+1
D493 B7AE9F     393:          STAA    USEDCOUNT
  D496          394: LOCATECURBYTEW2  EQU         *
                395:          ;ADDD   IOCB:CURBYTE+2,X COMPUTE CURBYTE + # BYTES TO BE WRITTEN
D496 EB10       396:          ADDB    (IOCB:CURBYTE+2)+1,X
D498 A90F       397:          ADCA    IOCB:CURBYTE+2,X
                398:          ;STD    TEMP+2
D49A D703       399:          STAB    TEMP+2+1
D49C 9702       400:          STAA    TEMP+2
                401:          ;LDX    IOCB:CURBYTE,X
D49E EE0D       402:          LDX     IOCB:CURBYTE,X
D4A0 2401       403:          BCC     LOCATECURBYTEW5
D4A2 08         404:          INX
  D4A3          405: LOCATECURBYTEW5  EQU         *




ASM/6800 1.4A0: D4A3 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 380; Form 19    DISK FILE DRIVERS -- SUBROUTINES
SDOS6800.ASM
D4A3 DF00       406:          STX     TEMP
                407:          ;LDX    FCBPOINTER  NOW COMPARE TO CURRENT FILESIZE
D4A5 FEAEA6     408:          LDX     FCBPOINTER
                409:          ;LDD    FCB:FILESIZE+2,X BY SUBTRACTING NEW FILE SIZE FROM FCB:FILESIZE
D4A8 E614       410:          LDAB    (FCB:FILESIZE+2)+1,X
D4AA A613       411:          LDAA    FCB:FILESIZE+2,X
                412:          ;SUBD   TEMP+2
D4AC D003       413:          SUBB    TEMP+2+1
D4AE 9202       414:          SBCA    TEMP+2
                415:          ;LDD    FCB:FILESIZE,X
D4B0 E612       416:          LDAB    (FCB:FILESIZE)+1,X
D4B2 A611       417:          LDAA    FCB:FILESIZE,X
D4B4 D201       418:          SBCB    TEMP+1
D4B6 9200       419:          SBCA    TEMP
D4B8 2416       420:          BCC     LOCATECURBYTEW4 B/ NEW "END OF FILE" < OLD, DON'T UPDATE
                421:          ;LDD    TEMP        NEW EOF > OLD
D4BA D601       422:          LDAB    TEMP+1
D4BC 9600       423:          LDAA    TEMP
                424:          ;STD    FCB:FILESIZE,X UPDATE FILESIZE
D4BE E712       425:          STAB    (FCB:FILESIZE)+1,X
D4C0 A711       426:          STAA    FCB:FILESIZE,X
                427:          ;LDD    TEMP+2
D4C2 D603       428:          LDAB    TEMP+2+1
D4C4 9602       429:          LDAA    TEMP+2
                430:          ;STD    FCB:FILESIZE+2,X
D4C6 E714       431:          STAB    (FCB:FILESIZE+2)+1,X
D4C8 A713       432:          STAA    FCB:FILESIZE+2,X
D4CA A60A       433:          LDAA    FCB:FLAGS,X MAKE SURE DIRECTORY GETS UPDATED
D4CC 8A40       434:          ORAA    #FCBFLG::UPDATEDIR
D4CE A70A       435:          STAA    FCB:FLAGS,X
  D4D0          436: LOCATECURBYTEW4  EQU         *
                437:          ;JSR    WAITRDSI    WAIT FOR DISK SECTOR TO ARRIVE
D4D0 BDDAA1     438:          JSR     WAITRDSI
                439:          ;LDX    IOCBPOINTER NOW MARK CURBYTE...
D4D3 FEAE09     440:          LDX     IOCBPOINTER
D4D6 8601       441:          LDAA    #1          AS "LOCATED"
D4D8 A711       442:          STAA    IOCB:LOCATEDF,X
                443:          ;JSR    READAHEAD   GET READAHEAD FIRED UP.
D4DA BDD804     444:          JSR     READAHEAD
                445:          ;LDD    USEDCOUNT   GET # BYTES TO MOVE




ASM/6800 1.4A0: D4DD SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 381; Form 19    DISK FILE DRIVERS -- SUBROUTINES
SDOS6800.ASM
D4DD F6AEA0     446:          LDAB    USEDCOUNT+1
D4E0 B6AE9F     447:          LDAA    USEDCOUNT
                448:          ;JMP    LOCATECURBYTED2
D4E3 7ED461     449:          JMP     LOCATECURBYTED2




ASM/6800 1.4A0: D4E3 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 382; Form 19    DISK FILE DRIVERS -- SUBROUTINES
SDOS6800.ASM
                451: *        ZEROTOCURBYTE -- ZEROS OUT SECTORS BETWEEN FILESIZE AND IOCB:CURBYTE
                452: *                ONLY USED WHEN WRITING AT END-OF-FILE...
                453: *                AND IOCB:CURBYTE IS FAR PAST FILESIZE
                454: *
  D4E6          455: ZEROTOCURBYTE ; CURBYTE > 1 SECTOR PAST FILESIZE
                456: *        JSR     CHECKMUSTZERO MUST WE ZERO A SECTOR ?
                457: *        BCS     ZEROTOCURBYTE3 B/ NO, GET OUT FAST !
                458:          ;LDX    FCBPOINTER  IS FILESIZE **NOT** ON A SECTOR BOUNDARY ?
D4E6 FEAEA6     459:          LDX     FCBPOINTER
                460:          ;LDD    FCB:FILESIZE+2,X (I.E., IS SECTOR@FILESIZE ALREADY ZEROED?)
D4E9 E614       461:          LDAB    (FCB:FILESIZE+2)+1,X
D4EB A613       462:          LDAA    FCB:FILESIZE+2,X
                463:          ;LDX    DCBPOINTER  ...?
D4ED DE06       464:          LDX     DCBPOINTER
D4EF E51A       465:          BITB    DSKINFO:NBPSM1+1,X
D4F1 2637       466:          BNE     ZEROTOCURBYTEA B/ NOT ON SECTOR BOUNDARY, GO ADVANCE TO NEXT
D4F3 A519       467:          BITA    DSKINFO:NBPSM1,X
D4F5 2633       468:          BNE     ZEROTOCURBYTEA B/ NOT ON SECTOR BOUNDARY, GO ADVANCE TO NEXT
  D4F7          469: ZEROTOCURBYTEZ ; MUST ZERO SECTOR SELECTED BY FILESIZE
                470:          ;JSR    COMPUTERDCNF LOCATE LSN OF SECTOR TO BE ZEROED
D4F7 BDD6F9     471:          JSR     COMPUTERDCNF
D4FA 2558       472:          BCS     ZEROTOCURBYTE3 B/ FILESIZE = MAX LEGAL SIZE FOR THIS DISK !!
                473: ******** CAN FILESIZE BECOME > MAX LEGAL SIZE FOR THIS DISK ??????
                474:          ;STD    IOCB:RDCN,X SAVE RELATIVE DATA CLUSTER #
D4FC E71C       475:          STAB    (IOCB:RDCN)+1,X
D4FE A71B       476:          STAA    IOCB:RDCN,X
                477:          ;LDD    IOCB:RBN,X  COMPUTE RELATIVE SECTOR # NEEDED
D500 E61E       478:          LDAB    (IOCB:RBN)+1,X
D502 A61D       479:          LDAA    IOCB:RBN,X
                480:          ;JSR    COMPUTERSN
D504 BDD771     481:          JSR     COMPUTERSN
D507 E71A       482:          STAB    IOCB:DRSN,X AND SAVE IT
                483:          ;JSR    LOCATERDCN  FIND LCN OF DATA CLUSTER
D509 BDD66B     484:          JSR     LOCATERDCN
D50C 2549       485:          BCS     ZEROTOCURBYTE5 B/ ERROR IN LOCATING LCN OF CLUSTER
                486:          ;LDD    HEADER:LCN,X GET CLUSTER # FROM HEADER
D50E E601       487:          LDAB    (HEADER:LCN)+1,X
D510 A600       488:          LDAA    HEADER:LCN,X
                489:          ;LDX    IOCBPOINTER TO BE COMPATIBLE...
D512 FEAE09     490:          LDX     IOCBPOINTER




ASM/6800 1.4A0: D512 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 383; Form 19    DISK FILE DRIVERS -- SUBROUTINES
SDOS6800.ASM
                491:          ;STD    IOCB:CURLCN,X WITH LOCATECURBYTE0
D515 E719       492:          STAB    (IOCB:CURLCN)+1,X
D517 A718       493:          STAA    IOCB:CURLCN,X
                494:          ;LDX    IOCB:CURLCN,X IS THIS CLUSTER ALLOCATED ?
D519 EE18       495:          LDX     IOCB:CURLCN,X
D51B 08         496:          INX                 ... ?
D51C 270C       497:          BEQ     ZEROTOCURBYTEA B/ NO, THIS SECTOR IS EFFECTIVELY ZEROED ALREADY !
                498:          ;JSR    CONVERTLCNTOLSN YES, CONVERT LCN TO DESIRED SECTOR #
D51E BDD778     499:          JSR     CONVERTLCNTOLSN
                500:          ;JSR    INVENTSECTOR OUT OF NOWHERE SO WE CAN ZERO IT!!
D521 BDD8F0     501:          JSR     INVENTSECTOR
                502:          ;JSR    ZEROSECTOR  THEN ZERO IT...
D524 BDCEB7     503:          JSR     ZEROSECTOR
                504:          ;JSR    MARKMODIFIED AND MAKE THIS SECTOR GO TO THE DISK
D527 BDBF7C     505:          JSR     MARKMODIFIED
  D52A          506: ZEROTOCURBYTEA ; ADVANCE FILESIZE PAST ZEROED SECTOR
                507:          ;LDX    FCBPOINTER
D52A FEAEA6     508:          LDX     FCBPOINTER
                509:          ;LDD    FCB:FILESIZE+2,X (FIND LAST BYTE OF SECTOR)
D52D E614       510:          LDAB    (FCB:FILESIZE+2)+1,X
D52F A613       511:          LDAA    FCB:FILESIZE+2,X
                512:          ;LDX    DCBPOINTER
D531 DE06       513:          LDX     DCBPOINTER
                514:          ;ORA    DSKINFO:NBPSM1,X
D533 AA19       515:          ORAA    DSKINFO:NBPSM1,X
                516:          ;ORB    DSKINFO:NBPSM1+1,X
D535 EA1A       517:          ORAB    DSKINFO:NBPSM1+1,X
                518:          ;LDX    FCBPOINTER  (RESULT MUST GO BACK TO FCB)
D537 FEAEA6     519:          LDX     FCBPOINTER
                520:          ;ADDD   #1           (ADD 1 TO GET 1ST BYTE OF NEXT SECTOR)
D53A CB01       521:          ADDB    #(1)&$FF
D53C 8900       522:          ADCA    #(1)/256
                523:          ;STD    FCB:FILESIZE+2,X
D53E E714       524:          STAB    (FCB:FILESIZE+2)+1,X
D540 A713       525:          STAA    FCB:FILESIZE+2,X
D542 2406       526:          BCC     ZEROTOCURBYTEA1 B/ DON'T HAVE TO PROPOGATE CARRY
                527:          ;INC    FCB:FILESIZE+1,X
D544 6C12       528:          INC     FCB:FILESIZE+1,X
D546 2602       529:          BNE     ZEROTOCURBYTEA1 B/ DON'T HAVE TO PROPOGATE CARRY
                530:          ;INC    FCB:FILESIZE,X




ASM/6800 1.4A0: D548 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 384; Form 19    DISK FILE DRIVERS -- SUBROUTINES
SDOS6800.ASM
D548 6C11       531:          INC     FCB:FILESIZE,X
  D54A          532: ZEROTOCURBYTEA1
                533:          ;LDA    FCB:FLAGS,X MARK FCB AS MODIFIED
D54A A60A       534:          LDAA    FCB:FLAGS,X
                535:          ;ORA    #FCBFLG::UPDATEDIR
D54C 8A40       536:          ORAA    #FCBFLG::UPDATEDIR
                537:          ;STA    FCB:FLAGS,X
D54E A70A       538:          STAA    FCB:FLAGS,X
D550 8D0D       539:          BSR     CHECKMUSTZERO MUST WE ZERO MORE SECTORS AT EOF ?
D552 25A3       540:          BCS     ZEROTOCURBYTEZ B/ YES, GO ZERO ANOTHER ONE!
  D554          541: ZEROTOCURBYTE3
                542:          ;JMP    LOCATECURBYTE0 SINCE ZEROTOCURBYTE DESTROYS LOCATOR INFORMATION
D554 7ED32A     543:          JMP     LOCATECURBYTE0
                544: 
  D557          545: ZEROTOCURBYTE5   EQU         *
D557 8C0401     546:          CPX     #ERR:HCSICTOOSMALL VALID REASON PREVENTING US FROM LOCATING CLUSTER?
D55A 27F8       547:          BEQ     ZEROTOCURBYTE3 B/ YES, JUST QUIT
                548:          ;JMP    ERRORED     NO, GO BITCH AND SCREAM AND SHOUT!
D55C 7EB209     549:          JMP     ERRORED




ASM/6800 1.4A0: D55C SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 385; Form 19    DISK FILE DRIVERS -- SUBROUTINES
SDOS6800.ASM
                551: *        CHECKMUSTZERO -- CHECK IF WE MUST ZERO ANOTHER SECTOR
                552: *        USED TO HELP HANDLE SPARSE FILE ZEROING AT END OF FILE
                553: *        CHECKS TO SEE IF SECTOR SELECTED BY FCB:FILESIZE...
                554: *        CONTAINS THE BYTE SELECTED BY IOCB:CURBYTE
                555: *        RETURNS CARRY RESET IF YES, NO NEED TO ZERO
                556: *        RETURNS CARRY SET IF NO, MUST ZERO ANOTHER SECOTR
                557: *
  D55F          558: CHECKMUSTZERO    ; CHECK IF WE MUST ZERO SECTORS
                559:          ;LDX    FCBPOINTER  FETCH FILESIZE FOR COMPARE
D55F FEAEA6     560:          LDX     FCBPOINTER
                561:          ;LDD    FCB:FILESIZE+2,X
D562 E614       562:          LDAB    (FCB:FILESIZE+2)+1,X
D564 A613       563:          LDAA    FCB:FILESIZE+2,X
                564:          ;LDX    FCB:FILESIZE,X
D566 EE11       565:          LDX     FCB:FILESIZE,X
D568 DF00       566:          STX     TEMPX        TEMPX,D:=FILESIZE
                567:          ;LDX    DCBPOINTER  FIND LAST BYTE OF SECTOR SELECTED BY FILESIZE
D56A DE06       568:          LDX     DCBPOINTER
                569:          ;ORA    DSKINFO:NBPSM1,X
D56C AA19       570:          ORAA    DSKINFO:NBPSM1,X
                571:          ;ORB    DSKINFO:NBPSM1+1,X
D56E EA1A       572:          ORAB    DSKINFO:NBPSM1+1,X
                573:          ;LDX    IOCBPOINTER NOW COMPARE TO IOCB:CURBYTE
D570 FEAE09     574:          LDX     IOCBPOINTER
                575:          ;SUBD   IOCB:CURBYTE+2,X
D573 E010       576:          SUBB    (IOCB:CURBYTE+2)+1,X
D575 A20F       577:          SBCA    IOCB:CURBYTE+2,X
                578:          ;LDD    TEMPX
D577 D601       579:          LDAB    TEMPX+1
D579 9600       580:          LDAA    TEMPX
D57B E20E       581:          SBCB    IOCB:CURBYTE+1,X
D57D A20D       582:          SBCA    IOCB:CURBYTE,X
D57F 39         583:          RTS                 CARRY IS RESET IF CURBYTE IN SECTOR AT FILESIZE




ASM/6800 1.4A0: D57F SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 386; Form 19    DISK FILE DRIVERS -- SUBROUTINES
SDOS6800.ASM
                585: *        UPDATECURBYTE -- BY ADDING USEDCOUNT
                586: *                ALSO ADJUSTS BYTECOUNT, NEXTBYTE
                587: *                CAN BE CALLED ONLY IF IOCB:LOCATEDF IS VALID
                588: *
  D580          589: UPDATECURBYTE    EQU         *
                590:          ;LDX    IOCBPOINTER ADD # BYTES USED TO CURBYTE
D580 FEAE09     591:          LDX     IOCBPOINTER
                592:          ;LDD    IOCB:CURBYTE+2,X
D583 E610       593:          LDAB    (IOCB:CURBYTE+2)+1,X
D585 A60F       594:          LDAA    IOCB:CURBYTE+2,X
                595:          ;ADDD   USEDCOUNT
D587 FBAEA0     596:          ADDB    USEDCOUNT+1
D58A B9AE9F     597:          ADCA    USEDCOUNT
                598:          ;STD    IOCB:CURBYTE+2,X
D58D E710       599:          STAB    (IOCB:CURBYTE+2)+1,X
D58F A70F       600:          STAA    IOCB:CURBYTE+2,X
D591 2406       601:          BCC     UPDATECURBYTE1 B/ NO NEED TO UPDATE UPPER 16 BITS
                602:          ;INC    IOCB:CURBYTE+1,X
D593 6C0E       603:          INC     IOCB:CURBYTE+1,X
D595 2602       604:          BNE     UPDATECURBYTE1
                605:          ;INC    IOCB:CURBYTE,X
D597 6C0D       606:          INC     IOCB:CURBYTE,X
  D599          607: UPDATECURBYTE1   EQU         *
                608:          ;LDD    IOCB:NEXTBYTE,X NOW ADJUST POINTER TO NEXT BYTE IN SECTOR BUFFER
D599 E615       609:          LDAB    (IOCB:NEXTBYTE)+1,X
D59B A614       610:          LDAA    IOCB:NEXTBYTE,X
                611:          ;ADDD   USEDCOUNT   BY ADVANCING IT BY # USED BYTES
D59D FBAEA0     612:          ADDB    USEDCOUNT+1
D5A0 B9AE9F     613:          ADCA    USEDCOUNT
                614:          ;STD    IOCB:NEXTBYTE,X
D5A3 E715       615:          STAB    (IOCB:NEXTBYTE)+1,X
D5A5 A714       616:          STAA    IOCB:NEXTBYTE,X
                617:          ;LDD    IOCB:BYTECOUNT,X NOW ADJUST # BYTES REMAINING IN FILE/SECTOR
D5A7 E617       618:          LDAB    (IOCB:BYTECOUNT)+1,X
D5A9 A616       619:          LDAA    IOCB:BYTECOUNT,X
                620:          ;SUBD   USEDCOUNT
D5AB F0AEA0     621:          SUBB    USEDCOUNT+1
D5AE B2AE9F     622:          SBCA    USEDCOUNT
                623:          ;STD    IOCB:BYTECOUNT,X
D5B1 E717       624:          STAB    (IOCB:BYTECOUNT)+1,X




ASM/6800 1.4A0: D5B3 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 387; Form 19    DISK FILE DRIVERS -- SUBROUTINES
SDOS6800.ASM
D5B3 A716       625:          STAA    IOCB:BYTECOUNT,X
  0001          626:          IF      M6800!M6801
D5B5 2601       627:          BNE     UPDATECURBYTERTS B/ THERE ARE MORE IN THIS SECTOR
D5B7 4D         628:          TSTA                ANY BYTES LEFT IN THIS SECTOR ?
  D5B8          629: UPDATECURBYTERTS EQU         *
                630:          FIN
D5B8 39         631:          RTS




ASM/6800 1.4A0: D5B8 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 388; Form 19    DISK FILE DRIVERS -- SUBROUTINES
SDOS6800.ASM
                633: *
                634: *        UPDATECURBYTEF -- UPDATE CURBYTE FOR DISK FILES
                635: *
  D5B9          636: UPDATECURBYTEF   EQU         *
D5B9 8DC5       637:          BSR     UPDATECURBYTE GO DO THE STUFF WE HAVE IN COMMON WITH DISK DEVICE
D5BB 2607       638:          BNE     UPDATECURBYTEOKRTS B/ THERE ARE SOME BYTES LEFT IN THIS SECTOR, GET O
D5BD A60B       639:          LDAA    IOCB:EOFFLAG,X NO MORE, WERE WE AT EOF ?
D5BF 2603       640:          BNE     UPDATECURBYTEOKRTS B/ YES, LEAVE EOF FLAG SET
                641:          ;JMP    DSKFEOFTEST NO, GO SEE IF WE ARE AT EOF!
D5C1 7EC307     642:          JMP     DSKFEOFTEST
                643: *                            WE USUALLY ONLY GET HERE IF WE'RE READING!
  D5C4          644: UPDATECURBYTEOKRTS           EQU *
D5C4 0C39       645:          OKRTS
                646: *
                647: *        UPDATECURBYTED -- UPDATECURBYTE FOR DISK DEVICE
                648: *
  D5C6          649: UPDATECURBYTED   EQU         *
D5C6 8DB8       650:          BSR     UPDATECURBYTE GO DO THE COMMON STUFF
D5C8 26FA       651:          BNE     UPDATECURBYTEOKRTS B/ MORE BYTES LEFT IN SECTOR, GET OUT!
                652:          ;JMP    DSKDEOFTEST SECTOR EXHAUSTED, GO CHECK FOR EOF
D5CA 7EC546     653:          JMP     DSKDEOFTEST




ASM/6800 1.4A0: D5CA SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 389; Form 19    DISK FILE DRIVERS -- SUBROUTINES
SDOS6800.ASM
  D5CD          655: ERRDISKWRITELOCKED           EQU *
                656:          ;JSR    ERRET
D5CD BDB1F6     657:          JSR     ERRET
D5D0 0419       658:          FDB     ERR:DISKWRITELOCKED
                659: 
  D5D2          660: ERREOFHITJ2      EQU         *
                661:          ;JMP    ERREOFHIT
D5D2 7EC32A     662:          JMP     ERREOFHIT
                663: *
                664: *        LOCDSKD -- LOCATE CURBYTE FOR DISK DEVICE
                665: *                ENTERED WITH CURLSN PRE-COMPUTED BY DSKDEOFTEST
                666: *                (A,B) CONTAIN REQUEST COUNT
                667: *                IF WRITE REQUEST, AND DISK IS WRITE LOCKED...
                668: *                            CAUSES A "DISK WRITE LOCKED" ERROR
                669: *                IF WRITING AT LEAST NBPS BYTES, STARTING ON A SECTOR BOUNDARY,
                670: *                            "INVENTSECTOR" IS USED INSTEAD OF "READSECTOR"
                671: *                            TO OPTIMIZE DISK I/O TIME
                672: *                            THIS ALSO ALLOWS WRITES TO DISK SECTORS...
                673: *                            WHICH CANNOT BE READ
                674: *                IF EOF HIT, TAKES "EOF HIT" ERROR EXIT
                675: *                OTHERWISE, SETS BYTECOUNT = NBPS - (CURBYTE MOD NBPS)
                676: *                            USEDCOUNT = MIN(BYTECOUNT,REQUESTED)
                677: *                CALLER MUST CALL UPDATECURBYTED WHEN DONE COPYING BYTES
                678: *
  D5D5          679: LOCDSKD  EQU     *
                680:          ;STD    USEDCOUNT   SAVE THE REQUESTED COUNT
D5D5 F7AEA0     681:          STAB    USEDCOUNT+1
D5D8 B7AE9F     682:          STAA    USEDCOUNT
                683:          ;LDX    IOCBPOINTER HIT EOF ?
D5DB FEAE09     684:          LDX     IOCBPOINTER
D5DE A60B       685:          LDAA    IOCB:EOFFLAG,X ... ?
D5E0 26F0       686:          BNE     ERREOFHITJ2 B/ YES
D5E2 A611       687:          LDAA    IOCB:DISKWRITELOCKED,X DISK DEVICE WRITE LOCKED ?
D5E4 2705       688:          BEQ     LOCDSKD1    B/ NO, LET HIM DO ANYTHING
D5E6 B6AE9A     689:          LDAA    WRITEFLAG   YES, DOES HE WANT TO WRITE ?
D5E9 26E2       690:          BNE     ERRDISKWRITELOCKED B/ TOO BAD!
  D5EB          691: LOCDSKD1 EQU     *
D5EB A612       692:          LDAA    IOCB:DRDSI,X IS DISK SECTOR STILL AROUND ?
D5ED 2709       693:          BEQ     LOCDSKD0    B/ NO, GO READ IT IN AGAIN
                694:          ;LDD    IOCB:BYTECOUNT,X YES, ANY BYTES LEFT IN THIS SECTOR ?




ASM/6800 1.4A0: D5EF SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 390; Form 19    DISK FILE DRIVERS -- SUBROUTINES
SDOS6800.ASM
D5EF E617       695:          LDAB    (IOCB:BYTECOUNT)+1,X
D5F1 A616       696:          LDAA    IOCB:BYTECOUNT,X
                697:          ;BNED   LOCATECURBYTEDJ B/ YES, TAKE QUICK EXIT
D5F3 2670       698:          BNE     LOCATECURBYTEDJ
D5F5 5D         699:          TSTB
D5F6 266D       700:          BNE     LOCATECURBYTEDJ
  D5F8          701: LOCDSKD0 EQU     *
D5F8 B6AE9A     702:          LDAA    WRITEFLAG   WRITING TO SECTOR ?
D5FB 272A       703:          BEQ     LOCDSKDR    B/ NO
                704:          ;LDX    IOCB:DCB,X  YES, WRITING AT LEAST A SECTOR'S WORTH...
D5FD EE00       705:          LDX     IOCB:DCB,X
                706:          ;LDD    DSKINFO:NBPSM1,X TO A SECTOR BOUNDARY ?
D5FF E61A       707:          LDAB    (DSKINFO:NBPSM1)+1,X
D601 A619       708:          LDAA    DSKINFO:NBPSM1,X
                709:          ;LDX    IOCBPOINTER (WE NEED THIS AGAIN)
D603 FEAE09     710:          LDX     IOCBPOINTER
D606 A50F       711:          BITA    IOCB:CURBYTE+2,X IF NOT ON SECTOR BOUNDARY, READ TO UPDATE SECTOR
D608 261D       712:          BNE     LOCDSKDR    B/ NOT ON A SECTOR BOUNDARY
D60A E510       713:          BITB    IOCB:CURBYTE+3,X
D60C 2619       714:          BNE     LOCDSKDR    B/ NOT ON A SECTOR BOUNDARY
                715:          ;SUBD   USEDCOUNT   IS USEDCOUNT >= NBPS ?
D60E F0AEA0     716:          SUBB    USEDCOUNT+1
D611 B2AE9F     717:          SBCA    USEDCOUNT
D614 2411       718:          BCC     LOCDSKDR    B/ NO, MUST READ TO UPDATE
                719:          ;JSR    INVENTSECTOR YES, OPTIMIZE SECTOR WRITE!
D616 BDD8F0     720:          JSR     INVENTSECTOR
D619 A70B       721:          STAA    RDSI:MODIFIED,X MARK SECTOR AS "DIDDLED"
                722:          ;LDX    IOCBPOINTER REMEMBER WHERE THE SECTOR IS
D61B FEAE09     723:          LDX     IOCBPOINTER
                724:          ;STD    IOCB:DRDSI,X
D61E E713       725:          STAB    (IOCB:DRDSI)+1,X
D620 A712       726:          STAA    IOCB:DRDSI,X
                727:          ;JSR    COMPUTENEXTBYTE SET UP BYTECOUNT FOR TRANSFER
D622 BDD6C9     728:          JSR     COMPUTENEXTBYTE
D625 203E       729:          BRA     LOCATECURBYTEDJ DON'T DO READ-AHEAD!




ASM/6800 1.4A0: D625 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 391; Form 19    DISK FILE DRIVERS -- SUBROUTINES
SDOS6800.ASM
  D627          731: LOCDSKDR ; MUST READ SECTOR (WITH POSSIBLE UPDATE)
                732:          ;JSR    READSECTOR  GO READ IN THE DATA SECTOR
D627 BDD8F3     733:          JSR     READSECTOR
D62A 7DAE9A     734:          TST     WRITEFLAG   WRITING ?
D62D 2702       735:          BEQ     LOCDSKD2    B/ NO
D62F A70B       736:          STAA    RDSI:MODIFIED,X YES, MARK RDSI AS MODIFIED
  D631          737: LOCDSKD2 EQU     *
                738:          ;LDX    IOCBPOINTER REMEMBER THE RDSI ADDRESS
D631 FEAE09     739:          LDX     IOCBPOINTER
                740:          ;STD    IOCB:DRDSI,X
D634 E713       741:          STAB    (IOCB:DRDSI)+1,X
D636 A712       742:          STAA    IOCB:DRDSI,X
                743:          ;JSR    COMPUTENEXTBYTE SET UP BYTECOUNT
D638 BDD6C9     744:          JSR     COMPUTENEXTBYTE
                745:          ;JSR    WAITRDSI    WAIT FOR ARRIVAL OF DATA SECTOR
D63B BDDAA1     746:          JSR     WAITRDSI
D63E B6AF09     747:          LDAA    NRDSIS      ENOUGH BUFFERS AVAILABLE TO START READ-AHEAD ?
                748:          ;CMPA   #READAHEADRDSIMIN ... ?
D641 8103       749:          CMPA    #READAHEADRDSIMIN
D643 2320       750:          BLS     LOCATECURBYTEDJ B/ NO, SO DON'T INITIATE READ-AHEAD
                751:          ;JSR    INCIOCB:CURLSN COMPUTE NEXT SECTOR ADDRESS
D645 BDD7F0     752:          JSR     INCIOCB:CURLSN
D648 A602       753:          LDAA    IOCB:CURLSN,X WILL READAHEAD LSN BE LEGAL ?
D64A 36         754:          PSHA                (I.E., IS CURRENT LSN + 1 < NLSN ?)
                755:          ;LDD    IOCB:CURLSN+1,X COPY CURRENT LSN TO (TOS,A,B)
D64B E604       756:          LDAB    (IOCB:CURLSN+1)+1,X
D64D A603       757:          LDAA    IOCB:CURLSN+1,X
                758:          ;LDX    IOCB:DCB,X  SUBTRACT DSKINFO:NLSN
D64F EE00       759:          LDX     IOCB:DCB,X
                760:          ;SUBD   DSKINFO:NLSN+1,X (I,E., IS CURRENT LSN < NLSN ?)
D651 E01D       761:          SUBB    (DSKINFO:NLSN+1)+1,X
D653 A21C       762:          SBCA    DSKINFO:NLSN+1,X
D655 32         763:          PULA
D656 A21B       764:          SBCA    DSKINFO:NLSN,X
D658 2408       765:          BCC     LOCDSKD4    B/ NO, DON'T DO READ-AHEAD
                766:          ;LDX    IOCBPOINTER SIGH!
D65A FEAE09     767:          LDX     IOCBPOINTER
                768:          ;JSR    READSECTOR  INITIATE ITS FETCH
D65D BDD8F3     769:          JSR     READSECTOR
D660 2506       770:          BCS     LOCDSKD3    B/ AN I/O ERROR ??




ASM/6800 1.4A0: D660 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 392; Form 19    DISK FILE DRIVERS -- SUBROUTINES
SDOS6800.ASM
  D662          771: LOCDSKD4 EQU     *
                772:          ;JSR    DECIOCB:CURLSN PUT LSN BACK LIKE IT WAS
D662 BDD857     773:          JSR     DECIOCB:CURLSN
  D665          774: LOCATECURBYTEDJ  EQU         *
                775:          ;JMP    LOCATECURBYTED GO COMPUTE USEDCOUNT AND TRANSFERCOUNT
D665 7ED446     776:          JMP     LOCATECURBYTED
                777: 
  D668          778: LOCDSKD3 EQU     *
                779:          ;JMP    READAHEADCERRED GO BACK UP CURLSN AND ANNOUNCE ERROR
D668 7ED86E     780:          JMP     READAHEADCERRED




ASM/6800 1.4A0: D668 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 393; Form 20    DISK FILE DRIVERS -- SUBROUTINES
SDOS6800.ASM
                  2: *        LOCATERDCN -- READS IN HEADER SECTOR CONTAINING LCN FOR IOCB:RDCN
                  3: *                OKRET: RETURNS (X) POINTING TO DESIRED LCN IN HEADER SECTOR
                  4: *                ERRET: DISK I/O ERROR OCCURRED
                  5: *
  D66B            6: LOCATERDCN       EQU         *
                  7:          ;LDX    IOCBPOINTER GRAB RDCN
D66B FEAE09       8:          LDX     IOCBPOINTER
                  9:          ;LDD    IOCB:RDCN,X
D66E E61C        10:          LDAB    (IOCB:RDCN)+1,X
D670 A61B        11:          LDAA    IOCB:RDCN,X
                 12:          ;JSR    COMPUTERHSN GET RELATIVE HEADER SECTOR NUMBER DESIRED
D672 BDD75D      13:          JSR     COMPUTERHSN
                 14:          ;CMPB   IOCB:HRSN,X SAME HEADER SECTOR AS LAST TIME ?
D675 E121        15:          CMPB    IOCB:HRSN,X
D677 2604        16:          BNE     LOCATERDCN0 B/ NO, MUST READ HEADER SECTOR
D679 A61F        17:          LDAA    IOCB:HRDSI,X IS THE HEADER SECTOR FROM LAST TIME STILL AROUND ?
D67B 2619        18:          BNE     LOCATERDCN2 B/ YES, DON'T BOTHER READING IT IN!
  D67D           19: LOCATERDCN0      ; MUST READ IN HEADER SECTOR
                 20:          ;CLR    IOCB:HRDSI,X MARK CURRENT HEADER SECTOR AS "WRONG ONE!"
D67D 6F1F        21:          CLR     IOCB:HRDSI,X
                 22:          ;CLR    IOCB:HRDSI+1,X (IN CASE WE GET AN ERROR)
D67F 6F20        23:          CLR     IOCB:HRDSI+1,X
D681 E721        24:          STAB    IOCB:HRSN,X SAVE SO WE CAN COMPUTE DESIRED LSN
                 25:          ;LDX    IOCB:FCB,X  IS HEADER INITIALIZED FAR ENOUGH ?
D683 EE07        26:          LDX     IOCB:FCB,X
                 27:          ;CMPB   FCB:HCSIC,X ... ?
D685 E10E        28:          CMPB    FCB:HCSIC,X
D687 2430        29:          BCC     LOCATERDCN3 B/ NO, INVALID RDCN
                 30:          ;JSR    GENHLSNPLUSHRSN COMPUTE DESIRED LSN
D689 BDD7C5      31:          JSR     GENHLSNPLUSHRSN
                 32:          ;JSR    READSECTOR  READ SECTOR CONTAINING PREVIOUS LCN
D68C BDD8F3      33:          JSR     READSECTOR
                 34:          ;LDX    IOCBPOINTER
D68F FEAE09      35:          LDX     IOCBPOINTER
                 36:          ;STD    IOCB:HRDSI,X SAVE HEADER SECTOR POINTER
D692 E720        37:          STAB    (IOCB:HRDSI)+1,X
D694 A71F        38:          STAA    IOCB:HRDSI,X
  D696           39: LOCATERDCN2      ; HEADER SECTOR IS (BEING) READ IN
                 40:          ;LDD    IOCB:RDCN,X GET IOCB:RDCN AGAIN
D696 E61C        41:          LDAB    (IOCB:RDCN)+1,X




ASM/6800 1.4A0: D698 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 394; Form 20    DISK FILE DRIVERS -- SUBROUTINES
SDOS6800.ASM
D698 A61B        42:          LDAA    IOCB:RDCN,X
                 43:          ;ASLD               CONVERT TO A BYTE DISPLACEMENT INTO HEADER CLUSTER SECTOR
D69A 58          44:          ASLB
D69B 49          45:          ROLA
                 46:          ;LDX    DCBPOINTER  MASK TO GET DISPLACEMENT...
D69C DE06        47:          LDX     DCBPOINTER
D69E A419        48:          ANDA    DSKINFO:NBPSM1,X INTO HEADER SECTOR OF PREVIOUS RDCN
D6A0 E41A        49:          ANDB    DSKINFO:NBPSM1+1,X
                 50:          ;LDX    IOCBPOINTER ADD SECTOR BUFFER ADDRESS...
D6A2 FEAE09      51:          LDX     IOCBPOINTER
                 52:          ;LDX    IOCB:HRDSI,X (OF HEADER SECTOR)
D6A5 EE1F        53:          LDX     IOCB:HRDSI,X
                 54:          ;ADDD   RDSI:SECTORBASE,X TO GET POINTER TO PREVIOUS LOGICAL CLUSTER NUMBER
D6A7 EB06        55:          ADDB    (RDSI:SECTORBASE)+1,X
D6A9 A905        56:          ADCA    RDSI:SECTORBASE,X
                 57:          ;STD    LOCATERDCNX SAVE THE POINTER
D6AB F7AF1A      58:          STAB    LOCATERDCNX+1
D6AE B7AF19      59:          STAA    LOCATERDCNX
                 60:          ;JSR    WAITSECTOR  WAIT FOR HEADER SECTOR TO ARRIVE
D6B1 BDDA9F      61:          JSR     WAITSECTOR
                 62:          ;LDX    LOCATERDCNX GET POINTER TO PREVIOUS LOGICAL CLUSTER NUMBER
D6B4 FEAF19      63:          LDX     LOCATERDCNX
D6B7 0C39        64:          OKRTS
                 65: 
  D6B9           66: LOCATERDCN3      ; INVALID RDCN ENCOUNTERED
                 67:          ;LDX    DCBPOINTER  IS IT EVER POSSIBLE FOR THIS RDCN TO BE VALID ?
D6B9 DE06        68:          LDX     DCBPOINTER
                 69:          ;CMPB   DSKINFO:NSPC,X (I.E., WILL RDCN BE FOUND SOMEWHERE IN HEADER CLUSTER?
D6BB E111        70:          CMPB    DSKINFO:NSPC,X
D6BD 2505        71:          BCS     ERRHCSICTOOSMALL B/ YES, INVALID BECAUSE OF HCSIC
  D6BF           72: ERRCLUSTERSIZELIMITSFILE     EQU *
                 73:          ;JSR    ERRET
D6BF BDB1F6      74:          JSR     ERRET
D6C2 041C        75:          FDB     ERR:CLUSTERSIZELIMITSFILE
                 76: 
  D6C4           77: ERRHCSICTOOSMALL EQU         *
                 78:          ;JSR    ERRET
D6C4 BDB1F6      79:          JSR     ERRET
D6C7 0401        80:          FDB     ERR:HCSICTOOSMALL




ASM/6800 1.4A0: D6C7 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 395; Form 20    DISK FILE DRIVERS -- SUBROUTINES
SDOS6800.ASM
                 82: *
                 83: *        COMPUTENEXTBYTE -- GENERATE VALUE FOR IOCB:NEXTBYTE
                 84: *                = SECTORBASE(RDSIPOINTER)+(IOCB:CURBYTE MOD DSKINFO:NBPS)
                 85: *                SETS IOCB:BYTECOUNT = NBPS - (IOCB:CURBYTE MOD DSKINFO:NBPS)
                 86: *                (X) = IOCBPOINTER ON EXIT
                 87: *
  D6C9           88: COMPUTENEXTBYTE  EQU         *
                 89:          ;LDX    DCBPOINTER  GET MASK TO COMPUTE "MOD NBPS"
D6C9 DE06        90:          LDX     DCBPOINTER
                 91:          ;LDD    DSKINFO:NBPSM1,X
D6CB E61A        92:          LDAB    (DSKINFO:NBPSM1)+1,X
D6CD A619        93:          LDAA    DSKINFO:NBPSM1,X
                 94:          ;LDX    IOCBPOINTER
D6CF FEAE09      95:          LDX     IOCBPOINTER
D6D2 A40F        96:          ANDA    IOCB:CURBYTE+2,X
D6D4 E410        97:          ANDB    IOCB:CURBYTE+3,X (A,B) = IOCB:CURBYTE MOD DSKINFO:NBPS
                 98:          ;STD    IOCB:BYTECOUNT,X WE'LL NEED THIS AGAIN SOON
D6D6 E717        99:          STAB    (IOCB:BYTECOUNT)+1,X
D6D8 A716       100:          STAA    IOCB:BYTECOUNT,X
                101:          ;LDX    IOCB:DRDSI,X
D6DA EE12       102:          LDX     IOCB:DRDSI,X
                103:          ;ADDD   RDSI:SECTORBASE,X
D6DC EB06       104:          ADDB    (RDSI:SECTORBASE)+1,X
D6DE A905       105:          ADCA    RDSI:SECTORBASE,X
                106:          ;LDX    IOCBPOINTER SAVE NEXTBYTE IN IOCB
D6E0 FEAE09     107:          LDX     IOCBPOINTER
                108:          ;STD    IOCB:NEXTBYTE,X
D6E3 E715       109:          STAB    (IOCB:NEXTBYTE)+1,X
D6E5 A714       110:          STAA    IOCB:NEXTBYTE,X
                111:          ;LDX    DCBPOINTER  NOW COMPUTE NBPS - DISPLACMENT INTO SECTOR
D6E7 DE06       112:          LDX     DCBPOINTER
                113:          ;LDD    DSKINFO:NBPS,X AND SAVE AS BYTECOUNT
D6E9 E60A       114:          LDAB    (DSKINFO:NBPS)+1,X
D6EB A609       115:          LDAA    DSKINFO:NBPS,X
                116:          ;LDX    IOCBPOINTER
D6ED FEAE09     117:          LDX     IOCBPOINTER
                118:          ;SUBD   IOCB:BYTECOUNT,X
D6F0 E017       119:          SUBB    (IOCB:BYTECOUNT)+1,X
D6F2 A216       120:          SBCA    IOCB:BYTECOUNT,X
                121:          ;STD    IOCB:BYTECOUNT,X




ASM/6800 1.4A0: D6F4 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 396; Form 20    DISK FILE DRIVERS -- SUBROUTINES
SDOS6800.ASM
D6F4 E717       122:          STAB    (IOCB:BYTECOUNT)+1,X
D6F6 A716       123:          STAA    IOCB:BYTECOUNT,X
D6F8 39         124:          RTS




ASM/6800 1.4A0: D6F8 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 397; Form 20    DISK FILE DRIVERS -- SUBROUTINES
SDOS6800.ASM
                126: *
                127: *        COMPUTERDCNF -- DIVIDES FCB:FILESIZE BY DSKINFO:NBPC
                128: *                EXITS EXACTLY THE SAME AS COMPUTERDCN
                129: *
  D6F9          130: COMPUTERDCNF ; DIVIDE FCB:FILESIZE BY DSKINFO:NBPC
                131:          ;LDX    FCBPOINTER  COPY FCB:FILESIZE TO (A,B,X)
D6F9 FEAEA6     132:          LDX     FCBPOINTER
                133:          ;LDD    FCB:FILESIZE,X
D6FC E612       134:          LDAB    (FCB:FILESIZE)+1,X
D6FE A611       135:          LDAA    FCB:FILESIZE,X
                136:          ;LDX    FCB:FILESIZE+2,X
D700 EE13       137:          LDX     FCB:FILESIZE+2,X
D702 2009       138:          BRA     COMPUTERDCNS GO COMPUTE RELATIVE DATA CLUSTER NUMBER
                139: *
                140: *        COMPUTERDCN -- DIVIDES IOCB:CURBYTE BY NUMBER OF BYTES PER CLUSTER
                141: *                RETURN RELATIVE DATA CLUSTER NUMBER (QUOTIENT) IN (A,B)
                142: *                DEFINITION: 1 --> FIRST DATA CLUSTER
                143: *                TAKES ERRET IF QUOTIENT >= DSKINFO:NBPC/2
                144: *                LEAVES REMAINDER IN IOCB:RBN
                145: *                RETURNS (X)=IOCBPOINTER
                146: *
  D704          147: COMPUTERDCN      EQU         *
                148:          ;LDX    IOCBPOINTER COPY IOCB:CURBYTE TO (A,B,X)
D704 FEAE09     149:          LDX     IOCBPOINTER
                150:          ;LDD    IOCB:CURBYTE,X
D707 E60E       151:          LDAB    (IOCB:CURBYTE)+1,X
D709 A60D       152:          LDAA    IOCB:CURBYTE,X
                153:          ;LDX    IOCB:CURBYTE+2,X
D70B EE0F       154:          LDX     IOCB:CURBYTE+2,X
  D70D          155: COMPUTERDCNS     ; ENTRY POINT IF DIVIDEND IN (A,B,X)
D70D DF02       156:          STX     TEMP.DIVIDEND SAVE LOWER 16 BITS OF DIVIDEND
D70F 36         157:          PSHA                SAVE (A) SO WE CAN SET UP NUMBER OF ITERATIONS
                158:          ;LDX    DCBPOINTER  GET DIVISOR
D710 DE06       159:          LDX     DCBPOINTER
                160: *        ASSERT: NBPC*2^16 > # BYTES IN LARGEST POSSIBLE FILE...
                161: *        SINCE # BYTES/FILE <= (NBPC/2-1)*NBPC, AND NBPC < 2^16
                162: *        THIS MEANS 1ST QUOTIENT BIT WOULD ALWAYS BE ZERO!
                163: *        SO RATHER THAN GENERATE IT, WE SIMPLY SHIFT IN ZERO
D712 8610       164:          LDAA    #16         # QUOTIENT BITS TO GENERATE
D714 9704       165:          STAA    COUNT       # QUOTIENT BITS TO GENERATE




ASM/6800 1.4A0: D716 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 398; Form 20    DISK FILE DRIVERS -- SUBROUTINES
SDOS6800.ASM
D716 32         166:          PULA                GET UPPER 16 BITS OF DIVIDEND TO (D)
  D717          167: COMPUTERDCNL     ; GENERATE NEXT QUOTIENT BIT
D717 780003     168:          ASL     TEMP.DIVIDEND+1 SHIFT A BIT INTO (A,B) ...
D71A 790002     169:          ROL     TEMP.DIVIDEND FROM REST OF DIVDEND
                170:          ;ROLD
D71D 59         171:          ROLB
D71E 49         172:          ROLA
                173:          ;CMPD   DSKINFO:NBPC,X IS (A,B) ...
D71F A120       174:          CMPA    DSKINFO:NBPC,X
D721 2602       175:          BNE     MACRO:0028
D723 E121       176:          CMPB    (DSKINFO:NBPC)+1,X
  D725          177: MACRO:0028
D725 2504       178:          BCS     COMPUTERDCN0 B/ < DIVISOR, CARRY IS 1
                179:          ;SUBD   DSKINFO:NBPC,X QUOTIENT BIT IS ONE (CARRY IS 0)
D727 E021       180:          SUBB    (DSKINFO:NBPC)+1,X
D729 A220       181:          SBCA    DSKINFO:NBPC,X
  D72B          182: COMPUTERDCN0     ; CARRY = COMPLEMENT QUOTIENT BIT
D72B 790001     183:          ROL     TEMP.QUOTIENT+1 MOVE QUOTIENT BIT INTO QUOTIENT
D72E 790000     184:          ROL     TEMP.QUOTIENT
                185:          ;DEC    COUNT       DOWN COUNT # QUOTIENT BITS TO GENERATE
D731 7A0004     186:          DEC     COUNT
D734 26E1       187:          BNE     COMPUTERDCNL LOOP IF MUST GEN MORE
                188:          ;LDX    IOCBPOINTER OOOPS! DON'T FORGET THIS!
D736 FEAE09     189:          LDX     IOCBPOINTER
                190:          ;STD    IOCB:RBN,X  STORE REMAINDER FOR LATER USE
D739 E71E       191:          STAB    (IOCB:RBN)+1,X
D73B A71D       192:          STAA    IOCB:RBN,X
                193:          ;LDD    TEMP.QUOTIENT GET QUOTIENT INTO (A,B)
D73D D601       194:          LDAB    TEMP.QUOTIENT+1
D73F 9600       195:          LDAA    TEMP.QUOTIENT
                196:          ;NEGD               CONVERT QUOTIENT TO TRUE FORM
D741 40         197:          NEGA
D742 50         198:          NEGB
D743 8200       199:          SBCA    #0
                200: *                            AND ADD 1 SINCE ZERO MEANS "HEADER CLUSTER"
D745 2513       201:          BCS     COMPUTERDCNLIMIT IS QUOTIENT+1 >= DSKINFO:NBPC/2 ?
                202:          ;ASLD               NOT > 65535; (DOUBLE QUOTIENT+1)
D747 58         203:          ASLB
D748 49         204:          ROLA
                205:          ;LDX    DCBPOINTER  I.E., IS ( QUOTIENT+1 )*2 >= DSKINFO:NBPC ?




ASM/6800 1.4A0: D749 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 399; Form 20    DISK FILE DRIVERS -- SUBROUTINES
SDOS6800.ASM
D749 DE06       206:          LDX     DCBPOINTER
                207:          ;CMPD   DSKINFO:NBPC,X ...?
D74B A120       208:          CMPA    DSKINFO:NBPC,X
D74D 2602       209:          BNE     MACRO:0029
D74F E121       210:          CMPB    (DSKINFO:NBPC)+1,X
  D751          211: MACRO:0029
D751 2407       212:          BCC     COMPUTERDCNLIMIT B/ YES
                213:          ;LSRD               HALVE DOUBLED QUOTIENT+1 TO GET QUOTIENT+1 BACK
D753 44         214:          LSRA
D754 56         215:          RORB
                216:          ;LDX    IOCBPOINTER
D755 FEAE09     217:          LDX     IOCBPOINTER
D758 0C39       218:          OKRTS
                219: 
  D75A          220: COMPUTERDCNLIMIT EQU         *
                221:          ;JMP    ERRCLUSTERSIZELIMITSFILE
D75A 7ED6BF     222:          JMP     ERRCLUSTERSIZELIMITSFILE




ASM/6800 1.4A0: D75A SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 400; Form 20    DISK FILE DRIVERS -- SUBROUTINES
SDOS6800.ASM
                224: *
                225: *        COMPUTERHSN -- COMPUTE RELATIVE HEADER SECTOR NUMBER
                226: *        DIVIDES (A,B) BY (NBPS/2)
                227: *        RETURNS QUOTIENT IN (B)
                228: *        RETURNS (X)=IOCBPOINTER
                229: 
  D75D          230: COMPUTERHSN      EQU         *
D75D 36         231:          PSHA
                232:          ;LDX    DCBPOINTER
D75E DE06       233:          LDX     DCBPOINTER
D760 A618       234:          LDAA    DSKINFO:LOG2NBPS,X GET NBPS POWER OF TWO
D762 4A         235:          DECA                DIVIDE BY TWO
  D763          236: COMPUTERHSN0     EQU         *
D763 9700       237:          STAA    TEMPA       SAVE # TIMES TO RIGHT SHIFT
D765 32         238:          PULA
  D766          239: COMPUTERHSN1     EQU         *
                240:          ;LSRD               DIVIDE BY 2^LOG2(NBPS)
D766 44         241:          LSRA
D767 56         242:          RORB
                243:          ;DEC    TEMPA
D768 7A0000     244:          DEC     TEMPA
D76B 26F9       245:          BNE     COMPUTERHSN1
                246:          ;LDX    IOCBPOINTER
D76D FEAE09     247:          LDX     IOCBPOINTER
D770 39         248:          RTS                 EXIT WITH QUOTIENT
                249: *
                250: *        COMPUTERSN  -- COMPUTE SECTOR NUMBER WITHIN CLUSTER
                251: *                DIVIDES (A,B) BY NBPS
                252: *                RETURNS QUOTIENT IN (B)
                253: *                RETURNS (X)=IOCBPOINTER
                254: *
  D771          255: COMPUTERSN       EQU         *
D771 36         256:          PSHA
                257:          ;LDX    DCBPOINTER
D772 DE06       258:          LDX     DCBPOINTER
D774 A618       259:          LDAA    DSKINFO:LOG2NBPS,X
D776 20EB       260:          BRA     COMPUTERHSN0




ASM/6800 1.4A0: D776 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 401; Form 20    DISK FILE DRIVERS -- SUBROUTINES
SDOS6800.ASM
                262: *
                263: *        CONVERTLCNTOLSN  -- CONVERTS LCN IN (A,B) TO CORRESPONDING LSN
                264: *                ADDS IOCB:DRSN TO RESULT
                265: *                FINAL LSN PLACED IN IOCB:CURLSN
                266: *                DESTROYS SYSSECTORDB
                267: *                RETURNS (X)=IOCBPOINTER
                268: *
  D778          269: CONVERTLCNTOLSN  EQU         *
D778 8D16       270:          BSR     CONVERTLCNTO1ST FIND LSN OF FIRST SECTOR IN CLUSTER
                271:          ;LDX    IOCBPOINTER FOR CONVENIENCE
D77A FEAE09     272:          LDX     IOCBPOINTER
D77D EB1A       273:          ADDB    IOCB:DRSN,X ADD RELATIVE SECTOR # ...
D77F 8900       274:          ADCA    #0          TO RESULT
D781 2403       275:          BCC     CONVERTLCN2
                276:          ;INC    SYSSECTORDB+SECTORDB:LSN
D783 7CAF14     277:          INC     SYSSECTORDB+SECTORDB:LSN
  D786          278: CONVERTLCN2      EQU         *
                279:          ;STD    IOCB:CURLSN+1,X UPDATE IOCB
D786 E704       280:          STAB    (IOCB:CURLSN+1)+1,X
D788 A703       281:          STAA    IOCB:CURLSN+1,X
D78A B6AF14     282:          LDAA    SYSSECTORDB+SECTORDB:LSN COPY MSB OF DESIRED LSN TO IOCB
D78D A702       283:          STAA    IOCB:CURLSN,X
D78F 39         284:          RTS                 AND SPLIT




ASM/6800 1.4A0: D78F SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 402; Form 20    DISK FILE DRIVERS -- SUBROUTINES
SDOS6800.ASM
                286: *
                287: *        CONVERTLCNTO1ST -- CONVERTS LCN IN (A,B) TO 1ST LSN IN CLUSTER
                288: *                RESULT PLACED IN SYSSECTORDB+SECTORDB:LSN
                289: *                LOWER 16 BITS RETURNED IN (A,B)
                290: *                (X) POINTS TO SYSSECTORDB, ALL SET TO READ ON EXIT
                291: *
  D790          292: CONVERTLCNTO1ST  EQU         *
                293:          ;STD    TEMP.MPCND  SAVE THE MULTIPLICAND
D790 D701       294:          STAB    TEMP.MPCND+1
D792 9700       295:          STAA    TEMP.MPCND
                296:          ;LDX    DCBPOINTER  GET MULTIPLIER FROM DISKINFO
D794 DE06       297:          LDX     DCBPOINTER
D796 FFAF12     298:          STX     SYSSECTORDB+SECTORDB:DISKINFO SET UP TO READ THIS SECTOR
D799 E611       299:          LDAB    DSKINFO:NSPC,X (I.E., THE CLUSTER SIZE)
D79B D705       300:          STAB    TEMP.MPR    SAVE THE MULTIPLIER
D79D 8608       301:          LDAA    #8          # MULTIPLIER BITS TO PROCESS
D79F 9704       302:          STAA    COUNT
D7A1 4F         303:          CLRA                ZERO THE PARTIAL PRODUCT
D7A2 5F         304:          CLRB                ACCUMULATE PRODUCT IN SYSSECTOR+SECTORDB:LSN
  D7A3          305: CONVERTLCNL      EQU         *
                306:          ;ASLD
D7A3 58         307:          ASLB
D7A4 49         308:          ROLA
                309: ************** USE MUL INSTRUCTION IN HERE?????
D7A5 79AF14     310:          ROL     SYSSECTORDB+SECTORDB:LSN NO OVERFLOW POSSIBLE
D7A8 780005     311:          ASL     TEMP.MPR    CHECK NEXT MULTIPLIER BIT
D7AB 2409       312:          BCC     CONVERTLCN1 B/ =0, DON'T ADD MULTIPLICAND
                313:          ;ADDD   TEMP.MPCND  =1, ADD MULTIPLICAND TO PARTIAL PRODUCT
D7AD DB01       314:          ADDB    TEMP.MPCND+1
D7AF 9900       315:          ADCA    TEMP.MPCND
D7B1 2403       316:          BCC     CONVERTLCN1 (PROPOGATE CARRY TO 3RD BYTE)
                317:          ;INC    SYSSECTORDB+SECTORDB:LSN
D7B3 7CAF14     318:          INC     SYSSECTORDB+SECTORDB:LSN
  D7B6          319: CONVERTLCN1      EQU         *
                320:          ;DEC    COUNT       DOWN COUNT UNPROCESSED MULTIPLIER BITS
D7B6 7A0004     321:          DEC     COUNT
D7B9 26E8       322:          BNE     CONVERTLCNL B/ MORE TO PROCESS
                323:          ;STD    SYSSECTORDB+SECTORDB:LSN+1 SAVE LOWER 16 BITS OF LSN
D7BB F7AF16     324:          STAB    SYSSECTORDB+SECTORDB:LSN+1+1
D7BE B7AF15     325:          STAA    SYSSECTORDB+SECTORDB:LSN+1




ASM/6800 1.4A0: D7BE SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 403; Form 20    DISK FILE DRIVERS -- SUBROUTINES
SDOS6800.ASM
                326:          ;LDX    #SYSSECTORDB AS PROMISED
D7C1 CEAF12     327:          LDX     #SYSSECTORDB
D7C4 39         328:          RTS




ASM/6800 1.4A0: D7C4 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 404; Form 20    DISK FILE DRIVERS -- SUBROUTINES
SDOS6800.ASM
                330: *
                331: *        GENHLSNPLUSHRSN -- ADD FCB:HLSN TO IOCB:HRSN
                332: *                AND COPY SUM TO IOCB:CURLSN
                333: *                RETURNS (X) = IOCBPOINTER
                334: *
  D7C5          335: GENHLSNPLUSHRSN  EQU         *
                336:          ;LDX    FCBPOINTER  GET LSN OF 1ST SECTOR...
D7C5 FEAEA6     337:          LDX     FCBPOINTER
D7C8 A607       338:          LDAA    FCB:HLSN,X  OF HEADER CLUSTER...
D7CA 36         339:          PSHA                TO (TOS),(A,B)
                340:          ;LDD    FCB:HLSN+1,X
D7CB E609       341:          LDAB    (FCB:HLSN+1)+1,X
D7CD A608       342:          LDAA    FCB:HLSN+1,X
                343:          ;LDX    IOCBPOINTER ADD HRSN...
D7CF FEAE09     344:          LDX     IOCBPOINTER
D7D2 EB21       345:          ADDB    IOCB:HRSN,X
D7D4 8900       346:          ADCA    #0          PROPOGATE CARRY
                347:          ;STD    IOCB:CURLSN+1,X AND COPY TO IOCB:CURLSN
D7D6 E704       348:          STAB    (IOCB:CURLSN+1)+1,X
D7D8 A703       349:          STAA    IOCB:CURLSN+1,X
D7DA 32         350:          PULA
D7DB 8900       351:          ADCA    #0
D7DD A702       352:          STAA    IOCB:CURLSN,X
                353:          ;CLR    IOCB:LOCATEDF,X FORCE "LOCATECURBYTE" AGAIN LATER
D7DF 6F11       354:          CLR     IOCB:LOCATEDF,X
D7E1 39         355:          RTS




ASM/6800 1.4A0: D7E1 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 405; Form 21    DISK FILE DRIVERS -- DISK I/O
SDOS6800.ASM
                  2: *        READBEHIND -- INITIATES PRE-FETCH OF PREVIOUS LSN IN FILE
                  3: *                (X) POINTS TO IOCB
                  4: *                INITIATES READ FOR IOCB:CURLSN-1
                  5: *                IF IOCB:CURLSN IS OUTSIDE OF IOCB:CURLCN,
                  6: *                DOES NOTHING AT ALL
                  7: *                DCBPOINTER SELECTS PROPER DISK INFO TABLE
                  8: 
  D7E2            9: READBEHIND       EQU         *
                 10:          ;LDX    IOCBPOINTER
D7E2 FEAE09      11:          LDX     IOCBPOINTER
D7E5 A61A        12:          LDAA    IOCB:DRSN,X AT 1ST SECTOR OF CLUSTER?
D7E7 2714        13:          BEQ     READBEHINDOKRTS B/ YES, NO READ-BEHIND TO DO!
D7E9 8D6C        14:          BSR     DECIOCB:CURLSN BACK UP LSN TO PREVIOUS LSN
                 15:          ;JSR    READSECTOR  GO INITIATE THE READ
D7EB BDD8F3      16:          JSR     READSECTOR
D7EE 250F        17:          BCS     READBEHINDERRED B/ I/O ERROR
                 18: *        BSR     INCIOCB:CURLSN PUT IOCB:LSN BACK LIKE IT WAS
                 19: *
                 20: *        INCIOCB:CURLSN -- INCREMENTS IOCB:CURLSN
                 21: *                NO IDIOT CHECKS
                 22: *
                 23: *
  D7F0           24: INCIOCB:CURLSN   EQU         *
                 25:          ;LDX    IOCBPOINTER
D7F0 FEAE09      26:          LDX     IOCBPOINTER
                 27:          ;INC    IOCB:CURLSN+2,X BUMP LSB
D7F3 6C04        28:          INC     IOCB:CURLSN+2,X
D7F5 2606        29:          BNE     INCIOCB:CURLSNX
                 30:          ;INC    IOCB:CURLSN+1,X PROPOGATE CARRY
D7F7 6C03        31:          INC     IOCB:CURLSN+1,X
D7F9 2602        32:          BNE     INCIOCB:CURLSNX
                 33:          ;INC    IOCB:CURLSN,X AND AGAIN
D7FB 6C02        34:          INC     IOCB:CURLSN,X
  D7FD           35: READBEHINDOKRTS  EQU         *
  D7FD           36: INCIOCB:CURLSNX  EQU         *
D7FD 0C39        37:          OKRTS
                 38: 
  D7FF           39: READBEHINDERRED  EQU         *
D7FF 8DEF        40:          BSR     INCIOCB:CURLSN RESTORE CURLSN TO ORIGINAL VALUE
                 41:          ;JMP    ERRORED




ASM/6800 1.4A0: D801 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 406; Form 21    DISK FILE DRIVERS -- DISK I/O
SDOS6800.ASM
D801 7EB209      42:          JMP     ERRORED




ASM/6800 1.4A0: D801 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 407; Form 21    DISK FILE DRIVERS -- DISK I/O
SDOS6800.ASM
                 44: *
                 45: *        READAHEAD -- INITIATES PRE-FETCH FOR NEXT LSN OF FILE
                 46: *                (INITIATES WRITE OF LAST SECTOR BUFFER ON LRU QUEUE IF NEEDED [WRITE-
                 47: *                INITIATES READ FOR IOCB:CURLSN+1 UNLESS THAT IS OUTSIDE OF IOCB:CURLS
                 48: *                OTHERWISE INITIATES READ FOR APPROPRIATE HEADER CLUSTER SECTOR
                 49: *                ASSUMES A LOCATECURBYTE HAS RECENTLY SET UP THE IOCB
                 50: *
  D804           51: READAHEAD        EQU         *
                 52: *        IF LAST SECTOR IN LRU QUEUE IS NOT BUSY,...
                 53: *        AND DISK IT COMES FROM IS NOT BUSY,...
                 54: *        AND LAST SECTOR IN LRU QUEUE IS MODIFIED,...
                 55: *        INITIATE A WRITE AND RESET THE MODIFIED FLAG; DON'T ISSUE A READ!!
                 56:          ;LDX    LASTSECTORREADQ+RDSI:BLINK GET POINTER TO LAST SECTOR RDSI
D804 FEAEF8      57:          LDX     LASTSECTORREADQ+RDSI:BLINK
D807 A60C        58:          LDAA    RDSI:STATE,X IS SECTOR IN I/O STATE ?
D809 AA0B        59:          ORAA    RDSI:MODIFIED,X OR IS IT MODIFIED ?
D80B 271E        60:          BEQ     READAHEAD0  B/ NEITHER, GO ISSUE A READ!
D80D A60C        61:          LDAA    RDSI:STATE,X IS THIS SECTOR BUSY?
D80F 26EC        62:          BNE     READBEHINDOKRTS B/ SECTOR IS IN I/O STATE, DON'T USE IT!
                 63: *        THIS IS WRITEAHEAD --> RDSI:MODIFIED IS SET!
                 64:          ;LDX    RDSI:DISKINFO,X GET DISK DCB ADDRESS (ASSERT: RDSK:DISKINFO <>0)
D811 EE00        65:          LDX     RDSI:DISKINFO,X
                 66:          ;LDX    DSKINFO:SECTORDB,X IS DISK FOR LAST SECTOR BUSY ?
D813 EE2B        67:          LDX     DSKINFO:SECTORDB,X
D815 26E6        68:          BNE     READBEHINDOKRTS B/ YES, DO NADA
                 69:          ;LDX    LASTSECTORREADQ+RDSI:BLINK GET POINTER TO LAST SECTOR RDSI AGAIN
D817 FEAEF8      70:          LDX     LASTSECTORREADQ+RDSI:BLINK
D81A FFAEA4      71:          STX     RDSIPOINTER IN CASE WE GET A WRITE ERROR
D81D 8602        72:          LDAA    #RDSISTATE:WRITING MARK SECTOR AS IN I/O STATE
D81F A70C        73:          STAA    RDSI:STATE,X
                 74:          ;CLR    RDSI:MODIFIED,X REMOVE THE MODIFIED FLAG
D821 6F0B        75:          CLR     RDSI:MODIFIED,X
                 76:          ;JSR    DISKWRITE   ISSUE THE WRITE REQUEST
D823 BDDB66      77:          JSR     DISKWRITE
D826 24D5        78:          BCC     READBEHINDOKRTS B/ NO ERRORS
                 79:          ;JMP    WAITSECTORERRED GOT WRITE ERROR, GO CLEAN UP THE MESS!
D828 7EDAB8      80:          JMP     WAITSECTORERRED
                 81: 
  D82B           82: READAHEAD0       ; TRY TO DO READ-AHEAD
D82B B6AF09      83:          LDAA    NRDSIS      SHOULD WE DO READ-AHEAD ?




ASM/6800 1.4A0: D82B SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 408; Form 21    DISK FILE DRIVERS -- DISK I/O
SDOS6800.ASM
                 84:          ;CMPA   #READAHEADRDSIMIN (ARE THERE ENOUGH BUFFERS ?)
D82E 8103        85:          CMPA    #READAHEADRDSIMIN
D830 2DCB        86:          BLT     READBEHINDOKRTS B/ NOPE, DON'T DO READ-AHEAD
                 87:          ;LDX    DCBPOINTER  IS THIS DISK DRIVE ALREADY BUSY ?
D832 DE06        88:          LDX     DCBPOINTER
                 89:          ;LDX    DSKINFO:SECTORDB,X (IF SO, DON'T MAKE US WAIT BY CAUSING MORE DISK I/
D834 EE2B        90:          LDX     DSKINFO:SECTORDB,X
D836 26C5        91:          BNE     READBEHINDOKRTS B/ YES, GIVE UP NOW!
                 92:          ;LDX    IOCBPOINTER
D838 FEAE09      93:          LDX     IOCBPOINTER
D83B A60B        94:          LDAA    IOCB:EOFFLAG,X AT EOF ?
D83D 26BE        95:          BNE     READBEHINDOKRTS B/ YES, NO POINT IN FETCHING FROM DISK!
D83F A61A        96:          LDAA    IOCB:DRSN,X GET RELATIVE SECTOR NUMBER OF :CURLSN
                 97:          ;LDX    IOCB:DCB,X  =LAST SECTOR IN CLUSTER?
D841 EE00        98:          LDX     IOCB:DCB,X
D843 A011        99:          SUBA    DSKINFO:NSPC,X (IOCN:RSN-DSKINFO:NSPC=-1)
D845 4C         100:          INCA
D846 272B       101:          BEQ     READAHEADH  B/ YES, SO READ AHEAD ON HEADER SECTOR INSTEAD
                102:          ;LDX    IOCBPOINTER IS THIS CLUSTER ALLOCATED ?
D848 FEAE09     103:          LDX     IOCBPOINTER
                104:          ;LDX    IOCB:CURLCN,X ...?
D84B EE18       105:          LDX     IOCB:CURLCN,X
D84D 08         106:          INX                  ...?
D84E 27AD       107:          BEQ     READBEHINDOKRTS B/ NO, DON'T DO A READ-AHEAD
D850 8D9E       108:          BSR     INCIOCB:CURLSN NO, COMPUTE NEXT LSN IN CLUSTER
                109:          ;JSR    READSECTOR  INITIATE PRE-FETCH
D852 BDD8F3     110:          JSR     READSECTOR
D855 2517       111:          BCS     READAHEADCERRED IF AN ERROR OCCURRED, REPORT IT!
                112: *        JSR     DECIOCB:CURLSN
                113: *        OKRTS
                114: *
                115: *        DECIOCB:CURLSN -- DECREMENTS IOCB:CURLSN
                116: *                NO IDIOT CHECKS
                117: *
  D857          118: DECIOCB:CURLSN   EQU         *
                119:          ;LDX    IOCBPOINTER
D857 FEAE09     120:          LDX     IOCBPOINTER
D85A A604       121:          LDAA    IOCB:CURLSN+2,X CHECK LEAST SIG BYTE
D85C 260C       122:          BNE     DECIOCB:CURLSN1 B/ NOT ZERO, NO BORROW
                123:          ;LDD    IOCB:CURLSN,X RATS, MUST PROPOGATE BORROW




ASM/6800 1.4A0: D85E SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 409; Form 21    DISK FILE DRIVERS -- DISK I/O
SDOS6800.ASM
D85E E603       124:          LDAB    (IOCB:CURLSN)+1,X
D860 A602       125:          LDAA    IOCB:CURLSN,X
                126:          ;SUBD   #1          SUBTRACT 1 FROM UPPER 16 BITS OF IOCB:CURLSN
D862 C001       127:          SUBB    #(1)&$FF
D864 8200       128:          SBCA    #(1)/256
                129:          ;STD    IOCB:CURLSN,X
D866 E703       130:          STAB    (IOCB:CURLSN)+1,X
D868 A702       131:          STAA    IOCB:CURLSN,X
  D86A          132: DECIOCB:CURLSN1  EQU         *
                133:          ;DEC    IOCB:CURLSN+2,X DECREMENT LSB OF LSN
D86A 6A04       134:          DEC     IOCB:CURLSN+2,X
D86C 0C39       135:          OKRTS
                136: 
  D86E          137: READAHEADCERRED  EQU         *
D86E 8DE7       138:          BSR     DECIOCB:CURLSN PUT CURLSN BACK LIKE IT WAS
                139:          ;JMP    ERRORED
D870 7EB209     140:          JMP     ERRORED




ASM/6800 1.4A0: D870 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 410; Form 21    DISK FILE DRIVERS -- DISK I/O
SDOS6800.ASM
  D873          142: READAHEADH       ; DO PREFETCH ON HEADER CLUSTER SECTOR
                143:          ;LDX    IOCBPOINTER WE CAN'T GET HERE UNLESS IOCB:RDCN IS VALID
D873 FEAE09     144:          LDX     IOCBPOINTER
                145:          ;LDD    IOCB:RDCN,X COMPUTE (IOCB:RDCN+1)*2
D876 E61C       146:          LDAB    (IOCB:RDCN)+1,X
D878 A61B       147:          LDAA    IOCB:RDCN,X
                148:          ;ADDD   #1
D87A CB01       149:          ADDB    #(1)&$FF
D87C 8900       150:          ADCA    #(1)/256
                151:          ;ASLD               ...*2
D87E 58         152:          ASLB
D87F 49         153:          ROLA
                154:          ;LDX    IOCB:DCB,X  = DSKINFO:NBPC ?
D880 EE00       155:          LDX     IOCB:DCB,X
                156:          ;CMPD   DSKINFO:NBPC,X ... ?
D882 A120       157:          CMPA    DSKINFO:NBPC,X
D884 2602       158:          BNE     MACRO:002A
D886 E121       159:          CMPB    (DSKINFO:NBPC)+1,X
  D888          160: MACRO:002A
D888 2732       161:          BEQ     READAHEADOKRTS B/ YES, WOULD RUN OFF END OF HEADER CLUSTER
D88A A419       162:          ANDA    DSKINFO:NBPSM1,X TAKE MOD NBPS
D88C E41A       163:          ANDB    DSKINFO:NBPSM1+1,X BY MASKING AGAINST (2^N)-1
D88E 2603       164:          BNE     READAHEAD1  B/ HAVEN'T RUN OFF END ...
D890 4D         165:          TSTA                OF CURRENT HEADER SECTOR
D891 272B       166:          BEQ     READAHEADNX B/ DID RUN OFF END OF HEADER SECTOR
  D893          167: READAHEAD1       EQU         *
                168:          ;LDX    IOCBPOINTER
D893 FEAE09     169:          LDX     IOCBPOINTER
                170:          ;LDX    IOCB:HRDSI,X DESIRED HEADER SECTOR IN MEMORY?
D896 EE1F       171:          LDX     IOCB:HRDSI,X
D898 2734       172:          BEQ     READAHEADHA B/ NO, MUST READ IN
                173:          ;ADDD   RDSI:SECTORBASE,X YES, FETCH DATA CLUSTER NUMBER
D89A EB06       174:          ADDB    (RDSI:SECTORBASE)+1,X
D89C A905       175:          ADCA    RDSI:SECTORBASE,X
                176: *        COMPUTE POINTER TO DATA CLUSTER NUMBER
                177:          ;PSHD               COPY POINTER FROM (A,B) TO (X)
D89E 37         178:          PSHB
D89F 36         179:          PSHA
                180:          ;JSR    REQUERDSI   MOVE HEADER SECTOR TO TOP OF LRU QUEUE...
D8A0 BDDA5B     181:          JSR     REQUERDSI




ASM/6800 1.4A0: D8A0 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 411; Form 21    DISK FILE DRIVERS -- DISK I/O
SDOS6800.ASM
                182: *        BECAUSE IT WORKS WELL
                183: *        IN SPITE OF THE FACT THAT WE DON'T KNOW IF USER WANTS HEADER SECTOR AGAIN!
                184:          ;PULX
D8A3 30         185:          TSX
D8A4 EE00       186:          LDX     0,X
D8A6 31         187:          INS
D8A7 31         188:          INS
                189:          ;LDD    HEADER:LCN,X GET LCN OF NEXT DATA CLUSTER
D8A8 E601       190:          LDAB    (HEADER:LCN)+1,X
D8AA A600       191:          LDAA    HEADER:LCN,X
                192:          ;LDX    HEADER:LCN,X UNALLOCATED DATA CLUSTER?
D8AC EE00       193:          LDX     HEADER:LCN,X
D8AE 08         194:          INX                 (I.E., IS LCN = DUMMYLCN ?)
D8AF 270B       195:          BEQ     READAHEADOKRTS B/ YES, NO DATA TO READ AHEAD ON
                196:          ;JSR    CONVERTLCNTO1ST FIND 1ST LSN IN NEXT DATA CLUSTER
D8B1 BDD790     197:          JSR     CONVERTLCNTO1ST
D8B4 2506       198:          BCS     READAHEADOKRTS IF OFF END OF WORLD, IGNORE IT!
  D8B6          199: READAHEADS       EQU         *
                200:          ;LDX    #SYSSECTORDB
D8B6 CEAF12     201:          LDX     #SYSSECTORDB
                202:          ;JSR    READSECTOR  READ IN THE DATA SECTOR
D8B9 BDD8F3     203:          JSR     READSECTOR
  D8BC          204: READAHEADOKRTS   EQU         *
D8BC 0C39       205:          OKRTS
                206: 
  D8BE          207: READAHEADNX      ; MUST READ NEXT HEADER SECTOR
                208:          ;LDX    IOCBPOINTER
D8BE FEAE09     209:          LDX     IOCBPOINTER
D8C1 A621       210:          LDAA    IOCB:HRSN,X
D8C3 4C         211:          INCA
D8C4 27F6       212:          BEQ     READAHEADOKRTS B/ HRSN+1=256, INVALID
                213:          ;LDX    IOCB:FCB,X
D8C6 EE07       214:          LDX     IOCB:FCB,X
                215:          ;CMPA   FCB:HCSIC,X HRSN+1>=HCSIC?
D8C8 A10E       216:          CMPA    FCB:HCSIC,X
D8CA 2307       217:          BLS     READAHEADH1 NO, GO ISSUE THE READ
D8CC 20EE       218:          BRA     READAHEADOKRTS WOULD FETCH UNINITZD HEADER SECTOR
                219: 
  D8CE          220: READAHEADHA      ; MUST RE-READ CURRENT HEADER SECTOR
                221:          ;LDX    IOCBPOINTER




ASM/6800 1.4A0: D8CE SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 412; Form 21    DISK FILE DRIVERS -- DISK I/O
SDOS6800.ASM
D8CE FEAE09     222:          LDX     IOCBPOINTER
D8D1 A621       223:          LDAA    IOCB:HRSN,X
  D8D3          224: READAHEADH1      ; READ HEADER SECTOR; RSN IS IN (A)
                225:          ;LDX    FCBPOINTER  COMPUTE FCB:LSN+(A)
D8D3 FEAEA6     226:          LDX     FCBPOINTER
D8D6 AB09       227:          ADDA    FCB:HLSN+2,X
D8D8 B7AF16     228:          STAA    SYSSECTORDB+SECTORDB:LSN+2
D8DB A608       229:          LDAA    FCB:HLSN+1,X
D8DD 8900       230:          ADCA    #0
D8DF B7AF15     231:          STAA    SYSSECTORDB+SECTORDB:LSN+1
D8E2 A607       232:          LDAA    FCB:HLSN,X
D8E4 8900       233:          ADCA    #0
D8E6 B7AF14     234:          STAA    SYSSECTORDB+SECTORDB:LSN AND COPY INTO SYSSECTOR
                235:          ;LDX    DCBPOINTER  SET UP TO READ FROM CURRENT DISK
D8E9 DE06       236:          LDX     DCBPOINTER
D8EB FFAF12     237:          STX     SYSSECTORDB+SECTORDB:DISKINFO
D8EE 20C6       238:          BRA     READAHEADS  GO INITIATE THE SECTOR READ
                239: *        DON'T SAVE RDSIPOINTER RETURNED IN IOCB:HRDSI...
                240: *        BECUZ IT MIGHT BE FOR "NEXT" HEADER SECTOR!




ASM/6800 1.4A0: D8EE SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 413; Form 21    DISK FILE DRIVERS -- DISK I/O
SDOS6800.ASM
                242: *
                243: *        INVENTSECTOR -- ALLOCATES A SECTOR BUFFER WITHOUT READING SECTOR
                244: *                LIKE READSECTOR, BUT DOES NOT DO READ!
                245: *                HOWEVER, IT DOES DO A WAITRDSI TO MAKE SURE THE SECTOR HAS ARRIVED
                246: *                NOTE: CAN BE CALLED TO INVENT SECTOR FOR IMAGINARY DISK (DISKINFO=0)
                247: *
  D8F0          248: INVENTSECTOR     EQU         *
D8F0 4F         249:          CLRA                FLAG "DON'T DO THE READ!"
D8F1 2002       250:          BRA     READSECTOR0
                251: 
                252: *
                253: *        READSECTOR -- INITIATE READ OF DISK SECTOR INTO MEMORY
                254: *                (X) POINTS TO SECTOR DESCRIPTOR (SECTORDB)
                255: *                1)  SEARCH RDSIS TO SEE IF ALREADY IN CORE
                256: *                2)  IF NOT, FIND OLDEST BLOCK; IF MODIFIED, WRITE
                257: *                3)  INIT SECTOR FETCH
                258: *                4)  ZAP ALL IOCBS THAT REFER TO OLDEST BLOCK
                259: *        RETURNS (A,B), (X), RDSIPOINTER POINTING TO RDSI CONTAINING DISK SECTOR
                260: *        NOTE: CALLER MUST LATER DO A "WAITRDSI" TO ENSURE ARRIVAL OF SECTOR!
                261: *        NOTE: CANNOT BE CALLED TO READ A SECTOR FROM IMAGINARY DISK (DISKINFO=0)
                262: *        ERRET INDICATES SOME KIND OF DISK I/O PROBLEM
                263: *
  D8F3          264: READSECTOR       EQU         *
D8F3 8601       265:          LDAA    #1          FLAG "DOING A READSECTOR"
  D8F5          266: READSECTOR0      EQU         *
D8F5 B7AF03     267:          STAA    READFLAG
D8F8 FFAF04     268:          STX     READSECTORDBP SAVE POINTER TO DESCRIPTOR BLOCK
                269:          ;LDD    SECTORDB:LSN+1,X GET LEAST SIG 16 BITS OF LSN
D8FB E604       270:          LDAB    (SECTORDB:LSN+1)+1,X
D8FD A603       271:          LDAA    SECTORDB:LSN+1,X
                272:          ;LDX    LASTSECTORREADQ+RDSI:FLINK SEARCH RDSI CHAIN
D8FF FEAEF6     273:          LDX     LASTSECTORREADQ+RDSI:FLINK
  D902          274: READSECTORL      EQU         *
                275:          ;CMPD   RDSI:LSN+1,X COMPARE LSB'S FIRST...
D902 A103       276:          CMPA    RDSI:LSN+1,X
D904 2602       277:          BNE     MACRO:002B
D906 E104       278:          CMPB    (RDSI:LSN+1)+1,X
  D908          279: MACRO:002B
D908 2628       280:          BNE     READSECTORNM SINCE THEY HAVE HIGHEST PROBABILITY OF NOT MATCHING
D90A FFAEA4     281:          STX     RDSIPOINTER SAVE X A MOMENT...




ASM/6800 1.4A0: D90A SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 414; Form 21    DISK FILE DRIVERS -- DISK I/O
SDOS6800.ASM
                282:          ;LDD    RDSI:DISKINFO,X DO DISKINFO POINTERS MATCH ?
D90D E601       283:          LDAB    (RDSI:DISKINFO)+1,X
D90F A600       284:          LDAA    RDSI:DISKINFO,X
                285:          ;LDX    READSECTORDBP ...?
D911 FEAF04     286:          LDX     READSECTORDBP
                287:          ;CMPD   SECTORDB:DISKINFO,X ...?
D914 A100       288:          CMPA    SECTORDB:DISKINFO,X
D916 2602       289:          BNE     MACRO:002C
D918 E101       290:          CMPB    (SECTORDB:DISKINFO)+1,X
  D91A          291: MACRO:002C
D91A 260F       292:          BNE     READSECTORNMA B/ NO
D91C E602       293:          LDAB    SECTORDB:LSN,X YES, GRAB MSB OF LSN OF DESIRED SECTOR
                294:          ;LDX    RDSIPOINTER DOES IT MATCH DESIRED LSN ?
D91E FEAEA4     295:          LDX     RDSIPOINTER
                296:          ;CMPB   RDSI:LSN,X  ... ?
D921 E102       297:          CMPB    RDSI:LSN,X
D923 2603       298:          BNE     READSECTORL1 B/ DIDN'T MATCH, AND AFTER ALL THAT EFFORT!
                299:          ;JMP    READSECTORF WE FOUND IT !!
D925 7ED9F0     300:          JMP     READSECTORF
                301: 
  D928          302: READSECTORL1     EQU         *
                303:          ;LDX    READSECTORDBP GET POINTER TO SECTOR DESCRIPTOR
D928 FEAF04     304:          LDX     READSECTORDBP
  D92B          305: READSECTORNMA    ; NO MATCH, RELOAD 16 LSBS OF DESIRED LSN
                306:          ;LDD    SECTORDB:LSN+1,X GET 16 LSBS OF DESIRED LSN AGAIN
D92B E604       307:          LDAB    (SECTORDB:LSN+1)+1,X
D92D A603       308:          LDAA    SECTORDB:LSN+1,X
                309:          ;LDX    RDSIPOINTER GRAB ADDRESS OF RDSI THAT DIDN'T MATCH
D92F FEAEA4     310:          LDX     RDSIPOINTER
  D932          311: READSECTORNM     ; THIS RDSI ISN'T IT!
                312:          ;LDX    RDSI:FLINK,X FIND NEXT RDSI
D932 EE07       313:          LDX     RDSI:FLINK,X
D934 8CAEEF     314:          CPX     #LASTSECTORREADQ END OF RDSI LIST?
D937 26C9       315:          BNE     READSECTORL B/ NO, CHECK NEXT RDSI
                316: *        MUST DO DISK I/O
                317: *        0) VERIFY THAT LSN IS LEGAL FOR THIS DRIVE
                318: *        1) WAIT FOR DISK SPECIFIED BY TARGET READ BUFFER TO BE DONE
                319: *        2) WRITE TARGET READ BUFFER CONTENTS BACK TO DISK IF MODIFIED
                320: *        3) WAIT FOR DISK OF DESIRED SECTOR TO BE DONE
                321: *        4) ISSUE READ TO GET DISK SECTOR




ASM/6800 1.4A0: D937 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 415; Form 21    DISK FILE DRIVERS -- DISK I/O
SDOS6800.ASM
  D939          322: READSECTORV      ; VERIFY LSN IS LEGAL FOR THIS DRIVE
                323:          ;LDX    READSECTORDBP GET THE SECTOR NUMBER...
D939 FEAF04     324:          LDX     READSECTORDBP
D93C A602       325:          LDAA    SECTORDB:LSN,X
D93E 36         326:          PSHA
                327:          ;LDD    SECTORDB:LSN+1,X
D93F E604       328:          LDAB    (SECTORDB:LSN+1)+1,X
D941 A603       329:          LDAA    SECTORDB:LSN+1,X
                330:          ;LDX    RDSI:DISKINFO,X SUBTRACT NLSN FROM IT..
D943 EE00       331:          LDX     RDSI:DISKINFO,X
D945 270E       332:          BEQ     READSECTORVD B/ READ FROM DUMMY DISK, DON'T DO ILLEGAL LSN CHECK
                333:          ;SUBD   DSKINFO:NLSN+1,X
D947 E01D       334:          SUBB    (DSKINFO:NLSN+1)+1,X
D949 A21C       335:          SBCA    DSKINFO:NLSN+1,X
D94B 32         336:          PULA
D94C A21B       337:          SBCA    DSKINFO:NLSN,X
D94E 2506       338:          BCS     READSECTORVD1 B/ LSN IS LEGAL FOR TARGET DISK
  D950          339: ERRILLLSN
                340:          ;JSR    ERRET
D950 BDB1F6     341:          JSR     ERRET
D953 040E       342:          FDB     ERR:ILLLSN




ASM/6800 1.4A0: D953 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 416; Form 21    DISK FILE DRIVERS -- DISK I/O
SDOS6800.ASM
  D955          344: READSECTORVD     ; READ FROM DUMMY (VIRTUAL) DISK
                345:          ;LEAS   1,S         POP MSB OF LSN SINCE WE DON'T NEED TO DO ILLEGAL LSN CHEC
  0000          346:          IF      1<0
 *S*            347:          RPT     -1
 *S*            348:          DES
                349:          ELSE
  0001          350:          RPT     1
D955 31         351:          INS
                352:          FIN
  D956          353: READSECTORVD1
                354:          ;LDX    #LASTSECTORREADQ FIND AVAILABLE SECTOR BUFFER
D956 CEAEEF     355:          LDX     #LASTSECTORREADQ
  D959          356: READSECTOR1      EQU         *
                357:          ;LDX    RDSI:BLINK,X FIND DCB ADDRESS OF DISK OF LAST SECTOR BUFFER IN QUEUE
D959 EE09       358:          LDX     RDSI:BLINK,X
D95B A60C       359:          LDAA    RDSI:STATE,X WE ONLY NEED TO WAIT IF TARGET BUFFER IS BUSY...
D95D AA0B       360:          ORAA    RDSI:MODIFIED,X OR IT NEEDS TO BE WRITTEN TO THE DISK
D95F 273D       361:          BEQ     READSECTOR3 B/ DON'T NEED TO WAIT FOR TARGET BUFFER
                362:          ;LDX    RDSI:DISKINFO,X GOT IT! (ASSERT: RDSI:DSKINFO <> 0!)
D961 EE00       363:          LDX     RDSI:DISKINFO,X
                364:          ;LDX    DSKINFO:SECTORDB,X IS TARGET BUFFER'S DISK BUSY ?
D963 EE2B       365:          LDX     DSKINFO:SECTORDB,X
D965 2706       366:          BEQ     READSECTOR2 B/ NO, SEE IF TARGET SECTOR BUFFER IS MODIFIED
D967 FFAEA4     367:          STX     RDSIPOINTER YES, WAIT FOR IT
                368:          ;JSR    WAITRDSI    ...
D96A BDDAA1     369:          JSR     WAITRDSI
  D96D          370: READSECTOR2      ; CHECK TO SEE IF TARGET SECTOR BUFFER IS MODIFIED
                371:          ;LDX    LASTSECTORREADQ+RDSI:BLINK GET ADDRESS OF TARGET RDSI
D96D FEAEF8     372:          LDX     LASTSECTORREADQ+RDSI:BLINK
  D970          373: READSECTOR2L     ; WRITE FROM POOL, OLDEST BUFFER TO NEWEST BUFFER,
                374: *        UNTIL DIFFERENT DISK ENCOUNTERED, BUFFER NOT MODIFIED,
                375: *        OR RDSI:CYLINDER DOESN'T MATCH
D970 A60B       376:          LDAA    RDSI:MODIFIED,X IS IT MODIFIED ?
D972 272A       377:          BEQ     READSECTOR3 B/ NO, GO WAIT FOR DESIRED DISK TO BECOME FREE
D974 FFAEA4     378:          STX     RDSIPOINTER YES, ISSUE THE WRITE
D977 8602       379:          LDAA    #RDSISTATE:WRITING WHICH MOVES SECTOR BACK TO DISK
D979 A70C       380:          STAA    RDSI:STATE,X AND FREES UP THIS SECTOR BUFFER
                381:          ;CLR    RDSI:MODIFIED,X MARK SECTOR AS UNCHANGED (TAKES EFFECT AFTER WRITE)
D97B 6F0B       382:          CLR     RDSI:MODIFIED,X
                383:          ;JSR    DISKWRITE   ISSUE THE ACTUAL WRITE COMMAND




ASM/6800 1.4A0: D97D SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 417; Form 21    DISK FILE DRIVERS -- DISK I/O
SDOS6800.ASM
D97D BDDB66     384:          JSR     DISKWRITE
D980 2566       385:          BCS     WAITSECTORERRJ B/ DISK I/O ERROR OCCURRED
                386:          ;LDX    RDSIPOINTER WAIT FOR WRITE TO FINISH
D982 FEAEA4     387:          LDX     RDSIPOINTER
                388:          ;JSR    WAITSECTOR1 OLD SECTOR CONTENTS ARE NOW GONE!!
D985 BDDAAC     389:          JSR     WAITSECTOR1
                390:          ;LDX    RDSIPOINTER SEE IF NEXT OLDEST SECTOR IN POOL NEEDS WRITING
D988 FEAEA4     391:          LDX     RDSIPOINTER
                392:          ;LDD    RDSI:CYLINDER,X ONLY WRITE ANOTHER SECTOR IF IN SAME PHYSICAL CYLINDE
D98B E613       393:          LDAB    (RDSI:CYLINDER)+1,X
D98D A612       394:          LDAA    RDSI:CYLINDER,X
                395:          ;LDX    RDSI:BLINK,X FIND NEXT OLDEST SECTOR
D98F EE09       396:          LDX     RDSI:BLINK,X
D991 8CAEEF     397:          CPX     #LASTSECTORREADQ EXHAUSTED POOL ?
D994 2708       398:          BEQ     READSECTOR3 B/ ALL MOD'D SECTORS IN POOL WRITTEN TO DISK
                399:          ;CMPD   RDSI:CYLINDER,X NO, IS NEXT OLDEST SECTOR IN SAME CYLINDER ?
D996 A112       400:          CMPA    RDSI:CYLINDER,X
D998 2602       401:          BNE     MACRO:002D
D99A E113       402:          CMPB    (RDSI:CYLINDER)+1,X
  D99C          403: MACRO:002D
D99C 27D2       404:          BEQ     READSECTOR2L B/ YES, GO SEE IF MODIFIED AND THEN WRITE IT!
                405: **** THIS LOGIC SHOULD ISSUE JUST WRITES, FOLLOWED BY JUST VERIFIES!
  D99E          406: READSECTOR3      ; WAIT FOR DESIRED DISK TO BE DONE
                407:          ;LDX    READSECTORDBP GET DCB ADDRESS OF DESIRED DISK
D99E FEAF04     408:          LDX     READSECTORDBP
                409:          ;LDX    SECTORDB:DISKINFO,X ...
D9A1 EE00       410:          LDX     SECTORDB:DISKINFO,X
D9A3 270A       411:          BEQ     READSECTOR4 B/ WISH TO READ FROM DUMMY DISK, IT'S DONE...
                412:          ;LDX    DSKINFO:SECTORDB,X GET POINTER TO SECTOR BEING PROCESSED
D9A5 EE2B       413:          LDX     DSKINFO:SECTORDB,X
D9A7 2706       414:          BEQ     READSECTOR4 B/ DESIRED DISK IS IDLE
D9A9 FFAEA4     415:          STX     RDSIPOINTER WAIT FOR DESIRED DISK TO FINISH I/O
                416:          ;JSR    WAITRDSI    ...
D9AC BDDAA1     417:          JSR     WAITRDSI
  D9AF          418: READSECTOR4      ; NOW (AT LAST!) READ IN THE DESIRED SECTOR
                419:          ;LDX    READSECTORDBP GET POINTER TO DESIRED SECTOR ADDRESS
D9AF FEAF04     420:          LDX     READSECTORDBP
                421:          ;LDD    SECTORDB:DISKINFO,X COPY DISKINFO TO (TOS-1,TOS)
D9B2 E601       422:          LDAB    (SECTORDB:DISKINFO)+1,X
D9B4 A600       423:          LDAA    SECTORDB:DISKINFO,X




ASM/6800 1.4A0: D9B4 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 418; Form 21    DISK FILE DRIVERS -- DISK I/O
SDOS6800.ASM
                424:          ;PSHD
D9B6 37         425:          PSHB
D9B7 36         426:          PSHA
D9B8 A602       427:          LDAA    SECTORDB:LSN,X COPY DESIRED SECTOR # TO (TOS),(A,B)
D9BA 36         428:          PSHA
                429:          ;LDD    SECTORDB:LSN+1,X
D9BB E604       430:          LDAB    (SECTORDB:LSN+1)+1,X
D9BD A603       431:          LDAA    SECTORDB:LSN+1,X
                432:          ;LDX    LASTSECTORREADQ+RDSI:BLINK GET POINTER TO CHOSEN RDSI AGAIN
D9BF FEAEF8     433:          LDX     LASTSECTORREADQ+RDSI:BLINK
D9C2 FFAEA4     434:          STX     RDSIPOINTER AND REMEMBER IT FOR EVERYBODY'S CONVENIENCE
                435:          ;STD    RDSI:LSN+1,X STORE SECTOR DESCRIPTION INTO RDSI
D9C5 E704       436:          STAB    (RDSI:LSN+1)+1,X
D9C7 A703       437:          STAA    RDSI:LSN+1,X
D9C9 32         438:          PULA
D9CA A702       439:          STAA    RDSI:LSN,X
                440:          ;PULD
D9CC 32         441:          PULA
D9CD 33         442:          PULB
                443:          ;STD    RDSI:DISKINFO,X
D9CE E701       444:          STAB    (RDSI:DISKINFO)+1,X
D9D0 A700       445:          STAA    RDSI:DISKINFO,X
D9D2 86FF       446:          LDAA    #$FF        MARK RDSI AS "REQUIRES LSN TO PHYSICAL" MAPPING
                447:          ;STA    RDSI:TRACK,X (DRIVER CHANGES RDSI:SECTOR, :TRACK, :CYLINDER BY DOING 
D9D4 A710       448:          STAA    RDSI:TRACK,X
                449:          ;CLR    RDSI:CYLINDER,X SET CYLINDER TO CONSTANT...
D9D6 6F12       450:          CLR     RDSI:CYLINDER,X
                451:          ;CLR    RDSI:CYLINDER+1,X IN CASE DRIVER DOES NOT FILL IN CYLINDER NUMBER
D9D8 6F13       452:          CLR     RDSI:CYLINDER+1,X
D9DA B6AF03     453:          LDAA    READFLAG    INVENTING A SECTOR ? (RDSI:STATE = "IDLE" WHEN WE GET HER
D9DD 270C       454:          BEQ     READSECTORI B/ YES, DON'T BOTHER READING IT IN
D9DF 8601       455:          LDAA    #RDSISTATE:READING MARK SECTOR AS BEING READ
D9E1 A70C       456:          STAA    RDSI:STATE,X
                457:          ;JSR    DISKREAD    INITIATE SECTOR FETCH
D9E3 BDDB5A     458:          JSR     DISKREAD
D9E6 2406       459:          BCC     READSECTORR B/ NO ERROR IN STARTING THE DISK I/O
  D9E8          460: WAITSECTORERRJ   EQU         *
                461:          ;JMP    WAITSECTORERRED
D9E8 7EDAB8     462:          JMP     WAITSECTORERRED
                463: 




ASM/6800 1.4A0: D9E8 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 419; Form 21    DISK FILE DRIVERS -- DISK I/O
SDOS6800.ASM
  D9EB          464: READSECTORI      ; INVENTING A SECTOR
                465:          ;JSR    WAITRDSI    IN THE RARE CASE THAT WE WISH TO INVENT...
D9EB BDDAA1     466:          JSR     WAITRDSI
                467: *                            A SECTOR THAT SOMEBODY DID A READ-AHEAD ON!
  D9EE          468: READSECTORR      EQU         *
D9EE 8D10       469:          BSR     REMOVERDSI  DELETE ALL OLD REFERENCES TO RDSI
  D9F0          470: READSECTORF      ; WE FOUND IT !
                471:          ;LDX    RDSIPOINTER MAKE THIS SECTOR THE MOST RECENTLY READ
D9F0 FEAEA4     472:          LDX     RDSIPOINTER
D9F3 8D69       473:          BSR     REQUERDSI1
                474:          ;LDX    RDSIPOINTER EXIT WITH POINTER IN (X)...
D9F5 FEAEA4     475:          LDX     RDSIPOINTER
                476:          ;LDD    RDSIPOINTER AND (A,B)
D9F8 F6AEA5     477:          LDAB    RDSIPOINTER+1
D9FB B6AEA4     478:          LDAA    RDSIPOINTER
D9FE 0C39       479:          OKRTS




ASM/6800 1.4A0: D9FE SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 420; Form 21    DISK FILE DRIVERS -- DISK I/O
SDOS6800.ASM
                481: *        REMOVERDSI -- REMOVE RDSIPOINTER FROM ALL IOCBS...
                482: *        THAT HAVE REFERENCES TO IT
                483: *
  DA00          484: REMOVERDSI       EQU         *
                485:          ;LDX    CODE+SDOS:CONFIGURATION
DA00 FEAE03     486:          LDX     CODE+SDOS:CONFIGURATION
DA03 A606       487:          LDAA    CNFG:NIOCHANNELS,X FIND OUT HOW MANY IOCBS TO SCAN
DA05 B7AF06     488:          STAA    REMOVESECTORCNT
                489:          ;LDX    CNFG:IOCBPOINTERS,X SET UP TO SCAN IOCB POINTER TABLE
DA08 EE04       490:          LDX     CNFG:IOCBPOINTERS,X
                491:          ;LDD    RDSIPOINTER GET TARGET RDSI ADDRESS TO (A,B)
DA0A F6AEA5     492:          LDAB    RDSIPOINTER+1
DA0D B6AEA4     493:          LDAA    RDSIPOINTER
  DA10          494: REMOVERDSIL      EQU         *
DA10 FFAF07     495:          STX     REMOVEIOCBPTR SAVE IOCB POINTER LIST SCANNER
                496:          ;LDX    ,X          GET REAL IOCB POINTER
DA13 EE00       497:          LDX     0,X
DA15 8D18       498:          BSR     READSECTORZAPIOCB REMOVE RDSI FROM IOCB
                499:          ;LDX    REMOVEIOCBPTR GET LIST SCAN POINTER
DA17 FEAF07     500:          LDX     REMOVEIOCBPTR
                501:          ;LEAX   2,X         BUMP TO NEXT IOCB POINTER
  0000          502:          IF      2<0
 *S*            503:          RPT     -2
 *S*            504:          DEX
                505:          ELSE
  0002          506:          RPT     2
DA1A 08         507:          INX
                508:          FIN
                509:          ;DEC    REMOVESECTORCNT DOWN COUNT # IOCBS TO CHECK
DA1C 7AAF06     510:          DEC     REMOVESECTORCNT
DA1F 26EF       511:          BNE     REMOVERDSIL B/ MORE TO CHECK
                512:          ;LDX    #SYSIOCB    CHECK SYSIOCB OUT, TOO!
DA21 CEAF57     513:          LDX     #SYSIOCB
DA24 8D09       514:          BSR     READSECTORZAPIOCB REMOVE RDSI FROM IT IF IN USE
                515:          ;LDX    #LOGIOCB    REMOVE RDSI FROM LOG FILE IF IN USE
DA26 CEAF35     516:          LDX     #LOGIOCB
DA29 8D04       517:          BSR     READSECTORZAPIOCB
                518:          ;LDX    RDSIPOINTER FOR THE CONVENIENCE OF THE CALLER
DA2B FEAEA4     519:          LDX     RDSIPOINTER
DA2E 39         520:          RTS




ASM/6800 1.4A0: DA2E SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 421; Form 21    DISK FILE DRIVERS -- DISK I/O
SDOS6800.ASM
                522: *        READSECTORZAPIOCB -- REMOVE MATCHING RDSI POINTER REFERENCES
                523: *        (A,B) ON ENTRY CONTAIN RDSI ADDRESS TO REMOVE FROM IOCB(X)
                524: *
  DA2F          525: READSECTORZAPIOCB            EQU *
DA2F DF00       526:          STX     TEMPX       SAVE IOCB TO TEST
                527:          ;LDX    IOCB:DRIVER,X FIND OUT WHICH DRIVER OWNS THIS IOCB
DA31 EE09       528:          LDX     IOCB:DRIVER,X
DA33 8CBCB4     529:          CPX     #DISKFILEDRIVER DO HIGH PROBABILITY TEST FIRST
DA36 2706       530:          BEQ     READSECTORZAPH B/ DISK FILE DRIVER, CHECK HRDSI
DA38 8CBC93     531:          CPX     #DISKDEVICEDRIVER LOW PROBABILITY TEST
DA3B 270F       532:          BEQ     READSECTORZAPD B/ DISK DEVICE DRIVER, JUST CHECK DRDSI
DA3D 39         533:          RTS                 NOT OPEN TO A DISK DRIVER, JUST QUIT!
                534: 
  DA3E          535: READSECTORZAPH   ; CHECK HRDSI OF IOCB
                536:          ;LDX    TEMPX
DA3E DE00       537:          LDX     TEMPX
                538:          ;CMPD   IOCB:HRDSI,X (A,B) MATCH HRDSI ?
DA40 A11F       539:          CMPA    IOCB:HRDSI,X
DA42 2602       540:          BNE     MACRO:002E
DA44 E120       541:          CMPB    (IOCB:HRDSI)+1,X
  DA46          542: MACRO:002E
DA46 2606       543:          BNE     READSECTORZAPD1 B/ NO
                544:          ;CLR    IOCB:HRDSI,X YES, MARK HRDSI AS INVALID
DA48 6F1F       545:          CLR     IOCB:HRDSI,X
                546:          ;CLR    IOCB:HRDSI+1,X
DA4A 6F20       547:          CLR     IOCB:HRDSI+1,X
  DA4C          548: READSECTORZAPD   EQU         *
                549:          ;LDX    TEMPX       RESTORE (X) TO IOCB POINTER
DA4C DE00       550:          LDX     TEMPX
  DA4E          551: READSECTORZAPD1  ; ENTER HERE IF (X) IS ALREADY SET UP
                552:          ;CMPD   IOCB:DRDSI,X (A,B) MATCH DRDSI ?
DA4E A112       553:          CMPA    IOCB:DRDSI,X
DA50 2602       554:          BNE     MACRO:002F
DA52 E113       555:          CMPB    (IOCB:DRDSI)+1,X
  DA54          556: MACRO:002F
DA54 2604       557:          BNE     READSECTORZAPRTS B/ NO
                558:          ;CLR    IOCB:DRDSI,X YES, MARK DRDSI AS INVALID
DA56 6F12       559:          CLR     IOCB:DRDSI,X
                560:          ;CLR    IOCB:DRDSI+1,X
DA58 6F13       561:          CLR     IOCB:DRDSI+1,X




ASM/6800 1.4A0: DA58 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 422; Form 21    DISK FILE DRIVERS -- DISK I/O
SDOS6800.ASM
  DA5A          562: READSECTORZAPRTS EQU         *
DA5A 39         563:          RTS




ASM/6800 1.4A0: DA5A SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 423; Form 21    DISK FILE DRIVERS -- DISK I/O
SDOS6800.ASM
                565: *        REQUERDSI -- REQUE RDSI(X) ONTO TOP OF QUEUE
                566: *        USED TO IMPLEMENT LRU POLICY OF DISK SECTOR BUFFER MANAGEMENT
                567: *
  DA5B          568: REQUERDSI        ; FIRST, TAKE IT OUT OF THE QUEUE
DA5B FFAEA4     569:          STX     RDSIPOINTER SAVE THE RDSI ADDRESS
  DA5E          570: REQUERDSI1       ; IF RDSIPOINTER AND (X) ARE ALREADY SET UP
                571:          ;LDD    RDSI:FLINK,X MAKE FLINK(BLINK(X))=FLINK(X)
DA5E E608       572:          LDAB    (RDSI:FLINK)+1,X
DA60 A607       573:          LDAA    RDSI:FLINK,X
                574:          ;LDX    RDSI:BLINK,X
DA62 EE09       575:          LDX     RDSI:BLINK,X
                576:          ;STD    RDSI:FLINK,X
DA64 E708       577:          STAB    (RDSI:FLINK)+1,X
DA66 A707       578:          STAA    RDSI:FLINK,X
                579:          ;LDX    RDSIPOINTER MAKE BLINK(FLINK(X))=BLINK(X)
DA68 FEAEA4     580:          LDX     RDSIPOINTER
                581:          ;LDD    RDSI:BLINK,X
DA6B E60A       582:          LDAB    (RDSI:BLINK)+1,X
DA6D A609       583:          LDAA    RDSI:BLINK,X
                584:          ;LDX    RDSI:FLINK,X
DA6F EE07       585:          LDX     RDSI:FLINK,X
                586:          ;STD    RDSI:BLINK,X
DA71 E70A       587:          STAB    (RDSI:BLINK)+1,X
DA73 A709       588:          STAA    RDSI:BLINK,X
                589:          ;LDX    RDSIPOINTER SO WE CAN DO THE ENQUE
DA75 FEAEA4     590:          LDX     RDSIPOINTER
                591: *        BSR     ENQUELASTSECTORREAD
                592: *        RTS
                593: *
                594: *        ENQUELASTSECTORREAD -- ADD RDSI(X) TO TOP OF LASTSECTORREADQ
                595: *
  DA78          596: ENQUELASTSECTORREAD          EQU *
                597:          ;LDD    LASTSECTORREADQ+RDSI:FLINK
DA78 F6AEF7     598:          LDAB    LASTSECTORREADQ+RDSI:FLINK+1
DA7B B6AEF6     599:          LDAA    LASTSECTORREADQ+RDSI:FLINK
                600:          ;STD    RDSI:FLINK,X MAKE FLINK(X) := FLINK(QHEAD)
DA7E E708       601:          STAB    (RDSI:FLINK)+1,X
DA80 A707       602:          STAA    RDSI:FLINK,X
                603:          ;LDD    #LASTSECTORREADQ MAKE BLINK(X) := ADDRESS(QHEAD)
DA82 C6EF       604:          LDAB    #(LASTSECTORREADQ)&$FF




ASM/6800 1.4A0: DA84 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 424; Form 21    DISK FILE DRIVERS -- DISK I/O
SDOS6800.ASM
DA84 86AE       605:          LDAA    #(LASTSECTORREADQ)/256
                606:          ;STD    RDSI:BLINK,X
DA86 E70A       607:          STAB    (RDSI:BLINK)+1,X
DA88 A709       608:          STAA    RDSI:BLINK,X
DA8A FFAEF6     609:          STX     LASTSECTORREADQ+RDSI:FLINK MAKE FLINK(QHEAD) := X
                610:          ;LDD    LASTSECTORREADQ+RDSI:FLINK BLINK(FLINK(X)) := X
DA8D F6AEF7     611:          LDAB    LASTSECTORREADQ+RDSI:FLINK+1
DA90 B6AEF6     612:          LDAA    LASTSECTORREADQ+RDSI:FLINK
                613:          ;LDX    RDSI:FLINK,X
DA93 EE07       614:          LDX     RDSI:FLINK,X
                615:          ;STD    RDSI:BLINK,X
DA95 E70A       616:          STAB    (RDSI:BLINK)+1,X
DA97 A709       617:          STAA    RDSI:BLINK,X
DA99 39         618:          RTS                 AND EXIT




ASM/6800 1.4A0: DA99 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 425; Form 21    DISK FILE DRIVERS -- DISK I/O
SDOS6800.ASM
                620: *        FETCHSECTOR -- INITIATE READ FOR AND THEN WAIT FOR SECTOR ARRIVAL
                621: *        (X) POINTS TO SECTOR DESCRIPTOR
                622: *
  DA9A          623: FETCHSECTOR      EQU         *
                624:          ;JSR    READSECTOR  GO START THE SECTOR READ
DA9A BDD8F3     625:          JSR     READSECTOR
DA9D 200D       626:          BRA     WAITSECTOR1 THEN GO WAIT FOR IT TO ARRIVE
                627: *
                628: *        WAITSECTOR -- WAIT FOR SECTOR WHOSE RDSI IS IN (X)
                629: *        SETS RDSIPOINTER TO (X)
                630: *        MOVES RDSI TO TOP OF LRU QUEUE
                631: *        DOES WAIT ONLY IF RDSI SAYS "NOT IDLE"
                632: *        RETURNS (X) = RDSIPOINTER
                633: *
  DA9F          634: WAITSECTOR       EQU         *
DA9F 8DBA       635:          BSR     REQUERDSI   MOVE RDSI TO TOP OF LRU QUEUE
  DAA1          636: WAITRDSI ; WAIT FOR RDSI SELECTED BY RDSIPOINTER
                637:          ;LDX    RDSIPOINTER CHECK OUT STATE OF RDSI
DAA1 FEAEA4     638:          LDX     RDSIPOINTER
DAA4 A600       639:          LDAA    RDSI:DISKINFO,X DUMMY DISKINFO TABLE ?
DAA6 270E       640:          BEQ     WAITSECTORRTS B/ YES, IGNORE IT.
DAA8 A60C       641:          LDAA    RDSI:STATE,X IDLE ?
DAAA 270A       642:          BEQ     WAITSECTORRTS B/ YES, TAKE QUICK EXIT!
  DAAC          643: WAITSECTOR1      ; WAIT FOR ARRIVAL OF SECTOR
                644:          ;CLR    RDSI:STATE,X RESET SECTOR STATE TO "IDLE"
DAAC 6F0C       645:          CLR     RDSI:STATE,X
                646:          ;JSR    DISKWAITD   WAIT FOR DISK TRANSFER COMPLETED
DAAE BDDB72     647:          JSR     DISKWAITD
DAB1 2505       648:          BCS     WAITSECTORERRED B/ WE GOT A PROBLEM!
                649:          ;LDX    RDSIPOINTER SO (X) IS CORRECT ON EXIT
DAB3 FEAEA4     650:          LDX     RDSIPOINTER
  DAB6          651: WAITSECTORRTS    EQU         *
DAB6 0C39       652:          OKRTS
                653: 
  DAB8          654: WAITSECTORERRED  ; DISK I/O ERROR OCCURRED
                655:          ;PSHX               SAVE THE ERROR CODE!
DAB8 DF00       656:          STX     TEMPX
DABA D601       657:          LDAB    TEMPB
DABC 37         658:          PSHB
DABD D600       659:          LDAB    TEMPA




ASM/6800 1.4A0: DABF SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 426; Form 21    DISK FILE DRIVERS -- DISK I/O
SDOS6800.ASM
DABF 37         660:          PSHB
                661:          ;LDX    RDSIPOINTER
DAC0 FEAEA4     662:          LDX     RDSIPOINTER
                663:          ;CLR    RDSI:DISKINFO,X CAN'T DO I/O, LSN IN RDSI IS NOW A LIE!
DAC3 6F00       664:          CLR     RDSI:DISKINFO,X
                665:          ;CLR    RDSI:DISKINFO+1,X MARK RDSI AS COMING FROM "MAGIC 0" DISK
DAC5 6F01       666:          CLR     RDSI:DISKINFO+1,X
DAC7 8601       667:          LDAA    #1          (BECAUSE WE WANT SOMETHING NON-ZERO)
DAC9 A702       668:          STAA    RDSI:LSN,X  MAKE LSN <> 0 SO WE DON'T THINK ITS THE MAGIC 0 SECTOR
                669:          ;CLR    RDSI:STATE,X MARK SECTOR AS BEING INACTIVE
DACB 6F0C       670:          CLR     RDSI:STATE,X
                671:          ;CLR    RDSI:MODIFIED,X THIS SHOULD BE REDUNDANT, BUT MAKES ME FEEL SAFE!
DACD 6F0B       672:          CLR     RDSI:MODIFIED,X
                673:          ;JSR    REMOVERDSI  REMOVE ANY REFERENCES TO RDSI FROM IOCBS
DACF BDDA00     674:          JSR     REMOVERDSI
                675:          ;PULX               GET THE ERROR CODE BACK...
DAD2 30         676:          TSX
DAD3 EE00       677:          LDX     0,X
DAD5 31         678:          INS
DAD6 31         679:          INS
                680:          ;JMP    ERRORINX    GO TELL SOMEBODY WE HAD A PROBLEM!
DAD7 7EB200     681:          JMP     ERRORINX




ASM/6800 1.4A0: DAD7 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 427; Form 21    DISK FILE DRIVERS -- DISK I/O
SDOS6800.ASM
                683: *
                684: *        DSKDUMPBUFFERS -- WRITE MODIFIED SECTORS BACK TO DISK
                685: *                WRITE CONTENTS OF MODIFIED FCBS BACK TO CORRESPONDING DIRECTORY ENTRI
                686: *                WRITES ONLY RDSI'S WHOSE DISKINFO POINTER MATCHES "DCBPOINTER"
                687: *                ALSO FORCES CONTENTS OF MATCHING DISK FCB'S BACK TO DIRECTORY SECTORS
                688: *                ERRET TAKEN IF SOME FCB IS FOR A NEWLY CREATED FILE
                689: *                            SECTORS ARE DUMPED ANYWAY
                690: *                WAIT FOR ALL DISK I/O DONE
                691: *                DSKDUMPBUFFERS IS GENERALLY DONE WHEN MAPALGORITHM IS ABOUT TO BE CHA
                692: *
  DADA          693: DSKDUMPBUFFERS   EQU         *
DADA B6AF0A     694:          LDAA    NFCBS       GET # FCBS TO SEARCH
DADD 9704       695:          STAA    COUNT       AND SAVE AS LOOP COUNTER
                696:          ;LDX    CODE+SDOS:CONFIGURATION NOW SCAN ALL THE FCBS
DADF FEAE03     697:          LDX     CODE+SDOS:CONFIGURATION
                698:          ;LDD    [CNFG:IOCBPOINTERS,X] FIND ADDRESS OF FIRST FCB
DAE2 EE04       699:          LDX     CNFG:IOCBPOINTERS,X
DAE4 E601       700:          LDAB    1,X
DAE6 A600       701:          LDAA    0,X
  DAE8          702: DSKDUMPFCBL      EQU         *
                703:          ;SUBD   #FCB:SIZE   =ADDRESS OF PREVIOUS FCB - FCB:SIZE
DAE8 C01A       704:          SUBB    #(FCB:SIZE)&$FF
DAEA 8200       705:          SBCA    #(FCB:SIZE)/256
                706:          ;STD    FCBPOINTER  STORE FCB ADDRESS
DAEC F7AEA7     707:          STAB    FCBPOINTER+1
DAEF B7AEA6     708:          STAA    FCBPOINTER
                709:          ;LDX    FCBPOINTER  IS THIS FCB ACTIVE ?
DAF2 FEAEA6     710:          LDX     FCBPOINTER
DAF5 A60B       711:          LDAA    FCB:REFCOUNT,X ... ?
DAF7 2717       712:          BEQ     DSKDUMPFCB1 B/ NO, IGNORE IT
DAF9 A60A       713:          LDAA    FCB:FLAGS,X YES, GET FILE STATUS FLAGS
DAFB 8580       714:          BITA    #FCBFLG::NEWFILE A NEW FILE ?
DAFD 2611       715:          BNE     DSKDUMPFCB1 B/ YES, DON'T UPDATE DIRECTORY
                716:          ;LDX    FCB:DISKINFO,X IS THIS FCB FOR REQUESTED DISK ?
DAFF EE00       717:          LDX     FCB:DISKINFO,X
DB01 9C06       718:          CPX     DCBPOINTER  ...?
DB03 260B       719:          BNE     DSKDUMPFCB1 B/ NO, IGNORE IT
DB05 9604       720:          LDAA    COUNT        SAVE # FCBS TO LOOK AT
DB07 36         721:          PSHA
                722:          ;JSR    UPDATEDIRFROMFCB YES, UPDATE THE DIRECTORY




ASM/6800 1.4A0: DB08 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 428; Form 21    DISK FILE DRIVERS -- DISK I/O
SDOS6800.ASM
DB08 BDC9EB     723:          JSR     UPDATEDIRFROMFCB
DB0B 2546       724:          BCS     DSKDUMPERR1 B/ ERROR OCCURRED, YUK!
DB0D 32         725:          PULA                RESTORE COUNT
DB0E 9704       726:          STAA    COUNT
  DB10          727: DSKDUMPFCB1      ; THROUGH WITH THIS FCB
                728:          ;LDD    FCBPOINTER  GET FCB ADDRESS
DB10 F6AEA7     729:          LDAB    FCBPOINTER+1
DB13 B6AEA6     730:          LDAA    FCBPOINTER
                731:          ;DEC    COUNT
DB16 7A0004     732:          DEC     COUNT
DB19 26CD       733:          BNE     DSKDUMPFCBL B/ MORE FCBS TO SEARCH
                734: *        WE CANNOT DO A DSKDUMPBUFFER SAFELY UNLESS WE KNOW
                735: *        THAT ALL I/O ON THE DRIVE (SUCH AS READ-AHEAD) IS COMPLETED.
                736:          ;LDX    DCBPOINTER  COMPLETE ANY I/O ON THIS DRIVE
DB1B DE06       737:          LDX     DCBPOINTER
                738:          ;LDX    DSKINFO:SECTORDB,X I/O ACTIVE ON THIS DISK DRIVE ?
DB1D EE2B       739:          LDX     DSKINFO:SECTORDB,X
DB1F 2706       740:          BEQ     DSKDUMPBUF0 B/ NO
DB21 FFAEA4     741:          STX     RDSIPOINTER IN CASE WE GO TO WAITSECTORERRED
                742:          ;JSR    WAITRDSI    NOW WAIT FOR I/O OPERATION COMPLETE
DB24 BDDAA1     743:          JSR     WAITRDSI
  DB27          744: DSKDUMPBUF0      ; I/O ON DISK DRIVE IS COMPLETED
                745:          ;LDX    LASTSECTORREADQ+RDSI:FLINK SCAN RDSI LIST
DB27 FEAEF6     746:          LDX     LASTSECTORREADQ+RDSI:FLINK
  DB2A          747: DSKDUMPBUFL      EQU         *
DB2A FFAEA4     748:          STX     RDSIPOINTER YES, SAVE POINTER TO RDSI'S
                749:          ;LDX    RDSI:DISKINFO,X CORRECT DISK ?
DB2D EE00       750:          LDX     RDSI:DISKINFO,X
DB2F 9C06       751:          CPX     DCBPOINTER  ...?
DB31 2614       752:          BNE     DSKDUMPBUFN B/ NO, IGNORE RDSI
                753:          ;LDX    RDSIPOINTER NOW DO A WRITE...
DB33 FEAEA4     754:          LDX     RDSIPOINTER
DB36 A60B       755:          LDAA    RDSI:MODIFIED,X IF THIS SECTOR MODIFIED
DB38 270D       756:          BEQ     DSKDUMPBUFN B/ NO, LEAVE RDSI ALONE
                757:          ;CLR    RDSI:MODIFIED,X FORCE TRANSITION FROM "MODIFIED" TO "BEING WRITTEN"
DB3A 6F0B       758:          CLR     RDSI:MODIFIED,X
DB3C 8602       759:          LDAA    #RDSISTATE:WRITING MARK RDSI AS BEING WRITTEN
DB3E A70C       760:          STAA    RDSI:STATE,X
DB40 8D24       761:          BSR     DISKWRITE   OF MODIFIED SECTOR
DB42 2513       762:          BCS     WAITSECTORERRJ2 B/ RATS, WE GOT AN I/O ERROR




ASM/6800 1.4A0: DB42 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 429; Form 21    DISK FILE DRIVERS -- DISK I/O
SDOS6800.ASM
                763:          ;JSR    WAITRDSI    NOW WAIT FOR DISK I/O COMPLETE
DB44 BDDAA1     764:          JSR     WAITRDSI
  DB47          765: DSKDUMPBUFN      EQU         *
                766:          ;LDX    RDSIPOINTER
DB47 FEAEA4     767:          LDX     RDSIPOINTER
                768:          ;LDX    RDSI:FLINK,X FIND NEXT RDSI
DB4A EE07       769:          LDX     RDSI:FLINK,X
DB4C 8CAEEF     770:          CPX     #LASTSECTORREADQ HIT END OF RDSI LIST?
DB4F 26D9       771:          BNE     DSKDUMPBUFL B/ NO, GO CHECK NEXT RDSI
DB51 0C39       772:          OKRTS               NO
                773: 
  DB53          774: DSKDUMPERR1
DB53 31         775:          INS                 THROW AWAY THE SAVED COUNT
                776:          ;JMP    ERRORED     AND PASS THE ERROR ON...
DB54 7EB209     777:          JMP     ERRORED
                778: 
  DB57          779: WAITSECTORERRJ2  EQU         *
                780:          ;JMP    WAITSECTORERRED
DB57 7EDAB8     781:          JMP     WAITSECTORERRED
                782: 




ASM/6800 1.4A0: DB57 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 430; Form 21    DISK FILE DRIVERS -- DISK I/O
SDOS6800.ASM
  0000          784:          IF      SWAPPING    WHICH WE'RE NOT!
 *S*            785: *        READDIRECT -- READ IOCB:LSN INTO BUFFER(IOCB:BUFFERP)
 *S*            786: *                IF IOCB:LSN DOES NOT EXIST, ZEROS NBPS BYTES
 *S*            787: *                IOCB:LOCATEDF MUST BE SET ON ENTRY
 *S*            788: *
 *S*            789: READDIRECT       EQU         *
 *S*            790:          ;LDX    IOCBPOINTER CHECK VALIDITY OF CURLSN
 *S*            791:          LDX     IOCBPOINTER
 *S*            792:          ;LDX    IOCB:CURLCN,X IF CURLCN IS VALID,
 *S*            793:          LDX     IOCB:CURLCN,X
 *S*            794:          INX                 SO IS CURLSN
 *S*            795:          BNE     READDIRECT1 B/ CURLCN IS VALID (<>-1)
 *S*            796:          ;LDX    DCBPOINTER  OOPS, NO SUCH CLUSTER!
 *S*            797:          LDX     DCBPOINTER
 *S*            798:          CLRA                ZERO A SECTOR'S WORTH
 *S*            799:          CLRB                GET -NBPS TO (A,B)
 *S*            800:          ;SUBD   DSKINFO:NBPS,X
 *S*            801:          SUBB    (DSKINFO:NBPS)+1,X
 *S*            802:          SBCA    DSKINFO:NBPS,X
 *S*            803:          ;LDX    IOCBPOINTER
 *S*            804:          LDX     IOCBPOINTER
 *S*            805:          ;LDX    IOCB:BUFFERP,X
 *S*            806:          LDX     IOCB:BUFFERP,X
 *S*            807:          ;JMP    STAASECTORL AND LET ZERO SECTOR DO THE WORK
 *S*            808:          JMP     STAASECTORL
 *S*            809: 
 *S*            810: READDIRECT1      ; VALID CLUSTER # ENCOUNTERED
 *S*            811:          ;LDX    IOCBPOINTER SO READ THE LSN INDICATED
 *S*            812:          LDX     IOCBPOINTER
 *S*            813: *        BSR     DISKREAD
 *S*            814: *        OKRTS
                815:          FIN




ASM/6800 1.4A0: DB57 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 431; Form 21    DISK FILE DRIVERS -- DISK I/O
SDOS6800.ASM
                817: *
                818: *        DISKREAD -- INITIATE READ DISK SECTOR SPECIFIED BY SECTORDB(X)
                819: *        NOTE: DISKREAD, DISKWRITE, AND DISKWAITD ROUTINES MUST NOT BE
                820: *        CALLED WITH SECTORDB FOR DUMMY DISK!
                821: *        ASSERT: DSKINFO:SECTORDB = 0
                822: *        PRESERVES DCBPOINTER
                823: *
                824: *
  DB5A          825: DISKREAD EQU     *
DB5A 8D54       826:          BSR     DISKRWCOPYARGS COPY ARGUMENTS TO INFO BLOCK
                827:          ;LDD    DRIVER:DISKREAD,X GET ADDRESS OF DISKREAD ENTRY POINT TO (A,B)
DB5C E603       828:          LDAB    (DRIVER:DISKREAD)+1,X
DB5E A602       829:          LDAA    DRIVER:DISKREAD,X
DB60 8D69       830:          BSR     SECTORDRIVER SET (X) = DCBPOINTER AND PASS CONTROL TO DISKREAD
DB62 2446       831:          BCC     DISKDCBUNSAVE B/ NO ERROR
DB64 2018       832:          BRA     DISKWAITE   B/ WE GOT AN ERROR, YUK
                833: *
                834: *        DISKWRITE -- INITIATE WRITE DISK SECTOR OF SECTORDB(X)
                835: *        ASSERT: DSKINFO:SECTORDB = 0
                836: *        PRESERVES DCBPOINTER
                837: *
  DB66          838: DISKWRITE        EQU         *
DB66 8D48       839:          BSR     DISKRWCOPYARGS
                840:          ;LDD    DRIVER:DISKWRITE,X GET ADDRESS OF DISKWRITE ROUTINE TO (A,B)
DB68 E605       841:          LDAB    (DRIVER:DISKWRITE)+1,X
DB6A A604       842:          LDAA    DRIVER:DISKWRITE,X
DB6C 8D5D       843:          BSR     SECTORDRIVER SET (X) = DCBPOINTER AND PASS CONTROL TO (A,B)
DB6E 243A       844:          BCC     DISKDCBUNSAVE B/ NO ERROR
DB70 200C       845:          BRA     DISKWAITE   B/ WE GOT AN ERROR!
                846: *
                847: *        DISKWAITD -- WAIT FOR DISK I/O COMPLETE ON DRIVE SECTORDB(X)
                848: *        PRESERVES DCBPOINTER
                849: *
  DB72          850: DISKWAITD        EQU         *
DB72 8D49       851:          BSR     DISKDCBSAVE SAVE CURRENT VALUE OF DCB AND SET TO SECTORDB:DISKINFO
                852:          ;LDX    DCB:DRIVER,X GET ADDRESS OF DISKWAIT ROUTINE TO (A,B)
DB74 EE07       853:          LDX     DCB:DRIVER,X
                854:          ;LDD    DRIVER:DISKWAIT,X
DB76 E607       855:          LDAB    (DRIVER:DISKWAIT)+1,X
DB78 A606       856:          LDAA    DRIVER:DISKWAIT,X




ASM/6800 1.4A0: DB7A SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 432; Form 21    DISK FILE DRIVERS -- DISK I/O
SDOS6800.ASM
DB7A 8D4F       857:          BSR     SECTORDRIVER SET (X) = DCBPOINTER AND PASS CONTROL
DB7C 2426       858:          BCC     DISKWAITD2  B/ NO ERROR
  DB7E          859: DISKWAITE        ; DISK I/O ERROR OCCURRED
                860:          ;JSR    ERRORSAVE   SAVE THE ERROR CODE
DB7E BDB218     861:          JSR     ERRORSAVE
DB81 8C0415     862:          CPX     #ERR:DISKREAD CHECK FOR "CAN'T GET SECTOR" ERROR
DB84 2705       863:          BEQ     DISKWAITE1  B/ CAN'T READ IT...
DB86 8C0416     864:          CPX     #ERR:DISKWRITE CHECK FOR "CAN'T CHANGE IT" ERROR
DB89 2614       865:          BNE     DISKWAITE2  B/ ISN'T READ OR WRITE ERROR, DON'T MARK SECTOR AS BAD
  DB8B          866: DISKWAITE1       ; DISK READ OR DISK WRITE ERROR, MARK SECTOR AS BAD
                867:          ;LDX    DCBPOINTER  SAVE BAD LSN FROM RDSI
DB8B DE06       868:          LDX     DCBPOINTER
                869:          ;LDX    DSKINFO:SECTORDB,X COPY BAD LSN TO (TOS,A,B)
DB8D EE2B       870:          LDX     DSKINFO:SECTORDB,X
DB8F A602       871:          LDAA    SECTORDB:LSN,X
DB91 36         872:          PSHA
                873:          ;LDD    SECTORDB:LSN+1,X
DB92 E604       874:          LDAB    (SECTORDB:LSN+1)+1,X
DB94 A603       875:          LDAA    SECTORDB:LSN+1,X
                876:          ;LDX    DCBPOINTER
DB96 DE06       877:          LDX     DCBPOINTER
                878:          ;STD    DSKINFO:BADLSN+1,X
DB98 E72F       879:          STAB    (DSKINFO:BADLSN+1)+1,X
DB9A A72E       880:          STAA    DSKINFO:BADLSN+1,X
DB9C 32         881:          PULA
DB9D A72D       882:          STAA    DSKINFO:BADLSN,X
  DB9F          883: DISKWAITE2       ; FINISH UP ERROR HANDLING
DB9F 8D03       884:          BSR     DISKWAITD2  MARK DISK DRIVER AS "NOT BUSY"
                885:          ;JMP    ERRORED     AND GO CROAK
DBA1 7EB209     886:          JMP     ERRORED
                887: 
  DBA4          888: DISKWAITD2       ; MARK DISK DRIVER AS "NOT BUSY"
                889:          ;LDX    DCBPOINTER  BY ZEROING DSKINFO:SECTORDB
DBA4 DE06       890:          LDX     DCBPOINTER
                891:          ;CLR    DSKINFO:SECTORDB,X
DBA6 6F2B       892:          CLR     DSKINFO:SECTORDB,X
                893:          ;CLR    DSKINFO:SECTORDB+1,X
DBA8 6F2C       894:          CLR     DSKINFO:SECTORDB+1,X
  DBAA          895: DISKDCBUNSAVE    ; RESTORE DCB POINTER TO ORIGINAL VALUE
                896:          ;LDX    DCBPTRSAVE  NEED I SAY MORE?




ASM/6800 1.4A0: DBAA SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 433; Form 21    DISK FILE DRIVERS -- DISK I/O
SDOS6800.ASM
DBAA FEAF1B     897:          LDX     DCBPTRSAVE
DBAD DF06       898:          STX     DCBPOINTER  (THIS CODE MUST PRESERVE THE CARRY BIT!)
DBAF 39         899:          RTS




ASM/6800 1.4A0: DBAF SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 434; Form 21    DISK FILE DRIVERS -- DISK I/O
SDOS6800.ASM
                901: *
                902: *        DISKRWCOPYARGS -- COPY SECTORDB ADDRESS TO DISKINFO BLOCK
                903: *                SAVES CURRENT VALUE OF DCBPOINTER; SETS DCBPOINTER TO SECTORDB:DISKIN
                904: *
  DBB0          905: DISKRWCOPYARGS   EQU         *
DBB0 8D0B       906:          BSR     DISKDCBSAVE SAVE CURRENT DCB AND SET UP FROM SECTORDB:
                907:          ;LDD    TEMPX       INTO DISKINFO TABLEI SO WE CAN FIGURE OUT WHICH RDSI GOT 
DBB2 D601       908:          LDAB    TEMPX+1
DBB4 9600       909:          LDAA    TEMPX
                910:          ;STD    DSKINFO:SECTORDB,X WHEN WE DO A DISKWAITD!
DBB6 E72C       911:          STAB    (DSKINFO:SECTORDB)+1,X
DBB8 A72B       912:          STAA    DSKINFO:SECTORDB,X
                913:          ;LDX    DCB:DRIVER,X GET DRIVER VECTOR ENTRY POINT TO (X)
DBBA EE07       914:          LDX     DCB:DRIVER,X
DBBC 39         915:          RTS
                916: *
                917: *        DISKDCBSAVE -- SAVE CURRENT VALUE OF DCBPOINTER
                918: *                SET TEMPX TO (X)
                919: *                SET DCBPOINTER TO SECTORDB:DISKINFO,X
                920: *                PRESERVE (X)
                921: *
  DBBD          922: DISKDCBSAVE      EQU         *
DBBD DF00       923:          STX     TEMPX       SAVE POINTER TO SECTORDB:...
                924:          ;LDX    DCBPOINTER  SAVE THE CURRENT VALUE OF THE DCBPOINTER
DBBF DE06       925:          LDX     DCBPOINTER
DBC1 FFAF1B     926:          STX     DCBPTRSAVE
                927:          ;LDX    TEMPX       GET SECTORDB: POINTER AGAIN
DBC4 DE00       928:          LDX     TEMPX
                929:          ;LDX    SECTORDB:DISKINFO,X AND SET UP DCB POINTER FROM SECTORDB:
DBC6 EE00       930:          LDX     SECTORDB:DISKINFO,X
DBC8 DF06       931:          STX     DCBPOINTER
DBCA 39         932:          RTS
                933: *
                934: *        SECTORDRIVER -- LOADS (X) WITH DCBPOINTER; PASS CONTROL TO (A,B)
                935: *
  DBCB          936: SECTORDRIVER     EQU         *
                937:          ;PSHD               SET UP FAKE RETURN ADDRESS
DBCB 37         938:          PSHB
DBCC 36         939:          PSHA
                940:          ;LDX    DCBPOINTER  AS PROMISED




ASM/6800 1.4A0: DBCD SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 435; Form 21    DISK FILE DRIVERS -- DISK I/O
SDOS6800.ASM
DBCD DE06       941:          LDX     DCBPOINTER
DBCF 39         942:          RTS                 PASS CONTROL




ASM/6800 1.4A0: DBCF SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 436; Form 22    BLOCK MOVE UP ROUTINE
SDOS6800.ASM
  0001            2:          IF      M6800!M6801
  0004            3: LIMIT    EQU     4           TRANSFER LIMIT ADDRESS
  0006            4: BLOCKMOVEX       EQU         6 SCRATCH PAD LOCATIONS
                  5: 
  DBD0            6: BLOCKMOVE        ; PRESERVES DCBPOINTER
                  7: *        BLOCKMOVEDOWN -- MOVE BLOCK AT (X) TO (Y) FOR (D) BYTES
                  8: *        (Y) = LOCATION ZERO
                  9: *        ON EXIT, (X) IS OLD (X)+(D)
                 10: *                 (Y) IS OLD (Y)+(D)
                 11: *        COPIES LARGE BLOCKS AT 17uS. PER BYTE
                 12: *        ASSUMES COPY-TO REGION DOES NOT OVERLAP COPY-FROM REGION
                 13: *        OR THAT "FROM" >= "TO"
                 14: *
  DBD0           15: BLOCKMOVEDOWN    EQU         *
DBD0 DF02        16:          STX     FROMPOINTER SAVE WHERE TO COPY FROM
                 17:          ;ADDD   FROMPOINTER COMPUTE ADDRESS OF BYTE PAST END OF FROM RE
DBD2 DB03        18:          ADDB    FROMPOINTER+1
DBD4 9902        19:          ADCA    FROMPOINTER
                 20:          ;STD    LIMIT       SAVE AS LIMIT ADDRESS
DBD6 D705        21:          STAB    LIMIT+1
DBD8 9704        22:          STAA    LIMIT
                 23:          ;LDD    DCBPOINTER  SAVE DCB POINTER
DBDA D607        24:          LDAB    DCBPOINTER+1
DBDC 9606        25:          LDAA    DCBPOINTER
                 26:          ;PSHD
DBDE 37          27:          PSHB
DBDF 36          28:          PSHA
                 29:          ;LDB    LIMIT+1     RESTORE (B)...
DBE0 D605        30:          LDAB    LIMIT+1
DBE2 D003        31:          SUBB    FROMPOINTER+1 (B):= COUNT MOD 256
DBE4 C501        32:          BITB    #%00000001  GOING TO MOVE TO AN EVEN NUMBER OF BYTES ?
DBE6 270E        33:          BEQ     BLOCKMOVEDOWNE B/ YES
                 34:          ;LDA    ,X+         FETCH ODD BYTE FROM "FROM" AREA
DBE8 A600        35:          LDAA    0,X
DBEA 08          36:          INX
DBEB DF02        37:          STX     FROMPOINTER (TO COPY ODD BYTE TAKES 37 CYCLES)
                 38:          ;LDX    TOPOINTER   STORE BYTE INTO "TO" AREA
DBED DE00        39:          LDX     TOPOINTER
                 40:          ;STA    ,X+
DBEF A700        41:          STAA    0,X




ASM/6800 1.4A0: DBF1 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 437; Form 22    BLOCK MOVE UP ROUTINE
SDOS6800.ASM
DBF1 08          42:          INX
DBF2 DF00        43:          STX     TOPOINTER
                 44:          ;LDX    FROMPOINTER GET SET TO MOVE BYTE PAIR
DBF4 DE02        45:          LDX     FROMPOINTER
  DBF6           46: BLOCKMOVEDOWNE   ; EVEN NUMBER OF BYTES LEFT TO MOVE
DBF6 C502        47:          BITB    #%00000010  TWO BYTES LEFT TO MOVE BEFORE MULTIPLE OF 4 REACHED ?
DBF8 2714        48:          BEQ     BLOCKMOVEDOWNA B/ NO, READY TO MOVE MULTIPLES OF 4 BYTES
                 49:          ;LDD    ,X++        FETCH BYTE PAIR
DBFA E601        50:          LDAB    (0)+1,X
DBFC A600        51:          LDAA    0,X
DBFE 08          52:          INX
DBFF 08          53:          INX
DC00 DF02        54:          STX     FROMPOINTER (TO COPY BYTE PAIR TAKES 28 CYCLES/BYTE)
                 55:          ;LDX    TOPOINTER   WHERE TO PUT BYTE PAIR
DC02 DE00        56:          LDX     TOPOINTER
                 57:          ;STD    ,X++
DC04 E701        58:          STAB    (0)+1,X
DC06 A700        59:          STAA    0,X
DC08 08          60:          INX
DC09 08          61:          INX
DC0A DF00        62:          STX     TOPOINTER
                 63:          ;LDX    FROMPOINTER GET SET TO MOVE 4 BYTES AT A TIME
DC0C DE02        64:          LDX     FROMPOINTER
DC0E D603        65: BLOCKMOVEDOWNA   LDAB        FROMPOINTER+1 DO WE STILL HAVE TO MOVE A MULTIPLE OF 16 B
DC10 D005        66:          SUBB    LIMIT+1     (B):= COUNT MOD 256
DC12 C50F        67:          BITB    #%00001111  ....?
DC14 2734        68:          BEQ     BLOCKMOVEDOWNB B/ YEP.
                 69: *
                 70: *        MOVE 4 BYTES AT A TIME UNTIL A MULTIPLE OF 16 IS LEFT TO MOVE
                 71: *        COPY RATE IS 23.5 uS. PER BYTE
                 72: *
  DC16           73: BLOCKMOVEDOWN4   ;LDD        2,X GET 2ND AND 3RD BYTE...
DC16 E603        74:          LDAB    (2)+1,X
DC18 A602        75:          LDAA    2,X
                 76:          ;LDX    ,X          AND 1ST AND 2ND BYTES FROM THE "FROM" AREA
DC1A EE00        77:          LDX     0,X
DC1C DF06        78:          STX     BLOCKMOVEX  SAVE 1ST AND 2ND BYTES
                 79:          ;LDX    TOPOINTER   NO STORE 4 BYTES TO "TO" AREA
DC1E DE00        80:          LDX     TOPOINTER
                 81:          ;STD    2,X         STORE 2ND AND 3RD BYTE




ASM/6800 1.4A0: DC20 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 438; Form 22    BLOCK MOVE UP ROUTINE
SDOS6800.ASM
DC20 E703        82:          STAB    (2)+1,X
DC22 A702        83:          STAA    2,X
                 84:          ;LDD    BLOCKMOVEX
DC24 D607        85:          LDAB    BLOCKMOVEX+1
DC26 9606        86:          LDAA    BLOCKMOVEX
                 87:          ;STD    ,X          STORE 1ST AND SECOND BYTES
DC28 E701        88:          STAB    (0)+1,X
DC2A A700        89:          STAA    0,X
DC2C D601        90:          LDAB    TOPOINTER+1 ADVANCE POINTERS BY 4 BYTES
DC2E CB04        91:          ADDB    #4
DC30 D701        92:          STAB    TOPOINTER+1
DC32 2403        93:          BCC     *+5
                 94:          ;INC    TOPOINTER
DC34 7C0000      95:          INC     TOPOINTER
DC37 D603        96:          LDAB    FROMPOINTER+1
DC39 CB04        97:          ADDB    #4
DC3B D703        98:          STAB    FROMPOINTER+1
DC3D 2403        99:          BCC     *+5
                100:          ;INC    FROMPOINTER
DC3F 7C0002     101:          INC     FROMPOINTER
                102:          ;LDX    FROMPOINTER SET UP FOR NEXT LOOP ITERATION
DC42 DE02       103:          LDX     FROMPOINTER
DC44 D005       104:          SUBB    LIMIT+1     MULTIPLE OF 16 BYTES LEFT TO MOVE ?
DC46 C50F       105:          BITB    #%00001111  ....?
DC48 26CC       106:          BNE     BLOCKMOVEDOWN4 B/ NOPE, MOVE ANOTHER 4 BYTES
DC4A 9C04       107: BLOCKMOVEDOWNB   CPX         LIMIT YES, ALL DONE MOVING BYTES ?
DC4C 277A       108:          BEQ     BLOCKMOVEDOWND B/ YES, LEAVE!
                109: *
                110: *        MOVE 16 BYTES AT A TIME UNTIL TRANSFER IS COMPLETE
                111: *        COPY RATE IS 17.1 uS. PER BYTE
                112: *
  DC4E          113: BLOCKMOVEDOWN16  EQU         *
                114:          ;LDD    0+2,X       COPY 1ST 4 BYTES
DC4E E603       115:          LDAB    (0+2)+1,X
DC50 A602       116:          LDAA    0+2,X
                117:          ;LDX    0+0,X
DC52 EE00       118:          LDX     0+0,X
DC54 DF06       119:          STX     BLOCKMOVEX
                120:          ;LDX    TOPOINTER
DC56 DE00       121:          LDX     TOPOINTER




ASM/6800 1.4A0: DC56 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 439; Form 22    BLOCK MOVE UP ROUTINE
SDOS6800.ASM
                122:          ;STD    0+2,X
DC58 E703       123:          STAB    (0+2)+1,X
DC5A A702       124:          STAA    0+2,X
                125:          ;LDD    BLOCKMOVEX
DC5C D607       126:          LDAB    BLOCKMOVEX+1
DC5E 9606       127:          LDAA    BLOCKMOVEX
                128:          ;STD    0+0,X
DC60 E701       129:          STAB    (0+0)+1,X
DC62 A700       130:          STAA    0+0,X
                131:          ;LDX    FROMPOINTER COPY 2ND GROUP OF 4 BYTES
DC64 DE02       132:          LDX     FROMPOINTER
                133:          ;LDD    4+2,X
DC66 E607       134:          LDAB    (4+2)+1,X
DC68 A606       135:          LDAA    4+2,X
                136:          ;LDX    4+0,X
DC6A EE04       137:          LDX     4+0,X
DC6C DF06       138:          STX     BLOCKMOVEX
                139:          ;LDX    TOPOINTER
DC6E DE00       140:          LDX     TOPOINTER
                141:          ;STD    4+2,X
DC70 E707       142:          STAB    (4+2)+1,X
DC72 A706       143:          STAA    4+2,X
                144:          ;LDD    BLOCKMOVEX
DC74 D607       145:          LDAB    BLOCKMOVEX+1
DC76 9606       146:          LDAA    BLOCKMOVEX
                147:          ;STD    4+0,X
DC78 E705       148:          STAB    (4+0)+1,X
DC7A A704       149:          STAA    4+0,X
                150:          ;LDX    FROMPOINTER COPY 3RD GROUP OF 4 BYTES
DC7C DE02       151:          LDX     FROMPOINTER
                152:          ;LDD    8+2,X
DC7E E60B       153:          LDAB    (8+2)+1,X
DC80 A60A       154:          LDAA    8+2,X
                155:          ;LDX    8+0,X
DC82 EE08       156:          LDX     8+0,X
DC84 DF06       157:          STX     BLOCKMOVEX
                158:          ;LDX    TOPOINTER
DC86 DE00       159:          LDX     TOPOINTER
                160:          ;STD    8+2,X
DC88 E70B       161:          STAB    (8+2)+1,X




ASM/6800 1.4A0: DC8A SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 440; Form 22    BLOCK MOVE UP ROUTINE
SDOS6800.ASM
DC8A A70A       162:          STAA    8+2,X
                163:          ;LDD    BLOCKMOVEX
DC8C D607       164:          LDAB    BLOCKMOVEX+1
DC8E 9606       165:          LDAA    BLOCKMOVEX
                166:          ;STD    8+0,X
DC90 E709       167:          STAB    (8+0)+1,X
DC92 A708       168:          STAA    8+0,X
                169:          ;LDX    FROMPOINTER COPY 4TH GROUP OF 4 BYTES
DC94 DE02       170:          LDX     FROMPOINTER
                171:          ;LDD    12+2,X
DC96 E60F       172:          LDAB    (12+2)+1,X
DC98 A60E       173:          LDAA    12+2,X
                174:          ;LDX    12+0,X
DC9A EE0C       175:          LDX     12+0,X
DC9C DF06       176:          STX     BLOCKMOVEX
                177:          ;LDX    TOPOINTER
DC9E DE00       178:          LDX     TOPOINTER
                179:          ;STD    12+2,X
DCA0 E70F       180:          STAB    (12+2)+1,X
DCA2 A70E       181:          STAA    12+2,X
                182:          ;LDD    BLOCKMOVEX
DCA4 D607       183:          LDAB    BLOCKMOVEX+1
DCA6 9606       184:          LDAA    BLOCKMOVEX
                185:          ;STD    12+0,X
DCA8 E70D       186:          STAB    (12+0)+1,X
DCAA A70C       187:          STAA    12+0,X
DCAC D601       188:          LDAB    TOPOINTER+1 ADVANCE POINTERS BY 16 BYTES
DCAE CB10       189:          ADDB    #16
DCB0 D701       190:          STAB    TOPOINTER+1
DCB2 2403       191:          BCC     *+5
                192:          ;INC    TOPOINTER
DCB4 7C0000     193:          INC     TOPOINTER
DCB7 D603       194:          LDAB    FROMPOINTER+1
DCB9 CB10       195:          ADDB    #16
DCBB D703       196:          STAB    FROMPOINTER+1
DCBD 2403       197:          BCC     *+5
                198:          ;INC    FROMPOINTER
DCBF 7C0002     199:          INC     FROMPOINTER
                200:          ;LDX    FROMPOINTER CHECK TO SEE IF COPY IS COMPLETE
DCC2 DE02       201:          LDX     FROMPOINTER




ASM/6800 1.4A0: DCC4 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 441; Form 22    BLOCK MOVE UP ROUTINE
SDOS6800.ASM
DCC4 9C04       202:          CPX     LIMIT       AT LIMIT OF "FROM" REGION ?
DCC6 2686       203:          BNE     BLOCKMOVEDOWN16 B/ NO, GO MOVE ANOTHER 16 BYTES
  DCC8          204: BLOCKMOVEDOWND   ; BLOCK TRANSFER IS COMPLETE!
                205:          ;PULD               RESTORE DCBPOINTER
DCC8 32         206:          PULA
DCC9 33         207:          PULB
                208:          ;STD    DCBPOINTER
DCCA D707       209:          STAB    DCBPOINTER+1
DCCC 9706       210:          STAA    DCBPOINTER
DCCE 39         211:          RTS




ASM/6800 1.4A0: DCCE SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 442; Form 22    BLOCK MOVE UP ROUTINE
SDOS6800.ASM
  0001          213:          ELSE    (M6809)
 *S*            214:          PAGE
 *S*            215: BLOCKMOVE        ; ENTRY POINT TO BLOCKMOVE FOR '09, PRESERVES DCBPOINTER
 *S*            216: *        BLOCKMOVEDOWN -- 6809 VERSION (5 uS./byte, average)
 *S*            217: *        (X) = from address
 *S*            218: *        (Y) = to address
 *S*            219: *        (D) = count (0..65535)
 *S*            220: *        On exit, (X) has old (X)+(D); (Y) has old (Y)+(D)
 *S*            221: *        ASSUMES THAT COPY-TO REGION DOES NOT OVERLAP COPY-FROM REGION,
 *S*            222: *        OR THAT "FROM" >= "TO".
 *S*            223: *
 *S*            224: BLOCKMOVEDOWN
 *S*            225:          LEAU    D,X         COMPUTE END OF TRANSFER ADDRESS
 *S*            226:          PSHS    U           SAVE ON STACK
 *S*            227:          BITB    #1          TAKE CARE OF "ODD" BYTE
 *S*            228:          BEQ     BLOCKMOVEDOWN0
 *S*            229:          LDAA    ,X+         MOVE ODD BYTE
 *S*            230:          STAA    ,Y+         THEN WE CAN IGNORE LSB OF D
 *S*            231: BLOCKMOVEDOWN0
 *S*            232:          COMB                MAP BITS 3-1: 0->,1->6,...,N->7-N
 *S*            233:          ANDB    #%1110      BRANCH INTO COPY LOOP...
 *S*            234:          ASLB                AT PROPER POINT
 *S*            235:          LDU     #BLOCKMOVEDOWNLOOP+4
 *S*            236:          ;JMP    B,U         MULTIPLE OF 16 TAKES US TO CMPX 0,S
 *S*            237:          JMP     B
 *S*            238:          PAGE
 *S*            239: BLOCKMOVEDOWNLOOP
 *S*            240:          ;LDD    ,X++        (CAN'T GET HERE DIRECTLY FROM JMP B,U)
 *S*            241:          LDAB    (0)+1,X
 *S*            242:          LDAA    0,X
 *S*            243:          INX
 *S*            244:          INX
 *S*            245:          ;STD    ,Y++
 *S*            246:          STAB    +1
 *S*            247:          STAA    
 *S*            248:          ;LDD    ,X++        1110
 *S*            249:          LDAB    (0)+1,X
 *S*            250:          LDAA    0,X
 *S*            251:          INX
 *S*            252:          INX




ASM/6800 1.4A0: DCCE SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 443; Form 22    BLOCK MOVE UP ROUTINE
SDOS6800.ASM
 *S*            253:          ;STD    ,Y++
 *S*            254:          STAB    +1
 *S*            255:          STAA    
 *S*            256:          ;LDD    ,X++        1100
 *S*            257:          LDAB    (0)+1,X
 *S*            258:          LDAA    0,X
 *S*            259:          INX
 *S*            260:          INX
 *S*            261:          ;STD    ,Y++
 *S*            262:          STAB    +1
 *S*            263:          STAA    
 *S*            264:          ;LDD    ,X++        1010
 *S*            265:          LDAB    (0)+1,X
 *S*            266:          LDAA    0,X
 *S*            267:          INX
 *S*            268:          INX
 *S*            269:          ;STD    ,Y++
 *S*            270:          STAB    +1
 *S*            271:          STAA    
 *S*            272:          ;LDD    ,X++        1000
 *S*            273:          LDAB    (0)+1,X
 *S*            274:          LDAA    0,X
 *S*            275:          INX
 *S*            276:          INX
 *S*            277:          ;STD    ,Y++
 *S*            278:          STAB    +1
 *S*            279:          STAA    
 *S*            280:          ;LDD    ,X++        0110
 *S*            281:          LDAB    (0)+1,X
 *S*            282:          LDAA    0,X
 *S*            283:          INX
 *S*            284:          INX
 *S*            285:          ;STD    ,Y++
 *S*            286:          STAB    +1
 *S*            287:          STAA    
 *S*            288:          ;LDD    ,X++        0100
 *S*            289:          LDAB    (0)+1,X
 *S*            290:          LDAA    0,X
 *S*            291:          INX
 *S*            292:          INX




ASM/6800 1.4A0: DCCE SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 444; Form 22    BLOCK MOVE UP ROUTINE
SDOS6800.ASM
 *S*            293:          ;STD    ,Y++
 *S*            294:          STAB    +1
 *S*            295:          STAA    
 *S*            296:          ;LDD    ,X++        0010
 *S*            297:          LDAB    (0)+1,X
 *S*            298:          LDAA    0,X
 *S*            299:          INX
 *S*            300:          INX
 *S*            301:          ;STD    ,Y++
 *S*            302:          STAB    +1
 *S*            303:          STAA    
 *S*            304:          CMPX    0,S         0000
 *S*            305:          BNE     BLOCKMOVEDOWNLOOP
 *S*            306:          ;LEAS   2,S         POP LIMIT ADDRESS
 *S*            307:          IF      2<0
 *S*            308:          RPT     -2
 *S*            309:          DES
 *S*            310:          ELSE
 *S*            311:          RPT     2
 *S*            312:          INS
 *S*            313:          FIN
 *S*            314:          RTS
                315:          FIN     M6800!M6801




ASM/6800 1.4A0: DCCE SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 445; Form 23    CLOCK TICK AND TIMEOUT ROUTINES
SDOS6800.ASM
                  2: *        TASKING AND INTERRUPT HANDLING FOR SDOS
                  3: *
                  4: *        CLOCKTICKED -- BUMPS SDOS:CLOCK
                  5: *        ADJUSTS THE DATE IF NEEDED
                  6: *        WAKES UP TIMEOUT TASK
                  7: *        INVOKED AS EXIT OF SOME INTERRUPT ROUTINE
                  8: *        (A) ON ENTRY = # CLOCK TICKS (60THS SEC) ELAPSED SINCE LAST CALL
                  9: *        RUNS WITH INTERRUPTS DISABLED
                 10: *
  DCCF           11: CLOCKTICKED      EQU         *
DCCF 16          12:          TAB
DCD0 BBAE5B      13:          ADDA    CLOCKTICKEDEVENT SET UP WAKEUP COUNT FOR TIMEOUT TASK
DCD3 B7AE5B      14:          STAA    CLOCKTICKEDEVENT
DCD6 FBAE0D      15:          ADDB    CODE+SDOS:CLOCK+2 ADJUST TIME-OF-DAY...
DCD9 F7AE0D      16:          STAB    CODE+SDOS:CLOCK+2 AS MEASURED IN 60THS OF A SECOND
DCDC 2407        17:          BCC     CLOCKTICK1  B/ DON'T NEED TO UPDATE UPPER 2 BYTES
                 18:          ;LDX    CODE+SDOS:CLOCK UPDATE UPPER 2 BYTES
DCDE FEAE0B      19:          LDX     CODE+SDOS:CLOCK
DCE1 08          20:          INX
DCE2 FFAE0B      21:          STX     CODE+SDOS:CLOCK
  DCE5           22: CLOCKTICK1       ; DID WE JUST PASS MIDNITE ?
DCE5 B6AE0C      23:          LDAA    CODE+SDOS:CLOCK+1 IS CODE+SDOS:CLOCK - "MIDNITE" >= 0 ?
                 24:          ;SUBD   #6656       (6656 = 5184000 MOD 65536; TRY IT!)
DCE8 C000        25:          SUBB    #(6656)&$FF
DCEA 821A        26:          SBCA    #(6656)/256
DCEC B6AE0B      27:          LDAA    CODE+SDOS:CLOCK
DCEF 824F        28:          SBCA    #79         ( = 5184000 / 65536 )
DCF1 254D        29:          BCS     CLOCKTICKEXIT B/ NOT MIDNITE, GET OUT QUICK!
                 30:          ;LDX    #0          JUST PAST MIDNITE, RESET THE CLOCK
DCF3 CE0000      31:          LDX     #0
DCF6 FFAE0B      32:          STX     CODE+SDOS:CLOCK SET CLOCK:=CLOCK MOD (1 DAY)
DCF9 F7AE0D      33:          STAB    CODE+SDOS:CLOCK+2
DCFC B6AE0E      34:          LDAA    CODE+SDOS:DAY INCREMENT DAY NUMBER
DCFF 8B01        35:          ADDA    #1          BECAUSE "INCA" DOESN'T WORK ON BCD STUFF
DD01 19          36:          DAA
DD02 B7AE0E      37:          STAA    CODE+SDOS:DAY
DD05 B6AE0F      38:          LDAA    CODE+SDOS:MONTH EXCEED # DAYS ALLOWED FOR THIS MONTH ?
DD08 8D39        39:          BSR     BCDTOBIN    CAUSE I DON'T THINK GOOD IN BCD
DD0A B7AE59      40:          STAA    DAYSPERMONTHX+1 (GO LOOK UP IN TABLE)
                 41:          ;LDX    DAYSPERMONTHX




ASM/6800 1.4A0: DD0D SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 446; Form 23    CLOCK TICK AND TIMEOUT ROUTINES
SDOS6800.ASM
DD0D FEAE58      42:          LDX     DAYSPERMONTHX
DD10 B6AE0E      43:          LDAA    CODE+SDOS:DAY (GET CURRENT DAY NUMBER)
                 44:          ;CMPA   (DAYSPERMONTH-1)&$FF,X (COMPARE TO # DAYS ALLOWED IN THIS MONTH)
DD13 A14F        45:          CMPA    (DAYSPERMONTH-1)&$FF,X
DD15 2329        46:          BLS     CLOCKTICKEXIT B/ LOWER, BYE!
                 47:          ;CMPA   #$29        # DAYS FOR THIS MONTH EXCEEDED
DD17 8129        48:          CMPA    #$29
DD19 2609        49:          BNE     CLOCKTICK2  B/ MUST SWITCH TO NEXT MONTH
DD1B B6AE10      50:          LDAA    CODE+SDOS:YEAR I HATE LEAP YEAR STUFF; IS THIS A LEAP YEAR ?
DD1E 8D23        51:          BSR     BCDTOBIN    NEED I SAY MORE ?
DD20 8503        52:          BITA    #3          IT MAKES THE "A MULTIPLE OF 4" TEST EASY
DD22 271C        53:          BEQ     CLOCKTICKEXIT B/ FEB 29 IS LEGAL
  DD24           54: CLOCKTICK2       ; TIME FOR NEW MONTH
DD24 8601        55:          LDAA    #1          SET DAY TO "1ST OF MONTH"
DD26 B7AE0E      56:          STAA    CODE+SDOS:DAY
DD29 BBAE0F      57:          ADDA    CODE+SDOS:MONTH BUMP MONTH
DD2C 19          58:          DAA                 IN DECIMAL
DD2D B7AE0F      59:          STAA    CODE+SDOS:MONTH
                 60:          ;CMPA   #$12        BET YOU CAN'T GUESS WHAT THIS MAGIC CONSTANT IS...
DD30 8112        61:          CMPA    #$12
DD32 230C        62:          BLS     CLOCKTICKEXIT B/ MONTH IS OK, BYEBYE!
DD34 8601        63:          LDAA    #1          NEW YEAR STRUCK, SET MONTH TO "JANUARY"
DD36 B7AE0F      64:          STAA    CODE+SDOS:MONTH
DD39 BBAE10      65:          ADDA    CODE+SDOS:YEAR BUMP THE YEAR
DD3C 19          66:          DAA                 ALSO IN DECIMAL (WHY'D I PICK THAT??)
DD3D B7AE10      67:          STAA    CODE+SDOS:YEAR THAT'S ALL YOU'LL GET ME TO DO!
  DD40           68: CLOCKTICKEXIT    EQU         *
                 69:          ;JMP    FORCESCHEDULE TO FORCE THE TIMEOUT TASK TO RUN
DD40 7EDDCB      70:          JMP     FORCESCHEDULE
                 71: *
                 72: *        BCDTOBIN -- CONVERTS BCD NUMBER IN (A) TO BINARY EQUIVALENT IN (A)
                 73: *
  DD43           74: BCDTOBIN EQU     *
DD43 16          75:          TAB
DD44 C40F        76:          ANDB    #$F         = RIGHT DIGIT
DD46 10          77:          SBA
DD47 37          78:          PSHB
DD48 44          79:          LSRA                = LEFT DIGIT * 8
DD49 16          80:          TAB
DD4A 44          81:          LSRA                = LEFT DIGIT * 4




ASM/6800 1.4A0: DD4B SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 447; Form 23    CLOCK TICK AND TIMEOUT ROUTINES
SDOS6800.ASM
DD4B 44          82:          LSRA                = LEFT DIGIT * 2
DD4C 1B          83:          ABA                 = LEFT DIGIT * 10
DD4D 33          84:          PULB                ADD RIGHT DIGIT
DD4E 1B          85:          ABA                 = LEFT DIGIT * 10 + RIGHT DIGIT
DD4F 39          86:          RTS                 LOOK MA! A SUBR OF ALL(MOST) SINGLE BYTE INSTRUCTIONS!
                 87: 
DD50 31283130    88: DAYSPERMONTH     FCB         $31,$28,$31,$30,$31,$30,$31,$31,$30,$31,$30,$31




ASM/6800 1.4A0: DD58 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 448; Form 23    CLOCK TICK AND TIMEOUT ROUTINES
SDOS6800.ASM
                 90: *        TIMEOUT TASK CODE
                 91: *        FOR EACH WAKEUP, PROCESS NEXT TIMEOUT LIST ELEMENT
                 92: *        SUBTRACTS 1 TICK FOR EACH TIMEOUT LIST ELEMENT FROM TIMEOUT:FUSE
                 93: *        IF FUSE GETS ZEROED (OR GOES NEGATIVE), TRIGGERS ASSOCIATED TIMEOUT ROUTINE
                 94: *        ALL LIST ELEMENT UPDATING IS DONE WITH INTERRUPTS DISABLED...
                 95: *        TO PREVENT NASTY TIMING SPLINTERS
                 96: *
  DD5C           97: TIMEOUTTASKBORED EQU         *
                 98:          ;LDX    #CLOCKTICKEDEVENT WAKE ME UP SOMEDAY
DD5C CEAE5B      99:          LDX     #CLOCKTICKEDEVENT
                100:          ;JSR    WAITEVENT$  ZZZZZZZ....
DD5F BDDE72     101:          JSR     WAITEVENT$
  DD62          102: TIMEOUTTASK      EQU         *
                103:          ;LDX    CODE+SDOS:CONFIGURATION START AT TOP OF TIMEOUT LIST
DD62 FEAE03     104:          LDX     CODE+SDOS:CONFIGURATION
                105:          ;LDX    CNFG:TIMEOUTLIST,X
DD65 EE22       106:          LDX     CNFG:TIMEOUTLIST,X
                107: *        BEQ     TIMEOUTTASKBORED B/ NO TIMEOUT LIST
                108: *        ASSERT: TIMEOUT LIST IS *NOT* EMPTY!
  DD67          109: TIMEOUTTASKL     ; PROCESS TIMEOUT LIST ELEMENT
DD67 FFAE5C     110:          STX     TIMEOUTLEPTR SET UP LIST ELEMENT POINTER
                111:          ;LDX    #TIMEOUTLEH FIRE UP THE LIST ELEMENT HANDLER
DD6A CEDD9B     112:          LDX     #TIMEOUTLEH
                113:          ;JSR    STARTIO$
DD6D BDDEA5     114:          JSR     STARTIO$




ASM/6800 1.4A0: DD6D SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 449; Form 23    CLOCK TICK AND TIMEOUT ROUTINES
SDOS6800.ASM
                116: *
                117: *        The following code is the secondary SDOS checksum check.
                118: *        Its purpose is to detect that the first checksum routine has
                119: *        been tampered with, and to blow up unpredictably when this occurs.
                120: *
                121:          ;ldx    exitscanptr pick up place where we left off last
DD70 DE02       122:          LDX     exitscanptr
                123:          ;ldb    exitpartialchksum get partial checksum as of last round
DD72 D604       124:          LDAB    exitpartialchksum
DD74 58         125:          aslb                do 1 step of incremental checksum check
DD75 E90F       126:          adcb    15,x
                127:          ;stb    exitpartialchksum save partial checksum value
DD77 D704       128:          STAB    exitpartialchksum
DD79 08         129:          inx                 bump pointer for next round
DD7A 8CB837     130:          cpx     #exitchksumend-15 reached end of area to be checksummed?
DD7D 2609       131:          bne     secondarychecksum1 b/ not yet
                132:          ;ldx    #exitchksumbase-15 yes, restart pointer from beginning
DD7F CEB7FB     133:          LDX     #exitchksumbase-15
                134: *        Assert: exitpartialchksum is zero here (if EXIT not tampered)
DD82 FBAE8D     135:          addb    Usertasktcb+tcb:stack+1 add checksum value to user stack pointer
                136:          ;stb    Usertasktcb+tcb:stack+1 which causes user to die mysteriously if <>0!
DD85 F7AE8D     137:          STAB    Usertasktcb+tcb:stack+1
  DD88          138: secondarychecksum1           ; end of secondary checksum code
DD88 DF02       139:          stx     exitscanptr save scan pointer for next clock tick
                140: *
                141: *        NOW, FINISH PROCESSING THE CLOCK TICK
                142: *
                143:          ;LDX    #CLOCKTICKEDEVENT WAKE ME UP WHEN THE SUN SHINES AGAIN
DD8A CEAE5B     144:          LDX     #CLOCKTICKEDEVENT
                145:          ;DEC    ,X          TO TAKE CARE OF THE CLOCK TICK WE JUST PROCESSED
DD8D 6A00       146:          DEC     0,X
                147:          ;JSR    WAITEVENT$  ZZZZZZ....
DD8F BDDE72     148:          JSR     WAITEVENT$
                149:          ;LDX    TIMEOUTLEPTR WAKE UP, SLEEPYHEAD!
DD92 FEAE5C     150:          LDX     TIMEOUTLEPTR
                151:          ;LDX    TIMEOUT:LINK,X FIND NEXT TIMEOUT LIST ELEMENT
DD95 EE00       152:          LDX     TIMEOUT:LINK,X
DD97 26CE       153:          BNE     TIMEOUTTASKL B/ NOT AT END OF LIST, GO PROCESS THIS ELEMENT
DD99 20C7       154:          BRA     TIMEOUTTASK END OF LIST HIT, START AT TOP OF LIST




ASM/6800 1.4A0: DD99 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 450; Form 23    CLOCK TICK AND TIMEOUT ROUTINES
SDOS6800.ASM
                156: *        TIMEOUT LIST ELEMENT PROCESSOR
                157: *        STARTED BY "STARTIO" CALL FROM TIMEOUT TASK
                158: *
  DD9B          159: TIMEOUTLEH       EQU         *
                160:          ;LDX    TIMEOUTLEPTR NOTE: ALL INTERRUPTS ARE DISABLED HERE!
DD9B FEAE5C     161:          LDX     TIMEOUTLEPTR
                162:          ;LDD    TIMEOUT:FUSE,X DO DOUBLE PRECISION DECREMENT
DD9E E603       163:          LDAB    (TIMEOUT:FUSE)+1,X
DDA0 A602       164:          LDAA    TIMEOUT:FUSE,X
                165:          ;BEQD   IORTI1      B/ THIS TIMEOUT LIST ELEMENT IS DE-FUSED
DDA2 2603       166:          BNE     MACRO:0030
DDA4 5D         167:          TSTB
DDA5 272A       168:          BEQ     IORTI1
  DDA7          169: MACRO:0030
DDA7 F0AE5A     170:          SUBB    NTIMEOUTBLKS SUBTRACT # CLOCK TICKS THAT WILL PASS
DDAA 8200       171:          SBCA    #0          BEFORE WE GET BACK TO THIS LIST ELEMENT AGAIN
DDAC 2509       172:          BCS     TIMEOUTLEH3 B/ TIMED OUT!
                173:          ;STD    TIMEOUT:FUSE,X PERHAPS TIME OUT DID NOT OCCUR; STORE FUSE BACK
DDAE E703       174:          STAB    (TIMEOUT:FUSE)+1,X
DDB0 A702       175:          STAA    TIMEOUT:FUSE,X
                176:          ;BNED   IORTI1      B/ TIMEOUT DID NOT OCCUR
DDB2 261D       177:          BNE     IORTI1
DDB4 5D         178:          TSTB
DDB5 261A       179:          BNE     IORTI1
  DDB7          180: TIMEOUTLEH3      ; TIMEOUT OCCURRED
                181:          ;CLR    TIMEOUT:FUSE,X DEFUSE THIS LIST ELEMENT
DDB7 6F02       182:          CLR     TIMEOUT:FUSE,X
                183:          ;CLR    TIMEOUT:FUSE+1,X
DDB9 6F03       184:          CLR     TIMEOUT:FUSE+1,X
                185:          ;LDD    TIMEOUT:DCB,X FETCH DCB POINTER FROM TIMEOUT BLOCK
DDBB E607       186:          LDAB    (TIMEOUT:DCB)+1,X
DDBD A606       187:          LDAA    TIMEOUT:DCB,X
                188:          ;JMP    [TIMEOUT:ROUTINE,X] AND GO TO THE DEVICE INTERRUPT ROUTINE
DDBF EE04       189:          LDX     TIMEOUT:ROUTINE,X
DDC1 6E00       190:          JMP     0,X
                191: *        IT WILL DO THE IORTI FOR US




ASM/6800 1.4A0: DDC1 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 451; Form 24    *** TASK SCHEDULER ***
SDOS6800.ASM
                  2: *        ASSERT: INTERRUPTS ARE OFF AND SDOS:STACKSWITCHED=:FF
                  3: *
  DDC3            4: TASKRTI  ;LDX    CODE+SDOS:CURRENTASK QUICK EXIT FROM INTERRUPT BACK TO TASK
DDC3 FEAE1E       5:          LDX     CODE+SDOS:CURRENTASK
DDC6 AE02         6:          LDS     TCB:STACK,X POINTS TO CONTEXT BLOCK; WE NEVER SAVED 0-7
  DDC8            7: FORCERTI ;JMP    INTRTI      EXIT FROM INTERRUPT ROUTINE
DDC8 7EAF83       8:          JMP     INTRTI
                  9: 
  DDCB           10: FORCESCHEDULE    ; FORCE SCHEDULER TO LOOK AROUND AFTER INTERRUPT
                 11: * NOTE: 6809 DPR REGISTER IS UNDEFINED HERE!
                 12:          ;CLR    SURPRISE    SYSTEM STATE HAS CHANGED SIGNIFICANTLY
DDCB 7FAF7A      13:          CLR     SURPRISE
  DDCE           14: IORTI    ; SYSTEM STATE HAS NOT CHANGED SIGNIFICANTLY
                 15:          ;JSR    INTDISABLE  SO WE DON'T GET INTERRUPTED...
DDCE BDAF7D      16:          JSR     INTDISABLE
                 17: *                            IF CODE+SDOS:STACKSWITCHED GOES TO -1!
  DDD1           18: IORTI1   ; ENTRY POINT FOR TIMEOUT LIST ELEMENT HANDLER
                 19:          ;DEC    CODE+SDOS:STACKSWITCHED SCHEDULER OR INTERRUPT ROUTINE ALREADY ACTIVE
DDD1 7AAE11      20:          DEC     CODE+SDOS:STACKSWITCHED
DDD4 2AF2        21:          BPL     FORCERTI    YES, GO BACK TO IT...
DDD6 B6AF7A      22:          LDAA    SURPRISE    ANYTHING INTERESTING HAPPEN ?
DDD9 BAAF79      23:          ORAA    DONTSTOPME  OR ARE WE IN TASK CRITICAL CODE ?
DDDC 26E5        24:          BNE     TASKRTI     B/ NO, GO BACK TO TASK NOW
  DDDE           25: PUSH0TO7 ; SAVE LOCATIONS 0 TO 7 IN TCB
                 26:          ;INC    CODE+SDOS:STACKSWITCHED REMEMBER THAT "STACKS ARE SWITCHED"
DDDE 7CAE11      27:          INC     CODE+SDOS:STACKSWITCHED
                 28: *                            ASSERT: SDOS:STACKSWITCHED=0
                 29:          ;JSR    INTENABLE   RE-ENABLE INTERRUPTS
DDE1 BDAF80      30:          JSR     INTENABLE
                 31:          ;LDX    CODE+SDOS:CURRENTASK BUT FIRST WE MUST SAVE THE REST OF THE TASK CONT
DDE4 FEAE1E      32:          LDX     CODE+SDOS:CURRENTASK
  0000           33:          IF      M6809
 *S*             34:          LDU     TCB:STACK,X SET DPR USED BY SCHEDULER TO LAST TASK DPR
 *S*             35:          ;LDA    REG:DP,U
 *S*             36:          LDAA    REG:DP
 *S*             37:          ;TFR    A,DP
 *S*             38:          TADP
                 39:          FIN
                 40:          ;LDD    $0           SAVE LOCATIONS 0-7
DDE7 D601        41:          LDAB    $0+1




ASM/6800 1.4A0: DDE9 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 452; Form 24    *** TASK SCHEDULER ***
SDOS6800.ASM
DDE9 9600        42:          LDAA    $0
                 43:          ;STD    TCB:SCRATCHPAD+0,X
DDEB E709        44:          STAB    (TCB:SCRATCHPAD+0)+1,X
DDED A708        45:          STAA    TCB:SCRATCHPAD+0,X
                 46:          ;LDD    $2
DDEF D603        47:          LDAB    $2+1
DDF1 9602        48:          LDAA    $2
                 49:          ;STD    TCB:SCRATCHPAD+2,X
DDF3 E70B        50:          STAB    (TCB:SCRATCHPAD+2)+1,X
DDF5 A70A        51:          STAA    TCB:SCRATCHPAD+2,X
                 52:          ;LDD    $4
DDF7 D605        53:          LDAB    $4+1
DDF9 9604        54:          LDAA    $4
                 55:          ;STD    TCB:SCRATCHPAD+4,X
DDFB E70D        56:          STAB    (TCB:SCRATCHPAD+4)+1,X
DDFD A70C        57:          STAA    TCB:SCRATCHPAD+4,X
                 58:          ;LDD    $6
DDFF D607        59:          LDAB    $6+1
DE01 9606        60:          LDAA    $6
                 61:          ;STD    TCB:SCRATCHPAD+6,X
DE03 E70F        62:          STAB    (TCB:SCRATCHPAD+6)+1,X
DE05 A70E        63:          STAA    TCB:SCRATCHPAD+6,X




ASM/6800 1.4A0: DE05 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 453; Form 24    *** TASK SCHEDULER ***
SDOS6800.ASM
  DE07           65: SCHEDLDS ; RESET TO BASE OF INTERRUPT STACK
DE07 BEAF86      66:          LDS     INTERRUPTSTACK USE INTERRUPT STACK FOR SCHEDULER'S STACK
  DE0A           67: SCHEDTOP ; START SCANNING TCB LIST
DE0A 8601        68:          LDAA    #1          WE'RE STARTING OVER, NO BAD DECISIONS
DE0C B7AF7A      69:          STAA    SURPRISE    "NO SURPRISES HAVE OCCURRED"
                 70:          ;LDX    CODE+SDOS:CONFIGURATION GET POINTER TO LIST OF TASKS
DE0F FEAE03      71:          LDX     CODE+SDOS:CONFIGURATION
                 72:          ;LDX    CNFG:TASKQUEUE,X
DE12 EE20        73:          LDX     CNFG:TASKQUEUE,X
  DE14           74: SCHEDLOOP        EQU         *
DE14 FFAE1E      75:          STX     CODE+SDOS:CURRENTASK SAVE POINTER TO THIS TCB IN CASE HE'S READY
DE17 8D0B        76:          BSR     SCHEDTEST   GO TEST WAKE UP CONDITION
DE19 2612        77:          BNE     JUSTREADY   B/ TASK JUST WENT READY!
                 78:          ;LDX    CODE+SDOS:CURRENTASK GET TCB ADDRESS
DE1B FEAE1E      79:          LDX     CODE+SDOS:CURRENTASK
                 80:          ;LDX    TCB:LNK,X   FOLLOW TO NEXT TCB
DE1E EE00        81:          LDX     TCB:LNK,X
DE20 26F2        82:          BNE     SCHEDLOOP   LOOP IF NOT END OF LIST
DE22 20E6        83:          BRA     SCHEDTOP    ELSE START PROCESSING THE LIST AGAIN
                 84: 
  DE24           85: SCHEDTEST        ; GET PARAMETER AND GO TEST WAKE-UP CONDITION
                 86:          ;LDD    TCB:COND,X  PUSH WAKE-UP SUBROUTINE ADDRESS ONTO THE STACK
DE24 E605        87:          LDAB    (TCB:COND)+1,X
DE26 A604        88:          LDAA    TCB:COND,X
                 89:          ;PSHD
DE28 37          90:          PSHB
DE29 36          91:          PSHA
                 92:          ;LDX    TCB:PARAM,X GET PARAMETER FOR WAKE-UP ROUTINE
DE2A EE06        93:          LDX     TCB:PARAM,X
DE2C 39          94:          RTS                 AND PASS CONTROL TO IT (RETURN ADDRESS PUSHED BY BSR)
                 95: **** NOTE: DPR NOT DEFINED ON ENTRY TO WAKE-UP CONDITION SUBROUTINE ****




ASM/6800 1.4A0: DE2C SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 454; Form 24    *** TASK SCHEDULER ***
SDOS6800.ASM
  DE2D           97: JUSTREADY        ; TASK JUST BECAME READY
                 98:          ;LDX    CODE+SDOS:CURRENTASK GET ADDRESS OF TCB THAT JUST WENT READY
DE2D FEAE1E      99:          LDX     CODE+SDOS:CURRENTASK
DE30 C6DE       100:          LDAB    #EXECUTING/256 MARK TCB AS 'EXECUTING'
DE32 E704       101:          STAB    TCB:COND,X  SO INVOKING WAKE-UP ROUTINE...
DE34 C63C       102:          LDAB    #EXECUTING&$FF WILL SPEED UP FURTHER DISPATCHES
DE36 E705       103:          STAB    TCB:COND+1,X
                104:          ;LDX    TCB:STACK,X GET TASK'S STACK POINTER
DE38 EE02       105:          LDX     TCB:STACK,X
DE3A A703       106:          STAA    REG:A,X     SET TASK'S A REGISTER TO WAKE UP CODE
  DE3C          107: EXECUTING        ; TASK WAS IN EXECUTION WHEN STOPPED
                108:          ;LDX    CODE+SDOS:CURRENTASK SWITCH TO TASK'S STACK
DE3C FEAE1E     109:          LDX     CODE+SDOS:CURRENTASK
  0000          110:          IF      M6809
 *S*            111:          LDU     TCB:STACK,X SELECT DPR FOR PAGE ZERO SCRATCH
 *S*            112:          ;LDA    REG:DP,U
 *S*            113:          LDAA    REG:DP
 *S*            114:          ;TFR    A,DP
 *S*            115:          TADP
                116:          FIN
                117:          ;LDD    TCB:SCRATCHPAD+0,X RESTORE LOCATIONS 0 TO 7
DE3F E609       118:          LDAB    (TCB:SCRATCHPAD+0)+1,X
DE41 A608       119:          LDAA    TCB:SCRATCHPAD+0,X
                120:          ;STD    $0
DE43 D701       121:          STAB    $0+1
DE45 9700       122:          STAA    $0
                123:          ;LDD    TCB:SCRATCHPAD+2,X
DE47 E60B       124:          LDAB    (TCB:SCRATCHPAD+2)+1,X
DE49 A60A       125:          LDAA    TCB:SCRATCHPAD+2,X
                126:          ;STD    $2
DE4B D703       127:          STAB    $2+1
DE4D 9702       128:          STAA    $2
                129:          ;LDD    TCB:SCRATCHPAD+4,X
DE4F E60D       130:          LDAB    (TCB:SCRATCHPAD+4)+1,X
DE51 A60C       131:          LDAA    TCB:SCRATCHPAD+4,X
                132:          ;STD    $4
DE53 D705       133:          STAB    $4+1
DE55 9704       134:          STAA    $4
                135:          ;LDD    TCB:SCRATCHPAD+6,X
DE57 E60F       136:          LDAB    (TCB:SCRATCHPAD+6)+1,X




ASM/6800 1.4A0: DE59 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 455; Form 24    *** TASK SCHEDULER ***
SDOS6800.ASM
DE59 A60E       137:          LDAA    TCB:SCRATCHPAD+6,X
                138:          ;STD    $6
DE5B D707       139:          STAB    $6+1
DE5D 9706       140:          STAA    $6
DE5F B6AF7A     141:          LDAA    SURPRISE    DID WE GET SURPRISED ?
DE62 27A3       142:          BEQ     SCHEDLDS    YES, GO SCHEDULE AGAIN!
                143:          ;JSR    INTDISABLE  INTERRUPTS OFF SO WE CAN DIDDLE WITHOUT TROUBLE
DE64 BDAF7D     144:          JSR     INTDISABLE
DE67 AE02       145:          LDS     TCB:STACK,X SWITCH TO USER'S STACK
                146:          ;DEC    CODE+SDOS:STACKSWITCHED FLAG "USING TASK'S STACK, NOT INTERRUPT STACK
DE69 7AAE11     147:          DEC     CODE+SDOS:STACKSWITCHED
                148: *                            ASSERT: SDOS:STACKSWITCHED=:FF
                149:          ;JMP    INTRTI      AND PICK UP EXECUTION OF USER TASK
DE6C 7EAF83     150:          JMP     INTRTI




ASM/6800 1.4A0: DE6C SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 456; Form 25    *** TASK SCHEDULER ***
SDOS6800.ASM
  DE6F            2: WAITEVENTCOND    ; WAIT FOR EVENT CONDITIONAL WAKE-UP ROUTINE
DE6F A600         3:          LDAA    ,X          FETCH THE EVENT (A BYTE) OF INTEREST
  DE71            4: WAITEVENTCONDRTS
DE71 39           5:          RTS                 RETURN CC <> 0 IF BYTE IS NON-ZERO
                  6: *
                  7: *        WAITEVENT$ -- WAIT FOR EVENT (X) TO GO NON-ZERO
                  8: *
  DE72            9: WAITEVENT$       EQU         *
DE72 A600        10:          LDAA    ,X          HAS EVENT ALREADY OCCURRED ?
DE74 26FB        11:          BNE     WAITEVENTCONDRTS B/ YES, AVOID INVOKING THE SCHEDULER!
                 12:          ;LDD    #WAITEVENTCOND GET ADDRESS OF CONDITIONAL TEST ROUTINE
DE76 C66F        13:          LDAB    #(WAITEVENTCOND)&$FF
DE78 86DE        14:          LDAA    #(WAITEVENTCOND)/256
                 15: *        BSR     WAIT$
                 16: *        RTS
                 17: *
                 18: *        WAIT$ -- MAKE TASK WAIT FOR WAKEUP CONDITION
                 19: *        (A,B) POINTS TO WAKE UP CONDITION TEST SUBROUTINE...
                 20: *        WHICH IS CONTINUALLY CALLED BY THE SCHEDULER
                 21: *        (X) CONTAINS PARAMETER TO BE PASSED IN (X) TO WAKE-UP TEST
                 22: *        A NON-ZERO CONDITION CODE ON EXIT FROM WAKE-UP ROUTINE...
                 23: *        CAUSES THE TASK TO BE WOKEN; (A) FROM WAKE-UP ROUTINE...
                 24: *        WILL BE PASSED TO TASK IN (A) REGISTER
                 25: *        WAKE UP SUBROUTINE IS NOT CALLED ANYMORE.
                 26: *        ALL REGISTERS DESTROYED; SCRATCHPAD PRESERVED
                 27: *
  DE7A           28: WAIT$    ; (X) POINT TO WAIT SUBROUTINE FOR TASK
                 29:          ;INC    DONTSTOPME  SO WE COME RIGHT BACK AFTER INTERRUPT
DE7A 7CAF79      30:          INC     DONTSTOPME
                 31: *                            ASSERT: DONTSTOPME=1
DE7D FFAF7B      32:          STX     SCHEDX      SAVE PARAMETER OF WAKE UP ROUTINE
                 33:          ;LDX    CODE+SDOS:CURRENTASK REMEMBER ADDRESS OF WAKE-UP SUBROUTINE
DE80 FEAE1E      34:          LDX     CODE+SDOS:CURRENTASK
                 35:          ;STD    TCB:COND,X
DE83 E705        36:          STAB    (TCB:COND)+1,X
DE85 A704        37:          STAA    TCB:COND,X
                 38:          ;LDD    SCHEDX      SAVE PARAMETER FOR WAKE-UP SUBROUTINE
DE87 F6AF7C      39:          LDAB    SCHEDX+1
DE8A B6AF7B      40:          LDAA    SCHEDX
                 41:          ;STD    TCB:PARAM,X IN TCB




ASM/6800 1.4A0: DE8D SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 457; Form 25    *** TASK SCHEDULER ***
SDOS6800.ASM
DE8D E707        42:          STAB    (TCB:PARAM)+1,X
DE8F A706        43:          STAA    TCB:PARAM,X
  0001           44:          IF      M6800!M6801
                 45:          ;PSHD               TURN RETURN ADDRESS INTO A CONTEXT BLOCK
DE91 37          46:          PSHB
DE92 36          47:          PSHA
DE93 4F          48:          CLRA                MAKE A ZERO TO STORE
DE94 36          49:          PSHA                A ZERO FOR B REGISTER
DE95 36          50:          PSHA                A ZERO FOR THE A REGISTER
DE96 36          51:          PSHA                A ZERO CONDITION CODE BYTE
  0001           52:          ELSE    (M6809)
 *S*             53:          CLI                 MAKE SURE TASK INTERRUPTS ARE ON WHEN HE IS AWOKEN AGAIN
 *S*             54:          PSHS    U,Y,X,DP,B,A,CC
                 55:          FIN
                 56:          ;JSR    INTDISABLE  SHUT DOWN THE WORLD...
DE97 BDAF7D      57:          JSR     INTDISABLE
                 58: *                            SO WE CAN SWITCH STACKS SAFELY
DE9A AF02        59:          STS     TCB:STACK,X SAVE TASK'S STACK POINTER
DE9C BEAF86      60:          LDS     INTERRUPTSTACK AND SWITCH TO THE INTERRUPT STACK
                 61:          ;DEC    DONTSTOPME  SWITCH FROM TASK CRITICAL MODE...
DE9F 7AAF79      62:          DEC     DONTSTOPME
                 63: *                            TO "INTERRUPT" MODE (STACKSWITCHED WILL SAVE US!)
                 64:          ;JMP    PUSH0TO7    SAVE TEMPS AND THEN SCHEDULE SOME OTHER TASK
DEA2 7EDDDE      65:          JMP     PUSH0TO7




ASM/6800 1.4A0: DEA2 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 458; Form 26    *** TASK SCHEDULER ***
SDOS6800.ASM
                  1: *        STARTIO$ -- (X) POINTS TO INTERRUPT ROUTINE ADDRESS
                  2: *        SIMULATES AN I/O INTERRUPT AND TRANSFERS CONTROL TO (X)
                  3: *        ALL REGISTERS DESTROYED EXCEPT (A,B) WHICH ARE PASSED TO INTERRUPT ROUTINE
                  4: *        USED TO START AN INTERRUPT ROUTINE UP; CALLABLE ONLY BY TASK LEVEL ROUTINES
                  5: *
  DEA5            6: STARTIO$ EQU     *
  0001            7:          IF      M6800!M6801
                  8:          ;JSR    INTDISABLE  DISABLE INTERRUPTS
DEA5 BDAF7D       9:          JSR     INTDISABLE
DEA8 FFAF7B      10:          STX     SCHEDX      SAVE INTERRUPT ROUTINE ADDRESS
DEAB 34          11:          DES                 PUSH A GARBAGED X REGISTER
DEAC 34          12:          DES
                 13:          ;PSHD               PUSH D REGISTER [NOTE: (D) IS PASSED TO ROUTINE INVOKED B
DEAD 37          14:          PSHB
DEAE 36          15:          PSHA
DEAF 34          16:          DES                 RESERVE SPACE FOR CC BITS ON STACK
DEB0 30          17:          TSX                 ZERO CC BITS (ENABLING INTERRUPTS ON RETURN)
                 18:          ;CLR    0,X
DEB1 6F00        19:          CLR     0,X
                 20:          ;INC    CODE+SDOS:STACKSWITCHED FLAG 'IN AN INTERRUPT ROUTINE'
DEB3 7CAE11      21:          INC     CODE+SDOS:STACKSWITCHED
                 22:          ;LDX    CODE+SDOS:CURRENTASK LEAVE TCB:COND = "EXECUTING"
DEB6 FEAE1E      23:          LDX     CODE+SDOS:CURRENTASK
DEB9 AF02        24:          STS     TCB:STACK,X AND SWITCH TO THE INTERRUPT STACK
DEBB BEAF86      25:          LDS     INTERRUPTSTACK ...
                 26:          ;JMP    [SCHEDX]    GO TO INTERRUPT ROUTINE ADDRESS
DEBE FEAF7B      27:          LDX     SCHEDX
DEC1 6E00        28:          JMP     0,X
  0001           29:          ELSE    (M6809)
 *S*             30:          ;JSR    INTDISABLE  DISABLE INTERRUPTS
 *S*             31:          JSR     INTDISABLE
 *S*             32:          PSHS    U,Y,X,DP,B,A PUSH REST OF CONTEXT BLOCK
 *S*             33:          LDAA    #$80        = CC BYTE WITH "ENTIRE CONTEXT ON STACK" BIT SET
 *S*             34:          PSHA
 *S*             35:          ;LDA    1,S         RESTORE (D) TO ENTRY VALUE
 *S*             36:          TSX
 *S*             37:          LDAA    1,X
 *S*             38:          ;INC    CODE+SDOS:STACKSWITCHED FLAG 'IN AN INTERRUPT ROUTINE'
 *S*             39:          INC     CODE+SDOS:STACKSWITCHED
 *S*             40:          LDU     CODE+SDOS:CURRENTASK LEAVE TCB:COND = "EXECUTING"




ASM/6800 1.4A0: DEC1 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 459; Form 26    *** TASK SCHEDULER ***
SDOS6800.ASM
 *S*             41:          STS     TCB:STACK,U AND SWITCH TO THE INTERRUPT STACK
 *S*             42:          LDS     INTERRUPTSTACK ...
 *S*             43:          ;JMP    ,X          GO TO INTERRUPT ROUTINE ADDRESS
 *S*             44:          JMP     0,X
                 45:          FIN
                 46: 
  DEC3           47: IOINTERRUPT      ; IO INTERRUPT GOES HERE FIRST!
                 48:          ;INC    CODE+SDOS:STACKSWITCHED BUMP NUMBER OF NESTED INTERRUPTS
DEC3 7CAE11      49:          INC     CODE+SDOS:STACKSWITCHED
DEC6 2608        50:          BNE     IOINTJ      B/ ALREADY SWITCHED TO INTERRUPT STACK
                 51:          ;LDX    CODE+SDOS:CURRENTASK SWITCH TO SCHEDULER'S STACK
DEC8 FEAE1E      52:          LDX     CODE+SDOS:CURRENTASK
DECB AF02        53:          STS     TCB:STACK,X SAVE TASK'S STACK IN HIS TCB
DECD BEAF86      54:          LDS     INTERRUPTSTACK GET THE SCHEDULER'S STACK INSTEAD
  DED0           55: IOINTJ ; JUMP TO INTERRUPT ROUTINE
  0000           56:          IF      M6809
 *S*             57:          ;LDA    #$FF        SET DPR TO FIXED CONSTANT
 *S*             58:          LDAA    #$FF
 *S*             59:          ;TFR    A,DP
 *S*             60:          TADP
                 61:          FIN
                 62:          ;JMP    JMPIOINT    GO DEAL WITH I/O INTERRUPT
DED0 7EAF88      63:          JMP     JMPIOINT
                 64: 
  0028           65: PATCHSPACE       RPT         40 PATCH SPACE
DED3 3F          66:          SWI




ASM/6800 1.4A0: DEFA SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 460; Form 26    *** TASK SCHEDULER ***
SDOS6800.ASM
  DEFB           68: SDOS:END EQU     *
                 69: 
  30FB           70: ACTSIZE  EQU     *-CODE      ACTUAL RESIDENT SDOS SIZE
  0000           71:          IF      ACTSIZE>>SDOS:ESTSIZE
 *S*             72:          ?SDOS TOO BIG FOR MEMORY SIZE SPECIFIED
                 73:          FIN
                 74:          END




ASM/6800 1.4A0: DEFA SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 461; Form 26    Symbols Sorted by Name
SDOS6800.ASM
Symbols Sorted by Name:

 ACKCONTROLC/AFA0                ACTSIZE/30FB    ADDTOFILEOV/CCD1                ADDTOFILESIZE/CCAC
 ADJUSTCOLBS/C0E9                ADJUSTCOLBUMP/C0E1              ADJUSTCOLRTS/C0E0
 ADJUSTCOLTAB/C0F2               ADJUSTCOLUMNCOUNT/C0C7          ADJUSTCOLZERO/C0DD
 ALLOC2/CD8D     ALLOC2A/CDAE    ALLOC2B/CDB2   *ALLOC2BIG/CDAA  ALLOC3/CDE1     ALLOCATECLUSTERS/CD19
 ALLOCATIONCOUNT/AED8            ALLOCATIONPLCN/AEDA             ALLOCDATACLUSTERS/CE11
 ALLOCDATACLUSTJ/CE91            ALLOCDC1/CE6D   ALLOCDC2/CE1C   ALLOCDC3/CE55   ALLOCDC4/CE4C
 ALLOCDC5/CE09   ALLOCDONE/CE83  ALLOCERRED/CE08                 ALLOCINITHC/CDCA
 ALLOCINITHS/CE94                ALLOCRDSIS/2560                 ALLOCRDSISRTS/2592
*ASCII:ACK/0006 *ASCII:BEL/0007  ASCII:BS/0008  *ASCII:CAN/0018  ASCII:CR/000D  *ASCII:DC1/0011
*ASCII:DC2/0012 *ASCII:DC3/0013 *ASCII:DC4/0014 *ASCII:DLE/0010 *ASCII:EM/0019  *ASCII:ENQ/0005
*ASCII:EOT/0004 *ASCII:ESC/001B *ASCII:ETB/0017 *ASCII:ETX/0003  ASCII:FF/000C  *ASCII:FS/001C
*ASCII:GS/001D   ASCII:HT/0009   ASCII:LF/000A   ASCII:MASK/007F                *ASCII:NAK/0015
*ASCII:NULL/0000                *ASCII:RS/001E   ASCII:RUBOUT/007F              *ASCII:SI/000F
*ASCII:SO/000E  *ASCII:SOH/0001  ASCII:SPACE/0020               *ASCII:STX/0002 *ASCII:SUB/001A
*ASCII:SYN/0016 *ASCII:US/001F  *ASCII:VT/000B   ATTNCHECK/B643  ATTNCHECK:SCLEN/0002
 AVAILABLECOUNT/AEE2             AVAILABLELCN/AEE0              *BASICFLAGS/00F0
 BCDTOASCII/2448                 BCDTOBIN/DD43   BLOCKCOMPARE/CA27               BLOCKCOMPARERTS/CA3A
 BLOCKMOVE/DBD0 *BLOCKMOVEDOWN/DBD0              BLOCKMOVEDOWN16/DC4E            BLOCKMOVEDOWN4/DC16
 BLOCKMOVEDOWNA/DC0E             BLOCKMOVEDOWNB/DC4A             BLOCKMOVEDOWND/DCC8
 BLOCKMOVEDOWNE/DBF6             BLOCKMOVEX/0006                *BOOT:CHECKSUM/001F
 BOOT:CREATIONDATE/0018          BOOT:DIRLSN/001B                BOOT:DISKID/0020
 BOOT:DISKIDSIZE/0020            BOOT:DISKINFO/0010              BOOT:DISKINFOLEN/0010
 BOOT:FILESYSTEMVERSION/0010    *BOOT:IPLDATA/0000              *BOOT:MAPALGORITHM/0016
*BOOT:MIDALLOC/0014             *BOOT:MINALLOC/0012              BOOT:NSPC/0011  BOOT:PARAMSIZE/0007
 BOOT:SIZE/0040  BUFFER/AFE8     BUFFERPOINTER/AE9B              CANTLOAD/B9FE   CANTRUNMSG/21F5
 CANTRUNMSGEND/2264             *CC:ACTIVATIONCK/001D           *CC:ALTERPROFILE/0019
*CC:BACKGROUND/0021             *CC:CLRINPUT/0015               *CC:CLROUTPUT/0016
*CC:COLORING/0020                CC:DEVICESPECIFICOP/0010        CC:DISMOUNTDISK/0011
 CC:DUMPBUFFERS/0001            *CC:ECHO/0010   *CC:FORMAT/0015 *CC:IDLES/0012  *CC:KILLENABLE/0023
*CC:KILLPROOF/0022              *CC:MULTISECTORREAD/0013        *CC:MULTISECTORWRITE/0014
*CC:NOECHO/0011 *CC:NOWRAP/001F  CC:POSITION/0000                CC:POSITIONTOEND/0013
*CC:SETACTBLOCK/0014            *CC:SETBAUDRATE/0025            *CC:SETFIELDSIZE/001B
 CC:SETFILEDATE/0010            *CC:SETFILEPROT/0011            *CC:SETFILESIZE/0012
*CC:SETINPUTTRANSLATION/0026     CC:SETMAPALGORITHM/0012        *CC:SETOUTPUTTIMEOUT/0024
*CC:SETPARAMS/001C              *CC:SETPROFILE/0018             *CC:SETREADTIMEOUT/0017
*CC:TABS/0013    CC:UNLOCKDISK/0010             *CC:WAITDONE/0016               *CC:WRAP/001E
*CC:WRITEEDITLINE/001A           CHAIN/B93C      CHAIN1/B977    *CHAIN:LENGTH/0006
*CHAIN:NAMEP/0004                CHAIN:SCLEN/000E                CHAINOK/B96F    CHAINTOSERIALNO.SYS/2728




ASM/6800 1.4A0: DEFA SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 462; Form 26    Symbols Sorted by Name
SDOS6800.ASM
 CHANGED/0000    CHECKCHANNELCL1/B256            CHECKCHANNELCLOSED/B254         CHECKCHANNELOPEN/B23F
 CHECKMUSTZERO/D55F              CHECKRDLEN/B89F                 CHECKRDLEN1/B8C3
 CHECKRDLEN2/B8CE                CHECKREADDONE/C128              CHECKREADDONE1/C136
 CHECKSCLEN/B8FC                 CHECKWRITEDONE/C137             CHECKWRITEDONE1/C14B
 CHECKWRLEN/B8DB                 CLOCKTICK1/DCE5                 CLOCKTICK2/DD24
 CLOCKTICKED/DCCF                CLOCKTICKEDEVENT/AE5B           CLOCKTICKEXIT/DD40              CLOSE/B4A8
 CLOSE1/B4B4     CLOSE:CHANNEL/0002              CLOSE:SCLEN/0003                CLOSECHANNEL0/B5CF
 CLOSELOG/B4C2   CLOSELOG:SCLEN/0002             CLOSERTS/B4A2   CLOSESERIALNO.SYS/2758
 CMPDVNAME/B34F  CMPDVNAMENF/B393                CMPDVNAMENM/B395                CMPDVNAMEZ/B388
 CMPDVNAML/B363  CMPDVNAML1/B376                 CNFG:ATTNCHECK/000B            *CNFG:BOOTCONSOLEDCB/002C
*CNFG:BOOTDEFAULTDISKDCB/002A    CNFG:DEBUGGER/000D              CNFG:DEVICEDCBS/0002
 CNFG:DISKDCBS/0000              CNFG:DRIVERBASE/000F            CNFG:DSKBUFFERPOOL/0007
 CNFG:DSKPOOLSIZE/0009           CNFG:INTDISABLE/0013            CNFG:INTENABLE/0016
 CNFG:INTERRUPTSTACK/001C        CNFG:INTRTI/0019                CNFG:INTSETUP/0011
 CNFG:IOCBPOINTERS/0004          CNFG:IOINTPOLL/001E            *CNFG:MTPRIMS/0028
 CNFG:NIOCHANNELS/0006          *CNFG:RETURNELAPSEDMILLISECONDS/002E
*CNFG:SETCLOCKINTERVALMILLISECONDS/0030          CNFG:TASKQUEUE/0020             CNFG:TIMEOUTLIST/0022
*CNFG:VTDEBUG/0026              *CNFG:VTPROFILES/0024            CODE/AE00       COLUMNCOUNT/AEA1
 COMPAREDECRYPTIONKEYS/B98B      COMPAREDECRYPTIONMATCH/B9AA     COMPARENAMES/CA20
*COMPUTECHECKSUMS/26BE           COMPUTEDIRENTRYDISPLACEMENT/C80F                COMPUTEEXITCHECKSUM/26BE
 COMPUTEEXITCHECKSUML/26C7       COMPUTEINITCHECKSUM/26E9        COMPUTEINITCHECKSUML/26F2
 COMPUTEMAINCHECKSUM/26D3        COMPUTEMAINCHECKSUML/26DC       COMPUTENEXTBYTE/D6C9
 COMPUTERDCN/D704                COMPUTERDCN0/D72B               COMPUTERDCNF/D6F9
 COMPUTERDCNL/D717               COMPUTERDCNLIMIT/D75A           COMPUTERDCNS/D70D
 COMPUTERHSN/D75D                COMPUTERHSN0/D763               COMPUTERHSN1/D766
 COMPUTERSN/D771                 CONSOLEDRIVER/AE52              CONSOLENAMELEN/AF98
 CONSOLENAMEPTR/AF96             CONSOLEOPEN/AF92                CONTEXTBLOCK:SIZE/0007
 CONTROL/B605   *CONTROL:CHANNEL/0002           *CONTROL:CODE/0003               CONTROL:DATA/0000
*CONTROL:DATEDAY/0003           *CONTROL:DATEMONTH/0004         *CONTROL:DATETICKS/0000
*CONTROL:DATEYEAR/0005          *CONTROL:DIST/0000              *CONTROL:MAPALGORITHM/0000
*CONTROL:PROT/0000               CONTROL:SCLEN/0004              CONVERTLCN1/D7B6
 CONVERTLCN2/D786                CONVERTLCNL/D7A3                CONVERTLCNTO1ST/D790
 CONVERTLCNTOLSN/D778            COPYNAMETODIR/BF6D              COPYOFNMIVECTOR/2784
 COPYOFRESTARTVECTOR/2786        COPYRIGHT/B12E  COPYRIGHTCHECKSUM/0036          COPYRIGHTEND/B153
 COUNT/0004      CPUSERIALNUMBER/2251            CREATE/B458     CREATE1/B45A   *CREATE:CHANNEL/0002
 CREATE:FILESIZE/000E            CREATE:FILESIZESCLEN/0012      *CREATE:LENGTH/0006
*CREATE:NAMEP/0004               CREATE:SCLEN/000E               CREATELOG/B44B *CREATELOG:LENGTH/0006
*CREATELOG:NAMEP/0004            CREATELOG:SCLEN/000E            CVTTOHEXSERIALNO/22B8
 CVTTOHEXSERIALNOLOOP/22C0       DAYSPERMONTH/DD50               DAYSPERMONTHX/AE58
*DCB:DONEFLAG/0000               DCB:DRIVER/0007                *DCB:LASTERROR/0001




ASM/6800 1.4A0: DEFA SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 463; Form 26    Symbols Sorted by Name
SDOS6800.ASM
 DCB:NAME/0003   DCB:NEXTDCB/0005                DCB:SIZE/0009   DCBPOINTER/0006
 DCBPTRSAVE/AF1B                 DEBUG/B62F      DEBUG1/B63D     DEBUG:SCLEN/0002
 DECBUF/AF2A     DECIOCB:CURLSN/D857             DECIOCB:CURLSN1/D86A            DECRYPT/B0B1
*DECRYPT0/B0C5   DECRYPT1/B078   DECRYPTBUFFER/B05D              DECRYPTBUFFEREND/B065
 DECRYPTBUFPTR/B05B              DECRYPTLOOP/B0BD                DECRYPTRTS/B102
 DEFAULTDISKDCB/AE4C             DEFAULTDISKNAME/B349            DEFAULTPROG/B86F
 DEFAULTPROGL/000E               DELAY/B3B0      DELAY1/B3BF     DELAY:PERIOD/0002
 DELAY:SCLEN/0004                DELAYBLOCK/AE5E                 DELAYCOMPLETE/AE64
 DELAYDONE/B3F1  DELAYLOOP/21BF  DELETE/B461    *DELETE:LENGTH/0006             *DELETE:NAMEP/0004
 DELETE:SCLEN/000E               DESIREDLCN/AEE4                *DIR:DAY/001A    DIR:ENTRYSIZE/0020
 DIR:FCBDATA/0010                DIR:FCBDATASIZE/000E           *DIR:FILENAME/0000
*DIR:FILESIZE/0015               DIR:HCSIC/0012  DIR:HLCN/0010  *DIR:MONTH/001B  DIR:NAMESIZE/0010
*DIR:NCLUSTERS/0013              DIR:PROTECTION/0019            *DIR:VERSION/001D
*DIR:YEAR/001C   DIRECTORYNAME/C905              DIRENTRY/AEA8   DIRENTRYDISP/AEAA
 DIRSECTOREND/AEB8               DISKDCBSAVE/DBBD                DISKDCBUNSAVE/DBAA
 DISKDEFAULT/B495               *DISKDEFAULT:LENGTH/0006        *DISKDEFAULT:NAMEP/0004
 DISKDEFAULT:SCLEN/000E          DISKDEVICEDRIVER/BC93           DISKFILEDRIVER/BCB4
 DISKMAP:BYTE/0000               DISKMAPBYTEPOINTER/AEEC         DISKMAPMASK/AEEE
 DISKMAPNAME/C915                DISKMAPSECTOREND/AEEA           DISKMAPSECTORSTART/AEE8
 DISKREAD/DB5A   DISKRTS/BCB2    DISKRWCOPYARGS/DBB0             DISKWAITD/DB72  DISKWAITD2/DBA4
 DISKWAITE/DB7E  DISKWAITE1/DB8B                 DISKWAITE2/DB9F                 DISKWRITE/DB66
 DISPCLOSE/B76F  DISPERRKILLLOG/B6D2             DISPERRKILLLOG1/B6DE            DISPERROR/B782
 DISPERROR:SCLEN/0002            DISPERRORMSG/B769               DISPERRORMSGL/0006
 DISPGETCHAR/AFDA                DISPLAYERROR/B667               DISPLAYERROR0/B695
 DISPLAYERROR1/B6BB              DISPLAYERROR1A/B6B3             DISPLAYERROR4/B6F1
 DISPLAYERROR4A/B6F3             DISPLAYERROR5/B706              DISPLAYERROR6/B724
 DISPLAYERROR7/B73F              DISPLAYERROR8/B749              DISPLAYERROR8A/B74A
 DISPLAYERROR9/B746              DISPLAYERRORA/B677              DISPLAYERRORCR/B88B
 DISPLAYERRORCR1/B897            DISPLAYERRORDONE/B6E8           DISPLAYERRORRETRY/B66D
 DISPLAYINITDATE/2717            DISPLAYINITERROR/275F           DISPOUT/AFC0    DISPPOS/B772
 DISPPOS1/AFD6   DISPPUTCHAR/B77A                DISPREADB3/AFC8                 DIVIDEPOINTLCN/AEDC
 DONTLOG/B5E0    DONTSTOPME/AF79                 DONTZEROMEMORY/217A             DOSYSCALL/2194
 DOWELOG/B5D2    DRIVER:CLOSE/0002               DRIVER:CONTROL/0012             DRIVER:CREATE/000C
 DRIVER:DELETE/0010              DRIVER:DISKCONTROL/000A        *DRIVER:DISKLSNTOPSN/0010
 DRIVER:DISKREAD/0002            DRIVER:DISKRESET/0000           DRIVER:DISKSTATUS/0008
*DRIVER:DISKVERIFY/000E          DRIVER:DISKWAIT/0006            DRIVER:DISKWRITE/0004
*DRIVER:DISKWRITEPROTQ/000C      DRIVER:OPEN/0000               *DRIVER:PFRESTART/001A
 DRIVER:READA/0004               DRIVER:READB/0008               DRIVER:RENAME/000E
 DRIVER:RESET/0016              *DRIVER:STARTIO/0018             DRIVER:STATUS/0014
 DRIVER:WRITEA/0006              DRIVER:WRITEB/000A              DRIVERVPOINTER/AE54




ASM/6800 1.4A0: DEFA SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 464; Form 26    Symbols Sorted by Name
SDOS6800.ASM
 DSKDCLOSE/C587  DSKDCONTROL/C4F1                DSKDCONTROL0/C505               DSKDCONTROL1/C4FD
 DSKDCONTROL10/C50B              DSKDDISMOUNT/C5A6               DSKDDISMOUNT0/C5E7
 DSKDDISMOUNT1/C633              DSKDDISMOUNT2/C602              DSKDDISMOUNTL/C5B4
 DSKDDISMOUNTOKRTS/C64C          DSKDDISMOUNTZ/C61D              DSKDEOFTEST/C546
 DSKDEOFTESTL/C55B               DSKDGETBADLSN/C375              DSKDGETERRORSTATS/C3F2
 DSKDGETPARAMS/C476              DSKDGETTYPE/C445                DSKDIMPLIEDPOSITION/C513
 DSKDIMPLIEDPOSOKRTS/C587        DSKDOPEN/C4CD   DSKDOPEN1/C4D7  DSKDPOSITION/C526
 DSKDPOSITION1/C537              DSKDREADA/C008  DSKDREADAL/C00E                 DSKDREADALINE/C021
 DSKDREADB/BF9F  DSKDREADBL/BFA5                *DSKDSETMAPALG0/C4AC             DSKDSETMAPALG1/C4B8
 DSKDSETMAPALG2/C4BA             DSKDSETMAPALGDUMP/C4A4          DSKDSETMAPALGORITHM/C493
 DSKDSETMAPALGRTS/C4C6           DSKDSTATUS/C3CA                 DSKDSTATUS0/C3DE
 DSKDSTATUS10/C3EC               DSKDUMPBUF0/DB27                DSKDUMPBUFFERS/DADA
 DSKDUMPBUFL/DB2A                DSKDUMPBUFN/DB47                DSKDUMPERR1/DB53
 DSKDUMPFCB1/DB10                DSKDUMPFCBL/DAE8                DSKDUNLOCK/C582
 DSKDWRITEA/C1F4                 DSKDWRITEAL/C1FA                DSKDWRITEB/C16A
 DSKDWRITEBL/C172                DSKFCLOSE/BE6E  DSKFCLOSE1/BE97                 DSKFCLOSEDOLD1/BEC6
 DSKFCLOSEOKRTS/BEC4             DSKFCLOSEOLD/BEC1               DSKFCONTROL/C25B
 DSKFCONTROL0/C26F               DSKFCONTROL10/C275              DSKFCREATE/BCD3
 DSKFCREATE1/BCFA                DSKFCREATE2/BD8D                DSKFCREATE3/BD64
 DSKFCREATEALLOC/BD88            DSKFCREATEC/BD37                DSKFCREATEE/BD8F
 DSKFCREATEF/BD3A                DSKFCREATEMIN/BD82              DSKFCREATEOOPS/BD9B
 DSKFDELETE/BE0F                 DSKFDELETE1/BE3B                DSKFDELETEDE/BE31
*DSKFDELETEFCB/BE47              DSKFDELETEIOCBFCB/BE4B          DSKFDELETEL/BE1C
 DSKFDELETESYSIOCB/BE49          DSKFEOFTEST/C307                DSKFEOFTESTROL/C324
 DSKFGETCOL/C457                 DSKFGETCOL1/C461                DSKFGETDATE/C422
 DSKFGETEOF/C46A                 DSKFGETFILESIZE/C33E            DSKFGETPARAMS/C393
 DSKFGETPOS/C352                 DSKFGETPOS3/C36B                DSKFGETPOS3A/C38C
 DSKFGETPOS4/C364                DSKFGETPROT/C416                DSKFGETTYPE/C44E
 DSKFIMPLIEDPOSITION/C2B8        DSKFIMPLIEDPOSOKRTS/C2B6        DSKFOPEN/BDA3   DSKFOPEN0/BDC2
 DSKFOPEN1/BDC5  DSKFOPENERRORFILE/C27F          DSKFOPENL/BDB3  DSKFOPENSYSIOCB/BDFC
 DSKFPFRESTART/BCCE              DSKFPOSITION/C2E3               DSKFPOSITION1/C2F4
 DSKFPOSITIONTOEND/C2CE          DSKFPOSITIONTOEND1/C2D4         DSKFREADA/BFE0  DSKFREADADONE/BFFE
 DSKFREADAL/BFE6                 DSKFREADALINE/BFF9              DSKFREADB/BF84  DSKFREADBL/BF8C
 DSKFREADBOKRTS/BF9D             DSKFRENAME/BEE9                 DSKFRENAME1/BF32
 DSKFRENAME2/BF5E                DSKFRENAMEERR1/BF1D             DSKFRENAMEL/BF0F
 DSKFRESET/2454  DSKFSET1/C243   DSKFSETDATE/C22B                DSKFSETPROT/C24B
 DSKFSETSIZE/C295                DSKFSTATUS/C3A4                 DSKFSTATUS0/C3B6
 DSKFSTATUS10/C3C4               DSKFWRITEA/C199                 DSKFWRITEADONE/C1B5
 DSKFWRITEAL/C1A4                DSKFWRITEB/C14C                 DSKFWRITEBDONE/C168
 DSKFWRITEBL/C158                DSKINFO:BADLSN/002D             DSKINFO:DIRFCB/0027




ASM/6800 1.4A0: DEFA SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 465; Form 26    Symbols Sorted by Name
SDOS6800.ASM
 DSKINFO:ERRLSN/003F             DSKINFO:LOG2NBPS/0018           DSKINFO:MAPALGORITHM/0016
 DSKINFO:MAPFCB/0029             DSKINFO:MAPLSN/0024             DSKINFO:MIDALLOC/0014
 DSKINFO:MINALLOC/0012           DSKINFO:NBPC/0020               DSKINFO:NBPS/0009
 DSKINFO:NBPSM1/0019             DSKINFO:NCYL/000F               DSKINFO:NLCN/001E
 DSKINFO:NLSN/001B               DSKINFO:NSPC/0011               DSKINFO:NSPT/000B
 DSKINFO:NTPC/000D              *DSKINFO:OPSCOUNT/003C           DSKINFO:RANDMAP/0022
*DSKINFO:READERRCNT/0038        *DSKINFO:READERRSTS/003A         DSKINFO:SECTORDB/002B
 DSKINFO:SEEKERRCNT/0030        *DSKINFO:SEEKERRSTS/0032        *DSKINFO:SIZE/0043
*DSKINFO:WRITEERRCNT/0034       *DSKINFO:WRITEERRSTS/0036       *DSKINFO:WRITEPROTSTATE/0042
 DSKREADACHUNK/C028              DSKREADACHUNKL/C050             DSKREADACHUNKL1/C07A
 DSKREADACR/C0A2                 DSKREADANULL/C085               DSKREADANULL1/C09D
 DSKREADANULL2/C09F              DSKREADBCHUNK/BFB6              DSKWRITEACHUNK/C1BF
 DSKWRITEACHUNKL/C1D6            DSKWRITEBCHUNK/C182             DUMMYLCN/FFFF  *DVDAT:DEPTH/0001
 DVDAT:NBPS/0000                *DVDAT:NCYL/0006                *DVDAT:NSPC/0002
*DVDAT:NSPT/0002                *DVDAT:NTPC/0004                *DVDAT:WIDTH/0000
*DVTYP.CLOCK/000B               *DVTYP.CONSOLE/0004              DVTYP.DISK/0001
*DVTYP.DTAPE/0003               *DVTYP.DUMMY/000A                DVTYP.FILE/0000
*DVTYP.PARIN/0009               *DVTYP.PAROUT/0008              *DVTYP.PRINTER/0005
*DVTYP.SERIALIN/0007            *DVTYP.SERIALOUT/0006           *DVTYP.STAPE/0002
*DVTYP:TYPE/0000                 ENQUELASTSECTORREAD/DA78        EORALL8BYTES/B108
 ERASEBANK/216C  ERASELOOP/2172  ERASEMEM/216F  *ERR:ABNORMALSTOP/0068
*ERR:ACTIVATIONNOTINBUFFER/0773 *ERR:ACTIVATIONRECEIVED/0775     ERR:ALLOC0CLUSTERS/042B
*ERR:ALREADYLOCKED/04B8         *ERR:ATTENTION/0001             *ERR:BADCMDFORMAT/0066
*ERR:BADFIELDWIDTH/0774          ERR:BADFILENAME/03FF           *ERR:BADFILEVERSION/0405
 ERR:BADFNAMESIZE/03F5           ERR:BADLOADRECORD/040C          ERR:BADPOSITION/03EC
*ERR:BADREADBUF/04B0            *ERR:BADWRITEBUF/04B1            ERR:BOOTCKSUMFAIL/03E8
*ERR:BRANCHFACTORSIZE/0435      *ERR:BUSYFORANOTHERPROCESS/0772 *ERR:CANTGOTO/0067
*ERR:CANTOPENMUSTCREATE/03FD    *ERR:CAPABILITYFAILURE/04C2      ERR:CHBUSY/0407
 ERR:CHTOOBIG/0406               ERR:CLOSED/0408                 ERR:CLUSTERSIZELIMITSFILE/041C
 ERR:DECRYPTIONKEYSDONTMATCH/0437               *ERR:DEVICEERRORED/0421         *ERR:DEVICENOTREADY/0424
*ERR:DEVICETIMEDOUT/0412         ERR:DIRECTORYDAMAGED/040F       ERR:DISKMOUNTED/03FC
 ERR:DISKREAD/0415              *ERR:DISKSEEK/0417               ERR:DISKWRITE/0416
 ERR:DISKWRITELOCKED/0419       *ERR:DSKWRTPROT/0418            *ERR:DUPLICATEKEY/0434
*ERR:ENDOFMEDIUM/042F            ERR:EOFHIT/03E9                *ERR:FATALCOMPILE/0064
 ERR:FILEALREADYDELETED/042C     ERR:FILEINCREATE/03FB           ERR:FILEISOPEN/03EA
 ERR:FILENOTFOUND/03F3           ERR:FILEWRTPROT/03F2            ERR:HCSICTOOSMALL/0401
*ERR:IBUFOVERFLOW/0410           ERR:ILLDEVICEOP/040A           *ERR:ILLEGALINTERLOCKFUNCTION/04BE
*ERR:ILLEGALJOBCONTROL/04C1      ERR:ILLEGALLCN/03F4             ERR:ILLEGALSYSCALL/0409
 ERR:ILLFILESIZE/0400            ERR:ILLLSN/040E                *ERR:IMPLEMENTATIONLIMITREACHED/04BD
*ERR:INPUTTIMEOUT/042E          *ERR:IOINPROGRESS/0771          *ERR:JOBCOMPLETED/04C4




ASM/6800 1.4A0: DEFA SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 466; Form 26    Symbols Sorted by Name
SDOS6800.ASM
*ERR:JOBKILLED/04C3              ERR:LCNWASNTALLOCATED/03F8     *ERR:LOCKRESET/04BC
*ERR:MEMORYMGMTFAIL/04BF        *ERR:MTBADCONFIG/04B7           *ERR:MTNOROOM/04B6
 ERR:MUSTBEDISK/0422             ERR:NBPCTOOBIG/03ED             ERR:NEWFILEEXISTS/03F6
 ERR:NLSNGE224/041B              ERR:NODEBUGGER/03EB             ERR:NODEFAULTPROGRAM/03F0
 ERR:NODISKMAP/03EE              ERR:NODISKSPACE/03F7            ERR:NOERRORMSGS/03FE
 ERR:NOFREEFCBS/03F9             ERR:NOMATCHFCB/03EF            *ERR:NOMOREJOBS/04C0
*ERR:NONE/0000   ERR:NOSUCHDEVICE/0420          *ERR:NOSUCHKEY/0433             *ERR:NOSUCHLUN/0426
*ERR:NOSUCHOBJECT/04B9           ERR:NOSUCHPROGRAM/0428          ERR:NOTALOADFILE/0404
*ERR:NOTENOUGHCHANNELS/04B4      ERR:NOTENOUGHPOOL/0402          ERR:NOTENOUGHROOM/040D
*ERR:NOTENUFMEM/0069            *ERR:NOTIMEOUTBLKS/0431         *ERR:NOTLOCKED/04BA
 ERR:NOTOPENTOCONSOLE/0423      *ERR:NOTUNDERTIMESHARE/04B5     *ERR:OBJECTDESTROYED/04BB
*ERR:OLDFILEEXISTS/0429         *ERR:PRINTERNOTREADY/042D       *ERR:PROFILENOTFOUND/0777
*ERR:PROFILENOTMALLEABLE/0778    ERR:PROGRAMKILLED/0411          ERR:PWRFAILDISKF/0403
*ERR:RDBUFTOOBIG/04B2            ERR:RDBUFTOOSMALL/041E          ERR:RENAMEDEVICE/040B
 ERR:SDOSCKSUM/041A              ERR:SDOSNOTREGISTERED/0436      ERR:SECTORSIZE2/0413
 ERR:SELFTESTCKSUM/0430          ERR:SERIALNOWRONG/0432          ERR:SYSCALLTOOSHORT/041D
*ERR:SYSTEMCROAKED/0414         *ERR:TIMEDINPUTEXPIRED/0776      ERR:TIMENOTSET/0425
*ERR:WARNINGCOMPILE/0065        *ERR:WRBUFTOOBIG/04B3            ERR:WRBUFTOOSMALL/041F
*ERR:WRONGDISKTYPE/076E          ERR:WRONGFILESYSTEM/03FA        ERR:ZEROSTARTADDRESS/0427
 ERRALLOC0CLUSTERS/CD14          ERRBADFILENAME/CC85             ERRBADFILENAMEJ/CC3C
 ERRBADFNAMESIZE/CCA4           *ERRBADLOADRECORD/BB89           ERRBADPOSITION/C32F
 ERRBOOTCKSUMFAIL/C6C0           ERRCHBUSY/B237  ERRCHTOOBIG/B23B                ERRCLOSED/B233
 ERRCLUSTERSIZELIMITSFILE/D6BF   ERRDIRECTORYDAMAGED/C826        ERRDISKMOUNTED/C4C8
 ERRDISKWRITELOCKED/D5CD         ERREOFHIT/C32A  ERREOFHITJ2/D5D2                ERRET/B1F6
 ERRETL/B207     ERRFCBOPENERRRTS/C5A4           ERRFCBOPENQ/C594                ERRFCBPOINTER/AF0C
 ERRFILEALREADYDELETED/BF2D      ERRFILEINCREATE/BCF5            ERRFILEISOPEN/C64E
 ERRFILENOTFNDJ/BE17             ERRFILENOTFOUND/BE69            ERRFILEWRTPROT/BD07
 ERRFILEWRTPROTJ/BE66            ERRHCSICTOOSMALL/D6C4           ERRILLDEVOP/C26A
 ERRILLFILESIZE/CCD3            *ERRILLLSN/D950  ERRILLSYSCALL/B1EE              ERRMSGSNAME/C925
 ERRMUSTBEDISK/B4A3              ERRNBPCTOOBIG/C6C5             *ERRNEWFILEEXISTS/BF28
 ERRNLSNGE224/2681               ERRNODISKMAP/CD0F               ERRNODISKMAPJ1/CEFA
 ERRNOERRMSGS/C290               ERRNOTENOUGHPOOL/24FA           ERRNOTENOUGHROOM/BB8E
 ERRORADDRESS/AE56               ERRORCODE/275D  ERRORED/B209    ERROREXIT/B7ED  ERROREXIT:CODE/0002
 ERROREXIT:SCLEN/0004            ERRORINX/B200   ERRORNUMBER/AF2D                ERRORRTS/0D39
 ERRORSAVE/B218  ERRRDBUFTOOSMALL/B8D6           ERRRENAMEDEVICE/B4F0            ERRSECTORSIZE2/2650
 ERRSERIALNOWRONG/BA2A           ERRSYSCALLTOOSHORT/B1F2         ERRSYSTOOSHORTJ/B8D3
 ERRTIMENOTSET/BD32             *ERRWRBUFTOOSMALL/B8F7           ERRWRONGFILESYSTEM/C6CA
 ERRWRONGSERIALNUMBER/219A       ERRZEROSTARTADDRESS/B985        EXECUTING/DE3C  EXIT/B80A       EXIT1/B80D
 EXIT2/B847      EXIT3/B860      EXIT:SCLEN/0002                 EXITCHAIN/AFEC  EXITCHKSUMBASE/B80A
 EXITCHKSUMEND/B846              EXITCKSUML/B82E                 EXITCODECHKSUM/B82C




ASM/6800 1.4A0: DEFA SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 467; Form 26    Symbols Sorted by Name
SDOS6800.ASM
 EXITCOPYRIGHT/2707              EXITCR/B87D     EXITCR1/B883    EXITDAMAGE/B93A
 EXITDAMAGEPTR/AF28              EXITERRED/B7F4  EXITPARTIALCHKSUM/0004          EXITS/B907
 EXITS2/B90F     EXITS3/B923     EXITS4/B928     EXITS6/B934     EXITSCANPTR/0002
 EXITSCLOSE/AFFA                 EXITSERRED/B920                 FCB:DAY/0016    FCB:DIRDISP/0005
 FCB:DIRLSN/0002                 FCB:DISKINFO/0000               FCB:FILESIZE/0011
 FCB:FLAGS/000A  FCB:HCSIC/000E  FCB:HLCN/000C   FCB:HLSN/0007   FCB:MONTH/0017  FCB:NCLUSTERS/000F
 FCB:PROT/0015   FCB:REFCOUNT/000B               FCB:SIZE/001A  *FCB:VERSION/0019
*FCB:YEAR/0018   FCBFLG::DELETED/0020            FCBFLG::MODIFIED/0010           FCBFLG::NEWFILE/0080
 FCBFLG::UPDATEDIR/0040          FCBPOINTER/AEA6                 FETCHSECTOR/DA9A
 FETCHSERIALNUMBERSYS/211E       FILENAMEBUF/AEBA               *FILENAMEFILL/AECA
 FILENAMELENGTH/AECC            *FILEPROT/AED7   FILESIZE2/AED1  FILESIZERQSTD/AECD
 FILESYSTEMVERSION/0010          FILLDECRYPTBUFFER/B031          FINDDEFAULT/B30F
 FINDDEVICEL/B2F5                FINDDISK/B2D6   FINDDRIVER/B2AD                 FINDDRIVER1L/B2BB
*FINDDRIVER2/B2CD                FINDFREEFCB/CAC8                FINDFREEFCBL/CAD6
 FINDLCNERREXIT/D222             FINDLCNMAPBIT/D227              FINDLCNMAPBITL/D29F
 FIRSTBUF/26FF   FIRSTCHAIN/B94F                 FIRSTSEGSIZE/2701               FNAMEPROCESS/B485
 FNAMEPROCESS1/B488              FORCERTI/DDC8   FORCESCHEDULE/DDCB              FORGETLASTBADLSN/C589
 FOUNDDEVICE/B322                FOUNDDISK/B336  FOUNDDISK1/B31C                 FOUNDDISK2/B31F
 FOUNDDISK3/B344                 FREECLUSTER/CEE6                FREECLUSTER0/CF35
 FREECLUSTER2/CF5D               FREECLUSTER3/CF41               FREECLUSTERDONE/CF77
 FREECLUSTERE/CF5F               FREECLUSTERE1/CF74              FREECLUSTEREXIT/CF82
 FREECLUSTERL/CF09               FREECLUSTERN/CF54               FREECLUSTERS/CEFD
 FREEDIRENTRYDISP/AEB6           FREEDIRLSN/AEB3                 FREEERROR/CEF5  FROMPOINTER/0002
 GENHLSNPLUSHRSN/D7C5            GET1BYTE/B04D   GETBYTE/BC2C    GETBYTE1/BC50   GETBYTED/BC44
 GETERROR/B654  *GETERROR:ACTUALCOUNT/0008      *GETERROR:BUFFERP/000A          *GETERROR:MAXCOUNT/000C
 GETERROR:SCLEN/000E             GETFCBFROMIOCB/C11C             GETIOCB1/B27C   GETIOCBPOINTER/B25C
 GETIOCBX/B277   GETRUNNINGENCRYPTED/BA93        GETRUNNINGENCRYPTED1/BA9C       GETSERIALNUMBER/BA73
*GETSERIALNUMBER:ACTUALCOUNT/0008               *GETSERIALNUMBER:BUFFERP/000A
*GETSERIALNUMBER:MAXCOUNT/000C   GETSERIALNUMBER:SCLEN/000E      GETSERIALNUMBERADDRESS/BA83
 GETSERIALNUMBERADDRESSRTS/BA92  GETWORD/BC58    HASHFOLD/CA3B   HASHINSERT6/CA4A
 HASHINSERT6L/CA4C               HASHNAME/CA55   HASHNAME2/CAAF  HASHNAMEL1/CA87
 HASHNAMEL2/CA9D                 HASHNAMEL3/CABB                 HEADER:LCN/0000
 HEXTOD/22DD     HEXTOD1/22EC    HEXTOD2/22F4    IC:CREATE/0000 *IC:DESTROY/0001
*IC:LOCK/0003   *IC:RELEASE/0004                *IC:RESET/0002  *IC:TEST/0005    IGNORED/0000
 ILLDEVICEOP/BCAD                INCIOCB:CURLSN/D7F0             INCIOCB:CURLSNX/D7FD
 INCORRECTROM/20CB               INITCOUNTER/2704                INITDATE/271F   INITDATELEN/0009
 INITDISKERRED/264D              INITDISKINFO/25C4               INITDISKINFO2/2608
 INITDISKINFO2L/260C             INITDISKINFOL/25D5              INITFCBL/25AC   INITFCBS/2593
 INITIALIZEERR/214D              INITIOCB/26AD   INITIOCBL/2690  INITIOCBS/2686  INITRDSI/245F
*INITRDSI1/249A  INITRDSI2/24A3  INITRDSI2A/24AE                 INITRDSI3/24C1  INITRDSI3A/24CE




ASM/6800 1.4A0: DEFA SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 468; Form 26    Symbols Sorted by Name
SDOS6800.ASM
 INITRDSI4/24D9  INITRDSI4A/24E8                 INITRDSI4L/24D3                *INITRDSI6/24F5
 INITRDSI7/24FF  INITRDSI8/2527  INITRDSI9/2543  INITX/2705      INTDISABLE/AF7D
 INTENABLE/AF80  INTERLOCK/B39E *INTERLOCK:BUFFERP/0004         *INTERLOCK:COUNT/0006
 INTERLOCK:FUNCTION/0002         INTERLOCK:SCLEN/0008            INTERLOCKOKRTS/B3AE
 INTERRUPTSTACK/AF86             INTRTI/AF83     INVALIDROMMSG/2275              INVALIDROMMSGEND/22B8
 INVENTSECTOR/D8F0               IOBLOCK/AFFD   *IOCB:BUFFERP/0005               IOCB:BYTECOUNT/0016
 IOCB:COLCNT/000C                IOCB:CURBYTE/000D               IOCB:CURLCN/0018
 IOCB:CURLSN/0002                IOCB:DCB/0000   IOCB:DISKWRITELOCKED/0011       IOCB:DRDSI/0012
 IOCB:DRIVER/0009                IOCB:DRSN/001A  IOCB:EOFFLAG/000B               IOCB:FCB/0007
 IOCB:HRDSI/001F                 IOCB:HRSN/0021  IOCB:LOCATEDF/0011              IOCB:NEXTBYTE/0014
 IOCB:RBN/001D   IOCB:RDCN/001B  IOCB:SIZE/0022  IOCBPOINTER/AE09                IOINTERRUPT/DEC3
 IOINTJ/DED0     IOPKDEFS/0000   IORTI/DDCE      IORTI1/DDD1     ISALPHANUM/B297
 ISALPHANUM1/B2A6                ISALPHANUMRTS/B2A5              ISCONSOLE/B21F  ISCONSOLE:SCLEN/0002
 ISCONSOLEOKRTS/B252             ISDIG/B28E      ISDNO/B295     *JC:CREATE/0000 *JC:DESTROY/0002
*JC:TESTDONE/0001                JMPIOINT/AF88  *JOBCONTROL:ACTUALCOUNT/0008    *JOBCONTROL:BUFFERP/0004
*JOBCONTROL:COUNT/0006          *JOBCONTROL:FUNCTION/0002       *JOBCONTROL:MAXCOUNT/000C
*JOBCONTROL:SCLEN/0008           JUSTREADY/DE2D  K/0400          KEY0/B0C2       KEY1/B07E       KEY2/B085
 KEY3/B08C       KEY4/B093       KEY5/B09A       KEY6/B0A1       KEY7/B0A8       KILLEDF/AF8C
 KILLEDTEST/B7C0                 KILLENABLE/B7B9                 KILLENABLE:SCLEN/0002
 KILLPROGRAM/B7C4                KILLPROGRAM1/B7DB               KILLPROOF/B7B5  KILLPROOF1/B7BA
 KILLPROOF:SCLEN/0002            KILLREQUESTEDF/AF8B             KILLUSER2/B7A7  KILLUSERPROGRAM/B78A
 KILLUSERRTS/B7B0                LASTERROR/AE01  LASTSECTORREADQ/AEEF            LCN:SIZE/0002
 LCNGROUPLENGTH/AEE6             LDAENCRYPTED/2165               LIMIT/0004      LISTDEFS/0001
 LOAD/BA42       LOAD2AND3/BB93  LOAD2AND3.1/BBB5                LOAD2AND3BYTE/BC16
 LOAD2AND3LOOP/BBBA              LOAD2AND3MASSDECRYPT/BC04       LOAD2AND3RTS/BC2A
 LOAD:ENCRYPTED/0005            *LOAD:LENGTH/0006               *LOAD:NAMEP/0004
 LOAD:SCLEN/000E                 LOAD:TYPE0/0000                 LOAD:TYPE1/0001
 LOAD:TYPE2/0002                 LOAD:TYPE3/0003                 LOADADDRESS/B049
 LOADCASCADELOOP/BACF            LOADCLOSE/BA4F  LOADCLOSE1/BA70                 LOADCONTENTS/BB7A
 LOADCOUNT/AE4A  LOADENCRYPTED/BAA4              LOADENCRYPTED1/BAB7             LOADER2/BA2D
 LOADFILEPOS/B02D                LOADGETPOS/B01F                 LOADINIT/B9AC   LOADINITCANT1/BA3F
 LOADINITCANTOPEN/BA37          *LOADINITOKRTS/BA28              LOADMULTIPLEOF8/B03F
 LOADNEXT/BB7A   LOADREST/BA4A   LOADSETPOS/BB22                 LOADSTART/B9FA  LOADSYSCALLPTR/AF1D
 LOADTYPE0/BB2A  LOADTYPE0.1/BB70                LOADTYPE0.2/BB4F                LOADTYPE0L/BB2D
 LOADTYPE1/BA05  LOADTYPE2/BB78  LOADTYPE3/BB93  LOCATECURBYTE/D2B1              LOCATECURBYTE0/D32A
*LOCATECURBYTE1/D335             LOCATECURBYTE2/D376             LOCATECURBYTE3/D386
 LOCATECURBYTE3A/D36E            LOCATECURBYTE4/D33B             LOCATECURBYTE5/D396
 LOCATECURBYTE5A/D3EB            LOCATECURBYTE5B/D3B8           *LOCATECURBYTE6/D435
 LOCATECURBYTE7/D439             LOCATECURBYTE8/D3C2             LOCATECURBYTE9/D466
 LOCATECURBYTE9J/D2D7            LOCATECURBYTED/D446             LOCATECURBYTED2/D461




ASM/6800 1.4A0: DEFA SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 469; Form 26    Symbols Sorted by Name
SDOS6800.ASM
 LOCATECURBYTEDJ/D665            LOCATECURBYTEE/D2DA             LOCATECURBYTEE1/D31C
 LOCATECURBYTEE2/D2E6            LOCATECURBYTEE3/D31F            LOCATECURBYTEE4/D30F
 LOCATECURBYTEG/D3E5             LOCATECURBYTEGJ/D327           *LOCATECURBYTER/D403
 LOCATECURBYTEW/D46D             LOCATECURBYTEW2/D496            LOCATECURBYTEW4/D4D0
 LOCATECURBYTEW5/D4A3            LOCATECURBYTEWJ/D2D4            LOCATEDIRENTRY/C9B3
 LOCATERDCN/D66B                 LOCATERDCN0/D67D                LOCATERDCN2/D696
 LOCATERDCN3/D6B9                LOCATERDCNX/AF19                LOCDSKD/D5D5    LOCDSKD0/D5F8
 LOCDSKD1/D5EB   LOCDSKD2/D631   LOCDSKD3/D668   LOCDSKD4/D662   LOCDSKDR/D627   LOCUPDATEDIRENTRY/C9F8
 LOGCHANNEL/00FF                 LOGCLOSE/B4C8   LOGIOCB/AF35    LOGOUT/AFAE     LSN:SIZE/0003
 M6800/0001      M6801/0000      M6809/0000      MACRO:0002/2073                 MACRO:0003/207F
 MACRO:0004/20ED                 MACRO:0005/20FB                 MACRO:0006/211E
 MACRO:0007/2498                 MACRO:0008/2600                 MACRO:0009/B506
 MACRO:000A/B520                 MACRO:000B/B583                 MACRO:000C/B768
 MACRO:000E/B9EF                 MACRO:000F/BA26                 MACRO:0010/BAFE
 MACRO:0011/BBD5                 MACRO:0012/BEF7                 MACRO:0013/BF03
 MACRO:0014/C092                 MACRO:0015/C4AA                 MACRO:0016/C660
 MACRO:0017/C779                 MACRO:0018/C78A                 MACRO:0019/C877
 MACRO:001A/CB81                 MACRO:001B/CB96                 MACRO:001C/CBFA
 MACRO:001D/CD24                 MACRO:001E/CDA8                 MACRO:001F/CF18
 MACRO:0020/D22F                 MACRO:0021/D333                 MACRO:0022/D3B8
 MACRO:0023/D403                 MACRO:0024/D433                 MACRO:0025/D455
 MACRO:0026/D479                 MACRO:0027/D48A                 MACRO:0028/D725
 MACRO:0029/D751                 MACRO:002A/D888                 MACRO:002B/D908
 MACRO:002C/D91A                 MACRO:002D/D99C                 MACRO:002E/DA46
 MACRO:002F/DA54                 MACRO:0030/DDA7                 MARKINVALID/C653
 MARKINVALID1/C674               MARKINVALIDL/C656               MARKMODIFIED/BF7C
 MAXSECTORSIZE/AF0E              MEMSIZE/0038    MINSTACK/0015   MULNLSNBYAB/2655
 MULNLSNBYAB1/2672               MULNLSNBYABL/2662               NAMESCANPTR/AE4E
 NAMESIZE/AE50   NBUFFERS/2703   NDRIVES/AF0B    NEWKEYENCRYPTED/B070            NFCBS/AF0A      NKEYS/B065
 NMAGICFCBS/0002                 NMBPB/0008      NRDSIS/AF09     NTIMEOUTBLKS/AE5A               OKRTS/0C39
 OKTODECRYPTFLAG/B067            OLDKEYENCRYPTED/B068            OPCODEMAX/001E  OPCODES/B153
 OPEN/B3F7       OPEN1/B3FC      OPEN2/B431     *OPEN:CHANNEL/0002              *OPEN:LENGTH/0006
*OPEN:NAMEP/0004                 OPEN:SCLEN/000E                 OPENCONSOLE/B899
 OPENERRED/B44A  OPENSERIALNO.SYS/2746           OPTIMIZEDLOADCOUNT/B04B         PARSECOUNT/AED5
 PARSEFILENAME/CBB9              PARSENAME0/CBE2                 PARSENAME1/CC25
 PARSENAMEB/CCDA                 PARSENAMEB1/CD03                PARSENAMEBLANK/CCF1
 PARSENAMEBOK/CCF4               PARSENAMEBX/CCF7                PARSEQUIT/CC8C  PARSESCAND/CC52
 PARSESCANL/CC32                *PATCHSPACE/DED3                 PLANTDCBINIOCB/B43E
 PRINTCANTRUN/21ED               PRINTINVALIDROM/226D            PROT::BACKUP/0001
 PROT::WRITE/0040                PUSH0TO7/DDDE   RDSI:BLINK/0009                 RDSI:CYLINDER/0012




ASM/6800 1.4A0: DEFA SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 470; Form 26    Symbols Sorted by Name
SDOS6800.ASM
 RDSI:DISKINFO/0000              RDSI:FLINK/0007                 RDSI:LSN/0002   RDSI:MODIFIED/000B
*RDSI:RETRYCOUNT/000D           *RDSI:SECTOR/000E                RDSI:SECTORBASE/0005
 RDSI:SIZE/0014  RDSI:STATE/000C                 RDSI:TRACK/0010                 RDSIPOINTER/AEA4
*RDSISTATE:IDLE/0000             RDSISTATE:READING/0001         *RDSISTATE:VERIFYING/0003
 RDSISTATE:WRITING/0002          READA/B4FA     *READA1/B583     READA2/B53F     READA:ACTUALCOUNT/0008
 READA:BUFFERP/000A              READA:CHANNEL/0002              READA:LMFLAG/0003
 READA:MAXCOUNT/000C             READA:SCLEN/000E                READAEOF/B4F5   READAHEAD/D804
 READAHEAD0/D82B                 READAHEAD1/D893                 READAHEADCERRED/D86E
 READAHEADH/D873                 READAHEADH1/D8D3                READAHEADHA/D8CE
 READAHEADNX/D8BE                READAHEADOKRTS/D8BC             READAHEADRDSIMIN/0003
 READAHEADS/D8B6                 READALOG/B594   READALOG0/B5B7  READARTS/B5E1   READB/B468
 READB:ACTUALCOUNT/0008          READB:BUFFERP/000A             *READB:CHANNEL/0002
 READB:MAXCOUNT/000C             READB:SCLEN/000E                READBEHIND/D7E2
 READBEHINDERRED/D7FF            READBEHINDOKRTS/D7FD            READFLAG/AF03   READLUNNAME/B1EE
 READLUNNAME:SCLEN/000E          READSECTOR/D8F3                 READSECTOR0/D8F5
*READSECTOR1/D959                READSECTOR2/D96D                READSECTOR2L/D970
 READSECTOR3/D99E                READSECTOR4/D9AF                READSECTORDBP/AF04
 READSECTORF/D9F0                READSECTORI/D9EB                READSECTORL/D902
 READSECTORL1/D928               READSECTORNM/D932               READSECTORNMA/D92B
 READSECTORR/D9EE               *READSECTORV/D939                READSECTORVD/D955
 READSECTORVD1/D956              READSECTORZAPD/DA4C             READSECTORZAPD1/DA4E
 READSECTORZAPH/DA3E             READSECTORZAPIOCB/DA2F          READSECTORZAPRTS/DA5A
 READSERIALNUMBERFILETYPE/2773   READSERIALNUMBERFROMFILE/2761   REG:A/0003     *REG:B/0002
*REG:CC/0001     REG:PC/0006    *REG:X/0004      REMOVEIOCBPTR/AF07              REMOVERDSI/DA00
 REMOVERDSIL/DA10                REMOVESECTORCNT/AF06            RENAME/B4CB     RENAME1/B4E9
*RENAME:CHANNEL/0002            *RENAME:LENGTH/0006             *RENAME:NAMEP/0004
 RENAME:SCLEN/000E               REQUERDSI/DA5B  REQUERDSI1/DA5E                 RESTART/2162
 RESTOREUSERIOCB/C683            RUNNINGENCRYPTEDFLAG/B066       RUNNINGENCRYPTEDP/2782
 RW:POSITION/000E                RWPOSITION:SCLEN/0012           SAFEGAURD/B00F  SAFEGAURD1/B012
 SAVEUSERIOCB/C69E               SAYINVALIDROM/2264              SC:DEVICESPECIFICOP/0010
*SC:GETACTCOL/0011              *SC:GETBACKGROUND/001A          *SC:GETBAUDRATE/0014
*SC:GETCOL/0001 *SC:GETCOLORING/0019            *SC:GETEOF/0002  SC:GETERRORSTATS/0011
 SC:GETFILEDATE/0010             SC:GETFILEPROT/0011            *SC:GETFILESIZE/0003
*SC:GETIDLES/0017                SC:GETLASTBADLSN/0010          *SC:GETLINEFLAGS/002C
 SC:GETLINEFLAGSHINT/0034       *SC:GETOUTPUTTIMEOUT/0013        SC:GETPARAMS/0005
 SC:GETPOS/0000 *SC:GETPROFILE/0010             *SC:GETPROFILEALTERATION/0012   *SC:GETPROFILENAME/001B
*SC:GETTABS/0016                *SC:GETTYPE/0004                *SC:GETWRAP/0018
 SCBLK:DATA/000E                *SCBLK:END/000E  SCBLK:OPCODE/0000               SCBLK:PARAMS/0002
 SCBLK:RDBUF/000A                SCBLK:RDLEN/000C                SCBLK:RPLEN/0008
 SCBLK:WLEN/0001                 SCBLK:WRBUF/0004                SCBLK:WRLEN/0006




ASM/6800 1.4A0: DEFA SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 471; Form 26    Symbols Sorted by Name
SDOS6800.ASM
 SCHEDLDS/DE07   SCHEDLOOP/DE14  SCHEDTEST/DE24  SCHEDTOP/DE0A   SCHEDX/AF7B     SCRATCH/2754
 SDOS:BLOCKMOVE/0042            *SDOS:CHECKRDLEN/0036           *SDOS:CHECKSCLEN/003C
*SDOS:CHECKWRLEN/0039            SDOS:CLOCK/000B                *SDOS:CLOCKTICKED/001B
 SDOS:CONFIGURATION/0003         SDOS:CURRENTASK/001E            SDOS:DAY/000E   SDOS:END/DEFB
 SDOS:ENTRYSIZE/0048            *SDOS:ERROR/002D                *SDOS:ERRORED/0033
*SDOS:ERRORSAVE/0030             SDOS:ESTSIZE/3200              *SDOS:GETRUNNINGENCRYPTED/0045
 SDOS:IOBLOCKPTR/0007           *SDOS:IOCBPOINTER/0009          *SDOS:IOINT/0012
 SDOS:KILLPROOF/0020            *SDOS:KILLUSERPROGRAM/0021      *SDOS:LASTERROR/0001
 SDOS:MONTH/000F                *SDOS:RESCHEDULE/0018           *SDOS:RTI/0015  *SDOS:SERIALNUMBER/0005
 SDOS:STACKSWITCHED/0011         SDOS:STARTIO/0024              *SDOS:TABLEBRANCH/003F
*SDOS:VERSIONNUMBER/0000        *SDOS:WAITCOND/0027             *SDOS:WAITEVENT/002A
 SDOS:YEAR/0010  SDOSCHKSUMBASE/B0C3             SDOSCODECHKSUM/B846             SDOSINIT/2000
 SDOSINIT0/230C  SDOSINIT1/2316  SDOSINIT1A/2318                *SDOSINIT1B/238A
 SDOSINIT1L/2383                 SDOSINIT2/240A  SDOSINITCKSUM/22F5              SDOSINITCKSUML/2019
 SDOSINITDBLCHECKL/23D8          SDOSINITEND/26BD                SDOSINITERRED/22F6
 SDOSINITID/270F                 SDOSINITS/22F9  SDOSINITTCB1/239A               SDOSINITTCBL/23AF
 SDOSMSG/B119    SDOSNOTREGISTERED/B3CD          SDOSRECURSIVECALL/AF8D          SDOSSECRETKEY/BB1A
 SDOSSERIALNUMBER/221B           SDOSSTACK/AF22  SDOSSUBREVISION/0047            SDOSVERSION/0011
 SEARCHDI1/C6EA  SEARCHDI3/C71D  SEARCHDI3A/C7CF                 SEARCHDI4/C7EC  SEARCHDI5A/C73C
 SEARCHDI5L/C736                 SEARCHDIR/C67D  SEARCHDIR1/C82B                 SEARCHDIR2/C8AB
 SEARCHDIRCERRED/C9B0            SEARCHDIRCNEW/C97F              SEARCHDIRCOKRTS/C9AD
 SEARCHDIRCREAT1/C938            SEARCHDIRCREAT2/C97A            SEARCHDIRCREATE/C935
 SEARCHDIRE/C6AB                 SEARCHDIRERRED/C699             SEARCHDIRERRED4/C8FF
 SEARCHDIRF/C7F2                 SEARCHDIRL/C86C                 SEARCHDIRL1/C87E
 SEARCHDIRMOUNT/C6CF             SEARCHDIRN/C8B2                 SEARCHDIRNF/C900
 SEARCHDIROKRTS/C80A             SEARCHDIRS/C852                 SEARCHDIRSJ/C8FC
 SEARCHDIRT/C8E3                 SEARCHFCBCMPNO/CBA4             SEARCHFCBINIT/CB4E
 SEARCHFCBRTS/CBAE               SEARCHFCBS/CB5E                 SEARCHFLCN/D1C3
 SEARCHLCN/AEDE  SEARCHM2/CFAA   SEARCHM3/CFB6   SEARCHM4/CFBC   SEARCHM5/CFA1   SEARCHMAP/CF84
 SEARCHMAP1/CF9B                 SEARCHMERRED3/D1F2              SEARCHMF/D016   SEARCHMF0/D022
 SEARCHMF1/D02A  SEARCHMF1A/D02D                 SEARCHMF2/D060  SEARCHMF3/D068  SEARCHMF4/D057
 SEARCHMF5/D078  SEARCHMF6/D080  SEARCHMF7/D083  SEARCHMF8/D089  SEARCHMFE/CFDE  SEARCHMFE1/CFFA
 SEARCHMFE2/CFE6                 SEARCHMFG/D0AA  SEARCHMFQ/D0C8  SEARCHMFQJ1/CFDB
 SEARCHMFQXIT/D1CC               SEARCHMFQXITJ1/D013             SEARCHMR/D0E0   SEARCHMR0/D0E4
 SEARCHMR0A/D0EC                 SEARCHMR1/D12A  SEARCHMR2/D155  SEARCHMR3/D15D  SEARCHMR4/D14C
 SEARCHMR4C/D140                 SEARCHMR5/D16F  SEARCHMR6/D177  SEARCHMR7/D17D  SEARCHMR8/D184
 SEARCHMRE/D0F2  SEARCHMRE1/D111                 SEARCHMRE2/D0F8                 SEARCHMRE3/D109
 SEARCHMREB/D1E2                 SEARCHMREBJ1/D127               SEARCHMRG/D1A5  SEARCHNAMEP/AEAC
 SEARCHOOSE/D1F5                 SEARCHOOSE1/D207                SEARCHOOSE2/D21D
 SEARCHSAVEP/AEAE                SEARCHSTARTLSN/AEB0             SEARCHUS/D1B7   SECONDARYCHECKSUM1/DD88




ASM/6800 1.4A0: DEFA SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 472; Form 26    Symbols Sorted by Name
SDOS6800.ASM
*SECTOR:BYTE/0000               *SECTORDB:ADDRESS/0005           SECTORDB:DISKINFO/0000
 SECTORDB:LSN/0002               SECTORDB:SIZE/0007              SECTORDRIVER/DBCB               SEED/2781
 SERIALNUMBER.SYS/2736           SERIALNUMBER.SYSL/0010          SERIALNUMBER:SIZE/0008
 SERIALNUMBERLOCATION/B844       SETERROR/B64A   SETERROR:CODE/0002              SETERROR:SCLEN/0004
 SETINITERROR/275B               SETKEY/BC60     SETUPFCB/CAEE   SETUPFCBCL/CAF8
 SETUPFCBDIRPOS/CB2D             SETUPFORREAD/C108               SETUPFORREAD1/C110
 SETUPFORWRITE/C0FC              STAASECTORL/CEA8                STARTADDRESS/AE48
 STARTIO$/DEA5   STATUS/B629    *STATUS:ACTUALCOUNT/0008        *STATUS:BUFFERP/000A
*STATUS:CHANNEL/0002             STATUS:CODE/0003               *STATUS:COLUMN/0000
 STATUS:DATA/0000               *STATUS:DATEDAY/0003            *STATUS:DATEMONTH/0004
*STATUS:DATETICKS/0000          *STATUS:DATEYEAR/0005           *STATUS:DEVTYPE/0000
*STATUS:DIST/0000               *STATUS:EOFFLAG/0000            *STATUS:ERRLSN/000F
*STATUS:FILESIZE/0000           *STATUS:LASTBADLSN/0000         *STATUS:MAXCOUNT/000C
*STATUS:NBPS/0000               *STATUS:NCYL/0006               *STATUS:NSPC/0002
*STATUS:NSPT/0002               *STATUS:NTPC/0004               *STATUS:OPSCOUNT/000C
*STATUS:PROT/0000               *STATUS:READERRCNT/0008         *STATUS:READERRSTS/000A
 STATUS:SCLEN/000E              *STATUS:SEEKERRCNT/0000         *STATUS:SEEKERRSTS/0002
*STATUS:WRITEERRCNT/0004        *STATUS:WRITEERRSTS/0006         STATUSCONTROL/B60B
 STATUSCONTROL1/B61F             STRINGBUFFER/AF2F               SURPRISE/AF7A   SWAPPING/0000
 SYSCALL$/00FB   SYSCALL1/B1BD   SYSCALL2/B1D8  *SYSCALL:ATTNCHECK/0019          SYSCALL:CHAIN/0006
 SYSCALL:CLOSE/0002             *SYSCALL:CLOSELOG/0008           SYSCALL:CONTROL/000E
*SYSCALL:CREATE/0001            *SYSCALL:CREATELOG/0007         *SYSCALL:DEBUG/0018
*SYSCALL:DELAY/001C             *SYSCALL:DELETE/0004            *SYSCALL:DISKDEFAULT/0009
 SYSCALL:DISPERROR/0015          SYSCALL:ERROREXIT/0012         *SYSCALL:EXIT/0011
*SYSCALL:GETERROR/0014          *SYSCALL:GETSERIALNUMBER/001E   *SYSCALL:INTERLOCK/001B
*SYSCALL:ISCONSOLE/001A         *SYSCALL:JOBCONTROL/001F        *SYSCALL:KILLENABLE/0017
*SYSCALL:KILLPROOF/0016         *SYSCALL:LOAD/0005               SYSCALL:OPEN/0000
 SYSCALL:READA/000A              SYSCALL:READB/000B             *SYSCALL:READLUN/001D
*SYSCALL:RENAME/0003             SYSCALL:SETERROR/0013           SYSCALL:STATUS/000F
*SYSCALL:WAITDONE/0010           SYSCALL:WRITEA/000C            *SYSCALL:WRITEB/000D
 SYSCALLENTRY/B1B2               SYSCALLX/AF1F   SYSCHANNEL/00FE                *SYSDEPENDENT/00F0
 SYSFCBPOINTER/AF10              SYSIOCB/AF57    SYSSECTORDB/AF12                SYSTEMDEFS/0001
 TABLEBRANCH/C20B                TABLEBRANCHCANT/C22A            TASKRTI/DDC3    TCB:COND/0004
 TCB:LNK/0000    TCB:PARAM/0006  TCB:SCRATCHPAD/0008             TCB:SIZE/0010   TCB:STACK/0002
 TEMP/0000       TEMP.DIVIDEND/0002              TEMP.DIVISOR/0000               TEMP.MPCND/0000
 TEMP.MPR/0005   TEMP.QUOTIENT/0000              TEMPA/0000      TEMPB/0001      TEMPX/0000
 TIMEOUT:DCB/0006                TIMEOUT:FUSE/0002               TIMEOUT:LINK/0000
 TIMEOUT:ROUTINE/0004           *TIMEOUT:SIZE/0008               TIMEOUTLEH/DD9B
 TIMEOUTLEH3/DDB7                TIMEOUTLEPTR/AE5C               TIMEOUTTASK/DD62
 TIMEOUTTASKBORED/DD5C           TIMEOUTTASKL/DD67               TIMEOUTTASKSETUP/26B2




ASM/6800 1.4A0: DEFA SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 473; Form 26    Symbols Sorted by Name
SDOS6800.ASM
 TIMEOUTTASKSTKINIT/AE72         TIMEOUTTASKTCB/AE7A             TOPOINTER/0000  TRANSFERCOUNT/AE9D
 UPDATECURBYTE/D580              UPDATECURBYTE1/D599             UPDATECURBYTED/D5C6
 UPDATECURBYTEF/D5B9             UPDATECURBYTEOKRTS/D5C4         UPDATECURBYTERTS/D5B8
 UPDATEDIRENTRY/C9FA             UPDATEDIRFROMFCB/C9EB           UPDATEDIRL/CA01
 UPDATEDIROKRTS/CA1E             UPDATEFILEDATE/BD0C             USEDCOUNT/AE9F  USERIOCBPOINTER/AEA2
 USERRETAPTR/AF8E                USERSLASTERROR/AF26             USERSYSCALLPTR/AF90
 USERTASKTCB/AE8A                VERIFYNMIISNOP/20D6             VERIFYRESTARTCODE0/203B
 VERIFYRESTARTCODE1/208D         VERIFYRESTARTCODELOOP/2099      WAIT$/DE7A      WAITDONE/B652
*WAITDONE:CHANNEL/0002           WAITDONE:SCLEN/0003             WAITEVENT$/DE72
 WAITEVENTCOND/DE6F              WAITEVENTCONDRTS/DE71           WAITFORMESSAGEPRINTED/21BD
 WAITRDSI/DAA1   WAITSECTOR/DA9F                 WAITSECTOR1/DAAC                WAITSECTORERRED/DAB8
 WAITSECTORERRJ/D9E8             WAITSECTORERRJ2/DB57            WAITSECTORRTS/DAB6
 WRITEA/B5E2     WRITEA0/B5F4    WRITEA1/B5FA    WRITEA:BUFFERP/0004             WRITEA:CHANNEL/0002
 WRITEA:COUNT/0006               WRITEA:SCLEN/0008               WRITEALOG/B59D  WRITEB/B46F
 WRITEB1/B481    WRITEB:BUFFERP/0004             WRITEB:CHANNEL/0002            *WRITEB:COUNT/0006
 WRITEB:SCLEN/0008               WRITEBOKRTS/B493                WRITEFLAG/AE9A  WRITERANDOM/217A
 WRITERANDOM1/2183               WRITERANDOM2/2185               WRITERANDOML/217C
 ZAPMEMORYLOOP/21E5              ZAPUSERSPACE/BC89               ZAPUSERSPACEL/BC8A
 ZEROCLUSTER/CEC9                ZEROCLUSTERL/CECC               ZERONEWKEYLOOP/B9F4
 ZEROSECTOR/CEB7                 ZEROTOCURBYTE/D4E6              ZEROTOCURBYTE3/D554
 ZEROTOCURBYTE5/D557             ZEROTOCURBYTEA/D52A             ZEROTOCURBYTEA1/D54A
 ZEROTOCURBYTEZ/D4F7




ASM/6800 1.4A0: DEFA SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 474; Form 26    Symbols Sorted by Value
SDOS6800.ASM
Symbols Sorted by Value:

*ASCII:NULL/0000                *BOOT:IPLDATA/0000               CC:POSITION/0000
 CHANGED/0000    CNFG:DISKDCBS/0000              CONTROL:DATA/0000              *CONTROL:DATETICKS/0000
*CONTROL:DIST/0000              *CONTROL:MAPALGORITHM/0000      *CONTROL:PROT/0000
*DCB:DONEFLAG/0000              *DIR:FILENAME/0000               DISKMAP:BYTE/0000
 DRIVER:DISKRESET/0000           DRIVER:OPEN/0000                DVDAT:NBPS/0000
*DVDAT:WIDTH/0000                DVTYP.FILE/0000                *DVTYP:TYPE/0000
*ERR:NONE/0000   FCB:DISKINFO/0000               HEADER:LCN/0000                 IC:CREATE/0000
 IGNORED/0000    IOCB:DCB/0000   IOPKDEFS/0000  *JC:CREATE/0000  LOAD:TYPE0/0000                 M6801/0000
 M6809/0000      RDSI:DISKINFO/0000             *RDSISTATE:IDLE/0000             SC:GETPOS/0000
 SCBLK:OPCODE/0000              *SDOS:VERSIONNUMBER/0000        *SECTOR:BYTE/0000
 SECTORDB:DISKINFO/0000         *STATUS:COLUMN/0000              STATUS:DATA/0000
*STATUS:DATETICKS/0000          *STATUS:DEVTYPE/0000            *STATUS:DIST/0000
*STATUS:EOFFLAG/0000            *STATUS:FILESIZE/0000           *STATUS:LASTBADLSN/0000
*STATUS:NBPS/0000               *STATUS:PROT/0000               *STATUS:SEEKERRCNT/0000
 SWAPPING/0000   SYSCALL:OPEN/0000               TCB:LNK/0000    TEMP/0000       TEMP.DIVISOR/0000
 TEMP.MPCND/0000                 TEMP.QUOTIENT/0000              TEMPA/0000      TEMPX/0000
 TIMEOUT:LINK/0000               TOPOINTER/0000 *ASCII:SOH/0001  CC:DUMPBUFFERS/0001
*DCB:LASTERROR/0001             *DVDAT:DEPTH/0001                DVTYP.DISK/0001
*ERR:ATTENTION/0001             *IC:DESTROY/0001                *JC:TESTDONE/0001
 LISTDEFS/0001   LOAD:TYPE1/0001                 M6800/0001      PROT::BACKUP/0001
 RDSISTATE:READING/0001         *REG:CC/0001    *SC:GETCOL/0001  SCBLK:WLEN/0001
*SDOS:LASTERROR/0001            *SYSCALL:CREATE/0001             SYSTEMDEFS/0001                 TEMPB/0001
*ASCII:STX/0002  ATTNCHECK:SCLEN/0002            CLOSE:CHANNEL/0002              CLOSELOG:SCLEN/0002
 CNFG:DEVICEDCBS/0002           *CONTROL:CHANNEL/0002           *CREATE:CHANNEL/0002
 DEBUG:SCLEN/0002                DELAY:PERIOD/0002               DISPERROR:SCLEN/0002
 DRIVER:CLOSE/0002               DRIVER:DISKREAD/0002           *DVDAT:NSPC/0002
*DVDAT:NSPT/0002                *DVTYP.STAPE/0002                ERROREXIT:CODE/0002
 EXIT:SCLEN/0002                 EXITSCANPTR/0002                FCB:DIRLSN/0002
 FROMPOINTER/0002               *IC:RESET/0002   INTERLOCK:FUNCTION/0002         IOCB:CURLSN/0002
 ISCONSOLE:SCLEN/0002           *JC:DESTROY/0002                *JOBCONTROL:FUNCTION/0002
 KILLENABLE:SCLEN/0002           KILLPROOF:SCLEN/0002            LCN:SIZE/0002   LOAD:TYPE2/0002
 NMAGICFCBS/0002                *OPEN:CHANNEL/0002               RDSI:LSN/0002   RDSISTATE:WRITING/0002
 READA:CHANNEL/0002             *READB:CHANNEL/0002             *REG:B/0002     *RENAME:CHANNEL/0002
*SC:GETEOF/0002  SCBLK:PARAMS/0002               SECTORDB:LSN/0002               SETERROR:CODE/0002
*STATUS:CHANNEL/0002            *STATUS:NSPC/0002               *STATUS:NSPT/0002
*STATUS:SEEKERRSTS/0002          SYSCALL:CLOSE/0002              TCB:STACK/0002  TEMP.DIVIDEND/0002
 TIMEOUT:FUSE/0002              *WAITDONE:CHANNEL/0002           WRITEA:CHANNEL/0002
 WRITEB:CHANNEL/0002            *ASCII:ETX/0003  CLOSE:SCLEN/0003               *CONTROL:CODE/0003




ASM/6800 1.4A0: DEFA SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 475; Form 26    Symbols Sorted by Value
SDOS6800.ASM
*CONTROL:DATEDAY/0003            DCB:NAME/0003  *DVTYP.DTAPE/0003               *IC:LOCK/0003
 LOAD:TYPE3/0003                 LSN:SIZE/0003  *RDSISTATE:VERIFYING/0003        READA:LMFLAG/0003
 READAHEADRDSIMIN/0003           REG:A/0003     *SC:GETFILESIZE/0003             SDOS:CONFIGURATION/0003
 STATUS:CODE/0003               *STATUS:DATEDAY/0003            *SYSCALL:RENAME/0003
 WAITDONE:SCLEN/0003            *ASCII:EOT/0004 *CHAIN:NAMEP/0004                CNFG:IOCBPOINTERS/0004
*CONTROL:DATEMONTH/0004          CONTROL:SCLEN/0004              COUNT/0004     *CREATE:NAMEP/0004
*CREATELOG:NAMEP/0004            DELAY:SCLEN/0004               *DELETE:NAMEP/0004
*DISKDEFAULT:NAMEP/0004          DRIVER:DISKWRITE/0004           DRIVER:READA/0004
*DVDAT:NTPC/0004                *DVTYP.CONSOLE/0004              ERROREXIT:SCLEN/0004
 EXITPARTIALCHKSUM/0004         *IC:RELEASE/0004                *INTERLOCK:BUFFERP/0004
*JOBCONTROL:BUFFERP/0004         LIMIT/0004     *LOAD:NAMEP/0004                *OPEN:NAMEP/0004
*REG:X/0004     *RENAME:NAMEP/0004              *SC:GETTYPE/0004                 SCBLK:WRBUF/0004
 SETERROR:SCLEN/0004            *STATUS:DATEMONTH/0004          *STATUS:NTPC/0004
*STATUS:WRITEERRCNT/0004        *SYSCALL:DELETE/0004             TCB:COND/0004   TIMEOUT:ROUTINE/0004
 WRITEA:BUFFERP/0004             WRITEB:BUFFERP/0004            *ASCII:ENQ/0005 *CONTROL:DATEYEAR/0005
 DCB:NEXTDCB/0005               *DVTYP.PRINTER/0005              FCB:DIRDISP/0005
*IC:TEST/0005   *IOCB:BUFFERP/0005               LOAD:ENCRYPTED/0005             RDSI:SECTORBASE/0005
 SC:GETPARAMS/0005              *SDOS:SERIALNUMBER/0005         *SECTORDB:ADDRESS/0005
*STATUS:DATEYEAR/0005           *SYSCALL:LOAD/0005               TEMP.MPR/0005  *ASCII:ACK/0006
 BLOCKMOVEX/0006                *CHAIN:LENGTH/0006               CNFG:NIOCHANNELS/0006
*CREATE:LENGTH/0006             *CREATELOG:LENGTH/0006           DCBPOINTER/0006
*DELETE:LENGTH/0006             *DISKDEFAULT:LENGTH/0006         DISPERRORMSGL/0006
 DRIVER:DISKWAIT/0006            DRIVER:WRITEA/0006             *DVDAT:NCYL/0006
*DVTYP.SERIALOUT/0006           *INTERLOCK:COUNT/0006           *JOBCONTROL:COUNT/0006
*LOAD:LENGTH/0006               *OPEN:LENGTH/0006                REG:PC/0006    *RENAME:LENGTH/0006
 SCBLK:WRLEN/0006               *STATUS:NCYL/0006               *STATUS:WRITEERRSTS/0006
 SYSCALL:CHAIN/0006              TCB:PARAM/0006  TIMEOUT:DCB/0006                WRITEA:COUNT/0006
*WRITEB:COUNT/0006              *ASCII:BEL/0007  BOOT:PARAMSIZE/0007             CNFG:DSKBUFFERPOOL/0007
 CONTEXTBLOCK:SIZE/0007          DCB:DRIVER/0007                *DVTYP.SERIALIN/0007
 FCB:HLSN/0007   IOCB:FCB/0007   RDSI:FLINK/0007                 SDOS:IOBLOCKPTR/0007
 SECTORDB:SIZE/0007             *SYSCALL:CREATELOG/0007          ASCII:BS/0008   DRIVER:DISKSTATUS/0008
 DRIVER:READB/0008              *DVTYP.PAROUT/0008              *GETERROR:ACTUALCOUNT/0008
*GETSERIALNUMBER:ACTUALCOUNT/0008                INTERLOCK:SCLEN/0008
*JOBCONTROL:ACTUALCOUNT/0008    *JOBCONTROL:SCLEN/0008           NMBPB/0008      READA:ACTUALCOUNT/0008
 READB:ACTUALCOUNT/0008          SCBLK:RPLEN/0008                SERIALNUMBER:SIZE/0008
*STATUS:ACTUALCOUNT/0008        *STATUS:READERRCNT/0008         *SYSCALL:CLOSELOG/0008
 TCB:SCRATCHPAD/0008            *TIMEOUT:SIZE/0008               WRITEA:SCLEN/0008
 WRITEB:SCLEN/0008               ASCII:HT/0009   CNFG:DSKPOOLSIZE/0009           DCB:SIZE/0009
 DSKINFO:NBPS/0009              *DVTYP.PARIN/0009                INITDATELEN/0009
 IOCB:DRIVER/0009                RDSI:BLINK/0009                *SDOS:IOCBPOINTER/0009




ASM/6800 1.4A0: DEFA SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 476; Form 26    Symbols Sorted by Value
SDOS6800.ASM
*SYSCALL:DISKDEFAULT/0009        ASCII:LF/000A   DRIVER:DISKCONTROL/000A         DRIVER:WRITEB/000A
*DVTYP.DUMMY/000A                FCB:FLAGS/000A *GETERROR:BUFFERP/000A
*GETSERIALNUMBER:BUFFERP/000A    READA:BUFFERP/000A              READB:BUFFERP/000A
 SCBLK:RDBUF/000A               *STATUS:BUFFERP/000A            *STATUS:READERRSTS/000A
 SYSCALL:READA/000A             *ASCII:VT/000B   CNFG:ATTNCHECK/000B             DSKINFO:NSPT/000B
*DVTYP.CLOCK/000B                FCB:REFCOUNT/000B               IOCB:EOFFLAG/000B
 RDSI:MODIFIED/000B              SDOS:CLOCK/000B                 SYSCALL:READB/000B
 ASCII:FF/000C   DRIVER:CREATE/000C             *DRIVER:DISKWRITEPROTQ/000C      FCB:HLCN/000C
*GETERROR:MAXCOUNT/000C         *GETSERIALNUMBER:MAXCOUNT/000C   IOCB:COLCNT/000C
*JOBCONTROL:MAXCOUNT/000C        RDSI:STATE/000C                 READA:MAXCOUNT/000C
 READB:MAXCOUNT/000C             SCBLK:RDLEN/000C               *STATUS:MAXCOUNT/000C
*STATUS:OPSCOUNT/000C            SYSCALL:WRITEA/000C             ASCII:CR/000D   CNFG:DEBUGGER/000D
 DSKINFO:NTPC/000D               IOCB:CURBYTE/000D              *RDSI:RETRYCOUNT/000D
*SYSCALL:WRITEB/000D            *ASCII:SO/000E   CHAIN:SCLEN/000E                CREATE:FILESIZE/000E
 CREATE:SCLEN/000E               CREATELOG:SCLEN/000E            DEFAULTPROGL/000E
 DELETE:SCLEN/000E               DIR:FCBDATASIZE/000E            DISKDEFAULT:SCLEN/000E
*DRIVER:DISKVERIFY/000E          DRIVER:RENAME/000E              FCB:HCSIC/000E  GETERROR:SCLEN/000E
 GETSERIALNUMBER:SCLEN/000E      LOAD:SCLEN/000E                 OPEN:SCLEN/000E
*RDSI:SECTOR/000E                READA:SCLEN/000E                READB:SCLEN/000E
 READLUNNAME:SCLEN/000E          RENAME:SCLEN/000E               RW:POSITION/000E
 SCBLK:DATA/000E                *SCBLK:END/000E  SDOS:DAY/000E   STATUS:SCLEN/000E
 SYSCALL:CONTROL/000E           *ASCII:SI/000F   CNFG:DRIVERBASE/000F            DSKINFO:NCYL/000F
 FCB:NCLUSTERS/000F              SDOS:MONTH/000F                *STATUS:ERRLSN/000F
 SYSCALL:STATUS/000F            *ASCII:DLE/0010  BOOT:DISKINFO/0010              BOOT:DISKINFOLEN/0010
 BOOT:FILESYSTEMVERSION/0010     CC:DEVICESPECIFICOP/0010       *CC:ECHO/0010    CC:SETFILEDATE/0010
 CC:UNLOCKDISK/0010              DIR:FCBDATA/0010                DIR:HLCN/0010   DIR:NAMESIZE/0010
 DRIVER:DELETE/0010             *DRIVER:DISKLSNTOPSN/0010        FCBFLG::MODIFIED/0010
 FILESYSTEMVERSION/0010          RDSI:TRACK/0010                 SC:DEVICESPECIFICOP/0010
 SC:GETFILEDATE/0010             SC:GETLASTBADLSN/0010          *SC:GETPROFILE/0010
 SDOS:YEAR/0010  SERIALNUMBER.SYSL/0010         *SYSCALL:WAITDONE/0010           TCB:SIZE/0010
*ASCII:DC1/0011  BOOT:NSPC/0011  CC:DISMOUNTDISK/0011           *CC:NOECHO/0011 *CC:SETFILEPROT/0011
 CNFG:INTSETUP/0011              DSKINFO:NSPC/0011               FCB:FILESIZE/0011
 IOCB:DISKWRITELOCKED/0011       IOCB:LOCATEDF/0011             *SC:GETACTCOL/0011
 SC:GETERRORSTATS/0011           SC:GETFILEPROT/0011             SDOS:STACKSWITCHED/0011
 SDOSVERSION/0011               *SYSCALL:EXIT/0011              *ASCII:DC2/0012 *BOOT:MINALLOC/0012
*CC:IDLES/0012  *CC:SETFILESIZE/0012             CC:SETMAPALGORITHM/0012         CREATE:FILESIZESCLEN/0012
 DIR:HCSIC/0012  DRIVER:CONTROL/0012             DSKINFO:MINALLOC/0012           IOCB:DRDSI/0012
 RDSI:CYLINDER/0012              RWPOSITION:SCLEN/0012          *SC:GETPROFILEALTERATION/0012
*SDOS:IOINT/0012                 SYSCALL:ERROREXIT/0012         *ASCII:DC3/0013 *CC:MULTISECTORREAD/0013
 CC:POSITIONTOEND/0013          *CC:TABS/0013    CNFG:INTDISABLE/0013           *DIR:NCLUSTERS/0013




ASM/6800 1.4A0: DEFA SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 477; Form 26    Symbols Sorted by Value
SDOS6800.ASM
*SC:GETOUTPUTTIMEOUT/0013        SYSCALL:SETERROR/0013          *ASCII:DC4/0014 *BOOT:MIDALLOC/0014
*CC:MULTISECTORWRITE/0014       *CC:SETACTBLOCK/0014             DRIVER:STATUS/0014
 DSKINFO:MIDALLOC/0014           IOCB:NEXTBYTE/0014              RDSI:SIZE/0014 *SC:GETBAUDRATE/0014
*SYSCALL:GETERROR/0014          *ASCII:NAK/0015 *CC:CLRINPUT/0015               *CC:FORMAT/0015
*DIR:FILESIZE/0015               FCB:PROT/0015   MINSTACK/0015  *SDOS:RTI/0015   SYSCALL:DISPERROR/0015
*ASCII:SYN/0016 *BOOT:MAPALGORITHM/0016         *CC:CLROUTPUT/0016              *CC:WAITDONE/0016
 CNFG:INTENABLE/0016             DRIVER:RESET/0016               DSKINFO:MAPALGORITHM/0016
 FCB:DAY/0016    IOCB:BYTECOUNT/0016            *SC:GETTABS/0016                *SYSCALL:KILLPROOF/0016
*ASCII:ETB/0017 *CC:SETREADTIMEOUT/0017          FCB:MONTH/0017 *SC:GETIDLES/0017
*SYSCALL:KILLENABLE/0017        *ASCII:CAN/0018  BOOT:CREATIONDATE/0018         *CC:SETPROFILE/0018
*DRIVER:STARTIO/0018             DSKINFO:LOG2NBPS/0018          *FCB:YEAR/0018   IOCB:CURLCN/0018
*SC:GETWRAP/0018                *SDOS:RESCHEDULE/0018           *SYSCALL:DEBUG/0018
*ASCII:EM/0019  *CC:ALTERPROFILE/0019            CNFG:INTRTI/0019                DIR:PROTECTION/0019
 DSKINFO:NBPSM1/0019            *FCB:VERSION/0019               *SC:GETCOLORING/0019
*SYSCALL:ATTNCHECK/0019         *ASCII:SUB/001A *CC:WRITEEDITLINE/001A          *DIR:DAY/001A
*DRIVER:PFRESTART/001A           FCB:SIZE/001A   IOCB:DRSN/001A *SC:GETBACKGROUND/001A
*SYSCALL:ISCONSOLE/001A         *ASCII:ESC/001B  BOOT:DIRLSN/001B               *CC:SETFIELDSIZE/001B
*DIR:MONTH/001B  DSKINFO:NLSN/001B               IOCB:RDCN/001B *SC:GETPROFILENAME/001B
*SDOS:CLOCKTICKED/001B          *SYSCALL:INTERLOCK/001B         *ASCII:FS/001C  *CC:SETPARAMS/001C
 CNFG:INTERRUPTSTACK/001C       *DIR:YEAR/001C  *SYSCALL:DELAY/001C             *ASCII:GS/001D
*CC:ACTIVATIONCK/001D           *DIR:VERSION/001D                IOCB:RBN/001D  *SYSCALL:READLUN/001D
*ASCII:RS/001E  *CC:WRAP/001E    CNFG:IOINTPOLL/001E             DSKINFO:NLCN/001E
 OPCODEMAX/001E  SDOS:CURRENTASK/001E           *SYSCALL:GETSERIALNUMBER/001E   *ASCII:US/001F
*BOOT:CHECKSUM/001F             *CC:NOWRAP/001F  IOCB:HRDSI/001F                *SYSCALL:JOBCONTROL/001F
 ASCII:SPACE/0020                BOOT:DISKID/0020                BOOT:DISKIDSIZE/0020
*CC:COLORING/0020                CNFG:TASKQUEUE/0020             DIR:ENTRYSIZE/0020
 DSKINFO:NBPC/0020               FCBFLG::DELETED/0020            SDOS:KILLPROOF/0020
*CC:BACKGROUND/0021              IOCB:HRSN/0021 *SDOS:KILLUSERPROGRAM/0021      *CC:KILLPROOF/0022
 CNFG:TIMEOUTLIST/0022           DSKINFO:RANDMAP/0022            IOCB:SIZE/0022 *CC:KILLENABLE/0023
*CC:SETOUTPUTTIMEOUT/0024       *CNFG:VTPROFILES/0024            DSKINFO:MAPLSN/0024
 SDOS:STARTIO/0024              *CC:SETBAUDRATE/0025            *CC:SETINPUTTRANSLATION/0026
*CNFG:VTDEBUG/0026               DSKINFO:DIRFCB/0027            *SDOS:WAITCOND/0027
*CNFG:MTPRIMS/0028               DSKINFO:MAPFCB/0029            *CNFG:BOOTDEFAULTDISKDCB/002A
*SDOS:WAITEVENT/002A             DSKINFO:SECTORDB/002B          *CNFG:BOOTCONSOLEDCB/002C
*SC:GETLINEFLAGS/002C            DSKINFO:BADLSN/002D            *SDOS:ERROR/002D
*CNFG:RETURNELAPSEDMILLISECONDS/002E            *CNFG:SETCLOCKINTERVALMILLISECONDS/0030
 DSKINFO:SEEKERRCNT/0030        *SDOS:ERRORSAVE/0030            *DSKINFO:SEEKERRSTS/0032
*SDOS:ERRORED/0033              *DSKINFO:WRITEERRCNT/0034        SC:GETLINEFLAGSHINT/0034
 COPYRIGHTCHECKSUM/0036         *DSKINFO:WRITEERRSTS/0036       *SDOS:CHECKRDLEN/0036
*DSKINFO:READERRCNT/0038         MEMSIZE/0038   *SDOS:CHECKWRLEN/0039           *DSKINFO:READERRSTS/003A




ASM/6800 1.4A0: DEFA SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 478; Form 26    Symbols Sorted by Value
SDOS6800.ASM
*DSKINFO:OPSCOUNT/003C          *SDOS:CHECKSCLEN/003C            DSKINFO:ERRLSN/003F
*SDOS:TABLEBRANCH/003F           BOOT:SIZE/0040  FCBFLG::UPDATEDIR/0040          PROT::WRITE/0040
*DSKINFO:WRITEPROTSTATE/0042     SDOS:BLOCKMOVE/0042            *DSKINFO:SIZE/0043
*SDOS:GETRUNNINGENCRYPTED/0045   SDOSSUBREVISION/0047            SDOS:ENTRYSIZE/0048
*ERR:FATALCOMPILE/0064          *ERR:WARNINGCOMPILE/0065        *ERR:BADCMDFORMAT/0066
*ERR:CANTGOTO/0067              *ERR:ABNORMALSTOP/0068          *ERR:NOTENUFMEM/0069
 ASCII:MASK/007F                 ASCII:RUBOUT/007F               FCBFLG::NEWFILE/0080
*BASICFLAGS/00F0                *SYSDEPENDENT/00F0               SYSCALL$/00FB   SYSCHANNEL/00FE
 LOGCHANNEL/00FF                 ERR:BOOTCKSUMFAIL/03E8          ERR:EOFHIT/03E9
 ERR:FILEISOPEN/03EA             ERR:NODEBUGGER/03EB             ERR:BADPOSITION/03EC
 ERR:NBPCTOOBIG/03ED             ERR:NODISKMAP/03EE              ERR:NOMATCHFCB/03EF
 ERR:NODEFAULTPROGRAM/03F0       ERR:FILEWRTPROT/03F2            ERR:FILENOTFOUND/03F3
 ERR:ILLEGALLCN/03F4             ERR:BADFNAMESIZE/03F5           ERR:NEWFILEEXISTS/03F6
 ERR:NODISKSPACE/03F7            ERR:LCNWASNTALLOCATED/03F8      ERR:NOFREEFCBS/03F9
 ERR:WRONGFILESYSTEM/03FA        ERR:FILEINCREATE/03FB           ERR:DISKMOUNTED/03FC
*ERR:CANTOPENMUSTCREATE/03FD     ERR:NOERRORMSGS/03FE            ERR:BADFILENAME/03FF
 ERR:ILLFILESIZE/0400            K/0400          ERR:HCSICTOOSMALL/0401          ERR:NOTENOUGHPOOL/0402
 ERR:PWRFAILDISKF/0403           ERR:NOTALOADFILE/0404          *ERR:BADFILEVERSION/0405
 ERR:CHTOOBIG/0406               ERR:CHBUSY/0407                 ERR:CLOSED/0408
 ERR:ILLEGALSYSCALL/0409         ERR:ILLDEVICEOP/040A            ERR:RENAMEDEVICE/040B
 ERR:BADLOADRECORD/040C          ERR:NOTENOUGHROOM/040D          ERR:ILLLSN/040E
 ERR:DIRECTORYDAMAGED/040F      *ERR:IBUFOVERFLOW/0410           ERR:PROGRAMKILLED/0411
*ERR:DEVICETIMEDOUT/0412         ERR:SECTORSIZE2/0413           *ERR:SYSTEMCROAKED/0414
 ERR:DISKREAD/0415               ERR:DISKWRITE/0416             *ERR:DISKSEEK/0417
*ERR:DSKWRTPROT/0418             ERR:DISKWRITELOCKED/0419        ERR:SDOSCKSUM/041A
 ERR:NLSNGE224/041B              ERR:CLUSTERSIZELIMITSFILE/041C  ERR:SYSCALLTOOSHORT/041D
 ERR:RDBUFTOOSMALL/041E          ERR:WRBUFTOOSMALL/041F          ERR:NOSUCHDEVICE/0420
*ERR:DEVICEERRORED/0421          ERR:MUSTBEDISK/0422             ERR:NOTOPENTOCONSOLE/0423
*ERR:DEVICENOTREADY/0424         ERR:TIMENOTSET/0425            *ERR:NOSUCHLUN/0426
 ERR:ZEROSTARTADDRESS/0427       ERR:NOSUCHPROGRAM/0428         *ERR:OLDFILEEXISTS/0429
 ERR:ALLOC0CLUSTERS/042B         ERR:FILEALREADYDELETED/042C    *ERR:PRINTERNOTREADY/042D
*ERR:INPUTTIMEOUT/042E          *ERR:ENDOFMEDIUM/042F            ERR:SELFTESTCKSUM/0430
*ERR:NOTIMEOUTBLKS/0431          ERR:SERIALNOWRONG/0432         *ERR:NOSUCHKEY/0433
*ERR:DUPLICATEKEY/0434          *ERR:BRANCHFACTORSIZE/0435       ERR:SDOSNOTREGISTERED/0436
 ERR:DECRYPTIONKEYSDONTMATCH/0437               *ERR:BADREADBUF/04B0            *ERR:BADWRITEBUF/04B1
*ERR:RDBUFTOOBIG/04B2           *ERR:WRBUFTOOBIG/04B3           *ERR:NOTENOUGHCHANNELS/04B4
*ERR:NOTUNDERTIMESHARE/04B5     *ERR:MTNOROOM/04B6              *ERR:MTBADCONFIG/04B7
*ERR:ALREADYLOCKED/04B8         *ERR:NOSUCHOBJECT/04B9          *ERR:NOTLOCKED/04BA
*ERR:OBJECTDESTROYED/04BB       *ERR:LOCKRESET/04BC             *ERR:IMPLEMENTATIONLIMITREACHED/04BD
*ERR:ILLEGALINTERLOCKFUNCTION/04BE              *ERR:MEMORYMGMTFAIL/04BF        *ERR:NOMOREJOBS/04C0




ASM/6800 1.4A0: DEFA SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 479; Form 26    Symbols Sorted by Value
SDOS6800.ASM
*ERR:ILLEGALJOBCONTROL/04C1     *ERR:CAPABILITYFAILURE/04C2     *ERR:JOBKILLED/04C3
*ERR:JOBCOMPLETED/04C4          *ERR:WRONGDISKTYPE/076E         *ERR:IOINPROGRESS/0771
*ERR:BUSYFORANOTHERPROCESS/0772 *ERR:ACTIVATIONNOTINBUFFER/0773 *ERR:BADFIELDWIDTH/0774
*ERR:ACTIVATIONRECEIVED/0775    *ERR:TIMEDINPUTEXPIRED/0776     *ERR:PROFILENOTFOUND/0777
*ERR:PROFILENOTMALLEABLE/0778    OKRTS/0C39      ERRORRTS/0D39   SDOSINIT/2000   SDOSINITCKSUML/2019
 VERIFYRESTARTCODE0/203B         MACRO:0002/2073                 MACRO:0003/207F
 VERIFYRESTARTCODE1/208D         VERIFYRESTARTCODELOOP/2099      INCORRECTROM/20CB
 VERIFYNMIISNOP/20D6             MACRO:0004/20ED                 MACRO:0005/20FB
 FETCHSERIALNUMBERSYS/211E       MACRO:0006/211E                 INITIALIZEERR/214D
 RESTART/2162    LDAENCRYPTED/2165               ERASEBANK/216C  ERASEMEM/216F   ERASELOOP/2172
 DONTZEROMEMORY/217A             WRITERANDOM/217A                WRITERANDOML/217C
 WRITERANDOM1/2183               WRITERANDOM2/2185               DOSYSCALL/2194  ERRWRONGSERIALNUMBER/219A
 WAITFORMESSAGEPRINTED/21BD      DELAYLOOP/21BF  ZAPMEMORYLOOP/21E5              PRINTCANTRUN/21ED
 CANTRUNMSG/21F5                 SDOSSERIALNUMBER/221B           CPUSERIALNUMBER/2251
 CANTRUNMSGEND/2264              SAYINVALIDROM/2264              PRINTINVALIDROM/226D
 INVALIDROMMSG/2275              CVTTOHEXSERIALNO/22B8           INVALIDROMMSGEND/22B8
 CVTTOHEXSERIALNOLOOP/22C0       HEXTOD/22DD     HEXTOD1/22EC    HEXTOD2/22F4    SDOSINITCKSUM/22F5
 SDOSINITERRED/22F6              SDOSINITS/22F9  SDOSINIT0/230C  SDOSINIT1/2316  SDOSINIT1A/2318
 SDOSINIT1L/2383                *SDOSINIT1B/238A                 SDOSINITTCB1/239A
 SDOSINITTCBL/23AF               SDOSINITDBLCHECKL/23D8          SDOSINIT2/240A  BCDTOASCII/2448
 DSKFRESET/2454  INITRDSI/245F   MACRO:0007/2498                *INITRDSI1/249A  INITRDSI2/24A3
 INITRDSI2A/24AE                 INITRDSI3/24C1  INITRDSI3A/24CE                 INITRDSI4L/24D3
 INITRDSI4/24D9  INITRDSI4A/24E8                *INITRDSI6/24F5  ERRNOTENOUGHPOOL/24FA
 INITRDSI7/24FF  INITRDSI8/2527  INITRDSI9/2543  ALLOCRDSIS/2560                 ALLOCRDSISRTS/2592
 INITFCBS/2593   INITFCBL/25AC   INITDISKINFO/25C4               INITDISKINFOL/25D5
 MACRO:0008/2600                 INITDISKINFO2/2608              INITDISKINFO2L/260C
 INITDISKERRED/264D              ERRSECTORSIZE2/2650             MULNLSNBYAB/2655
 MULNLSNBYABL/2662               MULNLSNBYAB1/2672               ERRNLSNGE224/2681
 INITIOCBS/2686  INITIOCBL/2690  INITIOCB/26AD   TIMEOUTTASKSETUP/26B2           SDOSINITEND/26BD
*COMPUTECHECKSUMS/26BE           COMPUTEEXITCHECKSUM/26BE        COMPUTEEXITCHECKSUML/26C7
 COMPUTEMAINCHECKSUM/26D3        COMPUTEMAINCHECKSUML/26DC       COMPUTEINITCHECKSUM/26E9
 COMPUTEINITCHECKSUML/26F2       FIRSTBUF/26FF   FIRSTSEGSIZE/2701               NBUFFERS/2703
 INITCOUNTER/2704                INITX/2705      EXITCOPYRIGHT/2707              SDOSINITID/270F
 DISPLAYINITDATE/2717            INITDATE/271F   CHAINTOSERIALNO.SYS/2728        SERIALNUMBER.SYS/2736
 OPENSERIALNO.SYS/2746           SCRATCH/2754    CLOSESERIALNO.SYS/2758          SETINITERROR/275B
 ERRORCODE/275D  DISPLAYINITERROR/275F           READSERIALNUMBERFROMFILE/2761
 READSERIALNUMBERFILETYPE/2773   SEED/2781       RUNNINGENCRYPTEDP/2782          COPYOFNMIVECTOR/2784
 COPYOFRESTARTVECTOR/2786        ACTSIZE/30FB    SDOS:ESTSIZE/3200               CODE/AE00
 LASTERROR/AE01  IOCBPOINTER/AE09                STARTADDRESS/AE48               LOADCOUNT/AE4A
 DEFAULTDISKDCB/AE4C             NAMESCANPTR/AE4E                NAMESIZE/AE50   CONSOLEDRIVER/AE52




ASM/6800 1.4A0: DEFA SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 480; Form 26    Symbols Sorted by Value
SDOS6800.ASM
 DRIVERVPOINTER/AE54             ERRORADDRESS/AE56               DAYSPERMONTHX/AE58
 NTIMEOUTBLKS/AE5A               CLOCKTICKEDEVENT/AE5B           TIMEOUTLEPTR/AE5C
 DELAYBLOCK/AE5E                 DELAYCOMPLETE/AE64              TIMEOUTTASKSTKINIT/AE72
 TIMEOUTTASKTCB/AE7A             USERTASKTCB/AE8A                WRITEFLAG/AE9A  BUFFERPOINTER/AE9B
 TRANSFERCOUNT/AE9D              USEDCOUNT/AE9F  COLUMNCOUNT/AEA1                USERIOCBPOINTER/AEA2
 RDSIPOINTER/AEA4                FCBPOINTER/AEA6                 DIRENTRY/AEA8   DIRENTRYDISP/AEAA
 SEARCHNAMEP/AEAC                SEARCHSAVEP/AEAE                SEARCHSTARTLSN/AEB0
 FREEDIRLSN/AEB3                 FREEDIRENTRYDISP/AEB6           DIRSECTOREND/AEB8
 FILENAMEBUF/AEBA               *FILENAMEFILL/AECA               FILENAMELENGTH/AECC
 FILESIZERQSTD/AECD              FILESIZE2/AED1  PARSECOUNT/AED5                *FILEPROT/AED7
 ALLOCATIONCOUNT/AED8            ALLOCATIONPLCN/AEDA             DIVIDEPOINTLCN/AEDC
 SEARCHLCN/AEDE  AVAILABLELCN/AEE0               AVAILABLECOUNT/AEE2             DESIREDLCN/AEE4
 LCNGROUPLENGTH/AEE6             DISKMAPSECTORSTART/AEE8         DISKMAPSECTOREND/AEEA
 DISKMAPBYTEPOINTER/AEEC         DISKMAPMASK/AEEE                LASTSECTORREADQ/AEEF
 READFLAG/AF03   READSECTORDBP/AF04              REMOVESECTORCNT/AF06            REMOVEIOCBPTR/AF07
 NRDSIS/AF09     NFCBS/AF0A      NDRIVES/AF0B    ERRFCBPOINTER/AF0C              MAXSECTORSIZE/AF0E
 SYSFCBPOINTER/AF10              SYSSECTORDB/AF12                LOCATERDCNX/AF19
 DCBPTRSAVE/AF1B                 LOADSYSCALLPTR/AF1D             SYSCALLX/AF1F   SDOSSTACK/AF22
 USERSLASTERROR/AF26             EXITDAMAGEPTR/AF28              DECBUF/AF2A     ERRORNUMBER/AF2D
 STRINGBUFFER/AF2F               LOGIOCB/AF35    SYSIOCB/AF57    DONTSTOPME/AF79
 SURPRISE/AF7A   SCHEDX/AF7B     INTDISABLE/AF7D                 INTENABLE/AF80  INTRTI/AF83
 INTERRUPTSTACK/AF86             JMPIOINT/AF88   KILLREQUESTEDF/AF8B             KILLEDF/AF8C
 SDOSRECURSIVECALL/AF8D          USERRETAPTR/AF8E                USERSYSCALLPTR/AF90
 CONSOLEOPEN/AF92                CONSOLENAMEPTR/AF96             CONSOLENAMELEN/AF98
 ACKCONTROLC/AFA0                LOGOUT/AFAE     DISPOUT/AFC0    DISPREADB3/AFC8
 DISPPOS1/AFD6   DISPGETCHAR/AFDA                BUFFER/AFE8     EXITCHAIN/AFEC  EXITSCLOSE/AFFA
 IOBLOCK/AFFD    SAFEGAURD/B00F  SAFEGAURD1/B012                 LOADGETPOS/B01F
 LOADFILEPOS/B02D                FILLDECRYPTBUFFER/B031          LOADMULTIPLEOF8/B03F
 LOADADDRESS/B049                OPTIMIZEDLOADCOUNT/B04B         GET1BYTE/B04D   DECRYPTBUFPTR/B05B
 DECRYPTBUFFER/B05D              DECRYPTBUFFEREND/B065           NKEYS/B065      RUNNINGENCRYPTEDFLAG/B066
 OKTODECRYPTFLAG/B067            OLDKEYENCRYPTED/B068            NEWKEYENCRYPTED/B070
 DECRYPT1/B078   KEY1/B07E       KEY2/B085       KEY3/B08C       KEY4/B093       KEY5/B09A       KEY6/B0A1
 KEY7/B0A8       DECRYPT/B0B1    DECRYPTLOOP/B0BD                KEY0/B0C2       SDOSCHKSUMBASE/B0C3
*DECRYPT0/B0C5   DECRYPTRTS/B102                 EORALL8BYTES/B108               SDOSMSG/B119
 COPYRIGHT/B12E  COPYRIGHTEND/B153               OPCODES/B153    SYSCALLENTRY/B1B2
 SYSCALL1/B1BD   SYSCALL2/B1D8   ERRILLSYSCALL/B1EE              READLUNNAME/B1EE
 ERRSYSCALLTOOSHORT/B1F2         ERRET/B1F6      ERRORINX/B200   ERRETL/B207     ERRORED/B209
 ERRORSAVE/B218  ISCONSOLE/B21F  ERRCLOSED/B233  ERRCHBUSY/B237  ERRCHTOOBIG/B23B
 CHECKCHANNELOPEN/B23F           ISCONSOLEOKRTS/B252             CHECKCHANNELCLOSED/B254
 CHECKCHANNELCL1/B256            GETIOCBPOINTER/B25C             GETIOCBX/B277   GETIOCB1/B27C




ASM/6800 1.4A0: DEFA SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 481; Form 26    Symbols Sorted by Value
SDOS6800.ASM
 ISDIG/B28E      ISDNO/B295      ISALPHANUM/B297                 ISALPHANUMRTS/B2A5
 ISALPHANUM1/B2A6                FINDDRIVER/B2AD                 FINDDRIVER1L/B2BB
*FINDDRIVER2/B2CD                FINDDISK/B2D6   FINDDEVICEL/B2F5                FINDDEFAULT/B30F
 FOUNDDISK1/B31C                 FOUNDDISK2/B31F                 FOUNDDEVICE/B322
 FOUNDDISK/B336  FOUNDDISK3/B344                 DEFAULTDISKNAME/B349            CMPDVNAME/B34F
 CMPDVNAML/B363  CMPDVNAML1/B376                 CMPDVNAMEZ/B388                 CMPDVNAMENF/B393
 CMPDVNAMENM/B395                INTERLOCK/B39E  INTERLOCKOKRTS/B3AE             DELAY/B3B0
 DELAY1/B3BF     SDOSNOTREGISTERED/B3CD          DELAYDONE/B3F1  OPEN/B3F7       OPEN1/B3FC      OPEN2/B431
 PLANTDCBINIOCB/B43E             OPENERRED/B44A  CREATELOG/B44B  CREATE/B458     CREATE1/B45A
 DELETE/B461     READB/B468      WRITEB/B46F     WRITEB1/B481    FNAMEPROCESS/B485
 FNAMEPROCESS1/B488              WRITEBOKRTS/B493                DISKDEFAULT/B495
 CLOSERTS/B4A2   ERRMUSTBEDISK/B4A3              CLOSE/B4A8      CLOSE1/B4B4     CLOSELOG/B4C2
 LOGCLOSE/B4C8   RENAME/B4CB     RENAME1/B4E9    ERRRENAMEDEVICE/B4F0            READAEOF/B4F5
 READA/B4FA      MACRO:0009/B506                 MACRO:000A/B520                 READA2/B53F
 MACRO:000B/B583                *READA1/B583     READALOG/B594   WRITEALOG/B59D  READALOG0/B5B7
 CLOSECHANNEL0/B5CF              DOWELOG/B5D2    DONTLOG/B5E0    READARTS/B5E1   WRITEA/B5E2
 WRITEA0/B5F4    WRITEA1/B5FA    CONTROL/B605    STATUSCONTROL/B60B              STATUSCONTROL1/B61F
 STATUS/B629     DEBUG/B62F      DEBUG1/B63D     ATTNCHECK/B643  SETERROR/B64A   WAITDONE/B652
 GETERROR/B654   DISPLAYERROR/B667               DISPLAYERRORRETRY/B66D          DISPLAYERRORA/B677
 DISPLAYERROR0/B695              DISPLAYERROR1A/B6B3             DISPLAYERROR1/B6BB
 DISPERRKILLLOG/B6D2             DISPERRKILLLOG1/B6DE            DISPLAYERRORDONE/B6E8
 DISPLAYERROR4/B6F1              DISPLAYERROR4A/B6F3             DISPLAYERROR5/B706
 DISPLAYERROR6/B724              DISPLAYERROR7/B73F              DISPLAYERROR9/B746
 DISPLAYERROR8/B749              DISPLAYERROR8A/B74A             MACRO:000C/B768
 DISPERRORMSG/B769               DISPCLOSE/B76F  DISPPOS/B772    DISPPUTCHAR/B77A
 DISPERROR/B782  KILLUSERPROGRAM/B78A            KILLUSER2/B7A7  KILLUSERRTS/B7B0
 KILLPROOF/B7B5  KILLENABLE/B7B9                 KILLPROOF1/B7BA                 KILLEDTEST/B7C0
 KILLPROGRAM/B7C4                KILLPROGRAM1/B7DB               ERROREXIT/B7ED  EXITERRED/B7F4
 EXIT/B80A       EXITCHKSUMBASE/B80A             EXIT1/B80D      EXITCODECHKSUM/B82C
 EXITCKSUML/B82E                 SERIALNUMBERLOCATION/B844       EXITCHKSUMEND/B846
 SDOSCODECHKSUM/B846             EXIT2/B847      EXIT3/B860      DEFAULTPROG/B86F
 EXITCR/B87D     EXITCR1/B883    DISPLAYERRORCR/B88B             DISPLAYERRORCR1/B897
 OPENCONSOLE/B899                CHECKRDLEN/B89F                 CHECKRDLEN1/B8C3
 CHECKRDLEN2/B8CE                ERRSYSTOOSHORTJ/B8D3            ERRRDBUFTOOSMALL/B8D6
 CHECKWRLEN/B8DB                *ERRWRBUFTOOSMALL/B8F7           CHECKSCLEN/B8FC                 EXITS/B907
 EXITS2/B90F     EXITSERRED/B920                 EXITS3/B923     EXITS4/B928     EXITS6/B934
 EXITDAMAGE/B93A                 CHAIN/B93C      FIRSTCHAIN/B94F                 CHAINOK/B96F
 CHAIN1/B977     ERRZEROSTARTADDRESS/B985        COMPAREDECRYPTIONKEYS/B98B
 COMPAREDECRYPTIONMATCH/B9AA     LOADINIT/B9AC   MACRO:000E/B9EF                 ZERONEWKEYLOOP/B9F4
 LOADSTART/B9FA  CANTLOAD/B9FE   LOADTYPE1/BA05  MACRO:000F/BA26                *LOADINITOKRTS/BA28




ASM/6800 1.4A0: DEFA SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 482; Form 26    Symbols Sorted by Value
SDOS6800.ASM
 ERRSERIALNOWRONG/BA2A           LOADER2/BA2D    LOADINITCANTOPEN/BA37           LOADINITCANT1/BA3F
 LOAD/BA42       LOADREST/BA4A   LOADCLOSE/BA4F  LOADCLOSE1/BA70                 GETSERIALNUMBER/BA73
 GETSERIALNUMBERADDRESS/BA83     GETSERIALNUMBERADDRESSRTS/BA92  GETRUNNINGENCRYPTED/BA93
 GETRUNNINGENCRYPTED1/BA9C       LOADENCRYPTED/BAA4              LOADENCRYPTED1/BAB7
 LOADCASCADELOOP/BACF            MACRO:0010/BAFE                 SDOSSECRETKEY/BB1A
 LOADSETPOS/BB22                 LOADTYPE0/BB2A  LOADTYPE0L/BB2D                 LOADTYPE0.2/BB4F
 LOADTYPE0.1/BB70                LOADTYPE2/BB78  LOADCONTENTS/BB7A               LOADNEXT/BB7A
*ERRBADLOADRECORD/BB89           ERRNOTENOUGHROOM/BB8E           LOAD2AND3/BB93  LOADTYPE3/BB93
 LOAD2AND3.1/BBB5                LOAD2AND3LOOP/BBBA              MACRO:0011/BBD5
 LOAD2AND3MASSDECRYPT/BC04       LOAD2AND3BYTE/BC16              LOAD2AND3RTS/BC2A
 GETBYTE/BC2C    GETBYTED/BC44   GETBYTE1/BC50   GETWORD/BC58    SETKEY/BC60     ZAPUSERSPACE/BC89
 ZAPUSERSPACEL/BC8A              DISKDEVICEDRIVER/BC93           ILLDEVICEOP/BCAD
 DISKRTS/BCB2    DISKFILEDRIVER/BCB4             DSKFPFRESTART/BCCE              DSKFCREATE/BCD3
 ERRFILEINCREATE/BCF5            DSKFCREATE1/BCFA                ERRFILEWRTPROT/BD07
 UPDATEFILEDATE/BD0C             ERRTIMENOTSET/BD32              DSKFCREATEC/BD37
 DSKFCREATEF/BD3A                DSKFCREATE3/BD64                DSKFCREATEMIN/BD82
 DSKFCREATEALLOC/BD88            DSKFCREATE2/BD8D                DSKFCREATEE/BD8F
 DSKFCREATEOOPS/BD9B             DSKFOPEN/BDA3   DSKFOPENL/BDB3  DSKFOPEN0/BDC2  DSKFOPEN1/BDC5
 DSKFOPENSYSIOCB/BDFC            DSKFDELETE/BE0F                 ERRFILENOTFNDJ/BE17
 DSKFDELETEL/BE1C                DSKFDELETEDE/BE31               DSKFDELETE1/BE3B
*DSKFDELETEFCB/BE47              DSKFDELETESYSIOCB/BE49          DSKFDELETEIOCBFCB/BE4B
 ERRFILEWRTPROTJ/BE66            ERRFILENOTFOUND/BE69            DSKFCLOSE/BE6E  DSKFCLOSE1/BE97
 DSKFCLOSEOLD/BEC1               DSKFCLOSEOKRTS/BEC4             DSKFCLOSEDOLD1/BEC6
 DSKFRENAME/BEE9                 MACRO:0012/BEF7                 MACRO:0013/BF03
 DSKFRENAMEL/BF0F                DSKFRENAMEERR1/BF1D            *ERRNEWFILEEXISTS/BF28
 ERRFILEALREADYDELETED/BF2D      DSKFRENAME1/BF32                DSKFRENAME2/BF5E
 COPYNAMETODIR/BF6D              MARKMODIFIED/BF7C               DSKFREADB/BF84  DSKFREADBL/BF8C
 DSKFREADBOKRTS/BF9D             DSKDREADB/BF9F  DSKDREADBL/BFA5                 DSKREADBCHUNK/BFB6
 DSKFREADA/BFE0  DSKFREADAL/BFE6                 DSKFREADALINE/BFF9              DSKFREADADONE/BFFE
 DSKDREADA/C008  DSKDREADAL/C00E                 DSKDREADALINE/C021              DSKREADACHUNK/C028
 DSKREADACHUNKL/C050             DSKREADACHUNKL1/C07A            DSKREADANULL/C085
 MACRO:0014/C092                 DSKREADANULL1/C09D              DSKREADANULL2/C09F
 DSKREADACR/C0A2                 ADJUSTCOLUMNCOUNT/C0C7          ADJUSTCOLZERO/C0DD
 ADJUSTCOLRTS/C0E0               ADJUSTCOLBUMP/C0E1              ADJUSTCOLBS/C0E9
 ADJUSTCOLTAB/C0F2               SETUPFORWRITE/C0FC              SETUPFORREAD/C108
 SETUPFORREAD1/C110              GETFCBFROMIOCB/C11C             CHECKREADDONE/C128
 CHECKREADDONE1/C136             CHECKWRITEDONE/C137             CHECKWRITEDONE1/C14B
 DSKFWRITEB/C14C                 DSKFWRITEBL/C158                DSKFWRITEBDONE/C168
 DSKDWRITEB/C16A                 DSKDWRITEBL/C172                DSKWRITEBCHUNK/C182
 DSKFWRITEA/C199                 DSKFWRITEAL/C1A4                DSKFWRITEADONE/C1B5




ASM/6800 1.4A0: DEFA SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 483; Form 26    Symbols Sorted by Value
SDOS6800.ASM
 DSKWRITEACHUNK/C1BF             DSKWRITEACHUNKL/C1D6            DSKDWRITEA/C1F4
 DSKDWRITEAL/C1FA                TABLEBRANCH/C20B                TABLEBRANCHCANT/C22A
 DSKFSETDATE/C22B                DSKFSET1/C243   DSKFSETPROT/C24B                DSKFCONTROL/C25B
 ERRILLDEVOP/C26A                DSKFCONTROL0/C26F               DSKFCONTROL10/C275
 DSKFOPENERRORFILE/C27F          ERRNOERRMSGS/C290               DSKFSETSIZE/C295
 DSKFIMPLIEDPOSOKRTS/C2B6        DSKFIMPLIEDPOSITION/C2B8        DSKFPOSITIONTOEND/C2CE
 DSKFPOSITIONTOEND1/C2D4         DSKFPOSITION/C2E3               DSKFPOSITION1/C2F4
 DSKFEOFTEST/C307                DSKFEOFTESTROL/C324             ERREOFHIT/C32A  ERRBADPOSITION/C32F
 DSKFGETFILESIZE/C33E            DSKFGETPOS/C352                 DSKFGETPOS4/C364
 DSKFGETPOS3/C36B                DSKDGETBADLSN/C375              DSKFGETPOS3A/C38C
 DSKFGETPARAMS/C393              DSKFSTATUS/C3A4                 DSKFSTATUS0/C3B6
 DSKFSTATUS10/C3C4               DSKDSTATUS/C3CA                 DSKDSTATUS0/C3DE
 DSKDSTATUS10/C3EC               DSKDGETERRORSTATS/C3F2          DSKFGETPROT/C416
 DSKFGETDATE/C422                DSKDGETTYPE/C445                DSKFGETTYPE/C44E
 DSKFGETCOL/C457                 DSKFGETCOL1/C461                DSKFGETEOF/C46A
 DSKDGETPARAMS/C476              DSKDSETMAPALGORITHM/C493        DSKDSETMAPALGDUMP/C4A4
 MACRO:0015/C4AA                *DSKDSETMAPALG0/C4AC             DSKDSETMAPALG1/C4B8
 DSKDSETMAPALG2/C4BA             DSKDSETMAPALGRTS/C4C6           ERRDISKMOUNTED/C4C8
 DSKDOPEN/C4CD   DSKDOPEN1/C4D7  DSKDCONTROL/C4F1                DSKDCONTROL1/C4FD
 DSKDCONTROL0/C505               DSKDCONTROL10/C50B              DSKDIMPLIEDPOSITION/C513
 DSKDPOSITION/C526               DSKDPOSITION1/C537              DSKDEOFTEST/C546
 DSKDEOFTESTL/C55B               DSKDUNLOCK/C582                 DSKDCLOSE/C587  DSKDIMPLIEDPOSOKRTS/C587
 FORGETLASTBADLSN/C589           ERRFCBOPENQ/C594                ERRFCBOPENERRRTS/C5A4
 DSKDDISMOUNT/C5A6               DSKDDISMOUNTL/C5B4              DSKDDISMOUNT0/C5E7
 DSKDDISMOUNT2/C602              DSKDDISMOUNTZ/C61D              DSKDDISMOUNT1/C633
 DSKDDISMOUNTOKRTS/C64C          ERRFILEISOPEN/C64E              MARKINVALID/C653
 MARKINVALIDL/C656               MACRO:0016/C660                 MARKINVALID1/C674
 SEARCHDIR/C67D  RESTOREUSERIOCB/C683            SEARCHDIRERRED/C699             SAVEUSERIOCB/C69E
 SEARCHDIRE/C6AB                 ERRBOOTCKSUMFAIL/C6C0           ERRNBPCTOOBIG/C6C5
 ERRWRONGFILESYSTEM/C6CA         SEARCHDIRMOUNT/C6CF             SEARCHDI1/C6EA  SEARCHDI3/C71D
 SEARCHDI5L/C736                 SEARCHDI5A/C73C                 MACRO:0017/C779
 MACRO:0018/C78A                 SEARCHDI3A/C7CF                 SEARCHDI4/C7EC  SEARCHDIRF/C7F2
 SEARCHDIROKRTS/C80A             COMPUTEDIRENTRYDISPLACEMENT/C80F                ERRDIRECTORYDAMAGED/C826
 SEARCHDIR1/C82B                 SEARCHDIRS/C852                 SEARCHDIRL/C86C
 MACRO:0019/C877                 SEARCHDIRL1/C87E                SEARCHDIR2/C8AB
 SEARCHDIRN/C8B2                 SEARCHDIRT/C8E3                 SEARCHDIRSJ/C8FC
 SEARCHDIRERRED4/C8FF            SEARCHDIRNF/C900                DIRECTORYNAME/C905
 DISKMAPNAME/C915                ERRMSGSNAME/C925                SEARCHDIRCREATE/C935
 SEARCHDIRCREAT1/C938            SEARCHDIRCREAT2/C97A            SEARCHDIRCNEW/C97F
 SEARCHDIRCOKRTS/C9AD            SEARCHDIRCERRED/C9B0            LOCATEDIRENTRY/C9B3




ASM/6800 1.4A0: DEFA SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 484; Form 26    Symbols Sorted by Value
SDOS6800.ASM
 UPDATEDIRFROMFCB/C9EB           LOCUPDATEDIRENTRY/C9F8          UPDATEDIRENTRY/C9FA
 UPDATEDIRL/CA01                 UPDATEDIROKRTS/CA1E             COMPARENAMES/CA20
 BLOCKCOMPARE/CA27               BLOCKCOMPARERTS/CA3A            HASHFOLD/CA3B   HASHINSERT6/CA4A
 HASHINSERT6L/CA4C               HASHNAME/CA55   HASHNAMEL1/CA87                 HASHNAMEL2/CA9D
 HASHNAME2/CAAF  HASHNAMEL3/CABB                 FINDFREEFCB/CAC8                FINDFREEFCBL/CAD6
 SETUPFCB/CAEE   SETUPFCBCL/CAF8                 SETUPFCBDIRPOS/CB2D             SEARCHFCBINIT/CB4E
 SEARCHFCBS/CB5E                 MACRO:001A/CB81                 MACRO:001B/CB96
 SEARCHFCBCMPNO/CBA4             SEARCHFCBRTS/CBAE               PARSEFILENAME/CBB9
 PARSENAME0/CBE2                 MACRO:001C/CBFA                 PARSENAME1/CC25
 PARSESCANL/CC32                 ERRBADFILENAMEJ/CC3C            PARSESCAND/CC52
 ERRBADFILENAME/CC85             PARSEQUIT/CC8C  ERRBADFNAMESIZE/CCA4            ADDTOFILESIZE/CCAC
 ADDTOFILEOV/CCD1                ERRILLFILESIZE/CCD3             PARSENAMEB/CCDA
 PARSENAMEBLANK/CCF1             PARSENAMEBOK/CCF4               PARSENAMEBX/CCF7
 PARSENAMEB1/CD03                ERRNODISKMAP/CD0F               ERRALLOC0CLUSTERS/CD14
 ALLOCATECLUSTERS/CD19           MACRO:001D/CD24                 ALLOC2/CD8D     MACRO:001E/CDA8
*ALLOC2BIG/CDAA  ALLOC2A/CDAE    ALLOC2B/CDB2    ALLOCINITHC/CDCA                ALLOC3/CDE1
 ALLOCERRED/CE08                 ALLOCDC5/CE09   ALLOCDATACLUSTERS/CE11          ALLOCDC2/CE1C
 ALLOCDC4/CE4C   ALLOCDC3/CE55   ALLOCDC1/CE6D   ALLOCDONE/CE83  ALLOCDATACLUSTJ/CE91
 ALLOCINITHS/CE94                STAASECTORL/CEA8                ZEROSECTOR/CEB7
 ZEROCLUSTER/CEC9                ZEROCLUSTERL/CECC               FREECLUSTER/CEE6
 FREEERROR/CEF5  ERRNODISKMAPJ1/CEFA             FREECLUSTERS/CEFD               FREECLUSTERL/CF09
 MACRO:001F/CF18                 FREECLUSTER0/CF35               FREECLUSTER3/CF41
 FREECLUSTERN/CF54               FREECLUSTER2/CF5D               FREECLUSTERE/CF5F
 FREECLUSTERE1/CF74              FREECLUSTERDONE/CF77            FREECLUSTEREXIT/CF82
 SEARCHMAP/CF84  SEARCHMAP1/CF9B                 SEARCHM5/CFA1   SEARCHM2/CFAA   SEARCHM3/CFB6
 SEARCHM4/CFBC   SEARCHMFQJ1/CFDB                SEARCHMFE/CFDE  SEARCHMFE2/CFE6
 SEARCHMFE1/CFFA                 SEARCHMFQXITJ1/D013             SEARCHMF/D016   SEARCHMF0/D022
 SEARCHMF1/D02A  SEARCHMF1A/D02D                 SEARCHMF4/D057  SEARCHMF2/D060  SEARCHMF3/D068
 SEARCHMF5/D078  SEARCHMF6/D080  SEARCHMF7/D083  SEARCHMF8/D089  SEARCHMFG/D0AA  SEARCHMFQ/D0C8
 SEARCHMR/D0E0   SEARCHMR0/D0E4  SEARCHMR0A/D0EC                 SEARCHMRE/D0F2  SEARCHMRE2/D0F8
 SEARCHMRE3/D109                 SEARCHMRE1/D111                 SEARCHMREBJ1/D127
 SEARCHMR1/D12A  SEARCHMR4C/D140                 SEARCHMR4/D14C  SEARCHMR2/D155  SEARCHMR3/D15D
 SEARCHMR5/D16F  SEARCHMR6/D177  SEARCHMR7/D17D  SEARCHMR8/D184  SEARCHMRG/D1A5  SEARCHUS/D1B7
 SEARCHFLCN/D1C3                 SEARCHMFQXIT/D1CC               SEARCHMREB/D1E2
 SEARCHMERRED3/D1F2              SEARCHOOSE/D1F5                 SEARCHOOSE1/D207
 SEARCHOOSE2/D21D                FINDLCNERREXIT/D222             FINDLCNMAPBIT/D227
 MACRO:0020/D22F                 FINDLCNMAPBITL/D29F             LOCATECURBYTE/D2B1
 LOCATECURBYTEWJ/D2D4            LOCATECURBYTE9J/D2D7            LOCATECURBYTEE/D2DA
 LOCATECURBYTEE2/D2E6            LOCATECURBYTEE4/D30F            LOCATECURBYTEE1/D31C
 LOCATECURBYTEE3/D31F            LOCATECURBYTEGJ/D327            LOCATECURBYTE0/D32A




ASM/6800 1.4A0: DEFA SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 485; Form 26    Symbols Sorted by Value
SDOS6800.ASM
 MACRO:0021/D333                *LOCATECURBYTE1/D335             LOCATECURBYTE4/D33B
 LOCATECURBYTE3A/D36E            LOCATECURBYTE2/D376             LOCATECURBYTE3/D386
 LOCATECURBYTE5/D396             LOCATECURBYTE5B/D3B8            MACRO:0022/D3B8
 LOCATECURBYTE8/D3C2             LOCATECURBYTEG/D3E5             LOCATECURBYTE5A/D3EB
*LOCATECURBYTER/D403             MACRO:0023/D403                 MACRO:0024/D433
*LOCATECURBYTE6/D435             LOCATECURBYTE7/D439             LOCATECURBYTED/D446
 MACRO:0025/D455                 LOCATECURBYTED2/D461            LOCATECURBYTE9/D466
 LOCATECURBYTEW/D46D             MACRO:0026/D479                 MACRO:0027/D48A
 LOCATECURBYTEW2/D496            LOCATECURBYTEW5/D4A3            LOCATECURBYTEW4/D4D0
 ZEROTOCURBYTE/D4E6              ZEROTOCURBYTEZ/D4F7             ZEROTOCURBYTEA/D52A
 ZEROTOCURBYTEA1/D54A            ZEROTOCURBYTE3/D554             ZEROTOCURBYTE5/D557
 CHECKMUSTZERO/D55F              UPDATECURBYTE/D580              UPDATECURBYTE1/D599
 UPDATECURBYTERTS/D5B8           UPDATECURBYTEF/D5B9             UPDATECURBYTEOKRTS/D5C4
 UPDATECURBYTED/D5C6             ERRDISKWRITELOCKED/D5CD         ERREOFHITJ2/D5D2
 LOCDSKD/D5D5    LOCDSKD1/D5EB   LOCDSKD0/D5F8   LOCDSKDR/D627   LOCDSKD2/D631   LOCDSKD4/D662
 LOCATECURBYTEDJ/D665            LOCDSKD3/D668   LOCATERDCN/D66B                 LOCATERDCN0/D67D
 LOCATERDCN2/D696                LOCATERDCN3/D6B9                ERRCLUSTERSIZELIMITSFILE/D6BF
 ERRHCSICTOOSMALL/D6C4           COMPUTENEXTBYTE/D6C9            COMPUTERDCNF/D6F9
 COMPUTERDCN/D704                COMPUTERDCNS/D70D               COMPUTERDCNL/D717
 MACRO:0028/D725                 COMPUTERDCN0/D72B               MACRO:0029/D751
 COMPUTERDCNLIMIT/D75A           COMPUTERHSN/D75D                COMPUTERHSN0/D763
 COMPUTERHSN1/D766               COMPUTERSN/D771                 CONVERTLCNTOLSN/D778
 CONVERTLCN2/D786                CONVERTLCNTO1ST/D790            CONVERTLCNL/D7A3
 CONVERTLCN1/D7B6                GENHLSNPLUSHRSN/D7C5            READBEHIND/D7E2
 INCIOCB:CURLSN/D7F0             INCIOCB:CURLSNX/D7FD            READBEHINDOKRTS/D7FD
 READBEHINDERRED/D7FF            READAHEAD/D804  READAHEAD0/D82B                 DECIOCB:CURLSN/D857
 DECIOCB:CURLSN1/D86A            READAHEADCERRED/D86E            READAHEADH/D873
 MACRO:002A/D888                 READAHEAD1/D893                 READAHEADS/D8B6
 READAHEADOKRTS/D8BC             READAHEADNX/D8BE                READAHEADHA/D8CE
 READAHEADH1/D8D3                INVENTSECTOR/D8F0               READSECTOR/D8F3
 READSECTOR0/D8F5                READSECTORL/D902                MACRO:002B/D908
 MACRO:002C/D91A                 READSECTORL1/D928               READSECTORNMA/D92B
 READSECTORNM/D932              *READSECTORV/D939               *ERRILLLSN/D950  READSECTORVD/D955
 READSECTORVD1/D956             *READSECTOR1/D959                READSECTOR2/D96D
 READSECTOR2L/D970               MACRO:002D/D99C                 READSECTOR3/D99E
 READSECTOR4/D9AF                WAITSECTORERRJ/D9E8             READSECTORI/D9EB
 READSECTORR/D9EE                READSECTORF/D9F0                REMOVERDSI/DA00
 REMOVERDSIL/DA10                READSECTORZAPIOCB/DA2F          READSECTORZAPH/DA3E
 MACRO:002E/DA46                 READSECTORZAPD/DA4C             READSECTORZAPD1/DA4E
 MACRO:002F/DA54                 READSECTORZAPRTS/DA5A           REQUERDSI/DA5B  REQUERDSI1/DA5E




ASM/6800 1.4A0: DEFA SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 486; Form 26    Symbols Sorted by Value
SDOS6800.ASM
 ENQUELASTSECTORREAD/DA78        FETCHSECTOR/DA9A                WAITSECTOR/DA9F
 WAITRDSI/DAA1   WAITSECTOR1/DAAC                WAITSECTORRTS/DAB6              WAITSECTORERRED/DAB8
 DSKDUMPBUFFERS/DADA             DSKDUMPFCBL/DAE8                DSKDUMPFCB1/DB10
 DSKDUMPBUF0/DB27                DSKDUMPBUFL/DB2A                DSKDUMPBUFN/DB47
 DSKDUMPERR1/DB53                WAITSECTORERRJ2/DB57            DISKREAD/DB5A   DISKWRITE/DB66
 DISKWAITD/DB72  DISKWAITE/DB7E  DISKWAITE1/DB8B                 DISKWAITE2/DB9F
 DISKWAITD2/DBA4                 DISKDCBUNSAVE/DBAA              DISKRWCOPYARGS/DBB0
 DISKDCBSAVE/DBBD                SECTORDRIVER/DBCB               BLOCKMOVE/DBD0 *BLOCKMOVEDOWN/DBD0
 BLOCKMOVEDOWNE/DBF6             BLOCKMOVEDOWNA/DC0E             BLOCKMOVEDOWN4/DC16
 BLOCKMOVEDOWNB/DC4A             BLOCKMOVEDOWN16/DC4E            BLOCKMOVEDOWND/DCC8
 CLOCKTICKED/DCCF                CLOCKTICK1/DCE5                 CLOCKTICK2/DD24
 CLOCKTICKEXIT/DD40              BCDTOBIN/DD43   DAYSPERMONTH/DD50               TIMEOUTTASKBORED/DD5C
 TIMEOUTTASK/DD62                TIMEOUTTASKL/DD67               SECONDARYCHECKSUM1/DD88
 TIMEOUTLEH/DD9B                 MACRO:0030/DDA7                 TIMEOUTLEH3/DDB7
 TASKRTI/DDC3    FORCERTI/DDC8   FORCESCHEDULE/DDCB              IORTI/DDCE      IORTI1/DDD1
 PUSH0TO7/DDDE   SCHEDLDS/DE07   SCHEDTOP/DE0A   SCHEDLOOP/DE14  SCHEDTEST/DE24  JUSTREADY/DE2D
 EXECUTING/DE3C  WAITEVENTCOND/DE6F              WAITEVENTCONDRTS/DE71           WAITEVENT$/DE72
 WAIT$/DE7A      STARTIO$/DEA5   IOINTERRUPT/DEC3                IOINTJ/DED0    *PATCHSPACE/DED3
 SDOS:END/DEFB   DUMMYLCN/FFFF

1748 Symbols.


 *** No Assembly Errors.
