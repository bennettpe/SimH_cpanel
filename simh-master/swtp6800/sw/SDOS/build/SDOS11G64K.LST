



ASM/6800 1.4A0: 0000 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 1; Form 0       SDOS REVISION HISTORY
SDOS11G.ASM
  0000            1: IOPKDEFS   EQU  0 
  0040            2: MEMSIZE    EQU 64 
  0C39            3: OKRTS      EQU  $0C39   ;CLC,RTS 
  0D39            4: ERRORRTS   EQU  $0D39   ;SEC,RTS 
  0047            5: SDOSSUBREVISION   EQU  'G 




ASM/6800 1.4A0: 0000 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 2; Form 1       SDOS REVISION HISTORY
SDOS11G.ASM
                  1: *
                  2: * Contains SDOS11G4DEFS.ASM, SDOS11GPART1.ASM and SDOS11GPART2.ASM
                  3: * mergen in one big file 
                  4: * all checksum/serial validations removed (marked with ZZZ as comment in source code)
                  5: *
                  6: 
                  7: 
                  8: 




ASM/6800 1.4A0: 0000 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 3; Form 1       SDOS REVISION HISTORY
SDOS11G.ASM
  0034           11: SC:GETLINEFLAGSHINT       EQU     $34     *** FIGURE OUT WHERE TO PUT THIS!!
                 12:         NAME     SDOS1.1
                 13: ********************************************************************************
                 14: ******** Copyright (C) 1978, 1979, 1980, 1981, 1982 by Software Dynamics ********
                 15: ********************************************************************************
                 16: *       This file, and all derivatives of it, in either source or object format,
                 17: *       are a copyright and Trade Secret of Software Dynamics.
                 18: *       Possession of its contents, modification or distribution of all
                 19: *       or any part of this information without explicit written permission
                 20: *       from Software Dynamics is strictly prohibited.
                 21: ***************************************************************************
                 22: *
                 23: *       SDOS REVISION HISTORY:
                 24: *
                 25: *       9/2/78  SDOS1.0f        Original SDOS for 6800 only
                 26: *
                 27: *       11/21/81        SDOS1.1c        6800/6809 SDOS identical to SDOS1.0f
                 28: *                       All bugs fixed by 1.0f patch file are corrected
                 29: *                       Can use SDOS1.1 with I/O packages built for SDOS1.0f
                 30: *                       MIKBUG no longer accepted
                 31: *
                 32: *       1/2/82          SDOS1.1d        Trivial fixes to 1.1c
                 33: *       2/1/82          SDOS1.1e        More fixes
                 34: *       3/16/82         SDOS1.1f        6809 Test flight version. Works fine.
                 35: *
                 36: *       8/16/82         SDOS1.1g        Several modifications.
                 37: *                                       1) Changed so serialnumber can be
                 38: *                                          in fixed memory location, to allow
                 39: *                                          SDOS to run on mass-produced computers
                 40: *                                          that have boot ROMs that cannot be
                 41: *                                          changed to match requirements of
                 42: *                                          encryption scheme.
                 43: *                                       2) Enhanced performance of Block move
                 44: *                                          for 6800 slightly.
                 45: *                                       3) Improved disk I/O to enhance
                 46: *                                          performance on floppies.
                 47: *                                       4) Fixed "LOG doesn't print
                 48: *                                          characters typed on CONSOLE:"
                 49: *                                       5) Verifies that SERIALNUMBER.SYS
                 50: *                                          is an encrypted file




ASM/6800 1.4A0: 0000 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 4; Form 1       SDOS REVISION HISTORY
SDOS11G.ASM
                 52: *       Known Bugs:
                 53: *               After a Write at EOF, SC:GETEOF doesn't always claim
                 54: *               that EOF condition has occurred.
                 55: *




ASM/6800 1.4A0: 0000 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 5; Form 1       SDOS REVISION HISTORY
SDOS11G.ASM
                 57: *   SDOS1.1 improvements to SDOS1.0f:
                 58: *   1)  Fixed sparse file problem.
                 59: *   2)  Fixed Rename to same name to re-hash to proper directory slot.
                 60: *   3)  Replaced block move by very fast block move routine; added entry point
                 61: *       for fast block move to entry point table.
                 62: *   4)  Installed Illegal LSN check in SDOS so it need not be replicated
                 63: *       in drivers.
                 64: *   5)  Changed Mount logic to use BOOT:DIRLSN pointer instead of NLCN/2.
                 65: *       SDOS now verifies that DIRECTORY.SYS is present in directory entry
                 66: *   6)  Dumpbuffers modified to move contents of modified FCBs back
                 67: *       to disk.
                 68: *   7)  EXIT changed so that if error when fetching DEFAULTPROGRAM,
                 69: *       then the disk is dismounted and SDOS tries again.
                 70: *   8)  Installed Serial Numbering (SERIALNUMBER.SYS) in SDOSINIT.
                 71: *       SERIALNUMBER.SYS chains to INITIALIZE.SYS if present,
                 72: *       and sets up INITIALIZE.DO as DO file.
                 73: *       Added Decrypting loader for encrypted files.
                 74: *   9)  Changed Disk File and Device drivers to zero column count on Ascii:FF,
                 75: *       decrement column count on Ascii:BS, and to advance column count to
                 76: *       next multiple of 8 on Ascii:HT.
                 77: *   10) Modified Dismount to delete ErrorMsgs.sys if it is marked as deleted.
                 78: *       Also modified SDOS to allow ErrorMsgs.sys to be opened on the disk
                 79: *       selected by DEFAULTDISK.
                 80: *   11) Changed so Dumpbuffers no longer checks for open files; now only
                 81: *       Dismount checks for open files.
                 82: *   12) Changed Dumpbuffers so it do it does NOT mark sectors as invalid.
                 83: *   13) Modified SetMap logic to mark Last Bad LSN as invalid, and mark
                 84: *       all sectors in the pool as invalid.
                 85: *   14) Changed PARSENAME so it no longer skips leading blanks on disk file name
                 86: *   15) Changed checksum over SDOS so it cannot be trivially defeated by
                 87: *       exchanging 2 bytes, and so that it is statically computed at assembly time.
                 88: *   16) Modified CHAIN to make a Zero start addresss illegal. Also revised
                 89: *       so CHAIN will return errors to caller if no bytes are loaded, and to
                 90: *       use the stack at the top of the address space once some bytes are loaded.
                 91: *   17) Added patch space to SDOS.
                 92: *   18) Added check in Disk File/Device driver so that ^C^C...
                 93: *       while "READA"ing nulls will terminate relatively quickly.
                 94: *   19) Fixed DisplayError to close Log channel if it gets an error, and
                 95: *       then try to display the error again before giving up completely.
                 96: *   20) Changed file name parser to recognize disk device names of the form




ASM/6800 1.4A0: 0000 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 6; Form 1       SDOS REVISION HISTORY
SDOS11G.ASM
                 97: *       xxxx:<blank or control char> so that D0:<CR> is recognized properly.
                 98: *   21) Changed Disk File Close to automaticallly deallocate extra space
                 99: *       allocated to a file when the FCB is freed.
                100: *   22) All updates to a file (Create, Rename, Writea, WriteB, CC:SetFileSize)
                101: *       cause the file creation date to be modified, and to reset a new
                102: *       bit in the directory flags that sez: "This file has been backed up."
                103: *   23) Added SYSCALL:LUNNAME to convert a logical unit number into the text string
                104: *       that gives the name of that device.
                105: *   24) Added SC:GETFILEDATE, SC:GETFILEPROT, CC:SETFILEDATE, CC:SETFILESIZE,
                106: *       CC:SETFILEPROT to allow utility programs to manipulate files more easily.
                107: *   25) Need to add disassembler confusers around the code:
                108: *       1) assemble in location dependent code
                109: *       2) Mix data constants into the code
                110: *       3) insert dummy instructions into code whose body overlaps
                111: *          a real instruction to throw off disassembly synchronization.
                112: *   26) Allow CC:DUMPBUFFERS to be invoked on a file; dumps all sectors
                113: *       intended for the device
                114: *   27) SYSCALL:CREATE syscall block extension optionally specifies file size
                115: *   28) ERR:NOSUCHPROGRAM issued if LOAD/CHAIN can't find file
                116: *   29) Date not set --> can't create or update files!
                117: *   30) Modified CC:Position for disk device and files to zero the column count
                118: *   31) Added SYSCALL:DELAY, (dummy) SYSCALL:INTERLOCK system calls
                119: *   32) Implemented Write Protect bit (can't rename, delete, write or chop)
                120: *   33) Added implied positioning on Read/Write system calls
                121: *   34) Added CC:POSITIONTOEND file system call
                122: *   35) Made SDOS:ERROR logic fully re-entrant by placing errorcode in TEMPX
                123: *   36) Made SC:GETERRORSTATS a built-in function of SDOS disk driver.
                124: *       Includes Operation Count, Error Statuses, and LastErroringLSN
                125: *
                126: *       END REVISION HISTORY
                127: 
                128: *
                129: *       Things to do:
                130: *
                131: *       for SDOS 1.2
                132: *               after user-selectable timeout, start dumping dirty pages
                133: *               optimize interface to disk read/write routines
                134: *               add write protect checking
                135: *               gettype should return value of DCB:DVTYP byte
                136: *               should not allow ':' as last character of file name




ASM/6800 1.4A0: 0000 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 7; Form 1       SDOS REVISION HISTORY
SDOS11G.ASM
                137: *               reply buffer outside of user space or in scratchpad s/b illegal
                138: *
                139:         WITH    WI=107,DE=51
                140: *
  0000          141:         IFUND   MEMSIZE
 *S*            142: MEMSIZE EQU     56      We can't beleive you would want it smaller...
                143:         FIN
  0400          144: K       EQU     1024
                145: 
  0001          146:         IF      M6800!M6801
  3200          147: SDOS:ESTSIZE    EQU     $3200
  0001          148:         ELSE    (M6809)
 *S*            149: SDOS:ESTSIZE    EQU     $2E00
                150:         FIN
                151: 
  0001          152:         IFUND   CODE
  CE00          153: CODE     EQU     MEMSIZE*K-SDOS:ESTSIZE
                154:         FIN
                155: 
  0001          156: LISTDEFS        EQU     1       FORCE LISTING OF EQUATES FILE
  0001          157: SYSTEMDEFS      EQU     1       WE WANT ALL THE DEFINITIONS!
                158: 




ASM/6800 1.4A0: 0000 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 8; Form 1       *** SDOS Boot time Initialization Code ***
SDOS11G.ASM
                161: *       "SDOSINIT" -- SDOS INITIALIZING CODE
                162: *




ASM/6800 1.4A0: 0000 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 9; Form 1       *** SDOS 1.1 DEFINITIONS ***
SDOS11G.ASM
                164: *       SDOS 1.1 DEFINITIONS FILE (AS OF 8/16/82)
                165: *
  0011          166: SDOSVERSION     EQU     $11     1.1 IN HEX
                168: 
  0000          169:         IFUND   LISTDEFS
                171:         FIN
                172: 
  0001          173:         IF      LISTDEFS
  0001          174:         ELSE
                176:         FIN
                177: 
                178: *
                179: *
                180: *       The Definitions are broken into 3 parts:
                181: *               A) THOSE NEEDED TO ASSEMBLE SDOS PROPER OR SYSTEM PROGRAMS
                182: *               B) THOSE NEEDED TO BUILD AN I/O PACKAGE (A SUBSET OF "A")
                183: *               C) THOSE NEEDED BY EVERYDAY USER PROGRAMS (A SUBSET OF "B")
                184: *
                185: 
  0000          186:         IFUND   SYSTEMDEFS
                188:         FIN
                189: 
  0000          190:         IFUND   IOPKDEFS
                192:         FIN
                193: 
  00FB          194: SYSCALL$        EQU     $FB     JMP TO SDOS; RESERVED SYSCALL ENTRY POINT
                195: *       CONTENTS OF ($FC,$FD) POINTS TO END OF USER RAM
                196: *       CONTENTS OF ($FE,$FF) ARE SACRED; THEY BELONG TO THE ROM




ASM/6800 1.4A0: 0000 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 10; Form 1      *** SDOS 1.1 DEFINITIONS ***
SDOS11G.ASM
                198: *       SYSCALL$ OPCODE DEFINITIONS
                199: *
  0000          200:         ORG     0
0000 0001       201: SYSCALL:OPEN    RMB     1       OPEN FILE
0001 0001       202: SYSCALL:CREATE  RMB     1       CREATE A NEW FILE
0002 0001       203: SYSCALL:CLOSE   RMB     1       CLOSE A FILE
0003 0001       204: SYSCALL:RENAME  RMB     1       RENAME A FILE
0004 0001       205: SYSCALL:DELETE  RMB     1       DELETE A FILE
0005 0001       206: SYSCALL:LOAD    RMB     1       LOAD AN OVERLAY
0006 0001       207: SYSCALL:CHAIN   RMB     1       CHAIN TO A FILE
0007 0001       208: SYSCALL:CREATELOG       RMB     1       CREATE THE LOG FILE
0008 0001       209: SYSCALL:CLOSELOG        RMB     1       CLOSE THE LOG FILE
0009 0001       210: SYSCALL:DISKDEFAULT     RMB     1       SELECT DEFAULT DISK DEVICE
000A 0001       211: SYSCALL:READA   RMB     1       READ ASCII BYTES FROM A FILE
000B 0001       212: SYSCALL:READB   RMB     1       READ BINARY BYTES FROM A FILE
000C 0001       213: SYSCALL:WRITEA  RMB     1       WRITE ASCII BYTES TO A FILE
000D 0001       214: SYSCALL:WRITEB  RMB     1       WRITE BINARY BYTES TO A FILE
000E 0001       215: SYSCALL:CONTROL RMB     1       PERFORM A CONTROL OPERATION ON A FILE/DEVICE
000F 0001       216: SYSCALL:STATUS  RMB     1       READ FILE/DEVICE STATUS
0010 0001       217: SYSCALL:WAITDONE        RMB     1       WAIT FOR I/O ON CHANNEL TO COMPLETE
0011 0001       218: SYSCALL:EXIT    RMB     1       GIVE CONTROL BACK TO THE OPERATING SYSTEM
0012 0001       219: SYSCALL:ERROREXIT       RMB     1       EXIT TO SYSTEM WITH ERROR CODE
0013 0001       220: SYSCALL:SETERROR        RMB     1       REPORT AN ERROR TO THE SYSTEM
0014 0001       221: SYSCALL:GETERROR        RMB     1       READ BACK THE LAST ERROR CODE
0015 0001       222: SYSCALL:DISPERROR       RMB     1       DISPLAY ERROR MESSAGE CORRESPONDING TO LAST ER
0016 0001       223: SYSCALL:KILLPROOF       RMB     1       PREVENT USER PROGRAM FROM BEING KILLED
0017 0001       224: SYSCALL:KILLENABLE      RMB     1       ALLOW USER PROGRAM TO BE KILLED
0018 0001       225: SYSCALL:DEBUG   RMB     1       CALL SYSTEM DEBUGGER
0019 0001       226: SYSCALL:ATTNCHECK       RMB     1       OPERATOR ATTENTION REQUEST CHECK
001A 0001       227: SYSCALL:ISCONSOLE       RMB     1       CHECK FOR CHANNEL 0 INPUT DEVICE = CONSOLE:
001B 0001       228: SYSCALL:INTERLOCK       RMB     1       PERFORM INTERLOCK FUNCTIONS ON OBJECTS
001C 0001       229: SYSCALL:DELAY   RMB     1       DELAY FOR n 1/60ths OF A SECOND
001D 0001       230: SYSCALL:READLUN RMB     1       CONVERT LOGICAL UNIT NUMBER TO DEVICE NAME
001E 0001       231: SYSCALL:GETSERIALNUMBER RMB     1       GET PROCESSOR SERIAL NUMBER
001F 0001       232: SYSCALL:JOBCONTROL      RMB     1       CREATE/TEST/DESTROY OTHER JOBS




ASM/6800 1.4A0: 001F SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 11; Form 1      *** SDOS 1.1 DEFINITIONS ***
SDOS11G.ASM
                234: *
                235: *       SYSCALL BLOCK DISPLACEMENTS
                236: *
  0000          237:         ORG     0
0000 0001       238: SCBLK:OPCODE    RMB     1       PRIMARY SYSCALL FUNCTION (OPEN, READ, ETC.)
0001 0001       239: SCBLK:WLEN      RMB     1       WAIT FLAG BIT (0=WAIT) AND SYSCALL BLOCK LENGTH (0..12
0002 0002       240: SCBLK:PARAMS    RMB     2       PARAMETER BYTES TO OPCODE (SECONDARY OPCODE, CHANNEL #
0004 0002       241: SCBLK:WRBUF     RMB     2       POINTER TO WRITE DATA BUFFER
0006 0002       242: SCBLK:WRLEN     RMB     2       NUMBER OF BYTES IN WRITE DATA BUFFER
0008 0002       243: SCBLK:RPLEN     RMB     2       LENGTH OF REPLY (RESULT OF SYSCALL)
000A 0002       244: SCBLK:RDBUF     RMB     2       POINTER TO READ DATA BUFFER (WHERE RESULT GOES)
000C 0002       245: SCBLK:RDLEN     RMB     2       CEILING ON SIZE OF REPLY (READ DATA BUFFER)
000E 0000       246: SCBLK:DATA      RMB     0       OTHER PARAMETERS FOR SYSCALL; UP TO 127-12 BYTES
000E 0000       247: SCBLK:END       RMB     0       END OF SYSCALL BLOCK; ASSERT SCBLK:WLEN[1..7]=SCBLK:EN
                248: *
                249: *       SYSCALL PARAMETER LIST DEFINITIONS
                250: *
  0002          251: OPEN:CHANNEL    EQU     SCBLK:PARAMS    CHANNEL NUMBER
  0006          252: OPEN:LENGTH     EQU     SCBLK:WRLEN     FILE NAME LENGTH
  0004          253: OPEN:NAMEP      EQU     SCBLK:WRBUF     POINTER TO FILE NAME
  000E          254: OPEN:SCLEN      EQU     SCBLK:DATA      OPEN SYSCALL BLOCK LENGTH
                255: *
  0002          256: CREATE:CHANNEL  EQU     SCBLK:PARAMS    CHANNEL NUMBER
  0006          257: CREATE:LENGTH   EQU     SCBLK:WRLEN     FILE NAME LENGTH
  0004          258: CREATE:NAMEP    EQU     SCBLK:WRBUF     POINTER TO FILE NAME
  000E          259: CREATE:SCLEN    EQU     SCBLK:DATA      CREATE SYSCALL BLOCK LENGTH
  000E          260: CREATE:FILESIZE EQU     SCBLK:DATA      4 BYTE FILE SIZE INITIAL ALLOCATION
  0012          261: CREATE:FILESIZESCLEN    EQU     CREATE:FILESIZE+4       END OF CREATE BLOCK WITH FILE 
                262: *
  0002          263: CLOSE:CHANNEL   EQU     SCBLK:PARAMS    CHANNEL NUMBER
  0003          264: CLOSE:SCLEN     EQU     SCBLK:PARAMS+1  CLOSE SYSCALL BLOCK LENGTH
                265: *
  0002          266: RENAME:CHANNEL  EQU     SCBLK:PARAMS    CHANNEL NUMBER
  0006          267: RENAME:LENGTH   EQU     SCBLK:WRLEN     NEW FILE NAME LENGTH
  0004          268: RENAME:NAMEP    EQU     SCBLK:WRBUF     POINTER TO NEW FILE NAME
  000E          269: RENAME:SCLEN    EQU     SCBLK:DATA      RENAME SYSCALL BLOCK LENGTH
                270: *
  0006          271: DELETE:LENGTH   EQU     SCBLK:WRLEN     FILE NAME LENGTH
  0004          272: DELETE:NAMEP    EQU     SCBLK:WRBUF     POINTER TO NAME
  000E          273: DELETE:SCLEN    EQU     SCBLK:DATA      DELETE SYSCALL BLOCK LENGTH




ASM/6800 1.4A0: 000E SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 12; Form 1      *** SDOS 1.1 DEFINITIONS ***
SDOS11G.ASM
                274: *
  0006          275: LOAD:LENGTH     EQU     SCBLK:WRLEN     LENGTH OF FILE NAME
  0004          276: LOAD:NAMEP      EQU     SCBLK:WRBUF     POINTER TO FILE NAME
  000E          277: LOAD:SCLEN      EQU     SCBLK:DATA      LOAD SYSCALL BLOCK LENGTH
                278: *
  0006          279: CHAIN:LENGTH    EQU     SCBLK:WRLEN     LENGTH OF FILE NAME
  0004          280: CHAIN:NAMEP     EQU     SCBLK:WRBUF     POINTER TO FILE NAME
  000E          281: CHAIN:SCLEN     EQU     SCBLK:DATA      CHAIN SYSCALL BLOCK LENGTH
                282: *
  0006          283: CREATELOG:LENGTH        EQU     SCBLK:WRLEN     LENGTH OF FILE NAME
  0004          284: CREATELOG:NAMEP EQU     SCBLK:WRBUF     POINTER TO FILE NAME
  000E          285: CREATELOG:SCLEN EQU     SCBLK:DATA      CREATELOG SYSCALL BLOCK LENGTH
                286: *
  0002          287: CLOSELOG:SCLEN  EQU     SCBLK:PARAMS    CLOSELOG SYSCALL BLOCK LENGTH
                288: *
  0006          289: DISKDEFAULT:LENGTH      EQU     SCBLK:WRLEN     FILE NAME LENGTH
  0004          290: DISKDEFAULT:NAMEP       EQU     SCBLK:WRBUF     POINTER TO FILE NAME
  000E          291: DISKDEFAULT:SCLEN       EQU     SCBLK:DATA      DISKDEFAULT SYSCALL BLOCK LENGTH
                292: *
  0002          293: READA:CHANNEL   EQU     SCBLK:PARAMS    CHANNEL NUMBER
  0003          294: READA:LMFLAG    EQU     SCBLK:PARAMS+1  LINE MODE FLAG BYTE
  000A          295: READA:BUFFERP   EQU     SCBLK:RDBUF     BUFFER POINTER
  000C          296: READA:MAXCOUNT  EQU     SCBLK:RDLEN     BYTE COUNT
  0008          297: READA:ACTUALCOUNT       EQU     SCBLK:RPLEN     ACTUAL NUMBER OF BYTES TRANSFERRED
  000E          298: READA:SCLEN     EQU     SCBLK:DATA      READA SYSCALL BLOCK LENGTH
  000E          299: RW:POSITION     EQU     SCBLK:DATA      READ/WRITE IMPLICIT FILE POSITION
  0012          300: RWPOSITION:SCLEN        EQU     RW:POSITION+4   END OF R/W SYSCALL WITH IMPLICIT FILE 
                301: *
  0002          302: READB:CHANNEL   EQU     SCBLK:PARAMS    CHANNEL NUMBER
  000A          303: READB:BUFFERP   EQU     SCBLK:RDBUF     BUFFER POINTER
  000C          304: READB:MAXCOUNT  EQU     SCBLK:RDLEN     BYTE COUNT
  0008          305: READB:ACTUALCOUNT       EQU     SCBLK:RPLEN     ACTUAL NUMBER OF BYTES TRANSFERRED
  000E          306: READB:SCLEN     EQU     SCBLK:DATA      READB SYSCALL BLOCK LENGTH
                307: *
  0002          308: WRITEA:CHANNEL  EQU     SCBLK:PARAMS    CHANNEL NUMBER
  0004          309: WRITEA:BUFFERP  EQU     SCBLK:WRBUF     BUFFER POINTER
  0006          310: WRITEA:COUNT    EQU     SCBLK:WRLEN     BYTE COUNT
  0008          311: WRITEA:SCLEN    EQU     SCBLK:RPLEN     WRITEA SYSCALL BLOCK LENGTH
                312: *
  0002          313: WRITEB:CHANNEL  EQU     SCBLK:PARAMS    CHANNEL NUMBER




ASM/6800 1.4A0: 000E SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 13; Form 1      *** SDOS 1.1 DEFINITIONS ***
SDOS11G.ASM
  0004          314: WRITEB:BUFFERP  EQU     SCBLK:WRBUF     BUFFER POINTER
  0006          315: WRITEB:COUNT    EQU     SCBLK:WRLEN     BYTE COUNTER
  0008          316: WRITEB:SCLEN    EQU     SCBLK:RPLEN     WRITEB SYSCALL BLOCK LENGTH
                317: *
  0002          318: CONTROL:CHANNEL EQU     SCBLK:PARAMS    CHANNEL NUMBER
  0003          319: CONTROL:CODE    EQU     SCBLK:PARAMS+1  CONTROL CODE
  0004          320: CONTROL:SCLEN   EQU     SCBLK:WRBUF     CONTROL SYSCALL BLOCK MINIMUM LENGTH
  0000          321: CONTROL:DATA    EQU     0       DISPLACEMENT INTO WRITE BUFFER FOR CONTROL DATA
                322: *
  0002          323: STATUS:CHANNEL  EQU     SCBLK:PARAMS    CHANNEL NUMBER
  0003          324: STATUS:CODE     EQU     SCBLK:PARAMS+1  STATUS SELECTOR CODE
  000A          325: STATUS:BUFFERP  EQU     SCBLK:RDBUF     POINTER TO STATUS TARGET BUFFER
  000C          326: STATUS:MAXCOUNT EQU     SCBLK:RDLEN     SIZE OF STATUS READ-BACK BUFFER
  0008          327: STATUS:ACTUALCOUNT      EQU     SCBLK:RPLEN     ACTUAL # STATUS BYTES READ
  000E          328: STATUS:SCLEN    EQU     SCBLK:DATA      STATUS SYSCALL BLOCK MINIMUM LENGTH
  0000          329: STATUS:DATA     EQU     0       DISPLACEMENT INTO READ BUFFER FOR READ-BACK STATUS
                330: *
  0002          331: WAITDONE:CHANNEL        EQU     SCBLK:PARAMS    CHANNEL NUMBER
  0003          332: WAITDONE:SCLEN  EQU     SCBLK:PARAMS+1  WAITDONE SYSCALL BLOCK LENGTH
                333: *
  0002          334: EXIT:SCLEN      EQU     SCBLK:PARAMS    EXIT SYSCALL BLOCK LENGTH
                335: *
  0002          336: ERROREXIT:CODE  EQU     SCBLK:PARAMS    ERROR CODE NUMBER
  0004          337: ERROREXIT:SCLEN EQU     SCBLK:WRBUF     ERROREXIT SYSCALL BLOCK LENGTH
                338: *
  0002          339: SETERROR:CODE   EQU     SCBLK:PARAMS    ERROR CODE NUMBER
  0004          340: SETERROR:SCLEN  EQU     SCBLK:WRBUF     SETERROR SYSCALL BLOCK LENGTH
                341: *
  000A          342: GETERROR:BUFFERP        EQU     SCBLK:RDBUF     POINTER TO ERROR READ-BACK AREA
  000C          343: GETERROR:MAXCOUNT       EQU     SCBLK:RDLEN     SHOULD BE 2
  0008          344: GETERROR:ACTUALCOUNT    EQU     SCBLK:RPLEN     SHOULD BE RETURNED AS 2
  000E          345: GETERROR:SCLEN  EQU     SCBLK:DATA      GETERROR SYSCALL BLOCK LENGTH
                346: *
  0002          347: DISPERROR:SCLEN EQU     SCBLK:PARAMS    DISPERROR SYSCALL BLOCK LENGTH
                348: *
  0002          349: KILLPROOF:SCLEN EQU     SCBLK:PARAMS    KILLPROOF SYSCALL BLOCK LENGTH
                350: *
  0002          351: KILLENABLE:SCLEN        EQU     SCBLK:PARAMS    KILLENABLE SYSCALL BLOCK LENGTH
                352: *
  0002          353: DEBUG:SCLEN     EQU     SCBLK:PARAMS    DEBUG SYSCALL BLOCK LENGTH




ASM/6800 1.4A0: 000E SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 14; Form 1      *** SDOS 1.1 DEFINITIONS ***
SDOS11G.ASM
                354: *
  0002          355: ATTNCHECK:SCLEN EQU     SCBLK:PARAMS    ATTNCHECK SYSCALL BLOCK LENGTH
                356: *
  0002          357: ISCONSOLE:SCLEN EQU     SCBLK:PARAMS    ISCONSOLE SYSCALL BLOCK LENGTH
                358: *
  0002          359: INTERLOCK:FUNCTION      EQU     SCBLK:PARAMS    INTERLOCK FUNCTION
  0004          360: INTERLOCK:BUFFERP       EQU     SCBLK:WRBUF     POINTER TO OBJECT
  0006          361: INTERLOCK:COUNT EQU     SCBLK:WRLEN     LENGTH OF OBJECT
  0008          362: INTERLOCK:SCLEN EQU     SCBLK:RPLEN     INTERLOCK SYSCALL BLOCK LENGTH
                363: *
  0002          364: DELAY:PERIOD    EQU     SCBLK:PARAMS    DELAY PERIOD
  0004          365: DELAY:SCLEN     EQU     SCBLK:WRBUF     DELAY SYSCALL BLOCK LENGTH
                366: *
                367: *READLUNNAME:LUN        EQU     SCBLK:PARAMS    LOGICAL UNIT NUMBER
                368: *READLUNNAME:BUFFERP    EQU     SCBLK:RDBUF     WHERE TO READ NAME BACK
                369: *READLUNNAME:MAXCOUNT   EQU     SCBLK:RDLEN     MAXIMUM LENGTH OF REPLY
                370: *READLUNNAME:ACTUALCOUNT        EQU     SCBLK:RPLEN     ACTUAL NAME LENGTH
  000E          371: READLUNNAME:SCLEN       EQU     SCBLK:DATA      READLUN SYSCALL BLOCK LENGTH
                372: *
  000A          373: GETSERIALNUMBER:BUFFERP EQU     SCBLK:RDBUF     POINTER TO SERIAL NUMBER REPLY BUFFER
  000C          374: GETSERIALNUMBER:MAXCOUNT        EQU     SCBLK:RDLEN     SIZE OF BUFFER
  0008          375: GETSERIALNUMBER:ACTUALCOUNT     EQU     SCBLK:RPLEN     SIZE OF REPLY
  000E          376: GETSERIALNUMBER:SCLEN   EQU     SCBLK:DATA      MINIMUM SIZE OF BLOCK
                377: *
  0002          378: JOBCONTROL:FUNCTION     EQU     SCBLK:PARAMS    JOB CONTROL FUNCTION
  0004          379: JOBCONTROL:BUFFERP      EQU     SCBLK:WRBUF     POINTER TO JOB CAPABILITY
  0006          380: JOBCONTROL:COUNT        EQU     SCBLK:WRLEN     SIZE OF CAPABILITY
  000C          381: JOBCONTROL:MAXCOUNT     EQU     SCBLK:RDLEN     MAXIMUM LENGTH OF REPLY
  0008          382: JOBCONTROL:ACTUALCOUNT  EQU     SCBLK:RPLEN     ACTUAL SIZE OF CAPABILITY
  0008          383: JOBCONTROL:SCLEN        EQU     SCBLK:WRLEN+2   JOBCONTROL SYSCALL MINIMUM BLOCK LENGT




ASM/6800 1.4A0: 000E SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 15; Form 1      *** SDOS 1.1 DEFINITIONS ***
SDOS11G.ASM
  0003          385: LSN:SIZE        EQU     3       # BYTES OCCUPIED BY AN LSN
  0002          386: LCN:SIZE        EQU     2       # BYTES OCCUPIED BY AN LCN
                387: *
                388: *       STANDARD STATUS SYSCALL SUB-CODES
                389: *
  0000          390:         ORG     0
0000 0001       391: SC:GETPOS       RMB     1       GET BYTE POSITION
0001 0001       392: SC:GETCOL       RMB     1       GET COLUMN COUNT
0002 0001       393: SC:GETEOF       RMB     1       GET EOF FLAG
0003 0001       394: SC:GETFILESIZE  RMB     1       GET FILE SIZE
0004 0001       395: SC:GETTYPE      RMB     1       GET DEVICE TYPE AND CHARACTERISTICS
0005 0001       396: SC:GETPARAMS    RMB     1       GET DEVICE SPECIFIC PARAMETERS
                397: 
  0010          398: SC:DEVICESPECIFICOP     EQU     $10     BASE FOR DEVICE SPECIFIC STATUS CODES
                399: *
                400: *       STANDARD CONTROL SYSCALL SUB-CODES
                401: *
  0000          402:         ORG     0
0000 0001       403: CC:POSITION     RMB     1       POSITION TO THIS PLACE IN THE FILE
0001 0001       404: CC:DUMPBUFFERS  RMB     1       DUMP BUFFERS TO THE DEVICE (MAINLY FOR DISK)
                405: 
  0010          406: CC:DEVICESPECIFICOP     EQU     $10     BASE FOR DEVICE-SPECIFIC CONTROL CODES
                407: *
                408: *       STANDARD INTERLOCK SYSCALL SUB-CODES
                409: *
  0000          410:         ORG     0
0000 0001       411: IC:CREATE       RMB     1       CREATE AN OBJECT IDENTIFIER
0001 0001       412: IC:DESTROY      RMB     1       DESTROY AN OBJECT IDENTIFIER
0002 0001       413: IC:RESET        RMB     1       RESET OBJECT REFERENCE LIST
0003 0001       414: IC:LOCK RMB     1       LOCK AN OBJECT OR BLOCK UNTIL AVAILABLE
0004 0001       415: IC:RELEASE      RMB     1       RELEASE A LOCKED OBJECT
0005 0001       416: IC:TEST RMB     1       LOCK AN OBJECT OR ERROR IF UNAVAILABLE




ASM/6800 1.4A0: 0005 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 16; Form 1      *** SDOS 1.1 DEFINITIONS ***
SDOS11G.ASM
                418: *       VIRTUAL TERMINAL SPECIFIC STATUS REQUESTS
                419: *
                420: *
  0010          421:         ORG     SC:DEVICESPECIFICOP
0010 0001       422: SC:GETPROFILE   RMB     1       GET CURRENT DEVICE PROFILE NAME
0011 0001       423: SC:GETACTCOL    RMB     1       GET ACTIVATION COLUMN
0012 0001       424: SC:GETPROFILEALTERATION RMB 1   GET PROFILE ALTERATION INFORMATION
0013 0001       425: SC:GETOUTPUTTIMEOUT RMB  1      GET OUTPUT TIMEOUT
0014 0001       426: SC:GETBAUDRATE  RMB     1       GET CURRENT BAUD RATE
0015 0001       427:                 RMB     1       (RESERVED)
0016 0001       428: SC:GETTABS      RMB     1       GET CURRENT TAB SETTINGS
0017 0001       429: SC:GETIDLES     RMB     1       GET NUMBER OF IDLES SENT AFTER NEWLINE
0018 0001       430: SC:GETWRAP      RMB     1       GET WRAP/NO WRAP FLAG
0019 0001       431: SC:GETCOLORING  RMB     1       GET CURRENT COLORING INFORMATION
001A 0001       432: SC:GETBACKGROUND RMB    1       GET BACKGROUND COLORING INFORMATION
001B 0001       433: SC:GETPROFILENAME RMB   1       GET NAME OF CURRENT PROFILE
                434: 
  002C          435:         ORG     SC:DEVICESPECIFICOP+$1C (DON'T ASK!!!)
002C 0001       436: SC:GETLINEFLAGS RMB     1       GET LINE FLAGS
                437: *
                438: *       DISK FILE SPECIFIC STATUS REQUESTS
                439: *
  0010          440:         ORG     SC:DEVICESPECIFICOP
0010 0001       441: SC:GETFILEDATE  RMB     1       READ BACK CREATION DATE OF FILE IN CLOCK FORMAT
0011 0001       442: SC:GETFILEPROT  RMB     1       READ BACK FILE PROTECTION BYTE
                443: *
                444: *       DISK DEVICE STATUS REQUESTS
                445: *
  0010          446:         ORG     SC:DEVICESPECIFICOP
0010 0001       447: SC:GETLASTBADLSN        RMB     1       READ BACK LSN THAT CAUSED DRIVER A PROBLEM
0011 0001       448: SC:GETERRORSTATS        RMB     1       GET DEVICE ERROR (HISTORY) STATISTICS
                449: *
                450: *       VIRTUAL TERMINAL SPECIFIC CONTROL OPERATIONS
                451: *
  0010          452:         ORG     CC:DEVICESPECIFICOP
0010 0001       453: CC:ECHO RMB     1       TURN ECHO ON
0011 0001       454: CC:NOECHO       RMB     1       TURN ECHO OFF
0012 0001       455: CC:IDLES        RMB     1       SET TTY IDLES
0013 0001       456: CC:TABS RMB     1       SET TTY TABS
0014 0001       457: CC:SETACTBLOCK  RMB     1       DECLARE ACTIVATION SET




ASM/6800 1.4A0: 0015 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 17; Form 1      *** SDOS 1.1 DEFINITIONS ***
SDOS11G.ASM
0015 0001       458: CC:CLRINPUT     RMB     1       CLEAR INPUT BUFFER
0016 0001       459: CC:CLROUTPUT    RMB     1       CLEAR OUTPUT BUFFER
0017 0001       460: CC:SETREADTIMEOUT       RMB     1       SET TIMEOUT PERIOD FOR READA
0018 0001       461: CC:SETPROFILE   RMB     1       DECLARE DEVICE PROFILE
0019 0001       462: CC:ALTERPROFILE RMB     1       ALTER MALLEABLE DEVICE PROFILE
001A 0001       463: CC:WRITEEDITLINE        RMB     1       PUT LINE IN TYPE-AHEAD BUFFER
001B 0001       464: CC:SETFIELDSIZE RMB     1       DECLARE WIDTH OF INPUT FIELD
001C 0001       465: CC:SETPARAMS    RMB     1       DECLARE DEVICE WIDTH AND DEPTH
001D 0001       466: CC:ACTIVATIONCK RMB     1       CHECK FOR READA DATA READY
001E 0001       467: CC:WRAP RMB     1       ALLOW FORE- AND BACK-WRAP
001F 0001       468: CC:NOWRAP       RMB     1       DISALLOW FORE- AND BACK-WRAP
0020 0001       469: CC:COLORING     RMB     1       DECLARE AND SET FOREGROUND COLORING
0021 0001       470: CC:BACKGROUND   RMB     1       DECLARE AND SET BACKGROUND COLORING
0022 0001       471: CC:KILLPROOF    RMB     1       KILLPROOF VT DEVICE
0023 0001       472: CC:KILLENABLE   RMB     1       KILLENABLE VT DEVICE
0024 0001       473: CC:SETOUTPUTTIMEOUT RMB 1       SET OUTPUT TIMEOUT FOR DEVICE
0025 0001       474: CC:SETBAUDRATE  RMB     1       SET BAUD RATE FOR DEVICE
0026 0001       475: CC:SETINPUTTRANSLATION RMB 1 SET INPUT TRANSLATION
                476: *
                477: *       DISK FILE SPECIFIC CONTROL OPERATIONS
                478: *
  0010          479:         ORG     CC:DEVICESPECIFICOP
0010 0001       480: CC:SETFILEDATE  RMB     1       SET CREATION DATE OF FILE (USE CLOCK FORMAT)
0011 0001       481: CC:SETFILEPROT  RMB     1       SET FILE PROTECTION BYTE
0012 0001       482: CC:SETFILESIZE  RMB     1       SET SIZE OF FILE
0013 0001       483: CC:POSITIONTOEND        RMB     1       POSITION TO END OF FILE
                484: *
                485: *       DISK DEVICE SPECIFIC CONTROL OPS
                486: *
  0010          487:         ORG     CC:DEVICESPECIFICOP
0010 0001       488: CC:UNLOCKDISK   RMB     1       UNLOCK THE DISK DEVICE FOR WRITING
0011 0001       489: CC:DISMOUNTDISK RMB     1       DISMOUNT THE DISK
0012 0001       490: CC:SETMAPALGORITHM      RMB     1       SET MAP ALGORITHM NUMBER FOR DRIVE
0013 0001       491: CC:MULTISECTORREAD      RMB     1       READ MULTIPLE SECTORS
0014 0001       492: CC:MULTISECTORWRITE     RMB     1       WRITE MULTIPLE, ACCORDING TO SYSCALL EXTENSION
0015 0001       493: CC:FORMAT       RMB     1       FORMAT DISK
0016 0001       494: CC:WAITDONE     RMB     1       WAIT FOR CONTROLLER OPERATION COMPLETE




ASM/6800 1.4A0: 0016 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 18; Form 1      *** SDOS 1.1 DEFINITIONS ***
SDOS11G.ASM
                496: *       RETURNED STATUS DISPLACEMENTS
                497: *
  0000          498:         ORG     0
0000 0004       499: STATUS:DIST     RMB     4       POSITION IN DISK FILE
                500: *
  0000          501:         ORG     0
0000 0001       502: STATUS:COLUMN   RMB     1       COLUMN NUMBER
                503: *
  0000          504:         ORG     0
0000 0001       505: STATUS:EOFFLAG  RMB     1       END OF FILE FLAG
                506: *
  0000          507:         ORG     0
0000 0001       508: STATUS:DEVTYPE  RMB     1       DEVICE TYPE DATA FOR DIRECTORIED DISK
                509: *
  0000          510:         ORG     0
0000 0002       511: STATUS:NBPS     RMB     2       NUMBER OF BYTES PER SECTOR
0002 0000       512: STATUS:NSPC     RMB     0       NUMBER OF SECTORS PER CLUSTER FOR DISK FILE
0002 0002       513: STATUS:NSPT     RMB     2       NUMBER OF SECTORS PER TRACK
0004 0002       514: STATUS:NTPC     RMB     2       NUMBER OF TRACKS PER CYLINDER
0006 0002       515: STATUS:NCYL     RMB     2       NUMBER OF CYLINDERS
                516: *
  0000          517:         ORG     0
0000 0004       518: STATUS:FILESIZE RMB     4       SIZE OF DISK FILE IN BYTES
                519: *
  0000          520:         ORG     0
0000 0003       521: STATUS:LASTBADLSN       RMB     3       LSN OF LAST BAD SECTOR ON DISK
                522: *
                523: *       SC:GETFILEDATE REPLY BUFFER
                524: *
  0000          525:         ORG     0
0000 0003       526: STATUS:DATETICKS        RMB     3       24 BITS OF TICKS SINCE MIDNITE
0003 0001       527: STATUS:DATEDAY  RMB     1       BCD VALUE OF DAY (1..31)
0004 0001       528: STATUS:DATEMONTH        RMB     1       BCD VALUE OF MONTH (1..12)
0005 0001       529: STATUS:DATEYEAR RMB     1       BCD VALUE OF YEAR MOD 100 (00.99)
                530: *
                531: *       SC:GETFILEPROT REPLY BUFFER
                532: *
  0000          533:         ORG     0
0000 0001       534: STATUS:PROT     RMB     1       PROTECTION BYTE FROM FILE




ASM/6800 1.4A0: 0000 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 19; Form 1      *** SDOS 1.1 DEFINITIONS ***
SDOS11G.ASM
                536: *       SC:GETERRORSTATS REPLY BUFFER
                537: *
  0000          538:         ORG     0
0000 0002       539: STATUS:SEEKERRCNT       RMB     2       # SEEK ERRORS SINCE MOUNT
0002 0002       540: STATUS:SEEKERRSTS       RMB     2       16 BITS OF LAST "SEEK" STATUS IN ERROR
0004 0002       541: STATUS:WRITEERRCNT      RMB     2       # WRITE ERRORS SINCE MOUNT
0006 0002       542: STATUS:WRITEERRSTS      RMB     2       16 BITS OF LAST "WRITE" STATUS IN ERROR
0008 0002       543: STATUS:READERRCNT       RMB     2       # READ ERRORS SINCE MOUNT
000A 0002       544: STATUS:READERRSTS       RMB     2       16 BITS OF LAST "READ" STATUS IN ERROR
000C 0003       545: STATUS:OPSCOUNT RMB     3       24 BITS OF # DRIVER OPERATIONS SINCE MOUNT
000F 0003       546: STATUS:ERRLSN   RMB     LSN:SIZE        LSN CAUSING ANY SOFT OR HARD ERROR




ASM/6800 1.4A0: 000F SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 20; Form 1      *** SDOS 1.1 DEFINITIONS ***
SDOS11G.ASM
                548: *       CC:POSITION WRITE BUFFER
                549: *
  0000          550:         ORG     0
0000 0004       551: CONTROL:DIST    RMB     4       VALUE OF POSITIONING COMMANDS
                552: *
                553: *       CC:SETFILEDATE WRITE BUFFER
                554: *
  0000          555:         ORG     0
0000 0003       556: CONTROL:DATETICKS       RMB     3       24 BITS OF TICKS SINCE MIDNITE
0003 0001       557: CONTROL:DATEDAY RMB     1       BCD VALUE OF DAY (1..31)
0004 0001       558: CONTROL:DATEMONTH       RMB     1       BCD VALUE OF MONTH (1..12)
0005 0001       559: CONTROL:DATEYEAR        RMB     1       BCD VALUE OF YEAR MOD 100 (00..99)
                560: *
                561: *       CC:SETFILEPROT WRITE BUFFER
                562: *
  0000          563:         ORG     0
0000 0001       564: CONTROL:PROT    RMB     1       PROTECTION BYTE FOR FILE
                565: *
                566: *       CC:SETMAPALGORITHM WRITE BUFFER
                567: *
  0000          568:         ORG     0
0000 0002       569: CONTROL:MAPALGORITHM    RMB     2       PARAMETER BLOCK FOR SET MAP ALGORITHM CALL
                570: *
                571: *       JOB CONTROL SUB-CODES
                572: *
  0000          573:         ORG     0
0000 0001       574: JC:CREATE       RMB     1       CREATE A NEW JOB
0001 0001       575: JC:TESTDONE     RMB     1       TEST TO SEE IF A JOB IS DONE
0002 0001       576: JC:DESTROY      RMB     1       DESTROY A JOB




ASM/6800 1.4A0: 0002 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 21; Form 1      *** SDOS 1.1 DEFINITIONS ***
SDOS11G.ASM
                578: *
                579: *       SYSTEM-DEFINED ERROR CODES
                580: *
  0000          581:         ORG     0
0000 0001       582: ERR:NONE        RMB     1       CODE 0 --> NO ERROR
0001 0001       583: ERR:ATTENTION   RMB     1       OPERATOR REQUESTED ATTENTION
                584: 
  0064          585:         ORG     100
0064 0001       586: ERR:FATALCOMPILE        RMB     1       COMPILATION OR ASSEMBLY HAD FATAL ERRORS
0065 0001       587: ERR:WARNINGCOMPILE      RMB     1       COMPILATION OR ASSEMBLY HAD NON-FATAL ERRORS
0066 0001       588: ERR:BADCMDFORMAT        RMB     1       BAD COMMAND FORMAT (SYNTAX ERROR!)
0067 0001       589: ERR:CANTGOTO    RMB     1       CAN'T DO GOTO FROM CONSOLE:
0068 0001       590: ERR:ABNORMALSTOP        RMB     1       PROGRAM TERMINATED ABNORMALLY
0069 0001       591: ERR:NOTENUFMEM  RMB     1       NOT ENOUGH MEMORY TO EXECUTE COMMAND
                592: *
                593: *       SDOS ERROR CODES
                594: *
                595: *
                596: *       ERROR CODES FOR SDOS ARE RESERVED BETWEEN 1000-1999
                597: *
  03E8          598:         ORG     1000
03E8 0001       599: ERR:BOOTCKSUMFAIL       RMB     1       BOOT SECTOR DISKINFO CHECK SUM FAILED
03E9 0001       600: ERR:EOFHIT      RMB     1       END OF FILE HIT
03EA 0001       601: ERR:FILEISOPEN  RMB     1       A FILE IS OPEN DURING DISMOUNT REQUEST
03EB 0001       602: ERR:NODEBUGGER  RMB     1       NO DEBUGGER TO CALL!
03EC 0001       603: ERR:BADPOSITION RMB     1       BAD POSITIONING REQUEST
03ED 0001       604: ERR:NBPCTOOBIG  RMB     1       NUMBER OF BYTES PER CLUSTER >= 65536
03EE 0001       605: ERR:NODISKMAP   RMB     1       NO DISK MAP, CAN'T ALLOC OR FREE
03EF 0001       606: ERR:NOMATCHFCB  RMB     1       NO MATCHING FILE CONTROL BLOCK FOUND
03F0 0001       607: ERR:NODEFAULTPROGRAM    RMB     1       NO "DEFAULTPROGRAM" ON THIS DISK
03F1 0001       608:         RMB     1       **** UNUSED ****
03F2 0001       609: ERR:FILEWRTPROT RMB     1       FILE IS WRITE PROTECTED
03F3 0001       610: ERR:FILENOTFOUND        RMB     1       FILE NOT FOUND
03F4 0001       611: ERR:ILLEGALLCN  RMB     1       LCN OUT OF RANGE
03F5 0001       612: ERR:BADFNAMESIZE        RMB     1       LENGTH OF FILE NAME > 16 CHARACTERS
03F6 0001       613: ERR:NEWFILEEXISTS            RMB 1 NEW FILE ALREADY EXISTS!
03F7 0001       614: ERR:NODISKSPACE  RMB         1 DISK SPACE EXHAUSTED
03F8 0001       615: ERR:LCNWASNTALLOCATED        RMB 1 LCN ENCOUNTERED BY FREECLUSTERS WASN'T ALLOCATED (*
03F9 0001       616: ERR:NOFREEFCBS   RMB         1 RAN OUT OF FCBS (*SYSTEM*)
03FA 0001       617: ERR:WRONGFILESYSTEM          RMB 1 FILE SYSTEM INCOMPATIBLE WITH THIS VERSION OF SDOS




ASM/6800 1.4A0: 03FB SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 22; Form 1      *** SDOS 1.1 DEFINITIONS ***
SDOS11G.ASM
03FB 0001       618: ERR:FILEINCREATE RMB         1 FILE IS BEING CREATED
03FC 0001       619: ERR:DISKMOUNTED  RMB         1 DISK IS MOUNTED, CAN'T CHANGE MAPALGORITHM
03FD 0001       620: ERR:CANTOPENMUSTCREATE       RMB 1 MUST CREATE TO OPEN OUTPUT ONLY DEVICE
03FE 0001       621: ERR:NOERRORMSGS  RMB         1 NO $ERRORMESSAGES FILE ON DRIVE 0
03FF 0001       622: ERR:BADFILENAME  RMB         1 FILENAME DOESN'T START WITH A-Z OR $
0400 0001       623: ERR:ILLFILESIZE  RMB         1 ILLEGAL FILE SIZE SPECIFICATION (SYNTAX OR OVFLOW)
0401 0001       624: ERR:HCSICTOOSMALL            RMB 1 HEADER CLUSTER NOT INITZED FOR RDCN FETCH
0402 0001       625: ERR:NOTENOUGHPOOL            RMB 1 NOT ENOUGH DISKBUFFER POOL (*SYSTEM*)
0403 0001       626: ERR:PWRFAILDISKF RMB         1 DISK FILE HANDLERS DON'T IMPLEMENT POWER FAIL
0404 0001       627: ERR:NOTALOADFILE RMB         1 CAN'T LOAD THAT - WRONG FORMAT
0405 0001       628: ERR:BADFILEVERSION           RMB 1 FILE VERSION NUMBER HAS NO DIGITS OR IS >255!
0406 0001       629: ERR:CHTOOBIG     RMB         1 CHANNEL # IS TOO BIG
0407 0001       630: ERR:CHBUSY       RMB         1 CHANNEL IS ALREADY OPEN
0408 0001       631: ERR:CLOSED       RMB         1 CHANNEL IS ALREADY CLOSED
0409 0001       632: ERR:ILLEGALSYSCALL           RMB 1 ILLEGAL SYSCALL #
040A 0001       633: ERR:ILLDEVICEOP  RMB         1 ILLEGAL DEVICE OPERATION
040B 0001       634: ERR:RENAMEDEVICE RMB         1 CAN'T RENAME TO DIFFERENT DEVICE
040C 0001       635: ERR:BADLOADRECORD            RMB 1 LOAD RECORD FORMAT ERROR
040D 0001       636: ERR:NOTENOUGHROOM            RMB 1 PROGRAM TOO BIG TO LOAD
040E 0001       637: ERR:ILLLSN       RMB         1 ILLEGAL LSN PASSED TO PHYSICAL DISK DRIVERS
040F 0001       638: ERR:DIRECTORYDAMAGED         RMB 1 DIRECTORY.SYS DIRECTORY ENTRY IS DAMAGED
0410 0001       639: ERR:IBUFOVERFLOW RMB         1 INPUT BUFFER OVERFLOW IN THE DRIVERS
0411 0001       640: ERR:PROGRAMKILLED            RMB 1 PROGRAM KILLED BY OPERATOR
0412 0001       641: ERR:DEVICETIMEDOUT           RMB 1 DEVICE TIMED OUT
0413 0001       642: ERR:SECTORSIZE2  RMB         1 SECTORSIZE IS NOT A POWER OF 2!
0414 0001       643: ERR:SYSTEMCROAKED            RMB 1 ...WHILE DOING AN EXIT OR CHAIN (*SYSTEM*)
0415 0001       644: ERR:DISKREAD     RMB         1 DISK READ ERROR
0416 0001       645: ERR:DISKWRITE    RMB         1 DISK WRITE ERROR
0417 0001       646: ERR:DISKSEEK     RMB         1 DISK SEEK ERROR
0418 0001       647: ERR:DSKWRTPROT   RMB         1 DISK IS WRITE PROTECTED
0419 0001       648: ERR:DISKWRITELOCKED          RMB 1 DISK DEVICE IS SOFTWARE WRITE LOCKED
041A 0001       649: ERR:SDOSCKSUM    RMB         1 SDOS GOT A KNIFE IN THE RIBS!
041B 0001       650: ERR:NLSNGE224    RMB         1 NLSN >= 2^24, ILLEGAL
041C 0001       651: ERR:CLUSTERSIZELIMITSFILE    RMB 1 CLUSTER SIZE IS TOO SMALL TO SUPPORT A FILE THAT BI
041D 0001       652: ERR:SYSCALLTOOSHORT          RMB 1 SYSCALL BLOCK IS TOO SMALL FOR SPECIFIED SYSCALL
041E 0001       653: ERR:RDBUFTOOSMALL            RMB 1 READ BUFFER SPECIFIED BY SYSCALL IS TOO SHORT FOR R
041F 0001       654: ERR:WRBUFTOOSMALL            RMB 1 WRITE BUFFER SPECIFIED BY SYSCALL IS TOO SHORT
0420 0001       655: ERR:NOSUCHDEVICE RMB         1 NO SUCH DEVICE IN THIS CONFIGURATION
0421 0001       656: ERR:DEVICEERRORED            RMB 1 DEVICE HARDWARE DID NOT RESPOND REASONABLY
0422 0001       657: ERR:MUSTBEDISK   RMB         1 MUST SELECT DISK DEVICE




ASM/6800 1.4A0: 0423 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 23; Form 1      *** SDOS 1.1 DEFINITIONS ***
SDOS11G.ASM
0423 0001       658: ERR:NOTOPENTOCONSOLE         RMB 1 CHANNEL 0 IS NOT OPEN TO CONSOLE DEVICE
0424 0001       659: ERR:DEVICENOTREADY           RMB 1 DEVICE IS NOT READY
0425 0001       660: ERR:TIMENOTSET   RMB         1 TIME NOT SET TO NON-ZERO DAY/MONTH!
0426 0001       661: ERR:NOSUCHLUN    RMB         1 NO SUCH LOGICAL UNIT NUMBER
0427 0001       662: ERR:ZEROSTARTADDRESS         RMB 1 OBJECT FILE HAS NO (ZERO) START ADDRESS
0428 0001       663: ERR:NOSUCHPROGRAM            RMB 1 NO SUCH PROGRAM EXISTS (ERROR ISSUED BY LOADER)
0429 0001       664: ERR:OLDFILEEXISTS            RMB 1 OLD FILE BY SAME NAME ALREADY EXISTS
042A 0001       665:          RMB     1           *** UNUSED ***
042B 0001       666: ERR:ALLOC0CLUSTERS           RMB 1 "ALLOC" CALL WITH REQUEST FOR 0 CLUSTERS!
042C 0001       667: ERR:FILEALREADYDELETED       RMB 1 FILE WAS DELETED BUT NOT CLOSED BEFORE RENAME WAS A
042D 0001       668: ERR:PRINTERNOTREADY          RMB 1 PRINTER IS NOT READY
042E 0001       669: ERR:INPUTTIMEOUT RMB         1 INPUT TIMED OUT, ABORTED
042F 0001       670: ERR:ENDOFMEDIUM  RMB         1 END OF MEDIUM ON DEVICE
0430 0001       671: ERR:SELFTESTCKSUM            RMB 1 PROGRAM SELF-TEST CHECKSUM FAILED
0431 0001       672: ERR:NOTIMEOUTBLKS            RMB 1 ZERO TIME OUT BLOCKS IN I/O PKG NOT LEGAL
0432 0001       673: ERR:SERIALNOWRONG            RMB 1 THIS CPU HAS WRONG SERIAL NUMBER TO RUN PROGRAM
0433 0001       674: ERR:NOSUCHKEY    RMB         1 NO SUCH KEY EXISTS IN INDEX
0434 0001       675: ERR:DUPLICATEKEY RMB         1 KEY ALREADY EXISTS IN INDEX
0435 0001       676: ERR:BRANCHFACTORSIZE         RMB 1 KEY BRANCHING FACTOR IS TOO SMALL
0436 0001       677: ERR:SDOSNOTREGISTERED        RMB 1 THIS COPY OF SDOS NOT REGISTERED WITH SD YET
0437 0001       678: ERR:DECRYPTIONKEYSDONTMATCH  RMB 1 LAST FILE LOADED HAS DIFFERENT DECRYPTION KEY
                679: *
  076E          680: ERR:WRONGDISKTYPE            EQU 1902 WRONG DISK TECHNOLOGY (DENSITY, SIDES, ETC.)
                681: *
                682: *        VIRTUAL TERMINAL DRIVER ERROR CODES
                683: *
  0771          684:          ORG     1905
0771 0001       685: ERR:IOINPROGRESS RMB         1 LAST REQUEST HAS NOT COMPLETED
0772 0001       686: ERR:BUSYFORANOTHERPROCESS    RMB 1 DCB OPEN TO ANOTHER PROCESS
0773 0001       687: ERR:ACTIVATIONNOTINBUFFER    RMB 1 RDBUF DOES NOT HOLD ACTIVATION
0774 0001       688: ERR:BADFIELDWIDTH            RMB 1 CRT SCREEN FEILD SPECIFICATION IS TOO WIDE
0775 0001       689: ERR:ACTIVATIONRECEIVED       RMB 1 ACTIV. REC'D PER CC:ACTIVATIONCK
0776 0001       690: ERR:TIMEDINPUTEXPIRED        RMB 1 TIMED INPUT PERIOD EXPIRED
0777 0001       691: ERR:PROFILENOTFOUND          RMB 1 DEVICE PROFILE NOT FOUND
0778 0001       692: ERR:PROFILENOTMALLEABLE      RMB 1 DEVICE PROFILE NOT MALLEABLE
0779 0001       693:          RMB     1           *** RESERVED ***
                694: *
  04B0          695:          ORG     1200        SDOS/MT ERROR CODES
04B0 0001       696: ERR:BADREADBUF   RMB         1 SYSCALL REPLY BUFFER NOT WITHIN USER SPACE
04B1 0001       697: ERR:BADWRITEBUF  RMB         1 SYSCALL WRITE BUFFER NOT WITHIN USER SPACE




ASM/6800 1.4A0: 04B2 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 24; Form 1      *** SDOS 1.1 DEFINITIONS ***
SDOS11G.ASM
04B2 0001       698: ERR:RDBUFTOOBIG  RMB         1 SYSCALL REPLY BUFFER > 255 BYTES
04B3 0001       699: ERR:WRBUFTOOBIG  RMB         1 SYSCALL WRITE BUFFER > 255 BYTES
04B4 0001       700: ERR:NOTENOUGHCHANNELS        RMB 1 AVAILABLE I/O CHANNELS EXHAUSTED
04B5 0001       701: ERR:NOTUNDERTIMESHARE        RMB 1 FUNCTION NOT AVAILABLE UNDER SDOS/MT
04B6 0001       702: ERR:MTNOROOM     RMB         1 NOT ENOUGH ROOM TO RUN SDOS/MT
04B7 0001       703: ERR:MTBADCONFIG  RMB         1 INCORRECT CONFIGURATION FOR SDOS/MT
04B8 0001       704: ERR:ALREADYLOCKED            RMB 1 INTERLOCK OBJECT IS ALREADY LOCKED
04B9 0001       705: ERR:NOSUCHOBJECT RMB         1 BAD CAPABILITY GIVEN
04BA 0001       706: ERR:NOTLOCKED    RMB         1 INTERLOCK OBJECT IS NOT LOCKED
04BB 0001       707: ERR:OBJECTDESTROYED          RMB 1 INTERLOCK OBJECT DESTROYED WHILE WAITING FOR IT
04BC 0001       708: ERR:LOCKRESET    RMB         1 INTERLOCK OBJECT WAS RESET WHILE WAITING FOR IT
04BD 0001       709: ERR:IMPLEMENTATIONLIMITREACHED RMB 1 CAN'T HANDLE MORE INTERLOCK OBJECTS NOW
04BE 0001       710: ERR:ILLEGALINTERLOCKFUNCTION RMB 1 ILLEGAL INTERLOCK FUNCTION REQUESTED
04BF 0001       711: ERR:MEMORYMGMTFAIL           RMB 1 SDOS/MT INTERNAL MEMORY MANAGEMENT FAILURE
04C0 0001       712: ERR:NOMOREJOBS   RMB         1 ALL AVAILABLE JOBS ARE BUSY NOW
04C1 0001       713: ERR:ILLEGALJOBCONTROL        RMB 1 ILLEGAL JOB CONTROL REQUEST
04C2 0001       714: ERR:CAPABILITYFAILURE        RMB 1 CAPABILITY DOES NOT HAVE RIGHTS TO PERFORM OPERATIO
04C3 0001       715: ERR:JOBKILLED    RMB         1 THIS JOB HAS BEEN KILLED BY ANOTHER
04C4 0001       716: ERR:JOBCOMPLETED RMB         1 JOB SUCCESSFULLY COMPLETED 
                717: *        DEVICE TYPE DEFINITIONS 
                718: *
  0000          719:          ORG     0
0000 0001       720: DVTYP.FILE       RMB         1 FILE (MANAGED BY SDOS)
0001 0001       721: DVTYP.DISK       RMB         1 DISK DEVICE (MANAGED BY SDOS)
0002 0001       722: DVTYP.STAPE      RMB         1 SERIAL TAPE DEVICE
0003 0001       723: DVTYP.DTAPE      RMB         1 DIRECTORIED TAPE DEVICE
0004 0001       724: DVTYP.CONSOLE    RMB         1 CONSOLE (HUMAN'S INTERFACE)
0005 0001       725: DVTYP.PRINTER    RMB         1 LINE PRINTER DEVICE
0006 0001       726: DVTYP.SERIALOUT  RMB         1 ILL-DEFINED
0007 0001       727: DVTYP.SERIALIN   RMB         1
0008 0001       728: DVTYP.PAROUT     RMB         1 PARALLEL OUT
0009 0001       729: DVTYP.PARIN      RMB         1 PARALLEL IN
000A 0001       730: DVTYP.DUMMY      RMB         1 BLACK HOLE FOR DATA BYTES
000B 0001       731: DVTYP.CLOCK      RMB         1 CLOCK DEVICE
                732: *
                733: *
                734: *
                735: *
                736: *        DEVICE TYPE DATA DISPLACEMENTS
                737: *




ASM/6800 1.4A0: 000B SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 25; Form 1      *** SDOS 1.1 DEFINITIONS ***
SDOS11G.ASM
  0000          738:          ORG     0
0000 0001       739: DVTYP:TYPE       RMB         1 DEVICE TYPE
                740: *
                741: *        DEVICE-TYPE SPECIFIC DATA
                742: *
  0000          743:          ORG     0           DISK DEVICE SPECIFIC DATA
0000 0002       744: DVDAT:NBPS       RMB         2 NUMBER OF BYTES PER SECTOR
0002 0002       745: DVDAT:NSPT       RMB         2 NUMBER OF SECTORS PER TRACK
0004 0002       746: DVDAT:NTPC       RMB         2 NUMBER OF TRACKS PER CYLINDER
0006 0002       747: DVDAT:NCYL       RMB         2 NUMBER OF CYLINDERS
                748: *
  0000          749:          ORG     0           CONSOLE/PRINTER DEVICE SPECIFIC DATA
0000 0001       750: DVDAT:WIDTH      RMB         1 LINE WIDTH IN CHARACTERS
0001 0001       751: DVDAT:DEPTH      RMB         1 PAGE DEPTH (DEFAULT DEPTH FOR PRINTERS)
                752: *                             (0=INFINITY)
                753: *
  0002          754:          ORG     DVDAT:NBPS+2 (DISK) FILE DEVICE SPECIFIC DATA
0002 0001       755: DVDAT:NSPC       RMB         1 NUMBER OF SECTORS PER CLUSTER




ASM/6800 1.4A0: 0002 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 26; Form 1      *** SDOS 1.1 DEFINITIONS ***
SDOS11G.ASM
                757: **********************************************************************
  0010          758: FILESYSTEMVERSION            EQU $10 VERSION 1.0 OF FILESYSTEM FORMAT
                759: ********************************************************************
                760: *
                761: *        FUNNY VALUES TO MAKE DATA STORAGE ALLOCATION USES MORE CLEAR
                762: *
  0000          763: IGNORED  EQU     0           SO I CAN MARK PLACES AS IGNORED
  0000          764: CHANGED  EQU     0           SO I CAN MARK PLACES AS CHANGED
                765: *
                766: *        LOCATIONS 0-7 ARE TREATED AS PART OF TASK'S CONTEXT
                767: *        AND SAVED DURING A CONTEXT SWITCH
                768: *
                769: *        DEFINED TEMPORARIES
                770: *        USED TO PUSH (X) ONTO STACK IN INTERRUPTABLE WAY
                771: *        FOR USE BY TASK-LEVEL SUBROUTINES
                772: *
  0001          773:          IFUND   SCRATCHPAD
  0000          774:          ORG     $0
0000 0002       775: TEMPX    RMB     2           ANY SUBROUTINE MAY STEP ON THIS!!!
  0000          776: TEMP     EQU     TEMPX       FOR CONVENIENCE
  0000          777: TEMPA    EQU     TEMPX       TEMP STORAGE FOR A REGISTER
  0001          778: TEMPB    EQU     TEMPX+1     TEMP STORAGE FOR B REGISTER
                779:          FIN     SCRATCHPAD
                780: *
                781: *        PROTECTION BITS FOR DIR:PROTECTION
                782: *
  0040          783: PROT::WRITE      EQU         $40 PROTECT AGAINST WRITES
  0001          784: PROT::BACKUP     EQU         $1 PROTECT AGAINST BACKING UP




ASM/6800 1.4A0: 0000 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 27; Form 1      *** SDOS 1.1 DEFINITIONS ***
SDOS11G.ASM
                786: *        ASCII CHARACTER SET
                787: *
  0000          788: ASCII:NULL       EQU         0 ^@ NULL
  0001          789: ASCII:SOH        EQU         1 ^A START OF HEADING
  0002          790: ASCII:STX        EQU         2 ^B START OF TEXT
  0003          791: ASCII:ETX        EQU         3 ^C END OF TEXT
  0004          792: ASCII:EOT        EQU         4 ^D END OF TRANSMISSION
  0005          793: ASCII:ENQ        EQU         5 ^E ENQUIRY (WRU- WHO ARE YOU)
  0006          794: ASCII:ACK        EQU         6 ^F ACKNOWLEDGE
  0007          795: ASCII:BEL        EQU         7 ^G BELL
  0008          796: ASCII:BS EQU     8           ^H BACKSPACE
  0009          797: ASCII:HT EQU     9           ^I HORIZONTAL TAB
  000A          798: ASCII:LF EQU     $A          ^J LINE FEED
  000B          799: ASCII:VT EQU     $B          ^K VERTICAL TAB
  000C          800: ASCII:FF EQU     $C          ^L FORM FEED
  000D          801: ASCII:CR EQU     $D          ^M CARRIAGE RETURN
  000E          802: ASCII:SO EQU     $E          ^N SHIFT OUT
  000F          803: ASCII:SI EQU     $F          ^O SHIFT IN
  0010          804: ASCII:DLE        EQU         $10 ^P DATA LINK ESCAPE
  0011          805: ASCII:DC1        EQU         $11 ^Q DEVICE CONTROL 1
  0012          806: ASCII:DC2        EQU         $12 ^R DEVICE CONTROL 2
  0013          807: ASCII:DC3        EQU         $13 ^S DEVICE CONTROL 3
  0014          808: ASCII:DC4        EQU         $14 ^T DEVICE CONTROL 4
  0015          809: ASCII:NAK        EQU         $15 ^U NEGATIVE ACKNOWLEDGE
  0016          810: ASCII:SYN        EQU         $16 ^V SYNCHRONOUS IDLE
  0017          811: ASCII:ETB        EQU         $17 ^W END OF TRANSMISSION BLOCK
  0018          812: ASCII:CAN        EQU         $18 ^X CANCEL
  0019          813: ASCII:EM EQU     $19         ^Y END OF MEDIUM
  001A          814: ASCII:SUB        EQU         $1A ^Z SUBSTITUTE
  001B          815: ASCII:ESC        EQU         $1B ^[ ESCAPE
  001C          816: ASCII:FS EQU     $1C         ^\ FILE SEPERATOR
  001D          817: ASCII:GS EQU     $1D         ^] GROUP SEPERATOR
  001E          818: ASCII:RS EQU     $1E         ^^ RECORD SEPERATOR
  001F          819: ASCII:US EQU     $1F         ^_ UNIT SEPERATOR
  0020          820: ASCII:SPACE      EQU         $20 SPACE (WORD SEPERATOR)
  007F          821: ASCII:RUBOUT     EQU         $7F DELETE (RUBOUT)
  007F          822: ASCII:MASK       EQU         $7F TO MASK OFF ALL BUT 7 LEGAL ASCII BITS




ASM/6800 1.4A0: 0000 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 28; Form 1      *** SDOS 1.1 DEFINITIONS ***
SDOS11G.ASM
  0001          824:          IF      SYSTEMDEFS!IOPKDEFS
                825: *        THIS BEGINS START OF DEFINITIONS REQUIRED FOR I/O PACKAGES
                826: *
                827: *        SDOS ENTRY POINTS
                828: *
  0000          829:          ORG     0
0000 0001       830: SDOS:VERSIONNUMBER           RMB 1 VERSION NUMBER BYTE ($AB = VERSION A.B)
0001 0002       831: SDOS:LASTERROR   RMB         2 MOST RECENT ERROR ENCOUNTERED BY SDOS
0003 0002       832: SDOS:CONFIGURATION           RMB 2 POINTER TO CONFIGURATION TABLE (SUPPLIED BY  I/O PA
0005 0002       833: SDOS:SERIALNUMBER            RMB 2 SERIAL NUMBER ASSIGNED TO THIS COPY
0007 0002       834: SDOS:IOBLOCKPTR  RMB         2 POINTER TO I/O REQUEST (PASSED TO DRIVERS)
0009 0002       835: SDOS:IOCBPOINTER RMB         2 POINTER TO IOCB FOR THIS CHANNEL
000B 0003       836: SDOS:CLOCK       RMB         3 TIME OF DAY IN 1/60 SEC UNITS (0..5,183,999)
000E 0001       837: SDOS:DAY RMB     1           DAY NUMBER IN MONTH (1..31) BCD
000F 0001       838: SDOS:MONTH       RMB         1 MONTH OF YEAR (1..12) BCD
0010 0001       839: SDOS:YEAR        RMB         1 YEAR MODULO 100 (78..99) BCD
0011 0001       840: SDOS:STACKSWITCHED           RMB 1 "SWITCHED TO INTERRUPT STACK" COUNTER
0012 0003       841: SDOS:IOINT       RMB         3 I/O INTERRUPT GOES HERE FIRST!
0015 0003       842: SDOS:RTI RMB     3           JMP TO "RETURN FROM INTERRUPT; NO EVENT"
0018 0003       843: SDOS:RESCHEDULE  RMB         3 JMP TO "RETURN FROM INTERRUPT; PLEASE RESCHEDULE"
001B 0003       844: SDOS:CLOCKTICKED RMB         3 JMP TO "CLOCKTICKED" WITH (A) = # TICKS
001E 0002       845: SDOS:CURRENTASK  RMB         2 POINTER TO TCB OF CURRENTLY ACTIVE TASK
0020 0001       846: SDOS:KILLPROOF   RMB         1 0 --> USER TASK IS KILLABLE
0021 0003       847: SDOS:KILLUSERPROGRAM         RMB 3 JMP TO "KILL USER PROGRAM" ROUTINE
0024 0003       848: SDOS:STARTIO     RMB         3 JMP TO START I/O ROUTINE (X POINTS TO INTERRUPT ROUTINE
0027 0003       849: SDOS:WAITCOND    RMB         3 JMP TO WAIT FOR CONDITION IN (A,B)
002A 0003       850: SDOS:WAITEVENT   RMB         3 JMP TO WAIT FOR EVENT SELECTED BY (X)
002D 0003       851: SDOS:ERROR       RMB         3 ERROR SUBROUTINE; INLINE 2 BYTE ERROR CODE
0030 0003       852: SDOS:ERRORSAVE   RMB         3 ERROR CODE SAVE ROUTINE; SAVES (X) AS ERROR CODE
0033 0003       853: SDOS:ERRORED     RMB         3 "ERROR CAN'T BE HANDLED BY ME" ENTRY
0036 0003       854: SDOS:CHECKRDLEN  RMB         3 CHECK READ LENGTH SUBROUTINE ENTRY POINT
0039 0003       855: SDOS:CHECKWRLEN  RMB         3 CHECK WRITE LENGTH SUBROUTINE ENTRY POINT
003C 0003       856: SDOS:CHECKSCLEN  RMB         3 CHECK SYSCALL BLOCK LENGTH SUBROUTINE ENTRY POINT
003F 0003       857: SDOS:TABLEBRANCH RMB         3 TABLE BRANCH ROUTINE FOR SYSCALL DECODING
0042 0003       858: SDOS:BLOCKMOVE   RMB         3 "HOT DOG" BLOCK MOVE ENTRY POINT
0045 0003       859: SDOS:GETRUNNINGENCRYPTED     RMB 3 GET ADDRESS OF RUNNING ENCRYPTED BYTE TO (X)
  0048          860: SDOS:ENTRYSIZE   EQU         *




ASM/6800 1.4A0: 0045 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 29; Form 1      *** SDOS 1.1 DEFINITIONS ***
SDOS11G.ASM
                862: *
                863: *        SDOS CONFIGURATION TABLE
                864: *
  0000          865:          ORG     0
0000 0002       866: CNFG:DISKDCBS    RMB         2 POINTER TO DISK DEVICE CONTROL BLOCKS
0002 0002       867: CNFG:DEVICEDCBS  RMB         2 POINTER TO LIST OF NON-DISK DEVICE CONTROL BLOCKS
0004 0002       868: CNFG:IOCBPOINTERS            RMB 2 POINTER LIST TO IOCB'S
0006 0001       869: CNFG:NIOCHANNELS RMB         1 NUMBER OF I/O CHANNELS
0007 0002       870: CNFG:DSKBUFFERPOOL           RMB 2 POINTER TO THE DISK BUFFER POOL
0009 0002       871: CNFG:DSKPOOLSIZE RMB         2 SIZE OF THE BUFFER POOL
000B 0002       872: CNFG:ATTNCHECK   RMB         2 ADDRESS OF ATTENTION CHECK ROUTINE
000D 0002       873: CNFG:DEBUGGER    RMB         2 = ADDRESS OF DEBUGGER (0 IF NONE)
000F 0002       874: CNFG:DRIVERBASE  RMB         2 LOWEST ADDRESS USED BY DRIVERS
0011 0002       875: CNFG:INTSETUP    RMB         2 POINTER TO INTERRUPT SYSTEM SETUP ROUTINE
0013 0003       876: CNFG:INTDISABLE  RMB         3 SUBROUTINE (OR "JMP") TO DISABLE ALL INTERRUPTS
0016 0003       877: CNFG:INTENABLE   RMB         3 SUBROUTINE (OR "JMP") TO ENABLE ALL INTERRUPTS
0019 0003       878: CNFG:INTRTI      RMB         3 CODE TO ENABLE PRIORITY INTERRUPT AND DO RTI (USUALLY J
001C 0002       879: CNFG:INTERRUPTSTACK          RMB 2 POINTER TO LAST BYTE OF INTERRUPT STACK SPACE
                880: *                            (USED BY AN "LDS" INSTRUCTION)
001E 0002       881: CNFG:IOINTPOLL   RMB         2 POINTER TO I/O INTERRUPT SERVICE DEVICE POLL ROUTINE
0020 0002       882: CNFG:TASKQUEUE   RMB         2 POINTER TO FIRST TASK IN TASK QUEUE
0022 0002       883: CNFG:TIMEOUTLIST RMB         2 POINTER TO CHAINED LIST OF TIMEOUT BLOCKS
0024 0002       884: CNFG:VTPROFILES  RMB         2 POINTS TO FIRST PROFILE BLOCK IN CHAIN
0026 0002       885: CNFG:VTDEBUG     RMB         2 INTERRUPT LEVEL ENTRY POINT TO DEBUGGER
0028 0002       886: CNFG:MTPRIMS     RMB         2 POINTS TO /MT,/ES PRIMITIVES TABLE
002A 0002       887: CNFG:BOOTDEFAULTDISKDCB      RMB 2 POINTS TO DCB TO USE FOR DEFAULTDISK AT BOOT TIME
002C 0002       888: CNFG:BOOTCONSOLEDCB          RMB 2 POINTS TO DCB TO USE FOR "CONSOLE:" AT BOOT TIME
002E 0002       889: CNFG:RETURNELAPSEDMILLISECONDS RMB 2 RETURNS ELAPSED TIME IN MILLISECONDS SINCE LAST C
0030 0002       890: CNFG:SETCLOCKINTERVALMILLISECONDS RMB 2 CAUSE CALL TO SDOS:MSTICK
                891: *        VIA INTERRUPT AFTER DELAY SPECIFIED IN MILLISECONDS




ASM/6800 1.4A0: 0030 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 30; Form 1      *** SDOS 1.1 DEFINITIONS ***
SDOS11G.ASM
                893: *
                894: *        DEVICE DRIVER ROUTINE ENTRY POINTS
                895: *
  0000          896:          ORG     0
0000 0002       897: DRIVER:OPEN      RMB         2 OPEN FILE
0002 0002       898: DRIVER:CLOSE     RMB         2 CLOSE FILE
0004 0002       899: DRIVER:READA     RMB         2 READ ASCII
0006 0002       900: DRIVER:WRITEA    RMB         2 WRITE ASCII
0008 0002       901: DRIVER:READB     RMB         2 READ BINARY
000A 0002       902: DRIVER:WRITEB    RMB         2 WRITE BINARY
000C 0002       903: DRIVER:CREATE    RMB         2 CREATE FILE
000E 0002       904: DRIVER:RENAME    RMB         2 RENAME FILE
0010 0002       905: DRIVER:DELETE    RMB         2 DELETE FILE
0012 0002       906: DRIVER:CONTROL   RMB         2 DO CONTROL OPERATION
0014 0002       907: DRIVER:STATUS    RMB         2 READ DEVICE (DRIVER) STATUS
0016 0002       908: DRIVER:RESET     RMB         2 RESET DRIVER (ON BOOT)
0018 0002       909: DRIVER:STARTIO   RMB         2 POINTER TO START I/O ENTRY OF INTERRUPT CODE
001A 0002       910: DRIVER:PFRESTART RMB         2 POWER FAIL RESTART
                911: *
                912: *        DISK SECTOR I/O DRIVER ROUTINE ENTRY POINTS
                913: *
  0000          914:          ORG     0
0000 0002       915: DRIVER:DISKRESET RMB         2 RESET THIS DISK DRIVER
0002 0002       916: DRIVER:DISKREAD  RMB         2 INITIATE A DISK SECTOR READ
0004 0002       917: DRIVER:DISKWRITE RMB         2 INITIATE A DISK SECTOR WRITE
0006 0002       918: DRIVER:DISKWAIT  RMB         2 WAIT FOR DISK I/O COMPLETE
0008 0002       919: DRIVER:DISKSTATUS            RMB 2 READ DISK-SPECIFIC STATUS
000A 0002       920: DRIVER:DISKCONTROL           RMB 2 PERFORM DISK-SPECIFIC CONTROL OPERATION
000C 0002       921: DRIVER:DISKWRITEPROTQ        RMB 2 DETERMINE IF DISK IS WRITE PROTECTED
000E 0002       922: DRIVER:DISKVERIFY            RMB 2 INITIATE A DISK SECTOR VERIFY
0010 0002       923: DRIVER:DISKLSNTOPSN          RMB 2 CONVERT LSN TO PHYSICAL CYLINDER, TRACK AND SECTOR




ASM/6800 1.4A0: 0010 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 31; Form 1      *** SDOS 1.1 DEFINITIONS ***
SDOS11G.ASM
                925: *
                926: *        TIMEOUT ELEMENT DISPLACEMENTS
                927: *
  0000          928:          ORG     0
0000 0002       929: TIMEOUT:LINK     RMB         2 POINTER TO NEXT TIMEOUT QUEUE ELEMENT
0002 0002       930: TIMEOUT:FUSE     RMB         2 16 BIT TIMEOUT COUNT (1/60 SEC UNITS); 0--> NO TIMEOUT
0004 0002       931: TIMEOUT:ROUTINE  RMB         2 POINTER TO TIMEOUT INTERRUPT ROUTINE FOR DEVICE
0006 0002       932: TIMEOUT:DCB      RMB         2 POINTER TO DCB BEING TIMED OUT
  0008          933: TIMEOUT:SIZE     EQU         *
                934: *
                935: *        REGISTER DISPLACEMENTS INTO A CONTEXT BLOCK
                936: *        THESE VALUES ASSUME THAT (S) AFTER INTERRUPT, HAS BEEN COPIED INTO (X)
                937: *
  0001          938:          IF      M6800!M6801
  0001          939:          ORG     1           THIS WORKS, DON'T KNOCK IT!
0001 0001       940: REG:CC   RMB     1           CONDITION CODE BITS
0002 0001       941: REG:B    RMB     1           B REGISTER
0003 0001       942: REG:A    RMB     1           A REGISTER
0004 0002       943: REG:X    RMB     2           X REGISTER (REG:X+1 IS LOW BYTE OF INDEX REGISTER)
0006 0002       944: REG:PC   RMB     2           P REGISTER (REG:P+1 IS LOW BYTE OF P COUNTER)
  0007          945: CONTEXTBLOCK:SIZE            EQU *-1
  0002          946:          ELSE    (M6809)
                957:          FIN




ASM/6800 1.4A0: 0006 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 32; Form 1      *** SDOS 1.1 DEFINITIONS ***
SDOS11G.ASM
                959: *
                960: *        INTERRUPT SYSTEM DEFINITIONS
                961: 
                962: *        MINIMUM STACK SIZE HAS ROOM FOR 3 CONTEXT BLOCKS:
                963: *        ONE FOR INTERRUPT, ONE FOR NMI AND ONE FOR DEBUGGER CONTEXT
                964: *        WORKING SPACE REQUIRED BY A TASK MUST BE ADDED TO MINSTACK!
  0015          965: MINSTACK EQU     3*CONTEXTBLOCK:SIZE
                966: 
                967: *        TCB (TASK CONTROL BLOCK) DISPLACEMENTS
                968: 
  0000          969:          ORG     0
0000 0002       970: TCB:LNK  RMB     2           POINTER TO NEXT TCB IN QUEUE
0002 0002       971: TCB:STACK        RMB         2 STACK POINTER FOR TASK
                972: *        ON TOP OF A STACK IS ALWAYS A CONTEXT BLOCK
0004 0002       973: TCB:COND RMB     2           TASK'S WAKE UP ROUTINE
0006 0002       974: TCB:PARAM        RMB         2 PARAMETER TO TCB:CND ROUTINE
0008 0008       975: TCB:SCRATCHPAD   RMB         8 SPACE FOR TASK'S SCRATCHPAD (LOCATIONS 0-7)
  0010          976: TCB:SIZE ; SIZE OF TASK CONTROL BLOCK
                977: *
  0006          978: DCBPOINTER       EQU         $6 POINTER TO DEVICE CONTROL BLOCK
                979: *
  00F0          980:          ORG     $F0
00F0 0000       981: SYSDEPENDENT     RMB         0 16 BYTES RESERVED FOR SYSTEM DEPENDENT USE
00F0 0001       982: BASICFLAGS       RMB         1 $F0 IS OWNED BY BASIC/I/O PACK FOR TRACE FLAGS
                983: *
                984: *        DEVICE CONTROL BLOCK DISPLACEMENTS
                985: *
  0000          986:          ORG     0
0000 0001       987: DCB:DONEFLAG     RMB         1 0 --> DEVICE IS BUSY; <>0 --> DEVICE IS DONE
0001 0002       988: DCB:LASTERROR    RMB         2 IF DCB IS DONE, CONTAINS ERROR STATUS (0 = NONE )
0003 0002       989: DCB:NAME RMB     2           POINTER TO DEVICE NAME STRING TERMINATED BY ZERO BYTE
0005 0002       990: DCB:NEXTDCB      RMB         2 POINTER TO NEXT DCB IN LIST OR ZERO
0007 0002       991: DCB:DRIVER       RMB         2 POINTER TO DRIVER ENTRY POINT LIST
                992: *DCB:DVTYP       RMB         1 TYPE OF DEVICE
  0009          993: DCB:SIZE ; DEVICE SPECIFIC DATA EXTENDS DCB FROM HERE




ASM/6800 1.4A0: 0007 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 33; Form 1      *** SDOS 1.1 DEFINITIONS ***
SDOS11G.ASM
                995: *
                996: *        DISKINFO TABLE DISPLACEMENTS
                997: *
  0009          998:          ORG     DCB:SIZE
0009 0002       999: DSKINFO:NBPS     RMB         2 NUMBER OF BYTES PER SECTOR
000B 0002      1000: DSKINFO:NSPT     RMB         2 NUMBER OF SECTORS PER TRACK
000D 0002      1001: DSKINFO:NTPC     RMB         2 NUMBER OF TRACKS PER CYLINDER
000F 0002      1002: DSKINFO:NCYL     RMB         2 NUMBER OF CYLINDERS PER DRIVE
               1003: *
               1004: *        THE FOLLOWING ARE FILLED FROM THE BOOT SECTOR
0011 0001      1005: DSKINFO:NSPC     RMB         1 NUMBER OF SECTORS PER CLUSTER
0012 0002      1006: DSKINFO:MINALLOC RMB         LCN:SIZE ALLOCATION MINIMUM FOR NEW FILES
0014 0002      1007: DSKINFO:MIDALLOC RMB         LCN:SIZE ALLOCATION MIN FOR FILE EXTENSION
0016 0002      1008: DSKINFO:MAPALGORITHM         RMB 2 CODE TO SELECT LOGICAL TO PHYSICAL SECTOR MAP ALGOR
  0007         1009: BOOT:PARAMSIZE   EQU         *-DSKINFO:NSPC SYSTEM DEPENDENT PARAMETERS IN BOOT BLOCK
               1010: *        END OF BOOT SECTOR DISK INFO
               1011: *DSKINFO:DISKID  RMB         BOOT:DISKIDSIZE CONTAINS DISK ID FOR MOUNTED DISKS
               1012: *
0018 0001      1013: DSKINFO:LOG2NBPS RMB         1 LOG BASE 2 OF DSKINFO:NBPS
0019 0002      1014: DSKINFO:NBPSM1   RMB         2 = NBPS-1 FOR USE AS MASK (QUICK "MOD NBPS")
001B 0003      1015: DSKINFO:NLSN     RMB         LSN:SIZE NUMBER OF LSNS FOR THIS DISK = NSPT*NTPC*NCYL
001E 0002      1016: DSKINFO:NLCN     RMB         LCN:SIZE NUMBER OF LCNS FOR THIS DISK = NLSN/NSPC
0020 0002      1017: DSKINFO:NBPC     RMB         2 NUMBER OF BYTES PER CLUSTER
0022 0002      1018: DSKINFO:RANDMAP  RMB         LCN:SIZE "RANDOM" LCN TO DISTRIBUTE NEW FILES
0024 0003      1019: DSKINFO:MAPLSN   RMB         LSN:SIZE LSN OF 1ST SECTOR IN DISK...
               1020: *                            ALLOCATION MAP CLUSTER
0027 0002      1021: DSKINFO:DIRFCB   RMB         2 POINTER TO FCB FOR $DIRECTORY FILE
0029 0002      1022: DSKINFO:MAPFCB   RMB         2 POINTER TO FCB FOR $DISKMAP FILE
002B 0002      1023: DSKINFO:SECTORDB RMB         2 POINTER TO RDSI CONTAINING LSN, ADDRESS PARAMETERS
002D 0003      1024: DSKINFO:BADLSN   RMB         3 LSN OF LAST SECTOR THAT COULDN'T READ/WRITE/SEEK
0030 0002      1025: DSKINFO:SEEKERRCNT           RMB 2 # SEEK ERRORS SINCE MOUNT
0032 0002      1026: DSKINFO:SEEKERRSTS           RMB 2 16 BITS OF LAST "SEEK" STATUS IN ERROR
0034 0002      1027: DSKINFO:WRITEERRCNT          RMB 2 # WRITE ERRORS SINCE MOUNT
0036 0002      1028: DSKINFO:WRITEERRSTS          RMB 2 16 BITS OF LAST "WRITE" STATUS IN ERROR
0038 0002      1029: DSKINFO:READERRCNT           RMB 2 # READ ERRORS SINCE MOUNT
003A 0002      1030: DSKINFO:READERRSTS           RMB 2 16 BITS OF LAST "READ" STATUS IN ERROR
003C 0003      1031: DSKINFO:OPSCOUNT RMB         3 24 BITS OF # DRIVER OPERATIONS SINCEMOUNT
003F 0003      1032: DSKINFO:ERRLSN   RMB         LSN:SIZE LSN CAUSING ANY SOFT OR HARD ERROR
0042 0001      1033: DSKINFO:WRITEPROTSTATE       RMB 1 0 --> WRITEABLE
  0043         1034: DSKINFO:SIZE     EQU         *




ASM/6800 1.4A0: 0042 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 34; Form 1      *** SDOS 1.1 DEFINITIONS ***
SDOS11G.ASM
               1036: *
               1037: *        SECTOR DESCRIPTOR BLOCK DISPLACEMENTS
               1038: *
  0000         1039:          ORG     0
0000 0002      1040: SECTORDB:DISKINFO            RMB 2 POINTER TO DISKINFO TABLE FOR DRIVE CONTAINING SECT
0002 0003      1041: SECTORDB:LSN     RMB         LSN:SIZE LOGICAL SECTOR NUMBER OF SECTOR
0005 0002      1042: SECTORDB:ADDRESS RMB         2 MEMORY ADDRESS FOR SECTOR
  0007         1043: SECTORDB:SIZE    EQU         *
               1044: *
               1045: *        RESIDENT DISK SECTOR INFORMATION BLOCK DISPLACEMENTS
               1046: *
  0000         1047:          ORG     0
0000 0002      1048: RDSI:DISKINFO    RMB         2 POINTER TO DISKINFO TABLE FOR THIS DRIVE
0002 0003      1049: RDSI:LSN RMB     LSN:SIZE    LOGICAL SECTOR NUMBER OF SECTOR
0005 0002      1050: RDSI:SECTORBASE  RMB         2 POINTER TO ACTUAL SECTOR CONTENTS
0007 0002      1051: RDSI:FLINK       RMB         2 FORWARD LINK IN LRU CHAIN
0009 0002      1052: RDSI:BLINK       RMB         2 BACKWARD LINK IN LRU CHAIN
000B 0001      1053: RDSI:MODIFIED    RMB         1 "THIS SECTOR MODIFIED" FLAG
000C 0001      1054: RDSI:STATE       RMB         1 STATE OF RDSI (READING, WRITING, VERIFYING, IDLE)
000D 0001      1055: RDSI:RETRYCOUNT  RMB         1 NUMBER OF TRIES LEFT BEFORE ERROR REPORTED
000E 0002      1056: RDSI:SECTOR      RMB         2 PHYSICAL SECTOR NUMBER OF LSN
0010 0002      1057: RDSI:TRACK       RMB         2 PHYSICAL TRACK NUMBER OF LSN
0012 0002      1058: RDSI:CYLINDER    RMB         2 PHYSICAL CYLINDER NUMBER OF LSN
  0014         1059: RDSI:SIZE        EQU         *
               1060: *
               1061: *        RDSI STATE DEFINITIONS
               1062: *
  0000         1063: RDSISTATE:IDLE   EQU         0 SECTOR TRANSFER IS COMPLETE
  0001         1064: RDSISTATE:READING            EQU 1 SECTOR IS BEING READ INTO MEMORY
  0002         1065: RDSISTATE:WRITING            EQU 2 SECTOR IS BEING WRITTEN FROM MEMORY
  0003         1066: RDSISTATE:VERIFYING          EQU 3 SECTOR IS BEING VERIFIED AFTER WRITE




ASM/6800 1.4A0: 0012 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 35; Form 1      *** SDOS 1.1 DEFINITIONS ***
SDOS11G.ASM
               1068: *
               1069: *        FILE CONTROL BLOCK DISPLACEMENTS
               1070: *
  0000         1071:          ORG     0
0000 0002      1072: FCB:DISKINFO     RMB         2 POINTER TO DISKINFO TABLE FOR THIS DRIVE
0002 0003      1073: FCB:DIRLSN       RMB         LSN:SIZE LSN OF DIRECTORY ENTRY
0005 0002      1074: FCB:DIRDISP      RMB         2 DISPLACEMENT FOR DIRECTORY ENTRY FROM TOP OF SECTOR IN 
0007 0003      1075: FCB:HLSN RMB     LSN:SIZE    = FCB:HLCN*DSKINFO:NSPC
000A 0001      1076: FCB:FLAGS        RMB         1 FLAG BITS DESCRIBING FCB
000B 0001      1077: FCB:REFCOUNT     RMB         1 NUMBER OF IOCBS USING THIS FCB
000C 0002      1078: FCB:HLCN RMB     LCN:SIZE    HEADER LOGICAL CLUSTER NUMBER OF FILE
000E 0001      1079: FCB:HCSIC        RMB         1 HEADER CLUSTER INITIALIZED COUNT
000F 0002      1080: FCB:NCLUSTERS    RMB         LCN:SIZE NUMBER OF CLUSTERS ALLOCATED TO THE FILE
0011 0004      1081: FCB:FILESIZE     RMB         4 SIZE OF THE FILE IN BYTES
0015 0001      1082: FCB:PROT RMB     1           PROTECTION BITS FROM DIRECTORY
0016 0001      1083: FCB:DAY          RMB         1 DATE OF FILE CREATION
0017 0001      1084: FCB:MONTH        RMB         1 MONTH OF FILE CREATION
0018 0001      1085: FCB:YEAR RMB     1           YEAR OF FILE CREATION MODULO 100
0019 0001      1086: FCB:VERSION      RMB         1 VERSION # OF FILE (NOT USED IN 1.0)
  001A         1087: FCB:SIZE EQU     *
               1088: *
  0001         1089:          IF      SYSTEMDEFS
  0080         1090: FCBFLG::NEWFILE  EQU         $80 FCB:FLAGS --> THIS FILE WAS CREATED
  0040         1091: FCBFLG::UPDATEDIR            EQU $40 FCB:FLAGS --> COPY FCB DATA BACK TO DIRECTORY
  0020         1092: FCBFLG::DELETED  EQU         $20 FCB:FLAGS --> THIS FILE WAS DELETED
  0010         1093: FCBFLG::MODIFIED EQU         $10 FCB:FLAGS --> THIS FILE WAS MODIFIED WHILE OPEN
               1094:          FIN     SYSTEMDEFS
               1095: *
               1096: *
               1097: *
  0002         1098: NMAGICFCBS       EQU         2 FOR ERRMSGFCB, SYSFCB




ASM/6800 1.4A0: 0019 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 36; Form 1      *** SDOS 1.1 DEFINITIONS ***
SDOS11G.ASM
               1100: *
               1101: *        IOCB DEFINITIONS
               1102: *
  0000         1103:          ORG     0
0000 0002      1104: IOCB:DCB RMB     2           POINTER TO DEVICE CONTROL BLOCK
0002 0003      1105: IOCB:CURLSN      RMB         LSN:SIZE LOGICAL SECTOR # OF CURBYTE
0005 0002      1106: IOCB:BUFFERP     RMB         2 ADDRESS OF 1ST BYTE TO TRANSFER
0007 0002      1107: IOCB:FCB RMB     2           POINTER TO FILE CONTROL BLOCK
0009 0002      1108: IOCB:DRIVER      RMB         2 POINTER TO DRIVER VECTOR FOR DEVICE
000B 0001      1109: IOCB:EOFFLAG     RMB         1 END OF FILE HIT FLAG
000C 0001      1110: IOCB:COLCNT      RMB         1 COLUMN COUNTER
000D 0004      1111: IOCB:CURBYTE     RMB         4 VIRTUAL BYTE # TO READ/WRITE FROM/TO NEXT
0011 0001      1112: IOCB:LOCATEDF    RMB         1 0 --> NEED TO DO A LOCATECURBYTE
               1113: *                            1 --> LOCATECURBYTE DONE
0012 0002      1114: IOCB:DRDSI       RMB         2 POINTER TO DATA RESIDENT DISK SECTOR INFO
0014 0002      1115: IOCB:NEXTBYTE    RMB         2 POINTER TO NEXT BYTE OF DISK SECTOR
0016 0002      1116: IOCB:BYTECOUNT   RMB         2 NUMBER OF BYTES LEFT TO PROCESS IN SECTOR
0018 0002      1117: IOCB:CURLCN      RMB         LCN:SIZE CURRENT LOGICAL CLUSTER NUMBER BEING PROCESSED
001A 0001      1118: IOCB:DRSN        RMB         1 RELATIVE DATA SECTOR NUMBER WITHIN CLUSTER
001B 0002      1119: IOCB:RDCN        RMB         LCN:SIZE RELATIVE DATA CLUSTER NUMBER W/ RESPECT TO DATA
               1120: *                            CLUSTERS WITHIN THE FILE (0=HEADER CLUSTER)
001D 0002      1121: IOCB:RBN RMB     2           RELATIVE BYTE # WITHIN A CLUSTER
001F 0002      1122: IOCB:HRDSI       RMB         2 POINTER TO RDSI FOR CURRENT HEADER BLOCK
0021 0001      1123: IOCB:HRSN        RMB         1 RELATIVE SECTOR NUMBER OF HEADER SECTOR
               1124: *IOCB:SEGMENTRDCN            RMB LCN:SIZE RELATIVE DATA CLUSTER FOR START OF SEGMENT
               1125: *IOCB:SEGMENTBASELCN         RMB LCN:SIZE BASE LCN OF CONTIGUOUS SEGMENT
               1126: *IOCB:SEGMENTLENGTH          RMB LCN:SIZE NUMBER OF CLUSTERS IN CONTIGUOUS SEGMENT
               1127: *IOCB:ENCRYPTIONKEY          RMB 8 HOLDS ENCRYPT/DECRYPT KEY FOR CURRENTLY OPEN FILE
  0022         1128: IOCB:SIZE        EQU         *
               1129: 
  0001         1130:          IF      SYSTEMDEFS
  0011         1131: IOCB:DISKWRITELOCKED         EQU IOCB:LOCATEDF 1 --> DISK "DEVICE" IS WRITE LOCKED
               1132:          FIN     SYSTEMDEFS
               1133:          FIN     SYSTEMDEFS!IOPKDEFS




ASM/6800 1.4A0: 0021 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 37; Form 1      *** SDOS 1.1 DEFINITIONS ***
SDOS11G.ASM
  0001         1135:          IF      SYSTEMDEFS
               1136: *
               1137: *        SDOS LOADER FORMAT:  RECORD TYPE DEFINITIONS
               1138: *
  0000         1139: LOAD:TYPE0       EQU         0 "SKIP" RECORD
  0001         1140:          IF      M6800
  0001         1141: LOAD:TYPE1       EQU         1 STARTUP RECORD
  0002         1142:          ELSEIF  M6801
               1146:          FIN
  0002         1147: LOAD:TYPE2       EQU         2 LOAD BYTES RECORD
  0003         1148: LOAD:TYPE3       EQU         3 LOAD BYTES AND STOP RECORD
  0005         1149: LOAD:ENCRYPTED   EQU         5 "THIS FILE IS ENCRYPTED" LOAD RECORD
               1150: *
               1151: *        BOOT SECTOR DISPLACEMENTS
               1152: *
  0000         1153:          ORG     0
0000 0010      1154: BOOT:IPLDATA     RMB         16 CONTAINS "JMP BOOTSIZE" OR OTHER BOOTSTRAP DATA
0010 0000      1155: BOOT:DISKINFO    RMB         0 SPACE FOR DISKINFO TABLES
  0010         1156: BOOT:DISKINFOLEN EQU         16
0010 0001      1157: BOOT:FILESYSTEMVERSION       RMB 1 SDOS FILE SYSTEM FORMAT VERSION NUMBER $AB = A.B
0011 0001      1158: BOOT:NSPC        RMB         1 NUMBER OF SECTORS PER CLUSTER
0012 0002      1159: BOOT:MINALLOC    RMB         LCN:SIZE ALLOCATION MINIMUM FOR NEW FILES
0014 0002      1160: BOOT:MIDALLOC    RMB         LCN:SIZE ALLOCATION MIN FOR FILE EXTENSION
0016 0002      1161: BOOT:MAPALGORITHM            RMB 2 LOGICAL TO PHYSICAL CONVERSION ALGORITHM #
0018 0003      1162: BOOT:CREATIONDATE            RMB 3 DD/MM/YY IN HEX
001B 0003      1163: BOOT:DIRLSN      RMB         LSN:SIZE LSN OF DIRECTORY SECTOR CONTAINING "DIRECTORY.SY
001E 0001      1164:          RMB     BOOT:DISKINFOLEN+BOOT:DISKINFO-*-1
001F 0001      1165: BOOT:CHECKSUM    RMB         1 SUCH THAT SUM OF DISKINFO BYTES (INCL CKSUM) = $FF
  0020         1166: BOOT:DISKIDSIZE  EQU         32 # BYTES RESERVED FOR ASCII DISK IDENTIFICATION
0020 0020      1167: BOOT:DISKID      RMB         BOOT:DISKIDSIZE TEXT NAME OF DISK (TRAILING BLANK PADDED)
  0040         1168: BOOT:SIZE        EQU         *




ASM/6800 1.4A0: 0020 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 38; Form 1      *** SDOS 1.1 DEFINITIONS ***
SDOS11G.ASM
               1170: *
               1171: *        DIRECTORY ENTRY DISPLACEMENTS
               1172: *
               1173: 
  0000         1174:          ORG     0
  0010         1175: DIR:NAMESIZE     EQU         16 LENGTH OF DIRECTORY NAME
0000 0010      1176: DIR:FILENAME     RMB         DIR:NAMESIZE FILENAME IN ASCII
0010 0000      1177: DIR:FCBDATA      RMB         0 FCB DATA FOR FILE MANAGEMENT STARTS HERE
0010 0002      1178: DIR:HLCN RMB     LCN:SIZE    LCN OF HEADER CLUSTER
0012 0001      1179: DIR:HCSIC        RMB         1 HEADER CLUSTER INITIALIZED COUNT
0013 0002      1180: DIR:NCLUSTERS    RMB         LCN:SIZE NUMBER OF CLUSTERS ALLOCATED TO FILE
0015 0004      1181: DIR:FILESIZE     RMB         4 LOGICAL SIZE OF FILE IN BYTES
0019 0001      1182: DIR:PROTECTION   RMB         1 PROTECTION BITS
001A 0001      1183: DIR:DAY  RMB     1           CREATION DATE OF FILE
001B 0001      1184: DIR:MONTH        RMB         1 MONTH OF FILE CREATION
001C 0001      1185: DIR:YEAR RMB     1           YEAR OF FILE CREATION
001D 0001      1186: DIR:VERSION      RMB         1 VERSION NUMBER OF FILE (0-255)
  000E         1187: DIR:FCBDATASIZE  EQU         *-DIR:FCBDATA # BYTES REQUIRED TO MANAGE FILES IN FCBS
001E 0002      1188:          RMB     32-*        SPACE FOR SLOP
  0020         1189: DIR:ENTRYSIZE    EQU         *




ASM/6800 1.4A0: 001E SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 39; Form 1      *** SDOS 1.1 DEFINITIONS ***
SDOS11G.ASM
               1191: *
               1192: *
               1193: *        DISKMAP DISPLACEMENTS
               1194: *
  0000         1195:          ORG     0
0000 0001      1196: DISKMAP:BYTE     RMB         1
  0008         1197: NMBPB    EQU     8           # MAP BITS PER BYTE
               1198: *
  0000         1199: SECTOR:BYTE      EQU         0 USED AS DISPLACEMENT ON SECTOR BYTE FETCH
               1200: *
  0003         1201: READAHEADRDSIMIN EQU         3 READ-AHEAD HAPPENS ONLY IF MORE BUFFERS AVAILABLE
  FFFF         1202: DUMMYLCN EQU     $FFFF       "NO LCN" CODE
               1203: *
               1204: *        HEADER CLUSTER DISPLACEMENTS
               1205: *
  0000         1206:          ORG     0
0000 0002      1207: HEADER:LCN       RMB         LCN:SIZE
               1208: *
  0008         1209: SERIALNUMBER:SIZE            EQU 8 SIZE OF SERIAL NUMBERS
               1210: *
               1211: *        WEIRD CHANNEL DEFINITIONS
               1212: *
  00FF         1213: LOGCHANNEL       EQU         $FF (LOG CHANNEL MUST BE LOWEST OF THESE)
  00FE         1214: SYSCHANNEL       EQU         $FE SYSTEM I/O CHANNEL (RESERVED)
               1215:          FIN     SYSTEMDEFS
  0001         1216:          IF      LISTDEFS
  0001         1218:          ELSE
 *S*           1219:          LIST    1           FORCE LISTING AGAIN
               1220:          FIN
               1221: 
  00FB         1222:         ORG     SYSCALL$
               1223:         ;JMP    SDOSINIT        SO BOOT'S EXIT SYSCALL RESETS SDOS
00FB 7E2000    1224:         JMP     SDOSINIT
               1225: *       THIS PLACE IS CHANGED TO A "JMP SYSCALLENTRY" BY INIT CODE




ASM/6800 1.4A0: 00FB SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 40; Form 1      *** SDOS 1.1 DEFINITIONS ***
SDOS11G.ASM
  2000         1227:         Org     $2000   BOOT.SYS owns $0-$1FFF when loading SDOS.SYS
               1228: 
  2000         1229: SDOSINIT        EQU     *
               1230: *
               1231: *       SET UP SDOS STACK POINTER
               1232: *       ASSERT: DP REGISTER CONTAINS ZERO HERE!
               1233: *
               1234:         ;LDX    CODE+SDOS:CONFIGURATION    GET THE STACK POINTER
2000 FECE03    1235:         LDX     CODE+SDOS:CONFIGURATION
               1236:         ;LDX    CNFG:DRIVERBASE,X
2003 EE0F      1237:         LDX     CNFG:DRIVERBASE,X
2005 35        1238:         TXS             SO (S) POINTS TO 1ST BYTE BELOW DRIVER PACKAGE
2006 BFCF22    1239:         STS     SDOSSTACK AND SAVE FOR RE-USE BY EXIT
2009 867E      1240:         LDAA      #$7E    ("JMP" OPCODE) SET UP I/O PACKAGE BASE...
200B A700      1241:         STAA      ,X      TO POINT TO SDOS ENTRY POINT
               1242:         ;LDD    #SYSCALLENTRY
200D C6B3      1243:         LDAB      #(SYSCALLENTRY)&$FF
200F 86D1      1244:         LDAA      #(SYSCALLENTRY)/256
               1245:         ;STD    1,X
2011 E702      1246:         STAB      (1)+1,X
2013 A701      1247:         STAA      1,X
2015 4F        1248:         CLRA              MAKE SURE SDOSINIT CODE IS OK!
               1249:         ;LDX    #SDOSINIT       BASE OF AREA TO CHECKSUM
2016 CE2000    1250:         LDX     #SDOSINIT
  2019         1251: SDOSINITCKSUML   ; LOOP TO CHECKSUM BYTES
2019 48        1252:         ASLA              MAKE CHECKSUM DEPEND ON ORDER OF BYTES
  0001         1253:         IF      M6800!M6801
201A A900      1254:         ADCA       0,X
201C 08        1255:         INX
  0001         1256:         ELSE
 *S*           1257:         ADCA       ,X+
               1258:         FIN
201D 8C26BD    1259:         CPX      #SDOSINITEND
2020 26F7      1260:         BNE      SDOSINITCKSUML
               1261:         ;LDX    #ERR:SELFTESTCKSUM       ASSUME WE'RE SCREWED UP!
2022 CE0430    1262:         LDX     #ERR:SELFTESTCKSUM
2025 8BFF      1263:         ADDA      #$FF
2027 01        1264:         NOP      ;ZZZ BCS       *       CHECKSUM <> 0, I'M SICK!
2028 01        1265:         NOP      
               1266:         ;JSR    SDOSINITS       CALL THE INITIALIZING SUBROUTINE




ASM/6800 1.4A0: 2029 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 41; Form 1      *** SDOS 1.1 DEFINITIONS ***
SDOS11G.ASM
2029 BD22F9    1267:         JSR     SDOSINITS
202C 25FE      1268:         BCS       *       B/ CROAKED IN CRITICAL INITIALIZATION CODE




ASM/6800 1.4A0: 202C SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 42; Form 1      *** SDOS 1.1 DEFINITIONS ***
SDOS11G.ASM
               1270: *       Now test the ROM for proper construction.
               1271: *       If SERIALNUMBERLOCATION is zero,
               1272: *       Then: Follow Restart Vector to JMP around Serial number,
               1273: *       Verify presence of ROM serial number,
               1274: *       Restart-zeros-memory when RunningEncrypted code,
               1275: *       and NMI-is-nop code when RunningEncrypted.
               1276: *       Verify that all this stuff is in ROM so it cannot be turned off.
               1277: *
               1278: *       If SERIALNUMBERLOCATION is not zero, simply check
               1279: *       that serial number (as specified by SERIALNUMBERLOCATION) is in ROM.
               1280: *       Don't check SELECTBANK or NMI routine structure or operation;
               1281: *       don't fool with the RUNNINGENCRYPTED byte.  This allows SDOS
               1282: *       to operate in mass-produced, commercial micros such as
               1283: *       the Radio Shack Color Computer, which have Mask ROMs that cannot
               1284: *       be changed by SD (Sigh!)
               1285: *
               1286: *
               1287:         ;ldx    SerialNumberLocation    get pointer to S/N in mask-rom system
202E FED845    1288:         LDX     SerialNumberLocation
2031 01        1289:         NOP      ;ZZZ beq     VerifyRestartCode0       b/ Standard ROM structure
2032 01        1290:         NOP
               1291:         ;lda    #SerialNumber:Size      = size of serial number
2033 8608      1292:         LDAA      #SerialNumber:Size
               1293:         ;jsr    WriteRandom     Verify serial number is in ROM
2035 BD217A    1294:         JSR     WriteRandom
               1295:         ;jmp    FetchSerialNumberSys    All done with ROM checking
2038 7E211E    1296:         JMP     FetchSerialNumberSys
               1297: 
  203B         1298: VerifyRestartCode0 ; Check for standard ROM structure
               1299:         ;ldx    $fffe   follow restart vector to JMP around serial number
203B FEFFFE    1300:         LDX     $fffe
203E FF2786    1301:         stx     CopyofRestartVector
               1302:         ;ldx    $fffc   Get NMI vector pointer
2041 FEFFFC    1303:         LDX     $fffc
2044 FF2784    1304:         stx     CopyofNMIVector
               1305:         ;ldx    #$fffc  make sure NMI and RESTART vectors are ROM
2047 CEFFFC    1306:         LDX     #$fffc
204A 8604      1307:         ldaa    #4      = size of region to write on
               1308:         ;jsr    WriteRandom     write all over region
204C BD217A    1309:         JSR     WriteRandom




ASM/6800 1.4A0: 204C SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 43; Form 1      *** SDOS 1.1 DEFINITIONS ***
SDOS11G.ASM
               1310:         ;ldx    $fffe   Get "trashed-if-RAM" Restart Vector
204F FEFFFE    1311:         LDX     $fffe
2052 BC2786    1312:         cpx     CopyofRestartVector Did it get trashed?
2055 2674      1313:         bne     IncorrectROM    b/ yes, so-called "ROM" is not.
2057 860B      1314:         ldaa    #8+3    verify ROM serial number is in ROM.
               1315:         ;jsr    Writerandom     over region (X) thru (X+A)
2059 BD217A    1316:         JSR     Writerandom
               1317: *
               1318: *       Verify presence of Reset code to zero memory if Encryted flag is set
               1319: *       Including checks for RunningEncrypted flag is in RAM,
               1320: *       that SelectBank subroutine actually works,
               1321: *       and that the entire thing is in ROM
               1322: *       Also verify that ROM causes NMI when encrypted to be ignored
               1323: *
               1324:         ;ldx    1,x     pointer to "Zero Memory if encrypted" code
205C EE01      1325:         LDX     1,X
               1326: *
               1327: *
205E 8618      1328:         ldaa    #DontZeroMemory-Restart = length of Zero Memory sequence
               1329:         ;jsr    writerandom     write randomly over region x thru x+a
2060 BD217A    1330:         JSR     writerandom
  0001         1331:         if      m6800!m6801
2063 A600      1332:         ldaa    0,x     Must be LDS immediate opcode
               1333:         ;cmpa   #$8E
2065 818E      1334:         CMPA      #$8E
  0001         1335:         else    (m6809)
 *S*           1336:         ;ldd    0,x     Must be LDS immediate opcode
 *S*           1337:         LDAB      (0)+1,X
 *S*           1338:         LDAA      0,X
 *S*           1339:         ;cmpd   Restart
 *S*           1340:         CMPA      Restart
 *S*           1341:         BNE      MACRO:0001
 *S*           1342:         CMPB      Restart+1
 *S*           1343: MACRO:0001
               1344:         fin
2067 2662      1345:         bne     IncorrectROM    b/ Nope.
2069 A603      1346:         ldaa    LdaEncrypted-Restart,x This must be "ldaa" extended opcode
206B E606      1347:         ldab    LdaEncrypted+3-Restart,x and this must be "Beq" opcode
               1348:         ;cmpd   #$B627
206D 81B6      1349:         CMPA      #($B627)/256




ASM/6800 1.4A0: 206F SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 44; Form 1      *** SDOS 1.1 DEFINITIONS ***
SDOS11G.ASM
206F 2602      1350:         BNE      MACRO:0002
2071 C127      1351:         CMPB      #($B627)&$FF
  2073         1352: MACRO:0002
2073 2656      1353:         bne     IncorrectROM    b/ its not...
2075 A608      1354:         ldaa    LdaEncrypted+5-Restart,x        Must be "ldaa" immediate opcode
2077 E60A      1355:         ldab    EraseBank-Restart,x and this must be "Jsr" extended opcode
               1356:         ;cmpd   #$86BD   check...
2079 8186      1357:         CMPA      #($86BD)/256
207B 2602      1358:         BNE      MACRO:0003
207D C1BD      1359:         CMPB      #($86BD)&$FF
  207F         1360: MACRO:0003
207F 264A      1361:         bne     IncorrectROM    Wrong code --> won't run program
               1362:         ;ldd    LdaEncrypted+1-Restart,x = address of RunningEncrypted
2081 E605      1363:         LDAB      (LdaEncrypted+1-Restart)+1,X
2083 A604      1364:         LDAA      LdaEncrypted+1-Restart,X
               1365:         ;std    RunningEncryptedp
2085 F72783    1366:         STAB      RunningEncryptedp+1
2088 B72782    1367:         STAA      RunningEncryptedp
208B C60B      1368:         ldab    #DontZeroMemory-EraseMem = # bytes to push before compare...
  208D         1369: VerifyRestartCode1 ; push bytes from Restart-zeros-memory into stack...
208D 09        1370:         dex     back up to previous byte
208E A618      1371:         ldaa    DontzeroMemory-Restart,x push a byte...
2090 36        1372:         psha
2091 5A        1373:         decb
2092 26F9      1374:         bne     VerifyRestartCode1 b/ didn't push enough bytes yet
               1375:         ;ldx    #EraseMem-1     = code to compare against
2094 CE216E    1376:         LDX     #EraseMem-1
2097 C60B      1377:         ldab    #DontZeroMemory-EraseMem = # bytes to compare
  2099         1378: VerifyRestartCodeloop
2099 08        1379:         inx             advance pointer to next byte to match
209A 32        1380:         pula            pop byte to compare
               1381:         ;cmpa   0,x
209B A100      1382:         CMPA      0,X
209D 262C      1383:         bne     IncorrectROM    b/ contents of Restart-zeros-mem is wrong
209F 5A        1384:         decb
20A0 26F7      1385:         bne     VerifyRestartCodeloop b/ more bytes to compare
               1386: *
               1387: *       Reset code has correct structure.
               1388: *       Verify that RunningEncrypted byte is in RAM, and is thus not always 0.
               1389: *




ASM/6800 1.4A0: 20A0 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 45; Form 1      *** SDOS 1.1 DEFINITIONS ***
SDOS11G.ASM
               1390:         ;ldx    Runningencryptedp       Verify runningencrypted is in RAM
20A2 FE2782    1391:         LDX     Runningencryptedp
               1392:         ;clr    0,x     will it store a zero?
20A5 6F00      1393:         CLR      0,X
20A7 A600      1394:         ldaa    0,x
20A9 2620      1395:         bne     IncorrectROM    b/ RunningEncrypted is not in RAM
20AB 8639      1396:         ldaa    #$39    Verify that RunningEncrypted byte is RAM
20AD A700      1397:         staa    0,x     (Store an "RTS" instruction there!)
               1398:         ;cmpa   0,x     (SELECTBANK will blow up if zeros RunningEncrypted flag
20AF A100      1399:         CMPA      0,X
20B1 2618      1400:         bne     IncorrectROM    b/ RunningEncrypted is not in RAM




ASM/6800 1.4A0: 20B1 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 46; Form 1      *** SDOS 1.1 DEFINITIONS ***
SDOS11G.ASM
               1402: *
               1403: *       Now verify that SELECTBANK works properly.
               1404: *       Note: a theif could build a phony SelectBank that checks the
               1405: *       return address to see if it points to EraseMem (or the stack pointer
               1406: *       to see if it contains the Restart value - 2), and if so,
               1407: *       simply jumps to Dontzeromemory (see ROM descripton of Encrypted files)
               1408: *       That defeats our purpose. I hope nobody figures it out.
               1409: *       We can actually verify that for this machine, the Selectbank
               1410: *       routine is correct by examining the serial number, which tells us
               1411: *       the distributor, and therefore the machine organization;
               1412: *       this in turn tells us exactly what the SelectBank code should be.
               1413: *       But we don't do that yet, because a hole in I/O package is easier to
               1414: *       take advantage of, so fixing this wouldn't really help much.
               1415: *       We could also check (??) that select bank has no instructions
               1416: *       in it that reference the stack register. That is, instructions
               1417: *       that compare the stack pointer to anything, or copy the stack
               1418: *       pointer (i.e., push it, store it, etc.) (to prevent copying it and
               1419: *       THEN comparing), and indexed references to it
               1420: *       (to prevent the return address from being examined)]. This is
               1421: *       lots tougher! But DOABLE!
               1422: *
               1423:         ;ldd    #VerifyNMIisnop where to come back to...
20B3 C6D6      1424:         LDAB      #(VerifyNMIisnop)&$FF
20B5 8620      1425:         LDAA      #(VerifyNMIisnop)/256
               1426:         ;pshd           Call SelectBank to make sure it works!
20B7 37        1427:         PSHB
20B8 36        1428:         PSHA
               1429:         ;ldd    RunningEncryptedp       With Return address = RunningEncrypted-1
20B9 F62783    1430:         LDAB      RunningEncryptedp+1
20BC B62782    1431:         LDAA      RunningEncryptedp
               1432:         ;pshd           Push "Return address" to byte on stack
20BF 37        1433:         PSHB
20C0 36        1434:         PSHA
20C1 4F        1435:         clra            Verify that Select Bank subroutine works..
               1436:         ;ldx    $fffe   Get address of RunningEncrypted routine
20C2 FEFFFE    1437:         LDX     $fffe
               1438:         ;ldx    1,x     = address of Reset-zeros-memory code
20C5 EE01      1439:         LDX     1,X
               1440:         ;ldx    EraseBank-Restart+1,x    = pointer to SelectBank routine
20C7 EE0B      1441:         LDX     EraseBank-Restart+1,X




ASM/6800 1.4A0: 20C7 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 47; Form 1      *** SDOS 1.1 DEFINITIONS ***
SDOS11G.ASM
               1442:         ;jmp    0,x     invoke it to select bank 0
20C9 6E00      1443:         JMP     0,X




ASM/6800 1.4A0: 20C9 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 48; Form 1      *** SDOS 1.1 DEFINITIONS ***
SDOS11G.ASM
  20CB         1445: IncorrectROM ; Contents of Boot ROM is incorrect
               1446:         ;ldd    #SayInvalidROM-$1275 pass control to routine to print it...
20CB C6EF      1447:         LDAB      #(SayInvalidROM-$1275)&$FF
20CD 860F      1448:         LDAA      #(SayInvalidROM-$1275)/256
               1449:         ;addd   #$1275  in a non-obvious way
20CF CB75      1450:         ADDB      #($1275)&$FF
20D1 8912      1451:         ADCA       #($1275)/256
               1452:         ;pshd           people with disassemblers will never get it
20D3 37        1453:         PSHB
20D4 36        1454:         PSHA
20D5 39        1455:         rts
               1456: *
               1457: *       Verify that NMI routine acts as NOP when RunningEncrypted
               1458: *
  20D6         1459: VerifyNMIisnop
               1460:         ;ldx    $fffc   = address of NMI code
20D6 FEFFFC    1461:         LDX     $fffc
20D9 BC2784    1462:         cpx     CopyofNMIVector  Ensure NMI vector is in ROM
20DC 26ED      1463:         bne     IncorrectROM    b/ its not.
20DE 8605      1464:         ldaa    #5      size of NMI code that we wish to test
               1465:         ;jsr    WriteRandom     all over the NMI code
20E0 BD217A    1466:         JSR     WriteRandom
20E3 A600      1467:         ldaa    0,x     this is sposd to be LDAA opcode
20E5 E603      1468:         ldab    3,x     and this is sposd to be "BNE" opcode
               1469:         ;cmpd   #$B626   check them both...
20E7 81B6      1470:         CMPA      #($B626)/256
20E9 2602      1471:         BNE      MACRO:0004
20EB C126      1472:         CMPB      #($B626)&$FF
  20ED         1473: MACRO:0004
20ED 26DC      1474:         bne     IncorrectROM    b/ NMI routine is RAM or wrong
               1475:         ;ldd    1,x     sposd to be address of RunningEncrypted
20EF E602      1476:         LDAB      (1)+1,X
20F1 A601      1477:         LDAA      1,X
               1478:         ;cmpd   RunningEncryptedp       heck it out...
20F3 B12782    1479:         CMPA      RunningEncryptedp
20F6 2603      1480:         BNE      MACRO:0005
20F8 F12783    1481:         CMPB      RunningEncryptedp+1
  20FB         1482: MACRO:0005
20FB 26CE      1483:         bne     IncorrectROM    b/ pointers are different!
20FD E604      1484:         ldab    4,x     = displacement to RTI in BNE instruction




ASM/6800 1.4A0: 20FD SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 49; Form 1      *** SDOS 1.1 DEFINITIONS ***
SDOS11G.ASM
  0001         1485:         if      m6800!m6801
20FF 17        1486:         tba
2100 47        1487:         asra            shift right, propogating the sign bit
2101 47        1488:         asra            shift right, propogating the sign bit
2102 47        1489:         asra            shift right, propogating the sign bit
2103 47        1490:         asra            shift right, propogating the sign bit
2104 47        1491:         asra            shift right, propogating the sign bit
2105 47        1492:         asra            shift right, propogating the sign bit
2106 47        1493:         asra            shift right, propogating the sign bit
               1494:         ;addd   $fffc   = address of RTI,-5
2107 FBFFFD    1495:         ADDB      $fffc+1
210A B9FFFC    1496:         ADCA       $fffc
               1497:         ;tdx
210D 9700      1498:         STAA      TEMPA
210F D701      1499:         STAB      TEMPB
2111 DE00      1500:         LDX     TEMPX
  0001         1501:         else    (m6809)
 *S*           1502:         ;leax   b,x     = address of RTI,-5
 *S*           1503:         IF      b<0
 *S*           1504:         RPT     -b
 *S*           1505:         DEX
 *S*           1506:         ELSE
 *S*           1507:         RPT     b
 *S*           1508:         INX
 *S*           1509:         FIN
               1510:         fin
               1511:         ;clr    5,x     make sure RTI is in ROM
2113 6F05      1512:         CLR      5,X
2115 A605      1513:         ldaa    5,x     should be an RTI opcode
               1514:         ;cmpa   #$3B     an RTI instruction?
2117 813B      1515:         CMPA      #$3B
               1516:         ;lbne   IncorrectROM    b/ NMI routine is incorrect!
2119 2703      1517:         BEQ      MACRO:0006
211B 7E20CB    1518:         JMP     IncorrectROM
  211E         1519: MACRO:0006
               1520: *
               1521: *       End ROM checking
               1522: *       Assert: RunningEncrypted is now set!




ASM/6800 1.4A0: 211B SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 50; Form 1      *** SDOS 1.1 DEFINITIONS ***
SDOS11G.ASM
  211E         1524: FetchSerialNumberSys ; Pass control to SERIALNUMBER.SYS
               1525:         ;LDX    #OPENSERIALNO.SYS        SEE IF SERIALNUMBER.SYS IS ENCRYPTED
211E CE2746    1526:         LDX     #OPENSERIALNO.SYS
               1527:         ;JSR    DOSYSCALL
2121 BD2194    1528:         JSR     DOSYSCALL
               1529:         ;LDX    #READSERIALNUMBERFILETYPE  GO GET 1ST LOAD RECORD OF FILE
2124 CE2773    1530:         LDX     #READSERIALNUMBERFILETYPE
               1531:         ;JSR    DOSYSCALL
2127 BD2194    1532:         JSR     DOSYSCALL
               1533:         ;LDX    #CLOSESERIALNO.SYS        LEAVE THE SLATE CLEAN, CLOSE THE FILE
212A CE2758    1534:         LDX     #CLOSESERIALNO.SYS
               1535:         ;JSR    DOSYSCALL (WE MUST DO THIS BECAUSE FIRSTCHAIN DOESN'T CALL EXITS)
212D BD2194    1536:         JSR     DOSYSCALL
               1537:         ;LDX    #ERR:NOTALOADFILE ASSUME THE WORST...
2130 CE0404    1538:         LDX     #ERR:NOTALOADFILE
               1539:         ;LDA     DECRYPTBUFFER     FETCH LOAD RECORD TYPE
2133 B6D05D    1540:         LDAA      DECRYPTBUFFER
               1541:         ;CMPA     #LOAD:ENCRYPTED   AN ENCRYPTED LOAD FILE ?
2136 8105      1542:         CMPA      #LOAD:ENCRYPTED
               1543:         ;ZZZ     BNE      INITIALIZEERR    B/ NOT ENCRYPTED, GO TELL USER AND DIE...
2138 01        1544:         NOP
2139 01        1545:         NOP
               1546:         ;LDX    #CHAINTOSERIALNO.SYS       GO GET SERIALNUMBER.SYS
213A CE2728    1547:         LDX     #CHAINTOSERIALNO.SYS
213D FFCE07    1548:         STX     CODE+SDOS:IOBLOCKPTR       SET UP SYSCALL BLOCK POINTER LIKE SYSCALLEN
               1549:         ;INC     SDOSRECURSIVECALL  LIKE SYSCALL ENTRY
2140 7CCF8D    1550:         INC      SDOSRECURSIVECALL
               1551:         ;JSR    FIRSTCHAIN        AVOID SYSCALL ENTRY SO "SAFEGAURD" NOT INVOKED FOR T
2143 BDD951    1552:         JSR     FIRSTCHAIN
2146 24FE      1553:         BCC        *       CAN'T COME BACK WITH CARRY CLEAR!
2148 8C0432    1554:         CPX      #ERR:SERIALNOWRONG       WRONG MACHINE?
214B 274D      1555:         BEQ      ERRWRONGSERIALNUMBER      B/ YES, TELL THE GUY.
               1556: *
               1557: *       If no SERIALNUMBER.SYS, or phony SERIALNUMBER.SYS,
               1558: *       then the Secret Long-term operation enabling signal...
               1559: *       will not be passed to SDOS, and so SDOS will die relatively quickly!
               1560: *
  214D         1561: INITIALIZEERR    ; PROBLEM OCCURRED AFTER INITIALIZING SDOS
214D FF275D    1562:         STX     ERRORCODE        PROBLEM WASN'T WHAT I EXPECTED
               1563:         ;LDX    #SETINITERROR   SO TELL THE OPERATOR...




ASM/6800 1.4A0: 2150 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 51; Form 1      *** SDOS 1.1 DEFINITIONS ***
SDOS11G.ASM
2150 CE275B    1564:         LDX     #SETINITERROR
               1565:         ;JSR    SYSCALLENTRY
2153 BDD1B3    1566:         JSR     SYSCALLENTRY
2156 25FE      1567:         BCS       *       B/ THIS ISN'T OUR DAY FOR THINGS TO GO RIGHT
               1568:         ;LDX    #DISPLAYINITERROR
2158 CE275F    1569:         LDX     #DISPLAYINITERROR
               1570:         ;JSR    SYSCALLENTRY
215B BDD1B3    1571:         JSR     SYSCALLENTRY
215E 25FE      1572:         BCS       *
2160 20FE      1573:         BRA       *       IT CAN'T GET HERE, BUT I'M PARANOID ANYWAY...




ASM/6800 1.4A0: 2160 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 52; Form 1      *** SDOS 1.1 DEFINITIONS ***
SDOS11G.ASM
               1575: *
               1576: *       Copy of code that is required to be in ROM Restart Routine
               1577: *
2162 8E1234    1578: Restart Lds     #$1234  Reset the stack pointer
  2165         1579: LdaEncrypted
2165 B61234    1580:         Ldaa    $1234   "RunningEncrypted"
2168 2710      1581:         Beq      DontzeroMemory  B/ don't have to erase the world
216A 8612      1582:         Ldaa    #$12    Number of banks, -1
  216C         1583: EraseBank
               1584:         ;Jsr    $1234   "JSR SelectBank" (1234 is dummy)
216C BD1234    1585:         JSR     $1234
  216F         1586: EraseMem        ; This is copy of code that is required to be in ROM Restart routine
               1587:         ;Ldx    #$BFFF   (this code zeros memory)
216F CEBFFF    1588:         LDX     #$BFFF
  2172         1589: EraseLoop
               1590:         ;Clr     0,x
2172 6F00      1591:         CLR      0,X
2174 09        1592:         Dex
2175 26FB      1593:         Bne      EraseLoop
2177 4A        1594:         Deca            (decrements Bank number)
2178 2AF2      1595:         bpl     Erasebank
  217A         1596: DontzeroMemory ; end of code required to be in ROM Restart routine




ASM/6800 1.4A0: 2178 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 53; Form 1      *** SDOS 1.1 DEFINITIONS ***
SDOS11G.ASM
               1598: *
               1599: *       WriteRandom -- Write Random numbers over the Region (X) to (X)+(A)
               1600: *       Exits with (X) = value on entry
  217A         1601: WriteRandom
217A 39        1602:         RTS      ;ZZZ stx     tempx   preserve (X)
217B 01        1603:         NOP      
  217C         1604: WriteRandomL
217C F62781    1605:         ldab    seed    generate new random number
217F 2702      1606:         beq     WriteRandom1    b/ zero seed, handle as special case
2181 2A02      1607:         bpl     WriteRandom2
  2183         1608: WriteRandom1 ;  THIS ROUTINE NEEDS WORK!!!
               1609:         ;eorb   #$81
2183 C881      1610:         EORB     #$81
  2185         1611: WriteRandom2
2185 58        1612:         aslb
2186 C900      1613:         adcb    #0
2188 F72781    1614:         stab    seed
               1615:         ;stb    ,x+     store random trash on the byte
218B E700      1616:         STAB      0,X
218D 08        1617:         INX
218E 4A        1618:         deca            down count # bytes to trash
218F 26EB      1619:         bne     WriteRandomL
               1620:         ;ldx    tempx   restore x to original value
2191 DE00      1621:         LDX     tempx
2193 39        1622:         rts




ASM/6800 1.4A0: 2193 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 54; Form 1      *** SDOS 1.1 DEFINITIONS ***
SDOS11G.ASM
  2194         1624: DoSyscall ; Execute syscall (X) and print error if failed
               1625:         ;jsr    syscallentry
2194 BDD1B3    1626:         JSR     syscallentry
2197 25B4      1627:         bcs     initializeerr
2199 39        1628:         rts
               1629: 
  219A         1630: ERRWRONGSERIALNUMBER ; print out serial no of CPU, SerialNumber.sys and die.
               1631:         ;jsr    getserialnumberaddress  get pointer to ROM serial number
219A BDDA85    1632:         JSR     getserialnumberaddress
               1633:         ;ldd    #CPUSerialNumber Where to put converted serial number
219D C651      1634:         LDAB      #(CPUSerialNumber)&$FF
219F 8622      1635:         LDAA      #(CPUSerialNumber)/256
               1636:         ;jsr    cvttohexserialno convert (X) to hexadecimal serial # string
21A1 BD22B8    1637:         JSR     cvttohexserialno
               1638:         ;ldx    #openserialno.sys
21A4 CE2746    1639:         LDX     #openserialno.sys
21A7 8DEB      1640:         bsr     dosyscall
               1641:         ;ldx    #ReadSerialNumberFromFile       into DecryptBuffer
21A9 CE2761    1642:         LDX     #ReadSerialNumberFromFile
21AC 8DE6      1643:         bsr     dosyscall
               1644:         ;ldx    #decryptbuffer
21AE CED05D    1645:         LDX     #decryptbuffer
               1646:         ;ldd    #SDOSSerialNumber where to put Ascii hex version of Serial #
21B1 C61B      1647:         LDAB      #(SDOSSerialNumber)&$FF
21B3 8622      1648:         LDAA      #(SDOSSerialNumber)/256
               1649:         ;jsr    cvttohexserialno
21B5 BD22B8    1650:         JSR     cvttohexserialno
               1651:         ;ldx    #PrintCantRun
21B8 CE21ED    1652:         LDX     #PrintCantRun
21BB 8DD7      1653:         bsr     dosyscall




ASM/6800 1.4A0: 21BB SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 55; Form 1      *** SDOS 1.1 DEFINITIONS ***
SDOS11G.ASM
  21BD         1655: WaitforMessagePrinted
21BD 862D      1656:         ldaa    #4*(CantRunMsgEnd-CantRunmsg)//10 max time to print message
  21BF         1657: delayloop ; wait for 8 * 65536 * .5 sec = .262 second
21BF 09        1658:         dex
21C0 26FD      1659:         bne     delayloop
21C2 4A        1660:         deca    down count # quarter-seconds to delay...
21C3 26FA      1661:         bne     delayloop
               1662:         ;ldx    zapmemoryloop   copy zap memory routine to $100
21C5 FE21E5    1663:         LDX     zapmemoryloop
21C8 FF0100    1664:         stx     $100
               1665:         ;ldx    zapmemoryloop+2
21CB FE21E7    1666:         LDX     zapmemoryloop+2
21CE FF0102    1667:         stx     $102
               1668:         ;ldx    zapmemoryloop+4
21D1 FE21E9    1669:         LDX     zapmemoryloop+4
21D4 FF0104    1670:         stx     $104
               1671:         ;ldx    zapmemoryloop+6
21D7 FE21EB    1672:         LDX     zapmemoryloop+6
21DA FF0106    1673:         stx     $106
               1674:         ;ldx    #$c000  erase memory (Paranoia strikes!)
21DD CEC000    1675:         LDX     #$c000
21E0 863E      1676:         ldaa    #$3E    wait for interrupt opcode
               1677:         ;jmp    $100    go destory memory
21E2 7E0100    1678:         JMP     $100
               1679: 
  21E5         1680: zapmemoryloop ; destroy memory contents
               1681:         ;sta    ,-x     this loop will stop...
21E5 09        1682:         DEX
21E6 A700      1683:         STAA      0,X
               1684:         ;sta    ,-x     when ZapLast is overwritten
21E8 09        1685:         DEX
21E9 A700      1686:         STAA      0,X
21EB 20F8      1687:         bra     zapmemoryloop




ASM/6800 1.4A0: 21EB SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 56; Form 1      *** SDOS 1.1 DEFINITIONS ***
SDOS11G.ASM
  21ED         1689: PrintCantRun ; Syscall to print "Can't run on this CPU"
21ED 0C08      1690:         fcb     Syscall:Writea,Writea:Sclen
21EF 0000      1691:         fcb     0,ignored
21F1 21F5006F  1692:         fdb     CantRunMsg,CantRunMsgEnd-CantRunMsg
               1693: 
  21F5         1694: Cantrunmsg
21F5 43616E6E  1695:         fcc     "Cannot run SDOS for CPU serial number "
  221B         1696: SDOSSerialNumber
221B 78787878  1697:         fcc     "xxxxxxxxxxxxxxxx"
222B 0D        1698:         fcb     ascii:cr
222C 6F6E2074  1699:         fcc     "on this processor (CPU serial number "
  2251         1700: CPUSerialNumber
2251 78787878  1701:         fcc     "xxxxxxxxxxxxxxxx)."
2263 0D        1702:         fcb     ascii:cr
  2264         1703: Cantrunmsgend
               1704: 
  2264         1705: SayInvalidROM ; Tell would-be theif that ROM isn't right!
               1706: *       Transfers to this location must be via RTS with registers trashed...
               1707: *       So that a breakpoint here cannot be used to trace backwards...
               1708: *       to the code jumping here
               1709:         ;ldx    #PrintInvalidROM        Let the theif know
2264 CE226D    1710:         LDX     #PrintInvalidROM
               1711:         ;jsr    dosyscall
2267 BD2194    1712:         JSR     dosyscall
               1713:         ;jmp    WaitforMessagePrinted and then erase memory
226A 7E21BD    1714:         JMP     WaitforMessagePrinted
               1715: 
  226D         1716: PrintInvalidROM ; Syscall to display "Invalid ROM"
226D 0C08      1717:         fcb     Syscall:Writea,Writea:Sclen
226F 0000      1718:         fcb     0,ignored
2271 22750043  1719:         fdb     InvalidROMMsg,InvalidROMMsgEnd-InvalidROMMSG
               1720: 
  2275         1721: InvalidROMMsg
2275 426F6F74  1722:         fcc     "Boot ROM not constructed properly for Serial Numbered SDOS Systems"
22B7 0D        1723:         fcb     ascii:cr
  22B8         1724: InvalidROMMsgEnd




ASM/6800 1.4A0: 22B7 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 57; Form 1      *** SDOS 1.1 DEFINITIONS ***
SDOS11G.ASM
               1726: *
               1727: *       CvttoHexSerialNo -- Convert (X) for 8 bytes to Ascii serial number
               1728: *       (D) points to target string buffer
               1729: *
  22B8         1730: CvttoHexSerialNo
               1731:         ;std    topointer       save pointer to target
22B8 F70001    1732:         STAB      topointer+1
22BB B70000    1733:         STAA      topointer
22BE C608      1734:         ldab    #SerialNumber:Size      # bytes to convert
  22C0         1735: CvttoHexSerialNoloop ; convert a byte
22C0 37        1736:         pshb
               1737:         ;lda    ,x+
22C1 A600      1738:         LDAA      0,X
22C3 08        1739:         INX
22C4 8D17      1740:         bsr     HextoD  Ascii of both nibbles to (D)
22C6 FF0002    1741:         stx     frompointer
               1742:         ;ldx    topointer       target buffer pointer
22C9 FE0000    1743:         LDX     topointer
               1744:         ;std    ,x++
22CC E701      1745:         STAB      (0)+1,X
22CE A700      1746:         STAA      0,X
22D0 08        1747:         INX
22D1 08        1748:         INX
22D2 FF0000    1749:         stx     topointer
               1750:         ;ldx    frompointer
22D5 FE0002    1751:         LDX     frompointer
22D8 33        1752:         pulb
22D9 5A        1753:         decb
22DA 26E4      1754:         bne     CvttoHexSerialNoLoop b/ more byte to convert
22DC 39        1755:         rts
               1756: 
  22DD         1757: Hextod ; Convert (A) to Ascii Hex in (a,b)
22DD 16        1758:         tab     duplicate byte so we can split into nibbles
22DE 44        1759:         lsra    move upper nibble to lower part of (a)
22DF 44        1760:         lsra
22E0 44        1761:         lsra
22E1 44        1762:         lsra
22E2 C40F      1763:         andb    #$F     extract lower nibble
22E4 8B30      1764:         adda    #'0     convert (a) to hex digit
               1765:         ;cmpa   #'9     valid digit?




ASM/6800 1.4A0: 22E6 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 58; Form 1      *** SDOS 1.1 DEFINITIONS ***
SDOS11G.ASM
22E6 8139      1766:         CMPA      #'9
22E8 2302      1767:         bls     Hextod1 b/ yep.
22EA 8B07      1768:         adda    #'A-10-'0        no, convert to A-F hex.
  22EC         1769: Hextod1
22EC CB30      1770:         addb    #'0     convert (b) to hex ascii
               1771:         ;cmpb   #'9     valid digit?
22EE C139      1772:         CMPB      #'9
22F0 2302      1773:         bls     Hextod2 b/ yep.
22F2 CB07      1774:         addb    #'A-10-'0        no, convert to A-F hex
  22F4         1775: Hextod2
22F4 39        1776:         rts
               1777: 
22F5 00        1778: SDOSINITCKSUM    FCB       CHANGED   CHECKSUM OVER SDOSINIT CODE
               1779: *
               1780: *       SDOSINITCKSUM has a value such that the "sum" of all bytes...
               1781: *       between SDOSINIT and SDOSINITEND is zero.
               1782: *       Note that SDOSINITCKSUM is part of that sum.
  22F6         1783: SDOSINITERRED   EQU     *
               1784:         ;JMP    ERRORINX
22F6 7ED201    1785:         JMP     ERRORINX
               1786: 
  22F9         1787: SDOSINITS       ; INITIALIZING SUBROUTINE
               1788: *
               1789: *       WITH INTERRUPTS DISABLED, GO RESET ALL THE DEVICE DRIVERS
               1790: *
               1791:         ;LDX    CODE+SDOS:CONFIGURATION    SCAN THROUGH THE DEVICE LIST
22F9 FECE03    1792:         LDX     CODE+SDOS:CONFIGURATION
               1793:         ;LDX    CNFG:DEVICEDCBS,X   AND RESET EACH DEVICE FOUND IN THE LIST
22FC EE02      1794:         LDX     CNFG:DEVICEDCBS,X
22FE DF06      1795:         STX     DCBPOINTER        SAVE POINTER TO DCB LIST
               1796:         ;LDX    DCB:DRIVER,X      SAVE POINTER TO CONSOLE DRIVER FOR USE BY READA
2300 EE07      1797:         LDX     DCB:DRIVER,X
2302 FFCE52    1798:         STX     CONSOLEDRIVER
               1799:         ;LDX    DCBPOINTER        FIND OUT LENGTH OF CONSOLE DEVICE NAME
2305 DE06      1800:         LDX     DCBPOINTER
               1801:         ;LDX    DCB:NAME,X
2307 EE03      1802:         LDX     DCB:NAME,X
2309 FFCF96    1803:         STX     CONSOLENAMEPTR    SAVE ADDRESS OF CONSOLE NAME
  230C         1804: SDOSINIT0       ; LOOP TO COMPUTE LENGTH OF CONSOLE DEVICE NAME
230C 08        1805:         INX             BUMP POINTER TO CONSOLE DEVICE NAME PAST NAME CHARACTER




ASM/6800 1.4A0: 230C SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 59; Form 1      *** SDOS 1.1 DEFINITIONS ***
SDOS11G.ASM
               1806:         ;INC     CONSOLENAMELEN+1  BUMP # CHARACTERS IN CONSOLE NAME LENGTH
230D 7CCF99    1807:         INC      CONSOLENAMELEN+1
2310 A600      1808:         LDAA      ,X      LOOK AT BYTE OF CONSOLE NAME
2312 26F8      1809:         BNE      SDOSINIT0       B/ NOT END OF CONSOLE DEVICE NAME
2314 2002      1810:         BRA       SDOSINIT1A       GO RESET THE DEVICES IN THE LIST
               1811: 
  2316         1812: SDOSINIT1       ; FIND END OF NEXT DEVICE NAME
2316 DF06      1813:         STX     DCBPOINTER        SAVE POINTER TO REST OF DEVICE NAME LIST
  2318         1814: SDOSINIT1A       EQU     *
               1815:         ;LDX    DCBPOINTER        RESET A DEVICE
2318 DE06      1816:         LDX     DCBPOINTER
               1817:         ;LDX    DCB:DRIVER,X      WITH INTERRUPTS OFF....
231A EE07      1818:         LDX     DCB:DRIVER,X
231C FFCE54    1819:         STX     DRIVERVPOINTER  AND INTERRUPT SYSTEM NOT READY!
               1820:         ;JSR    [DRIVER:RESET,X]
231F EE16      1821:         LDX     DRIVER:RESET,X
2321 AD00      1822:         JSR     0,X
2323 25D1      1823:         BCS       SDOSINITERRED   B/ DRIVER HAD AN ERROR!
               1824:         ;LDX    DCBPOINTER        GET ADDRESS OF REST OF DEVICE NAME LIST
2325 DE06      1825:         LDX     DCBPOINTER
               1826:         ;LDX    DCB:NEXTDCB,X       END OF LIST ?
2327 EE05      1827:         LDX     DCB:NEXTDCB,X
2329 26EB      1828:         BNE      SDOSINIT1       B/ NO, GO RESET THE NEXT DEVICE
               1829:         ;JSR    [DRIVER:RESET+DISKFILEDRIVER]   RESET THE DISK FILE DRIVER
232B FEDCCC    1830:         LDX     DRIVER:RESET+DISKFILEDRIVER
232E AD00      1831:         JSR     0,X
               1832:         ;JSR    [DRIVER:RESET+DISKDEVICEDRIVER]  RESET THE DISK DEVICE DRIVER
2330 FEDCAB    1833:         LDX     DRIVER:RESET+DISKDEVICEDRIVER
2333 AD00      1834:         JSR     0,X
               1835: *** NOTE: THE DISK DRIVERS ARE RESET LAST SO THAT THE INIT ROUTINES...
               1836: *** FOR ALL THE OTHER DEVICES CAN BE ASSEMBLED AND EXECUTED IN THE
               1837: *** DISK BUFFER AREA (SETTING UP THE DISK DRIVERS DESTROYS THE CONTENTS OF THE BUFFER 




ASM/6800 1.4A0: 2333 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 60; Form 1      *** SDOS 1.1 DEFINITIONS ***
SDOS11G.ASM
               1839: *
               1840: *       SET UP INTERRUPT SYSTEM
               1841: *
               1842:         ;LDX    CODE+SDOS:CONFIGURATION    SET UP THE INTERRUPT STACK POINTER...
2335 FECE03    1843:         LDX     CODE+SDOS:CONFIGURATION
               1844:         ;LDX    CNFG:INTERRUPTSTACK,X      SO SCHEDULER CAN GRAB ITS VALUE QUICKLY
2338 EE1C      1845:         LDX     CNFG:INTERRUPTSTACK,X
233A FFCF86    1846:         STX     INTERRUPTSTACK
               1847:         ;LDX    CODE+SDOS:CONFIGURATION    MAKE A "JMP IOINTPOLL"...
233D FECE03    1848:         LDX     CODE+SDOS:CONFIGURATION
               1849:         ;LDX    CNFG:IOINTPOLL,X SO WE CAN GET TO DEVICE POLL ROUTINE QUICKLY
2340 EE1E      1850:         LDX     CNFG:IOINTPOLL,X
2342 FFCF89    1851:         STX     JMPIOINT+1      THE "JMP" PART IS ASSEMBLED IN, ALREADY
               1852:         ;LDX    CODE+SDOS:CONFIGURATION    SET UP "INTDISABLE"
2345 FECE03    1853:         LDX     CODE+SDOS:CONFIGURATION
2348 A613      1854:         LDAA      CNFG:INTDISABLE,X  GRAB THE 3 BYTES FROM THE CONFIGURATION TABLE
               1855:         ;LDX    CNFG:INTDISABLE+1,X
234A EE14      1856:         LDX     CNFG:INTDISABLE+1,X
234C B7CF7D    1857:         STAA      INTDISABLE        AND STORE THEM IN A MORE CONVENIENT PLACE
234F FFCF7E    1858:         STX     INTDISABLE+1
               1859:         ;LDX    CODE+SDOS:CONFIGURATION    SET UP "INTENABLE"
2352 FECE03    1860:         LDX     CODE+SDOS:CONFIGURATION
2355 A616      1861:         LDAA      CNFG:INTENABLE,X
               1862:         ;LDX    CNFG:INTENABLE+1,X
2357 EE17      1863:         LDX     CNFG:INTENABLE+1,X
2359 B7CF80    1864:         STAA      INTENABLE
235C FFCF81    1865:         STX     INTENABLE+1
               1866:         ;LDX    CODE+SDOS:CONFIGURATION    SET UP "INTRTI"
235F FECE03    1867:         LDX     CODE+SDOS:CONFIGURATION
2362 A619      1868:         LDAA      CNFG:INTRTI,X
               1869:         ;LDX    CNFG:INTRTI+1,X
2364 EE1A      1870:         LDX     CNFG:INTRTI+1,X
2366 B7CF83    1871:         STAA      INTRTI
2369 FFCF84    1872:         STX     INTRTI+1
               1873:         ;LDX    CODE+SDOS:CONFIGURATION    SET UP NUMBER OF TIME OUT BLOCKS
236C FECE03    1874:         LDX     CODE+SDOS:CONFIGURATION
               1875:         ;LDD    CNFG:TIMEOUTLIST,X       GRAB POINTER TO LIST OF TIMEOUT BLOCKS
236F E623      1876:         LDAB      (CNFG:TIMEOUTLIST)+1,X
2371 A622      1877:         LDAA      CNFG:TIMEOUTLIST,X
               1878:         ;STD    DELAYBLOCK+TIMEOUT:LINK    ATTACH TO DELAYBLOCK TIMEOUT BLOCK




ASM/6800 1.4A0: 2373 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 61; Form 1      *** SDOS 1.1 DEFINITIONS ***
SDOS11G.ASM
2373 F7CE5F    1879:         STAB      DELAYBLOCK+TIMEOUT:LINK+1
2376 B7CE5E    1880:         STAA      DELAYBLOCK+TIMEOUT:LINK
               1881:         ;LDD    #DELAYBLOCK        MAKE CONFIGURATION TABLE POINT TO DELAY BLOCK
2379 C65E      1882:         LDAB      #(DELAYBLOCK)&$FF
237B 86CE      1883:         LDAA      #(DELAYBLOCK)/256
               1884:         ;STD    CNFG:TIMEOUTLIST,X       ASSERT: # TIMEOUT BLOCKS NOW >= 1!
237D E723      1885:         STAB      (CNFG:TIMEOUTLIST)+1,X
237F A722      1886:         STAA      CNFG:TIMEOUTLIST,X
               1887:         ;LDX    CNFG:TIMEOUTLIST,X       COUNT NUMBER OF TIMEOUT BLOCKS
2381 EE22      1888:         LDX     CNFG:TIMEOUTLIST,X
               1889: 
  2383         1890: SDOSINIT1L      ; COUNT # TIMEOUT BLOCKS
               1891:         ;INC     NTIMEOUTBLKS     COUNT A TIMEOUT BLOCK
2383 7CCE5A    1892:         INC      NTIMEOUTBLKS
               1893:         ;LDX    TIMEOUT:LINK,X  FIND ADDRESS OF NEXT TIMEOUT BLOCK
2386 EE00      1894:         LDX     TIMEOUT:LINK,X
2388 26F9      1895:         BNE      SDOSINIT1L      B/ ANOTHER TIMEOUT BLOCK FOUND!
  238A         1896: SDOSINIT1B       EQU     *




ASM/6800 1.4A0: 2388 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 62; Form 1      *** SDOS 1.1 DEFINITIONS ***
SDOS11G.ASM
               1898: *
               1899: *       SET UP TASKS
               1900: *
               1901: *       ADD TIMEOUT TASK AND USER TASK TO END OF TASK QUEUE
               1902: *
               1903:         ;LDD    CODE+SDOS:CONFIGURATION    COMPUTE POINTER TO "CNFG:TASKQUEUE"
238A F6CE04    1904:         LDAB      CODE+SDOS:CONFIGURATION+1
238D B6CE03    1905:         LDAA      CODE+SDOS:CONFIGURATION
               1906:         ;ADDD    #CNFG:TASKQUEUE
2390 CB20      1907:         ADDB      #(CNFG:TASKQUEUE)&$FF
2392 8900      1908:         ADCA       #(CNFG:TASKQUEUE)/256
               1909:         ;TDX
2394 9700      1910:         STAA      TEMPA
2396 D701      1911:         STAB      TEMPB
2398 DE00      1912:         LDX     TEMPX
  239A         1913: SDOSINITTCB1      ; FIND END OF TASK QUEUE SO WE CAN TACK ON SDOS TASKS
239A DF00      1914:         STX     TEMPX   IN CASE THIS TCB IS THE LAST IN THE QUEUE
               1915:         ;LDX    TCB:LNK,X FOLLOW LINK TO NEXT TCB
239C EE00      1916:         LDX     TCB:LNK,X
239E 26FA      1917:         BNE      SDOSINITTCB1      B/ NO, CHARGE!
               1918:         ;LDX    TEMPX   THIS GUY IS LAST IN QUEUE
23A0 DE00      1919:         LDX     TEMPX
               1920:         ;LDD    #TIMEOUTTASKTCB    MAKE HIM POINT TO SDOS'S TWO TASKS
23A2 C67A      1921:         LDAB      #(TIMEOUTTASKTCB)&$FF
23A4 86CE      1922:         LDAA      #(TIMEOUTTASKTCB)/256
               1923:         ;STD    TCB:LNK,X
23A6 E701      1924:         STAB      (TCB:LNK)+1,X
23A8 A700      1925:         STAA      TCB:LNK,X
               1926:         ;LDX    CODE+SDOS:CONFIGURATION    INITIALIZE THE TASK CONTROL BLOCKS
23AA FECE03    1927:         LDX     CODE+SDOS:CONFIGURATION
               1928:         ;LDX    CNFG:TASKQUEUE,X  GET POINTER TO FIRST TCB IN LIST
23AD EE20      1929:         LDX     CNFG:TASKQUEUE,X
  23AF         1930: SDOSINITTCBL      ; MARK TASK AS "EXECUTING"
               1931:         ;LDD    #EXECUTING
23AF C63E      1932:         LDAB      #(EXECUTING)&$FF
23B1 86FE      1933:         LDAA      #(EXECUTING)/256
               1934:         ;STD    TCB:COND,X
23B3 E705      1935:         STAB      (TCB:COND)+1,X
23B5 A704      1936:         STAA      TCB:COND,X
               1937:         ;LDX    TCB:LNK,X FIND NEXT TASK




ASM/6800 1.4A0: 23B7 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 63; Form 1      *** SDOS 1.1 DEFINITIONS ***
SDOS11G.ASM
23B7 EE00      1938:         LDX     TCB:LNK,X
23B9 26F4      1939:         BNE      SDOSINITTCBL      B/ MORE TASKS TO MARK
               1940:         ;LDX    CODE+SDOS:CONFIGURATION    LET I/O PACKAGE SET UP ITS END OF INTERRUPT
23BB FECE03    1941:         LDX     CODE+SDOS:CONFIGURATION
               1942:         ;JSR    [CNFG:INTSETUP,X]        THIS MUST BE LAST SO I/O PACK CAN TACK...
23BE EE11      1943:         LDX     CNFG:INTSETUP,X
23C0 AD00      1944:         JSR     0,X
               1945: *       LOW PRIORITY TIMEOUT TASK ON TASK QUEUE
               1946:         ;LDX    #FORCESCHEDULE    TRIGGER INTERRRUPT
23C2 CEFDCD    1947:         LDX     #FORCESCHEDULE
               1948:         ;JSR    CODE+SDOS:STARTIO TO CAUSE ALL TASKS TO START RUNNING
23C5 BDCE24    1949:         JSR     CODE+SDOS:STARTIO
               1950: *       INTERRUPTS ARE ON WHEN WE RETURN!
               1951: *
               1952: *       RESET THE I/O CONTROL BLOCKS
               1953: *
               1954:         ;JSR    INITIOCBS SO THEY ALL APPEAR TO BE CLOSED
23C8 BD2686    1955:         JSR     INITIOCBS
               1956: *
               1957: *       MAKE THE LOG AND THE SYS CHANNEL FREE
               1958: *
               1959:         ;LDX    #0
23CB CE0000    1960:         LDX     #0
23CE FFCF3E    1961:         STX     LOGIOCB+IOCB:DRIVER
23D1 FFCF60    1962:         STX     SYSIOCB+IOCB:DRIVER




ASM/6800 1.4A0: 23D1 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 64; Form 1      *** SDOS 1.1 DEFINITIONS ***
SDOS11G.ASM
               1964: *
               1965: *       DOUBLE-CHECK CHECKSUM COMPUTED BY SDOSINIT
               1966: *       IF WRONG, ASSUME WE'VE BEEN TAMPERED WITH, AND GET EVEN!
               1967: *
               1968:         ;LDX    #SDOSINIT-26    NO POINT IN MAKING THIS OBVIOUS...
23D4 CE1FE6    1969:         LDX     #SDOSINIT-26
23D7 5F        1970:         CLRB              ZERO A CHECKSUM REGISTER
  23D8         1971: SDOSINITDBLCHECKL
23D8 08        1972:         INX             DO THIS OUT OF ORDER TO MAKE CODE HARD TO RECOGNIZE
23D9 58        1973:         ASLB
23DA C900      1974:         ADCB       #0      DON'T DO "ADCB n,X" CAUSE THAT'S EASY TO FIND...
23DC EB19      1975:         ADDB      25,X    AND THIS HAS THE SAME EFFECT ANYWAY!
23DE 8C26A3    1976:         CPX      #SDOSINITEND-25-1       DONE CHECKSUMMING?
23E1 26F5      1977:         BNE      SDOSINITDBLCHECKL  B/ NO
23E3 9F00      1978:         STS     TEMPX   NOW ADD (B) TO (S)...
23E5 DB01      1979:         ADDB      TEMPX+1 (S) WON'T CHANGE IF CHECKSUM IS CORRECT (ZERO!)
               1980:         ;STB     TEMPX+1 OTHERWISE, IT WILL CHANGE BY SOME AMOUNT...
23E7 D701      1981:         STAB      TEMPX+1
23E9 01        1982:         NOP      ;ZZZ LDS     TEMPX   THAT WILL CAUSE "RTS" BELOW TO BLOW UP!
23EA 01        1983:         NOP
               1984:         ;JSR    OPENCONSOLE      OPEN UP CHANNEL 0 TO THE CONSOLE
23EB BDD89A    1985:         JSR     OPENCONSOLE
               1986:         ;LDX    #EXITCOPYRIGHT   THEN SAY "HELLO!"
23EE CE2707    1987:         LDX     #EXITCOPYRIGHT
               1988:         ;JSR    SYSCALLENTRY
23F1 BDD1B3    1989:         JSR     SYSCALLENTRY
               1990: *
               1991: *       PRINT DISK IDENTIFICATION
               1992: *
               1993:         ;LDX    DEFAULTDISKDCB     SET UP TO READ LSN 0 ON DRIVE 0
23F4 FECE4C    1994:         LDX     DEFAULTDISKDCB
23F7 FFCF12    1995:         STX     SYSSECTORDB+SECTORDB:DISKINFO
               1996:         ;LDX    #SYSSECTORDB      MAKE A ZEROED LSN
23FA CECF12    1997:         LDX     #SYSSECTORDB
               1998:         ;CLR     SECTORDB:LSN,X
23FD 6F02      1999:         CLR      SECTORDB:LSN,X
               2000:         ;CLR     SECTORDB:LSN+1,X
23FF 6F03      2001:         CLR      SECTORDB:LSN+1,X
               2002:         ;CLR     SECTORDB:LSN+2,X
2401 6F04      2003:         CLR      SECTORDB:LSN+2,X




ASM/6800 1.4A0: 2401 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 65; Form 1      *** SDOS 1.1 DEFINITIONS ***
SDOS11G.ASM
               2004:         ;JSR    READSECTOR        GO READ SECTOR ZERO
2403 BDF8F5    2005:         JSR     READSECTOR
               2006:         ;LDX    RDSI:SECTORBASE,X  GET BASE OF SECTOR BUFFER
2406 EE05      2007:         LDX     RDSI:SECTORBASE,X
2408 8620      2008:         LDAA      #BOOT:DISKID     FIND BEGINNING OF DISK ID MESSAGE
  240A         2009: SDOSINIT2       EQU     *
240A 08        2010:         INX
240B 4A        2011:         DECA
240C 26FC      2012:         BNE      SDOSINIT2       = BASE OF SECTOR + BOOT:DISKID
240E FF2713    2013:         STX     SDOSINITID+WRITEA:BUFFERP SAVE POINTER TO STRING
               2014:         ;JSR    WAITRDSI ...
2411 BDFAA3    2015:         JSR     WAITRDSI
               2016:         ;LDX    RDSI:SECTORBASE,X  GET POINTER TO SECTOR ZERO BUFFER
2414 EE05      2017:         LDX     RDSI:SECTORBASE,X
2416 A619      2018:         LDAA      BOOT:CREATIONDATE+1,X       DISPLAY CREATION DATE
               2019:         ;JSR    BCDTOASCII  CONVERT BCD DIGITS TO ASCII IN (A,B)
2418 BD2448    2020:         JSR     BCDTOASCII
               2021:         ;STD    INITDATE STORE DAY INTO INITIALIZED DATE STRING
241B F72720    2022:         STAB      INITDATE+1
241E B7271F    2023:         STAA      INITDATE
2421 A61A      2024:         LDAA      BOOT:CREATIONDATE+2,X       CONVERT YEAR
               2025:         ;JSR    BCDTOASCII
2423 BD2448    2026:         JSR     BCDTOASCII
               2027:         ;STD    INITDATE+6
2426 F72726    2028:         STAB      INITDATE+6+1
2429 B72725    2029:         STAA      INITDATE+6
242C A618      2030:         LDAA      BOOT:CREATIONDATE,X GET BCD EQUIVALENT OF CREATION DATE
               2031:         ;JSR    BCDTOASCII
242E BD2448    2032:         JSR     BCDTOASCII
               2033:         ;STD    INITDATE+3
2431 F72723    2034:         STAB      INITDATE+3+1
2434 B72722    2035:         STAA      INITDATE+3
               2036:         ;LDX    #DISPLAYINITDATE
2437 CE2717    2037:         LDX     #DISPLAYINITDATE
               2038:         ;JSR    SYSCALLENTRY      DISPLAY DATE THE DISK WAS INITIALIZED
243A BDD1B3    2039:         JSR     SYSCALLENTRY
               2040:         ;LDX    #SDOSINITID     AND GO PRINT THE DISK ID
243D CE270F    2041:         LDX     #SDOSINITID
               2042:         ;JSR    SYSCALLENTRY
2440 BDD1B3    2043:         JSR     SYSCALLENTRY




ASM/6800 1.4A0: 2440 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 66; Form 1      *** SDOS 1.1 DEFINITIONS ***
SDOS11G.ASM
               2044:         ;JSR    EXITCR   AND PRINT A TERMINATING "CR"
2443 BDD87E    2045:         JSR     EXITCR
2446 0C39      2046:         OKRTS           ALL DONE!




ASM/6800 1.4A0: 2446 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 67; Form 1      *** SDOS 1.1 DEFINITIONS ***
SDOS11G.ASM
               2048: *
               2049: *       BCDTOASCII -- CONVERT BCD DIGIT PAIR IN (A)...
               2050: *               INTO ITS CONSTITUENT ASCII DIGITS IN (A,B)
               2051: *
  2448         2052: BCDTOASCII  EQU     *
2448 16        2053:         TAB
2449 44        2054:         LSRA
244A 44        2055:         LSRA
244B 44        2056:         LSRA
244C 44        2057:         LSRA
244D C40F      2058:         ANDB      #$F
               2059:         ;ADDD    #'0*256+'0
244F CB30      2060:         ADDB      #('0*256+'0)&$FF
2451 8930      2061:         ADCA       #('0*256+'0)/256
2453 39        2062:         RTS
               2063: *
               2064: *       DSKFRESET -- DISK FILE DRIVER RESET
               2065: *
  2454         2066: DSKFRESET       EQU     *
               2067:         ;JSR    INITDISKINFO    SET UP ALL THE TABLES
2454 BD25C4    2068:         JSR     INITDISKINFO
               2069:         ;JSR    INITFCBS
2457 BD2593    2070:         JSR     INITFCBS
               2071:         ;JSR    INITRDSI
245A BD245F    2072:         JSR     INITRDSI
245D 0C39      2073:         OKRTS




ASM/6800 1.4A0: 245D SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 68; Form 1      *** SDOS 1.1 DEFINITIONS ***
SDOS11G.ASM
               2075: *
               2076: *       INITRDSI -- SETS UP RESIDENT DISK SECTOR INFO TABLE
               2077: *               ALLOCATES FROM CNFG:FREESPACE IN FOLLOWING WAY
               2078: *               1)  FIND FIRST WORD IN FREESPACE WHICH IS ON A SECTOR BOUNDARY
               2079: *               2)  COUNT # RDSIS ALLOCATABLE BELOW THAT
               2080: *               3)  COUNT # SECTOR BUFFERS ALLOCATABLE FROM FREESPACE REMAINING
               2081: *               4)  COUNT # RDSIS ALLOCATABLE FROM REMAINDER
               2082: *               5)  IF # RDSIS<# SECTOR BUFFS, USE A SECTOR BUFF FOR MORE RDSIS
               2083: *               6)  LOOP ON 5 UNTIL # RDSIS>=#SECTOR BUFFERS
               2084: *               7)  ALLOCATE RDSIS
               2085: *               8)  ALLOCATE SECTORS AS A LUMP
               2086: *               9)  ALLOCATE REST OF RDSIS
               2087: *               10) DISTRIBUTE SECTOR BUFFERS TO RDSIS
               2088: *               11) DONE
               2089: *
  245F         2090: INITRDSI        EQU     *
               2091: * 1)  FIND FIRST WORD IN FREESPACE THAT CAN BE A SECTOR BOUNDARY
               2092:         ;LDX    CODE+SDOS:CONFIGURATION
245F FECE03    2093:         LDX     CODE+SDOS:CONFIGURATION
               2094:         ;LDD    CNFG:DSKBUFFERPOOL,X      FIND 1ST POWER OF 2 BOUNDARY
2462 E608      2095:         LDAB      (CNFG:DSKBUFFERPOOL)+1,X
2464 A607      2096:         LDAA      CNFG:DSKBUFFERPOOL,X
               2097: *       WHICH IS A MULTIPLE OF CNFG:SECSIZE
               2098:         ;ADDD    MAXSECTORSIZE
2466 FBCF0F    2099:         ADDB      MAXSECTORSIZE+1
2469 B9CF0E    2100:         ADCA       MAXSECTORSIZE
               2101:         ;SUBD    #1      ROUND UP TO NEXT BOUNDARY
246C C001      2102:         SUBB      #(1)&$FF
246E 8200      2103:         SBCA       #(1)/256
               2104:         ;PSHD           SAVE POINTER INTO 1ST SECTOR BUFFER
2470 37        2105:         PSHB
2471 36        2106:         PSHA
               2107:         ;LDD    MAXSECTORSIZE     MAKE A BOUNDARY MASK
2472 F6CF0F    2108:         LDAB      MAXSECTORSIZE+1
2475 B6CF0E    2109:         LDAA      MAXSECTORSIZE
               2110:         ;SUBD    #1
2478 C001      2111:         SUBB      #(1)&$FF
247A 8200      2112:         SBCA       #(1)/256
               2113:         ;COMD
247C 53        2114:         COMB




ASM/6800 1.4A0: 247D SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 69; Form 1      *** SDOS 1.1 DEFINITIONS ***
SDOS11G.ASM
247D 43        2115:         COMA
               2116:         ;ANDD    0,S     MASK TO OBTAIN FIRST SECTOR BOUNDARY
247E 30        2117:         TSX
247F E401      2118:         ANDB      (0)+1,X
2481 A400      2119:         ANDA      0,X
               2120:         ;LEAS    2,S
  0000         2121:         IF      2<0
 *S*           2122:         RPT     -2
 *S*           2123:         DES
               2124:         ELSE
  0002         2125:         RPT     2
2483 31        2126:         INS
               2127:         FIN
               2128:         ;STD    FIRSTBUF
2485 F72700    2129:         STAB      FIRSTBUF+1
2488 B726FF    2130:         STAA      FIRSTBUF
               2131: * 2) COUNT # RDSI'S ALLOCATABLE
               2132:         ;LDX    CODE+SDOS:CONFIGURATION
248B FECE03    2133:         LDX     CODE+SDOS:CONFIGURATION
               2134:         ;SUBD    CNFG:DSKBUFFERPOOL,X      COMPUTE # WORDS BETWEEN
248E E008      2135:         SUBB      (CNFG:DSKBUFFERPOOL)+1,X
2490 A207      2136:         SBCA       CNFG:DSKBUFFERPOOL,X
               2137:         ;CMPD    CNFG:DSKPOOLSIZE,X       FIRST WORD OF FS AND FIRSTBUF
2492 A109      2138:         CMPA      CNFG:DSKPOOLSIZE,X
2494 2602      2139:         BNE      MACRO:0007
2496 E10A      2140:         CMPB      (CNFG:DSKPOOLSIZE)+1,X
  2498         2141: MACRO:0007
2498 2260      2142:         BHI      ERRNOTENOUGHPOOL        B/ >, ILLEGAL SPACE ALLOCATION
  249A         2143: INITRDSI1       EQU     *
               2144:         ;STD    FIRSTSEGSIZE    SAVE 1ST SEGMENT SIZE
249A F72702    2145:         STAB      FIRSTSEGSIZE+1
249D B72701    2146:         STAA      FIRSTSEGSIZE
               2147:         ;CLR     NRDSIS  NRDSIS := 0
24A0 7FCF09    2148:         CLR      NRDSIS
  24A3         2149: INITRDSI2       EQU     *
               2150:         ;INC     NRDSIS  ROOM FOR ONE MORE RDSI
24A3 7CCF09    2151:         INC      NRDSIS
24A6 2706      2152:         BEQ      INITRDSI2A       B/ QUIT IF 255 RDSI'S AVAILABLE
               2153:         ;SUBD    #RDSI:SIZE
24A8 C014      2154:         SUBB      #(RDSI:SIZE)&$FF




ASM/6800 1.4A0: 24AA SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 70; Form 1      *** SDOS 1.1 DEFINITIONS ***
SDOS11G.ASM
24AA 8200      2155:         SBCA       #(RDSI:SIZE)/256
24AC 24F5      2156:         BCC        INITRDSI2       B/ MORE SPACE AVAILABLE
  24AE         2157: INITRDSI2A       EQU     *
               2158:         ;DEC     NRDSIS  = ACTUAL # RDSI'S AVAILABLE SO FAR
24AE 7ACF09    2159:         DEC      NRDSIS
               2160: * 3) COUNT # POTENTIAL SECTOR BUFFERS
               2161:         ;LDX    CODE+SDOS:CONFIGURATION
24B1 FECE03    2162:         LDX     CODE+SDOS:CONFIGURATION
               2163:         ;LDD    CNFG:DSKPOOLSIZE,X       ALL OF FREE SPACE - SIZE OF 1ST SEGMENT
24B4 E60A      2164:         LDAB      (CNFG:DSKPOOLSIZE)+1,X
24B6 A609      2165:         LDAA      CNFG:DSKPOOLSIZE,X
               2166:         ;SUBD    FIRSTSEGSIZE
24B8 F02702    2167:         SUBB      FIRSTSEGSIZE+1
24BB B22701    2168:         SBCA       FIRSTSEGSIZE
               2169:         ;CLR     NBUFFERS ASSUME 0 SECTOR BUFFERS AVAILABLE
24BE 7F2703    2170:         CLR      NBUFFERS
  24C1         2171: INITRDSI3       EQU     *
               2172:         ;INC     NBUFFERS COUNT A BUFFER
24C1 7C2703    2173:         INC      NBUFFERS
24C4 2708      2174:         BEQ      INITRDSI3A       B/ QUIT IF 255 BUFFERS AVAILABLE
               2175:         ;SUBD    MAXSECTORSIZE
24C6 F0CF0F    2176:         SUBB      MAXSECTORSIZE+1
24C9 B2CF0E    2177:         SBCA       MAXSECTORSIZE
24CC 24F3      2178:         BCC        INITRDSI3       B/ MORE ROOM STILL
  24CE         2179: INITRDSI3A       EQU     *
               2180:         ;DEC     NBUFFERS = ACTUAL NUMBER OF BUFFERS AVAILABLE
24CE 7A2703    2181:         DEC      NBUFFERS
24D1 2727      2182:         BEQ      ERRNOTENOUGHPOOL        B/ NO BUFFERS AVAILABLE!
               2183: * 4) COUNT # RDSI'S AVAILABLE FROM REMAINDER
  24D3         2184: INITRDSI4L      EQU     *
               2185:         ;ADDD    MAXSECTORSIZE
24D3 FBCF0F    2186:         ADDB      MAXSECTORSIZE+1
24D6 B9CF0E    2187:         ADCA       MAXSECTORSIZE
  24D9         2188: INITRDSI4       EQU     *
               2189:         ;INC     NRDSIS  BUMP # RDSI'S AVAILABLE
24D9 7CCF09    2190:         INC      NRDSIS
24DC 270A      2191:         BEQ      INITRDSI4A       B/ AT LEAST 255 AVAILABLE
               2192:         ;SUBD    #RDSI:SIZE
24DE C014      2193:         SUBB      #(RDSI:SIZE)&$FF
24E0 8200      2194:         SBCA       #(RDSI:SIZE)/256




ASM/6800 1.4A0: 24E2 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 71; Form 1      *** SDOS 1.1 DEFINITIONS ***
SDOS11G.ASM
24E2 24F5      2195:         BCC        INITRDSI4       B/ MORE SPACE!
               2196:         ;ADDD    #RDSI:SIZE      (A,B):= NUMBER OF BYTES LEFT OVER
24E4 CB14      2197:         ADDB      #(RDSI:SIZE)&$FF
24E6 8900      2198:         ADCA       #(RDSI:SIZE)/256
  24E8         2199: INITRDSI4A       EQU     *
               2200:         ;DEC     NRDSIS  = ACTUAL # RDSI'S AVAILABLE
24E8 7ACF09    2201:         DEC      NRDSIS
               2202: * 5) CHECK TO MAKE SURE # RDSI'S >= # SECTOR BUFFERS
24EB 36        2203:         PSHA             SAVE (A)
24EC B6CF09    2204:         LDAA      NRDSIS
               2205:         ;CMPA     NBUFFERS
24EF B12703    2206:         CMPA      NBUFFERS
24F2 32        2207:         PULA             RESTORE (A)
24F3 240A      2208:         BCC        INITRDSI7       B/ NRDSIS >= NBUFFERS
  24F5         2209: INITRDSI6       ; NRDSIS < NBUFFERS
               2210:         ;DEC     NBUFFERS THROW AWAY A BUFFER
24F5 7A2703    2211:         DEC      NBUFFERS
24F8 26D9      2212:         BNE      INITRDSI4L      USE THROWN AWAY BUFFER AS SPACE FOR RDSI'S
  24FA         2213: ERRNOTENOUGHPOOL        EQU     *
               2214:         ;JSR    ERRET
24FA BDD1F7    2215:         JSR     ERRET
24FD 0402      2216:         FDB      ERR:NOTENOUGHPOOL
               2217: 
  24FF         2218: INITRDSI7       ; NRDSIS >= NBUFFERS, USE NBUFFERS
24FF B62703    2219:         LDAA      NBUFFERS
2502 B7CF09    2220:         STAA      NRDSIS
               2221:         ;CMPA     #1      ENOUGH RDSIS TO MAKE SDOS RUN?
2505 8101      2222:         CMPA      #1
2507 23F1      2223:         BLS      ERRNOTENOUGHPOOL        B/ NOPE, MUST BE AT LEAST 2!
               2224:         ;LDX    #LASTSECTORREADQ   NOW ALLOCATE RDSI'S FROM FIRST SEGMENT
2509 CECEEF    2225:         LDX     #LASTSECTORREADQ
250C FFCEF6    2226:         STX     LASTSECTORREADQ+RDSI:FLINK MAKE RDSI QUEUE EMPTY
250F FFCEF8    2227:         STX     LASTSECTORREADQ+RDSI:BLINK
               2228:         ;LDX    CODE+SDOS:CONFIGURATION
2512 FECE03    2229:         LDX     CODE+SDOS:CONFIGURATION
               2230:         ;LDD    CNFG:DSKBUFFERPOOL,X      GET POINTER TO NEXT POSSIBLE RDSI
2515 E608      2231:         LDAB      (CNFG:DSKBUFFERPOOL)+1,X
2517 A607      2232:         LDAA      CNFG:DSKBUFFERPOOL,X
2519 8D45      2233:         BSR      ALLOCRDSIS        GO ALLOCATE SOME RDSI'S
               2234: * 8) SKIP OVER SECTOR BUFFERS AS A LUMP




ASM/6800 1.4A0: 251B SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 72; Form 1      *** SDOS 1.1 DEFINITIONS ***
SDOS11G.ASM
251B B6CF09    2235:         LDAA      NRDSIS  = # BUFFERS TO SKIP (>=1)
251E B70004    2236:         STAA      COUNT
               2237:         ;LDD    FIRSTBUF
2521 F62700    2238:         LDAB      FIRSTBUF+1
2524 B626FF    2239:         LDAA      FIRSTBUF
  2527         2240: INITRDSI8       ; SKIP A SECTOR BUFFER
               2241:         ;ADDD    MAXSECTORSIZE
2527 FBCF0F    2242:         ADDB      MAXSECTORSIZE+1
252A B9CF0E    2243:         ADCA       MAXSECTORSIZE
               2244:         ;DEC     COUNT    DOWN COUNT # BUFFERS TO SKIP
252D 7A0004    2245:         DEC      COUNT
2530 26F5      2246:         BNE      INITRDSI8       B/ MORE BUFFERS TO SKIP
               2247:         ;LDX    #$FFFF  SET SEGMENT SIZE = "BIGGEST"
2532 CEFFFF    2248:         LDX     #$FFFF
2535 FF2701    2249:         STX     FIRSTSEGSIZE    (A,B) = POINTER TO REST OF RDSI'S
2538 8D26      2250:         BSR      ALLOCRDSIS        AND ALLOCATE REST OF RDSI'S
               2251: * 9) NOW DISTRIBUTE SECTOR BUFFERS TO RDSI'S
               2252:         ;LDX    LASTSECTORREADQ+RDSI:FLINK 1ST RDSI
253A FECEF6    2253:         LDX     LASTSECTORREADQ+RDSI:FLINK
               2254:         ;LDD    FIRSTBUF STORE SECTOR BUFFER ADDRESS
253D F62700    2255:         LDAB      FIRSTBUF+1
2540 B626FF    2256:         LDAA      FIRSTBUF
  2543         2257: INITRDSI9       EQU     *
               2258:         ;STD    RDSI:SECTORBASE,X
2543 E706      2259:         STAB      (RDSI:SECTORBASE)+1,X
2545 A705      2260:         STAA      RDSI:SECTORBASE,X
               2261:         ;CLR     RDSI:DISKINFO,X SET DRIVE = "SECTOR NOT IN BUFFER"
2547 6F00      2262:         CLR      RDSI:DISKINFO,X
               2263:         ;CLR     RDSI:DISKINFO+1,X       SO A LDX DETECTS THAT IT IS ZERO!
2549 6F01      2264:         CLR      RDSI:DISKINFO+1,X
254B A704      2265:         STAA      RDSI:LSN+2,X    MAKE LSN <> 0 SO IT IS NOT THE MAGIC "0" SECTOR!!
               2266:         ;CLR     RDSI:MODIFIED,X TAG "SECTOR NOT MODIFIED"
254D 6F0B      2267:         CLR      RDSI:MODIFIED,X
               2268:         ;CLR     RDSI:STATE,X     MARK RDSI AS "IDLE"
254F 6F0C      2269:         CLR      RDSI:STATE,X
               2270: * NOTE: RDSI:TRACK is GARBAGE if RDSI:DSKINFO=0
               2271:         ;ADDD    MAXSECTORSIZE     FIND NEXT SECTOR BUFFER
2551 FBCF0F    2272:         ADDB      MAXSECTORSIZE+1
2554 B9CF0E    2273:         ADCA       MAXSECTORSIZE
               2274:         ;LDX    RDSI:FLINK,X    FIND NEXT RDSI




ASM/6800 1.4A0: 2557 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 73; Form 1      *** SDOS 1.1 DEFINITIONS ***
SDOS11G.ASM
2557 EE07      2275:         LDX     RDSI:FLINK,X
2559 8CCEEF    2276:         CPX      #LASTSECTORREADQ   ALL RDSI'S INITZD?
255C 26E5      2277:         BNE      INITRDSI9       B/ NO
255E 0C39      2278:         OKRTS           YES, LET'S SPLIT!!




ASM/6800 1.4A0: 255E SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 74; Form 1      *** SDOS 1.1 DEFINITIONS ***
SDOS11G.ASM
               2280: *
               2281: *       ALLOCRDSIS -- AND ADD TO LASTSECTORREADQ
               2282: *               (A,B) POINTS TO NEXT POSSIBLE RDSI
               2283: *               FIRSTSEGSIZE CONTAINS CONTIGUOUS SPACE REMAINING
               2284: *               ALLOCATES NO MORE THAN "NRDSIS" RDSI'S
               2285: *
  2560         2286: ALLOCRDSIS        EQU     *
               2287:         ;STD    RDSIPOINTER     SAVE NEXT POTENTIAL RDSI ADDRESS
2560 F7CEA5    2288:         STAB      RDSIPOINTER+1
2563 B7CEA4    2289:         STAA      RDSIPOINTER
               2290:         ;LDD    FIRSTSEGSIZE    GET SIZE OF REMAINING SEGMENT
2566 F62702    2291:         LDAB      FIRSTSEGSIZE+1
2569 B62701    2292:         LDAA      FIRSTSEGSIZE
               2293:         ;SUBD    #RDSI:SIZE      ENOUGH SPACE LEFT TO ALLOCATE?
256C C014      2294:         SUBB      #(RDSI:SIZE)&$FF
256E 8200      2295:         SBCA       #(RDSI:SIZE)/256
2570 2520      2296:         BCS       ALLOCRDSISRTS     B/ NOT ENOUGH ROOM LEFT
               2297:         ;STD    FIRSTSEGSIZE
2572 F72702    2298:         STAB      FIRSTSEGSIZE+1
2575 B72701    2299:         STAA      FIRSTSEGSIZE
2578 B62703    2300:         LDAA      NBUFFERS GET # RDSI'S TO ALLOCATE
257B 2715      2301:         BEQ      ALLOCRDSISRTS     B/ DON'T ALLOCATE ANY MORE
               2302:         ;DEC     NBUFFERS = ONE PER BUFFER
257D 7A2703    2303:         DEC      NBUFFERS
               2304:         ;LDX    RDSIPOINTER     GET POINTER TO RDSI TO ALLOCATE
2580 FECEA4    2305:         LDX     RDSIPOINTER
               2306:         ;JSR    ENQUELASTSECTORREAD        ADD TO LASTSECTORREADQ
2583 BDFA7A    2307:         JSR     ENQUELASTSECTORREAD
               2308:         ;LDD    #RDSI:SIZE      FIND NEXT RDSI
2586 C614      2309:         LDAB      #(RDSI:SIZE)&$FF
2588 8600      2310:         LDAA      #(RDSI:SIZE)/256
               2311:         ;ADDD    RDSIPOINTER
258A FBCEA5    2312:         ADDB      RDSIPOINTER+1
258D B9CEA4    2313:         ADCA       RDSIPOINTER
2590 20CE      2314:         BRA       ALLOCRDSIS        GO ALLOCATE ANOTHER
               2315: 
  2592         2316: ALLOCRDSISRTS     EQU     *
2592 39        2317:         RTS




ASM/6800 1.4A0: 2592 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 75; Form 1      *** SDOS 1.1 DEFINITIONS ***
SDOS11G.ASM
               2319: *
               2320: *       INITFCBS -- COMPUTES NUMBER OF FCBS AND STORES IN NFCBS
               2321: *               THEN SCANS ALL FCBS ZEROING FCB:REFCOUNT
               2322: *
  2593         2323: INITFCBS  EQU     *
               2324:         ;LDX    CODE+SDOS:CONFIGURATION    COMPUTE # OF FCBS...
2593 FECE03    2325:         LDX     CODE+SDOS:CONFIGURATION
2596 A606      2326:         LDAA      CNFG:NIOCHANNELS,X = 1 PER I/O CHANNEL
2598 BBCF0B    2327:         ADDA      NDRIVES +2 PER DISK DRIVE
259B BBCF0B    2328:         ADDA      NDRIVES
259E 8B02      2329:         ADDA      #NMAGICFCBS + ODDBALL ASSORTMENT
25A0 B7CF0A    2330:         STAA      NFCBS     FOR USE BY FINDFREEFCBS, SEARCHFCBS
25A3 B70004    2331:         STAA      COUNT    SO WE KNOW HOW MANY TO ZAP
               2332:         ;LDD    [CNFG:IOCBPOINTERS,X] GET ADDRESS OF 1ST IOCB
25A6 EE04      2333:         LDX     CNFG:IOCBPOINTERS,X
25A8 E601      2334:         LDAB      1,X
25AA A600      2335:         LDAA      0,X
  25AC         2336: INITFCBL  EQU     *
               2337:         ;SUBD    #FCB:SIZE FIND PREVIOUS FCB = THIS FCB - SIZE OF FCB
25AC C01A      2338:         SUBB      #(FCB:SIZE)&$FF
25AE 8200      2339:         SBCA       #(FCB:SIZE)/256
               2340:         ;TDX            COPY ADDRESS TO (X)
25B0 9700      2341:         STAA      TEMPA
25B2 D701      2342:         STAB      TEMPB
25B4 DE00      2343:         LDX     TEMPX
               2344:         ;CLR     FCB:REFCOUNT,X     ZAP THE REFERENCE COUNT
25B6 6F0B      2345:         CLR      FCB:REFCOUNT,X
               2346:         ;DEC     COUNT
25B8 7A0004    2347:         DEC      COUNT
25BB 26EF      2348:         BNE      INITFCBL  B/ MORE TO INIT
               2349:         ;LDX    #0      RESET POINTER TO ERROR MESSAGE FCB
25BD CE0000    2350:         LDX     #0
25C0 FFCF0C    2351:         STX     ERRFCBPOINTER
25C3 39        2352:         RTS




ASM/6800 1.4A0: 25C3 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 76; Form 1      *** SDOS 1.1 DEFINITIONS ***
SDOS11G.ASM
               2354: *
               2355: *       INITDISKINFO -- INITIALIZES ALL DISKINFO TABLES TO "DISMOUNTED"
               2356: *       COMPUTE MAXSECTORSIZE = MAX OF ALL SECTOR SIZES
               2357: *       COUNT # DRIVES
               2358: *
  25C4         2359: INITDISKINFO    EQU     *
               2360:         ;LDX    #0      ZERO MAX SECTOR SIZE FOUND SO FAR
25C4 CE0000    2361:         LDX     #0
25C7 FFCF0E    2362:         STX     MAXSECTORSIZE
               2363:         ;CLR     NDRIVES ASSUME NO DISK DRIVES IN THIS SYSTEM (A LITTE FUNNY)
25CA 7FCF0B    2364:         CLR      NDRIVES
               2365:         ;LDX    CODE+SDOS:CONFIGURATION    FIND ADDRESS OF 1ST DISKINFO TABLE
25CD FECE03    2366:         LDX     CODE+SDOS:CONFIGURATION
               2367:         ;LDX    CNFG:DISKDCBS,X
25D0 EE00      2368:         LDX     CNFG:DISKDCBS,X
25D2 FFCE4C    2369:         STX     DEFAULTDISKDCB     SO WE KNOW WHICH DISK TO DEFAULT TO
  25D5         2370: INITDISKINFOL   EQU     *
25D5 DF06      2371:         STX     DCBPOINTER        SAVE THIS A MOMENT
               2372:         ;INC     NDRIVES COUNT # DISKINFO TABLES (NOT TO EXCEED 255)
25D7 7CCF0B    2373:         INC      NDRIVES
               2374:         ;CLR     DSKINFO:DIRFCB,X  MARK "NO DIRFCB SET UP" (DISMOUNTED)
25DA 6F27      2375:         CLR      DSKINFO:DIRFCB,X
               2376:         ;CLR     DSKINFO:DIRFCB+1,X
25DC 6F28      2377:         CLR      DSKINFO:DIRFCB+1,X
               2378:         ;CLR     DSKINFO:MAPFCB,X   DITCH MAP FCB...
25DE 6F29      2379:         CLR      DSKINFO:MAPFCB,X
               2380:         ;CLR     DSKINFO:MAPFCB+1,X
25E0 6F2A      2381:         CLR      DSKINFO:MAPFCB+1,X
               2382:         ;CLR     DSKINFO:SECTORDB,X        MARK THIS DRIVE AS "NOT DOING ANY I/O"
25E2 6F2B      2383:         CLR      DSKINFO:SECTORDB,X
               2384:         ;CLR     DSKINFO:SECTORDB+1,X
25E4 6F2C      2385:         CLR      DSKINFO:SECTORDB+1,X
25E6 86FF      2386:         LDAA      #-1     SET BAD LSN TO "NO BAD LSN"
25E8 A72D      2387:         STAA      DSKINFO:BADLSN,X
25EA A72E      2388:         STAA      DSKINFO:BADLSN+1,X
25EC A72F      2389:         STAA      DSKINFO:BADLSN+2,X
25EE A73F      2390:         STAA      DSKINFO:ERRLSN,X        RESET LAST ERRORING LSN, TOO!
25F0 A740      2391:         STAA      DSKINFO:ERRLSN+1,X
25F2 A741      2392:         STAA      DSKINFO:ERRLSN+2,X
               2393:         ;LDD    DSKINFO:NBPS,X   COMPARE SECTOR SIZE FOR THIS DISK...




ASM/6800 1.4A0: 25F4 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 77; Form 1      *** SDOS 1.1 DEFINITIONS ***
SDOS11G.ASM
25F4 E60A      2394:         LDAB      (DSKINFO:NBPS)+1,X
25F6 A609      2395:         LDAA      DSKINFO:NBPS,X
               2396:         ;CMPD    MAXSECTORSIZE     TO BIGGEST SECTOR SIZE FOUND SO FAR
25F8 B1CF0E    2397:         CMPA      MAXSECTORSIZE
25FB 2603      2398:         BNE      MACRO:0008
25FD F1CF0F    2399:         CMPB      MAXSECTORSIZE+1
  2600         2400: MACRO:0008
2600 2506      2401:         BCS       INITDISKINFO2   B/ SMALLER
               2402:         ;STD    MAXSECTORSIZE     KEEP BIGGEST SECTOR SIZE FOUND SO FAR
2602 F7CF0F    2403:         STAB      MAXSECTORSIZE+1
2605 B7CF0E    2404:         STAA      MAXSECTORSIZE
  2608         2405: INITDISKINFO2   EQU     *
               2406:         ;CLR     DSKINFO:LOG2NBPS,X       NOW COMPUTE LOG(2) OF NBPS
2608 6F18      2407:         CLR      DSKINFO:LOG2NBPS,X
               2408:         ;DEC     DSKINFO:LOG2NBPS,X       (INIT TO -1)
260A 6A18      2409:         DEC      DSKINFO:LOG2NBPS,X
  260C         2410: INITDISKINFO2L  EQU     *
               2411:         ;INC     DSKINFO:LOG2NBPS,X       LOG2 = LOG2 + 1
260C 6C18      2412:         INC      DSKINFO:LOG2NBPS,X
               2413:         ;LSRD           DIVIDE SECTOR SIZE BY POWER OF TWO
260E 44        2414:         LSRA
260F 56        2415:         RORB
2610 24FA      2416:         BCC        INITDISKINFO2L  B/ STILL >= 1, KEEP COUNTING!
               2417:         ;TSTD           ALL SIGNIFICANCE SHOULD BE SHIFTED OUT
2612 4D        2418:         TSTA
               2419:         ;BNED    ERRSECTORSIZE2   B/ SECTOR SIZE NOT A POWER OF 2!
2613 263B      2420:         BNE      ERRSECTORSIZE2
2615 5D        2421:         TSTB
2616 2638      2422:         BNE      ERRSECTORSIZE2
               2423:         ;LDD    DSKINFO:NBPS,X   SET DSKINFO:NBPSM1 := DSKINFO:NBPS-1
2618 E60A      2424:         LDAB      (DSKINFO:NBPS)+1,X
261A A609      2425:         LDAA      DSKINFO:NBPS,X
               2426:         ;SUBD    #1      FOR EVERYONE ELSE'S CONVENIENCE
261C C001      2427:         SUBB      #(1)&$FF
261E 8200      2428:         SBCA       #(1)/256
               2429:         ;STD    DSKINFO:NBPSM1,X
2620 E71A      2430:         STAB      (DSKINFO:NBPSM1)+1,X
2622 A719      2431:         STAA      DSKINFO:NBPSM1,X
               2432: *
               2433: *       NOW COMPUTE NLSN = (NSPT*NTPC*NCYL)




ASM/6800 1.4A0: 2622 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 78; Form 1      *** SDOS 1.1 DEFINITIONS ***
SDOS11G.ASM
               2434: *
               2435:         ;LDD    DSKINFO:NCYL,X   SET NLSN:=NCYL
2624 E610      2436:         LDAB      (DSKINFO:NCYL)+1,X
2626 A60F      2437:         LDAA      DSKINFO:NCYL,X
               2438:         ;CLR     DSKINFO:NLSN,X
2628 6F1B      2439:         CLR      DSKINFO:NLSN,X
               2440:         ;STD    DSKINFO:NLSN+1,X
262A E71D      2441:         STAB      (DSKINFO:NLSN+1)+1,X
262C A71C      2442:         STAA      DSKINFO:NLSN+1,X
               2443:         ;LDD    DSKINFO:NTPC,X   THEN SET NLSN:=NLSN*NTPC
262E E60E      2444:         LDAB      (DSKINFO:NTPC)+1,X
2630 A60D      2445:         LDAA      DSKINFO:NTPC,X
2632 8D21      2446:         BSR      MULNLSNBYAB
               2447:         ;LDD    DSKINFO:NSPT,X  AND THEN SET NLSN:=NLSN*NSPT
2634 E60C      2448:         LDAB      (DSKINFO:NSPT)+1,X
2636 A60B      2449:         LDAA      DSKINFO:NSPT,X
2638 8D1B      2450:         BSR      MULNLSNBYAB
               2451: *
               2452: *       NOW RESET THE DISK DEVICE
               2453: *
               2454:         ;LDX    DCB:DRIVER,X      CALL THE DISK DRIVER RESET ROUTINE
263A EE07      2455:         LDX     DCB:DRIVER,X
               2456:         ;LDD    DRIVER:DISKRESET,X
263C E601      2457:         LDAB      (DRIVER:DISKRESET)+1,X
263E A600      2458:         LDAA      DRIVER:DISKRESET,X
               2459:         ;JSR    SECTORDRIVER     WHICH SETS (X) = DCBPOINTER
2640 BDFBCD    2460:         JSR     SECTORDRIVER
2643 2508      2461:         BCS       INITDISKERRED   B/ OOPS...
               2462:         ;LDX    DCBPOINTER        NOW FIND NEXT DISK INFO TABLE
2645 DE06      2463:         LDX     DCBPOINTER
               2464:         ;LDX    DCB:NEXTDCB,X
2647 EE05      2465:         LDX     DCB:NEXTDCB,X
2649 268A      2466:         BNE      INITDISKINFOL
264B 0C39      2467:         OKRTS
               2468: 
  264D         2469: INITDISKERRED   EQU     *
               2470:         ;JMP    ERRORINX
264D 7ED201    2471:         JMP     ERRORINX




ASM/6800 1.4A0: 264D SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 79; Form 1      *** SDOS 1.1 DEFINITIONS ***
SDOS11G.ASM
  2650         2473: ERRSECTORSIZE2   EQU     *
               2474:         ;JSR    ERRET
2650 BDD1F7    2475:         JSR     ERRET
2653 0413      2476:         FDB      ERR:SECTORSIZE2  SECTOR SIZE IS NOT A POWER OF 2!
               2477: *
               2478: *       MULNLSNBYAB -- MULTIPLY DSKINFO:NLSN BY (A,B)
               2479: *       (X) POINTS TO DCB FOR DISK; (X) IS PRESERVED
               2480: *       PLACES PRODUCT IN DSKINFO:NLSN
               2481: *       OKRET IF PRODUCT < 2^24
               2482: *       ERRET IF PRODUCT >= 2^24
               2483: *
               2484: ********* SHOULD THIS BE DONE USING "MUL" INSTRUCTION???
               2485: *
  2655         2486: MULNLSNBYAB        EQU     *
               2487:         ;STD    TEMP.MPCND       SAVE MULTIPLICAND
2655 F70001    2488:         STAB      TEMP.MPCND+1
2658 B70000    2489:         STAA      TEMP.MPCND
265B 8619      2490:         LDAA      #25     # MULTIPLIER BITS (THE 25TH BIT IS GAURANTEED = 0)
265D B70004    2491:         STAA      COUNT    SET UP LOOP COUNT
2660 4F        2492:         CLRA              ZERO THE PARTIAL PRODUCT
2661 5F        2493:         CLRB              AND THE CARRY OUT OF THE PARTIAL PRODUCT
  2662         2494: MULNLSNBYABL       ; PROCESS NEXT MULTIPLIER BIT
               2495:         ;RORD           PRESERVE CARRY OUT OF PARTIAL PRODUCT
2662 46        2496:         RORA
2663 56        2497:         RORB
               2498: *                       RIGHT SHIFT PARTIAL PRODUCT...
2664 661B      2499:         ROR     DSKINFO:NLSN,X  INTO MULTIPLIER
2666 661C      2500:         ROR     DSKINFO:NLSN+1,X
2668 661D      2501:         ROR     DSKINFO:NLSN+2,X        AND SHIFT OUT MULTIPLIER BIT
266A 2406      2502:         BCC        MULNLSNBYAB1       B/ DON'T ADD (SET CARRY OUT OF PARTIAL PRODUCT T
               2503:         ;ADDD    TEMP.MPCND       ADD MULTIPLICAND TO PARTIAL PRODUCT
266C FB0001    2504:         ADDB      TEMP.MPCND+1
266F B90000    2505:         ADCA       TEMP.MPCND
  2672         2506: MULNLSNBYAB1       EQU     *
               2507:         ;DEC     COUNT    DOWN COUNT # MULTIPLIER BITS
2672 7A0004    2508:         DEC      COUNT
2675 26EB      2509:         BNE      MULNLSNBYABL       B/ MORE MULTIPLIER BITS TO PROCESS
2677 2508      2510:         BCS       ERRNLSNGE224    B/ PRODUCT >= 2^24
               2511:         ;TSTD           UPPER 2 BYTES OF 5 BYTE PRODUCT <> 0 ?
2679 4D        2512:         TSTA




ASM/6800 1.4A0: 2679 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 80; Form 1      *** SDOS 1.1 DEFINITIONS ***
SDOS11G.ASM
               2513:         ;BNED    ERRNLSNGE224    B/ YES, PRODUCT TOO BIG
267A 2605      2514:         BNE      ERRNLSNGE224
267C 5D        2515:         TSTB
267D 2602      2516:         BNE      ERRNLSNGE224
267F 0C39      2517:         OKRTS
               2518: 
  2681         2519: ERRNLSNGE224    EQU     *
               2520:         ;JSR    ERRET
2681 BDD1F7    2521:         JSR     ERRET
2684 041B      2522:         FDB      ERR:NLSNGE224




ASM/6800 1.4A0: 2684 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 81; Form 1      *** SDOS 1.1 DEFINITIONS ***
SDOS11G.ASM
               2524: *
               2525: *       INITIOCBS -- SETS UP IOCBS FOR USE BY DISKFILE DRIVERS,
               2526: *               DISKDEVICEDRIVERS
               2527: *
  2686         2528: INITIOCBS EQU     *
               2529:         ;LDX    CODE+SDOS:CONFIGURATION    SCAN ALL THE IOCBS
2686 FECE03    2530:         LDX     CODE+SDOS:CONFIGURATION
2689 A606      2531:         LDAA      CNFG:NIOCHANNELS,X
268B B72704    2532:         STAA      INITCOUNTER
               2533:         ;LDX    CNFG:IOCBPOINTERS,X
268E EE04      2534:         LDX     CNFG:IOCBPOINTERS,X
  2690         2535: INITIOCBL ; INIT NEXT IOCB
2690 FF2705    2536:         STX     INITX
               2537:         ;LDX    ,X      GET IOCB ADDRESS
2693 EE00      2538:         LDX     0,X
2695 8D16      2539:         BSR      INITIOCB  DUH
               2540:         ;LDX    INITX   FIND NEXT IOCB POINTER
2697 FE2705    2541:         LDX     INITX
               2542:         ;LEAX    2,X
  0000         2543:         IF      2<0
 *S*           2544:         RPT     -2
 *S*           2545:         DEX
               2546:         ELSE
  0002         2547:         RPT     2
269A 08        2548:         INX
               2549:         FIN
               2550:         ;DEC     INITCOUNTER
269C 7A2704    2551:         DEC      INITCOUNTER
269F 26EF      2552:         BNE      INITIOCBL B/ MORE IOCBS
               2553:         ;LDX    #SYSIOCB  INIT THE SYSTEM IOCB
26A1 CECF57    2554:         LDX     #SYSIOCB
26A4 8D07      2555:         BSR      INITIOCB
               2556:         ;LDX    #LOGIOCB  INIT THE LOG FILE IOCB
26A6 CECF35    2557:         LDX     #LOGIOCB
26A9 8D02      2558:         BSR      INITIOCB
26AB 0C39      2559:         OKRTS           AND EXIT
               2560: *
               2561: *       INITIOCB -- RESET IOCB(X)
               2562: *
  26AD         2563: INITIOCB  EQU     *




ASM/6800 1.4A0: 26AB SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 82; Form 1      *** SDOS 1.1 DEFINITIONS ***
SDOS11G.ASM
               2564:         ;CLR     IOCB:DRIVER,X
26AD 6F09      2565:         CLR      IOCB:DRIVER,X
               2566:         ;CLR     IOCB:DRIVER+1,X
26AF 6F0A      2567:         CLR      IOCB:DRIVER+1,X
26B1 39        2568:         RTS




ASM/6800 1.4A0: 26B1 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 83; Form 1      *** SDOS 1.1 DEFINITIONS ***
SDOS11G.ASM
               2570: *
               2571: *       TimeoutTask Initialization
               2572: *
  0002         2573: ExitScanPtr     Equ     2       Pointer used to Scan Exit code for checking
  0004         2574: ExitPartialChksum        Equ     4       Partially computed checksum
               2575: 
  26B2         2576: TimeouttaskSetup        ; Timeout Task initializing code
               2577:         ;Clr     ExitPartialChksum        zero initial value of checksum
26B2 7F0004    2578:         CLR      ExitPartialChksum
               2579:         ;Ldx    #Exitchksumbase-15      don't make base of checksum obvious
26B5 CED7FC    2580:         LDX     #Exitchksumbase-15
26B8 DF02      2581:         Stx     Exitscanptr
               2582:         ;Jmp    Timeouttaskbored
26BA 7EFD5E    2583:         JMP     Timeouttaskbored
               2584: 
  26BD         2585: SDOSINITEND     ; END OF SDOSINIT CHECKSUMMED CODE




ASM/6800 1.4A0: 26BA SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 84; Form 1      *** SDOS 1.1 DEFINITIONS ***
SDOS11G.ASM
               2587: *       The following routine is used by SD personnel after SDOS is assembled or patch
               2588: *       to compute the various checksum values required to make SDOS operate.
               2589: *       Control is transferred here (instead of to SDOSINIT);
               2590: *       the checksum bytes are modified until the correct checksums are obtained
               2591: *       (this process presumes that the memory of the computer works!)
               2592: *       The values in the checksum bytes must then be patched into SDOS with BMP.
               2593: *       The code is a little obscure because we don't want it accidentally found
               2594: *
26BD BF        2595:         Fcb     $BF      Red herring for would-be disassemblers
  26BE         2596: ComputeChecksums; Compute checksums over SDOS
               2597: *       Note: Exit Checksum must be computed before MainChecksum!
  26BE         2598: ComputeExitChecksum ; loop back here until SDOSEXITCHKSUM gives zero
               2599:         ;ldx    #EXITCODECHKSUM-51        don't make it obvious where checksum byte is
26BE CED7FA    2600:         LDX     #EXITCODECHKSUM-51
               2601:         ;inc    51,x    old value didn't work, try this one!
26C1 6C33      2602:         INC      51,X
               2603:         ;ldx    #EXITCHKSUMBASE-41 don't make it obvious where checksum byte is
26C3 CED7E2    2604:         LDX     #EXITCHKSUMBASE-41
26C6 5F        2605:         clrb            zero the checksum accumulator
  26C7         2606: ComputeExitChecksuml      ; loop here to checksum a byte
26C7 58        2607:         aslb            make checksum depend on order of the data
26C8 E929      2608:         adcb    41,x
26CA 08        2609:         inx
26CB 8CD81E    2610:         cpx     #EXITCHKSUMEND-41        done?
26CE 26F7      2611:         bne     ComputeExitChecksuml      b/ no
26D0 50        2612:         negb            did we get proper checksum?
26D1 26EB      2613:         bne     ComputeExitChecksum
  26D3         2614: ComputeMainChecksum ; loop back here until main SDOS checksum gives zero
               2615:         ;ldx    #SDOSCODECHKSUM-49        don't make it obvious where checksum byte is
26D3 CED816    2616:         LDX     #SDOSCODECHKSUM-49
               2617:         ;inc    49,x    old value didn't work, try this one!
26D6 6C31      2618:         INC      49,X
               2619:         ;ldx    #SDOSCHKSUMBASE-7  where to start checksumming over SDOS
26D8 CED0BC    2620:         LDX     #SDOSCHKSUMBASE-7
26DB 5F        2621:         clrb            zero the checksum accumulator
  26DC         2622: ComputeMainChecksuml ; loop here to checksum a byte
26DC 58        2623:         aslb            make checksum depend on order of the data
26DD E907      2624:         adcb    7,x
26DF 08        2625:         inx
26E0 8CFEEC    2626:         cpx     #SDOS:END-7




ASM/6800 1.4A0: 26E3 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 85; Form 1      *** SDOS 1.1 DEFINITIONS ***
SDOS11G.ASM
26E3 26F7      2627:         bne     ComputeMainChecksuml      b/ more bytes to checksum
26E5 CB00      2628:         addb    #0      did checksum come up zero?
26E7 26EA      2629:         bne     ComputeMainChecksum       b/ no, try a new value!




ASM/6800 1.4A0: 26E7 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 86; Form 1      *** SDOS 1.1 DEFINITIONS ***
SDOS11G.ASM
  26E9         2631: ComputeInitChecksum ; loop back here until SDOSINIT checksum gives zero
               2632:         ;ldx    #SDOSINITCKSUM-22        don't make it obvious where checksum byte is
26E9 CE22DF    2633:         LDX     #SDOSINITCKSUM-22
               2634:         ;inc    22,x    old value didn't work, try this one!
26EC 6C16      2635:         INC      22,X
               2636:         ;ldx    #SDOSINIT-75    don't make it obvious where checksum byte is
26EE CE1FB5    2637:         LDX     #SDOSINIT-75
26F1 5F        2638:         clrb            zero the checksum accumulator
  26F2         2639: ComputeInitChecksuml      ; loop here to checksum a byte
26F2 58        2640:         aslb            make checksum depend on order of the data
26F3 08        2641:         inx             do this one first to be confusing!
26F4 E94A      2642:         adcb    74,x
26F6 8C2672    2643:         cpx     #SDOSINITEND-74-1       done?
26F9 26F7      2644:         bne     ComputeInitChecksuml      b/ no
26FB 50        2645:         negb            did we get proper checksum?
26FC 26EB      2646:         bne     ComputeInitChecksum
26FE 3B        2647:         rti             if you let it get here, you don't know what you're doing...




ASM/6800 1.4A0: 26FE SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 87; Form 1      *** SDOS 1.1 DEFINITIONS ***
SDOS11G.ASM
               2649: *
               2650: *       STORAGE USED ONLY BY INITIALIZATION ROUTINES
               2651: *
26FF 0002      2652: FIRSTBUF RMB      2       POINTER TO 1ST SECTOR BUFFER
2701 0002      2653: FIRSTSEGSIZE    RMB      2       SIZE OF 1ST REGION FROM WHICH TO ALLOCATE RDSI'S
2703 0001      2654: NBUFFERS RMB      1       # OF SECTOR BUFFERS AVAILABLE
2704 0001      2655: INITCOUNTER      RMB      1
2705 0002      2656: INITX   RMB      2
               2657: *
  2707         2658: EXITCOPYRIGHT    ; USED TO DISPLAY SDOS BANNER, COPYRIGHT MESSAGE
2707 0C        2659:         FCB       SYSCALL:WRITEA     FUNCTION
2708 08        2660:         FCB       WRITEA:SCLEN
2709 00        2661:         FCB       0       CHANNEL
270A 0001      2662:         RMB      1       ANY GARBAGE
270B D119      2663:         FDB      SDOSMSG BUFFER ADDRESS
270D 003B      2664:         FDB      COPYRIGHTEND-SDOSMSG     REQUESTED COUNT
               2665: *
  270F         2666: SDOSINITID      ; USED TO DISPLAY DISK IDENTIFICATION STRING
270F 0C        2667:         FCB       SYSCALL:WRITEA     FUNCTION
2710 08        2668:         FCB       WRITEA:SCLEN
2711 00        2669:         FCB       0       CHANNEL
2712 0001      2670:         RMB      1       ANY OLD GARBAGE FOR 2ND PARAMETER BYTE
2713 0002      2671:         RMB      2       POINTER TO ID STRING IN BOOT SECTOR
2715 0020      2672:         FDB      BOOT:SIZE-BOOT:DISKID     LENGTH OF ID STRING
               2673: *
  2717         2674: DISPLAYINITDATE   ; SYSCALL USED TO DISPLAY DISK INITZ DATE
2717 0C        2675:         FCB       SYSCALL:WRITEA
2718 08        2676:         FCB       WRITEA:SCLEN
2719 00        2677:         FCB       0       CHANNEL NUMBER
271A 0001      2678:         RMB      1       ANY GARBAGE BYTE
271B 271F      2679:         FDB      INITDATE STRING TO DISPLAY
271D 0009      2680:         FDB      INITDATELEN      SIZE OF STRING TO DISPLAY
               2681: 
271F 30302F30  2682: INITDATE FCC       "00/00/00 "
  0009         2683: INITDATELEN      EQU     *-INITDATE




ASM/6800 1.4A0: 2727 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 88; Form 1      *** SDOS 1.1 DEFINITIONS ***
SDOS11G.ASM
  2728         2685: CHAINTOSERIALNO.SYS ; SYSTEM CALL TO CHAIN TO SERIALNUMBER.SYS
2728 060E      2686:         FCB       SYSCALL:CHAIN,CHAIN:SCLEN
272A 0000      2687:         FCB       IGNORED,IGNORED
272C 27360010  2688:         FDB      SERIALNUMBER.SYS,SERIALNUMBER.SYSL
2730 0000      2689:         FDB      CHANGED
2732 27540004  2690:         FDB      SCRATCH,4
               2691: 
  2736         2692: SERIALNUMBER.SYS  ;ZZZ       FCC       "SERIALNUMBER.SYS"
2736 44454641  2693:          FCC "DEFAULTPROGRAM  "
  0010         2694: SERIALNUMBER.SYSL EQU     *-SERIALNUMBER.SYS
               2695: 
  2746         2696: OPENSERIALNO.SYS ; SYSTEM CALL TO OPEN SERIALNUMBER.SYS
2746 000E      2697:         FCB       SYSCALL:OPEN,OPEN:SCLEN
2748 0100      2698:         FCB       1,IGNORED
274A 27360010  2699:         FDB      SERIALNUMBER.SYS,SERIALNUMBER.SYSL
274E 0000      2700:         FDB      CHANGED
2750 27540004  2701:         FDB      SCRATCH,4
               2702: 
2754 0004      2703: SCRATCH    RMB      4
               2704: 
  2758         2705: CLOSESERIALNO.SYS ; SYSTEM CALL TO CLOSE SERIALNUMBER.SYS
2758 0203      2706:         FCB       SYSCALL:CLOSE,CLOSE:SCLEN
275A 01        2707:         FCB       1
               2708: 
  275B         2709: SETINITERROR    ; SYSCALL TO TELL SDOS WHAT ERROR CODE WE WANT DISPLAYED
275B 1304      2710:         FCB       SYSCALL:SETERROR,SETERROR:SCLEN
275D 0000      2711: ERRORCODE        FDB      CHANGED
               2712: 
  275F         2713: DisplayInitError        ; Syscall to display error code last set
275F 1502      2714:         Fcb     Syscall:Disperror,Disperror:Sclen
               2715: 
  2761         2716: ReadSerialNumberFromFile        ; Syscall to read Serial number from encrypted file
2761 0B12      2717:         fcb     Syscall:Readb,RWposition:sclen
2763 0100      2718:         fcb     1,ignored
2765 00000000  2719:         fdb     ignored,ignored
2769 0000      2720:         fdb     changed expected value of 8
276B D05D0008  2721:         fdb     DecryptBuffer,SerialNumber:Size  where to read serial number
276F 00000008  2722:         fdb     $0000,$0008     file position to start reading at
               2723: 
  2773         2724: ReadSerialNumberFileType ; Syscall to read type of 1st load record of file




ASM/6800 1.4A0: 2773 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 89; Form 1      *** SDOS 1.1 DEFINITIONS ***
SDOS11G.ASM
2773 0B0E      2725:         fcb     Syscall:Readb,Readb:Sclen
2775 0100      2726:         fcb     1,ignored
2777 00000000  2727:         fdb     ignored,ignored
277B 0000      2728:         fdb     changed expected value of 1
277D D05D0001  2729:         fdb     DecryptBuffer,1  where to read load record type byte to
               2730: 
2781 0001      2731: seed    rmb     1       self-initializes with garbage
               2732: 
2782 0002      2733: RunningEncryptedp       rmb     2       Pointer to Running Encrypted byte
               2734: 
  2784         2735: CopyofNMIVector ; save copy of NMI vector for NMI-vector-not-in-RAM test
2784 0000      2736:         fdb     changed
  2786         2737: CopyofRestartVector ; copy of Restart vector for Restart-vector-not-in-RAM test
2786 0000      2738:         fdb     changed
               2739: 
  0000         2740:         IF      *>/CODE
 *S*           2741:         ?SDOS INITIALIZATION CODE OVERLAPS SDOS?
               2742:         FIN




ASM/6800 1.4A0: 2786 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 90; Form 1      --- SDOS FRONT END ---
SDOS11G.ASM
               2744: *       SDOS ENTRY POINTS, AND DATA SHARED WITH I/O PACKAGE
               2745: *               (SEE SDOS:XXX DISPLACEMENTS)
               2746: *
  CE00         2747:         ORG     CODE     BASE OF SDOS
CE00 11        2748:         FCB       SDOSVERSION     FOR REFERENCE PURPOSES
CE01 0000      2749: LASTERROR        FDB      0       LAST ERROR ENCOUNTERED BY SDOS
CE03 0002      2750:         RMB      2       POINTER TO CONFIGURATION LIST
CE05 0002      2751:         RMB      2       TO IDENTIFY WHICH USER WE SOLD IT TO
               2752: *
               2753: *       THIS AREA CONTAINS THE VARIABLES THAT ARE PASSED
               2754: *       TO THE DRIVERS
               2755: *
CE07 0002      2756:         RMB      2       POINTER TO THE I/O CALL BLOCK
CE09 0002      2757: IOCBPOINTER       RMB      2       POINTER TO I/O CONTROL BLOCK SPECIFIED BY SYSCALL C
CE0B 0003      2758:         RMB      3       CLOCK: 100THS OF A SECOND (0..100*60*60*24)
CE0E 0003      2759:         RMB      3       CLOCK: DD/MM/YY (BCD)
CE11 FF        2760:         FCB       -1      STACKSWITCHED: -1 --> RUNNING UNDER TASK'S STACK
               2761: *                       >= 0 --> RUNNING UNDER INTERRUPT STACK
               2762:         ;JMP    IOINTERRUPT     IN SIMPLE INTERRRUPT SCHEME, I/O INTERRUPT GOES HERE F
CE12 7EFEC5    2763:         JMP     IOINTERRUPT
               2764:         ;JMP    IORTI   RTI WITHOUT EVENT
CE15 7EFDD0    2765:         JMP     IORTI
               2766:         ;JMP    FORCESCHEDULE     RTI WITH EVENT
CE18 7EFDCD    2767:         JMP     FORCESCHEDULE
               2768:         ;JMP    CLOCKTICKED        ENTRY POINT FOR "CLOCKTICKED" SUBROUTINE
CE1B 7EFCD1    2769:         JMP     CLOCKTICKED
CE1E CE8A      2770:         FDB      USERTASKTCB        POINTER TO CURRENTLY ACTIVE TASK'S CONTROL BLOCK
CE20 01        2771:         FCB       1       0 --> KILLABLE; <>0 --> UNKILLABLE (KILLPROOFFLAG)
               2772: *       INITIALLY KILLPROOF TO PREVENT "SDOSINIT" FROM BEING STOPPED
               2773:         ;JMP    KILLUSERPROGRAM  ENTRY POINT FOR "KILL USER PROGRAM" SUBROUTINE
CE21 7ED78B    2774:         JMP     KILLUSERPROGRAM
               2775:         ;JMP    STARTIO$ (TASK) SIMULATE INTERRUPT TO (X)
CE24 7EFEA7    2776:         JMP     STARTIO$
               2777:         ;JMP    WAIT$    (TASK) WAIT FOR CONDITION (A,B)
CE27 7EFE7C    2778:         JMP     WAIT$
               2779:         ;JMP    WAITEVENT$       (TASK) WAIT FOR EVENT (X)
CE2A 7EFE74    2780:         JMP     WAITEVENT$
               2781:         ;JMP    ERRET   ENTRY POINT FOR ERROR SIGNALING ROUTINE
CE2D 7ED1F7    2782:         JMP     ERRET
               2783:         ;JMP    ERRORSAVE        ENTRY POINT TO SAVE ERROR CODE IN (X)




ASM/6800 1.4A0: CE30 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 91; Form 1      --- SDOS FRONT END ---
SDOS11G.ASM
CE30 7ED219    2784:         JMP     ERRORSAVE
               2785:         ;JMP    ERRORED ENTRY POINT TO SIGNAL "I CAN'T HANDLE THAT ERROR"
CE33 7ED20A    2786:         JMP     ERRORED
               2787:         ;JMP    CHECKRDLEN        ENTRY POINT FOR "CHECK REPLY DATA LENGTH"
CE36 7ED8A0    2788:         JMP     CHECKRDLEN
               2789:         ;JMP    CHECKWRLEN        ENTRY POINT FOR "CHECK WRITE DATA LENGTH"
CE39 7ED8DC    2790:         JMP     CHECKWRLEN
               2791:         ;JMP    CHECKSCLEN ENTRY POINT FOR "CHECK SYSCALL BLOCK LENGTH"
CE3C 7ED8FD    2792:         JMP     CHECKSCLEN
               2793:         ;JMP    TABLEBRANCH  ENTRY POINT FOR "BRANCH THRU TABLE" ROUTINE
CE3F 7EE20D    2794:         JMP     TABLEBRANCH
               2795:         ;JMP    BLOCKMOVE ENTRY POINT FOR "FAST BLOCK MOVE"
CE42 7EFBD2    2796:         JMP     BLOCKMOVE
               2797:         ;JMP    GETRUNNINGENCRYPTED      ENTRY POINT TO GET ADDRESS OF RUNNING ENCRYPT
CE45 7EDA95    2798:         JMP     GETRUNNINGENCRYPTED
CE48 0000      2799:         RMB      SDOS:ENTRYSIZE-(*-CODE)




ASM/6800 1.4A0: CE48 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 92; Form 1      --- SDOS FRONT END ---
SDOS11G.ASM
               2801: *       TEMPS FOR SDOS FRONT END
               2802: *
CE48 0002      2803: STARTADDRESS      RMB      2       EXECUTION START ADDRESS
CE4A 0002      2804: LOADCOUNT RMB      2       COUNTER FOR LOADER
               2805: 
CE4C 0002      2806: DEFAULTDISKDCB     RMB      2       POINTER TO DISK INFO TABLE FOR DEFAULT DISK
CE4E 0002      2807: NAMESCANPTR        RMB      2       USED TO SCAN USER-SUPPLIED DEVICE NAME
CE50 0002      2808: NAMESIZE RMB      2       SIZE OF USER-SUPPLIED DEVICE NAME
CE52 0002      2809: CONSOLEDRIVER    RMB      2       POINTER TO CONSOLE DEVICE DRIVER (SET UP BY SDOSINIT
CE54 0002      2810: DRIVERVPOINTER  RMB      2       POINTER TO DEVICE DRIVER ENTRY VECTOR
CE56 0002      2811: ERRORADDRESS     RMB      2       HOLDS LAST ERROR ADDRESS (CONVENIENCE FOR SYSTEMS PR
               2812: *
               2813: *       CLOCKTICK AND TIMEOUT ROUTINE DATA STORAGE
               2814: *
CE58 FD00      2815: DAYSPERMONTHX    FDB      DAYSPERMONTH&$FF00       USED TO ACCESS DAYS PER MONTH GIVEN
CE5A 00        2816: NTIMEOUTBLKS     FCB       0       SET BY SDOSINIT TO # TIMEOUT BLOCKS
CE5B 00        2817: CLOCKTICKEDEVENT   FCB       0       # CLOCK TICKS FOR TIMEOUT TASK TO PROCESS
CE5C 0002      2818: TIMEOUTLEPTR    RMB      2       TIMEOUT LIST ENTRY POINTER
               2819: 
  CE5E         2820: DELAYBLOCK ; TIMEOUT BLOCK USED BY SYSCALL:DELAY ROUTINE
CE5E 0000      2821:         FDB      CHANGED   to point to rest of timeout blocks (TIMEOUT:LINK)
CE60 FFFF      2822:         FDB      $FFFF   Timeout:fuse, initialized to 18.2 minutes
CE62 D3CE      2823:         FDB      SDOSNOTREGISTERED       WHERE TO GO IF SECRET DELAY CALL NOT ISSUED!
               2824: 
CE64 00        2825: DELAYCOMPLETE     FCB       0       EVENT MARKING COMPLETION OF DELAY SYSCALL TIMEOUT




ASM/6800 1.4A0: CE64 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 93; Form 1      --- SDOS FRONT END ---
SDOS11G.ASM
               2827: *
               2828: *       TIMEOUT AND USER TASK STUFF
               2829: *
  0001         2830:         IF      M6800!M6801
CE65 000E      2831:         RMB      MINSTACK-CONTEXTBLOCK:SIZE   STACK SPACE FOR TIMEOUT TASK
  CE72         2832: TIMEOUTTASKSTKINIT       EQU     *-1      INITIAL VALUE FOR TIMEOUT TASK'S STACK
CE73 00000000  2833:         FCB       0,IGNORED,IGNORED,IGNORED,IGNORED       ZERO CC SO INTERRUPTS ARE EN
CE78 26B2      2834:         FDB      TIMEOUTTASKSETUP INITIAL PC OF TIMEOUT TASK
  0001         2835:         ELSE    (M6809)
 *S*           2836:         RMB      MINSTACK-CONTEXTBLOCK:SIZE   STACK SPACE FOR TIMEOUT TASK
 *S*           2837: TIMEOUTTASKSTKINIT       EQU     *       INITIAL VALUE FOR TIMEOUT TASK'S STACK
 *S*           2838:         FCB       $80,IGNORED,IGNORED,0   CC WITH INTS ENABLED, GARBAGE (D), (DP) = 0
 *S*           2839:         FDB      IGNORED GARBAGE (X)
 *S*           2840:         FDB      IGNORED GARBAGE (Y)
 *S*           2841:         FDB      IGNORED GARBAGE (U)
 *S*           2842:         FDB      TIMEOUTTASKSETUP INITIAL PC OF TIMEOUT TASK
               2843:         FIN
               2844: 
  CE7A         2845: TIMEOUTTASKTCB     EQU     *
CE7A CE8A      2846:         FDB      USERTASKTCB        TCB:LNK POINTS TO USER TASK
CE7C CE72      2847:         FDB      TIMEOUTTASKSTKINIT       TCB:STACK INITIAL VALUE
CE7E 000C      2848:         RMB      TCB:SIZE-(*-TIMEOUTTASKTCB)
               2849: 
  CE8A         2850: USERTASKTCB        ; USER TASK CONTROL BLOCK
CE8A 0000      2851:         FDB      0       END OF TCB CHAIN
CE8C 000E      2852:         RMB      TCB:SIZE-(*-USERTASKTCB)




ASM/6800 1.4A0: CE8C SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 94; Form 1      WORKING STORAGE FOR DISK FILE DRIVERS
SDOS11G.ASM
               2854: *
               2855: *       VARIABLE STORAGE FOR DISK FILE DRIVER
               2856: *
               2857: *       SCRATCH PAD VARIABLES (USE TO SHORTEN/SPEED UP INSTRUCTIONS IN SDOS)
               2858: *
  0000         2859: TOPOINTER       EQU     0       COPY TARGET
  0002         2860: FROMPOINTER     EQU     2       COPY SOURCE
  0004         2861: COUNT    EQU     4       1 BYTE COUNTER, GP
               2862: 
  0000         2863: TEMP.MPCND       EQU     TEMPX   MULTIPLICAND
  0000         2864: TEMP.DIVISOR    EQU     TEMPX   DIVISOR
  0000         2865: TEMP.QUOTIENT   EQU     0       QUOTIENT (2 BYTES)
  0002         2866: TEMP.DIVIDEND   EQU     2       DIVIDEND (2 BYTES)
  0005         2867: TEMP.MPR        EQU     5       MULTIPLIER (1 BYTE)
               2868: *
               2869: *       HIGH RAM SCRATCH AREA
               2870: *
CE9A 0001      2871: WRITEFLAG        RMB      1       0--> READ; 1--> WRITE REQUEST
CE9B 0002      2872: BUFFERPOINTER    RMB      2       POINTER INTO USER'S BUFFER
CE9D 0002      2873: TRANSFERCOUNT     RMB      2       # BYTES AVAILABLE TO BE TRANSFERRED FROM SECTOR
CE9F 0002      2874: USEDCOUNT        RMB      2       # BYTES ACTUALLY TRANSFERRED
CEA1 0001      2875: COLUMNCOUNT       RMB      1       COLUMN COUNTER
CEA2 0002      2876: USERIOCBPOINTER   RMB      2       HOLDS REAL IOCBPOINTER DURING A SEARCHDIR
CEA4 0002      2877: RDSIPOINTER     RMB      2       POINTER TO RDSI OF LAST SECTOR READ
CEA6 0002      2878: FCBPOINTER        RMB      2       POINTER TO FCB FOR CURRENT IOCB
CEA8 0002      2879: DIRENTRY        RMB      2       POINTER TO DIRECTORY ENTRY FOUND BY SEARCHDIR
CEAA 0002      2880: DIRENTRYDISP    RMB      2       DISPLACEMENT FROM SECTORBASE OF DIRENTRY
               2881: *
CEAC 0002      2882: SEARCHNAMEP        RMB      2       POINTER TO 16 BYTE FILENAME TO SEARCH FOR
CEAE 0002      2883: SEARCHSAVEP        RMB      2       SAVED VALUE OF SEARCHNAMEP
CEB0 0003      2884: SEARCHSTARTLSN     RMB      LSN:SIZE        STARTING LSN OF DIRECTORY SEARCH
CEB3 0003      2885: FREEDIRLSN      RMB      LSN:SIZE        LSN OF FREE DIRECTORY SLOT
CEB6 0002      2886: FREEDIRENTRYDISP        RMB      2       DISPLACEMENT FROM SECTORBASE OF FREE ENTRY
CEB8 0002      2887: DIRSECTOREND     RMB      2       ADDRESS OF BYTE PAST END OF DIRECTORY SECTOR
               2888: *
CEBA 0010      2889: FILENAMEBUF       RMB      DIR:NAMESIZE     BUFFER TO HOLD PARSED FILENAME
CECA 0002      2890: FILENAMEFILL     RMB      2       POINTER USED TO FILL FILENAMEBUF
CECC 0001      2891: FILENAMELENGTH   RMB      1       LENGTH OF FILENAME
CECD 0004      2892: FILESIZERQSTD   RMB      4       REQUESTED FILE SIZE IN BYTES
CED1 00000000  2893: FILESIZE2       FCB       0,0,0,CHANGED     TEMP TO HOLD 32 BIT DIGIT




ASM/6800 1.4A0: CED5 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 95; Form 1      WORKING STORAGE FOR DISK FILE DRIVERS
SDOS11G.ASM
CED5 0002      2894: PARSECOUNT        RMB      2       UNUSED LENGTH OF NAME TO BE PARSED
CED7 0001      2895: FILEPROT        RMB      1       REQUESTED FILE PROTECTION BITS
               2896: *
CED8 0002      2897: ALLOCATIONCOUNT     RMB      LCN:SIZE NUMBER OF CLUSTERS TO ALLOCATE TO A FILE
CEDA 0002      2898: ALLOCATIONPLCN      RMB      LCN:SIZE PREVIOUS LCN ALLOCATED TO FILE
CEDC 0002      2899: DIVIDEPOINTLCN   RMB      LCN:SIZE DIVIDES $DISKMAP FOR FWD/BKWD SEARCH
CEDE 0002      2900: SEARCHLCN  RMB      LCN:SIZE LCN OF CURRENT MAP BIT
CEE0 0002      2901: AVAILABLELCN RMB      LCN:SIZE LCN OF FREE CLUSTER
CEE2 0002      2902: AVAILABLECOUNT       RMB      LCN:SIZE NUMBER OF FREE CLUSTERS STARTING AT AVAILABLELC
CEE4 0002      2903: DESIREDLCN       RMB      LCN:SIZE VALUE OF LCN WHICH WE'D LIKE TO ALLOCATE
CEE6 0002      2904: LCNGROUPLENGTH   RMB      LCN:SIZE LENGTH OF GROUP OF FREE CLUSTERS WE'RE LOOKING AT
CEE8 0002      2905: DISKMAPSECTORSTART RMB      2       POINTER TO 1ST BYTE OF $DISKMAP SECTOR
CEEA 0002      2906: DISKMAPSECTOREND  RMB      2       POINTER TO BYTE PAST END OF $DISKMAP SECTOR
CEEC 0002      2907: DISKMAPBYTEPOINTER        RMB      2       POINTER TO $DISKMAP BYTE CONTAINING LCN BIT
CEEE 0001      2908: DISKMAPMASK       RMB      1       MASK REPRESENTING BIT IN BYTE CONTTAINING LCN
               2909: *
  CEEF         2910: LASTSECTORREADQ    ; QUEUE OF RDSI'S IN LRU ORDER
CEEF 0014      2911:         RMB      RDSI:SIZE       ONLY RDSI:FLINK,RDSI:BLINK ARE VALID
               2912: *
CF03 0001      2913: READFLAG  RMB      1       WHICH ENTRY: INVENTSECTOR OR READSECTOR
CF04 0002      2914: READSECTORDBP      RMB      2       POINTER TO SECTORDB BLOCK FOR READSECTOR
CF06 0001      2915: REMOVESECTORCNT   RMB      1       IOCB COUNTER FOR REMOVERDSI
CF07 0002      2916: REMOVEIOCBPTR     RMB      2       POINTER FOR REMOVERDSI
               2917: *
CF09 0001      2918: NRDSIS  RMB      1       # RDSI'S ACTUALLY SET UP (255 MAX)
CF0A 0001      2919: NFCBS     RMB      1       NUMBER OF FCBS TO SEARCH (SEARCHFCBS)
CF0B 0001      2920: NDRIVES RMB      1       NUMBER OF DISKINFO TABLES
               2921: *
CF0C 0000      2922: ERRFCBPOINTER     FDB      0       POINTER TO ERROR MESSAGE FCB
               2923: *       INIT AS ZERO IN CASE OF ERROR DURING INIT PROCESS
CF0E 0002      2924: MAXSECTORSIZE     RMB      2       SIZE OF LARGEST SECTOR
CF10 0002      2925: SYSFCBPOINTER     RMB      2       POINTER TO SPECIAL SYSTEM FCB (USED BY DELETE)
CF12 0007      2926: SYSSECTORDB       RMB      SECTORDB:SIZE     SPECIAL SYSTEM SECTORDB
               2927: *
CF19 0002      2928: LOCATERDCNX        RMB      2       TEMP FOR LOCATERDCN
CF1B 0002      2929: DCBPTRSAVE RMB      2       SAVED COPY OF DCBPOINTER (USED BY DISKxxx)
               2930: *
CF1D 0002      2931: LOADSYSCALLPTR     RMB      2       POINTER TO LOAD SYSCALL BLOCK




ASM/6800 1.4A0: CF1F SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 96; Form 1      SDOS FRONT END VARIABLE STORAGE
SDOS11G.ASM
CF1F D100      2933: SYSCALLX  FDB      OPCODES&$FF00    USED BY "SYSCALL$" TO JUMP INDEXED ON OPCODE
  CF22         2934:         ORG     (*+1)/2*2       ENSURES EVEN ADDRESS FOR SDOSSTACK
CF22 0002      2935: SDOSSTACK RMB      2       POINTER TO BASE OF STACK USED BY SDOS
CF24 0002      2936:         RMB      2       THIS HOLE MUST FOLLOW SDOSSTACK
               2937: *                       BECAUSE IT'S USED BY THE COPYRIGHT CHECK
CF26 0002      2938: USERSLASTERROR   RMB      2
CF28 93        2939: EXITDAMAGEPTR     FCB       ((EXITDAMAGE-22)/2)&$FF
CF29 6C        2940:         FCB       ((EXITDAMAGE-22)/2)/256
CF2A 0003      2941: DECBUF    RMB      3       CONVERSION BUFFER FOR DISPLAYERROR
CF2D 0002      2942: ERRORNUMBER      RMB      2       THIS MUST FOLLOW DECBUF
CF2F 0006      2943: STRINGBUFFER     RMB      6       ASCII BUFFER FOR DISPLAYERROR
CF35 0022      2944: LOGIOCB   RMB      IOCB:SIZE
CF57 0022      2945: SYSIOCB   RMB      IOCB:SIZE
               2946: *
               2947: *       TASKING SYSTEM VARIABLES
               2948: *
CF79 00        2949: DONTSTOPME      FCB       0       0 --> OK TO SCHEDULE
               2950: *                       1 --> IN TASK CRITICAL REGION; DON'T RESCHEDULE!
CF7A 0001      2951: SURPRISE        RMB      1       <> 0 --> SCHEDULING DECISION IS OK
               2952: *
CF7B 0002      2953: SCHEDX   RMB      2       TEMPORARY X STORAGE FOR SCHEDULING ROUTINES
               2954: 
               2955: *       THE FOLLOWING ARE SET UP BY SDOSINIT FROM THE CONFIGURATION TABLE
               2956: *
  CF7D         2957: INTDISABLE        ;JMP    INTDISABLE        DISABLE ALL INTERRUPTS SUBROUTINE (PRESERV
CF7D 7ECF7D    2958:         JMP     INTDISABLE
  CF80         2959: INTENABLE ;JMP    INTENABLE ENABLE ALL INTERRUPTS SUBROUTINE (PRESERVES (X))
CF80 7ECF80    2960:         JMP     INTENABLE
  CF83         2961: INTRTI  ;JMP    INTRTI  SET PRIORITY INTERRUPT MASK AND DO RTI (CODE)
CF83 7ECF83    2962:         JMP     INTRTI
CF86 0002      2963: INTERRUPTSTACK    RMB      2       COPY OF CNFG:INTERRUPTSTACK
  CF88         2964: JMPIOINT        ;JMP    JMPIOINT        JUMPS TO I/O DEVICE POLL CHAIN
CF88 7ECF88    2965:         JMP     JMPIOINT
               2966: *
               2967: *       STUFF NEEDED TO KILL USER PROGRAMS
               2968: *
CF8B 01        2969: KILLREQUESTEDF  FCB       1       0 --> KILL WAS REQUESTED WHILE UNKILLABLE
CF8C 01        2970: KILLEDF FCB       1       0 --> ALREADY KILLED; 1--> NOT KILLED
CF8D 00        2971: SDOSRECURSIVECALL  FCB       0       0 --> SDOS NOT CALLED
               2972: *                       > 0 --> SDOS CALLED, USERRETAPTR IS VALID




ASM/6800 1.4A0: CF8E SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 97; Form 1      SDOS FRONT END VARIABLE STORAGE
SDOS11G.ASM
CF8E 0002      2973: USERRETAPTR      RMB      2       USER PROGRAM'S STACK REGISTER CONTENTS ON ENTRY TO S
               2974: *                       POINTS TO HIS RETURN ADDRESS (USED BY "KILLUSERPROGRAM")
CF90 0002      2975: USERSYSCALLPTR    RMB      2       POINTS TO USER'S LAST SYSCALL BLOCK




ASM/6800 1.4A0: CF90 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 98; Form 1      SDOS FRONT END VARIABLE STORAGE
SDOS11G.ASM
               2977: *
               2978: *       INTERNAL SYSCALL CONTROL BLOCKS
               2979: *
CF92 00        2980: CONSOLEOPEN      FCB       SYSCALL:OPEN      USED TO OPEN CONSOLE WHEN EOF HIT ON "DO"
CF93 0E        2981:         FCB       OPEN:SCLEN
CF94 00        2982:         FCB       0       CHANNEL
CF95 00        2983:         FCB       IGNORED 2ND PARAMETER BYTE
CF96 0000      2984: CONSOLENAMEPTR    FDB      CHANGED   POINTER TO CONSOLE NAME (SET BY SDOSINIT)
CF98 0000      2985: CONSOLENAMELEN    FDB      CHANGED   LENGTH OF CONSOLE NAME (SET BY SDOSINIT)
CF9A 0000      2986:         FDB      CHANGED   EXPECTED VALUE OF 2
CF9C CFE8      2987:         FDB      BUFFER   WHERE TO PUT # BYTES OF FILENAME USED
CF9E 0002      2988:         FDB      2       SIZE OF EXPECTED RESPONSE
               2989: *
CFA0 0F        2990: ACKCONTROLC FCB       SYSCALL:STATUS     SYSCALL USED TO ACK ^C^C
CFA1 0E        2991:         FCB       STATUS:SCLEN
CFA2 0034      2992:         FCB       0,SC:GETLINEFLAGSHINT
CFA4 00000000  2993:         FDB      IGNORED,IGNORED
CFA8 0000      2994:         FDB      CHANGED
CFAA CFE80001  2995:         FDB      BUFFER,1 READ LINE FLAGS TO GET ^C ERROR
               2996: *
CFAE 0C        2997: LOGOUT  FCB       SYSCALL:WRITEA     USED TO COPY CONSOLE OUTPUT TO LOG FILE
CFAF 08        2998:         FCB       WRITEA:SCLEN
CFB0 FF        2999:         FCB       LOGCHANNEL        CHANNEL
CFB1 00        3000:         FCB       IGNORED 2ND PARAM
CFB2 0000      3001:         FDB      CHANGED   BUFFER ADDRESS
CFB4 0000      3002:         FDB      CHANGED   REQUESTED COUNT
CFB6 0000      3003:         FDB      CHANGED   REPLY COUNT -- ALWAYS ZEROED
CFB8 00000000  3004:         FDB      IGNORED,IGNORED REPLY BUFFER AND LENGTH
CFBC 00000000  3005:         FDB      CHANGED,CHANGED     = DESIRED FILE POSITION
               3006: *
CFC0 0C        3007: DISPOUT FCB       SYSCALL:WRITEA     USED TO WRITE ERROR NUMBER ON CONSOLE
CFC1 08        3008:         FCB       WRITEA:SCLEN
CFC2 00        3009:         FCB       0       CHANNEL
CFC3 00        3010:         FCB       IGNORED
CFC4 CF2F      3011:         FDB      STRINGBUFFER     BUFFER ADDRESS
CFC6 0000      3012:         FDB      CHANGED   REQUESTED COUNT
               3013: *
CFC8 0B        3014: DISPREADB3        FCB       SYSCALL:READB       USED TO READ POINTER FROM $ERRORMSGS F
CFC9 0E        3015:         FCB       READB:SCLEN
CFCA FE        3016:         FCB       SYSCHANNEL        CHANNEL




ASM/6800 1.4A0: CFCB SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 99; Form 1      SDOS FRONT END VARIABLE STORAGE
SDOS11G.ASM
CFCB 00        3017:         FCB       IGNORED
CFCC 00000000  3018:         FDB      IGNORED,IGNORED WRBUF,WRLEN
CFD0 0000      3019:         FDB      CHANGED   REPLY LENGTH: EXPECTED VALUE OF 3
CFD2 CFD7      3020:         FDB      DISPPOS1+1      BUFFER ADDRESS
CFD4 0003      3021:         FDB      3       REQUESTED COUNT
  CFD6         3022: DISPPOS1        ; THESE 4 BYTES GET MODIFIED BY DISPREADB3, DISPUSERERROR
CFD6 00000000  3023:         FCB       0,CHANGED,CHANGED,CHANGED
               3024: *
CFDA 0A        3025: DISPGETCHAR       FCB       SYSCALL:READA       USED TO READ ERROR MESSAGE FROM $ERROR
CFDB 0E        3026:         FCB       READA:SCLEN
CFDC FE        3027:         FCB       SYSCHANNEL        CHANNEL
CFDD 00        3028:         FCB       0       LINE MODE FLAG: NOT LINE MODE
CFDE 00000000  3029:         FDB      IGNORED,IGNORED WRBUF,WRLEN
CFE2 0000      3030:         FDB      CHANGED   RPLEN: EXPECTED VALUE OF 1
CFE4 CFE8      3031:         FDB      BUFFER   BUFFER ADDRESS
CFE6 0001      3032:         FDB      1       REQUESTED COUNT
               3033: *
CFE8 00000000  3034: BUFFER   FDB      CHANGED,CHANGED     4 BYTE SCRATCH AREA
               3035: *
  CFEC         3036: EXITCHAIN ; USED TO CHAIN TO "DEFAULTPROGRAM"
CFEC 06        3037:         FCB       SYSCALL:CHAIN
CFED 0E        3038:         FCB       CHAIN:SCLEN
CFEE 0000      3039:         FCB       IGNORED,IGNORED PARAMS
CFF0 D870000E  3040:         FDB      DEFAULTPROG,DEFAULTPROGL  WRBUF,WRLEN
CFF4 0000      3041:         FDB      CHANGED   RESULT SIZE: EXPECTED VALUE OF 4
CFF6 D02D0004  3042:         FDB      LOADFILEPOS,4    READ-BACK BUFFER DEFINITION
               3043: *
  CFFA         3044: EXITSCLOSE       ; USED BY EXITS TO CLOSE THE I/O CHANNELS
CFFA 02        3045:         FCB       SYSCALL:CLOSE
CFFB 03        3046:         FCB       CLOSE:SCLEN
CFFC 00        3047:         FCB       CHANGED   CHANNEL NUMBER TO BE CLOSED
               3048: *
  CFFD         3049: IOBLOCK   ; ADJUSTED I/O REQUEST GETS COPIED HERE
  000E         3050:         RPT     SCBLK:DATA
CFFD 00        3051:         FCB       CHANGED




ASM/6800 1.4A0: D00A SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 100; Form 1     SDOS FRONT END VARIABLE STORAGE
SDOS11G.ASM
               3053: *       SDOS SAFEGUARD CODE
               3054: *       THIS CODE IS USED TO ENSURE THAT SD'S VERSION OF SERIALNUMBER.SYS...
               3055: *       WAS TRULY EXECUTED PROPERLY.  OUR VERSION PASSES A SECRET SIGNAL
               3056: *       TO "CHAIN" IN THE SYSCALL:PARAMS FEILD; THIS CODE IS PASSED TO
               3057: *       THIS ROUTINE IN THE (X) REGISTER.  ANY OTHER CODE PASSED IN (X)
               3058: *       WILL CAUSE SDOS TO EVENTUALLY BLOW UP (I.E., LONG TERM UNRELIABLE).
               3059: *       THIS CODE IS INTENDED TO BE EXTREMELY OBTUSE, TO PREVENT WOULD-BE
               3060: *       PIRATES FROM UNDERSTANDING (A DISASSEMBLY OF) IT, AND THEREFORE
               3061: *       BREAKING OUR PROTECTION.  WE HOPE IT WORKS!
               3062: *
D00B 01        3063:         NOP             FORCE DISASSEMBLER IN SYNC WITH THE WRONG STUFF
D00C 01        3064:         NOP
D00D 01        3065:         NOP
D00E F7        3066:         FCB       $F7     STAB EXTENDED OPCODE, TO KEEP DISASSEMBLER IN FALSE SYNC
  0001         3067:         IF      M6800!M6801
  D00F         3068: SAFEGAURD ; ENTRY POINT TO SDOS SAFEGAURDING CODE
D00F 34        3069:          DES
D010 31        3070:         INS
D011 39        3071:         RTS
D012 3B        3072:         RTI
D013 3B        3073:         RTI
D014 3B        3074:         RTI
D015 3B        3075:         RTI
               3076: 
               3077: ;ZZZ        FCB       $FF     STX EXTENDED ONTO ADDRESS PART OF INSTRUCTION...
               3078: ;ZZZ        FDB      *       THEREBY SETTING UP SECRET MESSAGE AS EXECUTABLE CODE
  D016         3079: SAFEGAURD1
               3080: ;ZZZ        ROLA             RED HERRING INSTRUCTION
               3081: ;ZZZ        LDX     #$3B3B    "RTI, RTI" OPCODES
D016 8634      3082:         LDAA     #$34    "DES" OPCODE
D018 FFD016    3083:         STX     SAFEGAURD1        PLANT RTI, RTI AFTER SDOS ENABLING KEY
               3084:         ;STA     SAFEGAURD PLANT "DES" AT SAFEGAURD ENTRY POINT
D01B B7D00F    3085:         STAA      SAFEGAURD
D01E 39        3086:         RTS             CHAINING TO INITIALIZE.SYS OR DEFAULTPGM...
               3087: *       WILL ZERO USER SPACE BECAUSE OF INCOMPATIBLE DECRYPTION KEYS!




ASM/6800 1.4A0: D01E SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 101; Form 1     SDOS FRONT END VARIABLE STORAGE
SDOS11G.ASM
               3089: *       AFTER EXECUTION WITH "INS, RTS" SDOS ENABLING KEY IN (X),
               3090: *       THE SAFEGAURD CODE CONVERTS ITSELF INTO THE FOLLOWING:
               3091: *
               3092: *       SAFEGAURD
               3093: *               DES
               3094: *               INS
               3095: *               RTS
               3096: *               RTI
               3097: *               RTI
               3098: *               RTI
               3099: *               RTI
               3100: *
               3101: *       IF THE PROPER ENABLING KEY IS NOT GIVEN, THE "DES" ... "RTI" SEQUENCE
               3102: *       WILL BLOW UP ON SUCCESSIVE CALLS TO SAFEGAURD!
  0001         3103:         ELSE    (M6809)
 *S*           3104: SAFEGAURD ; ENTRY POINT TO SDOS SAFEGAURDING CODE
 *S*           3105:         ;LDD    #$7F32  = BYTES OF "LEAS -1,S" REVERSED (WHEEE!)
 *S*           3106:         LDAB      #($7F32)&$FF
 *S*           3107:         LDAA      #($7F32)/256
 *S*           3108:         STX     *       STORE USER'S PURPORTED "(LEAS) 1,S/RTS"
 *S*           3109:         ;LDX    #$3B3B    "RTI","RTI" OPCODES
 *S*           3110:         LDX     #$3B3B
 *S*           3111:         STX     SAFEGAURD+5       PLANT "RTI","RTI"
 *S*           3112:         ;STD    SAFEGAURD+1       PLANT "    ...-1,S/LEAS ..."
 *S*           3113:         STAB      SAFEGAURD+1+1
 *S*           3114:         STAA      SAFEGAURD+1
 *S*           3115:         ;STB     SAFEGAURD PLANT "LEAS..."
 *S*           3116:         STAB      SAFEGAURD
 *S*           3117:         RTS
               3118:         FIN




ASM/6800 1.4A0: D01F SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 102; Form 1     SDOS FRONT END VARIABLE STORAGE
SDOS11G.ASM
D01F 0F        3120: LOADGETPOS       FCB       SYSCALL:STATUS     USED BY LOADER TO PERFORM A "SKIP N BYTE
D020 0E        3121:         FCB       STATUS:SCLEN
D021 FE        3122:         FCB       SYSCHANNEL
D022 00        3123:         FCB       SC:GETPOS
D023 00000000  3124:         FDB      IGNORED,IGNORED WRBUF,WRLEN
D027 0000      3125:         FDB      CHANGED   RPLEN: EXPECTED VALUE OF 4
D029 D02D      3126:         FDB      LOADFILEPOS      PLACE TO PUT LOAD FILE POSITION
D02B 0004      3127:         FDB      4       SIZE OF LOAD FILE POSITION BUFFER
               3128: *
  D02D         3129: LOADFILEPOS      ; CURRENT POSITION OF LOAD FILE
D02D 00000000  3130:         FCB       CHANGED,CHANGED,CHANGED,CHANGED
               3131: *
  D031         3132: FILLDECRYPTBUFFER ; SYSCALL BLOCK TO READ 8 BYTES INTO DECRYPTBUFFER
D031 0B0E      3133:          FCB       SYSCALL:READB,READB:SCLEN
D033 FE00      3134:          FCB       SYSCHANNEL,IGNORED
D035 00000000  3135:          FDB      IGNORED,IGNORED
D039 0000      3136:          FDB      CHANGED   EXPECTED VALUE IS 8
D03B D05D0008  3137:          FDB      DECRYPTBUFFER,8
               3138: 
  D03F         3139: LOADMULTIPLEOF8   ; SYSCALL BLOCK TO LOAD MULTIPLE OF 8 BYTES
D03F 0B0E      3140:          FCB       SYSCALL:READB,READB:SCLEN
D041 FE00      3141:          FCB       SYSCHANNEL,IGNORED
D043 00000000  3142:          FDB      IGNORED,IGNORED
D047 0000      3143:          FDB      CHANGED   EXPECTED VALUE = OPTIMIZEDLOADCOUNT
  D049         3144: LOADADDRESS ; THIS IS WHERE LOADER WILL PLACE NEXT LOADED BYTE
D049 0000      3145:          FDB      CHANGED   REPLY BUFFER
  D04B         3146: OPTIMIZEDLOADCOUNT ; THIS IS NUMBER OF BYTES TO LOAD
D04B 0000      3147:          FDB      CHANGED   ALWAYS A MULTIPLE OF 8
               3148: 
  D04D         3149: GET1BYTE ; SYSCALL BLOCK USED TO READ 1 BYTE FROM SYSCHANNEL INTO BUFFER
D04D 0B0E      3150:         FCB       SYSCALL:READB,READB:SCLEN
D04F FE00      3151:         FCB       SYSCHANNEL,IGNORED
D051 00000000  3152:         FDB      IGNORED,IGNORED
D055 0000      3153:         FDB      CHANGED   RPLEN: EXPECTED VALUE OF 1
D057 CFE80001  3154:         FDB      BUFFER,1 WHERE TO PLACE REPLY
               3155: 
D05B D05D      3156: DECRYPTBUFPTR FDB DECRYPTBUFFER POINTER TO SCAN DECRYPTBUFFER
               3157: 
  D05D         3158: DECRYPTBUFFER     ; THIS IS WHERE CHUNKS OF 8 BYTES GET READ FOR DECRYPTION
D05D 00010203  3159:         fcb     0,1,2,3,4,5,6,7 Loader decryption area




ASM/6800 1.4A0: D061 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 103; Form 1     SDOS FRONT END VARIABLE STORAGE
SDOS11G.ASM
  D065         3160: DECRYPTBUFFEREND  ; END OF DECRYPT BUFFER
               3161: 
D065 00        3162: NKEYS   FCB       CHANGED   TYPE 5 RECORD: KEY COUNT
               3163: 
D066 01        3164: RUNNINGENCRYPTEDFLAG      FCB       1       HOLDS RUNNINGENCRYPTED FLAG IF MASK ROM
               3165: ;                       initially TRUE so VTDRIVER will not recognize ^D during boot p
               3166: 
D067 00        3167: OKTODECRYPTFLAG   FCB       CHANGED   1 --> OK TO DECRYPT THIS MODULE
               3168: 
  D068         3169: OLDKEYENCRYPTED  ; ENCRYPTED VERSION OF LAST DECRYPTION KEY USED
D068 00000000  3170:         FCB       0,0,0,0,0,0,0,0 SPACE TO HOLD KEY (8 BYTES)
               3171: 
  D070         3172: NEWKEYENCRYPTED  ; ENCRYPTED VERSION OF KEY USED TO LOAD THIS FILE
D070 00000000  3173:         FCB       0,0,0,0,0,0,0,0 SPACE TO HOLD 8 BYTE KEY




ASM/6800 1.4A0: D074 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 104; Form 1     SDOS FRONT END VARIABLE STORAGE
SDOS11G.ASM
               3175: *        Encryption Subroutine
               3176: *        Encrypts 8 data bytes pointed to by (X)...
               3177: *            according to 8 byte key stored in locations KEY
               3178: *        Result is stored as 8 byte string at (X)
               3179: *
               3180: *        Encryption algorithm is logically as follows:
               3181: *        (Some minor modifications make it fast enough to run on a 6800)
               3182: *            Result:=ValuetobeEncrypted
               3183: *            For bit=64 to 1 -- one iteration per bit
               3184: *                If MSB(Result) -- Inspect MSB of Result to decide what to do
               3185: *                Then
               3186: *                    -- Encrypt step: XOR with KEY
               3187: *                    Result:=(Result XOR KEY)*2+[MSB(Result) XOR MSB(KEY)]
               3188: *                Else
               3189: *                    -- Randomize step: XOR with Randomizing constant
               3190: *                    Result:=(Result XOR RNDIZER)*2+[MSB(Result) XOR MSB(KEY)]
               3191: *                Fi
               3192: *            Endloop -- Encrypted result is in Result
               3193: *
               3194: *       Decryption algorithm is logically as follows:
               3195: *            Result:=ValuetobeDecrypted
               3196: *            For bit=64 to 1 -- one iteration per bit
               3197: *                If LSB(Result) XOR MSB(KEY) -- Decrypt LSB to decide how undo
               3198: *                Then -- Decrypt step
               3199: *                     Result:=[INT(Result/2)+LSB(Result)*2^63] XOR KEY
               3200: *                Else -- "UnRandomize" step
               3201: *                     Result:=INT([Result XOR (Randomizer*2)]/2)
               3202: *                Fi
               3203: *             Endloop -- Decrypted result is in "Result"




ASM/6800 1.4A0: D074 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 105; Form 1     SDOS FRONT END VARIABLE STORAGE
SDOS11G.ASM
               3205: *
               3206: *        Randomizer constant is as follows (random 64 bit string):
               3207: *        To prevent loss of this string due to accidental damage to this text,
               3208: *        it is repeated 5 times here:
               3209: *        %0101010110100110000010101001110011100011010101111010110000111001
               3210: *        %0101010110100110000010101001110011100011010101111010110000111001
               3211: *        %0101010110100110000010101001110011100011010101111010110000111001
               3212: *        %0101010110100110000010101001110011100011010101111010110000111001
               3213: *        %0101010110100110000010101001110011100011010101111010110000111001
               3214: *
               3215: *        The Hex equivalent of the randomizer string is:
               3216: *
               3217: *        $55 A6 0A 9C E3 57 AC 39
               3218: *
               3219: *
               3220: *        KEY is a buffer of 8 bytes; it should be in page zero for speed!
               3221: *        We have chosen to put it inline in EORA #.. instructions instead
               3222: *        in the Decrypt routine.  Encrypt simply references the decrypt bytes.
               3223: *
               3224: *       NOTE: IT MIGHT BE POSSIBLE TO SPEED UP THIS CODE FOR 6801/6809!




ASM/6800 1.4A0: D074 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 106; Form 1     SDOS FRONT END VARIABLE STORAGE
SDOS11G.ASM
  D078         3226: decrypt1        ; do "decrypt step"
D078 A700      3227:         staa    0,x
D07A A601      3228:         ldaa    1,x     EOR with this byte of key
D07C 46        3229:         rora            shift right, saving carry from left
  D07E         3230: Key1    equ     *+1
               3231:         ;eora   #$16    $16 is red herring
D07D 8816      3232:         EORA     #$16
D07F A701      3233:         staa    1,x
D081 A602      3234:         ldaa    2,x     EOR with this byte of key
D083 46        3235:         rora            shift right, saving carry from left
  D085         3236: Key2    equ     *+1
               3237:         ;eora   #$73    $73 is red herring
D084 8873      3238:         EORA     #$73
D086 A702      3239:         staa    2,x
D088 A603      3240:         ldaa    3,x     EOR with this byte of key
D08A 46        3241:         rora            shift right, saving carry from left
  D08C         3242: Key3    equ     *+1
               3243:         ;eora   #$F6    $F6 is red herring
D08B 88F6      3244:         EORA     #$F6
D08D A703      3245:         staa    3,x
D08F A604      3246:         ldaa    4,x     EOR with this byte of key
D091 46        3247:         rora            shift right, saving carry from left
  D093         3248: Key4    equ     *+1
               3249:         ;eora   #$09    $09 is red herring
D092 8809      3250:         EORA     #$09
D094 A704      3251:         staa    4,x
D096 A605      3252:         ldaa    5,x     EOR with this byte of key
D098 46        3253:         rora            shift right, saving carry from left
  D09A         3254: Key5    equ     *+1
               3255:         ;eora   #$56    $56 is red herring
D099 8856      3256:         EORA     #$56
D09B A705      3257:         staa    5,x
D09D A606      3258:         ldaa    6,x     EOR with this byte of key
D09F 46        3259:         rora            shift right, saving carry from left
  D0A1         3260: Key6    equ     *+1
               3261:         ;eora   #$ED    $ED is red herring
D0A0 88ED      3262:         EORA     #$ED
D0A2 A706      3263:         staa    6,x
D0A4 A607      3264:         ldaa    7,x     EOR with this byte of key
D0A6 46        3265:         rora            shift right, saving carry from left




ASM/6800 1.4A0: D0A6 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 107; Form 1     SDOS FRONT END VARIABLE STORAGE
SDOS11G.ASM
  D0A8         3266: Key7    equ     *+1
               3267:         ;eora   #$41    $41 is red herring
D0A7 8841      3268:         EORA     #$41
D0A9 A707      3269:         staa    7,x
D0AB 5A        3270:         decb            down count # iterations
D0AC 260F      3271:         bne     decryptloop     b/ more to do
               3272:         ;jmp    decryptrts      all done, go clean up and exit!
D0AE 7ED102    3273:         JMP     decryptrts




ASM/6800 1.4A0: D0AE SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 108; Form 1     SDOS FRONT END VARIABLE STORAGE
SDOS11G.ASM
               3275: *       Decrypt -- Undoes Encrypt
               3276: *       Decryption key is stored inline in locations KEY0, KEY1, ... KEY7
               3277: *       Block of 8 bytes at (X) is decrypted in place
               3278: *
  D0B1         3279: Decrypt ; Do the encryption in reverse, literally
               3280: *       ldab    #64     64 iterations of reverse encryption required
D0B1 F6D0A8    3281:         ldab    key7    do 8 + 2 lsb of key iterations
D0B4 C403      3282:         andb    #3
D0B6 CB08      3283:         addb    #8
               3284:         ;jsr    eorall8bytes    unscramble least significant byte
D0B8 BDD108    3285:         JSR     eorall8bytes
D0BB A707      3286:         staa    7,x     do first decryption iteration
  D0BD         3287: decryptloop ; right shift current value and EOR with key
D0BD 46        3288:         rora            Shift encrypted "encrypt" bit into carry...
D0BE A600      3289:         ldaa    0,x     EOR with this byte of key
D0C0 46        3290:         rora            shift right, saving carry from left
  D0C2         3291: Key0    equ     *+1
               3292:         ;eora   #$92    92 is red herring
D0C1 8892      3293:         EORA     #$92
  D0C3         3294: SDOSCHKSUMBASE     ; ALL CODE FROM HERE TO END OF SDOS IS CHECKSUMMED!!
D0C3 2BB3      3295:         bmi     decrypt1        b/ encrypt bit was 1, go do "decrypt step"
  D0C5         3296: decrypt0 ; "encrypt" bit was 0, right shift current value and EOR with randomizer
               3297:         ;eora   key0    undo "eora key" done by decryptloop
D0C5 B8D0C2    3298:         EORA     key0
D0C8 847F      3299:         anda    #$7F    force MSB to be zero
               3300:         ;eora   #$55    EOR with randomizer byte
D0CA 8855      3301:         EORA     #$55
D0CC A700      3302:         staa    0,x     (Note: MSB(Randomizer) must be zero)
D0CE A601      3303:         ldaa    1,x     EOR with this byte of key
D0D0 46        3304:         rora            shift right, saving carry from left
               3305:         ;eora   #$A6
D0D1 88A6      3306:         EORA     #$A6
D0D3 A701      3307:         staa    1,x
D0D5 A602      3308:         ldaa    2,x     EOR with this byte of key
D0D7 46        3309:         rora            shift right, saving carry from left
               3310:         ;eora   #$0A
D0D8 880A      3311:         EORA     #$0A
D0DA A702      3312:         staa    2,x
D0DC A603      3313:         ldaa    3,x     EOR with this byte of key
D0DE 46        3314:         rora            shift right, saving carry from left




ASM/6800 1.4A0: D0DE SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 109; Form 1     SDOS FRONT END VARIABLE STORAGE
SDOS11G.ASM
               3315:         ;eora   #$9C
D0DF 889C      3316:         EORA     #$9C
D0E1 A703      3317:         staa    3,x
D0E3 A604      3318:         ldaa    4,x     EOR with this byte of key
D0E5 46        3319:         rora            shift right, saving carry from left
               3320:         ;eora   #$E3
D0E6 88E3      3321:         EORA     #$E3
D0E8 A704      3322:         staa    4,x
D0EA A605      3323:         ldaa    5,x     EOR with this byte of key
D0EC 46        3324:         rora            shift right, saving carry from left
               3325:         ;eora   #$57
D0ED 8857      3326:         EORA     #$57
D0EF A705      3327:         staa    5,x
D0F1 A606      3328:         ldaa    6,x     EOR with this byte of key
D0F3 46        3329:         rora            shift right, saving carry from left
               3330:         ;eora   #$AC
D0F4 88AC      3331:         EORA     #$AC
D0F6 A706      3332:         staa    6,x
D0F8 A607      3333:         ldaa    7,x     EOR with this byte of key
D0FA 46        3334:         rora            shift right, saving carry from left
               3335:         ;eora   #$39
D0FB 8839      3336:         EORA     #$39
D0FD A707      3337:         staa    7,x
D0FF 5A        3338:         decb            down count # iterations
D100 26BB      3339:         bne     decryptloop     b/ more iterations to try
  D102         3340: decryptrts
               3341:         ;jsr    eorall8bytes    now unscramble Most significant byte
D102 BDD108    3342:         JSR     eorall8bytes
D105 A700      3343:         staa    0,x
D107 39        3344:         rts             decryption complete, result is in Result




ASM/6800 1.4A0: D107 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 110; Form 1     SDOS FRONT END VARIABLE STORAGE
SDOS11G.ASM
  D108         3346: Eorall8bytes ; Compute XOR of all 8 bytes
D108 A604      3347:         ldaa    4,x     Why are the index displacements all mixed up?
               3348:         ;eora   7,x     Because it puzzles the hell out of whoever...
D10A A807      3349:         EORA     7,X
               3350:         ;eora   5,x     attempts to dis-assemble it!
D10C A805      3351:         EORA     5,X
               3352:         ;eora   0,x
D10E A800      3353:         EORA     0,X
               3354:         ;eora   2,x
D110 A802      3355:         EORA     2,X
               3356:         ;eora   6,x
D112 A806      3357:         EORA     6,X
               3358:         ;eora   1,x
D114 A801      3359:         EORA     1,X
               3360:         ;eora   3,x     so Most sig byte of result depends on all 64 bits
D116 A803      3361:         EORA     3,X
D118 39        3362:         rts
               3363: 
  0000         3364:         if      0       Encrypt is not needed by this version of SDOS
 *S*           3365: EncryptLSB ; Set MSB to XOR of all 8 bytes
 *S*           3366: *       think about this, someday...
 *S*           3367: *       Dennis Painter sez: put key just below (S) and run with
 *S*           3368: *       Interrupts disabled.    Then it cannot be damaged unless an
 *S*           3369: *       NMI occurs, which will erase it.
 *S*           3370: Encrypt ; And now it begins
 *S*           3371: *       ldab    #64     = # iterations to execute (too slow!)
 *S*           3372:         ldab    key+7   do 8 + 2 lsb of key iterations
 *S*           3373:         andb    #3
 *S*           3374:         addb    #8
 *S*           3375:         ;jsr    Eorall8bytes    scramble MSB
 *S*           3376:         JSR     Eorall8bytes
 *S*           3377:         staa    0,x     examine sign bit to decide what to do
 *S*           3378:         bpl     encryptrandomize b/ MSB is zero, go do randomize step
 *S*           3379: encryptstep ; MSB is one, perform encryption step
 *S*           3380: *       EOR current value with key, shift left
 *S*           3381:         ldaa    7,x     EOR this byte with key byte
 *S*           3382:         ;eora   key+7
 *S*           3383:         EORA     key+7
 *S*           3384:         asla            shift left, forcing LSB=0
 *S*           3385:         staa    7,x




ASM/6800 1.4A0: D118 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 111; Form 1     SDOS FRONT END VARIABLE STORAGE
SDOS11G.ASM
 *S*           3386:         ldaa    6,x     EOR this byte with key byte
 *S*           3387:         ;eora   key+6
 *S*           3388:         EORA     key+6
 *S*           3389:         rola            shift left, saving carry from byte to right
 *S*           3390:         staa    6,x
 *S*           3391:         ldaa    5,x     EOR this byte with key byte
 *S*           3392:         ;eora   key+5
 *S*           3393:         EORA     key+5
 *S*           3394:         rola            shift left, saving carry from byte to right
 *S*           3395:         staa    5,x
 *S*           3396:         ldaa    4,x     EOR this byte with key byte
 *S*           3397:         ;eora   key+4
 *S*           3398:         EORA     key+4
 *S*           3399:         rola            shift left, saving carry from byte to right
 *S*           3400:         staa    4,x
 *S*           3401:         ldaa    3,x     EOR this byte with key byte
 *S*           3402:         ;eora   key+3
 *S*           3403:         EORA     key+3
 *S*           3404:         rola            shift left, saving carry from byte to right
 *S*           3405:         staa    3,x
 *S*           3406:         ldaa    2,x     EOR this byte with key byte
 *S*           3407:         ;eora   key+2
 *S*           3408:         EORA     key+2
 *S*           3409:         rola            shift left, saving carry from byte to right
 *S*           3410:         staa    2,x
 *S*           3411:         ldaa    1,x     EOR this byte with key byte
 *S*           3412:         ;eora   key+1
 *S*           3413:         EORA     key+1
 *S*           3414:         rola            shift left, saving carry from byte to right
 *S*           3415:         staa    1,x
 *S*           3416:         ldaa    0,x     EOR this byte with key byte
 *S*           3417:         ;eora   key+0
 *S*           3418:         EORA     key+0
 *S*           3419:         rola            shift left, saving carry from byte to right
 *S*           3420:         bcc     encryptstep0    b/ encrypted MSB is now zero
 *S*           3421:         ;inc    7,x     remember that encrypted MSB is a one
 *S*           3422:         INC      7,X
 *S*           3423: encryptstep0 ; encrypted MSB has been recorded in LSB of result
 *S*           3424:         decb            down count # iterations to perform
 *S*           3425:         beq     encryptrts      b/ done encrypting




ASM/6800 1.4A0: D118 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 112; Form 1     SDOS FRONT END VARIABLE STORAGE
SDOS11G.ASM
 *S*           3426:         staa    0,x
 *S*           3427:         bmi     encryptstep     b/ new MSB is one, go do encrypt step
 *S*           3428: encryptrandomize ; MSB is zero, perform randomize step
 *S*           3429:         ldaa    7,x     EOR this byte with randomizer byte
 *S*           3430:         ;eora   #$39
 *S*           3431:         EORA     #$39
 *S*           3432:         asla            shift left, forcing LSB to be zeroed
 *S*           3433:         staa    7,x
 *S*           3434:         ldaa    6,x     EOR this byte with randomizer byte
 *S*           3435:         ;eora   #$AC
 *S*           3436:         EORA     #$AC
 *S*           3437:         rola            shift left, saving carry from byte to right
 *S*           3438:         staa    6,x
 *S*           3439:         ldaa    5,x     EOR this byte with randomizer byte
 *S*           3440:         ;eora   #$57
 *S*           3441:         EORA     #$57
 *S*           3442:         rola            shift left, saving carry from byte to right
 *S*           3443:         staa    5,x
 *S*           3444:         ldaa    4,x     EOR this byte with randomizer byte
 *S*           3445:         ;eora   #$E3
 *S*           3446:         EORA     #$E3
 *S*           3447:         rola            shift left, saving carry from byte to right
 *S*           3448:         staa    4,x
 *S*           3449:         ldaa    3,x     EOR this byte with randomizer byte
 *S*           3450:         ;eora   #$9C
 *S*           3451:         EORA     #$9C
 *S*           3452:         rola            shift left, saving carry from byte to right
 *S*           3453:         staa    3,x
 *S*           3454:         ldaa    2,x     EOR this byte with randomizer byte
 *S*           3455:         ;eora   #$0A
 *S*           3456:         EORA     #$0A
 *S*           3457:         rola            shift left, saving carry from byte to right
 *S*           3458:         staa    2,x
 *S*           3459:         ldaa    1,x     EOR this byte with randomizer byte
 *S*           3460:         ;eora   #$A6
 *S*           3461:         EORA     #$A6
 *S*           3462:         rola            shift left, saving carry from byte to right
 *S*           3463:         staa    1,x
 *S*           3464:         ldaa    key     EOR MSB of result with MSB of key
 *S*           3465:         anda    #$80    (Note: this requires that MSB(randomizer) be zero)




ASM/6800 1.4A0: D118 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 113; Form 1     SDOS FRONT END VARIABLE STORAGE
SDOS11G.ASM
 *S*           3466:         ;eora   0,x     EOR MSB with MSB of key
 *S*           3467:         EORA     0,X
 *S*           3468:         ;eora   #$55    and EOR rest with randomizer
 *S*           3469:         EORA     #$55
 *S*           3470:         rola            shift left, saving carry from byte to right
 *S*           3471:         bcc     encryptrand0    b/ encrypted MSB=0
 *S*           3472:         ;inc    7,x     record that encrypted MSB is 1
 *S*           3473:         INC      7,X
 *S*           3474: encryptrand0 ; encrypted MSB is now saved in LSB of result
 *S*           3475:         decb            down count # iterations to perform
 *S*           3476:         beq     encryptrts      b/ done encrypting
 *S*           3477:         staa    0,x
 *S*           3478:         bpl     encryptrandomize b/ next bit is zero
 *S*           3479:         ;jmp    encryptstep
 *S*           3480:         JMP     encryptstep
 *S*           3481: 
 *S*           3482: encryptrts ; encryption is complete
 *S*           3483:         staa    0,x     store MSB of final result
 *S*           3484:         ;jsr    eorall8bytes    scramble lsbyte
 *S*           3485:         JSR     eorall8bytes
 *S*           3486:         staa    7,x
 *S*           3487:         rts
               3488:         fin




ASM/6800 1.4A0: D119 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 114; Form 1     SDOS FRONT END CODE
SDOS11G.ASM
D119 0C0D      3490: SDOSMSG FCB       ASCII:FF,ASCII:CR
D11B 53444F53  3491:         FCC       'SDOS Version '
D128 31        3492:         FCB       '0+((SDOSVERSION/$10)&$F)
D129 2E        3493:         FCB       '.
D12A 31        3494:         FCB       '0+((SDOSVERSION/$1)&$F)
D12B 47        3495:         FCB       SDOSSUBREVISION
D12C 322C20    3496:         FCC       '2, '        ; ZZZ this is the sub-sdossubrevision 2
               3497:                                ; as it have all the serial/checksum validations 
               3498:                                ; disabled (commented out)
               3499: 
  0036         3500: COPYRIGHTCHECKSUM  EQU     $36
D12F 436F7079  3501: COPYRIGHT        FCC       'Copyright (C) 1978 Software Dynamics'
D153 0D        3502:         FCB       ASCII:CR
  D154         3503: COPYRIGHTEND     EQU     *




ASM/6800 1.4A0: D153 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 115; Form 1     SDOS FRONT END CODE
SDOS11G.ASM
               3505: *
               3506: *       SYSCALL MINIMUM SIZE, N-WAY OPCODE BRANCH TABLE
               3507: *
D154 0ED3F8    3508: OPCODES  OPEN:SCLEN,#OPEN OPEN FILE
D157 0ED459    3509:         CREATE:SCLEN,#CREATE CREATE A NEW FILE
D15A 03D4A9    3510:         CLOSE:SCLEN,#CLOSE CLOSE A FILE
D15D 0ED4CC    3511:         RENAME:SCLEN,#RENAME       RENAME A FILE
D160 0ED462    3512:         DELETE:SCLEN,#DELETE     DELETE A FILE
D163 0EDA44    3513:         LOAD:SCLEN,#LOAD   LOAD A FILE INTO MEMORY
D166 0ED93E    3514:         CHAIN:SCLEN,#CHAIN   CHAIN TO A FILE
D169 0ED44C    3515:         CREATELOG:SCLEN,#CREATELOG   CREATE A FILE FOR OUTPUT ON LOG CHANNEL
D16C 02D4C3    3516:         CLOSELOG:SCLEN,#CLOSELOG   CLOSE LOG OUTPUT FILE
D16F 0ED496    3517:         DISKDEFAULT:SCLEN,#DISKDEFAULT     SET DISK DEFAULT DEVICE
D172 0ED4FB    3518:         READA:SCLEN,#READA   READ ASCII BYTES FROM A FILE
D175 0ED469    3519:         READB:SCLEN,#READB   READ BINARY BYTES FROM A FILE
D178 08D5E3    3520:         WRITEA:SCLEN,#WRITEA       WRITE ASCII BYTES TO A FILE
D17B 08D470    3521:         WRITEB:SCLEN,#WRITEB       WRITE BINARY BYTES TO A FILE
D17E 04D606    3522:         CONTROL:SCLEN,#CONTROL     PERFORM A CONTROL OPERATION ON AN I/O CHANNEL
D181 0ED62A    3523:         STATUS:SCLEN,#STATUS       READ STATUS FROM AN I/O CHANNEL
D184 03D653    3524:         WAITDONE:SCLEN,#WAITDONE   WAIT FOR I/O CHANNEL OPERATION DONE
D187 02D80B    3525:         EXIT:SCLEN,#EXIT GIVE CONTROL BACK TO THE OPERATING SYSTEM
D18A 04D7EE    3526:         ERROREXIT:SCLEN,#ERROREXIT       EXIT TO SYSTEM WITH ERROR CODE
D18D 04D64B    3527:         SETERROR:SCLEN,#SETERROR REPORT AN ERROR TO THE SYSTEM
D190 0ED655    3528:         GETERROR:SCLEN,#GETERROR RETURN THE LAST ERROR CODE
D193 02D668    3529:         DISPERROR:SCLEN,#DISPLAYERROR     DISPLAY USER'S LAST ERROR
D196 02D7B6    3530:         KILLPROOF:SCLEN,#KILLPROOF       MAKE USER PROGRAM KILL-PROOF
D199 02D7BA    3531:         KILLENABLE:SCLEN,#KILLENABLE MAKE USER PROGRAM KILLABLE
D19C 02D630    3532:         DEBUG:SCLEN,#DEBUG CALL SYSTEM DEBUGGER
D19F 02D644    3533:         ATTNCHECK:SCLEN,#ATTNCHECK     OPERATOR ATTENTION CHECK
D1A2 02D220    3534:         ISCONSOLE:SCLEN,#ISCONSOLE IS CHANNEL ZERO OPEN TO CONSOLE PREDICATE
D1A5 08D39F    3535:         INTERLOCK:SCLEN,#INTERLOCK OPERATE ON INTERLOCK OBJECT
D1A8 04D3B1    3536:         DELAY:SCLEN,#DELAY DELAY FOR SPECIFIED NUMBER OF CLOCK TICKS
D1AB 0ED1EF    3537:         READLUNNAME:SCLEN,#READLUNNAME       READ NAME OF LOGICAL UNIT
D1AE 0EDA75    3538:         GETSERIALNUMBER:SCLEN,#GETSERIALNUMBER       GET SERIAL NUMBER OF COMPUTER
  001E         3539: OPCODEMAX EQU     (*-OPCODES)/3-1




ASM/6800 1.4A0: D1AE SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 116; Form 1     SDOS FRONT END CODE
SDOS11G.ASM
               3541: *       THE FOLLOWING POINTER CAN BE USED TO LOCATE THE SDOS:XXX TABLE
               3542: *       IT IS INTENDED TO BE USED IN DIAGNOSING SYSTEM FAILURES;
               3543: *       ($FC,$FD) POINT TO I/O PAK, WHICH HAS 3 BYTE JMP TO SYSCALLENTRY
               3544: *       THE SDOS:XXX TABLE CONTAINS THE LAST ERROR DETECTED BY SDOS
               3545: *
D1B1 CE00      3546:         FDB      CODE     POINTER TO SDOS:XXX TABLE
               3547: *
  D1B3         3548: SYSCALLENTRY      EQU     *
D1B3 B6CF8D    3549:         LDAA      SDOSRECURSIVECALL  CHECK # TIMES SDOS HAS BEEN RECURSIVELY CALLED
D1B6 2606      3550:         BNE      SYSCALL1  B/ NOT FIRST TIME SDOS WAS CALLED
D1B8 BFCF8E    3551:         STS     USERRETAPTR      SAVE STACK SO WE CAN KILL USER PROGRAM IF NEEDED
D1BB FFCF90    3552:         STX     USERSYSCALLPTR    SAVE POINTER TO USER'S SYSCALL
  D1BE         3553: SYSCALL1  EQU     *
D1BE FFCE07    3554:         STX     CODE+SDOS:IOBLOCKPTR
D1C1 E600      3555:         LDAB      SCBLK:OPCODE,X     GET THE OPCODE
               3556:         ;CMPB     #OPCODEMAX        IS THE OPCODE LEGAL?
D1C3 C11E      3557:         CMPB      #OPCODEMAX
D1C5 2228      3558:         BHI      ERRILLSYSCALL     B/ NO
D1C7 58        3559:         ASLB              MULTIPLY OPCODE VALUE BY 3
D1C8 EB00      3560:         ADDB      SCBLK:OPCODE,X     N*2+N = N*3
  0000         3561:         IF      OPCODEMAX*3>>255
 *S*           3562:         +ERROR  OPCODE INDEXING WON'T WORK
               3563:         FIN
D1CA F7CF20    3564:         STAB      SYSCALLX+1        LOCATE OPCODE TABLE SLOT CORRESPONDING TO OPCODE
D1CD A601      3565:         LDAA      SCBLK:WLEN,X      COPY SYSCALL BLOCK LENGTH TO (A)
D1CF 847F      3566:         ANDA      #%01111111      MASK OFF WAIT FLAG
               3567:         ;CMPA     #SCBLK:RPLEN+1    DOES SYSCALL BLOCK INCLUDE SPACE FOR REPLY LENGTH 
D1D1 8109      3568:         CMPA      #SCBLK:RPLEN+1
D1D3 2304      3569:         BLS      SYSCALL2  B/ NO, LEAVE SCBLK:RPLEN ALONE
               3570:         ;CLR     SCBLK:RPLEN,X     YES, ZERO IT (CONVENIENCE FOR SYSCALL PROCESSORS)
D1D5 6F08      3571:         CLR      SCBLK:RPLEN,X
               3572:         ;CLR     SCBLK:RPLEN+1,X
D1D7 6F09      3573:         CLR      SCBLK:RPLEN+1,X
               3574: *       CHECK TO SEE IF SCBLK:RDBUF POINTS INTO SCRATCHPAD ?
  D1D9         3575: SYSCALL2  EQU     *
               3576: *       CMPA      SCBLK:WLEN,X      COPY WAIT FLAG TO CARRY BIT
               3577:         ;LDX    SYSCALLX  GRAB POINTER TO OPCODE TABLE SLOT
D1D9 FECF1F    3578:         LDX     SYSCALLX
               3579:         ;CMPA     OPCODES&$FF,X    IS SIZE OF SYSCALL BLOCK >= NECESSARY MINIMUM ?
D1DC A154      3580:         CMPA      OPCODES&$FF,X




ASM/6800 1.4A0: D1DE SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 117; Form 1     SDOS FRONT END CODE
SDOS11G.ASM
D1DE 2513      3581:         BCS       ERRSYSCALLTOOSHORT        B/ NO, YOU DIE!
               3582:         ;INC     SDOSRECURSIVECALL  NOW THAT USERRETAPTR IS VALID,...
D1E0 7CCF8D    3583:         INC      SDOSRECURSIVECALL
               3584: *                       LET KILLUSER PROGRAM KNOW ABOUT IT
               3585:         ;JSR    [(OPCODES&$FF)+1,X]      GO DO THE SYSCALL FUNCTION
D1E3 EE55      3586:         LDX     (OPCODES&$FF)+1,X
D1E5 AD00      3587:         JSR     0,X
D1E7 2500      3588:         BCS       *+2     MAKE SURE WE GET CONTROL EVEN IF ERROR OCCURS
               3589:         ;DEC     SDOSRECURSIVECALL  DOWN COUNT # RECURSIVE CALLS TO SDOS
D1E9 7ACF8D    3590:         DEC      SDOSRECURSIVECALL
D1EC 251C      3591:         BCS       ERRORED B/ SOME ERROR DID HAPPEN, ABORT!
D1EE 39        3592:         RTS             RETURN TO CALLER
               3593: *
D1EF 8D06      3594: ERRILLSYSCALL     BSR      ERRET
D1F1 0409      3595:         FDB      ERR:ILLEGALSYSCALL
               3596: 
  D1F3         3597: ERRSYSCALLTOOSHORT        EQU     *
D1F3 8D02      3598:         BSR      ERRET
D1F5 041D      3599:         FDB      ERR:SYSCALLTOOSHORT




ASM/6800 1.4A0: D1F5 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 118; Form 1     SDOS FRONT END CODE
SDOS11G.ASM
               3601: *       SDOS ERROR HANDLING
               3602: *
               3603: *       ERRET -- CALLED VIA A JSR WITH IN-LINE 2-BYTE ERROR CODE
               3604: *               ERROR CODE IS LOADED INTO (X)
               3605: *               CARRY IS SET TO INDICATE ERROR CONDITION
               3606: *               AND A RTS IS PERFORMED
               3607: *               IF CALLING ROUTINE HAS NO BCS/BCC AFTER JSR,
               3608: *               ERRET AUTOMATICALLY POPS THE STACK ONE SUBROUTINE LEVEL
               3609: *               AND LOOKS AGAIN FOR A BCS
               3610: *               ***NOTE: THIS MEANS TOP LEVEL (USER!) MUST HAVE BCC/BCS!***
               3611: *               This routine places error code in TEMPX while unwinding stack
               3612: *
  D1F7         3613: ERRET   ;PULX           GET RETURN ADDRESS TO (X)
D1F7 30        3614:         TSX
D1F8 EE00      3615:         LDX     0,X
D1FA 31        3616:         INS
D1FB 31        3617:         INS
D1FC FFCE56    3618:         STX     ERRORADDRESS     THIS HELPS WHEN WE'RE DEBUGGING SDOS
               3619:         ;LDX    ,X      GET ERROR CODE INTO (X)
D1FF EE00      3620:         LDX     0,X
  D201         3621: ERRORINX        ; ENTRY POINT IF ERROR CODE IS ALREADY IN (X)
D201 FFCE01    3622:         STX     LASTERROR        SAVE THE ERROR CODE IN CASE OF CRASH
D204 DF00      3623:         STX     TEMPX   SAVE ERROR CODE IN RE-ENTRANT WAY
D206 2002      3624:         BRA       ERRORED SKIP INTO BCC/BCS STACK POP LOOP
               3625: 
  D208         3626: ERRETL  ; POP RETURN ADDRESS FROM THE STACK
               3627:         ;LEAS    2,S
  0000         3628:         IF      2<0
 *S*           3629:         RPT     -2
 *S*           3630:         DES
               3631:         ELSE
  0002         3632:         RPT     2
D208 31        3633:         INS
               3634:         FIN
  D20A         3635: ERRORED ; NOW FAKE "RTS" UNTIL BCC/BCS ENCOUNTERED
               3636:         ;LDX    0,S     GRAB RETURN ADDRESS
D20A 30        3637:         TSX
D20B EE00      3638:         LDX     0,X
D20D A600      3639:         LDAA      ,X      DOES RETURN ADDRESS POINT TO BCS/BCC ?
  0001         3640:         IF      M6800!M6801




ASM/6800 1.4A0: D20D SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 119; Form 1     SDOS FRONT END CODE
SDOS11G.ASM
               3641: *       SIMULATED LONG BRANCHES START WITH BCC/BCS!
  0001         3642:         ELSE    (M6809)
 *S*           3643:         ;CMPA     #$10    EXTENDED OPCODE?
 *S*           3644:         CMPA      #$10
 *S*           3645:         BNE      ERRORED1        B/ NO
 *S*           3646:         LDAA      1,X     YES, GET 2ND BYTE OF OPCODE
 *S*           3647: ERRORED1        ; (A) CONTAINS OPCODE TO INSPECT
               3648:         FIN
D20F 84FE      3649:         ANDA      #\%1    (MASK OFF "INVERT BRANCH CONDITION" BIT)
               3650:         ;CMPA     #$24    (BCS OPCODE FOR 6800/6801 AND 6809)
D211 8124      3651:         CMPA      #$24
D213 26F3      3652:         BNE      ERRETL  NO, SIMULATE "BCS TO A RTS"
               3653:         ;LDX    TEMPX   GET THE ERROR CODE AGAIN
D215 DE00      3654:         LDX     TEMPX
D217 0D39      3655:         ERRORRTS        SET THE CARRY AND EXIT
               3656: 
  D219         3657: ERRORSAVE        ; SAVE THE ERROR CODE IN (X)
D219 FFCE01    3658:         STX     LASTERROR        SAVE CODE IN CASE OF CRASH
D21C DF00      3659:         STX     TEMPX   SAVE ERROR CODE IN RE-ENTRANT FASHION
D21E 0D39      3660:         ERRORRTS        AND EXIT




ASM/6800 1.4A0: D21E SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 120; Form 1     SYSCALL:ISCONSOLE HANDLER
SDOS11G.ASM
               3662: *
               3663: *       ISCONSOLE -- PERFORM "SYSCALL:ISCONSOLE"
               3664: *
  D220         3665: ISCONSOLE        EQU     *
               3666:         ;LDX    CODE+SDOS:CONFIGURATION    FIND IOCB POINTER FOR CHANNEL 0
D220 FECE03    3667:         LDX     CODE+SDOS:CONFIGURATION
               3668:         ;LDX    [CNFG:IOCBPOINTERS,X]      (GET POINTER TO LIST OF IOCB POINTERS)
D223 EE04      3669:         LDX     CNFG:IOCBPOINTERS,X
D225 EE00      3670:         LDX     0,X
               3671:         ;LDX    IOCB:DRIVER,X     GET POINTER TO DRIVER FOR DEVICE
D227 EE09      3672:         LDX     IOCB:DRIVER,X
D229 2709      3673:         BEQ      ERRCLOSED        B/ CHANNEL IS NOT OPEN
D22B BCCE52    3674:         CPX      CONSOLEDRIVER    OPEN TO CONSOLE DRIVER ?
D22E 2723      3675:         BEQ      ISCONSOLEOKRTS   B/ YES, TAKE "OK" EXIT
D230 8DC5      3676:         BSR      ERRET   NO
D232 0423      3677:         FDB      ERR:NOTOPENTOCONSOLE
               3678: 
  D234         3679: ERRCLOSED        EQU     *
D234 8DC1      3680:         BSR      ERRET
D236 0408      3681:         FDB      ERR:CLOSED
               3682: 
  D238         3683: ERRCHBUSY EQU     *
D238 8DBD      3684:         BSR      ERRET
D23A 0407      3685:         FDB      ERR:CHBUSY
               3686: 
  D23C         3687: ERRCHTOOBIG       EQU     *
D23C 8DB9      3688:         BSR      ERRET
D23E 0406      3689:         FDB      ERR:CHTOOBIG




ASM/6800 1.4A0: D23E SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 121; Form 1     CHANNEL NUMBER CHECKING/IOCB DETERMINATION
SDOS11G.ASM
               3691: *       CHECKCHANNELOPEN -- CHECK THAT CHANNEL SPECIFIED BY SYSCALL IS OPEN
               3692: *       RETURNS POINTER TO IOCB FOR CHANNEL IN IOCBPOINTER
               3693: *       ALSO SETS UP DRIVERVPOINTER, DCBPOINTER FROM IOCB IF CHANNEL IS OPEN
               3694: *
  D240         3695: CHECKCHANNELOPEN    EQU     *
D240 8D1B      3696:         BSR      GETIOCBPOINTER    FIRST, LOCATE THE IOCB FOR THE DESIRED CHANNEL
               3697:         ;LDX    IOCB:DRIVER,X     GRAB POINTER TO DEVICE DRIVER FOR CHANNEL
D242 EE09      3698:         LDX     IOCB:DRIVER,X
D244 27EE      3699:         BEQ      ERRCLOSED        B/ CHANNEL IS NOT OPEN!
D246 FFCE54    3700:         STX     DRIVERVPOINTER  FOR LATER USE
               3701:         ;LDX    IOCBPOINTER       SET UP DCB POINTER FROM IOCB, ALSO
D249 FECE09    3702:         LDX     IOCBPOINTER
               3703:         ;LDX    IOCB:DCB,X
D24C EE00      3704:         LDX     IOCB:DCB,X
D24E DF06      3705:         STX     DCBPOINTER
               3706:         ;LDX    DRIVERVPOINTER  FOR CONVENIENCE OF CALLERS
D250 FECE54    3707:         LDX     DRIVERVPOINTER
  D253         3708: ISCONSOLEOKRTS   EQU     *
D253 0C39      3709:         OKRTS
               3710: *
               3711: *       CHECKCHANNELCLOSED -- CHECK THAT CHANNEL SPECIFIED BY SYSCALL IS CLOSED
               3712: *       SETS IOCBPOINTER TO POINTER TO I/O CONTROL BLOCK FOR SPECIFIED CHANNEL
               3713: *
  D255         3714: CHECKCHANNELCLOSED   EQU     *
D255 8D06      3715:         BSR      GETIOCBPOINTER    FIRST, LOCATE THE PROPER IOCB
  D257         3716: CHECKCHANNELCL1      ; ENTRY POINT FOR CREATELOG
               3717:         ;LDX    IOCB:DRIVER,X     GRAB POINTER TO DEVICE DRIVER
D257 EE09      3718:         LDX     IOCB:DRIVER,X
D259 26DD      3719:         BNE      ERRCHBUSY B/ CHANNEL IS ALREADY BUSY!
D25B 0C39      3720:         OKRTS




ASM/6800 1.4A0: D25B SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 122; Form 1     CHANNEL NUMBER CHECKING/IOCB DETERMINATION
SDOS11G.ASM
               3722: *
               3723: *       GETIOCBPOINTER -- SETS IOCBPOINTER USING SCBLK:PARAMS AS CHANNEL NUMBER
               3724: *       ALSO RETURNS IOCBPOINTER IN (X)
               3725: *
  D25D         3726: GETIOCBPOINTER    EQU     *
               3727:         ;LDX    CODE+SDOS:IOBLOCKPTR       GRAB POINTER TO SYSCALL BLOCK
D25D FECE07    3728:         LDX     CODE+SDOS:IOBLOCKPTR
D260 E602      3729:         LDAB      SCBLK:PARAMS,X      THIS IS WHERE ***ALL*** CHANNEL NUMBERS MUST BE!
               3730:         ;LDX    CODE+SDOS:CONFIGURATION    VALID CHANNEL NUMBER ?
D262 FECE03    3731:         LDX     CODE+SDOS:CONFIGURATION
               3732:         ;CMPB     CNFG:NIOCHANNELS,X ...?
D265 E106      3733:         CMPB      CNFG:NIOCHANNELS,X
D267 2414      3734:         BCC        GETIOCB1  B/ NO!
D269 4F        3735:         CLRA              MAKE CHANNEL NUMBER INTO 16 BIT QUANTITY
               3736:         ;ASLD            DOUBLE TO MAKE INDEX INTO CHANNEL POINTER TABLE
D26A 58        3737:         ASLB
D26B 49        3738:         ROLA
               3739:         ;ADDD    CNFG:IOCBPOINTERS,X        COMPUTE POINTER TO IOCB POINTER
D26C EB05      3740:         ADDB      (CNFG:IOCBPOINTERS)+1,X
D26E A904      3741:         ADCA       CNFG:IOCBPOINTERS,X
               3742:         ;TDX            GRAB POINTER TO IOCB
D270 9700      3743:         STAA      TEMPA
D272 D701      3744:         STAB      TEMPB
D274 DE00      3745:         LDX     TEMPX
               3746:         ;LDX    0,X
D276 EE00      3747:         LDX     0,X
  D278         3748: GETIOCBX  EQU     *
D278 FFCE09    3749:         STX     IOCBPOINTER
D27B 0C39      3750:         OKRTS
               3751: 
  D27D         3752: GETIOCB1  ; INVALID CHANNEL NUMBER FOUND
D27D B6CF8D    3753:         LDAA      SDOSRECURSIVECALL  USER SYSCALL?
D280 4A        3754:         DECA              (NESTING = 1?)
D281 27B9      3755:         BEQ      ERRCHTOOBIG       B/ YES, REALLY IS INVALID CHANNEL NUMBER
               3756:         ;LDX    #LOGIOCB  ASSUME LOG IOCB WAS MEANT
D283 CECF35    3757:         LDX     #LOGIOCB
               3758:         ;CMPB     #LOGCHANNEL       ASSUMPTION CORRECT ?
D286 C1FF      3759:         CMPB      #LOGCHANNEL
D288 27EE      3760:         BEQ      GETIOCBX  B/ YES
               3761:         ;LDX    #SYSIOCB  NO, ALL OTHERS GET TURNED INTO SYSIOCB CHANNELS




ASM/6800 1.4A0: D28A SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 123; Form 1     CHANNEL NUMBER CHECKING/IOCB DETERMINATION
SDOS11G.ASM
D28A CECF57    3762:         LDX     #SYSIOCB
D28D 20E9      3763:         BRA       GETIOCBX




ASM/6800 1.4A0: D28D SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 124; Form 1     CHANNEL NUMBER CHECKING/IOCB DETERMINATION
SDOS11G.ASM
               3765: *
               3766: *       ISDIG -- IS (A) A DIGIT ?
               3767: *       RETURNS CARRY RESET IF YES
               3768: *       RETURNS CARRY SET IF NO
               3769: *       (A) LEFT UNDISTURBED
               3770: *
  D28F         3771: ISDIG   EQU     *
               3772:         ;CMPA     #'9     DIGIT ?
D28F 8139      3773:         CMPA      #'9
D291 2203      3774:         BHI      ISDNO   B/ NOPE
               3775:         ;CMPA     #'0     ...?
D293 8130      3776:         CMPA      #'0
D295 39        3777:         RTS             WITH CARRY SET PROPERLY
               3778: 
  D296         3779: ISDNO   EQU     *
D296 0D        3780:         SEC              MEANING "NOPE..."
D297 39        3781:         RTS
               3782: *
               3783: *       ISALPHANUM -- IS (A) AN ALPHA OR NUMERIC CHARACTER ?
               3784: *       RETURNS CARRY RESET IF TRUE; LOWER CASE LETTER FOLDED INTO UPPER CASE
               3785: *       OTHERWISE, RETURNS CARRY SET
               3786: *       (A) IS UNDISTURBED
               3787: *
  D298         3788: ISALPHANUM        EQU     *
D298 8DF5      3789:         BSR      ISDIG   TRY FOR A DIGIT, FIRST...
D29A 240A      3790:         BCC        ISALPHANUMRTS     B/ ITS A DIGIT, GET OUT NOW!
               3791:         ;CMPA     #'Z+32  LOWER CASE ALPHA ?
D29C 817A      3792:         CMPA      #'Z+32
D29E 22F6      3793:         BHI      ISDNO   B/ NO, AND ITS NOT UPPER CASE, EITHER
               3794:         ;CMPA     #'A+32   ...?
D2A0 8161      3795:         CMPA      #'A+32
D2A2 2503      3796:         BCS       ISALPHANUM1       B/ NO, MIGHT BE UPPER CASE
D2A4 845F      3797:         ANDA      #%01011111      IS LOWER CASE, CONVERT TO UPPER CASE
  D2A6         3798: ISALPHANUMRTS     ; CHEAP EXIT
D2A6 39        3799:         RTS             WITH THE CARRY RESET
               3800: 
  D2A7         3801: ISALPHANUM1       ; MIGHT BE UPPER CASE
               3802:         ;CMPA     #'Z     ...?
D2A7 815A      3803:         CMPA      #'Z
D2A9 22EB      3804:         BHI      ISDNO   B/ NOPE




ASM/6800 1.4A0: D2A9 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 125; Form 1     CHANNEL NUMBER CHECKING/IOCB DETERMINATION
SDOS11G.ASM
               3805:         ;CMPA     #'A      ...?
D2AB 8141      3806:         CMPA      #'A
D2AD 39        3807:         RTS




ASM/6800 1.4A0: D2AD SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 126; Form 1     CHANNEL NUMBER CHECKING/IOCB DETERMINATION
SDOS11G.ASM
               3809: *
               3810: *       FINDDRIVER -- CONVERT DEVICE NAME TO DRIVER ENTRY POINTER VECTOR ADDRESS
               3811: *               ALSO FILLS IN DCBPOINTER
               3812: *       SYSCALL POINTED TO BY FNAMESYSCALLPTR SELECTS FILENAME AND SIZE
               3813: *       RETURNS (X) POINTING TO DRIVER
               3814: *       SETS RDBUF TO LENGTH OF PREFIX OF USER-SUPPLIED FILENAME THAT MATCHES DEVICE N
               3815: *
  D2AE         3816: FINDDRIVER      EQU     *
               3817:         ;LDX    CODE+SDOS:IOBLOCKPTR       CHECK FOR DEVICE NAME GIVEN
D2AE FECE07    3818:         LDX     CODE+SDOS:IOBLOCKPTR
               3819:         ;LDX    SCBLK:WRLEN,X     GET LENGTH OF FILENAME
D2B1 EE06      3820:         LDX     SCBLK:WRLEN,X
D2B3 DF00      3821:         STX     TEMPX   SAVE AS LOOP COUNTER
               3822:         ;LDX    CODE+SDOS:IOBLOCKPTR       GET ADDRESS OF FILE NAME
D2B5 FECE07    3823:         LDX     CODE+SDOS:IOBLOCKPTR
               3824:         ;LDX    SCBLK:WRBUF,X
D2B8 EE04      3825:         LDX     SCBLK:WRBUF,X
D2BA DF02      3826:         STX     FROMPOINTER     SAVE STRING SCAN POINTER
  D2BC         3827: FINDDRIVER1L    ; CHECK NEXT CHARACTER TO SEE IF VALID DEVICE NAME
               3828:         ;LDX    TEMPX   GET REMAINING STRING COUNT
D2BC DE00      3829:         LDX     TEMPX
D2BE 2750      3830:         BEQ      FINDDEFAULT      B/ NO BYTES LEFT, VALID DEVICE NAME NOT SEEN
D2C0 09        3831:         DEX             DOWN COUNT # BYTES REMAINING
D2C1 DF00      3832:         STX     TEMPX
               3833:         ;LDX    FROMPOINTER     GET BYTE FROM STRING
D2C3 DE02      3834:         LDX     FROMPOINTER
               3835:         ;LDA     ,X+
D2C5 A600      3836:         LDAA      0,X
D2C7 08        3837:         INX
D2C8 DF02      3838:         STX     FROMPOINTER
D2CA 8DCC      3839:         BSR      ISALPHANUM        ALPHANUMERIC CHARACTER ?
D2CC 24EE      3840:         BCC        FINDDRIVER1L    B/ YES, CONTINUE SCAN FOR ":"
  D2CE         3841: FINDDRIVER2     ; END OF ALPHANUMERIC DEVICE NAME PREFIX FOUND
               3842:         ;CMPA     #':     MUST HAVE ":" OR A DEVICE NAME IS NOT SPECIFIED
D2CE 813A      3843:         CMPA      #':
D2D0 263E      3844:         BNE      FINDDEFAULT      NO ":", MUST BE FILE NAME ON DEFAULT DISK




ASM/6800 1.4A0: D2D0 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 127; Form 1     CHANNEL NUMBER CHECKING/IOCB DETERMINATION
SDOS11G.ASM
               3846: *       FOUND SOMETHING THAT LOOKS LIKE A DEVICE NAME
               3847: *
               3848:         ;LDX    CODE+SDOS:CONFIGURATION    FIRST, LOOK FOR A DISK DEVICE NAME
D2D2 FECE03    3849:         LDX     CODE+SDOS:CONFIGURATION
               3850:         ;LDX    CNFG:DISKDCBS,X
D2D5 EE00      3851:         LDX     CNFG:DISKDCBS,X
  D2D7         3852: FINDDISK        EQU     *
D2D7 DF06      3853:         STX     DCBPOINTER        POINTER TO DISK INFO ENTRY
               3854:         ;LDX    DCB:NAME,X GET POINTER TO DEVICE NAME STRING
D2D9 EE03      3855:         LDX     DCB:NAME,X
D2DB 8D73      3856:         BSR      CMPDVNAME COMPARE AGAINST FILENAME STRING
D2DD 2458      3857:         BCC        FOUNDDISK       B/ THAT'S IT!
               3858:         ;LDX    DCBPOINTER        GET ADDRESS OF NEXT DISK INFO ENTRY
D2DF DE06      3859:         LDX     DCBPOINTER
               3860:         ;LDX    DCB:NEXTDCB,X
D2E1 EE05      3861:         LDX     DCB:NEXTDCB,X
D2E3 26F2      3862:         BNE      FINDDISK        B/ NOT END OF LIST
               3863:         ;LDX    DEFAULTDISKDCB     ASSUME DEFAULT DISK CHOSEN
D2E5 FECE4C    3864:         LDX     DEFAULTDISKDCB
D2E8 DF06      3865:         STX     DCBPOINTER        REMEMBER IT...
               3866:         ;LDX    #DEFAULTDISKNAME  CHECK TO MAKE SURE...
D2EA CED34A    3867:         LDX     #DEFAULTDISKNAME
D2ED 8D61      3868:         BSR      CMPDVNAME CHECK DEFAULT DISK NAME AGAINST GIVEN DEVICE NAME
D2EF 2446      3869:         BCC        FOUNDDISK       B/ IT MATCHES, FAKE IT FROM HERE!
               3870: *
               3871: *       SEARCH THE NON-DISK LIST
               3872: *
               3873:         ;LDX    CODE+SDOS:CONFIGURATION
D2F1 FECE03    3874:         LDX     CODE+SDOS:CONFIGURATION
               3875:         ;LDX    CNFG:DEVICEDCBS,X   GET POINTER TO LIST OF NON-DISK DEVICES
D2F4 EE02      3876:         LDX     CNFG:DEVICEDCBS,X
  D2F6         3877: FINDDEVICEL      ; SEE IF THIS IS IT
D2F6 DF06      3878:         STX     DCBPOINTER        SAVE POINTER TO NON-DISK DCB
               3879:         ;LDX    DCB:DRIVER,X      GET DEVICE DRIVER ADDRESS IN CASE OF MATCH
D2F8 EE07      3880:         LDX     DCB:DRIVER,X
D2FA FFCE54    3881:         STX     DRIVERVPOINTER  AND SAVE
               3882:         ;LDX    DCBPOINTER        NOW COMPARE DEVICE NAME STRINGS
D2FD DE06      3883:         LDX     DCBPOINTER
               3884:         ;LDX    DCB:NAME,X GET ADDRESS OF NON-DISK DEVICE NAME
D2FF EE03      3885:         LDX     DCB:NAME,X




ASM/6800 1.4A0: D301 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 128; Form 1     CHANNEL NUMBER CHECKING/IOCB DETERMINATION
SDOS11G.ASM
D301 8D4D      3886:         BSR      CMPDVNAME GO SEE IF DEVICE NAME IS IN LIST
D303 241E      3887:         BCC        FOUNDDEVICE      B/ WE FOUND IT!
               3888:         ;LDX    DCBPOINTER        NO MATCH, FIND NEXT ENTRY IN DCB LIST
D305 DE06      3889:         LDX     DCBPOINTER
               3890:         ;LDX    DCB:NEXTDCB,X       END OF DCB LIST HIT ?
D307 EE05      3891:         LDX     DCB:NEXTDCB,X
D309 26EB      3892:         BNE      FINDDEVICEL      B/ NO
               3893:         ;JSR    ERRET   NOT A VALID DEVICE NAME
D30B BDD1F7    3894:         JSR     ERRET
D30E 0420      3895:         FDB      ERR:NOSUCHDEVICE




ASM/6800 1.4A0: D30E SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 129; Form 1     CHANNEL NUMBER CHECKING/IOCB DETERMINATION
SDOS11G.ASM
               3897: *
               3898: *       NO DEVICE NAME, ASSUME A FILE ON DEFAULT DISK DRIVE
               3899: *
  D310         3900: FINDDEFAULT      EQU     *
               3901:         ;LDX    CODE+SDOS:IOBLOCKPTR       SET NAMESIZE BACK TO USER-SUPPLIED SIZE
D310 FECE07    3902:         LDX     CODE+SDOS:IOBLOCKPTR
               3903:         ;LDX    SCBLK:WRLEN,X
D313 EE06      3904:         LDX     SCBLK:WRLEN,X
D315 FFCE50    3905:         STX     NAMESIZE (INDICATES 0 BYTES MATCHED A DEVICE NAME)
               3906:         ;LDX    DEFAULTDISKDCB     GET POINTER TO DEFAULT DISK INFO TABLE
D318 FECE4C    3907:         LDX     DEFAULTDISKDCB
D31B DF06      3908:         STX     DCBPOINTER
  D31D         3909: FOUNDDISK1      EQU     *
               3910:         ;LDX    #DISKFILEDRIVER SET UP POINTER TO SDOS DISK FILE DRIVER
D31D CEDCB6    3911:         LDX     #DISKFILEDRIVER
  D320         3912: FOUNDDISK2      EQU     *
D320 FFCE54    3913:         STX     DRIVERVPOINTER  AND SAVE WHICH DISK DRIVER TO USE!
  D323         3914: FOUNDDEVICE      EQU     *
               3915:         ;LDX    CODE+SDOS:IOBLOCKPTR       COMPUTE LENGTH OF DEVICE PREFIX
D323 FECE07    3916:         LDX     CODE+SDOS:IOBLOCKPTR
               3917:         ;LDD    SCBLK:WRLEN,X     = USER SUPPLIED LENGTH - # OF BYTES REMAINING AFTER 
D326 E607      3918:         LDAB      (SCBLK:WRLEN)+1,X
D328 A606      3919:         LDAA      SCBLK:WRLEN,X
               3920:         ;SUBD    NAMESIZE
D32A F0CE51    3921:         SUBB      NAMESIZE+1
D32D B2CE50    3922:         SBCA       NAMESIZE
               3923:         ;LDX    SCBLK:RDBUF,X      PUT SIZE OF SCANNED DEVICE NAME IN REPLY BUFFER
D330 EE0A      3924:         LDX     SCBLK:RDBUF,X
               3925:         ;STD    0,X
D332 E701      3926:         STAB      (0)+1,X
D334 A700      3927:         STAA      0,X
D336 39        3928:         RTS
               3929: *
  D337         3930: FOUNDDISK       EQU     *
               3931:         ;LDX    NAMESIZE NULL FILENAME?
D337 FECE50    3932:         LDX     NAMESIZE
D33A 2709      3933:         BEQ      FOUNDDISK3      B/ YES, HE SPECIFIED ONLY A DISK
               3934:         ;LDX    NAMESCANPTR        LOOK AT 1ST BYTE FOLLOWING DISK NAME
D33C FECE4E    3935:         LDX     NAMESCANPTR
D33F A600      3936:         LDAA      0,X




ASM/6800 1.4A0: D33F SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 130; Form 1     CHANNEL NUMBER CHECKING/IOCB DETERMINATION
SDOS11G.ASM
               3937:         ;CMPA     #ASCII:SPACE        A NON-BLANK PRINTING CHARACTER?
D341 8120      3938:         CMPA      #ASCII:SPACE
D343 22D8      3939:         BHI      FOUNDDISK1      B/ YES, FILENAME HAS BEEN SPECIFIED
  D345         3940: FOUNDDISK3      ; ONLY NAME OF DISK DEVICE SPECIFIED
               3941:         ;LDX    #DISKDEVICEDRIVER
D345 CEDC95    3942:         LDX     #DISKDEVICEDRIVER
D348 20D6      3943:         BRA       FOUNDDISK2
               3944: 
D34A 4449534B  3945: DEFAULTDISKNAME   FCC       "DISK:"
D34F 00        3946:         FCB       0




ASM/6800 1.4A0: D34F SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 131; Form 1     CHANNEL NUMBER CHECKING/IOCB DETERMINATION
SDOS11G.ASM
               3948: *       CMPDVNAM -- COMPARE FILENAME TO DEVICE NAME
               3949: *       (X) POINTS TO DEVICE NAME ENDED BY 0
               3950: *       FILENAME TO MATCH AGAINST IS SELECTED BY SYSCALL
               3951: *       EXIT WITH CARRY RESET IF FOUND
               3952: *       NAMESCANPTR IS ADVANCED PAST DEVICE NAME IF FOUND
               3953: *       CARRY SET IF NOT FOUND
               3954: *       SETS NAMESIZE TO # BYTES OF FILENAME GIVEN MINUS SIZE OF DEVICE NAME PREFIX
               3955: *
  D350         3956: CMPDVNAME ; COMPARE FILENAME TO DEVICE NAME
D350 DF00      3957:         STX     TEMPX   SAVE POINTER TO NAME IN DCB
               3958:         ;LDX    CODE+SDOS:IOBLOCKPTR       GET SIZE OF USER-SPECIFIED FILE NAME
D352 FECE07    3959:         LDX     CODE+SDOS:IOBLOCKPTR
               3960:         ;LDX    SCBLK:WRLEN,X
D355 EE06      3961:         LDX     SCBLK:WRLEN,X
D357 FFCE50    3962:         STX     NAMESIZE
D35A 2738      3963:         BEQ      CMPDVNAMENF       B/ ZERO LENGTH --> NOT FOUND!
               3964:         ;LDX    CODE+SDOS:IOBLOCKPTR       GET POINTER TO USER-SPECIFIED FILE NAME
D35C FECE07    3965:         LDX     CODE+SDOS:IOBLOCKPTR
               3966:         ;LDX    SCBLK:WRBUF,X
D35F EE04      3967:         LDX     SCBLK:WRBUF,X
D361 FFCE4E    3968:         STX     NAMESCANPTR
  D364         3969: CMPDVNAML ; COMPARE NEXT BYTE OF USER-SPECIFIED NAME WITH DEVICE NAME
               3970:         ;LDX    NAMESCANPTR        GET BYTE FROM USER-SPECIFIED NAME
D364 FECE4E    3971:         LDX     NAMESCANPTR
               3972:         ;LDA     ,X+
D367 A600      3973:         LDAA      0,X
D369 08        3974:         INX
D36A FFCE4E    3975:         STX     NAMESCANPTR
               3976:         ;CMPA     #$60    FOLD TO UPPER CASE IF LOWER CASE
D36D 8160      3977:         CMPA      #$60
D36F 2306      3978:         BLS      CMPDVNAML1        B/ NOT LOWER CASE
               3979:         ;CMPA     #$7A
D371 817A      3980:         CMPA      #$7A
D373 2202      3981:         BHI      CMPDVNAML1        B/ NOT LOWER CASE
D375 845F      3982:         ANDA      #%01011111      FOLD IT!
  D377         3983: CMPDVNAML1 ; FOLDED CHARACTER OF USER SPECIFIED NAME IN (A)
               3984:         ;LDX    TEMPX   COMPARE TO NEXT BYTE OF DCB NAME
D377 DE00      3985:         LDX     TEMPX
               3986:         ;CMPA     ,X      CHARACTERS MATCH?
D379 A100      3987:         CMPA      0,X




ASM/6800 1.4A0: D37B SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 132; Form 1     CHANNEL NUMBER CHECKING/IOCB DETERMINATION
SDOS11G.ASM
D37B 2619      3988:         BNE      CMPDVNAMENM       B/ NO, END OF DCB NAME ?
D37D 08        3989:         INX             BUMP POINTER
D37E DF00      3990:         STX     TEMPX   UPDATE DCB NAME SCAN POINTER
               3991:         ;LDX    NAMESIZE EXHAUSTED USER-SPECIFIED NAME?
D380 FECE50    3992:         LDX     NAMESIZE
D383 09        3993:         DEX             (REMEMBER THAT WE HAVE LOOKED AT ANOTHER BYTE)
D384 FFCE50    3994:         STX     NAMESIZE
D387 26DB      3995:         BNE      CMPDVNAML B/ NO, COMPARE NEXT BYTE
  D389         3996: CMPDVNAMEZ        ; USER-SPECIFIED NAME IS EXHAUSTED
               3997:         ;LDA     [TEMPX] AT END OF DCB-SPECIFIED NAME ?
D389 DE00      3998:         LDX     TEMPX
D38B A600      3999:         LDAA      0,X
D38D 2605      4000:         BNE      CMPDVNAMENF       B/ NO, USER NAME DOESN'T MATCH DCB NAME
               4001:         ;LDX    NAMESCANPTR        YES, GET POINTER TO UNSCANNED PART OF USER NAME
D38F FECE4E    4002:         LDX     NAMESCANPTR
D392 0C39      4003:         OKRTS           AND SIGNAL 'MATCH!'
               4004: 
  D394         4005: CMPDVNAMENF       ; USER FILE NAME DOESN'T START WITH THIS DEVICE NAME
D394 0D39      4006:         ERRORRTS                SAY "NO MATCH"
               4007: 
  D396         4008: CMPDVNAMENM       ; NAME DOESN'T MATCH
               4009:         ;LDX    NAMESCANPTR        BACK UP THE SCAN POINTER
D396 FECE4E    4010:         LDX     NAMESCANPTR
D399 09        4011:         DEX
D39A FFCE4E    4012:         STX     NAMESCANPTR
D39D 20EA      4013:         BRA       CMPDVNAMEZ




ASM/6800 1.4A0: D39D SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 133; Form 1     SYSCALL:INTERLOCK/SYSCALL:DELAY HANDLERS
SDOS11G.ASM
               4015: *
               4016: *       INTERLOCK -- PERFORM SYSCALL:INTERLOCK
               4017: *       (EXECUTE A NO-OP SINCE SINGLE USER SYSTEMS CANNOT INTERLOCK!)
               4018: *
  D39F         4019: INTERLOCK
               4020:         ;JSR    CHECKWRLEN        MAKE SURE WRITE BUFFER IS SUPPLIED
D39F BDD8DC    4021:         JSR     CHECKWRLEN
D3A2 0010      4022:         FDB      16      AND THAT IT IS THE PROPER LENGTH
               4023:         ;LDA     INTERLOCK:FUNCTION+1,X    GET INTERLOCK OPCODE
D3A4 A603      4024:         LDAA      INTERLOCK:FUNCTION+1,X
               4025:         ;CMPA     #IC:CREATE A CREATE CALL?
D3A6 8100      4026:         CMPA      #IC:CREATE
D3A8 2605      4027:         BNE      INTERLOCKOKRTS   B/ NO, JUST EXIT
               4028:         ;JSR    CHECKRDLEN        YES, MAKE SURE A REPLY BUFFER IS GIVEN
D3AA BDD8A0    4029:         JSR     CHECKRDLEN
D3AD 0010      4030:         FDB      16
  D3AF         4031: INTERLOCKOKRTS
D3AF 0C39      4032:         OKRTS
               4033: *
               4034: *       DELAY -- PERFORM SYSCALL:DELAY
               4035: *
  D3B1         4036: DELAY
               4037:         ;LDX    CODE+SDOS:IOBLOCKPTR       FETCH DELAY PERIOD
D3B1 FECE07    4038:         LDX     CODE+SDOS:IOBLOCKPTR
               4039:         ;LDX    DELAY:PERIOD,X
D3B4 EE02      4040:         LDX     DELAY:PERIOD,X
D3B6 2608      4041:         BNE      DELAY1   B/ DON'T DEFUSE 12 HOUR DELAY
               4042:         ;LDX    #DELAYDONE       SECRET DELAY SIGNAL PASSED, DEFUSE 12 HOUR TIMEOUT BO
D3B8 CED3F2    4043:         LDX     #DELAYDONE
D3BB FFCE62    4044:         STX     DELAYBLOCK+TIMEOUT:ROUTINE
D3BE 0C39      4045:         OKRTS
               4046: 
  D3C0         4047: DELAY1   ;CLR     DELAYCOMPLETE     RESET DELAY COMPLETED EVENT
D3C0 7FCE64    4048:         CLR      DELAYCOMPLETE
D3C3 FFCE60    4049:         STX     DELAYBLOCK+TIMEOUT:FUSE    SET FUSE TO DESIRED DELAY
               4050:         ;LDX    #DELAYCOMPLETE    NOW WAIT FOR DELAY COMPLETE EVENT
D3C6 CECE64    4051:         LDX     #DELAYCOMPLETE
               4052:         ;JSR    WAITEVENT$
D3C9 BDFE74    4053:         JSR     WAITEVENT$
D3CC 0C39      4054:         OKRTS




ASM/6800 1.4A0: D3CC SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 134; Form 1     SYSCALL:INTERLOCK/SYSCALL:DELAY HANDLERS
SDOS11G.ASM
               4055: *
               4056: *       SDOS NOT REGISTERED TIME BOMB
               4057: *
  D3CE         4058: SDOSNOTREGISTERED
               4059:         ;LDX    #$FFFF  SET UP 18.2 MINUTE TIMEOUT AGAIN
D3CE CEFFFF    4060:         LDX     #$FFFF
D3D1 FFCE60    4061:         STX     DELAYBLOCK+TIMEOUT:FUSE
               4062:         ;LDA     DELAYCOMPLETE     HAVE 12 HOURS PASSED YET ?
D3D4 B6CE64    4063:         LDAA      DELAYCOMPLETE
               4064:         ;CMPA     #12*60//18      (= THIS MANY 18.5 MINUTE TIMEOUTS ?)
D3D7 8128      4065:         CMPA      #12*60//18
D3D9 2317      4066:         BLS      DELAYDONE        B/ ...TICK... NOT YET
               4067:         ;LDX    #EXITCHAIN-9      *** BANG! **** MODIFY EXIT TO DISPLAY ERROR NEXT TIM
D3DB CECFE3    4068:         LDX     #EXITCHAIN-9
               4069:         ;LDD    #ERR:SDOSNOTREGISTERED+1206     WHAT TO DISPLAY ON NEXT EXIT
D3DE C6EC      4070:         LDAB      #(ERR:SDOSNOTREGISTERED+1206)&$FF
D3E0 8608      4071:         LDAA      #(ERR:SDOSNOTREGISTERED+1206)/256
               4072:         ;SUBD    #1206   FIX UP NON-OBVIOUS CONSTANT TO CORRECT VALUE
D3E2 C0B6      4073:         SUBB      #(1206)&$FF
D3E4 8204      4074:         SBCA       #(1206)/256
               4075:         ;STD    ERROREXIT:CODE+9,X       MAKE "CHAIN DEFPGM" INTO "ERROREXIT"
D3E6 E70C      4076:         STAB      (ERROREXIT:CODE+9)+1,X
D3E8 A70B      4077:         STAA      ERROREXIT:CODE+9,X
               4078:         ;SUBD    #ERR:SDOSNOTREGISTERED-(SYSCALL:ERROREXIT*256+ERROREXIT:SCLEN)
D3EA C032      4079:         SUBB      #(ERR:SDOSNOTREGISTERED-(SYSCALL:ERROREXIT*256+ERROREXIT:SCLEN))&$FF
D3EC 82F2      4080:         SBCA       #(ERR:SDOSNOTREGISTERED-(SYSCALL:ERROREXIT*256+ERROREXIT:SCLEN))/25
               4081:         ;STD    SCBLK:OPCODE+9,X
D3EE E70A      4082:         STAB      (SCBLK:OPCODE+9)+1,X
D3F0 A709      4083:         STAA      SCBLK:OPCODE+9,X
  D3F2         4084: DELAYDONE ; DELAY IS DONE, SIGNAL COMPLETION OF DELAY EVENT
               4085:         ;INC     DELAYCOMPLETE     MARK THE EVENT
D3F2 7CCE64    4086:         INC      DELAYCOMPLETE
               4087:         ;JMP    IORTI
D3F5 7EFDD0    4088:         JMP     IORTI




ASM/6800 1.4A0: D3F5 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 135; Form 1     MAJOR CHANNEL OPERATIONS
SDOS11G.ASM
               4090: *       OPEN -- PERFORM "SYSCALL:OPEN"
               4091: *
  D3F8         4092: OPEN    EQU     *
               4093: *
               4094: *       HERE'S WHERE WE DO THE COPYRIGHT CHECK
               4095: *
               4096:         ;LDX    #COPYRIGHTEND-1-98       COMPUTE CHECKSUM BACKWARDS
D3F8 CED0F1    4097:         LDX     #COPYRIGHTEND-1-98
D3FB 86CA      4098:         LDAA      #(-COPYRIGHTCHECKSUM)&$FF
D3FD AB62      4099: OPEN1   ADDA      98,X
D3FF 09        4100:         DEX
D400 8CD0CC    4101:         CPX      #COPYRIGHT-98-1
D403 26F8      4102:         BNE      OPEN1
               4103: *
               4104: *       IF A USER CHANGED THE COPYRIGHT STRING CHECKSUM...
               4105: *       WE WILL COMPUTE AN ADDRESS CORRESPONDING TO SDOSSTACK
               4106: *       IF THE CHECKSUM IS OK, WE WILL COMPUTE AN ADDRESS
               4107: *       CORRESPONDING TO SDOSSTACK+2
               4108: *
               4109: *       INTO THIS MAGIC COMPUTED ADDRESS, WE WILL
               4110: *       PLACE THE MANUFACTURED ADDRESS OF EXITDAMAGE (A CRITICAL PLACE)
               4111: *       THE RESULT IS TO HAVE EXIT AND CHAIN LOAD UP A BAD STACK POINTER
               4112: *       WHICH WILL EVENTUALLY DESTROY EXITDAMAGE
               4113: *       WHICH WILL EVENTUALLY BRING DOWN THE SYSTEM (WE HOPE)
               4114: *       ALL OF THIS IS TO TRY TO PREVENT THEFT
               4115: *
D405 8001      4116:         SUBA      #1      IF YOU DON'T UNDERSTAND THIS, IMAGINE A GUY DISASSEMBLING IT
D407 8600      4117:         LDAA      #0      USE THE Z-BIT TO FORM AN ADDRESS
D409 8601      4118:         LDAA      #1           ;ZZZ ADCA       #0      = 1 IF CHECKSUM OK, = 0 OTHERWI
D40B 5F        4119:         CLRB
D40C 8B80      4120:         ADDA      #((SDOSSTACK-34)/2)&$FF   THIS IS PURPOSELY DONE WIERD
D40E C967      4121:         ADCB       #((SDOSSTACK-34)/2)/256   TO DEFEAT WOULD BE DISASSEMBLERS AND THEI
D410 48        4122:         ASLA
D411 59        4123:         ROLB
D412 36        4124:         PSHA
D413 37        4125:         PSHB
               4126:         ;LDD    EXITDAMAGEPTR
D414 F6CF29    4127:         LDAB      EXITDAMAGEPTR+1
D417 B6CF28    4128:         LDAA      EXITDAMAGEPTR
D41A 48        4129:         ASLA              THIS CODE DOES FUNNY THINGS...




ASM/6800 1.4A0: D41B SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 136; Form 1     MAJOR CHANNEL OPERATIONS
SDOS11G.ASM
D41B 59        4130:         ROLB             TO CONFUSE WOULD-BE DISASSEMBLERS AND THEIVES
D41C 8B16      4131:         ADDA      #22
D41E C900      4132:         ADCB       #0
               4133:         ;LDX    ,S++
D420 30        4134:         TSX
D421 EE00      4135:         LDX     0,X
D423 31        4136:         INS
D424 31        4137:         INS
D425 A723      4138:         STAA      35,X
D427 E722      4139:         STAB      34,X
               4140: *
               4141: *       END OF COPYRIGHT CHECK
               4142: *
               4143:         ;JSR    FNAMEPROCESS      PROCESS THE FILE NAME TO GET THE DRIVER ADDRESS
D429 BDD486    4144:         JSR     FNAMEPROCESS
               4145:         ;JSR    [DRIVER:OPEN,X] GO OPEN THE FILE
D42C EE00      4146:         LDX     DRIVER:OPEN,X
D42E AD00      4147:         JSR     0,X
D430 2519      4148:         BCS       OPENERRED       B/ DRIVER GOT AN ERROR ON OPEN
  D432         4149: OPEN2   EQU     *
               4150:         ;LDD    DRIVERVPOINTER  GET PTR TO DEVICE DRIVER VECTOR
D432 F6CE55    4151:         LDAB      DRIVERVPOINTER+1
D435 B6CE54    4152:         LDAA      DRIVERVPOINTER
               4153:         ;LDX    IOCBPOINTER
D438 FECE09    4154:         LDX     IOCBPOINTER
               4155:         ;STD    IOCB:DRIVER,X     SAVE IN OPEN CHANNEL TABLE
D43B E70A      4156:         STAB      (IOCB:DRIVER)+1,X
D43D A709      4157:         STAA      IOCB:DRIVER,X
               4158: *
               4159: *       PLANTDCBINIOCB -- SET DCB POINTER INTO IOCB
               4160: *
  D43F         4161: PLANTDCBINIOCB       EQU     *
               4162:         ;LDX    IOCBPOINTER       GET IOCB ADDRESS
D43F FECE09    4163:         LDX     IOCBPOINTER
               4164:         ;LDD    DCBPOINTER        SAVE DCB ADDRESS IN IOCB, TOO!
D442 D607      4165:         LDAB      DCBPOINTER+1
D444 9606      4166:         LDAA      DCBPOINTER
               4167:         ;STD    IOCB:DCB,X
D446 E701      4168:         STAB      (IOCB:DCB)+1,X
D448 A700      4169:         STAA      IOCB:DCB,X




ASM/6800 1.4A0: D44A SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 137; Form 1     MAJOR CHANNEL OPERATIONS
SDOS11G.ASM
D44A 0C        4170:         CLC
  D44B         4171: OPENERRED
D44B 39        4172:         RTS




ASM/6800 1.4A0: D44B SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 138; Form 1     MAJOR CHANNEL OPERATIONS
SDOS11G.ASM
               4174: *
               4175: *       CREATELOG -- PERFORM "SYSCALL:CREATELOG"
               4176: *
  D44C         4177: CREATELOG EQU     *
               4178:         ;LDX    #LOGIOCB  SET UP IOCBPOINTER...
D44C CECF35    4179:         LDX     #LOGIOCB
D44F FFCE09    4180:         STX     IOCBPOINTER       AS THOUGH "CHECKCHANNELCLOSED" HAD BEEN CALLED
               4181:         ;JSR    CHECKCHANNELCL1      MAKE SURE THAT LOG CHANNEL IS CLOSED
D452 BDD257    4182:         JSR     CHECKCHANNELCL1
D455 8D32      4183:         BSR      FNAMEPROCESS1     TO FIND DRIVER ADDRESS
D457 2002      4184:         BRA       CREATE1   AND GO CREATE THE FILE
               4185: *
               4186: *       CREATE -- PERFORM "SYSCALL:CREATE"
               4187: *
  D459         4188: CREATE    EQU     *
D459 8D2B      4189:         BSR      FNAMEPROCESS      PROCESS CHANNEL NUMBER AND FILE NAME
  D45B         4190: CREATE1   EQU     *
               4191:         ;JSR    [DRIVER:CREATE,X] GO CREATE THE FILE
D45B EE0C      4192:         LDX     DRIVER:CREATE,X
D45D AD00      4193:         JSR     0,X
D45F 24D1      4194:         BCC        OPEN2   OPEN THE CHANNEL
D461 39        4195:         RTS             OOPS, EXIT WITH ERROR
               4196: *
               4197: *       DELETE -- PERFORM "SYSCALL:DELETE"
               4198: *
  D462         4199: DELETE  EQU     *
               4200:         ;JSR    FNAMEPROCESS1     GO PARSE FILENAME TO DETERMINE DRIVER ADDRESS
D462 BDD489    4201:         JSR     FNAMEPROCESS1
               4202:         ;JMP    [DRIVER:DELETE,X]       NOW DELETE THE FILE
D465 EE10      4203:         LDX     DRIVER:DELETE,X
D467 6E00      4204:         JMP     0,X
               4205: *
               4206: *       READB -- PERFORM "SYSCALL:READB"
               4207: *
  D469         4208: READB     ;JSR    CHECKCHANNELOPEN
D469 BDD240    4209:         JSR     CHECKCHANNELOPEN
               4210:         ;JMP    [DRIVER:READB,X]  INVOKE THE DRIVER TO DO THE WORK
D46C EE08      4211:         LDX     DRIVER:READB,X
D46E 6E00      4212:         JMP     0,X
               4213: *




ASM/6800 1.4A0: D46E SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 139; Form 1     MAJOR CHANNEL OPERATIONS
SDOS11G.ASM
               4214: *       WRITEB -- PERFORM "SYSCALL:WRITEB"
               4215: *
  D470         4216: WRITEB   ;JSR    CHECKCHANNELOPEN
D470 BDD240    4217:         JSR     CHECKCHANNELOPEN
D473 BCCE52    4218:         CPX      CONSOLEDRIVER    DON'T WRITE IF CHANNEL 0 AND NOT CONSOLE!
D476 270A      4219:         BEQ      WRITEB1  B/ OK TO WRITE
               4220:         ;LDX    CODE+SDOS:IOBLOCKPTR       ISN'T CONSOLE, IS THIS CHANNEL ZERO ?
D478 FECE07    4221:         LDX     CODE+SDOS:IOBLOCKPTR
               4222:         ;LDA     WRITEB:CHANNEL,X   ...?
D47B A602      4223:         LDAA      WRITEB:CHANNEL,X
D47D 2715      4224:         BEQ      WRITEBOKRTS      B/ YES, DON'T DO THE WRITE!
               4225:         ;LDX    DRIVERVPOINTER  NOPE, MUST DO THE WRITE
D47F FECE54    4226:         LDX     DRIVERVPOINTER
  D482         4227: WRITEB1
               4228:         ;JMP    [DRIVER:WRITEB,X]
D482 EE0A      4229:         LDX     DRIVER:WRITEB,X
D484 6E00      4230:         JMP     0,X




ASM/6800 1.4A0: D484 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 140; Form 1     MAJOR CHANNEL OPERATIONS
SDOS11G.ASM
               4232: *       FNAMEPROCESS -- CHECK TO MAKE SURE CHANNEL IS CLOSED
               4233: *       LOCATE DRIVER AND STRIP OFF DEVICE NAME
               4234: *       BUILDS COPY OF SYSCALL IN IOBLOCK
               4235: *       EXCEPT THAT FILENAME POINTER HAS BEEN STEPPED PAST DEVICE NAME PREFIX
               4236: *       ASSUMES THAT A FILENAME SYSCALL WITH SCLEN=SCLEN:DATA WAS PASSED BY USER
               4237: *
  D486         4238: FNAMEPROCESS      ; ENTRY POINT FOR OPEN/CREATE
               4239:         ;JSR    CHECKCHANNELCLOSED   AND LOCATE THE IOCB FOR THE SPECIFIED CHANNEL
D486 BDD255    4240:         JSR     CHECKCHANNELCLOSED
  D489         4241: FNAMEPROCESS1     ; ENTRY POINT FOR OTHER FILENAME SYSCALLS
               4242:         ;JSR    CHECKRDLEN        MAKE SURE READ-BACK BUFFER HAS AT LEAST 2 BYTES
D489 BDD8A0    4243:         JSR     CHECKRDLEN
D48C 0002      4244:         FDB      2       TO PLACE SIZE OF FILENAME INTO
               4245:         ;JSR    FINDDRIVER      SPECIFIED BY FILENAME STRING
D48E BDD2AE    4246:         JSR     FINDDRIVER
               4247:         ;LDX    DRIVERVPOINTER  FOR CONVENIENCE OF EVERYBODY ELSE
D491 FECE54    4248:         LDX     DRIVERVPOINTER
  D494         4249: WRITEBOKRTS
D494 0C39      4250:         OKRTS           AND EXIT




ASM/6800 1.4A0: D494 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 141; Form 1     MAJOR CHANNEL OPERATIONS
SDOS11G.ASM
               4252: *       DISKDEFAULT -- PERFORM "SYSCALL:DISKDEFAULT"
               4253: *
  D496         4254: DISKDEFAULT      EQU     *
D496 8DF1      4255:         BSR      FNAMEPROCESS1     GO PROCESS FILE NAME TO GET DEVICE NAME
D498 8CDC95    4256:         CPX      #DISKDEVICEDRIVER        THIS IS ONLY LEGAL DRIVER THAT CAN RESULT
D49B 2607      4257:         BNE      ERRMUSTBEDISK    B/ SPECIFIED OTHER THAN DISK DEVICE
               4258:         ;LDX    DCBPOINTER        USE THIS DISK INFO TABLE FOR DEFAULT FROM NOW ON
D49D DE06      4259:         LDX     DCBPOINTER
D49F FFCE4C    4260:         STX     DEFAULTDISKDCB     !
D4A2 0C39      4261:         OKRTS           HOW EASY!
  D4A3         4262: CLOSERTS EQU     *-1
               4263: 
  D4A4         4264: ERRMUSTBEDISK    EQU     *
               4265:         ;JSR    ERRET
D4A4 BDD1F7    4266:         JSR     ERRET
D4A7 0422      4267:         FDB      ERR:MUSTBEDISK
               4268: *
               4269: *       CLOSE -- PERFORM "SYSCALL:CLOSE"
               4270: *
  D4A9         4271: CLOSE    ;JSR    CHECKCHANNELOPEN
D4A9 BDD240    4272:         JSR     CHECKCHANNELOPEN
               4273:         ;JSR    [DRIVER:CLOSE,X]
D4AC EE02      4274:         LDX     DRIVER:CLOSE,X
D4AE AD00      4275:         JSR     0,X
D4B0 2403      4276:         BCC        CLOSE1   B/ NO ERROR
               4277:         ;JSR    ERRORSAVE        GO SET THE ERROR
D4B2 BDD219    4278:         JSR     ERRORSAVE
               4279: *       THE FOLLOWING CODE DOES NOT FIDDLE THE CARRY BIT
               4280: *       DON'T FOOL AROUND WITH IT, OR ELSE...
  D4B5         4281: CLOSE1   ;LDX    IOCBPOINTER
D4B5 FECE09    4282:         LDX     IOCBPOINTER
D4B8 8600      4283:         LDAA      #0
D4BA A709      4284:         STAA      IOCB:DRIVER,X
D4BC A70A      4285:         STAA      IOCB:DRIVER+1,X
D4BE 24E3      4286:         BCC        CLOSERTS (OKRTS)
               4287:         ;JMP    ERRORED
D4C0 7ED20A    4288:         JMP     ERRORED
               4289: *
               4290: *       CLOSELOG -- PERFORM "SYSCALL:CLOSELOG"
               4291: *




ASM/6800 1.4A0: D4C0 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 142; Form 1     MAJOR CHANNEL OPERATIONS
SDOS11G.ASM
  D4C3         4292: CLOSELOG ;LDX    #LOGCLOSE
D4C3 CED4C9    4293:         LDX     #LOGCLOSE
               4294:         ;JMP    SYSCALLENTRY
D4C6 7ED1B3    4295:         JMP     SYSCALLENTRY
               4296: *
D4C9 02        4297: LOGCLOSE FCB       SYSCALL:CLOSE      FUNCTION
D4CA 03        4298:         FCB       CLOSE:SCLEN
D4CB FF        4299:         FCB       LOGCHANNEL        CHANNEL




ASM/6800 1.4A0: D4CB SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 143; Form 1     MAJOR CHANNEL OPERATIONS
SDOS11G.ASM
               4301: *
               4302: *       RENAME -- PERFORM "SYSCALL:RENAME"
               4303: *
  D4CC         4304: RENAME   EQU     *
               4305:         ;JSR    CHECKCHANNELOPEN    OR YOU'RE DEAD!
D4CC BDD240    4306:         JSR     CHECKCHANNELOPEN
               4307:         ;JSR    FNAMEPROCESS1     TO FIND OUT THE DEVICE DRIVER
D4CF BDD489    4308:         JSR     FNAMEPROCESS1
               4309:         ;LDX    IOCBPOINTER       RENAME TO SAME DEVICE ?
D4D2 FECE09    4310:         LDX     IOCBPOINTER
               4311:         ;LDX    IOCB:DRIVER,X     ...?
D4D5 EE09      4312:         LDX     IOCB:DRIVER,X
D4D7 BCCE54    4313:         CPX      DRIVERVPOINTER  ...?
D4DA 2615      4314:         BNE      ERRRENAMEDEVICE   B/ TO DIFFERENT DEVICE, I CAN'T ALLOW THAT...
D4DC 8CDCB6    4315:         CPX      #DISKFILEDRIVER IS THIS THE DISK FILE DRIVER ?
D4DF 2609      4316:         BNE      RENAME1  B/ NO
               4317:         ;LDX    IOCBPOINTER       RENAME A FILE ON ONE DISK TO ANOTHER DISK ?
D4E1 FECE09    4318:         LDX     IOCBPOINTER
               4319:         ;LDX    IOCB:DCB,X  ...?
D4E4 EE00      4320:         LDX     IOCB:DCB,X
D4E6 9C06      4321:         CPX      DCBPOINTER        ...?
D4E8 2607      4322:         BNE      ERRRENAMEDEVICE   B/ YES, THAT'S ILLEGAL TOO!
  D4EA         4323: RENAME1  EQU     *
               4324:         ;LDX    DRIVERVPOINTER  GO DO THE RENAME
D4EA FECE54    4325:         LDX     DRIVERVPOINTER
               4326:         ;JMP    [DRIVER:RENAME,X]
D4ED EE0E      4327:         LDX     DRIVER:RENAME,X
D4EF 6E00      4328:         JMP     0,X
               4329: 
  D4F1         4330: ERRRENAMEDEVICE   EQU     *
               4331:         ;JSR    ERRET
D4F1 BDD1F7    4332:         JSR     ERRET
D4F4 040B      4333:         FDB      ERR:RENAMEDEVICE




ASM/6800 1.4A0: D4F4 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 144; Form 1     MAJOR CHANNEL OPERATIONS
SDOS11G.ASM
  D4F6         4335: READAEOF  ; RE-CAUSE EOF ERROR
               4336:         ;JSR    ERRET
D4F6 BDD1F7    4337:         JSR     ERRET
D4F9 03E9      4338:         FDB      ERR:EOFHIT
               4339: *
               4340: *       READA -- PERFORM "SYSCALL:READA"
               4341: *
  D4FB         4342: READA     ;JSR    CHECKCHANNELOPEN
D4FB BDD240    4343:         JSR     CHECKCHANNELOPEN
               4344:         ;JSR    [DRIVER:READA,X]  ISSUE THE READ
D4FE EE04      4345:         LDX     DRIVER:READA,X
D500 AD00      4346:         JSR     0,X
               4347:         ;LBCC      READALOG  B/ ALL OK, SEE IF WE LOG IT
D502 2503      4348:         BCS       MACRO:0009
D504 7ED595    4349:         JMP     READALOG
  D507         4350: MACRO:0009
               4351:         ;PSHX           SAVE THE ERROR CODE
D507 DF00      4352:         STX     TEMPX
D509 D601      4353:         LDAB      TEMPB
D50B 37        4354:         PSHB
D50C D600      4355:         LDAB      TEMPA
D50E 37        4356:         PSHB
               4357:         ;JSR    READALOG  LOG WHAT WAS COLLECTED SO FAR
D50F BDD595    4358:         JSR     READALOG
D512 2500      4359:         BCS       *+2     WE CAN ONLY RECOVER FROM 1 ERROR, LOSE THE 2ND
               4360:         ;PULX           GET ORIGINAL ERROR CAUSE
D514 30        4361:         TSX
D515 EE00      4362:         LDX     0,X
D517 31        4363:         INS
D518 31        4364:         INS
D519 8C03E9    4365:         CPX      #ERR:EOFHIT     DID WE HIT EOF?
               4366:         ;LBNE    ERRORINX        B/ NO, SOME OTHER ERROR
D51C 2703      4367:         BEQ      MACRO:000A
D51E 7ED201    4368:         JMP     ERRORINX
  D521         4369: MACRO:000A
               4370:         ;LDX    USERSYSCALLPTR    EOF ON CHANNEL 0 ?
D521 FECF90    4371:         LDX     USERSYSCALLPTR
D524 A602      4372:         LDAA      READA:CHANNEL,X     (GRAB THE CHANNEL NUMBER)
D526 26CE      4373:         BNE      READAEOF  B/ NO, EOF ON A NON-ZERO CHANNEL!
               4374:         ;JSR    ISCONSOLE        IS CHANNEL ZERO OPEN TO THE CONSOLE?




ASM/6800 1.4A0: D528 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 145; Form 1     MAJOR CHANNEL OPERATIONS
SDOS11G.ASM
D528 BDD220    4375:         JSR     ISCONSOLE
D52B 24C9      4376:         BCC        READAEOF  B/ YES, PASS EOF ERROR BACK TO CALLER
               4377:         ;LDX    #CLOSECHANNEL0     CLOSE CHANNEL 0
D52D CED5D0    4378:         LDX     #CLOSECHANNEL0
               4379:         ;JSR    SYSCALLENTRY
D530 BDD1B3    4380:         JSR     SYSCALLENTRY
               4381:         ;LDX    LOGIOCB+IOCB:DRIVER IS LOG CHANNEL OPEN ?
D533 FECF3E    4382:         LDX     LOGIOCB+IOCB:DRIVER
D536 2708      4383:         BEQ      READA2    B/ NO, LEAVE IT ALONE!
D538 BCCE52    4384:         CPX      CONSOLEDRIVER    YES, OPEN TO THE CONSOLE ?
D53B 2603      4385:         BNE      READA2    B/ NO, LEAVE IT ALONE!
               4386:         ;JSR    CLOSELOG YES, CLOSE THE LOG FILE!
D53D BDD4C3    4387:         JSR     CLOSELOG
  D540         4388: READA2    EQU     *
               4389:         ;JSR    OPENCONSOLE      RE-OPEN CHANNEL 0 TO THE CONSOLE
D540 BDD89A    4390:         JSR     OPENCONSOLE
               4391: *
               4392: *       BUILD NEW "READA" REQUEST IN "IOBLOCK" TO...
               4393: *       READ REMAINDER OF INPUT REQUEST
               4394: *
               4395:         ;LDX    #SYSCALL:READA*256+READA:SCLEN SET UP SYSCALL OPCODE AND LENGTH
D543 CE0A0E    4396:         LDX     #SYSCALL:READA*256+READA:SCLEN
D546 FFCFFD    4397:         STX     IOBLOCK+SCBLK:OPCODE
               4398:         ;LDX    USERSYSCALLPTR    COMPUTE NEW BUFFER POINTER
D549 FECF90    4399:         LDX     USERSYSCALLPTR
               4400:         ;LDD    READA:ACTUALCOUNT,X
D54C E609      4401:         LDAB      (READA:ACTUALCOUNT)+1,X
D54E A608      4402:         LDAA      READA:ACTUALCOUNT,X
               4403:         ;ADDD    READA:BUFFERP,X
D550 EB0B      4404:         ADDB      (READA:BUFFERP)+1,X
D552 A90A      4405:         ADCA       READA:BUFFERP,X
               4406:         ;STD    IOBLOCK+READA:BUFFERP
D554 F7D008    4407:         STAB      IOBLOCK+READA:BUFFERP+1
D557 B7D007    4408:         STAA      IOBLOCK+READA:BUFFERP
               4409:         ;LDD    READA:MAXCOUNT,X    COMPUTE NEW MAX COUNT
D55A E60D      4410:         LDAB      (READA:MAXCOUNT)+1,X
D55C A60C      4411:         LDAA      READA:MAXCOUNT,X
               4412:         ;SUBD    READA:ACTUALCOUNT,X
D55E E009      4413:         SUBB      (READA:ACTUALCOUNT)+1,X
D560 A208      4414:         SBCA       READA:ACTUALCOUNT,X




ASM/6800 1.4A0: D560 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 146; Form 1     MAJOR CHANNEL OPERATIONS
SDOS11G.ASM
               4415:         ;STD    IOBLOCK+READA:MAXCOUNT
D562 F7D00A    4416:         STAB      IOBLOCK+READA:MAXCOUNT+1
D565 B7D009    4417:         STAA      IOBLOCK+READA:MAXCOUNT
D568 A603      4418:         LDAA      READA:LMFLAG,X
               4419:         ;LDX    #IOBLOCK
D56A CECFFD    4420:         LDX     #IOBLOCK
D56D A703      4421:         STAA      READA:LMFLAG,X
               4422:         ;CLR     READA:CHANNEL,X
D56F 6F02      4423:         CLR      READA:CHANNEL,X
               4424:         ;CLR     READA:ACTUALCOUNT,X   ZERO THE ACTUAL # BYTES MOVED
D571 6F08      4425:         CLR      READA:ACTUALCOUNT,X
               4426:         ;CLR     READA:ACTUALCOUNT+1,X
D573 6F09      4427:         CLR      READA:ACTUALCOUNT+1,X
D575 FFCE07    4428:         STX     CODE+SDOS:IOBLOCKPTR
               4429:         ;LDX    DRIVERVPOINTER  STILL VALID BECAUSE OF OPENCONSOLE
D578 FECE54    4430:         LDX     DRIVERVPOINTER
               4431:         ;JSR    [DRIVER:READA,X]  ISSUE READ TO CONSOLE
D57B EE04      4432:         LDX     DRIVER:READA,X
D57D AD00      4433:         JSR     0,X
               4434:         ;LBCS     ERRORINX        ERROR IN FINISHING THE READ!
D57F 2403      4435:         BCC        MACRO:000B
D581 7ED201    4436:         JMP     ERRORINX
  D584         4437: MACRO:000B
  D584         4438: READA1    ;LDX    USERSYSCALLPTR    DOCTOR UP THE ORIGINAL I/O BLOCK
D584 FECF90    4439:         LDX     USERSYSCALLPTR
               4440:         ;LDD    READA:ACTUALCOUNT,X   (ADJUSTS THE # BYTES XFERRED BY 2ND AND LATER "R
D587 E609      4441:         LDAB      (READA:ACTUALCOUNT)+1,X
D589 A608      4442:         LDAA      READA:ACTUALCOUNT,X
               4443:         ;ADDD    IOBLOCK+READA:ACTUALCOUNT       DONE BECAUSE OF "EOFHIT"S ON CHANNEL 
D58B FBD006    4444:         ADDB      IOBLOCK+READA:ACTUALCOUNT+1
D58E B9D005    4445:         ADCA       IOBLOCK+READA:ACTUALCOUNT
               4446:         ;STD    READA:ACTUALCOUNT,X
D591 E709      4447:         STAB      (READA:ACTUALCOUNT)+1,X
D593 A708      4448:         STAA      READA:ACTUALCOUNT,X
               4449: *
               4450: *       LOG THE CHANNEL ZERO ACTIVITY
               4451: *
  D595         4452: READALOG  EQU     *
               4453:         ;LDX    CODE+SDOS:IOBLOCKPTR       SET UP WRITE BUFFER DATA...
D595 FECE07    4454:         LDX     CODE+SDOS:IOBLOCKPTR




ASM/6800 1.4A0: D595 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 147; Form 1     MAJOR CHANNEL OPERATIONS
SDOS11G.ASM
               4455:         ;LDD    READA:ACTUALCOUNT,X   FOR LOG SYSCALL BLOCK...
D598 E609      4456:         LDAB      (READA:ACTUALCOUNT)+1,X
D59A A608      4457:         LDAA      READA:ACTUALCOUNT,X
               4458:         ;LDX    READA:BUFFERP,X    IN CASE WE ARE LOGGING
D59C EE0A      4459:         LDX     READA:BUFFERP,X
  D59E         4460: WRITEALOG        ; ENTRY POINT FOR WRITEA TO HANDLE LOGGING
               4461:         ;STD    LOGOUT+WRITEA:COUNT       SAVE LENGTH OF STUFF TO WRITE TO LOG
D59E F7CFB5    4462:         STAB      LOGOUT+WRITEA:COUNT+1
D5A1 B7CFB4    4463:         STAA      LOGOUT+WRITEA:COUNT
D5A4 FFCFB2    4464:         STX     LOGOUT+WRITEA:BUFFERP     SAVE LOCATION OF DATA TO LOG
D5A7 8D2A      4465:         BSR      DOWELOG OUTPUT DUPLICATE OF READ/WRITE DATA TO LOG DEVICE ?
D5A9 2437      4466:         BCC        READARTS  B/ NOT LOGGING
               4467:         ;LDX    CODE+SDOS:IOBLOCKPTR       SET UP TO WRITE TO LOG DEVICE
D5AB FECE07    4468:         LDX     CODE+SDOS:IOBLOCKPTR
               4469:         ;LDA     SCBLK:WLEN,X      COPY LENGTH OF SYSCALL BLOCK
D5AE A601      4470:         LDAA      SCBLK:WLEN,X
D5B0 847F      4471:         ANDA      #$7F    MASK OFF "NO WAIT" BIT
               4472:         ;CMPA     #RWPOSITION:SCLEN        LONGER THAN LONGEST REASONABLE ?
D5B2 8112      4473:         CMPA      #RWPOSITION:SCLEN
D5B4 2302      4474:         BLS      READALOG0 B/ NOPE
               4475:         ;LDA     #RWPOSITION:SCLEN        YES, SHORTEN TO SIZE SET ASIDE FOR LOG BLOCK
D5B6 8612      4476:         LDAA      #RWPOSITION:SCLEN
  D5B8         4477: READALOG0
               4478:         ;STA     LOGOUT+SCBLK:WLEN SET SIZE OF LOG REQUEST
D5B8 B7CFAF    4479:         STAA      LOGOUT+SCBLK:WLEN
               4480:         ;LDD    RW:POSITION,X   COPY POSITION FROM ORIGINAL BLOCK...
D5BB E60F      4481:         LDAB      (RW:POSITION)+1,X
D5BD A60E      4482:         LDAA      RW:POSITION,X
               4483:         ;STD    LOGOUT+RW:POSITION      IN CASE IT WAS SUPPLIED
D5BF F7CFBD    4484:         STAB      LOGOUT+RW:POSITION+1
D5C2 B7CFBC    4485:         STAA      LOGOUT+RW:POSITION
               4486:         ;LDX    RW:POSITION+2,X
D5C5 EE10      4487:         LDX     RW:POSITION+2,X
D5C7 FFCFBE    4488:         STX     LOGOUT+RW:POSITION+2
               4489:         ;LDX    #LOGOUT SEND COPY TO LOG CHANNEL
D5CA CECFAE    4490:         LDX     #LOGOUT
               4491:         ;JMP    SYSCALLENTRY
D5CD 7ED1B3    4492:         JMP     SYSCALLENTRY
               4493: 
D5D0 02        4494: CLOSECHANNEL0      FCB       SYSCALL:CLOSE




ASM/6800 1.4A0: D5D1 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 148; Form 1     MAJOR CHANNEL OPERATIONS
SDOS11G.ASM
D5D1 03        4495:         FCB       CLOSE:SCLEN
D5D2 00        4496:         FCB       0       CHANNEL




ASM/6800 1.4A0: D5D2 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 149; Form 1     MAJOR CHANNEL OPERATIONS
SDOS11G.ASM
               4498: *       CHECK IF WE ARE LOGGING
               4499: *       C SET IF YES, CLEAR IF NO
               4500: *
  D5D3         4501: DOWELOG ;LDX    CODE+SDOS:IOBLOCKPTR
D5D3 FECE07    4502:         LDX     CODE+SDOS:IOBLOCKPTR
  0000         4503:         IF      READA:CHANNEL#WRITEA:CHANNEL
 *S*           4504:         ?DOWELOG WON'T WORK?
               4505:         FIN
D5D6 A602      4506:         LDAA      READA:CHANNEL,X     IS IT CHANNEL 0?
D5D8 2607      4507:         BNE      DONTLOG B/ NO, DON'T LOG
               4508:         ;LDX    LOGIOCB+IOCB:DRIVER IS THE LOG FILE OPEN?
D5DA FECF3E    4509:         LDX     LOGIOCB+IOCB:DRIVER
D5DD 2702      4510:         BEQ      DONTLOG B/ NO, DON'T LOG
D5DF 0D        4511:         SEC              "WE ARE LOGGING"
D5E0 39        4512:         RTS
D5E1 0C        4513: DONTLOG CLC               "WE ARE NOT LOGGING"
D5E2 39        4514: READARTS  RTS




ASM/6800 1.4A0: D5E2 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 150; Form 1     MAJOR CHANNEL OPERATIONS
SDOS11G.ASM
               4516: *
               4517: *       WRITEA -- PERFORM "SYSCALL:WRITEA"
               4518: *
  D5E3         4519: WRITEA   ;JSR    CHECKCHANNELOPEN
D5E3 BDD240    4520:         JSR     CHECKCHANNELOPEN
D5E6 BCCE52    4521:         CPX      CONSOLEDRIVER    DON'T WRITE IF IS CHANNEL 0 AND IS NOT CONSOLE!
D5E9 270A      4522:         BEQ      WRITEA0  B/ IS CONSOLE, IS ALWAYS OK TO WRITE
               4523:         ;LDX    CODE+SDOS:IOBLOCKPTR       NOT CONSOLE, IS THIS CHANNEL 0 ?
D5EB FECE07    4524:         LDX     CODE+SDOS:IOBLOCKPTR
               4525:         ;LDA     WRITEA:CHANNEL,X   ...?
D5EE A602      4526:         LDAA      WRITEA:CHANNEL,X
D5F0 2709      4527:         BEQ      WRITEA1  B/ YES, DON'T DO WRITE, WOULD DAMAGE "DO" FILE!
               4528:         ;LDX    DRIVERVPOINTER  MUST DO WRITE, GET POINTER TO DRIVER VECTOR
D5F2 FECE54    4529:         LDX     DRIVERVPOINTER
  D5F5         4530: WRITEA0
               4531:         ;JSR    [DRIVER:WRITEA,X]        GO DO THE WRITE
D5F5 EE06      4532:         LDX     DRIVER:WRITEA,X
D5F7 AD00      4533:         JSR     0,X
D5F9 25E7      4534:         BCS       READARTS  B/ ERROR, GIVE UP NOW!
  D5FB         4535: WRITEA1  ;LDX    CODE+SDOS:IOBLOCKPTR       SET UP TO HANDLE LOGGING
D5FB FECE07    4536:         LDX     CODE+SDOS:IOBLOCKPTR
               4537:         ;LDD    WRITEA:COUNT,X    GET NUMBER OF BYTES TO WRITE
D5FE E607      4538:         LDAB      (WRITEA:COUNT)+1,X
D600 A606      4539:         LDAA      WRITEA:COUNT,X
               4540:         ;LDX    WRITEA:BUFFERP,X  AND WHERE TO WRITE THEM FROM
D602 EE04      4541:         LDX     WRITEA:BUFFERP,X
D604 2098      4542:         BRA       WRITEALOG        GO SEE IF WE SHOULD LOG THIS DATA




ASM/6800 1.4A0: D604 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 151; Form 1     MISCELLANEOUS SYSCALLS
SDOS11G.ASM
               4544: *
               4545: *       CONTROL -- PERFORM "SYSCALL:CONTROL"
               4546: *
  D606         4547: CONTROL  EQU     *
D606 8D04      4548:         BSR      STATUSCONTROL     DO ALL THE COMMON WORK
               4549:         ;JMP    [DRIVER:CONTROL,X]       CALL THE DRIVER
D608 EE12      4550:         LDX     DRIVER:CONTROL,X
D60A 6E00      4551:         JMP     0,X
               4552: *
               4553: *       STATUSCONTROL -- COMMON SUBROUTINE FOR "CONTROL", "STATUS" SYSCALLS
               4554: *       IF OPERATION IS ON CHANNEL 0, IT IS AIMED AT LOG CHANNEL IF LOG IS OPEN
               4555: *       SETS UP (A) TO CONTAIN THE ACTUAL STATUS (CONTROL) REQUEST CODE
               4556: *       RETURNS (X) = DRIVERVPOINTER
               4557: *
  D60C         4558: STATUSCONTROL     EQU     *
               4559:         ;JSR    CHECKCHANNELOPEN    OR WE CAN'T DO ANYTHING AT ALL!
D60C BDD240    4560:         JSR     CHECKCHANNELOPEN
D60F 8DC2      4561:         BSR      DOWELOG LOGGING ?
D611 240D      4562:         BCC        STATUSCONTROL1    B/ NOT LOGGING
D613 FFCE54    4563:         STX     DRIVERVPOINTER  LOGGING, USE LOGIOCB'S DRIVER...
               4564:         ;LDX    #LOGIOCB  SET EVERYTHING ELSE UP...
D616 CECF35    4565:         LDX     #LOGIOCB
D619 FFCE09    4566:         STX     IOCBPOINTER
               4567:         ;LDX    IOCB:DCB,X  AS THOUGH "OPEN" ON THE LOG CHANNEL...
D61C EE00      4568:         LDX     IOCB:DCB,X
D61E DF06      4569:         STX     DCBPOINTER        HAD BEEN PERFORMED
  D620         4570: STATUSCONTROL1    EQU     *
               4571:         ;LDX    CODE+SDOS:IOBLOCKPTR       GET STATUS REQUEST CODE TO (A)
D620 FECE07    4572:         LDX     CODE+SDOS:IOBLOCKPTR
D623 A603      4573:         LDAA      STATUS:CODE,X
               4574:         ;LDX    DRIVERVPOINTER  GET DRIVER ADDRESS TO (X), AS PROMISED
D625 FECE54    4575:         LDX     DRIVERVPOINTER
D628 0C39      4576:         OKRTS
               4577: *
               4578: *       STATUS -- PERFORM "SYSCALL:STATUS"
               4579: *
  D62A         4580: STATUS   EQU     *
D62A 8DE0      4581:         BSR      STATUSCONTROL     DO COMMON WORK
               4582:         ;JMP    [DRIVER:STATUS,X]        CALL THE DEVICE DRIVER
D62C EE14      4583:         LDX     DRIVER:STATUS,X




ASM/6800 1.4A0: D62E SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 152; Form 1     MISCELLANEOUS SYSCALLS
SDOS11G.ASM
D62E 6E00      4584:         JMP     0,X




ASM/6800 1.4A0: D62E SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 153; Form 1     MISCELLANEOUS SYSCALLS
SDOS11G.ASM
               4586: *       DEBUG -- PERFORM "SYSCALL:DEBUG"
               4587: *       ASSERT: SDOSRECURSIVECALL=1 (I.E., SDOS ITSELF DOES NOT INVOKE THIS!)
               4588: *
  D630         4589: DEBUG    ;LDX    CODE+SDOS:CONFIGURATION
D630 FECE03    4590:         LDX     CODE+SDOS:CONFIGURATION
               4591:         ;LDX    CNFG:DEBUGGER,X   IS THERE A DEBUGGER?
D633 EE0D      4592:         LDX     CNFG:DEBUGGER,X
D635 2707      4593:         BEQ      DEBUG1   B/ NOPE
               4594:         ;LEAS    2,S     POP RETURN ADDRESS PUSHED BY "SYSCALL2"
  0000         4595:         IF      2<0
 *S*           4596:         RPT     -2
 *S*           4597:         DES
               4598:         ELSE
  0002         4599:         RPT     2
D637 31        4600:         INS
               4601:         FIN
               4602:         ;DEC     SDOSRECURSIVECALL  FLAG "NOT IN SDOS"
D639 7ACF8D    4603:         DEC      SDOSRECURSIVECALL
               4604:         ;JMP    ,X      NOW ENTER THE DEBUGGER (RETURN VIA RTS)
D63C 6E00      4605:         JMP     0,X
               4606: 
  D63E         4607: DEBUG1   EQU     *
               4608:         ;LDX    #ERR:NODEBUGGER  YOU GUESSED IT!
D63E CE03EB    4609:         LDX     #ERR:NODEBUGGER
               4610:         ;JMP    EXIT1   GO STICK USER WITH THIS ERROR
D641 7ED80E    4611:         JMP     EXIT1
               4612: *
               4613: *       ATTNCHECK -- PERFORM "SYSCALL:ATTNCHECK"
               4614: *
  D644         4615: ATTNCHECK  ;LDX    CODE+SDOS:CONFIGURATION    DOES OKRTS IF OPERATOR INTERVENTION NO R
D644 FECE03    4616:         LDX     CODE+SDOS:CONFIGURATION
               4617:         ;JMP    [CNFG:ATTNCHECK,X]
D647 EE0B      4618:         LDX     CNFG:ATTNCHECK,X
D649 6E00      4619:         JMP     0,X
               4620: *
               4621: *       SETERROR -- PERFORM "SYSCALL:SETERROR"
               4622: *
  D64B         4623: SETERROR        ;LDX    CODE+SDOS:IOBLOCKPTR
D64B FECE07    4624:         LDX     CODE+SDOS:IOBLOCKPTR
               4625:         ;LDX    SETERROR:CODE,X




ASM/6800 1.4A0: D64E SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 154; Form 1     MISCELLANEOUS SYSCALLS
SDOS11G.ASM
D64E EE02      4626:         LDX     SETERROR:CODE,X
D650 FFCF26    4627:         STX     USERSLASTERROR
  D653         4628: WAITDONE ; FOR NOW, SINCE IT'S NOT REALLY IMPLEMENTED
D653 0C39      4629:         OKRTS
               4630: *
               4631: *       GETERROR -- PERFORM "SYSCALL:GETERROR"
               4632: *
  D655         4633: GETERROR        EQU     *
               4634:         ;JSR    CHECKRDLEN        MAKE SURE READ BUFFER IS LARGE ENOUGH
D655 BDD8A0    4635:         JSR     CHECKRDLEN
D658 0002      4636:         FDB      2       2 BYTES OF ERROR CODE TO READ BACK
               4637:         ;LDD    USERSLASTERROR   COPY ERROR CODE TO READ BUFFER
D65A F6CF27    4638:         LDAB      USERSLASTERROR+1
D65D B6CF26    4639:         LDAA      USERSLASTERROR
               4640:         ;STD    [SCBLK:RDBUF,X]
D660 EE0A      4641:         LDX     SCBLK:RDBUF,X
D662 E701      4642:         STAB      1,X
D664 A700      4643:         STAA      0,X
D666 0C39      4644:         OKRTS




ASM/6800 1.4A0: D666 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 155; Form 1     ERROR DISPLAY
SDOS11G.ASM
               4646: *       DISPLAYERROR -- DISPLAY "USERSLASTERROR" ON THE CONSOLE...
               4647: *       AS EITHER AN ERROR STRING FROM THE $ERRORMESSAGES FILE
               4648: *       OR AS "ERROR ddddd" IF WE CAN'T GET TO $ERRORMESSAGES SOMEHOW
               4649: *       IF WE CANNOT PRINT THE ERROR MESSAGE, CROAK AND DIE!
               4650: *       (EXAMINE "LASTERROR" IN SDOS:XXXX TO FIND OUT WHY)
               4651: *
  D668         4652: DISPLAYERROR     ;LDX    USERSLASTERROR   DO IT NOW, IN CASE OF ERROR WHILE
D668 FECF26    4653:         LDX     USERSLASTERROR
D66B FFCF2D    4654:         STX     ERRORNUMBER      PROCESSING THIS ERROR
  D66E         4655: DISPLAYERRORRETRY ; TRY TO DISPLAY ERROR AGAIN
               4656:         ;JSR    OPENCONSOLE      MAKE SURE WE CAN OUTPUT THE ERROR MESSAGE
D66E BDD89A    4657:         JSR     OPENCONSOLE
D671 2405      4658:         BCC        DISPLAYERRORA     B/ NO ERROR
D673 8C0407    4659:         CPX      #ERR:CHBUSY       IS CHANNEL ALREADY OPEN ?
D676 26FE      4660:         BNE      *       LOOP IF NOT, CAN'T RECOVER!
  D678         4661: DISPLAYERRORA     EQU     *
               4662:         ;JSR    DSKFOPENERRORFILE       TRY TO OPEN THE "ERRORMSGS.SYS" FILE
D678 BDE281    4663:         JSR     DSKFOPENERRORFILE
D67B 2577      4664:         BCS       DISPLAYERROR4A    B/ CAN'T OPEN, GO DISPLAY ERROR IN NUMERIC FORMAT
               4665: *       NOW THE ERRORMSGS.SYS FILE IS OPEN!
               4666: *
               4667: *       POSITION TO THE ERROR MESSAGE POINTER
               4668: *       = 3 * ERROR NUMBER
               4669: *
               4670:         ;LDX    #DISPPOS1
D67D CECFD6    4671:         LDX     #DISPPOS1
               4672:         ;CLR     1,X     (0,X IS ASSEMBLED AS A ZERO!)
D680 6F01      4673:         CLR      1,X
               4674:         ;LDD    ERRORNUMBER
D682 F6CF2E    4675:         LDAB      ERRORNUMBER+1
D685 B6CF2D    4676:         LDAA      ERRORNUMBER
               4677:         ;ASLD            *2
D688 58        4678:         ASLB
D689 49        4679:         ROLA
D68A 6901      4680:         ROL     1,X
               4681:         ;ADDD    ERRORNUMBER      *3
D68C FBCF2E    4682:         ADDB      ERRORNUMBER+1
D68F B9CF2D    4683:         ADCA       ERRORNUMBER
D692 2402      4684:         BCC        DISPLAYERROR0
               4685:         ;INC     1,X




ASM/6800 1.4A0: D694 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 156; Form 1     ERROR DISPLAY
SDOS11G.ASM
D694 6C01      4686:         INC      1,X
  D696         4687: DISPLAYERROR0    ;STD    2,X
D696 E703      4688:         STAB      (2)+1,X
D698 A702      4689:         STAA      2,X
               4690:         ;LDX    #DISPPOS        NOW POSITION ERRORMSGS.SYS FILE...
D69A CED773    4691:         LDX     #DISPPOS
               4692:         ;JSR    SYSCALLENTRY      TO THE ERROR MESSAGE STRING POINTER
D69D BDD1B3    4693:         JSR     SYSCALLENTRY
D6A0 2550      4694:         BCS       DISPLAYERROR4    B/ OOPS, SOME PROBLEM OCCURRED
               4695:         ;LDX    #DISPREADB3       READ IN THE STRING ADDRESS
D6A2 CECFC8    4696:         LDX     #DISPREADB3
               4697:         ;JSR    SYSCALLENTRY
D6A5 BDD1B3    4698:         JSR     SYSCALLENTRY
D6A8 2548      4699:         BCS       DISPLAYERROR4
               4700:         ;LDX    DISPPOS1+2      IS THE ERROR MSG IN THE FILE?
D6AA FECFD8    4701:         LDX     DISPPOS1+2
D6AD 2605      4702:         BNE      DISPLAYERROR1A    B/ YUP
D6AF B6CFD7    4703:         LDAA      DISPPOS1+1      ...?
D6B2 273E      4704:         BEQ      DISPLAYERROR4    B/ NO, PRINT THE ERROR CODE THE HARD WAY
  D6B4         4705: DISPLAYERROR1A    EQU     *
               4706:         ;LDX    #DISPPOS        POSITION TO THE STRING
D6B4 CED773    4707:         LDX     #DISPPOS
               4708:         ;JSR    SYSCALLENTRY
D6B7 BDD1B3    4709:         JSR     SYSCALLENTRY
D6BA 2536      4710:         BCS       DISPLAYERROR4    B/ ERROR
               4711: *
               4712: *       COPY THE STRING TO CHANNEL 0
               4713: *
  D6BC         4714: DISPLAYERROR1    ;LDX    #DISPGETCHAR
D6BC CECFDA    4715:         LDX     #DISPGETCHAR
               4716:         ;JSR    SYSCALLENTRY
D6BF BDD1B3    4717:         JSR     SYSCALLENTRY
D6C2 252E      4718:         BCS       DISPLAYERROR4
D6C4 B6CFE8    4719:         LDAA      BUFFER
               4720:         ;CMPA     #ASCII:CR
D6C7 810D      4721:         CMPA      #ASCII:CR
D6C9 271E      4722:         BEQ      DISPLAYERRORDONE B/ I'M DONE!
               4723:         ;LDX    #DISPPUTCHAR      NOT DONE, OUTPUT THIS CHARACTER TO CONSOLE
D6CB CED77B    4724:         LDX     #DISPPUTCHAR
               4725:         ;JSR    SYSCALLENTRY




ASM/6800 1.4A0: D6CE SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 157; Form 1     ERROR DISPLAY
SDOS11G.ASM
D6CE BDD1B3    4726:         JSR     SYSCALLENTRY
D6D1 24E9      4727:         BCC        DISPLAYERROR1    B/ NO ERROR, GO OUTPUT NEXT CHARACTER
  D6D3         4728: DISPERRKILLLOG  ; PERHAPS ERROR IS CAUSED BY LOG DEVICE
D6D3 8D14      4729:         BSR      DISPLAYERRORDONE CLOSE ERRORMSGS.SYS FILE TO KEEP THINGS NEAT
               4730:         ;JSR    CLOSELOG GET RID OF POTENTIAL SOURCE OF PROBLEM
D6D5 BDD4C3    4731:         JSR     CLOSELOG
D6D8 2405      4732:         BCC        DISPERRKILLLOG1 B/ MANAGED TO CLOSE LOG FILE!
D6DA 8C0408    4733:         CPX      #ERR:CLOSED      FAIL BECAUSE ALREADY CLOSED ?
D6DD 27FE      4734:         BEQ      *       B/ YES, SITUATION IS HOPELESS...
  D6DF         4735: DISPERRKILLLOG1 ; MANAGED TO CLOSE THE LOG FILE (PERHAPS WITH ERROR)
               4736:         ;LDX    #CLOSECHANNEL0     TURN OFF THE "DO" FILE
D6DF CED5D0    4737:         LDX     #CLOSECHANNEL0
               4738:         ;JSR    SYSCALLENTRY
D6E2 BDD1B3    4739:         JSR     SYSCALLENTRY
D6E5 25FE      4740:         BCS       *       B/ BUT IT WAS OPEN A MINUTE AGO!!!???
D6E7 2085      4741:         BRA       DISPLAYERRORRETRY
               4742: *
               4743: *       CLOSE THE ERROR FILE (I'M DONE & ALL IS WELL)
               4744: *
  D6E9         4745: DISPLAYERRORDONE ;LDX    #DISPCLOSE
D6E9 CED770    4746:         LDX     #DISPCLOSE
               4747:         ;JSR    SYSCALLENTRY
D6EC BDD1B3    4748:         JSR     SYSCALLENTRY
D6EF 25FE      4749:         BCS       *       IF ITS NOT PERFECT, I WON'T LET YOU PLAY WITH MY BALL!
D6F1 39        4750:         RTS




ASM/6800 1.4A0: D6F1 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 158; Form 1     ERROR DISPLAY
SDOS11G.ASM
               4752: *       AN ERROR WAS DETECTED WHILE TRYING TO PRINT AN ERROR STRING
               4753: *       IGNORE THE ERROR, AND ATTEMPT TO PRINT "ERROR <ERRORNUMBER>" INSTEAD
               4754: *       (IN DECIMAL FORMAT)
               4755: *
D6F2 8DF5      4756: DISPLAYERROR4    BSR      DISPLAYERRORDONE CLOSE THE ERROR FILE
  D6F4         4757: DISPLAYERROR4A    EQU     *
               4758:         ;LDX    #DISPERROR
D6F4 CED783    4759:         LDX     #DISPERROR
               4760:         ;JSR    SYSCALLENTRY
D6F7 BDD1B3    4761:         JSR     SYSCALLENTRY
D6FA 25D7      4762:         BCS       DISPERRKILLLOG  IF I CAN'T PRINT THE ERROR, WE DON'T GO NOWHERE!
D6FC C610      4763:         LDAB      #16     (16 BITS TO CONVERT)
               4764:         ;LDX    #DECBUF   CONVERT 16 BITS BINARY TO 3 DIGITS BCD
D6FE CECF2A    4765:         LDX     #DECBUF
               4766:         ;CLR     0,X
D701 6F00      4767:         CLR      0,X
               4768:         ;CLR     1,X
D703 6F01      4769:         CLR      1,X
               4770:         ;CLR     2,X
D705 6F02      4771:         CLR      2,X
  D707         4772: DISPLAYERROR5    EQU     *
D707 6804      4773:         ASL      ERRORNUMBER-DECBUF+1,X
D709 6903      4774:         ROL     ERRORNUMBER-DECBUF,X
D70B A602      4775:         LDAA      2,X
D70D A902      4776:         ADCA       2,X
D70F 19        4777:         DAA
D710 A702      4778:         STAA      2,X
D712 A601      4779:         LDAA      1,X
D714 A901      4780:         ADCA       1,X
D716 19        4781:         DAA
D717 A701      4782:         STAA      1,X
D719 A600      4783:         LDAA      0,X
D71B A900      4784:         ADCA       0,X
D71D 19        4785:         DAA
D71E A700      4786:         STAA      0,X
D720 5A        4787:         DECB
D721 26E4      4788:         BNE      DISPLAYERROR5
D723 C603      4789:         LDAB      #3      (3 BYTES OF BCD)
D725 A602      4790: DISPLAYERROR6    LDAA      2,X
D727 840F      4791:         ANDA      #$F




ASM/6800 1.4A0: D729 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 159; Form 1     ERROR DISPLAY
SDOS11G.ASM
D729 36        4792:         PSHA
D72A A602      4793:         LDAA      2,X
D72C 44        4794:         LSRA
D72D 44        4795:         LSRA
D72E 44        4796:         LSRA
D72F 44        4797:         LSRA
D730 840F      4798:         ANDA      #$F
D732 36        4799:         PSHA
D733 09        4800:         DEX
D734 5A        4801:         DECB
D735 26EE      4802:         BNE      DISPLAYERROR6
               4803:         ;LDX    #STRINGBUFFER
D737 CECF2F    4804:         LDX     #STRINGBUFFER
D73A 8630      4805:         LDAA      #'0
D73C A700      4806:         STAA      0,X
D73E C606      4807:         LDAB      #6      (6 BYTES ON THE STACK)
  D740         4808: DISPLAYERROR7
D740 32        4809:         PULA
D741 5A        4810:         DECB
D742 2703      4811:         BEQ      DISPLAYERROR9    B/ NO MORE (THEY WERE ALL ZERO)
D744 4D        4812:         TSTA
D745 27F9      4813:         BEQ      DISPLAYERROR7    B/ ZERO SUPPRESS
D747 5C        4814: DISPLAYERROR9    INCB
D748 2001      4815:         BRA       DISPLAYERROR8A
               4816: 
  D74A         4817: DISPLAYERROR8
D74A 32        4818:         PULA
  D74B         4819: DISPLAYERROR8A
D74B 8B30      4820:         ADDA      #'0
               4821:         ;STA     ,X+
D74D A700      4822:         STAA      0,X
D74F 08        4823:         INX
D750 A700      4824:         STAA      0,X
D752 5A        4825:         DECB
D753 26F5      4826:         BNE      DISPLAYERROR8
D755 09        4827:         DEX
D756 DF00      4828:         STX     TEMPX   COMPUTE LENGTH OF THE STRING (ALWAYS < 256)
D758 D601      4829:         LDAB      TEMPX+1
D75A C02E      4830:         SUBB      #(STRINGBUFFER&$FF)-1
               4831:         ;LDX    #DISPOUT




ASM/6800 1.4A0: D75C SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 160; Form 1     ERROR DISPLAY
SDOS11G.ASM
D75C CECFC0    4832:         LDX     #DISPOUT
D75F E707      4833:         STAB      WRITEA:COUNT+1,X
               4834:         ;JSR    SYSCALLENTRY
D761 BDD1B3    4835:         JSR     SYSCALLENTRY
               4836:         ;LBCS     DISPERRKILLLOG  ITS GOTTA BE PERFECT, OR I QUIT!
D764 2403      4837:         BCC        MACRO:000C
D766 7ED6D3    4838:         JMP     DISPERRKILLLOG
  D769         4839: MACRO:000C
D769 39        4840:         RTS
               4841: *
D76A 4572726F  4842: DISPERRORMSG    FCC       'Error '
  0006         4843: DISPERRORMSGL   EQU     *-DISPERRORMSG
               4844: *
D770 02        4845: DISPCLOSE        FCB       SYSCALL:CLOSE      FUNCTION
D771 03        4846:         FCB       CLOSE:SCLEN
D772 FE        4847:         FCB       SYSCHANNEL        OPEN
               4848: *
  D773         4849: DISPPOS ; USED TO POSITION $ERRORMESSAGES FILE
D773 0E        4850:         FCB       SYSCALL:CONTROL
D774 08        4851:         FCB       CONTROL:SCLEN+4   ROOM FOR POINTER TO WRBUF
D775 FE        4852:         FCB       SYSCHANNEL        CHANNEL
D776 00        4853:         FCB       CC:POSITION       CONTROL SUB-CODE
D777 CFD6      4854:         FDB      DISPPOS1        POINTER TO 4 BYTE FILE POSITION DESIRED
D779 0004      4855:         FDB      4       SIZE OF FILE POSITION DATA
               4856: *
  D77B         4857: DISPPUTCHAR       ; USED TO WRITE ERROR MESSAGE BYTES TO CONSOLE
D77B 0C        4858:         FCB       SYSCALL:WRITEA
D77C 08        4859:         FCB       WRITEA:SCLEN
D77D 00        4860:         FCB       0       CHANNEL
D77E 00        4861:         FCB       IGNORED
D77F CFE8      4862:         FDB      BUFFER   THIS IS WHERE CHARACTER IS
D781 0001      4863:         FDB      1       ALL OF 1 BYTE!
               4864: *
  D783         4865: DISPERROR       ; USED TO DISPLAY "Error " ON CONSOLE
D783 0C        4866:         FCB       SYSCALL:WRITEA
D784 08        4867:         FCB       WRITEA:SCLEN
D785 00        4868:         FCB       0       CHANNEL
D786 00        4869:         FCB       IGNORED
D787 D76A      4870:         FDB      DISPERRORMSG    BUFFER ADDRESS
D789 0006      4871:         FDB      DISPERRORMSGL   # BYTES TO PRINT




ASM/6800 1.4A0: D789 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 161; Form 1     USER PROGRAM EXIT LOGIC
SDOS11G.ASM
               4873: *       KILLUSERPROGRAM -- ENTERED TO ABORT THE CURRENT USER PROGRAM
               4874: *       CAN BE CALLED FROM WITHIN SDOS
               4875: *       OR FROM WITHIN AN I/O PACKAGE SUBROUTINE OF SDOS
               4876: *       OR FROM AN INTERRUPT ROUTINE
               4877: *       RETURNS CARRY SET IF CAN'T KILL USER INSTANTLY, SO INPUT ROUTINES DON'T ABORT!
               4878: *
  D78B         4879: KILLUSERPROGRAM  EQU     *
D78B B6CE20    4880:         LDAA      CODE+SDOS:KILLPROOF      IS USER PROGRAM KILL PROOF ?
D78E 2621      4881:         BNE      KILLUSERRTS     B/ YES, DON'T KILL IT!
               4882:         ;CLR     KILLEDF REMEMBER THAT WE KILLED HIM (USED BY "CHAIN")
D790 7FCF8C    4883:         CLR      KILLEDF
               4884:         ;JSR    KILLPROOF       ONCE KILLED, DON'T LET IT BE KILLED AGAIN!
D793 BDD7B6    4885:         JSR     KILLPROOF
               4886:         ;LDD    #KILLPROGRAM     (A,B):= DESIRED PC OF USER TASK
D796 C6C5      4887:         LDAB      #(KILLPROGRAM)&$FF
D798 86D7      4888:         LDAA      #(KILLPROGRAM)/256
D79A 7DCF8D    4889:         TST     SDOSRECURSIVECALL  USER TASK EXECUTING INSIDE SDOS SOMEWHERE ?
D79D 2609      4890:         BNE      KILLUSER2       B/ YES, FIX UP HIS RETURN ADDRESS AND WE'RE DONE!
               4891:         ;LDX    USERTASKTCB+TCB:STACK  GET STACK POINTER FOR USER TASK
D79F FECE8C    4892:         LDX     USERTASKTCB+TCB:STACK
               4893:         ;STD    REG:PC,X MODIFY CONTEXT BLOCK'S PC...
D7A2 E707      4894:         STAB      (REG:PC)+1,X
D7A4 A706      4895:         STAA      REG:PC,X
               4896: *       SO THAT THE "RTI" WILL TAKE USER TASK TO "KILLPROGRAM"
D7A6 0C39      4897:         OKRTS
               4898: 
  D7A8         4899: KILLUSER2       ; MODIFY USER'S RETURN ADDRESS SO HE GOES TO "KILLPROGRAM"
  0001         4900:         IF      M6800!M6801
               4901:         ;LDX    USERRETAPTR      GET USER'S (S) ON ENTRY TO SDOS
D7A8 FECF8E    4902:         LDX     USERRETAPTR
               4903:         ;STD    1,X     THIS IS WHERE PC IS IN STACK
D7AB E702      4904:         STAB      (1)+1,X
D7AD A701      4905:         STAA      1,X
  0001         4906:         ELSE    (M6809)
 *S*           4907:         ;STD    [USERRETAPTR]
 *S*           4908:         LDX     USERRETAPTR
 *S*           4909:         STAB      1,X
 *S*           4910:         STAA      0,X
               4911:         FIN
D7AF 0C39      4912:         OKRTS




ASM/6800 1.4A0: D7AF SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 162; Form 1     USER PROGRAM EXIT LOGIC
SDOS11G.ASM
               4913: *
  D7B1         4914: KILLUSERRTS     ; USER IS KILL PROOF
               4915:         ;CLR     KILLREQUESTEDF  CAN'T KILL HIM NOW, SET TIME BOMB
D7B1 7FCF8B    4916:         CLR      KILLREQUESTEDF
D7B4 0D39      4917:         ERRORRTS




ASM/6800 1.4A0: D7B4 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 163; Form 1     USER PROGRAM EXIT LOGIC
SDOS11G.ASM
               4919: *       KILLPROOF -- PERFORM "SYSCALL:KILLPROOF"
               4920: *       KILLENABLE -- PERFORM "SYSCALL:KILLENABLE"
               4921: *
  D7B6         4922: KILLPROOF       EQU     *
D7B6 8601      4923:         LDAA      #1      MAKE USER PROGRAM UNKILLABLE (FOR THE NONCE)
D7B8 2001      4924:         BRA       KILLPROOF1
               4925: 
  D7BA         4926: KILLENABLE        ; MAKE USER PROGRAM KILLABLE
D7BA 4F        4927:         CLRA              0 --> KILLABLE
D7BB B7CE20    4928: KILLPROOF1      STAA      CODE+SDOS:KILLPROOF
D7BE BACF8B    4929:         ORAA      KILLREQUESTEDF  DID SOMEBODY ASK FOR THIS GUY TO BE KILLED ?
  D7C1         4930: KILLEDTEST      ; CHECK TO SEE IF USER HAS BEEN KILLED
D7C1 2702      4931:         BEQ      KILLPROGRAM      B/ NOT KILLPROOF, AND KILL REQUESTED IN PAST
D7C3 0C39      4932:         OKRTS           ALL IS DANDY, GET OUT!
               4933: *
               4934: *       KILLPROGRAM -- THIS IS WHERE USER TASK IS FORCED TO GO
               4935: *       HERE WE MAKE USER TASK DO A FORCED EXIT
               4936: *
  D7C5         4937: KILLPROGRAM      EQU     *
D7C5 2500      4938:         BCS       *+2     EAT USER ERROR IF KILLED ****IS THIS WHAT WE WANT???***
               4939:         ;INC     SDOSRECURSIVECALL  SO SYSCALLS WITH FUNNY CHANNEL NUMBERS ARE LEGAL
D7C7 7CCF8D    4940:         INC      SDOSRECURSIVECALL
               4941:         ;LDX    #CLOSECHANNEL0     KILL ANY "DO" FILE THAT MIGHT BE OPEN
D7CA CED5D0    4942:         LDX     #CLOSECHANNEL0
               4943:         ;JSR    SYSCALLENTRY
D7CD BDD1B3    4944:         JSR     SYSCALLENTRY
D7D0 253C      4945:         BCS       EXIT1   B/ MORE IMPORTANT ERROR OCCURRED
               4946:         ;JSR    CLOSELOG IF ITS OPEN
D7D2 BDD4C3    4947:         JSR     CLOSELOG
D7D5 2405      4948:         BCC        KILLPROGRAM1     B/ IT WAS OPEN, AND WE CLOSED IT SUCCESSFULLY
D7D7 8C0408    4949:         CPX      #ERR:CLOSED      THIS IS OK, TOO!
D7DA 2632      4950:         BNE      EXIT1   B/ WRONG REASON, GO SHOW TO USER
  D7DC         4951: KILLPROGRAM1     EQU     *
               4952:         ;JSR    OPENCONSOLE      RE-OPEN THE CONSOLE ON CHANNEL 0
D7DC BDD89A    4953:         JSR     OPENCONSOLE
D7DF 252D      4954:         BCS       EXIT1   B/ MORE IMPORTANT ERROR OCCURRED
               4955:         ;LDX    #ACKCONTROLC        ACKNOWLEDGE RECEIPT OF ^C^C
D7E1 CECFA0    4956:         LDX     #ACKCONTROLC
               4957:         ;JSR    SYSCALLENTRY
D7E4 BDD1B3    4958:         JSR     SYSCALLENTRY




ASM/6800 1.4A0: D7E7 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 164; Form 1     USER PROGRAM EXIT LOGIC
SDOS11G.ASM
D7E7 2525      4959:         BCS       EXIT1   B/ RECEIPT ACKNOWLEDGED WITH ERROR 1041
               4960:         ;LDX    #ERR:PROGRAMKILLED       NOW CAUSE APPROPRIATE ERROR TO OCCUR
D7E9 CE0411    4961:         LDX     #ERR:PROGRAMKILLED
D7EC 2020      4962:         BRA       EXIT1




ASM/6800 1.4A0: D7EC SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 165; Form 1     USER PROGRAM EXIT LOGIC
SDOS11G.ASM
               4964: *       EXIT -- EXIT FROM USER PROGRAM BACK TO COMMAND INTERPRETER
               4965: *       CLOSES ALL OPEN CHANNELS EXCEPT 0 & FLUSHES THE BUFFERS
               4966: *       THEN EXITS TO OPERATING SYSTEM
               4967: *
  D7EE         4968: ERROREXIT       ;LDX    CODE+SDOS:IOBLOCKPTR
D7EE FECE07    4969:         LDX     CODE+SDOS:IOBLOCKPTR
               4970:         ;LDX    ERROREXIT:CODE,X
D7F1 EE02      4971:         LDX     ERROREXIT:CODE,X
D7F3 2019      4972:         BRA       EXIT1
               4973: *
  D7F5         4974: EXITERRED       ; EXIT GOT AN ERROR, DISPLAY IT!
               4975:         ;PSHX           SAVE THIS ERROR CODE
D7F5 DF00      4976:         STX     TEMPX
D7F7 D601      4977:         LDAB      TEMPB
D7F9 37        4978:         PSHB
D7FA D600      4979:         LDAB      TEMPA
D7FC 37        4980:         PSHB
               4981:         ;JSR    DISPLAYERRORCR    DISPLAY THE PREVIOUS ERROR
D7FD BDD88C    4982:         JSR     DISPLAYERRORCR
               4983:         ;PULD           GET EXIT'S ERROR CODE BACK
D800 32        4984:         PULA
D801 33        4985:         PULB
               4986:         ;STD    USERSLASTERROR   SAVE THE ERROR CODE
D802 F7CF27    4987:         STAB      USERSLASTERROR+1
D805 B7CF26    4988:         STAA      USERSLASTERROR
               4989:         ;JSR    DISPLAYERRORCR    SHOW EXIT'S ERROR
D808 BDD88C    4990:         JSR     DISPLAYERRORCR




ASM/6800 1.4A0: D808 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 166; Form 1     USER PROGRAM EXIT LOGIC
SDOS11G.ASM
  D80B         4992: EXITCHKSUMBASE     ; CODE FROM HERE TO EXITCHKSUMEND IS CHECKSUMMED
  D80B         4993: EXIT    ;LDX    #0      PICK UP ERROR CODE FOR "NORMAL EXIT"
D80B CE0000    4994:         LDX     #0
  D80E         4995: EXIT1   ;JSR    KILLPROOF       SO WE DON'T GET KILLED BY SOME ZEALOT
D80E BDD7B6    4996:         JSR     KILLPROOF
D811 8601      4997:         LDAA      #1      GET RID OF ANY OLD KILL REQUESTS
D813 B7CF8B    4998:         STAA      KILLREQUESTEDF
D816 B7CF8C    4999:         STAA      KILLEDF FORGET THAT USER MIGHT HAVE BEEN KILLED
D819 BECF22    5000:         LDS     SDOSSTACK PICK UP A REASONABLE STACK POINTER
D81C FFCF26    5001:         STX     USERSLASTERROR   SAVE LAST ERROR CODE
               5002:         ;JSR    INTENABLE IN CASE SOMEBODY MANAGED TO TURN THEM OFF
D81F BDCF80    5003:         JSR     INTENABLE
               5004:         ;JSR    EXITS   GO CLOSE UP THE FILES
D822 BDD908    5005:         JSR     EXITS
D825 25CE      5006:         BCS       EXITERRED       B/ ERROR, GO TRY TO DEAL WITH IT
D827 8D63      5007:         BSR      DISPLAYERRORCR
               5008:         ;LDX    #SDOSCHKSUMBASE
D829 CED0C3    5009:         LDX     #SDOSCHKSUMBASE
  D82D         5010: EXITCODECHKSUM    EQU     *+1     CONTAINS VALUE THAT MAKES CHECKSUM OVER EXIT ALL ZER
D82C C600      5011:         LDAB      #CHANGED  CHANGED BYTE IS CHECKSUM BYTE
D82E 4F        5012:         CLRA              COMPUTE CHECKSUM ON SDOS CODE
  D82F         5013: EXITCKSUML       ; DO CHECKSUM THAT IS HARD TO BEAT BY TRANSPOSITION OF BYTES
D82F 48        5014:         ASLA
  0001         5015:         IF      M6800!M6801
D830 A900      5016:         ADCA       0,X
D832 08        5017:         INX
  0001         5018:         ELSE    (M6809)
 *S*           5019:         ADCA       ,X+
               5020:         FIN
D833 8CFEF3    5021:         CPX      #SDOS:END
D836 26F7      5022:         BNE      EXITCKSUML
D838 4F        5023:         CLRA     ;ZZZ        TSTA             IS CHECKSUM OK (=0?)
D839 270D      5024:         BEQ      EXIT2   B/ YES, GO CHAIN TO DEFAULTPROGRAM
               5025:         ;LDX    #ERR:SDOSCKSUM   DISPLAY THE ERROR!
D83B CE041A    5026:         LDX     #ERR:SDOSCKSUM
D83E FFCF26    5027:         STX     USERSLASTERROR
D841 8D49      5028:         BSR      DISPLAYERRORCR
D843 20FE      5029:         BRA       *       WE'RE DEAD...




ASM/6800 1.4A0: D843 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 167; Form 1     USER PROGRAM EXIT LOGIC
SDOS11G.ASM
               5031: ;       SerialNumberLocation is included in the critically secure "EXIT" region...
               5032: ;       because of the importance of knowing that its contents are not forged.
               5033: 
  D845         5034: SerialNumberLocation    ;ZZZ fdb     0       Points to SerialNumber if Mass-produced R
D845 FFF0      5035:          fdb  $FFF0
               5036:                 ; Points to different place for each Mass-Produced computer type
               5037:                 ; Contains Zero if Standard SDOS boot ROM structure.
               5038: 
  D847         5039: EXITCHKSUMEND    ; ALL CODE BETWEEN EXITCHKSUMBASE AND HERE IS CHECKSUMMED
               5040: *
               5041: *       SDOSCODECHKSUM contains a value that makes the checksum over SDOS give 0
               5042: *
D847 00        5043: SDOSCODECHKSUM    FCB       CHANGED




ASM/6800 1.4A0: D847 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 168; Form 1     USER PROGRAM EXIT LOGIC
SDOS11G.ASM
  D848         5045: EXIT2   ;CLR     SDOSRECURSIVECALL  SWITCH TO USER MODE ("NOT IN SDOS")
D848 7FCF8D    5046:         CLR      SDOSRECURSIVECALL
               5047:         ;JSR    KILLENABLE        ALLOW USER PROGRAM TO GET KILLED
D84B BDD7BA    5048:         JSR     KILLENABLE
               5049:         ;LDX    #EXITCHAIN        ALL IS OK, GO GET THE DEFAULT PROGRAM
D84E CECFEC    5050:         LDX     #EXITCHAIN
               5051:         ;JSR    SYSCALLENTRY
D851 BDD1B3    5052:         JSR     SYSCALLENTRY
D854 24FE      5053:         BCC        *       WE GOT HERE WITHOUT AN ERROR???
               5054:         ;INC     SDOSRECURSIVECALL  SWITCH BACK TO "IN SDOS" MODE
D856 7CCF8D    5055:         INC      SDOSRECURSIVECALL
D859 8C0428    5056:         CPX      #ERR:NOSUCHPROGRAM        THIS KIND OF ERROR ?
D85C 2603      5057:         BNE      EXIT3   B/ NO, TELL THE USER
               5058:         ;LDX    #ERR:NODEFAULTPROGRAM     SCREAM "NO DEFAULTPROGRAM"!
D85E CE03F0    5059:         LDX     #ERR:NODEFAULTPROGRAM
D861 FFCF26    5060: EXIT3   STX     USERSLASTERROR
D864 8D26      5061:         BSR      DISPLAYERRORCR
               5062: *
               5063: *       Since there is no DEFAULTPROGRAM on this disk, dismount the disk.
               5064: *
               5065:         ;LDX    DEFAULTDISKDCB     THIS IS THE DISK TO DISMOUNT.
D866 FECE4C    5066:         LDX     DEFAULTDISKDCB
D869 DF06      5067:         STX     DCBPOINTER
               5068:         ;JSR    DSKDDISMOUNT
D86B BDE5A8    5069:         JSR     DSKDDISMOUNT
D86E 209B      5070:         BRA       EXIT    AND START OVER AGAIN
               5071: 
D870 44454641  5072: DEFAULTPROG      FCC       'DEFAULTPROGRAM'
  000E         5073: DEFAULTPROGL     EQU     *-DEFAULTPROG
               5074: *
  D87E         5075: EXITCR   ;LDX    #EXITCR1
D87E CED884    5076:         LDX     #EXITCR1
               5077:         ;JMP    SYSCALLENTRY
D881 7ED1B3    5078:         JMP     SYSCALLENTRY
               5079: *
  D884         5080: EXITCR1  ; SYSCALL USED TO PRINT A <CR> ON CHANNEL 0
D884 0C        5081:         FCB       SYSCALL:WRITEA
D885 08        5082:         FCB       WRITEA:SCLEN
D886 0000      5083:         FCB       0,IGNORED       CHANNEL
D888 D153      5084:         FDB      COPYRIGHTEND-1   YOU'LL SEE A :0D THERE...




ASM/6800 1.4A0: D88A SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 169; Form 1     USER PROGRAM EXIT LOGIC
SDOS11G.ASM
D88A 0001      5085:         FDB      1       THIS IS ALL WE WANT TO WRITE!




ASM/6800 1.4A0: D88A SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 170; Form 1     USER PROGRAM EXIT LOGIC
SDOS11G.ASM
               5087: *
               5088: *       DISPLAYERRORCR -- DISPLAY USER'S LAST ERROR, FOLLOWED BY <CRLF>
               5089: *
  D88C         5090: DISPLAYERRORCR    EQU     *
               5091:         ;LDX    USERSLASTERROR   GET ERROR NUMBER
D88C FECF26    5092:         LDX     USERSLASTERROR
D88F 2707      5093:         BEQ      DISPLAYERRORCR1   B/ NO ERROR!
               5094:         ;JSR    DISPLAYERROR     GO PRINT THE ERROR STRING OR NUMBER
D891 BDD668    5095:         JSR     DISPLAYERROR
D894 8DE8      5096:         BSR      EXITCR   GO DISPLAY <CRLF>
D896 25FE      5097:         BCS       *       LOOP HERE IF WE CAN'T GET IT OUT!
  D898         5098: DISPLAYERRORCR1   EQU     *
D898 0C39      5099:         OKRTS
               5100: *
               5101: *       OPEN UP CHANNEL 0 TO THE FIRST DEVICE IN THE
               5102: *       DEVICE NAME LIST
               5103: *       ***** RULE *****
               5104: *       THE FIRST DEVICE IN THE DEVICE LIST IS THE CONSOLE
               5105: *
  D89A         5106: OPENCONSOLE      ;LDX    #CONSOLEOPEN
D89A CECF92    5107:         LDX     #CONSOLEOPEN
               5108:         ;JMP    SYSCALLENTRY
D89D 7ED1B3    5109:         JMP     SYSCALLENTRY




ASM/6800 1.4A0: D89D SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 171; Form 1     USER PROGRAM EXIT LOGIC
SDOS11G.ASM
  0000         5111:         IF      0       this code is cute, but is wrong evolutionary path...
 *S*           5112: *
 *S*           5113: *       SCANDCBSFORLUN -- SCAN DOWN DCB CHAIN, DECREMENT LOGICAL UNIT # IN D...
 *S*           5114: *       UNTIL ZERO OR DCB CHAIN IS EXHAUSTED
 *S*           5115: *       RETURNS (X)=0 --> NOT FOUND; <>0 --> FOUND
 *S*           5116: *
 *S*           5117: SCANDCBSFORLUN1     ; CHECK: IS LUN ZERO?
 *S*           5118:         ;TSTD
 *S*           5119:         TSTA
 *S*           5120:         ;BEQD    SCANDCBSFORLUNF     B/ YES, WE FOUND DEVICE NAME!
 *S*           5121:         BNE      MACRO:000D
 *S*           5122:         TSTB
 *S*           5123:         BEQ      SCANDCBSFORLUNF
 *S*           5124: MACRO:000D
 *S*           5125:         ;SUBD    #1      DECREMENT LUN
 *S*           5126:         SUBB      #(1)&$FF
 *S*           5127:         SBCA       #(1)/256
 *S*           5128:         ;LDX    DCB:NEXTDCB,X       FIND NEXT DCB
 *S*           5129:         LDX     DCB:NEXTDCB,X
 *S*           5130: SCANDCBSFORLUN      ; SCAN DCB CHAIN FOR LUN (D)
 *S*           5131:         BNE      SCANDCBSFORLUN1     B/ MORE DCB CHAIN TO SEARCH
 *S*           5132:         RTS             WITH "Z" SET --> NOT FOUND!
 *S*           5133: 
 *S*           5134: SCANDCBSFORLUNF     ; FOUND DCB THAT MATCHES LOGICAL UNIT NUMBER!
 *S*           5135:         ;LDX    DCB:NAME,X GET POINTER TO NAME
 *S*           5136:         LDX     DCB:NAME,X
 *S*           5137:         RTS             WITH "Z" BIT RESET
 *S*           5138: 
 *S*           5139: ERRNOSUCHLUN
 *S*           5140:         ;JSR    ERRET
 *S*           5141:         JSR     ERRET
 *S*           5142:         FDB      ERR:NOSUCHLUN
 *S*           5143: *
 *S*           5144: *       READLUNNAME -- PERFORM "SYSCALL:READLUNNAME"
 *S*           5145: *       CONVERTS LOGICAL UNIT NUMBER TO DEVICE NAME STRING
 *S*           5146: *
 *S*           5147: READLUNNAME
 *S*           5148:         ;LDX    CODE+SDOS:IOBLOCKPTR       GET LOGICAL UNIT NUMBER
 *S*           5149:         LDX     CODE+SDOS:IOBLOCKPTR
 *S*           5150:         ;LDD    READLUNNAME:LUN,X




ASM/6800 1.4A0: D89D SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 172; Form 1     USER PROGRAM EXIT LOGIC
SDOS11G.ASM
 *S*           5151:         LDAB      (READLUNNAME:LUN)+1,X
 *S*           5152:         LDAA      READLUNNAME:LUN,X
 *S*           5153:         ;LDX    CODE+SDOS:CONFIGURATION    SEE IF LUN IS IN DISK DCBS
 *S*           5154:         LDX     CODE+SDOS:CONFIGURATION
 *S*           5155:         ;LDX    CNFG:DISKDCBS,X
 *S*           5156:         LDX     CNFG:DISKDCBS,X
 *S*           5157:         BSR      SCANDCBSFORLUN
 *S*           5158:         BNE      READLUNNAME1      B/ YES!
 *S*           5159:         ;LDX    CODE+SDOS:CONFIGURATION    SEE IF LUN IS IN DEVICE DCBS
 *S*           5160:         LDX     CODE+SDOS:CONFIGURATION
 *S*           5161:         ;LDX    CNFG:DEVICEDCBS,X
 *S*           5162:         LDX     CNFG:DEVICEDCBS,X
 *S*           5163:         BSR      SCANDCBSFORLUN
 *S*           5164:         BEQ      ERRNOSUCHLUN     B/ LUN IS NOT LEGAL IN THIS CONFIGURATION
 *S*           5165: READLUNNAME1      ; (X) = ADDRESS OF DEVICE NAME FOR SPECIFIED LUN
 *S*           5166:         STX     FROMPOINTER     SAVE DEVICE NAME ADDRESS
 *S*           5167:         LDAB      #-1     GET LENGTH OF DEVICE NAME
 *S*           5168: READLUNNAME2      ; SCAN DEVICE NAME TO GET LENGTH
 *S*           5169:         INCB              BUMP LENGTH
 *S*           5170:         IF      M6800!M6801
 *S*           5171:         LDAA      ,X      GET BYTE OF DEVICE NAME
 *S*           5172:         BEQ      READLUNNAME3      B/ END OF NAME
 *S*           5173:         INX
 *S*           5174:         BRA       READLUNNAME2
 *S*           5175: READLUNNAME3
 *S*           5176:         ELSE    (M6809)
 *S*           5177:         ;LDA     ,X+
 *S*           5178:         LDAA      0,X
 *S*           5179:         INX
 *S*           5180:         BNE      READLUNNAME2
 *S*           5181:         FIN
 *S*           5182:         CLRA
 *S*           5183:         ;STD    TEMPX   = LENGTH OF DEVICE NAME
 *S*           5184:         STAB      TEMPX+1
 *S*           5185:         STAA      TEMPX
 *S*           5186:         ;LDX    CODE+SDOS:IOBLOCKPTR       GET USER BUFFER ADDRESS
 *S*           5187:         LDX     CODE+SDOS:IOBLOCKPTR
 *S*           5188:         ;LDD    READLUNNAME:MAXCOUNT,X      = MAX # BYTES TO TRANSFER
 *S*           5189:         LDAB      (READLUNNAME:MAXCOUNT)+1,X
 *S*           5190:         LDAA      READLUNNAME:MAXCOUNT,X




ASM/6800 1.4A0: D89D SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 173; Form 1     USER PROGRAM EXIT LOGIC
SDOS11G.ASM
 *S*           5191:         ;SUBD    TEMPX   ROOM FOR REPLY?
 *S*           5192:         SUBB      TEMPX+1
 *S*           5193:         SBCA       TEMPX
 *S*           5194:         BCS       ERRSYSTOOSHORTJ
 *S*           5195:         ;LDD    TEMPX   SET REPLY LENGTH
 *S*           5196:         LDAB      TEMPX+1
 *S*           5197:         LDAA      TEMPX
 *S*           5198:         ;STD    READLUNNAME:ACTUALCOUNT,X
 *S*           5199:         STAB      (READLUNNAME:ACTUALCOUNT)+1,X
 *S*           5200:         STAA      READLUNNAME:ACTUALCOUNT,X
 *S*           5201:         IF      M6800!M6801
 *S*           5202:         ;LDX    READLUNNAME:BUFFERP,X      = WHERE TO PUT NAME
 *S*           5203:         LDX     READLUNNAME:BUFFERP,X
 *S*           5204:         STX     TOPOINTER
 *S*           5205:         ELSE    (M6809)
 *S*           5206:         LDY     READLUNNAME:BUFFERP,X      = WHERE TO PUT NAME
 *S*           5207:         FIN
 *S*           5208:         ;LDX    FROMPOINTER
 *S*           5209:         LDX     FROMPOINTER
 *S*           5210:         ;JSR    BLOCKMOVE
 *S*           5211:         JSR     BLOCKMOVE
 *S*           5212:         OKRTS
               5213:         ELSE
  D1EF         5214: READLUNNAME       EQU     ERRILLSYSCALL     to cauterize the wound...
               5215:         FIN




ASM/6800 1.4A0: D89D SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 174; Form 1     USER PROGRAM EXIT LOGIC
SDOS11G.ASM
               5217: *       CHECKRDLEN -- CHECK SCBLK:RDLEN...
               5218: *       TO MAKE SURE ITS VALUE >= 2 BYTES AT RETURN ADDRESS
               5219: *       ALSO CHECKS THAT SYSCALL BLOCK IS LONG ENOUGH TO INCLUDE SCBLK:RDLEN
               5220: *       SETS SCBLK:RPLEN TO 2 BYTE INLINE VALUE IF RDLEN IS OK
               5221: *       (X) = CODE+SDOS:IOBLOCKPTR ON EXIT
               5222: *       SKIPS AROUND 2 BYTE INLINE VALUE IF OK
               5223: *       ERROR EXIT IF NOT OK
               5224: *       **** CHECKWRLEN, CHECKRDLEN SHOULD BE RECODED SO THAT THE FOLLOWING WORKS:
               5225: *       JSR     CHECKRDLEN
               5226: *       FDB      XXXX
               5227: *       BCS       error...
               5228: *
  D8A0         5229: CHECKRDLEN        EQU     *
               5230:         ;LDX    CODE+SDOS:IOBLOCKPTR       CHECK THAT READ DATA BUFFER IS INCLUDED...
D8A0 FECE07    5231:         LDX     CODE+SDOS:IOBLOCKPTR
D8A3 A601      5232:         LDAA      SCBLK:WLEN,X      IN THE SYSCALL BLOCK
D8A5 847F      5233:         ANDA      #$7F    BYEBYE WAIT BIT
               5234:         ;CMPA     #SCBLK:RDLEN+2    IS SYSCALL BLOCK LONG ENOUGH ?
D8A7 810E      5235:         CMPA      #SCBLK:RDLEN+2
D8A9 2529      5236:         BCS       ERRSYSTOOSHORTJ B/ NOPE, STICK THE USER WITH AN ERROR
               5237:         ;LDD    [0,S]   IS 0 > MINLENGTH-RDLEN-1 ?
D8AB 30        5238:         TSX
D8AC EE00      5239:         LDX     0,X
D8AE E601      5240:         LDAB      1,X
D8B0 A600      5241:         LDAA      0,X
D8B2 0D        5242:         SEC              (-1 PART)
               5243:         ;LDX    CODE+SDOS:IOBLOCKPTR       SUBTRACT RDLEN
D8B3 FECE07    5244:         LDX     CODE+SDOS:IOBLOCKPTR
D8B6 E20D      5245:         SBCB       SCBLK:RDLEN+1,X
D8B8 A20C      5246:         SBCA       SCBLK:RDLEN,X
D8BA 241B      5247:         BCC        ERRRDBUFTOOSMALL  B/ NO, NOT ENOUGH READ BUFFER
D8BC E90D      5248:         ADCB       SCBLK:RDLEN+1,X   SET REPLY LENGTH = DESIRED # BYTES
D8BE A90C      5249:         ADCA       SCBLK:RDLEN,X     (A,B):=DESIRED # BYTES
               5250:         ;STD    SCBLK:RPLEN,X     RPLEN:=(A,B)
D8C0 E709      5251:         STAB      (SCBLK:RPLEN)+1,X
D8C2 A708      5252:         STAA      SCBLK:RPLEN,X
  D8C4         5253: CHECKRDLEN1       EQU     *
               5254:         ;LDA     1,S     ALL IS OK, TAKE SKIP EXIT
D8C4 30        5255:         TSX
D8C5 A601      5256:         LDAA      1,X




ASM/6800 1.4A0: D8C7 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 175; Form 1     USER PROGRAM EXIT LOGIC
SDOS11G.ASM
D8C7 8B02      5257:         ADDA      #2      BUMP RETURN PAST INLINE ARGUMENT
  0001         5258:         IF      M6800!M6801
D8C9 A701      5259:         STAA      1,X
D8CB 2402      5260:         BCC        CHECKRDLEN2
               5261:         ;INC     0,X
D8CD 6C00      5262:         INC      0,X
  0001         5263:         ELSE    (M6809)
 *S*           5264:         STAA      1,S
 *S*           5265:         BCC        CHECKRDLEN2
 *S*           5266:         ;INC     0,S
 *S*           5267:         TSX
 *S*           5268:         INC      0,X
               5269:         FIN
  D8CF         5270: CHECKRDLEN2       EQU     *
               5271:         ;LDX    CODE+SDOS:IOBLOCKPTR
D8CF FECE07    5272:         LDX     CODE+SDOS:IOBLOCKPTR
D8D2 0C39      5273:         OKRTS




ASM/6800 1.4A0: D8D2 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 176; Form 1     USER PROGRAM EXIT LOGIC
SDOS11G.ASM
  D8D4         5275: ERRSYSTOOSHORTJ EQU     *
               5276:         ;JMP    ERRSYSCALLTOOSHORT
D8D4 7ED1F3    5277:         JMP     ERRSYSCALLTOOSHORT
               5278: 
  D8D7         5279: ERRRDBUFTOOSMALL  EQU     *
               5280:         ;JSR    ERRET
D8D7 BDD1F7    5281:         JSR     ERRET
D8DA 041E      5282:         FDB      ERR:RDBUFTOOSMALL
               5283: *
               5284: *       CHECKWRLEN -- CHECK SCBLK:WRLEN...
               5285: *       TO MAKE SURE ITS VALUE >= 2 BYTES AT RETURN ADDRESS
               5286: *       ERROR EXIT IF NOT
               5287: *       RETURNS WITH (X) CONTAINING CODE+SDOS:IOBLOCKPTR OTHERWISE
               5288: *       SKIPS AROUND 2 BYTE INLINE VALUE
               5289: *
  D8DC         5290: CHECKWRLEN        EQU     *
               5291:         ;LDX    CODE+SDOS:IOBLOCKPTR       CHECK THAT WRBUF INFO IS INCLUDED...
D8DC FECE07    5292:         LDX     CODE+SDOS:IOBLOCKPTR
D8DF A601      5293:         LDAA      SCBLK:WLEN,X      IN THE SYSCALL
D8E1 847F      5294:         ANDA      #$7F    BYEBYE WAIT BIT
               5295:         ;CMPA     #SCBLK:WRLEN+2    SYSCALL BLOCK LONG ENOUGH ?
D8E3 8108      5296:         CMPA      #SCBLK:WRLEN+2
D8E5 25ED      5297:         BCS       ERRSYSTOOSHORTJ B/ NO, GO STICK IT TO THE USER
               5298:         ;LDD    [0,S]   IS 0 > MINLENGTH - WRLEN -1 ?
D8E7 30        5299:         TSX
D8E8 EE00      5300:         LDX     0,X
D8EA E601      5301:         LDAB      1,X
D8EC A600      5302:         LDAA      0,X
D8EE 0D        5303:         SEC              (-1 PART)
               5304:         ;LDX    CODE+SDOS:IOBLOCKPTR       NOW SUBTRACT WRLEN
D8EF FECE07    5305:         LDX     CODE+SDOS:IOBLOCKPTR
D8F2 E207      5306:         SBCB       SCBLK:WRLEN+1,X
D8F4 A206      5307:         SBCA       SCBLK:WRLEN,X
D8F6 25CC      5308:         BCS       CHECKRDLEN1       B/ ITS OK
  D8F8         5309: ERRWRBUFTOOSMALL  EQU     *
               5310:         ;JSR    ERRET
D8F8 BDD1F7    5311:         JSR     ERRET
D8FB 041F      5312:         FDB      ERR:WRBUFTOOSMALL
               5313: *
               5314: *       CHECKSCLEN -- CHECK SCBLK:WLEN...




ASM/6800 1.4A0: D8FB SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 177; Form 1     USER PROGRAM EXIT LOGIC
SDOS11G.ASM
               5315: *       TO MAKE SURE IT IS LARGER THAN (B), ERROR EXIT IF NOT
               5316: *
  D8FD         5317: CHECKSCLEN
               5318:         ;LDX    CODE+SDOS:IOBLOCKPTR       GET WLEN OF SYSCALL BLOCK
D8FD FECE07    5319:         LDX     CODE+SDOS:IOBLOCKPTR
               5320:         ;LDA     SCBLK:WLEN,X
D900 A601      5321:         LDAA      SCBLK:WLEN,X
D902 847F      5322:         ANDA      #$7F    AND MASK OFF THE NO WAIT BIT
D904 11        5323:         CBA                IS SYSCALL BLOCK LONG ENOUGH?
D905 25CD      5324:         BCS       ERRSYSTOOSHORTJ B/ NOPE, STAB USER IN BACK TO GET EVEN!
D907 39        5325:         RTS             ALL IS WONDERFUL...




ASM/6800 1.4A0: D907 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 178; Form 1     USER PROGRAM EXIT LOGIC
SDOS11G.ASM
               5327: *       EXITS -- DO CLEAN UP APPROPRIATE FOR PROGRAM COMPLETION
               5328: *       CLOSES ALL I/O CHANNELS EXCEPT 0
               5329: *       DUMPS ALL DISK BUFFERS TO DISK
               5330: *
  D908         5331: EXITS   ;LDX    CODE+SDOS:CONFIGURATION
D908 FECE03    5332:         LDX     CODE+SDOS:CONFIGURATION
D90B A606      5333:         LDAA      CNFG:NIOCHANNELS,X
D90D B7CFFC    5334:         STAA      EXITSCLOSE+CLOSE:CHANNEL    SET UP CHANNEL-CLOSING SYSCALL
  D910         5335: EXITS2  ;LDX    #EXITSCLOSE      CLOSE A CHANNEL
D910 CECFFA    5336:         LDX     #EXITSCLOSE
               5337:         ;DEC     CLOSE:CHANNEL,X
D913 6A02      5338:         DEC      CLOSE:CHANNEL,X
D915 270D      5339:         BEQ      EXITS3  B/ ALL USER I/O CHANNELS EXCEPT ZERO CLOSED
               5340:         ;JSR    SYSCALLENTRY      GO CLOSE THIS CHANNEL
D917 BDD1B3    5341:         JSR     SYSCALLENTRY
D91A 24F4      5342:         BCC        EXITS2
D91C 8C0408    5343:         CPX      #ERR:CLOSED      WAS THE CHANNEL CLOSED?
D91F 27EF      5344:         BEQ      EXITS2  B/ YEP, GO ON
  D921         5345: EXITSERRED      ; NOPE, HE'S DEAD (CARRY IS STILL SET)
               5346:         ;JMP    ERRORED
D921 7ED20A    5347:         JMP     ERRORED
               5348: *
               5349: *       NOW GO THROUGH AND DUMP THE DISK BUFFERS ON ALL THE DRIVES
               5350: *
  D924         5351: EXITS3  ;LDX    CODE+SDOS:CONFIGURATION
D924 FECE03    5352:         LDX     CODE+SDOS:CONFIGURATION
               5353:         ;LDX    CNFG:DISKDCBS,X
D927 EE00      5354:         LDX     CNFG:DISKDCBS,X
D929 DF06      5355: EXITS4  STX     DCBPOINTER
               5356:         ;JSR    DSKDUMPBUFFERS
D92B BDFADC    5357:         JSR     DSKDUMPBUFFERS
D92E 2405      5358:         BCC        EXITS6  B/ NO PROBLEMS
D930 8C03EA    5359:         CPX      #ERR:FILEISOPEN WAS IT THE FILE OPEN PROBLEM?
D933 26EC      5360:         BNE      EXITSERRED      B/ NOPE, YOU'RE DEAD
  D935         5361: EXITS6  ;LDX    DCBPOINTER
D935 DE06      5362:         LDX     DCBPOINTER
               5363:         ;LDX    DCB:NEXTDCB,X
D937 EE05      5364:         LDX     DCB:NEXTDCB,X
D939 26EE      5365:         BNE      EXITS4
  0001         5366:         IF      *&1     FORCE EXITDAMAGE TO BE EVEN ADDRESS




ASM/6800 1.4A0: D93B SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 179; Form 1     USER PROGRAM EXIT LOGIC
SDOS11G.ASM
D93B 01        5367:         NOP
               5368:         FIN
  D93C         5369: EXITDAMAGE        ; THIS PLACE IS MASHED BY COPYRIGHT CHECK FAILURE
D93C 0C39      5370:         OKRTS




ASM/6800 1.4A0: D93C SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 180; Form 1     CHAIN/LOAD SYSCALLS
SDOS11G.ASM
               5372: *       CHAIN -- PERFORM "SYSCALL:CHAIN"
               5373: *       ALWAYS RETURNS CONTROL TO CALLER AFTER ERROR UNTIL TYPE 1 RECORD VALIDATED
               5374: *       ONCE TYPE 1 RECORD SEEN, ERROREXIT IS FORCED ON AN ERROR.
               5375: *       CHAIN SWITCHES STACK TO TOP OF USER SPACE ONCE TYPE 1 RECORD SEEN.
               5376: *
               5377: *       CHAIN Transition/action table:
               5378: *       Unencrypted --> Unencrypted:    Do nothing
               5379: *       Unencrypted --> Encrypted:      Zero the user space, save key, mark 'running e
               5380: *       Encrypted --> Encrypted:        Do nothing
               5381: *       Encrypted --> Encrypted':       Zero the user space, save decryption key
               5382: *       Encrypted --> Unencrypted:      Zero the user space, save key, mark 'runencryp
               5383: 
               5384: *       LOAD Transition/action table:
               5385: *       Unencrypted --> Unencrypted:    Do nothing
               5386: *       Unencrypted --> Encrypted:      Signal error
               5387: *       Encrypted --> Encrypted:        Do nothing
               5388: *       Encrypted --> Encrypted':       Signal error
               5389: *       Encrypted --> Unencrypted:      Signal error
               5390: *
               5391: *       These routines use OldKeyEncrypted and NewKeyEncrypted to decide transitions
               5392: *       Definition: If OldKeyEncrypted=0, then we were running Unencrypted
               5393: *               If NewKeyEncrypted=0, then we are transiting to Unencrypted
               5394: *
  D93E         5395: CHAIN     EQU     *
               5396:         ;LDX    CODE+SDOS:IOBLOCKPTR       REMEMBER WHERE THE CHAIN SYSCALL IS
D93E FECE07    5397:         LDX     CODE+SDOS:IOBLOCKPTR
D941 FFCF90    5398:         STX     USERSYSCALLPTR    (THIS IS NEEDED BECAUSE EXIT DOES A CHAIN)
D944 8DC2      5399:         BSR      EXITS   GO CLOSE ALL THE CHANNELS
               5400:         ;LDX    USERSYSCALLPTR    GRAB ADDRESS OF CHAIN SYSCALL AGAIN
D946 FECF90    5401:         LDX     USERSYSCALLPTR
D949 FFCE07    5402:         STX     CODE+SDOS:IOBLOCKPTR       MAKE IT THE OFFICIAL "BEING PROCESSED" SYSC
               5403:         ;LDX    SCBLK:PARAMS,X      GET LONG-TERM OPERATION ENABLING KEY
D94C EE02      5404:         LDX     SCBLK:PARAMS,X
               5405:         ;JSR    SAFEGAURD SET UP A DISASTER IF WRONG KEY IS PASSED
D94E BDD00F    5406:         JSR     SAFEGAURD
  D951         5407: FIRSTCHAIN        ; ENTRY POINT USED TO CHAIN TO "SERIALNUMBER.SYS"
D951 8D5B      5408:         BSR      LOADINIT OPEN THE FILE AND VERIFY IT IS AN OBJECT FILE
               5409:         ;LDX    STARTADDRESS      CHECK THE START ADDRESS FOR ILLEGAL VALUE
D953 FECE48    5410:         LDX     STARTADDRESS
D956 272F      5411:         BEQ      ERRZEROSTARTADDRESS       B/ NO START ADDRESS!




ASM/6800 1.4A0: D958 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 181; Form 1     CHAIN/LOAD SYSCALLS
SDOS11G.ASM
D958 BECF22    5412:         LDS     SDOSSTACK FILE IS OK, SWITCH TO STANDARD STACK FOR CHAINING
               5413: *** ^C^C IS PERFECTLY SAFE HERE, BECAUSE SDOSRECURSIVE CALL IS SET!
D95B 8D30      5414:         BSR      COMPAREDECRYPTIONKEYS      ARE OLD AND NEW ENCRYPTION KEYS IDENTICAL 
D95D 2412      5415:         BCC        CHAINOK   B/ DECRYPTION KEYS MATCH, DO NOTHING
               5416:         ;JSR    ZAPUSERSPACE       MAKE TRASH OUT OF INFORMATION IN USER SPACE
D95F BDDC8B    5417:         JSR     ZAPUSERSPACE
  0001         5418:         if      m6800!m6801
               5419:         ;ldx    #OldKeyEncrypted        save this "key" as last "key" used
D962 CED068    5420:         LDX     #OldKeyEncrypted
D965 DF00      5421:         stx     topointer
  0001         5422:         else    (m6809)
 *S*           5423:         ldy     #OldKeyEncrypted
               5424:         fin
               5425:         ;LDX    #NEWKEYENCRYPTED = FROM ADDRESS
D967 CED070    5426:         LDX     #NEWKEYENCRYPTED
               5427:         ;ldd    #8      = # bytes to save
D96A C608      5428:         LDAB      #(8)&$FF
D96C 8600      5429:         LDAA      #(8)/256
               5430:         ;jsr    blockmove       Note: it is NOT secure to call code+sdos:blockmove her
D96E BDFBD2    5431:         JSR     blockmove
  D971         5432: CHAINOK   ; ITS OK TO DO THE CHAIN, HOP TO IT!
               5433:         ;JSR    LOADREST GO LOAD THE REST OF THE FILE
D971 BDDA4C    5434:         JSR     LOADREST
D974 2403      5435:         BCC        CHAIN1    B/ NO LOADER ERROR
               5436:         ;JMP    EXIT1   I GIVE UP
D976 7ED80E    5437:         JMP     EXIT1
               5438: 
  D979         5439: CHAIN1    ;CLR     SDOSRECURSIVECALL  FLAG "NOT IN SDOS"
D979 7FCF8D    5440:         CLR      SDOSRECURSIVECALL
D97C B6CF8C    5441:         LDAA      KILLEDF SEE IF USER GOT KILLED WHILE LOADING!
               5442:         ;JSR    KILLEDTEST      ...?
D97F BDD7C1    5443:         JSR     KILLEDTEST
               5444:         ;LDX    STARTADDRESS      ALL IS DONE...
D982 FECE48    5445:         LDX     STARTADDRESS
               5446:         ;JMP    ,X      PASS CONTROL TO USER PROGRAM!
D985 6E00      5447:         JMP     0,X
               5448: 
  D987         5449: ERRZEROSTARTADDRESS       ; START ADDRESS IS ZERO ON A CHAIN
               5450:         ;LDX    #ERR:ZEROSTARTADDRESS     GET ERROR CODE
D987 CE0427    5451:         LDX     #ERR:ZEROSTARTADDRESS




ASM/6800 1.4A0: D987 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 182; Form 1     CHAIN/LOAD SYSCALLS
SDOS11G.ASM
               5452:         ;JMP    LOADER2  GO CLOSE THE FILE, TRASH THE KEY, AND EXIT!
D98A 7EDA2F    5453:         JMP     LOADER2




ASM/6800 1.4A0: D98A SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 183; Form 1     CHAIN/LOAD SYSCALLS
SDOS11G.ASM
               5455: *       COMPAREDECRYPTIONKEYS -- COMPARE OLD AND NEW DECRYPTION KEYS
               5456: *       SIGNAL ERROR IF NO MATCH
               5457: *       (DO SO IN A SUBTLE WAY, SO IT IS NOT EASY TO FIND WHO GENERATES THE ERROR CODE
               5458: *
  D98D         5459: COMPAREDECRYPTIONKEYS
  0001         5460:         IF      M6800!M6801
               5461:         ;LDX    #OLDKEYENCRYPTED = COMPARE "TO" ADDRESS
D98D CED068    5462:         LDX     #OLDKEYENCRYPTED
D990 DF00      5463:         STX     TOPOINTER
  0001         5464:         ELSE    (M6809)
 *S*           5465:         LDY     #OLDKEYENCRYPTED
               5466:         FIN
               5467:         ;LDX    #NEWKEYENCRYPTED = COMPARE "FROM" ADDRESS
D992 CED070    5468:         LDX     #NEWKEYENCRYPTED
               5469:         ;LDB     #8      = # BYTES TO COMPARE (KEY SIZE)
D995 C608      5470:         LDAB      #8
               5471:         ;JSR    BLOCKCOMPARE
D997 BDEA29    5472:         JSR     BLOCKCOMPARE
D99A 2710      5473:         BEQ      COMPAREDECRYPTIONMATCH       B/ ALL IS OK
               5474:         ;LDD    #ERR:DECRYPTIONKEYSDONTMATCH-1234  GENERATE ERROR CODE...
D99C C665      5475:         LDAB      #(ERR:DECRYPTIONKEYSDONTMATCH-1234)&$FF
D99E 86FF      5476:         LDAA      #(ERR:DECRYPTIONKEYSDONTMATCH-1234)/256
               5477:         ;ADDD    #1234   IN SUBTLE WAY
D9A0 CBD2      5478:         ADDB      #(1234)&$FF
D9A2 8904      5479:         ADCA       #(1234)/256
               5480:         ;TDX
D9A4 9700      5481:         STAA      TEMPA
D9A6 D701      5482:         STAB      TEMPB
D9A8 DE00      5483:         LDX     TEMPX
D9AA 0D39      5484:         ERRORRTS                AND TAKE ERROR EXIT
               5485: 
  D9AC         5486: COMPAREDECRYPTIONMATCH       ; OLD AND NEW KEYS MATCH!
D9AC 0C39      5487:         OKRTS




ASM/6800 1.4A0: D9AC SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 184; Form 1     CHAIN/LOAD SYSCALLS
SDOS11G.ASM
               5489: *
               5490: *       LOADINIT -- OPEN LOAD FILE, COMPUTE DECRYPTION KEY,
               5491: *       AND VERIFY OBJECT FORMAT CONTENT
               5492: *       IF AN ERROR OCCURS, CLOSE THE LOAD FILE
               5493: *
  D9AE         5494: LOADINIT
               5495:         ;LDX    CODE+SDOS:IOBLOCKPTR       REMEMBER ADDRESS OF SYSTEM CALL
D9AE FECE07    5496:         LDX     CODE+SDOS:IOBLOCKPTR
D9B1 FFCF1D    5497:         STX     LOADSYSCALLPTR     SO WE CAN SAVE START ADDRESS IN REPLY BUFFER, LATER
D9B4 867E      5498:         LDAA      #$7E    SET UP SYSCALL JUMP IN PAGE ZERO...
D9B6 97FB      5499:         STAA      SYSCALL$  TO JUMP TO I/O PACKAGE BASE
               5500:         ;LDX    CODE+SDOS:CONFIGURATION    (SO USER KNOWS WHERE BASE OF I/O PACK IS!)
D9B8 FECE03    5501:         LDX     CODE+SDOS:CONFIGURATION
               5502:         ;LDX    CNFG:DRIVERBASE,X
D9BB EE0F      5503:         LDX     CNFG:DRIVERBASE,X
D9BD DFFC      5504:         STX     SYSCALL$+1
               5505:         ;JSR    CHECKRDLEN        NEED 4 BYTE READ-BACK AREA
D9BF BDD8A0    5506:         JSR     CHECKRDLEN
D9C2 0004      5507:         FDB      2+2     2 FOR FILENAME LENGTH, 2 FOR START ADDRESS
               5508:         ;LDX    #SYSIOCB  FAKE A CHECKCHANNEL CALL ON SYS CHANNEL
D9C4 CECF57    5509:         LDX     #SYSIOCB
D9C7 FFCE09    5510:         STX     IOCBPOINTER
               5511:         ;JSR    FNAMEPROCESS1     GO FIGGER OUT DA DRIVER ADDRESS
D9CA BDD489    5512:         JSR     FNAMEPROCESS1
               5513:         ;JSR    [DRIVER:OPEN,X] AND OPEN IT!
D9CD EE00      5514:         LDX     DRIVER:OPEN,X
D9CF AD00      5515:         JSR     0,X
D9D1 2566      5516:         BCS       LOADINITCANTOPEN   B/ HAD A PROBLEM!
               5517:         ;JSR    OPEN2   GO ADJUST FILE NAME, AND MARK SYSIOCB AS "OPEN"
D9D3 BDD432    5518:         JSR     OPEN2
               5519:         ;CLR     OKTODECRYPTFLAG   FLAG "DON'T DECRYPT!"
D9D6 7FD067    5520:         CLR      OKTODECRYPTFLAG
               5521:         ;LDX    #DECRYPTBUFFER    SET UP SO GET BYTE GETS 1ST BYTE OF FILE
D9D9 CED05D    5522:         LDX     #DECRYPTBUFFER
D9DC FFD05B    5523:         STX     DECRYPTBUFPTR
               5524:         ;LDX    #FILLDECRYPTBUFFER        READ 1ST 8 BYTES OF FILE
D9DF CED031    5525:         LDX     #FILLDECRYPTBUFFER
               5526:         ;JSR    SYSCALLENTRY
D9E2 BDD1B3    5527:         JSR     SYSCALLENTRY
D9E5 2548      5528:         BCS       LOADER2  B/ PROBABLY EOF, TOO BAD!




ASM/6800 1.4A0: D9E5 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 185; Form 1     CHAIN/LOAD SYSCALLS
SDOS11G.ASM
               5529:         ;JSR    GETBYTE  GET ME A BYTE
D9E7 BDDC2E    5530:         JSR     GETBYTE
               5531:         ;CMPA     #LOAD:ENCRYPTED   IS THIS AN ENCRYPTED FILE?
D9EA 8105      5532:         CMPA      #LOAD:ENCRYPTED
               5533:         ;LBEQ    LOADENCRYPTED     B/ YES, GO COMPUTE DECRYPTION KEY AND PROCESS 1ST L
D9EC 2603      5534:         BNE      MACRO:000E
D9EE 7EDAA6    5535:         JMP     LOADENCRYPTED
  D9F1         5536: MACRO:000E
               5537:         ;LDX    #NEWKEYENCRYPTED SET NEWKEYENCRYPTED = 0 --> UNENCRYPTED FILE
D9F1 CED070    5538:         LDX     #NEWKEYENCRYPTED
               5539:         ;LDB     #8      = # BYTES TO ZERO
D9F4 C608      5540:         LDAB      #8
  D9F6         5541: ZERONEWKEYLOOP
               5542:         ;CLR     ,X+
D9F6 6F00      5543:         CLR      0,X
D9F8 08        5544:         INX
D9F9 5A        5545:         DECB
D9FA 26FA      5546:         BNE      ZERONEWKEYLOOP
  D9FC         5547: LOADSTART ; VERIFY THAT THIS IS A PROPERLY CONSTRUCTED START RECORD
               5548:         ;CMPA     #LOAD:TYPE1      DOES IT APPEAR TO BE SDOS BINARY FORMAT ?
D9FC 8101      5549:         CMPA      #LOAD:TYPE1
D9FE 2707      5550:         BEQ      LOADTYPE1        B/ YES
  DA00         5551: CANTLOAD   ; THIS IS NOT AN OBJECT FILE
DA00 8D4F      5552:         BSR      LOADCLOSE CLOSE THE FILE
               5553:         ;JSR    ERRET
DA02 BDD1F7    5554:         JSR     ERRET
DA05 0404      5555:         FDB      ERR:NOTALOADFILE
               5556: *
  DA07         5557: LOADTYPE1        ; FETCH START ADDRESS AND VERIFY COMPLEMENT IN TYPE1 RECORD
               5558:         ;JSR    GETWORD GET THE EXECUTION ADDRESS
DA07 BDDC5A    5559:         JSR     GETWORD
               5560:         ;STD    STARTADDRESS
DA0A F7CE49    5561:         STAB      STARTADDRESS+1
DA0D B7CE48    5562:         STAA      STARTADDRESS
               5563:         ;LDX    LOADSYSCALLPTR     COPY START ADDRESS TO SYSCALL REPLY BUFFER
DA10 FECF1D    5564:         LDX     LOADSYSCALLPTR
               5565:         ;LDX    SCBLK:RDBUF,X
DA13 EE0A      5566:         LDX     SCBLK:RDBUF,X
               5567:         ;STD    2,X
DA15 E703      5568:         STAB      (2)+1,X




ASM/6800 1.4A0: DA17 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 186; Form 1     CHAIN/LOAD SYSCALLS
SDOS11G.ASM
DA17 A702      5569:         STAA      2,X
               5570:         ;JSR    GETWORD
DA19 BDDC5A    5571:         JSR     GETWORD
               5572:         ;ADDD    STARTADDRESS
DA1C FBCE49    5573:         ADDB      STARTADDRESS+1
DA1F B9CE48    5574:         ADCA       STARTADDRESS
               5575:         ;CMPD    #-1
DA22 81FF      5576:         CMPA      #(-1)/256
DA24 2602      5577:         BNE      MACRO:000F
DA26 C1FF      5578:         CMPB      #(-1)&$FF
  DA28         5579: MACRO:000F
DA28 26D6      5580:         BNE      CANTLOAD   B/ NOT TYPE 1 RECORD!
  DA2A         5581: LOADINITOKRTS
DA2A 0C39      5582:         OKRTS
               5583: 
  DA2C         5584: ERRSERIALNOWRONG
               5585:         ;LDX    #ERR:SERIALNOWRONG
DA2C CE0432    5586:         LDX     #ERR:SERIALNOWRONG
  DA2F         5587: LOADER2  ; ERRORED WHILE TRYING TO LOAD
DA2F FFCE48    5588:         STX     STARTADDRESS      SAVE THE ERROR CODE
DA32 8D1D      5589:         BSR      LOADCLOSE CLOSE UP THE LOAD FILE
               5590:         ;LDX    STARTADDRESS      GET ERROR CODE BACK
DA34 FECE48    5591:         LDX     STARTADDRESS
DA37 2008      5592:         BRA       LOADINITCANT1      GO STICK USER WITH ERROR
               5593: 
  DA39         5594: LOADINITCANTOPEN   ; ERROR WHEN OPENING LOAD FILE
DA39 8C03F3    5595:         CPX      #ERR:FILENOTFOUND       IS THIS THE CAUSE?
DA3C 2603      5596:         BNE      LOADINITCANT1      B/ NO
               5597:         ;LDX    #ERR:NOSUCHPROGRAM        YES, CHANGE ERROR CODES
DA3E CE0428    5598:         LDX     #ERR:NOSUCHPROGRAM
  DA41         5599: LOADINITCANT1
               5600:         ;JMP    ERRORINX        TRIGGER THE ERROR AGAIN
DA41 7ED201    5601:         JMP     ERRORINX




ASM/6800 1.4A0: DA41 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 187; Form 1     CHAIN/LOAD SYSCALLS
SDOS11G.ASM
               5603: *       LOAD -- PERFORM "SYSCALL:LOAD"
               5604: *
  DA44         5605: LOAD     EQU     *
               5606:         ;JSR    LOADINIT LOAD THE FILE INTO MEMORY
DA44 BDD9AE    5607:         JSR     LOADINIT
               5608:         ;JSR    COMPAREDECRYPTIONKEYS      ARE OLD AND NEW DECRYPTION KEYS IDENTICAL ?
DA47 BDD98D    5609:         JSR     COMPAREDECRYPTIONKEYS
DA4A 25E3      5610:         BCS       LOADER2  B/ KEYS DON'T MATCH, CLOSE FILES AND SIGNAL ERROR!
               5611: *
  DA4C         5612: LOADREST ; LOAD OBJECT RECORDS FROM FILE
               5613:         ;JSR    LOADCONTENTS      LOAD THE CONTENTS OF THIS FILE
DA4C BDDB7C    5614:         JSR     LOADCONTENTS
DA4F 25DE      5615:         BCS       LOADER2  B/ ERRORED IN LOADING FILE CONTENTS
  DA51         5616: LOADCLOSE ; CLOSE THE LOAD FILE AND QUIT
               5617:         ;LDX    #OLDKEYENCRYPTED DECIDE IF WE SHOULD RUN ENCRYPTED OR NOT
DA51 CED068    5618:         LDX     #OLDKEYENCRYPTED
               5619:         ;JSR    SETKEY  (TRASH THE DECRYPTION KEY, THIS PATH ALWAYS TAKEN!)
DA54 BDDC62    5620:         JSR     SETKEY
DA57 A600      5621:         LDAA      ,X      IF OLDKEYENCRYPTED<>0, THEN RUN ENCRYPTED!
DA59 AA01      5622:         ORAA      1,X
DA5B AA02      5623:         ORAA      2,X
DA5D AA03      5624:         ORAA      3,X
DA5F AA04      5625:         ORAA      4,X
DA61 AA05      5626:         ORAA      5,X
DA63 AA06      5627:         ORAA      6,X
DA65 AA07      5628:         ORAA      7,X
               5629:         ;JSR    GETRUNNINGENCRYPTED      SET RUNNINGENCRYPTED FLAG
DA67 BDDA95    5630:         JSR     GETRUNNINGENCRYPTED
               5631:         ;STA     ,X      SET RUNNINGENCRYPTED TO PROPER STATE
DA6A A700      5632:         STAA      0,X
               5633:         ;LDX    #LOADCLOSE1       NOW CLOSE THE LOAD FILE
DA6C CEDA72    5634:         LDX     #LOADCLOSE1
               5635:         ;JMP    SYSCALLENTRY
DA6F 7ED1B3    5636:         JMP     SYSCALLENTRY
               5637: 
  DA72         5638: LOADCLOSE1        EQU     *
DA72 02        5639:         FCB       SYSCALL:CLOSE
DA73 03        5640:         FCB       CLOSE:SCLEN
DA74 FE        5641:         FCB       SYSCHANNEL




ASM/6800 1.4A0: DA74 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 188; Form 1     CHAIN/LOAD SYSCALLS
SDOS11G.ASM
               5643: *
               5644: *       SYSCALL:GETSERIALNUMBER
               5645: *       RETURNS SERIALNUMBER OF PROCESSOR IN REPLY BUFFER
               5646: *
  DA75         5647: GETSERIALNUMBER
               5648:         ;JSR    CHECKRDLEN        MAKE SURE REPLY BUFFER IS LARGE ENOUGH
DA75 BDD8A0    5649:         JSR     CHECKRDLEN
DA78 0008      5650:         FDB      SERIALNUMBER:SIZE
  0001         5651:         IF      M6800!M6801
               5652:         ;LDX    SCBLK:RDBUF,X      WHERE TO PUT SERIAL NUMBER
DA7A EE0A      5653:         LDX     SCBLK:RDBUF,X
DA7C DF00      5654:         STX     TEMPX   = COPY-TO ADDRESS
  0001         5655:         ELSE    (M6809)
 *S*           5656:         LDY     SCBLK:RDBUF,X      WHERE TO PUT SERIAL NUMBER
               5657:         FIN
DA7E 8D05      5658:         BSR      GETSERIALNUMBERADDRESS     GET ADDRESS AND SIZE OF SERIAL NUMBER
               5659:         ;JSR    BLOCKMOVE *** NOT SAFE TO USE SDOS:BLOCKMOVE ENTRY POINT ***
DA80 BDFBD2    5660:         JSR     BLOCKMOVE
DA83 0C39      5661:         OKRTS
               5662: *
               5663: *       GETSERIALNUMBERADDRESS -- RETURNS LOCATION AND SIZE OF SERIALNUMBER
               5664: *
  DA85         5665: GETSERIALNUMBERADDRESS
               5666:         ;LDD    #SERIALNUMBER:SIZE        GET SIZE OF SERIAL NUMBER TO (D)
DA85 C608      5667:         LDAB      #(SERIALNUMBER:SIZE)&$FF
DA87 8600      5668:         LDAA      #(SERIALNUMBER:SIZE)/256
               5669:         ;LDX    SERIALNUMBERLOCATION        GET LOCATION OF S/N FOR MASK ROM
DA89 FED845    5670:         LDX     SERIALNUMBERLOCATION
DA8C 2606      5671:         BNE      GETSERIALNUMBERADDRESSRTS  B/ MASK ROM
               5672:         ;LDX    $FFFE   STANDARD SDOS BOOT ROM, FIND JMP PRECEDING S/N
DA8E FEFFFE    5673:         LDX     $FFFE
               5674:         ;LEAX    3,X     ADVANCE POINTER SO IT POINTS AT S/N IN ROM
  0000         5675:         IF      3<0
 *S*           5676:         RPT     -3
 *S*           5677:         DEX
               5678:         ELSE
  0003         5679:         RPT     3
DA91 08        5680:         INX
               5681:         FIN
  DA94         5682: GETSERIALNUMBERADDRESSRTS




ASM/6800 1.4A0: DA94 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 189; Form 1     CHAIN/LOAD SYSCALLS
SDOS11G.ASM
DA94 39        5683:         RTS




ASM/6800 1.4A0: DA94 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 190; Form 1     SDOS BINARY FORMAT LOADER
SDOS11G.ASM
  DA95         5685: GETRUNNINGENCRYPTED ; GET ADDRESS OF RUNNING ENCRYPTED FLAG TO (X)
               5686:         ;LDX    SERIALNUMBERLOCATION        MASK ROM ?
DA95 FED845    5687:         LDX     SERIALNUMBERLOCATION
DA98 2704      5688:         BEQ      GETRUNNINGENCRYPTED1     B/ NO, GO LOCATE VIA RESTART VECTOR
               5689:         ;LDX    #RUNNINGENCRYPTEDFLAG     YES, USE DEFAULT RUNNING ENCRYPTED FLAG
DA9A CED066    5690:         LDX     #RUNNINGENCRYPTEDFLAG
DA9D 39        5691:         RTS
               5692: 
  DA9E         5693: GETRUNNINGENCRYPTED1 ; STANDARD SDOS ROM STRUCTURE
               5694:         ;LDX    $FFFE   GET ADDRESS OF JMP PRECEDING SERIAL NUMBER
DA9E FEFFFE    5695:         LDX     $FFFE
               5696:         ;LDX    1,X     GET POINTER TO RESTART CODE
DAA1 EE01      5697:         LDX     1,X
               5698:         ;LDX    LDAENCRYPTED-RESTART+1,X   = ADDRESS OF RUNNINGENCRYPTED FLAG
DAA3 EE04      5699:         LDX     LDAENCRYPTED-RESTART+1,X
DAA5 39        5700:         RTS
               5701: 
  DAA6         5702: LOADENCRYPTED ; LOAD AN ENCRYPTED FILE, PROCESS TYPE 5 RECORD
DAA6 8DED      5703:         BSR      GETRUNNINGENCRYPTED      GET ADDRESS OF RUNNING ENCRYPTED
               5704:         ;INC     ,X      BUMP RUNNINGENCRYPTED; = 2 --> WAS ALREADY RUNNING ENCRYPTED
DAA8 6C00      5705:         INC      0,X
               5706:         ;LDX    SERIALNUMBERLOCATION        SHOULD WE CHECK SELECT BANK ROUTINE ?
DAAA FED845    5707:         LDX     SERIALNUMBERLOCATION
DAAD 260A      5708:         BNE      LOADENCRYPTED1    B/ NO, THIS MACHINE HAS MASK-ROM --> NO SELECT BANK
               5709:         ;LDX    $FFFE   LOCATE SELECT BANK VIA RESTART VECTOR
DAAF FEFFFE    5710:         LDX     $FFFE
               5711:         ;LDX    1,X     CALL SELECTBANK TO VERIFY THAT IT REALLY WORKS!
DAB2 EE01      5712:         LDX     1,X
DAB4 4F        5713:         CLRA              SELECT BANK 0
               5714:         ;JSR    [ERASEBANK-RESTART+1,X]
DAB5 EE0B      5715:         LDX     ERASEBANK-RESTART+1,X
DAB7 AD00      5716:         JSR     0,X
  DAB9         5717: LOADENCRYPTED1
               5718:         ;LDB     DECRYPTBUFFER+1   GET KEY COUNT FROM TYPE 5 RECORD
DAB9 F6D05E    5719:         LDAB      DECRYPTBUFFER+1
               5720:         ;STB     NKEYS   = # OF KEYS ENCODED
DABC F7D065    5721:         STAB      NKEYS
               5722:         ;LDX    #SDOSSECRETKEY
DABF CEDB1C    5723:         LDX     #SDOSSECRETKEY
               5724:         ;JSR    SETKEY  TO START DECRYPT CASCADE THAT GENERATES KEY




ASM/6800 1.4A0: DAC2 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 191; Form 1     SDOS BINARY FORMAT LOADER
SDOS11G.ASM
DAC2 BDDC62    5725:         JSR     SETKEY
               5726:         ;LDX    #DECRYPTBUFFER    START CASCADE OF DECRYPTING 05 RECORD
DAC5 CED05D    5727:         LDX     #DECRYPTBUFFER
               5728:         ;JSR    DECRYPT  THIS RANDOMIZES AS MUCH AS ENCRYPT
DAC8 BDD0B1    5729:         JSR     DECRYPT
               5730:         ;JSR    SETKEY  SET KEY TO CONTENTS OF BUFFER
DACB BDDC62    5731:         JSR     SETKEY
               5732:         ;CLR     OKTODECRYPTFLAG   FLAG 'NO SERIAL NUMBER MATCHES'
DACE 7FD067    5733:         CLR      OKTODECRYPTFLAG
  DAD1         5734: LOADCASCADELOOP ; PROCESS SERIAL NUMBERS BY CASCADING THEM
               5735:         ;LDX    #FILLDECRYPTBUFFER READ IN THE NEXT SERIAL NUMBER
DAD1 CED031    5736:         LDX     #FILLDECRYPTBUFFER
               5737:         ;JSR    SYSCALLENTRY
DAD4 BDD1B3    5738:         JSR     SYSCALLENTRY
  0001         5739:         IF      M6800!M6801
               5740:         ;LDX    #DECRYPTBUFFER    = COMPARE "TO" ADDRESS
DAD7 CED05D    5741:         LDX     #DECRYPTBUFFER
DADA DF00      5742:         STX     TOPOINTER
  0001         5743:         ELSE    (M6809)
 *S*           5744:         LDY     #DECRYPTBUFFER
               5745:         FIN
DADC 8DA7      5746:         BSR      GETSERIALNUMBERADDRESS     GET POINTER TO SERIAL NUMBER IN ROM
               5747:         ; ASSERT: GETSERIALNUMBERADDRESS SETS (D) TO 8
               5748:         ;JSR    BLOCKCOMPARE        COMPARE DECRYPTBUFFER AGAINST ROM SERIAL NUMBER
DADE BDEA29    5749:         JSR     BLOCKCOMPARE
DAE1 07        5750:         TPA              HAS 4'S BIT SET IF MATCHED
DAE2 8404      5751:         ANDA      #4      = 0 IF NO MATCH, <>0 IF MATCH
               5752: *       SET OKTODECRYPTFLAG IF THERE IS A MATCH
               5753: *       DON'T USE CONDITIONAL BRANCH AS THEY ARE EASY TO FIND
               5754: *
               5755:         ;EORA    OKTODECRYPTFLAG   NOW SET FLAG IF OK TO DECRYPT
DAE4 B8D067    5756:         EORA     OKTODECRYPTFLAG
               5757:         ;STA     OKTODECRYPTFLAG
DAE7 B7D067    5758:         STAA      OKTODECRYPTFLAG
               5759: *** IF DECRYPT KEY WERE FUNCTION OF ROM, THEN WE WOULD NOT HAVE TO CHECK SERIAL
               5760: *** NUMBER IN ROM AT ALL; SIMPLY TRY TO LOAD IT. ILLEGAL LOAD RECORD REPORTS AS
               5761: *** WRONG SERIAL NUMBER!
               5762:         ;LDX    #DECRYPTBUFFER    START CASCADE OF DECRYPTING 05 RECORD
DAEA CED05D    5763:         LDX     #DECRYPTBUFFER
               5764:         ;JSR    DECRYPT  THIS RANDOMIZES AS MUCH AS ENCRYPT




ASM/6800 1.4A0: DAED SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 192; Form 1     SDOS BINARY FORMAT LOADER
SDOS11G.ASM
DAED BDD0B1    5765:         JSR     DECRYPT
               5766:         ;JSR    SETKEY  SET KEY TO CONTENTS OF BUFFER
DAF0 BDDC62    5767:         JSR     SETKEY
               5768:         ;DEC     NKEYS   PROCESSED A KEY...
DAF3 7AD065    5769:         DEC      NKEYS
DAF6 26D9      5770:         BNE      LOADCASCADELOOP      B/ MORE KEYS TO PROCESS
DAF8 7DD067    5771:         TST     OKTODECRYPTFLAG   DID WE FIND A MATCHING SERIAL NUMBER?
               5772:         ;LBEQ    ERRSERIALNOWRONG
DAFB 2603      5773:         BNE      MACRO:0010
DAFD 7EDA2C    5774:         JMP     ERRSERIALNOWRONG
  DB00         5775: MACRO:0010
               5776: *
               5777: *       AT THIS POINT, THE DECRYPTION KEY FOR THE OBJECT RECORDS IS COMPLETE
               5778: *       NOW WE START THE ACTUAL LOADING PROCESS
               5779: *       WE STILL CHECK FOR OBJECT FILE FORMAT IN CASE THE DECRYPTION KEY IS BAD




ASM/6800 1.4A0: DAFD SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 193; Form 1     SDOS BINARY FORMAT LOADER
SDOS11G.ASM
               5781: *       NOW GENERATE AN ENCRYPTED VERSION OF THE DECRYPTION KEY...
               5782: *       SO THAT CHAIN/LOAD CAN COMPARE TO OLD VERSION OF "DECRYPTION" KEY
               5783: *
               5784:         ;jsr    decrypt "Encrypt" the key using itself
DB00 BDD0B1    5785:         JSR     decrypt
  0001         5786:         IF      M6800!M6801
               5787:         ;LDX    #NEWKEYENCRYPTED = "TO" ADDRESS
DB03 CED070    5788:         LDX     #NEWKEYENCRYPTED
DB06 DF00      5789:         STX     TOPOINTER
  0001         5790:         ELSE    (M6809)
 *S*           5791:         LDY     #NEWKEYENCRYPTED
               5792:         FIN
               5793:         ;LDX    #DECRYPTBUFFER    = FROM ADDRESS
DB08 CED05D    5794:         LDX     #DECRYPTBUFFER
               5795:         ;LDD    #8      = SIZE OF KEY
DB0B C608      5796:         LDAB      #(8)&$FF
DB0D 8600      5797:         LDAA      #(8)/256
               5798:         ;JSR    BLOCKMOVE SAVE NEWKEY, ENCRYPTED FOR LATER COMPARISION
DB0F BDFBD2    5799:         JSR     BLOCKMOVE
               5800: *       LDX     #DECRYPTBUFFEREND SET UP TO GET PRESUMED TYPE1 RECORD CODE
DB12 FFD05B    5801:         STX     DECRYPTBUFPTR
               5802:         ;JSR    GETBYTE GET ME A BYTE
DB15 BDDC2E    5803:         JSR     GETBYTE
               5804:         ;jmp    loadstart       go process type1 load record
DB18 7ED9FC    5805:         JMP     loadstart
               5806: 
DB1B CE        5807:         FCB       $CE      TO THROW OFF WOULD-BE DISASSEMBLERS
DB1C 4CB0B74E  5808: SDOSSECRETKEY FCB $4C,$B0,$B7,$4E,$9B,$65,$72,$C9




ASM/6800 1.4A0: DB20 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 194; Form 1     SDOS BINARY FORMAT LOADER
SDOS11G.ASM
  DB24         5810: LOADSETPOS       ; SYSCALL TO POSITION LOAD FILE PAST SKIP RECORD
DB24 0E        5811:         FCB       SYSCALL:CONTROL    USED BY LOADER TO EXECUTE "SKIP N BYTES"
DB25 08        5812:         FCB       CONTROL:SCLEN+4
DB26 FE        5813:         FCB       SYSCHANNEL
DB27 00        5814:         FCB       CC:POSITION
DB28 D02D      5815:         FDB      LOADFILEPOS      POINTER TO POSITION SELECT BUFFER
DB2A 0004      5816:         FDB      4       SIZE OF POSITION SELECT BUFFER
               5817: 
  DB2C         5818: LOADTYPE0        ; IGNORE "LOADCOUNT" BYTES (ASSERT: CANNOT OCCUR IN ENCRYPTED FILES!!
               5819:         ;JSR    GETWORD
DB2C BDDC5A    5820:         JSR     GETWORD
  DB2F         5821: LOADTYPE0L       ; USE UP BYTES IN DECRYPT BUFFER
               5822:         ;STD    LOADCOUNT SAVE # BYTES TO SKIP
DB2F F7CE4B    5823:         STAB      LOADCOUNT+1
DB32 B7CE4A    5824:         STAA      LOADCOUNT
               5825:         ;LDX    DECRYPTBUFFER     USE UP BYTES IN DECRYPTBUFFER, FIRST
DB35 FED05D    5826:         LDX     DECRYPTBUFFER
DB38 8CD065    5827:         CPX      #DECRYPTBUFFEREND DECRYPT BUFFER EXHAUSTED?
DB3B 2714      5828:         BEQ      LOADTYPE0.2      B/ YES
               5829:         ;JSR    GETBYTE  NO, USE UP A BYTE
DB3D BDDC2E    5830:         JSR     GETBYTE
               5831:         ;LDD    LOADCOUNT DECREMENT SKIP LOADCOUNT
DB40 F6CE4B    5832:         LDAB      LOADCOUNT+1
DB43 B6CE4A    5833:         LDAA      LOADCOUNT
               5834:         ;SUBD    #1
DB46 C001      5835:         SUBB      #(1)&$FF
DB48 8200      5836:         SBCA       #(1)/256
               5837:         ;BNED    LOADTYPE0L       B/ MORE BYTES TO SKIP
DB4A 26E3      5838:         BNE      LOADTYPE0L
DB4C 5D        5839:         TSTB
DB4D 26E0      5840:         BNE      LOADTYPE0L
DB4F 202B      5841:         BRA       LOADNEXT EXHAUSTED SKIP LOADCOUNT!
               5842: 
  DB51         5843: LOADTYPE0.2 ; SKIP OVER BIG CHUNK OF BYTES IN FILE
               5844:         ;LDX    #LOADGETPOS      GET FILE POSITION
DB51 CED01F    5845:         LDX     #LOADGETPOS
               5846:         ;JSR    SYSCALLENTRY
DB54 BDD1B3    5847:         JSR     SYSCALLENTRY
               5848:         ;LDD    BUFFER   ADD LOADCOUNT BYTES TO CURRENT POSITION
DB57 F6CFE9    5849:         LDAB      BUFFER+1




ASM/6800 1.4A0: DB5A SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 195; Form 1     SDOS BINARY FORMAT LOADER
SDOS11G.ASM
DB5A B6CFE8    5850:         LDAA      BUFFER
               5851:         ;ADDD    LOADFILEPOS+2
DB5D FBD030    5852:         ADDB      LOADFILEPOS+2+1
DB60 B9D02F    5853:         ADCA       LOADFILEPOS+2
               5854:         ;STD    LOADFILEPOS+2
DB63 F7D030    5855:         STAB      LOADFILEPOS+2+1
DB66 B7D02F    5856:         STAA      LOADFILEPOS+2
DB69 2407      5857:         BCC        LOADTYPE0.1
               5858:         ;LDX    LOADFILEPOS      PROPOGATE CARRY TO UPPER 16 BITS
DB6B FED02D    5859:         LDX     LOADFILEPOS
DB6E 08        5860:         INX
DB6F FFD02D    5861:         STX     LOADFILEPOS
  DB72         5862: LOADTYPE0.1      EQU     *
               5863:         ;LDX    #LOADSETPOS      AND POSITION THERE
DB72 CEDB24    5864:         LDX     #LOADSETPOS
               5865:         ;JSR    SYSCALLENTRY
DB75 BDD1B3    5866:         JSR     SYSCALLENTRY
DB78 2002      5867:         BRA       LOADNEXT




ASM/6800 1.4A0: DB78 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 196; Form 1     SDOS BINARY FORMAT LOADER
SDOS11G.ASM
               5869: *       LOAD BYTES AND THEN LOOK FOR NEXT RECORD
               5870: *
  DB7A         5871: LOADTYPE2
DB7A 8D19      5872:         BSR      LOAD2AND3
               5873: *
               5874: *       GET NEXT RECORD, TYPE 0, 2, & 3 ALLOWED HERE
               5875: *
  DB7C         5876: LOADCONTENTS      ; LOAD CONTENTS OF OBJECT FILE
  DB7C         5877: LOADNEXT ;JSR    GETBYTE
DB7C BDDC2E    5878:         JSR     GETBYTE
               5879:         ;CMPA     #LOAD:TYPE2      DATA RECORD ?
DB7F 8102      5880:         CMPA      #LOAD:TYPE2
DB81 27F7      5881:         BEQ      LOADTYPE2        B/ YES
               5882:         ;CMPA     #LOAD:TYPE3      LAST DATA RECORD ?
DB83 8103      5883:         CMPA      #LOAD:TYPE3
DB85 270E      5884:         BEQ      LOADTYPE3        B/ YES
               5885:         ;CMPA     #LOAD:TYPE0      SKIP RECORD ?
DB87 8100      5886:         CMPA      #LOAD:TYPE0
DB89 27A1      5887:         BEQ      LOADTYPE0        B/ YES
  DB8B         5888: ERRBADLOADRECORD    EQU     *
               5889:         ;JSR    ERRET
DB8B BDD1F7    5890:         JSR     ERRET
DB8E 040C      5891:         FDB      ERR:BADLOADRECORD
               5892: 
  DB90         5893: ERRNOTENOUGHROOM        EQU     *
               5894:         ;JSR    ERRET
DB90 BDD1F7    5895:         JSR     ERRET
DB93 040D      5896:         FDB      ERR:NOTENOUGHROOM




ASM/6800 1.4A0: DB93 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 197; Form 1     SDOS BINARY FORMAT LOADER
SDOS11G.ASM
               5898: *       LOAD BYTES AND THEN QUIT
               5899: *
  DB95         5900: LOADTYPE3 ; LAST LOAD RECORD, LOAD THE BYTES AND QUIT
               5901: *
               5902: *
               5903: *       LOAD BYTES FROM DISK FILE INTO USER SPACE
               5904: *
  DB95         5905: LOAD2AND3 ; LOAD CONTENTS OF TYPE 2 OR TYPE 3 RECORD
               5906:         ;JSR    GETWORD GO GET THE LOAD ADDRESS
DB95 BDDC5A    5907:         JSR     GETWORD
               5908:         ;STD    LOADADDRESS
DB98 F7D04A    5909:         STAB      LOADADDRESS+1
DB9B B7D049    5910:         STAA      LOADADDRESS
               5911:         ;JSR    GETWORD
DB9E BDDC5A    5912:         JSR     GETWORD
               5913:         ;STD    LOADCOUNT
DBA1 F7CE4B    5914:         STAB      LOADCOUNT+1
DBA4 B7CE4A    5915:         STAA      LOADCOUNT
               5916:         ;ADDD    LOADADDRESS       = ADDRESS OF LAST BYTE LOADED, +1
DBA7 FBD04A    5917:         ADDB      LOADADDRESS+1
DBAA B9D049    5918:         ADCA       LOADADDRESS
               5919: *
               5920: *       LOADBOUNDSCHECK -- MAKE SURE (A,B) <= DRIVER BASE
               5921: *       WE SHOULD ALSO CHECK TO MAKE SURE WE ARE LOADING ON TOP OF THE STACK, TOO!
               5922: *
               5923:         ;LDX    CODE+SDOS:CONFIGURATION
DBAD FECE03    5924:         LDX     CODE+SDOS:CONFIGURATION
DBB0 0D        5925:         SEC              ACTUALLY TEST FOR (A,B)-1 < DRIVERBASE
DBB1 E210      5926:         SBCB       CNFG:DRIVERBASE+1,X        ...?
DBB3 A20F      5927:         SBCA       CNFG:DRIVERBASE,X  ...?
DBB5 24D9      5928:         BCC        ERRNOTENOUGHROOM        B/ HE'S DEAD!
  DBB7         5929: LOAD2AND3.1 ; CHECK FOR DONE LOADING BYTES FROM THIS RECORD
               5930:         ;LDX    LOADCOUNT ARE WE DONE?
DBB7 FECE4A    5931:         LDX     LOADCOUNT
DBBA 2770      5932:         BEQ      LOAD2AND3RTS      B/ YES
  DBBC         5933: LOAD2AND3LOOP ; LOAD SOME BYTES FROM THIS RECORD
               5934:         ;LDX    DECRYPTBUFPTR     TRY TO OPTIMIZE THE LOAD PROCESS
DBBC FED05B    5935:         LDX     DECRYPTBUFPTR
DBBF 8CD065    5936:         CPX      #DECRYPTBUFFEREND IS THERE STILL STUFF IN THE DECRYPT BUFFER?
DBC2 2654      5937:         BNE      LOAD2AND3BYTE      B/ STUFF STILL IN THE BUFFER




ASM/6800 1.4A0: DBC2 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 198; Form 1     SDOS BINARY FORMAT LOADER
SDOS11G.ASM
               5938:         ;LDD    LOADCOUNT AT LEAST 8 BYTES TO LOAD?
DBC4 F6CE4B    5939:         LDAB      LOADCOUNT+1
DBC7 B6CE4A    5940:         LDAA      LOADCOUNT
DBCA C4F8      5941:         ANDB      #(\7)&$FF       (D) = MULTIPLE OF 8 BYTES TO LOAD
               5942:         ;STD    OPTIMIZEDLOADCOUNT
DBCC F7D04C    5943:         STAB      OPTIMIZEDLOADCOUNT+1
DBCF B7D04B    5944:         STAA      OPTIMIZEDLOADCOUNT
               5945:         ;BEQD    LOAD2AND3BYTE      B/ NOT ENOUGH BYTES TO LOAD
DBD2 2603      5946:         BNE      MACRO:0011
DBD4 5D        5947:         TSTB
DBD5 2741      5948:         BEQ      LOAD2AND3BYTE
  DBD7         5949: MACRO:0011
               5950: *
               5951: *       LOAD A MULTIPLE OF 8 BYTES INTO MEMORY QUICKLY
               5952: *
               5953:         ;LDD    LOADCOUNT COMPUTE REMAINING LOADCOUNT AFTER OPTIMIZED LOAD
DBD7 F6CE4B    5954:         LDAB      LOADCOUNT+1
DBDA B6CE4A    5955:         LDAA      LOADCOUNT
DBDD 4F        5956:         CLRA
DBDE C407      5957:         ANDB      #7      = REMAINING LOADCOUNT AFTER MULTIPLE OF 8 LOADED
               5958:         ;STD    LOADCOUNT
DBE0 F7CE4B    5959:         STAB      LOADCOUNT+1
DBE3 B7CE4A    5960:         STAA      LOADCOUNT
               5961:         ;LDX    #LOADMULTIPLEOF8
DBE6 CED03F    5962:         LDX     #LOADMULTIPLEOF8
               5963:         ;JSR    SYSCALLENTRY      EOF WILL OCCUR IF LOAD FILE IS NOT MULTIPLE OF 8 BYT
DBE9 BDD1B3    5964:         JSR     SYSCALLENTRY
               5965:         ;LDX    LOADADDRESS       WHERE TO START DECRYPTING
DBEC FED049    5966:         LDX     LOADADDRESS
               5967:         ;LDD    LOADADDRESS       COMPUTE WHERE TO END DECRYPTING
DBEF F6D04A    5968:         LDAB      LOADADDRESS+1
DBF2 B6D049    5969:         LDAA      LOADADDRESS
               5970:         ;ADDD    OPTIMIZEDLOADCOUNT
DBF5 FBD04C    5971:         ADDB      OPTIMIZEDLOADCOUNT+1
DBF8 B9D04B    5972:         ADCA       OPTIMIZEDLOADCOUNT
               5973:         ;STD    LOADADDRESS       = 1ST PLACE NOT YET LOADED
DBFB F7D04A    5974:         STAB      LOADADDRESS+1
DBFE B7D049    5975:         STAA      LOADADDRESS
DC01 7DD067    5976:         TST     OKTODECRYPTFLAG   ARE WE DECRYPTING?
DC04 27B1      5977:         BEQ      LOAD2AND3.1       B/ NO, GO LOAD MORE BYTES




ASM/6800 1.4A0: DC04 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 199; Form 1     SDOS BINARY FORMAT LOADER
SDOS11G.ASM
  DC06         5978: LOAD2AND3MASSDECRYPT ; DECRYPT JUST LOADED BLOCK OF BYTES
               5979:         ;JSR    DECRYPT  GO DECRYPT A BLOCK OF 8 BYTES
DC06 BDD0B1    5980:         JSR     DECRYPT
               5981:         ;LEAX    8,X     FIND NEXT BLOCK OF 8 BYTES
  0000         5982:         IF      8<0
 *S*           5983:         RPT     -8
 *S*           5984:         DEX
               5985:         ELSE
  0008         5986:         RPT     8
DC09 08        5987:         INX
               5988:         FIN
DC11 BCD049    5989:         CPX      LOADADDRESS       ALL LOADED BYTES DECRYPTED YET?
DC14 26F0      5990:         BNE      LOAD2AND3MASSDECRYPT B/ NO, GO DECRYPT SOME MORE
DC16 209F      5991:         BRA       LOAD2AND3.1       YES, GO SEE IF MORE BYTES TO LOAD
               5992: *
               5993: *       LOAD A BYTE THE HARD WAY
               5994: *
  DC18         5995: LOAD2AND3BYTE ; LOAD ONE BYTE THE UNOPTIMIZED WAY
DC18 8D14      5996:         BSR      GETBYTE
               5997:         ;LDX    LOADADDRESS
DC1A FED049    5998:         LDX     LOADADDRESS
               5999:         ;STA     ,X+
DC1D A700      6000:         STAA      0,X
DC1F 08        6001:         INX
DC20 FFD049    6002:         STX     LOADADDRESS
               6003:         ;LDX    LOADCOUNT
DC23 FECE4A    6004:         LDX     LOADCOUNT
DC26 09        6005:         DEX
DC27 FFCE4A    6006:         STX     LOADCOUNT
DC2A 2690      6007:         BNE      LOAD2AND3LOOP
DC2C 0C39      6008: LOAD2AND3RTS      OKRTS   YOU GUESS...




ASM/6800 1.4A0: DC2C SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 200; Form 1     SDOS BINARY FORMAT LOADER
SDOS11G.ASM
               6010: *
               6011: *
  DC2E         6012: GETBYTE ; GET NEXT DECRYPTED BYTE FROM THE FILE INTO (A)
               6013:         ;LDX    DECRYPTBUFPTR     IS THE BUFFER EMPTY?
DC2E FED05B    6014:         LDX     DECRYPTBUFPTR
DC31 8CD065    6015:         CPX      #DECRYPTBUFFEREND
DC34 261C      6016:         BNE      GETBYTE1 B/ NOPE
DC36 7DD067    6017:         TST     OKTODECRYPTFLAG   BUFFER IS EMPTY, ARE WE DECRYPTING?
DC39 260B      6018:         BNE      GETBYTED B/ YES, GO FETCH ANOTHER BUFFERFUL TO DECRYPT
               6019:         ;LDX    #GET1BYTE        NO, FETCH NEXT LOAD RECORD HEADER BYTE
DC3B CED04D    6020:         LDX     #GET1BYTE
               6021:         ;JSR    SYSCALLENTRY
DC3E BDD1B3    6022:         JSR     SYSCALLENTRY
               6023:         ;LDA     BUFFER   GET THE BYTE
DC41 B6CFE8    6024:         LDAA      BUFFER
DC44 0C39      6025:         OKRTS
               6026: 
  DC46         6027: GETBYTED ; GET NEXT 8 BYTES FROM FILE AND DECRYPT
               6028:         ;LDX    #FILLDECRYPTBUFFER
DC46 CED031    6029:         LDX     #FILLDECRYPTBUFFER
               6030:         ;JSR    SYSCALLENTRY
DC49 BDD1B3    6031:         JSR     SYSCALLENTRY
               6032:         ;LDX    #DECRYPTBUFFER    START BUFFER POINTER AT BEGIN BUFFER
DC4C CED05D    6033:         LDX     #DECRYPTBUFFER
               6034:         ;JSR    DECRYPT  DECRYPT THE 8 BYTES JUST READ
DC4F BDD0B1    6035:         JSR     DECRYPT
  DC52         6036: GETBYTE1 ; FETCH DECRYPTED BYTE FROM BUFFER
               6037:         ;LDA     ,X+     GET THE CHAR
DC52 A600      6038:         LDAA      0,X
DC54 08        6039:         INX
DC55 FFD05B    6040:         STX     DECRYPTBUFPTR
DC58 0C39      6041:         OKRTS           I'M DONE
               6042: *
  DC5A         6043: GETWORD ; GET 2 BYTES FROM THE DISK BUFFER INTO (D)
DC5A 8DD2      6044:         BSR      GETBYTE
DC5C 36        6045:         PSHA
DC5D 8DCF      6046:         BSR      GETBYTE
DC5F 16        6047:         TAB
DC60 32        6048:         PULA
DC61 39        6049:         RTS




ASM/6800 1.4A0: DC61 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 201; Form 1     SDOS BINARY FORMAT LOADER
SDOS11G.ASM
  DC62         6051: SETKEY ; SET "KEY" TO 8 BYTES POINTED TO BY (X)
               6052:         ;LDD    4,X     COPY KEY BYTES TO INLINE CODE
DC62 E605      6053:         LDAB      (4)+1,X
DC64 A604      6054:         LDAA      4,X
               6055:         ;STB     KEY5    DO SO IN AS APPARENTLY DISORGANIZED WAY AS POSSIBLE
DC66 F7D09A    6056:         STAB      KEY5
               6057:         ;STA     KEY4
DC69 B7D093    6058:         STAA      KEY4
               6059:         ;LDD    0,X
DC6C E601      6060:         LDAB      (0)+1,X
DC6E A600      6061:         LDAA      0,X
               6062:         ;STA     KEY0
DC70 B7D0C2    6063:         STAA      KEY0
               6064:         ;STB     KEY1
DC73 F7D07E    6065:         STAB      KEY1
               6066:         ;LDD    6,X
DC76 E607      6067:         LDAB      (6)+1,X
DC78 A606      6068:         LDAA      6,X
               6069:         ;STB     KEY7
DC7A F7D0A8    6070:         STAB      KEY7
               6071:         ;STA     KEY6
DC7D B7D0A1    6072:         STAA      KEY6
               6073:         ;LDD    2,X
DC80 E603      6074:         LDAB      (2)+1,X
DC82 A602      6075:         LDAA      2,X
               6076:         ;STA     KEY2
DC84 B7D085    6077:         STAA      KEY2
               6078:         ;STB     KEY3
DC87 F7D08C    6079:         STAB      KEY3
DC8A 39        6080:         RTS
               6081: 
  DC8B         6082: ZAPUSERSPACE       ; OLD DECRYPTION KEY <> NEW, ERASE USER SPACE!
               6083: ;       Note: If this Trashed the user space, it would be much harder to
               6084: ;       determine program bounds of decrypted program
  0001         6085:         IF      M6800!M6801
DC8B 30        6086:         TSX
  DC8C         6087: ZAPUSERSPACEL ; ZAP ANOTHER USER SPACE BYTE
               6088:         ;CLR     ,-X
DC8C 09        6089:         DEX
DC8D 6F00      6090:         CLR      0,X




ASM/6800 1.4A0: DC8F SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 202; Form 1     SDOS BINARY FORMAT LOADER
SDOS11G.ASM
DC8F 8C0100    6091:         CPX      #$100   STOP ZEROING AT $100
DC92 26F8      6092:         BNE      ZAPUSERSPACEL
DC94 39        6093:         RTS
  0001         6094:         ELSE    (M6809)
 *S*           6095:         ;LDX    #$100   USE BLOCKMOVE LIKE 360 MVC INSTRUCTION TO ZERO MEMORY
 *S*           6096:         LDX     #$100
 *S*           6097:         STX     ,X      ZERO $100 THRU 101, FIRST
 *S*           6098:         ;DEC     ,X      DON'T YOU LOVE OBSCURE CODE?
 *S*           6099:         DEC      0,X
 *S*           6100:         ;LDD    SDOSSTACK = TOP OF SPACE TO ZERO
 *S*           6101:         LDAB      SDOSSTACK+1
 *S*           6102:         LDAA      SDOSSTACK
 *S*           6103:         SUBA      #2      (D) = # BYTES TO CLEAR, NOT COUNT PZ AND 256 BYTES OF STACK
 *S*           6104:         LEAY     2,X     WHERE TO MOVE STUFF TO...
 *S*           6105:         ;JMP    BLOCKMOVE NOT SECURE TO CALL CODE+SDOS:BLOCKMOVE
 *S*           6106:         JMP     BLOCKMOVE
               6107:         FIN




ASM/6800 1.4A0: DC94 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 203; Form 1     DISK FILE/DEVICE DRIVER
SDOS11G.ASM
               6109: *       DISK DEVICE DRIVER ENTRY VECTOR
               6110: *
  DC95         6111: DISKDEVICEDRIVER EQU     *
DC95 E4CF      6112:         FDB      DSKDOPEN        OPEN
DC97 E589      6113:         FDB      DSKDCLOSE        CLOSE
DC99 E00A      6114:         FDB      DSKDREADA READA
DC9B E1F6      6115:         FDB      DSKDWRITEA       WRITEA
DC9D DFA1      6116:         FDB      DSKDREADB READB
DC9F E16C      6117:         FDB      DSKDWRITEB       WRITEB
DCA1 E4CF      6118:         FDB      DSKDOPEN        CREATE
DCA3 DCAF      6119:         FDB      ILLDEVICEOP      RENAME
DCA5 DCAF      6120:         FDB      ILLDEVICEOP      DELETE
DCA7 E4F3      6121:         FDB      DSKDCONTROL      CONTROL
DCA9 E3CC      6122:         FDB      DSKDSTATUS       STATUS
DCAB DCB4      6123:         FDB      DISKRTS RESET
DCAD DCAF      6124:         FDB      ILLDEVICEOP      PFRESTART
               6125: 
  DCAF         6126: ILLDEVICEOP      ; ILLEGAL DEVICE OPERATION ATTEMPTED
               6127:         ;JSR    ERRET
DCAF BDD1F7    6128:         JSR     ERRET
DCB2 040A      6129:         FDB      ERR:ILLDEVICEOP
               6130: *
DCB4 0C39      6131: DISKRTS OKRTS




ASM/6800 1.4A0: DCB4 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 204; Form 1     DISK FILE/DEVICE DRIVER
SDOS11G.ASM
               6133: *
               6134: *       DISK FILE DRIVER ENTRY VECTOR
               6135: *
  DCB6         6136: DISKFILEDRIVER  EQU     *
DCB6 DDA5      6137:         FDB      DSKFOPEN
DCB8 DE70      6138:         FDB      DSKFCLOSE
DCBA DFE2      6139:         FDB      DSKFREADA
DCBC E19B      6140:         FDB      DSKFWRITEA
DCBE DF86      6141:         FDB      DSKFREADB
DCC0 E14E      6142:         FDB      DSKFWRITEB
DCC2 DCD5      6143:         FDB      DSKFCREATE
DCC4 DEEB      6144:         FDB      DSKFRENAME
DCC6 DE11      6145:         FDB      DSKFDELETE
DCC8 E25D      6146:         FDB      DSKFCONTROL
DCCA E3A6      6147:         FDB      DSKFSTATUS
DCCC 2454      6148:         FDB      DSKFRESET
DCCE DCD0      6149:         FDB      DSKFPFRESTART
               6150: *
               6151: *       DSKFPFRESTART -- DISK FILE DRIVER POWER FAIL RESET
               6152: *
  DCD0         6153: DSKFPFRESTART    EQU     *
               6154:         ;JSR    ERRET
DCD0 BDD1F7    6155:         JSR     ERRET
DCD3 0403      6156:         FDB      ERR:PWRFAILDISKF




ASM/6800 1.4A0: DCD3 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 205; Form 1     DISK FILE/DEVICE DRIVER
SDOS11G.ASM
               6158: *
               6159: *       DSKFCREATE -- CREATE A NEW DISK FILE
               6160: *
  DCD5         6161: DSKFCREATE        EQU     *
               6162:         ;JSR    PLANTDCBINIOCB       SO DISK I/O ROUTINES CAN FIND DRIVERS
DCD5 BDD43F    6163:         JSR     PLANTDCBINIOCB
               6164:         ;JSR    PARSEFILENAME     GO PROCESS THE DISK FILE NAME
DCD8 BDEBBB    6165:         JSR     PARSEFILENAME
               6166:         ;JSR    SEARCHDIRCREATE     GO FIND OUT IF FILE ALREADY EXISTS
DCDB BDE937    6167:         JSR     SEARCHDIRCREATE
               6168:         ;JSR    SEARCHFCBINIT       SET UP TO SEARCH FCBS
DCDE BDEB50    6169:         JSR     SEARCHFCBINIT
               6170:         ;JSR    SEARCHFCBS  IS FILE OPEN ALREADY?
DCE1 BDEB60    6171:         JSR     SEARCHFCBS
DCE4 2516      6172:         BCS       DSKFCREATE1       B/ FILE IS NOT OPEN ANYWHERE
DCE6 A60A      6173:         LDAA      FCB:FLAGS,X        FILE BY THAT NAME IS ALREADY OPEN
DCE8 8580      6174:         BITA      #FCBFLG::NEWFILE  A NEW FILE ?
DCEA 260B      6175:         BNE      ERRFILEINCREATE   B/ FILE ALREADY BEING CREATED
               6176: *       LDAA      FILEREPLACEMENTFLAG        IS "!" PRESENT TO ALLOW FILE OVERWRITE?
               6177: *       BNE      ERROLDFILEEXISTS        B/ NO, CAN'T OVERWRITE OLD FILE!
DCEC A615      6178:         LDAA      FCB:PROT,X        IS OLD FILE WRITE PROTECTED ?
DCEE 8540      6179:         BITA      #PROT::WRITE    IS FILE WRITE PROTECTED ?
DCF0 2617      6180:         BNE      ERRFILEWRTPROT  B/ YES, CAN'T CREATE A NEW ONE
               6181:         ;JSR    SEARCHFCBS  OLD FILE IS OPEN ALREADY
DCF2 BDEB60    6182:         JSR     SEARCHFCBS
DCF5 2545      6183:         BCS       DSKFCREATEF       B/ NO REPLACEMENT EXISTS FOR OLD FILE
  DCF7         6184: ERRFILEINCREATE   ; FILE BY THAT NAME IS BEING CREATED
               6185:         ;JSR    ERRET
DCF7 BDD1F7    6186:         JSR     ERRET
DCFA 03FB      6187:         FDB      ERR:FILEINCREATE




ASM/6800 1.4A0: DCFA SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 206; Form 1     DISK FILE/DEVICE DRIVER
SDOS11G.ASM
  DCFC         6189: DSKFCREATE1       ; OLD VERSION OF FILE IS NOT OPEN
               6190:         ;LDX    DIRENTRY        IS DIRECTORY ENTRY A FREE ENTRY?
DCFC FECEA8    6191:         LDX     DIRENTRY
DCFF A612      6192:         LDAA      DIR:HCSIC,X
DD01 2736      6193:         BEQ      DSKFCREATEC        B/ YES, GO COPY NAME TO DIRECTORY
               6194: *       LDAA      FILEREPLACEMENTFLAG        IS "!" PRESENT TO ALLOW FILE OVERWRITE?
               6195: *       BNE      ERROLDFILEEXISTS        B/ NO, CAN'T OVERWRITE OLD FILE!
DD03 A619      6196:         LDAA      DIR:PROTECTION,X NO, IS OLD FILE DELETE PROTECTED ?
DD05 8540      6197:         BITA      #PROT::WRITE    IS FILE WRITE PROTECTED ?
DD07 2733      6198:         BEQ      DSKFCREATEF       B/ NO, WE CAN DO THE CREATE
  DD09         6199: ERRFILEWRTPROT  EQU     *
               6200:         ;JSR    ERRET
DD09 BDD1F7    6201:         JSR     ERRET
DD0C 03F2      6202:         FDB      ERR:FILEWRTPROT
               6203: 
               6204: *       UPDATEFILEDATE -- SET CREATION DATE OF FILE TO CURRENT DATE
               6205: *       THIS ROUTINE IS CALLED WHENEVER A FILE IS MODIFIED
               6206: *       FCBPOINTER SPECIFIES WHICH FILE
               6207: *
  DD0E         6208: UPDATEFILEDATE
               6209:         ;LDX    FCBPOINTER        GET POINTER TO DESIRED FILE
DD0E FECEA6    6210:         LDX     FCBPOINTER
               6211:         ;LDA     FCB:PROT,X        IS FILE WRITE PROTECTED?
DD11 A615      6212:         LDAA      FCB:PROT,X
DD13 8540      6213:         BITA      #PROT::WRITE    ...?
DD15 26F2      6214:         BNE      ERRFILEWRTPROT  B/ YES, DON'T ALLOW UPDATE!
               6215:         ;LDB     CODE+SDOS:DAY     STAMP THE FCB WITH THE CREATION DATE
DD17 F6CE0E    6216:         LDAB      CODE+SDOS:DAY
DD1A 2718      6217:         BEQ      ERRTIMENOTSET   B/ TIME NOT SET, CANNOT MODIFY FILE!
DD1C 84FE      6218:         ANDA      #(\PROT::BACKUP)&$FF       TURN OFF "FILE IS BACKED UP" FLAG
               6219:         ;STA     FCB:PROT,X
DD1E A715      6220:         STAA      FCB:PROT,X
               6221:         ;STB     FCB:DAY,X  TIME STAMP FILE WITH DATE OF CHANGE
DD20 E716      6222:         STAB      FCB:DAY,X
               6223:         ;LDD    CODE+SDOS:MONTH
DD22 F6CE10    6224:         LDAB      CODE+SDOS:MONTH+1
DD25 B6CE0F    6225:         LDAA      CODE+SDOS:MONTH
               6226:         ;STD    FCB:MONTH,X
DD28 E718      6227:         STAB      (FCB:MONTH)+1,X
DD2A A717      6228:         STAA      FCB:MONTH,X




ASM/6800 1.4A0: DD2A SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 207; Form 1     DISK FILE/DEVICE DRIVER
SDOS11G.ASM
               6229:         ;LDA     FCB:FLAGS,X        UPDATE FILE FLAGS...
DD2C A60A      6230:         LDAA      FCB:FLAGS,X
DD2E 8A50      6231:         ORAA      #FCBFLG::UPDATEDIR!FCBFLG::MODIFIED  REMEMBER THAT THIS DATA MUST GO
DD30 A70A      6232:         STAA      FCB:FLAGS,X
DD32 0C39      6233:         OKRTS
               6234: 
  DD34         6235: ERRTIMENOTSET ; CLOCK DATE IS ZEROED, CAN'T CREATE A FILE!
               6236:         ;JSR    ERRET
DD34 BDD1F7    6237:         JSR     ERRET
DD37 0425      6238:         FDB      ERR:TIMENOTSET




ASM/6800 1.4A0: DD37 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 208; Form 1     DISK FILE/DEVICE DRIVER
SDOS11G.ASM
  DD39         6240: DSKFCREATEC        EQU     *
               6241:         ;JSR    COPYNAMETODIR     COPY FILE NAME TO DIRENTRY
DD39 BDDF6F    6242:         JSR     COPYNAMETODIR
  DD3C         6243: DSKFCREATEF       ; NOW CREATE A NEW FILE IN AN FCB
               6244: ***     JSR     DRIVER:WRTPROTCHECK       VERIFY THAT DISK DRIVE IS NOT WRITE PROTECTE
               6245:         ;JSR    FINDFREEFCB       GO FIND AN FCB TO USE
DD3C BDEACA    6246:         JSR     FINDFREEFCB
               6247:         ;CLR     FCB:HCSIC,X INITIALIZE FCB FOR NEW FILE
DD3F 6F0E      6248:         CLR      FCB:HCSIC,X
               6249:         ;CLR     FCB:FILESIZE,X    RESET FILE SIZE TO ZIP
DD41 6F11      6250:         CLR      FCB:FILESIZE,X
               6251:         ;CLR     FCB:FILESIZE+1,X
DD43 6F12      6252:         CLR      FCB:FILESIZE+1,X
               6253:         ;CLR     FCB:FILESIZE+2,X
DD45 6F13      6254:         CLR      FCB:FILESIZE+2,X
               6255:         ;CLR     FCB:FILESIZE+3,X
DD47 6F14      6256:         CLR      FCB:FILESIZE+3,X
DD49 8680      6257:         LDAA      #FCBFLG::NEWFILE  MARK FCB AS "NEW FILE"
DD4B A70A      6258:         STAA      FCB:FLAGS,X
               6259:         ;CLR     FCB:PROT,X        RESET THE PROTECTION BITS
DD4D 6F15      6260:         CLR      FCB:PROT,X
DD4F 8DBD      6261:         BSR      UPDATEFILEDATE    UPDATE FILE DATE
DD51 254A      6262:         BCS       DSKFCREATEOOPS    B/ TIME NOT SET, CAN'T CREATE FILE!
               6263:         ;JSR    DSKFOPEN1       GO SET UP IOCB TO REMEMBER FCB
DD53 BDDDC7    6264:         JSR     DSKFOPEN1
               6265:         ;CLR     IOCB:RDCN,X        TELL ALLOCATOR TO START ...
DD56 6F1B      6266:         CLR      IOCB:RDCN,X
DD58 8601      6267:         LDAA      #1      WITH RDCN 1 (= 1ST DATA CLUSTER)
DD5A A71C      6268:         STAA      IOCB:RDCN+1,X
               6269:         ;LDX    FILESIZERQSTD   DID USER SPECIFY INITIAL FILESIZE ?
DD5C FECECD    6270:         LDX     FILESIZERQSTD
DD5F 2605      6271:         BNE      DSKFCREATE3       B/ YES, USE SPECIFIED FILE SIZE
               6272:         ;LDX    FILESIZERQSTD+2
DD61 FECECF    6273:         LDX     FILESIZERQSTD+2
DD64 271E      6274:         BEQ      DSKFCREATEMIN     B/ NO, USE MINIMUM ALLOCATION
  DD66         6275: DSKFCREATE3       EQU     *
               6276:         ;LDX    IOCBPOINTER       COPY FILESIZE DESIRED...
DD66 FECE09    6277:         LDX     IOCBPOINTER
               6278:         ;LDD    FILESIZERQSTD   TO IOCB:CURBYTE SO WE CAN USE COMPUTERDCN...
DD69 F6CECE    6279:         LDAB      FILESIZERQSTD+1




ASM/6800 1.4A0: DD6C SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 209; Form 1     DISK FILE/DEVICE DRIVER
SDOS11G.ASM
DD6C B6CECD    6280:         LDAA      FILESIZERQSTD
               6281:         ;STD    IOCB:CURBYTE,X      TO DETERMINE HOW MANY CLUSTERS TO ALLOCATE
DD6F E70E      6282:         STAB      (IOCB:CURBYTE)+1,X
DD71 A70D      6283:         STAA      IOCB:CURBYTE,X
               6284: *** NOTE: THIS CAN ACTUALLY ALLOCATE 1 CLUSTER TOO MANY, SINCE...
               6285: *       COMPUTERDCN COMPUTES CLUSTER # THAT CONTAINS THE SPECIFIED BYTE!
               6286: *       TO BE EXACT, NEED TO SUBTRACT 1 FROM "CURBYTE"
               6287: *       BUT THATS OK, SINCE CLOSE WILL FREE THE EXTRA CLUSTER
               6288:         ;LDD    FILESIZERQSTD+2
DD73 F6CED0    6289:         LDAB      FILESIZERQSTD+2+1
DD76 B6CECF    6290:         LDAA      FILESIZERQSTD+2
               6291:         ;STD    IOCB:CURBYTE+2,X
DD79 E710      6292:         STAB      (IOCB:CURBYTE+2)+1,X
DD7B A70F      6293:         STAA      IOCB:CURBYTE+2,X
               6294:         ;JSR    COMPUTERDCN       COMPUTE # DATA CLUSTERS NEEDED
DD7D BDF706    6295:         JSR     COMPUTERDCN
DD80 251B      6296:         BCS       DSKFCREATEOOPS    B/ SOME ERROR OCCURRED!
DD82 2006      6297:         BRA       DSKFCREATEALLOC     GO ALLOCATE THE DISK SPACE




ASM/6800 1.4A0: DD82 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 210; Form 1     DISK FILE/DEVICE DRIVER
SDOS11G.ASM
  DD84         6299: DSKFCREATEMIN     ; USE MINIMUM ALLOCATION
               6300:         ;LDX    DCBPOINTER        WE NEED THIS, SO WE CAN...
DD84 DE06      6301:         LDX     DCBPOINTER
               6302:         ;LDD    DSKINFO:MINALLOC,X        USE MIN ALLOCATION FOR FILE CREATES
DD86 E613      6303:         LDAB      (DSKINFO:MINALLOC)+1,X
DD88 A612      6304:         LDAA      DSKINFO:MINALLOC,X
  DD8A         6305: DSKFCREATEALLOC     ; ALLOCATE SPACE TO A NEW FILE
               6306:         ;JSR    ALLOCATECLUSTERS    GO INVENT NEW FILE HEADER CLUSTER
DD8A BDED1B    6307:         JSR     ALLOCATECLUSTERS
DD8D 2502      6308:         BCS       DSKFCREATEE       B/ RAN OUT OF DISK SPACE
  DD8F         6309: DSKFCREATE2       EQU     *
DD8F 2036      6310:         BRA       DSKFOPEN1       RESET THE IOCB TO MAKE SURE RDCN=DUMMY
               6311: 
  DD91         6312: DSKFCREATEE       ; RAN OUT OF DISK SPACE WHILE ALLOCATING FILE
DD91 8C03F7    6313:         CPX      #ERR:NODISKSPACE  DOUBLE-CHECK, MIGHT BE SOMETHING ELSE
DD94 2607      6314:         BNE      DSKFCREATEOOPS    IT WAS SOMETHING ELSE, CLOSE UP SHOP!
               6315:         ;LDX    FCBPOINTER        RAN OUT OF SPACE ALRIGHT!
DD96 FECEA6    6316:         LDX     FCBPOINTER
               6317:         ;LDX    FCB:NCLUSTERS,X    WAS HEADER CLUSTER ALLOCATED?
DD99 EE0F      6318:         LDX     FCB:NCLUSTERS,X
DD9B 26F2      6319:         BNE      DSKFCREATE2       B/ YES, TREAT LIKE NORMAL FILE CREATE
  DD9D         6320: DSKFCREATEOOPS    ; DIDN'T CREATE FILE, OR SOME OTHER PROBLEM
               6321:         ;LDX    FCBPOINTER        FREE THE FCB, ITS NOT VALID ANYWAY
DD9D FECEA6    6322:         LDX     FCBPOINTER
               6323:         ;CLR     FCB:REFCOUNT,X
DDA0 6F0B      6324:         CLR      FCB:REFCOUNT,X
               6325:         ;JMP    ERRORED AND TRAP UPWARDS
DDA2 7ED20A    6326:         JMP     ERRORED




ASM/6800 1.4A0: DDA2 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 211; Form 1     DISK FILE/DEVICE DRIVER
SDOS11G.ASM
               6328: *
               6329: *       DSKFOPEN -- OPEN A DISK FILE
               6330: *       ON ENTRY DCBPOINTER HAS BEEN SET UP
               6331: *
  DDA5         6332: DSKFOPEN        EQU     *
               6333:         ;JSR    PLANTDCBINIOCB       SO DISK I/O ROUTINES CAN FIND DRIVERS
DDA5 BDD43F    6334:         JSR     PLANTDCBINIOCB
               6335:         ;JSR    PARSEFILENAME     GO PROCESS THE DISK FILE NAME
DDA8 BDEBBB    6336:         JSR     PARSEFILENAME
               6337:         ;JSR    SEARCHDIR GO LOOK IT UP IN DIRECTORY
DDAB BDE67F    6338:         JSR     SEARCHDIR
DDAE A612      6339:         LDAA      DIR:HCSIC,X       DOES FILE EXIST ?
DDB0 2767      6340:         BEQ      ERRFILENOTFNDJ  B/ NOPE
               6341:         ;JSR    SEARCHFCBINIT       SET UP TO SEARCH FCBS
DDB2 BDEB50    6342:         JSR     SEARCHFCBINIT
  DDB5         6343: DSKFOPENL       EQU     *
               6344:         ;JSR    SEARCHFCBS  SEE IF FILE ALREADY OPENED
DDB5 BDEB60    6345:         JSR     SEARCHFCBS
DDB8 250A      6346:         BCS       DSKFOPEN0       NO FCB SET UP FOR FILE
DDBA A60A      6347:         LDAA      FCB:FLAGS,X        IS THE FCB FOR A NEW FILE ?
DDBC 8580      6348:         BITA      #FCBFLG::NEWFILE  ...?
DDBE 26F5      6349:         BNE      DSKFOPENL       B/ YES, TREAT AS IF FCB DIDN'T EXIST
               6350:         ;INC     FCB:REFCOUNT,X     NO, FCB IS ALREADY SET UP FOR FILE
DDC0 6C0B      6351:         INC      FCB:REFCOUNT,X
DDC2 2003      6352:         BRA       DSKFOPEN1       PLACE HOLD ON FCB AND GO OPEN




ASM/6800 1.4A0: DDC2 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 212; Form 1     DISK FILE/DEVICE DRIVER
SDOS11G.ASM
  DDC4         6354: DSKFOPEN0       ; NO FCB EXISTS FOR FILE YET
               6355:         ;JSR    FINDFREEFCB       OOPS, NO FCB FOR THIS FILE YET
DDC4 BDEACA    6356:         JSR     FINDFREEFCB
  DDC7         6357: DSKFOPEN1       ; ENTRY POINT FOR DSKFOPENERRORFILE
               6358:         ;LDX    IOCBPOINTER       NOW FILL IN THE IOCB
DDC7 FECE09    6359:         LDX     IOCBPOINTER
               6360:         ;LDD    FCBPOINTER        REMEMBER THE FCB ADDRESS
DDCA F6CEA7    6361:         LDAB      FCBPOINTER+1
DDCD B6CEA6    6362:         LDAA      FCBPOINTER
               6363:         ;STD    IOCB:FCB,X
DDD0 E708      6364:         STAB      (IOCB:FCB)+1,X
DDD2 A707      6365:         STAA      IOCB:FCB,X
               6366:         ;CLR     IOCB:CURBYTE,X      ASSUME WE WILL START ...
DDD4 6F0D      6367:         CLR      IOCB:CURBYTE,X
               6368:         ;CLR     IOCB:CURBYTE+1,X    AT BYTE ZERO OF THE FILE
DDD6 6F0E      6369:         CLR      IOCB:CURBYTE+1,X
               6370:         ;CLR     IOCB:CURBYTE+2,X
DDD8 6F0F      6371:         CLR      IOCB:CURBYTE+2,X
               6372:         ;CLR     IOCB:CURBYTE+3,X
DDDA 6F10      6373:         CLR      IOCB:CURBYTE+3,X
               6374:         ;CLR     IOCB:LOCATEDF,X     MARK "LOCATE OPERATION NEEDED"
DDDC 6F11      6375:         CLR      IOCB:LOCATEDF,X
               6376:         ;LDD    #DUMMYLCN        SET "LAST EXAMINED DATA CLUSTER"...
DDDE C6FF      6377:         LDAB      #(DUMMYLCN)&$FF
DDE0 86FF      6378:         LDAA      #(DUMMYLCN)/256
               6379:         ;STD    IOCB:RDCN,X
DDE2 E71C      6380:         STAB      (IOCB:RDCN)+1,X
DDE4 A71B      6381:         STAA      IOCB:RDCN,X
               6382:         ;CLR     IOCB:DRDSI,X      MARK RDSI POINTERS AS "MUST BE READ"
DDE6 6F12      6383:         CLR      IOCB:DRDSI,X
               6384:         ;CLR     IOCB:DRDSI+1,X
DDE8 6F13      6385:         CLR      IOCB:DRDSI+1,X
               6386:         ;CLR     IOCB:HRDSI,X
DDEA 6F1F      6387:         CLR      IOCB:HRDSI,X
               6388:         ;CLR     IOCB:HRDSI+1,X
DDEC 6F20      6389:         CLR      IOCB:HRDSI+1,X
DDEE 86FF      6390:         LDAA      #-1     SET HRSN = "NONE"
DDF0 A721      6391:         STAA      IOCB:HRSN,X
               6392:         ;CLR     IOCB:COLCNT,X       START OUT ON COLUMN 0
DDF2 6F0C      6393:         CLR      IOCB:COLCNT,X




ASM/6800 1.4A0: DDF2 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 213; Form 1     DISK FILE/DEVICE DRIVER
SDOS11G.ASM
               6394:         ;JSR    DSKFEOFTEST     AFTER ALL, THE FILE MIGHT BE (SIGH!) EMPTY!
DDF4 BDE309    6395:         JSR     DSKFEOFTEST
DDF7 2500      6396:         BCS       *+2     IGNORE EOF HIT ERROR
               6397:         ;LDX    IOCBPOINTER       BECUZ EOF TEST BOMBS (X)!
DDF9 FECE09    6398:         LDX     IOCBPOINTER
DDFC 0C39      6399:         OKRTS
               6400: *
               6401: *       DSKFOPENSYSIOCB -- SET UP SYSIOCB AS THOUGH "OPEN" WAS CALLED
               6402: *
  DDFE         6403: DSKFOPENSYSIOCB   EQU     *
               6404:         ;LDX    #SYSIOCB  SET UP IOCBPOINTER
DDFE CECF57    6405:         LDX     #SYSIOCB
DE01 FFCE09    6406:         STX     IOCBPOINTER
               6407:         ;LDX    DCBPOINTER        POKE DCB ADDRESS INTO IOCB
DE04 DE06      6408:         LDX     DCBPOINTER
DE06 FFCF57    6409:         STX     SYSIOCB+IOCB:DCB
               6410:         ;LDX    #DISKFILEDRIVER SET UP FILE DRIVER
DE09 CEDCB6    6411:         LDX     #DISKFILEDRIVER
DE0C FFCF60    6412:         STX     SYSIOCB+IOCB:DRIVER
DE0F 20B6      6413:         BRA       DSKFOPEN1       GO SET UP REST OF IOCB FOR FILE I/O




ASM/6800 1.4A0: DE0F SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 214; Form 1     DISK FILE/DEVICE DRIVER
SDOS11G.ASM
               6415: *
               6416: *       DSKFDELETE -- DELETE A DISK FILE
               6417: *
  DE11         6418: DSKFDELETE      EQU     *
               6419:         ;JSR    PARSEFILENAME     GO PROCESS THE DISK FILE NAME
DE11 BDEBBB    6420:         JSR     PARSEFILENAME
               6421:         ;JSR    SEARCHDIR GO LOOK IT UP IN DIRECTORY
DE14 BDE67F    6422:         JSR     SEARCHDIR
DE17 A612      6423:         LDAA      DIR:HCSIC,X       IS THIS DIRECTORY SLOT BUSY ?
  DE19         6424: ERRFILENOTFNDJ  EQU     *
DE19 2750      6425:         BEQ      ERRFILENOTFOUND B/ NO, NO FILE TO DELETE !
               6426:         ;JSR    SEARCHFCBINIT       SET UP TO SEARCH FCBS
DE1B BDEB50    6427:         JSR     SEARCHFCBINIT
  DE1E         6428: DSKFDELETEL     EQU     *
               6429:         ;JSR    SEARCHFCBS  IS THE FILE ALREADY OPENED?
DE1E BDEB60    6430:         JSR     SEARCHFCBS
DE21 251A      6431:         BCS       DSKFDELETE1     B/ NO, MUST SET UP FCB TO DELETE
DE23 A60A      6432:         LDAA      FCB:FLAGS,X        A NEWLY CREATED FILE?
DE25 8580      6433:         BITA      #FCBFLG::NEWFILE  ...?
DE27 26F5      6434:         BNE      DSKFDELETEL     B/ YES, IGNORE THIS FCB
DE29 E615      6435:         LDAB      FCB:PROT,X        SINCE FILE IS OPEN...
DE2B C540      6436:         BITB      #PROT::WRITE    FCB IS MORE UP-TO-DATE THAN DIRECTORY
DE2D 2639      6437:         BNE      ERRFILEWRTPROTJ B/ FILE HAS BEEN WRITE PROTECTED
DE2F 8A20      6438:         ORAA      #FCBFLG::DELETED  NEITHER ONE, FORCE DELETION OF FILE ...
DE31 A70A      6439:         STAA      FCB:FLAGS,X        WHEN IT IS CLOSED
  DE33         6440: DSKFDELETEDE    ; DELETE DIRECTORY ENTRY
               6441:         ;JSR    LOCATEDIRENTRY    ZAP THE DIRECTORY ENTRY NOW!
DE33 BDE9B5    6442:         JSR     LOCATEDIRENTRY
               6443:         ;CLR     DIR:HCSIC,X       SO FILE NO LONGER APPEARS TO EXIST
DE36 6F12      6444:         CLR      DIR:HCSIC,X
               6445:         ;JSR    MARKMODIFIED     MARK DIRECTORY SECTOR AS MODIFIED
DE38 BDDF7E    6446:         JSR     MARKMODIFIED
DE3B 0C39      6447:         OKRTS




ASM/6800 1.4A0: DE3B SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 215; Form 1     DISK FILE/DEVICE DRIVER
SDOS11G.ASM
  DE3D         6449: DSKFDELETE1     ; MUST SET UP FCB TO DELETE FILE
               6450:         ;LDX    DIRENTRY
DE3D FECEA8    6451:         LDX     DIRENTRY
DE40 A619      6452:         LDAA      DIR:PROTECTION,X IS FILE WRITE PROTECTED?
DE42 8540      6453:         BITA      #PROT::WRITE
DE44 2622      6454:         BNE      ERRFILEWRTPROTJ B/ YES, CAN'T DELETE
               6455:         ;JSR    FINDFREEFCB       INVENT AN FCB FOR THIS STUNT
DE46 BDEACA    6456:         JSR     FINDFREEFCB
  DE49         6457: DSKFDELETEFCB     ; DELETE FILE REPRESENTED BY FCB POINTER
DE49 8DE8      6458:         BSR      DSKFDELETEDE    DELETE THE DIRECTORY ENTRY
  DE4B         6459: DSKFDELETESYSIOCB ; DELETE FILE USING SYSTEM IOCB
DE4B 8DB1      6460:         BSR      DSKFOPENSYSIOCB   SET UP USING SYSIOCB
  DE4D         6461: DSKFDELETEIOCBFCB ; DELETE FILE REPRESENTED BY IOCBPOINTER AND FCBPOINTER
               6462:         ;LDX    IOCBPOINTER       (DIRENTRY ALREADY DELETED)
DE4D FECE09    6463:         LDX     IOCBPOINTER
               6464:         ;CLR     IOCB:RDCN,X        MARK ZEROTH CLUSTER AS START POINT OF DELETE
DE50 6F1B      6465:         CLR      IOCB:RDCN,X
               6466:         ;CLR     IOCB:RDCN+1,X
DE52 6F1C      6467:         CLR      IOCB:RDCN+1,X
               6468:         ;LDX    FCBPOINTER        DELETE ALL THE CLUSTERS ...
DE54 FECEA6    6469:         LDX     FCBPOINTER
               6470:         ;CLR     FCB:REFCOUNT,X     LET GO OF THIS FCB
DE57 6F0B      6471:         CLR      FCB:REFCOUNT,X
               6472:         ;LDD    FCB:NCLUSTERS,X
DE59 E610      6473:         LDAB      (FCB:NCLUSTERS)+1,X
DE5B A60F      6474:         LDAA      FCB:NCLUSTERS,X
               6475:         ;JSR    FREECLUSTERS
DE5D BDEEFF    6476:         JSR     FREECLUSTERS
               6477:         ;LDX    #0      MARK SYSIOCB...
DE60 CE0000    6478:         LDX     #0
DE63 FFCF60    6479:         STX     SYSIOCB+IOCB:DRIVER AS CLOSED
DE66 0C39      6480:         OKRTS
               6481: 
  DE68         6482: ERRFILEWRTPROTJ
               6483:         ;JMP    ERRFILEWRTPROT
DE68 7EDD09    6484:         JMP     ERRFILEWRTPROT
               6485: 
  DE6B         6486: ERRFILENOTFOUND EQU     *
               6487:         ;JSR    ERRET
DE6B BDD1F7    6488:         JSR     ERRET




ASM/6800 1.4A0: DE6E SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 216; Form 1     DISK FILE/DEVICE DRIVER
SDOS11G.ASM
DE6E 03F3      6489:         FDB      ERR:FILENOTFOUND




ASM/6800 1.4A0: DE6E SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 217; Form 1     DISK FILE/DEVICE DRIVER
SDOS11G.ASM
               6491: *
               6492: *       DSKFCLOSE -- CLOSE A DISK FILE
               6493: *
  DE70         6494: DSKFCLOSE        EQU     *
               6495:         ;JSR    GETFCBFROMIOCB      SET UP FCBPOINTER
DE70 BDE11E    6496:         JSR     GETFCBFROMIOCB
               6497:         ;LDX    FCBPOINTER        IS FILE OPEN ON MORE THAN ONE CHANNEL ?
DE73 FECEA6    6498:         LDX     FCBPOINTER
               6499:         ;DEC     FCB:REFCOUNT,X     IF SOME OTHER CHANNEL HAS THIS FILE OPEN ...
DE76 6A0B      6500:         DEC      FCB:REFCOUNT,X
DE78 264C      6501:         BNE      DSKFCLOSEOKRTS   WE'LL LET HIM DO THE CLEANUP WHEN HE CLOSES
DE7A A60A      6502:         LDAA      FCB:FLAGS,X        HAS THIS FILE BEEN DELETED FROM DIRECTORY?
DE7C 8520      6503:         BITA      #FCBFLG::DELETED
DE7E 26CD      6504:         BNE      DSKFDELETEIOCBFCB   B/ YES, LET'S DELETE IT!
DE80 8510      6505:         BITA      #FCBFLG::MODIFIED HAS FILE BEEN MODIFIED ?
DE82 2715      6506:         BEQ      DSKFCLOSE1       B/ NO, DON'T TRUNCATE!
               6507: *
               6508: *       NOW SHORTEN UP THE FILE (CHOP OFF ALL DATA CLUSTERS PAST EOF)
               6509: *
               6510:         ;JSR    DSKFPOSITIONTOEND       POSITION TO END OF FILE
DE84 BDE2D0    6511:         JSR     DSKFPOSITIONTOEND
               6512:         ;JSR    COMPUTERDCN       FIND RELATIVE DATA CLUSTER OF EOF
DE87 BDF706    6513:         JSR     COMPUTERDCN
DE8A 250D      6514:         BCS       DSKFCLOSE1       B/ OFF END OF HEADER CLUSTER, NOTHING TO DEALLOCATE
               6515:         ;ADDD    #1      ROUND UP TO NEXT DATA CLUSTER
DE8C CB01      6516:         ADDB      #(1)&$FF
DE8E 8900      6517:         ADCA       #(1)/256
               6518:         ;STD    IOCB:RDCN,X        AND START DELETING THERE
DE90 E71C      6519:         STAB      (IOCB:RDCN)+1,X
DE92 A71B      6520:         STAA      IOCB:RDCN,X
DE94 4F        6521:         CLRA              (D):=0 --> DELETE TILL END OF HEADER CLUSTER
DE95 5F        6522:         CLRB
               6523:         ;JSR    FREECLUSTERS     GO CHOP OFF THE FILE
DE96 BDEEFF    6524:         JSR     FREECLUSTERS
  DE99         6525: DSKFCLOSE1
               6526:         ;LDX    FCBPOINTER        FILE HAS BEEN SHORTENED TO MATCH FILESIZE
DE99 FECEA6    6527:         LDX     FCBPOINTER
               6528:         ;LDA     FCB:FLAGS,X        LOOK AT THE FLAGS AGAIN
DE9C A60A      6529:         LDAA      FCB:FLAGS,X
DE9E 8580      6530:         BITA      #FCBFLG::NEWFILE  A NEW FILE?




ASM/6800 1.4A0: DEA0 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 218; Form 1     DISK FILE/DEVICE DRIVER
SDOS11G.ASM
DEA0 2721      6531:         BEQ      DSKFCLOSEOLD     B/ NO
DEA2 8A40      6532:         ORAA      #FCBFLG::UPDATEDIR CHANGE FILE STATUS
DEA4 A70A      6533:         STAA      FCB:FLAGS,X        SO DIRECTORY WILL GET UPDATED
               6534:         ;JSR    LOCATEDIRENTRY    GO GET THE DIRECTORY ENTRY
DEA6 BDE9B5    6535:         JSR     LOCATEDIRENTRY
DEA9 A612      6536:         LDAA      DIR:HCSIC,X       IS THERE AN OLD FILE HERE?
DEAB 2716      6537:         BEQ      DSKFCLOSEOLD     B/ NO, TREAT LIKE UPDATE DIRECTORY
               6538: *
               6539: *       MUST DELETE OLD VERSION OF FILE
               6540: *
               6541:         ;JSR    SEARCHFCBINIT       IS OLD FILE OPEN ON SOME CHANNEL?
DEAD BDEB50    6542:         JSR     SEARCHFCBINIT
               6543:         ;JSR    SEARCHFCBS  SEE IF ANOTHER FCB MATCHES
DEB0 BDEB60    6544:         JSR     SEARCHFCBS
DEB3 2513      6545:         BCS       DSKFCLOSEDOLD1   B/ NO, JUST DELETE IT
DEB5 A60A      6546:         LDAA      FCB:FLAGS,X        MARK FCB OF OLD FILE...
DEB7 8A20      6547:         ORAA      #FCBFLG::DELETED  AS 'DELETED'
DEB9 A70A      6548:         STAA      FCB:FLAGS,X        SO OLD FILE WILL GO AWAY ...
               6549:         ;LDX    IOCBPOINTER       WHEN IT IS CLOSED
DEBB FECE09    6550:         LDX     IOCBPOINTER
               6551:         ;LDX    IOCB:FCB,X  GET THE FCB OF THE NEW FILE BACK
DEBE EE07      6552:         LDX     IOCB:FCB,X
DEC0 FFCEA6    6553:         STX     FCBPOINTER
  DEC3         6554: DSKFCLOSEOLD     ; OLD FILE TO BE CLOSED
               6555:         ;JSR    UPDATEDIRFROMFCB   GO UPDATE THE DIRECTORY IF NEEDED
DEC3 BDE9ED    6556:         JSR     UPDATEDIRFROMFCB
  DEC6         6557: DSKFCLOSEOKRTS   EQU     *
DEC6 0C39      6558:         OKRTS




ASM/6800 1.4A0: DEC6 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 219; Form 1     DISK FILE/DEVICE DRIVER
SDOS11G.ASM
  DEC8         6560: DSKFCLOSEDOLD1   ; OLD VERSION OF FILE IS NOT OPEN
               6561:         ;LDX    IOCBPOINTER       DAMN! MARK THIS FCB AS BUSY AGAIN
DEC8 FECE09    6562:         LDX     IOCBPOINTER
               6563:         ;LDX    IOCB:FCB,X
DECB EE07      6564:         LDX     IOCB:FCB,X
               6565:         ;INC     FCB:REFCOUNT,X     (SET REFCOUNT TO 1)
DECD 6C0B      6566:         INC      FCB:REFCOUNT,X
               6567:         ;JSR    FINDFREEFCB       COPY OLD FILE INFORMATION
DECF BDEACA    6568:         JSR     FINDFREEFCB
DED2 FFCF10    6569:         STX     SYSFCBPOINTER     AND REMEMBER WHERE WE PUT IT
               6570:         ;LDX    IOCBPOINTER       RESTORE FCBPOINTER TO NEW FILE
DED5 FECE09    6571:         LDX     IOCBPOINTER
               6572:         ;LDX    IOCB:FCB,X
DED8 EE07      6573:         LDX     IOCB:FCB,X
               6574:         ;CLR     FCB:REFCOUNT,X     NOW LET GO OF NEW FCB AGAIN
DEDA 6F0B      6575:         CLR      FCB:REFCOUNT,X
DEDC FFCEA6    6576:         STX     FCBPOINTER        SINCE SETUPFCB STOMPED ON FCBPOINTER
               6577:         ;JSR    UPDATEDIRFROMFCB   TO RECORD NEW FILE
DEDF BDE9ED    6578:         JSR     UPDATEDIRFROMFCB
               6579:         ;LDX    SYSFCBPOINTER     SET UP FCBPOINTER...
DEE2 FECF10    6580:         LDX     SYSFCBPOINTER
DEE5 FFCEA6    6581:         STX     FCBPOINTER        TO SELECT OLD FILE TO BE DELETED
               6582:         ;JMP    DSKFDELETEIOCBFCB   NOW GO DELETE FILE REPRESENTED BY FCBPOINTER
DEE8 7EDE4D    6583:         JMP     DSKFDELETEIOCBFCB




ASM/6800 1.4A0: DEE8 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 220; Form 1     DISK FILE/DEVICE DRIVER
SDOS11G.ASM
               6585: *
               6586: *       DSKFRENAME -- RENAME A DISK FILE
               6587: *
  DEEB         6588: DSKFRENAME       EQU     *
               6589:         ;JSR    GETFCBFROMIOCB      GET FCB ADDRESS
DEEB BDE11E    6590:         JSR     GETFCBFROMIOCB
               6591:         ;JSR    PARSEFILENAME     GO PROCESS THE DISK FILE NAME
DEEE BDEBBB    6592:         JSR     PARSEFILENAME
               6593:         ;LDA     CODE+SDOS:DAY     IS TIME SET ?
DEF1 B6CE0E    6594:         LDAA      CODE+SDOS:DAY
               6595:         ;LBEQ    ERRTIMENOTSET   B/ NO, CAN'T RENAME THE FILE!
DEF4 2603      6596:         BNE      MACRO:0012
DEF6 7EDD34    6597:         JMP     ERRTIMENOTSET
  DEF9         6598: MACRO:0012
               6599:         ;LDX    FCBPOINTER        MAKE SURE WE CAN RENAME THE FILE
DEF9 FECEA6    6600:         LDX     FCBPOINTER
DEFC A615      6601:         LDAA      FCB:PROT,X        GET PROTECTION BITS
DEFE 8540      6602:         BITA      #PROT::WRITE    WRITE PROTECTED ?
               6603:         ;LBNE    ERRFILEWRTPROT  B/ YES, CAN'T RENAME!
DF00 2703      6604:         BEQ      MACRO:0013
DF02 7EDD09    6605:         JMP     ERRFILEWRTPROT
  DF05         6606: MACRO:0013
DF05 A60A      6607:         LDAA      FCB:FLAGS,X        IS THE FILE ALREADY DELETED ?
DF07 8520      6608:         BITA      #FCBFLG::DELETED  ...?
DF09 2624      6609:         BNE      ERRFILEALREADYDELETED     B/ YES, CAN'T RENAME IT!
               6610:         ;JSR    LOCATEDIRENTRY    PULL IN THE DIRECTORY ENTRY FROM THE DISK
DF0B BDE9B5    6611:         JSR     LOCATEDIRENTRY
               6612:         ;JSR    SEARCHFCBINIT       YES, GO SEE IF ITS BEING CREATED
DF0E BDEB50    6613:         JSR     SEARCHFCBINIT
  DF11         6614: DSKFRENAMEL      EQU     *
               6615:         ;JSR    SEARCHFCBS  LOOK FOR AN FCB USING THIS DIRECTORY SLOT
DF11 BDEB60    6616:         JSR     SEARCHFCBS
DF14 251E      6617:         BCS       DSKFRENAME1      B/ NO, LOOKS GOOD SO FAR
DF16 A60A      6618:         LDAA      FCB:FLAGS,X        RATS, MUST BE AT LEAST ONE: LOOK AT OPEN FILE
DF18 8580      6619:         BITA      #FCBFLG::NEWFILE  IS IT A NEW FILE?
DF1A 27F5      6620:         BEQ      DSKFRENAMEL      B/ NO, IGNORE THIS FCB
               6621:         ;JMP    ERRFILEINCREATE
DF1C 7EDCF7    6622:         JMP     ERRFILEINCREATE
               6623: 
  DF1F         6624: DSKFRENAMEERR1   ; DESIRED NAME IS IN USE




ASM/6800 1.4A0: DF1C SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 221; Form 1     DISK FILE/DEVICE DRIVER
SDOS11G.ASM
               6625:         ;JSR    GETFCBFROMIOCB      PUT OLD DIRECTORY ENTRY BACK LIKE IT WAS
DF1F BDE11E    6626:         JSR     GETFCBFROMIOCB
               6627:         ;LDX    FCBPOINTER        AND THEN GO COMPLAIN!
DF22 FECEA6    6628:         LDX     FCBPOINTER
               6629:         ;DEC     FCB:DIRDISP+1,X   MAKE DIRENTRY DISPLACEMENT VALID ONCE AGAIN
DF25 6A06      6630:         DEC      FCB:DIRDISP+1,X
               6631:         ;JSR    LOCUPDATEDIRENTRY GO LOCATE DIR ENTRY AND UPDATE IT
DF27 BDE9FA    6632:         JSR     LOCUPDATEDIRENTRY
  DF2A         6633: ERRNEWFILEEXISTS        EQU     *
               6634:         ;JSR    ERRET
DF2A BDD1F7    6635:         JSR     ERRET
DF2D 03F6      6636:         FDB      ERR:NEWFILEEXISTS
               6637: 
  DF2F         6638: ERRFILEALREADYDELETED     EQU     *
               6639:         ;JSR    ERRET
DF2F BDD1F7    6640:         JSR     ERRET
DF32 042C      6641:         FDB      ERR:FILEALREADYDELETED




ASM/6800 1.4A0: DF32 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 222; Form 1     DISK FILE/DEVICE DRIVER
SDOS11G.ASM
  DF34         6643: DSKFRENAME1      ; NO PROBLEM WITH FILE TO BE RENAMED
               6644:         ;JSR    GETFCBFROMIOCB      SET FCBPOINTER BACK TO FCB BEING RENAMED
DF34 BDE11E    6645:         JSR     GETFCBFROMIOCB
               6646:         ;LDX    FCBPOINTER        MAKE SURE THIS FCB DOESN'T MATCH ANY DIRECTORY SLOT
DF37 FECEA6    6647:         LDX     FCBPOINTER
               6648:         ;INC     FCB:DIRDISP+1,X   BY MAKING DIRENTRY DISPLACEMENT INVALID
DF3A 6C06      6649:         INC      FCB:DIRDISP+1,X
               6650:         ;LDX    DIRENTRY        LET GO OF THIS DIRECTORY ENTRY
DF3C FECEA8    6651:         LDX     DIRENTRY
               6652:         ;CLR     DIR:HCSIC,X       (IN CASE DIRECTORY IS FULL)
DF3F 6F12      6653:         CLR      DIR:HCSIC,X
               6654:         ;JSR    MARKMODIFIED     (ALSO PREVENTS SEARCHDIRCREATE FROM GIVING...)
DF41 BDDF7E    6655:         JSR     MARKMODIFIED
               6656:         ;LDX    #FILENAMEBUF      (US THE SAME SLOT BACK, THEREBY REHASHING)
DF44 CECEBA    6657:         LDX     #FILENAMEBUF
               6658:         ;JSR    SEARCHDIRCREATE     GO LOOK FOR FREE DIRECTORY SLOT
DF47 BDE937    6659:         JSR     SEARCHDIRCREATE
               6660: *       NO ERROR CHECK NEEDED, BECAUSE FREE DIRECTORY SLOT IS KNOWN TO BE AVAILABLE
DF4A A612      6661:         LDAA      DIR:HCSIC,X       IS DIRECTORY ENTRY BUSY?
DF4C 26D1      6662:         BNE      DSKFRENAMEERR1   B/ YES, CAN'T RENAME TO THIS FILE
               6663:         ;JSR    SEARCHFCBINIT       SET UP TO SEARCH FCBS
DF4E BDEB50    6664:         JSR     SEARCHFCBINIT
               6665:         ;JSR    SEARCHFCBS  DOES MATCHING FCB EXIST?
DF51 BDEB60    6666:         JSR     SEARCHFCBS
DF54 250A      6667:         BCS       DSKFRENAME2      B/ NOBODY USING THIS SLOT
               6668:         ;LDX    IOCBPOINTER       IS THIS SLOT IN USE...
DF56 FECE09    6669:         LDX     IOCBPOINTER
               6670:         ;LDX    IOCB:FCB,X  BY FILE BEING RENAMED ?
DF59 EE07      6671:         LDX     IOCB:FCB,X
DF5B BCCEA6    6672:         CPX      FCBPOINTER        ...?
DF5E 26BF      6673:         BNE      DSKFRENAMEERR1   B/ NO, NEW NAME IS OCCUPIED!
  DF60         6674: DSKFRENAME2      EQU     *
               6675:         ;JSR    GETFCBFROMIOCB      RESET FCB POINTER SINCE SEARCHFCBS BOMBED IT!
DF60 BDE11E    6676:         JSR     GETFCBFROMIOCB
               6677:         ;JSR    UPDATEFILEDATE    MAKE SURE DATE IS MODIFIED (ASSERT: NO ERROR POSSIBL
DF63 BDDD0E    6678:         JSR     UPDATEFILEDATE
               6679:         ;JSR    SETUPFCBDIRPOS    GO COPY DIRECTORY ENTRY DATA INTO FCB
DF66 BDEB2F    6680:         JSR     SETUPFCBDIRPOS
               6681:         ;LDX    DIRENTRY        SET UP (X) PROPERLY...
DF69 FECEA8    6682:         LDX     DIRENTRY




ASM/6800 1.4A0: DF69 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 223; Form 1     DISK FILE/DEVICE DRIVER
SDOS11G.ASM
               6683:         ;JSR    UPDATEDIRENTRY   TO SAVE CRITICAL FILE DATA
DF6C BDE9FC    6684:         JSR     UPDATEDIRENTRY
               6685: *       JSR     COPYNAMETODIR     SET UP NEW NAME IN DIRENTRY
               6686: *       OKRTS




ASM/6800 1.4A0: DF6C SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 224; Form 1     DISK FILE/DEVICE DRIVER
SDOS11G.ASM
               6688: *
               6689: *       COPYNAMETODIR -- COPY "FILENAME" TO DIRENTRY
               6690: *               MARKS RDSI AS MODIFIED
               6691: *
  DF6F         6692: COPYNAMETODIR     EQU     *
  0001         6693:         IF      M6800!M6801
               6694:         ;LDX    DIRENTRY        SET UP TARGET POINTER
DF6F FECEA8    6695:         LDX     DIRENTRY
DF72 DF00      6696:         STX     TOPOINTER
  0001         6697:         ELSE    (M6809)
 *S*           6698:         LDY     DIRENTRY
               6699:         FIN
               6700:         ;LDX    #FILENAMEBUF      GET SOURCE POINTER
DF74 CECEBA    6701:         LDX     #FILENAMEBUF
               6702:         ;LDD    #DIR:NAMESIZE    AND # BYTES TO COPY
DF77 C610      6703:         LDAB      #(DIR:NAMESIZE)&$FF
DF79 8600      6704:         LDAA      #(DIR:NAMESIZE)/256
               6705:         ;JSR    BLOCKMOVE
DF7B BDFBD2    6706:         JSR     BLOCKMOVE
               6707: *       JSR     MARKMODIFIED     SO DIRECTORY ENTRY WILL GO BACK TO DISK
               6708: *       RTS
               6709: *
               6710: *       MARKMODIFIED -- MARKS RDSI(RDSIPOINTER) AS MODIFIED
               6711: *
  DF7E         6712: MARKMODIFIED     EQU     *
               6713:         ;LDX    RDSIPOINTER     WHAT CAN I SAY?
DF7E FECEA4    6714:         LDX     RDSIPOINTER
               6715:         ;CLR     RDSI:MODIFIED,X (RESETS CARRY TO MAKE "OKRTS")
DF81 6F0B      6716:         CLR      RDSI:MODIFIED,X
               6717:         ;INC     RDSI:MODIFIED,X
DF83 6C0B      6718:         INC      RDSI:MODIFIED,X
DF85 39        6719:         RTS




ASM/6800 1.4A0: DF85 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 225; Form 1     DISK FILE/DEVICE DRIVER
SDOS11G.ASM
  0000         6721: SWAPPING EQU     0       ******** TAKE NOTE!
  0000         6722:         IF      SWAPPING
 *S*           6723: DSKFREADBOPT      ; TRY TO OPTIMIZE NEXT SECTOR READ
 *S*           6724:         ;JSR    CHECKTRANSFERDONE  COMPUTE REMAINING # BYTES TO MOVE
 *S*           6725:         JSR     CHECKTRANSFERDONE
 *S*           6726:         ;LDX    DCBPOINTER
 *S*           6727:         LDX     DCBPOINTER
 *S*           6728:         ;SUBD    DSKINFO:NBPS,X
 *S*           6729:         SUBB      (DSKINFO:NBPS)+1,X
 *S*           6730:         SBCA       DSKINFO:NBPS,X
 *S*           6731:         BCS       DSKFREADBL1       B/ NO, CAN'T TRANSFER A SECTOR'S WORTH
 *S*           6732:         ;LDX    FCBPOINTER        ARE THERE ENOUGH BYTES LEFT IN THE FILE ?
 *S*           6733:         LDX     FCBPOINTER
 *S*           6734:         ;LDD    FCB:FILESIZE,X    (I.E., IS FCB:FILESIZE - IOCB:CURBYTE >=NBPS ?)
 *S*           6735:         LDAB      (FCB:FILESIZE)+1,X
 *S*           6736:         LDAA      FCB:FILESIZE,X
 *S*           6737:         ;PSHD                   (GET FCB:FILESIZE TO (TOS-1,TOS),(A,B))
 *S*           6738:         PSHB
 *S*           6739:         PSHA
 *S*           6740:         ;LDD    FCB:FILESIZE+2,X
 *S*           6741:         LDAB      (FCB:FILESIZE+2)+1,X
 *S*           6742:         LDAA      FCB:FILESIZE+2,X
 *S*           6743:         ;LDX    FCB:DISKINFO,X    (NOW SUBTRACT DSKINFO:NBPS)
 *S*           6744:         LDX     FCB:DISKINFO,X
 *S*           6745:         ;SUBD    DSKINFO:NBPS,X
 *S*           6746:         SUBB      (DSKINFO:NBPS)+1,X
 *S*           6747:         SBCA       DSKINFO:NBPS,X
 *S*           6748:         BCC        DSKFREADBO1       B/ NO BORROW BIT TO PROPOGATE
 *S*           6749:         TST     1,S     DO DOUBLE PRECISION DECREMENT
 *S*           6750:         BNE      DSKFREADBO2       B/ DON'T HAVE TO DECREMENT UPPER HALF
 *S*           6751:         IF      M6800!M6801
 *S*           6752:         ;DEC     ,X      NOTE: THIS MIGHT GO NEGATIVE!
 *S*           6753:         DEC      0,X
 *S*           6754: DSKFREADBO2       EQU     *
 *S*           6755:         ;DEC     1,X     PROPOGATE THE BORROW
 *S*           6756:         DEC      1,X
 *S*           6757:         ELSE    (M6809)
 *S*           6758:         ;DEC     0,S
 *S*           6759:         TSX
 *S*           6760:         DEC      0,X




ASM/6800 1.4A0: DF85 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 226; Form 1     DISK FILE/DEVICE DRIVER
SDOS11G.ASM
 *S*           6761: DSKFREADBO2
 *S*           6762:         ;DEC     1,S
 *S*           6763:         TSX
 *S*           6764:         DEC      1,X
 *S*           6765:         FIN
 *S*           6766: DSKFREADBO1       EQU     *
 *S*           6767:         ;LDX    IOCBPOINTER       NOW SUBTRACT IOCB:CURBYTE...
 *S*           6768:         LDX     IOCBPOINTER
 *S*           6769:         ;SUBD    IOCB:CURBYTE+2,X    SO WE CAN FIND OUT IF FCB:FILESIZE-IOCB:CURBYTE..
 *S*           6770:         SUBB      (IOCB:CURBYTE+2)+1,X
 *S*           6771:         SBCA       IOCB:CURBYTE+2,X
 *S*           6772:         ;PULD           -DSKINFO:NBPS>=0
 *S*           6773:         PULA
 *S*           6774:         PULB
 *S*           6775:         SBCB       IOCB:CURBYTE+1,X
 *S*           6776:         SBCA       IOCB:CURBYTE,X
 *S*           6777:         BMI      DSKFREADBL1       B/ NOPE, NOT ENOUGH BYTES LEFT IN FILE
 *S*           6778:         BVS      DSKFREADBL1       THOROUGH BASTARD, AREN'T I ?
 *S*           6779: ****NEEDS WORK!!!*****
 *S*           6780:         ;JSR    LOCATESECTOR       SEEMS WE CAN DO OPTIMIZED READ
 *S*           6781:         JSR     LOCATESECTOR
 *S*           6782:         ;JSR    READDIRECT        DO DIRECT READ
 *S*           6783:         JSR     READDIRECT
 *S*           6784: DSKFREADBO3       ; UPDATE IOBLOCK
 *S*           6785:         ;LDX    DCBPOINTER        NOW ADJUST EVERYTHING
 *S*           6786:         LDX     DCBPOINTER
 *S*           6787:         ;LDD    DSKINFO:NBPS,X   ADD NBPS TO ACTUAL COUNT READ
 *S*           6788:         LDAB      (DSKINFO:NBPS)+1,X
 *S*           6789:         LDAA      DSKINFO:NBPS,X
 *S*           6790:         ;LDX    CODE+SDOS:IOBLOCKPTR
 *S*           6791:         LDX     CODE+SDOS:IOBLOCKPTR
 *S*           6792:         ;ADDD    READB:ACTUALCOUNT,X
 *S*           6793:         ADDB      (READB:ACTUALCOUNT)+1,X
 *S*           6794:         ADCA       READB:ACTUALCOUNT,X
 *S*           6795:         ;STD    READB:ACTUALCOUNT,X
 *S*           6796:         STAB      (READB:ACTUALCOUNT)+1,X
 *S*           6797:         STAA      READB:ACTUALCOUNT,X
 *S*           6798:         BRA       DSKFREADBOPT      GO SEE IF WE CAN TRANSFER ANOTHER BLOCK
               6799:         FIN




ASM/6800 1.4A0: DF85 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 227; Form 1     DISK FILE/DEVICE DRIVER
SDOS11G.ASM
               6801: *
               6802: *       DSKFREADB -- DISK FILE READ BINARY
               6803: *
  DF86         6804: DSKFREADB EQU     *
               6805:         ;JSR    DSKFIMPLIEDPOSITION     HANDLE IMPLIED POSITIONING IF GIVEN
DF86 BDE2BA    6806:         JSR     DSKFIMPLIEDPOSITION
               6807:         ;JSR    SETUPFORREAD     COPY BUFFER ADDRESS TO BUFFERPOINTER
DF89 BDE10A    6808:         JSR     SETUPFORREAD
               6809: *                       AND SET UP FCB AND DISKINFO POINTERS
               6810:         ;CLR     IOCB:COLCNT,X       (YOU DID A READ BINARY, YOUR COL COUNT GETS ZAPPE
DF8C 6F0C      6811:         CLR      IOCB:COLCNT,X
  DF8E         6812: DSKFREADBL        ; READ BINARY BYTE LOOP
  0000         6813:         IF      SWAPPING
 *S*           6814:         ;LDX    IOCBPOINTER       BECAUSE AN (EOF) ERROR BOMBS (X)
 *S*           6815:         LDX     IOCBPOINTER
 *S*           6816:         ;LDD    IOCB:CURBYTE+2,X    AT A SECTOR BOUNDARY (I.E., IS CURBYTE MOD NBPS = 
 *S*           6817:         LDAB      (IOCB:CURBYTE+2)+1,X
 *S*           6818:         LDAA      IOCB:CURBYTE+2,X
 *S*           6819:         ;LDX    IOCB:DCB,X  AT SECTOR BOUNDARY ?
 *S*           6820:         LDX     IOCB:DCB,X
 *S*           6821:         BITB      DSKINFO:NBPSM1+1,X       (AND WITH NBPS - 1 FOR QUICK CHECK)
 *S*           6822:         BNE      DSKFREADBL1       B/ NO, READ A BYTE AT A TIME
 *S*           6823:         BITA      DSKINFO:NBPSM1,X ... ?
 *S*           6824:         BEQ      DSKFREADBOPT      B/ YES, MAYBE WE CAN DO A DIRECT READ!
 *S*           6825: DSKFREADBL1       ; MUST READ INTO RDSI BUFFER AND COPY
               6826:         FIN
               6827:         ;JSR    CHECKREADDONE      ALL BYTES REQUESTED COPIED ?
DF8E BDE12A    6828:         JSR     CHECKREADDONE
DF91 270C      6829:         BEQ      DSKFREADBOKRTS    B/ YES, ALL DONE
               6830:         ;JSR    LOCATECURBYTE       LOCATE THE BYTE WE WANT
DF93 BDF2B3    6831:         JSR     LOCATECURBYTE
DF96 8D20      6832:         BSR      DSKREADBCHUNK      GO COPY SOME BYTES TO THE DISK
               6833:         ;JSR    UPDATECURBYTEF     ADJUST CURBYTE
DF98 BDF5BB    6834:         JSR     UPDATECURBYTEF
DF9B 24F1      6835:         BCC        DSKFREADBL        GO SEE IF MORE BYTES TO COPY
DF9D 20EF      6836:         BRA       DSKFREADBL        IGNORE EOF ERROR
               6837: 
  DF9F         6838: DSKFREADBOKRTS    ; READ BINARY COMPLETED SUCCESSFULLY
DF9F 0C39      6839:         OKRTS




ASM/6800 1.4A0: DF9F SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 228; Form 1     DISK FILE/DEVICE DRIVER
SDOS11G.ASM
               6841: *       DSKDREADB -- DISK DEVICE READ BINARY
               6842: *
  DFA1         6843: DSKDREADB EQU     *
               6844:         ;JSR    DSKDIMPLIEDPOSITION     HANDLE IMPLIED POSITIONING IF GIVEN
DFA1 BDE515    6845:         JSR     DSKDIMPLIEDPOSITION
               6846:         ;JSR    SETUPFORREAD     AND SET UP DCBPOINTER
DFA4 BDE10A    6847:         JSR     SETUPFORREAD
  DFA7         6848: DSKDREADBL        EQU     *
               6849:         ;JSR    CHECKREADDONE      SEE IF ANY MORE BYTES TO MOVE TO BUFFER
DFA7 BDE12A    6850:         JSR     CHECKREADDONE
DFAA 27F3      6851:         BEQ      DSKFREADBOKRTS    B/ ALL BYTES COPIED
               6852:         ;JSR    LOCDSKD  NO, SET UP PARAMETERS FOR THE COPY
DFAC BDF5D7    6853:         JSR     LOCDSKD
DFAF 8D07      6854:         BSR      DSKREADBCHUNK      GO COPY THE CHUNK OF BYTES SET UP BY LOCDSKD
               6855:         ;JSR    UPDATECURBYTED     UPDATE POINTERS AND STUFF FOR DISK DEVICE
DFB1 BDF5C8    6856:         JSR     UPDATECURBYTED
DFB4 24F1      6857:         BCC        DSKDREADBL        AND LOOP UNTIL USER'S BUFFER IS FILLED
DFB6 20EF      6858:         BRA       DSKDREADBL        IGNORE EOF ERROR
               6859: *
               6860: *       DSKREADBCHUNK -- READ A CHUNK OF BYTES FROM FILE TO BUFFER
               6861: *               CHUNK PARAMETERS ARE ALL SET UP BY LOCATECURBYTE
               6862: *
  DFB8         6863: DSKREADBCHUNK      EQU     *
               6864:         ;LDX    CODE+SDOS:IOBLOCKPTR       GET THE # BYTES MOVED SO FAR
DFB8 FECE07    6865:         LDX     CODE+SDOS:IOBLOCKPTR
               6866:         ;LDD    READB:ACTUALCOUNT,X
DFBB E609      6867:         LDAB      (READB:ACTUALCOUNT)+1,X
DFBD A608      6868:         LDAA      READB:ACTUALCOUNT,X
               6869:         ;ADDD    USEDCOUNT        ADD # BYTES WE'LL MOVE THIS TIME
DFBF FBCEA0    6870:         ADDB      USEDCOUNT+1
DFC2 B9CE9F    6871:         ADCA       USEDCOUNT
               6872:         ;STD    READB:ACTUALCOUNT,X
DFC5 E709      6873:         STAB      (READB:ACTUALCOUNT)+1,X
DFC7 A708      6874:         STAA      READB:ACTUALCOUNT,X
  0001         6875:         IF      M6800!M6801
               6876:         ;LDX    BUFFERPOINTER    SET "TO" POINTER
DFC9 FECE9B    6877:         LDX     BUFFERPOINTER
DFCC DF00      6878:         STX     TOPOINTER
  0001         6879:         ELSE    (M6809)
 *S*           6880:         LDY     BUFFERPOINTER




ASM/6800 1.4A0: DFCC SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 229; Form 1     DISK FILE/DEVICE DRIVER
SDOS11G.ASM
               6881:         FIN
               6882:         ;LDX    IOCBPOINTER       GET THE SOURCE POINTER
DFCE FECE09    6883:         LDX     IOCBPOINTER
               6884:         ;LDX    IOCB:NEXTBYTE,X
DFD1 EE14      6885:         LDX     IOCB:NEXTBYTE,X
               6886:         ;LDD    USEDCOUNT        FETCH TRANSFER COUNT
DFD3 F6CEA0    6887:         LDAB      USEDCOUNT+1
DFD6 B6CE9F    6888:         LDAA      USEDCOUNT
               6889:         ;JSR    CODE+SDOS:BLOCKMOVE        GO MOVE THE BYTES
DFD9 BDCE42    6890:         JSR     CODE+SDOS:BLOCKMOVE
               6891: *       NOTE: THIS USES SDOS ENTRY POINT VECTOR...
               6892: *       SO THAT A PATCH TO ENTRY POINT VECTOR CAN SUPPLY A DIFFERENT...
               6893: *       (PRESUMABLY MUCH FASTER) BLOCK MOVE ROUTINE OF ITS OWN!
  0001         6894:         IF      M6800!M6801
               6895:         ;LDX    TOPOINTER       UPDATE BUFFER POINTER PAST COPIED BYTES
DFDC DE00      6896:         LDX     TOPOINTER
DFDE FFCE9B    6897:         STX     BUFFERPOINTER
  0001         6898:         ELSE    (M6809)
 *S*           6899:         STY     BUFFERPOINTER
               6900:         FIN
DFE1 39        6901:         RTS




ASM/6800 1.4A0: DFE1 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 230; Form 1     DISK FILE/DEVICE DRIVER
SDOS11G.ASM
               6903: *
               6904: *       DSKFREADA -- DISK FILE READ ASCII
               6905: *
  DFE2         6906: DSKFREADA EQU     *
               6907:         ;JSR    DSKFIMPLIEDPOSITION     HANDLE IMPLIED POSITIONING IF REQUESTED
DFE2 BDE2BA    6908:         JSR     DSKFIMPLIEDPOSITION
               6909:         ;JSR    SETUPFORREAD     COPY BUFFER ADDRESS TO BUFFERPOINTER
DFE5 BDE10A    6910:         JSR     SETUPFORREAD
               6911: *                       AND SET UP FCB AND DISKINFO POINTERS
  DFE8         6912: DSKFREADAL        EQU     *
               6913:         ;JSR    CHECKREADDONE      ALL BYTES READ THAT WERE REQUESTED ?
DFE8 BDE12A    6914:         JSR     CHECKREADDONE
DFEB 2713      6915:         BEQ      DSKFREADADONE     B/ YES, DON'T READ ANY MORE BYTES
               6916:         ;JSR    LOCATECURBYTE       LOCATE THE BYTE WE WANT
DFED BDF2B3    6917:         JSR     LOCATECURBYTE
DFF0 8D38      6918:         BSR      DSKREADACHUNK      READ A CHUNK OF BYTES SELECTED BY LOCATECURBYTE
DFF2 2607      6919:         BNE      DSKFREADALINE     B/ LINE MODE INPUT COMPLETED
               6920:         ;JSR    UPDATECURBYTEF     ADJUST CURBYTE
DFF4 BDF5BB    6921:         JSR     UPDATECURBYTEF
DFF7 24EF      6922:         BCC        DSKFREADAL        GO CHECK FOR MORE BYTES TO MOVE
DFF9 20ED      6923:         BRA       DSKFREADAL        IGNORE EOF ERROR
               6924: 
  DFFB         6925: DSKFREADALINE     EQU     *
               6926:         ;JSR    UPDATECURBYTEF     UPDATE CURBYTE FOR THE FILE
DFFB BDF5BB    6927:         JSR     UPDATECURBYTEF
DFFE 2500      6928:         BCS       DSKFREADADONE     IGNORE EOF ERROR
  E000         6929: DSKFREADADONE     ; DONE FILLING SYSCALL REQUEST
E000 B6CEA1    6930:         LDAA      COLUMNCOUNT       COPY COLUMN COUNT BACK TO IOCB
               6931:         ;LDX    IOCBPOINTER
E003 FECE09    6932:         LDX     IOCBPOINTER
E006 A70C      6933:         STAA      IOCB:COLCNT,X
E008 0C39      6934:         OKRTS




ASM/6800 1.4A0: E008 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 231; Form 1     DISK FILE/DEVICE DRIVER
SDOS11G.ASM
               6936: *
               6937: *       DSKDREADA -- DISK DEVICE READ ASCII
               6938: *
  E00A         6939: DSKDREADA EQU     *
               6940:         ;JSR    DSKDIMPLIEDPOSITION     HANDLE IMPLIED POSITIONING IF REQUESTED
E00A BDE515    6941:         JSR     DSKDIMPLIEDPOSITION
               6942:         ;JSR    SETUPFORREAD     AND SET UP DISKINFO AND COLUMNCOUNT
E00D BDE10A    6943:         JSR     SETUPFORREAD
  E010         6944: DSKDREADAL        EQU     *
               6945:         ;JSR    CHECKREADDONE      TO SEE IF ALL DESIRED BYTES WERE COPIED
E010 BDE12A    6946:         JSR     CHECKREADDONE
E013 27EB      6947:         BEQ      DSKFREADADONE     B/ ALL DONE, GO CLEAN UP
               6948:         ;JSR    LOCDSKD  GO LOCATE THE CHUNK OF BYTES TO COPY
E015 BDF5D7    6949:         JSR     LOCDSKD
E018 8D10      6950:         BSR      DSKREADACHUNK      READ THEM INTO THE USER'S BUFFER
E01A 2607      6951:         BNE      DSKDREADALINE     B/ LINE MODE REQUEST SATISFIED
               6952:         ;JSR    UPDATECURBYTED     UPDATE THE POINTERS FOR THE DISK DEVICE
E01C BDF5C8    6953:         JSR     UPDATECURBYTED
E01F 24EF      6954:         BCC        DSKDREADAL        AND GO SEE IF THERE ARE MORE BYTES TO COPY
E021 20ED      6955:         BRA       DSKDREADAL        IGNORE EOF ERROR
               6956: 
  E023         6957: DSKDREADALINE     EQU     *
               6958:         ;JSR    UPDATECURBYTED     UPDATE POINTERS FOR THE DISK DEVICE
E023 BDF5C8    6959:         JSR     UPDATECURBYTED
E026 24D8      6960:         BCC        DSKFREADADONE     B/ NO ERROR, GET OUT QUICK!
E028 20D6      6961:         BRA       DSKFREADADONE     AND GO CLEAN UP




ASM/6800 1.4A0: E028 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 232; Form 1     DISK FILE/DEVICE DRIVER
SDOS11G.ASM
               6963: *
               6964: *       DSKREADACHUNK -- READ AN ASCII CHUNK OF BYTES SELECTED BY LOCATECURBYTE
               6965: *       RETURNS CC=0 IF EXHAUSTED CHUNK, NEED TO READ MORE
               6966: *               <>0 IF LINE MODE REQUEST WAS SATISFIED
               6967: *       THIS ROUTINE SHOULD TEST ACTIVATION CHARACTER SET LIKE VT DRIVER!
               6968: *
  E02A         6969: DSKREADACHUNK      EQU     *
               6970:         ;LDD    USEDCOUNT        MAKE EASY-TO-INCREMENT 16 BIT COUNT
E02A F6CEA0    6971:         LDAB      USEDCOUNT+1
E02D B6CE9F    6972:         LDAA      USEDCOUNT
               6973:         ;NEGD
E030 40        6974:         NEGA
E031 50        6975:         NEGB
E032 8200      6976:         SBCA       #0
               6977:         ;STD    TRANSFERCOUNT
E034 F7CE9E    6978:         STAB      TRANSFERCOUNT+1
E037 B7CE9D    6979:         STAA      TRANSFERCOUNT
               6980:         ;LDX    CODE+SDOS:IOBLOCKPTR       GET THE # BYTES MOVED SO FAR
E03A FECE07    6981:         LDX     CODE+SDOS:IOBLOCKPTR
               6982:         ;LDD    READA:ACTUALCOUNT,X
E03D E609      6983:         LDAB      (READA:ACTUALCOUNT)+1,X
E03F A608      6984:         LDAA      READA:ACTUALCOUNT,X
               6985:         ;ADDD    USEDCOUNT        ADD # BYTES WE'LL MOVE THIS TIME
E041 FBCEA0    6986:         ADDB      USEDCOUNT+1
E044 B9CE9F    6987:         ADCA       USEDCOUNT
               6988:         ;STD    READA:ACTUALCOUNT,X
E047 E709      6989:         STAB      (READA:ACTUALCOUNT)+1,X
E049 A708      6990:         STAA      READA:ACTUALCOUNT,X
               6991:         ;LDX    IOCBPOINTER       GET THE SOURCE POINTER
E04B FECE09    6992:         LDX     IOCBPOINTER
  0001         6993:         IF      M6800!M6801
               6994:         ;LDX    IOCB:NEXTBYTE,X
E04E EE14      6995:         LDX     IOCB:NEXTBYTE,X
E050 DF02      6996:         STX     FROMPOINTER
  E052         6997: DSKREADACHUNKL     ; COPY BYTES FROM SECTOR TO BUFFER
               6998:         ;LDX    FROMPOINTER
E052 DE02      6999:         LDX     FROMPOINTER
               7000:         ;LDA     ,X+     COPY A BYTE...
E054 A600      7001:         LDAA      0,X
E056 08        7002:         INX




ASM/6800 1.4A0: E057 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 233; Form 1     DISK FILE/DEVICE DRIVER
SDOS11G.ASM
E057 DF02      7003:         STX     FROMPOINTER
E059 847F      7004:         ANDA      #ASCII:MASK        A NULL ?
E05B 272A      7005:         BEQ      DSKREADANULL      B/ YES, ADJUST ACTUAL COUNT READ
               7006:         ;CMPA     #ASCII:LF A LINE FEED ?
E05D 810A      7007:         CMPA      #ASCII:LF
E05F 2726      7008:         BEQ      DSKREADANULL      B/ YES, IGNORE IT
               7009:         ;CMPA     #ASCII:RUBOUT      ?
E061 817F      7010:         CMPA      #ASCII:RUBOUT
E063 2722      7011:         BEQ      DSKREADANULL      B/ YES, IGNORE IT
               7012:         ;JSR    ADJUSTCOLUMNCOUNT  NO, GO UPDATE THE COLUMN COUNTER
E065 BDE0C9    7013:         JSR     ADJUSTCOLUMNCOUNT
               7014:         ;LDX    BUFFERPOINTER    TO THE USER'S BUFFER
E068 FECE9B    7015:         LDX     BUFFERPOINTER
               7016:         ;STA     ,X+
E06B A700      7017:         STAA      0,X
E06D 08        7018:         INX
E06E FFCE9B    7019:         STX     BUFFERPOINTER
               7020:         ;CMPA     #ASCII:CR  END OF LINE CODE ?
E071 810D      7021:         CMPA      #ASCII:CR
E073 2607      7022:         BNE      DSKREADACHUNKL1    B/ NO
               7023:         ;LDX    CODE+SDOS:IOBLOCKPTR       YES, LINE MODE ?
E075 FECE07    7024:         LDX     CODE+SDOS:IOBLOCKPTR
E078 A603      7025:         LDAA      READA:LMFLAG,X     ...?
E07A 2628      7026:         BNE      DSKREADACR B/ YES, CR IS IMPORTANT
  E07C         7027: DSKREADACHUNKL1 ; ADJUST NUMBER OF BYTES TRANSFERRED
  0001         7028:         ELSE    (M6809)
 *S*           7029:         PAGE
 *S*           7030:         LDY     IOCB:NEXTBYTE,X    GET SOURCE POINTER
 *S*           7031:         LDU     BUFFERPOINTER    GET TARGET BUFFER ADDRESS
 *S*           7032: DSKREADACHUNKL     ; COPY BYTES FROM SECTOR TO BUFFER
 *S*           7033:         ;LDA     ,Y+     COPY A BYTE...
 *S*           7034:         LDAA      
 *S*           7035:         ANDA      #ASCII:MASK        A NULL?
 *S*           7036:         BEQ      DSKREADANULL      B/ YES
 *S*           7037:         ;CMPA     #ASCII:LF LINE FEED?
 *S*           7038:         CMPA      #ASCII:LF
 *S*           7039:         BEQ      DSKREADANULL      B/ YES, IGNORE IT
 *S*           7040:         ;CMPA     #ASCII:RUBOUT      RUBOUT?
 *S*           7041:         CMPA      #ASCII:RUBOUT
 *S*           7042:         BEQ      DSKREADANULL      B/ YES, IGNORE IT




ASM/6800 1.4A0: E07A SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 234; Form 1     DISK FILE/DEVICE DRIVER
SDOS11G.ASM
 *S*           7043:         ;JSR    ADJUSTCOLUMNCOUNT  NO, GO UPDATE THE COLUMN COUNT
 *S*           7044:         JSR     ADJUSTCOLUMNCOUNT
 *S*           7045:         ;STA     ,U+     STORE THE BYTE INTO THE USER'S BUFFER
 *S*           7046:         STAA      
 *S*           7047:         ;CMPA     #ASCII:CR  END OF LINE MARK?
 *S*           7048:         CMPA      #ASCII:CR
 *S*           7049:         BNE      DSKREADACHUNKL1    B/ NO, KEEP COPYING
 *S*           7050:         ;LDX    CODE+SDOS:IOBLOCKPTR       YES, LINE MODE?
 *S*           7051:         LDX     CODE+SDOS:IOBLOCKPTR
 *S*           7052:         ;LDA     READA:LMFLAG,X     ...?
 *S*           7053:         LDAA      READA:LMFLAG,X
 *S*           7054:         BNE      DSKREADACR B/ YES, CR MARKS END OF TRANSFER
 *S*           7055: DSKREADACHUNKL1    EQU     *
               7056:         FIN
               7057:         ;INC     TRANSFERCOUNT+1   DOWN COUNT # BYTES TO MOVE
E07C 7CCE9E    7058:         INC      TRANSFERCOUNT+1
E07F 26D1      7059:         BNE      DSKREADACHUNKL     B/ MORE TO MOVE
  0000         7060:         IF      M6809
 *S*           7061:         STU     BUFFERPOINTER    ENSURE BUFFER POINTER IS UP TO DATE IN CASE WE EXIT
               7062:         FIN
               7063:         ;INC     TRANSFERCOUNT
E081 7CCE9D    7064:         INC      TRANSFERCOUNT
E084 26CC      7065:         BNE      DSKREADACHUNKL     B/ MORE
E086 39        7066:         RTS             WITH CC=0 IF ALL BYTES SPECIFIED WERE COPIED




ASM/6800 1.4A0: E086 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 235; Form 1     DISK FILE/DEVICE DRIVER
SDOS11G.ASM
  E087         7068: DSKREADANULL      ; RATS, ENCOUNTERED A NULL!
               7069:         ;LDX    USERRETAPTR      HAS THIS USER BEEN KILLED ?
E087 FECF8E    7070:         LDX     USERRETAPTR
               7071:         ;LDD    M6800!M6801,X   (FETCH HIS RETURN ADDRESS)
E08A E602      7072:         LDAB      (M6800!M6801)+1,X
E08C A601      7073:         LDAA      M6800!M6801,X
               7074:         ;CMPD    #KILLPROGRAM     (DOES PC POINT TO KILL PROGRAM?)
E08E 81D7      7075:         CMPA      #(KILLPROGRAM)/256
E090 2602      7076:         BNE      MACRO:0014
E092 C1C5      7077:         CMPB      #(KILLPROGRAM)&$FF
  E094         7078: MACRO:0014
E094 270B      7079:         BEQ      DSKREADANULL2     B/ YES, STOP IGNORING NULLS --> RELATIVELY QUICK EX
               7080:         ;LDX    CODE+SDOS:IOBLOCKPTR       ACTUALCOUNT:=ACTUALCOUNT-1
E096 FECE07    7081:         LDX     CODE+SDOS:IOBLOCKPTR
E099 A609      7082:         LDAA      READA:ACTUALCOUNT+1,X (WE CAN'T COPY THE NULL...
E09B 2602      7083:         BNE      DSKREADANULL1     TO THE USER'S BUFFER!)
               7084:         ;DEC     READA:ACTUALCOUNT,X
E09D 6A08      7085:         DEC      READA:ACTUALCOUNT,X
  E09F         7086: DSKREADANULL1     EQU     *
               7087:         ;DEC     READA:ACTUALCOUNT+1,X
E09F 6A09      7088:         DEC      READA:ACTUALCOUNT+1,X
  E0A1         7089: DSKREADANULL2
               7090:         ;JMP    DSKREADACHUNKL1    GO GRAB THE NEXT BYTE (JMP FOR SPEED)
E0A1 7EE07C    7091:         JMP     DSKREADACHUNKL1
               7092: 
  E0A4         7093: DSKREADACR ; WE JUST SAW A CR IN LINE MODE
               7094:         ;LDD    READA:ACTUALCOUNT,X   ADJUST THE ACTUAL # BYTES XFERRED
E0A4 E609      7095:         LDAB      (READA:ACTUALCOUNT)+1,X
E0A6 A608      7096:         LDAA      READA:ACTUALCOUNT,X
E0A8 0D        7097:         SEC              (COUNT THE CR BYTE)
E0A9 F9CE9E    7098:         ADCB       TRANSFERCOUNT+1   THESE GUYS...
E0AC B9CE9D    7099:         ADCA       TRANSFERCOUNT     WE DIDN'T ACTUALLY TRANSFER
               7100:         ;STD    READA:ACTUALCOUNT,X   UPDATE THE ACTUAL # OF BYTES XFERRED
E0AF E709      7101:         STAB      (READA:ACTUALCOUNT)+1,X
E0B1 A708      7102:         STAA      READA:ACTUALCOUNT,X
               7103:         ;LDD    USEDCOUNT        ADJUST THE ACTUAL # OF BYTES USED THIS TIME
E0B3 F6CEA0    7104:         LDAB      USEDCOUNT+1
E0B6 B6CE9F    7105:         LDAA      USEDCOUNT
E0B9 0D        7106:         SEC              (AGAIN, COUNT THE CR)
E0BA F9CE9E    7107:         ADCB       TRANSFERCOUNT+1   THESE GUYS WE DIDN'T TRANSFER




ASM/6800 1.4A0: E0BD SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 236; Form 1     DISK FILE/DEVICE DRIVER
SDOS11G.ASM
E0BD B9CE9D    7108:         ADCA       TRANSFERCOUNT
               7109:         ;STD    USEDCOUNT
E0C0 F7CEA0    7110:         STAB      USEDCOUNT+1
E0C3 B7CE9F    7111:         STAA      USEDCOUNT
  0000         7112:         IF      M6809
 *S*           7113:         STU     BUFFERPOINTER    ENSURE THAT BUFFER POINTER IS UP TO DATE
               7114:         FIN
E0C6 8601      7115:         LDAA      #1      RETURN WITH CC<>0...
E0C8 39        7116:         RTS             SINCE LINEMODE REQUEST WAS SATISFIED




ASM/6800 1.4A0: E0C8 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 237; Form 1     DISK FILE/DEVICE DRIVER
SDOS11G.ASM
               7118: *
               7119: *       ADJUSTCOLUMNCOUNT -- ADJUST COLUMNCOUNT ACCORDING TO (A)
               7120: *               MASKS PARITY ON (A)
               7121: *
  E0C9         7122: ADJUSTCOLUMNCOUNT  EQU     *
E0C9 847F      7123:         ANDA      #ASCII:MASK        DITCH THE PARITY BIT
               7124:         ;CMPA     #ASCII:SPACE-1      A PRINTING CHARACTER ?
E0CB 811F      7125:         CMPA      #ASCII:SPACE-1
E0CD 2214      7126:         BHI      ADJUSTCOLBUMP      B/ YEP, GO PROCESS
               7127:         ;CMPA     #ASCII:CR  MUST BE A CONTROL CHARACTER
E0CF 810D      7128:         CMPA      #ASCII:CR
E0D1 270C      7129:         BEQ      ADJUSTCOLZERO     B/ NEW LINE MARK, ZERO THE COLUMN COUNT
               7130:         ;CMPA     #ASCII:BS  BACKSPACE ?
E0D3 8108      7131:         CMPA      #ASCII:BS
E0D5 2714      7132:         BEQ      ADJUSTCOLBS        B/ YES, GO HANDLE
               7133:         ;CMPA     #ASCII:HT A TAB CHARACTER ?
E0D7 8109      7134:         CMPA      #ASCII:HT
E0D9 2719      7135:         BEQ      ADJUSTCOLTAB        B/ YES, GO PROCESS
               7136:         ;CMPA     #ASCII:FF FORM FEED ?
E0DB 810C      7137:         CMPA      #ASCII:FF
E0DD 2603      7138:         BNE      ADJUSTCOLRTS      B/ NO, LEAVE COLUMN COUNT ALONE
  E0DF         7139: ADJUSTCOLZERO ; MUST ZERO THE COLUMN COUNT
               7140:         ;CLR     COLUMNCOUNT       CR --> ZERO THE COLUMN COUNTER
E0DF 7FCEA1    7141:         CLR      COLUMNCOUNT
  E0E2         7142: ADJUSTCOLRTS      EQU     *
E0E2 39        7143:         RTS
               7144: 
  E0E3         7145: ADJUSTCOLBUMP      ; LOOKS LIKE WE SHOULD BUMP COLUMN COUNT
               7146:         ;CMPA     #ASCII:RUBOUT      ALL CODES > $20 ARE PRINTING CHARACTERS...
E0E3 817F      7147:         CMPA      #ASCII:RUBOUT
E0E5 27FB      7148:         BEQ      ADJUSTCOLRTS      WITH THE EXCEPTION OF RUBOUT
               7149:         ;INC     COLUMNCOUNT       BUMP THE COLUMN COUNT (TOO BAD IF IT OVERFLOWS!)
E0E7 7CCEA1    7150:         INC      COLUMNCOUNT
E0EA 39        7151:         RTS
               7152: 
E0EB 7DCEA1    7153: ADJUSTCOLBS        TST     COLUMNCOUNT       HANDLE BACKSPACE
E0EE 27F2      7154:         BEQ      ADJUSTCOLRTS      B/ AT COL 0, CANNOT BACKSPACE
               7155:         ;DEC     COLUMNCOUNT       ELSE BACK UP THE COLUMN COUNT
E0F0 7ACEA1    7156:         DEC      COLUMNCOUNT
E0F3 39        7157:         RTS




ASM/6800 1.4A0: E0F3 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 238; Form 1     DISK FILE/DEVICE DRIVER
SDOS11G.ASM
               7158: 
  E0F4         7159: ADJUSTCOLTAB        ;LDB     COLUMNCOUNT       TAB SEEN
E0F4 F6CEA1    7160:         LDAB      COLUMNCOUNT
               7161:         ;ORB     #7      BUMP COLUMN COUNT TO NEXT MULTIPLE OF 8
E0F7 CA07      7162:         ORAB      #7
E0F9 5C        7163:         INCB
               7164:         ;STB     COLUMNCOUNT
E0FA F7CEA1    7165:         STAB      COLUMNCOUNT
E0FD 39        7166:         RTS




ASM/6800 1.4A0: E0FD SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 239; Form 1     DISK FILE/DEVICE DRIVER
SDOS11G.ASM
               7168: *       SETUPFORWRITE -- SET UP FOR "WRITEA" OR "WRITEB"
               7169: *       WORKS JUST LIKE SETUPFORREAD, EXCEPT THAT WRITEFLAG IS SET
               7170: *
  E0FE         7171: SETUPFORWRITE   EQU     *
E0FE 8601      7172:         LDAA      #1      REMEMBER, THIS IS A WRITE!
E100 B7CE9A    7173:         STAA      WRITEFLAG
               7174:         ;LDX    CODE+SDOS:IOBLOCKPTR       GET SCBLK:WRBUF...
E103 FECE07    7175:         LDX     CODE+SDOS:IOBLOCKPTR
               7176:         ;LDX    SCBLK:WRBUF,X      AND COPY INTO BUFFERPOINTER
E106 EE04      7177:         LDX     SCBLK:WRBUF,X
E108 2008      7178:         BRA       SETUPFORREAD1
               7179: *
               7180: *       SETUPFORREAD -- COPY BUFFERADDRESS FROM IOBLOCK TO BUFFERPOINTER
               7181: *               ALSO GETS FCB AND DISKINFO POINTERS FROM IOCB
               7182: *               FINALLY, RESETS THE WRITEFLAG AND COPIES IOCB:COLCNT INTO COLUMNCOUNT
               7183: *
  E10A         7184: SETUPFORREAD     EQU     *
               7185:         ;CLR     WRITEFLAG        THIS IS A READ, REMEMBER?
E10A 7FCE9A    7186:         CLR      WRITEFLAG
  0000         7187:         IF      READA:BUFFERP#READB:BUFFERP
 *S*           7188:         ?SETUPFORREAD WON'T WORK?
               7189:         FIN
               7190:         ;LDX    CODE+SDOS:IOBLOCKPTR       GET BUFFER POINTER FROM I/O BLOCK
E10D FECE07    7191:         LDX     CODE+SDOS:IOBLOCKPTR
               7192:         ;LDX    READA:BUFFERP,X
E110 EE0A      7193:         LDX     READA:BUFFERP,X
  E112         7194: SETUPFORREAD1    EQU     *
E112 FFCE9B    7195:         STX     BUFFERPOINTER
               7196:         ;LDX    IOCBPOINTER       AND SET UP THE COLUMNCOUNT
E115 FECE09    7197:         LDX     IOCBPOINTER
E118 A60C      7198:         LDAA      IOCB:COLCNT,X       IN CASE THIS IS AN ASCII READ OR WRITE
E11A B7CEA1    7199:         STAA      COLUMNCOUNT
E11D 39        7200:         RTS
               7201: *
               7202: *       GETFCBFROMIOCB -- SETS UP FCBPOINTER FROM IOCB
               7203: *       PRESERVES (A) FOR DISK DRIVER CONTROL, STATUS CALLS
               7204: *
  E11E         7205: GETFCBFROMIOCB      EQU     *
               7206:         ;LDX    IOCBPOINTER       GRAB IOCB ADDRESS
E11E FECE09    7207:         LDX     IOCBPOINTER




ASM/6800 1.4A0: E11E SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 240; Form 1     DISK FILE/DEVICE DRIVER
SDOS11G.ASM
               7208:         ;LDX    IOCB:FCB,X  COPY FCB ADDRESS OUT OF IOCB...
E121 EE07      7209:         LDX     IOCB:FCB,X
E123 FFCEA6    7210:         STX     FCBPOINTER        INTO A CONVENIENT PLACE
               7211:         ;LDX    IOCBPOINTER       JUST TO BE NICE
E126 FECE09    7212:         LDX     IOCBPOINTER
E129 39        7213:         RTS




ASM/6800 1.4A0: E129 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 241; Form 1     DISK FILE/DEVICE DRIVER
SDOS11G.ASM
               7215: *       CHECKREADDONE -- CHECKS TO SEE IF READB:MAXCOUNT = READB:ACTUALCOUNT
               7216: *               RETURNS Z BIT SET IF EQUAL
               7217: *               ...RESET IF NOT EQUAL
               7218: *               RETURNS (A,B):=READB:MAXCOUNT-READB:ACTUALCOUNT
               7219: *
  E12A         7220: CHECKREADDONE      EQU     *
  0000         7221:         IF      READA:BUFFERP#READB:BUFFERP
 *S*           7222:         ?CHECKREADDONE WON'T WORK?
               7223:         FIN
               7224:         ;LDX    CODE+SDOS:IOBLOCKPTR       IS ACTUALCOUNT TRANSFERRED...
E12A FECE07    7225:         LDX     CODE+SDOS:IOBLOCKPTR
               7226:         ;LDD    READB:MAXCOUNT,X    = MAXCOUNT ?
E12D E60D      7227:         LDAB      (READB:MAXCOUNT)+1,X
E12F A60C      7228:         LDAA      READB:MAXCOUNT,X
               7229:         ;SUBD    READB:ACTUALCOUNT,X   (COMPUTE NUMBER OF BYTES LEFT TO TRANSFER)
E131 E009      7230:         SUBB      (READB:ACTUALCOUNT)+1,X
E133 A208      7231:         SBCA       READB:ACTUALCOUNT,X
  0001         7232:         IF      M6800!M6801
E135 2601      7233:         BNE      CHECKREADDONE1     B/ WE STILL NEED TO MOVE LOTSA BYTES
E137 5D        7234:         TSTB             ... ?
  E138         7235: CHECKREADDONE1     EQU     *
               7236:         FIN
E138 39        7237:         RTS
               7238: *
               7239: *       CHECKWRITEDONE -- CHECKS TO SEE IF WRBUF+WRLEN = BUFFERPOINTER
               7240: *               RETURNS Z BIT SET IF EQUAL, RESET IF NOT EQUAL
               7241: *               RETURNS (A,B):=WRBUF+WRLEN-BUFFERPOINTER (# BYTES LEFT TO WRITE)
               7242: *
  E139         7243: CHECKWRITEDONE    EQU     *
  0000         7244:         IF      WRITEA:BUFFERP#WRITEB:BUFFERP
 *S*           7245:         ?CHECKWRITEDONE WON'T WORK?
               7246:         FIN
               7247:         ;LDX    CODE+SDOS:IOBLOCKPTR       FIND END OF WRBUF
E139 FECE07    7248:         LDX     CODE+SDOS:IOBLOCKPTR
               7249:         ;LDD    SCBLK:WRBUF,X
E13C E605      7250:         LDAB      (SCBLK:WRBUF)+1,X
E13E A604      7251:         LDAA      SCBLK:WRBUF,X
               7252:         ;ADDD    SCBLK:WRLEN,X
E140 EB07      7253:         ADDB      (SCBLK:WRLEN)+1,X
E142 A906      7254:         ADCA       SCBLK:WRLEN,X




ASM/6800 1.4A0: E142 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 242; Form 1     DISK FILE/DEVICE DRIVER
SDOS11G.ASM
               7255:         ;SUBD    BUFFERPOINTER    HAS BUFFERPOINTER ARRIVED THERE ?
E144 F0CE9C    7256:         SUBB      BUFFERPOINTER+1
E147 B2CE9B    7257:         SBCA       BUFFERPOINTER
  0001         7258:         IF      M6800!M6801
E14A 2601      7259:         BNE      CHECKWRITEDONE1   B/ GO FIND OUT.
E14C 5D        7260:         TSTB
  E14D         7261: CHECKWRITEDONE1
               7262:         FIN
E14D 39        7263:         RTS




ASM/6800 1.4A0: E14D SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 243; Form 1     DISK FILE/DEVICE DRIVER
SDOS11G.ASM
               7265: *
               7266: *       DSKFWRITEB -- WRITE BINARY TO DISK FILE
               7267: *
  E14E         7268: DSKFWRITEB       EQU     *
               7269:         ;JSR    DSKFIMPLIEDPOSITION     HANDLE IMPLIED POSITIONING IF REQUESTED
E14E BDE2BA    7270:         JSR     DSKFIMPLIEDPOSITION
E151 2500      7271:         BCS       *+2     IGNORE EOF ERROR IF GIVEN
E153 8DA9      7272:         BSR      SETUPFORWRITE   SO WE CAN MODIFY IT AS WE PLEASE
               7273: *               AND GET FCB AND DISKINFO POINTERS
               7274:         ;CLR     IOCB:COLCNT,X       YOU SAY, "WRITE BINARY", I SAY "ZAP THE COLUMN CO
E155 6F0C      7275:         CLR      IOCB:COLCNT,X
               7276:         ;JSR    UPDATEFILEDATE    SET DATE OF FILE TO TODAY
E157 BDDD0E    7277:         JSR     UPDATEFILEDATE
  E15A         7278: DSKFWRITEBL      ; WRITE BINARY BYTES TO DISK FILE
E15A 8DDD      7279:         BSR      CHECKWRITEDONE    ARE ALL BYTES FROM BUFFER WRITTTEN ?
E15C 270C      7280:         BEQ      DSKFWRITEBDONE   B/ YES, ALL DONE WRITING BYTES
               7281:         ;JSR    LOCATECURBYTE       LOCATE THE BYTE WE WANT
E15E BDF2B3    7282:         JSR     LOCATECURBYTE
E161 8D21      7283:         BSR      DSKWRITEBCHUNK    COPY A CHUNK OF BYTES FROM THE BUFFER TO THE DISK
               7284:         ;JSR    UPDATECURBYTEF     ADJUST CURBYTE
E163 BDF5BB    7285:         JSR     UPDATECURBYTEF
E166 24F2      7286:         BCC        DSKFWRITEBL      GO LOOK FOR MORE BYTES TO MOVE
E168 20F0      7287:         BRA       DSKFWRITEBL      IGNORE EOF ERROR
               7288: 
  E16A         7289: DSKFWRITEBDONE   EQU     *
E16A 0C39      7290:         OKRTS           AND EXIT
               7291: *
               7292: *       DSKDWRITEB -- WRITE BINARY TO DISK FILE
               7293: *
  E16C         7294: DSKDWRITEB       EQU     *
               7295:         ;JSR    DSKDIMPLIEDPOSITION     HANDLE IMPLIED POSITIONING IF REQUESTED
E16C BDE515    7296:         JSR     DSKDIMPLIEDPOSITION
               7297:         ;JSR    SETUPFORWRITE   AND SET UP DISKINFO POINTER
E16F BDE0FE    7298:         JSR     SETUPFORWRITE
               7299:         ;CLR     IOCB:COLCNT,X       SINCE YOU ASKED FOR A WRITE BINARY
E172 6F0C      7300:         CLR      IOCB:COLCNT,X
  E174         7301: DSKDWRITEBL      EQU     *
E174 8DC3      7302:         BSR      CHECKWRITEDONE    ALL BYTES MOVED FROM BUFFER TO DISK ?
E176 27F2      7303:         BEQ      DSKFWRITEBDONE   B/ YES, QUIT NOW
               7304:         ;JSR    LOCDSKD  LOCATE THE CHUNK OF BYTES TO WRITE INTO




ASM/6800 1.4A0: E178 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 244; Form 1     DISK FILE/DEVICE DRIVER
SDOS11G.ASM
E178 BDF5D7    7305:         JSR     LOCDSKD
E17B 8D07      7306:         BSR      DSKWRITEBCHUNK    GO COPY A CHUNK OF BYTES TO THE DISK
               7307:         ;JSR    UPDATECURBYTED     AND UPDATE THE POINTERS TELLING US WHERE WE ARE
E17D BDF5C8    7308:         JSR     UPDATECURBYTED
E180 24F2      7309:         BCC        DSKDWRITEBL      GO SEE IF SOME MORE WORK TO DO
E182 20F0      7310:         BRA       DSKDWRITEBL      IGNORE EOF ERROR




ASM/6800 1.4A0: E182 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 245; Form 1     DISK FILE/DEVICE DRIVER
SDOS11G.ASM
               7312: *
               7313: *       DSKWRITEBCHUNK -- WRITE A CHUNK OF BYTES FROM BUFFER TO DISK FILE
               7314: *               PARAMETERS SPECIFYING THE CHUNK ARE SET UP BY LOCATECURBYTE
               7315: *
  E184         7316: DSKWRITEBCHUNK    EQU     *
               7317:         ;LDX    IOCBPOINTER       GET THE TARGET POINTER
E184 FECE09    7318:         LDX     IOCBPOINTER
  0001         7319:         IF      M6800!M6801
               7320:         ;LDX    IOCB:NEXTBYTE,X
E187 EE14      7321:         LDX     IOCB:NEXTBYTE,X
E189 DF00      7322:         STX     TOPOINTER
  0001         7323:         ELSE    (M6809)
 *S*           7324:         LDY     IOCB:NEXTBYTE,X
               7325:         FIN
               7326:         ;LDX    BUFFERPOINTER    GET FROM POINTER TO (A,B)
E18B FECE9B    7327:         LDX     BUFFERPOINTER
               7328:         ;LDD    USEDCOUNT        # BYTES TO MOVE
E18E F6CEA0    7329:         LDAB      USEDCOUNT+1
E191 B6CE9F    7330:         LDAA      USEDCOUNT
               7331:         ;JSR    CODE+SDOS:BLOCKMOVE        GO MOVE THE BYTES
E194 BDCE42    7332:         JSR     CODE+SDOS:BLOCKMOVE
               7333: *       NOTE: THIS USES SDOS ENTRY POINT VECTOR...
               7334: *       SO THAT A PATCH TO ENTRY POINT VECTOR CAN SUPPLY A DIFFERENT...
               7335: *       (PRESUMABLY MUCH FASTER) BLOCK MOVE ROUTINE OF ITS OWN!
E197 FFCE9B    7336:         STX     BUFFERPOINTER    UPDATE POINTER PAST COPIED BYTES
E19A 39        7337:         RTS




ASM/6800 1.4A0: E19A SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 246; Form 1     DISK FILE/DEVICE DRIVER
SDOS11G.ASM
               7339: *
               7340: *       DSKFWRITEA -- WRITE ASCII TO DISK FILE
               7341: *
  E19B         7342: DSKFWRITEA       EQU     *
               7343:         ;JSR    DSKFIMPLIEDPOSITION     HANDLE IMPLIED POSITIONING IF REQUESTED
E19B BDE2BA    7344:         JSR     DSKFIMPLIEDPOSITION
E19E 2500      7345:         BCS       *+2     IGNORE EOF ERROR IF GIVEN
               7346:         ;JSR    SETUPFORWRITE   SO WE CAN MODIFY IT AS WE PLEASE
E1A0 BDE0FE    7347:         JSR     SETUPFORWRITE
               7348: *                       AND SET UP FCB AND DISKINFO TABLE POINTERS
               7349:         ;JSR    UPDATEFILEDATE    TO MATCH TODAY'S DATE!
E1A3 BDDD0E    7350:         JSR     UPDATEFILEDATE
  E1A6         7351: DSKFWRITEAL      ; WRITE A BYTE TO DISK FILE
               7352:         ;JSR    CHECKWRITEDONE    ALL BYTES COPIED FROM BUFFER TO DISK FILE ?
E1A6 BDE139    7353:         JSR     CHECKWRITEDONE
E1A9 270C      7354:         BEQ      DSKFWRITEADONE   B/ YES, ALL DONE WRITING BYTES
               7355:         ;JSR    LOCATECURBYTE       LOCATE THE BYTE WE WANT
E1AB BDF2B3    7356:         JSR     LOCATECURBYTE
E1AE 8D11      7357:         BSR      DSKWRITEACHUNK    WRITE A CHUNK OF BYTES FROM BUFFER TO DISK FILE
               7358:         ;JSR    UPDATECURBYTEF     ADJUST CURBYTE
E1B0 BDF5BB    7359:         JSR     UPDATECURBYTEF
E1B3 24F1      7360:         BCC        DSKFWRITEAL      GO SEE IF WE MUST STILL MOVE MORE BYTES
E1B5 20EF      7361:         BRA       DSKFWRITEAL      IGNORE EOF ERROR
               7362: 
  E1B7         7363: DSKFWRITEADONE   EQU     *
               7364:         ;LDX    IOCBPOINTER       RESET THE WRITE MODE FLAG
E1B7 FECE09    7365:         LDX     IOCBPOINTER
E1BA B6CEA1    7366:         LDAA      COLUMNCOUNT       AND UPDATE THE COLUMN COUNTER
E1BD A70C      7367:         STAA      IOCB:COLCNT,X
E1BF 0C39      7368:         OKRTS           AND EXIT




ASM/6800 1.4A0: E1BF SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 247; Form 1     DISK FILE/DEVICE DRIVER
SDOS11G.ASM
               7370: *
               7371: *       DSKWRITEACHUNK -- WRITE A CHUNK OF ASCII BYTES TO A DISK SECTOR
               7372: *               CHUNK PARAMETERS SET UP BY LOCATECURBYTE
               7373: *
  E1C1         7374: DSKWRITEACHUNK    EQU     *
  0001         7375:         IF      M6800!M6801
               7376:         ;LDD    USEDCOUNT        = # BYTES TO TRANSFER
E1C1 F6CEA0    7377:         LDAB      USEDCOUNT+1
E1C4 B6CE9F    7378:         LDAA      USEDCOUNT
               7379:         ;NEGD           MAKE EASY-TO-INCREMENT COUNTER
E1C7 40        7380:         NEGA
E1C8 50        7381:         NEGB
E1C9 8200      7382:         SBCA       #0
               7383:         ;STD    TRANSFERCOUNT
E1CB F7CE9E    7384:         STAB      TRANSFERCOUNT+1
E1CE B7CE9D    7385:         STAA      TRANSFERCOUNT
               7386:         ;LDX    IOCBPOINTER       GET THE TARGET POINTER
E1D1 FECE09    7387:         LDX     IOCBPOINTER
               7388:         ;LDX    IOCB:NEXTBYTE,X
E1D4 EE14      7389:         LDX     IOCB:NEXTBYTE,X
E1D6 DF00      7390:         STX     TOPOINTER       AND SAVE IT
  E1D8         7391: DSKWRITEACHUNKL   ; COPY BYTES FROM SECTOR TO BUFFER
               7392:         ;LDX    BUFFERPOINTER
E1D8 FECE9B    7393:         LDX     BUFFERPOINTER
               7394:         ;LDA     ,X+     COPY A BYTE...
E1DB A600      7395:         LDAA      0,X
E1DD 08        7396:         INX
E1DE FFCE9B    7397:         STX     BUFFERPOINTER
               7398:         ;JSR    ADJUSTCOLUMNCOUNT  NEED I SAY MORE ?
E1E1 BDE0C9    7399:         JSR     ADJUSTCOLUMNCOUNT
               7400:         ;LDX    TOPOINTER       TO THE DATA SECTOR
E1E4 DE00      7401:         LDX     TOPOINTER
               7402:         ;STA     ,X+
E1E6 A700      7403:         STAA      0,X
E1E8 08        7404:         INX
E1E9 DF00      7405:         STX     TOPOINTER
               7406:         ;INC     TRANSFERCOUNT+1   DOWN COUNT # BYTES TO MOVE
E1EB 7CCE9E    7407:         INC      TRANSFERCOUNT+1
E1EE 26E8      7408:         BNE      DSKWRITEACHUNKL   B/ MORE TO MOVE
               7409:         ;INC     TRANSFERCOUNT




ASM/6800 1.4A0: E1F0 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 248; Form 1     DISK FILE/DEVICE DRIVER
SDOS11G.ASM
E1F0 7CCE9D    7410:         INC      TRANSFERCOUNT
E1F3 26E3      7411:         BNE      DSKWRITEACHUNKL   B/ MORE
  0001         7412:         ELSE    (M6809)
 *S*           7413:         LDY     USEDCOUNT        = # BYTES TO MOVE
 *S*           7414:         ;LDX    IOCBPOINTER       GET TARGET POINTER TO (U)
 *S*           7415:         LDX     IOCBPOINTER
 *S*           7416:         LDU     IOCB:NEXTBYTE,X
 *S*           7417:         ;LDX    BUFFERPOINTER    SOURCE POINTER
 *S*           7418:         LDX     BUFFERPOINTER
 *S*           7419: DSKWRITEACHUNKL ; COPY BYTES FROM SECTOR TO USER SPACE BUFFER
 *S*           7420:         ;LDA     ,X+     COPY A BYTE...
 *S*           7421:         LDAA      0,X
 *S*           7422:         INX
 *S*           7423:         ;JSR    ADJUSTCOLUMNCOUNT  NEED I SAY MORE?
 *S*           7424:         JSR     ADJUSTCOLUMNCOUNT
 *S*           7425:         ;STA     ,U+     ... TO TARGET SECTOR BUFFER
 *S*           7426:         STAA      
 *S*           7427:         LEAY     -1,Y    DOWN COUNT NUMBER OF BYTES TO MOVE
 *S*           7428:         BNE      DSKWRITEACHUNKL   B/ MORE BYTES TO MOVE!
 *S*           7429:         STX     BUFFERPOINTER    MAKE SURE BUFFERPOINTER IS UP TO DATE ON EXIT
               7430:         FIN
E1F5 39        7431:         RTS




ASM/6800 1.4A0: E1F5 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 249; Form 1     DISK FILE/DEVICE DRIVER
SDOS11G.ASM
               7433: *
               7434: *       DSKDWRITEA -- WRITE ASCII TO DISK DEVICE
               7435: *
  E1F6         7436: DSKDWRITEA       EQU     *
               7437:         ;JSR    DSKDIMPLIEDPOSITION     HANDLE IMPLIED POSITIONING IF REQUESTED
E1F6 BDE515    7438:         JSR     DSKDIMPLIEDPOSITION
               7439:         ;JSR    SETUPFORWRITE   AND SET UP DISKINFO POINTER
E1F9 BDE0FE    7440:         JSR     SETUPFORWRITE
  E1FC         7441: DSKDWRITEAL      EQU     *
               7442:         ;JSR    CHECKWRITEDONE    ALL BYTES WRITTEN ?
E1FC BDE139    7443:         JSR     CHECKWRITEDONE
E1FF 27B6      7444:         BEQ      DSKFWRITEADONE   B/ YES, QUIT NOW
               7445:         ;JSR    LOCDSKD  GO FIGURE OUT THE BOUNDARIES OF THE CHUNK
E201 BDF5D7    7446:         JSR     LOCDSKD
E204 8DBB      7447:         BSR      DSKWRITEACHUNK    GO COPY THE BYTES TO A DISK SECTOR
               7448:         ;JSR    UPDATECURBYTED     UPDATE THE DISK DEVICE POINTERS
E206 BDF5C8    7449:         JSR     UPDATECURBYTED
E209 24F1      7450:         BCC        DSKDWRITEAL      AND LOOP UNTIL ALL THE BYTES ARE COPIED
E20B 20EF      7451:         BRA       DSKDWRITEAL      IGNORE EOF ERROR




ASM/6800 1.4A0: E20B SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 250; Form 1     DISK FILE/DEVICE DRIVER
SDOS11G.ASM
               7453: *
               7454: *       TABLEBRANCH -- BRANCH THRU TABLE ON (A)
               7455: *       ENTERED WITH POINTER TO TABLE IN (X)
               7456: *       @X IS BYTE CONTAINING MINIMUM VALUE FOR (A)
               7457: *       @(X+1) IS BYTE CONTAINING MAXIMUM VALUE FOR (A) [ MUST BE < MIN + 64]
               7458: *       @(X+2) IS POINTER TO ROUTINE FOR MIN VALUE OF (A)
               7459: *       @(X+4) IS POINTER TO ROUTINE FOR MIN VALUE OF (A), + 1
               7460: *               ETC.
               7461: *       CONTROL IS RETURNED ONLY IF (A) IS NOT IN BOUNDS SPECIFIED BY TABLE
               7462: *
  E20D         7463: TABLEBRANCH
               7464:         ;CMPA     ,X      < MIN VALUE?
E20D A100      7465:         CMPA      0,X
E20F 251B      7466:         BCS       TABLEBRANCHCANT        B/ NOT IN RANGE FOR THIS TABLE
               7467:         ;CMPA     1,X     <= MAX VALUE?
E211 A101      7468:         CMPA      1,X
E213 2217      7469:         BHI      TABLEBRANCHCANT        B/ NOT IN RANGE FOR THIS TABLE
               7470:         ;LEAS    2,S     MAKE RETURN ADDRESS GO AWAY...
  0000         7471:         IF      2<0
 *S*           7472:         RPT     -2
 *S*           7473:         DES
               7474:         ELSE
  0002         7475:         RPT     2
E215 31        7476:         INS
               7477:         FIN
E217 A000      7478:         SUBA      ,X      FORM 0-ORIGIN OFFSET INTO BRANCH TABLE
E219 48        7479:         ASLA              ASSERT: CAN'T OVERFLOW OR SET THE SIGN BIT!
E21A 16        7480:         TAB
  0001         7481:         IF      M6800!M6801
E21B 4F        7482:         CLRA              COMPUTE POINTER INTO TABLE
E21C DF00      7483:         STX     TEMPX
               7484:         ;ADDD    TEMPX
E21E DB01      7485:         ADDB      TEMPX+1
E220 9900      7486:         ADCA       TEMPX
               7487:         ;TDX
E222 9700      7488:         STAA      TEMPA
E224 D701      7489:         STAB      TEMPB
E226 DE00      7490:         LDX     TEMPX
  0001         7491:         ELSE    (M6809)
 *S*           7492:         ;LEAX    B,X




ASM/6800 1.4A0: E226 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 251; Form 1     DISK FILE/DEVICE DRIVER
SDOS11G.ASM
 *S*           7493:         IF      B<0
 *S*           7494:         RPT     -B
 *S*           7495:         DEX
 *S*           7496:         ELSE
 *S*           7497:         RPT     B
 *S*           7498:         INX
 *S*           7499:         FIN
               7500:         FIN
               7501:         ;JMP    [2,X]   GO TO ROUTINE
E228 EE02      7502:         LDX     2,X
E22A 6E00      7503:         JMP     0,X
               7504: 
E22C 39        7505: TABLEBRANCHCANT        RTS




ASM/6800 1.4A0: E22C SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 252; Form 1     DISK FILE/DEVICE DRIVER
SDOS11G.ASM
  E22D         7507: DSKFSETDATE      ; SET DATE OF DISK FILE
               7508:         ;JSR    CHECKWRLEN        WRITE BUFFER FORMAT MATCHES CLOCK
E22D BDD8DC    7509:         JSR     CHECKWRLEN
E230 0006      7510:         FDB      6
               7511:         ;LDX    SCBLK:WRBUF,X
E232 EE04      7512:         LDX     SCBLK:WRBUF,X
               7513:         ;LDA     CONTROL:DATA+3,X   FETCH NEW DAY NUMBER
E234 A603      7514:         LDAA      CONTROL:DATA+3,X
E236 36        7515:         PSHA             AND SAVE IT
               7516:         ;LDD    CONTROL:DATA+4,X   FETCH MONTH AND YEAR NUMBER
E237 E605      7517:         LDAB      (CONTROL:DATA+4)+1,X
E239 A604      7518:         LDAA      CONTROL:DATA+4,X
               7519:         ;LDX    FCBPOINTER        THIS FCB, PLEASE...
E23B FECEA6    7520:         LDX     FCBPOINTER
               7521:         ;STD    FCB:MONTH,X       SET MONTH AND YEAR
E23E E718      7522:         STAB      (FCB:MONTH)+1,X
E240 A717      7523:         STAA      FCB:MONTH,X
E242 32        7524:         PULA             GET DAY NUMBER BACK
E243 A716      7525:         STAA      FCB:DAY,X  AND STORE IT
  E245         7526: DSKFSET1 ; MARK DIRECTORY ENTRY AS CHANGED
E245 A60A      7527:         LDAA      FCB:FLAGS,X        NOTE: SETTING DATE DOES NOT ALTER "BACKUP" BIT
E247 8A40      7528:         ORAA      #FCBFLG::UPDATEDIR
E249 A70A      7529:         STAA      FCB:FLAGS,X
E24B 0C39      7530:         OKRTS
               7531: 
  E24D         7532: DSKFSETPROT     ; SET PROTECTION BITS
               7533:         ;JSR    CHECKWRLEN
E24D BDD8DC    7534:         JSR     CHECKWRLEN
E250 0001      7535:         FDB      1       SINGLE BYTE WRITE BUFFER
               7536:         ;LDX    SCBLK:WRBUF,X      GET POINTER TO WRITE BUFFER
E252 EE04      7537:         LDX     SCBLK:WRBUF,X
E254 A600      7538:         LDAA      CONTROL:DATA,X     GET NEW PROTECTION BITS
               7539:         ;LDX    FCBPOINTER        WHICH FILE TO CHANGE
E256 FECEA6    7540:         LDX     FCBPOINTER
E259 A715      7541:         STAA      FCB:PROT,X        CHANGE PROT AFTER UPDATEFILEDATE...
E25B 20E8      7542:         BRA       DSKFSET1        GO MARK DIRECTORY ENTRY AS CHANGED




ASM/6800 1.4A0: E25B SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 253; Form 1     DISK FILE/DEVICE DRIVER
SDOS11G.ASM
               7544: *       DSKFCONTROL -- DO A CONTROL OPERATION ON DISK FILE
               7545: *
  E25D         7546: DSKFCONTROL      EQU     *
               7547:         ;JSR    GETFCBFROMIOCB      SET UP FCB POINTER
E25D BDE11E    7548:         JSR     GETFCBFROMIOCB
               7549:         ;LDX    #DSKFCONTROL0    BRANCH ON STANDARD DISK FILE CONTROL OPERATIONS
E260 CEE271    7550:         LDX     #DSKFCONTROL0
               7551:         ;JSR    TABLEBRANCH
E263 BDE20D    7552:         JSR     TABLEBRANCH
               7553:         ;LDX    #DSKFCONTROL10   BRANCH ON DISK FILE SPECIFIC CONTROL OPERATIONS
E266 CEE277    7554:         LDX     #DSKFCONTROL10
               7555:         ;JSR    TABLEBRANCH
E269 BDE20D    7556:         JSR     TABLEBRANCH
  E26C         7557: ERRILLDEVOP     EQU     *
               7558:         ;JSR    ERRET   NO, NOT A VALID CONTROL REQUEST
E26C BDD1F7    7559:         JSR     ERRET
E26F 040A      7560:         FDB      ERR:ILLDEVICEOP
               7561: 
  E271         7562: DSKFCONTROL0 ; BRANCH TABLE FOR STANDARD DISK FILE CONTROL OPERATIONS
E271 0001      7563:         FCB       CC:POSITION,CC:DUMPBUFFERS
E273 E2E5      7564:         #DSKFPOSITION   CC:POSITION
E275 FADC      7565:         #DSKDUMPBUFFERS  CC:DUMPBUFFERS
               7566: 
  E277         7567: DSKFCONTROL10    ; BRANCH TABLE FOR DISK FILE SPECIFIC CONTROL OPERATIONS
E277 1013      7568:         FCB       CC:SETFILEDATE,CC:POSITIONTOEND
E279 E22D      7569:         #DSKFSETDATE     CC:SETFILEDATE
E27B E24D      7570:         #DSKFSETPROT    CC:SETFILEPROT
E27D E297      7571:         #DSKFSETSIZE    CC:SETFILESIZE
E27F E2D0      7572:         #DSKFPOSITIONTOEND      CC:POSITIONTOEND
               7573: *       #DSKFTABS CC:TABS
               7574: *       #DSKDFSETACTBLOCK   CC:SETACTBLOCK
               7575: 
  E281         7576: DSKFOPENERRORFILE       ; INTENDED FOR USE ONLY WITH SYSIOCB
               7577:         ;LDX    ERRFCBPOINTER     DOES ERROR FILE EXIST?
E281 FECF0C    7578:         LDX     ERRFCBPOINTER
E284 270C      7579:         BEQ      ERRNOERRMSGS    B/ NO ERROR FILE!?
E286 FFCEA6    7580:         STX     FCBPOINTER        RECORD FCB ADDRESS OF ERROR FILE
               7581:         ;INC     FCB:REFCOUNT,X     SINCE THIS IS SECOND TIME WE'LL OPEN...
E289 6C0B      7582:         INC      FCB:REFCOUNT,X
               7583:         ;LDX    FCB:DISKINFO,X    SET UP DISKINFO POINTER...




ASM/6800 1.4A0: E28B SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 254; Form 1     DISK FILE/DEVICE DRIVER
SDOS11G.ASM
E28B EE00      7584:         LDX     FCB:DISKINFO,X
E28D DF06      7585:         STX     DCBPOINTER        JUST LIKE A CALL TO OPEN WOULD HAVE DONE
               7586:         ;JMP    DSKFOPENSYSIOCB   DO REST LIKE A NORMAL OPEN
E28F 7EDDFE    7587:         JMP     DSKFOPENSYSIOCB
               7588: 
  E292         7589: ERRNOERRMSGS    EQU     *
               7590:         ;JSR    ERRET
E292 BDD1F7    7591:         JSR     ERRET
E295 03FE      7592:         FDB      ERR:NOERRORMSGS




ASM/6800 1.4A0: E295 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 255; Form 1     DISK FILE/DEVICE DRIVER
SDOS11G.ASM
  E297         7594: DSKFSETSIZE     ; SET SIZE OF DISK FILE TO CURRENT FILE POSITION
               7595:         ;JSR    UPDATEFILEDATE    CHANGE DATE OF FILE
E297 BDDD0E    7596:         JSR     UPDATEFILEDATE
               7597:         ;LDX    IOCBPOINTER       GET FILE SIZE DESIRED
E29A FECE09    7598:         LDX     IOCBPOINTER
               7599:         ;LDD    IOCB:CURBYTE,X
E29D E60E      7600:         LDAB      (IOCB:CURBYTE)+1,X
E29F A60D      7601:         LDAA      IOCB:CURBYTE,X
               7602:         ;PSHD
E2A1 37        7603:         PSHB
E2A2 36        7604:         PSHA
               7605:         ;LDD    IOCB:CURBYTE+2,X
E2A3 E610      7606:         LDAB      (IOCB:CURBYTE+2)+1,X
E2A5 A60F      7607:         LDAA      IOCB:CURBYTE+2,X
               7608:         ;LDX    FCBPOINTER        STUFF INTO FCB
E2A7 FECEA6    7609:         LDX     FCBPOINTER
               7610:         ;STD    FCB:FILESIZE+2,X
E2AA E714      7611:         STAB      (FCB:FILESIZE+2)+1,X
E2AC A713      7612:         STAA      FCB:FILESIZE+2,X
               7613:         ;PULD
E2AE 32        7614:         PULA
E2AF 33        7615:         PULB
               7616:         ;STD    FCB:FILESIZE,X
E2B0 E712      7617:         STAB      (FCB:FILESIZE)+1,X
E2B2 A711      7618:         STAA      FCB:FILESIZE,X
E2B4 8D53      7619:         BSR      DSKFEOFTEST     SET EOF FLAG
E2B6 2500      7620:         BCS       *+2     SURPRESS EOF ERROR THAT WILL OCCUR
  E2B8         7621: DSKFIMPLIEDPOSOKRTS
E2B8 0C39      7622:         OKRTS
               7623: 
  E2BA         7624: DSKFIMPLIEDPOSITION     ; HANDLE IMPLIED CC:POSITION BEFORE READ/WRITE
               7625:         ;JSR    GETFCBFROMIOCB      THIS IS REQUIRED BEFORE WE DO ANYTHING...
E2BA BDE11E    7626:         JSR     GETFCBFROMIOCB
               7627:         ;LDB     #RWPOSITION:SCLEN        IS SYSCALL BLOCK LONG ENOUGH TO INCLUDE A PO
E2BD C612      7628:         LDAB      #RWPOSITION:SCLEN
               7629:         ;JSR    CHECKSCLEN ...?
E2BF BDD8FD    7630:         JSR     CHECKSCLEN
E2C2 25F4      7631:         BCS       DSKFIMPLIEDPOSOKRTS     B/ NO, SO DON'T POSITION THE FILE
               7632:         ;LDD    RW:POSITION,X   YES, GET THE DESIRED FILE POSITION
E2C4 E60F      7633:         LDAB      (RW:POSITION)+1,X




ASM/6800 1.4A0: E2C6 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 256; Form 1     DISK FILE/DEVICE DRIVER
SDOS11G.ASM
E2C6 A60E      7634:         LDAA      RW:POSITION,X
               7635:         ;PSHD
E2C8 37        7636:         PSHB
E2C9 36        7637:         PSHA
               7638:         ;LDD    RW:POSITION+2,X
E2CA E611      7639:         LDAB      (RW:POSITION+2)+1,X
E2CC A610      7640:         LDAA      RW:POSITION+2,X
E2CE 2026      7641:         BRA       DSKFPOSITION1   GO DO FILE POSITION, GIVE EOF ERROR IF PAST EOF
               7642: 
  E2D0         7643: DSKFPOSITIONTOEND ; POSITION FILE TO END
E2D0 8D04      7644:         BSR      DSKFPOSITIONTOEND1
E2D2 2500      7645:         BCS       *+2     IGNORE EOF ERROR IF IT OCCURS
E2D4 0C39      7646:         OKRTS
               7647: 
  E2D6         7648: DSKFPOSITIONTOEND1      ; SUBROUTINE FOR DSKFPOSITIONTOEND
               7649:         ;LDX    FCBPOINTER        GET FILESIZE, SO WE CAN...
E2D6 FECEA6    7650:         LDX     FCBPOINTER
               7651:         ;LDD    FCB:FILESIZE,X    POSITION TO EOF
E2D9 E612      7652:         LDAB      (FCB:FILESIZE)+1,X
E2DB A611      7653:         LDAA      FCB:FILESIZE,X
               7654:         ;PSHD
E2DD 37        7655:         PSHB
E2DE 36        7656:         PSHA
               7657:         ;LDD    FCB:FILESIZE+2,X
E2DF E614      7658:         LDAB      (FCB:FILESIZE+2)+1,X
E2E1 A613      7659:         LDAA      FCB:FILESIZE+2,X
E2E3 2011      7660:         BRA       DSKFPOSITION1   GO DO POSITIONING
               7661: 
  E2E5         7662: DSKFPOSITION    ; SET IOCB:CURBYTE TO POSITION:DIST
               7663:         ;JSR    CHECKWRLEN        MAKE SURE THERE ARE AT LEAST...
E2E5 BDD8DC    7664:         JSR     CHECKWRLEN
E2E8 0004      7665:         FDB      4       BYTES IN WRITE LENGTH
               7666:         ;LDX    SCBLK:WRBUF,X
E2EA EE04      7667:         LDX     SCBLK:WRBUF,X
               7668:         ;LDD    CONTROL:DATA,X     COPY POSITION DATA TO (TOS,TOS-1),(A,B)
E2EC E601      7669:         LDAB      (CONTROL:DATA)+1,X
E2EE A600      7670:         LDAA      CONTROL:DATA,X
               7671:         ;PSHD
E2F0 37        7672:         PSHB
E2F1 36        7673:         PSHA




ASM/6800 1.4A0: E2F1 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 257; Form 1     DISK FILE/DEVICE DRIVER
SDOS11G.ASM
               7674:         ;LDD    CONTROL:DATA+2,X
E2F2 E603      7675:         LDAB      (CONTROL:DATA+2)+1,X
E2F4 A602      7676:         LDAA      CONTROL:DATA+2,X
  E2F6         7677: DSKFPOSITION1   ; ENTRY POINT FOR DSKFCLOSE
               7678:         ;LDX    IOCBPOINTER       NOW COPY TO IOCB:CURBYTE
E2F6 FECE09    7679:         LDX     IOCBPOINTER
               7680:         ;CLR     IOCB:LOCATEDF,X     MARK "LOCATECURBYTE REQ'D"
E2F9 6F11      7681:         CLR      IOCB:LOCATEDF,X
               7682:         ;CLR     IOCB:COLCNT,X       ALSO, ZERO THE COLUMN COUNTER
E2FB 6F0C      7683:         CLR      IOCB:COLCNT,X
               7684:         ;STD    IOCB:CURBYTE+2,X
E2FD E710      7685:         STAB      (IOCB:CURBYTE+2)+1,X
E2FF A70F      7686:         STAA      IOCB:CURBYTE+2,X
               7687:         ;PULD
E301 32        7688:         PULA
E302 33        7689:         PULB
               7690:         ;STD    IOCB:CURBYTE,X
E303 E70E      7691:         STAB      (IOCB:CURBYTE)+1,X
E305 A70D      7692:         STAA      IOCB:CURBYTE,X
E307 2B28      7693:         BMI      ERRBADPOSITION    B/ POSITION < 0!!
               7694: *       BRA       DSKFEOFTEST     GO TEST FOR EOF HIT




ASM/6800 1.4A0: E307 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 258; Form 1     DISK FILE/DEVICE DRIVER
SDOS11G.ASM
               7696: *
               7697: *       DSKFEOFTEST -- TEST FOR CURBYTE >= FILESIZE
               7698: *               SET EOFFLAG IF SO, TAKE ERRET
               7699: *
  E309         7700: DSKFEOFTEST     ; TEST TO SEE IF POSITION OFF END OF FILE
               7701:         ;LDX    FCBPOINTER        NOW MOVE FCB:FILESIZE...
E309 FECEA6    7702:         LDX     FCBPOINTER
               7703:         ;LDD    FCB:FILESIZE,X    TO (TOS-2),(TOS-1),(TOS),(A)
E30C E612      7704:         LDAB      (FCB:FILESIZE)+1,X
E30E A611      7705:         LDAA      FCB:FILESIZE,X
               7706:         ;PSHD
E310 37        7707:         PSHB
E311 36        7708:         PSHA
               7709:         ;LDD    FCB:FILESIZE+2,X
E312 E614      7710:         LDAB      (FCB:FILESIZE+2)+1,X
E314 A613      7711:         LDAA      FCB:FILESIZE+2,X
               7712:         ;LDX    IOCBPOINTER       COMPUTE FCB:FILESIZE-IOCB:CURBYTE-1
E316 FECE09    7713:         LDX     IOCBPOINTER
               7714:         ;CLR     IOCB:EOFFLAG,X     ASSUME NOT EOF
E319 6F0B      7715:         CLR      IOCB:EOFFLAG,X
E31B 0D        7716:         SEC              (THE -1 IS BECAUSE FILESIZE IS 1 ORIGIN)
E31C E210      7717:         SBCB       IOCB:CURBYTE+3,X    I.E., CHECK IF IOCB:CURBYTE >= FCB:FILESIZE
E31E A20F      7718:         SBCA       IOCB:CURBYTE+2,X
               7719:         ;PULD
E320 32        7720:         PULA
E321 33        7721:         PULB
E322 E20E      7722:         SBCB       IOCB:CURBYTE+1,X
E324 A20D      7723:         SBCA       IOCB:CURBYTE,X
  E326         7724: DSKFEOFTESTROL  ; ENTRY POINT FOR DSKDEOFTEST
E326 690B      7725:         ROL     IOCB:EOFFLAG,X     A BORROW BIT IN CARRY --> EOF
E328 2602      7726:         BNE      ERREOFHIT       B/ RAN OFF END OF FILE
E32A 0C39      7727:         OKRTS
               7728: 
  E32C         7729: ERREOFHIT       EQU     *
               7730:         ;JSR    ERRET
E32C BDD1F7    7731:         JSR     ERRET
E32F 03E9      7732:         FDB      ERR:EOFHIT
               7733: 
  E331         7734: ERRBADPOSITION    EQU     *
               7735:         ;CLR     IOCB:CURBYTE,X      RESET POINTER TO FILE START




ASM/6800 1.4A0: E331 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 259; Form 1     DISK FILE/DEVICE DRIVER
SDOS11G.ASM
E331 6F0D      7736:         CLR      IOCB:CURBYTE,X
               7737:         ;CLR     IOCB:CURBYTE+1,X
E333 6F0E      7738:         CLR      IOCB:CURBYTE+1,X
               7739:         ;CLR     IOCB:CURBYTE+2,X
E335 6F0F      7740:         CLR      IOCB:CURBYTE+2,X
               7741:         ;CLR     IOCB:CURBYTE+3,X
E337 6F10      7742:         CLR      IOCB:CURBYTE+3,X
E339 8DCE      7743:         BSR      DSKFEOFTEST     IN CASE THE FILE IS EMPTY
               7744:         ;JSR    ERRET
E33B BDD1F7    7745:         JSR     ERRET
E33E 03EC      7746:         FDB      ERR:BADPOSITION




ASM/6800 1.4A0: E33E SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 260; Form 1     DISK FILE/DEVICE DRIVER
SDOS11G.ASM
  E340         7748: DSKFGETFILESIZE ; GET FILE SIZE BACK FROM FILE
               7749:         ;JSR    CHECKRDLEN        MAKE SURE THERE ARE 4 BYTES IN THE READ-BACK BUFFER
E340 BDD8A0    7750:         JSR     CHECKRDLEN
E343 0004      7751:         FDB      4
               7752:         ;LDX    FCBPOINTER        COPY FCB:FILESIZE...
E345 FECEA6    7753:         LDX     FCBPOINTER
               7754:         ;LDD    FCB:FILESIZE,X    TO (TOS,TOS-1), (A,B)
E348 E612      7755:         LDAB      (FCB:FILESIZE)+1,X
E34A A611      7756:         LDAA      FCB:FILESIZE,X
               7757:         ;PSHD
E34C 37        7758:         PSHB
E34D 36        7759:         PSHA
               7760:         ;LDD    FCB:FILESIZE+2,X
E34E E614      7761:         LDAB      (FCB:FILESIZE+2)+1,X
E350 A613      7762:         LDAA      FCB:FILESIZE+2,X
E352 2012      7763:         BRA       DSKFGETPOS4     GO COPY TO READ BACK BUFFER
               7764: *
  E354         7765: DSKFGETPOS      ; GET POSITION BACK FROM FILE
               7766:         ;JSR    CHECKRDLEN        MAKE SURE THERE IS A 4 BYTE BUFFER
E354 BDD8A0    7767:         JSR     CHECKRDLEN
E357 0004      7768:         FDB      4
               7769:         ;LDX    IOCBPOINTER       COPY IOCB:CURBYTE...
E359 FECE09    7770:         LDX     IOCBPOINTER
               7771:         ;LDD    IOCB:CURBYTE,X      TO (TOS,TOS-1), (A,B)
E35C E60E      7772:         LDAB      (IOCB:CURBYTE)+1,X
E35E A60D      7773:         LDAA      IOCB:CURBYTE,X
               7774:         ;PSHD
E360 37        7775:         PSHB
E361 36        7776:         PSHA
               7777:         ;LDD    IOCB:CURBYTE+2,X
E362 E610      7778:         LDAB      (IOCB:CURBYTE+2)+1,X
E364 A60F      7779:         LDAA      IOCB:CURBYTE+2,X
  E366         7780: DSKFGETPOS4     EQU     *
               7781:         ;LDX    CODE+SDOS:IOBLOCKPTR       AND THEN TO TARGET BUFFER
E366 FECE07    7782:         LDX     CODE+SDOS:IOBLOCKPTR
               7783:         ;LDX    SCBLK:RDBUF,X      GET POINTER TO PLACE TO PUT POSITION
E369 EE0A      7784:         LDX     SCBLK:RDBUF,X
E36B E703      7785:         STAB      STATUS:DATA+3,X
  E36D         7786: DSKFGETPOS3     ; STORE 3 BYTES INTO READ-BACK BUFFER
E36D A702      7787:         STAA      STATUS:DATA+2,X




ASM/6800 1.4A0: E36D SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 261; Form 1     DISK FILE/DEVICE DRIVER
SDOS11G.ASM
               7788:         ;PULD
E36F 32        7789:         PULA
E370 33        7790:         PULB
               7791:         ;STD    STATUS:DATA+0,X
E371 E701      7792:         STAB      (STATUS:DATA+0)+1,X
E373 A700      7793:         STAA      STATUS:DATA+0,X
E375 0C39      7794:         OKRTS




ASM/6800 1.4A0: E375 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 262; Form 1     DISK FILE/DEVICE DRIVER
SDOS11G.ASM
  E377         7796: DSKDGETBADLSN     ; READ BACK THE LAST BAD LSN
               7797:         ;JSR    CHECKRDLEN        MAKE SURE WE HAVE ROOM FOR REPLY
E377 BDD8A0    7798:         JSR     CHECKRDLEN
E37A 0003      7799:         FDB      3
               7800:         ;LDX    DCBPOINTER        COPY LAST BAD LSN TO (TOS,TOS-1,A)
E37C DE06      7801:         LDX     DCBPOINTER
               7802:         ;LDD    DSKINFO:BADLSN,X
E37E E62E      7803:         LDAB      (DSKINFO:BADLSN)+1,X
E380 A62D      7804:         LDAA      DSKINFO:BADLSN,X
               7805:         ;PSHD
E382 37        7806:         PSHB
E383 36        7807:         PSHA
E384 A62F      7808:         LDAA      DSKINFO:BADLSN+2,X
E386 C6FF      7809:         LDAB      #$FF    FORGET WE HAD A BAD LSN
E388 E72D      7810:         STAB      DSKINFO:BADLSN,X
E38A E72E      7811:         STAB      DSKINFO:BADLSN+1,X
E38C E72F      7812:         STAB      DSKINFO:BADLSN+2,X
  E38E         7813: DSKFGETPOS3A     EQU     *
               7814:         ;LDX    CODE+SDOS:IOBLOCKPTR       GET POINTER TO READ BACK BUFFER
E38E FECE07    7815:         LDX     CODE+SDOS:IOBLOCKPTR
               7816:         ;LDX    SCBLK:RDBUF,X
E391 EE0A      7817:         LDX     SCBLK:RDBUF,X
E393 20D8      7818:         BRA       DSKFGETPOS3     GO STORE 3 BYTES INTO READ-BACK BUFFER
               7819: 
  E395         7820: DSKFGETPARAMS     ; GET FILE "DEVICE" PARAMETERS
               7821:         ;JSR    CHECKRDLEN        = SECTOR SIZE, NUMBER OF SECTORS PER CLUSTER
E395 BDD8A0    7822:         JSR     CHECKRDLEN
E398 0003      7823:         FDB      2+1     2 BYTES FOR SECTOR SIZE; 1 FOR # SECTORS PER CLUSTER
               7824:         ;LDX    DCBPOINTER        GET POINTER TO TABLE
E39A DE06      7825:         LDX     DCBPOINTER
               7826:         ;LDD    DSKINFO:NBPS,X   GRAB SECTOR SIZE
E39C E60A      7827:         LDAB      (DSKINFO:NBPS)+1,X
E39E A609      7828:         LDAA      DSKINFO:NBPS,X
               7829:         ;PSHD
E3A0 37        7830:         PSHB
E3A1 36        7831:         PSHA
E3A2 A611      7832:         LDAA      DSKINFO:NSPC,X   GET CLUSTER SIZE
E3A4 20E8      7833:         BRA       DSKFGETPOS3A




ASM/6800 1.4A0: E3A4 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 263; Form 1     DISK FILE/DEVICE DRIVER
SDOS11G.ASM
               7835: *
               7836: *       DSKFSTATUS -- DO A STATUS READ ON DISK FILE
               7837: *
  E3A6         7838: DSKFSTATUS       EQU     *
               7839:         ;JSR    GETFCBFROMIOCB      SET UP FCB POINTER
E3A6 BDE11E    7840:         JSR     GETFCBFROMIOCB
               7841:         ;LDX    #DSKFSTATUS0     BRANCH TABLE FOR STANDARD DISK FILE STATUS OPERATIONS
E3A9 CEE3B8    7842:         LDX     #DSKFSTATUS0
               7843:         ;JSR    TABLEBRANCH
E3AC BDE20D    7844:         JSR     TABLEBRANCH
               7845:         ;LDX    #DSKFSTATUS10    BRANCH TABLE FOR DISK FILE SPECIFIC STATUS
E3AF CEE3C6    7846:         LDX     #DSKFSTATUS10
               7847:         ;JSR    TABLEBRANCH
E3B2 BDE20D    7848:         JSR     TABLEBRANCH
               7849:         ;JMP    ERRILLDEVOP
E3B5 7EE26C    7850:         JMP     ERRILLDEVOP
               7851: 
  E3B8         7852: DSKFSTATUS0      ; BRANCH TABLE FOR STANDARD DISK FILE STATUS OPERATIONS
E3B8 0005      7853:         FCB       SC:GETPOS,SC:GETPARAMS
E3BA E354      7854:         #DSKFGETPOS     SC:GETPOS
E3BC E459      7855:         #DSKFGETCOL      SC:GETCOL
E3BE E46C      7856:         #DSKFGETEOF     SC:GETEOF
E3C0 E340      7857:         #DSKFGETFILESIZE        SC:GETFILESIZE
E3C2 E450      7858:         #DSKFGETTYPE    SC:GETTYPE
E3C4 E395      7859:         #DSKFGETPARAMS    SC:GETPARAMS
               7860: 
  E3C6         7861: DSKFSTATUS10     ; BRANCH TABLE FOR DISK FILE SPECIFIC OPERATIONS
E3C6 1011      7862:         FCB       SC:GETFILEDATE,SC:GETFILEPROT
E3C8 E424      7863:         #DSKFGETDATE     SC:GETFILEDATE
E3CA E418      7864:         #DSKFGETPROT    SC:GETFILEPROT




ASM/6800 1.4A0: E3CA SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 264; Form 1     DISK FILE/DEVICE DRIVER
SDOS11G.ASM
               7866: *
               7867: *       DSKDSTATUS -- DO A STATUS READ ON DISK DEVICE
               7868: *
  E3CC         7869: DSKDSTATUS       EQU     *
               7870:         ;LDX    #DSKDSTATUS0     BRANCH TABLE FOR DISK DEVICE STANDARD STATUS CALLS
E3CC CEE3E0    7871:         LDX     #DSKDSTATUS0
               7872:         ;JSR    TABLEBRANCH
E3CF BDE20D    7873:         JSR     TABLEBRANCH
               7874:         ;LDX    #DSKDSTATUS10    BRANCH TABLE FOR DISK DEVICE SPECIFIC STATUS CALLS
E3D2 CEE3EE    7875:         LDX     #DSKDSTATUS10
               7876:         ;JSR    TABLEBRANCH
E3D5 BDE20D    7877:         JSR     TABLEBRANCH
               7878:         ;LDX    DCBPOINTER        I DON'T RECOGNIZE THE STATUS CALL...
E3D8 DE06      7879:         LDX     DCBPOINTER
               7880:         ;LDX    DCB:DRIVER,X      SO LET I/O PACKAGE DISK DRIVER HANDLE IT
E3DA EE07      7881:         LDX     DCB:DRIVER,X
               7882:         ;JMP    [DRIVER:DISKSTATUS,X]    WITH (A) = STATUS REQUEST CODE
E3DC EE08      7883:         LDX     DRIVER:DISKSTATUS,X
E3DE 6E00      7884:         JMP     0,X
               7885: 
  E3E0         7886: DSKDSTATUS0 ; BRANCH TABLE FOR DISK DEVICE STANDARD STATUS CALLS
E3E0 0005      7887:         FCB       SC:GETPOS,SC:GETPARAMS
E3E2 E354      7888:         #DSKFGETPOS     SC:GETPOS
E3E4 E459      7889:         #DSKFGETCOL      SC:GETCOL
E3E6 E46C      7890:         #DSKFGETEOF     SC:GETEOF
E3E8 E26C      7891:         #ERRILLDEVOP    SC:GETFILESIZE   CAN'T WE DO THIS BETTER?
E3EA E447      7892:         #DSKDGETTYPE    SC:GETTYPE
E3EC E478      7893:         #DSKDGETPARAMS    SC:GETPARAMS
               7894: 
  E3EE         7895: DSKDSTATUS10     ; BRANCH TABLE FOR DISK DEVICE SPECIFIC STATUS CALLS
E3EE 1011      7896:         FCB       SC:GETLASTBADLSN,SC:GETERRORSTATS
E3F0 E377      7897:         #DSKDGETBADLSN    SC:GETLASTBADLSN
E3F2 E3F4      7898:         #DSKDGETERRORSTATS       SC:GETERRORSTATS




ASM/6800 1.4A0: E3F2 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 265; Form 1     DISK FILE/DEVICE DRIVER
SDOS11G.ASM
  E3F4         7900: DSKDGETERRORSTATS ; GET DISK DEVICE ERROR STATISTICS
               7901:         ;JSR    CHECKRDLEN        ENOUGH ROOM IN REPLY BUFFER FOR ERROR STATS?
E3F4 BDD8A0    7902:         JSR     CHECKRDLEN
E3F7 0012      7903:         FDB      (DSKINFO:ERRLSN+LSN:SIZE)-DSKINFO:SEEKERRCNT
  0001         7904:         IF      M6800!M6801
               7905:         ;LDD    SCBLK:RDBUF,X      GET TARGET ADDRESS
E3F9 E60B      7906:         LDAB      (SCBLK:RDBUF)+1,X
E3FB A60A      7907:         LDAA      SCBLK:RDBUF,X
               7908:         ;STD    TOPOINTER
E3FD D701      7909:         STAB      TOPOINTER+1
E3FF 9700      7910:         STAA      TOPOINTER
  0001         7911:         ELSE    (M6809)
 *S*           7912:         LDY     SCBLK:RDBUF,X
               7913:         FIN
  0001         7914:         IF      M6800!M6801
               7915:         ;LDD    DCBPOINTER        FIGURE OUT THE SOURCE ADDRESS
E401 D607      7916:         LDAB      DCBPOINTER+1
E403 9606      7917:         LDAA      DCBPOINTER
               7918:         ;ADDD    #DSKINFO:SEEKERRCNT
E405 CB30      7919:         ADDB      #(DSKINFO:SEEKERRCNT)&$FF
E407 8900      7920:         ADCA       #(DSKINFO:SEEKERRCNT)/256
               7921:         ;STD    FROMPOINTER
E409 D703      7922:         STAB      FROMPOINTER+1
E40B 9702      7923:         STAA      FROMPOINTER
               7924:         ;LDD    SCBLK:RPLEN,X     HOW MANY BYTES TO MOVE...
E40D E609      7925:         LDAB      (SCBLK:RPLEN)+1,X
E40F A608      7926:         LDAA      SCBLK:RPLEN,X
               7927:         ;LDX    FROMPOINTER
E411 DE02      7928:         LDX     FROMPOINTER
  0001         7929:         ELSE    (M6809)
 *S*           7930:         ;LDD    SCBLK:RPLEN,X     HOW MANY BYTES TO MOVE...
 *S*           7931:         LDAB      (SCBLK:RPLEN)+1,X
 *S*           7932:         LDAA      SCBLK:RPLEN,X
 *S*           7933:         ;LDX    DCBPOINTER        = WHERE TO GET BYTES FROM
 *S*           7934:         LDX     DCBPOINTER
 *S*           7935:         ;LEAX    DSKINFO:SEEKERRCNT,X
 *S*           7936:         IF      DSKINFO:SEEKERRCNT<0
 *S*           7937:         RPT     -DSKINFO:SEEKERRCNT
 *S*           7938:         DEX
 *S*           7939:         ELSE




ASM/6800 1.4A0: E411 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 266; Form 1     DISK FILE/DEVICE DRIVER
SDOS11G.ASM
 *S*           7940:         RPT     DSKINFO:SEEKERRCNT
 *S*           7941:         INX
 *S*           7942:         FIN
               7943:         FIN
               7944:         ;JSR    CODE+SDOS:BLOCKMOVE        USE ENTRY POINT VECTOR SO BLOCKMOVE CAN BE 
E413 BDCE42    7945:         JSR     CODE+SDOS:BLOCKMOVE
E416 0C39      7946:         OKRTS




ASM/6800 1.4A0: E416 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 267; Form 1     DISK FILE/DEVICE DRIVER
SDOS11G.ASM
  E418         7948: DSKFGETPROT     ; GET FILE PROTECTION/BACKUP BITS
               7949:         ;JSR    CHECKRDLEN        MAKE SURE REPLY BUFFER IS LARGE ENOUGH!
E418 BDD8A0    7950:         JSR     CHECKRDLEN
E41B 0001      7951:         FDB      1
               7952:         ;LDX    FCBPOINTER        THIS FILE...
E41D FECEA6    7953:         LDX     FCBPOINTER
E420 A615      7954:         LDAA      FCB:PROT,X
E422 203F      7955:         BRA       DSKFGETCOL1      GO STORE FLAG DATA IN USER BUFFER
               7956: 
  E424         7957: DSKFGETDATE ; GET CREATION DATE INFORMATION IN CLOCK FORMAT
               7958:         ;JSR    CHECKRDLEN        MUST BE 6 BYTES
E424 BDD8A0    7959:         JSR     CHECKRDLEN
E427 0006      7960:         FDB      6
               7961:         ;LDX    FCBPOINTER        THIS FILE...
E429 FECEA6    7962:         LDX     FCBPOINTER
E42C A616      7963:         LDAA      FCB:DAY,X
E42E 36        7964:         PSHA
               7965:         ;LDD    FCB:MONTH,X       AND THE YEAR
E42F E618      7966:         LDAB      (FCB:MONTH)+1,X
E431 A617      7967:         LDAA      FCB:MONTH,X
               7968:         ;LDX    CODE+SDOS:IOBLOCKPTR       = USER SYSCALL BLOCK
E433 FECE07    7969:         LDX     CODE+SDOS:IOBLOCKPTR
               7970:         ;LDX    SCBLK:RDBUF,X      WHERE TO PUT REPLY
E436 EE0A      7971:         LDX     SCBLK:RDBUF,X
               7972:         ;STD    STATUS:DATA+4,X
E438 E705      7973:         STAB      (STATUS:DATA+4)+1,X
E43A A704      7974:         STAA      STATUS:DATA+4,X
E43C 32        7975:         PULA
E43D A703      7976:         STAA      STATUS:DATA+3,X
               7977:         ;CLR     STATUS:DATA,X      SET TIME TO MIDNITE
E43F 6F00      7978:         CLR      STATUS:DATA,X
               7979:         ;CLR     STATUS:DATA+1,X
E441 6F01      7980:         CLR      STATUS:DATA+1,X
               7981:         ;CLR     STATUS:DATA+2,X
E443 6F02      7982:         CLR      STATUS:DATA+2,X
E445 0C39      7983:         OKRTS
               7984: 
  E447         7985: DSKDGETTYPE     ; GET DISK DEVICE TYPE
               7986:         ;JSR    CHECKRDLEN        MAKE SURE READ-BACK BUFFER HAS ENOUGH ROOM
E447 BDD8A0    7987:         JSR     CHECKRDLEN




ASM/6800 1.4A0: E44A SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 268; Form 1     DISK FILE/DEVICE DRIVER
SDOS11G.ASM
E44A 0001      7988:         FDB      1
               7989: *
               7990: *       IT SHOULD WORK THIS WAY! (SDOS1.2)
               7991: *       LDX     DCBPOINTER
               7992: *       LDA      DCB:DVTYP,X
               7993: *
E44C 8601      7994:         LDAA      #DVTYP.DISK
E44E 2013      7995:         BRA       DSKFGETCOL1
               7996: 
  E450         7997: DSKFGETTYPE     ; GET (DISK) FILE DEVICE TYPE
               7998:         ;JSR    CHECKRDLEN        MAKE SURE READ-BACK BUFFER HAS ENOUGH ROOM
E450 BDD8A0    7999:         JSR     CHECKRDLEN
E453 0001      8000:         FDB      1
E455 8600      8001:         LDAA      #DVTYP.FILE
E457 200A      8002:         BRA       DSKFGETCOL1




ASM/6800 1.4A0: E457 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 269; Form 1     DISK FILE/DEVICE DRIVER
SDOS11G.ASM
  E459         8004: DSKFGETCOL       ; GET COLUMN COUNTER FOR FILE
               8005:         ;JSR    CHECKRDLEN        MAKE SURE READ BACK BUFFER HAS ONE BYTE
E459 BDD8A0    8006:         JSR     CHECKRDLEN
E45C 0001      8007:         FDB      1
               8008:         ;LDX    IOCBPOINTER
E45E FECE09    8009:         LDX     IOCBPOINTER
E461 A60C      8010:         LDAA      IOCB:COLCNT,X
  E463         8011: DSKFGETCOL1      EQU     *
               8012:         ;LDX    CODE+SDOS:IOBLOCKPTR
E463 FECE07    8013:         LDX     CODE+SDOS:IOBLOCKPTR
               8014:         ;LDX    SCBLK:RDBUF,X      GET ADDRESS OF PLACE TO STORE COLUMN
E466 EE0A      8015:         LDX     SCBLK:RDBUF,X
E468 A700      8016:         STAA      STATUS:DATA,X
E46A 0C39      8017:         OKRTS
               8018: 
  E46C         8019: DSKFGETEOF      ; GET END OF FILE FLAG FOR FILE
               8020:         ;JSR    CHECKRDLEN        ENSURE AT LEAST 1 BYTE READ BUFFER
E46C BDD8A0    8021:         JSR     CHECKRDLEN
E46F 0001      8022:         FDB      1
               8023:         ;LDX    IOCBPOINTER
E471 FECE09    8024:         LDX     IOCBPOINTER
E474 A60B      8025:         LDAA      IOCB:EOFFLAG,X
E476 20EB      8026:         BRA       DSKFGETCOL1
               8027: 
  E478         8028: DSKDGETPARAMS     ; GET DISK DEVICE PARAMETERS
               8029:         ;JSR    CHECKRDLEN        MAKE SURE THERE'S ENOUGH SPACE TO READ TYPE DATA BAC
E478 BDD8A0    8030:         JSR     CHECKRDLEN
E47B 0008      8031:         FDB      DSKINFO:NCYL+1-DSKINFO:NBPS+1
  0001         8032:         IF      M6800!M6801
               8033:         ;LDX    SCBLK:RDBUF,X      GET POINTER TO READ-BACK BUFFER
E47D EE0A      8034:         LDX     SCBLK:RDBUF,X
E47F DF00      8035:         STX     TOPOINTER       SET UP TO COPY DISKINFO PHYSICAL DISK DATA
  0001         8036:         ELSE    (M6809)
 *S*           8037:         LDY     SCBLK:RDBUF,X      GET POINTER TO TARGET BUFFER
               8038:         FIN
               8039:         ;LDX    DCBPOINTER        GET POINTER TO SOURCE BUFFER
E481 DE06      8040:         LDX     DCBPOINTER
               8041:         ;LEAX    DSKINFO:NBPS,X
  0000         8042:         IF      DSKINFO:NBPS<0
 *S*           8043:         RPT     -DSKINFO:NBPS




ASM/6800 1.4A0: E481 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 270; Form 1     DISK FILE/DEVICE DRIVER
SDOS11G.ASM
 *S*           8044:         DEX
               8045:         ELSE
  0009         8046:         RPT     DSKINFO:NBPS
E483 08        8047:         INX
               8048:         FIN
               8049:         ;LDD    #DSKINFO:NCYL+1-DSKINFO:NBPS+1    = BYTE COUNT TO COPY
E48C C608      8050:         LDAB      #(DSKINFO:NCYL+1-DSKINFO:NBPS+1)&$FF
E48E 8600      8051:         LDAA      #(DSKINFO:NCYL+1-DSKINFO:NBPS+1)/256
               8052:         ;JSR    CODE+SDOS:BLOCKMOVE        MOVE THE DATA TO USERS BUFFER
E490 BDCE42    8053:         JSR     CODE+SDOS:BLOCKMOVE
E493 0C39      8054:         OKRTS           ALL DONE!




ASM/6800 1.4A0: E493 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 271; Form 1     DISK FILE/DEVICE DRIVER
SDOS11G.ASM
               8056: *       DSKDSETMAPALGORITHM -- SETS DSKINFO:MAPALGORITHM TO SPECIFIED VALUE
               8057: *
  E495         8058: DSKDSETMAPALGORITHM       EQU     *
               8059:         ;JSR    CHECKWRLEN        MAKE SURE AT LEAST 2 BYTES IN WRITE BUFFER
E495 BDD8DC    8060:         JSR     CHECKWRLEN
E498 0002      8061:         FDB      2
               8062:         ;LDX    SCBLK:WRBUF,X      GET POINTER TO MAPALGORITHM DESIRED
E49A EE04      8063:         LDX     SCBLK:WRBUF,X
               8064:         ;LDD    CONTROL:DATA,X     GET DESIRED MAP ALGORITHM NUMBER
E49C E601      8065:         LDAB      (CONTROL:DATA)+1,X
E49E A600      8066:         LDAA      CONTROL:DATA,X
               8067:         ;LDX    DCBPOINTER        UPDATE THE DISKINFO TABLE
E4A0 DE06      8068:         LDX     DCBPOINTER
E4A2 6D27      8069:         TST     DSKINFO:DIRFCB,X  IS THIS DRIVE DISMOUNTED ?
E4A4 2624      8070:         BNE      ERRDISKMOUNTED  B/ NO, CAN'T CHANGE MAP ALGORITHM UNLESS DISMOUNTED!
               8071: *
               8072: *       DSKDSETMAPALGDUMP -- CHECK TO SEE IF DUMPBUFFERS IS REQUIRED...
               8073: *       BEFORE WE SET THE MAP ALGORITHM
               8074: *       (A,B) CONTAINS NEW MAP ALGORITHM
               8075: *       (X) = DCBPOINTER
               8076: *
  E4A6         8077: DSKDSETMAPALGDUMP EQU     *
               8078:         ;CMPD    DSKINFO:MAPALGORITHM,X    SAME MAP ALGORITHM AS LAST TIME ?
E4A6 A116      8079:         CMPA      DSKINFO:MAPALGORITHM,X
E4A8 2602      8080:         BNE      MACRO:0015
E4AA E117      8081:         CMPB      (DSKINFO:MAPALGORITHM)+1,X
  E4AC         8082: MACRO:0015
E4AC 271A      8083:         BEQ      DSKDSETMAPALGRTS  B/ YES, DON'T NEED TO DO ANYTHING!
  E4AE         8084: DSKDSETMAPALG0    ; MUST DUMP BUFFERS BEFORE CHANGING MAPALGORITHM
               8085:         ;PSHD           SAVE NEW MAP ALGORITHM
E4AE 37        8086:         PSHB
E4AF 36        8087:         PSHA
               8088:         ;JSR    DSKDUMPBUFFERS   USING OLD ALGORITHM
E4B0 BDFADC    8089:         JSR     DSKDUMPBUFFERS
E4B3 2405      8090:         BCC        DSKDSETMAPALG1    B/ NO ERRORS
               8091:         ;LEAS    2,S     ERROR OCCURRED! FORGET NEW MAP ALGORITHM
  0000         8092:         IF      2<0
 *S*           8093:         RPT     -2
 *S*           8094:         DES
               8095:         ELSE




ASM/6800 1.4A0: E4B3 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 272; Form 1     DISK FILE/DEVICE DRIVER
SDOS11G.ASM
  0002         8096:         RPT     2
E4B5 31        8097:         INS
               8098:         FIN
               8099:         ;JMP    ERRORED AND RETURN TO CALLER
E4B7 7ED20A    8100:         JMP     ERRORED
               8101: 
  E4BA         8102: DSKDSETMAPALG1    ; BUFFERS ARE DUMPED
               8103:         ;PULD           RETRIEVE NEW MAP ALGORITHM
E4BA 32        8104:         PULA
E4BB 33        8105:         PULB
  E4BC         8106: DSKDSETMAPALG2    ; ENTRY POINT FOR DISK DISMOUNT
               8107:         ;LDX    DCBPOINTER
E4BC DE06      8108:         LDX     DCBPOINTER
               8109:         ;STD    DSKINFO:MAPALGORITHM,X    UPATE THE TABLE TO REFLECT NEW ALGORITHM NUM
E4BE E717      8110:         STAB      (DSKINFO:MAPALGORITHM)+1,X
E4C0 A716      8111:         STAA      DSKINFO:MAPALGORITHM,X
               8112:         ;JSR    MARKINVALID       MARK ALL SECTORS IN POOL FROM DISK AS INVALID
E4C2 BDE655    8113:         JSR     MARKINVALID
               8114:         ;JSR    FORGETLASTBADLSN   MAKE LAST BAD LSN DATA DISAPPEAR
E4C5 BDE58B    8115:         JSR     FORGETLASTBADLSN
  E4C8         8116: DSKDSETMAPALGRTS  EQU     *
E4C8 0C39      8117:         OKRTS
               8118: 
  E4CA         8119: ERRDISKMOUNTED  EQU     *
               8120:         ;JSR    ERRET
E4CA BDD1F7    8121:         JSR     ERRET
E4CD 03FC      8122:         FDB      ERR:DISKMOUNTED




ASM/6800 1.4A0: E4CD SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 273; Form 1     DISK FILE/DEVICE DRIVER
SDOS11G.ASM
               8124: *
               8125: *       DSKDOPEN -- OPEN THE DISK DEVICE
               8126: *
  E4CF         8127: DSKDOPEN        EQU     *
               8128:         ;LDX    DCBPOINTER        IS THE DISK MOUNTED ?
E4CF DE06      8129:         LDX     DCBPOINTER
E4D1 A627      8130:         LDAA      DSKINFO:DIRFCB,X  ... ?
E4D3 2604      8131:         BNE      DSKDOPEN1       B/ YES, USE MAP ALGORITHM SPECIFIED BY DISK
E4D5 C601      8132:         LDAB      #1      NO, DEFAULT TO MAPALGORITHM :0001
E4D7 8DCD      8133:         BSR      DSKDSETMAPALGDUMP GO SET THE MAP ALGORITHM
  E4D9         8134: DSKDOPEN1       ; NOW SET UP THE IOCB
               8135:         ;LDX    IOCBPOINTER
E4D9 FECE09    8136:         LDX     IOCBPOINTER
               8137:         ;LDD    #0
E4DC C600      8138:         LDAB      #(0)&$FF
E4DE 8600      8139:         LDAA      #(0)/256
E4E0 A70C      8140:         STAA      IOCB:COLCNT,X       ZERO THE COLUMN COUNT
               8141:         ;STD    IOCB:CURBYTE,X      SET FILE POSITION TO START OF DISK
E4E2 E70E      8142:         STAB      (IOCB:CURBYTE)+1,X
E4E4 A70D      8143:         STAA      IOCB:CURBYTE,X
               8144:         ;STD    IOCB:CURBYTE+2,X
E4E6 E710      8145:         STAB      (IOCB:CURBYTE+2)+1,X
E4E8 A70F      8146:         STAA      IOCB:CURBYTE+2,X
               8147:         ;STD    IOCB:DRDSI,X      FLAG 'NO DATA SECTOR READ'
E4EA E713      8148:         STAB      (IOCB:DRDSI)+1,X
E4EC A712      8149:         STAA      IOCB:DRDSI,X
E4EE 4C        8150:         INCA              = LDAA #1
E4EF A711      8151:         STAA      IOCB:DISKWRITELOCKED,X     MUST "UNLOCK" BEFORE ANY WRITES
E4F1 2055      8152:         BRA       DSKDEOFTEST     GO COMPUTE CURLSN




ASM/6800 1.4A0: E4F1 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 274; Form 1     DISK FILE/DEVICE DRIVER
SDOS11G.ASM
               8154: *       DSKDCONTROL -- DO A CONTROL OPERATION ON THE DISK DEVICE
               8155: *
  E4F3         8156: DSKDCONTROL      EQU     *
               8157:         ;LDX    #DSKDCONTROL0    BRANCH TABLE FOR DISK DEVICE STANDARD CONTROL OPERATO
E4F3 CEE507    8158:         LDX     #DSKDCONTROL0
               8159:         ;JSR    TABLEBRANCH
E4F6 BDE20D    8160:         JSR     TABLEBRANCH
               8161:         ;LDX    #DSKDCONTROL10   BRANCH TABLE FOR DISK DEVICE SPECIFIC CONTROL OPERATI
E4F9 CEE50D    8162:         LDX     #DSKDCONTROL10
               8163:         ;JSR    TABLEBRANCH
E4FC BDE20D    8164:         JSR     TABLEBRANCH
  E4FF         8165: DSKDCONTROL1     ; RE-ENTRY POINT FOR "DSKDDISMOUNT"
               8166:         ;LDX    DCBPOINTER        NOT ANY CONTROL OPERATION I RECOGNIZE...
E4FF DE06      8167:         LDX     DCBPOINTER
               8168:         ;LDX    DCB:DRIVER,X      SO LET I/O PACKAGE HANDLE IT
E501 EE07      8169:         LDX     DCB:DRIVER,X
               8170:         ;JMP    [DRIVER:DISKCONTROL,X]   WITH (A) = CONTROL CODE
E503 EE0A      8171:         LDX     DRIVER:DISKCONTROL,X
E505 6E00      8172:         JMP     0,X
               8173: 
  E507         8174: DSKDCONTROL0     ; BRANCH TABLE FOR DISK DEVICE STANDARD CONTROL OPERATIONS
E507 0001      8175:         FCB       CC:POSITION,CC:DUMPBUFFERS
E509 E528      8176:         #DSKDPOSITION   CC:POSITION
E50B FADC      8177:         #DSKDUMPBUFFERS  CC:DUMPBUFFERS
               8178: 
  E50D         8179: DSKDCONTROL10    ; BRANCH TABLE FOR DISK DEVICE SPECIFIC CONTROL OPERATIONS
E50D 1012      8180:         FCB       CC:UNLOCKDISK,CC:SETMAPALGORITHM
E50F E584      8181:         #DSKDUNLOCK      CC:UNLOCKDISK
E511 E5A8      8182:         #DSKDDISMOUNT   CC:DISMOUNTDISK
E513 E495      8183:         #DSKDSETMAPALGORITHM      CC:SETMAPALGORITHM




ASM/6800 1.4A0: E513 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 275; Form 1     DISK FILE/DEVICE DRIVER
SDOS11G.ASM
               8185: *       DSKDIMPLIEDPOSITION -- DO IMPLIED POSITIONING ON DISK DEVICE, IF REQUESTED
               8186: *
  E515         8187: DSKDIMPLIEDPOSITION
               8188:         ;LDB     #RWPOSITION:SCLEN        DOES SYSCALL BLOCK CONTAIN FILE POSITION ?
E515 C612      8189:         LDAB      #RWPOSITION:SCLEN
               8190:         ;JSR    CHECKSCLEN ...?
E517 BDD8FD    8191:         JSR     CHECKSCLEN
E51A 256D      8192:         BCS       DSKDIMPLIEDPOSOKRTS     B/ NO, DON'T POSITION DISK DEVICE
               8193:         ;LDD    RW:POSITION+2,X GET, GET THE POSITION DESIRED
E51C E611      8194:         LDAB      (RW:POSITION+2)+1,X
E51E A610      8195:         LDAA      RW:POSITION+2,X
               8196:         ;PSHD
E520 37        8197:         PSHB
E521 36        8198:         PSHA
               8199:         ;LDD    RW:POSITION,X
E522 E60F      8200:         LDAB      (RW:POSITION)+1,X
E524 A60E      8201:         LDAA      RW:POSITION,X
E526 2011      8202:         BRA       DSKDPOSITION1   GO SET POSITION OF DISK DEVICE AND CAUSE EOF IF PAST
               8203: *
               8204: *       DSKDPOSITION -- DO POSITIONING ON DISK DEVICE
               8205: *
  E528         8206: DSKDPOSITION    EQU     *
               8207:         ;JSR    CHECKWRLEN        MUST HAVE AT LEAST 4 BYTES OF POSITION DATA
E528 BDD8DC    8208:         JSR     CHECKWRLEN
E52B 0004      8209:         FDB      4
               8210:         ;LDX    SCBLK:WRBUF,X      GET POINTER TO POSITIONING DATA
E52D EE04      8211:         LDX     SCBLK:WRBUF,X
               8212:         ;LDD    CONTROL:DATA+2,X   COPY DESIRED POSITION TO (A,B,TOS,TOS-1)
E52F E603      8213:         LDAB      (CONTROL:DATA+2)+1,X
E531 A602      8214:         LDAA      CONTROL:DATA+2,X
               8215:         ;PSHD
E533 37        8216:         PSHB
E534 36        8217:         PSHA
               8218:         ;LDD    CONTROL:DATA+0,X
E535 E601      8219:         LDAB      (CONTROL:DATA+0)+1,X
E537 A600      8220:         LDAA      CONTROL:DATA+0,X
  E539         8221: DSKDPOSITION1   ; ENTRY POINT FOR DSKDIMPLIEDPOSITION
               8222:         ;LDX    IOCBPOINTER       NOW COPY DESIRED POSITION INTO CURBYTE
E539 FECE09    8223:         LDX     IOCBPOINTER
               8224:         ;STD    IOCB:CURBYTE,X




ASM/6800 1.4A0: E53C SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 276; Form 1     DISK FILE/DEVICE DRIVER
SDOS11G.ASM
E53C E70E      8225:         STAB      (IOCB:CURBYTE)+1,X
E53E A70D      8226:         STAA      IOCB:CURBYTE,X
               8227:         ;PULD
E540 32        8228:         PULA
E541 33        8229:         PULB
               8230:         ;STD    IOCB:CURBYTE+2,X
E542 E710      8231:         STAB      (IOCB:CURBYTE+2)+1,X
E544 A70F      8232:         STAA      IOCB:CURBYTE+2,X
               8233:         ;CLR     IOCB:COLCNT,X       ZERO THE COLUMN COUNTER
E546 6F0C      8234:         CLR      IOCB:COLCNT,X
               8235: *
               8236: *       DSKDEOFTEST -- COMPUTE "EOFFLAG" AND CURLSN
               8237: *
  E548         8238: DSKDEOFTEST     EQU     *
               8239:         ;LDX    DCBPOINTER        SET CURLSN = CURBYTE / (2^LOG2NBPS)
E548 DE06      8240:         LDX     DCBPOINTER
E54A E618      8241:         LDAB      DSKINFO:LOG2NBPS,X       I.E., THE DESIRED SECTOR NUMBER ON THE DISK
               8242:         ;LDX    IOCBPOINTER       FIRST, SET (A,CURLSN) := CURBYTE
E54C FECE09    8243:         LDX     IOCBPOINTER
E54F A610      8244:         LDAA      IOCB:CURBYTE+3,X
E551 A704      8245:         STAA      IOCB:CURLSN+2,X
E553 A60F      8246:         LDAA      IOCB:CURBYTE+2,X
E555 A703      8247:         STAA      IOCB:CURLSN+1,X
E557 A60E      8248:         LDAA      IOCB:CURBYTE+1,X
E559 A702      8249:         STAA      IOCB:CURLSN,X
E55B A60D      8250:         LDAA      IOCB:CURBYTE,X
  E55D         8251: DSKDEOFTESTL    ; DIVIDE CURLSN BY 2^1
E55D 44        8252:         LSRA             NOW, SET CURLSN := CURLSN / (2^LOG2NBPS)
E55E 6602      8253:         ROR     IOCB:CURLSN,X
E560 6603      8254:         ROR     IOCB:CURLSN+1,X
E562 6604      8255:         ROR     IOCB:CURLSN+2,X
E564 5A        8256:         DECB              DOWN COUNT # RIGHT SHIFTS TO MAKE
E565 26F6      8257:         BNE      DSKDEOFTESTL    B/ MUST RIGHT SHIFT SOME MORE
               8258:         ;CLR     IOCB:BYTECOUNT,X    FORCE LOCATION OF NEXT BYTE AGAIN
E567 6F16      8259:         CLR      IOCB:BYTECOUNT,X
               8260:         ;CLR     IOCB:BYTECOUNT+1,X
E569 6F17      8261:         CLR      IOCB:BYTECOUNT+1,X
               8262:         ;CLR     IOCB:EOFFLAG,X     ASSUME WE'RE NOT AT EOF
E56B 6F0B      8263:         CLR      IOCB:EOFFLAG,X
               8264:         ;LDX    DCBPOINTER        NOW DECIDE IF WE'RE AT EOF ON DISK DEVICE




ASM/6800 1.4A0: E56D SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 277; Form 1     DISK FILE/DEVICE DRIVER
SDOS11G.ASM
E56D DE06      8265:         LDX     DCBPOINTER
E56F A61B      8266:         LDAA      DSKINFO:NLSN,X  I.E., IF CURLSN >= NLSN...
E571 36        8267:         PSHA             I.E., IF 0 > NLSN - CURLSN - 1...
               8268:         ;LDD    DSKINFO:NLSN+1,X        I.E., IF NLSN - CURLSN CAUSES A BORROW
E572 E61D      8269:         LDAB      (DSKINFO:NLSN+1)+1,X
E574 A61C      8270:         LDAA      DSKINFO:NLSN+1,X
               8271:         ;LDX    IOCBPOINTER       SUBTRACT CURLSN, LOOKING FOR BORROW
E576 FECE09    8272:         LDX     IOCBPOINTER
E579 0D        8273:         SEC              THIS DOES THE "...- 1" PART
E57A E204      8274:         SBCB       IOCB:CURLSN+2,X
E57C A203      8275:         SBCA       IOCB:CURLSN+1,X
E57E 32        8276:         PULA
E57F A202      8277:         SBCA       IOCB:CURLSN,X
               8278:         ;JMP    DSKFEOFTESTROL  CARRY NOW CONTAINS BORROW BIT; GO SAVE IT
E581 7EE326    8279:         JMP     DSKFEOFTESTROL
               8280: *
               8281: *       DSKDUNLOCK -- UNLOCK THE DISK DEVICE WRITE PROTECT
               8282: *
  E584         8283: DSKDUNLOCK       EQU     *
               8284:         ;LDX    IOCBPOINTER       TURN THE WRITE LOCK FLAG OFF
E584 FECE09    8285:         LDX     IOCBPOINTER
               8286:         ;CLR     IOCB:DISKWRITELOCKED,X
E587 6F11      8287:         CLR      IOCB:DISKWRITELOCKED,X
               8288: *
               8289: *       DSKDCLOSE -- CLOSE A DISK DEVICE
               8290: *
  E589         8291: DSKDCLOSE        EQU     *
  E589         8292: DSKDIMPLIEDPOSOKRTS     ; NO IMPLIED POSITION REQUIRED
E589 0C39      8293:         OKRTS




ASM/6800 1.4A0: E589 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 278; Form 1     DISK FILE/DEVICE DRIVER
SDOS11G.ASM
               8295: *       FORGETLASTBADLSN -- RESET DSKINFO:BADLSN TO :FFFFFF
               8296: *
  E58B         8297: FORGETLASTBADLSN
               8298:         ;LDX    DCBPOINTER
E58B DE06      8299:         LDX     DCBPOINTER
E58D 86FF      8300:         LDAA      #$FF    FORGET ANY LAST BAD LSN
E58F A72D      8301:         STAA      DSKINFO:BADLSN,X
E591 A72E      8302:         STAA      DSKINFO:BADLSN+1,X
E593 A72F      8303:         STAA      DSKINFO:BADLSN+2,X
E595 39        8304:         RTS
               8305: *
               8306: *       ERRFCBOPENQ -- TEST FOR ERRORMSGS.SYS FCB SET UP ON DISK "DCBPOINTER"
               8307: *       RETURN CARRY RESET IF ERRORMSGS.SYS FCB SET UP ON DISK "DCBPOINTER"
               8308: *       ELSE RETURN WITH CARRY SET
               8309: *
  E596         8310: ERRFCBOPENQ
               8311:         ;LDX    ERRFCBPOINTER     IS ERR FCB SET UP AT ALL?
E596 FECF0C    8312:         LDX     ERRFCBPOINTER
E599 270B      8313:         BEQ      ERRFCBOPENERRRTS  B/ NOT OPEN
               8314:         ;LDX    FCB:DISKINFO,X    ARE ERRORMESSAGES ON CURRENTLY SELECTED DRIVE ?
E59B EE00      8315:         LDX     FCB:DISKINFO,X
E59D 9C06      8316:         CPX      DCBPOINTER        ...
E59F 2605      8317:         BNE      ERRFCBOPENERRRTS  B/ NO, LEAVE ERROR MESSAGE FILE ALONE
               8318:         ;LDX    ERRFCBPOINTER     THIS WILL BE CONVENIENT FOR CALLER
E5A1 FECF0C    8319:         LDX     ERRFCBPOINTER
E5A4 0C39      8320:         OKRTS
               8321: 
  E5A6         8322: ERRFCBOPENERRRTS ; ERROR MSG FCB NOT OPEN TO THIS DRIVE
E5A6 0D39      8323:         ERRORRTS




ASM/6800 1.4A0: E5A6 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 279; Form 1     DISK FILE/DEVICE DRIVER
SDOS11G.ASM
               8325: *
               8326: *       DSKDDISMOUNT -- DUMP ALL DISK DEPENDENT DATA BACK TO DISK
               8327: *       RELEASES ALL FCBS ATTACHED TO DISK
               8328: *       ALSO ZEROS DISKINFO'S IN RDSI'S
               8329: *       IF DISK I/O ERROR, LEAVE "DISK MOUNTED"
               8330: *
  E5A8         8331: DSKDDISMOUNT    ; DISMOUNT A DISK DRIVE
               8332: *       FIRST, MAKE SURE THERE ARE NO OPEN FILES!
E5A8 B6CF0A    8333:         LDAA      NFCBS     # FCBS TO SEARCH
E5AB 9704      8334:         STAA      COUNT
               8335:         ;LDX    CODE+SDOS:CONFIGURATION    NOW SCAN ALL THE FCBS
E5AD FECE03    8336:         LDX     CODE+SDOS:CONFIGURATION
               8337:         ;LDD    [CNFG:IOCBPOINTERS,X]      = ADDRESS OF LAST FCB + FCB:SIZE
E5B0 EE04      8338:         LDX     CNFG:IOCBPOINTERS,X
E5B2 E601      8339:         LDAB      1,X
E5B4 A600      8340:         LDAA      0,X
  E5B6         8341: DSKDDISMOUNTL   ; CHECK NEXT FCB TO SEE IF OPEN TO THIS DRIVE
               8342:         ;SUBD    #FCB:SIZE FIND NEXT FCB
E5B6 C01A      8343:         SUBB      #(FCB:SIZE)&$FF
E5B8 8200      8344:         SBCA       #(FCB:SIZE)/256
               8345:         ;STD    FCBPOINTER
E5BA F7CEA7    8346:         STAB      FCBPOINTER+1
E5BD B7CEA6    8347:         STAA      FCBPOINTER
               8348:         ;LDX    FCBPOINTER        IS THIS FCB ACTIVE ?
E5C0 FECEA6    8349:         LDX     FCBPOINTER
               8350:         ;LDA     FCB:REFCOUNT,X     ...?
E5C3 A60B      8351:         LDAA      FCB:REFCOUNT,X
E5C5 2722      8352:         BEQ      DSKDDISMOUNT0   B/ NO, IGNORE IT!
               8353:         ;LDX    FCB:DISKINFO,X    IS THIS FCB FOR DISK BEING DISMOUNTED?
E5C7 EE00      8354:         LDX     FCB:DISKINFO,X
E5C9 9C06      8355:         CPX      DCBPOINTER        ...?
E5CB 261C      8356:         BNE      DSKDDISMOUNT0   B/ NOPE, IGNORE IT
               8357:         ;CMPA     #1      IS IT A SYSTEM FILE OPEN ON SOME I/O CHANNEL ?
E5CD 8101      8358:         CMPA      #1
E5CF 227F      8359:         BHI      ERRFILEISOPEN   (REF COUNT > 1 ?)
               8360:         ;LDX    DSKINFO:DIRFCB,X  NO, DIRECTORY FCB FOR THIS DRIVE ?
E5D1 EE27      8361:         LDX     DSKINFO:DIRFCB,X
E5D3 BCCEA6    8362:         CPX      FCBPOINTER        ... ?
E5D6 2711      8363:         BEQ      DSKDDISMOUNT0   B/ YES, THAT'S OK...
               8364:         ;LDX    FCB:DISKINFO,X    NO, MAYBE DISKMAP.SYS FCB ?




ASM/6800 1.4A0: E5D8 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 280; Form 1     DISK FILE/DEVICE DRIVER
SDOS11G.ASM
E5D8 EE00      8365:         LDX     FCB:DISKINFO,X
               8366:         ;LDX    DSKINFO:MAPFCB,X   ... ?
E5DA EE29      8367:         LDX     DSKINFO:MAPFCB,X
E5DC BCCEA6    8368:         CPX      FCBPOINTER        ... ?
E5DF 2708      8369:         BEQ      DSKDDISMOUNT0   B/ YES, THAT'S OK
               8370:         ;LDX    ERRFCBPOINTER     IS IT THE ERROR MESSAGE FILE ?
E5E1 FECF0C    8371:         LDX     ERRFCBPOINTER
E5E4 BCCEA6    8372:         CPX      FCBPOINTER        ... ?
E5E7 2667      8373:         BNE      ERRFILEISOPEN   B/ NO, A NON-SYSTEM FILE IS STILL OPEN!
  E5E9         8374: DSKDDISMOUNT0   ; THIS FCB IS NOT OPEN TO THIS DISK, OR IS A SYSTEM FILE OPEN ONLY ONC
               8375:         ;LDD    FCBPOINTER        GET FCB ADDRESS
E5E9 F6CEA7    8376:         LDAB      FCBPOINTER+1
E5EC B6CEA6    8377:         LDAA      FCBPOINTER
               8378:         ;DEC     COUNT    DECREMENT # FCBS TO SEARCH
E5EF 7A0004    8379:         DEC      COUNT
E5F2 26C2      8380:         BNE      DSKDDISMOUNTL   B/ MORE FCBS TO CHECK FOR OPEN TO THIS DISK
               8381: *       ASSERT: NO NON-SYSTEM FCBS ARE OPEN TO DISK BEING DISMOUNTED
E5F4 8DA0      8382:         BSR      ERRFCBOPENQ       IS FCB FOR ERRORMSGS.SYS SET UP?
E5F6 250C      8383:         BCS       DSKDDISMOUNT2   B/ NOPE
E5F8 FFCEA6    8384:         STX     FCBPOINTER        YES, CHECK TO SEE IF ERRORMSGS.SYS IS DELETED
E5FB A60A      8385:         LDAA      FCB:FLAGS,X        IS IT DELETED?
E5FD 8520      8386:         BITA      #FCBFLG::DELETED  ...?
E5FF 2703      8387:         BEQ      DSKDDISMOUNT2   B/ NO, NO SPECIAL ACTION NEEDED
               8388:         ;JSR    DSKFDELETESYSIOCB YES, PUT CLUSTERS BACK IN FREE SPACE
E601 BDDE4B    8389:         JSR     DSKFDELETESYSIOCB
  E604         8390: DSKDDISMOUNT2   ; RELEASE HOLD ON DISKMAP.SYS
               8391:         ;JSR    DSKDUMPBUFFERS   DUMP ALL THE SECTOR BUFFERS BACK TO DISK
E604 BDFADC    8392:         JSR     DSKDUMPBUFFERS
E607 8611      8393:         LDAA      #CC:DISMOUNTDISK  LET DRIVER KNOW THAT WE ARE DONE WITH THIS DISK
               8394:         ;JSR    DSKDCONTROL1     (DO A CONTROL OPERATION!)
E609 BDE4FF    8395:         JSR     DSKDCONTROL1
               8396:         ;LDD    #1              NOW SET DISK MAP ALGORITHM BACK TO ONE, JUST TO BE SAF
E60C C601      8397:         LDAB      #(1)&$FF
E60E 8600      8398:         LDAA      #(1)/256
               8399:         ;JSR    DSKDSETMAPALG2    MARK ALL SECTORS INVALID, FORGET LAST BAD LSN
E610 BDE4BC    8400:         JSR     DSKDSETMAPALG2
               8401:         ;LDX    DCBPOINTER        RESET THE ERROR STATISTICS
E613 DE06      8402:         LDX     DCBPOINTER
               8403:         ;LDA     #$FF    MARK "NO ERROR LSN"
E615 86FF      8404:         LDAA      #$FF




ASM/6800 1.4A0: E615 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 281; Form 1     DISK FILE/DEVICE DRIVER
SDOS11G.ASM
               8405:         ;STA     DSKINFO:ERRLSN,X
E617 A73F      8406:         STAA      DSKINFO:ERRLSN,X
               8407:         ;STA     DSKINFO:ERRLSN+1,X
E619 A740      8408:         STAA      DSKINFO:ERRLSN+1,X
               8409:         ;STA     DSKINFO:ERRLSN+2,X
E61B A741      8410:         STAA      DSKINFO:ERRLSN+2,X
               8411:         ;LDB     #DSKINFO:ERRLSN-DSKINFO:SEEKERRCNT
E61D C60F      8412:         LDAB      #DSKINFO:ERRLSN-DSKINFO:SEEKERRCNT
  E61F         8413: DSKDDISMOUNTZ   ; ZERO THE ERROR STATISTICS LOOP
               8414:         ;CLR     DSKINFO:SEEKERRCNT,X     ZERO A STATISTIC BYTE
E61F 6F30      8415:         CLR      DSKINFO:SEEKERRCNT,X
E621 08        8416:         INX
E622 5A        8417:         DECB
E623 26FA      8418:         BNE      DSKDDISMOUNTZ   B/ MORE BYTES TO ZERO
               8419:         ;LDX    DCBPOINTER        RELEASE DIRFCB
E625 DE06      8420:         LDX     DCBPOINTER
               8421:         ;LDX    DSKINFO:DIRFCB,X
E627 EE27      8422:         LDX     DSKINFO:DIRFCB,X
E629 2723      8423:         BEQ      DSKDDISMOUNTOKRTS       B/ NOT BUSY, THIS DRIVE WASN'T MOUNTED
               8424:         ;CLR     FCB:REFCOUNT,X     WAS BUSY, LET GO OF FCB
E62B 6F0B      8425:         CLR      FCB:REFCOUNT,X
               8426:         ;LDX    DCBPOINTER
E62D DE06      8427:         LDX     DCBPOINTER
               8428:         ;LDX    DSKINFO:MAPFCB,X
E62F EE29      8429:         LDX     DSKINFO:MAPFCB,X
E631 2702      8430:         BEQ      DSKDDISMOUNT1   B/ UNUSUAL, THERE WAS NO MAP FILE!
               8431:         ;CLR     FCB:REFCOUNT,X     LET GO OF MAP FCB
E633 6F0B      8432:         CLR      FCB:REFCOUNT,X
  E635         8433: DSKDDISMOUNT1   EQU     *
               8434:         ;LDX    DCBPOINTER        MARK ALL SYSTEM FCBS OPEN TO DISK AS AVAILABLE
E635 DE06      8435:         LDX     DCBPOINTER
E637 4F        8436:         CLRA              THE UNIVERSAL "INITIAL" VALUE
E638 5F        8437:         CLRB
               8438:         ;STD    DSKINFO:DIRFCB,X  MARK DISKINFO FCBS AS NOT SET UP
E639 E728      8439:         STAB      (DSKINFO:DIRFCB)+1,X
E63B A727      8440:         STAA      DSKINFO:DIRFCB,X
               8441:         ;STD    DSKINFO:MAPFCB,X   (I.E., MARK DISK AS DISMOUNTED)
E63D E72A      8442:         STAB      (DSKINFO:MAPFCB)+1,X
E63F A729      8443:         STAA      DSKINFO:MAPFCB,X
               8444:         ;JSR    ERRFCBOPENQ       IS ERRORMSGS.SYS FCB SET UP?




ASM/6800 1.4A0: E641 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 282; Form 1     DISK FILE/DEVICE DRIVER
SDOS11G.ASM
E641 BDE596    8445:         JSR     ERRFCBOPENQ
E644 2508      8446:         BCS       DSKDDISMOUNTOKRTS       B/ NO, LEAVE ERR FCB ALONE
               8447:         ;CLR     FCB:REFCOUNT,X     RELEASE OUR HOLD ON ERRORMSGS.SYS FILE
E646 6F0B      8448:         CLR      FCB:REFCOUNT,X
               8449:         ;STD    ERRFCBPOINTER     AND FORGET THE FCB
E648 F7CF0D    8450:         STAB      ERRFCBPOINTER+1
E64B B7CF0C    8451:         STAA      ERRFCBPOINTER
  E64E         8452: DSKDDISMOUNTOKRTS
E64E 0C39      8453:         OKRTS
               8454: 
  E650         8455: ERRFILEISOPEN   ; SOMETHING OTHER THAN A SYSTEM FILE IS OPEN!
               8456:         ;JSR    ERRET
E650 BDD1F7    8457:         JSR     ERRET
E653 03EA      8458:         FDB      ERR:FILEISOPEN
               8459: *                       NOTE: DELETED FILES ARE IMPORTANT...
               8460: *                       BECAUSE THEY STILL OWN VALUABLE DISK SPACE
               8461: *                       THAT HAS NOT YET BEEN DE-ALLOCATED!




ASM/6800 1.4A0: E653 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 283; Form 1     DISK FILE/DEVICE DRIVER
SDOS11G.ASM
               8463: *       MARKINVALID -- MARK DISK SECTORS FROM DISK "DCBPOINTER" AS INVALID
               8464: *
  E655         8465: MARKINVALID
               8466:         ;LDX    LASTSECTORREADQ+RDSI:FLINK POINTER TO BASE OF LRU QUEUE
E655 FECEF6    8467:         LDX     LASTSECTORREADQ+RDSI:FLINK
  E658         8468: MARKINVALIDL      ; MARK THIS DISK SECTOR AS INVALID IF FROM DISK "DCBPOINTER"
               8469:         ;LDD    RDSI:DISKINFO,X IS SECTOR FROM DISK WE'RE MARKING INVALID?
E658 E601      8470:         LDAB      (RDSI:DISKINFO)+1,X
E65A A600      8471:         LDAA      RDSI:DISKINFO,X
               8472:         ;CMPD    DCBPOINTER        ...?
E65C 9106      8473:         CMPA      DCBPOINTER
E65E 2602      8474:         BNE      MACRO:0016
E660 D107      8475:         CMPB      DCBPOINTER+1
  E662         8476: MACRO:0016
E662 2612      8477:         BNE      MARKINVALID1      B/ NO, LEAVE SECTOR BUFFER ALONE
               8478:         ;CLR     RDSI:MODIFIED,X MARK SECTOR AS INVALID.
E664 6F0B      8479:         CLR      RDSI:MODIFIED,X
               8480:         ;CLR     RDSI:STATE,X     ASSERT: MODIFIED=STATE=0, BUT I'M PARANOID ANYWAY!
E666 6F0C      8481:         CLR      RDSI:STATE,X
               8482:         ;CLR     RDSI:DISKINFO,X MARK RDSI AS "INITRDSIS" DID...
E668 6F00      8483:         CLR      RDSI:DISKINFO,X
               8484:         ;CLR     RDSI:DISKINFO+1,X       SO THEY POINT TO DUMMY DISKINFO TABLE
E66A 6F01      8485:         CLR      RDSI:DISKINFO+1,X
               8486:         ;LDA     #1      AND MAKE SURE IT DOESN'T SELECT MAGIC "0" SECTOR!
E66C 8601      8487:         LDAA      #1
E66E A702      8488:         STAA      RDSI:LSN,X      (I.E., RDSI:LSN,...+1,...+2 <> 0)
               8489: *       THIS IS IN CASE MAP ALGORITHM GETS CHANGED...
               8490: *       WHICH INVALIDATES THE LOGICAL TO PHYSICAL MAPPING!
E670 FFCEA4    8491:         STX     RDSIPOINTER     SAVE POINTER FOR NEXT ITERATION
               8492:         ;JSR    REMOVERDSI      SO THAT IOCB REFERENCES TO SECTOR DISAPPEAR
E673 BDFA02    8493:         JSR     REMOVERDSI
  E676         8494: MARKINVALID1      ; PROCESS NEXT SECTOR ON LIST
               8495:         ;LDX    RDSI:FLINK,X    FIND NEXT RDSI
E676 EE07      8496:         LDX     RDSI:FLINK,X
E678 8CCEEF    8497:         CPX      #LASTSECTORREADQ
E67B 26DB      8498:         BNE      MARKINVALIDL      B/ NOT END OF LRU QUEUE
E67D 0C39      8499:         OKRTS           ALL DONE!




ASM/6800 1.4A0: E67D SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 284; Form 1     DISK FILE DRIVERS -- DIRECTORY MANAGEMENT ROUTINES
SDOS11G.ASM
               8501: *  SEARCHDIR -- SEARCHES DIRECTORY FILE FOR NAME (X)...
               8502: *       ON DRIVE SPECIFIED BY DCBPOINTER
               8503: *       IF DSKINFO:DIRFCB IS ZERO FOR THIS DRIVE,
               8504: *               SEARCHDIR AUTOMATICALLY LOCATES DIRECTORY.SYS, DISKMAP.SYS, AND ERRORM
               8505: *               AND FILLS IN THE FCBS IN THE DISKINFO TABLE FOR THESE FILES
               8506: *               (EFFECTIVELY AN AUTOMATIC "MOUNT" DISK COMMAND)
               8507: *       OKRTS MEANS "FILE FOUND" (BUT DIR:HCSIC MIGHT BE ZERO!)
               8508: *               (X), DIRENTRY POINTS TO DIRECTORY ENTRY
               8509: *               DIRENTRYDISP SPECIFIES DISPLACEMENT INTO SECTOR OF DIRECTORY ENTRY
               8510: *               SYSIOCB:CURLSN CONTAINS LOGICAL SECTOR NUMBER OF DIRECTORY SECTOR
               8511: *               FCBPOINTER SELECTS DIRECTORY.SYS FILE
               8512: *               RDSIPOINTER SELECTS DIRECTORY SECTOR POINTED TO BY (X)
               8513: *       ERRET ON EXIT WITH (X) = "NOT FOUND" MEANS:
               8514: *               FREEDIRLSN CONTAINS LSN OF DIRECTORY SECTOR CONTAINING FREE ENTRY
               8515: *                = 0 --> DIRECTORY IS FULL
               8516: *               FREEDIRENTRYDISP SPECIFIES DISPLACEMENT INTO SECTOR OF DIRECTORY ENTRY
               8517: *               FCBPOINTER SELECTS DIRECTORY.SYS FILE
               8518: *       ERRET WITH (X) <> "FILE NOT FOUND" MEANS
               8519: *               SOME FATAL PROBLEM OCCURRED
               8520: *               NO GAURANTEES ABOUT ANYTHING!
               8521: *
               8522: *  SEARCHDIRCREATE -- SEARCH DIRECTORY FOR FILENAME(X)
               8523: *       AND CREATE EMPTY DIRECTORY SLOT IF FILENAME IS NOT IN DIRECTORY
               8524: *       OKRTS MEANS EITHER THE NAME WAS FOUND, OR AN EMPTY SLOT WAS FOUND
               8525: *               SYSIOCB:CURLSN CONTAINS LSN OF DIRECTORY SECTOR
               8526: *               (X), DIRENTRY CONTAINS POINTER TO DIRECTORY ENTRY (SECTOR IS READ IN)
               8527: *               RDSIPOINTER SELECTS DIRECTORY SECTOR POINTED TO BY (X)
               8528: *               DIRENTRYDISP CONTAINS DISPLACEMENT TO DIRECTORY ENTRY FROM SECTORBASE
               8529: *               IF DIR:HCSIC(DIRENTRY) <> 0, THEN AN OLD FILE EXISTS TO BE REPLACED
               8530: *               IF =0, THIS DIRECTORY ENTRY IS FREE IF NO CURRENTLY OPEN FCB OWNS IT
               8531: *               IF DIRECTORY WAS FULL, AND NO FREE SLOTS WERE AVAILABLE,
               8532: *               THE DIRECTORY WAS AUTOMATICALLY EXPANDED BY MINALLOC CLUSTERS
               8533: *               FCBPOINTER SELECTS DIRECTORY.SYS FILE
               8534: *       ERRET MEANS DIRECTORY IS FULL, AND CANNOT BE EXPANDED
               8535: *               SO THERE IS NO ROOM FOR NEW FILE
               8536: *               FCBPOINTER SELECTS DIRECTORY.SYS FILE




ASM/6800 1.4A0: E67D SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 285; Form 1     DISK FILE DRIVERS -- DIRECTORY MANAGEMENT ROUTINES
SDOS11G.ASM
               8538: *  NOTES:
               8539: *  SEARCHDIR ALWAYS COMPARES DESIRED FILENAME WITH DIRENTRY
               8540: *  IF MATCH, THEN SEARCHDIR CHECKS VALIDITY OF DIRENTRY (DIR:HCSIC<>0)
               8541: *  IF AN "EMPTY" DIRENTRY SLOT IS MATCHED, AND SLOT IS OWNED BY AN OPEN FCB,
               8542: *  THEN SEARCHDIR TREATS SLOT AS IF A REAL FILE EXISTED THERE
               8543: *  FILES WHICH ARE BRAND NEW (AREN'T REPLACEMENTS) BUT HAVE NOT YET
               8544: *  BEEN CLOSED MUST HAVE THEIR NAME PLACED IN A DIRENTRY WITH DIR:HCSIC=0
               8545: *  SO IF SYSTEM CRASHES, DIRENTRY IS AUTOMATICALLY FREE




ASM/6800 1.4A0: E67D SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 286; Form 1     DISK FILE DRIVERS -- DIRECTORY MANAGEMENT ROUTINES
SDOS11G.ASM
  E67F         8547: SEARCHDIR ; SEARCH DIRECTORY FOR FILENAME (X)
E67F 8D1F      8548:         BSR      SAVEUSERIOCB       SO WE CAN SET UP OUR OWN AS "IOCBPOINTER"
E681 8D2A      8549:         BSR      SEARCHDIRE        GO SEARCH DIRECTORY USING SYSIOCB
E683 2516      8550:         BCS       SEARCHDIRERRED    B/ CAN'T FIND IT
               8551: *
               8552: *       RESTOREUSERIOCB -- RESTORES IOCBPOINTER TO USERIOCBPOINTER
               8553: *               RESTORES FCBPOINTER TO IOCB:FCB(USERIOCBPOINTER)
               8554: *
  E685         8555: RESTOREUSERIOCB   EQU     *
               8556:         ;LDX    USERIOCBPOINTER   RESTORE VALUES TO THOSE OF INITIAL CALL TO DRIVER
E685 FECEA2    8557:         LDX     USERIOCBPOINTER
E688 FFCE09    8558:         STX     IOCBPOINTER
               8559:         ;LDX    IOCB:FCB,X  RESTORE FCB POINTER TO ITS ORIGINAL VALUE, TOO
E68B EE07      8560:         LDX     IOCB:FCB,X
E68D FFCEA6    8561:         STX     FCBPOINTER
               8562:         ;LDX    #0      MARK SYSTEM IOCB AS "CLOSED"
E690 CE0000    8563:         LDX     #0
E693 FFCF60    8564:         STX     SYSIOCB+IOCB:DRIVER
               8565:         ;LDX    DIRENTRY        TO BE NICE
E696 FECEA8    8566:         LDX     DIRENTRY
E699 0C39      8567:         OKRTS           SAY "WE FOUND AN ENTRY.."
               8568: 
  E69B         8569: SEARCHDIRERRED    ; DIDN'T FIND THE FILE NAME IN THE DIRECTORY
E69B 8DE8      8570:         BSR      RESTOREUSERIOCB   SWITCH BACK TO ORIGINAL IOCBPOINTER
               8571:         ;JMP    ERRORED GRAB THE ERROR CODE AND EXIT AGAIN
E69D 7ED20A    8572:         JMP     ERRORED
               8573: *
               8574: *       SAVEUSERIOCB -- COPIES IOCBPOINTER INTO USERIOCBPOINTER
               8575: *               PRESERVES (X) ON ENTRY AS "SEARCHNAMEP"
               8576: *
  E6A0         8577: SAVEUSERIOCB       EQU     *
E6A0 FFCEAC    8578:         STX     SEARCHNAMEP        SAVE POINTER TO DESIRED NAME
               8579:         ;LDX    IOCBPOINTER       SAVE USER'S DESIRED IOCB
E6A3 FECE09    8580:         LDX     IOCBPOINTER
E6A6 FFCEA2    8581:         STX     USERIOCBPOINTER   SO WE CAN SET UP SYSIOCB AS "THE" IOCB
               8582:         ;LDX    SEARCHNAMEP        TO BE COMPATIBLE WITH THE SPECIAL ENTRY POINT
E6A9 FECEAC    8583:         LDX     SEARCHNAMEP
E6AC 39        8584:         RTS




ASM/6800 1.4A0: E6AC SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 287; Form 1     DISK FILE DRIVERS -- DIRECTORY MANAGEMENT ROUTINES
SDOS11G.ASM
               8586: *
               8587: *       SEARCHDIRE -- ENTRY POINT TO SEARCH DIRECTORY...
               8588: *               ASSUMING IOCBPOINTER IS FREE
               8589: *
  E6AD         8590: SEARCHDIRE        EQU     *
E6AD FFCEAC    8591:         STX     SEARCHNAMEP        SAVE POINTER TO NAME TO SEARCH FOR
               8592: *       NOW SET UP TO USE SYSIOCB FOR DIRECTORY SEARCH
               8593: *               MAKES IOCBPOINTER POINT TO SYSIOCB
               8594: *               MAKES SYSIOCB+IOCB:FCB, FCBPOINTER POINT TO...
               8595: *               FCB FOR DIRECTORY.SYS IN DISKINFO TABLES
               8596: *
               8597:         ;LDX    DCBPOINTER        NOW SET UP SYSIOCB
E6B0 DE06      8598:         LDX     DCBPOINTER
               8599:         ;LDX    DSKINFO:DIRFCB,X  GET FCB ADDRESS
E6B2 EE27      8600:         LDX     DSKINFO:DIRFCB,X
E6B4 FFCEA6    8601:         STX     FCBPOINTER
               8602:         ;JSR    DSKFOPENSYSIOCB   SET UP SYSIOCB SO WE CAN SEARCH THE DIRECTORY
E6B7 BDDDFE    8603:         JSR     DSKFOPENSYSIOCB
E6BA B6CEA6    8604:         LDAA      FCBPOINTER        GET FCB ADDRESS FOR DIRECTORY
E6BD 2712      8605:         BEQ      SEARCHDIRMOUNT    B/ MUST MOUNT THE DISK
               8606:         ;JMP    SEARCHDIR1        B/ DISK HAS ALREADY BEEN MOUNTED
E6BF 7EE82D    8607:         JMP     SEARCHDIR1
               8608: 
  E6C2         8609: ERRBOOTCKSUMFAIL   EQU     *
               8610:         ;JSR    ERRET
E6C2 BDD1F7    8611:         JSR     ERRET
E6C5 03E8      8612:         FDB      ERR:BOOTCKSUMFAIL
               8613: 
  E6C7         8614: ERRNBPCTOOBIG      EQU     *
               8615:         ;JSR    ERRET
E6C7 BDD1F7    8616:         JSR     ERRET
E6CA 03ED      8617:         FDB      ERR:NBPCTOOBIG
               8618: 
  E6CC         8619: ERRWRONGFILESYSTEM      ; FILE STRUCTURE FORMAT IS WRONG VERSION
               8620:         ;JSR    ERRET
E6CC BDD1F7    8621:         JSR     ERRET
E6CF 03FA      8622:         FDB      ERR:WRONGFILESYSTEM




ASM/6800 1.4A0: E6CF SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 288; Form 1     DISK FILE DRIVERS -- DIRECTORY MANAGEMENT ROUTINES
SDOS11G.ASM
               8624: **** MUST MOUNT DISK, SET UP DIRECTORY.SYS, DISKMAP.SYS, AND ERRORMSGS.SYS FCBS
               8625: **** FIRST, SET UP DSKINFO INFORMATION
  E6D1         8626: SEARCHDIRMOUNT    EQU     *
               8627:         ;JSR    DSKDDISMOUNT    DUMP BUFFERS, WAIT FOR READAHEADS TO QUIT;
E6D1 BDE5A8    8628:         JSR     DSKDDISMOUNT
               8629: **** SHOULD THIS CALL DUMP BUFFERS INSTEAD???
               8630: *                               MARK THE MAP ALGORITHM AS INVALID
               8631:         ;LDX    #SYSIOCB  GO READ BOOT SECTOR FOR DISK
E6D4 CECF57    8632:         LDX     #SYSIOCB
               8633:         ;CLR     IOCB:CURLSN,X      = SECTOR ZERO
E6D7 6F02      8634:         CLR      IOCB:CURLSN,X
               8635:         ;CLR     IOCB:CURLSN+1,X
E6D9 6F03      8636:         CLR      IOCB:CURLSN+1,X
               8637:         ;CLR     IOCB:CURLSN+2,X
E6DB 6F04      8638:         CLR      IOCB:CURLSN+2,X
               8639:         ;JSR    FETCHSECTOR
E6DD BDFA9C    8640:         JSR     FETCHSECTOR
               8641:         ;LDX    RDSI:SECTORBASE,X  GET ADDRESS OF BOOT SECTOR
E6E0 EE05      8642:         LDX     RDSI:SECTORBASE,X
E6E2 DF02      8643:         STX     FROMPOINTER     SAVE BOOT SECTOR ADDRESS
E6E4 A610      8644:         LDAA      BOOT:FILESYSTEMVERSION,X PROPER FILE SYSTEM VERSION ?
E6E6 8010      8645:         SUBA      #FILESYSTEMVERSION      ...?
E6E8 26E2      8646:         BNE      ERRWRONGFILESYSTEM      B/ NOPE, WE CAN'T READ THIS DISKETTE!
E6EA C610      8647:         LDAB      #BOOT:DISKINFOLEN        DO CHECKSUM ON INFO STORED IN BOOT SECTOR
               8648: *       CLRA              ZERO THE CHECKSUM
  E6EC         8649: SEARCHDI1 ; ADD BYTE TO CHECKSUM
E6EC AB10      8650:         ADDA      BOOT:DISKINFO,X
E6EE 08        8651:         INX             BUMP CHECKSUM SCAN POINTER
E6EF 5A        8652:         DECB              # BYTES LEFT TO CHECKSUM
E6F0 26FA      8653:         BNE      SEARCHDI1 B/ MORE TO CHECKSUM
E6F2 4C        8654:         INCA              CHECKSUM OK (=-1)?
E6F3 01        8655:         NOP      ;ZZZ BNE      ERRBOOTCKSUMFAIL   B/ BAD BOOT SECTOR, I QUIT!
E6F4 01        8656:         NOP
  0001         8657:         IF      M6800!M6801
               8658:         ;LDD    FROMPOINTER     NOW COPY BOOTSECTOR STUFF TO DISKINFO TABLE
E6F5 D603      8659:         LDAB      FROMPOINTER+1
E6F7 9602      8660:         LDAA      FROMPOINTER
               8661:         ;ADDD    #BOOT:NSPC        = SOURCE OF BOOTSECTOR STUFF
E6F9 CB11      8662:         ADDB      #(BOOT:NSPC)&$FF
E6FB 8900      8663:         ADCA       #(BOOT:NSPC)/256




ASM/6800 1.4A0: E6FB SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 289; Form 1     DISK FILE DRIVERS -- DIRECTORY MANAGEMENT ROUTINES
SDOS11G.ASM
               8664:         ;TDX
E6FD 9700      8665:         STAA      TEMPA
E6FF D701      8666:         STAB      TEMPB
E701 DE00      8667:         LDX     TEMPX
               8668:         ;LDD    DCBPOINTER        FIGURE OUT WHERE TO PUT THE STUFF
E703 D607      8669:         LDAB      DCBPOINTER+1
E705 9606      8670:         LDAA      DCBPOINTER
               8671:         ;ADDD    #DSKINFO:NSPC
E707 CB11      8672:         ADDB      #(DSKINFO:NSPC)&$FF
E709 8900      8673:         ADCA       #(DSKINFO:NSPC)/256
               8674:         ;STD    TOPOINTER       = TARGET
E70B D701      8675:         STAB      TOPOINTER+1
E70D 9700      8676:         STAA      TOPOINTER
  0001         8677:         ELSE    (M6809)
 *S*           8678:         ;LDX    FROMPOINTER     NOW COPY BOOTSECTOR STUFF TO DISKINFO TABLE
 *S*           8679:         LDX     FROMPOINTER
 *S*           8680:         ;LEAX    BOOT:NSPC,X       = WHERE TO GET BOOTSECTOR STUFF
 *S*           8681:         IF      BOOT:NSPC<0
 *S*           8682:         RPT     -BOOT:NSPC
 *S*           8683:         DEX
 *S*           8684:         ELSE
 *S*           8685:         RPT     BOOT:NSPC
 *S*           8686:         INX
 *S*           8687:         FIN
 *S*           8688:         LDY     DCBPOINTER        DECIDE WHERE TO PUT IT
 *S*           8689:         LEAY     BOOT:NSPC,Y
               8690:         FIN
               8691:         ;LDD    #BOOT:PARAMSIZE    = # BYTES TO COPY
E70F C607      8692:         LDAB      #(BOOT:PARAMSIZE)&$FF
E711 8600      8693:         LDAA      #(BOOT:PARAMSIZE)/256
               8694:         ;JSR    CODE+SDOS:BLOCKMOVE        GO MOVE IT!
E713 BDCE42    8695:         JSR     CODE+SDOS:BLOCKMOVE
               8696:         ;LDX    DCBPOINTER        COMPUTE NUMBER OF BYTES PER CLUSTER
E716 DE06      8697:         LDX     DCBPOINTER
E718 A618      8698:         LDAA      DSKINFO:LOG2NBPS,X       = DSKINFO:NSPC*2^DSKINFO:LOG2NBPS
E71A 9700      8699:         STAA      TEMPA    (NUMBER OF TIMES TO LEFT SHIFT)
E71C 4F        8700:         CLRA              DO MULTIPLY BY SHIFTING
E71D E611      8701:         LDAB      DSKINFO:NSPC,X   *** NOTE: DSKINFO:NBPC <= 65535 !! ****
  E71F         8702: SEARCHDI3 ; SHIFT LEFT ONE PLACE
               8703:         ;ASLD            * 2^1




ASM/6800 1.4A0: E71F SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 290; Form 1     DISK FILE DRIVERS -- DIRECTORY MANAGEMENT ROUTINES
SDOS11G.ASM
E71F 58        8704:         ASLB
E720 49        8705:         ROLA
E721 25A4      8706:         BCS       ERRNBPCTOOBIG      B/ DISKINFONBPC >= 65536!
               8707:         ;DEC     TEMPA    # PLACES LEFT TO LEFT SHIFT
E723 7A0000    8708:         DEC      TEMPA
E726 26F7      8709:         BNE      SEARCHDI3 B/ SHIFT LEFT SOME MORE
               8710:         ;STD    DSKINFO:NBPC,X    STORE NUMBER OF BYTES PER CLUSTER
E728 E721      8711:         STAB      (DSKINFO:NBPC)+1,X
E72A A720      8712:         STAA      DSKINFO:NBPC,X




ASM/6800 1.4A0: E72A SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 291; Form 1     DISK FILE DRIVERS -- DIRECTORY MANAGEMENT ROUTINES
SDOS11G.ASM
               8714: *
               8715: *       COMPUTE NLCN:=INT(NLSN/NSPC)
               8716: *
E72C 8611      8717:         LDAA      #17     # QUOTIENT BITS TO GENERATE
E72E 9700      8718:         STAA      TEMPA    (FIRST Q BIT MUST ALWAYS BE 0!)
               8719:         ;LDB     DSKINFO:NLSN+2,X        SET (A,B,TEMP.DIVIDEND):=NLSN
E730 E61D      8720:         LDAB      DSKINFO:NLSN+2,X
               8721:         ;STB     TEMPB
E732 D701      8722:         STAB      TEMPB
               8723:         ;LDD    DSKINFO:NLSN,X
E734 E61C      8724:         LDAB      (DSKINFO:NLSN)+1,X
E736 A61B      8725:         LDAA      DSKINFO:NLSN,X
  E738         8726: SEARCHDI5L        ; GENERATE COMPLEMENTED QUOTIENT BIT
E738 A011      8727:         SUBA      DSKINFO:NSPC,X
E73A 2402      8728:         BCC        SEARCHDI5A B/ WENT IN, Q BIT = 1!
E73C AB11      8729:         ADDA      DSKINFO:NSPC,X   DIDN'T GO IN, RESTORE DIVIDEND (ASSERT: SETS CARRY)
  E73E         8730: SEARCHDI5A EQU     *
E73E 691F      8731:         ROL     DSKINFO:NLCN+1,X SHIFT COMPLEMENTED QUOTIENT BIT INTO QUOTIENT
E740 691E      8732:         ROL     DSKINFO:NLCN,X
E742 780001    8733:         ASL      TEMPB    SHIFT DIVIDEND LEFT ONE BIT
               8734:         ;ROLD
E745 59        8735:         ROLB
E746 49        8736:         ROLA
               8737:         ;DEC     TEMPA    DOWN COUNT # Q BITS TO GENERATE
E747 7A0000    8738:         DEC      TEMPA
E74A 26EC      8739:         BNE      SEARCHDI5L        B/ GEN ANOTHER Q BIT
               8740:         ;COM     DSKINFO:NLCN,X   COMPLEMENT QUOTIENT TO GET TRUE VALUE
E74C 631E      8741:         COM      DSKINFO:NLCN,X
               8742:         ;COM     DSKINFO:NLCN+1,X
E74E 631F      8743:         COM      DSKINFO:NLCN+1,X




ASM/6800 1.4A0: E74E SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 292; Form 1     DISK FILE DRIVERS -- DIRECTORY MANAGEMENT ROUTINES
SDOS11G.ASM
               8745: *
               8746: *       NOW GO LOOK UP CRITICAL SYSTEM FILES ***
               8747: *
               8748: *
               8749:         ;LDD    DSKINFO:NLCN,X   COMPUTE LCN OF MIDDLE OF DISK
E750 E61F      8750:         LDAB      (DSKINFO:NLCN)+1,X
E752 A61E      8751:         LDAA      DSKINFO:NLCN,X
               8752:         ;LSRD           = INT(NLCN/2)
E754 44        8753:         LSRA
E755 56        8754:         RORB
               8755:         ;STD    DSKINFO:RANDMAP,X INITZ RANDMAP TO MIDDLE OF DISK
E756 E723      8756:         STAB      (DSKINFO:RANDMAP)+1,X
E758 A722      8757:         STAA      DSKINFO:RANDMAP,X
               8758:         ;LDX    RDSIPOINTER     USE BOOT:DIRLSN TO FIND DIRECTORY.SYS ENTRY
E75A FECEA4    8759:         LDX     RDSIPOINTER
               8760:         ;LDX    RDSI:SECTORBASE,X
E75D EE05      8761:         LDX     RDSI:SECTORBASE,X
E75F A61B      8762:         LDAA      BOOT:DIRLSN,X    FETCH BOOT:DIRLSN FROM BOOT SECTOR...
E761 B7CF59    8763:         STAA      SYSIOCB+IOCB:CURLSN  AND STUFF INTO SYSTEM IOCB
               8764:         ;LDX    BOOT:DIRLSN+1,X
E764 EE1C      8765:         LDX     BOOT:DIRLSN+1,X
E766 FFCF5A    8766:         STX     SYSIOCB+IOCB:CURLSN+1
               8767:         ;LDX    #SYSIOCB
E769 CECF57    8768:         LDX     #SYSIOCB
               8769:         ;JSR    FETCHSECTOR       READ IN DIRECTORY DATA SECTOR
E76C BDFA9C    8770:         JSR     FETCHSECTOR
               8771: *                       GET ADDRESS OF DIRECTORY.SYS ENTRY...
               8772:         ;LDX    RDSI:SECTORBASE,X  WHICH (RULE!!) MUST BE 1ST ENTRY BOOT:DIRLSN
E76F EE05      8773:         LDX     RDSI:SECTORBASE,X
E771 FFCEA8    8774:         STX     DIRENTRY        SET UP SO WE CAN FIND A FREE FCB
E774 A612      8775:         LDAA      DIR:HCSIC,X       IS DIRECTORY.SYS ENTRY VALID?
               8776:         ;LBEQ    ERRDIRECTORYDAMAGED        B/ NO
E776 2603      8777:         BNE      MACRO:0017
E778 7EE828    8778:         JMP     ERRDIRECTORYDAMAGED
  E77B         8779: MACRO:0017
               8780:         ;LDX    #0      SET UP DIRENTRYDISP CORRECTLY
E77B CE0000    8781:         LDX     #0
E77E FFCEAA    8782:         STX     DIRENTRYDISP
               8783:         ;LDX    #DIRECTORYNAME    VERIFY VALIDITY OF DIRECTORY.SYS ENTRY
E781 CEE907    8784:         LDX     #DIRECTORYNAME




ASM/6800 1.4A0: E781 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 293; Form 1     DISK FILE DRIVERS -- DIRECTORY MANAGEMENT ROUTINES
SDOS11G.ASM
               8785:         ;JSR    COMPARENAMES
E784 BDEA22    8786:         JSR     COMPARENAMES
               8787:         ;LBNE    ERRDIRECTORYDAMAGED        B/ DIRECTORY.SYS NAME IS TRASH
E787 2703      8788:         BEQ      MACRO:0018
E789 7EE828    8789:         JMP     ERRDIRECTORYDAMAGED
  E78C         8790: MACRO:0018
               8791:         ;JSR    FINDFREEFCB       SINCE THIS DISK IS BEING MOUNTED, CAN'T BE ANY OPEN 
E78C BDEACA    8792:         JSR     FINDFREEFCB
               8793:         ;LDX    DCBPOINTER        SET UP FCB FOR DIRECTORY.SYS
E78F DE06      8794:         LDX     DCBPOINTER
               8795:         ;STD    DSKINFO:DIRFCB,X  SO THAT SUBSEQUENT CALLS TO "SEARCHDIR" WILL WORK
E791 E728      8796:         STAB      (DSKINFO:DIRFCB)+1,X
E793 A727      8797:         STAA      DSKINFO:DIRFCB,X
               8798:         ;LDX    SEARCHNAMEP        SAVE POINTER TO NAME THAT WE REALLY WANTED
E795 FECEAC    8799:         LDX     SEARCHNAMEP
E798 FFCEAE    8800:         STX     SEARCHSAVEP        SO WE CAN SEARCH FOR DISKMAP.SYS, ERRORMSGS.SYS FIL
               8801:         ;LDX    #DISKMAPNAME      NOW GO FIND THE DISKMAP.SYS FILE
E79B CEE917    8802:         LDX     #DISKMAPNAME
               8803:         ;JSR    SEARCHDIRE        (IOCBPOINTER IS FREE)
E79E BDE6AD    8804:         JSR     SEARCHDIRE
E7A1 252E      8805:         BCS       SEARCHDI3A B/ NO DISKMAP.SYS, WON'T BE ABLE TO MAKE NEW FILES
               8806:         ;JSR    FINDFREEFCB       FIND FCB FOR MAP FILE
E7A3 BDEACA    8807:         JSR     FINDFREEFCB
               8808:         ;LDX    DCBPOINTER        SAVE FCB ADDRESS OF MAP FILE
E7A6 DE06      8809:         LDX     DCBPOINTER
               8810:         ;STD    DSKINFO:MAPFCB,X   IN CASE SOMEONE INSISTS IN OPENING MAP
E7A8 E72A      8811:         STAB      (DSKINFO:MAPFCB)+1,X
E7AA A729      8812:         STAA      DSKINFO:MAPFCB,X
               8813:         ;CLR     SYSIOCB+IOCB:HRSN   COMPUTE LSN OF 1ST SECTOR IN MAP CLUSTER
E7AC 7FCF78    8814:         CLR      SYSIOCB+IOCB:HRSN
               8815:         ;JSR    GENHLSNPLUSHRSN SET UP TO READ 1ST SECTOR OF MAP HEADER CLUSTER
E7AF BDF7C7    8816:         JSR     GENHLSNPLUSHRSN
               8817:         ;JSR    FETCHSECTOR       GO READ SECTOR ZERO OF MAP HEADER
E7B2 BDFA9C    8818:         JSR     FETCHSECTOR
               8819:         ;LDX    RDSI:SECTORBASE,X
E7B5 EE05      8820:         LDX     RDSI:SECTORBASE,X
               8821:         ;LDD    HEADER:LCN+LCN:SIZE,X      =2ND LCN IN HEADER
E7B7 E603      8822:         LDAB      (HEADER:LCN+LCN:SIZE)+1,X
E7B9 A602      8823:         LDAA      HEADER:LCN+LCN:SIZE,X
               8824:         ;CLR     SYSIOCB+IOCB:DRSN   SO CONVERSION WILL NOT BE AFFECTED




ASM/6800 1.4A0: E7BB SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 294; Form 1     DISK FILE DRIVERS -- DIRECTORY MANAGEMENT ROUTINES
SDOS11G.ASM
E7BB 7FCF71    8825:         CLR      SYSIOCB+IOCB:DRSN
               8826:         ;JSR    CONVERTLCNTOLSN   CONVERT LCN OF CLUSTER INTO LSN
E7BE BDF77A    8827:         JSR     CONVERTLCNTOLSN
E7C1 A602      8828:         LDAA      SECTORDB:LSN,X    COPY LSN TO (TOS), (A,B)
E7C3 36        8829:         PSHA     
               8830:         ;LDD    SECTORDB:LSN+1,X
E7C4 E604      8831:         LDAB      (SECTORDB:LSN+1)+1,X
E7C6 A603      8832:         LDAA      SECTORDB:LSN+1,X
               8833:         ;LDX    DCBPOINTER        NOW MOVE MAP CLUSTER LSN ...
E7C8 DE06      8834:         LDX     DCBPOINTER
               8835:         ;STD    DSKINFO:MAPLSN+1,X       INTO DISKINFO TABLE FOR EASY ACCESS
E7CA E726      8836:         STAB      (DSKINFO:MAPLSN+1)+1,X
E7CC A725      8837:         STAA      DSKINFO:MAPLSN+1,X
E7CE 32        8838:         PULA
E7CF A724      8839:         STAA      DSKINFO:MAPLSN,X




ASM/6800 1.4A0: E7CF SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 295; Form 1     DISK FILE DRIVERS -- DIRECTORY MANAGEMENT ROUTINES
SDOS11G.ASM
  E7D1         8841: SEARCHDI3A EQU     *
               8842:         ;LDX    DEFAULTDISKDCB     ARE WE MOUNTING THE DEFAULTDISK ?
E7D1 FECE4C    8843:         LDX     DEFAULTDISKDCB
E7D4 9C06      8844:         CPX      DCBPOINTER        (I.E., DO WE NEED TO SET UP ERROR MESSAGE FCB ?)
E7D6 2616      8845:         BNE      SEARCHDI4 B/ NO, WE'D NEVER USE IT!
               8846:         ;LDX    ERRFCBPOINTER     IS ERRORMESSAGE FILE ALREADY SET UP?
E7D8 FECF0C    8847:         LDX     ERRFCBPOINTER
E7DB 2611      8848:         BNE      SEARCHDI4 B/ YES, LEAVE IT ALONE
               8849:         ;LDX    #ERRMSGSNAME     GO LOOK UP ERRORMSGS.SYS FILE
E7DD CEE927    8850:         LDX     #ERRMSGSNAME
               8851: *       IF FILE IS ALREADY SET UP ON SAME OTHER DISK, IT SHOULD BE RELEASED AND MOVED 
               8852:         ;JSR    SEARCHDIRE        (IOCBPOINTER IS FREE)
E7E0 BDE6AD    8853:         JSR     SEARCHDIRE
E7E3 2509      8854:         BCS       SEARCHDI4 B/ NOT IN DIRECTORY, TOO BAD
               8855:         ;JSR    FINDFREEFCB       FOUND ERROR MESSAGES FILE
E7E5 BDEACA    8856:         JSR     FINDFREEFCB
               8857:         ;STD    ERRFCBPOINTER     SAVE ERRORMSGS.SYS FCB ADDRESS SO WE CAN DO A QUICK 
E7E8 F7CF0D    8858:         STAB      ERRFCBPOINTER+1
E7EB B7CF0C    8859:         STAA      ERRFCBPOINTER
  E7EE         8860: SEARCHDI4 EQU     *
               8861:         ;LDX    SEARCHSAVEP        GET POINTER TO NAME WE ORIGINALLY WANTED
E7EE FECEAE    8862:         LDX     SEARCHSAVEP
               8863:         ;JMP    SEARCHDIRE        GO SEARCH THE DIRECTORY AS WE ORIGINALLY INTENDED!
E7F1 7EE6AD    8864:         JMP     SEARCHDIRE
               8865: 
  E7F4         8866: SEARCHDIRF        ; FOUND FILE NAME MATCH
E7F4 8D1B      8867:         BSR      COMPUTEDIRENTRYDISPLACEMENT
               8868:         ;LDX    DIRENTRY        IS THIS DIRECTORY ENTRY ACTUALLY IN USE ?
E7F6 FECEA8    8869:         LDX     DIRENTRY
E7F9 A612      8870:         LDAA      DIR:HCSIC,X       ...?
E7FB 260F      8871:         BNE      SEARCHDIROKRTS    B/ YES, WE FOUND DESIRED DIRECTORY ENTRY
               8872:         ;JSR    SEARCHFCBINIT       START UP THE SEARCH
E7FD BDEB50    8873:         JSR     SEARCHFCBINIT
               8874:         ;JSR    SEARCHFCBS  DOES SOME FCB OWN THIS SLOT ?
E800 BDEB60    8875:         JSR     SEARCHFCBS
E803 257B      8876:         BCS       SEARCHDIRL1       ITS JUST AN EMPTY SLOT!!!
               8877:         ;LDX    DCBPOINTER        SET UP FCB POINTER TO SELECT DIRECTORY.SYS AGAIN
E805 DE06      8878:         LDX     DCBPOINTER
               8879:         ;LDX    DSKINFO:DIRFCB,X  SINCE SEARCHFCBS BOMBED IT
E807 EE27      8880:         LDX     DSKINFO:DIRFCB,X




ASM/6800 1.4A0: E809 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 296; Form 1     DISK FILE DRIVERS -- DIRECTORY MANAGEMENT ROUTINES
SDOS11G.ASM
E809 FFCEA6    8881:         STX     FCBPOINTER
  E80C         8882: SEARCHDIROKRTS    EQU     *
               8883:         ;LDX    DIRENTRY        GRAB POINTER TO DIRECTORY ENTRY AGAIN
E80C FECEA8    8884:         LDX     DIRENTRY
E80F 0C39      8885:         OKRTS           WE FOUND THE FILE!
               8886: *
               8887: *       COMPUTEDIRENTRYDISPLACEMENT -- COMPUTES DIRENTRYDISP
               8888: *
  E811         8889: COMPUTEDIRENTRYDISPLACEMENT
               8890:         ;LDD    DIRENTRY        COMPUTE DIRECTORY ENTRY DISPLACEMENT
E811 F6CEA9    8891:         LDAB      DIRENTRY+1
E814 B6CEA8    8892:         LDAA      DIRENTRY
               8893:         ;LDX    SYSIOCB+IOCB:DRDSI  ASSERT: IOCB:DRDSI <> 0
E817 FECF69    8894:         LDX     SYSIOCB+IOCB:DRDSI
E81A FFCEA4    8895:         STX     RDSIPOINTER     CHEAT, CHEAT! MAKE THIS MOST RECENTLY READ SECTOR
               8896:         ;SUBD    RDSI:SECTORBASE,X
E81D E006      8897:         SUBB      (RDSI:SECTORBASE)+1,X
E81F A205      8898:         SBCA       RDSI:SECTORBASE,X
               8899:         ;STD    DIRENTRYDISP
E821 F7CEAB    8900:         STAB      DIRENTRYDISP+1
E824 B7CEAA    8901:         STAA      DIRENTRYDISP
E827 39        8902:         RTS
               8903: 
  E828         8904: ERRDIRECTORYDAMAGED
               8905:         ;JSR    ERRET
E828 BDD1F7    8906:         JSR     ERRET
E82B 040F      8907:         FDB      ERR:DIRECTORYDAMAGED




ASM/6800 1.4A0: E82B SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 297; Form 1     DISK FILE DRIVERS -- DIRECTORY MANAGEMENT ROUTINES
SDOS11G.ASM
  E82D         8909: SEARCHDIR1        ; DISKINFO IS ALL SET, LET'S GO!
               8910:         ;LDX    SEARCHNAMEP        GET POINTER TO NAME
E82D FECEAC    8911:         LDX     SEARCHNAMEP
               8912:         ;JSR    HASHNAME  DO INITIAL HASH
E830 BDEA57    8913:         JSR     HASHNAME
               8914:         ;CLR     WRITEFLAG        TELL LOCATECURBYTE THAT WE'RE READING
E833 7FCE9A    8915:         CLR      WRITEFLAG
               8916:         ;LDX    DCBPOINTER        GET DIRECTORY SECTOR SIZE
E836 DE06      8917:         LDX     DCBPOINTER
               8918:         ;LDD    DSKINFO:NBPS,X
E838 E60A      8919:         LDAB      (DSKINFO:NBPS)+1,X
E83A A609      8920:         LDAA      DSKINFO:NBPS,X
               8921:         ;JSR    LOCATECURBYTE       GO FIND DIRECTORY ENTRY
E83C BDF2B3    8922:         JSR     LOCATECURBYTE
E83F B6CF59    8923:         LDAA      SYSIOCB+IOCB:CURLSN  REMEMBER STARTING LSN OF DIRECTORY SEARCH
E842 B7CEB0    8924:         STAA      SEARCHSTARTLSN     SO WE KNOW WHEN TO STOP
               8925:         ;LDX    SYSIOCB+IOCB:CURLSN+1
E845 FECF5A    8926:         LDX     SYSIOCB+IOCB:CURLSN+1
E848 FFCEB1    8927:         STX     SEARCHSTARTLSN+1
               8928:         ;CLR     FREEDIRLSN      MARK 'NO FREE DIRECTORY ENTRY FOUND'
E84B 7FCEB3    8929:         CLR      FREEDIRLSN
               8930:         ;CLR     FREEDIRLSN+1
E84E 7FCEB4    8931:         CLR      FREEDIRLSN+1
               8932:         ;CLR     FREEDIRLSN+2
E851 7FCEB5    8933:         CLR      FREEDIRLSN+2




ASM/6800 1.4A0: E851 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 298; Form 1     DISK FILE DRIVERS -- DIRECTORY MANAGEMENT ROUTINES
SDOS11G.ASM
  E854         8935: SEARCHDIRS        ; SEARCH DIRECTORY SECTOR FOR NAME
               8936:         ;LDX    SYSIOCB+IOCB:DRDSI  GET ADDRESS OF DIRECTORY SECTOR
E854 FECF69    8937:         LDX     SYSIOCB+IOCB:DRDSI
               8938:         ;LDX    RDSI:SECTORBASE,X  NOTE: THIS DEPENDS ON AT LEAST 2 RDSI'S AVAILABLE!
E857 EE05      8939:         LDX     RDSI:SECTORBASE,X
E859 FFCEA8    8940:         STX     DIRENTRY        AND USE AS SEARCH STARTING POINT
               8941:         ;LDX    DCBPOINTER        COMPUTE END OF DIRECTORY SECTOR
E85C DE06      8942:         LDX     DCBPOINTER
               8943:         ;LDD    DSKINFO:NBPS,X   =SECTORBASE + DSKINFO:NBPS
E85E E60A      8944:         LDAB      (DSKINFO:NBPS)+1,X
E860 A609      8945:         LDAA      DSKINFO:NBPS,X
               8946:         ;ADDD    DIRENTRY
E862 FBCEA9    8947:         ADDB      DIRENTRY+1
E865 B9CEA8    8948:         ADCA       DIRENTRY
               8949:         ;STD    DIRSECTOREND     REMEMBER END OF DIRSECTORY
E868 F7CEB9    8950:         STAB      DIRSECTOREND+1
E86B B7CEB8    8951:         STAA      DIRSECTOREND
  E86E         8952: SEARCHDIRL        EQU     *
               8953:         ;LDX    SEARCHNAMEP        GET ADDRESS OF NAME TO FIND
E86E FECEAC    8954:         LDX     SEARCHNAMEP
               8955:         ;JSR    COMPARENAMES       COMPARE AGAINST DIRECTORY ENTRY
E871 BDEA22    8956:         JSR     COMPARENAMES
               8957:         ;LBEQ    SEARCHDIRF        B/ WE FOUND IT!
E874 2603      8958:         BNE      MACRO:0019
E876 7EE7F4    8959:         JMP     SEARCHDIRF
  E879         8960: MACRO:0019
               8961:         ;LDX    DIRENTRY        IS THIS DIRECTORY ENTRY VALID?
E879 FECEA8    8962:         LDX     DIRENTRY
E87C A612      8963:         LDAA      DIR:HCSIC,X
E87E 2634      8964:         BNE      SEARCHDIRN        B/ YES, GO FIND NEXT ENTRY
  E880         8965: SEARCHDIRL1       EQU     *
E880 B6CEB3    8966:         LDAA      FREEDIRLSN      NO, FOUND EMPTY DIRECTORY ENTRY
E883 BACEB4    8967:         ORAA      FREEDIRLSN+1    HAVE WE RECORDED EXISTENCE...
E886 BACEB5    8968:         ORAA      FREEDIRLSN+2    OF FREE DIRECTORY ENTRY YET?
E889 2622      8969:         BNE      SEARCHDIR2        B/ YES, DON'T RECORD ANOTHER
E88B 8D84      8970:         BSR      COMPUTEDIRENTRYDISPLACEMENT
               8971:         ;JSR    SEARCHFCBINIT       SET UP TO SEARCH THE FCBS
E88D BDEB50    8972:         JSR     SEARCHFCBINIT
               8973:         ;JSR    SEARCHFCBS  IS THIS ENTRY IN USE?
E890 BDEB60    8974:         JSR     SEARCHFCBS




ASM/6800 1.4A0: E893 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 299; Form 1     DISK FILE DRIVERS -- DIRECTORY MANAGEMENT ROUTINES
SDOS11G.ASM
E893 2418      8975:         BCC        SEARCHDIR2        B/ YES, FIND NEXT DIRECTORY ENTRY
E895 B6CF59    8976:         LDAA      SYSIOCB+IOCB:CURLSN  SAVE LSN OF CURRENT DIRECTORY SECTOR
E898 B7CEB3    8977:         STAA      FREEDIRLSN      AS LSN OF FREE ENTRY
               8978:         ;LDX    SYSIOCB+IOCB:CURLSN+1
E89B FECF5A    8979:         LDX     SYSIOCB+IOCB:CURLSN+1
E89E FFCEB4    8980:         STX     FREEDIRLSN+1
               8981:         ;LDD    DIRENTRYDISP    
E8A1 F6CEAB    8982:         LDAB      DIRENTRYDISP+1
E8A4 B6CEAA    8983:         LDAA      DIRENTRYDISP
               8984:         ;STD    FREEDIRENTRYDISP        AND SAVE IN CASE WE DON'T FIND THE NAME IN THE
E8A7 F7CEB7    8985:         STAB      FREEDIRENTRYDISP+1
E8AA B7CEB6    8986:         STAA      FREEDIRENTRYDISP




ASM/6800 1.4A0: E8AA SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 300; Form 1     DISK FILE DRIVERS -- DIRECTORY MANAGEMENT ROUTINES
SDOS11G.ASM
  E8AD         8988: SEARCHDIR2        EQU     *
               8989:         ;LDX    DCBPOINTER        MAKE FCBPOINTER SELECT DIRECTORY.SYS FILE AGAIN
E8AD DE06      8990:         LDX     DCBPOINTER
               8991:         ;LDX    DSKINFO:DIRFCB,X
E8AF EE27      8992:         LDX     DSKINFO:DIRFCB,X
E8B1 FFCEA6    8993:         STX     FCBPOINTER        SINCE SEARCHFCBS DESTROYED IT!
  E8B4         8994: SEARCHDIRN        EQU     *
               8995:         ;LDD    DIRENTRY        NOT HERE, FIND NEXT DIRECTORY ENTRY
E8B4 F6CEA9    8996:         LDAB      DIRENTRY+1
E8B7 B6CEA8    8997:         LDAA      DIRENTRY
               8998:         ;ADDD    #DIR:ENTRYSIZE  =THIS ENTRY + DIR:ENTRYSIZE
E8BA CB20      8999:         ADDB      #(DIR:ENTRYSIZE)&$FF
E8BC 8900      9000:         ADCA       #(DIR:ENTRYSIZE)/256
               9001:         ;STD    DIRENTRY
E8BE F7CEA9    9002:         STAB      DIRENTRY+1
E8C1 B7CEA8    9003:         STAA      DIRENTRY
               9004:         ;LDX    DIRENTRY        HIT END OF DIRECTORY SECTOR?
E8C4 FECEA8    9005:         LDX     DIRENTRY
E8C7 BCCEB8    9006:         CPX      DIRSECTOREND
E8CA 26A2      9007:         BNE      SEARCHDIRL
               9008:         ;JSR    UPDATECURBYTEF     RECORD FILE ADVANCE DELTA
E8CC BDF5BB    9009:         JSR     UPDATECURBYTEF
E8CF 2414      9010:         BCC        SEARCHDIRT        B/ NOT EOF, GO LOCATE NEXT SECTOR
E8D1 8C03E9    9011:         CPX      #ERR:EOFHIT     CHECK: END OF FILE HIT ?
E8D4 262B      9012:         BNE      SEARCHDIRERRED4   B/ NO, SOME REAL PROBLEM!
               9013:         ;CLR     SYSIOCB+IOCB:EOFFLAG RESET "EOF HIT" FLAG
E8D6 7FCF62    9014:         CLR      SYSIOCB+IOCB:EOFFLAG
               9015:         ;LDX    #0      HIT END OF DIRECTORY
E8D9 CE0000    9016:         LDX     #0
E8DC FFCF64    9017:         STX     SYSIOCB+IOCB:CURBYTE  RESET CURBYTE TO START OF DIRECTORY
E8DF FFCF66    9018:         STX     SYSIOCB+IOCB:CURBYTE+2
               9019:         ;CLR     SYSIOCB+IOCB:LOCATEDF FORCE RE-LOCATION OF SECTOR
E8E2 7FCF68    9020:         CLR      SYSIOCB+IOCB:LOCATEDF
  E8E5         9021: SEARCHDIRT        ; TEST FOR ENTIRE DIRECTORY SEARCHED
               9022:         ;LDX    DCBPOINTER        GET DIRECTORY SECTOR SIZE
E8E5 DE06      9023:         LDX     DCBPOINTER
               9024:         ;LDD    DSKINFO:NBPS,X
E8E7 E60A      9025:         LDAB      (DSKINFO:NBPS)+1,X
E8E9 A609      9026:         LDAA      DSKINFO:NBPS,X
               9027:         ;JSR    LOCATECURBYTE       AND GO LOCATE THE DESIRED SECTOR




ASM/6800 1.4A0: E8EB SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 301; Form 1     DISK FILE DRIVERS -- DIRECTORY MANAGEMENT ROUTINES
SDOS11G.ASM
E8EB BDF2B3    9028:         JSR     LOCATECURBYTE
               9029:         ;LDX    SYSIOCB+IOCB:CURLSN+1        I.E., IS CURLSN=START-OF-SEARCH LSN?
E8EE FECF5A    9030:         LDX     SYSIOCB+IOCB:CURLSN+1
E8F1 BCCEB1    9031:         CPX      SEARCHSTARTLSN+1   (TEST LS 16 BITS FIRST...
E8F4 2608      9032:         BNE      SEARCHDIRSJ       BECAUSE OF HIGHEST PROBABILITY
E8F6 B6CF59    9033:         LDAA      SYSIOCB+IOCB:CURLSN  OF MISMATCH)
               9034:         ;CMPA     SEARCHSTARTLSN
E8F9 B1CEB0    9035:         CMPA      SEARCHSTARTLSN
E8FC 2704      9036:         BEQ      SEARCHDIRNF       B/ FILE NOT FOUND
  E8FE         9037: SEARCHDIRSJ       EQU     *
               9038:         ;JMP    SEARCHDIRS        GO SEARCH ANOTHER DIRECTORY SECTOR
E8FE 7EE854    9039:         JMP     SEARCHDIRS
               9040: 
  E901         9041: SEARCHDIRERRED4   EQU     *
E901 39        9042:         RTS




ASM/6800 1.4A0: E901 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 302; Form 1     DISK FILE DRIVERS -- DIRECTORY MANAGEMENT ROUTINES
SDOS11G.ASM
  E902         9044: SEARCHDIRNF       ; FILE NOT FOUND IN DIRECTORY
               9045:         ;JSR    ERRET   CAUSE AN ERROR OF APPROPRIATE TYPE
E902 BDD1F7    9046:         JSR     ERRET
E905 03F3      9047:         FDB      ERR:FILENOTFOUND
               9048: 
E907 44495245  9049: DIRECTORYNAME     FCC       "DIRECTORY.SYS"
  0003         9050:         RPT     DIR:NAMESIZE-(*-DIRECTORYNAME)
E914 20        9051:         FCC       " "
               9052: 
E917 4449534B  9053: DISKMAPNAME       FCC       "DISKMAP.SYS"
  0005         9054:         RPT     DIR:NAMESIZE-(*-DISKMAPNAME)
E922 20        9055:         FCC       " "
               9056: 
E927 4552524F  9057: ERRMSGSNAME      FCC       "ERRORMSGS.SYS"
  0003         9058:         RPT     DIR:NAMESIZE-(*-ERRMSGSNAME)
E934 20        9059:         FCC       " "




ASM/6800 1.4A0: E936 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 303; Form 1     DISK FILE DRIVERS -- DIRECTORY MANAGEMENT ROUTINES
SDOS11G.ASM
  E937         9061: SEARCHDIRCREATE     ; SEARCH DIRECTORY AND EXPAND IF NECESSARY
               9062:         ;JSR    SAVEUSERIOCB       SO WE CAN SET UP SYSIOCB AS IOCBPOINTER
E937 BDE6A0    9063:         JSR     SAVEUSERIOCB
  E93A         9064: SEARCHDIRCREAT1     EQU     *
               9065:         ;JSR    SEARCHDIRE        GO LOOK FOR FILE FIRST
E93A BDE6AD    9066:         JSR     SEARCHDIRE
E93D 2470      9067:         BCC        SEARCHDIRCOKRTS    B/ FOUND IT, GET OUT!
E93F 8C03F3    9068:         CPX      #ERR:FILENOTFOUND       A TRUE 'FILE NOT FOUND' ERROR ?
E942 266E      9069:         BNE      SEARCHDIRCERRED    B/ NOPE, I GIVE UP!
E944 B6CEB3    9070:         LDAA      FREEDIRLSN      NOT FOUND, DID WE FIND A FREE SLOT?
E947 BACEB4    9071:         ORAA      FREEDIRLSN+1
E94A BACEB5    9072:         ORAA      FREEDIRLSN+2
E94D 2632      9073:         BNE      SEARCHDIRCNEW      B/ YES, TAKE OK EXIT
               9074:         ;CLR     SYSIOCB+IOCB:EOFFLAG FORCE ALLOCCLUSTERS TO ZERO
E94F 7FCF62    9075:         CLR      SYSIOCB+IOCB:EOFFLAG
               9076:         ;LDX    SYSIOCB+IOCB:FCB      SET UP IOCB:RDCN...
E952 FECF5E    9077:         LDX     SYSIOCB+IOCB:FCB
               9078:         ;LDX    FCB:NCLUSTERS,X    TO ALLOCATE ANOTHER CLUSTER
E955 EE0F      9079:         LDX     FCB:NCLUSTERS,X
E957 FFCF72    9080:         STX     SYSIOCB+IOCB:RDCN
               9081:         ;LDD    #1      (A,B):= # CLUSTERS TO ALLOCATE
E95A C601      9082:         LDAB      #(1)&$FF
E95C 8600      9083:         LDAA      #(1)/256
               9084:         ;JSR    ALLOCATECLUSTERS    GO ALLOCATE (AND ZERO!) ANOTHER CLUSTER
E95E BDED1B    9085:         JSR     ALLOCATECLUSTERS
E961 254F      9086:         BCS       SEARCHDIRCERRED    B/ PROBABLY NO DISK SPACE
               9087:         ;LDX    DCBPOINTER        ADD 1 CLUSTER SIZE TO FILE LENGTH
E963 DE06      9088:         LDX     DCBPOINTER
               9089:         ;LDD    DSKINFO:NBPC,X
E965 E621      9090:         LDAB      (DSKINFO:NBPC)+1,X
E967 A620      9091:         LDAA      DSKINFO:NBPC,X
               9092:         ;LDX    SYSIOCB+IOCB:FCB
E969 FECF5E    9093:         LDX     SYSIOCB+IOCB:FCB
               9094:         ;ADDD    FCB:FILESIZE+2,X
E96C EB14      9095:         ADDB      (FCB:FILESIZE+2)+1,X
E96E A913      9096:         ADCA       FCB:FILESIZE+2,X
               9097:         ;STD    FCB:FILESIZE+2,X
E970 E714      9098:         STAB      (FCB:FILESIZE+2)+1,X
E972 A713      9099:         STAA      FCB:FILESIZE+2,X
E974 2406      9100:         BCC        SEARCHDIRCREAT2     B/ NO CARRY TO PROPOGATE




ASM/6800 1.4A0: E974 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 304; Form 1     DISK FILE DRIVERS -- DIRECTORY MANAGEMENT ROUTINES
SDOS11G.ASM
               9101:         ;INC     FCB:FILESIZE+1,X
E976 6C12      9102:         INC      FCB:FILESIZE+1,X
E978 2602      9103:         BNE      SEARCHDIRCREAT2
               9104:         ;INC     FCB:FILESIZE,X
E97A 6C11      9105:         INC      FCB:FILESIZE,X
  E97C         9106: SEARCHDIRCREAT2     EQU     *
               9107:         ;LDX    SEARCHNAMEP        GET POINTER TO DESIRED FILE NAME
E97C FECEAC    9108:         LDX     SEARCHNAMEP
E97F 20B9      9109:         BRA       SEARCHDIRCREAT1     AND START OVER AGAIN




ASM/6800 1.4A0: E97F SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 305; Form 1     DISK FILE DRIVERS -- DIRECTORY MANAGEMENT ROUTINES
SDOS11G.ASM
  E981         9111: SEARCHDIRCNEW      ; MUST BE NEW SLOT
               9112:         ;LDX    FREEDIRENTRYDISP        SET UP DIRENTRYDISP
E981 FECEB6    9113:         LDX     FREEDIRENTRYDISP
E984 FFCEAA    9114:         STX     DIRENTRYDISP
               9115:         ;LDX    FREEDIRLSN+1    MAKE SURE DIRECTORY ENTRY DESIRED...
E987 FECEB4    9116:         LDX     FREEDIRLSN+1
E98A FFCF5A    9117:         STX     SYSIOCB+IOCB:CURLSN+1        IS IN MEMORY BY READING IT IN AGAIN!
               9118:         ;LDX    #SYSIOCB  COPY FREEDIRLSN TO SYSIOCB...
E98D CECF57    9119:         LDX     #SYSIOCB
E990 B6CEB3    9120:         LDAA      FREEDIRLSN      SO IT LOOKS JUST LIKE SEARCHDIR FOUND IT
E993 A702      9121:         STAA      IOCB:CURLSN,X
               9122:         ;JSR    READSECTOR        READ IN THIS DISK SECTOR
E995 BDF8F5    9123:         JSR     READSECTOR
E998 2518      9124:         BCS       SEARCHDIRCERRED    B/ DISK I/O PROBLEM
               9125:         ;LDD    RDSI:SECTORBASE,X  COMPUTE DIRENTRY POINTER JUST LIKE SEARCHDIR WOULD 
E99A E606      9126:         LDAB      (RDSI:SECTORBASE)+1,X
E99C A605      9127:         LDAA      RDSI:SECTORBASE,X
               9128:         ;ADDD    FREEDIRENTRYDISP
E99E FBCEB7    9129:         ADDB      FREEDIRENTRYDISP+1
E9A1 B9CEB6    9130:         ADCA       FREEDIRENTRYDISP
               9131:         ;STD    DIRENTRY
E9A4 F7CEA9    9132:         STAB      DIRENTRY+1
E9A7 B7CEA8    9133:         STAA      DIRENTRY
               9134:         ;JSR    WAITRDSI WAIT FOR SECTOR TO ARRIVE
E9AA BDFAA3    9135:         JSR     WAITRDSI
E9AD 2503      9136:         BCS       SEARCHDIRCERRED    B/ DISK I/O ERROR
  E9AF         9137: SEARCHDIRCOKRTS    ; FOUND A DIRECTORY ENTRY FOR NEW FILE
               9138:         ;JMP    RESTOREUSERIOCB   AND EXIT
E9AF 7EE685    9139:         JMP     RESTOREUSERIOCB
               9140: 
  E9B2         9141: SEARCHDIRCERRED    EQU     *
               9142:         ;JMP    SEARCHDIRERRED
E9B2 7EE69B    9143:         JMP     SEARCHDIRERRED




ASM/6800 1.4A0: E9B2 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 306; Form 1     DISK FILE DRIVERS -- DIRECTORY MANAGEMENT ROUTINES
SDOS11G.ASM
               9145: *
               9146: *       LOCATEDIRENTRY -- GET DIRECTORY SECTOR FOR FCB INTO MEMORY
               9147: *               SET UP DIRENTRY TO POINT TO DIRECTORY SLOT FOR FCB
               9148: *               EXIT PRODUCES EXACTLY THE SAME RESULTS AS OKRTS FROM "SEARCHDIR"
               9149: *                       (EXCEPT FCBPOINTER IS NOT DISTURBED!)
               9150: *
  E9B5         9151: LOCATEDIRENTRY    EQU     *
               9152:         ;LDX    FCBPOINTER        GET POINTER TO DIRECTORY SECTOR DESCRIPTOR
E9B5 FECEA6    9153:         LDX     FCBPOINTER
               9154:         ;JSR    READSECTOR        READ IN DIRLSN
E9B8 BDF8F5    9155:         JSR     READSECTOR
E9BB A602      9156:         LDAA      RDSI:LSN,X      SAVE LSN IN SYSIOCB IN CASE WE NEED IT LATER!
E9BD B7CF59    9157:         STAA      SYSIOCB+IOCB:CURLSN
               9158:         ;LDD    RDSI:LSN+1,X
E9C0 E604      9159:         LDAB      (RDSI:LSN+1)+1,X
E9C2 A603      9160:         LDAA      RDSI:LSN+1,X
               9161:         ;STD    SYSIOCB+IOCB:CURLSN+1
E9C4 F7CF5B    9162:         STAB      SYSIOCB+IOCB:CURLSN+1+1
E9C7 B7CF5A    9163:         STAA      SYSIOCB+IOCB:CURLSN+1
               9164:         ;LDD    RDSI:SECTORBASE,X  ADD SECTOR BASE TO DIR DISPLACEMENT
E9CA E606      9165:         LDAB      (RDSI:SECTORBASE)+1,X
E9CC A605      9166:         LDAA      RDSI:SECTORBASE,X
               9167:         ;LDX    FCBPOINTER        TO GET DIRENTRY ADDRESS
E9CE FECEA6    9168:         LDX     FCBPOINTER
               9169:         ;ADDD    FCB:DIRDISP,X
E9D1 EB06      9170:         ADDB      (FCB:DIRDISP)+1,X
E9D3 A905      9171:         ADCA       FCB:DIRDISP,X
               9172:         ;STD    DIRENTRY
E9D5 F7CEA9    9173:         STAB      DIRENTRY+1
E9D8 B7CEA8    9174:         STAA      DIRENTRY
               9175:         ;LDD    FCB:DIRDISP,X     SET UP DIRECTORY ENTRY DISPLACEMENT
E9DB E606      9176:         LDAB      (FCB:DIRDISP)+1,X
E9DD A605      9177:         LDAA      FCB:DIRDISP,X
               9178:         ;STD    DIRENTRYDISP
E9DF F7CEAB    9179:         STAB      DIRENTRYDISP+1
E9E2 B7CEAA    9180:         STAA      DIRENTRYDISP
               9181:         ;JSR    WAITRDSI WAIT FOR SECTOR TO ARRIVE
E9E5 BDFAA3    9182:         JSR     WAITRDSI
               9183:         ;LDX    DIRENTRY
E9E8 FECEA8    9184:         LDX     DIRENTRY




ASM/6800 1.4A0: E9EB SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 307; Form 1     DISK FILE DRIVERS -- DIRECTORY MANAGEMENT ROUTINES
SDOS11G.ASM
E9EB 0C39      9185:         OKRTS




ASM/6800 1.4A0: E9EB SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 308; Form 1     DISK FILE DRIVERS -- DIRECTORY MANAGEMENT ROUTINES
SDOS11G.ASM
               9187: *
               9188: *       UPDATEDIRFROMFCB -- UPDATE DIRECTORY FROM FCB(FCBPOINTER)
               9189: *       UPDATE DIRECTORY ENTRY IF FCB IS MARKED AS "UPDATEDIR" AND NOT "DELETED"
               9190: *
  E9ED         9191: UPDATEDIRFROMFCB   EQU     *
               9192:         ;LDX    FCBPOINTER        PEEK AT FCB
E9ED FECEA6    9193:         LDX     FCBPOINTER
E9F0 A60A      9194:         LDAA      FCB:FLAGS,X        DELETED FILE ?
E9F2 8520      9195:         BITA      #FCBFLG::DELETED  ...?
E9F4 262A      9196:         BNE      UPDATEDIROKRTS   B/ YES, DON'T BOTHER UPDATING DIRECTORY
E9F6 8540      9197:         BITA      #FCBFLG::UPDATEDIR MUST WE UPDATE THE DIRECTORY ?    
E9F8 2726      9198:         BEQ      UPDATEDIROKRTS   B/ DON'T HAVE TO UPDATE DIRECTORY
  E9FA         9199: LOCUPDATEDIRENTRY ; ENTRY POINT TO LOCATE AND UPDATE DIRECTORY ENTRY
E9FA 8DB9      9200:         BSR      LOCATEDIRENTRY    RATS, MUST UPDATE DIRECTORY
  E9FC         9201: UPDATEDIRENTRY   ; ENTRY FOR DIRENTRY ALREADY LOCATED
E9FC DF00      9202:         STX     TOPOINTER       COPY ALL PERTINANT FCB DATA TO DIRECTORY ENTRY
               9203:         ;LDX    FCBPOINTER        FCB DATA IS STORED IN SAME FORMAT...
E9FE FECEA6    9204:         LDX     FCBPOINTER
EA01 C60E      9205:         LDAB      #DIR:FCBDATASIZE    (# FCB BYTES TO COPY TO DIR)
  EA03         9206: UPDATEDIRL       EQU     *
EA03 A60C      9207:         LDAA      FCB:HLCN,X AS DIRECTORY ENTRY DATA
EA05 08        9208:         INX             UPDATE "FROM" POINTER
EA06 DF02      9209:         STX     FROMPOINTER
               9210:         ;LDX    TOPOINTER       STORE FCB ENTRY INTO DIRECTORY ENTRY
EA08 DE00      9211:         LDX     TOPOINTER
EA0A A710      9212:         STAA      DIR:HLCN,X       
EA0C 08        9213:         INX             UPDATE "TO" POINTER
EA0D DF00      9214:         STX     TOPOINTER
               9215:         ;LDX    FROMPOINTER
EA0F DE02      9216:         LDX     FROMPOINTER
EA11 5A        9217:         DECB              DOWN COUNT # BYTES TO COPY
EA12 26EF      9218:         BNE      UPDATEDIRL
               9219:         ;JSR    MARKMODIFIED     FORCE DIRECTORY SECTOR BACK TO DISK
EA14 BDDF7E    9220:         JSR     MARKMODIFIED
               9221:         ;LDX    FCBPOINTER        RESET THE "UPDATEDIR" FLAG
EA17 FECEA6    9222:         LDX     FCBPOINTER
EA1A A60A      9223:         LDAA      FCB:FLAGS,X
EA1C 84BF      9224:         ANDA      #(\FCBFLG::UPDATEDIR)&$FF
EA1E A70A      9225:         STAA      FCB:FLAGS,X
  EA20         9226: UPDATEDIROKRTS   EQU     *




ASM/6800 1.4A0: EA20 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 309; Form 1     DISK FILE DRIVERS -- DIRECTORY MANAGEMENT ROUTINES
SDOS11G.ASM
EA20 0C39      9227:         OKRTS




ASM/6800 1.4A0: EA20 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 310; Form 1     DISK FILE DRIVERS -- DIRECTORY MANAGEMENT ROUTINES
SDOS11G.ASM
               9229: *
               9230: *       COMPARENAMES -- COMPARES (X) TO (DIRENTRY) FOR DIR:NAMESIZE BYTES
               9231: *               DOES NOT DISTURB BUFFER
               9232: *               RETURNS Z SET IF MATCH
               9233: *               RESET IF NO MATCH
               9234: *
  EA22         9235: COMPARENAMES       EQU     *
  0001         9236:         IF      M6800!M6801
EA22 DF00      9237:         STX     TOPOINTER       SAVE "COMPARE TO" POINTER
               9238:         ;LDX    DIRENTRY        GET COMPARE AGAINST POINTER
EA24 FECEA8    9239:         LDX     DIRENTRY
  0001         9240:         ELSE    (M6809)
 *S*           9241:         LDY     DIRENTRY        GET COMPARE AGAINST POINTER
               9242:         FIN
EA27 C610      9243:         LDAB      #DIR:NAMESIZE    NUMBER OF BYTES TO COMPARE
               9244: *
               9245: *       BLOCKCOMPARE -- COMPARE (X) TO (Y) FOR (B) BYTES
               9246: *       (ON 6800/6801, (Y) IS LOCATION 0)
               9247: *       RETURN CC "Z" BIT SET IF MATCH, ELSE RESET IF NO MATCH
               9248: *
  EA29         9249: BLOCKCOMPARE        ; COMPARE (X) TO (Y) FOR (B) BYTES
  0001         9250:         IF      M6800!M6801
               9251:         ;LDA     ,X+     GET BYTE TO COMPARE
EA29 A600      9252:         LDAA      0,X
EA2B 08        9253:         INX
EA2C DF02      9254:         STX     FROMPOINTER     SAVE "FROM" POINTER
               9255:         ;LDX    TOPOINTER       = "TO" POINTER
EA2E DE00      9256:         LDX     TOPOINTER
               9257:         ;CMPA     ,X      COMPARE BYTES
EA30 A100      9258:         CMPA      0,X
EA32 2608      9259:         BNE      BLOCKCOMPARERTS     B/ STRINGS DON'T MATCH
EA34 08        9260:         INX
EA35 DF00      9261:         STX     TOPOINTER       SAVE UPDATE "TO" POINTER
               9262:         ;LDX    FROMPOINTER     GET SOURCE POINTER BACK
EA37 DE02      9263:         LDX     FROMPOINTER
  0001         9264:         ELSE    (M6809)
 *S*           9265:         ;LDA     ,X+     GET A BYTE TO COMPARE
 *S*           9266:         LDAA      0,X
 *S*           9267:         INX
 *S*           9268:         ;CMPA     ,Y+     COMPARE THEM




ASM/6800 1.4A0: EA37 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 311; Form 1     DISK FILE DRIVERS -- DIRECTORY MANAGEMENT ROUTINES
SDOS11G.ASM
 *S*           9269:         CMPA      
 *S*           9270:         BNE      BLOCKCOMPARERTS     B/ NO MATCH
               9271:         FIN
EA39 5A        9272:         DECB              DOWN COUNT # BYTES TO COMPARE
EA3A 26ED      9273:         BNE      BLOCKCOMPARE        B/ MORE TO COMPARE
  EA3C         9274: BLOCKCOMPARERTS
EA3C 39        9275:         RTS




ASM/6800 1.4A0: EA3C SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 312; Form 1     DISK FILE DRIVERS -- DIRECTORY MANAGEMENT ROUTINES
SDOS11G.ASM
               9277: *
               9278: *       HASHFOLD -- SUM NEXT 4 BYTES(X), MASK TO 6 BITS
               9279: *               RETURN SIX BIT SUM IN (A)
               9280: *               BUMP (X) BY 4
               9281: *
  EA3D         9282: HASHFOLD EQU     *
EA3D A600      9283:         LDAA      ,X      SUM NEXT 4 BYTES
EA3F AB01      9284:         ADDA      1,X
EA41 AB02      9285:         ADDA      2,X
EA43 AB03      9286:         ADDA      3,X
EA45 843F      9287:         ANDA      #%00111111      MASK OFF ASCII ZONE BITS
               9288:         ;LEAX    4,X     BUMP (X) BY 4
  0000         9289:         IF      4<0
 *S*           9290:         RPT     -4
 *S*           9291:         DEX
               9292:         ELSE
  0004         9293:         RPT     4
EA47 08        9294:         INX
               9295:         FIN
EA4B 39        9296:         RTS
               9297: *
               9298: *       HASHINSERT6 -- LEFT SHIFT (IOCB:CURBYTE+1,+2,(A)) 6 BITS
               9299: *
  EA4C         9300: HASHINSERT6      EQU     *
EA4C C606      9301:         LDAB      #6      GET COUNT OF 6
  EA4E         9302: HASHINSERT6L     EQU     *
EA4E 48        9303:         ASLA              SHIFT LEFT 1 BIT
EA4F 690F      9304:         ROL     IOCB:CURBYTE+2,X
EA51 690E      9305:         ROL     IOCB:CURBYTE+1,X
EA53 5A        9306:         DECB              DO IT 6 TIMES
EA54 26F8      9307:         BNE      HASHINSERT6L
EA56 39        9308:         RTS




ASM/6800 1.4A0: EA56 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 313; Form 1     DISK FILE DRIVERS -- DIRECTORY MANAGEMENT ROUTINES
SDOS11G.ASM
               9310: *
               9311: *       HASHNAME --  CONVERT NAME INTO INITIAL PROBE INTO DIRECTORY
               9312: *               FOLDS NAME(X) INTO 3 BYTES
               9313: *               DIVIDES BY DIRECTORYSIZE TO GET REMAINDER
               9314: *               AND PLACES REMAINDER IN IOCB:CURBYTE(SYSIOCB)
               9315: *               GUARANTEES INITIAL PROBE IS TO START OF SECTOR
               9316: *
  EA57         9317: HASHNAME  EQU     *
EA57 8DE4      9318:         BSR      HASHFOLD FOLD LEFT MOST 4 BYTES...
EA59 36        9319:         PSHA             TO GET RIGHTMOST 6 BITS
EA5A 8DE1      9320:         BSR      HASHFOLD FOLD MIDDLE LEFT 4 BYTES...
EA5C 36        9321:         PSHA             TO GET BITS 11-6
EA5D 8DDE      9322:         BSR      HASHFOLD FOLD MIDDLE RIGHT 4 BYTES...
EA5F 36        9323:         PSHA             TO GET BITS 17-12
EA60 8DDB      9324:         BSR      HASHFOLD FOLD RIGHTMOST 4 BYTES...
               9325:         ;LDX    #SYSIOCB  TO GET LEFTMOST 6 BITS
EA62 CECF57    9326:         LDX     #SYSIOCB
EA65 8DE5      9327:         BSR      HASHINSERT6      INSERT BITS 17-12
EA67 33        9328:         PULB
EA68 1B        9329:         ABA
EA69 8DE1      9330:         BSR      HASHINSERT6      INSERT BITS 11-7
EA6B 33        9331:         PULB
EA6C 1B        9332:         ABA
EA6D 8DDD      9333:         BSR      HASHINSERT6      INSERT BITS 6-0
EA6F 33        9334:         PULB
EA70 1B        9335:         ABA
EA71 A710      9336:         STAA      IOCB:CURBYTE+3,X    STORE RESULT IN IOCB:CURBYTE,X
               9337: *       CLR      IOCB:CURBYTE,X      NOW WE HAVE 24 BITS OF FOLDED NAME
               9338:         ;LDX    IOCB:DCB,X  NOW COMPUTE # SECTORS IN DIRECTORY
EA73 EE00      9339:         LDX     IOCB:DCB,X
EA75 A618      9340:         LDAA      DSKINFO:LOG2NBPS,X       = DIRSIZE/NBPS
EA77 9704      9341:         STAA      COUNT    = DIRSIZE/2^LOG2NBPS
EA79 36        9342:         PSHA             WE'LL NEED THIS LATER
               9343:         ;LDX    FCBPOINTER        GET ADDRESS OF DIRECTORY.SYS FCB
EA7A FECEA6    9344:         LDX     FCBPOINTER
               9345:         ;LDD    FCB:FILESIZE+2,X  COPY DIRSIZE TO (A,B,TEMP.DIVISOR,TEMP.DIVISOR+1)
EA7D E614      9346:         LDAB      (FCB:FILESIZE+2)+1,X
EA7F A613      9347:         LDAA      FCB:FILESIZE+2,X
               9348:         ;STD    TEMP.DIVISOR
EA81 D701      9349:         STAB      TEMP.DIVISOR+1




ASM/6800 1.4A0: EA83 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 314; Form 1     DISK FILE DRIVERS -- DIRECTORY MANAGEMENT ROUTINES
SDOS11G.ASM
EA83 9700      9350:         STAA      TEMP.DIVISOR
               9351:         ;LDD    FCB:FILESIZE,X
EA85 E612      9352:         LDAB      (FCB:FILESIZE)+1,X
EA87 A611      9353:         LDAA      FCB:FILESIZE,X
  EA89         9354: HASHNAMEL1        EQU     *
               9355:         ;LSRD           DIVISOR:=DIVISOR/2...
EA89 44        9356:         LSRA
EA8A 56        9357:         RORB
EA8B 760000    9358:         ROR     TEMP.DIVISOR
EA8E 760001    9359:         ROR     TEMP.DIVISOR+1  NOTE: NUMBER OF SECTORS IN DIRECTORY <= 32767
               9360:         ;DEC     COUNT    LOG2NBPS TIMES
EA91 7A0004    9361:         DEC      COUNT
EA94 26F3      9362:         BNE      HASHNAMEL1        LEAVING (A,B) = 0
               9363: *       NOW DIVIDE FOLDED NAME BY # OF SECTORS IN DIRECTORY TO GET REMAINDER
               9364:         ;LDX    #SYSIOCB  GET ADDRESS OF WORK IOCB
EA96 CECF57    9365:         LDX     #SYSIOCB
EA99 C618      9366:         LDAB      #24     # QUOTIENT BITS TO GENERATE
EA9B D704      9367:         STAB      COUNT    (AND IGNORE)
EA9D 4F        9368:         CLRA              ZERO OUT THE REMAINDER
EA9E 5F        9369:         CLRB
  EA9F         9370: HASHNAMEL2        EQU     *
EA9F 6810      9371:         ASL      IOCB:CURBYTE+3,X    SHIFT NEW DIVIDEND BIT INTO REMAINDER
EAA1 690F      9372:         ROL     IOCB:CURBYTE+2,X    NOTE: CARRIES ARE NOT IMPORTANT...
EAA3 690E      9373:         ROL     IOCB:CURBYTE+1,X    BECAUSE WE ONLY WANT REMAINDER, NOT QUOTIENT
               9374:         ;ROLD
EAA5 59        9375:         ROLB
EAA6 49        9376:         ROLA
               9377:         ;SUBD    TEMP.DIVISOR    DOES DIVISOR GO IN?
EAA7 D001      9378:         SUBB      TEMP.DIVISOR+1
EAA9 9200      9379:         SBCA       TEMP.DIVISOR
EAAB 2404      9380:         BCC        HASHNAME2 B/ YEP, LEAVE IT IN
               9381:         ;ADDD    TEMP.DIVISOR    NO, RESTORE BACK
EAAD DB01      9382:         ADDB      TEMP.DIVISOR+1
EAAF 9900      9383:         ADCA       TEMP.DIVISOR
  EAB1         9384: HASHNAME2 EQU     *
               9385:         ;DEC     COUNT    DOWN COUNT # QUOTIENT BITS TO IGNORE
EAB1 7A0004    9386:         DEC      COUNT
EAB4 26E9      9387:         BNE      HASHNAMEL2        B/ MORE Q BITS TO IGNORE
EAB6 A70F      9388:         STAA      IOCB:CURBYTE+2,X    STORE FOLDEDNAME MOD NUMBERSECTORS...
               9389:         ;CLR     IOCB:CURBYTE+1,X    INTO (IOCB:CURBYTE,B)




ASM/6800 1.4A0: EAB8 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 315; Form 1     DISK FILE DRIVERS -- DIRECTORY MANAGEMENT ROUTINES
SDOS11G.ASM
EAB8 6F0E      9390:         CLR      IOCB:CURBYTE+1,X
               9391:         ;CLR     IOCB:CURBYTE,X
EABA 6F0D      9392:         CLR      IOCB:CURBYTE,X
EABC 32        9393:         PULA             NOW MULTIPLY BY 2^LOG2NBPS...
  EABD         9394: HASHNAMEL3        ; TO GET LOGICAL BYTE NUMBER OF DESIRED SECTOR
EABD 58        9395:         ASLB
EABE 690F      9396:         ROL     IOCB:CURBYTE+2,X
EAC0 690E      9397:         ROL     IOCB:CURBYTE+1,X
EAC2 690D      9398:         ROL     IOCB:CURBYTE,X
EAC4 4A        9399:         DECA              DOWN COUNT # TIMES TO LEFT SHIFT
EAC5 26F6      9400:         BNE      HASHNAMEL3
EAC7 E710      9401:         STAB      IOCB:CURBYTE+3,X    STORE LAST BYTE OF :CURBYTE
EAC9 39        9402:         RTS             AND EXIT




ASM/6800 1.4A0: EAC9 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 316; Form 1     DISK FILE DRIVERS -- DIRECTORY MANAGEMENT ROUTINES
SDOS11G.ASM
               9404: *
               9405: *       FINDFREEFCB -- LOOKS FOR FCB WITH ZEROED REF COUNT
               9406: *               OKRTS IF FOUND
               9407: *                       FCB IS INITIALIZED FROM DIRENTRY
               9408: *                       REF COUNT IS SET TO ONE
               9409: *               FCBPOINTER, (X), (A,B) ARE LEFT POINTING TO FCB
               9410: *               ERRET IF NONE AVAIALABLE
               9411: *
  EACA         9412: FINDFREEFCB       EQU     *
EACA B6CF0A    9413:         LDAA      NFCBS     GET # FCBS TO SEARCH
  0001         9414:         IF      M6800!M6801
EACD 9704      9415:         STAA      COUNT
               9416:         ;LDX    CODE+SDOS:CONFIGURATION
EACF FECE03    9417:         LDX     CODE+SDOS:CONFIGURATION
               9418:         ;LDD    [CNFG:IOCBPOINTERS,X]      GET ADDRESS OF 1ST IOCB
EAD2 EE04      9419:         LDX     CNFG:IOCBPOINTERS,X
EAD4 E601      9420:         LDAB      1,X
EAD6 A600      9421:         LDAA      0,X
  EAD8         9422: FINDFREEFCBL      EQU     *
               9423:         ;SUBD    #FCB:SIZE BACK UP TO PREVIOUS FCB
EAD8 C01A      9424:         SUBB      #(FCB:SIZE)&$FF
EADA 8200      9425:         SBCA       #(FCB:SIZE)/256
               9426:         ;TDX
EADC 9700      9427:         STAA      TEMPA
EADE D701      9428:         STAB      TEMPB
EAE0 DE00      9429:         LDX     TEMPX
EAE2 6D0B      9430:         TST     FCB:REFCOUNT,X     IS THIS FCB BUSY?
EAE4 270A      9431:         BEQ      SETUPFCB  B/ NO
               9432:         ;DEC     COUNT    YES, DOWN COUNT # FCB'S TO CHECK
EAE6 7A0004    9433:         DEC      COUNT
  0001         9434:         ELSE    (M6809)
 *S*           9435:         ;LDX    CODE+SDOS:CONFIGURATION
 *S*           9436:         LDX     CODE+SDOS:CONFIGURATION
 *S*           9437:         ;LDX    [CNFG:IOCBPOINTERS,X]      GET ADDRESS OF 1ST DCB
 *S*           9438:         LDX     CNFG:IOCBPOINTERS,X
 *S*           9439:         LDX     0,X
 *S*           9440: FINDFREEFCBL
 *S*           9441:         ;LEAX    -FCB:SIZE,X       FIND PREVIOUS FCB
 *S*           9442:         IF      -FCB:SIZE<0
 *S*           9443:         RPT     --FCB:SIZE




ASM/6800 1.4A0: EAE6 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 317; Form 1     DISK FILE DRIVERS -- DIRECTORY MANAGEMENT ROUTINES
SDOS11G.ASM
 *S*           9444:         DEX
 *S*           9445:         ELSE
 *S*           9446:         RPT     -FCB:SIZE
 *S*           9447:         INX
 *S*           9448:         FIN
 *S*           9449:         TST     FCB:REFCOUNT,X     IS THIS FCB BUSY?
 *S*           9450:         BEQ      SETUPFCB  B/ NO
 *S*           9451:         DECA                      YES, DOWN COUNT # FCBS TO SEARCH
               9452:         FIN
EAE9 26ED      9453:         BNE      FINDFREEFCBL      B/ MORE TO CHECK
               9454:         ;JSR    ERRET   OOPS... NO MORE FCBS???
EAEB BDD1F7    9455:         JSR     ERRET
EAEE 03F9      9456:         FDB      ERR:NOFREEFCBS




ASM/6800 1.4A0: EAEE SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 318; Form 1     DISK FILE DRIVERS -- DIRECTORY MANAGEMENT ROUTINES
SDOS11G.ASM
               9458: *       SETUPFCB -- COPY CRITICAL DIRENTRY DATA TO FCB(X)
               9459: *               SET REFCOUNT ON FCB(X) TO 1
               9460: *               ALSO COMPUTES FCB:HLSN FROM FCB:HLCN
               9461: *
  EAF0         9462: SETUPFCB  EQU     *
EAF0 FFCEA6    9463:         STX     FCBPOINTER        SAVE FCB ADDRESS
EAF3 DF00      9464:         STX     TOPOINTER       SET UP TARGET POINTER
               9465:         ;LDX    DIRENTRY        COPY MOST OF DIRECTORY ENTRY...
EAF5 FECEA8    9466:         LDX     DIRENTRY
EAF8 C60E      9467:         LDAB      #DIR:FCBDATASIZE    INTO THE FCB
  EAFA         9468: SETUPFCBCL ; COPY A DIRECTORY ENTRY BYTE
EAFA A610      9469:         LDAA      DIR:HLCN,X
EAFC 08        9470:         INX
EAFD DF02      9471:         STX     FROMPOINTER
               9472:         ;LDX    TOPOINTER       INTO FCB BYTE
EAFF DE00      9473:         LDX     TOPOINTER
EB01 A70C      9474:         STAA      FCB:HLCN,X NOTE: DIR AND FCB FORMATS...
EB03 08        9475:         INX             ARE ISOMETRIC WRT DIRECTORY INFO
EB04 DF00      9476:         STX     TOPOINTER
               9477:         ;LDX    FROMPOINTER
EB06 DE02      9478:         LDX     FROMPOINTER
EB08 5A        9479:         DECB
EB09 26EF      9480:         BNE      SETUPFCBCL B/ MORE BYTES TO COPY
               9481:         ;LDD    DCBPOINTER        NOW FINISH FILLING THE FCB
EB0B D607      9482:         LDAB      DCBPOINTER+1
EB0D 9606      9483:         LDAA      DCBPOINTER
               9484:         ;LDX    FCBPOINTER
EB0F FECEA6    9485:         LDX     FCBPOINTER
               9486:         ;STD    FCB:DISKINFO,X
EB12 E701      9487:         STAB      (FCB:DISKINFO)+1,X
EB14 A700      9488:         STAA      FCB:DISKINFO,X
EB16 8601      9489:         LDAA      #1      MARK FCB AS 'BUSY'
EB18 A70B      9490:         STAA      FCB:REFCOUNT,X
               9491:         ;CLR     FCB:FLAGS,X        RESET ALL THE FLAG BITS
EB1A 6F0A      9492:         CLR      FCB:FLAGS,X
               9493:         ;LDD    FCB:HLCN,X NOW COMPUTE FCB:HLSN = FCB:HLCN * DSKINFO:NSPC
EB1C E60D      9494:         LDAB      (FCB:HLCN)+1,X
EB1E A60C      9495:         LDAA      FCB:HLCN,X
               9496:         ;JSR    CONVERTLCNTO1ST
EB20 BDF792    9497:         JSR     CONVERTLCNTO1ST




ASM/6800 1.4A0: EB20 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 319; Form 1     DISK FILE DRIVERS -- DIRECTORY MANAGEMENT ROUTINES
SDOS11G.ASM
               9498:         ;LDX    FCBPOINTER        MOVE LSN OF 1ST HEADER SECTOR INTO FCB
EB23 FECEA6    9499:         LDX     FCBPOINTER
               9500:         ;STD    FCB:HLSN+1,X
EB26 E709      9501:         STAB      (FCB:HLSN+1)+1,X
EB28 A708      9502:         STAA      FCB:HLSN+1,X
EB2A B6CF14    9503:         LDAA      SYSSECTORDB+SECTORDB:LSN
EB2D A707      9504:         STAA      FCB:HLSN,X
  EB2F         9505: SETUPFCBDIRPOS    ; SETUP DIRENTRY DATA IN FCB
EB2F B6CF59    9506:         LDAA      SYSIOCB+IOCB:CURLSN  SAVE LSN OF DIRECTORY SECTOR
EB32 A702      9507:         STAA      FCB:DIRLSN,X
               9508:         ;LDD    SYSIOCB+IOCB:CURLSN+1
EB34 F6CF5B    9509:         LDAB      SYSIOCB+IOCB:CURLSN+1+1
EB37 B6CF5A    9510:         LDAA      SYSIOCB+IOCB:CURLSN+1
               9511:         ;STD    FCB:DIRLSN+1,X
EB3A E704      9512:         STAB      (FCB:DIRLSN+1)+1,X
EB3C A703      9513:         STAA      FCB:DIRLSN+1,X
               9514:         ;LDD    DIRENTRYDISP    AND DISPLACEMENT TO ENTRY
EB3E F6CEAB    9515:         LDAB      DIRENTRYDISP+1
EB41 B6CEAA    9516:         LDAA      DIRENTRYDISP
               9517:         ;STD    FCB:DIRDISP,X
EB44 E706      9518:         STAB      (FCB:DIRDISP)+1,X
EB46 A705      9519:         STAA      FCB:DIRDISP,X
               9520:         ;LDD    FCBPOINTER        SET (A,B):=FCBPOINTER BECAUSE THIS IS SOMETIMES CONV
EB48 F6CEA7    9521:         LDAB      FCBPOINTER+1
EB4B B6CEA6    9522:         LDAA      FCBPOINTER
EB4E 0C39      9523:         OKRTS




ASM/6800 1.4A0: EB4E SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 320; Form 1     DISK FILE DRIVERS -- DIRECTORY MANAGEMENT ROUTINES
SDOS11G.ASM
               9525: *
               9526: *       SEARCHFCBINIT -- INITIALIZE FOR SEARCH OF FCBS
               9527: *               SETS UP FCBPOINTER, COUNT
               9528: *               SO THAT "SEARCHFCBS" MAY BE CALLED REPEATEDLY
               9529: *               UNTIL IT FAILS
               9530: *
  EB50         9531: SEARCHFCBINIT       EQU     *
EB50 B6CF0A    9532:         LDAA      NFCBS     GET # FCBS TO SEARCH
EB53 9704      9533:         STAA      COUNT
               9534:         ;LDX    CODE+SDOS:CONFIGURATION    GET ADDRESS OF FIRST IOCB
EB55 FECE03    9535:         LDX     CODE+SDOS:CONFIGURATION
               9536:         ;LDX    [CNFG:IOCBPOINTERS,X]
EB58 EE04      9537:         LDX     CNFG:IOCBPOINTERS,X
EB5A EE00      9538:         LDX     0,X
EB5C FFCEA6    9539:         STX     FCBPOINTER
EB5F 39        9540:         RTS
               9541: *
               9542: *       SEARCHFCBS -- SEARCH FCBS FOR MATCHING SYSIOCB+IOCB:CURLSN AND DIRENTRYDISP
               9543: *               OKRTS IF FOUND; DOES NOT BUMP REFCOUNT, SETS FCBPOINTER
               9544: *               WILL NOT MATCH AGAINST FCBS WHOSE "DELETED" BIT IS SET
               9545: *               ERRET IF NO MATCH
               9546: *
  EB60         9547: SEARCHFCBS  EQU     *
               9548:         ;LDD    FCBPOINTER        FIND NEXT FCB
EB60 F6CEA7    9549:         LDAB      FCBPOINTER+1
EB63 B6CEA6    9550:         LDAA      FCBPOINTER
               9551:         ;SUBD    #FCB:SIZE = THIS FCB - FCB:SIZE
EB66 C01A      9552:         SUBB      #(FCB:SIZE)&$FF
EB68 8200      9553:         SBCA       #(FCB:SIZE)/256
               9554:         ;STD    FCBPOINTER        REMEMBER FCB ADDRESS
EB6A F7CEA7    9555:         STAB      FCBPOINTER+1
EB6D B7CEA6    9556:         STAA      FCBPOINTER
               9557:         ;LDX    FCBPOINTER        IS FCB FREE ?
EB70 FECEA6    9558:         LDX     FCBPOINTER
EB73 A60B      9559:         LDAA      FCB:REFCOUNT,X
EB75 272F      9560:         BEQ      SEARCHFCBCMPNO       B/ YES, CAN'T MATCH
               9561:         ;LDD    SYSIOCB+IOCB:CURLSN+1        (THESE TESTS ORDERED ACCORDING TO PROBABI
EB77 F6CF5B    9562:         LDAB      SYSIOCB+IOCB:CURLSN+1+1
EB7A B6CF5A    9563:         LDAA      SYSIOCB+IOCB:CURLSN+1
               9564:         ;CMPD    FCB:DIRLSN+1,X    DIRECTORY LSN = FCB:DIRLSN ?




ASM/6800 1.4A0: EB7D SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 321; Form 1     DISK FILE DRIVERS -- DIRECTORY MANAGEMENT ROUTINES
SDOS11G.ASM
EB7D A103      9565:         CMPA      FCB:DIRLSN+1,X
EB7F 2602      9566:         BNE      MACRO:001A
EB81 E104      9567:         CMPB      (FCB:DIRLSN+1)+1,X
  EB83         9568: MACRO:001A
EB83 2621      9569:         BNE      SEARCHFCBCMPNO       B/ NOPE
EB85 B6CF59    9570:         LDAA      SYSIOCB+IOCB:CURLSN
               9571:         ;CMPA     FCB:DIRLSN,X
EB88 A102      9572:         CMPA      FCB:DIRLSN,X
EB8A 261A      9573:         BNE      SEARCHFCBCMPNO       B/ WRONG LSN
               9574:         ;LDD    DIRENTRYDISP    CORRECT DIR ENTRY DISPLACMENT ?
EB8C F6CEAB    9575:         LDAB      DIRENTRYDISP+1
EB8F B6CEAA    9576:         LDAA      DIRENTRYDISP
               9577:         ;CMPD    FCB:DIRDISP,X
EB92 A105      9578:         CMPA      FCB:DIRDISP,X
EB94 2602      9579:         BNE      MACRO:001B
EB96 E106      9580:         CMPB      (FCB:DIRDISP)+1,X
  EB98         9581: MACRO:001B
EB98 260C      9582:         BNE      SEARCHFCBCMPNO       B/ WRONG DISPLACEMENT
EB9A A60A      9583:         LDAA      FCB:FLAGS,X        IS THIS FCB MARK AS DELETED ?
EB9C 8520      9584:         BITA      #FCBFLG::DELETED  (IF SO, IGNORE IT)
EB9E 2606      9585:         BNE      SEARCHFCBCMPNO       B/ NO
               9586:         ;LDX    FCB:DISKINFO,X    LAST BUT NOT LEAST,
EBA0 EE00      9587:         LDX     FCB:DISKINFO,X
EBA2 9C06      9588:         CPX      DCBPOINTER        IS FCB FOR FILE ON THE CORRECT DISK ?
EBA4 270A      9589:         BEQ      SEARCHFCBRTS        B/ NO, WE FOUND A MATCH !
  EBA6         9590: SEARCHFCBCMPNO       ; THIS FCB WASN'T IT!
               9591:         ;DEC     COUNT    DOWN COUNT # FCBS LEFT TO EXAMINE
EBA6 7A0004    9592:         DEC      COUNT
EBA9 26B5      9593:         BNE      SEARCHFCBS  B/ MORE FCBS TO SEARCH
               9594:         ;JSR    ERRET
EBAB BDD1F7    9595:         JSR     ERRET
EBAE 03EF      9596:         FDB      ERR:NOMATCHFCB
               9597: 
  EBB0         9598: SEARCHFCBRTS        EQU     *
               9599:         ;LDX    FCBPOINTER
EBB0 FECEA6    9600:         LDX     FCBPOINTER
               9601:         ;LDD    FCBPOINTER        BECAUSE THIS IS USEFUL, SOMETIMES
EBB3 F6CEA7    9602:         LDAB      FCBPOINTER+1
EBB6 B6CEA6    9603:         LDAA      FCBPOINTER
EBB9 0C39      9604:         OKRTS




ASM/6800 1.4A0: EBB9 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 322; Form 1     DISK FILE DRIVERS -- DIRECTORY MANAGEMENT ROUTINES
SDOS11G.ASM
               9606: *
               9607: *       PARSEFILENAME -- PASSED POINTER IN SYSCALL BLOCK TO FILENAME
               9608: *               BUILDS FILE NAME INTO "FILENAME" BLOCK
               9609: *               COLLECTS SPACE ALLOCATION IF SPECIFIED
               9610: *       OKRTS IF LEGAL NAME
               9611: *       SETS @SCBLK:RDBUF = # BYTES OF FILENAME ACTUALLY SCANNED
               9612: *       RETURNS (X) = POINTER TO FILENAME BLOCK
               9613: *       ERRET IF ILLEGAL NAME
               9614: *
  EBBB         9615: PARSEFILENAME     EQU     *
               9616:         ;LDX    #0      ZERO OUT 4 BYTE REQUESTED FILE SIZE
EBBB CE0000    9617:         LDX     #0
EBBE FFCECD    9618:         STX     FILESIZERQSTD
EBC1 FFCECF    9619:         STX     FILESIZERQSTD+2
               9620:         ;JSR    CHECKRDLEN        MAKE SURE THERE'S ENOUGH ROOM TO READ BACK THE FILE 
EBC4 BDD8A0    9621:         JSR     CHECKRDLEN
EBC7 0002      9622:         FDB      2
               9623:         ;LDB     #CREATE:FILESIZESCLEN      IS INITIAL FILE ALLOCATION INCLUDED IN CRE
EBC9 C612      9624:         LDAB      #CREATE:FILESIZESCLEN
               9625:         ;JSR    CHECKSCLEN ...?
EBCB BDD8FD    9626:         JSR     CHECKSCLEN
EBCE 2514      9627:         BCS       PARSENAME0        B/ NO, USE USER SPECIFIED SIZE OR 0
               9628:         ;LDD    CREATE:FILESIZE,X YES, GET SIZE FROM 1ST 4 BYTES OF DATA
EBD0 E60F      9629:         LDAB      (CREATE:FILESIZE)+1,X
EBD2 A60E      9630:         LDAA      CREATE:FILESIZE,X
               9631:         ;STD    FILESIZERQSTD
EBD4 F7CECE    9632:         STAB      FILESIZERQSTD+1
EBD7 B7CECD    9633:         STAA      FILESIZERQSTD
               9634:         ;LDD    CREATE:FILESIZE+2,X
EBDA E611      9635:         LDAB      (CREATE:FILESIZE+2)+1,X
EBDC A610      9636:         LDAA      CREATE:FILESIZE+2,X
               9637:         ;STD    FILESIZERQSTD+2
EBDE F7CED0    9638:         STAB      FILESIZERQSTD+2+1
EBE1 B7CECF    9639:         STAA      FILESIZERQSTD+2
  EBE4         9640: PARSENAME0 ; DEFAULT FILE SIZE SET, NOW PARSE THE NAME ITSELF
               9641:         ;LDX    CODE+SDOS:IOBLOCKPTR
EBE4 FECE07    9642:         LDX     CODE+SDOS:IOBLOCKPTR
               9643:         ;LDD    SCBLK:WRLEN,X     GET SIZE OF USER-SPECIFIED FILE NAME
EBE7 E607      9644:         LDAB      (SCBLK:WRLEN)+1,X
EBE9 A606      9645:         LDAA      SCBLK:WRLEN,X




ASM/6800 1.4A0: EBE9 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 323; Form 1     DISK FILE DRIVERS -- DIRECTORY MANAGEMENT ROUTINES
SDOS11G.ASM
               9646:         ;LDX    SCBLK:RDBUF,X      SUBTRACT NUMBER OF CHARACTERS EXTRACTED FOR DEVICE 
EBEB EE0A      9647:         LDX     SCBLK:RDBUF,X
               9648:         ;SUBD    0,X
EBED E001      9649:         SUBB      (0)+1,X
EBEF A200      9650:         SBCA       0,X
               9651:         ;STD    PARSECOUNT        SAVE SIZE OF FILENAME
EBF1 F7CED6    9652:         STAB      PARSECOUNT+1
EBF4 B7CED5    9653:         STAA      PARSECOUNT
               9654:         ;BEQD    ERRBADFILENAMEJ    B/ ZERO LENGTH FILE NAME
EBF7 2603      9655:         BNE      MACRO:001C
EBF9 5D        9656:         TSTB
EBFA 2742      9657:         BEQ      ERRBADFILENAMEJ
  EBFC         9658: MACRO:001C




ASM/6800 1.4A0: EBFA SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 324; Form 1     DISK FILE DRIVERS -- DIRECTORY MANAGEMENT ROUTINES
SDOS11G.ASM
               9660:         ;LDX    CODE+SDOS:IOBLOCKPTR       GRAB POINTER TO USER-SPECIFIED FILE NAME
EBFC FECE07    9661:         LDX     CODE+SDOS:IOBLOCKPTR
               9662:         ;LDD    SCBLK:WRBUF,X
EBFF E605      9663:         LDAB      (SCBLK:WRBUF)+1,X
EC01 A604      9664:         LDAA      SCBLK:WRBUF,X
               9665:         ;LDX    SCBLK:RDBUF,X      SKIP PAST DEVICE NAME
EC03 EE0A      9666:         LDX     SCBLK:RDBUF,X
               9667:         ;ADDD    0,X
EC05 EB01      9668:         ADDB      (0)+1,X
EC07 A900      9669:         ADCA       0,X
               9670:         ;STD    NAMESCANPTR        SET UP TO SCAN FILE NAME
EC09 F7CE4F    9671:         STAB      NAMESCANPTR+1
EC0C B7CE4E    9672:         STAA      NAMESCANPTR
               9673:         ;LDA     [NAMESCANPTR]      GRAB THE FIRST BYTE OF THE FILE NAME
EC0F FECE4E    9674:         LDX     NAMESCANPTR
EC12 A600      9675:         LDAA      0,X
               9676:         ;CMPA     #'.     A PERIOD ?
EC14 812E      9677:         CMPA      #'.
EC16 2726      9678:         BEQ      ERRBADFILENAMEJ    B/ YES, ILLEGAL FILE NAME
               9679:         ;JSR    ISDIG   NO, A DIGIT ?
EC18 BDD28F    9680:         JSR     ISDIG
EC1B 246A      9681:         BCC        ERRBADFILENAME     B/ YES, MUST START WITH ALPHA OR '$'!
               9682:         ;LDX    #FILENAMEBUF
EC1D CECEBA    9683:         LDX     #FILENAMEBUF
EC20 DF00      9684:         STX     TOPOINTER
               9685:         ;CLR     FILENAMELENGTH   = # CHARACTERS ACTUALLY COMPRISING FILENAME
EC22 7FCECC    9686:         CLR      FILENAMELENGTH
EC25 C610      9687:         LDAB      #DIR:NAMESIZE
  EC27         9688: PARSENAME1        EQU     *
               9689:         ;JSR    PARSENAMEB
EC27 BDECDC    9690:         JSR     PARSENAMEB
               9691:         ;LDX    TOPOINTER
EC2A DE00      9692:         LDX     TOPOINTER
               9693:         ;STA     ,X+
EC2C A700      9694:         STAA      0,X
EC2E 08        9695:         INX
EC2F DF00      9696:         STX     TOPOINTER       SAVE NEXT PLACE TO STORE BYTE
EC31 5A        9697:         DECB
EC32 26F3      9698:         BNE      PARSENAME1
               9699: *       NOW SCAN PAST REST OF NAME




ASM/6800 1.4A0: EC32 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 325; Form 1     DISK FILE DRIVERS -- DIRECTORY MANAGEMENT ROUTINES
SDOS11G.ASM
               9700: *
  EC34         9701: PARSESCANL EQU     *
               9702:         ;JSR    PARSENAMEB
EC34 BDECDC    9703:         JSR     PARSENAMEB
               9704:         ;CMPA     #ASCII:SPACE
EC37 8120      9705:         CMPA      #ASCII:SPACE
EC39 26F9      9706:         BNE      PARSESCANL B/ VALID CHARACTER FOR FILENAME, IGNORE IT
EC3B B6CECC    9707:         LDAA      FILENAMELENGTH   IS NAME OF REASONABLE LENGTH ?
  EC3E         9708: ERRBADFILENAMEJ
EC3E 2747      9709:         BEQ      ERRBADFILENAME     B/ NAME IS OF ZERO LENGTH!
               9710:         ;CMPA     #DIR:NAMESIZE    ...?
EC40 8110      9711:         CMPA      #DIR:NAMESIZE
EC42 2262      9712:         BHI      ERRBADFNAMESIZE    B/ NO, ITS TOO LONG!




ASM/6800 1.4A0: EC42 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 326; Form 1     DISK FILE DRIVERS -- DIRECTORY MANAGEMENT ROUTINES
SDOS11G.ASM
               9714:         ;JSR    PARSENAMEB1
EC44 BDED05    9715:         JSR     PARSENAMEB1
               9716:         ;CMPA     #'(     START OF REQUESTED FILESIZE ?
EC47 8128      9717:         CMPA      #'(
EC49 2643      9718:         BNE      PARSEQUIT        COLLECT # OF BYTES TO ALLOCATE FOR FILE
               9719:         ;LDX    #0      OVERRIDE THE DEFAULT GIVEN IN SYSCALL BLOCK
EC4B CE0000    9720:         LDX     #0
EC4E FFCECD    9721:         STX     FILESIZERQSTD
EC51 FFCECF    9722:         STX     FILESIZERQSTD+2
  EC54         9723: PARSESCAND EQU     *
               9724:         ;JSR    PARSENAMEB1        LOOKS LIKE DEFAULT FILESIZE
EC54 BDED05    9725:         JSR     PARSENAMEB1
               9726:         ;CMPA     #')     END OF FILESIZE
EC57 8129      9727:         CMPA      #')
EC59 2733      9728:         BEQ      PARSEQUIT        B/ YES
               9729:         ;JSR    ISDIG   NO, A DIGIT ?
EC5B BDD28F    9730:         JSR     ISDIG
EC5E 2575      9731:         BCS       ERRILLFILESIZE  NO, OOPS!
EC60 8030      9732:         SUBA      #'0     CONVERT TO BINARY
EC62 B7CED4    9733:         STAA      FILESIZE2+3     SAVE THE DIGIT
               9734:         ;LDX    FILESIZERQSTD   MULTIPLY OLD FILESIZE BY 10
EC65 FECECD    9735:         LDX     FILESIZERQSTD
EC68 DF00      9736:         STX     TEMP    FIRST COPY FILESIZERQSTD TO TEMP
               9737:         ;LDX    FILESIZERQSTD+2
EC6A FECECF    9738:         LDX     FILESIZERQSTD+2
EC6D DF02      9739:         STX     TEMP+2
               9740:         ;LDX    #FILESIZERQSTD  COMPUTE...
EC6F CECECD    9741:         LDX     #FILESIZERQSTD
EC72 8D3A      9742:         BSR      ADDTOFILESIZE    2*FILESIZERQSTD
EC74 8D38      9743:         BSR      ADDTOFILESIZE    4*FILESIZERQSTD
               9744:         ;LDX    #TEMP
EC76 CE0000    9745:         LDX     #TEMP
EC79 8D33      9746:         BSR      ADDTOFILESIZE    5*FILESIZERQSTD
               9747:         ;LDX    #FILESIZERQSTD
EC7B CECECD    9748:         LDX     #FILESIZERQSTD
EC7E 8D2E      9749:         BSR      ADDTOFILESIZE    10*FILESIZERQSTD
               9750:         ;LDX    #FILESIZE2      = (0,0,0,DIGIT)
EC80 CECED1    9751:         LDX     #FILESIZE2
EC83 8D29      9752:         BSR      ADDTOFILESIZE    + DIGIT
EC85 20CD      9753:         BRA       PARSESCAND




ASM/6800 1.4A0: EC85 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 327; Form 1     DISK FILE DRIVERS -- DIRECTORY MANAGEMENT ROUTINES
SDOS11G.ASM
               9754: 
  EC87         9755: ERRBADFILENAME     EQU     *
EC87 8D05      9756:         BSR      PARSEQUIT        GO SET LENGTH OF FILENAME INTO REPLY BUFFER
               9757:         ;JSR    ERRET
EC89 BDD1F7    9758:         JSR     ERRET
EC8C 03FF      9759:         FDB      ERR:BADFILENAME
               9760: 
  EC8E         9761: PARSEQUIT        ; COMPUTE AND STORE LENGTH OF FILENAME
               9762:         ;LDD    NAMESCANPTR        = NAMESCANPTR - WRBUF FROM SYSCALL BLOCK
EC8E F6CE4F    9763:         LDAB      NAMESCANPTR+1
EC91 B6CE4E    9764:         LDAA      NAMESCANPTR
               9765:         ;LDX    CODE+SDOS:IOBLOCKPTR
EC94 FECE07    9766:         LDX     CODE+SDOS:IOBLOCKPTR
               9767:         ;SUBD    SCBLK:WRBUF,X
EC97 E005      9768:         SUBB      (SCBLK:WRBUF)+1,X
EC99 A204      9769:         SBCA       SCBLK:WRBUF,X
               9770:         ;STD    [SCBLK:RDBUF,X]    THIS IS READ-BACK BUFFER ADDRESS
EC9B EE0A      9771:         LDX     SCBLK:RDBUF,X
EC9D E701      9772:         STAB      1,X
EC9F A700      9773:         STAA      0,X
               9774:         ;LDX    #FILENAMEBUF      AS PROMISED
ECA1 CECEBA    9775:         LDX     #FILENAMEBUF
ECA4 0C39      9776:         OKRTS




ASM/6800 1.4A0: ECA4 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 328; Form 1     DISK FILE DRIVERS -- DIRECTORY MANAGEMENT ROUTINES
SDOS11G.ASM
  ECA6         9778: ERRBADFNAMESIZE    EQU     *
               9779:         ;JSR    PARSEQUIT        SET FILE NAME LENGTH INTO REPLY BUFFER
ECA6 BDEC8E    9780:         JSR     PARSEQUIT
               9781:         ;JSR    ERRET
ECA9 BDD1F7    9782:         JSR     ERRET
ECAC 03F5      9783:         FDB      ERR:BADFNAMESIZE
               9784: *
               9785: *       ADDTOFILESIZE -- ADDS 4 BYTE NUMBER(X) TO FILESIZERQSTD
               9786: *       IF SUM >= 2^31, POPS RETURN OFF STACK AND EXITS TO ERRILLFILESIZE
               9787: *
  ECAE         9788: ADDTOFILESIZE    EQU     *
               9789:         ;LDD    FILESIZERQSTD+2
ECAE F6CED0    9790:         LDAB      FILESIZERQSTD+2+1
ECB1 B6CECF    9791:         LDAA      FILESIZERQSTD+2
               9792:         ;ADDD    2,X
ECB4 EB03      9793:         ADDB      (2)+1,X
ECB6 A902      9794:         ADCA       2,X
               9795:         ;STD    FILESIZERQSTD+2
ECB8 F7CED0    9796:         STAB      FILESIZERQSTD+2+1
ECBB B7CECF    9797:         STAA      FILESIZERQSTD+2
               9798:         ;LDD    FILESIZERQSTD
ECBE F6CECE    9799:         LDAB      FILESIZERQSTD+1
ECC1 B6CECD    9800:         LDAA      FILESIZERQSTD
ECC4 E901      9801:         ADCB       1,X
ECC6 A900      9802:         ADCA       0,X
ECC8 2B09      9803:         BMI      ADDTOFILEOV
ECCA 2507      9804:         BCS       ADDTOFILEOV
               9805:         ;STD    FILESIZERQSTD
ECCC F7CECE    9806:         STAB      FILESIZERQSTD+1
ECCF B7CECD    9807:         STAA      FILESIZERQSTD
ECD2 39        9808:         RTS
               9809: 
  ECD3         9810: ADDTOFILEOV      ; ANSWER IS TOO BIG TO BE LEGAL
               9811:         ;LEAS    2,S
  0000         9812:         IF      2<0
 *S*           9813:         RPT     -2
 *S*           9814:         DES
               9815:         ELSE
  0002         9816:         RPT     2
ECD3 31        9817:         INS




ASM/6800 1.4A0: ECD4 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 329; Form 1     DISK FILE DRIVERS -- DIRECTORY MANAGEMENT ROUTINES
SDOS11G.ASM
               9818:         FIN
  ECD5         9819: ERRILLFILESIZE  EQU     *
ECD5 8DB7      9820:         BSR      PARSEQUIT        SET FILE NAME LENGTH INTO REPLY BUFFER
               9821:         ;JSR    ERRET
ECD7 BDD1F7    9822:         JSR     ERRET
ECDA 0400      9823:         FDB      ERR:ILLFILESIZE




ASM/6800 1.4A0: ECDA SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 330; Form 1     DISK FILE DRIVERS -- DIRECTORY MANAGEMENT ROUTINES
SDOS11G.ASM
               9825: *
               9826: *       PARSENAMEB -- GET BYTE OF FILE NAME PROPER
               9827: *               RETURN ASCII:SPACE IF END OF NAME, OR NOT ., $, A-Z, 0-9
               9828: *
  ECDC         9829: PARSENAMEB EQU     *
               9830:         ;LDX    PARSECOUNT        CHECK FOR NO MORE BYTES IN SOURCE OF FILENAME
ECDC FECED5    9831:         LDX     PARSECOUNT
ECDF 2712      9832:         BEQ      PARSENAMEBLANK      B/ NO MORE, USE A BLANK TO PAD
               9833:         ;LDX    NAMESCANPTR        GRAB NEXT BYTE FROM SOURCE STRING
ECE1 FECE4E    9834:         LDX     NAMESCANPTR
ECE4 A600      9835:         LDAA      0,X
               9836:         ;CMPA     #'.     VALID CHARACTER FOR FILENAME ?
ECE6 812E      9837:         CMPA      #'.
ECE8 270C      9838:         BEQ      PARSENAMEBOK       B/ YES
               9839:         ;CMPA     #'$
ECEA 8124      9840:         CMPA      #'$
ECEC 2708      9841:         BEQ      PARSENAMEBOK       B/ YES
               9842:         ;JSR    ISALPHANUM        CHECK FOR ALPHA-NUMERIC AND FOLD
ECEE BDD298    9843:         JSR     ISALPHANUM
ECF1 2403      9844:         BCC        PARSENAMEBOK       B/ IS OK.
  ECF3         9845: PARSENAMEBLANK      EQU     *
ECF3 8620      9846:         LDAA      #ASCII:SPACE        USE A BLANK TO PAD NAME
ECF5 39        9847:         RTS
               9848: *
  ECF6         9849: PARSENAMEBOK       EQU     *
               9850:         ;INC     FILENAMELENGTH   SO WE KNOW HOW LONG THE ORIGINAL NAME WAS
ECF6 7CCECC    9851:         INC      FILENAMELENGTH
  ECF9         9852: PARSENAMEBX        ; UPDATE POINTER TO SOURCE STRING
ECF9 08        9853:         INX
ECFA FFCE4E    9854:         STX     NAMESCANPTR
               9855:         ;LDX    PARSECOUNT        DOWN COUNT # CHARS REMAINING IN SOURCE STRING
ECFD FECED5    9856:         LDX     PARSECOUNT
ED00 09        9857:         DEX
ED01 FFCED5    9858:         STX     PARSECOUNT
ED04 39        9859:         RTS




ASM/6800 1.4A0: ED04 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 331; Form 1     DISK FILE DRIVERS -- DIRECTORY MANAGEMENT ROUTINES
SDOS11G.ASM
               9861: *
               9862: *       PARSENAMEB1 -- GET BYTE OF FILENAME
               9863: *               RETURN NEXT BYTE OF FILENAME OR BLANK
               9864: *
  ED05         9865: PARSENAMEB1        EQU     *
               9866:         ;LDX    PARSECOUNT        ANY BYTES OF SOURCE STRING UNPROCESSED ?
ED05 FECED5    9867:         LDX     PARSECOUNT
ED08 27E9      9868:         BEQ      PARSENAMEBLANK      B/ NO, USE A BLANK INSTEAD
               9869:         ;LDX    NAMESCANPTR        YES, GRAB THE NEXT SOURCE STRING BYTE
ED0A FECE4E    9870:         LDX     NAMESCANPTR
ED0D A600      9871:         LDAA      0,X
ED0F 20E8      9872:         BRA       PARSENAMEBX        AND EXIT WITH IT
               9873: *
  ED11         9874: ERRNODISKMAP     EQU     *
               9875:         ;JSR    ERRET
ED11 BDD1F7    9876:         JSR     ERRET
ED14 03EE      9877:         FDB      ERR:NODISKMAP




ASM/6800 1.4A0: ED14 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 332; Form 1     DISK FILE DRIVERS -- DISK SPACE MANAGEMENT
SDOS11G.ASM
               9879: *       ALLOCATECLUSTERS -- ALLOCATES (A,B) DATA CLUSTERS TO FILE
               9880: *               SPECIFIED IN IOCB, STARTING AT IOCB:RDCN
               9881: *               (A,B) MUST BE <> 0 ON ENTRY
               9882: *               CLUSTER SPECIFIED BY IOCB:RDCN MUST NOT CURRENTLY BE ALLOCATED
               9883: *               UPDATES FCB:NCLUSTERS, FCB:HCSIC
               9884: *               IOCBPOINTER POINTS TO IOCB WHOSE FILE IS TO BE IMPROVED
               9885: *               FCBPOINTER MUST SELECT FCB OF FILE TO BE IMPROVED
               9886: *               IF FCB:HCSIC = 0, A HEADER CLUSTER IS ALLOCATED
               9887: *               OKRTS TAKEN IF AT LEAST 1 DATA CLUSTER WAS ALLOCATED
               9888: *               DESTROYS RDCN!
               9889: *               ERRET TAKEN IF NO DISK SPACE AVAILABLE
               9890: *               ZEROES ALLOCATED DATA CLUSTERS IF IOCB:EOFFLAG IS RESET
               9891: *
  ED16         9892: ERRALLOC0CLUSTERS
               9893:         ;JSR    ERRET
ED16 BDD1F7    9894:         JSR     ERRET
ED19 042B      9895:         FDB      ERR:ALLOC0CLUSTERS
               9896: 
  ED1B         9897: ALLOCATECLUSTERS    EQU     *
               9898:         ;STD    ALLOCATIONCOUNT     SAVE DESIRED ALLOCATION
ED1B F7CED9    9899:         STAB      ALLOCATIONCOUNT+1
ED1E B7CED8    9900:         STAA      ALLOCATIONCOUNT
               9901:         ;BEQD    ERRALLOC0CLUSTERS  B/ ALLOCATE ZERO CLUSTERS!!??
ED21 2603      9902:         BNE      MACRO:001D
ED23 5D        9903:         TSTB
ED24 27F0      9904:         BEQ      ERRALLOC0CLUSTERS
  ED26         9905: MACRO:001D
               9906:         ;LDX    DCBPOINTER
ED26 DE06      9907:         LDX     DCBPOINTER
ED28 A629      9908:         LDAA      DSKINFO:MAPFCB,X   MAKE SURE DISK HAS A DISKMAP
ED2A 27E5      9909:         BEQ      ERRNODISKMAP     B/ NOPE, I GIVE UP!
               9910:         ;LDX    FCBPOINTER        NOW CHECK EXISTENCE OF HEADER
ED2C FECEA6    9911:         LDX     FCBPOINTER
ED2F A60E      9912:         LDAA      FCB:HCSIC,X HCSIC = 0 ?
ED31 265C      9913:         BNE      ALLOC2    B/ HEADER CLUSTER IS ALLOCATED
               9914:         ;CLR     FCB:NCLUSTERS,X    MARK '0 CLUSTERS'
ED33 6F0F      9915:         CLR      FCB:NCLUSTERS,X
               9916:         ;CLR     FCB:NCLUSTERS+1,X  IN FILE
ED35 6F10      9917:         CLR      FCB:NCLUSTERS+1,X
               9918:         ;LDX    ALLOCATIONCOUNT     BUMP DESIRED DATA CLUSTER COUNT...




ASM/6800 1.4A0: ED37 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 333; Form 1     DISK FILE DRIVERS -- DISK SPACE MANAGEMENT
SDOS11G.ASM
ED37 FECED8    9919:         LDX     ALLOCATIONCOUNT
ED3A 08        9920:         INX             TO INSURE HEADER CLUSTER...
ED3B FFCED8    9921:         STX     ALLOCATIONCOUNT     GETS INCLUDED IN MAP SEARCH
               9922:         ;LDD    #DUMMYLCN        GET 'CHOOSE RANDOM START POINT' CODE AS PREVIOUSLY AL
ED3E C6FF      9923:         LDAB      #(DUMMYLCN)&$FF
ED40 86FF      9924:         LDAA      #(DUMMYLCN)/256
               9925:         ;JSR    SEARCHMAP  GO LOOK FOR DISK SPACE
ED42 BDEF86    9926:         JSR     SEARCHMAP
               9927:         ;LDX    ALLOCATIONCOUNT     REMOVE HEADER CLUSTER...
ED45 FECED8    9928:         LDX     ALLOCATIONCOUNT
ED48 09        9929:         DEX             FROM DESIRED ALLOCATION
ED49 FFCED8    9930:         STX     ALLOCATIONCOUNT
               9931:         ;LDX    FCBPOINTER        STORE LCN OF HEADER CLUSTER
ED4C FECEA6    9932:         LDX     FCBPOINTER
               9933:         ;STD    FCB:HLCN,X
ED4F E70D      9934:         STAB      (FCB:HLCN)+1,X
ED51 A70C      9935:         STAA      FCB:HLCN,X
               9936:         ;LDX    IOCBPOINTER
ED53 FECE09    9937:         LDX     IOCBPOINTER
               9938:         ;CLR     IOCB:DRSN,X       INVENT THE 1ST SECTOR OF HEADER...
ED56 6F1A      9939:         CLR      IOCB:DRSN,X
               9940:         ;JSR    CONVERTLCNTOLSN   SO WE CAN INITIALIZE IT
ED58 BDF77A    9941:         JSR     CONVERTLCNTOLSN
               9942:         ;JSR    INVENTSECTOR
ED5B BDF8F2    9943:         JSR     INVENTSECTOR
               9944:         ;JSR    ALLOCINITHS       INITIALIZE THE 1ST SECTOR OF HEADER CLUSTER
ED5E BDEE96    9945:         JSR     ALLOCINITHS
               9946:         ;LDX    FCBPOINTER        BUMP # SECTORS IN HEADER THAT ARE INITZED
ED61 FECEA6    9947:         LDX     FCBPOINTER
               9948:         ;INC     FCB:HCSIC,X (=1)
ED64 6C0E      9949:         INC      FCB:HCSIC,X
               9950:         ;INC     FCB:NCLUSTERS+1,X  MAKE SURE HEADER CLUSTER IS COUNTED (=1)
ED66 6C10      9951:         INC      FCB:NCLUSTERS+1,X
ED68 A60A      9952:         LDAA      FCB:FLAGS,X        FORCE FCB CONTENTS BACK TO DIRECTORY, ALSO
ED6A 8A40      9953:         ORAA      #FCBFLG::UPDATEDIR
ED6C A70A      9954:         STAA      FCB:FLAGS,X
               9955:         ;LDD    FCB:HLCN,X PUT SELF POINTER INTO 1ST BYTES OF SECTOR
ED6E E60D      9956:         LDAB      (FCB:HLCN)+1,X
ED70 A60C      9957:         LDAA      FCB:HLCN,X
               9958:         ;LDX    RDSIPOINTER




ASM/6800 1.4A0: ED72 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 334; Form 1     DISK FILE DRIVERS -- DISK SPACE MANAGEMENT
SDOS11G.ASM
ED72 FECEA4    9959:         LDX     RDSIPOINTER
               9960:         ;LDX    RDSI:SECTORBASE,X
ED75 EE05      9961:         LDX     RDSI:SECTORBASE,X
               9962:         ;STD    HEADER:LCN,X      NOW 1ST SECTOR OF HEADER CLUSTER IS SET UP
ED77 E701      9963:         STAB      (HEADER:LCN)+1,X
ED79 A700      9964:         STAA      HEADER:LCN,X
               9965:         ;LDX    IOCBPOINTER       COPY LSN OF 1ST HEADER SECTOR...
ED7B FECE09    9966:         LDX     IOCBPOINTER
ED7E A602      9967:         LDAA      IOCB:CURLSN,X      INTO FCB FOR FILE
ED80 36        9968:         PSHA             COPY LSN TO (TOS),(A,B)
               9969:         ;LDD    IOCB:CURLSN+1,X
ED81 E604      9970:         LDAB      (IOCB:CURLSN+1)+1,X
ED83 A603      9971:         LDAA      IOCB:CURLSN+1,X
               9972:         ;LDX    FCBPOINTER        THEN INTO FCB
ED85 FECEA6    9973:         LDX     FCBPOINTER
               9974:         ;STD    FCB:HLSN+1,X
ED88 E709      9975:         STAB      (FCB:HLSN+1)+1,X
ED8A A708      9976:         STAA      FCB:HLSN+1,X
ED8C 32        9977:         PULA
ED8D A707      9978:         STAA      FCB:HLSN,X




ASM/6800 1.4A0: ED8D SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 335; Form 1     DISK FILE DRIVERS -- DISK SPACE MANAGEMENT
SDOS11G.ASM
  ED8F         9980: ALLOC2    ; HEADER CLUSTER EXISTS, CHECK FOR INITIALIZED
               9981:         ;LDX    IOCBPOINTER
ED8F FECE09    9982:         LDX     IOCBPOINTER
               9983:         ;LDD    IOCB:RDCN,X        FIND OUT WHICH HEADER CLUSTER SECTOR...
ED92 E61C      9984:         LDAB      (IOCB:RDCN)+1,X
ED94 A61B      9985:         LDAA      IOCB:RDCN,X
               9986:         ;ADDD    ALLOCATIONCOUNT     CONTAINS LAST CLUSTER DESCRIPTOR WE'LL ALLOCATE
ED96 FBCED9    9987:         ADDB      ALLOCATIONCOUNT+1
ED99 B9CED8    9988:         ADCA       ALLOCATIONCOUNT
               9989:         ;SUBD    #1      = RDCN+ALLOCATIONCOUNT-1
ED9C C001      9990:         SUBB      #(1)&$FF
ED9E 8200      9991:         SBCA       #(1)/256
               9992:         ;ASLD            CONVERT # CLUSTERS DESIRED INTO # BYTES REQUIRED TO HOLD CLUS
EDA0 58        9993:         ASLB
EDA1 49        9994:         ROLA
               9995:         ;LDX    DCBPOINTER        MAKE SURE WE DON'T OVERRUN THE HEADER CLUSTER
EDA2 DE06      9996:         LDX     DCBPOINTER
               9997:         ;CMPD    DSKINFO:NBPC,X    (I.E., # BYTES NEEDED IN HEADER CLUSTER < NBPC )
EDA4 A120      9998:         CMPA      DSKINFO:NBPC,X
EDA6 2602      9999:         BNE      MACRO:001E
EDA8 E121         0:         CMPB      (DSKINFO:NBPC)+1,X
  EDAA            1: MACRO:001E
EDAA 2504         2:         BCS       ALLOC2A    B/ WILL FIT IN HEADER CLUSTER
  EDAC            3: ALLOC2BIG  ; ALLOCATION REQUEST WILL RUN OFF END OF HEADER CLUSTER
EDAC E611         4:         LDAB      DSKINFO:NSPC,X   MAKE SURE THIS MANY HEADER SECTORS ARE INITZED
EDAE 2004         5:         BRA       ALLOC2B    GO DO IT!




ASM/6800 1.4A0: EDAE SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 336; Form 1     DISK FILE DRIVERS -- DISK SPACE MANAGEMENT
SDOS11G.ASM
  EDB0            7: ALLOC2A    EQU     *
                  8:         ;JSR    COMPUTERSN       COMPUTE RELATIVE SECTOR NUMBER
EDB0 BDF773       9:         JSR     COMPUTERSN
EDB3 5C          10:         INCB              (B) NOW CONTAINS # HEADER SECTORS THAT NEED TO BE INITZ'D
  EDB4           11: ALLOC2B    EQU     *
                 12:         ;LDX    FCBPOINTER        CHECK TO MAKE SURE ALL OF THEM ARE INITZ'D
EDB4 FECEA6      13:         LDX     FCBPOINTER
                 14:         ;CMPB     FCB:HCSIC,X (I.E., IS HCSIC >= NUMBER NEEDED ?)
EDB7 E10E        15:         CMPB      FCB:HCSIC,X
EDB9 2528        16:         BCS       ALLOC3    B/ ALL NEEDED HEADER SECTORS ARE INITZ'D
EDBB 2726        17:         BEQ      ALLOC3    B/ # NEEDED = # INITZED, ALL IS OK
EDBD 8640        18:         LDAA      #FCBFLG::UPDATEDIR *** MUST INITZ HEADER CLUSTER SECTORS ***
EDBF AA0A        19:         ORAA      FCB:FLAGS,X        MAKE SURE DIRECTORY GETS UPDATED
EDC1 A70A        20:         STAA      FCB:FLAGS,X        SINCE WE'LL CHANGE FCB:HCSIC
EDC3 A60E        21:         LDAA      FCB:HCSIC,X GRAB THE CURRENTLY INITZ'D COUNT
EDC5 E70E        22:         STAB      FCB:HCSIC,X STORE THE NEW VALUE
                 23:         ;LDX    IOCBPOINTER       STUFF VALUE INTO IOCB
EDC7 FECE09      24:         LDX     IOCBPOINTER
EDCA A721        25:         STAA      IOCB:HRSN,X       SO WE CAN USE GENHLSNPLUSHRSN
  EDCC           26: ALLOCINITHC        ; NOW INITIALIZE HEADER SECTORS
                 27:         ;JSR    GENHLSNPLUSHRSN GEN HLSN PLUS RELATIVE HEADER SECTOR NUMBER
EDCC BDF7C7      28:         JSR     GENHLSNPLUSHRSN
                 29:         ;JSR    INVENTSECTOR     DON'T BOTHER READING THE SECTOR FROM THE DISK
EDCF BDF8F2      30:         JSR     INVENTSECTOR
                 31:         ;JSR    ALLOCINITHS       GO INITIALIZE THE HEADER SECTOR
EDD2 BDEE96      32:         JSR     ALLOCINITHS
                 33:         ;LDX    IOCBPOINTER       RETRIEVE NEXT RELATIVE SECTOR NUMBER TO INITZ
EDD5 FECE09      34:         LDX     IOCBPOINTER
                 35:         ;INC     IOCB:HRSN,X       = LAST RELATIVE SECTOR NUMBER + 1
EDD8 6C21        36:         INC      IOCB:HRSN,X
EDDA A621        37:         LDAA      IOCB:HRSN,X
                 38:         ;LDX    FCBPOINTER        DONE INITIALIZING HEADER SECTORS ?
EDDC FECEA6      39:         LDX     FCBPOINTER
                 40:         ;CMPA     FCB:HCSIC,X ...?
EDDF A10E        41:         CMPA      FCB:HCSIC,X
EDE1 26E9        42:         BNE      ALLOCINITHC        B/ NO, GO INIT ANOTHER ONE




ASM/6800 1.4A0: EDE1 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 337; Form 1     DISK FILE DRIVERS -- DISK SPACE MANAGEMENT
SDOS11G.ASM
  EDE3           44: ALLOC3    ; REQUIRED HEADER SECTORS ARE ALL INITIALIZED
                 45:         ;JSR    LOCATERDCN JUST TO MAKE SURE THAT RDCN SLOT EXISTS IN HEADER
EDE3 BDF66D      46:         JSR     LOCATERDCN
                 47: * WE'RE TRYING TO GAURANTEE AT LEAST 1 DATA CLUSTER GETS ALLOCATED TO FILE!
                 48:         ;LDX    IOCBPOINTER       TO MAKE SURE ITS RIGHT
EDE6 FECE09      49:         LDX     IOCBPOINTER
                 50:         ;LDD    IOCB:RDCN,X        FIND CLUSTER # ALLOCATED...
EDE9 E61C        51:         LDAB      (IOCB:RDCN)+1,X
EDEB A61B        52:         LDAA      IOCB:RDCN,X
                 53: *       JUST PREVIOUS TO THE SLOT WE'RE ABOUT TO FILL
                 54:         ;SUBD    #1      FIND RELATIVE DATA CLUSTER NUMBER OF PREVIOUS DATA CLUSTER
EDED C001        55:         SUBB      #(1)&$FF
EDEF 8200        56:         SBCA       #(1)/256
                 57:         ;STD    IOCB:RDCN,X        AND SAVE IT (WE'LL BUMP IT BACK TO ORIGINAL VALUE L
EDF1 E71C        58:         STAB      (IOCB:RDCN)+1,X
EDF3 A71B        59:         STAA      IOCB:RDCN,X
                 60:         ;JSR    LOCATERDCN GO FIND PREVIOUS LCN
EDF5 BDF66D      61:         JSR     LOCATERDCN
                 62:         ;LDD    HEADER:LCN,X      NOW GET THE PREVIOUSLY ALLOCATED CLUSTER NUMBER
EDF8 E601        63:         LDAB      (HEADER:LCN)+1,X
EDFA A600        64:         LDAA      HEADER:LCN,X
                 65:         ;JSR    SEARCHMAP  LET'S ALLOCATE THE FIRST DATA CLUSTER
EDFC BDEF86      66:         JSR     SEARCHMAP
                 67:         ;LDX    IOCBPOINTER       SET RDCN BACK TO ENTRY VALUE
EDFF FECE09      68:         LDX     IOCBPOINTER
                 69:         ;INC     IOCB:RDCN+1,X
EE02 6C1C        70:         INC      IOCB:RDCN+1,X
EE04 2618        71:         BNE      ALLOCDC2
                 72:         ;INC     IOCB:RDCN,X
EE06 6C1B        73:         INC      IOCB:RDCN,X
EE08 2014        74:         BRA       ALLOCDC2   FOUND A FREE CLUSTER, SKIP INTO LOOP
                 75: 
  EE0A           76: ALLOCERRED        EQU     *
EE0A 39          77:         RTS
                 78: 
  EE0B           79: ALLOCDC5   ; SEARCHMAP FAILED ON 2ND OR LATER DATA CLUSTER
EE0B 8C03F7      80:         CPX      #ERR:NODISKSPACE  OUT OF DISK SPACE ?
EE0E 26FA        81:         BNE      ALLOCERRED        B/ NO, PROBLEM IS MORE SERIOUS
                 82:         ;JMP    ALLOCDONE ELSE WE CAN QUIT; WE ALLOCATED A SECTOR
EE10 7EEE85      83:         JMP     ALLOCDONE




ASM/6800 1.4A0: EE10 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 338; Form 1     DISK FILE DRIVERS -- DISK SPACE MANAGEMENT
SDOS11G.ASM
  EE13           85: ALLOCDATACLUSTERS    ; ALLOCATE MORE DATA CLUSTERS TO FILE
                 86:         ;LDD    ALLOCATIONPLCN      GET PREVIOUSLY ALLOCATED LCN
EE13 F6CEDB      87:         LDAB      ALLOCATIONPLCN+1
EE16 B6CEDA      88:         LDAA      ALLOCATIONPLCN
                 89:         ;JSR    SEARCHMAP  GO FIND ME A PLACE!
EE19 BDEF86      90:         JSR     SEARCHMAP
EE1C 25ED        91:         BCS       ALLOCDC5   NO MORE SECTORS AVAILABLE FOR ALLOCATION
  EE1E           92: ALLOCDC2   ; ENTRY POINT FOR FIRST DATA CLUSTER ALLOCATION
                 93:         ;STD    ALLOCATIONPLCN      SAVE LCN JUST FOUND FOR USE NEXT ROUND (POETIC, HU
EE1E F7CEDB      94:         STAB      ALLOCATIONPLCN+1
EE21 B7CEDA      95:         STAA      ALLOCATIONPLCN
                 96:         ;JSR    LOCATERDCN GET POINTER TO RDCN IN SECTOR
EE24 BDF66D      97:         JSR     LOCATERDCN
                 98:         ;LDD    ALLOCATIONPLCN      STORE NEWLY ALLOCATED LCN INTO HEADER SECTOR OF FI
EE27 F6CEDB      99:         LDAB      ALLOCATIONPLCN+1
EE2A B6CEDA     100:         LDAA      ALLOCATIONPLCN
                101:         ;STD    HEADER:LCN,X
EE2D E701       102:         STAB      (HEADER:LCN)+1,X
EE2F A700       103:         STAA      HEADER:LCN,X
                104:         ;LDX    IOCBPOINTER       MARK HEADER SECTOR AS MODIFIED
EE31 FECE09     105:         LDX     IOCBPOINTER
                106:         ;LDX    IOCB:HRDSI,X      LOCATERDCN MAKES THIS VALID!
EE34 EE1F       107:         LDX     IOCB:HRDSI,X
EE36 8601       108:         LDAA      #1
EE38 A70B       109:         STAA      RDSI:MODIFIED,X
                110:         ;LDX    IOCBPOINTER       IS THIS ALLOCATION...
EE3A FECE09     111:         LDX     IOCBPOINTER
EE3D A60B       112:         LDAA      IOCB:EOFFLAG,X     OCCURRING IN THE MIDDLE OF THE FILE ?
EE3F 260D       113:         BNE      ALLOCDC4   B/ NO, ALLOCATION OCCURRING PAST END OF FILE
                114:         ;CLR     IOCB:LOCATEDF,X     FORCE RE-LOCATION TO OCCUR AGAIN
EE41 6F11       115:         CLR      IOCB:LOCATEDF,X
                116:         ;CLR     IOCB:DRSN,X       SELECT SECTOR ZERO OF CLUSTER
EE43 6F1A       117:         CLR      IOCB:DRSN,X
                118:         ;LDD    ALLOCATIONPLCN      GET CLUSTER NUMBER
EE45 F6CEDB     119:         LDAB      ALLOCATIONPLCN+1
EE48 B6CEDA     120:         LDAA      ALLOCATIONPLCN
                121:         ;JSR    ZEROCLUSTER      GO ZERO THE CLUSTER
EE4B BDEECB     122:         JSR     ZEROCLUSTER
  EE4E          123: ALLOCDC4   ; DONE ZEROING CLUSTER
                124:         ;LDX    FCBPOINTER        BUMP # CLUSTERS ALLOCATED TO FILE




ASM/6800 1.4A0: EE4E SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 339; Form 1     DISK FILE DRIVERS -- DISK SPACE MANAGEMENT
SDOS11G.ASM
EE4E FECEA6     125:         LDX     FCBPOINTER
                126:         ;INC     FCB:NCLUSTERS+1,X
EE51 6C10       127:         INC      FCB:NCLUSTERS+1,X
EE53 2602       128:         BNE      ALLOCDC3
                129:         ;INC     FCB:NCLUSTERS,X
EE55 6C0F       130:         INC      FCB:NCLUSTERS,X
  EE57          131: ALLOCDC3   EQU     *
EE57 A60A       132:         LDAA      FCB:FLAGS,X        FORCE FCB BACK TO DIRECTORY
EE59 8A40       133:         ORAA      #FCBFLG::UPDATEDIR
EE5B A70A       134:         STAA      FCB:FLAGS,X
                135:         ;LDX    ALLOCATIONCOUNT     REMEMBER THAT WE ALLOCATED A CLUSTER
EE5D FECED8     136:         LDX     ALLOCATIONCOUNT
EE60 09         137:         DEX             BY DECREMENTING NUMBER OF CLUSTERS LEFT TO ALLOCATE
EE61 FFCED8     138:         STX     ALLOCATIONCOUNT     REMEMBER NUMBER OF CLUSTERS LEFT TO ALLOCATE
EE64 271F       139:         BEQ      ALLOCDONE B/ ALL DONE ALLOCATING
                140:         ;LDX    IOCBPOINTER       BUMP RELATIVE DATA CLUSTER NUMBER...
EE66 FECE09     141:         LDX     IOCBPOINTER
                142:         ;INC     IOCB:RDCN+1,X      SO WE WILL FILL THE NEXT ONE
EE69 6C1C       143:         INC      IOCB:RDCN+1,X
EE6B 2602       144:         BNE      ALLOCDC1   B/ NO CARRY TO PROPOGATE
                145:         ;INC     IOCB:RDCN,X
EE6D 6C1B       146:         INC      IOCB:RDCN,X
  EE6F          147: ALLOCDC1   EQU     *
                148:         ;LDD    IOCB:RDCN,X        WILL WE RUN OFF END OF HEADER CLUSTER ?
EE6F E61C       149:         LDAB      (IOCB:RDCN)+1,X
EE71 A61B       150:         LDAA      IOCB:RDCN,X
                151:         ;ASLD            (I.E., IS RDCN*2 >= NBPC ? )
EE73 58         152:         ASLB
EE74 49         153:         ROLA
                154:         ;LDX    DCBPOINTER
EE75 DE06       155:         LDX     DCBPOINTER
                156:         ;SUBD    DSKINFO:NBPC,X    (I.E., IS RDCN-NBPC >= 0?)
EE77 E021       157:         SUBB      (DSKINFO:NBPC)+1,X
EE79 A220       158:         SBCA       DSKINFO:NBPC,X
EE7B 2408       159:         BCC        ALLOCDONE B/ YES, QUIT ALLOCATING NOW
                160:         ;JSR    LOCATERDCN LOCATE NEXT LCN FOR DATA CLUSTER
EE7D BDF66D     161:         JSR     LOCATERDCN
                162:         ;LDX    HEADER:LCN,X      IS LCN FOR :RDCN UNALLOCATED ?
EE80 EE00       163:         LDX     HEADER:LCN,X
EE82 08         164:         INX             ...?




ASM/6800 1.4A0: EE83 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 340; Form 1     DISK FILE DRIVERS -- DISK SPACE MANAGEMENT
SDOS11G.ASM
EE83 270E       165:         BEQ      ALLOCDATACLUSTJ      B/ YES, GO FILL UNALLOCATED SLOT
  EE85          166: ALLOCDONE ; AT LEAST ONE DATA CLUSTER WAS ALLOCATED
                167:         ;LDD    ALLOCATIONPLCN      UPDATE RANDOM MAP SEARCH START POINT
EE85 F6CEDB     168:         LDAB      ALLOCATIONPLCN+1
EE88 B6CEDA     169:         LDAA      ALLOCATIONPLCN
                170:         ;LDX    DCBPOINTER        TO LAST ALLOCATED SECTOR...
EE8B DE06       171:         LDX     DCBPOINTER
                172:         ;STD    DSKINFO:RANDMAP,X WHICH IS NEAR A REGION OF FREE CLUSTERS
EE8D E723       173:         STAB      (DSKINFO:RANDMAP)+1,X
EE8F A722       174:         STAA      DSKINFO:RANDMAP,X
EE91 0C39       175:         OKRTS
                176: 
  EE93          177: ALLOCDATACLUSTJ      EQU     *
                178:         ;JMP    ALLOCDATACLUSTERS
EE93 7EEE13     179:         JMP     ALLOCDATACLUSTERS




ASM/6800 1.4A0: EE93 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 341; Form 1     DISK FILE DRIVERS -- DISK SPACE MANAGEMENT
SDOS11G.ASM
                181: *
                182: *       ALLOCINITHS -- INITIALIZE HEADER CLUSTER SECTOR...
                183: *               WHOSE RDSI IS IN RDSIPOINTER
                184: *               RETURN (X)= IOCBPOINTER
                185: *               MARKS SECTOR AS MODIFIED
                186: *
  EE96          187: ALLOCINITHS       EQU     *
                188:         ;LDX    DCBPOINTER        GET NEGATIVE OF NUMBER OF BYTES PER SECTOR
EE96 DE06       189:         LDX     DCBPOINTER
EE98 4F         190:         CLRA
EE99 5F         191:         CLRB
                192:         ;SUBD    DSKINFO:NBPS,X
EE9A E00A       193:         SUBB      (DSKINFO:NBPS)+1,X
EE9C A209       194:         SBCA       DSKINFO:NBPS,X
EE9E 9700       195:         STAA      TEMPA
                196:         ;LDX    RDSIPOINTER     TAG SECTOR AS MODIFIED
EEA0 FECEA4     197:         LDX     RDSIPOINTER
EEA3 8601       198:         LDAA      #1
EEA5 A70B       199:         STAA      RDSI:MODIFIED,X
                200:         ;LDX    RDSI:SECTORBASE,X  GET SECTOR BUFFER ADDRESS
EEA7 EE05       201:         LDX     RDSI:SECTORBASE,X
EEA9 40         202:         NEGA             GET -1 CODE TO STORE INTO HEADER SECTOR
                203: *
                204: *       STAASECTORL -- COPY (A) INTO SECTOR BUFFER (X)
                205: *               (TEMPA,B) = - # BYTES TO COPY
                206: *
  EEAA          207: STAASECTORL        ; INITZ A SECTOR BYTE
                208:         ;STA     ,X+     FILL SECTOR WITH -1'S
EEAA A700       209:         STAA      0,X
EEAC 08         210:         INX
EEAD 5C         211:         INCB
EEAE 26FA       212:         BNE      STAASECTORL        B/ MORE TO FILL
                213:         ;INC     TEMPA    = UPPER HALF OF COUNTER
EEB0 7C0000     214:         INC      TEMPA
EEB3 26F5       215:         BNE      STAASECTORL        B/ MORE TO FILL
                216:         ;LDX    IOCBPOINTER       AS PROMISED
EEB5 FECE09     217:         LDX     IOCBPOINTER
EEB8 39         218:         RTS




ASM/6800 1.4A0: EEB8 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 342; Form 1     DISK FILE DRIVERS -- DISK SPACE MANAGEMENT
SDOS11G.ASM
                220: *
                221: *       ZEROSECTOR -- ZERO OUT THE SECTOR BUFFER OF RDSIPOINTER
                222: *       DOES NOT MARK SECTOR AS MODIFIED
                223: *       (BECAUSE IT MIGHT BE A READ OF A SPARSE SECTOR)
                224: *
  EEB9          225: ZEROSECTOR       EQU     *
                226:         ;LDX    DCBPOINTER        GET NEGATIVE OF NUMBER OF BYTES PER SECTOR
EEB9 DE06       227:         LDX     DCBPOINTER
EEBB 4F         228:         CLRA              = 0 - DSKINFO:NBPS
EEBC 5F         229:         CLRB
                230:         ;SUBD    DSKINFO:NBPS,X
EEBD E00A       231:         SUBB      (DSKINFO:NBPS)+1,X
EEBF A209       232:         SBCA       DSKINFO:NBPS,X
EEC1 9700       233:         STAA      TEMPA    SINCE (A) WILL BE BUSY WITH ZERO
                234:         ;LDX    RDSIPOINTER     MARK SECTOR AS MODIFIED
EEC3 FECEA4     235:         LDX     RDSIPOINTER
                236:         ;LDX    RDSI:SECTORBASE,X  GET SECTOR BUFFER ADDRESS
EEC6 EE05       237:         LDX     RDSI:SECTORBASE,X
EEC8 4F         238:         CLRA              MAKE A ZERO TO STORE
EEC9 20DF       239:         BRA       STAASECTORL        AND GO STORE A SECTORFUL
                240: *
                241: *       ZEROCLUSTER -- ZEROS OUT CLUSTER WHOSE LCN IS IN (A,B)
                242: *
  EECB          243: ZEROCLUSTER      EQU     *
                244:         ;JSR    CONVERTLCNTOLSN   AND GO FIND FIRST SECTOR OF CLUSTER !
EECB BDF77A     245:         JSR     CONVERTLCNTOLSN
  EECE          246: ZEROCLUSTERL     ; ZERO OUT A DATA CLUSTER LOOP
                247:         ;LDX    IOCBPOINTER       GET SECTOR DESCRIPTOR ADDRESS
EECE FECE09     248:         LDX     IOCBPOINTER
                249:         ;JSR    INVENTSECTOR     INVENT THE DATA SECTOR ADDRESS
EED1 BDF8F2     250:         JSR     INVENTSECTOR
EED4 8DE3       251:         BSR      ZEROSECTOR       GO ZERO IT!
                252:         ;JSR    MARKMODIFIED     MARK THIS SECTOR AS MODIFIED
EED6 BDDF7E     253:         JSR     MARKMODIFIED
                254:         ;JSR    INCIOCB:CURLSN      FIND NEXT DATA SECTOR ADDRESS
EED9 BDF7F2     255:         JSR     INCIOCB:CURLSN
                256:         ;INC     IOCB:DRSN,X       BUMP RELATIVE SECTOR NUMBER WITHIN CLUSTER
EEDC 6C1A       257:         INC      IOCB:DRSN,X
EEDE A61A       258:         LDAA      IOCB:DRSN,X       ZEROED ALL THE SECTORS IN THE CLUSTER ?
                259:         ;LDX    IOCB:DCB,X  ...?




ASM/6800 1.4A0: EEE0 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 343; Form 1     DISK FILE DRIVERS -- DISK SPACE MANAGEMENT
SDOS11G.ASM
EEE0 EE00       260:         LDX     IOCB:DCB,X
                261:         ;CMPA     DSKINFO:NSPC,X   ...?
EEE2 A111       262:         CMPA      DSKINFO:NSPC,X
EEE4 26E8       263:         BNE      ZEROCLUSTERL     B/ NO, GO ZERO ANOTHER!
EEE6 0C39       264:         OKRTS




ASM/6800 1.4A0: EEE6 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 344; Form 1     DISK FILE DRIVERS -- DISK SPACE MANAGEMENT
SDOS11G.ASM
                266: *       FREECLUSTER -- FREE CLUSTER (A,B) (I.E., RESET MAP BIT)
                267: *       ERROR EXIT IF THAT CLUSTER WAS NOT PREVIOUSLY ALLOCATED
                268: *
  EEE8          269: FREECLUSTER      EQU     *
                270:         ;JSR    FINDLCNMAPBIT      GO LOCATE THE MAP BIT
EEE8 BDF229     271:         JSR     FINDLCNMAPBIT
EEEB A500       272:         BITA      DISKMAP:BYTE,X    DOUBLE-CHECK: WAS MAP BIT SET ?
EEED 2708       273:         BEQ      FREEERROR       B/ NO, TAKE ERROR EXIT
EEEF 43         274:         COMA              YES, MAKE MASK TO RESET BIT
EEF0 A400       275:         ANDA      DISKMAP:BYTE,X    FREE THE CLUSTER
EEF2 A700       276:         STAA      DISKMAP:BYTE,X
                277:         ;JMP    MARKMODIFIED     MAKE SURE MAP SECTOR GOES BACK TO DISK
EEF4 7EDF7E     278:         JMP     MARKMODIFIED
                279: 
  EEF7          280: FREEERROR       EQU     *
                281:         ;JSR    ERRET   LCN WASN'T MARKED AS ALLOCATED
EEF7 BDD1F7     282:         JSR     ERRET
EEFA 03F8       283:         FDB      ERR:LCNWASNTALLOCATED
                284: *
  EEFC          285: ERRNODISKMAPJ1   EQU     *
                286:         ;JMP    ERRNODISKMAP
EEFC 7EED11     287:         JMP     ERRNODISKMAP
                288: *
                289: *       FREECLUSTERS -- FREE (D) DATA CLUSTERS FROM FILE(IOCB)
                290: *               IF (D)=0, DELETES UNTIL END OF HEADER CLUSTER ENCOUNTERED ("CHOP")
                291: *               DELETES STARTING AT IOCB:RDCN (0 IF DELETING FILE)
                292: *               UPDATES IOCB:NCLUSTERS
                293: *               IF FCB:NCLUSTERS DROPS TO 0 (HLCN DEALLOCATED)
                294: *               THEN FCB:HCSIC IS ZEROED
                295: *               IF DELETING FILE, DOESN'T WRITE HEADER BLOCKS BACK TO DISK
                296: *               ERRET TAKEN IF ILLEGAL LCN OR UNALLOCATED LCN SEEN
                297: *
  EEFF          298: FREECLUSTERS     EQU     *
                299:         ;STD    ALLOCATIONCOUNT     REMEMBER HOW MANY CLUSTERS TO DELETE
EEFF F7CED9     300:         STAB      ALLOCATIONCOUNT+1
EF02 B7CED8     301:         STAA      ALLOCATIONCOUNT
                302:         ;LDX    DCBPOINTER        MAP FILE EXIST ?
EF05 DE06       303:         LDX     DCBPOINTER
EF07 A629       304:         LDAA      DSKINFO:MAPFCB,X   ...?
EF09 27F1       305:         BEQ      ERRNODISKMAPJ1   B/ NOPE, CAN'T DEALLOCATE




ASM/6800 1.4A0: EF09 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 345; Form 1     DISK FILE DRIVERS -- DISK SPACE MANAGEMENT
SDOS11G.ASM
  EF0B          306: FREECLUSTERL     EQU     *
                307:         ;JSR    LOCATERDCN ALSO CHECK FOR LEGAL RDCN
EF0B BDF66D     308:         JSR     LOCATERDCN
EF0E 2551       309:         BCS       FREECLUSTERE     B/ OFF END OF HEADER CLUSTER!
                310:         ;LDD    HEADER:LCN,X      GET LCN FROM HEADER SECTOR
EF10 E601       311:         LDAB      (HEADER:LCN)+1,X
EF12 A600       312:         LDAA      HEADER:LCN,X
                313:         ;CMPD    #DUMMYLCN        IS LCN UNALLOCATED?
EF14 81FF       314:         CMPA      #(DUMMYLCN)/256
EF16 2602       315:         BNE      MACRO:001F
EF18 C1FF       316:         CMPB      #(DUMMYLCN)&$FF
  EF1A          317: MACRO:001F
EF1A 273A       318:         BEQ      FREECLUSTERN     B/ NEVER WAS ALLOCATED, PROCESS NEXT
                319:         ;CLR     HEADER:LCN,X      ZAP LCN IN HEADER SECTOR
EF1C 6F00       320:         CLR      HEADER:LCN,X
                321:         ;DEC     HEADER:LCN,X      (I.E., SET TO DUMMYLCN (=-1))
EF1E 6A00       322:         DEC      HEADER:LCN,X
                323:         ;CLR     HEADER:LCN+1,X
EF20 6F01       324:         CLR      HEADER:LCN+1,X
                325:         ;DEC     HEADER:LCN+1,X
EF22 6A01       326:         DEC      HEADER:LCN+1,X
                327:         ;LDX    FCBPOINTER        DELETING THE FILE ?
EF24 FECEA6     328:         LDX     FCBPOINTER
                329:         ;LDX    FCB:NCLUSTERS,X    (I.E., IS # CLUSTERS TO DELETE...
EF27 EE0F       330:         LDX     FCB:NCLUSTERS,X
EF29 BCCED8     331:         CPX      ALLOCATIONCOUNT     = # CLUSTERS REMAINING IN FILE ?)
EF2C 2709       332:         BEQ      FREECLUSTER0     B/ DON'T BOTHER MOVING HEADER SECTOR BACK TO DISK
                333:         ;LDX    IOCBPOINTER       MAKE SURE HEADER SECTOR GOES BACK TO DISK
EF2E FECE09     334:         LDX     IOCBPOINTER
                335:         ;LDX    IOCB:HRDSI,X
EF31 EE1F       336:         LDX     IOCB:HRDSI,X
                337:         ;CLR     RDSI:MODIFIED,X MARK RDSI AS MODIFIED
EF33 6F0B       338:         CLR      RDSI:MODIFIED,X
                339:         ;INC     RDSI:MODIFIED,X
EF35 6C0B       340:         INC      RDSI:MODIFIED,X
  EF37          341: FREECLUSTER0     EQU     *
                342:         ;JSR    FREECLUSTER      GO FREE THE CLUSTER WE FOUND
EF37 BDEEE8     343:         JSR     FREECLUSTER
                344:         ;LDX    FCBPOINTER        DOWN COUNT # CLUSTERS ALLOCATED TO FILE
EF3A FECEA6     345:         LDX     FCBPOINTER




ASM/6800 1.4A0: EF3D SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 346; Form 1     DISK FILE DRIVERS -- DISK SPACE MANAGEMENT
SDOS11G.ASM
EF3D A610       346:         LDAA      FCB:NCLUSTERS+1,X
EF3F 2602       347:         BNE      FREECLUSTER3
                348:         ;DEC     FCB:NCLUSTERS,X
EF41 6A0F       349:         DEC      FCB:NCLUSTERS,X
  EF43          350: FREECLUSTER3     EQU     *
                351:         ;DEC     FCB:NCLUSTERS+1,X
EF43 6A10       352:         DEC      FCB:NCLUSTERS+1,X
EF45 A60A       353:         LDAA      FCB:FLAGS,X        MARK FCB AS REQUIRING...
EF47 8A40       354:         ORAA      #FCBFLG::UPDATEDIR A DIRECTORY UPDATE
EF49 A70A       355:         STAA      FCB:FLAGS,X
                356:         ;LDX    ALLOCATIONCOUNT     DOWN COUNT # CLUSTERS LEFT TO DEALLOCATE
EF4B FECED8     357:         LDX     ALLOCATIONCOUNT
EF4E 2706       358:         BEQ      FREECLUSTERN     B/ 0, DELETE TILL END OF HEADER CLUSTER
EF50 09         359:         DEX
EF51 FFCED8     360:         STX     ALLOCATIONCOUNT
EF54 2723       361:         BEQ      FREECLUSTERDONE  B/ DEALLOCATION COMPLETED
  EF56          362: FREECLUSTERN     ; PROCESS NEXT CLUSTER
                363:         ;LDX    IOCBPOINTER       COMPUTE RELATIVE CLUSTER #
EF56 FECE09     364:         LDX     IOCBPOINTER
                365:         ;INC     IOCB:RDCN+1,X
EF59 6C1C       366:         INC      IOCB:RDCN+1,X
EF5B 2602       367:         BNE      FREECLUSTER2
                368:         ;INC     IOCB:RDCN,X
EF5D 6C1B       369:         INC      IOCB:RDCN,X
  EF5F          370: FREECLUSTER2     EQU     *
EF5F 20AA       371:         BRA       FREECLUSTERL     GO FREE ANOTHER CLUSTER




ASM/6800 1.4A0: EF5F SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 347; Form 1     DISK FILE DRIVERS -- DISK SPACE MANAGEMENT
SDOS11G.ASM
  EF61          373: FREECLUSTERE     ; ERROR ENCOUNTERED
                374:         ;LDD    ALLOCATIONCOUNT     DELETEING TILL END OF HEADER CLUSTER ?
EF61 F6CED9     375:         LDAB      ALLOCATIONCOUNT+1
EF64 B6CED8     376:         LDAA      ALLOCATIONCOUNT
                377:         ;BNED    FREECLUSTERE1    B/ NO, WE GOOFED SOMEHOW!
EF67 260D       378:         BNE      FREECLUSTERE1
EF69 5D         379:         TSTB
EF6A 260A       380:         BNE      FREECLUSTERE1
EF6C 8C0401     381:         CPX      #ERR:HCSICTOOSMALL YES, VALID REASON TO QUIT?
EF6F 2708       382:         BEQ      FREECLUSTERDONE  B/ YES
EF71 8C041C     383:         CPX      #ERR:CLUSTERSIZELIMITSFILE       A DIFFERENT, BUT ALSO VALID REASON?
EF74 2703       384:         BEQ      FREECLUSTERDONE  B/ YES
  EF76          385: FREECLUSTERE1 ; FATAL ERROR IN FREE CLUSTER
                386:         ;JMP    ERRORED
EF76 7ED20A     387:         JMP     ERRORED
                388: 
  EF79          389: FREECLUSTERDONE  EQU     *
                390:         ;LDX    FCBPOINTER
EF79 FECEA6     391:         LDX     FCBPOINTER
  0001          392:         IF      M6800
EF7C A60F       393:         LDAA      FCB:NCLUSTERS,X    IS NCLUSTERS = 0?
EF7E AA10       394:         ORAA      FCB:NCLUSTERS+1,X
  0001          395:         ELSE    (M6801!M6809)
 *S*            396:         ;LDD    FCB:NCLUSTERS,X    IS NCLUSTERS = 0 ?
 *S*            397:         LDAB      (FCB:NCLUSTERS)+1,X
 *S*            398:         LDAA      FCB:NCLUSTERS,X
                399:         FIN
EF80 2602       400:         BNE      FREECLUSTEREXIT  B/ NO, FILE JUST SMALLER
EF82 A70E       401:         STAA      FCB:HCSIC,X YES, ZAP :HCSIC
  EF84          402: FREECLUSTEREXIT  EQU     *
EF84 0C39       403:         OKRTS
                404: *       SEARCHMAP -- SEARCHES DISK MAP FOR ALLOCATIONCOUNT CONTIGUOUS CLUSTERS
                405: *               STARTS WITH FORWARD SEARCH FROM LCN(A,B)
                406: *               IF LCN(A,B) = :FFFF, CHOOSES RANDOM PLACE IN MAP
                407: *               SEARCHES FOR CONTIGUOUS AREA OF ALLOCATIONCOUNT CLUSTERS
                408: *               USES 1ST FREE CLUSTER FOUND IF ALLOCATION SPACE NOT AVAILABLE
                409: *               QUITS IF FIRST FREE CLUSTER = 1 UNIT FORWARD FROM LCN(A,B)
                410: *               IF FREE GROUP FOUND, FINDS BEGINNING OF GROUP
                411: *               THEN TRIES BACKWARD SEARCH
                412: *               ALSO RECORDS 1ST FREE CLUSTER IF CLOSER THAN FWD SEARCH POINT




ASM/6800 1.4A0: EF84 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 348; Form 1     DISK FILE DRIVERS -- DISK SPACE MANAGEMENT
SDOS11G.ASM
                413: *               UPDATES DISKMAP BY SETTING THE CORRESPONDING BIT
                414: *               USES IOCB SELECTED BY IOCBPOINTER; DCB SELECTED BY DCBPOINTER
                415: *       OKRTS: RETURNS ALLOCATED LCN IN (A,B); UPDATES MAP
                416: *       ERRET: NO DISK BLOCK AVAILABLE
                417: *
  EF86          418: SEARCHMAP  EQU     *
                419:         ;STD    DESIREDLCN       SAVE # OF (DESIRED LCN -1)
EF86 F7CEE5     420:         STAB      DESIREDLCN+1
EF89 B7CEE4     421:         STAA      DESIREDLCN
                422:         ;LDX    #DUMMYLCN        SET BEST DISCOVERED LCN TO "DUMMY"
EF8C CEFFFF     423:         LDX     #DUMMYLCN
EF8F FFCEE0     424:         STX     AVAILABLELCN
EF92 BCCEE4     425:         CPX      DESIREDLCN       IS (A,B) = DUMMYLCN ?
EF95 2606       426:         BNE      SEARCHMAP1 (UNALLOCATED LCN AS START POINT?)
                427:         ;LDX    DCBPOINTER        YES, CHOOSE "RANDOM" POINT IN MAP
EF97 DE06       428:         LDX     DCBPOINTER
                429:         ;LDD    DSKINFO:RANDMAP,X = LAST PLACE WE FOUND SOME FREE SPACE
EF99 E623       430:         LDAB      (DSKINFO:RANDMAP)+1,X
EF9B A622       431:         LDAA      DSKINFO:RANDMAP,X
  EF9D          432: SEARCHMAP1 EQU     *
                433:         ;STD    SEARCHLCN  REMEMBER SEARCH STARTING POINT
EF9D F7CEDF     434:         STAB      SEARCHLCN+1
EFA0 B7CEDE     435:         STAA      SEARCHLCN
  EFA3          436: SEARCHM5  EQU     *
                437:         ;LDD    SEARCHLCN  GET DESIRED START POINT
EFA3 F6CEDF     438:         LDAB      SEARCHLCN+1
EFA6 B6CEDE     439:         LDAA      SEARCHLCN
                440:         ;JSR    FINDLCNMAPBIT
EFA9 BDF229     441:         JSR     FINDLCNMAPBIT
  EFAC          442: SEARCHM2  EQU     *
EFAC A500       443:         BITA      DISKMAP:BYTE,X    ARE WE IN MIDDLE OF GROUP OF FREE CLUSTERS?
EFAE 2668       444:         BNE      SEARCHMF  B/ NO, START FORWARD SEARCH
EFB0 F6CEDF     445:         LDAB      SEARCHLCN+1        MUST SCAN BACKWARDS TO BEGINNING OF GROUP
EFB3 2603       446:         BNE      SEARCHM3  BACK UP LCN WE'RE LOOKING AT
                447:         ;DEC     SEARCHLCN  DON'T YOU HATE DBL PRECISION DECREMENTS?
EFB5 7ACEDE     448:         DEC      SEARCHLCN
  EFB8          449: SEARCHM3  EQU     *
                450:         ;DEC     SEARCHLCN+1
EFB8 7ACEDF     451:         DEC      SEARCHLCN+1
EFBB 44         452:         LSRA             MOVE BIT MASK DOWN




ASM/6800 1.4A0: EFBC SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 349; Form 1     DISK FILE DRIVERS -- DISK SPACE MANAGEMENT
SDOS11G.ASM
EFBC 24EE       453:         BCC        SEARCHM2  B/ NOT ALL BITS IN DISKMAP BYTE PROCESSED
  EFBE          454: SEARCHM4  ; ASSERT: SEARCHLCN MOD 8 = 7 HERE
EFBE 09         455:         DEX             BACK UP THE BYTE POINTER
EFBF BCCEE8     456:         CPX      DISKMAPSECTORSTART WILL WE RUN OFF BOTTOM OF MAP SECTOR?
EFC2 27DF       457:         BEQ      SEARCHM5  B/ YEP, TIME TO READ ANOTHER MAP SECTOR
EFC4 8680       458:         LDAA      #$80    BE OPTIMISTIC, GET NEW MASK
EFC6 E600       459:         LDAB      DISKMAP:BYTE,X    DO QUICK CHECK ON MAP BYTE
EFC8 26E2       460:         BNE      SEARCHM2  B/ WE'LL FIND AN ALLOCATED CLUSTER
                461:         ;LDD    SEARCHLCN  SKIP UNALLOCATED CLUSTERS
EFCA F6CEDF     462:         LDAB      SEARCHLCN+1
EFCD B6CEDE     463:         LDAA      SEARCHLCN
                464: *       *** ASSUMES LCN 0 ALWAYS ALLOCATED!
                465:         ;SUBD    #NMBPB    NUMBER OF MAP BITS PER BYTE
EFD0 C008       466:         SUBB      #(NMBPB)&$FF
EFD2 8200       467:         SBCA       #(NMBPB)/256
                468:         ;STD    SEARCHLCN  UPDATE NEXT LCN TO LOOK AT
EFD4 F7CEDF     469:         STAB      SEARCHLCN+1
EFD7 B7CEDE     470:         STAA      SEARCHLCN
                471:         ;JMP    SEARCHM4  A SPEEDUP IS SPOSD TO BE FAST!
EFDA 7EEFBE     472:         JMP     SEARCHM4
                473: 
  EFDD          474: SEARCHMFQJ1       EQU     *
                475:         ;JMP    SEARCHMFQ
EFDD 7EF0CA     476:         JMP     SEARCHMFQ




ASM/6800 1.4A0: EFDD SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 350; Form 1     DISK FILE DRIVERS -- DISK SPACE MANAGEMENT
SDOS11G.ASM
  EFE0          478: SEARCHMFE ; EXHAUSTED MAP BYTE WHILE LOOKING FOR FREE LCN
EFE0 8601       479:         LDAA      #1      GET MASK FOR NEXT LCN TO CHECK
EFE2 08         480:         INX             BUMP MAP BYTE POINTER
EFE3 BCCEEA     481:         CPX      DISKMAPSECTOREND  RUN OFF END OF MAP SECTOR?
EFE6 2714       482:         BEQ      SEARCHMFE1        B/ YES
  EFE8          483: SEARCHMFE2        EQU     *
EFE8 E600       484:         LDAB      DISKMAP:BYTE,X    NO, CHECK WHOLE MAP BYTE...
EFEA 5C         485:         INCB              TO SEE IF ALL ENTRIES IN IT ARE ALLOCATED
EFEB 2642       486:         BNE      SEARCHMF1A B/ NOPE, SEARCH MAP BYTE THE HARD WAY
EFED F6CEDF     487:         LDAB      SEARCHLCN+1        ENTIRE BYTE IS ALLOCATED
EFF0 CB08       488:         ADDB      #NMBPB    SKIP SEARCHLCN FORWARD THAT MANY LCN'S
EFF2 F7CEDF     489:         STAB      SEARCHLCN+1
EFF5 26E9       490:         BNE      SEARCHMFE AND GO CHECK NEXT MAP BYTE
                491:         ;INC     SEARCHLCN  (PROPOGATE CARRY TO UPPER HALF)
EFF7 7CCEDE     492:         INC      SEARCHLCN
EFFA 20E4       493:         BRA       SEARCHMFE
                494: 
  EFFC          495: SEARCHMFE1        ; RAN OFF END OF MAP SECTOR LOOKING FOR FREE LCN
                496:         ;LDD    SEARCHLCN  GO FIND THE MAP SECTOR...
EFFC F6CEDF     497:         LDAB      SEARCHLCN+1
EFFF B6CEDE     498:         LDAA      SEARCHLCN
                499:         ;JSR    FINDLCNMAPBIT      WHICH CONTAINS THE BIT WE WANT
F002 BDF229     500:         JSR     FINDLCNMAPBIT
F005 25D6       501:         BCS       SEARCHMFQJ1       OOPS, RAN OFF END OF MAP
                502:         ;LDX    IOCBPOINTER       INITIATE READ-AHEAD OF NEXT MAP SECTOR
F007 FECE09     503:         LDX     IOCBPOINTER
                504:         ;JSR    READAHEAD
F00A BDF806     505:         JSR     READAHEAD
                506:         ;LDX    DISKMAPBYTEPOINTER        GET POINTER TO MAP BYTE
F00D FECEEC     507:         LDX     DISKMAPBYTEPOINTER
F010 B6CEEE     508:         LDAA      DISKMAPMASK       AND BIT MASK FOR MAP BIT
F013 20D3       509:         BRA       SEARCHMFE2        GO CHECK BYTE CONTENTS
                510: 
  F015          511: SEARCHMFQXITJ1    EQU     *
                512:         ;JMP    SEARCHMFQXIT
F015 7EF1CE     513:         JMP     SEARCHMFQXIT




ASM/6800 1.4A0: F015 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 351; Form 1     DISK FILE DRIVERS -- DISK SPACE MANAGEMENT
SDOS11G.ASM
  F018          515: SEARCHMF  ; NOW START FORWARD MAP SEARCH
F018 F6CEDE     516:         LDAB      SEARCHLCN  REMEMBER DIVIDING POINT IN MAP...
F01B F7CEDC     517:         STAB      DIVIDEPOINTLCN   SO WE CAN START BACKWARDS SEARCH LATER
F01E F6CEDF     518:         LDAB      SEARCHLCN+1
F021 F7CEDD     519:         STAB      DIVIDEPOINTLCN+1
  F024          520: SEARCHMF0 EQU     *
                521:         ;INC     SEARCHLCN+1        BUMP LCN WE'RE ABOUT TO LOOK AT
F024 7CCEDF     522:         INC      SEARCHLCN+1
F027 2603       523:         BNE      SEARCHMF1
                524:         ;INC     SEARCHLCN
F029 7CCEDE     525:         INC      SEARCHLCN
  F02C          526: SEARCHMF1 ; LOOK AT NEXT BIT IN BIT MAP
F02C 48         527:         ASLA              SWITCH BIT MASK'S ATTN TO PROPER BIT
F02D 25B1       528:         BCS       SEARCHMFE B/ EXHAUSTED BYTE
  F02F          529: SEARCHMF1A EQU     *
F02F A500       530:         BITA      DISKMAP:BYTE,X    IS THIS LCN ALSO ALLOCATED?
F031 26F1       531:         BNE      SEARCHMF0 B/ YES, SKIP OVER IT
F033 FFCEEC     532:         STX     DISKMAPBYTEPOINTER        SAVE MAP BYTE ADDRESS
                533:         ;LDX    AVAILABLELCN FOUND A FREE CLUSTER!
F036 FECEE0     534:         LDX     AVAILABLELCN
F039 08         535:         INX             SEE IF ANOTHER HAS ALREADY BEEN FOUND
F03A 261D       536:         BNE      SEARCHMF4 B/ YES, DON'T RECORD THIS ONE
                537:         ;LDX    SEARCHLCN  NO, SAVE LCN IN CASE...
F03C FECEDE     538:         LDX     SEARCHLCN
F03F FFCEE0     539:         STX     AVAILABLELCN WE CAN'T FIND CONTIGUOUS ALLOCATION
                540:         ;LDX    #1      SET GROUPSIZE TO 1
F042 CE0001     541:         LDX     #1
F045 FFCEE2     542:         STX     AVAILABLECOUNT
F048 F6CEDF     543:         LDAB      SEARCHLCN+1        IS JUST-FOUND CLUSTER...
F04B 0D         544:         SEC              = DESIRED CLUSTER + 1 ?
F04C F2CEE5     545:         SBCB       DESIREDLCN+1     (I.E., IS SEARCHLCN-DESIREDLCN=1?)
F04F 2608       546:         BNE      SEARCHMF4 B/ NO
F051 F6CEDE     547:         LDAB      SEARCHLCN  (I.E. IS SEARCHLCN-DESIREDLCN-1=0?)
F054 F2CEE4     548:         SBCB       DESIREDLCN       ...?
F057 27BC       549:         BEQ      SEARCHMFQXITJ1    B/ YES, TAKE QUICK EXIT




ASM/6800 1.4A0: F057 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 352; Form 1     DISK FILE DRIVERS -- DISK SPACE MANAGEMENT
SDOS11G.ASM
  F059          551: SEARCHMF4 EQU     *
                552:         ;LDX    DISKMAPBYTEPOINTER        GET ADDRESS OF MAP BYTE CONTAINING FREE CLUS
F059 FECEEC     553:         LDX     DISKMAPBYTEPOINTER
                554:         ;CLR     LCNGROUPLENGTH   FIND OUT HOW LONG...
F05C 7FCEE6     555:         CLR      LCNGROUPLENGTH
                556:         ;CLR     LCNGROUPLENGTH+1 THE GROUP OF FREE LCN'S IS
F05F 7FCEE7     557:         CLR      LCNGROUPLENGTH+1
  F062          558: SEARCHMF2 EQU     *
                559:         ;INC     LCNGROUPLENGTH+1 BUMP LENGTH OF FREE GROUP OF LCNS
F062 7CCEE7     560:         INC      LCNGROUPLENGTH+1
F065 2603       561:         BNE      SEARCHMF3
                562:         ;INC     LCNGROUPLENGTH
F067 7CCEE6     563:         INC      LCNGROUPLENGTH
  F06A          564: SEARCHMF3 ; LOOK AT NEXT BIT
F06A F6CEE6     565:         LDAB      LCNGROUPLENGTH   IS SIZE OF THIS FREE GROUP...
                566:         ;CMPB     ALLOCATIONCOUNT     >= TO ALLOCATION COUNT?
F06D F1CED8     567:         CMPB      ALLOCATIONCOUNT
F070 2508       568:         BCS       SEARCHMF5 B/ NO (ELSE MUST BE EQUAL!)
F072 F6CEE7     569:         LDAB      LCNGROUPLENGTH+1 = COMPARE IS SUFFICIENT, SINCE...
                570:         ;CMPB     ALLOCATIONCOUNT+1   LCN GROUPLENGTH IS MONOTONICALLY INCREASING
F075 F1CED9     571:         CMPB      ALLOCATIONCOUNT+1
F078 2732       572:         BEQ      SEARCHMFG AND WAS < ALLOCATION COUNT LAST TIME WE CHECKED
  F07A          573: SEARCHMF5 EQU     *
                574:         ;INC     SEARCHLCN+1        BUMP LCN TO LOOK AT
F07A 7CCEDF     575:         INC      SEARCHLCN+1
F07D 2603       576:         BNE      SEARCHMF6 B/ EXHAUSTED MAP BYTE
                577:         ;INC     SEARCHLCN  BUMP LCN WE'LL BE LOOKING AT
F07F 7CCEDE     578:         INC      SEARCHLCN
  F082          579: SEARCHMF6 EQU     *
F082 48         580:         ASLA              SHIFT BIT MASK OVER
F083 2506       581:         BCS       SEARCHMF8 B/ EXHAUSTED MAP BYTE
  F085          582: SEARCHMF7 EQU     *
F085 A500       583:         BITA      DISKMAP:BYTE,X    LOOK AT NEXT LCN BIT
F087 27D9       584:         BEQ      SEARCHMF2 B/ ITS FREE, COUNT IT
F089 2099       585:         BRA       SEARCHMF0 FREE GROUP NOT LONG ENOUGH TO USE




ASM/6800 1.4A0: F089 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 353; Form 1     DISK FILE DRIVERS -- DISK SPACE MANAGEMENT
SDOS11G.ASM
  F08B          587: SEARCHMF8 ; EXHAUSTED MAP BYTE WHILE SCANNING FREE GROUP OF LCN'S
F08B 8601       588:         LDAA      #1      GET MASK FOR MAP BIT IN NEXT BYTE
F08D 08         589:         INX             BUMP MAP BYTE POITER
F08E BCCEEA     590:         CPX      DISKMAPSECTOREND  EXHAUST MAP SECTOR?
F091 26F2       591:         BNE      SEARCHMF7 B/ NO, KEEP SEARCHING
                592:         ;LDD    SEARCHLCN  DISK MAP SECTOR EXHAUSTED, GET NEXT LCN TO CHECK
F093 F6CEDF     593:         LDAB      SEARCHLCN+1
F096 B6CEDE     594:         LDAA      SEARCHLCN
                595:         ;JSR    FINDLCNMAPBIT      SET UP TO SEARCH NEXT MAP SECTOR
F099 BDF229     596:         JSR     FINDLCNMAPBIT
F09C 252C       597:         BCS       SEARCHMFQ QUIT IF WE RUN OFF END OF MAP
                598:         ;LDX    IOCBPOINTER       INITIATE PRE-FETCH...
F09E FECE09     599:         LDX     IOCBPOINTER
                600:         ;JSR    READAHEAD  OF NEXT MAP SECTOR
F0A1 BDF806     601:         JSR     READAHEAD
                602:         ;LDX    DISKMAPBYTEPOINTER        GET POINTER TO MAP BYTE...
F0A4 FECEEC     603:         LDX     DISKMAPBYTEPOINTER
F0A7 B6CEEE     604:         LDAA      DISKMAPMASK       AND BIT MASK
F0AA 20D9       605:         BRA       SEARCHMF7 GO CHECK BIT TO SEE IF FREE
                606: 
  F0AC          607: SEARCHMFG ; FORWARD SEARCH FOUND ALLOCATION COUNT FREE CLUSTERS
                608:         ;LDD    LCNGROUPLENGTH   RECORD SIZE OF FREE GROUP OF LCN'S
F0AC F6CEE7     609:         LDAB      LCNGROUPLENGTH+1
F0AF B6CEE6     610:         LDAA      LCNGROUPLENGTH
                611:         ;STD    AVAILABLECOUNT
F0B2 F7CEE3     612:         STAB      AVAILABLECOUNT+1
F0B5 B7CEE2     613:         STAA      AVAILABLECOUNT
                614:         ;COMD            COMPUTE LCN OF FIRST LCN IN THIS FREE GROUP
F0B8 53         615:         COMB
F0B9 43         616:         COMA
                617:         ;ADDD    SEARCHLCN  = LCN OF CLUSTER TERMINATING GROUP
F0BA FBCEDF     618:         ADDB      SEARCHLCN+1
F0BD B9CEDE     619:         ADCA       SEARCHLCN
                620:         ;ADDD    #2      - SIZE OF GROUP +1 = COMPLEMENT(GROUPLENGTH) + 2
F0C0 CB02       621:         ADDB      #(2)&$FF
F0C2 8900       622:         ADCA       #(2)/256
                623:         ;STD    AVAILABLELCN REMEMBER WHERE THE GROUP STARTS
F0C4 F7CEE1     624:         STAB      AVAILABLELCN+1
F0C7 B7CEE0     625:         STAA      AVAILABLELCN
  F0CA          626: SEARCHMFQ ; QUIT FORWARD SEARCH




ASM/6800 1.4A0: F0C7 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 354; Form 1     DISK FILE DRIVERS -- DISK SPACE MANAGEMENT
SDOS11G.ASM
                627:         ;LDD    DIVIDEPOINTLCN   START BACKWARDS SEARCH...
F0CA F6CEDD     628:         LDAB      DIVIDEPOINTLCN+1
F0CD B6CEDC     629:         LDAA      DIVIDEPOINTLCN
                630:         ;STD    SEARCHLCN  AT DIVIDING POINT IN MAP
F0D0 F7CEDF     631:         STAB      SEARCHLCN+1
F0D3 B7CEDE     632:         STAA      SEARCHLCN
                633:         ;JSR    FINDLCNMAPBIT
F0D6 BDF229     634:         JSR     FINDLCNMAPBIT




ASM/6800 1.4A0: F0D6 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 355; Form 1     DISK FILE DRIVERS -- DISK SPACE MANAGEMENT
SDOS11G.ASM
                636:         ;JSR    READBEHIND        INITIATE THE READ BEHIND
F0D9 BDF7E4     637:         JSR     READBEHIND
                638:         ;LDX    DISKMAPBYTEPOINTER        GET MAP BYTE POINTER AND MASK
F0DC FECEEC     639:         LDX     DISKMAPBYTEPOINTER
F0DF B6CEEE     640:         LDAA      DISKMAPMASK
  F0E2          641: SEARCHMR  EQU     *
F0E2 A500       642:         BITA      DISKMAP:BYTE,X    SCAN MAP BACKWARDS FOR FREE LCN
F0E4 2746       643:         BEQ      SEARCHMR1 B/ FOUND FREE LCN
  F0E6          644: SEARCHMR0 EQU     *
F0E6 F6CEDF     645:         LDAB      SEARCHLCN+1        THIS LCN NOT FREE
F0E9 2603       646:         BNE      SEARCHMR0A COMPUTE PREVIOUS LCN
                647:         ;DEC     SEARCHLCN
F0EB 7ACEDE     648:         DEC      SEARCHLCN
  F0EE          649: SEARCHMR0A EQU     *
                650:         ;DEC     SEARCHLCN+1
F0EE 7ACEDF     651:         DEC      SEARCHLCN+1
F0F1 44         652:         LSRA             ADJUST BIT MASK FOR PREVIOUS LCN
F0F2 24EE       653:         BCC        SEARCHMR  B/ MORE BITS TO CHECK IN MAP
  F0F4          654: SEARCHMRE EQU     *
F0F4 09         655:         DEX             PROCESS PREVIOUS MAP BYTE
F0F5 BCCEE8     656:         CPX      DISKMAPSECTORSTART HIT BOTTOM OF MAP SECTOR?
F0F8 2719       657:         BEQ      SEARCHMRE1        B/ YES, MUST PROCESS PRECEDING SECTOR
  F0FA          658: SEARCHMRE2        EQU     *
F0FA 8680       659:         LDAA      #$80    SET UP MASK FOR NEXT MAP BYTE
F0FC E600       660:         LDAB      DISKMAP:BYTE,X    TAKE QUICK LOOK AT ENTIRE BYTE
F0FE 5C         661:         INCB              ALL LCN'S IN BYTE ALLOCATED?
F0FF 26E1       662:         BNE      SEARCHMR  B/ NO, LET'S GO FIND UNALLOCATED LCN
F101 F6CEDF     663:         LDAB      SEARCHLCN+1        YES, BACK UP OVER BYTE OF LCN'S
                664:         ;CMPB     #NMBPB-1  NEED TO PROPOGATE A BORROW ?
F104 C107       665:         CMPB      #NMBPB-1
F106 2603       666:         BNE      SEARCHMRE3        ADJUST SEARCHLCN
                667:         ;DEC     SEARCHLCN
F108 7ACEDE     668:         DEC      SEARCHLCN
  F10B          669: SEARCHMRE3        EQU     *
F10B C008       670:         SUBB      #NMBPB
F10D F7CEDF     671:         STAB      SEARCHLCN+1
                672:         ;JMP    SEARCHMRE CHECK NEXT MAP BYTE OUT
F110 7EF0F4     673:         JMP     SEARCHMRE




ASM/6800 1.4A0: F110 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 356; Form 1     DISK FILE DRIVERS -- DISK SPACE MANAGEMENT
SDOS11G.ASM
  F113          675: SEARCHMRE1        ; RAN OFF BOTTOM OF MAP SECTOR
                676:         ;LDD    SEARCHLCN  GO FIND MAP SECTOR CONTAINING PREVIOUS BYTE
F113 F6CEDF     677:         LDAB      SEARCHLCN+1
F116 B6CEDE     678:         LDAA      SEARCHLCN
                679:         ;JSR    FINDLCNMAPBIT
F119 BDF229     680:         JSR     FINDLCNMAPBIT
F11C 250B       681:         BCS       SEARCHMREBJ1       B/ RAN OFF BOTTOM OF MAP
                682:         ;JSR    READBEHIND        KEEP THE READ BEHIND RUNNING
F11E BDF7E4     683:         JSR     READBEHIND
                684:         ;LDX    DISKMAPBYTEPOINTER        GET MAP BYTE POITER...
F121 FECEEC     685:         LDX     DISKMAPBYTEPOINTER
F124 B6CEEE     686:         LDAA      DISKMAPMASK       AND MASK
F127 20D1       687:         BRA       SEARCHMRE2
                688: 
  F129          689: SEARCHMREBJ1       EQU     *
                690:         ;JMP    SEARCHMREB
F129 7EF1E4     691:         JMP     SEARCHMREB




ASM/6800 1.4A0: F129 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 357; Form 1     DISK FILE DRIVERS -- DISK SPACE MANAGEMENT
SDOS11G.ASM
  F12C          693: SEARCHMR1 ; FOUND FREE LCN DURING BACKWARDS SEARCH
F12C FFCEEC     694:         STX     DISKMAPBYTEPOINTER        SAVE ADDRESS OF MAP BYTE CONTAINING FREE CLU
                695:         ;LDX    AVAILABLELCN EFFECTIVELY THE SAME CODE AS SEARCHMF
F12F FECEE0     696:         LDX     AVAILABLELCN
F132 08         697:         INX             HAVE WE ALREADY FOUND A FREE CLUSTER ?
F133 270D       698:         BEQ      SEARCHMR4C B/ NO, RETAIN JUST-FOUND LCN
                699:         ;LDX    AVAILABLECOUNT       FOUND FREE LCN, AVAILABLE LCN IS TAKEN
F135 FECEE2     700:         LDX     AVAILABLECOUNT
F138 08         701:         INX             IS IT TAKEN BY A FIRST FREE LCN FOUND ?
F139 2613       702:         BNE      SEARCHMR4 B/ AVAILABLELCN TAKEN BY ALLOCATIONCOUNT GROUP
                703: *                       (WHICH MEANS A SINGLE FREE LCN DOESN'T OVERRIDE IT)
F13B 36         704:         PSHA             DON'T LOSE MAP MASK!
                705:         ;JSR    SEARCHOOSE        DECIDE WHICH LCN IS CLOSEST
F13C BDF1F7     706:         JSR     SEARCHOOSE
F13F 32         707:         PULA             GET MAP MASK BACK
F140 250C       708:         BCS       SEARCHMR4 B/ AVAILABLELCN WAS CLOSEST
  F142          709: SEARCHMR4C EQU     *
                710:         ;LDX    SEARCHLCN  RETAIN JUST-FOUND CLUSTER
F142 FECEDE     711:         LDX     SEARCHLCN
F145 FFCEE0     712:         STX     AVAILABLELCN
                713:         ;LDX    #1      SET GROUP SIZE TO "1"
F148 CE0001     714:         LDX     #1
F14B FFCEE2     715:         STX     AVAILABLECOUNT
  F14E          716: SEARCHMR4 EQU     *
                717:         ;LDX    #0      FIND OUT HOW LONG THIS GROUP OF FREE CLUSTERS IS
F14E CE0000     718:         LDX     #0
F151 FFCEE6     719:         STX     LCNGROUPLENGTH
                720:         ;LDX    DISKMAPBYTEPOINTER        GET POINTER TO MAP BYTE BACK
F154 FECEEC     721:         LDX     DISKMAPBYTEPOINTER
  F157          722: SEARCHMR2 EQU     *
                723:         ;INC     LCNGROUPLENGTH+1
F157 7CCEE7     724:         INC      LCNGROUPLENGTH+1
F15A 2603       725:         BNE      SEARCHMR3
                726:         ;INC     LCNGROUPLENGTH
F15C 7CCEE6     727:         INC      LCNGROUPLENGTH
  F15F          728: SEARCHMR3 EQU     *
F15F F6CEE6     729:         LDAB      LCNGROUPLENGTH
                730:         ;CMPB     ALLOCATIONCOUNT
F162 F1CED8     731:         CMPB      ALLOCATIONCOUNT
F165 250A       732:         BCS       SEARCHMR5




ASM/6800 1.4A0: F167 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 358; Form 1     DISK FILE DRIVERS -- DISK SPACE MANAGEMENT
SDOS11G.ASM
F167 223E       733:         BHI      SEARCHMRG
F169 F6CEE7     734:         LDAB      LCNGROUPLENGTH+1
                735:         ;CMPB     ALLOCATIONCOUNT+1
F16C F1CED9     736:         CMPB      ALLOCATIONCOUNT+1
F16F 2736       737:         BEQ      SEARCHMRG *** NOTE: ASSUMES LCN 0 IS ALWAYS ALLOCATED ***
  F171          738: SEARCHMR5 EQU     *
F171 F6CEDF     739:         LDAB      SEARCHLCN+1        DECREMENT POSITION IN MAP
F174 2603       740:         BNE      SEARCHMR6 B/ DON'T HAVE TO DECREMENT UPPER HALF
                741:         ;DEC     SEARCHLCN
F176 7ACEDE     742:         DEC      SEARCHLCN
  F179          743: SEARCHMR6 EQU     *
                744:         ;DEC     SEARCHLCN+1
F179 7ACEDF     745:         DEC      SEARCHLCN+1
F17C 44         746:         LSRA
F17D 2507       747:         BCS       SEARCHMR8
  F17F          748: SEARCHMR7 EQU     *
F17F A500       749:         BITA      DISKMAP:BYTE,X
F181 27D4       750:         BEQ      SEARCHMR2
                751:         ;JMP    SEARCHMR0
F183 7EF0E6     752:         JMP     SEARCHMR0




ASM/6800 1.4A0: F183 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 359; Form 1     DISK FILE DRIVERS -- DISK SPACE MANAGEMENT
SDOS11G.ASM
  F186          754: SEARCHMR8 ; RAN OFF END OF BYTE
F186 8680       755:         LDAA      #$80    PICK UP MASK FOR NEXT BYTE
F188 09         756:         DEX             BACK UP POINTER
F189 BCCEE8     757:         CPX      DISKMAPSECTORSTART HIT BEGIN SECTOR ?
F18C 26F1       758:         BNE      SEARCHMR7 B/ NO, GO PROCESS BYTE
                759:         ;LDD    SEARCHLCN  YES, MUST PROCESS PREVIOUS SECTOR
F18E F6CEDF     760:         LDAB      SEARCHLCN+1
F191 B6CEDE     761:         LDAA      SEARCHLCN
                762:         ;JSR    FINDLCNMAPBIT      GO FIND IT
F194 BDF229     763:         JSR     FINDLCNMAPBIT
F197 254B       764:         BCS       SEARCHMREB OOPS...
                765:         ;LDX    IOCBPOINTER       INITIATE READ-BEHIND
F199 FECE09     766:         LDX     IOCBPOINTER
                767:         ;JSR    READBEHIND
F19C BDF7E4     768:         JSR     READBEHIND
                769:         ;LDX    DISKMAPBYTEPOINTER        RESTORE BIT MASK
F19F FECEEC     770:         LDX     DISKMAPBYTEPOINTER
F1A2 B6CEEE     771:         LDAA      DISKMAPMASK       AND MAP BYTE ADDRESS
F1A5 20D8       772:         BRA       SEARCHMR7 GO PROCESS NEXT BYTE
                773: 
  F1A7          774: SEARCHMRG ; FOUND ALLOCATION COUNT FREE CLUSTERS
                775:         ;LDX    AVAILABLELCN ON BACKWARDS SEARCH
F1A7 FECEE0     776:         LDX     AVAILABLELCN
F1AA 08         777:         INX             FIRST DECIDE IF ANY ALLOCATION FOUND YET
F1AB 270C       778:         BEQ      SEARCHUS  B/ NO DISK SPACE FOUND PREVIOUSLY
                779:         ;LDX    AVAILABLECOUNT       IF AVAILABLE COUNT = ALLOCATION COUNT,
F1AD FECEE2     780:         LDX     AVAILABLECOUNT
F1B0 BCCED8     781:         CPX      ALLOCATIONCOUNT     THEN CHOOSE CLOSEST FREE GROUP
F1B3 2604       782:         BNE      SEARCHUS  ELSE USE JUST FOUND FREE GROUP
F1B5 8D40       783:         BSR      SEARCHOOSE        CHOOSE CLOSER OF (SEARCHLCN,AVAILABLELCN)
F1B7 240C       784:         BCC        SEARCHFLCN AVAILABLELCN WAS CLOSER
  F1B9          785: SEARCHUS  ; USE SEARCHLCN AS RESULT
                786:         ;LDD    SEARCHLCN  COPY TO AVAILABLELCN
F1B9 F6CEDF     787:         LDAB      SEARCHLCN+1
F1BC B6CEDE     788:         LDAA      SEARCHLCN
                789:         ;STD    AVAILABLELCN
F1BF F7CEE1     790:         STAB      AVAILABLELCN+1
F1C2 B7CEE0     791:         STAA      AVAILABLELCN
  F1C5          792: SEARCHFLCN ; FOUND AVAILABLE LCN IN MAP
                793:         ;LDD    AVAILABLELCN LOCATE IT AGAIN SINCE IT IS PROBABLY NOT...




ASM/6800 1.4A0: F1C5 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 360; Form 1     DISK FILE DRIVERS -- DISK SPACE MANAGEMENT
SDOS11G.ASM
F1C5 F6CEE1     794:         LDAB      AVAILABLELCN+1
F1C8 B6CEE0     795:         LDAA      AVAILABLELCN
                796:         ;JSR    FINDLCNMAPBIT      IN CURRENT MAP BLOCK
F1CB BDF229     797:         JSR     FINDLCNMAPBIT
  F1CE          798: SEARCHMFQXIT      ; QUICK EXIT
                799:         ;LDX    DISKMAPBYTEPOINTER        GET POINTER TO MAP BYTE BACK
F1CE FECEEC     800:         LDX     DISKMAPBYTEPOINTER
F1D1 AA00       801:         ORAA      DISKMAP:BYTE,X    SET BIT IN MAP...
F1D3 A700       802:         STAA      DISKMAP:BYTE,X    MARKING SECTOR AS ALLOCATED
                803:         ;LDX    IOCBPOINTER       TAG SECTOR AS MODIFIED
F1D5 FECE09     804:         LDX     IOCBPOINTER
                805:         ;LDX    IOCB:DRDSI,X      GET RDSI OF THIS MAP SECTOR
F1D8 EE12       806:         LDX     IOCB:DRDSI,X
F1DA A70B       807:         STAA      RDSI:MODIFIED,X SINCE READAHEAD BOMBED RDSIPOINTER (A<>0)
                808:         ;LDD    AVAILABLELCN AND RETURN THE LCN ALLOCATED
F1DC F6CEE1     809:         LDAB      AVAILABLELCN+1
F1DF B6CEE0     810:         LDAA      AVAILABLELCN
F1E2 0C39       811:         OKRTS
                812: 
  F1E4          813: SEARCHMREB ; BOTTOM OF MAP HIT
F1E4 8C03F4     814:         CPX      #ERR:ILLEGALLCN   DOUBLE CHECK TO MAKE SURE
F1E7 260B       815:         BNE      SEARCHMERRED3     B/ WASN'T BOTTOM OF MAP!!?
                816:         ;LDX    AVAILABLELCN ANY AVAILABLE LCN FOUND ?
F1E9 FECEE0     817:         LDX     AVAILABLELCN
F1EC 08         818:         INX             ...?
F1ED 26D6       819:         BNE      SEARCHFLCN B/ YES, TAKE SUCCESS EXIT
                820:         ;JSR    ERRET   NO, NO DISK SPACE AVAILABLE
F1EF BDD1F7     821:         JSR     ERRET
F1F2 03F7       822:         FDB      ERR:NODISKSPACE
                823: 
  F1F4          824: SEARCHMERRED3     EQU     *
                825:         ;JMP    ERRORED
F1F4 7ED20A     826:         JMP     ERRORED




ASM/6800 1.4A0: F1F4 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 361; Form 1     DISK FILE DRIVERS -- DISK SPACE MANAGEMENT
SDOS11G.ASM
                828: *
                829: *       SEARCHOOSE -- DECIDE WHETHER AVAILABLELCN OR SEARCHLCN...
                830: *               IS CLOSEST TO DIVIDEPOINTLCN
                831: *               RETURN CARRY RESET IF AVAILABLELCN IS THE ONE TO KEEP
                832: *
  F1F7          833: SEARCHOOSE        EQU     *
                834:         ;LDD    DIVIDEPOINTLCN   IS ABS(DIVIDEPOINTLCN-AVAILABLELCN)
F1F7 F6CEDD     835:         LDAB      DIVIDEPOINTLCN+1
F1FA B6CEDC     836:         LDAA      DIVIDEPOINTLCN
                837:         ;SUBD    AVAILABLELCN > ABS(DIVIDEPOINTLCN-SEARCHLCN)?
F1FD F0CEE1     838:         SUBB      AVAILABLELCN+1
F200 B2CEE0     839:         SBCA       AVAILABLELCN
F203 2404       840:         BCC        SEARCHOOSE1
                841:         ;NEGD           (TAKE -(A,B) TO GET ABS VALUE)
F205 40         842:         NEGA
F206 50         843:         NEGB
F207 8200       844:         SBCA       #0
  F209          845: SEARCHOOSE1       EQU     *
                846:         ;STD    TEMPX   SAVE ABS(DIVIDEPOINTLCN-AVAILABLELCN)
F209 D701       847:         STAB      TEMPX+1
F20B 9700       848:         STAA      TEMPX
                849:         ;LDD    DIVIDEPOINTLCN   (COMPUTE ABS(DIVIDEPOINTLCN-SEARCHLCN))
F20D F6CEDD     850:         LDAB      DIVIDEPOINTLCN+1
F210 B6CEDC     851:         LDAA      DIVIDEPOINTLCN
                852:         ;SUBD    SEARCHLCN
F213 F0CEDF     853:         SUBB      SEARCHLCN+1
F216 B2CEDE     854:         SBCA       SEARCHLCN
F219 2404       855:         BCC        SEARCHOOSE2       B/ ITS ALREADY NEGATIVE
                856:         ;NEGD           COMPUTE ABS(A,B)
F21B 40         857:         NEGA
F21C 50         858:         NEGB
F21D 8200       859:         SBCA       #0
  F21F          860: SEARCHOOSE2       EQU     *
                861:         ;SUBD    TEMPX   = ABS(DIVIDEPOINTLCN-AVAILABLELCN)...
F21F D001       862:         SUBB      TEMPX+1
F221 9200       863:         SBCA       TEMPX
F223 39         864:         RTS             -ABS(DIVIDEPOINTLCN-SEARCHLCN)
                865: 
  F224          866: FINDLCNERREXIT   EQU     *
                867:         ;JSR    ERRET   ILLEGAL LCN




ASM/6800 1.4A0: F224 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 362; Form 1     DISK FILE DRIVERS -- DISK SPACE MANAGEMENT
SDOS11G.ASM
F224 BDD1F7     868:         JSR     ERRET
F227 03F4       869:         FDB      ERR:ILLEGALLCN




ASM/6800 1.4A0: F227 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 363; Form 1     DISK FILE DRIVERS -- DISK SPACE MANAGEMENT
SDOS11G.ASM
                871: *       FINDLCNMAPBIT -- TAKES (D) AS LCN IN DISKMAP
                872: *               RETURNS VIA ERRET IF ILLEGAL LCN
                873: *               COMPUTES DESIRED LSN OF MAP, READS IT IN
                874: *               RETURNS BYTE POINTER IN (X) AND BIT MASK IN (A) FOR LCN
                875: *               ASSUMES IOCBPOINTER SET UP TO PROCESS MAP CLUSTER
                876: *               SETS UP DISKMAPSECTORSTART TO BEGINNING OF BUFFER-1
                877: *               SETS UP DISKMAPSECTOREND TO END OF BUFFER
                878: *               RETURNS RDSIPOINTER, IOCB:RDSI POINTING TO MAP SECTOR
                879: *
  F229          880: FINDLCNMAPBIT      EQU     *
                881:         ;LDX    DCBPOINTER        CHECK LCN(A,B)...
F229 DE06       882:         LDX     DCBPOINTER
                883:         ;CMPD    DSKINFO:NLCN,X   TO MAKE SURE ITS LEGAL
F22B A11E       884:         CMPA      DSKINFO:NLCN,X
F22D 2602       885:         BNE      MACRO:0020
F22F E11F       886:         CMPB      (DSKINFO:NLCN)+1,X
  F231          887: MACRO:0020
F231 24F1       888:         BCC        FINDLCNERREXIT   B/ ILLEGAL LCN
F233 F7CEEE     889:         STAB      DISKMAPMASK       SAVE BIT NUMBER DESIRED
                890:         ;LSRD           SHIFT OFF BIT NUMBER...
F236 44         891:         LSRA
F237 56         892:         RORB
                893:         ;LSRD           TO GET BYTE ADDRESS WITHIN DISK MAP
F238 44         894:         LSRA
F239 56         895:         RORB
                896:         ;LSRD
F23A 44         897:         LSRA
F23B 56         898:         RORB
                899:         ;STD    DISKMAPBYTEPOINTER        SAVE BYTE NUMBER DESIRED
F23C F7CEED     900:         STAB      DISKMAPBYTEPOINTER+1
F23F B7CEEC     901:         STAA      DISKMAPBYTEPOINTER
                902:         ;JSR    COMPUTERSN       COMPUTE RELATIVE SECTOR NUMBER
F242 BDF773     903:         JSR     COMPUTERSN
F245 E71A       904:         STAB      IOCB:DRSN,X       SAVE RELATIVE SECTOR # WITHIN MAP CLUSTER
                905:         ;LDX    DCBPOINTER        COMPUTE LSN OF DESIRED MAP FILE SECTOR
F247 DE06       906:         LDX     DCBPOINTER
F249 EB26       907:         ADDB      DSKINFO:MAPLSN+2,X       = LSN(MAP CLUSTER)+RSN
F24B 37         908:         PSHB             (THIS IS VALID BECUZ ALLOC CHECKS ON ENTRY)
                909:         ;LDD    DSKINFO:MAPLSN,X
F24C E625       910:         LDAB      (DSKINFO:MAPLSN)+1,X




ASM/6800 1.4A0: F24E SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 364; Form 1     DISK FILE DRIVERS -- DISK SPACE MANAGEMENT
SDOS11G.ASM
F24E A624       911:         LDAA      DSKINFO:MAPLSN,X
F250 C900       912:         ADCB       #0      PROPOGATE ANY CARRY
F252 8900       913:         ADCA       #0
                914:         ;LDX    IOCBPOINTER       STORE DESIRED LSN INTO IOCB
F254 FECE09     915:         LDX     IOCBPOINTER
                916:         ;STD    IOCB:CURLSN,X
F257 E703       917:         STAB      (IOCB:CURLSN)+1,X
F259 A702       918:         STAA      IOCB:CURLSN,X
F25B 32         919:         PULA
F25C A704       920:         STAA      IOCB:CURLSN+2,X
                921:         ;JSR    READSECTOR        AND GO GET MAP SECTOR
F25E BDF8F5     922:         JSR     READSECTOR
                923:         ;LDX    IOCBPOINTER       REMEMBER RDSI FOR MAP SECTOR
F261 FECE09     924:         LDX     IOCBPOINTER
                925:         ;STD    IOCB:DRDSI,X      SINCE READAHEAD WILL DESTROY RDSIPOINTER
F264 E713       926:         STAB      (IOCB:DRDSI)+1,X
F266 A712       927:         STAA      IOCB:DRDSI,X
                928:         ;LDD    DISKMAPBYTEPOINTER        GET BYTE NUMBER DESIRED BACK
F268 F6CEED     929:         LDAB      DISKMAPBYTEPOINTER+1
F26B B6CEEC     930:         LDAA      DISKMAPBYTEPOINTER
                931:         ;LDX    DCBPOINTER        NOW MASK BYTE NUMBER...
F26E DE06       932:         LDX     DCBPOINTER
F270 A419       933:         ANDA      DSKINFO:NBPSM1,X TO GET DESIRED BYTE DISPLACMENT INTO MAP SECTOR
F272 E41A       934:         ANDB      DSKINFO:NBPSM1+1,X
                935:         ;LDX    RDSIPOINTER     ADD SECTOR BUFFER BASE...
F274 FECEA4     936:         LDX     RDSIPOINTER
                937:         ;ADDD    RDSI:SECTORBASE,X  TO GET REAL POINTER TO MAP BYTE
F277 EB06       938:         ADDB      (RDSI:SECTORBASE)+1,X
F279 A905       939:         ADCA       RDSI:SECTORBASE,X
                940:         ;STD    DISKMAPBYTEPOINTER
F27B F7CEED     941:         STAB      DISKMAPBYTEPOINTER+1
F27E B7CEEC     942:         STAA      DISKMAPBYTEPOINTER
                943:         ;LDX    RDSI:SECTORBASE,X  COMPUTE START AND END OF
F281 EE05       944:         LDX     RDSI:SECTORBASE,X
F283 09         945:         DEX             AS A CONVENIENCE TO SEARCHMAP
F284 FFCEE8     946:         STX     DISKMAPSECTORSTART DISK BUFFERS FOR THIS BLOCK
                947:         ;LDX    DCBPOINTER
F287 DE06       948:         LDX     DCBPOINTER
                949:         ;LDD    DSKINFO:NBPS,X
F289 E60A       950:         LDAB      (DSKINFO:NBPS)+1,X




ASM/6800 1.4A0: F28B SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 365; Form 1     DISK FILE DRIVERS -- DISK SPACE MANAGEMENT
SDOS11G.ASM
F28B A609       951:         LDAA      DSKINFO:NBPS,X
F28D 0D         952:         SEC              TO OFFSET THE "DEX"
F28E F9CEE9     953:         ADCB       DISKMAPSECTORSTART+1
F291 B9CEE8     954:         ADCA       DISKMAPSECTORSTART
                955:         ;STD    DISKMAPSECTOREND
F294 F7CEEB     956:         STAB      DISKMAPSECTOREND+1
F297 B7CEEA     957:         STAA      DISKMAPSECTOREND
F29A F6CEEE     958:         LDAB      DISKMAPMASK       GET DESIRED BIT # BACK
F29D C407       959:         ANDB      #NMBPB-1  TAKE MODULO # BITS PER MAP BYTE
F29F 4F         960:         CLRA              CONVERT INTO A BIT MASK
F2A0 0D         961:         SEC
  F2A1          962: FINDLCNMAPBITL     EQU     *
F2A1 49         963:         ROLA             BY SHIFTING
F2A2 5A         964:         DECB
F2A3 2AFC       965:         BPL      FINDLCNMAPBITL
F2A5 B7CEEE     966:         STAA      DISKMAPMASK
                967:         ;JSR    WAITRDSI WAIT FOR MAP SECTOR TO ARRIVE
F2A8 BDFAA3     968:         JSR     WAITRDSI
F2AB B6CEEE     969:         LDAA      DISKMAPMASK       GET BIT MASK FOR DISKMAP.SYS BYTE
                970:         ;LDX    DISKMAPBYTEPOINTER        GET POINTER TO MAP BYTE
F2AE FECEEC     971:         LDX     DISKMAPBYTEPOINTER
F2B1 0C39       972:         OKRTS




ASM/6800 1.4A0: F2B1 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 366; Form 1     DISK FILE DRIVERS -- SUBROUTINES
SDOS11G.ASM
                974: *       LOCATECURBYTE -- PROCESSES IOCB:CURBYTE
                975: *       TO SET UP VALUE FOR IOCB:CURLSN
                976: *       ALSO SETS UP IOCB:FILESIZE, IOCB:BYTECOUNT, IOCB:CURLCN, IOCB:RSN
                977: *       ASSUMES THAT IOCB:CURLCN IS VALID
                978: *       ZEROS IOCB:DRDSI UNLESS BYTE IS IN LSN SELECTED BY RDSI
                979: *       ASSUMES THAT IOCBPOINTER, DCBPOINTER ARE SET UP
                980: *       (A,B) CONTAIN # BYTES REQUESTED FOR TRANSFER ON ENTRY
                981: *       RETURNS VIA OKRTS:
                982: *               IOCB:CURLCN<>-1 --> LOCATED BYTE
                983: *               IOCB:CURLCN=-1  --> CLUSTER FOR BYTE NOT ALLOCATED
                984: *               USEDCOUNT = # BYTES AVAILABLE TO BE MOVED
                985: *               ( 0 < USEDCOUNT <= REQUESTED )
                986: *               USEDCOUNT MUST BE ADJUSTED IF ALL THE BYTES ARE NOT USED
                987: *               (X) = IOCBPOINTER
                988: *       RETURN VIA ERRET:
                989: *               DISK SPACE EXHAUSTED ON WRITE ATTEMPT
                990: *       LOCATECURBYTE ENSURES DESIRED SECTOR IS BROUGHT INTO MEMORY
                991: *       IF WRITEFLAG=0 (READ MODE) AND NON-EXISTENT DATA CLUSTER IS ENCOUNTERED,
                992: *       AN IMAGINARY SECTOR IS ZEROED AND USED
                993: *       NOBODY MAY MODIFY THIS IMAGINARY SECTOR!!!
                994: *       IF WRITEFLAG<>0, AND LOCATE IS DIRECTED TO
                995: *       BYTE BEYOND CURRENT LENGTH OF FILE, THEN
                996: *       A ZEROED SECTOR IS INVENTED
                997: 
  F2B3          998: LOCATECURBYTE       EQU     *
                999:         ;STD    USEDCOUNT        STORE # BYTES REQUESTED FOR THIS TRANSFER
F2B3 F7CEA0    1000:         STAB      USEDCOUNT+1
F2B6 B7CE9F    1001:         STAA      USEDCOUNT
               1002:         ;LDX    IOCBPOINTER       LOCATE ALREADY DONE ?
F2B9 FECE09    1003:         LDX     IOCBPOINTER
F2BC A611      1004:         LDAA      IOCB:LOCATEDF,X     ...?
F2BE 276C      1005:         BEQ      LOCATECURBYTE0      B/ NO, GO DO IT IN ALL OF ITS GLORY
               1006:         ;LDX    IOCB:BYTECOUNT,X    ANY BYTES REMAINING TO BE PROCESSED ?
F2C0 EE16      1007:         LDX     IOCB:BYTECOUNT,X
F2C2 2718      1008:         BEQ      LOCATECURBYTEE      B/ NO, GO FIGURE OUT WHY
               1009:         ;LDX    IOCBPOINTER       YES, IS THE DATA SECTOR STILL HERE ?
F2C4 FECE09    1010:         LDX     IOCBPOINTER
               1011:         ;LDX    IOCB:DRDSI,X      ... ?
F2C7 EE12      1012:         LDX     IOCB:DRDSI,X
F2C9 2756      1013:         BEQ      LOCATECURBYTEE3     B/ NO, GO FIGURE OUT STUFF THE HARD WAY!




ASM/6800 1.4A0: F2C9 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 367; Form 1     DISK FILE DRIVERS -- SUBROUTINES
SDOS11G.ASM
               1014:         ;JSR    REQUERDSI       MAKE SURE THIS SECTOR DOESN'T GET KICKED OUT SOON
F2CB BDFA5D    1015:         JSR     REQUERDSI
F2CE B6CE9A    1016:         LDAA      WRITEFLAG        DATA SECTOR IS STILL AROUND, IS THIS A WRITE ?
F2D1 2603      1017:         BNE      LOCATECURBYTEWJ     B/ YES, GO PROCESS
               1018:         ;JMP    LOCATECURBYTED      B/ READ MODE, GO SET UP XFER COUNT
F2D3 7EF448    1019:         JMP     LOCATECURBYTED
               1020: 
  F2D6         1021: LOCATECURBYTEWJ     EQU     *
               1022:         ;JMP    LOCATECURBYTEW
F2D6 7EF46F    1023:         JMP     LOCATECURBYTEW
               1024: 
  F2D9         1025: LOCATECURBYTE9J     EQU     *
               1026:         ;JMP    LOCATECURBYTE9
F2D9 7EF468    1027:         JMP     LOCATECURBYTE9
               1028: 
  F2DC         1029: LOCATECURBYTEE      ; EXHAUSTED BYTECOUNT
               1030:         ;LDX    IOCBPOINTER       LOADING :BYTECOUNT INTO (X) DESTROYED THIS...
F2DC FECE09    1031:         LDX     IOCBPOINTER
F2DF B6CE9A    1032:         LDAA      WRITEFLAG        IS THIS A WRITE ?
F2E2 2604      1033:         BNE      LOCATECURBYTEE2     B/ YES
F2E4 A60B      1034:         LDAA      IOCB:EOFFLAG,X     NO, ARE WE AT EOF ?
F2E6 26F1      1035:         BNE      LOCATECURBYTE9J     B/ YES, GO COMPLAIN!
  F2E8         1036: LOCATECURBYTEE2     EQU     *
               1037:         ;LDD    IOCB:CURBYTE+2,X    HMMM... ARE WE ON A SECTOR BOUNDARY ?
F2E8 E610      1038:         LDAB      (IOCB:CURBYTE+2)+1,X
F2EA A60F      1039:         LDAA      IOCB:CURBYTE+2,X
               1040:         ;LDX    IOCB:DCB,X
F2EC EE00      1041:         LDX     IOCB:DCB,X
F2EE E51A      1042:         BITB      DSKINFO:NBPSM1+1,X
F2F0 2637      1043:         BNE      LOCATECURBYTEGJ     B/ NO, GO RE-READ THE SECTOR
F2F2 A519      1044:         BITA      DSKINFO:NBPSM1,X
F2F4 2633      1045:         BNE      LOCATECURBYTEGJ     B/ NO, GO RE-READ THE SECTOR
               1046:         ;LDX    IOCBPOINTER       MUST BE AT END OF SECTOR
F2F6 FECE09    1047:         LDX     IOCBPOINTER
               1048:         ;INC     IOCB:DRSN,X       FIGURE OUT DRSN OF NEXT SECTOR IN CLUSTER
F2F9 6C1A      1049:         INC      IOCB:DRSN,X
F2FB A61A      1050:         LDAA      IOCB:DRSN,X       GET NEXT SECTOR NUMBER WITHIN CLUSTER
               1051:         ;LDX    IOCB:DCB,X  CLUSTER EXHAUSTED ?
F2FD EE00      1052:         LDX     IOCB:DCB,X
               1053:         ;CMPA     DSKINFO:NSPC,X   ...?




ASM/6800 1.4A0: F2FF SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 368; Form 1     DISK FILE DRIVERS -- SUBROUTINES
SDOS11G.ASM
F2FF A111      1054:         CMPA      DSKINFO:NSPC,X
F301 270E      1055:         BEQ      LOCATECURBYTEE4     B/ YES
               1056:         ;LDX    IOCBPOINTER       NO, IS THIS CLUSTER ALLOCATED ?
F303 FECE09    1057:         LDX     IOCBPOINTER
               1058:         ;LDX    IOCB:CURLCN,X
F306 EE18      1059:         LDX     IOCB:CURLCN,X
F308 08        1060:         INX             ... ?
F309 2732      1061:         BEQ      LOCATECURBYTE4      B/ NO, GO DECIDE WHAT TO DO
               1062:         ;JSR    INCIOCB:CURLSN      SELECT NEXT SECTOR NUMBER
F30B BDF7F2    1063:         JSR     INCIOCB:CURLSN
               1064:         ;JMP    LOCATECURBYTE8      GO ISSUE THE READ TO GET THAT DATA SECTOR
F30E 7EF3C4    1065:         JMP     LOCATECURBYTE8




ASM/6800 1.4A0: F30E SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 369; Form 1     DISK FILE DRIVERS -- SUBROUTINES
SDOS11G.ASM
  F311         1067: LOCATECURBYTEE4     ; CLUSTER IS EXHAUSTED
               1068:         ;LDX    IOCBPOINTER       YES, CLUSTER IS EXHAUSTED
F311 FECE09    1069:         LDX     IOCBPOINTER
               1070:         ;CLR     IOCB:RBN,X SET RELATIVE BYTE # WITHIN CLUSTER...
F314 6F1D      1071:         CLR      IOCB:RBN,X
               1072:         ;CLR     IOCB:RBN+1,X       TO ZERO
F316 6F1E      1073:         CLR      IOCB:RBN+1,X
               1074:         ;INC     IOCB:RDCN+1,X      BUMP TO NEXT DATA CLUSTER NUMBER
F318 6C1C      1075:         INC      IOCB:RDCN+1,X
F31A 2602      1076:         BNE      LOCATECURBYTEE1
               1077:         ;INC     IOCB:RDCN,X
F31C 6C1B      1078:         INC      IOCB:RDCN,X
  F31E         1079: LOCATECURBYTEE1     EQU     *
               1080:         ;JMP    LOCATECURBYTE3      GO LOCATE LCN FOR DATA CLUSTER
F31E 7EF388    1081:         JMP     LOCATECURBYTE3
               1082: 
  F321         1083: LOCATECURBYTEE3     ; DATA SECTOR DISAPPEARED!
               1084:         ;LDX    IOCBPOINTER       BECAUSE X IS TRASHED
F321 FECE09    1085:         LDX     IOCBPOINTER
               1086:         ;LDX    IOCB:CURLCN,X       IS CURRENT CLUSTER ALLOCATED ?
F324 EE18      1087:         LDX     IOCB:CURLCN,X
F326 08        1088:         INX             ... ?
F327 2714      1089:         BEQ      LOCATECURBYTE4      B/ NO, GO DECIDE WHAT TO DO
  F329         1090: LOCATECURBYTEGJ     EQU     *
               1091:         ;JMP    LOCATECURBYTEG      AND GO GET THE SECTOR AGAIN
F329 7EF3E7    1092:         JMP     LOCATECURBYTEG




ASM/6800 1.4A0: F329 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 370; Form 1     DISK FILE DRIVERS -- SUBROUTINES
SDOS11G.ASM
  F32C         1094: LOCATECURBYTE0      ; START WITH IOCB:CURBYTE AND DO A FULL LOCATE
               1095:         ;JSR    COMPUTERDCN       COMPUTE RELATIVE DATA CLUSTER NUMBER
F32C BDF706    1096:         JSR     COMPUTERDCN
               1097:         ;CMPD    IOCB:RDCN,X        IN SAME DATA CLUSTER IOCB HAS ALREADY SELECTED?
F32F A11B      1098:         CMPA      IOCB:RDCN,X
F331 2602      1099:         BNE      MACRO:0021
F333 E11C      1100:         CMPB      (IOCB:RDCN)+1,X
  F335         1101: MACRO:0021
F335 2761      1102:         BEQ      LOCATECURBYTE5      B/ YES, DON'T NEED TO READ HEADER CLUSTER
               1103: *** This is where Segment size stuff should be inserted!
  F337         1104: LOCATECURBYTE1      ; MUST READ BLOCK OF HEADER CLUSTER (SIGH!)
               1105:         ;STD    IOCB:RDCN,X        SAVE NEW RELATIVE DATA CLUSTER NUMBER
F337 E71C      1106:         STAB      (IOCB:RDCN)+1,X
F339 A71B      1107:         STAA      IOCB:RDCN,X
F33B 204B      1108:         BRA       LOCATECURBYTE3      GO FIND LCN OF DATA CLUSTER
               1109: 
  F33D         1110: LOCATECURBYTE4      ; NO DATA LCN YET ALLOCATED
F33D B6CE9A    1111:         LDAA      WRITEFLAG        IS THIS A WRITE ATTEMPT?
F340 2636      1112:         BNE      LOCATECURBYTE2      B/ WRITE ATTEMPTED
               1113:         ;LDD    #DUMMYLCN        READ ATTEMPT, SET CURLCN:=DUMMY
F342 C6FF      1114:         LDAB      #(DUMMYLCN)&$FF
F344 86FF      1115:         LDAA      #(DUMMYLCN)/256
               1116:         ;LDX    IOCBPOINTER       THIS SEEMS TO BE IMPORTANT
F346 FECE09    1117:         LDX     IOCBPOINTER
               1118:         ;STD    IOCB:CURLCN,X
F349 E719      1119:         STAB      (IOCB:CURLCN)+1,X
F34B A718      1120:         STAA      IOCB:CURLCN,X
               1121:         ;LDX    #0      WATCH ME PULL A RABBIT OUT OF A HAT!
F34D CE0000    1122:         LDX     #0
F350 FFCF12    1123:         STX     SYSSECTORDB+SECTORDB:DISKINFO       INVENT A ZERO SECTOR
F353 FFCF15    1124:         STX     SYSSECTORDB+SECTORDB:LSN+1  USE AN IMAGINARY DISK DRIVE
               1125:         ;LDX    #SYSSECTORDB      AND "READ" SECTOR ZERO FROM THAT DRIVE
F356 CECF12    1126:         LDX     #SYSSECTORDB
               1127:         ;CLR     SECTORDB:LSN,X    THIS IMAGINARY SECTOR MATCHES ALL IMAGINARY SECTORS
F359 6F02      1128:         CLR      SECTORDB:LSN,X
               1129:         ;JSR    INVENTSECTOR     *** POOF ***
F35B BDF8F2    1130:         JSR     INVENTSECTOR
F35E 4F        1131:         CLRA              NOW ZERO IT OUT
F35F 5F        1132:         CLRB
               1133:         ;SUBD    MAXSECTORSIZE     (GET - # BYTES TO ZAP)




ASM/6800 1.4A0: F360 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 371; Form 1     DISK FILE DRIVERS -- SUBROUTINES
SDOS11G.ASM
F360 F0CF0F    1134:         SUBB      MAXSECTORSIZE+1
F363 B2CF0E    1135:         SBCA       MAXSECTORSIZE
F366 9700      1136:         STAA      TEMPA    FOR STAASECTORL
               1137:         ;LDX    RDSI:SECTORBASE,X  GET SECTOR ADDRESS
F368 EE05      1138:         LDX     RDSI:SECTORBASE,X
F36A 4F        1139:         CLRA              MAKE THE ZERO FOR STAASECTORL TO STORE
               1140:         ;JSR    STAASECTORL        AND GO ZERO THE SECTOR OUT
F36B BDEEAA    1141:         JSR     STAASECTORL
F36E 207D      1142:         BRA       LOCATECURBYTE5A      GO SET UP THE WORLD




ASM/6800 1.4A0: F36E SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 372; Form 1     DISK FILE DRIVERS -- SUBROUTINES
SDOS11G.ASM
  F370         1144: LOCATECURBYTE3A      ; CAN'T LOCATE RDCN
F370 8C0401    1145:         CPX      #ERR:HCSICTOOSMALL IS THIS WHY ?
F373 27C8      1146:         BEQ      LOCATECURBYTE4      B/ YES, MUST ALLOCATE MORE SPACE
               1147:         ;JMP    ERRORED NO, GO CAUSE AN ERROR
F375 7ED20A    1148:         JMP     ERRORED
               1149: 
  F378         1150: LOCATECURBYTE2      ; WRITE TO UNALLOCATED CLUSTER
               1151:         ;LDX    DCBPOINTER        ALLOCATE CLUSTERS IN MIDDLE OF FILE
F378 DE06      1152:         LDX     DCBPOINTER
               1153:         ;LDD    DSKINFO:MIDALLOC,X        GET # TO ALLOCATE
F37A E615      1154:         LDAB      (DSKINFO:MIDALLOC)+1,X
F37C A614      1155:         LDAA      DSKINFO:MIDALLOC,X
               1156:         ;JSR    ALLOCATECLUSTERS
F37E BDED1B    1157:         JSR     ALLOCATECLUSTERS
               1158:         ;JSR    COMPUTERDCN       ALLOC BOMBED IOCB:RDCN...
F381 BDF706    1159:         JSR     COMPUTERDCN
               1160:         ;STD    IOCB:RDCN,X        SO WE NEED TO RE-COMPUTE IT
F384 E71C      1161:         STAB      (IOCB:RDCN)+1,X
F386 A71B      1162:         STAA      IOCB:RDCN,X
  F388         1163: LOCATECURBYTE3      ; GET LCN FROM HEADER CLUSTER
               1164:         ;JSR    LOCATERDCN GO LOCATE THE DATA CLUSTER NUMBER
F388 BDF66D    1165:         JSR     LOCATERDCN
F38B 25E3      1166:         BCS       LOCATECURBYTE3A      B/ ERROR OCCURRED
               1167:         ;LDD    HEADER:LCN,X      GRAB DESIRED LCN
F38D E601      1168:         LDAB      (HEADER:LCN)+1,X
F38F A600      1169:         LDAA      HEADER:LCN,X
               1170:         ;LDX    IOCBPOINTER       AND SAVE IT FOR NEXT ROUND
F391 FECE09    1171:         LDX     IOCBPOINTER
               1172:         ;STD    IOCB:CURLCN,X
F394 E719      1173:         STAB      (IOCB:CURLCN)+1,X
F396 A718      1174:         STAA      IOCB:CURLCN,X
  F398         1175: LOCATECURBYTE5      EQU     *
               1176:         ;LDD    IOCB:RBN,X NOW DIVIDE RELATIVE BYTE # BY SECTOR SIZE
F398 E61E      1177:         LDAB      (IOCB:RBN)+1,X
F39A A61D      1178:         LDAA      IOCB:RBN,X
               1179:         ;JSR    COMPUTERSN       TO GET RELATIVE SECTOR #
F39C BDF773    1180:         JSR     COMPUTERSN
F39F E71A      1181:         STAB      IOCB:DRSN,X
               1182:         ;LDX    IOCB:CURLCN,X       IS DATA LCN ALLOCATED ?
F3A1 EE18      1183:         LDX     IOCB:CURLCN,X




ASM/6800 1.4A0: F3A3 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 373; Form 1     DISK FILE DRIVERS -- SUBROUTINES
SDOS11G.ASM
F3A3 08        1184:         INX             ...= DUMMYLCN ?
F3A4 2797      1185:         BEQ      LOCATECURBYTE4      B/ DUMMY LCN, GO DECIDE WHAT TO DO
               1186: *       THE FOLLOWING IS THE "FAST PATH" FOR HANDLING WRITING AT END OF FILE
F3A6 B6CE9A    1187:         LDAA      WRITEFLAG        ARE WE WRITING ?
F3A9 270F      1188:         BEQ      LOCATECURBYTE5B      B/ NO, DON'T HAVE TO ZERO CLUSTERS OF SPARSE FIL
               1189:         ;LDX    IOCBPOINTER       AT END OF FILE ?
F3AB FECE09    1190:         LDX     IOCBPOINTER
               1191:         ;LDA     IOCB:EOFFLAG,X     ...?
F3AE A60B      1192:         LDAA      IOCB:EOFFLAG,X
F3B0 2708      1193:         BEQ      LOCATECURBYTE5B      B/ NO, DON'T HAVE TO ZERO CLUSTERS OF SPARSE FIL
               1194:         ;JSR    CHECKMUSTZERO     DOES SECTOR AT EOF CONTAIN IOCB:CURBYTE ?
F3B2 BDF561    1195:         JSR     CHECKMUSTZERO
               1196:         ;LBCS     ZEROTOCURBYTE     B/ NO, MUST ZERO CLUSTERS AT END OF SPARSE FILE
F3B5 2403      1197:         BCC        MACRO:0022
F3B7 7EF4E8    1198:         JMP     ZEROTOCURBYTE
  F3BA         1199: MACRO:0022
  F3BA         1200: LOCATECURBYTE5B ; NOW COMPUTE LSN OF DESIRED SECTOR
               1201:         ;LDX    IOCBPOINTER       NOW FIND LSN OF DESIRED SECTOR
F3BA FECE09    1202:         LDX     IOCBPOINTER
               1203:         ;LDD    IOCB:CURLCN,X
F3BD E619      1204:         LDAB      (IOCB:CURLCN)+1,X
F3BF A618      1205:         LDAA      IOCB:CURLCN,X
               1206:         ;JSR    CONVERTLCNTOLSN
F3C1 BDF77A    1207:         JSR     CONVERTLCNTOLSN




ASM/6800 1.4A0: F3C1 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 374; Form 1     DISK FILE DRIVERS -- SUBROUTINES
SDOS11G.ASM
  F3C4         1209: LOCATECURBYTE8      ;  DATA CLUSTER CONTAINING CURBYTE EXISTS!
               1210: *       SEE IF WE CAN OPTIMIZE THE FETCH
               1211:         ;LDX    IOCBPOINTER       SIGH!
F3C4 FECE09    1212:         LDX     IOCBPOINTER
F3C7 A60B      1213:         LDAA      IOCB:EOFFLAG,X     AT OR PAST END OF FILE ?
F3C9 271C      1214:         BEQ      LOCATECURBYTEG      B/ NO, MUST FETCH DATA SECTOR
               1215:         ;LDX    FCBPOINTER        IS FILESIZE ON A SECTOR BOUNDARY ?
F3CB FECEA6    1216:         LDX     FCBPOINTER
               1217:         ;LDD    FCB:FILESIZE+2,X  ...?
F3CE E614      1218:         LDAB      (FCB:FILESIZE+2)+1,X
F3D0 A613      1219:         LDAA      FCB:FILESIZE+2,X
               1220:         ;LDX    DCBPOINTER        (I.E., IS FILESIZE MOD NBPS = 0 ?)
F3D2 DE06      1221:         LDX     DCBPOINTER
F3D4 E51A      1222:         BITB      DSKINFO:NBPSM1+1,X       ... ?
F3D6 260F      1223:         BNE      LOCATECURBYTEG      B/ NO, MUST FETCH DATA SECTOR
F3D8 A519      1224:         BITA      DSKINFO:NBPSM1,X ... ?
F3DA 260B      1225:         BNE      LOCATECURBYTEG      B/ NO, MUST FETCH DATA SECTOR
               1226:         ;LDX    IOCBPOINTER       YES! INVENT A ZEROED SECTOR INSTEAD OF READING
F3DC FECE09    1227:         LDX     IOCBPOINTER
               1228:         ;JSR    INVENTSECTOR
F3DF BDF8F2    1229:         JSR     INVENTSECTOR
               1230:         ;JSR    ZEROSECTOR       GO ZERO THE SECTOR INVENTED
F3E2 BDEEB9    1231:         JSR     ZEROSECTOR
F3E5 2006      1232:         BRA       LOCATECURBYTE5A      AND CONTINUE AS THOUGH WE DID A READ
               1233: 
  F3E7         1234: LOCATECURBYTEG      ; GET THE DATA SECTOR
               1235:         ;LDX    IOCBPOINTER       GET POINTER TO SECTOR DESCRIPTOR
F3E7 FECE09    1236:         LDX     IOCBPOINTER
               1237:         ;JSR    READSECTOR        AND INITIATE THE READ
F3EA BDF8F5    1238:         JSR     READSECTOR
  F3ED         1239: LOCATECURBYTE5A ; SECTOR HAS BEEN FETCHED
               1240:         ;LDX    IOCBPOINTER       SAVE RDSI ADDRESS IN IOCB
F3ED FECE09    1241:         LDX     IOCBPOINTER
               1242:         ;LDD    RDSIPOINTER
F3F0 F6CEA5    1243:         LDAB      RDSIPOINTER+1
F3F3 B6CEA4    1244:         LDAA      RDSIPOINTER
               1245:         ;STD    IOCB:DRDSI,X
F3F6 E713      1246:         STAB      (IOCB:DRDSI)+1,X
F3F8 A712      1247:         STAA      IOCB:DRDSI,X
               1248:         ;JSR    COMPUTENEXTBYTE   SET UP POINTER INTO DATA SECTOR




ASM/6800 1.4A0: F3FA SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 375; Form 1     DISK FILE DRIVERS -- SUBROUTINES
SDOS11G.ASM
F3FA BDF6CB    1249:         JSR     COMPUTENEXTBYTE
F3FD B6CE9A    1250:         LDAA      WRITEFLAG        ARE WE WRITING ?
               1251:         ;LBNE    LOCATECURBYTEW      B/ YES
F400 2703      1252:         BEQ      MACRO:0023
F402 7EF46F    1253:         JMP     LOCATECURBYTEW
  F405         1254: MACRO:0023
  F405         1255: LOCATECURBYTER      ; READING FROM THE FILE
F405 A60B      1256:         LDAA      IOCB:EOFFLAG,X     HIT EOF?
F407 265F      1257:         BNE      LOCATECURBYTE9      B/ YES, GO BITCH
               1258:         ;LDX    IOCB:FCB,X  NO, COMPUTE FILESIZE - CURBYTE
F409 EE07      1259:         LDX     IOCB:FCB,X
               1260:         ;LDD    FCB:FILESIZE,X
F40B E612      1261:         LDAB      (FCB:FILESIZE)+1,X
F40D A611      1262:         LDAA      FCB:FILESIZE,X
               1263:         ;PSHD
F40F 37        1264:         PSHB
F410 36        1265:         PSHA
               1266:         ;LDD    FCB:FILESIZE+2,X
F411 E614      1267:         LDAB      (FCB:FILESIZE+2)+1,X
F413 A613      1268:         LDAA      FCB:FILESIZE+2,X
               1269:         ;LDX    IOCBPOINTER       DO THE SUBTRACT
F415 FECE09    1270:         LDX     IOCBPOINTER
               1271:         ;SUBD    IOCB:CURBYTE+2,X
F418 E010      1272:         SUBB      (IOCB:CURBYTE+2)+1,X
F41A A20F      1273:         SBCA       IOCB:CURBYTE+2,X
               1274:         ;STD    TEMPX   WE NEED DISTANCE TO EOF LATER
F41C D701      1275:         STAB      TEMPX+1
F41E 9700      1276:         STAA      TEMPX
               1277:         ;PULD           (RETREIVE UPPER HALF OF FCB:FILESIZE)
F420 32        1278:         PULA
F421 33        1279:         PULB
F422 E20E      1280:         SBCB       IOCB:CURBYTE+1,X
F424 A20D      1281:         SBCA       IOCB:CURBYTE,X
F426 2613      1282:         BNE      LOCATECURBYTE7      B/ > 2^24 BYTES FROM END OF FILE
F428 5D        1283:         TSTB
F429 2610      1284:         BNE      LOCATECURBYTE7      B/ > 65536 BYTES FROM END OF FILE
               1285:         ;LDD    TEMPX   "CLOSE" TO END OF FILE
F42B D601      1286:         LDAB      TEMPX+1
F42D 9600      1287:         LDAA      TEMPX
               1288:         ;CMPD    IOCB:BYTECOUNT,X    < 65536 BYTES FROM END OF FILE




ASM/6800 1.4A0: F42F SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 376; Form 1     DISK FILE DRIVERS -- SUBROUTINES
SDOS11G.ASM
F42F A116      1289:         CMPA      IOCB:BYTECOUNT,X
F431 2602      1290:         BNE      MACRO:0024
F433 E117      1291:         CMPB      (IOCB:BYTECOUNT)+1,X
  F435         1292: MACRO:0024
F435 2204      1293:         BHI      LOCATECURBYTE7      B/ USE NBPS-DISPLACEMENT
  F437         1294: LOCATECURBYTE6      EQU     *
               1295:         ;STD    IOCB:BYTECOUNT,X    SAVE # BYTES TO MOVE MAX
F437 E717      1296:         STAB      (IOCB:BYTECOUNT)+1,X
F439 A716      1297:         STAA      IOCB:BYTECOUNT,X
  F43B         1298: LOCATECURBYTE7      EQU     *
               1299:         ;JSR    WAITRDSI WAIT FOR I/O COMPLETED
F43B BDFAA3    1300:         JSR     WAITRDSI
               1301:         ;LDX    IOCBPOINTER
F43E FECE09    1302:         LDX     IOCBPOINTER
F441 8601      1303:         LDAA      #1      FLAG "CURBYTE HAS BEEN LOCATED"
F443 A711      1304:         STAA      IOCB:LOCATEDF,X
               1305:         ;JSR    READAHEAD  FIRE UP THE READ-AHEAD
F445 BDF806    1306:         JSR     READAHEAD
  F448         1307: LOCATECURBYTED      ; ALMOST DONE!
               1308:         ;LDX    IOCBPOINTER       COMPUTE MIN(BYTECOUNT,REQUESTED)
F448 FECE09    1309:         LDX     IOCBPOINTER
               1310:         ;LDD    USEDCOUNT
F44B F6CEA0    1311:         LDAB      USEDCOUNT+1
F44E B6CE9F    1312:         LDAA      USEDCOUNT
               1313:         ;CMPD    IOCB:BYTECOUNT,X
F451 A116      1314:         CMPA      IOCB:BYTECOUNT,X
F453 2602      1315:         BNE      MACRO:0025
F455 E117      1316:         CMPB      (IOCB:BYTECOUNT)+1,X
  F457         1317: MACRO:0025
F457 250A      1318:         BCS       LOCATECURBYTED2     B/ USE REQUESTED
               1319:         ;LDD    IOCB:BYTECOUNT,X    USE BYTECOUNT
F459 E617      1320:         LDAB      (IOCB:BYTECOUNT)+1,X
F45B A616      1321:         LDAA      IOCB:BYTECOUNT,X
               1322:         ;STD    USEDCOUNT        SAVE # BYTES USED AT THIS STEP
F45D F7CEA0    1323:         STAB      USEDCOUNT+1
F460 B7CE9F    1324:         STAA      USEDCOUNT
  F463         1325: LOCATECURBYTED2     EQU     *
               1326:         ;LDX    IOCBPOINTER       AS PROMISED
F463 FECE09    1327:         LDX     IOCBPOINTER
F466 0C39      1328:         OKRTS




ASM/6800 1.4A0: F466 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 377; Form 1     DISK FILE DRIVERS -- SUBROUTINES
SDOS11G.ASM
               1329: 
  F468         1330: LOCATECURBYTE9      ; WHEN WE GET HERE, IOCB:EOF IS ALREADY SET
               1331:         ;CLR     IOCB:BYTECOUNT,X    ZAP THE BYTECOUNT
F468 6F16      1332:         CLR      IOCB:BYTECOUNT,X
               1333:         ;CLR     IOCB:BYTECOUNT+1,X
F46A 6F17      1334:         CLR      IOCB:BYTECOUNT+1,X
               1335:         ;JMP    ERREOFHIT
F46C 7EE32C    1336:         JMP     ERREOFHIT




ASM/6800 1.4A0: F46C SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 378; Form 1     DISK FILE DRIVERS -- SUBROUTINES
SDOS11G.ASM
  F46F         1338: LOCATECURBYTEW      ; WRITING TO FILE
               1339:         ;LDX    IOCBPOINTER       JUST IN CASE
F46F FECE09    1340:         LDX     IOCBPOINTER
               1341:         ;LDX    IOCB:DRDSI,X      DID WE END UP...
F472 EE12      1342:         LDX     IOCB:DRDSI,X
F474 A600      1343:         LDAA      RDSI:DISKINFO,X TRYING TO WRITE ON THE IMAGINARY SECTOR ?
               1344:         ;LBEQ    LOCATECURBYTE2      B/ YES, GO ALLOCATE THE ACTUAL DATA CLUSTER
F476 2603      1345:         BNE      MACRO:0026
F478 7EF378    1346:         JMP     LOCATECURBYTE2
  F47B         1347: MACRO:0026
F47B A70B      1348:         STAA      RDSI:MODIFIED,X MAKE SURE THIS DATA SECTOR GOES BACK TO DISK
               1349:         ;LDX    IOCBPOINTER
F47D FECE09    1350:         LDX     IOCBPOINTER
               1351:         ;LDD    USEDCOUNT        COMPUTE MIN OF REQUESTED COUNT,
F480 F6CEA0    1352:         LDAB      USEDCOUNT+1
F483 B6CE9F    1353:         LDAA      USEDCOUNT
               1354:         ;CMPD    IOCB:BYTECOUNT,X    AND NBPS-DISPLACMENT INTO SECTOR
F486 A116      1355:         CMPA      IOCB:BYTECOUNT,X
F488 2602      1356:         BNE      MACRO:0027
F48A E117      1357:         CMPB      (IOCB:BYTECOUNT)+1,X
  F48C         1358: MACRO:0027
F48C 250A      1359:         BCS       LOCATECURBYTEW2     B/ REQUESTED COUNT IS SMALLER
               1360:         ;LDD    IOCB:BYTECOUNT,X    USE NBPS-DISPLACEMENT AS # BYTES
F48E E617      1361:         LDAB      (IOCB:BYTECOUNT)+1,X
F490 A616      1362:         LDAA      IOCB:BYTECOUNT,X
               1363:         ;STD    USEDCOUNT        SAVE # BYTES TO MOVE, MAX
F492 F7CEA0    1364:         STAB      USEDCOUNT+1
F495 B7CE9F    1365:         STAA      USEDCOUNT
  F498         1366: LOCATECURBYTEW2     EQU     *
               1367:         ;ADDD    IOCB:CURBYTE+2,X    COMPUTE CURBYTE + # BYTES TO BE WRITTEN
F498 EB10      1368:         ADDB      (IOCB:CURBYTE+2)+1,X
F49A A90F      1369:         ADCA       IOCB:CURBYTE+2,X
               1370:         ;STD    TEMP+2
F49C D703      1371:         STAB      TEMP+2+1
F49E 9702      1372:         STAA      TEMP+2
               1373:         ;LDX    IOCB:CURBYTE,X
F4A0 EE0D      1374:         LDX     IOCB:CURBYTE,X
F4A2 2401      1375:         BCC        LOCATECURBYTEW5
F4A4 08        1376:         INX
  F4A5         1377: LOCATECURBYTEW5     EQU     *




ASM/6800 1.4A0: F4A5 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 379; Form 1     DISK FILE DRIVERS -- SUBROUTINES
SDOS11G.ASM
F4A5 DF00      1378:         STX     TEMP
               1379:         ;LDX    FCBPOINTER        NOW COMPARE TO CURRENT FILESIZE
F4A7 FECEA6    1380:         LDX     FCBPOINTER
               1381:         ;LDD    FCB:FILESIZE+2,X  BY SUBTRACTING NEW FILE SIZE FROM FCB:FILESIZE
F4AA E614      1382:         LDAB      (FCB:FILESIZE+2)+1,X
F4AC A613      1383:         LDAA      FCB:FILESIZE+2,X
               1384:         ;SUBD    TEMP+2
F4AE D003      1385:         SUBB      TEMP+2+1
F4B0 9202      1386:         SBCA       TEMP+2
               1387:         ;LDD    FCB:FILESIZE,X
F4B2 E612      1388:         LDAB      (FCB:FILESIZE)+1,X
F4B4 A611      1389:         LDAA      FCB:FILESIZE,X
F4B6 D201      1390:         SBCB       TEMP+1
F4B8 9200      1391:         SBCA       TEMP
F4BA 2416      1392:         BCC        LOCATECURBYTEW4     B/ NEW "END OF FILE" < OLD, DON'T UPDATE
               1393:         ;LDD    TEMP    NEW EOF > OLD
F4BC D601      1394:         LDAB      TEMP+1
F4BE 9600      1395:         LDAA      TEMP
               1396:         ;STD    FCB:FILESIZE,X    UPDATE FILESIZE
F4C0 E712      1397:         STAB      (FCB:FILESIZE)+1,X
F4C2 A711      1398:         STAA      FCB:FILESIZE,X
               1399:         ;LDD    TEMP+2
F4C4 D603      1400:         LDAB      TEMP+2+1
F4C6 9602      1401:         LDAA      TEMP+2
               1402:         ;STD    FCB:FILESIZE+2,X
F4C8 E714      1403:         STAB      (FCB:FILESIZE+2)+1,X
F4CA A713      1404:         STAA      FCB:FILESIZE+2,X
F4CC A60A      1405:         LDAA      FCB:FLAGS,X        MAKE SURE DIRECTORY GETS UPDATED
F4CE 8A40      1406:         ORAA      #FCBFLG::UPDATEDIR
F4D0 A70A      1407:         STAA      FCB:FLAGS,X
  F4D2         1408: LOCATECURBYTEW4     EQU     *
               1409:         ;JSR    WAITRDSI WAIT FOR DISK SECTOR TO ARRIVE
F4D2 BDFAA3    1410:         JSR     WAITRDSI
               1411:         ;LDX    IOCBPOINTER       NOW MARK CURBYTE...
F4D5 FECE09    1412:         LDX     IOCBPOINTER
F4D8 8601      1413:         LDAA      #1      AS "LOCATED"
F4DA A711      1414:         STAA      IOCB:LOCATEDF,X
               1415:         ;JSR    READAHEAD  GET READAHEAD FIRED UP.
F4DC BDF806    1416:         JSR     READAHEAD
               1417:         ;LDD    USEDCOUNT        GET # BYTES TO MOVE




ASM/6800 1.4A0: F4DF SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 380; Form 1     DISK FILE DRIVERS -- SUBROUTINES
SDOS11G.ASM
F4DF F6CEA0    1418:         LDAB      USEDCOUNT+1
F4E2 B6CE9F    1419:         LDAA      USEDCOUNT
               1420:         ;JMP    LOCATECURBYTED2
F4E5 7EF463    1421:         JMP     LOCATECURBYTED2




ASM/6800 1.4A0: F4E5 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 381; Form 1     DISK FILE DRIVERS -- SUBROUTINES
SDOS11G.ASM
               1423: *       ZEROTOCURBYTE -- ZEROS OUT SECTORS BETWEEN FILESIZE AND IOCB:CURBYTE
               1424: *               ONLY USED WHEN WRITING AT END-OF-FILE...
               1425: *               AND IOCB:CURBYTE IS FAR PAST FILESIZE
               1426: *
  F4E8         1427: ZEROTOCURBYTE ; CURBYTE > 1 SECTOR PAST FILESIZE
               1428: *       JSR     CHECKMUSTZERO     MUST WE ZERO A SECTOR ?
               1429: *       BCS       ZEROTOCURBYTE3    B/ NO, GET OUT FAST !
               1430:         ;LDX    FCBPOINTER        IS FILESIZE **NOT** ON A SECTOR BOUNDARY ?
F4E8 FECEA6    1431:         LDX     FCBPOINTER
               1432:         ;LDD    FCB:FILESIZE+2,X  (I.E., IS SECTOR@FILESIZE ALREADY ZEROED?)
F4EB E614      1433:         LDAB      (FCB:FILESIZE+2)+1,X
F4ED A613      1434:         LDAA      FCB:FILESIZE+2,X
               1435:         ;LDX    DCBPOINTER        ...?
F4EF DE06      1436:         LDX     DCBPOINTER
F4F1 E51A      1437:         BITB      DSKINFO:NBPSM1+1,X
F4F3 2637      1438:         BNE      ZEROTOCURBYTEA     B/ NOT ON SECTOR BOUNDARY, GO ADVANCE TO NEXT
F4F5 A519      1439:         BITA      DSKINFO:NBPSM1,X
F4F7 2633      1440:         BNE      ZEROTOCURBYTEA     B/ NOT ON SECTOR BOUNDARY, GO ADVANCE TO NEXT
  F4F9         1441: ZEROTOCURBYTEZ ; MUST ZERO SECTOR SELECTED BY FILESIZE
               1442:         ;JSR    COMPUTERDCNF      LOCATE LSN OF SECTOR TO BE ZEROED
F4F9 BDF6FB    1443:         JSR     COMPUTERDCNF
F4FC 2558      1444:         BCS       ZEROTOCURBYTE3    B/ FILESIZE = MAX LEGAL SIZE FOR THIS DISK !!
               1445: ******** CAN FILESIZE BECOME > MAX LEGAL SIZE FOR THIS DISK ??????
               1446:         ;STD    IOCB:RDCN,X        SAVE RELATIVE DATA CLUSTER #
F4FE E71C      1447:         STAB      (IOCB:RDCN)+1,X
F500 A71B      1448:         STAA      IOCB:RDCN,X
               1449:         ;LDD    IOCB:RBN,X COMPUTE RELATIVE SECTOR # NEEDED
F502 E61E      1450:         LDAB      (IOCB:RBN)+1,X
F504 A61D      1451:         LDAA      IOCB:RBN,X
               1452:         ;JSR    COMPUTERSN
F506 BDF773    1453:         JSR     COMPUTERSN
F509 E71A      1454:         STAB      IOCB:DRSN,X       AND SAVE IT
               1455:         ;JSR    LOCATERDCN FIND LCN OF DATA CLUSTER
F50B BDF66D    1456:         JSR     LOCATERDCN
F50E 2549      1457:         BCS       ZEROTOCURBYTE5    B/ ERROR IN LOCATING LCN OF CLUSTER
               1458:         ;LDD    HEADER:LCN,X      GET CLUSTER # FROM HEADER
F510 E601      1459:         LDAB      (HEADER:LCN)+1,X
F512 A600      1460:         LDAA      HEADER:LCN,X
               1461:         ;LDX    IOCBPOINTER       TO BE COMPATIBLE...
F514 FECE09    1462:         LDX     IOCBPOINTER




ASM/6800 1.4A0: F514 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 382; Form 1     DISK FILE DRIVERS -- SUBROUTINES
SDOS11G.ASM
               1463:         ;STD    IOCB:CURLCN,X       WITH LOCATECURBYTE0
F517 E719      1464:         STAB      (IOCB:CURLCN)+1,X
F519 A718      1465:         STAA      IOCB:CURLCN,X
               1466:         ;LDX    IOCB:CURLCN,X       IS THIS CLUSTER ALLOCATED ?
F51B EE18      1467:         LDX     IOCB:CURLCN,X
F51D 08        1468:         INX             ... ?
F51E 270C      1469:         BEQ      ZEROTOCURBYTEA     B/ NO, THIS SECTOR IS EFFECTIVELY ZEROED ALREADY !
               1470:         ;JSR    CONVERTLCNTOLSN   YES, CONVERT LCN TO DESIRED SECTOR #
F520 BDF77A    1471:         JSR     CONVERTLCNTOLSN
               1472:         ;JSR    INVENTSECTOR     OUT OF NOWHERE SO WE CAN ZERO IT!!
F523 BDF8F2    1473:         JSR     INVENTSECTOR
               1474:         ;JSR    ZEROSECTOR       THEN ZERO IT...
F526 BDEEB9    1475:         JSR     ZEROSECTOR
               1476:         ;JSR    MARKMODIFIED     AND MAKE THIS SECTOR GO TO THE DISK
F529 BDDF7E    1477:         JSR     MARKMODIFIED
  F52C         1478: ZEROTOCURBYTEA ; ADVANCE FILESIZE PAST ZEROED SECTOR
               1479:         ;LDX    FCBPOINTER
F52C FECEA6    1480:         LDX     FCBPOINTER
               1481:         ;LDD    FCB:FILESIZE+2,X  (FIND LAST BYTE OF SECTOR)
F52F E614      1482:         LDAB      (FCB:FILESIZE+2)+1,X
F531 A613      1483:         LDAA      FCB:FILESIZE+2,X
               1484:         ;LDX    DCBPOINTER
F533 DE06      1485:         LDX     DCBPOINTER
               1486:         ;ORA     DSKINFO:NBPSM1,X
F535 AA19      1487:         ORAA      DSKINFO:NBPSM1,X
               1488:         ;ORB     DSKINFO:NBPSM1+1,X
F537 EA1A      1489:         ORAB      DSKINFO:NBPSM1+1,X
               1490:         ;LDX    FCBPOINTER        (RESULT MUST GO BACK TO FCB)
F539 FECEA6    1491:         LDX     FCBPOINTER
               1492:         ;ADDD    #1              (ADD 1 TO GET 1ST BYTE OF NEXT SECTOR)
F53C CB01      1493:         ADDB      #(1)&$FF
F53E 8900      1494:         ADCA       #(1)/256
               1495:         ;STD    FCB:FILESIZE+2,X
F540 E714      1496:         STAB      (FCB:FILESIZE+2)+1,X
F542 A713      1497:         STAA      FCB:FILESIZE+2,X
F544 2406      1498:         BCC        ZEROTOCURBYTEA1    B/ DON'T HAVE TO PROPOGATE CARRY
               1499:         ;INC     FCB:FILESIZE+1,X
F546 6C12      1500:         INC      FCB:FILESIZE+1,X
F548 2602      1501:         BNE      ZEROTOCURBYTEA1    B/ DON'T HAVE TO PROPOGATE CARRY
               1502:         ;INC     FCB:FILESIZE,X




ASM/6800 1.4A0: F54A SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 383; Form 1     DISK FILE DRIVERS -- SUBROUTINES
SDOS11G.ASM
F54A 6C11      1503:         INC      FCB:FILESIZE,X
  F54C         1504: ZEROTOCURBYTEA1
               1505:         ;LDA     FCB:FLAGS,X        MARK FCB AS MODIFIED
F54C A60A      1506:         LDAA      FCB:FLAGS,X
               1507:         ;ORA     #FCBFLG::UPDATEDIR
F54E 8A40      1508:         ORAA      #FCBFLG::UPDATEDIR
               1509:         ;STA     FCB:FLAGS,X
F550 A70A      1510:         STAA      FCB:FLAGS,X
F552 8D0D      1511:         BSR      CHECKMUSTZERO     MUST WE ZERO MORE SECTORS AT EOF ?
F554 25A3      1512:         BCS       ZEROTOCURBYTEZ    B/ YES, GO ZERO ANOTHER ONE!
  F556         1513: ZEROTOCURBYTE3
               1514:         ;JMP    LOCATECURBYTE0      SINCE ZEROTOCURBYTE DESTROYS LOCATOR INFORMATION
F556 7EF32C    1515:         JMP     LOCATECURBYTE0
               1516: 
  F559         1517: ZEROTOCURBYTE5    EQU     *
F559 8C0401    1518:         CPX      #ERR:HCSICTOOSMALL VALID REASON PREVENTING US FROM LOCATING CLUSTER?
F55C 27F8      1519:         BEQ      ZEROTOCURBYTE3    B/ YES, JUST QUIT
               1520:         ;JMP    ERRORED NO, GO BITCH AND SCREAM AND SHOUT!
F55E 7ED20A    1521:         JMP     ERRORED




ASM/6800 1.4A0: F55E SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 384; Form 1     DISK FILE DRIVERS -- SUBROUTINES
SDOS11G.ASM
               1523: *       CHECKMUSTZERO -- CHECK IF WE MUST ZERO ANOTHER SECTOR
               1524: *       USED TO HELP HANDLE SPARSE FILE ZEROING AT END OF FILE
               1525: *       CHECKS TO SEE IF SECTOR SELECTED BY FCB:FILESIZE...
               1526: *       CONTAINS THE BYTE SELECTED BY IOCB:CURBYTE
               1527: *       RETURNS CARRY RESET IF YES, NO NEED TO ZERO
               1528: *       RETURNS CARRY SET IF NO, MUST ZERO ANOTHER SECOTR
               1529: *
  F561         1530: CHECKMUSTZERO     ; CHECK IF WE MUST ZERO SECTORS
               1531:         ;LDX    FCBPOINTER        FETCH FILESIZE FOR COMPARE
F561 FECEA6    1532:         LDX     FCBPOINTER
               1533:         ;LDD    FCB:FILESIZE+2,X
F564 E614      1534:         LDAB      (FCB:FILESIZE+2)+1,X
F566 A613      1535:         LDAA      FCB:FILESIZE+2,X
               1536:         ;LDX    FCB:FILESIZE,X
F568 EE11      1537:         LDX     FCB:FILESIZE,X
F56A DF00      1538:         STX     TEMPX           TEMPX,D:=FILESIZE
               1539:         ;LDX    DCBPOINTER        FIND LAST BYTE OF SECTOR SELECTED BY FILESIZE
F56C DE06      1540:         LDX     DCBPOINTER
               1541:         ;ORA     DSKINFO:NBPSM1,X
F56E AA19      1542:         ORAA      DSKINFO:NBPSM1,X
               1543:         ;ORB     DSKINFO:NBPSM1+1,X
F570 EA1A      1544:         ORAB      DSKINFO:NBPSM1+1,X
               1545:         ;LDX    IOCBPOINTER       NOW COMPARE TO IOCB:CURBYTE
F572 FECE09    1546:         LDX     IOCBPOINTER
               1547:         ;SUBD    IOCB:CURBYTE+2,X
F575 E010      1548:         SUBB      (IOCB:CURBYTE+2)+1,X
F577 A20F      1549:         SBCA       IOCB:CURBYTE+2,X
               1550:         ;LDD    TEMPX
F579 D601      1551:         LDAB      TEMPX+1
F57B 9600      1552:         LDAA      TEMPX
F57D E20E      1553:         SBCB       IOCB:CURBYTE+1,X
F57F A20D      1554:         SBCA       IOCB:CURBYTE,X
F581 39        1555:         RTS             CARRY IS RESET IF CURBYTE IN SECTOR AT FILESIZE




ASM/6800 1.4A0: F581 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 385; Form 1     DISK FILE DRIVERS -- SUBROUTINES
SDOS11G.ASM
               1557: *       UPDATECURBYTE -- BY ADDING USEDCOUNT
               1558: *               ALSO ADJUSTS BYTECOUNT, NEXTBYTE
               1559: *               CAN BE CALLED ONLY IF IOCB:LOCATEDF IS VALID
               1560: *
  F582         1561: UPDATECURBYTE      EQU     *
               1562:         ;LDX    IOCBPOINTER       ADD # BYTES USED TO CURBYTE
F582 FECE09    1563:         LDX     IOCBPOINTER
               1564:         ;LDD    IOCB:CURBYTE+2,X
F585 E610      1565:         LDAB      (IOCB:CURBYTE+2)+1,X
F587 A60F      1566:         LDAA      IOCB:CURBYTE+2,X
               1567:         ;ADDD    USEDCOUNT
F589 FBCEA0    1568:         ADDB      USEDCOUNT+1
F58C B9CE9F    1569:         ADCA       USEDCOUNT
               1570:         ;STD    IOCB:CURBYTE+2,X
F58F E710      1571:         STAB      (IOCB:CURBYTE+2)+1,X
F591 A70F      1572:         STAA      IOCB:CURBYTE+2,X
F593 2406      1573:         BCC        UPDATECURBYTE1     B/ NO NEED TO UPDATE UPPER 16 BITS
               1574:         ;INC     IOCB:CURBYTE+1,X
F595 6C0E      1575:         INC      IOCB:CURBYTE+1,X
F597 2602      1576:         BNE      UPDATECURBYTE1
               1577:         ;INC     IOCB:CURBYTE,X
F599 6C0D      1578:         INC      IOCB:CURBYTE,X
  F59B         1579: UPDATECURBYTE1     EQU     *
               1580:         ;LDD    IOCB:NEXTBYTE,X    NOW ADJUST POINTER TO NEXT BYTE IN SECTOR BUFFER
F59B E615      1581:         LDAB      (IOCB:NEXTBYTE)+1,X
F59D A614      1582:         LDAA      IOCB:NEXTBYTE,X
               1583:         ;ADDD    USEDCOUNT        BY ADVANCING IT BY # USED BYTES
F59F FBCEA0    1584:         ADDB      USEDCOUNT+1
F5A2 B9CE9F    1585:         ADCA       USEDCOUNT
               1586:         ;STD    IOCB:NEXTBYTE,X
F5A5 E715      1587:         STAB      (IOCB:NEXTBYTE)+1,X
F5A7 A714      1588:         STAA      IOCB:NEXTBYTE,X
               1589:         ;LDD    IOCB:BYTECOUNT,X    NOW ADJUST # BYTES REMAINING IN FILE/SECTOR
F5A9 E617      1590:         LDAB      (IOCB:BYTECOUNT)+1,X
F5AB A616      1591:         LDAA      IOCB:BYTECOUNT,X
               1592:         ;SUBD    USEDCOUNT
F5AD F0CEA0    1593:         SUBB      USEDCOUNT+1
F5B0 B2CE9F    1594:         SBCA       USEDCOUNT
               1595:         ;STD    IOCB:BYTECOUNT,X
F5B3 E717      1596:         STAB      (IOCB:BYTECOUNT)+1,X




ASM/6800 1.4A0: F5B5 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 386; Form 1     DISK FILE DRIVERS -- SUBROUTINES
SDOS11G.ASM
F5B5 A716      1597:         STAA      IOCB:BYTECOUNT,X
  0001         1598:         IF      M6800!M6801
F5B7 2601      1599:         BNE      UPDATECURBYTERTS   B/ THERE ARE MORE IN THIS SECTOR
F5B9 4D        1600:         TSTA             ANY BYTES LEFT IN THIS SECTOR ?
  F5BA         1601: UPDATECURBYTERTS   EQU     *
               1602:         FIN
F5BA 39        1603:         RTS




ASM/6800 1.4A0: F5BA SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 387; Form 1     DISK FILE DRIVERS -- SUBROUTINES
SDOS11G.ASM
               1605: *
               1606: *       UPDATECURBYTEF -- UPDATE CURBYTE FOR DISK FILES
               1607: *
  F5BB         1608: UPDATECURBYTEF     EQU     *
F5BB 8DC5      1609:         BSR      UPDATECURBYTE      GO DO THE STUFF WE HAVE IN COMMON WITH DISK DEVICE
F5BD 2607      1610:         BNE      UPDATECURBYTEOKRTS B/ THERE ARE SOME BYTES LEFT IN THIS SECTOR, GET O
F5BF A60B      1611:         LDAA      IOCB:EOFFLAG,X     NO MORE, WERE WE AT EOF ?
F5C1 2603      1612:         BNE      UPDATECURBYTEOKRTS B/ YES, LEAVE EOF FLAG SET
               1613:         ;JMP    DSKFEOFTEST     NO, GO SEE IF WE ARE AT EOF!
F5C3 7EE309    1614:         JMP     DSKFEOFTEST
               1615: *                       WE USUALLY ONLY GET HERE IF WE'RE READING!
  F5C6         1616: UPDATECURBYTEOKRTS EQU     *
F5C6 0C39      1617:         OKRTS
               1618: *
               1619: *       UPDATECURBYTED -- UPDATECURBYTE FOR DISK DEVICE
               1620: *
  F5C8         1621: UPDATECURBYTED     EQU     *
F5C8 8DB8      1622:         BSR      UPDATECURBYTE      GO DO THE COMMON STUFF
F5CA 26FA      1623:         BNE      UPDATECURBYTEOKRTS B/ MORE BYTES LEFT IN SECTOR, GET OUT!
               1624:         ;JMP    DSKDEOFTEST     SECTOR EXHAUSTED, GO CHECK FOR EOF
F5CC 7EE548    1625:         JMP     DSKDEOFTEST




ASM/6800 1.4A0: F5CC SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 388; Form 1     DISK FILE DRIVERS -- SUBROUTINES
SDOS11G.ASM
  F5CF         1627: ERRDISKWRITELOCKED       EQU     *
               1628:         ;JSR    ERRET
F5CF BDD1F7    1629:         JSR     ERRET
F5D2 0419      1630:         FDB      ERR:DISKWRITELOCKED
               1631: 
  F5D4         1632: ERREOFHITJ2     EQU     *
               1633:         ;JMP    ERREOFHIT
F5D4 7EE32C    1634:         JMP     ERREOFHIT
               1635: *
               1636: *       LOCDSKD -- LOCATE CURBYTE FOR DISK DEVICE
               1637: *               ENTERED WITH CURLSN PRE-COMPUTED BY DSKDEOFTEST
               1638: *               (A,B) CONTAIN REQUEST COUNT
               1639: *               IF WRITE REQUEST, AND DISK IS WRITE LOCKED...
               1640: *                       CAUSES A "DISK WRITE LOCKED" ERROR
               1641: *               IF WRITING AT LEAST NBPS BYTES, STARTING ON A SECTOR BOUNDARY,
               1642: *                       "INVENTSECTOR" IS USED INSTEAD OF "READSECTOR"
               1643: *                       TO OPTIMIZE DISK I/O TIME
               1644: *                       THIS ALSO ALLOWS WRITES TO DISK SECTORS...
               1645: *                       WHICH CANNOT BE READ
               1646: *               IF EOF HIT, TAKES "EOF HIT" ERROR EXIT
               1647: *               OTHERWISE, SETS BYTECOUNT = NBPS - (CURBYTE MOD NBPS)
               1648: *                       USEDCOUNT = MIN(BYTECOUNT,REQUESTED)
               1649: *               CALLER MUST CALL UPDATECURBYTED WHEN DONE COPYING BYTES
               1650: *
  F5D7         1651: LOCDSKD  EQU     *
               1652:         ;STD    USEDCOUNT        SAVE THE REQUESTED COUNT
F5D7 F7CEA0    1653:         STAB      USEDCOUNT+1
F5DA B7CE9F    1654:         STAA      USEDCOUNT
               1655:         ;LDX    IOCBPOINTER       HIT EOF ?
F5DD FECE09    1656:         LDX     IOCBPOINTER
F5E0 A60B      1657:         LDAA      IOCB:EOFFLAG,X     ... ?
F5E2 26F0      1658:         BNE      ERREOFHITJ2     B/ YES
F5E4 A611      1659:         LDAA      IOCB:DISKWRITELOCKED,X     DISK DEVICE WRITE LOCKED ?
F5E6 2705      1660:         BEQ      LOCDSKD1 B/ NO, LET HIM DO ANYTHING
F5E8 B6CE9A    1661:         LDAA      WRITEFLAG        YES, DOES HE WANT TO WRITE ?
F5EB 26E2      1662:         BNE      ERRDISKWRITELOCKED       B/ TOO BAD!
  F5ED         1663: LOCDSKD1 EQU     *
F5ED A612      1664:         LDAA      IOCB:DRDSI,X      IS DISK SECTOR STILL AROUND ?
F5EF 2709      1665:         BEQ      LOCDSKD0 B/ NO, GO READ IT IN AGAIN
               1666:         ;LDD    IOCB:BYTECOUNT,X    YES, ANY BYTES LEFT IN THIS SECTOR ?




ASM/6800 1.4A0: F5F1 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 389; Form 1     DISK FILE DRIVERS -- SUBROUTINES
SDOS11G.ASM
F5F1 E617      1667:         LDAB      (IOCB:BYTECOUNT)+1,X
F5F3 A616      1668:         LDAA      IOCB:BYTECOUNT,X
               1669:         ;BNED    LOCATECURBYTEDJ     B/ YES, TAKE QUICK EXIT
F5F5 2670      1670:         BNE      LOCATECURBYTEDJ
F5F7 5D        1671:         TSTB
F5F8 266D      1672:         BNE      LOCATECURBYTEDJ
  F5FA         1673: LOCDSKD0 EQU     *
F5FA B6CE9A    1674:         LDAA      WRITEFLAG        WRITING TO SECTOR ?
F5FD 272A      1675:         BEQ      LOCDSKDR B/ NO
               1676:         ;LDX    IOCB:DCB,X  YES, WRITING AT LEAST A SECTOR'S WORTH...
F5FF EE00      1677:         LDX     IOCB:DCB,X
               1678:         ;LDD    DSKINFO:NBPSM1,X TO A SECTOR BOUNDARY ?
F601 E61A      1679:         LDAB      (DSKINFO:NBPSM1)+1,X
F603 A619      1680:         LDAA      DSKINFO:NBPSM1,X
               1681:         ;LDX    IOCBPOINTER       (WE NEED THIS AGAIN)
F605 FECE09    1682:         LDX     IOCBPOINTER
F608 A50F      1683:         BITA      IOCB:CURBYTE+2,X    IF NOT ON SECTOR BOUNDARY, READ TO UPDATE SECTOR
F60A 261D      1684:         BNE      LOCDSKDR B/ NOT ON A SECTOR BOUNDARY
F60C E510      1685:         BITB      IOCB:CURBYTE+3,X
F60E 2619      1686:         BNE      LOCDSKDR B/ NOT ON A SECTOR BOUNDARY
               1687:         ;SUBD    USEDCOUNT        IS USEDCOUNT >= NBPS ?
F610 F0CEA0    1688:         SUBB      USEDCOUNT+1
F613 B2CE9F    1689:         SBCA       USEDCOUNT
F616 2411      1690:         BCC        LOCDSKDR B/ NO, MUST READ TO UPDATE
               1691:         ;JSR    INVENTSECTOR     YES, OPTIMIZE SECTOR WRITE!
F618 BDF8F2    1692:         JSR     INVENTSECTOR
F61B A70B      1693:         STAA      RDSI:MODIFIED,X MARK SECTOR AS "DIDDLED"
               1694:         ;LDX    IOCBPOINTER       REMEMBER WHERE THE SECTOR IS
F61D FECE09    1695:         LDX     IOCBPOINTER
               1696:         ;STD    IOCB:DRDSI,X
F620 E713      1697:         STAB      (IOCB:DRDSI)+1,X
F622 A712      1698:         STAA      IOCB:DRDSI,X
               1699:         ;JSR    COMPUTENEXTBYTE   SET UP BYTECOUNT FOR TRANSFER
F624 BDF6CB    1700:         JSR     COMPUTENEXTBYTE
F627 203E      1701:         BRA       LOCATECURBYTEDJ     DON'T DO READ-AHEAD!




ASM/6800 1.4A0: F627 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 390; Form 1     DISK FILE DRIVERS -- SUBROUTINES
SDOS11G.ASM
  F629         1703: LOCDSKDR ; MUST READ SECTOR (WITH POSSIBLE UPDATE)
               1704:         ;JSR    READSECTOR        GO READ IN THE DATA SECTOR
F629 BDF8F5    1705:         JSR     READSECTOR
F62C 7DCE9A    1706:         TST     WRITEFLAG        WRITING ?
F62F 2702      1707:         BEQ      LOCDSKD2 B/ NO
F631 A70B      1708:         STAA      RDSI:MODIFIED,X YES, MARK RDSI AS MODIFIED
  F633         1709: LOCDSKD2 EQU     *
               1710:         ;LDX    IOCBPOINTER       REMEMBER THE RDSI ADDRESS
F633 FECE09    1711:         LDX     IOCBPOINTER
               1712:         ;STD    IOCB:DRDSI,X
F636 E713      1713:         STAB      (IOCB:DRDSI)+1,X
F638 A712      1714:         STAA      IOCB:DRDSI,X
               1715:         ;JSR    COMPUTENEXTBYTE   SET UP BYTECOUNT
F63A BDF6CB    1716:         JSR     COMPUTENEXTBYTE
               1717:         ;JSR    WAITRDSI WAIT FOR ARRIVAL OF DATA SECTOR
F63D BDFAA3    1718:         JSR     WAITRDSI
F640 B6CF09    1719:         LDAA      NRDSIS  ENOUGH BUFFERS AVAILABLE TO START READ-AHEAD ?
               1720:         ;CMPA     #READAHEADRDSIMIN  ... ?
F643 8103      1721:         CMPA      #READAHEADRDSIMIN
F645 2320      1722:         BLS      LOCATECURBYTEDJ     B/ NO, SO DON'T INITIATE READ-AHEAD
               1723:         ;JSR    INCIOCB:CURLSN      COMPUTE NEXT SECTOR ADDRESS
F647 BDF7F2    1724:         JSR     INCIOCB:CURLSN
F64A A602      1725:         LDAA      IOCB:CURLSN,X      WILL READAHEAD LSN BE LEGAL ?
F64C 36        1726:         PSHA             (I.E., IS CURRENT LSN + 1 < NLSN ?)
               1727:         ;LDD    IOCB:CURLSN+1,X    COPY CURRENT LSN TO (TOS,A,B)
F64D E604      1728:         LDAB      (IOCB:CURLSN+1)+1,X
F64F A603      1729:         LDAA      IOCB:CURLSN+1,X
               1730:         ;LDX    IOCB:DCB,X  SUBTRACT DSKINFO:NLSN
F651 EE00      1731:         LDX     IOCB:DCB,X
               1732:         ;SUBD    DSKINFO:NLSN+1,X        (I,E., IS CURRENT LSN < NLSN ?)
F653 E01D      1733:         SUBB      (DSKINFO:NLSN+1)+1,X
F655 A21C      1734:         SBCA       DSKINFO:NLSN+1,X
F657 32        1735:         PULA
F658 A21B      1736:         SBCA       DSKINFO:NLSN,X
F65A 2408      1737:         BCC        LOCDSKD4 B/ NO, DON'T DO READ-AHEAD
               1738:         ;LDX    IOCBPOINTER       SIGH!
F65C FECE09    1739:         LDX     IOCBPOINTER
               1740:         ;JSR    READSECTOR        INITIATE ITS FETCH
F65F BDF8F5    1741:         JSR     READSECTOR
F662 2506      1742:         BCS       LOCDSKD3 B/ AN I/O ERROR ??




ASM/6800 1.4A0: F662 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 391; Form 1     DISK FILE DRIVERS -- SUBROUTINES
SDOS11G.ASM
  F664         1743: LOCDSKD4 EQU     *
               1744:         ;JSR    DECIOCB:CURLSN      PUT LSN BACK LIKE IT WAS
F664 BDF859    1745:         JSR     DECIOCB:CURLSN
  F667         1746: LOCATECURBYTEDJ     EQU     *
               1747:         ;JMP    LOCATECURBYTED      GO COMPUTE USEDCOUNT AND TRANSFERCOUNT
F667 7EF448    1748:         JMP     LOCATECURBYTED
               1749: 
  F66A         1750: LOCDSKD3 EQU     *
               1751:         ;JMP    READAHEADCERRED     GO BACK UP CURLSN AND ANNOUNCE ERROR
F66A 7EF870    1752:         JMP     READAHEADCERRED




ASM/6800 1.4A0: F66A SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 392; Form 1     DISK FILE DRIVERS -- SUBROUTINES
SDOS11G.ASM
               1754: *       LOCATERDCN -- READS IN HEADER SECTOR CONTAINING LCN FOR IOCB:RDCN
               1755: *               OKRET: RETURNS (X) POINTING TO DESIRED LCN IN HEADER SECTOR
               1756: *               ERRET: DISK I/O ERROR OCCURRED
               1757: *
  F66D         1758: LOCATERDCN EQU     *
               1759:         ;LDX    IOCBPOINTER       GRAB RDCN
F66D FECE09    1760:         LDX     IOCBPOINTER
               1761:         ;LDD    IOCB:RDCN,X
F670 E61C      1762:         LDAB      (IOCB:RDCN)+1,X
F672 A61B      1763:         LDAA      IOCB:RDCN,X
               1764:         ;JSR    COMPUTERHSN      GET RELATIVE HEADER SECTOR NUMBER DESIRED
F674 BDF75F    1765:         JSR     COMPUTERHSN
               1766:         ;CMPB     IOCB:HRSN,X       SAME HEADER SECTOR AS LAST TIME ?
F677 E121      1767:         CMPB      IOCB:HRSN,X
F679 2604      1768:         BNE      LOCATERDCN0        B/ NO, MUST READ HEADER SECTOR
F67B A61F      1769:         LDAA      IOCB:HRDSI,X      IS THE HEADER SECTOR FROM LAST TIME STILL AROUND ?
F67D 2619      1770:         BNE      LOCATERDCN2        B/ YES, DON'T BOTHER READING IT IN!
  F67F         1771: LOCATERDCN0        ; MUST READ IN HEADER SECTOR
               1772:         ;CLR     IOCB:HRDSI,X      MARK CURRENT HEADER SECTOR AS "WRONG ONE!"
F67F 6F1F      1773:         CLR      IOCB:HRDSI,X
               1774:         ;CLR     IOCB:HRDSI+1,X    (IN CASE WE GET AN ERROR)
F681 6F20      1775:         CLR      IOCB:HRDSI+1,X
F683 E721      1776:         STAB      IOCB:HRSN,X       SAVE SO WE CAN COMPUTE DESIRED LSN
               1777:         ;LDX    IOCB:FCB,X  IS HEADER INITIALIZED FAR ENOUGH ?
F685 EE07      1778:         LDX     IOCB:FCB,X
               1779:         ;CMPB     FCB:HCSIC,X ... ?
F687 E10E      1780:         CMPB      FCB:HCSIC,X
F689 2430      1781:         BCC        LOCATERDCN3        B/ NO, INVALID RDCN
               1782:         ;JSR    GENHLSNPLUSHRSN COMPUTE DESIRED LSN
F68B BDF7C7    1783:         JSR     GENHLSNPLUSHRSN
               1784:         ;JSR    READSECTOR        READ SECTOR CONTAINING PREVIOUS LCN
F68E BDF8F5    1785:         JSR     READSECTOR
               1786:         ;LDX    IOCBPOINTER
F691 FECE09    1787:         LDX     IOCBPOINTER
               1788:         ;STD    IOCB:HRDSI,X      SAVE HEADER SECTOR POINTER
F694 E720      1789:         STAB      (IOCB:HRDSI)+1,X
F696 A71F      1790:         STAA      IOCB:HRDSI,X
  F698         1791: LOCATERDCN2        ; HEADER SECTOR IS (BEING) READ IN
               1792:         ;LDD    IOCB:RDCN,X        GET IOCB:RDCN AGAIN
F698 E61C      1793:         LDAB      (IOCB:RDCN)+1,X




ASM/6800 1.4A0: F69A SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 393; Form 1     DISK FILE DRIVERS -- SUBROUTINES
SDOS11G.ASM
F69A A61B      1794:         LDAA      IOCB:RDCN,X
               1795:         ;ASLD            CONVERT TO A BYTE DISPLACEMENT INTO HEADER CLUSTER SECTOR
F69C 58        1796:         ASLB
F69D 49        1797:         ROLA
               1798:         ;LDX    DCBPOINTER        MASK TO GET DISPLACEMENT...
F69E DE06      1799:         LDX     DCBPOINTER
F6A0 A419      1800:         ANDA      DSKINFO:NBPSM1,X INTO HEADER SECTOR OF PREVIOUS RDCN
F6A2 E41A      1801:         ANDB      DSKINFO:NBPSM1+1,X
               1802:         ;LDX    IOCBPOINTER       ADD SECTOR BUFFER ADDRESS...
F6A4 FECE09    1803:         LDX     IOCBPOINTER
               1804:         ;LDX    IOCB:HRDSI,X      (OF HEADER SECTOR)
F6A7 EE1F      1805:         LDX     IOCB:HRDSI,X
               1806:         ;ADDD    RDSI:SECTORBASE,X  TO GET POINTER TO PREVIOUS LOGICAL CLUSTER NUMBER
F6A9 EB06      1807:         ADDB      (RDSI:SECTORBASE)+1,X
F6AB A905      1808:         ADCA       RDSI:SECTORBASE,X
               1809:         ;STD    LOCATERDCNX        SAVE THE POINTER
F6AD F7CF1A    1810:         STAB      LOCATERDCNX+1
F6B0 B7CF19    1811:         STAA      LOCATERDCNX
               1812:         ;JSR    WAITSECTOR        WAIT FOR HEADER SECTOR TO ARRIVE
F6B3 BDFAA1    1813:         JSR     WAITSECTOR
               1814:         ;LDX    LOCATERDCNX        GET POINTER TO PREVIOUS LOGICAL CLUSTER NUMBER
F6B6 FECF19    1815:         LDX     LOCATERDCNX
F6B9 0C39      1816:         OKRTS
               1817: 
  F6BB         1818: LOCATERDCN3        ; INVALID RDCN ENCOUNTERED
               1819:         ;LDX    DCBPOINTER        IS IT EVER POSSIBLE FOR THIS RDCN TO BE VALID ?
F6BB DE06      1820:         LDX     DCBPOINTER
               1821:         ;CMPB     DSKINFO:NSPC,X   (I.E., WILL RDCN BE FOUND SOMEWHERE IN HEADER CLUST
F6BD E111      1822:         CMPB      DSKINFO:NSPC,X
F6BF 2505      1823:         BCS       ERRHCSICTOOSMALL   B/ YES, INVALID BECAUSE OF HCSIC
  F6C1         1824: ERRCLUSTERSIZELIMITSFILE EQU     *
               1825:         ;JSR    ERRET
F6C1 BDD1F7    1826:         JSR     ERRET
F6C4 041C      1827:         FDB      ERR:CLUSTERSIZELIMITSFILE
               1828: 
  F6C6         1829: ERRHCSICTOOSMALL   EQU     *
               1830:         ;JSR    ERRET
F6C6 BDD1F7    1831:         JSR     ERRET
F6C9 0401      1832:         FDB      ERR:HCSICTOOSMALL




ASM/6800 1.4A0: F6C9 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 394; Form 1     DISK FILE DRIVERS -- SUBROUTINES
SDOS11G.ASM
               1834: *
               1835: *       COMPUTENEXTBYTE -- GENERATE VALUE FOR IOCB:NEXTBYTE
               1836: *               = SECTORBASE(RDSIPOINTER)+(IOCB:CURBYTE MOD DSKINFO:NBPS)
               1837: *               SETS IOCB:BYTECOUNT = NBPS - (IOCB:CURBYTE MOD DSKINFO:NBPS)
               1838: *               (X) = IOCBPOINTER ON EXIT
               1839: *
  F6CB         1840: COMPUTENEXTBYTE   EQU     *
               1841:         ;LDX    DCBPOINTER        GET MASK TO COMPUTE "MOD NBPS"
F6CB DE06      1842:         LDX     DCBPOINTER
               1843:         ;LDD    DSKINFO:NBPSM1,X
F6CD E61A      1844:         LDAB      (DSKINFO:NBPSM1)+1,X
F6CF A619      1845:         LDAA      DSKINFO:NBPSM1,X
               1846:         ;LDX    IOCBPOINTER
F6D1 FECE09    1847:         LDX     IOCBPOINTER
F6D4 A40F      1848:         ANDA      IOCB:CURBYTE+2,X
F6D6 E410      1849:         ANDB      IOCB:CURBYTE+3,X    (A,B) = IOCB:CURBYTE MOD DSKINFO:NBPS
               1850:         ;STD    IOCB:BYTECOUNT,X    WE'LL NEED THIS AGAIN SOON
F6D8 E717      1851:         STAB      (IOCB:BYTECOUNT)+1,X
F6DA A716      1852:         STAA      IOCB:BYTECOUNT,X
               1853:         ;LDX    IOCB:DRDSI,X
F6DC EE12      1854:         LDX     IOCB:DRDSI,X
               1855:         ;ADDD    RDSI:SECTORBASE,X
F6DE EB06      1856:         ADDB      (RDSI:SECTORBASE)+1,X
F6E0 A905      1857:         ADCA       RDSI:SECTORBASE,X
               1858:         ;LDX    IOCBPOINTER       SAVE NEXTBYTE IN IOCB
F6E2 FECE09    1859:         LDX     IOCBPOINTER
               1860:         ;STD    IOCB:NEXTBYTE,X
F6E5 E715      1861:         STAB      (IOCB:NEXTBYTE)+1,X
F6E7 A714      1862:         STAA      IOCB:NEXTBYTE,X
               1863:         ;LDX    DCBPOINTER        NOW COMPUTE NBPS - DISPLACMENT INTO SECTOR
F6E9 DE06      1864:         LDX     DCBPOINTER
               1865:         ;LDD    DSKINFO:NBPS,X   AND SAVE AS BYTECOUNT
F6EB E60A      1866:         LDAB      (DSKINFO:NBPS)+1,X
F6ED A609      1867:         LDAA      DSKINFO:NBPS,X
               1868:         ;LDX    IOCBPOINTER
F6EF FECE09    1869:         LDX     IOCBPOINTER
               1870:         ;SUBD    IOCB:BYTECOUNT,X
F6F2 E017      1871:         SUBB      (IOCB:BYTECOUNT)+1,X
F6F4 A216      1872:         SBCA       IOCB:BYTECOUNT,X
               1873:         ;STD    IOCB:BYTECOUNT,X




ASM/6800 1.4A0: F6F6 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 395; Form 1     DISK FILE DRIVERS -- SUBROUTINES
SDOS11G.ASM
F6F6 E717      1874:         STAB      (IOCB:BYTECOUNT)+1,X
F6F8 A716      1875:         STAA      IOCB:BYTECOUNT,X
F6FA 39        1876:         RTS




ASM/6800 1.4A0: F6FA SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 396; Form 1     DISK FILE DRIVERS -- SUBROUTINES
SDOS11G.ASM
               1878: *
               1879: *       COMPUTERDCNF -- DIVIDES FCB:FILESIZE BY DSKINFO:NBPC
               1880: *               EXITS EXACTLY THE SAME AS COMPUTERDCN
               1881: *
  F6FB         1882: COMPUTERDCNF ; DIVIDE FCB:FILESIZE BY DSKINFO:NBPC
               1883:         ;LDX    FCBPOINTER        COPY FCB:FILESIZE TO (A,B,X)
F6FB FECEA6    1884:         LDX     FCBPOINTER
               1885:         ;LDD    FCB:FILESIZE,X
F6FE E612      1886:         LDAB      (FCB:FILESIZE)+1,X
F700 A611      1887:         LDAA      FCB:FILESIZE,X
               1888:         ;LDX    FCB:FILESIZE+2,X
F702 EE13      1889:         LDX     FCB:FILESIZE+2,X
F704 2009      1890:         BRA       COMPUTERDCNS      GO COMPUTE RELATIVE DATA CLUSTER NUMBER
               1891: *
               1892: *       COMPUTERDCN -- DIVIDES IOCB:CURBYTE BY NUMBER OF BYTES PER CLUSTER
               1893: *               RETURN RELATIVE DATA CLUSTER NUMBER (QUOTIENT) IN (A,B)
               1894: *               DEFINITION: 1 --> FIRST DATA CLUSTER
               1895: *               TAKES ERRET IF QUOTIENT >= DSKINFO:NBPC/2
               1896: *               LEAVES REMAINDER IN IOCB:RBN
               1897: *               RETURNS (X)=IOCBPOINTER
               1898: *
  F706         1899: COMPUTERDCN       EQU     *
               1900:         ;LDX    IOCBPOINTER       COPY IOCB:CURBYTE TO (A,B,X)
F706 FECE09    1901:         LDX     IOCBPOINTER
               1902:         ;LDD    IOCB:CURBYTE,X
F709 E60E      1903:         LDAB      (IOCB:CURBYTE)+1,X
F70B A60D      1904:         LDAA      IOCB:CURBYTE,X
               1905:         ;LDX    IOCB:CURBYTE+2,X
F70D EE0F      1906:         LDX     IOCB:CURBYTE+2,X
  F70F         1907: COMPUTERDCNS      ; ENTRY POINT IF DIVIDEND IN (A,B,X)
F70F DF02      1908:         STX     TEMP.DIVIDEND   SAVE LOWER 16 BITS OF DIVIDEND
F711 36        1909:         PSHA             SAVE (A) SO WE CAN SET UP NUMBER OF ITERATIONS
               1910:         ;LDX    DCBPOINTER        GET DIVISOR
F712 DE06      1911:         LDX     DCBPOINTER
               1912: *       ASSERT: NBPC*2^16 > # BYTES IN LARGEST POSSIBLE FILE...
               1913: *       SINCE # BYTES/FILE <= (NBPC/2-1)*NBPC, AND NBPC < 2^16
               1914: *       THIS MEANS 1ST QUOTIENT BIT WOULD ALWAYS BE ZERO!
               1915: *       SO RATHER THAN GENERATE IT, WE SIMPLY SHIFT IN ZERO
F714 8610      1916:         LDAA      #16     # QUOTIENT BITS TO GENERATE
F716 9704      1917:         STAA      COUNT    # QUOTIENT BITS TO GENERATE




ASM/6800 1.4A0: F718 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 397; Form 1     DISK FILE DRIVERS -- SUBROUTINES
SDOS11G.ASM
F718 32        1918:         PULA             GET UPPER 16 BITS OF DIVIDEND TO (D)
  F719         1919: COMPUTERDCNL      ; GENERATE NEXT QUOTIENT BIT
F719 780003    1920:         ASL      TEMP.DIVIDEND+1 SHIFT A BIT INTO (A,B) ...
F71C 790002    1921:         ROL     TEMP.DIVIDEND   FROM REST OF DIVDEND
               1922:         ;ROLD
F71F 59        1923:         ROLB
F720 49        1924:         ROLA
               1925:         ;CMPD    DSKINFO:NBPC,X    IS (A,B) ...
F721 A120      1926:         CMPA      DSKINFO:NBPC,X
F723 2602      1927:         BNE      MACRO:0028
F725 E121      1928:         CMPB      (DSKINFO:NBPC)+1,X
  F727         1929: MACRO:0028
F727 2504      1930:         BCS       COMPUTERDCN0      B/ < DIVISOR, CARRY IS 1
               1931:         ;SUBD    DSKINFO:NBPC,X    QUOTIENT BIT IS ONE (CARRY IS 0)
F729 E021      1932:         SUBB      (DSKINFO:NBPC)+1,X
F72B A220      1933:         SBCA       DSKINFO:NBPC,X
  F72D         1934: COMPUTERDCN0      ; CARRY = COMPLEMENT QUOTIENT BIT
F72D 790001    1935:         ROL     TEMP.QUOTIENT+1 MOVE QUOTIENT BIT INTO QUOTIENT
F730 790000    1936:         ROL     TEMP.QUOTIENT
               1937:         ;DEC     COUNT    DOWN COUNT # QUOTIENT BITS TO GENERATE
F733 7A0004    1938:         DEC      COUNT
F736 26E1      1939:         BNE      COMPUTERDCNL      LOOP IF MUST GEN MORE
               1940:         ;LDX    IOCBPOINTER       OOOPS! DON'T FORGET THIS!
F738 FECE09    1941:         LDX     IOCBPOINTER
               1942:         ;STD    IOCB:RBN,X STORE REMAINDER FOR LATER USE
F73B E71E      1943:         STAB      (IOCB:RBN)+1,X
F73D A71D      1944:         STAA      IOCB:RBN,X
               1945:         ;LDD    TEMP.QUOTIENT   GET QUOTIENT INTO (A,B)
F73F D601      1946:         LDAB      TEMP.QUOTIENT+1
F741 9600      1947:         LDAA      TEMP.QUOTIENT
               1948:         ;NEGD           CONVERT QUOTIENT TO TRUE FORM
F743 40        1949:         NEGA
F744 50        1950:         NEGB
F745 8200      1951:         SBCA       #0
               1952: *                       AND ADD 1 SINCE ZERO MEANS "HEADER CLUSTER"
F747 2513      1953:         BCS       COMPUTERDCNLIMIT  IS QUOTIENT+1 >= DSKINFO:NBPC/2 ?
               1954:         ;ASLD            NOT > 65535; (DOUBLE QUOTIENT+1)
F749 58        1955:         ASLB
F74A 49        1956:         ROLA
               1957:         ;LDX    DCBPOINTER        I.E., IS ( QUOTIENT+1 )*2 >= DSKINFO:NBPC ?




ASM/6800 1.4A0: F74B SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 398; Form 1     DISK FILE DRIVERS -- SUBROUTINES
SDOS11G.ASM
F74B DE06      1958:         LDX     DCBPOINTER
               1959:         ;CMPD    DSKINFO:NBPC,X    ...?
F74D A120      1960:         CMPA      DSKINFO:NBPC,X
F74F 2602      1961:         BNE      MACRO:0029
F751 E121      1962:         CMPB      (DSKINFO:NBPC)+1,X
  F753         1963: MACRO:0029
F753 2407      1964:         BCC        COMPUTERDCNLIMIT  B/ YES
               1965:         ;LSRD           HALVE DOUBLED QUOTIENT+1 TO GET QUOTIENT+1 BACK
F755 44        1966:         LSRA
F756 56        1967:         RORB
               1968:         ;LDX    IOCBPOINTER
F757 FECE09    1969:         LDX     IOCBPOINTER
F75A 0C39      1970:         OKRTS
               1971: 
  F75C         1972: COMPUTERDCNLIMIT  EQU     *
               1973:         ;JMP    ERRCLUSTERSIZELIMITSFILE
F75C 7EF6C1    1974:         JMP     ERRCLUSTERSIZELIMITSFILE




ASM/6800 1.4A0: F75C SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 399; Form 1     DISK FILE DRIVERS -- SUBROUTINES
SDOS11G.ASM
               1976: *
               1977: *       COMPUTERHSN -- COMPUTE RELATIVE HEADER SECTOR NUMBER
               1978: *       DIVIDES (A,B) BY (NBPS/2)
               1979: *       RETURNS QUOTIENT IN (B)
               1980: *       RETURNS (X)=IOCBPOINTER
               1981: 
  F75F         1982: COMPUTERHSN      EQU     *
F75F 36        1983:         PSHA
               1984:         ;LDX    DCBPOINTER
F760 DE06      1985:         LDX     DCBPOINTER
F762 A618      1986:         LDAA      DSKINFO:LOG2NBPS,X       GET NBPS POWER OF TWO
F764 4A        1987:         DECA              DIVIDE BY TWO
  F765         1988: COMPUTERHSN0     EQU     *
F765 9700      1989:         STAA      TEMPA    SAVE # TIMES TO RIGHT SHIFT
F767 32        1990:         PULA
  F768         1991: COMPUTERHSN1     EQU     *
               1992:         ;LSRD           DIVIDE BY 2^LOG2(NBPS)
F768 44        1993:         LSRA
F769 56        1994:         RORB
               1995:         ;DEC     TEMPA
F76A 7A0000    1996:         DEC      TEMPA
F76D 26F9      1997:         BNE      COMPUTERHSN1
               1998:         ;LDX    IOCBPOINTER
F76F FECE09    1999:         LDX     IOCBPOINTER
F772 39        2000:         RTS             EXIT WITH QUOTIENT
               2001: *
               2002: *       COMPUTERSN  -- COMPUTE SECTOR NUMBER WITHIN CLUSTER
               2003: *               DIVIDES (A,B) BY NBPS
               2004: *               RETURNS QUOTIENT IN (B)
               2005: *               RETURNS (X)=IOCBPOINTER
               2006: *
  F773         2007: COMPUTERSN       EQU     *
F773 36        2008:         PSHA
               2009:         ;LDX    DCBPOINTER
F774 DE06      2010:         LDX     DCBPOINTER
F776 A618      2011:         LDAA      DSKINFO:LOG2NBPS,X
F778 20EB      2012:         BRA       COMPUTERHSN0




ASM/6800 1.4A0: F778 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 400; Form 1     DISK FILE DRIVERS -- SUBROUTINES
SDOS11G.ASM
               2014: *
               2015: *       CONVERTLCNTOLSN  -- CONVERTS LCN IN (A,B) TO CORRESPONDING LSN
               2016: *               ADDS IOCB:DRSN TO RESULT
               2017: *               FINAL LSN PLACED IN IOCB:CURLSN
               2018: *               DESTROYS SYSSECTORDB
               2019: *               RETURNS (X)=IOCBPOINTER
               2020: *
  F77A         2021: CONVERTLCNTOLSN   EQU     *
F77A 8D16      2022:         BSR      CONVERTLCNTO1ST   FIND LSN OF FIRST SECTOR IN CLUSTER
               2023:         ;LDX    IOCBPOINTER       FOR CONVENIENCE
F77C FECE09    2024:         LDX     IOCBPOINTER
F77F EB1A      2025:         ADDB      IOCB:DRSN,X       ADD RELATIVE SECTOR # ...
F781 8900      2026:         ADCA       #0      TO RESULT
F783 2403      2027:         BCC        CONVERTLCN2
               2028:         ;INC     SYSSECTORDB+SECTORDB:LSN
F785 7CCF14    2029:         INC      SYSSECTORDB+SECTORDB:LSN
  F788         2030: CONVERTLCN2       EQU     *
               2031:         ;STD    IOCB:CURLSN+1,X    UPDATE IOCB
F788 E704      2032:         STAB      (IOCB:CURLSN+1)+1,X
F78A A703      2033:         STAA      IOCB:CURLSN+1,X
F78C B6CF14    2034:         LDAA      SYSSECTORDB+SECTORDB:LSN    COPY MSB OF DESIRED LSN TO IOCB
F78F A702      2035:         STAA      IOCB:CURLSN,X
F791 39        2036:         RTS             AND SPLIT




ASM/6800 1.4A0: F791 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 401; Form 1     DISK FILE DRIVERS -- SUBROUTINES
SDOS11G.ASM
               2038: *
               2039: *       CONVERTLCNTO1ST -- CONVERTS LCN IN (A,B) TO 1ST LSN IN CLUSTER
               2040: *               RESULT PLACED IN SYSSECTORDB+SECTORDB:LSN
               2041: *               LOWER 16 BITS RETURNED IN (A,B)
               2042: *               (X) POINTS TO SYSSECTORDB, ALL SET TO READ ON EXIT
               2043: *
  F792         2044: CONVERTLCNTO1ST   EQU     *
               2045:         ;STD    TEMP.MPCND       SAVE THE MULTIPLICAND
F792 D701      2046:         STAB      TEMP.MPCND+1
F794 9700      2047:         STAA      TEMP.MPCND
               2048:         ;LDX    DCBPOINTER        GET MULTIPLIER FROM DISKINFO
F796 DE06      2049:         LDX     DCBPOINTER
F798 FFCF12    2050:         STX     SYSSECTORDB+SECTORDB:DISKINFO       SET UP TO READ THIS SECTOR
F79B E611      2051:         LDAB      DSKINFO:NSPC,X   (I.E., THE CLUSTER SIZE)
F79D D705      2052:         STAB      TEMP.MPR        SAVE THE MULTIPLIER
F79F 8608      2053:         LDAA      #8      # MULTIPLIER BITS TO PROCESS
F7A1 9704      2054:         STAA      COUNT
F7A3 4F        2055:         CLRA              ZERO THE PARTIAL PRODUCT
F7A4 5F        2056:         CLRB              ACCUMULATE PRODUCT IN SYSSECTOR+SECTORDB:LSN
  F7A5         2057: CONVERTLCNL       EQU     *
               2058:         ;ASLD
F7A5 58        2059:         ASLB
F7A6 49        2060:         ROLA
               2061: ************** USE MUL INSTRUCTION IN HERE?????
F7A7 79CF14    2062:         ROL     SYSSECTORDB+SECTORDB:LSN    NO OVERFLOW POSSIBLE
F7AA 780005    2063:         ASL      TEMP.MPR        CHECK NEXT MULTIPLIER BIT
F7AD 2409      2064:         BCC        CONVERTLCN1       B/ =0, DON'T ADD MULTIPLICAND
               2065:         ;ADDD    TEMP.MPCND       =1, ADD MULTIPLICAND TO PARTIAL PRODUCT
F7AF DB01      2066:         ADDB      TEMP.MPCND+1
F7B1 9900      2067:         ADCA       TEMP.MPCND
F7B3 2403      2068:         BCC        CONVERTLCN1       (PROPOGATE CARRY TO 3RD BYTE)
               2069:         ;INC     SYSSECTORDB+SECTORDB:LSN
F7B5 7CCF14    2070:         INC      SYSSECTORDB+SECTORDB:LSN
  F7B8         2071: CONVERTLCN1       EQU     *
               2072:         ;DEC     COUNT    DOWN COUNT UNPROCESSED MULTIPLIER BITS
F7B8 7A0004    2073:         DEC      COUNT
F7BB 26E8      2074:         BNE      CONVERTLCNL       B/ MORE TO PROCESS
               2075:         ;STD    SYSSECTORDB+SECTORDB:LSN+1  SAVE LOWER 16 BITS OF LSN
F7BD F7CF16    2076:         STAB      SYSSECTORDB+SECTORDB:LSN+1+1
F7C0 B7CF15    2077:         STAA      SYSSECTORDB+SECTORDB:LSN+1




ASM/6800 1.4A0: F7C0 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 402; Form 1     DISK FILE DRIVERS -- SUBROUTINES
SDOS11G.ASM
               2078:         ;LDX    #SYSSECTORDB      AS PROMISED
F7C3 CECF12    2079:         LDX     #SYSSECTORDB
F7C6 39        2080:         RTS




ASM/6800 1.4A0: F7C6 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 403; Form 1     DISK FILE DRIVERS -- SUBROUTINES
SDOS11G.ASM
               2082: *
               2083: *       GENHLSNPLUSHRSN -- ADD FCB:HLSN TO IOCB:HRSN
               2084: *               AND COPY SUM TO IOCB:CURLSN
               2085: *               RETURNS (X) = IOCBPOINTER
               2086: *
  F7C7         2087: GENHLSNPLUSHRSN EQU     *
               2088:         ;LDX    FCBPOINTER        GET LSN OF 1ST SECTOR...
F7C7 FECEA6    2089:         LDX     FCBPOINTER
F7CA A607      2090:         LDAA      FCB:HLSN,X        OF HEADER CLUSTER...
F7CC 36        2091:         PSHA             TO (TOS),(A,B)
               2092:         ;LDD    FCB:HLSN+1,X
F7CD E609      2093:         LDAB      (FCB:HLSN+1)+1,X
F7CF A608      2094:         LDAA      FCB:HLSN+1,X
               2095:         ;LDX    IOCBPOINTER       ADD HRSN...
F7D1 FECE09    2096:         LDX     IOCBPOINTER
F7D4 EB21      2097:         ADDB      IOCB:HRSN,X
F7D6 8900      2098:         ADCA       #0      PROPOGATE CARRY
               2099:         ;STD    IOCB:CURLSN+1,X    AND COPY TO IOCB:CURLSN
F7D8 E704      2100:         STAB      (IOCB:CURLSN+1)+1,X
F7DA A703      2101:         STAA      IOCB:CURLSN+1,X
F7DC 32        2102:         PULA
F7DD 8900      2103:         ADCA       #0
F7DF A702      2104:         STAA      IOCB:CURLSN,X
               2105:         ;CLR     IOCB:LOCATEDF,X     FORCE "LOCATECURBYTE" AGAIN LATER
F7E1 6F11      2106:         CLR      IOCB:LOCATEDF,X
F7E3 39        2107:         RTS




ASM/6800 1.4A0: F7E3 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 404; Form 1     DISK FILE DRIVERS -- DISK I/O
SDOS11G.ASM
               2109: *       READBEHIND -- INITIATES PRE-FETCH OF PREVIOUS LSN IN FILE
               2110: *               (X) POINTS TO IOCB
               2111: *               INITIATES READ FOR IOCB:CURLSN-1
               2112: *               IF IOCB:CURLSN IS OUTSIDE OF IOCB:CURLCN,
               2113: *               DOES NOTHING AT ALL
               2114: *               DCBPOINTER SELECTS PROPER DISK INFO TABLE
               2115: 
  F7E4         2116: READBEHIND        EQU     *
               2117:         ;LDX    IOCBPOINTER
F7E4 FECE09    2118:         LDX     IOCBPOINTER
F7E7 A61A      2119:         LDAA      IOCB:DRSN,X       AT 1ST SECTOR OF CLUSTER?
F7E9 2714      2120:         BEQ      READBEHINDOKRTS   B/ YES, NO READ-BEHIND TO DO!
F7EB 8D6C      2121:         BSR      DECIOCB:CURLSN      BACK UP LSN TO PREVIOUS LSN
               2122:         ;JSR    READSECTOR        GO INITIATE THE READ
F7ED BDF8F5    2123:         JSR     READSECTOR
F7F0 250F      2124:         BCS       READBEHINDERRED   B/ I/O ERROR
               2125: *       BSR      INCIOCB:CURLSN      PUT IOCB:LSN BACK LIKE IT WAS
               2126: *
               2127: *       INCIOCB:CURLSN -- INCREMENTS IOCB:CURLSN
               2128: *               NO IDIOT CHECKS
               2129: *
               2130: *
  F7F2         2131: INCIOCB:CURLSN      EQU     *
               2132:         ;LDX    IOCBPOINTER
F7F2 FECE09    2133:         LDX     IOCBPOINTER
               2134:         ;INC     IOCB:CURLSN+2,X    BUMP LSB
F7F5 6C04      2135:         INC      IOCB:CURLSN+2,X
F7F7 2606      2136:         BNE      INCIOCB:CURLSNX
               2137:         ;INC     IOCB:CURLSN+1,X    PROPOGATE CARRY
F7F9 6C03      2138:         INC      IOCB:CURLSN+1,X
F7FB 2602      2139:         BNE      INCIOCB:CURLSNX
               2140:         ;INC     IOCB:CURLSN,X      AND AGAIN
F7FD 6C02      2141:         INC      IOCB:CURLSN,X
  F7FF         2142: READBEHINDOKRTS   EQU     *
  F7FF         2143: INCIOCB:CURLSNX     EQU     *
F7FF 0C39      2144:         OKRTS
               2145: 
  F801         2146: READBEHINDERRED   EQU     *
F801 8DEF      2147:         BSR      INCIOCB:CURLSN      RESTORE CURLSN TO ORIGINAL VALUE
               2148:         ;JMP    ERRORED




ASM/6800 1.4A0: F803 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 405; Form 1     DISK FILE DRIVERS -- DISK I/O
SDOS11G.ASM
F803 7ED20A    2149:         JMP     ERRORED




ASM/6800 1.4A0: F803 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 406; Form 1     DISK FILE DRIVERS -- DISK I/O
SDOS11G.ASM
               2151: *
               2152: *       READAHEAD -- INITIATES PRE-FETCH FOR NEXT LSN OF FILE
               2153: *               (INITIATES WRITE OF LAST SECTOR BUFFER ON LRU QUEUE IF NEEDED [WRITE-A
               2154: *               INITIATES READ FOR IOCB:CURLSN+1 UNLESS THAT IS OUTSIDE OF IOCB:CURLSN
               2155: *               OTHERWISE INITIATES READ FOR APPROPRIATE HEADER CLUSTER SECTOR
               2156: *               ASSUMES A LOCATECURBYTE HAS RECENTLY SET UP THE IOCB
               2157: *
  F806         2158: READAHEAD  EQU     *
               2159: *       IF LAST SECTOR IN LRU QUEUE IS NOT BUSY,...
               2160: *       AND DISK IT COMES FROM IS NOT BUSY,...
               2161: *       AND LAST SECTOR IN LRU QUEUE IS MODIFIED,...
               2162: *       INITIATE A WRITE AND RESET THE MODIFIED FLAG; DON'T ISSUE A READ!!
               2163:         ;LDX    LASTSECTORREADQ+RDSI:BLINK  GET POINTER TO LAST SECTOR RDSI
F806 FECEF8    2164:         LDX     LASTSECTORREADQ+RDSI:BLINK
F809 A60C      2165:         LDAA      RDSI:STATE,X     IS SECTOR IN I/O STATE ?
F80B AA0B      2166:         ORAA      RDSI:MODIFIED,X OR IS IT MODIFIED ?
F80D 271E      2167:         BEQ      READAHEAD0 B/ NEITHER, GO ISSUE A READ!
F80F A60C      2168:         LDAA      RDSI:STATE,X     IS THIS SECTOR BUSY?
F811 26EC      2169:         BNE      READBEHINDOKRTS   B/ SECTOR IS IN I/O STATE, DON'T USE IT!
               2170: *       THIS IS WRITEAHEAD --> RDSI:MODIFIED IS SET!
               2171:         ;LDX    RDSI:DISKINFO,X GET DISK DCB ADDRESS (ASSERT: RDSK:DISKINFO <>0)
F813 EE00      2172:         LDX     RDSI:DISKINFO,X
               2173:         ;LDX    DSKINFO:SECTORDB,X        IS DISK FOR LAST SECTOR BUSY ?
F815 EE2B      2174:         LDX     DSKINFO:SECTORDB,X
F817 26E6      2175:         BNE      READBEHINDOKRTS   B/ YES, DO NADA
               2176:         ;LDX    LASTSECTORREADQ+RDSI:BLINK  GET POINTER TO LAST SECTOR RDSI AGAIN
F819 FECEF8    2177:         LDX     LASTSECTORREADQ+RDSI:BLINK
F81C FFCEA4    2178:         STX     RDSIPOINTER     IN CASE WE GET A WRITE ERROR
F81F 8602      2179:         LDAA      #RDSISTATE:WRITING       MARK SECTOR AS IN I/O STATE
F821 A70C      2180:         STAA      RDSI:STATE,X
               2181:         ;CLR     RDSI:MODIFIED,X REMOVE THE MODIFIED FLAG
F823 6F0B      2182:         CLR      RDSI:MODIFIED,X
               2183:         ;JSR    DISKWRITE       ISSUE THE WRITE REQUEST
F825 BDFB68    2184:         JSR     DISKWRITE
F828 24D5      2185:         BCC        READBEHINDOKRTS   B/ NO ERRORS
               2186:         ;JMP    WAITSECTORERRED   GOT WRITE ERROR, GO CLEAN UP THE MESS!
F82A 7EFABA    2187:         JMP     WAITSECTORERRED
               2188: 
  F82D         2189: READAHEAD0 ; TRY TO DO READ-AHEAD
F82D B6CF09    2190:         LDAA      NRDSIS  SHOULD WE DO READ-AHEAD ?




ASM/6800 1.4A0: F82D SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 407; Form 1     DISK FILE DRIVERS -- DISK I/O
SDOS11G.ASM
               2191:         ;CMPA     #READAHEADRDSIMIN  (ARE THERE ENOUGH BUFFERS ?)
F830 8103      2192:         CMPA      #READAHEADRDSIMIN
F832 2DCB      2193:         BLT      READBEHINDOKRTS   B/ NOPE, DON'T DO READ-AHEAD
               2194:         ;LDX    DCBPOINTER        IS THIS DISK DRIVE ALREADY BUSY ?
F834 DE06      2195:         LDX     DCBPOINTER
               2196:         ;LDX    DSKINFO:SECTORDB,X        (IF SO, DON'T MAKE US WAIT BY CAUSING MORE D
F836 EE2B      2197:         LDX     DSKINFO:SECTORDB,X
F838 26C5      2198:         BNE      READBEHINDOKRTS   B/ YES, GIVE UP NOW!
               2199:         ;LDX    IOCBPOINTER
F83A FECE09    2200:         LDX     IOCBPOINTER
F83D A60B      2201:         LDAA      IOCB:EOFFLAG,X     AT EOF ?
F83F 26BE      2202:         BNE      READBEHINDOKRTS   B/ YES, NO POINT IN FETCHING FROM DISK!
F841 A61A      2203:         LDAA      IOCB:DRSN,X       GET RELATIVE SECTOR NUMBER OF :CURLSN
               2204:         ;LDX    IOCB:DCB,X  =LAST SECTOR IN CLUSTER?
F843 EE00      2205:         LDX     IOCB:DCB,X
F845 A011      2206:         SUBA      DSKINFO:NSPC,X   (IOCN:RSN-DSKINFO:NSPC=-1)
F847 4C        2207:         INCA
F848 272B      2208:         BEQ      READAHEADH B/ YES, SO READ AHEAD ON HEADER SECTOR INSTEAD
               2209:         ;LDX    IOCBPOINTER       IS THIS CLUSTER ALLOCATED ?
F84A FECE09    2210:         LDX     IOCBPOINTER
               2211:         ;LDX    IOCB:CURLCN,X       ...?
F84D EE18      2212:         LDX     IOCB:CURLCN,X
F84F 08        2213:         INX                     ...?
F850 27AD      2214:         BEQ      READBEHINDOKRTS   B/ NO, DON'T DO A READ-AHEAD
F852 8D9E      2215:         BSR      INCIOCB:CURLSN      NO, COMPUTE NEXT LSN IN CLUSTER
               2216:         ;JSR    READSECTOR        INITIATE PRE-FETCH
F854 BDF8F5    2217:         JSR     READSECTOR
F857 2517      2218:         BCS       READAHEADCERRED     IF AN ERROR OCCURRED, REPORT IT!
               2219: *       JSR     DECIOCB:CURLSN
               2220: *       OKRTS
               2221: *
               2222: *       DECIOCB:CURLSN -- DECREMENTS IOCB:CURLSN
               2223: *               NO IDIOT CHECKS
               2224: *
  F859         2225: DECIOCB:CURLSN      EQU     *
               2226:         ;LDX    IOCBPOINTER
F859 FECE09    2227:         LDX     IOCBPOINTER
F85C A604      2228:         LDAA      IOCB:CURLSN+2,X    CHECK LEAST SIG BYTE
F85E 260C      2229:         BNE      DECIOCB:CURLSN1     B/ NOT ZERO, NO BORROW
               2230:         ;LDD    IOCB:CURLSN,X      RATS, MUST PROPOGATE BORROW




ASM/6800 1.4A0: F860 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 408; Form 1     DISK FILE DRIVERS -- DISK I/O
SDOS11G.ASM
F860 E603      2231:         LDAB      (IOCB:CURLSN)+1,X
F862 A602      2232:         LDAA      IOCB:CURLSN,X
               2233:         ;SUBD    #1      SUBTRACT 1 FROM UPPER 16 BITS OF IOCB:CURLSN
F864 C001      2234:         SUBB      #(1)&$FF
F866 8200      2235:         SBCA       #(1)/256
               2236:         ;STD    IOCB:CURLSN,X
F868 E703      2237:         STAB      (IOCB:CURLSN)+1,X
F86A A702      2238:         STAA      IOCB:CURLSN,X
  F86C         2239: DECIOCB:CURLSN1     EQU     *
               2240:         ;DEC     IOCB:CURLSN+2,X    DECREMENT LSB OF LSN
F86C 6A04      2241:         DEC      IOCB:CURLSN+2,X
F86E 0C39      2242:         OKRTS
               2243: 
  F870         2244: READAHEADCERRED     EQU     *
F870 8DE7      2245:         BSR      DECIOCB:CURLSN      PUT CURLSN BACK LIKE IT WAS
               2246:         ;JMP    ERRORED
F872 7ED20A    2247:         JMP     ERRORED




ASM/6800 1.4A0: F872 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 409; Form 1     DISK FILE DRIVERS -- DISK I/O
SDOS11G.ASM
  F875         2249: READAHEADH ; DO PREFETCH ON HEADER CLUSTER SECTOR
               2250:         ;LDX    IOCBPOINTER       WE CAN'T GET HERE UNLESS IOCB:RDCN IS VALID
F875 FECE09    2251:         LDX     IOCBPOINTER
               2252:         ;LDD    IOCB:RDCN,X        COMPUTE (IOCB:RDCN+1)*2
F878 E61C      2253:         LDAB      (IOCB:RDCN)+1,X
F87A A61B      2254:         LDAA      IOCB:RDCN,X
               2255:         ;ADDD    #1
F87C CB01      2256:         ADDB      #(1)&$FF
F87E 8900      2257:         ADCA       #(1)/256
               2258:         ;ASLD            ...*2
F880 58        2259:         ASLB
F881 49        2260:         ROLA
               2261:         ;LDX    IOCB:DCB,X  = DSKINFO:NBPC ?
F882 EE00      2262:         LDX     IOCB:DCB,X
               2263:         ;CMPD    DSKINFO:NBPC,X    ... ?
F884 A120      2264:         CMPA      DSKINFO:NBPC,X
F886 2602      2265:         BNE      MACRO:002A
F888 E121      2266:         CMPB      (DSKINFO:NBPC)+1,X
  F88A         2267: MACRO:002A
F88A 2732      2268:         BEQ      READAHEADOKRTS     B/ YES, WOULD RUN OFF END OF HEADER CLUSTER
F88C A419      2269:         ANDA      DSKINFO:NBPSM1,X TAKE MOD NBPS
F88E E41A      2270:         ANDB      DSKINFO:NBPSM1+1,X       BY MASKING AGAINST (2^N)-1
F890 2603      2271:         BNE      READAHEAD1 B/ HAVEN'T RUN OFF END ...
F892 4D        2272:         TSTA             OF CURRENT HEADER SECTOR
F893 272B      2273:         BEQ      READAHEADNX        B/ DID RUN OFF END OF HEADER SECTOR
  F895         2274: READAHEAD1 EQU     *
               2275:         ;LDX    IOCBPOINTER
F895 FECE09    2276:         LDX     IOCBPOINTER
               2277:         ;LDX    IOCB:HRDSI,X      DESIRED HEADER SECTOR IN MEMORY?
F898 EE1F      2278:         LDX     IOCB:HRDSI,X
F89A 2734      2279:         BEQ      READAHEADHA B/ NO, MUST READ IN
               2280:         ;ADDD    RDSI:SECTORBASE,X  YES, FETCH DATA CLUSTER NUMBER
F89C EB06      2281:         ADDB      (RDSI:SECTORBASE)+1,X
F89E A905      2282:         ADCA       RDSI:SECTORBASE,X
               2283: *       COMPUTE POINTER TO DATA CLUSTER NUMBER
               2284:         ;PSHD           COPY POINTER FROM (A,B) TO (X)
F8A0 37        2285:         PSHB
F8A1 36        2286:         PSHA
               2287:         ;JSR    REQUERDSI       MOVE HEADER SECTOR TO TOP OF LRU QUEUE...
F8A2 BDFA5D    2288:         JSR     REQUERDSI




ASM/6800 1.4A0: F8A2 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 410; Form 1     DISK FILE DRIVERS -- DISK I/O
SDOS11G.ASM
               2289: *       BECAUSE IT WORKS WELL
               2290: *       IN SPITE OF THE FACT THAT WE DON'T KNOW IF USER WANTS HEADER SECTOR AGAIN!
               2291:         ;PULX
F8A5 30        2292:         TSX
F8A6 EE00      2293:         LDX     0,X
F8A8 31        2294:         INS
F8A9 31        2295:         INS
               2296:         ;LDD    HEADER:LCN,X      GET LCN OF NEXT DATA CLUSTER
F8AA E601      2297:         LDAB      (HEADER:LCN)+1,X
F8AC A600      2298:         LDAA      HEADER:LCN,X
               2299:         ;LDX    HEADER:LCN,X      UNALLOCATED DATA CLUSTER?
F8AE EE00      2300:         LDX     HEADER:LCN,X
F8B0 08        2301:         INX             (I.E., IS LCN = DUMMYLCN ?)
F8B1 270B      2302:         BEQ      READAHEADOKRTS     B/ YES, NO DATA TO READ AHEAD ON
               2303:         ;JSR    CONVERTLCNTO1ST   FIND 1ST LSN IN NEXT DATA CLUSTER
F8B3 BDF792    2304:         JSR     CONVERTLCNTO1ST
F8B6 2506      2305:         BCS       READAHEADOKRTS     IF OFF END OF WORLD, IGNORE IT!
  F8B8         2306: READAHEADS EQU     *
               2307:         ;LDX    #SYSSECTORDB
F8B8 CECF12    2308:         LDX     #SYSSECTORDB
               2309:         ;JSR    READSECTOR        READ IN THE DATA SECTOR
F8BB BDF8F5    2310:         JSR     READSECTOR
  F8BE         2311: READAHEADOKRTS     EQU     *
F8BE 0C39      2312:         OKRTS
               2313: 
  F8C0         2314: READAHEADNX        ; MUST READ NEXT HEADER SECTOR
               2315:         ;LDX    IOCBPOINTER
F8C0 FECE09    2316:         LDX     IOCBPOINTER
F8C3 A621      2317:         LDAA      IOCB:HRSN,X
F8C5 4C        2318:         INCA
F8C6 27F6      2319:         BEQ      READAHEADOKRTS     B/ HRSN+1=256, INVALID
               2320:         ;LDX    IOCB:FCB,X
F8C8 EE07      2321:         LDX     IOCB:FCB,X
               2322:         ;CMPA     FCB:HCSIC,X HRSN+1>=HCSIC?
F8CA A10E      2323:         CMPA      FCB:HCSIC,X
F8CC 2307      2324:         BLS      READAHEADH1        NO, GO ISSUE THE READ
F8CE 20EE      2325:         BRA       READAHEADOKRTS     WOULD FETCH UNINITZD HEADER SECTOR
               2326: 
  F8D0         2327: READAHEADHA ; MUST RE-READ CURRENT HEADER SECTOR
               2328:         ;LDX    IOCBPOINTER




ASM/6800 1.4A0: F8D0 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 411; Form 1     DISK FILE DRIVERS -- DISK I/O
SDOS11G.ASM
F8D0 FECE09    2329:         LDX     IOCBPOINTER
F8D3 A621      2330:         LDAA      IOCB:HRSN,X
  F8D5         2331: READAHEADH1        ; READ HEADER SECTOR; RSN IS IN (A)
               2332:         ;LDX    FCBPOINTER        COMPUTE FCB:LSN+(A)
F8D5 FECEA6    2333:         LDX     FCBPOINTER
F8D8 AB09      2334:         ADDA      FCB:HLSN+2,X
F8DA B7CF16    2335:         STAA      SYSSECTORDB+SECTORDB:LSN+2
F8DD A608      2336:         LDAA      FCB:HLSN+1,X
F8DF 8900      2337:         ADCA       #0
F8E1 B7CF15    2338:         STAA      SYSSECTORDB+SECTORDB:LSN+1
F8E4 A607      2339:         LDAA      FCB:HLSN,X
F8E6 8900      2340:         ADCA       #0
F8E8 B7CF14    2341:         STAA      SYSSECTORDB+SECTORDB:LSN    AND COPY INTO SYSSECTOR
               2342:         ;LDX    DCBPOINTER        SET UP TO READ FROM CURRENT DISK
F8EB DE06      2343:         LDX     DCBPOINTER
F8ED FFCF12    2344:         STX     SYSSECTORDB+SECTORDB:DISKINFO
F8F0 20C6      2345:         BRA       READAHEADS GO INITIATE THE SECTOR READ
               2346: *       DON'T SAVE RDSIPOINTER RETURNED IN IOCB:HRDSI...
               2347: *       BECUZ IT MIGHT BE FOR "NEXT" HEADER SECTOR!




ASM/6800 1.4A0: F8F0 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 412; Form 1     DISK FILE DRIVERS -- DISK I/O
SDOS11G.ASM
               2349: *
               2350: *       INVENTSECTOR -- ALLOCATES A SECTOR BUFFER WITHOUT READING SECTOR
               2351: *               LIKE READSECTOR, BUT DOES NOT DO READ!
               2352: *               HOWEVER, IT DOES DO A WAITRDSI TO MAKE SURE THE SECTOR HAS ARRIVED
               2353: *               NOTE: CAN BE CALLED TO INVENT SECTOR FOR IMAGINARY DISK (DISKINFO=0)
               2354: *
  F8F2         2355: INVENTSECTOR     EQU     *
F8F2 4F        2356:         CLRA              FLAG "DON'T DO THE READ!"
F8F3 2002      2357:         BRA       READSECTOR0
               2358: 
               2359: *
               2360: *       READSECTOR -- INITIATE READ OF DISK SECTOR INTO MEMORY
               2361: *               (X) POINTS TO SECTOR DESCRIPTOR (SECTORDB)
               2362: *               1)  SEARCH RDSIS TO SEE IF ALREADY IN CORE
               2363: *               2)  IF NOT, FIND OLDEST BLOCK; IF MODIFIED, WRITE
               2364: *               3)  INIT SECTOR FETCH
               2365: *               4)  ZAP ALL IOCBS THAT REFER TO OLDEST BLOCK
               2366: *       RETURNS (A,B), (X), RDSIPOINTER POINTING TO RDSI CONTAINING DISK SECTOR
               2367: *       NOTE: CALLER MUST LATER DO A "WAITRDSI" TO ENSURE ARRIVAL OF SECTOR!
               2368: *       NOTE: CANNOT BE CALLED TO READ A SECTOR FROM IMAGINARY DISK (DISKINFO=0)
               2369: *       ERRET INDICATES SOME KIND OF DISK I/O PROBLEM
               2370: *
  F8F5         2371: READSECTOR        EQU     *
F8F5 8601      2372:         LDAA      #1      FLAG "DOING A READSECTOR"
  F8F7         2373: READSECTOR0       EQU     *
F8F7 B7CF03    2374:         STAA      READFLAG
F8FA FFCF04    2375:         STX     READSECTORDBP      SAVE POINTER TO DESCRIPTOR BLOCK
               2376:         ;LDD    SECTORDB:LSN+1,X  GET LEAST SIG 16 BITS OF LSN
F8FD E604      2377:         LDAB      (SECTORDB:LSN+1)+1,X
F8FF A603      2378:         LDAA      SECTORDB:LSN+1,X
               2379:         ;LDX    LASTSECTORREADQ+RDSI:FLINK SEARCH RDSI CHAIN
F901 FECEF6    2380:         LDX     LASTSECTORREADQ+RDSI:FLINK
  F904         2381: READSECTORL       EQU     *
               2382:         ;CMPD    RDSI:LSN+1,X    COMPARE LSB'S FIRST...
F904 A103      2383:         CMPA      RDSI:LSN+1,X
F906 2602      2384:         BNE      MACRO:002B
F908 E104      2385:         CMPB      (RDSI:LSN+1)+1,X
  F90A         2386: MACRO:002B
F90A 2628      2387:         BNE      READSECTORNM      SINCE THEY HAVE HIGHEST PROBABILITY OF NOT MATCHING
F90C FFCEA4    2388:         STX     RDSIPOINTER     SAVE X A MOMENT...




ASM/6800 1.4A0: F90C SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 413; Form 1     DISK FILE DRIVERS -- DISK I/O
SDOS11G.ASM
               2389:         ;LDD    RDSI:DISKINFO,X DO DISKINFO POINTERS MATCH ?
F90F E601      2390:         LDAB      (RDSI:DISKINFO)+1,X
F911 A600      2391:         LDAA      RDSI:DISKINFO,X
               2392:         ;LDX    READSECTORDBP      ...?
F913 FECF04    2393:         LDX     READSECTORDBP
               2394:         ;CMPD    SECTORDB:DISKINFO,X       ...?
F916 A100      2395:         CMPA      SECTORDB:DISKINFO,X
F918 2602      2396:         BNE      MACRO:002C
F91A E101      2397:         CMPB      (SECTORDB:DISKINFO)+1,X
  F91C         2398: MACRO:002C
F91C 260F      2399:         BNE      READSECTORNMA      B/ NO
F91E E602      2400:         LDAB      SECTORDB:LSN,X    YES, GRAB MSB OF LSN OF DESIRED SECTOR
               2401:         ;LDX    RDSIPOINTER     DOES IT MATCH DESIRED LSN ?
F920 FECEA4    2402:         LDX     RDSIPOINTER
               2403:         ;CMPB     RDSI:LSN,X      ... ?
F923 E102      2404:         CMPB      RDSI:LSN,X
F925 2603      2405:         BNE      READSECTORL1      B/ DIDN'T MATCH, AND AFTER ALL THAT EFFORT!
               2406:         ;JMP    READSECTORF       WE FOUND IT !!
F927 7EF9F2    2407:         JMP     READSECTORF
               2408: 
  F92A         2409: READSECTORL1      EQU     *
               2410:         ;LDX    READSECTORDBP      GET POINTER TO SECTOR DESCRIPTOR
F92A FECF04    2411:         LDX     READSECTORDBP
  F92D         2412: READSECTORNMA      ; NO MATCH, RELOAD 16 LSBS OF DESIRED LSN
               2413:         ;LDD    SECTORDB:LSN+1,X  GET 16 LSBS OF DESIRED LSN AGAIN
F92D E604      2414:         LDAB      (SECTORDB:LSN+1)+1,X
F92F A603      2415:         LDAA      SECTORDB:LSN+1,X
               2416:         ;LDX    RDSIPOINTER     GRAB ADDRESS OF RDSI THAT DIDN'T MATCH
F931 FECEA4    2417:         LDX     RDSIPOINTER
  F934         2418: READSECTORNM      ; THIS RDSI ISN'T IT!
               2419:         ;LDX    RDSI:FLINK,X    FIND NEXT RDSI
F934 EE07      2420:         LDX     RDSI:FLINK,X
F936 8CCEEF    2421:         CPX      #LASTSECTORREADQ   END OF RDSI LIST?
F939 26C9      2422:         BNE      READSECTORL       B/ NO, CHECK NEXT RDSI
               2423: *       MUST DO DISK I/O
               2424: *       0) VERIFY THAT LSN IS LEGAL FOR THIS DRIVE
               2425: *       1) WAIT FOR DISK SPECIFIED BY TARGET READ BUFFER TO BE DONE
               2426: *       2) WRITE TARGET READ BUFFER CONTENTS BACK TO DISK IF MODIFIED
               2427: *       3) WAIT FOR DISK OF DESIRED SECTOR TO BE DONE
               2428: *       4) ISSUE READ TO GET DISK SECTOR




ASM/6800 1.4A0: F939 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 414; Form 1     DISK FILE DRIVERS -- DISK I/O
SDOS11G.ASM
  F93B         2429: READSECTORV       ; VERIFY LSN IS LEGAL FOR THIS DRIVE
               2430:         ;LDX    READSECTORDBP      GET THE SECTOR NUMBER...
F93B FECF04    2431:         LDX     READSECTORDBP
F93E A602      2432:         LDAA      SECTORDB:LSN,X
F940 36        2433:         PSHA
               2434:         ;LDD    SECTORDB:LSN+1,X
F941 E604      2435:         LDAB      (SECTORDB:LSN+1)+1,X
F943 A603      2436:         LDAA      SECTORDB:LSN+1,X
               2437:         ;LDX    RDSI:DISKINFO,X SUBTRACT NLSN FROM IT..
F945 EE00      2438:         LDX     RDSI:DISKINFO,X
F947 270E      2439:         BEQ      READSECTORVD      B/ READ FROM DUMMY DISK, DON'T DO ILLEGAL LSN CHECK
               2440:         ;SUBD    DSKINFO:NLSN+1,X
F949 E01D      2441:         SUBB      (DSKINFO:NLSN+1)+1,X
F94B A21C      2442:         SBCA       DSKINFO:NLSN+1,X
F94D 32        2443:         PULA
F94E A21B      2444:         SBCA       DSKINFO:NLSN,X
F950 2506      2445:         BCS       READSECTORVD1     B/ LSN IS LEGAL FOR TARGET DISK
  F952         2446: ERRILLLSN
               2447:         ;JSR    ERRET
F952 BDD1F7    2448:         JSR     ERRET
F955 040E      2449:         FDB      ERR:ILLLSN




ASM/6800 1.4A0: F955 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 415; Form 1     DISK FILE DRIVERS -- DISK I/O
SDOS11G.ASM
  F957         2451: READSECTORVD      ; READ FROM DUMMY (VIRTUAL) DISK
               2452:         ;LEAS    1,S     POP MSB OF LSN SINCE WE DON'T NEED TO DO ILLEGAL LSN CHECK
  0000         2453:         IF      1<0
 *S*           2454:         RPT     -1
 *S*           2455:         DES
               2456:         ELSE
  0001         2457:         RPT     1
F957 31        2458:         INS
               2459:         FIN
  F958         2460: READSECTORVD1
               2461:         ;LDX    #LASTSECTORREADQ   FIND AVAILABLE SECTOR BUFFER
F958 CECEEF    2462:         LDX     #LASTSECTORREADQ
  F95B         2463: READSECTOR1       EQU     *
               2464:         ;LDX    RDSI:BLINK,X     FIND DCB ADDRESS OF DISK OF LAST SECTOR BUFFER IN QUE
F95B EE09      2465:         LDX     RDSI:BLINK,X
F95D A60C      2466:         LDAA      RDSI:STATE,X     WE ONLY NEED TO WAIT IF TARGET BUFFER IS BUSY...
F95F AA0B      2467:         ORAA      RDSI:MODIFIED,X OR IT NEEDS TO BE WRITTEN TO THE DISK
F961 273D      2468:         BEQ      READSECTOR3       B/ DON'T NEED TO WAIT FOR TARGET BUFFER
               2469:         ;LDX    RDSI:DISKINFO,X GOT IT! (ASSERT: RDSI:DSKINFO <> 0!)
F963 EE00      2470:         LDX     RDSI:DISKINFO,X
               2471:         ;LDX    DSKINFO:SECTORDB,X        IS TARGET BUFFER'S DISK BUSY ?
F965 EE2B      2472:         LDX     DSKINFO:SECTORDB,X
F967 2706      2473:         BEQ      READSECTOR2       B/ NO, SEE IF TARGET SECTOR BUFFER IS MODIFIED
F969 FFCEA4    2474:         STX     RDSIPOINTER     YES, WAIT FOR IT
               2475:         ;JSR    WAITRDSI ...
F96C BDFAA3    2476:         JSR     WAITRDSI
  F96F         2477: READSECTOR2       ; CHECK TO SEE IF TARGET SECTOR BUFFER IS MODIFIED
               2478:         ;LDX    LASTSECTORREADQ+RDSI:BLINK  GET ADDRESS OF TARGET RDSI
F96F FECEF8    2479:         LDX     LASTSECTORREADQ+RDSI:BLINK
  F972         2480: READSECTOR2L      ; WRITE FROM POOL, OLDEST BUFFER TO NEWEST BUFFER,
               2481: *       UNTIL DIFFERENT DISK ENCOUNTERED, BUFFER NOT MODIFIED,
               2482: *       OR RDSI:CYLINDER DOESN'T MATCH
F972 A60B      2483:         LDAA      RDSI:MODIFIED,X IS IT MODIFIED ?
F974 272A      2484:         BEQ      READSECTOR3       B/ NO, GO WAIT FOR DESIRED DISK TO BECOME FREE
F976 FFCEA4    2485:         STX     RDSIPOINTER     YES, ISSUE THE WRITE
F979 8602      2486:         LDAA      #RDSISTATE:WRITING       WHICH MOVES SECTOR BACK TO DISK
F97B A70C      2487:         STAA      RDSI:STATE,X     AND FREES UP THIS SECTOR BUFFER
               2488:         ;CLR     RDSI:MODIFIED,X MARK SECTOR AS UNCHANGED (TAKES EFFECT AFTER WRITE)
F97D 6F0B      2489:         CLR      RDSI:MODIFIED,X
               2490:         ;JSR    DISKWRITE       ISSUE THE ACTUAL WRITE COMMAND




ASM/6800 1.4A0: F97F SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 416; Form 1     DISK FILE DRIVERS -- DISK I/O
SDOS11G.ASM
F97F BDFB68    2491:         JSR     DISKWRITE
F982 2566      2492:         BCS       WAITSECTORERRJ    B/ DISK I/O ERROR OCCURRED
               2493:         ;LDX    RDSIPOINTER     WAIT FOR WRITE TO FINISH
F984 FECEA4    2494:         LDX     RDSIPOINTER
               2495:         ;JSR    WAITSECTOR1       OLD SECTOR CONTENTS ARE NOW GONE!!
F987 BDFAAE    2496:         JSR     WAITSECTOR1
               2497:         ;LDX    RDSIPOINTER     SEE IF NEXT OLDEST SECTOR IN POOL NEEDS WRITING
F98A FECEA4    2498:         LDX     RDSIPOINTER
               2499:         ;LDD    RDSI:CYLINDER,X  ONLY WRITE ANOTHER SECTOR IF IN SAME PHYSICAL CYLINDE
F98D E613      2500:         LDAB      (RDSI:CYLINDER)+1,X
F98F A612      2501:         LDAA      RDSI:CYLINDER,X
               2502:         ;LDX    RDSI:BLINK,X     FIND NEXT OLDEST SECTOR
F991 EE09      2503:         LDX     RDSI:BLINK,X
F993 8CCEEF    2504:         CPX      #LASTSECTORREADQ   EXHAUSTED POOL ?
F996 2708      2505:         BEQ      READSECTOR3       B/ ALL MOD'D SECTORS IN POOL WRITTEN TO DISK
               2506:         ;CMPD    RDSI:CYLINDER,X  NO, IS NEXT OLDEST SECTOR IN SAME CYLINDER ?
F998 A112      2507:         CMPA      RDSI:CYLINDER,X
F99A 2602      2508:         BNE      MACRO:002D
F99C E113      2509:         CMPB      (RDSI:CYLINDER)+1,X
  F99E         2510: MACRO:002D
F99E 27D2      2511:         BEQ      READSECTOR2L      B/ YES, GO SEE IF MODIFIED AND THEN WRITE IT!
               2512: **** THIS LOGIC SHOULD ISSUE JUST WRITES, FOLLOWED BY JUST VERIFIES!
  F9A0         2513: READSECTOR3       ; WAIT FOR DESIRED DISK TO BE DONE
               2514:         ;LDX    READSECTORDBP      GET DCB ADDRESS OF DESIRED DISK
F9A0 FECF04    2515:         LDX     READSECTORDBP
               2516:         ;LDX    SECTORDB:DISKINFO,X       ...
F9A3 EE00      2517:         LDX     SECTORDB:DISKINFO,X
F9A5 270A      2518:         BEQ      READSECTOR4       B/ WISH TO READ FROM DUMMY DISK, IT'S DONE...
               2519:         ;LDX    DSKINFO:SECTORDB,X        GET POINTER TO SECTOR BEING PROCESSED
F9A7 EE2B      2520:         LDX     DSKINFO:SECTORDB,X
F9A9 2706      2521:         BEQ      READSECTOR4       B/ DESIRED DISK IS IDLE
F9AB FFCEA4    2522:         STX     RDSIPOINTER     WAIT FOR DESIRED DISK TO FINISH I/O
               2523:         ;JSR    WAITRDSI ...
F9AE BDFAA3    2524:         JSR     WAITRDSI
  F9B1         2525: READSECTOR4       ; NOW (AT LAST!) READ IN THE DESIRED SECTOR
               2526:         ;LDX    READSECTORDBP      GET POINTER TO DESIRED SECTOR ADDRESS
F9B1 FECF04    2527:         LDX     READSECTORDBP
               2528:         ;LDD    SECTORDB:DISKINFO,X       COPY DISKINFO TO (TOS-1,TOS)
F9B4 E601      2529:         LDAB      (SECTORDB:DISKINFO)+1,X
F9B6 A600      2530:         LDAA      SECTORDB:DISKINFO,X




ASM/6800 1.4A0: F9B6 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 417; Form 1     DISK FILE DRIVERS -- DISK I/O
SDOS11G.ASM
               2531:         ;PSHD
F9B8 37        2532:         PSHB
F9B9 36        2533:         PSHA
F9BA A602      2534:         LDAA      SECTORDB:LSN,X    COPY DESIRED SECTOR # TO (TOS),(A,B)
F9BC 36        2535:         PSHA
               2536:         ;LDD    SECTORDB:LSN+1,X
F9BD E604      2537:         LDAB      (SECTORDB:LSN+1)+1,X
F9BF A603      2538:         LDAA      SECTORDB:LSN+1,X
               2539:         ;LDX    LASTSECTORREADQ+RDSI:BLINK  GET POINTER TO CHOSEN RDSI AGAIN
F9C1 FECEF8    2540:         LDX     LASTSECTORREADQ+RDSI:BLINK
F9C4 FFCEA4    2541:         STX     RDSIPOINTER     AND REMEMBER IT FOR EVERYBODY'S CONVENIENCE
               2542:         ;STD    RDSI:LSN+1,X    STORE SECTOR DESCRIPTION INTO RDSI
F9C7 E704      2543:         STAB      (RDSI:LSN+1)+1,X
F9C9 A703      2544:         STAA      RDSI:LSN+1,X
F9CB 32        2545:         PULA
F9CC A702      2546:         STAA      RDSI:LSN,X
               2547:         ;PULD
F9CE 32        2548:         PULA
F9CF 33        2549:         PULB
               2550:         ;STD    RDSI:DISKINFO,X
F9D0 E701      2551:         STAB      (RDSI:DISKINFO)+1,X
F9D2 A700      2552:         STAA      RDSI:DISKINFO,X
F9D4 86FF      2553:         LDAA      #$FF    MARK RDSI AS "REQUIRES LSN TO PHYSICAL" MAPPING
               2554:         ;STA     RDSI:TRACK,X      (DRIVER CHANGES RDSI:SECTOR, :TRACK, :CYLINDER BY D
F9D6 A710      2555:         STAA      RDSI:TRACK,X
               2556:         ;CLR     RDSI:CYLINDER,X  SET CYLINDER TO CONSTANT...
F9D8 6F12      2557:         CLR      RDSI:CYLINDER,X
               2558:         ;CLR     RDSI:CYLINDER+1,X        IN CASE DRIVER DOES NOT FILL IN CYLINDER NUM
F9DA 6F13      2559:         CLR      RDSI:CYLINDER+1,X
F9DC B6CF03    2560:         LDAA      READFLAG  INVENTING A SECTOR ? (RDSI:STATE = "IDLE" WHEN WE GET HERE
F9DF 270C      2561:         BEQ      READSECTORI       B/ YES, DON'T BOTHER READING IT IN
F9E1 8601      2562:         LDAA      #RDSISTATE:READING        MARK SECTOR AS BEING READ
F9E3 A70C      2563:         STAA      RDSI:STATE,X
               2564:         ;JSR    DISKREAD INITIATE SECTOR FETCH
F9E5 BDFB5C    2565:         JSR     DISKREAD
F9E8 2406      2566:         BCC        READSECTORR       B/ NO ERROR IN STARTING THE DISK I/O
  F9EA         2567: WAITSECTORERRJ    EQU     *
               2568:         ;JMP    WAITSECTORERRED
F9EA 7EFABA    2569:         JMP     WAITSECTORERRED
               2570: 




ASM/6800 1.4A0: F9EA SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 418; Form 1     DISK FILE DRIVERS -- DISK I/O
SDOS11G.ASM
  F9ED         2571: READSECTORI       ; INVENTING A SECTOR
               2572:         ;JSR    WAITRDSI IN THE RARE CASE THAT WE WISH TO INVENT...
F9ED BDFAA3    2573:         JSR     WAITRDSI
               2574: *                       A SECTOR THAT SOMEBODY DID A READ-AHEAD ON!
  F9F0         2575: READSECTORR       EQU     *
F9F0 8D10      2576:         BSR      REMOVERDSI      DELETE ALL OLD REFERENCES TO RDSI
  F9F2         2577: READSECTORF       ; WE FOUND IT !
               2578:         ;LDX    RDSIPOINTER     MAKE THIS SECTOR THE MOST RECENTLY READ
F9F2 FECEA4    2579:         LDX     RDSIPOINTER
F9F5 8D69      2580:         BSR      REQUERDSI1
               2581:         ;LDX    RDSIPOINTER     EXIT WITH POINTER IN (X)...
F9F7 FECEA4    2582:         LDX     RDSIPOINTER
               2583:         ;LDD    RDSIPOINTER     AND (A,B)
F9FA F6CEA5    2584:         LDAB      RDSIPOINTER+1
F9FD B6CEA4    2585:         LDAA      RDSIPOINTER
FA00 0C39      2586:         OKRTS




ASM/6800 1.4A0: FA00 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 419; Form 1     DISK FILE DRIVERS -- DISK I/O
SDOS11G.ASM
               2588: *       REMOVERDSI -- REMOVE RDSIPOINTER FROM ALL IOCBS...
               2589: *       THAT HAVE REFERENCES TO IT
               2590: *
  FA02         2591: REMOVERDSI      EQU     *
               2592:         ;LDX    CODE+SDOS:CONFIGURATION
FA02 FECE03    2593:         LDX     CODE+SDOS:CONFIGURATION
FA05 A606      2594:         LDAA      CNFG:NIOCHANNELS,X FIND OUT HOW MANY IOCBS TO SCAN
FA07 B7CF06    2595:         STAA      REMOVESECTORCNT
               2596:         ;LDX    CNFG:IOCBPOINTERS,X        SET UP TO SCAN IOCB POINTER TABLE
FA0A EE04      2597:         LDX     CNFG:IOCBPOINTERS,X
               2598:         ;LDD    RDSIPOINTER     GET TARGET RDSI ADDRESS TO (A,B)
FA0C F6CEA5    2599:         LDAB      RDSIPOINTER+1
FA0F B6CEA4    2600:         LDAA      RDSIPOINTER
  FA12         2601: REMOVERDSIL     EQU     *
FA12 FFCF07    2602:         STX     REMOVEIOCBPTR     SAVE IOCB POINTER LIST SCANNER
               2603:         ;LDX    ,X      GET REAL IOCB POINTER
FA15 EE00      2604:         LDX     0,X
FA17 8D18      2605:         BSR      READSECTORZAPIOCB    REMOVE RDSI FROM IOCB
               2606:         ;LDX    REMOVEIOCBPTR     GET LIST SCAN POINTER
FA19 FECF07    2607:         LDX     REMOVEIOCBPTR
               2608:         ;LEAX    2,X     BUMP TO NEXT IOCB POINTER
  0000         2609:         IF      2<0
 *S*           2610:         RPT     -2
 *S*           2611:         DEX
               2612:         ELSE
  0002         2613:         RPT     2
FA1C 08        2614:         INX
               2615:         FIN
               2616:         ;DEC     REMOVESECTORCNT   DOWN COUNT # IOCBS TO CHECK
FA1E 7ACF06    2617:         DEC      REMOVESECTORCNT
FA21 26EF      2618:         BNE      REMOVERDSIL     B/ MORE TO CHECK
               2619:         ;LDX    #SYSIOCB  CHECK SYSIOCB OUT, TOO!
FA23 CECF57    2620:         LDX     #SYSIOCB
FA26 8D09      2621:         BSR      READSECTORZAPIOCB    REMOVE RDSI FROM IT IF IN USE
               2622:         ;LDX    #LOGIOCB  REMOVE RDSI FROM LOG FILE IF IN USE
FA28 CECF35    2623:         LDX     #LOGIOCB
FA2B 8D04      2624:         BSR      READSECTORZAPIOCB
               2625:         ;LDX    RDSIPOINTER     FOR THE CONVENIENCE OF THE CALLER
FA2D FECEA4    2626:         LDX     RDSIPOINTER
FA30 39        2627:         RTS




ASM/6800 1.4A0: FA30 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 420; Form 1     DISK FILE DRIVERS -- DISK I/O
SDOS11G.ASM
               2629: *       READSECTORZAPIOCB -- REMOVE MATCHING RDSI POINTER REFERENCES
               2630: *       (A,B) ON ENTRY CONTAIN RDSI ADDRESS TO REMOVE FROM IOCB(X)
               2631: *
  FA31         2632: READSECTORZAPIOCB    EQU     *
FA31 DF00      2633:         STX     TEMPX   SAVE IOCB TO TEST
               2634:         ;LDX    IOCB:DRIVER,X     FIND OUT WHICH DRIVER OWNS THIS IOCB
FA33 EE09      2635:         LDX     IOCB:DRIVER,X
FA35 8CDCB6    2636:         CPX      #DISKFILEDRIVER DO HIGH PROBABILITY TEST FIRST
FA38 2706      2637:         BEQ      READSECTORZAPH     B/ DISK FILE DRIVER, CHECK HRDSI
FA3A 8CDC95    2638:         CPX      #DISKDEVICEDRIVER        LOW PROBABILITY TEST
FA3D 270F      2639:         BEQ      READSECTORZAPD     B/ DISK DEVICE DRIVER, JUST CHECK DRDSI
FA3F 39        2640:         RTS             NOT OPEN TO A DISK DRIVER, JUST QUIT!
               2641: 
  FA40         2642: READSECTORZAPH     ; CHECK HRDSI OF IOCB
               2643:         ;LDX    TEMPX
FA40 DE00      2644:         LDX     TEMPX
               2645:         ;CMPD    IOCB:HRDSI,X      (A,B) MATCH HRDSI ?
FA42 A11F      2646:         CMPA      IOCB:HRDSI,X
FA44 2602      2647:         BNE      MACRO:002E
FA46 E120      2648:         CMPB      (IOCB:HRDSI)+1,X
  FA48         2649: MACRO:002E
FA48 2606      2650:         BNE      READSECTORZAPD1    B/ NO
               2651:         ;CLR     IOCB:HRDSI,X      YES, MARK HRDSI AS INVALID
FA4A 6F1F      2652:         CLR      IOCB:HRDSI,X
               2653:         ;CLR     IOCB:HRDSI+1,X
FA4C 6F20      2654:         CLR      IOCB:HRDSI+1,X
  FA4E         2655: READSECTORZAPD     EQU     *
               2656:         ;LDX    TEMPX   RESTORE (X) TO IOCB POINTER
FA4E DE00      2657:         LDX     TEMPX
  FA50         2658: READSECTORZAPD1    ; ENTER HERE IF (X) IS ALREADY SET UP
               2659:         ;CMPD    IOCB:DRDSI,X      (A,B) MATCH DRDSI ?
FA50 A112      2660:         CMPA      IOCB:DRDSI,X
FA52 2602      2661:         BNE      MACRO:002F
FA54 E113      2662:         CMPB      (IOCB:DRDSI)+1,X
  FA56         2663: MACRO:002F
FA56 2604      2664:         BNE      READSECTORZAPRTS   B/ NO
               2665:         ;CLR     IOCB:DRDSI,X      YES, MARK DRDSI AS INVALID
FA58 6F12      2666:         CLR      IOCB:DRDSI,X
               2667:         ;CLR     IOCB:DRDSI+1,X
FA5A 6F13      2668:         CLR      IOCB:DRDSI+1,X




ASM/6800 1.4A0: FA5A SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 421; Form 1     DISK FILE DRIVERS -- DISK I/O
SDOS11G.ASM
  FA5C         2669: READSECTORZAPRTS   EQU     *
FA5C 39        2670:         RTS




ASM/6800 1.4A0: FA5C SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 422; Form 1     DISK FILE DRIVERS -- DISK I/O
SDOS11G.ASM
               2672: *       REQUERDSI -- REQUE RDSI(X) ONTO TOP OF QUEUE
               2673: *       USED TO IMPLEMENT LRU POLICY OF DISK SECTOR BUFFER MANAGEMENT
               2674: *
  FA5D         2675: REQUERDSI       ; FIRST, TAKE IT OUT OF THE QUEUE
FA5D FFCEA4    2676:         STX     RDSIPOINTER     SAVE THE RDSI ADDRESS
  FA60         2677: REQUERDSI1      ; IF RDSIPOINTER AND (X) ARE ALREADY SET UP
               2678:         ;LDD    RDSI:FLINK,X    MAKE FLINK(BLINK(X))=FLINK(X)
FA60 E608      2679:         LDAB      (RDSI:FLINK)+1,X
FA62 A607      2680:         LDAA      RDSI:FLINK,X
               2681:         ;LDX    RDSI:BLINK,X
FA64 EE09      2682:         LDX     RDSI:BLINK,X
               2683:         ;STD    RDSI:FLINK,X
FA66 E708      2684:         STAB      (RDSI:FLINK)+1,X
FA68 A707      2685:         STAA      RDSI:FLINK,X
               2686:         ;LDX    RDSIPOINTER     MAKE BLINK(FLINK(X))=BLINK(X)
FA6A FECEA4    2687:         LDX     RDSIPOINTER
               2688:         ;LDD    RDSI:BLINK,X
FA6D E60A      2689:         LDAB      (RDSI:BLINK)+1,X
FA6F A609      2690:         LDAA      RDSI:BLINK,X
               2691:         ;LDX    RDSI:FLINK,X
FA71 EE07      2692:         LDX     RDSI:FLINK,X
               2693:         ;STD    RDSI:BLINK,X
FA73 E70A      2694:         STAB      (RDSI:BLINK)+1,X
FA75 A709      2695:         STAA      RDSI:BLINK,X
               2696:         ;LDX    RDSIPOINTER     SO WE CAN DO THE ENQUE
FA77 FECEA4    2697:         LDX     RDSIPOINTER
               2698: *       BSR      ENQUELASTSECTORREAD
               2699: *       RTS
               2700: *
               2701: *       ENQUELASTSECTORREAD -- ADD RDSI(X) TO TOP OF LASTSECTORREADQ
               2702: *
  FA7A         2703: ENQUELASTSECTORREAD        EQU     *
               2704:         ;LDD    LASTSECTORREADQ+RDSI:FLINK
FA7A F6CEF7    2705:         LDAB      LASTSECTORREADQ+RDSI:FLINK+1
FA7D B6CEF6    2706:         LDAA      LASTSECTORREADQ+RDSI:FLINK
               2707:         ;STD    RDSI:FLINK,X    MAKE FLINK(X) := FLINK(QHEAD)
FA80 E708      2708:         STAB      (RDSI:FLINK)+1,X
FA82 A707      2709:         STAA      RDSI:FLINK,X
               2710:         ;LDD    #LASTSECTORREADQ   MAKE BLINK(X) := ADDRESS(QHEAD)
FA84 C6EF      2711:         LDAB      #(LASTSECTORREADQ)&$FF




ASM/6800 1.4A0: FA86 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 423; Form 1     DISK FILE DRIVERS -- DISK I/O
SDOS11G.ASM
FA86 86CE      2712:         LDAA      #(LASTSECTORREADQ)/256
               2713:         ;STD    RDSI:BLINK,X
FA88 E70A      2714:         STAB      (RDSI:BLINK)+1,X
FA8A A709      2715:         STAA      RDSI:BLINK,X
FA8C FFCEF6    2716:         STX     LASTSECTORREADQ+RDSI:FLINK MAKE FLINK(QHEAD) := X
               2717:         ;LDD    LASTSECTORREADQ+RDSI:FLINK BLINK(FLINK(X)) := X
FA8F F6CEF7    2718:         LDAB      LASTSECTORREADQ+RDSI:FLINK+1
FA92 B6CEF6    2719:         LDAA      LASTSECTORREADQ+RDSI:FLINK
               2720:         ;LDX    RDSI:FLINK,X
FA95 EE07      2721:         LDX     RDSI:FLINK,X
               2722:         ;STD    RDSI:BLINK,X
FA97 E70A      2723:         STAB      (RDSI:BLINK)+1,X
FA99 A709      2724:         STAA      RDSI:BLINK,X
FA9B 39        2725:         RTS             AND EXIT




ASM/6800 1.4A0: FA9B SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 424; Form 1     DISK FILE DRIVERS -- DISK I/O
SDOS11G.ASM
               2727: *       FETCHSECTOR -- INITIATE READ FOR AND THEN WAIT FOR SECTOR ARRIVAL
               2728: *       (X) POINTS TO SECTOR DESCRIPTOR
               2729: *
  FA9C         2730: FETCHSECTOR       EQU     *
               2731:         ;JSR    READSECTOR        GO START THE SECTOR READ
FA9C BDF8F5    2732:         JSR     READSECTOR
FA9F 200D      2733:         BRA       WAITSECTOR1       THEN GO WAIT FOR IT TO ARRIVE
               2734: *
               2735: *       WAITSECTOR -- WAIT FOR SECTOR WHOSE RDSI IS IN (X)
               2736: *       SETS RDSIPOINTER TO (X)
               2737: *       MOVES RDSI TO TOP OF LRU QUEUE
               2738: *       DOES WAIT ONLY IF RDSI SAYS "NOT IDLE"
               2739: *       RETURNS (X) = RDSIPOINTER
               2740: *
  FAA1         2741: WAITSECTOR        EQU     *
FAA1 8DBA      2742:         BSR      REQUERDSI       MOVE RDSI TO TOP OF LRU QUEUE
  FAA3         2743: WAITRDSI ; WAIT FOR RDSI SELECTED BY RDSIPOINTER
               2744:         ;LDX    RDSIPOINTER     CHECK OUT STATE OF RDSI
FAA3 FECEA4    2745:         LDX     RDSIPOINTER
FAA6 A600      2746:         LDAA      RDSI:DISKINFO,X DUMMY DISKINFO TABLE ?
FAA8 270E      2747:         BEQ      WAITSECTORRTS     B/ YES, IGNORE IT.
FAAA A60C      2748:         LDAA      RDSI:STATE,X     IDLE ?
FAAC 270A      2749:         BEQ      WAITSECTORRTS     B/ YES, TAKE QUICK EXIT!
  FAAE         2750: WAITSECTOR1       ; WAIT FOR ARRIVAL OF SECTOR
               2751:         ;CLR     RDSI:STATE,X     RESET SECTOR STATE TO "IDLE"
FAAE 6F0C      2752:         CLR      RDSI:STATE,X
               2753:         ;JSR    DISKWAITD        WAIT FOR DISK TRANSFER COMPLETED
FAB0 BDFB74    2754:         JSR     DISKWAITD
FAB3 2505      2755:         BCS       WAITSECTORERRED   B/ WE GOT A PROBLEM!
               2756:         ;LDX    RDSIPOINTER     SO (X) IS CORRECT ON EXIT
FAB5 FECEA4    2757:         LDX     RDSIPOINTER
  FAB8         2758: WAITSECTORRTS     EQU     *
FAB8 0C39      2759:         OKRTS
               2760: 
  FABA         2761: WAITSECTORERRED   ; DISK I/O ERROR OCCURRED
               2762:         ;PSHX           SAVE THE ERROR CODE!
FABA DF00      2763:         STX     TEMPX
FABC D601      2764:         LDAB      TEMPB
FABE 37        2765:         PSHB
FABF D600      2766:         LDAB      TEMPA




ASM/6800 1.4A0: FAC1 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 425; Form 1     DISK FILE DRIVERS -- DISK I/O
SDOS11G.ASM
FAC1 37        2767:         PSHB
               2768:         ;LDX    RDSIPOINTER
FAC2 FECEA4    2769:         LDX     RDSIPOINTER
               2770:         ;CLR     RDSI:DISKINFO,X CAN'T DO I/O, LSN IN RDSI IS NOW A LIE!
FAC5 6F00      2771:         CLR      RDSI:DISKINFO,X
               2772:         ;CLR     RDSI:DISKINFO+1,X       MARK RDSI AS COMING FROM "MAGIC 0" DISK
FAC7 6F01      2773:         CLR      RDSI:DISKINFO+1,X
FAC9 8601      2774:         LDAA      #1      (BECAUSE WE WANT SOMETHING NON-ZERO)
FACB A702      2775:         STAA      RDSI:LSN,X      MAKE LSN <> 0 SO WE DON'T THINK ITS THE MAGIC 0 SECT
               2776:         ;CLR     RDSI:STATE,X     MARK SECTOR AS BEING INACTIVE
FACD 6F0C      2777:         CLR      RDSI:STATE,X
               2778:         ;CLR     RDSI:MODIFIED,X THIS SHOULD BE REDUNDANT, BUT MAKES ME FEEL SAFE!
FACF 6F0B      2779:         CLR      RDSI:MODIFIED,X
               2780:         ;JSR    REMOVERDSI      REMOVE ANY REFERENCES TO RDSI FROM IOCBS
FAD1 BDFA02    2781:         JSR     REMOVERDSI
               2782:         ;PULX           GET THE ERROR CODE BACK...
FAD4 30        2783:         TSX
FAD5 EE00      2784:         LDX     0,X
FAD7 31        2785:         INS
FAD8 31        2786:         INS
               2787:         ;JMP    ERRORINX        GO TELL SOMEBODY WE HAD A PROBLEM!
FAD9 7ED201    2788:         JMP     ERRORINX




ASM/6800 1.4A0: FAD9 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 426; Form 1     DISK FILE DRIVERS -- DISK I/O
SDOS11G.ASM
               2790: *
               2791: *       DSKDUMPBUFFERS -- WRITE MODIFIED SECTORS BACK TO DISK
               2792: *               WRITE CONTENTS OF MODIFIED FCBS BACK TO CORRESPONDING DIRECTORY ENTRIE
               2793: *               WRITES ONLY RDSI'S WHOSE DISKINFO POINTER MATCHES "DCBPOINTER"
               2794: *               ALSO FORCES CONTENTS OF MATCHING DISK FCB'S BACK TO DIRECTORY SECTORS
               2795: *               ERRET TAKEN IF SOME FCB IS FOR A NEWLY CREATED FILE
               2796: *                       SECTORS ARE DUMPED ANYWAY
               2797: *               WAIT FOR ALL DISK I/O DONE
               2798: *               DSKDUMPBUFFERS IS GENERALLY DONE WHEN MAPALGORITHM IS ABOUT TO BE CHAN
               2799: *
  FADC         2800: DSKDUMPBUFFERS   EQU     *
FADC B6CF0A    2801:         LDAA      NFCBS     GET # FCBS TO SEARCH
FADF 9704      2802:         STAA      COUNT    AND SAVE AS LOOP COUNTER
               2803:         ;LDX    CODE+SDOS:CONFIGURATION    NOW SCAN ALL THE FCBS
FAE1 FECE03    2804:         LDX     CODE+SDOS:CONFIGURATION
               2805:         ;LDD    [CNFG:IOCBPOINTERS,X]      FIND ADDRESS OF FIRST FCB
FAE4 EE04      2806:         LDX     CNFG:IOCBPOINTERS,X
FAE6 E601      2807:         LDAB      1,X
FAE8 A600      2808:         LDAA      0,X
  FAEA         2809: DSKDUMPFCBL       EQU     *
               2810:         ;SUBD    #FCB:SIZE =ADDRESS OF PREVIOUS FCB - FCB:SIZE
FAEA C01A      2811:         SUBB      #(FCB:SIZE)&$FF
FAEC 8200      2812:         SBCA       #(FCB:SIZE)/256
               2813:         ;STD    FCBPOINTER        STORE FCB ADDRESS
FAEE F7CEA7    2814:         STAB      FCBPOINTER+1
FAF1 B7CEA6    2815:         STAA      FCBPOINTER
               2816:         ;LDX    FCBPOINTER        IS THIS FCB ACTIVE ?
FAF4 FECEA6    2817:         LDX     FCBPOINTER
FAF7 A60B      2818:         LDAA      FCB:REFCOUNT,X     ... ?
FAF9 2717      2819:         BEQ      DSKDUMPFCB1       B/ NO, IGNORE IT
FAFB A60A      2820:         LDAA      FCB:FLAGS,X        YES, GET FILE STATUS FLAGS
FAFD 8580      2821:         BITA      #FCBFLG::NEWFILE  A NEW FILE ?
FAFF 2611      2822:         BNE      DSKDUMPFCB1       B/ YES, DON'T UPDATE DIRECTORY
               2823:         ;LDX    FCB:DISKINFO,X    IS THIS FCB FOR REQUESTED DISK ?
FB01 EE00      2824:         LDX     FCB:DISKINFO,X
FB03 9C06      2825:         CPX      DCBPOINTER        ...?
FB05 260B      2826:         BNE      DSKDUMPFCB1       B/ NO, IGNORE IT
FB07 9604      2827:         LDAA      COUNT            SAVE # FCBS TO LOOK AT
FB09 36        2828:         PSHA
               2829:         ;JSR    UPDATEDIRFROMFCB   YES, UPDATE THE DIRECTORY




ASM/6800 1.4A0: FB0A SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 427; Form 1     DISK FILE DRIVERS -- DISK I/O
SDOS11G.ASM
FB0A BDE9ED    2830:         JSR     UPDATEDIRFROMFCB
FB0D 2546      2831:         BCS       DSKDUMPERR1     B/ ERROR OCCURRED, YUK!
FB0F 32        2832:         PULA             RESTORE COUNT
FB10 9704      2833:         STAA      COUNT
  FB12         2834: DSKDUMPFCB1       ; THROUGH WITH THIS FCB
               2835:         ;LDD    FCBPOINTER        GET FCB ADDRESS
FB12 F6CEA7    2836:         LDAB      FCBPOINTER+1
FB15 B6CEA6    2837:         LDAA      FCBPOINTER
               2838:         ;DEC     COUNT
FB18 7A0004    2839:         DEC      COUNT
FB1B 26CD      2840:         BNE      DSKDUMPFCBL       B/ MORE FCBS TO SEARCH
               2841: *       WE CANNOT DO A DSKDUMPBUFFER SAFELY UNLESS WE KNOW
               2842: *       THAT ALL I/O ON THE DRIVE (SUCH AS READ-AHEAD) IS COMPLETED.
               2843:         ;LDX    DCBPOINTER        COMPLETE ANY I/O ON THIS DRIVE
FB1D DE06      2844:         LDX     DCBPOINTER
               2845:         ;LDX    DSKINFO:SECTORDB,X        I/O ACTIVE ON THIS DISK DRIVE ?
FB1F EE2B      2846:         LDX     DSKINFO:SECTORDB,X
FB21 2706      2847:         BEQ      DSKDUMPBUF0      B/ NO
FB23 FFCEA4    2848:         STX     RDSIPOINTER     IN CASE WE GO TO WAITSECTORERRED
               2849:         ;JSR    WAITRDSI NOW WAIT FOR I/O OPERATION COMPLETE
FB26 BDFAA3    2850:         JSR     WAITRDSI
  FB29         2851: DSKDUMPBUF0      ; I/O ON DISK DRIVE IS COMPLETED
               2852:         ;LDX    LASTSECTORREADQ+RDSI:FLINK SCAN RDSI LIST
FB29 FECEF6    2853:         LDX     LASTSECTORREADQ+RDSI:FLINK
  FB2C         2854: DSKDUMPBUFL      EQU     *
FB2C FFCEA4    2855:         STX     RDSIPOINTER     YES, SAVE POINTER TO RDSI'S
               2856:         ;LDX    RDSI:DISKINFO,X CORRECT DISK ?
FB2F EE00      2857:         LDX     RDSI:DISKINFO,X
FB31 9C06      2858:         CPX      DCBPOINTER        ...?
FB33 2614      2859:         BNE      DSKDUMPBUFN      B/ NO, IGNORE RDSI
               2860:         ;LDX    RDSIPOINTER     NOW DO A WRITE...
FB35 FECEA4    2861:         LDX     RDSIPOINTER
FB38 A60B      2862:         LDAA      RDSI:MODIFIED,X IF THIS SECTOR MODIFIED
FB3A 270D      2863:         BEQ      DSKDUMPBUFN      B/ NO, LEAVE RDSI ALONE
               2864:         ;CLR     RDSI:MODIFIED,X FORCE TRANSITION FROM "MODIFIED" TO "BEING WRITTEN"
FB3C 6F0B      2865:         CLR      RDSI:MODIFIED,X
FB3E 8602      2866:         LDAA      #RDSISTATE:WRITING       MARK RDSI AS BEING WRITTEN
FB40 A70C      2867:         STAA      RDSI:STATE,X
FB42 8D24      2868:         BSR      DISKWRITE       OF MODIFIED SECTOR
FB44 2513      2869:         BCS       WAITSECTORERRJ2   B/ RATS, WE GOT AN I/O ERROR




ASM/6800 1.4A0: FB44 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 428; Form 1     DISK FILE DRIVERS -- DISK I/O
SDOS11G.ASM
               2870:         ;JSR    WAITRDSI NOW WAIT FOR DISK I/O COMPLETE
FB46 BDFAA3    2871:         JSR     WAITRDSI
  FB49         2872: DSKDUMPBUFN      EQU     *
               2873:         ;LDX    RDSIPOINTER
FB49 FECEA4    2874:         LDX     RDSIPOINTER
               2875:         ;LDX    RDSI:FLINK,X    FIND NEXT RDSI
FB4C EE07      2876:         LDX     RDSI:FLINK,X
FB4E 8CCEEF    2877:         CPX      #LASTSECTORREADQ   HIT END OF RDSI LIST?
FB51 26D9      2878:         BNE      DSKDUMPBUFL      B/ NO, GO CHECK NEXT RDSI
FB53 0C39      2879:         OKRTS           NO
               2880: 
  FB55         2881: DSKDUMPERR1
FB55 31        2882:         INS             THROW AWAY THE SAVED COUNT
               2883:         ;JMP    ERRORED AND PASS THE ERROR ON...
FB56 7ED20A    2884:         JMP     ERRORED
               2885: 
  FB59         2886: WAITSECTORERRJ2   EQU     *
               2887:         ;JMP    WAITSECTORERRED
FB59 7EFABA    2888:         JMP     WAITSECTORERRED
               2889: 




ASM/6800 1.4A0: FB59 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 429; Form 1     DISK FILE DRIVERS -- DISK I/O
SDOS11G.ASM
  0000         2891:         IF      SWAPPING WHICH WE'RE NOT!
 *S*           2892: *       READDIRECT -- READ IOCB:LSN INTO BUFFER(IOCB:BUFFERP)
 *S*           2893: *               IF IOCB:LSN DOES NOT EXIST, ZEROS NBPS BYTES
 *S*           2894: *               IOCB:LOCATEDF MUST BE SET ON ENTRY
 *S*           2895: *
 *S*           2896: READDIRECT        EQU     *
 *S*           2897:         ;LDX    IOCBPOINTER       CHECK VALIDITY OF CURLSN
 *S*           2898:         LDX     IOCBPOINTER
 *S*           2899:         ;LDX    IOCB:CURLCN,X       IF CURLCN IS VALID,
 *S*           2900:         LDX     IOCB:CURLCN,X
 *S*           2901:         INX             SO IS CURLSN
 *S*           2902:         BNE      READDIRECT1       B/ CURLCN IS VALID (<>-1)
 *S*           2903:         ;LDX    DCBPOINTER        OOPS, NO SUCH CLUSTER!
 *S*           2904:         LDX     DCBPOINTER
 *S*           2905:         CLRA              ZERO A SECTOR'S WORTH
 *S*           2906:         CLRB              GET -NBPS TO (A,B)
 *S*           2907:         ;SUBD    DSKINFO:NBPS,X
 *S*           2908:         SUBB      (DSKINFO:NBPS)+1,X
 *S*           2909:         SBCA       DSKINFO:NBPS,X
 *S*           2910:         ;LDX    IOCBPOINTER
 *S*           2911:         LDX     IOCBPOINTER
 *S*           2912:         ;LDX    IOCB:BUFFERP,X
 *S*           2913:         LDX     IOCB:BUFFERP,X
 *S*           2914:         ;JMP    STAASECTORL        AND LET ZERO SECTOR DO THE WORK
 *S*           2915:         JMP     STAASECTORL
 *S*           2916: 
 *S*           2917: READDIRECT1       ; VALID CLUSTER # ENCOUNTERED
 *S*           2918:         ;LDX    IOCBPOINTER       SO READ THE LSN INDICATED
 *S*           2919:         LDX     IOCBPOINTER
 *S*           2920: *       BSR      DISKREAD
 *S*           2921: *       OKRTS
               2922:         FIN




ASM/6800 1.4A0: FB59 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 430; Form 1     DISK FILE DRIVERS -- DISK I/O
SDOS11G.ASM
               2924: *
               2925: *       DISKREAD -- INITIATE READ DISK SECTOR SPECIFIED BY SECTORDB(X)
               2926: *       NOTE: DISKREAD, DISKWRITE, AND DISKWAITD ROUTINES MUST NOT BE
               2927: *       CALLED WITH SECTORDB FOR DUMMY DISK!
               2928: *       ASSERT: DSKINFO:SECTORDB = 0
               2929: *       PRESERVES DCBPOINTER
               2930: *
               2931: *
  FB5C         2932: DISKREAD EQU     *
FB5C 8D54      2933:         BSR      DISKRWCOPYARGS    COPY ARGUMENTS TO INFO BLOCK
               2934:         ;LDD    DRIVER:DISKREAD,X        GET ADDRESS OF DISKREAD ENTRY POINT TO (A,B)
FB5E E603      2935:         LDAB      (DRIVER:DISKREAD)+1,X
FB60 A602      2936:         LDAA      DRIVER:DISKREAD,X
FB62 8D69      2937:         BSR      SECTORDRIVER     SET (X) = DCBPOINTER AND PASS CONTROL TO DISKREAD
FB64 2446      2938:         BCC        DISKDCBUNSAVE      B/ NO ERROR
FB66 2018      2939:         BRA       DISKWAITE        B/ WE GOT AN ERROR, YUK
               2940: *
               2941: *       DISKWRITE -- INITIATE WRITE DISK SECTOR OF SECTORDB(X)
               2942: *       ASSERT: DSKINFO:SECTORDB = 0
               2943: *       PRESERVES DCBPOINTER
               2944: *
  FB68         2945: DISKWRITE       EQU     *
FB68 8D48      2946:         BSR      DISKRWCOPYARGS
               2947:         ;LDD    DRIVER:DISKWRITE,X      GET ADDRESS OF DISKWRITE ROUTINE TO (A,B)
FB6A E605      2948:         LDAB      (DRIVER:DISKWRITE)+1,X
FB6C A604      2949:         LDAA      DRIVER:DISKWRITE,X
FB6E 8D5D      2950:         BSR      SECTORDRIVER     SET (X) = DCBPOINTER AND PASS CONTROL TO (A,B)
FB70 243A      2951:         BCC        DISKDCBUNSAVE      B/ NO ERROR
FB72 200C      2952:         BRA       DISKWAITE        B/ WE GOT AN ERROR!
               2953: *
               2954: *       DISKWAITD -- WAIT FOR DISK I/O COMPLETE ON DRIVE SECTORDB(X)
               2955: *       PRESERVES DCBPOINTER
               2956: *
  FB74         2957: DISKWAITD        EQU     *
FB74 8D49      2958:         BSR      DISKDCBSAVE        SAVE CURRENT VALUE OF DCB AND SET TO SECTORDB:DISK
               2959:         ;LDX    DCB:DRIVER,X      GET ADDRESS OF DISKWAIT ROUTINE TO (A,B)
FB76 EE07      2960:         LDX     DCB:DRIVER,X
               2961:         ;LDD    DRIVER:DISKWAIT,X
FB78 E607      2962:         LDAB      (DRIVER:DISKWAIT)+1,X
FB7A A606      2963:         LDAA      DRIVER:DISKWAIT,X




ASM/6800 1.4A0: FB7C SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 431; Form 1     DISK FILE DRIVERS -- DISK I/O
SDOS11G.ASM
FB7C 8D4F      2964:         BSR      SECTORDRIVER     SET (X) = DCBPOINTER AND PASS CONTROL
FB7E 2426      2965:         BCC        DISKWAITD2       B/ NO ERROR
  FB80         2966: DISKWAITE        ; DISK I/O ERROR OCCURRED
               2967:         ;JSR    ERRORSAVE        SAVE THE ERROR CODE
FB80 BDD219    2968:         JSR     ERRORSAVE
FB83 8C0415    2969:         CPX      #ERR:DISKREAD    CHECK FOR "CAN'T GET SECTOR" ERROR
FB86 2705      2970:         BEQ      DISKWAITE1       B/ CAN'T READ IT...
FB88 8C0416    2971:         CPX      #ERR:DISKWRITE  CHECK FOR "CAN'T CHANGE IT" ERROR
FB8B 2614      2972:         BNE      DISKWAITE2       B/ ISN'T READ OR WRITE ERROR, DON'T MARK SECTOR AS B
  FB8D         2973: DISKWAITE1       ; DISK READ OR DISK WRITE ERROR, MARK SECTOR AS BAD
               2974:         ;LDX    DCBPOINTER        SAVE BAD LSN FROM RDSI
FB8D DE06      2975:         LDX     DCBPOINTER
               2976:         ;LDX    DSKINFO:SECTORDB,X        COPY BAD LSN TO (TOS,A,B)
FB8F EE2B      2977:         LDX     DSKINFO:SECTORDB,X
FB91 A602      2978:         LDAA      SECTORDB:LSN,X
FB93 36        2979:         PSHA
               2980:         ;LDD    SECTORDB:LSN+1,X
FB94 E604      2981:         LDAB      (SECTORDB:LSN+1)+1,X
FB96 A603      2982:         LDAA      SECTORDB:LSN+1,X
               2983:         ;LDX    DCBPOINTER
FB98 DE06      2984:         LDX     DCBPOINTER
               2985:         ;STD    DSKINFO:BADLSN+1,X
FB9A E72F      2986:         STAB      (DSKINFO:BADLSN+1)+1,X
FB9C A72E      2987:         STAA      DSKINFO:BADLSN+1,X
FB9E 32        2988:         PULA
FB9F A72D      2989:         STAA      DSKINFO:BADLSN,X
  FBA1         2990: DISKWAITE2       ; FINISH UP ERROR HANDLING
FBA1 8D03      2991:         BSR      DISKWAITD2       MARK DISK DRIVER AS "NOT BUSY"
               2992:         ;JMP    ERRORED AND GO CROAK
FBA3 7ED20A    2993:         JMP     ERRORED
               2994: 
  FBA6         2995: DISKWAITD2       ; MARK DISK DRIVER AS "NOT BUSY"
               2996:         ;LDX    DCBPOINTER        BY ZEROING DSKINFO:SECTORDB
FBA6 DE06      2997:         LDX     DCBPOINTER
               2998:         ;CLR     DSKINFO:SECTORDB,X
FBA8 6F2B      2999:         CLR      DSKINFO:SECTORDB,X
               3000:         ;CLR     DSKINFO:SECTORDB+1,X
FBAA 6F2C      3001:         CLR      DSKINFO:SECTORDB+1,X
  FBAC         3002: DISKDCBUNSAVE      ; RESTORE DCB POINTER TO ORIGINAL VALUE
               3003:         ;LDX    DCBPTRSAVE NEED I SAY MORE?




ASM/6800 1.4A0: FBAC SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 432; Form 1     DISK FILE DRIVERS -- DISK I/O
SDOS11G.ASM
FBAC FECF1B    3004:         LDX     DCBPTRSAVE
FBAF DF06      3005:         STX     DCBPOINTER        (THIS CODE MUST PRESERVE THE CARRY BIT!)
FBB1 39        3006:         RTS




ASM/6800 1.4A0: FBB1 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 433; Form 1     DISK FILE DRIVERS -- DISK I/O
SDOS11G.ASM
               3008: *
               3009: *       DISKRWCOPYARGS -- COPY SECTORDB ADDRESS TO DISKINFO BLOCK
               3010: *               SAVES CURRENT VALUE OF DCBPOINTER; SETS DCBPOINTER TO SECTORDB:DISKINF
               3011: *
  FBB2         3012: DISKRWCOPYARGS    EQU     *
FBB2 8D0B      3013:         BSR      DISKDCBSAVE        SAVE CURRENT DCB AND SET UP FROM SECTORDB:
               3014:         ;LDD    TEMPX   INTO DISKINFO TABLEI SO WE CAN FIGURE OUT WHICH RDSI GOT AN ER
FBB4 D601      3015:         LDAB      TEMPX+1
FBB6 9600      3016:         LDAA      TEMPX
               3017:         ;STD    DSKINFO:SECTORDB,X        WHEN WE DO A DISKWAITD!
FBB8 E72C      3018:         STAB      (DSKINFO:SECTORDB)+1,X
FBBA A72B      3019:         STAA      DSKINFO:SECTORDB,X
               3020:         ;LDX    DCB:DRIVER,X      GET DRIVER VECTOR ENTRY POINT TO (X)
FBBC EE07      3021:         LDX     DCB:DRIVER,X
FBBE 39        3022:         RTS
               3023: *
               3024: *       DISKDCBSAVE -- SAVE CURRENT VALUE OF DCBPOINTER
               3025: *               SET TEMPX TO (X)
               3026: *               SET DCBPOINTER TO SECTORDB:DISKINFO,X
               3027: *               PRESERVE (X)
               3028: *
  FBBF         3029: DISKDCBSAVE        EQU     *
FBBF DF00      3030:         STX     TEMPX   SAVE POINTER TO SECTORDB:...
               3031:         ;LDX    DCBPOINTER        SAVE THE CURRENT VALUE OF THE DCBPOINTER
FBC1 DE06      3032:         LDX     DCBPOINTER
FBC3 FFCF1B    3033:         STX     DCBPTRSAVE
               3034:         ;LDX    TEMPX   GET SECTORDB: POINTER AGAIN
FBC6 DE00      3035:         LDX     TEMPX
               3036:         ;LDX    SECTORDB:DISKINFO,X       AND SET UP DCB POINTER FROM SECTORDB:
FBC8 EE00      3037:         LDX     SECTORDB:DISKINFO,X
FBCA DF06      3038:         STX     DCBPOINTER
FBCC 39        3039:         RTS
               3040: *
               3041: *       SECTORDRIVER -- LOADS (X) WITH DCBPOINTER; PASS CONTROL TO (A,B)
               3042: *
  FBCD         3043: SECTORDRIVER     EQU     *
               3044:         ;PSHD           SET UP FAKE RETURN ADDRESS
FBCD 37        3045:         PSHB
FBCE 36        3046:         PSHA
               3047:         ;LDX    DCBPOINTER        AS PROMISED




ASM/6800 1.4A0: FBCF SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 434; Form 1     DISK FILE DRIVERS -- DISK I/O
SDOS11G.ASM
FBCF DE06      3048:         LDX     DCBPOINTER
FBD1 39        3049:         RTS             PASS CONTROL




ASM/6800 1.4A0: FBD1 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 435; Form 1     BLOCK MOVE UP ROUTINE
SDOS11G.ASM
  0001         3051:         IF      M6800!M6801
  0004         3052: LIMIT   EQU     4       TRANSFER LIMIT ADDRESS
  0006         3053: BLOCKMOVEX        EQU     6       SCRATCH PAD LOCATIONS
               3054: 
  FBD2         3055: BLOCKMOVE ; PRESERVES DCBPOINTER
               3056: *       BLOCKMOVEDOWN -- MOVE BLOCK AT (X) TO (Y) FOR (D) BYTES
               3057: *       (Y) = LOCATION ZERO
               3058: *       ON EXIT, (X) IS OLD (X)+(D)
               3059: *                (Y) IS OLD (Y)+(D)
               3060: *       COPIES LARGE BLOCKS AT 17uS. PER BYTE
               3061: *       ASSUMES COPY-TO REGION DOES NOT OVERLAP COPY-FROM REGION
               3062: *       OR THAT "FROM" >= "TO"
               3063: *
  FBD2         3064: BLOCKMOVEDOWN     EQU     *
FBD2 DF02      3065:         STX     FROMPOINTER     SAVE WHERE TO COPY FROM
               3066:         ;ADDD    FROMPOINTER     COMPUTE ADDRESS OF BYTE PAST END OF FROM RE
FBD4 DB03      3067:         ADDB      FROMPOINTER+1
FBD6 9902      3068:         ADCA       FROMPOINTER
               3069:         ;STD    LIMIT   SAVE AS LIMIT ADDRESS
FBD8 D705      3070:         STAB      LIMIT+1
FBDA 9704      3071:         STAA      LIMIT
               3072:         ;LDD    DCBPOINTER        SAVE DCB POINTER
FBDC D607      3073:         LDAB      DCBPOINTER+1
FBDE 9606      3074:         LDAA      DCBPOINTER
               3075:         ;PSHD
FBE0 37        3076:         PSHB
FBE1 36        3077:         PSHA
               3078:         ;LDB     LIMIT+1 RESTORE (B)...
FBE2 D605      3079:         LDAB      LIMIT+1
FBE4 D003      3080:         SUBB      FROMPOINTER+1   (B):= COUNT MOD 256
FBE6 C501      3081:         BITB      #%00000001      GOING TO MOVE TO AN EVEN NUMBER OF BYTES ?
FBE8 270E      3082:         BEQ      BLOCKMOVEDOWNE    B/ YES
               3083:         ;LDA     ,X+     FETCH ODD BYTE FROM "FROM" AREA
FBEA A600      3084:         LDAA      0,X
FBEC 08        3085:         INX
FBED DF02      3086:         STX     FROMPOINTER     (TO COPY ODD BYTE TAKES 37 CYCLES)
               3087:         ;LDX    TOPOINTER       STORE BYTE INTO "TO" AREA
FBEF DE00      3088:         LDX     TOPOINTER
               3089:         ;STA     ,X+
FBF1 A700      3090:         STAA      0,X




ASM/6800 1.4A0: FBF3 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 436; Form 1     BLOCK MOVE UP ROUTINE
SDOS11G.ASM
FBF3 08        3091:         INX
FBF4 DF00      3092:         STX     TOPOINTER
               3093:         ;LDX    FROMPOINTER     GET SET TO MOVE BYTE PAIR
FBF6 DE02      3094:         LDX     FROMPOINTER
  FBF8         3095: BLOCKMOVEDOWNE    ; EVEN NUMBER OF BYTES LEFT TO MOVE
FBF8 C502      3096:         BITB      #%00000010      TWO BYTES LEFT TO MOVE BEFORE MULTIPLE OF 4 REACHED 
FBFA 2714      3097:         BEQ      BLOCKMOVEDOWNA     B/ NO, READY TO MOVE MULTIPLES OF 4 BYTES
               3098:         ;LDD    ,X++    FETCH BYTE PAIR
FBFC E601      3099:         LDAB      (0)+1,X
FBFE A600      3100:         LDAA      0,X
FC00 08        3101:         INX
FC01 08        3102:         INX
FC02 DF02      3103:         STX     FROMPOINTER     (TO COPY BYTE PAIR TAKES 28 CYCLES/BYTE)
               3104:         ;LDX    TOPOINTER       WHERE TO PUT BYTE PAIR
FC04 DE00      3105:         LDX     TOPOINTER
               3106:         ;STD    ,X++
FC06 E701      3107:         STAB      (0)+1,X
FC08 A700      3108:         STAA      0,X
FC0A 08        3109:         INX
FC0B 08        3110:         INX
FC0C DF00      3111:         STX     TOPOINTER
               3112:         ;LDX    FROMPOINTER     GET SET TO MOVE 4 BYTES AT A TIME
FC0E DE02      3113:         LDX     FROMPOINTER
FC10 D603      3114: BLOCKMOVEDOWNA     LDAB      FROMPOINTER+1   DO WE STILL HAVE TO MOVE A MULTIPLE OF 16
FC12 D005      3115:         SUBB      LIMIT+1 (B):= COUNT MOD 256
FC14 C50F      3116:         BITB      #%00001111      ....?
FC16 2734      3117:         BEQ      BLOCKMOVEDOWNB     B/ YEP.
               3118: *
               3119: *       MOVE 4 BYTES AT A TIME UNTIL A MULTIPLE OF 16 IS LEFT TO MOVE
               3120: *       COPY RATE IS 23.5 uS. PER BYTE
               3121: *
  FC18         3122: BLOCKMOVEDOWN4    ;LDD    2,X     GET 2ND AND 3RD BYTE...
FC18 E603      3123:         LDAB      (2)+1,X
FC1A A602      3124:         LDAA      2,X
               3125:         ;LDX    ,X      AND 1ST AND 2ND BYTES FROM THE "FROM" AREA
FC1C EE00      3126:         LDX     0,X
FC1E DF06      3127:         STX     BLOCKMOVEX        SAVE 1ST AND 2ND BYTES
               3128:         ;LDX    TOPOINTER       NO STORE 4 BYTES TO "TO" AREA
FC20 DE00      3129:         LDX     TOPOINTER
               3130:         ;STD    2,X     STORE 2ND AND 3RD BYTE




ASM/6800 1.4A0: FC22 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 437; Form 1     BLOCK MOVE UP ROUTINE
SDOS11G.ASM
FC22 E703      3131:         STAB      (2)+1,X
FC24 A702      3132:         STAA      2,X
               3133:         ;LDD    BLOCKMOVEX
FC26 D607      3134:         LDAB      BLOCKMOVEX+1
FC28 9606      3135:         LDAA      BLOCKMOVEX
               3136:         ;STD    ,X      STORE 1ST AND SECOND BYTES
FC2A E701      3137:         STAB      (0)+1,X
FC2C A700      3138:         STAA      0,X
FC2E D601      3139:         LDAB      TOPOINTER+1     ADVANCE POINTERS BY 4 BYTES
FC30 CB04      3140:         ADDB      #4
FC32 D701      3141:         STAB      TOPOINTER+1
FC34 2403      3142:         BCC        *+5
               3143:         ;INC     TOPOINTER
FC36 7C0000    3144:         INC      TOPOINTER
FC39 D603      3145:         LDAB      FROMPOINTER+1
FC3B CB04      3146:         ADDB      #4
FC3D D703      3147:         STAB      FROMPOINTER+1
FC3F 2403      3148:         BCC        *+5
               3149:         ;INC     FROMPOINTER
FC41 7C0002    3150:         INC      FROMPOINTER
               3151:         ;LDX    FROMPOINTER     SET UP FOR NEXT LOOP ITERATION
FC44 DE02      3152:         LDX     FROMPOINTER
FC46 D005      3153:         SUBB      LIMIT+1 MULTIPLE OF 16 BYTES LEFT TO MOVE ?
FC48 C50F      3154:         BITB      #%00001111      ....?
FC4A 26CC      3155:         BNE      BLOCKMOVEDOWN4    B/ NOPE, MOVE ANOTHER 4 BYTES
FC4C 9C04      3156: BLOCKMOVEDOWNB     CPX      LIMIT   YES, ALL DONE MOVING BYTES ?
FC4E 277A      3157:         BEQ      BLOCKMOVEDOWND    B/ YES, LEAVE!
               3158: *
               3159: *       MOVE 16 BYTES AT A TIME UNTIL TRANSFER IS COMPLETE
               3160: *       COPY RATE IS 17.1 uS. PER BYTE
               3161: *
  FC50         3162: BLOCKMOVEDOWN16   EQU     *
               3163:         ;LDD    0+2,X   COPY 1ST 4 BYTES
FC50 E603      3164:         LDAB      (0+2)+1,X
FC52 A602      3165:         LDAA      0+2,X
               3166:         ;LDX    0+0,X
FC54 EE00      3167:         LDX     0+0,X
FC56 DF06      3168:         STX     BLOCKMOVEX
               3169:         ;LDX    TOPOINTER
FC58 DE00      3170:         LDX     TOPOINTER




ASM/6800 1.4A0: FC58 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 438; Form 1     BLOCK MOVE UP ROUTINE
SDOS11G.ASM
               3171:         ;STD    0+2,X
FC5A E703      3172:         STAB      (0+2)+1,X
FC5C A702      3173:         STAA      0+2,X
               3174:         ;LDD    BLOCKMOVEX
FC5E D607      3175:         LDAB      BLOCKMOVEX+1
FC60 9606      3176:         LDAA      BLOCKMOVEX
               3177:         ;STD    0+0,X
FC62 E701      3178:         STAB      (0+0)+1,X
FC64 A700      3179:         STAA      0+0,X
               3180:         ;LDX    FROMPOINTER     COPY 2ND GROUP OF 4 BYTES
FC66 DE02      3181:         LDX     FROMPOINTER
               3182:         ;LDD    4+2,X
FC68 E607      3183:         LDAB      (4+2)+1,X
FC6A A606      3184:         LDAA      4+2,X
               3185:         ;LDX    4+0,X
FC6C EE04      3186:         LDX     4+0,X
FC6E DF06      3187:         STX     BLOCKMOVEX
               3188:         ;LDX    TOPOINTER
FC70 DE00      3189:         LDX     TOPOINTER
               3190:         ;STD    4+2,X
FC72 E707      3191:         STAB      (4+2)+1,X
FC74 A706      3192:         STAA      4+2,X
               3193:         ;LDD    BLOCKMOVEX
FC76 D607      3194:         LDAB      BLOCKMOVEX+1
FC78 9606      3195:         LDAA      BLOCKMOVEX
               3196:         ;STD    4+0,X
FC7A E705      3197:         STAB      (4+0)+1,X
FC7C A704      3198:         STAA      4+0,X
               3199:         ;LDX    FROMPOINTER     COPY 3RD GROUP OF 4 BYTES
FC7E DE02      3200:         LDX     FROMPOINTER
               3201:         ;LDD    8+2,X
FC80 E60B      3202:         LDAB      (8+2)+1,X
FC82 A60A      3203:         LDAA      8+2,X
               3204:         ;LDX    8+0,X
FC84 EE08      3205:         LDX     8+0,X
FC86 DF06      3206:         STX     BLOCKMOVEX
               3207:         ;LDX    TOPOINTER
FC88 DE00      3208:         LDX     TOPOINTER
               3209:         ;STD    8+2,X
FC8A E70B      3210:         STAB      (8+2)+1,X




ASM/6800 1.4A0: FC8C SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 439; Form 1     BLOCK MOVE UP ROUTINE
SDOS11G.ASM
FC8C A70A      3211:         STAA      8+2,X
               3212:         ;LDD    BLOCKMOVEX
FC8E D607      3213:         LDAB      BLOCKMOVEX+1
FC90 9606      3214:         LDAA      BLOCKMOVEX
               3215:         ;STD    8+0,X
FC92 E709      3216:         STAB      (8+0)+1,X
FC94 A708      3217:         STAA      8+0,X
               3218:         ;LDX    FROMPOINTER     COPY 4TH GROUP OF 4 BYTES
FC96 DE02      3219:         LDX     FROMPOINTER
               3220:         ;LDD    12+2,X
FC98 E60F      3221:         LDAB      (12+2)+1,X
FC9A A60E      3222:         LDAA      12+2,X
               3223:         ;LDX    12+0,X
FC9C EE0C      3224:         LDX     12+0,X
FC9E DF06      3225:         STX     BLOCKMOVEX
               3226:         ;LDX    TOPOINTER
FCA0 DE00      3227:         LDX     TOPOINTER
               3228:         ;STD    12+2,X
FCA2 E70F      3229:         STAB      (12+2)+1,X
FCA4 A70E      3230:         STAA      12+2,X
               3231:         ;LDD    BLOCKMOVEX
FCA6 D607      3232:         LDAB      BLOCKMOVEX+1
FCA8 9606      3233:         LDAA      BLOCKMOVEX
               3234:         ;STD    12+0,X
FCAA E70D      3235:         STAB      (12+0)+1,X
FCAC A70C      3236:         STAA      12+0,X
FCAE D601      3237:         LDAB      TOPOINTER+1     ADVANCE POINTERS BY 16 BYTES
FCB0 CB10      3238:         ADDB      #16
FCB2 D701      3239:         STAB      TOPOINTER+1
FCB4 2403      3240:         BCC        *+5
               3241:         ;INC     TOPOINTER
FCB6 7C0000    3242:         INC      TOPOINTER
FCB9 D603      3243:         LDAB      FROMPOINTER+1
FCBB CB10      3244:         ADDB      #16
FCBD D703      3245:         STAB      FROMPOINTER+1
FCBF 2403      3246:         BCC        *+5
               3247:         ;INC     FROMPOINTER
FCC1 7C0002    3248:         INC      FROMPOINTER
               3249:         ;LDX    FROMPOINTER     CHECK TO SEE IF COPY IS COMPLETE
FCC4 DE02      3250:         LDX     FROMPOINTER




ASM/6800 1.4A0: FCC6 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 440; Form 1     BLOCK MOVE UP ROUTINE
SDOS11G.ASM
FCC6 9C04      3251:         CPX      LIMIT   AT LIMIT OF "FROM" REGION ?
FCC8 2686      3252:         BNE      BLOCKMOVEDOWN16   B/ NO, GO MOVE ANOTHER 16 BYTES
  FCCA         3253: BLOCKMOVEDOWND    ; BLOCK TRANSFER IS COMPLETE!
               3254:         ;PULD           RESTORE DCBPOINTER
FCCA 32        3255:         PULA
FCCB 33        3256:         PULB
               3257:         ;STD    DCBPOINTER
FCCC D707      3258:         STAB      DCBPOINTER+1
FCCE 9706      3259:         STAA      DCBPOINTER
FCD0 39        3260:         RTS




ASM/6800 1.4A0: FCD0 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 441; Form 1     BLOCK MOVE UP ROUTINE
SDOS11G.ASM
  0001         3262:         ELSE    (M6809)
 *S*           3263:         PAGE
 *S*           3264: BLOCKMOVE ; ENTRY POINT TO BLOCKMOVE FOR '09, PRESERVES DCBPOINTER
 *S*           3265: *       BLOCKMOVEDOWN -- 6809 VERSION (5 uS./byte, average)
 *S*           3266: *       (X) = from address
 *S*           3267: *       (Y) = to address
 *S*           3268: *       (D) = count (0..65535)
 *S*           3269: *       On exit, (X) has old (X)+(D); (Y) has old (Y)+(D)
 *S*           3270: *       ASSUMES THAT COPY-TO REGION DOES NOT OVERLAP COPY-FROM REGION,
 *S*           3271: *       OR THAT "FROM" >= "TO".
 *S*           3272: *
 *S*           3273: BLOCKMOVEDOWN
 *S*           3274:         LEAU     D,X     COMPUTE END OF TRANSFER ADDRESS
 *S*           3275:         PSHS    U       SAVE ON STACK
 *S*           3276:         BITB      #1      TAKE CARE OF "ODD" BYTE
 *S*           3277:         BEQ      BLOCKMOVEDOWN0
 *S*           3278:         LDAA      ,X+     MOVE ODD BYTE
 *S*           3279:         STAA      ,Y+     THEN WE CAN IGNORE LSB OF D
 *S*           3280: BLOCKMOVEDOWN0
 *S*           3281:         COMB              MAP BITS 3-1: 0->,1->6,...,N->7-N
 *S*           3282:         ANDB      #%1110  BRANCH INTO COPY LOOP...
 *S*           3283:         ASLB              AT PROPER POINT
 *S*           3284:         LDU     #BLOCKMOVEDOWNLOOP+4
 *S*           3285:         ;JMP    B,U      MULTIPLE OF 16 TAKES US TO CMPX 0,S
 *S*           3286:         JMP     B
 *S*           3287:         PAGE
 *S*           3288: BLOCKMOVEDOWNLOOP
 *S*           3289:         ;LDD    ,X++    (CAN'T GET HERE DIRECTLY FROM JMP B,U)
 *S*           3290:         LDAB      (0)+1,X
 *S*           3291:         LDAA      0,X
 *S*           3292:         INX
 *S*           3293:         INX
 *S*           3294:         ;STD    ,Y++
 *S*           3295:         STAB      +1
 *S*           3296:         STAA      
 *S*           3297:         ;LDD    ,X++    1110
 *S*           3298:         LDAB      (0)+1,X
 *S*           3299:         LDAA      0,X
 *S*           3300:         INX
 *S*           3301:         INX




ASM/6800 1.4A0: FCD0 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 442; Form 1     BLOCK MOVE UP ROUTINE
SDOS11G.ASM
 *S*           3302:         ;STD    ,Y++
 *S*           3303:         STAB      +1
 *S*           3304:         STAA      
 *S*           3305:         ;LDD    ,X++    1100
 *S*           3306:         LDAB      (0)+1,X
 *S*           3307:         LDAA      0,X
 *S*           3308:         INX
 *S*           3309:         INX
 *S*           3310:         ;STD    ,Y++
 *S*           3311:         STAB      +1
 *S*           3312:         STAA      
 *S*           3313:         ;LDD    ,X++    1010
 *S*           3314:         LDAB      (0)+1,X
 *S*           3315:         LDAA      0,X
 *S*           3316:         INX
 *S*           3317:         INX
 *S*           3318:         ;STD    ,Y++
 *S*           3319:         STAB      +1
 *S*           3320:         STAA      
 *S*           3321:         ;LDD    ,X++    1000
 *S*           3322:         LDAB      (0)+1,X
 *S*           3323:         LDAA      0,X
 *S*           3324:         INX
 *S*           3325:         INX
 *S*           3326:         ;STD    ,Y++
 *S*           3327:         STAB      +1
 *S*           3328:         STAA      
 *S*           3329:         ;LDD    ,X++    0110
 *S*           3330:         LDAB      (0)+1,X
 *S*           3331:         LDAA      0,X
 *S*           3332:         INX
 *S*           3333:         INX
 *S*           3334:         ;STD    ,Y++
 *S*           3335:         STAB      +1
 *S*           3336:         STAA      
 *S*           3337:         ;LDD    ,X++    0100
 *S*           3338:         LDAB      (0)+1,X
 *S*           3339:         LDAA      0,X
 *S*           3340:         INX
 *S*           3341:         INX




ASM/6800 1.4A0: FCD0 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 443; Form 1     BLOCK MOVE UP ROUTINE
SDOS11G.ASM
 *S*           3342:         ;STD    ,Y++
 *S*           3343:         STAB      +1
 *S*           3344:         STAA      
 *S*           3345:         ;LDD    ,X++    0010
 *S*           3346:         LDAB      (0)+1,X
 *S*           3347:         LDAA      0,X
 *S*           3348:         INX
 *S*           3349:         INX
 *S*           3350:         ;STD    ,Y++
 *S*           3351:         STAB      +1
 *S*           3352:         STAA      
 *S*           3353:         CMPX     0,S     0000
 *S*           3354:         BNE      BLOCKMOVEDOWNLOOP
 *S*           3355:         ;LEAS    2,S     POP LIMIT ADDRESS
 *S*           3356:         IF      2<0
 *S*           3357:         RPT     -2
 *S*           3358:         DES
 *S*           3359:         ELSE
 *S*           3360:         RPT     2
 *S*           3361:         INS
 *S*           3362:         FIN
 *S*           3363:         RTS
               3364:         FIN     M6800!M6801




ASM/6800 1.4A0: FCD0 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 444; Form 1     CLOCK TICK AND TIMEOUT ROUTINES
SDOS11G.ASM
               3366: *       TASKING AND INTERRUPT HANDLING FOR SDOS
               3367: *
               3368: *       CLOCKTICKED -- BUMPS SDOS:CLOCK
               3369: *       ADJUSTS THE DATE IF NEEDED
               3370: *       WAKES UP TIMEOUT TASK
               3371: *       INVOKED AS EXIT OF SOME INTERRUPT ROUTINE
               3372: *       (A) ON ENTRY = # CLOCK TICKS (60THS SEC) ELAPSED SINCE LAST CALL
               3373: *       RUNS WITH INTERRUPTS DISABLED
               3374: *
  FCD1         3375: CLOCKTICKED        EQU     *
FCD1 16        3376:         TAB
FCD2 BBCE5B    3377:         ADDA      CLOCKTICKEDEVENT   SET UP WAKEUP COUNT FOR TIMEOUT TASK
FCD5 B7CE5B    3378:         STAA      CLOCKTICKEDEVENT
FCD8 FBCE0D    3379:         ADDB      CODE+SDOS:CLOCK+2  ADJUST TIME-OF-DAY...
FCDB F7CE0D    3380:         STAB      CODE+SDOS:CLOCK+2  AS MEASURED IN 60THS OF A SECOND
FCDE 2407      3381:         BCC        CLOCKTICK1 B/ DON'T NEED TO UPDATE UPPER 2 BYTES
               3382:         ;LDX    CODE+SDOS:CLOCK    UPDATE UPPER 2 BYTES
FCE0 FECE0B    3383:         LDX     CODE+SDOS:CLOCK
FCE3 08        3384:         INX
FCE4 FFCE0B    3385:         STX     CODE+SDOS:CLOCK
  FCE7         3386: CLOCKTICK1 ; DID WE JUST PASS MIDNITE ?
FCE7 B6CE0C    3387:         LDAA      CODE+SDOS:CLOCK+1  IS CODE+SDOS:CLOCK - "MIDNITE" >= 0 ?
               3388:         ;SUBD    #6656   (6656 = 5184000 MOD 65536; TRY IT!)
FCEA C000      3389:         SUBB      #(6656)&$FF
FCEC 821A      3390:         SBCA       #(6656)/256
FCEE B6CE0B    3391:         LDAA      CODE+SDOS:CLOCK
FCF1 824F      3392:         SBCA       #79     ( = 5184000 / 65536 )
FCF3 254D      3393:         BCS       CLOCKTICKEXIT      B/ NOT MIDNITE, GET OUT QUICK!
               3394:         ;LDX    #0      JUST PAST MIDNITE, RESET THE CLOCK
FCF5 CE0000    3395:         LDX     #0
FCF8 FFCE0B    3396:         STX     CODE+SDOS:CLOCK    SET CLOCK:=CLOCK MOD (1 DAY)
FCFB F7CE0D    3397:         STAB      CODE+SDOS:CLOCK+2
FCFE B6CE0E    3398:         LDAA      CODE+SDOS:DAY     INCREMENT DAY NUMBER
FD01 8B01      3399:         ADDA      #1      BECAUSE "INCA" DOESN'T WORK ON BCD STUFF
FD03 19        3400:         DAA
FD04 B7CE0E    3401:         STAA      CODE+SDOS:DAY
FD07 B6CE0F    3402:         LDAA      CODE+SDOS:MONTH  EXCEED # DAYS ALLOWED FOR THIS MONTH ?
FD0A 8D39      3403:         BSR      BCDTOBIN   CAUSE I DON'T THINK GOOD IN BCD
FD0C B7CE59    3404:         STAA      DAYSPERMONTHX+1  (GO LOOK UP IN TABLE)
               3405:         ;LDX    DAYSPERMONTHX




ASM/6800 1.4A0: FD0F SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 445; Form 1     CLOCK TICK AND TIMEOUT ROUTINES
SDOS11G.ASM
FD0F FECE58    3406:         LDX     DAYSPERMONTHX
FD12 B6CE0E    3407:         LDAA      CODE+SDOS:DAY     (GET CURRENT DAY NUMBER)
               3408:         ;CMPA     (DAYSPERMONTH-1)&$FF,X   (COMPARE TO # DAYS ALLOWED IN THIS MONTH)
FD15 A151      3409:         CMPA      (DAYSPERMONTH-1)&$FF,X
FD17 2329      3410:         BLS      CLOCKTICKEXIT      B/ LOWER, BYE!
               3411:         ;CMPA     #$29    # DAYS FOR THIS MONTH EXCEEDED
FD19 8129      3412:         CMPA      #$29
FD1B 2609      3413:         BNE      CLOCKTICK2 B/ MUST SWITCH TO NEXT MONTH
FD1D B6CE10    3414:         LDAA      CODE+SDOS:YEAR    I HATE LEAP YEAR STUFF; IS THIS A LEAP YEAR ?
FD20 8D23      3415:         BSR      BCDTOBIN   NEED I SAY MORE ?
FD22 8503      3416:         BITA      #3      IT MAKES THE "A MULTIPLE OF 4" TEST EASY
FD24 271C      3417:         BEQ      CLOCKTICKEXIT      B/ FEB 29 IS LEGAL
  FD26         3418: CLOCKTICK2 ; TIME FOR NEW MONTH
FD26 8601      3419:         LDAA      #1      SET DAY TO "1ST OF MONTH"
FD28 B7CE0E    3420:         STAA      CODE+SDOS:DAY
FD2B BBCE0F    3421:         ADDA      CODE+SDOS:MONTH  BUMP MONTH
FD2E 19        3422:         DAA               IN DECIMAL
FD2F B7CE0F    3423:         STAA      CODE+SDOS:MONTH
               3424:         ;CMPA     #$12    BET YOU CAN'T GUESS WHAT THIS MAGIC CONSTANT IS...
FD32 8112      3425:         CMPA      #$12
FD34 230C      3426:         BLS      CLOCKTICKEXIT      B/ MONTH IS OK, BYEBYE!
FD36 8601      3427:         LDAA      #1      NEW YEAR STRUCK, SET MONTH TO "JANUARY"
FD38 B7CE0F    3428:         STAA      CODE+SDOS:MONTH
FD3B BBCE10    3429:         ADDA      CODE+SDOS:YEAR    BUMP THE YEAR
FD3E 19        3430:         DAA               ALSO IN DECIMAL (WHY'D I PICK THAT??)
FD3F B7CE10    3431:         STAA      CODE+SDOS:YEAR    THAT'S ALL YOU'LL GET ME TO DO!
  FD42         3432: CLOCKTICKEXIT      EQU     *
               3433:         ;JMP    FORCESCHEDULE     TO FORCE THE TIMEOUT TASK TO RUN
FD42 7EFDCD    3434:         JMP     FORCESCHEDULE
               3435: *
               3436: *       BCDTOBIN -- CONVERTS BCD NUMBER IN (A) TO BINARY EQUIVALENT IN (A)
               3437: *
  FD45         3438: BCDTOBIN   EQU     *
FD45 16        3439:         TAB
FD46 C40F      3440:         ANDB      #$F     = RIGHT DIGIT
FD48 10        3441:         SBA
FD49 37        3442:         PSHB
FD4A 44        3443:         LSRA             = LEFT DIGIT * 8
FD4B 16        3444:         TAB
FD4C 44        3445:         LSRA             = LEFT DIGIT * 4




ASM/6800 1.4A0: FD4D SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 446; Form 1     CLOCK TICK AND TIMEOUT ROUTINES
SDOS11G.ASM
FD4D 44        3446:         LSRA             = LEFT DIGIT * 2
FD4E 1B        3447:         ABA                = LEFT DIGIT * 10
FD4F 33        3448:         PULB             ADD RIGHT DIGIT
FD50 1B        3449:         ABA                = LEFT DIGIT * 10 + RIGHT DIGIT
FD51 39        3450:         RTS             LOOK MA! A SUBR OF ALL(MOST) SINGLE BYTE INSTRUCTIONS!
               3451: 
FD52 31283130  3452: DAYSPERMONTH     FCB       $31,$28,$31,$30,$31,$30,$31,$31,$30,$31,$30,$31




ASM/6800 1.4A0: FD5A SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 447; Form 1     CLOCK TICK AND TIMEOUT ROUTINES
SDOS11G.ASM
               3454: *       TIMEOUT TASK CODE
               3455: *       FOR EACH WAKEUP, PROCESS NEXT TIMEOUT LIST ELEMENT
               3456: *       SUBTRACTS 1 TICK FOR EACH TIMEOUT LIST ELEMENT FROM TIMEOUT:FUSE
               3457: *       IF FUSE GETS ZEROED (OR GOES NEGATIVE), TRIGGERS ASSOCIATED TIMEOUT ROUTINE
               3458: *       ALL LIST ELEMENT UPDATING IS DONE WITH INTERRUPTS DISABLED...
               3459: *       TO PREVENT NASTY TIMING SPLINTERS
               3460: *
  FD5E         3461: TIMEOUTTASKBORED  EQU     *
               3462:         ;LDX    #CLOCKTICKEDEVENT  WAKE ME UP SOMEDAY
FD5E CECE5B    3463:         LDX     #CLOCKTICKEDEVENT
               3464:         ;JSR    WAITEVENT$       ZZZZZZZ....
FD61 BDFE74    3465:         JSR     WAITEVENT$
  FD64         3466: TIMEOUTTASK      EQU     *
               3467:         ;LDX    CODE+SDOS:CONFIGURATION    START AT TOP OF TIMEOUT LIST
FD64 FECE03    3468:         LDX     CODE+SDOS:CONFIGURATION
               3469:         ;LDX    CNFG:TIMEOUTLIST,X
FD67 EE22      3470:         LDX     CNFG:TIMEOUTLIST,X
               3471: *       BEQ      TIMEOUTTASKBORED  B/ NO TIMEOUT LIST
               3472: *       ASSERT: TIMEOUT LIST IS *NOT* EMPTY!
  FD69         3473: TIMEOUTTASKL     ; PROCESS TIMEOUT LIST ELEMENT
FD69 FFCE5C    3474:         STX     TIMEOUTLEPTR    SET UP LIST ELEMENT POINTER
               3475:         ;LDX    #TIMEOUTLEH     FIRE UP THE LIST ELEMENT HANDLER
FD6C CEFD9D    3476:         LDX     #TIMEOUTLEH
               3477:         ;JSR    STARTIO$
FD6F BDFEA7    3478:         JSR     STARTIO$




ASM/6800 1.4A0: FD6F SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 448; Form 1     CLOCK TICK AND TIMEOUT ROUTINES
SDOS11G.ASM
               3480: *
               3481: *       The following code is the secondary SDOS checksum check.
               3482: *       Its purpose is to detect that the first checksum routine has
               3483: *       been tampered with, and to blow up unpredictably when this occurs.
               3484: *
               3485:         ;ldx    exitscanptr     pick up place where we left off last
FD72 DE02      3486:         LDX     exitscanptr
               3487:         ;ldb    exitpartialchksum       get partial checksum as of last round
FD74 D604      3488:         LDAB      exitpartialchksum
FD76 58        3489:         aslb            do 1 step of incremental checksum check
FD77 E90F      3490:         adcb    15,x
               3491:         ;stb    exitpartialchksum       save partial checksum value
FD79 D704      3492:         STAB      exitpartialchksum
FD7B 08        3493:         inx             bump pointer for next round
FD7C 8CD838    3494:         cpx     #exitchksumend-15       reached end of area to be checksummed?
FD7F 2609      3495:         bne     secondarychecksum1      b/ not yet
               3496:         ;ldx    #exitchksumbase-15      yes, restart pointer from beginning
FD81 CED7FC    3497:         LDX     #exitchksumbase-15
               3498: *       Assert: exitpartialchksum is zero here (if EXIT not tampered)
               3499:         ;ZZZ     addb    Usertasktcb+tcb:stack+1 add checksum value to user stack poin
FD84 01        3500:         nop
FD85 01        3501:         nop
FD86 01        3502:         nop
               3503:         ;ZZZ     stab    Usertasktcb+tcb:stack+1 which causes user to die mysteriously
FD87 01        3504:         nop
FD88 01        3505:         nop
FD89 01        3506:         nop
  FD8A         3507: secondarychecksum1      ; end of secondary checksum code
FD8A DF02      3508:         stx     exitscanptr     save scan pointer for next clock tick
               3509: *
               3510: *       NOW, FINISH PROCESSING THE CLOCK TICK
               3511: *
               3512:         ;LDX    #CLOCKTICKEDEVENT  WAKE ME UP WHEN THE SUN SHINES AGAIN
FD8C CECE5B    3513:         LDX     #CLOCKTICKEDEVENT
               3514:         ;DEC     ,X      TO TAKE CARE OF THE CLOCK TICK WE JUST PROCESSED
FD8F 6A00      3515:         DEC      0,X
               3516:         ;JSR    WAITEVENT$       ZZZZZZ....
FD91 BDFE74    3517:         JSR     WAITEVENT$
               3518:         ;LDX    TIMEOUTLEPTR    WAKE UP, SLEEPYHEAD!
FD94 FECE5C    3519:         LDX     TIMEOUTLEPTR




ASM/6800 1.4A0: FD94 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 449; Form 1     CLOCK TICK AND TIMEOUT ROUTINES
SDOS11G.ASM
               3520:         ;LDX    TIMEOUT:LINK,X  FIND NEXT TIMEOUT LIST ELEMENT
FD97 EE00      3521:         LDX     TIMEOUT:LINK,X
FD99 26CE      3522:         BNE      TIMEOUTTASKL     B/ NOT AT END OF LIST, GO PROCESS THIS ELEMENT
FD9B 20C7      3523:         BRA       TIMEOUTTASK      END OF LIST HIT, START AT TOP OF LIST




ASM/6800 1.4A0: FD9B SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 450; Form 1     CLOCK TICK AND TIMEOUT ROUTINES
SDOS11G.ASM
               3525: *       TIMEOUT LIST ELEMENT PROCESSOR
               3526: *       STARTED BY "STARTIO" CALL FROM TIMEOUT TASK
               3527: *
  FD9D         3528: TIMEOUTLEH      EQU     *
               3529:         ;LDX    TIMEOUTLEPTR    NOTE: ALL INTERRUPTS ARE DISABLED HERE!
FD9D FECE5C    3530:         LDX     TIMEOUTLEPTR
               3531:         ;LDD    TIMEOUT:FUSE,X  DO DOUBLE PRECISION DECREMENT
FDA0 E603      3532:         LDAB      (TIMEOUT:FUSE)+1,X
FDA2 A602      3533:         LDAA      TIMEOUT:FUSE,X
               3534:         ;BEQD    IORTI1  B/ THIS TIMEOUT LIST ELEMENT IS DE-FUSED
FDA4 2603      3535:         BNE      MACRO:0030
FDA6 5D        3536:         TSTB
FDA7 272A      3537:         BEQ      IORTI1
  FDA9         3538: MACRO:0030
FDA9 F0CE5A    3539:         SUBB      NTIMEOUTBLKS     SUBTRACT # CLOCK TICKS THAT WILL PASS
FDAC 8200      3540:         SBCA       #0      BEFORE WE GET BACK TO THIS LIST ELEMENT AGAIN
FDAE 2509      3541:         BCS       TIMEOUTLEH3     B/ TIMED OUT!
               3542:         ;STD    TIMEOUT:FUSE,X  PERHAPS TIME OUT DID NOT OCCUR; STORE FUSE BACK
FDB0 E703      3543:         STAB      (TIMEOUT:FUSE)+1,X
FDB2 A702      3544:         STAA      TIMEOUT:FUSE,X
               3545:         ;BNED    IORTI1  B/ TIMEOUT DID NOT OCCUR
FDB4 261D      3546:         BNE      IORTI1
FDB6 5D        3547:         TSTB
FDB7 261A      3548:         BNE      IORTI1
  FDB9         3549: TIMEOUTLEH3     ; TIMEOUT OCCURRED
               3550:         ;CLR     TIMEOUT:FUSE,X  DEFUSE THIS LIST ELEMENT
FDB9 6F02      3551:         CLR      TIMEOUT:FUSE,X
               3552:         ;CLR     TIMEOUT:FUSE+1,X
FDBB 6F03      3553:         CLR      TIMEOUT:FUSE+1,X
               3554:         ;LDD    TIMEOUT:DCB,X     FETCH DCB POINTER FROM TIMEOUT BLOCK
FDBD E607      3555:         LDAB      (TIMEOUT:DCB)+1,X
FDBF A606      3556:         LDAA      TIMEOUT:DCB,X
               3557:         ;JMP    [TIMEOUT:ROUTINE,X]     AND GO TO THE DEVICE INTERRUPT ROUTINE
FDC1 EE04      3558:         LDX     TIMEOUT:ROUTINE,X
FDC3 6E00      3559:         JMP     0,X
               3560: *       IT WILL DO THE IORTI FOR US




ASM/6800 1.4A0: FDC3 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 451; Form 1     *** TASK SCHEDULER ***
SDOS11G.ASM
               3562: *       ASSERT: INTERRUPTS ARE OFF AND SDOS:STACKSWITCHED=:FF
               3563: *
  FDC5         3564: TASKRTI  ;LDX    CODE+SDOS:CURRENTASK       QUICK EXIT FROM INTERRUPT BACK TO TASK
FDC5 FECE1E    3565:         LDX     CODE+SDOS:CURRENTASK
FDC8 AE02      3566:         LDS     TCB:STACK,X POINTS TO CONTEXT BLOCK; WE NEVER SAVED 0-7
  FDCA         3567: FORCERTI ;JMP    INTRTI  EXIT FROM INTERRUPT ROUTINE
FDCA 7ECF83    3568:         JMP     INTRTI
               3569: 
  FDCD         3570: FORCESCHEDULE     ; FORCE SCHEDULER TO LOOK AROUND AFTER INTERRUPT
               3571: * NOTE: 6809 DPR REGISTER IS UNDEFINED HERE!
               3572:         ;CLR     SURPRISE        SYSTEM STATE HAS CHANGED SIGNIFICANTLY
FDCD 7FCF7A    3573:         CLR      SURPRISE
  FDD0         3574: IORTI   ; SYSTEM STATE HAS NOT CHANGED SIGNIFICANTLY
               3575:         ;JSR    INTDISABLE        SO WE DON'T GET INTERRUPTED...
FDD0 BDCF7D    3576:         JSR     INTDISABLE
               3577: *                       IF CODE+SDOS:STACKSWITCHED GOES TO -1!
  FDD3         3578: IORTI1  ; ENTRY POINT FOR TIMEOUT LIST ELEMENT HANDLER
               3579:         ;DEC     CODE+SDOS:STACKSWITCHED     SCHEDULER OR INTERRUPT ROUTINE ALREADY AC
FDD3 7ACE11    3580:         DEC      CODE+SDOS:STACKSWITCHED
FDD6 2AF2      3581:         BPL      FORCERTI YES, GO BACK TO IT...
FDD8 B6CF7A    3582:         LDAA      SURPRISE        ANYTHING INTERESTING HAPPEN ?
FDDB BACF79    3583:         ORAA      DONTSTOPME      OR ARE WE IN TASK CRITICAL CODE ?
FDDE 26E5      3584:         BNE      TASKRTI  B/ NO, GO BACK TO TASK NOW
  FDE0         3585: PUSH0TO7        ; SAVE LOCATIONS 0 TO 7 IN TCB
               3586:         ;INC     CODE+SDOS:STACKSWITCHED     REMEMBER THAT "STACKS ARE SWITCHED"
FDE0 7CCE11    3587:         INC      CODE+SDOS:STACKSWITCHED
               3588: *                       ASSERT: SDOS:STACKSWITCHED=0
               3589:         ;JSR    INTENABLE RE-ENABLE INTERRUPTS
FDE3 BDCF80    3590:         JSR     INTENABLE
               3591:         ;LDX    CODE+SDOS:CURRENTASK       BUT FIRST WE MUST SAVE THE REST OF THE TASK
FDE6 FECE1E    3592:         LDX     CODE+SDOS:CURRENTASK
  0000         3593:         IF      M6809
 *S*           3594:         LDU     TCB:STACK,X SET DPR USED BY SCHEDULER TO LAST TASK DPR
 *S*           3595:         ;LDA     REG:DP,U
 *S*           3596:         LDAA      REG:DP
 *S*           3597:         ;TFR    A,DP
 *S*           3598:         TADP
               3599:         FIN
               3600:         ;LDD    $0              SAVE LOCATIONS 0-7
FDE9 D601      3601:         LDAB      $0+1




ASM/6800 1.4A0: FDEB SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 452; Form 1     *** TASK SCHEDULER ***
SDOS11G.ASM
FDEB 9600      3602:         LDAA      $0
               3603:         ;STD    TCB:SCRATCHPAD+0,X
FDED E709      3604:         STAB      (TCB:SCRATCHPAD+0)+1,X
FDEF A708      3605:         STAA      TCB:SCRATCHPAD+0,X
               3606:         ;LDD    $2
FDF1 D603      3607:         LDAB      $2+1
FDF3 9602      3608:         LDAA      $2
               3609:         ;STD    TCB:SCRATCHPAD+2,X
FDF5 E70B      3610:         STAB      (TCB:SCRATCHPAD+2)+1,X
FDF7 A70A      3611:         STAA      TCB:SCRATCHPAD+2,X
               3612:         ;LDD    $4
FDF9 D605      3613:         LDAB      $4+1
FDFB 9604      3614:         LDAA      $4
               3615:         ;STD    TCB:SCRATCHPAD+4,X
FDFD E70D      3616:         STAB      (TCB:SCRATCHPAD+4)+1,X
FDFF A70C      3617:         STAA      TCB:SCRATCHPAD+4,X
               3618:         ;LDD    $6
FE01 D607      3619:         LDAB      $6+1
FE03 9606      3620:         LDAA      $6
               3621:         ;STD    TCB:SCRATCHPAD+6,X
FE05 E70F      3622:         STAB      (TCB:SCRATCHPAD+6)+1,X
FE07 A70E      3623:         STAA      TCB:SCRATCHPAD+6,X




ASM/6800 1.4A0: FE07 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 453; Form 1     *** TASK SCHEDULER ***
SDOS11G.ASM
  FE09         3625: SCHEDLDS ; RESET TO BASE OF INTERRUPT STACK
FE09 BECF86    3626:         LDS     INTERRUPTSTACK    USE INTERRUPT STACK FOR SCHEDULER'S STACK
  FE0C         3627: SCHEDTOP ; START SCANNING TCB LIST
FE0C 8601      3628:         LDAA      #1      WE'RE STARTING OVER, NO BAD DECISIONS
FE0E B7CF7A    3629:         STAA      SURPRISE        "NO SURPRISES HAVE OCCURRED"
               3630:         ;LDX    CODE+SDOS:CONFIGURATION    GET POINTER TO LIST OF TASKS
FE11 FECE03    3631:         LDX     CODE+SDOS:CONFIGURATION
               3632:         ;LDX    CNFG:TASKQUEUE,X
FE14 EE20      3633:         LDX     CNFG:TASKQUEUE,X
  FE16         3634: SCHEDLOOP        EQU     *
FE16 FFCE1E    3635:         STX     CODE+SDOS:CURRENTASK       SAVE POINTER TO THIS TCB IN CASE HE'S READY
FE19 8D0B      3636:         BSR      SCHEDTEST        GO TEST WAKE UP CONDITION
FE1B 2612      3637:         BNE      JUSTREADY        B/ TASK JUST WENT READY!
               3638:         ;LDX    CODE+SDOS:CURRENTASK       GET TCB ADDRESS
FE1D FECE1E    3639:         LDX     CODE+SDOS:CURRENTASK
               3640:         ;LDX    TCB:LNK,X FOLLOW TO NEXT TCB
FE20 EE00      3641:         LDX     TCB:LNK,X
FE22 26F2      3642:         BNE      SCHEDLOOP        LOOP IF NOT END OF LIST
FE24 20E6      3643:         BRA       SCHEDTOP ELSE START PROCESSING THE LIST AGAIN
               3644: 
  FE26         3645: SCHEDTEST        ; GET PARAMETER AND GO TEST WAKE-UP CONDITION
               3646:         ;LDD    TCB:COND,X PUSH WAKE-UP SUBROUTINE ADDRESS ONTO THE STACK
FE26 E605      3647:         LDAB      (TCB:COND)+1,X
FE28 A604      3648:         LDAA      TCB:COND,X
               3649:         ;PSHD
FE2A 37        3650:         PSHB
FE2B 36        3651:         PSHA
               3652:         ;LDX    TCB:PARAM,X GET PARAMETER FOR WAKE-UP ROUTINE
FE2C EE06      3653:         LDX     TCB:PARAM,X
FE2E 39        3654:         RTS             AND PASS CONTROL TO IT (RETURN ADDRESS PUSHED BY BSR)
               3655: **** NOTE: DPR NOT DEFINED ON ENTRY TO WAKE-UP CONDITION SUBROUTINE ****




ASM/6800 1.4A0: FE2E SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 454; Form 1     *** TASK SCHEDULER ***
SDOS11G.ASM
  FE2F         3657: JUSTREADY        ; TASK JUST BECAME READY
               3658:         ;LDX    CODE+SDOS:CURRENTASK       GET ADDRESS OF TCB THAT JUST WENT READY
FE2F FECE1E    3659:         LDX     CODE+SDOS:CURRENTASK
FE32 C6FE      3660:         LDAB      #EXECUTING/256   MARK TCB AS 'EXECUTING'
FE34 E704      3661:         STAB      TCB:COND,X SO INVOKING WAKE-UP ROUTINE...
FE36 C63E      3662:         LDAB      #EXECUTING&$FF   WILL SPEED UP FURTHER DISPATCHES
FE38 E705      3663:         STAB      TCB:COND+1,X
               3664:         ;LDX    TCB:STACK,X GET TASK'S STACK POINTER
FE3A EE02      3665:         LDX     TCB:STACK,X
FE3C A703      3666:         STAA      REG:A,X  SET TASK'S A REGISTER TO WAKE UP CODE
  FE3E         3667: EXECUTING        ; TASK WAS IN EXECUTION WHEN STOPPED
               3668:         ;LDX    CODE+SDOS:CURRENTASK       SWITCH TO TASK'S STACK
FE3E FECE1E    3669:         LDX     CODE+SDOS:CURRENTASK
  0000         3670:         IF      M6809
 *S*           3671:         LDU     TCB:STACK,X SELECT DPR FOR PAGE ZERO SCRATCH
 *S*           3672:         ;LDA     REG:DP,U
 *S*           3673:         LDAA      REG:DP
 *S*           3674:         ;TFR    A,DP
 *S*           3675:         TADP
               3676:         FIN
               3677:         ;LDD    TCB:SCRATCHPAD+0,X    RESTORE LOCATIONS 0 TO 7
FE41 E609      3678:         LDAB      (TCB:SCRATCHPAD+0)+1,X
FE43 A608      3679:         LDAA      TCB:SCRATCHPAD+0,X
               3680:         ;STD    $0
FE45 D701      3681:         STAB      $0+1
FE47 9700      3682:         STAA      $0
               3683:         ;LDD    TCB:SCRATCHPAD+2,X
FE49 E60B      3684:         LDAB      (TCB:SCRATCHPAD+2)+1,X
FE4B A60A      3685:         LDAA      TCB:SCRATCHPAD+2,X
               3686:         ;STD    $2
FE4D D703      3687:         STAB      $2+1
FE4F 9702      3688:         STAA      $2
               3689:         ;LDD    TCB:SCRATCHPAD+4,X
FE51 E60D      3690:         LDAB      (TCB:SCRATCHPAD+4)+1,X
FE53 A60C      3691:         LDAA      TCB:SCRATCHPAD+4,X
               3692:         ;STD    $4
FE55 D705      3693:         STAB      $4+1
FE57 9704      3694:         STAA      $4
               3695:         ;LDD    TCB:SCRATCHPAD+6,X
FE59 E60F      3696:         LDAB      (TCB:SCRATCHPAD+6)+1,X




ASM/6800 1.4A0: FE5B SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 455; Form 1     *** TASK SCHEDULER ***
SDOS11G.ASM
FE5B A60E      3697:         LDAA      TCB:SCRATCHPAD+6,X
               3698:         ;STD    $6
FE5D D707      3699:         STAB      $6+1
FE5F 9706      3700:         STAA      $6
FE61 B6CF7A    3701:         LDAA      SURPRISE        DID WE GET SURPRISED ?
FE64 27A3      3702:         BEQ      SCHEDLDS YES, GO SCHEDULE AGAIN!
               3703:         ;JSR    INTDISABLE        INTERRUPTS OFF SO WE CAN DIDDLE WITHOUT TROUBLE
FE66 BDCF7D    3704:         JSR     INTDISABLE
FE69 AE02      3705:         LDS     TCB:STACK,X SWITCH TO USER'S STACK
               3706:         ;DEC     CODE+SDOS:STACKSWITCHED     FLAG "USING TASK'S STACK, NOT INTERRUPT S
FE6B 7ACE11    3707:         DEC      CODE+SDOS:STACKSWITCHED
               3708: *                       ASSERT: SDOS:STACKSWITCHED=:FF
               3709:         ;JMP    INTRTI  AND PICK UP EXECUTION OF USER TASK
FE6E 7ECF83    3710:         JMP     INTRTI




ASM/6800 1.4A0: FE6E SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 456; Form 1     *** TASK SCHEDULER ***
SDOS11G.ASM
  FE71         3712: WAITEVENTCOND     ; WAIT FOR EVENT CONDITIONAL WAKE-UP ROUTINE
FE71 A600      3713:         LDAA      ,X      FETCH THE EVENT (A BYTE) OF INTEREST
  FE73         3714: WAITEVENTCONDRTS
FE73 39        3715:         RTS             RETURN CC <> 0 IF BYTE IS NON-ZERO
               3716: *
               3717: *       WAITEVENT$ -- WAIT FOR EVENT (X) TO GO NON-ZERO
               3718: *
  FE74         3719: WAITEVENT$       EQU     *
FE74 A600      3720:         LDAA      ,X      HAS EVENT ALREADY OCCURRED ?
FE76 26FB      3721:         BNE      WAITEVENTCONDRTS  B/ YES, AVOID INVOKING THE SCHEDULER!
               3722:         ;LDD    #WAITEVENTCOND    GET ADDRESS OF CONDITIONAL TEST ROUTINE
FE78 C671      3723:         LDAB      #(WAITEVENTCOND)&$FF
FE7A 86FE      3724:         LDAA      #(WAITEVENTCOND)/256
               3725: *       BSR      WAIT$
               3726: *       RTS
               3727: *
               3728: *       WAIT$ -- MAKE TASK WAIT FOR WAKEUP CONDITION
               3729: *       (A,B) POINTS TO WAKE UP CONDITION TEST SUBROUTINE...
               3730: *       WHICH IS CONTINUALLY CALLED BY THE SCHEDULER
               3731: *       (X) CONTAINS PARAMETER TO BE PASSED IN (X) TO WAKE-UP TEST
               3732: *       A NON-ZERO CONDITION CODE ON EXIT FROM WAKE-UP ROUTINE...
               3733: *       CAUSES THE TASK TO BE WOKEN; (A) FROM WAKE-UP ROUTINE...
               3734: *       WILL BE PASSED TO TASK IN (A) REGISTER
               3735: *       WAKE UP SUBROUTINE IS NOT CALLED ANYMORE.
               3736: *       ALL REGISTERS DESTROYED; SCRATCHPAD PRESERVED
               3737: *
  FE7C         3738: WAIT$    ; (X) POINT TO WAIT SUBROUTINE FOR TASK
               3739:         ;INC     DONTSTOPME      SO WE COME RIGHT BACK AFTER INTERRUPT
FE7C 7CCF79    3740:         INC      DONTSTOPME
               3741: *                       ASSERT: DONTSTOPME=1
FE7F FFCF7B    3742:         STX     SCHEDX   SAVE PARAMETER OF WAKE UP ROUTINE
               3743:         ;LDX    CODE+SDOS:CURRENTASK       REMEMBER ADDRESS OF WAKE-UP SUBROUTINE
FE82 FECE1E    3744:         LDX     CODE+SDOS:CURRENTASK
               3745:         ;STD    TCB:COND,X
FE85 E705      3746:         STAB      (TCB:COND)+1,X
FE87 A704      3747:         STAA      TCB:COND,X
               3748:         ;LDD    SCHEDX   SAVE PARAMETER FOR WAKE-UP SUBROUTINE
FE89 F6CF7C    3749:         LDAB      SCHEDX+1
FE8C B6CF7B    3750:         LDAA      SCHEDX
               3751:         ;STD    TCB:PARAM,X IN TCB




ASM/6800 1.4A0: FE8F SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 457; Form 1     *** TASK SCHEDULER ***
SDOS11G.ASM
FE8F E707      3752:         STAB      (TCB:PARAM)+1,X
FE91 A706      3753:         STAA      TCB:PARAM,X
  0001         3754:         IF      M6800!M6801
               3755:         ;PSHD           TURN RETURN ADDRESS INTO A CONTEXT BLOCK
FE93 37        3756:         PSHB
FE94 36        3757:         PSHA
FE95 4F        3758:         CLRA              MAKE A ZERO TO STORE
FE96 36        3759:         PSHA             A ZERO FOR B REGISTER
FE97 36        3760:         PSHA             A ZERO FOR THE A REGISTER
FE98 36        3761:         PSHA             A ZERO CONDITION CODE BYTE
  0001         3762:         ELSE    (M6809)
 *S*           3763:         CLI              MAKE SURE TASK INTERRUPTS ARE ON WHEN HE IS AWOKEN AGAIN
 *S*           3764:         PSHS    U,Y,X,DP,B,A,CC
               3765:         FIN
               3766:         ;JSR    INTDISABLE        SHUT DOWN THE WORLD...
FE99 BDCF7D    3767:         JSR     INTDISABLE
               3768: *                       SO WE CAN SWITCH STACKS SAFELY
FE9C AF02      3769:         STS     TCB:STACK,X SAVE TASK'S STACK POINTER
FE9E BECF86    3770:         LDS     INTERRUPTSTACK    AND SWITCH TO THE INTERRUPT STACK
               3771:         ;DEC     DONTSTOPME      SWITCH FROM TASK CRITICAL MODE...
FEA1 7ACF79    3772:         DEC      DONTSTOPME
               3773: *                       TO "INTERRUPT" MODE (STACKSWITCHED WILL SAVE US!)
               3774:         ;JMP    PUSH0TO7        SAVE TEMPS AND THEN SCHEDULE SOME OTHER TASK
FEA4 7EFDE0    3775:         JMP     PUSH0TO7
               3776: *       STARTIO$ -- (X) POINTS TO INTERRUPT ROUTINE ADDRESS
               3777: *       SIMULATES AN I/O INTERRUPT AND TRANSFERS CONTROL TO (X)
               3778: *       ALL REGISTERS DESTROYED EXCEPT (A,B) WHICH ARE PASSED TO INTERRUPT ROUTINE
               3779: *       USED TO START AN INTERRUPT ROUTINE UP; CALLABLE ONLY BY TASK LEVEL ROUTINES
               3780: *
  FEA7         3781: STARTIO$ EQU     *
  0001         3782:         IF      M6800!M6801
               3783:         ;JSR    INTDISABLE        DISABLE INTERRUPTS
FEA7 BDCF7D    3784:         JSR     INTDISABLE
FEAA FFCF7B    3785:         STX     SCHEDX   SAVE INTERRUPT ROUTINE ADDRESS
FEAD 34        3786:         DES             PUSH A GARBAGED X REGISTER
FEAE 34        3787:         DES
               3788:         ;PSHD           PUSH D REGISTER [NOTE: (D) IS PASSED TO ROUTINE INVOKED BY STA
FEAF 37        3789:         PSHB
FEB0 36        3790:         PSHA
FEB1 34        3791:         DES             RESERVE SPACE FOR CC BITS ON STACK




ASM/6800 1.4A0: FEB2 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 458; Form 1     *** TASK SCHEDULER ***
SDOS11G.ASM
FEB2 30        3792:         TSX             ZERO CC BITS (ENABLING INTERRUPTS ON RETURN)
               3793:         ;CLR     0,X
FEB3 6F00      3794:         CLR      0,X
               3795:         ;INC     CODE+SDOS:STACKSWITCHED     FLAG 'IN AN INTERRUPT ROUTINE'
FEB5 7CCE11    3796:         INC      CODE+SDOS:STACKSWITCHED
               3797:         ;LDX    CODE+SDOS:CURRENTASK       LEAVE TCB:COND = "EXECUTING"
FEB8 FECE1E    3798:         LDX     CODE+SDOS:CURRENTASK
FEBB AF02      3799:         STS     TCB:STACK,X AND SWITCH TO THE INTERRUPT STACK
FEBD BECF86    3800:         LDS     INTERRUPTSTACK    ...
               3801:         ;JMP    [SCHEDX] GO TO INTERRUPT ROUTINE ADDRESS
FEC0 FECF7B    3802:         LDX     SCHEDX
FEC3 6E00      3803:         JMP     0,X
  0001         3804:         ELSE    (M6809)
 *S*           3805:         ;JSR    INTDISABLE        DISABLE INTERRUPTS
 *S*           3806:         JSR     INTDISABLE
 *S*           3807:         PSHS    U,Y,X,DP,B,A      PUSH REST OF CONTEXT BLOCK
 *S*           3808:         LDAA      #$80    = CC BYTE WITH "ENTIRE CONTEXT ON STACK" BIT SET
 *S*           3809:         PSHA
 *S*           3810:         ;LDA     1,S     RESTORE (D) TO ENTRY VALUE
 *S*           3811:         TSX
 *S*           3812:         LDAA      1,X
 *S*           3813:         ;INC     CODE+SDOS:STACKSWITCHED     FLAG 'IN AN INTERRUPT ROUTINE'
 *S*           3814:         INC      CODE+SDOS:STACKSWITCHED
 *S*           3815:         LDU     CODE+SDOS:CURRENTASK       LEAVE TCB:COND = "EXECUTING"
 *S*           3816:         STS     TCB:STACK,U AND SWITCH TO THE INTERRUPT STACK
 *S*           3817:         LDS     INTERRUPTSTACK    ...
 *S*           3818:         ;JMP    ,X      GO TO INTERRUPT ROUTINE ADDRESS
 *S*           3819:         JMP     0,X
               3820:         FIN
               3821: 
  FEC5         3822: IOINTERRUPT     ; IO INTERRUPT GOES HERE FIRST!
               3823:         ;INC     CODE+SDOS:STACKSWITCHED     BUMP NUMBER OF NESTED INTERRUPTS
FEC5 7CCE11    3824:         INC      CODE+SDOS:STACKSWITCHED
FEC8 2608      3825:         BNE      IOINTJ  B/ ALREADY SWITCHED TO INTERRUPT STACK
               3826:         ;LDX    CODE+SDOS:CURRENTASK       SWITCH TO SCHEDULER'S STACK
FECA FECE1E    3827:         LDX     CODE+SDOS:CURRENTASK
FECD AF02      3828:         STS     TCB:STACK,X SAVE TASK'S STACK IN HIS TCB
FECF BECF86    3829:         LDS     INTERRUPTSTACK    GET THE SCHEDULER'S STACK INSTEAD
  FED2         3830: IOINTJ ; JUMP TO INTERRUPT ROUTINE
  0000         3831:         IF      M6809




ASM/6800 1.4A0: FECF SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 459; Form 1     *** TASK SCHEDULER ***
SDOS11G.ASM
 *S*           3832:         ;LDA     #$FF    SET DPR TO FIXED CONSTANT
 *S*           3833:         LDAA      #$FF
 *S*           3834:         ;TFR    A,DP
 *S*           3835:         TADP
               3836:         FIN
               3837:         ;JMP    JMPIOINT        GO DEAL WITH I/O INTERRUPT
FED2 7ECF88    3838:         JMP     JMPIOINT
               3839: 
  001E         3840: PATCHSPACE  RPT     30     PATCH SPACE
FED5 3F        3841:         SWI




ASM/6800 1.4A0: FEF2 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 460; Form 1     *** TASK SCHEDULER ***
SDOS11G.ASM
  FEF3         3843: SDOS:END        EQU     *
               3844: 
  30F3         3845: ACTSIZE   EQU     *-CODE   ACTUAL RESIDENT SDOS SIZE
  0000         3846:         IF      ACTSIZE>>SDOS:ESTSIZE
 *S*           3847:         ?SDOS TOO BIG FOR MEMORY SIZE SPECIFIED
               3848:         FIN
               3849:         END




ASM/6800 1.4A0: FEF2 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 461; Form 1     Symbols Sorted by Name
SDOS11G.ASM
Symbols Sorted by Name:

 ACKCONTROLC/CFA0                ACTSIZE/30F3    ADDTOFILEOV/ECD3                ADDTOFILESIZE/ECAE
 ADJUSTCOLBS/E0EB                ADJUSTCOLBUMP/E0E3              ADJUSTCOLRTS/E0E2
 ADJUSTCOLTAB/E0F4               ADJUSTCOLUMNCOUNT/E0C9          ADJUSTCOLZERO/E0DF
 ALLOC2/ED8F     ALLOC2A/EDB0    ALLOC2B/EDB4   *ALLOC2BIG/EDAC  ALLOC3/EDE3     ALLOCATECLUSTERS/ED1B
 ALLOCATIONCOUNT/CED8            ALLOCATIONPLCN/CEDA             ALLOCDATACLUSTERS/EE13
 ALLOCDATACLUSTJ/EE93            ALLOCDC1/EE6F   ALLOCDC2/EE1E   ALLOCDC3/EE57   ALLOCDC4/EE4E
 ALLOCDC5/EE0B   ALLOCDONE/EE85  ALLOCERRED/EE0A                 ALLOCINITHC/EDCC
 ALLOCINITHS/EE96                ALLOCRDSIS/2560                 ALLOCRDSISRTS/2592
*ASCII:ACK/0006 *ASCII:BEL/0007  ASCII:BS/0008  *ASCII:CAN/0018  ASCII:CR/000D  *ASCII:DC1/0011
*ASCII:DC2/0012 *ASCII:DC3/0013 *ASCII:DC4/0014 *ASCII:DLE/0010 *ASCII:EM/0019  *ASCII:ENQ/0005
*ASCII:EOT/0004 *ASCII:ESC/001B *ASCII:ETB/0017 *ASCII:ETX/0003  ASCII:FF/000C  *ASCII:FS/001C
*ASCII:GS/001D   ASCII:HT/0009   ASCII:LF/000A   ASCII:MASK/007F                *ASCII:NAK/0015
*ASCII:NULL/0000                *ASCII:RS/001E   ASCII:RUBOUT/007F              *ASCII:SI/000F
*ASCII:SO/000E  *ASCII:SOH/0001  ASCII:SPACE/0020               *ASCII:STX/0002 *ASCII:SUB/001A
*ASCII:SYN/0016 *ASCII:US/001F  *ASCII:VT/000B   ATTNCHECK/D644  ATTNCHECK:SCLEN/0002
 AVAILABLECOUNT/CEE2             AVAILABLELCN/CEE0              *BASICFLAGS/00F0
 BCDTOASCII/2448                 BCDTOBIN/FD45   BLOCKCOMPARE/EA29               BLOCKCOMPARERTS/EA3C
 BLOCKMOVE/FBD2 *BLOCKMOVEDOWN/FBD2              BLOCKMOVEDOWN16/FC50            BLOCKMOVEDOWN4/FC18
 BLOCKMOVEDOWNA/FC10             BLOCKMOVEDOWNB/FC4C             BLOCKMOVEDOWND/FCCA
 BLOCKMOVEDOWNE/FBF8             BLOCKMOVEX/0006                *BOOT:CHECKSUM/001F
 BOOT:CREATIONDATE/0018          BOOT:DIRLSN/001B                BOOT:DISKID/0020
 BOOT:DISKIDSIZE/0020            BOOT:DISKINFO/0010              BOOT:DISKINFOLEN/0010
 BOOT:FILESYSTEMVERSION/0010    *BOOT:IPLDATA/0000              *BOOT:MAPALGORITHM/0016
*BOOT:MIDALLOC/0014             *BOOT:MINALLOC/0012              BOOT:NSPC/0011  BOOT:PARAMSIZE/0007
 BOOT:SIZE/0040  BUFFER/CFE8     BUFFERPOINTER/CE9B              CANTLOAD/DA00   CANTRUNMSG/21F5
 CANTRUNMSGEND/2264             *CC:ACTIVATIONCK/001D           *CC:ALTERPROFILE/0019
*CC:BACKGROUND/0021             *CC:CLRINPUT/0015               *CC:CLROUTPUT/0016
*CC:COLORING/0020                CC:DEVICESPECIFICOP/0010        CC:DISMOUNTDISK/0011
 CC:DUMPBUFFERS/0001            *CC:ECHO/0010   *CC:FORMAT/0015 *CC:IDLES/0012  *CC:KILLENABLE/0023
*CC:KILLPROOF/0022              *CC:MULTISECTORREAD/0013        *CC:MULTISECTORWRITE/0014
*CC:NOECHO/0011 *CC:NOWRAP/001F  CC:POSITION/0000                CC:POSITIONTOEND/0013
*CC:SETACTBLOCK/0014            *CC:SETBAUDRATE/0025            *CC:SETFIELDSIZE/001B
 CC:SETFILEDATE/0010            *CC:SETFILEPROT/0011            *CC:SETFILESIZE/0012
*CC:SETINPUTTRANSLATION/0026     CC:SETMAPALGORITHM/0012        *CC:SETOUTPUTTIMEOUT/0024
*CC:SETPARAMS/001C              *CC:SETPROFILE/0018             *CC:SETREADTIMEOUT/0017
*CC:TABS/0013    CC:UNLOCKDISK/0010             *CC:WAITDONE/0016               *CC:WRAP/001E
*CC:WRITEEDITLINE/001A           CHAIN/D93E      CHAIN1/D979    *CHAIN:LENGTH/0006
*CHAIN:NAMEP/0004                CHAIN:SCLEN/000E                CHAINOK/D971    CHAINTOSERIALNO.SYS/2728




ASM/6800 1.4A0: FEF2 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 462; Form 1     Symbols Sorted by Name
SDOS11G.ASM
 CHANGED/0000    CHECKCHANNELCL1/D257            CHECKCHANNELCLOSED/D255         CHECKCHANNELOPEN/D240
 CHECKMUSTZERO/F561              CHECKRDLEN/D8A0                 CHECKRDLEN1/D8C4
 CHECKRDLEN2/D8CF                CHECKREADDONE/E12A              CHECKREADDONE1/E138
 CHECKSCLEN/D8FD                 CHECKWRITEDONE/E139             CHECKWRITEDONE1/E14D
 CHECKWRLEN/D8DC                 CLOCKTICK1/FCE7                 CLOCKTICK2/FD26
 CLOCKTICKED/FCD1                CLOCKTICKEDEVENT/CE5B           CLOCKTICKEXIT/FD42              CLOSE/D4A9
 CLOSE1/D4B5     CLOSE:CHANNEL/0002              CLOSE:SCLEN/0003                CLOSECHANNEL0/D5D0
 CLOSELOG/D4C3   CLOSELOG:SCLEN/0002             CLOSERTS/D4A3   CLOSESERIALNO.SYS/2758
 CMPDVNAME/D350  CMPDVNAMENF/D394                CMPDVNAMENM/D396                CMPDVNAMEZ/D389
 CMPDVNAML/D364  CMPDVNAML1/D377                 CNFG:ATTNCHECK/000B            *CNFG:BOOTCONSOLEDCB/002C
*CNFG:BOOTDEFAULTDISKDCB/002A    CNFG:DEBUGGER/000D              CNFG:DEVICEDCBS/0002
 CNFG:DISKDCBS/0000              CNFG:DRIVERBASE/000F            CNFG:DSKBUFFERPOOL/0007
 CNFG:DSKPOOLSIZE/0009           CNFG:INTDISABLE/0013            CNFG:INTENABLE/0016
 CNFG:INTERRUPTSTACK/001C        CNFG:INTRTI/0019                CNFG:INTSETUP/0011
 CNFG:IOCBPOINTERS/0004          CNFG:IOINTPOLL/001E            *CNFG:MTPRIMS/0028
 CNFG:NIOCHANNELS/0006          *CNFG:RETURNELAPSEDMILLISECONDS/002E
*CNFG:SETCLOCKINTERVALMILLISECONDS/0030          CNFG:TASKQUEUE/0020             CNFG:TIMEOUTLIST/0022
*CNFG:VTDEBUG/0026              *CNFG:VTPROFILES/0024            CODE/CE00       COLUMNCOUNT/CEA1
 COMPAREDECRYPTIONKEYS/D98D      COMPAREDECRYPTIONMATCH/D9AC     COMPARENAMES/EA22
*COMPUTECHECKSUMS/26BE           COMPUTEDIRENTRYDISPLACEMENT/E811                COMPUTEEXITCHECKSUM/26BE
 COMPUTEEXITCHECKSUML/26C7       COMPUTEINITCHECKSUM/26E9        COMPUTEINITCHECKSUML/26F2
 COMPUTEMAINCHECKSUM/26D3        COMPUTEMAINCHECKSUML/26DC       COMPUTENEXTBYTE/F6CB
 COMPUTERDCN/F706                COMPUTERDCN0/F72D               COMPUTERDCNF/F6FB
 COMPUTERDCNL/F719               COMPUTERDCNLIMIT/F75C           COMPUTERDCNS/F70F
 COMPUTERHSN/F75F                COMPUTERHSN0/F765               COMPUTERHSN1/F768
 COMPUTERSN/F773                 CONSOLEDRIVER/CE52              CONSOLENAMELEN/CF98
 CONSOLENAMEPTR/CF96             CONSOLEOPEN/CF92                CONTEXTBLOCK:SIZE/0007
 CONTROL/D606   *CONTROL:CHANNEL/0002           *CONTROL:CODE/0003               CONTROL:DATA/0000
*CONTROL:DATEDAY/0003           *CONTROL:DATEMONTH/0004         *CONTROL:DATETICKS/0000
*CONTROL:DATEYEAR/0005          *CONTROL:DIST/0000              *CONTROL:MAPALGORITHM/0000
*CONTROL:PROT/0000               CONTROL:SCLEN/0004              CONVERTLCN1/F7B8
 CONVERTLCN2/F788                CONVERTLCNL/F7A5                CONVERTLCNTO1ST/F792
 CONVERTLCNTOLSN/F77A            COPYNAMETODIR/DF6F              COPYOFNMIVECTOR/2784
 COPYOFRESTARTVECTOR/2786        COPYRIGHT/D12F  COPYRIGHTCHECKSUM/0036          COPYRIGHTEND/D154
 COUNT/0004      CPUSERIALNUMBER/2251            CREATE/D459     CREATE1/D45B   *CREATE:CHANNEL/0002
 CREATE:FILESIZE/000E            CREATE:FILESIZESCLEN/0012      *CREATE:LENGTH/0006
*CREATE:NAMEP/0004               CREATE:SCLEN/000E               CREATELOG/D44C *CREATELOG:LENGTH/0006
*CREATELOG:NAMEP/0004            CREATELOG:SCLEN/000E            CVTTOHEXSERIALNO/22B8
 CVTTOHEXSERIALNOLOOP/22C0       DAYSPERMONTH/FD52               DAYSPERMONTHX/CE58
*DCB:DONEFLAG/0000               DCB:DRIVER/0007                *DCB:LASTERROR/0001




ASM/6800 1.4A0: FEF2 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 463; Form 1     Symbols Sorted by Name
SDOS11G.ASM
 DCB:NAME/0003   DCB:NEXTDCB/0005                DCB:SIZE/0009   DCBPOINTER/0006
 DCBPTRSAVE/CF1B                 DEBUG/D630      DEBUG1/D63E     DEBUG:SCLEN/0002
 DECBUF/CF2A     DECIOCB:CURLSN/F859             DECIOCB:CURLSN1/F86C            DECRYPT/D0B1
*DECRYPT0/D0C5   DECRYPT1/D078   DECRYPTBUFFER/D05D              DECRYPTBUFFEREND/D065
 DECRYPTBUFPTR/D05B              DECRYPTLOOP/D0BD                DECRYPTRTS/D102
 DEFAULTDISKDCB/CE4C             DEFAULTDISKNAME/D34A            DEFAULTPROG/D870
 DEFAULTPROGL/000E               DELAY/D3B1      DELAY1/D3C0     DELAY:PERIOD/0002
 DELAY:SCLEN/0004                DELAYBLOCK/CE5E                 DELAYCOMPLETE/CE64
 DELAYDONE/D3F2  DELAYLOOP/21BF  DELETE/D462    *DELETE:LENGTH/0006             *DELETE:NAMEP/0004
 DELETE:SCLEN/000E               DESIREDLCN/CEE4                *DIR:DAY/001A    DIR:ENTRYSIZE/0020
 DIR:FCBDATA/0010                DIR:FCBDATASIZE/000E           *DIR:FILENAME/0000
*DIR:FILESIZE/0015               DIR:HCSIC/0012  DIR:HLCN/0010  *DIR:MONTH/001B  DIR:NAMESIZE/0010
*DIR:NCLUSTERS/0013              DIR:PROTECTION/0019            *DIR:VERSION/001D
*DIR:YEAR/001C   DIRECTORYNAME/E907              DIRENTRY/CEA8   DIRENTRYDISP/CEAA
 DIRSECTOREND/CEB8               DISKDCBSAVE/FBBF                DISKDCBUNSAVE/FBAC
 DISKDEFAULT/D496               *DISKDEFAULT:LENGTH/0006        *DISKDEFAULT:NAMEP/0004
 DISKDEFAULT:SCLEN/000E          DISKDEVICEDRIVER/DC95           DISKFILEDRIVER/DCB6
 DISKMAP:BYTE/0000               DISKMAPBYTEPOINTER/CEEC         DISKMAPMASK/CEEE
 DISKMAPNAME/E917                DISKMAPSECTOREND/CEEA           DISKMAPSECTORSTART/CEE8
 DISKREAD/FB5C   DISKRTS/DCB4    DISKRWCOPYARGS/FBB2             DISKWAITD/FB74  DISKWAITD2/FBA6
 DISKWAITE/FB80  DISKWAITE1/FB8D                 DISKWAITE2/FBA1                 DISKWRITE/FB68
 DISPCLOSE/D770  DISPERRKILLLOG/D6D3             DISPERRKILLLOG1/D6DF            DISPERROR/D783
 DISPERROR:SCLEN/0002            DISPERRORMSG/D76A               DISPERRORMSGL/0006
 DISPGETCHAR/CFDA                DISPLAYERROR/D668               DISPLAYERROR0/D696
 DISPLAYERROR1/D6BC              DISPLAYERROR1A/D6B4             DISPLAYERROR4/D6F2
 DISPLAYERROR4A/D6F4             DISPLAYERROR5/D707              DISPLAYERROR6/D725
 DISPLAYERROR7/D740              DISPLAYERROR8/D74A              DISPLAYERROR8A/D74B
 DISPLAYERROR9/D747              DISPLAYERRORA/D678              DISPLAYERRORCR/D88C
 DISPLAYERRORCR1/D898            DISPLAYERRORDONE/D6E9           DISPLAYERRORRETRY/D66E
 DISPLAYINITDATE/2717            DISPLAYINITERROR/275F           DISPOUT/CFC0    DISPPOS/D773
 DISPPOS1/CFD6   DISPPUTCHAR/D77B                DISPREADB3/CFC8                 DIVIDEPOINTLCN/CEDC
 DONTLOG/D5E1    DONTSTOPME/CF79                 DONTZEROMEMORY/217A             DOSYSCALL/2194
 DOWELOG/D5D3    DRIVER:CLOSE/0002               DRIVER:CONTROL/0012             DRIVER:CREATE/000C
 DRIVER:DELETE/0010              DRIVER:DISKCONTROL/000A        *DRIVER:DISKLSNTOPSN/0010
 DRIVER:DISKREAD/0002            DRIVER:DISKRESET/0000           DRIVER:DISKSTATUS/0008
*DRIVER:DISKVERIFY/000E          DRIVER:DISKWAIT/0006            DRIVER:DISKWRITE/0004
*DRIVER:DISKWRITEPROTQ/000C      DRIVER:OPEN/0000               *DRIVER:PFRESTART/001A
 DRIVER:READA/0004               DRIVER:READB/0008               DRIVER:RENAME/000E
 DRIVER:RESET/0016              *DRIVER:STARTIO/0018             DRIVER:STATUS/0014
 DRIVER:WRITEA/0006              DRIVER:WRITEB/000A              DRIVERVPOINTER/CE54




ASM/6800 1.4A0: FEF2 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 464; Form 1     Symbols Sorted by Name
SDOS11G.ASM
 DSKDCLOSE/E589  DSKDCONTROL/E4F3                DSKDCONTROL0/E507               DSKDCONTROL1/E4FF
 DSKDCONTROL10/E50D              DSKDDISMOUNT/E5A8               DSKDDISMOUNT0/E5E9
 DSKDDISMOUNT1/E635              DSKDDISMOUNT2/E604              DSKDDISMOUNTL/E5B6
 DSKDDISMOUNTOKRTS/E64E          DSKDDISMOUNTZ/E61F              DSKDEOFTEST/E548
 DSKDEOFTESTL/E55D               DSKDGETBADLSN/E377              DSKDGETERRORSTATS/E3F4
 DSKDGETPARAMS/E478              DSKDGETTYPE/E447                DSKDIMPLIEDPOSITION/E515
 DSKDIMPLIEDPOSOKRTS/E589        DSKDOPEN/E4CF   DSKDOPEN1/E4D9  DSKDPOSITION/E528
 DSKDPOSITION1/E539              DSKDREADA/E00A  DSKDREADAL/E010                 DSKDREADALINE/E023
 DSKDREADB/DFA1  DSKDREADBL/DFA7                *DSKDSETMAPALG0/E4AE             DSKDSETMAPALG1/E4BA
 DSKDSETMAPALG2/E4BC             DSKDSETMAPALGDUMP/E4A6          DSKDSETMAPALGORITHM/E495
 DSKDSETMAPALGRTS/E4C8           DSKDSTATUS/E3CC                 DSKDSTATUS0/E3E0
 DSKDSTATUS10/E3EE               DSKDUMPBUF0/FB29                DSKDUMPBUFFERS/FADC
 DSKDUMPBUFL/FB2C                DSKDUMPBUFN/FB49                DSKDUMPERR1/FB55
 DSKDUMPFCB1/FB12                DSKDUMPFCBL/FAEA                DSKDUNLOCK/E584
 DSKDWRITEA/E1F6                 DSKDWRITEAL/E1FC                DSKDWRITEB/E16C
 DSKDWRITEBL/E174                DSKFCLOSE/DE70  DSKFCLOSE1/DE99                 DSKFCLOSEDOLD1/DEC8
 DSKFCLOSEOKRTS/DEC6             DSKFCLOSEOLD/DEC3               DSKFCONTROL/E25D
 DSKFCONTROL0/E271               DSKFCONTROL10/E277              DSKFCREATE/DCD5
 DSKFCREATE1/DCFC                DSKFCREATE2/DD8F                DSKFCREATE3/DD66
 DSKFCREATEALLOC/DD8A            DSKFCREATEC/DD39                DSKFCREATEE/DD91
 DSKFCREATEF/DD3C                DSKFCREATEMIN/DD84              DSKFCREATEOOPS/DD9D
 DSKFDELETE/DE11                 DSKFDELETE1/DE3D                DSKFDELETEDE/DE33
*DSKFDELETEFCB/DE49              DSKFDELETEIOCBFCB/DE4D          DSKFDELETEL/DE1E
 DSKFDELETESYSIOCB/DE4B          DSKFEOFTEST/E309                DSKFEOFTESTROL/E326
 DSKFGETCOL/E459                 DSKFGETCOL1/E463                DSKFGETDATE/E424
 DSKFGETEOF/E46C                 DSKFGETFILESIZE/E340            DSKFGETPARAMS/E395
 DSKFGETPOS/E354                 DSKFGETPOS3/E36D                DSKFGETPOS3A/E38E
 DSKFGETPOS4/E366                DSKFGETPROT/E418                DSKFGETTYPE/E450
 DSKFIMPLIEDPOSITION/E2BA        DSKFIMPLIEDPOSOKRTS/E2B8        DSKFOPEN/DDA5   DSKFOPEN0/DDC4
 DSKFOPEN1/DDC7  DSKFOPENERRORFILE/E281          DSKFOPENL/DDB5  DSKFOPENSYSIOCB/DDFE
 DSKFPFRESTART/DCD0              DSKFPOSITION/E2E5               DSKFPOSITION1/E2F6
 DSKFPOSITIONTOEND/E2D0          DSKFPOSITIONTOEND1/E2D6         DSKFREADA/DFE2  DSKFREADADONE/E000
 DSKFREADAL/DFE8                 DSKFREADALINE/DFFB              DSKFREADB/DF86  DSKFREADBL/DF8E
 DSKFREADBOKRTS/DF9F             DSKFRENAME/DEEB                 DSKFRENAME1/DF34
 DSKFRENAME2/DF60                DSKFRENAMEERR1/DF1F             DSKFRENAMEL/DF11
 DSKFRESET/2454  DSKFSET1/E245   DSKFSETDATE/E22D                DSKFSETPROT/E24D
 DSKFSETSIZE/E297                DSKFSTATUS/E3A6                 DSKFSTATUS0/E3B8
 DSKFSTATUS10/E3C6               DSKFWRITEA/E19B                 DSKFWRITEADONE/E1B7
 DSKFWRITEAL/E1A6                DSKFWRITEB/E14E                 DSKFWRITEBDONE/E16A
 DSKFWRITEBL/E15A                DSKINFO:BADLSN/002D             DSKINFO:DIRFCB/0027




ASM/6800 1.4A0: FEF2 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 465; Form 1     Symbols Sorted by Name
SDOS11G.ASM
 DSKINFO:ERRLSN/003F             DSKINFO:LOG2NBPS/0018           DSKINFO:MAPALGORITHM/0016
 DSKINFO:MAPFCB/0029             DSKINFO:MAPLSN/0024             DSKINFO:MIDALLOC/0014
 DSKINFO:MINALLOC/0012           DSKINFO:NBPC/0020               DSKINFO:NBPS/0009
 DSKINFO:NBPSM1/0019             DSKINFO:NCYL/000F               DSKINFO:NLCN/001E
 DSKINFO:NLSN/001B               DSKINFO:NSPC/0011               DSKINFO:NSPT/000B
 DSKINFO:NTPC/000D              *DSKINFO:OPSCOUNT/003C           DSKINFO:RANDMAP/0022
*DSKINFO:READERRCNT/0038        *DSKINFO:READERRSTS/003A         DSKINFO:SECTORDB/002B
 DSKINFO:SEEKERRCNT/0030        *DSKINFO:SEEKERRSTS/0032        *DSKINFO:SIZE/0043
*DSKINFO:WRITEERRCNT/0034       *DSKINFO:WRITEERRSTS/0036       *DSKINFO:WRITEPROTSTATE/0042
 DSKREADACHUNK/E02A              DSKREADACHUNKL/E052             DSKREADACHUNKL1/E07C
 DSKREADACR/E0A4                 DSKREADANULL/E087               DSKREADANULL1/E09F
 DSKREADANULL2/E0A1              DSKREADBCHUNK/DFB8              DSKWRITEACHUNK/E1C1
 DSKWRITEACHUNKL/E1D8            DSKWRITEBCHUNK/E184             DUMMYLCN/FFFF  *DVDAT:DEPTH/0001
 DVDAT:NBPS/0000                *DVDAT:NCYL/0006                *DVDAT:NSPC/0002
*DVDAT:NSPT/0002                *DVDAT:NTPC/0004                *DVDAT:WIDTH/0000
*DVTYP.CLOCK/000B               *DVTYP.CONSOLE/0004              DVTYP.DISK/0001
*DVTYP.DTAPE/0003               *DVTYP.DUMMY/000A                DVTYP.FILE/0000
*DVTYP.PARIN/0009               *DVTYP.PAROUT/0008              *DVTYP.PRINTER/0005
*DVTYP.SERIALIN/0007            *DVTYP.SERIALOUT/0006           *DVTYP.STAPE/0002
*DVTYP:TYPE/0000                 ENQUELASTSECTORREAD/FA7A        EORALL8BYTES/D108
 ERASEBANK/216C  ERASELOOP/2172  ERASEMEM/216F  *ERR:ABNORMALSTOP/0068
*ERR:ACTIVATIONNOTINBUFFER/0773 *ERR:ACTIVATIONRECEIVED/0775     ERR:ALLOC0CLUSTERS/042B
*ERR:ALREADYLOCKED/04B8         *ERR:ATTENTION/0001             *ERR:BADCMDFORMAT/0066
*ERR:BADFIELDWIDTH/0774          ERR:BADFILENAME/03FF           *ERR:BADFILEVERSION/0405
 ERR:BADFNAMESIZE/03F5           ERR:BADLOADRECORD/040C          ERR:BADPOSITION/03EC
*ERR:BADREADBUF/04B0            *ERR:BADWRITEBUF/04B1            ERR:BOOTCKSUMFAIL/03E8
*ERR:BRANCHFACTORSIZE/0435      *ERR:BUSYFORANOTHERPROCESS/0772 *ERR:CANTGOTO/0067
*ERR:CANTOPENMUSTCREATE/03FD    *ERR:CAPABILITYFAILURE/04C2      ERR:CHBUSY/0407
 ERR:CHTOOBIG/0406               ERR:CLOSED/0408                 ERR:CLUSTERSIZELIMITSFILE/041C
 ERR:DECRYPTIONKEYSDONTMATCH/0437               *ERR:DEVICEERRORED/0421         *ERR:DEVICENOTREADY/0424
*ERR:DEVICETIMEDOUT/0412         ERR:DIRECTORYDAMAGED/040F       ERR:DISKMOUNTED/03FC
 ERR:DISKREAD/0415              *ERR:DISKSEEK/0417               ERR:DISKWRITE/0416
 ERR:DISKWRITELOCKED/0419       *ERR:DSKWRTPROT/0418            *ERR:DUPLICATEKEY/0434
*ERR:ENDOFMEDIUM/042F            ERR:EOFHIT/03E9                *ERR:FATALCOMPILE/0064
 ERR:FILEALREADYDELETED/042C     ERR:FILEINCREATE/03FB           ERR:FILEISOPEN/03EA
 ERR:FILENOTFOUND/03F3           ERR:FILEWRTPROT/03F2            ERR:HCSICTOOSMALL/0401
*ERR:IBUFOVERFLOW/0410           ERR:ILLDEVICEOP/040A           *ERR:ILLEGALINTERLOCKFUNCTION/04BE
*ERR:ILLEGALJOBCONTROL/04C1      ERR:ILLEGALLCN/03F4             ERR:ILLEGALSYSCALL/0409
 ERR:ILLFILESIZE/0400            ERR:ILLLSN/040E                *ERR:IMPLEMENTATIONLIMITREACHED/04BD
*ERR:INPUTTIMEOUT/042E          *ERR:IOINPROGRESS/0771          *ERR:JOBCOMPLETED/04C4




ASM/6800 1.4A0: FEF2 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 466; Form 1     Symbols Sorted by Name
SDOS11G.ASM
*ERR:JOBKILLED/04C3              ERR:LCNWASNTALLOCATED/03F8     *ERR:LOCKRESET/04BC
*ERR:MEMORYMGMTFAIL/04BF        *ERR:MTBADCONFIG/04B7           *ERR:MTNOROOM/04B6
 ERR:MUSTBEDISK/0422             ERR:NBPCTOOBIG/03ED             ERR:NEWFILEEXISTS/03F6
 ERR:NLSNGE224/041B              ERR:NODEBUGGER/03EB             ERR:NODEFAULTPROGRAM/03F0
 ERR:NODISKMAP/03EE              ERR:NODISKSPACE/03F7            ERR:NOERRORMSGS/03FE
 ERR:NOFREEFCBS/03F9             ERR:NOMATCHFCB/03EF            *ERR:NOMOREJOBS/04C0
*ERR:NONE/0000   ERR:NOSUCHDEVICE/0420          *ERR:NOSUCHKEY/0433             *ERR:NOSUCHLUN/0426
*ERR:NOSUCHOBJECT/04B9           ERR:NOSUCHPROGRAM/0428          ERR:NOTALOADFILE/0404
*ERR:NOTENOUGHCHANNELS/04B4      ERR:NOTENOUGHPOOL/0402          ERR:NOTENOUGHROOM/040D
*ERR:NOTENUFMEM/0069            *ERR:NOTIMEOUTBLKS/0431         *ERR:NOTLOCKED/04BA
 ERR:NOTOPENTOCONSOLE/0423      *ERR:NOTUNDERTIMESHARE/04B5     *ERR:OBJECTDESTROYED/04BB
*ERR:OLDFILEEXISTS/0429         *ERR:PRINTERNOTREADY/042D       *ERR:PROFILENOTFOUND/0777
*ERR:PROFILENOTMALLEABLE/0778    ERR:PROGRAMKILLED/0411          ERR:PWRFAILDISKF/0403
*ERR:RDBUFTOOBIG/04B2            ERR:RDBUFTOOSMALL/041E          ERR:RENAMEDEVICE/040B
 ERR:SDOSCKSUM/041A              ERR:SDOSNOTREGISTERED/0436      ERR:SECTORSIZE2/0413
 ERR:SELFTESTCKSUM/0430          ERR:SERIALNOWRONG/0432          ERR:SYSCALLTOOSHORT/041D
*ERR:SYSTEMCROAKED/0414         *ERR:TIMEDINPUTEXPIRED/0776      ERR:TIMENOTSET/0425
*ERR:WARNINGCOMPILE/0065        *ERR:WRBUFTOOBIG/04B3            ERR:WRBUFTOOSMALL/041F
*ERR:WRONGDISKTYPE/076E          ERR:WRONGFILESYSTEM/03FA        ERR:ZEROSTARTADDRESS/0427
 ERRALLOC0CLUSTERS/ED16          ERRBADFILENAME/EC87             ERRBADFILENAMEJ/EC3E
 ERRBADFNAMESIZE/ECA6           *ERRBADLOADRECORD/DB8B           ERRBADPOSITION/E331
*ERRBOOTCKSUMFAIL/E6C2           ERRCHBUSY/D238  ERRCHTOOBIG/D23C                ERRCLOSED/D234
 ERRCLUSTERSIZELIMITSFILE/F6C1   ERRDIRECTORYDAMAGED/E828        ERRDISKMOUNTED/E4CA
 ERRDISKWRITELOCKED/F5CF         ERREOFHIT/E32C  ERREOFHITJ2/F5D4                ERRET/D1F7
 ERRETL/D208     ERRFCBOPENERRRTS/E5A6           ERRFCBOPENQ/E596                ERRFCBPOINTER/CF0C
 ERRFILEALREADYDELETED/DF2F      ERRFILEINCREATE/DCF7            ERRFILEISOPEN/E650
 ERRFILENOTFNDJ/DE19             ERRFILENOTFOUND/DE6B            ERRFILEWRTPROT/DD09
 ERRFILEWRTPROTJ/DE68            ERRHCSICTOOSMALL/F6C6           ERRILLDEVOP/E26C
 ERRILLFILESIZE/ECD5            *ERRILLLSN/F952  ERRILLSYSCALL/D1EF              ERRMSGSNAME/E927
 ERRMUSTBEDISK/D4A4              ERRNBPCTOOBIG/E6C7             *ERRNEWFILEEXISTS/DF2A
 ERRNLSNGE224/2681               ERRNODISKMAP/ED11               ERRNODISKMAPJ1/EEFC
 ERRNOERRMSGS/E292               ERRNOTENOUGHPOOL/24FA           ERRNOTENOUGHROOM/DB90
 ERRORADDRESS/CE56               ERRORCODE/275D  ERRORED/D20A    ERROREXIT/D7EE  ERROREXIT:CODE/0002
 ERROREXIT:SCLEN/0004            ERRORINX/D201   ERRORNUMBER/CF2D                ERRORRTS/0D39
 ERRORSAVE/D219  ERRRDBUFTOOSMALL/D8D7           ERRRENAMEDEVICE/D4F1            ERRSECTORSIZE2/2650
 ERRSERIALNOWRONG/DA2C           ERRSYSCALLTOOSHORT/D1F3         ERRSYSTOOSHORTJ/D8D4
 ERRTIMENOTSET/DD34             *ERRWRBUFTOOSMALL/D8F8           ERRWRONGFILESYSTEM/E6CC
 ERRWRONGSERIALNUMBER/219A       ERRZEROSTARTADDRESS/D987        EXECUTING/FE3E  EXIT/D80B       EXIT1/D80E
 EXIT2/D848      EXIT3/D861      EXIT:SCLEN/0002                 EXITCHAIN/CFEC  EXITCHKSUMBASE/D80B
 EXITCHKSUMEND/D847              EXITCKSUML/D82F                 EXITCODECHKSUM/D82D




ASM/6800 1.4A0: FEF2 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 467; Form 1     Symbols Sorted by Name
SDOS11G.ASM
 EXITCOPYRIGHT/2707              EXITCR/D87E     EXITCR1/D884    EXITDAMAGE/D93C
 EXITDAMAGEPTR/CF28              EXITERRED/D7F5  EXITPARTIALCHKSUM/0004          EXITS/D908
 EXITS2/D910     EXITS3/D924     EXITS4/D929     EXITS6/D935     EXITSCANPTR/0002
 EXITSCLOSE/CFFA                 EXITSERRED/D921                 FCB:DAY/0016    FCB:DIRDISP/0005
 FCB:DIRLSN/0002                 FCB:DISKINFO/0000               FCB:FILESIZE/0011
 FCB:FLAGS/000A  FCB:HCSIC/000E  FCB:HLCN/000C   FCB:HLSN/0007   FCB:MONTH/0017  FCB:NCLUSTERS/000F
 FCB:PROT/0015   FCB:REFCOUNT/000B               FCB:SIZE/001A  *FCB:VERSION/0019
*FCB:YEAR/0018   FCBFLG::DELETED/0020            FCBFLG::MODIFIED/0010           FCBFLG::NEWFILE/0080
 FCBFLG::UPDATEDIR/0040          FCBPOINTER/CEA6                 FETCHSECTOR/FA9C
 FETCHSERIALNUMBERSYS/211E       FILENAMEBUF/CEBA               *FILENAMEFILL/CECA
 FILENAMELENGTH/CECC            *FILEPROT/CED7   FILESIZE2/CED1  FILESIZERQSTD/CECD
 FILESYSTEMVERSION/0010          FILLDECRYPTBUFFER/D031          FINDDEFAULT/D310
 FINDDEVICEL/D2F6                FINDDISK/D2D7   FINDDRIVER/D2AE                 FINDDRIVER1L/D2BC
*FINDDRIVER2/D2CE                FINDFREEFCB/EACA                FINDFREEFCBL/EAD8
 FINDLCNERREXIT/F224             FINDLCNMAPBIT/F229              FINDLCNMAPBITL/F2A1
 FIRSTBUF/26FF   FIRSTCHAIN/D951                 FIRSTSEGSIZE/2701               FNAMEPROCESS/D486
 FNAMEPROCESS1/D489              FORCERTI/FDCA   FORCESCHEDULE/FDCD              FORGETLASTBADLSN/E58B
 FOUNDDEVICE/D323                FOUNDDISK/D337  FOUNDDISK1/D31D                 FOUNDDISK2/D320
 FOUNDDISK3/D345                 FREECLUSTER/EEE8                FREECLUSTER0/EF37
 FREECLUSTER2/EF5F               FREECLUSTER3/EF43               FREECLUSTERDONE/EF79
 FREECLUSTERE/EF61               FREECLUSTERE1/EF76              FREECLUSTEREXIT/EF84
 FREECLUSTERL/EF0B               FREECLUSTERN/EF56               FREECLUSTERS/EEFF
 FREEDIRENTRYDISP/CEB6           FREEDIRLSN/CEB3                 FREEERROR/EEF7  FROMPOINTER/0002
 GENHLSNPLUSHRSN/F7C7            GET1BYTE/D04D   GETBYTE/DC2E    GETBYTE1/DC52   GETBYTED/DC46
 GETERROR/D655  *GETERROR:ACTUALCOUNT/0008      *GETERROR:BUFFERP/000A          *GETERROR:MAXCOUNT/000C
 GETERROR:SCLEN/000E             GETFCBFROMIOCB/E11E             GETIOCB1/D27D   GETIOCBPOINTER/D25D
 GETIOCBX/D278   GETRUNNINGENCRYPTED/DA95        GETRUNNINGENCRYPTED1/DA9E       GETSERIALNUMBER/DA75
*GETSERIALNUMBER:ACTUALCOUNT/0008               *GETSERIALNUMBER:BUFFERP/000A
*GETSERIALNUMBER:MAXCOUNT/000C   GETSERIALNUMBER:SCLEN/000E      GETSERIALNUMBERADDRESS/DA85
 GETSERIALNUMBERADDRESSRTS/DA94  GETWORD/DC5A    HASHFOLD/EA3D   HASHINSERT6/EA4C
 HASHINSERT6L/EA4E               HASHNAME/EA57   HASHNAME2/EAB1  HASHNAMEL1/EA89
 HASHNAMEL2/EA9F                 HASHNAMEL3/EABD                 HEADER:LCN/0000
 HEXTOD/22DD     HEXTOD1/22EC    HEXTOD2/22F4    IC:CREATE/0000 *IC:DESTROY/0001
*IC:LOCK/0003   *IC:RELEASE/0004                *IC:RESET/0002  *IC:TEST/0005    IGNORED/0000
 ILLDEVICEOP/DCAF                INCIOCB:CURLSN/F7F2             INCIOCB:CURLSNX/F7FF
 INCORRECTROM/20CB               INITCOUNTER/2704                INITDATE/271F   INITDATELEN/0009
 INITDISKERRED/264D              INITDISKINFO/25C4               INITDISKINFO2/2608
 INITDISKINFO2L/260C             INITDISKINFOL/25D5              INITFCBL/25AC   INITFCBS/2593
 INITIALIZEERR/214D              INITIOCB/26AD   INITIOCBL/2690  INITIOCBS/2686  INITRDSI/245F
*INITRDSI1/249A  INITRDSI2/24A3  INITRDSI2A/24AE                 INITRDSI3/24C1  INITRDSI3A/24CE




ASM/6800 1.4A0: FEF2 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 468; Form 1     Symbols Sorted by Name
SDOS11G.ASM
 INITRDSI4/24D9  INITRDSI4A/24E8                 INITRDSI4L/24D3                *INITRDSI6/24F5
 INITRDSI7/24FF  INITRDSI8/2527  INITRDSI9/2543  INITX/2705      INTDISABLE/CF7D
 INTENABLE/CF80  INTERLOCK/D39F *INTERLOCK:BUFFERP/0004         *INTERLOCK:COUNT/0006
 INTERLOCK:FUNCTION/0002         INTERLOCK:SCLEN/0008            INTERLOCKOKRTS/D3AF
 INTERRUPTSTACK/CF86             INTRTI/CF83     INVALIDROMMSG/2275              INVALIDROMMSGEND/22B8
 INVENTSECTOR/F8F2               IOBLOCK/CFFD   *IOCB:BUFFERP/0005               IOCB:BYTECOUNT/0016
 IOCB:COLCNT/000C                IOCB:CURBYTE/000D               IOCB:CURLCN/0018
 IOCB:CURLSN/0002                IOCB:DCB/0000   IOCB:DISKWRITELOCKED/0011       IOCB:DRDSI/0012
 IOCB:DRIVER/0009                IOCB:DRSN/001A  IOCB:EOFFLAG/000B               IOCB:FCB/0007
 IOCB:HRDSI/001F                 IOCB:HRSN/0021  IOCB:LOCATEDF/0011              IOCB:NEXTBYTE/0014
 IOCB:RBN/001D   IOCB:RDCN/001B  IOCB:SIZE/0022  IOCBPOINTER/CE09                IOINTERRUPT/FEC5
 IOINTJ/FED2     IOPKDEFS/0000   IORTI/FDD0      IORTI1/FDD3     ISALPHANUM/D298
 ISALPHANUM1/D2A7                ISALPHANUMRTS/D2A6              ISCONSOLE/D220  ISCONSOLE:SCLEN/0002
 ISCONSOLEOKRTS/D253             ISDIG/D28F      ISDNO/D296     *JC:CREATE/0000 *JC:DESTROY/0002
*JC:TESTDONE/0001                JMPIOINT/CF88  *JOBCONTROL:ACTUALCOUNT/0008    *JOBCONTROL:BUFFERP/0004
*JOBCONTROL:COUNT/0006          *JOBCONTROL:FUNCTION/0002       *JOBCONTROL:MAXCOUNT/000C
*JOBCONTROL:SCLEN/0008           JUSTREADY/FE2F  K/0400          KEY0/D0C2       KEY1/D07E       KEY2/D085
 KEY3/D08C       KEY4/D093       KEY5/D09A       KEY6/D0A1       KEY7/D0A8       KILLEDF/CF8C
 KILLEDTEST/D7C1                 KILLENABLE/D7BA                 KILLENABLE:SCLEN/0002
 KILLPROGRAM/D7C5                KILLPROGRAM1/D7DC               KILLPROOF/D7B6  KILLPROOF1/D7BB
 KILLPROOF:SCLEN/0002            KILLREQUESTEDF/CF8B             KILLUSER2/D7A8  KILLUSERPROGRAM/D78B
 KILLUSERRTS/D7B1                LASTERROR/CE01  LASTSECTORREADQ/CEEF            LCN:SIZE/0002
 LCNGROUPLENGTH/CEE6             LDAENCRYPTED/2165               LIMIT/0004      LISTDEFS/0001
 LOAD/DA44       LOAD2AND3/DB95  LOAD2AND3.1/DBB7                LOAD2AND3BYTE/DC18
 LOAD2AND3LOOP/DBBC              LOAD2AND3MASSDECRYPT/DC06       LOAD2AND3RTS/DC2C
 LOAD:ENCRYPTED/0005            *LOAD:LENGTH/0006               *LOAD:NAMEP/0004
 LOAD:SCLEN/000E                 LOAD:TYPE0/0000                 LOAD:TYPE1/0001
 LOAD:TYPE2/0002                 LOAD:TYPE3/0003                 LOADADDRESS/D049
 LOADCASCADELOOP/DAD1            LOADCLOSE/DA51  LOADCLOSE1/DA72                 LOADCONTENTS/DB7C
 LOADCOUNT/CE4A  LOADENCRYPTED/DAA6              LOADENCRYPTED1/DAB9             LOADER2/DA2F
 LOADFILEPOS/D02D                LOADGETPOS/D01F                 LOADINIT/D9AE   LOADINITCANT1/DA41
 LOADINITCANTOPEN/DA39          *LOADINITOKRTS/DA2A              LOADMULTIPLEOF8/D03F
 LOADNEXT/DB7C   LOADREST/DA4C   LOADSETPOS/DB24                 LOADSTART/D9FC  LOADSYSCALLPTR/CF1D
 LOADTYPE0/DB2C  LOADTYPE0.1/DB72                LOADTYPE0.2/DB51                LOADTYPE0L/DB2F
 LOADTYPE1/DA07  LOADTYPE2/DB7A  LOADTYPE3/DB95  LOCATECURBYTE/F2B3              LOCATECURBYTE0/F32C
*LOCATECURBYTE1/F337             LOCATECURBYTE2/F378             LOCATECURBYTE3/F388
 LOCATECURBYTE3A/F370            LOCATECURBYTE4/F33D             LOCATECURBYTE5/F398
 LOCATECURBYTE5A/F3ED            LOCATECURBYTE5B/F3BA           *LOCATECURBYTE6/F437
 LOCATECURBYTE7/F43B             LOCATECURBYTE8/F3C4             LOCATECURBYTE9/F468
 LOCATECURBYTE9J/F2D9            LOCATECURBYTED/F448             LOCATECURBYTED2/F463




ASM/6800 1.4A0: FEF2 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 469; Form 1     Symbols Sorted by Name
SDOS11G.ASM
 LOCATECURBYTEDJ/F667            LOCATECURBYTEE/F2DC             LOCATECURBYTEE1/F31E
 LOCATECURBYTEE2/F2E8            LOCATECURBYTEE3/F321            LOCATECURBYTEE4/F311
 LOCATECURBYTEG/F3E7             LOCATECURBYTEGJ/F329           *LOCATECURBYTER/F405
 LOCATECURBYTEW/F46F             LOCATECURBYTEW2/F498            LOCATECURBYTEW4/F4D2
 LOCATECURBYTEW5/F4A5            LOCATECURBYTEWJ/F2D6            LOCATEDIRENTRY/E9B5
 LOCATERDCN/F66D                 LOCATERDCN0/F67F                LOCATERDCN2/F698
 LOCATERDCN3/F6BB                LOCATERDCNX/CF19                LOCDSKD/F5D7    LOCDSKD0/F5FA
 LOCDSKD1/F5ED   LOCDSKD2/F633   LOCDSKD3/F66A   LOCDSKD4/F664   LOCDSKDR/F629   LOCUPDATEDIRENTRY/E9FA
 LOGCHANNEL/00FF                 LOGCLOSE/D4C9   LOGIOCB/CF35    LOGOUT/CFAE     LSN:SIZE/0003
 M6800/0001      M6801/0000      M6809/0000      MACRO:0002/2073                 MACRO:0003/207F
 MACRO:0004/20ED                 MACRO:0005/20FB                 MACRO:0006/211E
 MACRO:0007/2498                 MACRO:0008/2600                 MACRO:0009/D507
 MACRO:000A/D521                 MACRO:000B/D584                 MACRO:000C/D769
 MACRO:000E/D9F1                 MACRO:000F/DA28                 MACRO:0010/DB00
 MACRO:0011/DBD7                 MACRO:0012/DEF9                 MACRO:0013/DF05
 MACRO:0014/E094                 MACRO:0015/E4AC                 MACRO:0016/E662
 MACRO:0017/E77B                 MACRO:0018/E78C                 MACRO:0019/E879
 MACRO:001A/EB83                 MACRO:001B/EB98                 MACRO:001C/EBFC
 MACRO:001D/ED26                 MACRO:001E/EDAA                 MACRO:001F/EF1A
 MACRO:0020/F231                 MACRO:0021/F335                 MACRO:0022/F3BA
 MACRO:0023/F405                 MACRO:0024/F435                 MACRO:0025/F457
 MACRO:0026/F47B                 MACRO:0027/F48C                 MACRO:0028/F727
 MACRO:0029/F753                 MACRO:002A/F88A                 MACRO:002B/F90A
 MACRO:002C/F91C                 MACRO:002D/F99E                 MACRO:002E/FA48
 MACRO:002F/FA56                 MACRO:0030/FDA9                 MARKINVALID/E655
 MARKINVALID1/E676               MARKINVALIDL/E658               MARKMODIFIED/DF7E
 MAXSECTORSIZE/CF0E              MEMSIZE/0040    MINSTACK/0015   MULNLSNBYAB/2655
 MULNLSNBYAB1/2672               MULNLSNBYABL/2662               NAMESCANPTR/CE4E
 NAMESIZE/CE50   NBUFFERS/2703   NDRIVES/CF0B    NEWKEYENCRYPTED/D070            NFCBS/CF0A      NKEYS/D065
 NMAGICFCBS/0002                 NMBPB/0008      NRDSIS/CF09     NTIMEOUTBLKS/CE5A               OKRTS/0C39
 OKTODECRYPTFLAG/D067            OLDKEYENCRYPTED/D068            OPCODEMAX/001E  OPCODES/D154
 OPEN/D3F8       OPEN1/D3FD      OPEN2/D432     *OPEN:CHANNEL/0002              *OPEN:LENGTH/0006
*OPEN:NAMEP/0004                 OPEN:SCLEN/000E                 OPENCONSOLE/D89A
 OPENERRED/D44B  OPENSERIALNO.SYS/2746           OPTIMIZEDLOADCOUNT/D04B         PARSECOUNT/CED5
 PARSEFILENAME/EBBB              PARSENAME0/EBE4                 PARSENAME1/EC27
 PARSENAMEB/ECDC                 PARSENAMEB1/ED05                PARSENAMEBLANK/ECF3
 PARSENAMEBOK/ECF6               PARSENAMEBX/ECF9                PARSEQUIT/EC8E  PARSESCAND/EC54
 PARSESCANL/EC34                *PATCHSPACE/FED5                 PLANTDCBINIOCB/D43F
 PRINTCANTRUN/21ED               PRINTINVALIDROM/226D            PROT::BACKUP/0001
 PROT::WRITE/0040                PUSH0TO7/FDE0   RDSI:BLINK/0009                 RDSI:CYLINDER/0012




ASM/6800 1.4A0: FEF2 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 470; Form 1     Symbols Sorted by Name
SDOS11G.ASM
 RDSI:DISKINFO/0000              RDSI:FLINK/0007                 RDSI:LSN/0002   RDSI:MODIFIED/000B
*RDSI:RETRYCOUNT/000D           *RDSI:SECTOR/000E                RDSI:SECTORBASE/0005
 RDSI:SIZE/0014  RDSI:STATE/000C                 RDSI:TRACK/0010                 RDSIPOINTER/CEA4
*RDSISTATE:IDLE/0000             RDSISTATE:READING/0001         *RDSISTATE:VERIFYING/0003
 RDSISTATE:WRITING/0002          READA/D4FB     *READA1/D584     READA2/D540     READA:ACTUALCOUNT/0008
 READA:BUFFERP/000A              READA:CHANNEL/0002              READA:LMFLAG/0003
 READA:MAXCOUNT/000C             READA:SCLEN/000E                READAEOF/D4F6   READAHEAD/F806
 READAHEAD0/F82D                 READAHEAD1/F895                 READAHEADCERRED/F870
 READAHEADH/F875                 READAHEADH1/F8D5                READAHEADHA/F8D0
 READAHEADNX/F8C0                READAHEADOKRTS/F8BE             READAHEADRDSIMIN/0003
 READAHEADS/F8B8                 READALOG/D595   READALOG0/D5B8  READARTS/D5E2   READB/D469
 READB:ACTUALCOUNT/0008          READB:BUFFERP/000A             *READB:CHANNEL/0002
 READB:MAXCOUNT/000C             READB:SCLEN/000E                READBEHIND/F7E4
 READBEHINDERRED/F801            READBEHINDOKRTS/F7FF            READFLAG/CF03   READLUNNAME/D1EF
 READLUNNAME:SCLEN/000E          READSECTOR/F8F5                 READSECTOR0/F8F7
*READSECTOR1/F95B                READSECTOR2/F96F                READSECTOR2L/F972
 READSECTOR3/F9A0                READSECTOR4/F9B1                READSECTORDBP/CF04
 READSECTORF/F9F2                READSECTORI/F9ED                READSECTORL/F904
 READSECTORL1/F92A               READSECTORNM/F934               READSECTORNMA/F92D
 READSECTORR/F9F0               *READSECTORV/F93B                READSECTORVD/F957
 READSECTORVD1/F958              READSECTORZAPD/FA4E             READSECTORZAPD1/FA50
 READSECTORZAPH/FA40             READSECTORZAPIOCB/FA31          READSECTORZAPRTS/FA5C
 READSERIALNUMBERFILETYPE/2773   READSERIALNUMBERFROMFILE/2761   REG:A/0003     *REG:B/0002
*REG:CC/0001     REG:PC/0006    *REG:X/0004      REMOVEIOCBPTR/CF07              REMOVERDSI/FA02
 REMOVERDSIL/FA12                REMOVESECTORCNT/CF06            RENAME/D4CC     RENAME1/D4EA
*RENAME:CHANNEL/0002            *RENAME:LENGTH/0006             *RENAME:NAMEP/0004
 RENAME:SCLEN/000E               REQUERDSI/FA5D  REQUERDSI1/FA60                 RESTART/2162
 RESTOREUSERIOCB/E685            RUNNINGENCRYPTEDFLAG/D066       RUNNINGENCRYPTEDP/2782
 RW:POSITION/000E                RWPOSITION:SCLEN/0012           SAFEGAURD/D00F  SAFEGAURD1/D016
 SAVEUSERIOCB/E6A0               SAYINVALIDROM/2264              SC:DEVICESPECIFICOP/0010
*SC:GETACTCOL/0011              *SC:GETBACKGROUND/001A          *SC:GETBAUDRATE/0014
*SC:GETCOL/0001 *SC:GETCOLORING/0019            *SC:GETEOF/0002  SC:GETERRORSTATS/0011
 SC:GETFILEDATE/0010             SC:GETFILEPROT/0011            *SC:GETFILESIZE/0003
*SC:GETIDLES/0017                SC:GETLASTBADLSN/0010          *SC:GETLINEFLAGS/002C
 SC:GETLINEFLAGSHINT/0034       *SC:GETOUTPUTTIMEOUT/0013        SC:GETPARAMS/0005
 SC:GETPOS/0000 *SC:GETPROFILE/0010             *SC:GETPROFILEALTERATION/0012   *SC:GETPROFILENAME/001B
*SC:GETTABS/0016                *SC:GETTYPE/0004                *SC:GETWRAP/0018
 SCBLK:DATA/000E                *SCBLK:END/000E  SCBLK:OPCODE/0000               SCBLK:PARAMS/0002
 SCBLK:RDBUF/000A                SCBLK:RDLEN/000C                SCBLK:RPLEN/0008
 SCBLK:WLEN/0001                 SCBLK:WRBUF/0004                SCBLK:WRLEN/0006




ASM/6800 1.4A0: FEF2 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 471; Form 1     Symbols Sorted by Name
SDOS11G.ASM
 SCHEDLDS/FE09   SCHEDLOOP/FE16  SCHEDTEST/FE26  SCHEDTOP/FE0C   SCHEDX/CF7B     SCRATCH/2754
 SDOS:BLOCKMOVE/0042            *SDOS:CHECKRDLEN/0036           *SDOS:CHECKSCLEN/003C
*SDOS:CHECKWRLEN/0039            SDOS:CLOCK/000B                *SDOS:CLOCKTICKED/001B
 SDOS:CONFIGURATION/0003         SDOS:CURRENTASK/001E            SDOS:DAY/000E   SDOS:END/FEF3
 SDOS:ENTRYSIZE/0048            *SDOS:ERROR/002D                *SDOS:ERRORED/0033
*SDOS:ERRORSAVE/0030             SDOS:ESTSIZE/3200              *SDOS:GETRUNNINGENCRYPTED/0045
 SDOS:IOBLOCKPTR/0007           *SDOS:IOCBPOINTER/0009          *SDOS:IOINT/0012
 SDOS:KILLPROOF/0020            *SDOS:KILLUSERPROGRAM/0021      *SDOS:LASTERROR/0001
 SDOS:MONTH/000F                *SDOS:RESCHEDULE/0018           *SDOS:RTI/0015  *SDOS:SERIALNUMBER/0005
 SDOS:STACKSWITCHED/0011         SDOS:STARTIO/0024              *SDOS:TABLEBRANCH/003F
*SDOS:VERSIONNUMBER/0000        *SDOS:WAITCOND/0027             *SDOS:WAITEVENT/002A
 SDOS:YEAR/0010  SDOSCHKSUMBASE/D0C3             SDOSCODECHKSUM/D847             SDOSINIT/2000
 SDOSINIT0/230C  SDOSINIT1/2316  SDOSINIT1A/2318                *SDOSINIT1B/238A
 SDOSINIT1L/2383                 SDOSINIT2/240A  SDOSINITCKSUM/22F5              SDOSINITCKSUML/2019
 SDOSINITDBLCHECKL/23D8          SDOSINITEND/26BD                SDOSINITERRED/22F6
 SDOSINITID/270F                 SDOSINITS/22F9  SDOSINITTCB1/239A               SDOSINITTCBL/23AF
 SDOSMSG/D119    SDOSNOTREGISTERED/D3CE          SDOSRECURSIVECALL/CF8D          SDOSSECRETKEY/DB1C
 SDOSSERIALNUMBER/221B           SDOSSTACK/CF22  SDOSSUBREVISION/0047            SDOSVERSION/0011
 SEARCHDI1/E6EC  SEARCHDI3/E71F  SEARCHDI3A/E7D1                 SEARCHDI4/E7EE  SEARCHDI5A/E73E
 SEARCHDI5L/E738                 SEARCHDIR/E67F  SEARCHDIR1/E82D                 SEARCHDIR2/E8AD
 SEARCHDIRCERRED/E9B2            SEARCHDIRCNEW/E981              SEARCHDIRCOKRTS/E9AF
 SEARCHDIRCREAT1/E93A            SEARCHDIRCREAT2/E97C            SEARCHDIRCREATE/E937
 SEARCHDIRE/E6AD                 SEARCHDIRERRED/E69B             SEARCHDIRERRED4/E901
 SEARCHDIRF/E7F4                 SEARCHDIRL/E86E                 SEARCHDIRL1/E880
 SEARCHDIRMOUNT/E6D1             SEARCHDIRN/E8B4                 SEARCHDIRNF/E902
 SEARCHDIROKRTS/E80C             SEARCHDIRS/E854                 SEARCHDIRSJ/E8FE
 SEARCHDIRT/E8E5                 SEARCHFCBCMPNO/EBA6             SEARCHFCBINIT/EB50
 SEARCHFCBRTS/EBB0               SEARCHFCBS/EB60                 SEARCHFLCN/F1C5
 SEARCHLCN/CEDE  SEARCHM2/EFAC   SEARCHM3/EFB8   SEARCHM4/EFBE   SEARCHM5/EFA3   SEARCHMAP/EF86
 SEARCHMAP1/EF9D                 SEARCHMERRED3/F1F4              SEARCHMF/F018   SEARCHMF0/F024
 SEARCHMF1/F02C  SEARCHMF1A/F02F                 SEARCHMF2/F062  SEARCHMF3/F06A  SEARCHMF4/F059
 SEARCHMF5/F07A  SEARCHMF6/F082  SEARCHMF7/F085  SEARCHMF8/F08B  SEARCHMFE/EFE0  SEARCHMFE1/EFFC
 SEARCHMFE2/EFE8                 SEARCHMFG/F0AC  SEARCHMFQ/F0CA  SEARCHMFQJ1/EFDD
 SEARCHMFQXIT/F1CE               SEARCHMFQXITJ1/F015             SEARCHMR/F0E2   SEARCHMR0/F0E6
 SEARCHMR0A/F0EE                 SEARCHMR1/F12C  SEARCHMR2/F157  SEARCHMR3/F15F  SEARCHMR4/F14E
 SEARCHMR4C/F142                 SEARCHMR5/F171  SEARCHMR6/F179  SEARCHMR7/F17F  SEARCHMR8/F186
 SEARCHMRE/F0F4  SEARCHMRE1/F113                 SEARCHMRE2/F0FA                 SEARCHMRE3/F10B
 SEARCHMREB/F1E4                 SEARCHMREBJ1/F129               SEARCHMRG/F1A7  SEARCHNAMEP/CEAC
 SEARCHOOSE/F1F7                 SEARCHOOSE1/F209                SEARCHOOSE2/F21F
 SEARCHSAVEP/CEAE                SEARCHSTARTLSN/CEB0             SEARCHUS/F1B9   SECONDARYCHECKSUM1/FD8A




ASM/6800 1.4A0: FEF2 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 472; Form 1     Symbols Sorted by Name
SDOS11G.ASM
*SECTOR:BYTE/0000               *SECTORDB:ADDRESS/0005           SECTORDB:DISKINFO/0000
 SECTORDB:LSN/0002               SECTORDB:SIZE/0007              SECTORDRIVER/FBCD               SEED/2781
 SERIALNUMBER.SYS/2736           SERIALNUMBER.SYSL/0010          SERIALNUMBER:SIZE/0008
 SERIALNUMBERLOCATION/D845       SETERROR/D64B   SETERROR:CODE/0002              SETERROR:SCLEN/0004
 SETINITERROR/275B               SETKEY/DC62     SETUPFCB/EAF0   SETUPFCBCL/EAFA
 SETUPFCBDIRPOS/EB2F             SETUPFORREAD/E10A               SETUPFORREAD1/E112
 SETUPFORWRITE/E0FE              STAASECTORL/EEAA                STARTADDRESS/CE48
 STARTIO$/FEA7   STATUS/D62A    *STATUS:ACTUALCOUNT/0008        *STATUS:BUFFERP/000A
*STATUS:CHANNEL/0002             STATUS:CODE/0003               *STATUS:COLUMN/0000
 STATUS:DATA/0000               *STATUS:DATEDAY/0003            *STATUS:DATEMONTH/0004
*STATUS:DATETICKS/0000          *STATUS:DATEYEAR/0005           *STATUS:DEVTYPE/0000
*STATUS:DIST/0000               *STATUS:EOFFLAG/0000            *STATUS:ERRLSN/000F
*STATUS:FILESIZE/0000           *STATUS:LASTBADLSN/0000         *STATUS:MAXCOUNT/000C
*STATUS:NBPS/0000               *STATUS:NCYL/0006               *STATUS:NSPC/0002
*STATUS:NSPT/0002               *STATUS:NTPC/0004               *STATUS:OPSCOUNT/000C
*STATUS:PROT/0000               *STATUS:READERRCNT/0008         *STATUS:READERRSTS/000A
 STATUS:SCLEN/000E              *STATUS:SEEKERRCNT/0000         *STATUS:SEEKERRSTS/0002
*STATUS:WRITEERRCNT/0004        *STATUS:WRITEERRSTS/0006         STATUSCONTROL/D60C
 STATUSCONTROL1/D620             STRINGBUFFER/CF2F               SURPRISE/CF7A   SWAPPING/0000
 SYSCALL$/00FB   SYSCALL1/D1BE   SYSCALL2/D1D9  *SYSCALL:ATTNCHECK/0019          SYSCALL:CHAIN/0006
 SYSCALL:CLOSE/0002             *SYSCALL:CLOSELOG/0008           SYSCALL:CONTROL/000E
*SYSCALL:CREATE/0001            *SYSCALL:CREATELOG/0007         *SYSCALL:DEBUG/0018
*SYSCALL:DELAY/001C             *SYSCALL:DELETE/0004            *SYSCALL:DISKDEFAULT/0009
 SYSCALL:DISPERROR/0015          SYSCALL:ERROREXIT/0012         *SYSCALL:EXIT/0011
*SYSCALL:GETERROR/0014          *SYSCALL:GETSERIALNUMBER/001E   *SYSCALL:INTERLOCK/001B
*SYSCALL:ISCONSOLE/001A         *SYSCALL:JOBCONTROL/001F        *SYSCALL:KILLENABLE/0017
*SYSCALL:KILLPROOF/0016         *SYSCALL:LOAD/0005               SYSCALL:OPEN/0000
 SYSCALL:READA/000A              SYSCALL:READB/000B             *SYSCALL:READLUN/001D
*SYSCALL:RENAME/0003             SYSCALL:SETERROR/0013           SYSCALL:STATUS/000F
*SYSCALL:WAITDONE/0010           SYSCALL:WRITEA/000C            *SYSCALL:WRITEB/000D
 SYSCALLENTRY/D1B3               SYSCALLX/CF1F   SYSCHANNEL/00FE                *SYSDEPENDENT/00F0
 SYSFCBPOINTER/CF10              SYSIOCB/CF57    SYSSECTORDB/CF12                SYSTEMDEFS/0001
 TABLEBRANCH/E20D                TABLEBRANCHCANT/E22C            TASKRTI/FDC5    TCB:COND/0004
 TCB:LNK/0000    TCB:PARAM/0006  TCB:SCRATCHPAD/0008             TCB:SIZE/0010   TCB:STACK/0002
 TEMP/0000       TEMP.DIVIDEND/0002              TEMP.DIVISOR/0000               TEMP.MPCND/0000
 TEMP.MPR/0005   TEMP.QUOTIENT/0000              TEMPA/0000      TEMPB/0001      TEMPX/0000
 TIMEOUT:DCB/0006                TIMEOUT:FUSE/0002               TIMEOUT:LINK/0000
 TIMEOUT:ROUTINE/0004           *TIMEOUT:SIZE/0008               TIMEOUTLEH/FD9D
 TIMEOUTLEH3/FDB9                TIMEOUTLEPTR/CE5C               TIMEOUTTASK/FD64
 TIMEOUTTASKBORED/FD5E           TIMEOUTTASKL/FD69               TIMEOUTTASKSETUP/26B2




ASM/6800 1.4A0: FEF2 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 473; Form 1     Symbols Sorted by Name
SDOS11G.ASM
 TIMEOUTTASKSTKINIT/CE72         TIMEOUTTASKTCB/CE7A             TOPOINTER/0000  TRANSFERCOUNT/CE9D
 UPDATECURBYTE/F582              UPDATECURBYTE1/F59B             UPDATECURBYTED/F5C8
 UPDATECURBYTEF/F5BB             UPDATECURBYTEOKRTS/F5C6         UPDATECURBYTERTS/F5BA
 UPDATEDIRENTRY/E9FC             UPDATEDIRFROMFCB/E9ED           UPDATEDIRL/EA03
 UPDATEDIROKRTS/EA20             UPDATEFILEDATE/DD0E             USEDCOUNT/CE9F  USERIOCBPOINTER/CEA2
 USERRETAPTR/CF8E                USERSLASTERROR/CF26             USERSYSCALLPTR/CF90
 USERTASKTCB/CE8A                VERIFYNMIISNOP/20D6            *VERIFYRESTARTCODE0/203B
 VERIFYRESTARTCODE1/208D         VERIFYRESTARTCODELOOP/2099      WAIT$/FE7C      WAITDONE/D653
*WAITDONE:CHANNEL/0002           WAITDONE:SCLEN/0003             WAITEVENT$/FE74
 WAITEVENTCOND/FE71              WAITEVENTCONDRTS/FE73           WAITFORMESSAGEPRINTED/21BD
 WAITRDSI/FAA3   WAITSECTOR/FAA1                 WAITSECTOR1/FAAE                WAITSECTORERRED/FABA
 WAITSECTORERRJ/F9EA             WAITSECTORERRJ2/FB59            WAITSECTORRTS/FAB8
 WRITEA/D5E3     WRITEA0/D5F5    WRITEA1/D5FB    WRITEA:BUFFERP/0004             WRITEA:CHANNEL/0002
 WRITEA:COUNT/0006               WRITEA:SCLEN/0008               WRITEALOG/D59E  WRITEB/D470
 WRITEB1/D482    WRITEB:BUFFERP/0004             WRITEB:CHANNEL/0002            *WRITEB:COUNT/0006
 WRITEB:SCLEN/0008               WRITEBOKRTS/D494                WRITEFLAG/CE9A  WRITERANDOM/217A
 WRITERANDOM1/2183               WRITERANDOM2/2185               WRITERANDOML/217C
 ZAPMEMORYLOOP/21E5              ZAPUSERSPACE/DC8B               ZAPUSERSPACEL/DC8C
 ZEROCLUSTER/EECB                ZEROCLUSTERL/EECE               ZERONEWKEYLOOP/D9F6
 ZEROSECTOR/EEB9                 ZEROTOCURBYTE/F4E8              ZEROTOCURBYTE3/F556
 ZEROTOCURBYTE5/F559             ZEROTOCURBYTEA/F52C             ZEROTOCURBYTEA1/F54C
 ZEROTOCURBYTEZ/F4F9




ASM/6800 1.4A0: FEF2 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 474; Form 1     Symbols Sorted by Value
SDOS11G.ASM
Symbols Sorted by Value:

*ASCII:NULL/0000                *BOOT:IPLDATA/0000               CC:POSITION/0000
 CHANGED/0000    CNFG:DISKDCBS/0000              CONTROL:DATA/0000              *CONTROL:DATETICKS/0000
*CONTROL:DIST/0000              *CONTROL:MAPALGORITHM/0000      *CONTROL:PROT/0000
*DCB:DONEFLAG/0000              *DIR:FILENAME/0000               DISKMAP:BYTE/0000
 DRIVER:DISKRESET/0000           DRIVER:OPEN/0000                DVDAT:NBPS/0000
*DVDAT:WIDTH/0000                DVTYP.FILE/0000                *DVTYP:TYPE/0000
*ERR:NONE/0000   FCB:DISKINFO/0000               HEADER:LCN/0000                 IC:CREATE/0000
 IGNORED/0000    IOCB:DCB/0000   IOPKDEFS/0000  *JC:CREATE/0000  LOAD:TYPE0/0000                 M6801/0000
 M6809/0000      RDSI:DISKINFO/0000             *RDSISTATE:IDLE/0000             SC:GETPOS/0000
 SCBLK:OPCODE/0000              *SDOS:VERSIONNUMBER/0000        *SECTOR:BYTE/0000
 SECTORDB:DISKINFO/0000         *STATUS:COLUMN/0000              STATUS:DATA/0000
*STATUS:DATETICKS/0000          *STATUS:DEVTYPE/0000            *STATUS:DIST/0000
*STATUS:EOFFLAG/0000            *STATUS:FILESIZE/0000           *STATUS:LASTBADLSN/0000
*STATUS:NBPS/0000               *STATUS:PROT/0000               *STATUS:SEEKERRCNT/0000
 SWAPPING/0000   SYSCALL:OPEN/0000               TCB:LNK/0000    TEMP/0000       TEMP.DIVISOR/0000
 TEMP.MPCND/0000                 TEMP.QUOTIENT/0000              TEMPA/0000      TEMPX/0000
 TIMEOUT:LINK/0000               TOPOINTER/0000 *ASCII:SOH/0001  CC:DUMPBUFFERS/0001
*DCB:LASTERROR/0001             *DVDAT:DEPTH/0001                DVTYP.DISK/0001
*ERR:ATTENTION/0001             *IC:DESTROY/0001                *JC:TESTDONE/0001
 LISTDEFS/0001   LOAD:TYPE1/0001                 M6800/0001      PROT::BACKUP/0001
 RDSISTATE:READING/0001         *REG:CC/0001    *SC:GETCOL/0001  SCBLK:WLEN/0001
*SDOS:LASTERROR/0001            *SYSCALL:CREATE/0001             SYSTEMDEFS/0001                 TEMPB/0001
*ASCII:STX/0002  ATTNCHECK:SCLEN/0002            CLOSE:CHANNEL/0002              CLOSELOG:SCLEN/0002
 CNFG:DEVICEDCBS/0002           *CONTROL:CHANNEL/0002           *CREATE:CHANNEL/0002
 DEBUG:SCLEN/0002                DELAY:PERIOD/0002               DISPERROR:SCLEN/0002
 DRIVER:CLOSE/0002               DRIVER:DISKREAD/0002           *DVDAT:NSPC/0002
*DVDAT:NSPT/0002                *DVTYP.STAPE/0002                ERROREXIT:CODE/0002
 EXIT:SCLEN/0002                 EXITSCANPTR/0002                FCB:DIRLSN/0002
 FROMPOINTER/0002               *IC:RESET/0002   INTERLOCK:FUNCTION/0002         IOCB:CURLSN/0002
 ISCONSOLE:SCLEN/0002           *JC:DESTROY/0002                *JOBCONTROL:FUNCTION/0002
 KILLENABLE:SCLEN/0002           KILLPROOF:SCLEN/0002            LCN:SIZE/0002   LOAD:TYPE2/0002
 NMAGICFCBS/0002                *OPEN:CHANNEL/0002               RDSI:LSN/0002   RDSISTATE:WRITING/0002
 READA:CHANNEL/0002             *READB:CHANNEL/0002             *REG:B/0002     *RENAME:CHANNEL/0002
*SC:GETEOF/0002  SCBLK:PARAMS/0002               SECTORDB:LSN/0002               SETERROR:CODE/0002
*STATUS:CHANNEL/0002            *STATUS:NSPC/0002               *STATUS:NSPT/0002
*STATUS:SEEKERRSTS/0002          SYSCALL:CLOSE/0002              TCB:STACK/0002  TEMP.DIVIDEND/0002
 TIMEOUT:FUSE/0002              *WAITDONE:CHANNEL/0002           WRITEA:CHANNEL/0002
 WRITEB:CHANNEL/0002            *ASCII:ETX/0003  CLOSE:SCLEN/0003               *CONTROL:CODE/0003




ASM/6800 1.4A0: FEF2 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 475; Form 1     Symbols Sorted by Value
SDOS11G.ASM
*CONTROL:DATEDAY/0003            DCB:NAME/0003  *DVTYP.DTAPE/0003               *IC:LOCK/0003
 LOAD:TYPE3/0003                 LSN:SIZE/0003  *RDSISTATE:VERIFYING/0003        READA:LMFLAG/0003
 READAHEADRDSIMIN/0003           REG:A/0003     *SC:GETFILESIZE/0003             SDOS:CONFIGURATION/0003
 STATUS:CODE/0003               *STATUS:DATEDAY/0003            *SYSCALL:RENAME/0003
 WAITDONE:SCLEN/0003            *ASCII:EOT/0004 *CHAIN:NAMEP/0004                CNFG:IOCBPOINTERS/0004
*CONTROL:DATEMONTH/0004          CONTROL:SCLEN/0004              COUNT/0004     *CREATE:NAMEP/0004
*CREATELOG:NAMEP/0004            DELAY:SCLEN/0004               *DELETE:NAMEP/0004
*DISKDEFAULT:NAMEP/0004          DRIVER:DISKWRITE/0004           DRIVER:READA/0004
*DVDAT:NTPC/0004                *DVTYP.CONSOLE/0004              ERROREXIT:SCLEN/0004
 EXITPARTIALCHKSUM/0004         *IC:RELEASE/0004                *INTERLOCK:BUFFERP/0004
*JOBCONTROL:BUFFERP/0004         LIMIT/0004     *LOAD:NAMEP/0004                *OPEN:NAMEP/0004
*REG:X/0004     *RENAME:NAMEP/0004              *SC:GETTYPE/0004                 SCBLK:WRBUF/0004
 SETERROR:SCLEN/0004            *STATUS:DATEMONTH/0004          *STATUS:NTPC/0004
*STATUS:WRITEERRCNT/0004        *SYSCALL:DELETE/0004             TCB:COND/0004   TIMEOUT:ROUTINE/0004
 WRITEA:BUFFERP/0004             WRITEB:BUFFERP/0004            *ASCII:ENQ/0005 *CONTROL:DATEYEAR/0005
 DCB:NEXTDCB/0005               *DVTYP.PRINTER/0005              FCB:DIRDISP/0005
*IC:TEST/0005   *IOCB:BUFFERP/0005               LOAD:ENCRYPTED/0005             RDSI:SECTORBASE/0005
 SC:GETPARAMS/0005              *SDOS:SERIALNUMBER/0005         *SECTORDB:ADDRESS/0005
*STATUS:DATEYEAR/0005           *SYSCALL:LOAD/0005               TEMP.MPR/0005  *ASCII:ACK/0006
 BLOCKMOVEX/0006                *CHAIN:LENGTH/0006               CNFG:NIOCHANNELS/0006
*CREATE:LENGTH/0006             *CREATELOG:LENGTH/0006           DCBPOINTER/0006
*DELETE:LENGTH/0006             *DISKDEFAULT:LENGTH/0006         DISPERRORMSGL/0006
 DRIVER:DISKWAIT/0006            DRIVER:WRITEA/0006             *DVDAT:NCYL/0006
*DVTYP.SERIALOUT/0006           *INTERLOCK:COUNT/0006           *JOBCONTROL:COUNT/0006
*LOAD:LENGTH/0006               *OPEN:LENGTH/0006                REG:PC/0006    *RENAME:LENGTH/0006
 SCBLK:WRLEN/0006               *STATUS:NCYL/0006               *STATUS:WRITEERRSTS/0006
 SYSCALL:CHAIN/0006              TCB:PARAM/0006  TIMEOUT:DCB/0006                WRITEA:COUNT/0006
*WRITEB:COUNT/0006              *ASCII:BEL/0007  BOOT:PARAMSIZE/0007             CNFG:DSKBUFFERPOOL/0007
 CONTEXTBLOCK:SIZE/0007          DCB:DRIVER/0007                *DVTYP.SERIALIN/0007
 FCB:HLSN/0007   IOCB:FCB/0007   RDSI:FLINK/0007                 SDOS:IOBLOCKPTR/0007
 SECTORDB:SIZE/0007             *SYSCALL:CREATELOG/0007          ASCII:BS/0008   DRIVER:DISKSTATUS/0008
 DRIVER:READB/0008              *DVTYP.PAROUT/0008              *GETERROR:ACTUALCOUNT/0008
*GETSERIALNUMBER:ACTUALCOUNT/0008                INTERLOCK:SCLEN/0008
*JOBCONTROL:ACTUALCOUNT/0008    *JOBCONTROL:SCLEN/0008           NMBPB/0008      READA:ACTUALCOUNT/0008
 READB:ACTUALCOUNT/0008          SCBLK:RPLEN/0008                SERIALNUMBER:SIZE/0008
*STATUS:ACTUALCOUNT/0008        *STATUS:READERRCNT/0008         *SYSCALL:CLOSELOG/0008
 TCB:SCRATCHPAD/0008            *TIMEOUT:SIZE/0008               WRITEA:SCLEN/0008
 WRITEB:SCLEN/0008               ASCII:HT/0009   CNFG:DSKPOOLSIZE/0009           DCB:SIZE/0009
 DSKINFO:NBPS/0009              *DVTYP.PARIN/0009                INITDATELEN/0009
 IOCB:DRIVER/0009                RDSI:BLINK/0009                *SDOS:IOCBPOINTER/0009




ASM/6800 1.4A0: FEF2 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 476; Form 1     Symbols Sorted by Value
SDOS11G.ASM
*SYSCALL:DISKDEFAULT/0009        ASCII:LF/000A   DRIVER:DISKCONTROL/000A         DRIVER:WRITEB/000A
*DVTYP.DUMMY/000A                FCB:FLAGS/000A *GETERROR:BUFFERP/000A
*GETSERIALNUMBER:BUFFERP/000A    READA:BUFFERP/000A              READB:BUFFERP/000A
 SCBLK:RDBUF/000A               *STATUS:BUFFERP/000A            *STATUS:READERRSTS/000A
 SYSCALL:READA/000A             *ASCII:VT/000B   CNFG:ATTNCHECK/000B             DSKINFO:NSPT/000B
*DVTYP.CLOCK/000B                FCB:REFCOUNT/000B               IOCB:EOFFLAG/000B
 RDSI:MODIFIED/000B              SDOS:CLOCK/000B                 SYSCALL:READB/000B
 ASCII:FF/000C   DRIVER:CREATE/000C             *DRIVER:DISKWRITEPROTQ/000C      FCB:HLCN/000C
*GETERROR:MAXCOUNT/000C         *GETSERIALNUMBER:MAXCOUNT/000C   IOCB:COLCNT/000C
*JOBCONTROL:MAXCOUNT/000C        RDSI:STATE/000C                 READA:MAXCOUNT/000C
 READB:MAXCOUNT/000C             SCBLK:RDLEN/000C               *STATUS:MAXCOUNT/000C
*STATUS:OPSCOUNT/000C            SYSCALL:WRITEA/000C             ASCII:CR/000D   CNFG:DEBUGGER/000D
 DSKINFO:NTPC/000D               IOCB:CURBYTE/000D              *RDSI:RETRYCOUNT/000D
*SYSCALL:WRITEB/000D            *ASCII:SO/000E   CHAIN:SCLEN/000E                CREATE:FILESIZE/000E
 CREATE:SCLEN/000E               CREATELOG:SCLEN/000E            DEFAULTPROGL/000E
 DELETE:SCLEN/000E               DIR:FCBDATASIZE/000E            DISKDEFAULT:SCLEN/000E
*DRIVER:DISKVERIFY/000E          DRIVER:RENAME/000E              FCB:HCSIC/000E  GETERROR:SCLEN/000E
 GETSERIALNUMBER:SCLEN/000E      LOAD:SCLEN/000E                 OPEN:SCLEN/000E
*RDSI:SECTOR/000E                READA:SCLEN/000E                READB:SCLEN/000E
 READLUNNAME:SCLEN/000E          RENAME:SCLEN/000E               RW:POSITION/000E
 SCBLK:DATA/000E                *SCBLK:END/000E  SDOS:DAY/000E   STATUS:SCLEN/000E
 SYSCALL:CONTROL/000E           *ASCII:SI/000F   CNFG:DRIVERBASE/000F            DSKINFO:NCYL/000F
 FCB:NCLUSTERS/000F              SDOS:MONTH/000F                *STATUS:ERRLSN/000F
 SYSCALL:STATUS/000F            *ASCII:DLE/0010  BOOT:DISKINFO/0010              BOOT:DISKINFOLEN/0010
 BOOT:FILESYSTEMVERSION/0010     CC:DEVICESPECIFICOP/0010       *CC:ECHO/0010    CC:SETFILEDATE/0010
 CC:UNLOCKDISK/0010              DIR:FCBDATA/0010                DIR:HLCN/0010   DIR:NAMESIZE/0010
 DRIVER:DELETE/0010             *DRIVER:DISKLSNTOPSN/0010        FCBFLG::MODIFIED/0010
 FILESYSTEMVERSION/0010          RDSI:TRACK/0010                 SC:DEVICESPECIFICOP/0010
 SC:GETFILEDATE/0010             SC:GETLASTBADLSN/0010          *SC:GETPROFILE/0010
 SDOS:YEAR/0010  SERIALNUMBER.SYSL/0010         *SYSCALL:WAITDONE/0010           TCB:SIZE/0010
*ASCII:DC1/0011  BOOT:NSPC/0011  CC:DISMOUNTDISK/0011           *CC:NOECHO/0011 *CC:SETFILEPROT/0011
 CNFG:INTSETUP/0011              DSKINFO:NSPC/0011               FCB:FILESIZE/0011
 IOCB:DISKWRITELOCKED/0011       IOCB:LOCATEDF/0011             *SC:GETACTCOL/0011
 SC:GETERRORSTATS/0011           SC:GETFILEPROT/0011             SDOS:STACKSWITCHED/0011
 SDOSVERSION/0011               *SYSCALL:EXIT/0011              *ASCII:DC2/0012 *BOOT:MINALLOC/0012
*CC:IDLES/0012  *CC:SETFILESIZE/0012             CC:SETMAPALGORITHM/0012         CREATE:FILESIZESCLEN/0012
 DIR:HCSIC/0012  DRIVER:CONTROL/0012             DSKINFO:MINALLOC/0012           IOCB:DRDSI/0012
 RDSI:CYLINDER/0012              RWPOSITION:SCLEN/0012          *SC:GETPROFILEALTERATION/0012
*SDOS:IOINT/0012                 SYSCALL:ERROREXIT/0012         *ASCII:DC3/0013 *CC:MULTISECTORREAD/0013
 CC:POSITIONTOEND/0013          *CC:TABS/0013    CNFG:INTDISABLE/0013           *DIR:NCLUSTERS/0013




ASM/6800 1.4A0: FEF2 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 477; Form 1     Symbols Sorted by Value
SDOS11G.ASM
*SC:GETOUTPUTTIMEOUT/0013        SYSCALL:SETERROR/0013          *ASCII:DC4/0014 *BOOT:MIDALLOC/0014
*CC:MULTISECTORWRITE/0014       *CC:SETACTBLOCK/0014             DRIVER:STATUS/0014
 DSKINFO:MIDALLOC/0014           IOCB:NEXTBYTE/0014              RDSI:SIZE/0014 *SC:GETBAUDRATE/0014
*SYSCALL:GETERROR/0014          *ASCII:NAK/0015 *CC:CLRINPUT/0015               *CC:FORMAT/0015
*DIR:FILESIZE/0015               FCB:PROT/0015   MINSTACK/0015  *SDOS:RTI/0015   SYSCALL:DISPERROR/0015
*ASCII:SYN/0016 *BOOT:MAPALGORITHM/0016         *CC:CLROUTPUT/0016              *CC:WAITDONE/0016
 CNFG:INTENABLE/0016             DRIVER:RESET/0016               DSKINFO:MAPALGORITHM/0016
 FCB:DAY/0016    IOCB:BYTECOUNT/0016            *SC:GETTABS/0016                *SYSCALL:KILLPROOF/0016
*ASCII:ETB/0017 *CC:SETREADTIMEOUT/0017          FCB:MONTH/0017 *SC:GETIDLES/0017
*SYSCALL:KILLENABLE/0017        *ASCII:CAN/0018  BOOT:CREATIONDATE/0018         *CC:SETPROFILE/0018
*DRIVER:STARTIO/0018             DSKINFO:LOG2NBPS/0018          *FCB:YEAR/0018   IOCB:CURLCN/0018
*SC:GETWRAP/0018                *SDOS:RESCHEDULE/0018           *SYSCALL:DEBUG/0018
*ASCII:EM/0019  *CC:ALTERPROFILE/0019            CNFG:INTRTI/0019                DIR:PROTECTION/0019
 DSKINFO:NBPSM1/0019            *FCB:VERSION/0019               *SC:GETCOLORING/0019
*SYSCALL:ATTNCHECK/0019         *ASCII:SUB/001A *CC:WRITEEDITLINE/001A          *DIR:DAY/001A
*DRIVER:PFRESTART/001A           FCB:SIZE/001A   IOCB:DRSN/001A *SC:GETBACKGROUND/001A
*SYSCALL:ISCONSOLE/001A         *ASCII:ESC/001B  BOOT:DIRLSN/001B               *CC:SETFIELDSIZE/001B
*DIR:MONTH/001B  DSKINFO:NLSN/001B               IOCB:RDCN/001B *SC:GETPROFILENAME/001B
*SDOS:CLOCKTICKED/001B          *SYSCALL:INTERLOCK/001B         *ASCII:FS/001C  *CC:SETPARAMS/001C
 CNFG:INTERRUPTSTACK/001C       *DIR:YEAR/001C  *SYSCALL:DELAY/001C             *ASCII:GS/001D
*CC:ACTIVATIONCK/001D           *DIR:VERSION/001D                IOCB:RBN/001D  *SYSCALL:READLUN/001D
*ASCII:RS/001E  *CC:WRAP/001E    CNFG:IOINTPOLL/001E             DSKINFO:NLCN/001E
 OPCODEMAX/001E  SDOS:CURRENTASK/001E           *SYSCALL:GETSERIALNUMBER/001E   *ASCII:US/001F
*BOOT:CHECKSUM/001F             *CC:NOWRAP/001F  IOCB:HRDSI/001F                *SYSCALL:JOBCONTROL/001F
 ASCII:SPACE/0020                BOOT:DISKID/0020                BOOT:DISKIDSIZE/0020
*CC:COLORING/0020                CNFG:TASKQUEUE/0020             DIR:ENTRYSIZE/0020
 DSKINFO:NBPC/0020               FCBFLG::DELETED/0020            SDOS:KILLPROOF/0020
*CC:BACKGROUND/0021              IOCB:HRSN/0021 *SDOS:KILLUSERPROGRAM/0021      *CC:KILLPROOF/0022
 CNFG:TIMEOUTLIST/0022           DSKINFO:RANDMAP/0022            IOCB:SIZE/0022 *CC:KILLENABLE/0023
*CC:SETOUTPUTTIMEOUT/0024       *CNFG:VTPROFILES/0024            DSKINFO:MAPLSN/0024
 SDOS:STARTIO/0024              *CC:SETBAUDRATE/0025            *CC:SETINPUTTRANSLATION/0026
*CNFG:VTDEBUG/0026               DSKINFO:DIRFCB/0027            *SDOS:WAITCOND/0027
*CNFG:MTPRIMS/0028               DSKINFO:MAPFCB/0029            *CNFG:BOOTDEFAULTDISKDCB/002A
*SDOS:WAITEVENT/002A             DSKINFO:SECTORDB/002B          *CNFG:BOOTCONSOLEDCB/002C
*SC:GETLINEFLAGS/002C            DSKINFO:BADLSN/002D            *SDOS:ERROR/002D
*CNFG:RETURNELAPSEDMILLISECONDS/002E            *CNFG:SETCLOCKINTERVALMILLISECONDS/0030
 DSKINFO:SEEKERRCNT/0030        *SDOS:ERRORSAVE/0030            *DSKINFO:SEEKERRSTS/0032
*SDOS:ERRORED/0033              *DSKINFO:WRITEERRCNT/0034        SC:GETLINEFLAGSHINT/0034
 COPYRIGHTCHECKSUM/0036         *DSKINFO:WRITEERRSTS/0036       *SDOS:CHECKRDLEN/0036
*DSKINFO:READERRCNT/0038        *SDOS:CHECKWRLEN/0039           *DSKINFO:READERRSTS/003A




ASM/6800 1.4A0: FEF2 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 478; Form 1     Symbols Sorted by Value
SDOS11G.ASM
*DSKINFO:OPSCOUNT/003C          *SDOS:CHECKSCLEN/003C            DSKINFO:ERRLSN/003F
*SDOS:TABLEBRANCH/003F           BOOT:SIZE/0040  FCBFLG::UPDATEDIR/0040          MEMSIZE/0040
 PROT::WRITE/0040               *DSKINFO:WRITEPROTSTATE/0042     SDOS:BLOCKMOVE/0042
*DSKINFO:SIZE/0043              *SDOS:GETRUNNINGENCRYPTED/0045   SDOSSUBREVISION/0047
 SDOS:ENTRYSIZE/0048            *ERR:FATALCOMPILE/0064          *ERR:WARNINGCOMPILE/0065
*ERR:BADCMDFORMAT/0066          *ERR:CANTGOTO/0067              *ERR:ABNORMALSTOP/0068
*ERR:NOTENUFMEM/0069             ASCII:MASK/007F                 ASCII:RUBOUT/007F
 FCBFLG::NEWFILE/0080           *BASICFLAGS/00F0                *SYSDEPENDENT/00F0
 SYSCALL$/00FB   SYSCHANNEL/00FE                 LOGCHANNEL/00FF                 ERR:BOOTCKSUMFAIL/03E8
 ERR:EOFHIT/03E9                 ERR:FILEISOPEN/03EA             ERR:NODEBUGGER/03EB
 ERR:BADPOSITION/03EC            ERR:NBPCTOOBIG/03ED             ERR:NODISKMAP/03EE
 ERR:NOMATCHFCB/03EF             ERR:NODEFAULTPROGRAM/03F0       ERR:FILEWRTPROT/03F2
 ERR:FILENOTFOUND/03F3           ERR:ILLEGALLCN/03F4             ERR:BADFNAMESIZE/03F5
 ERR:NEWFILEEXISTS/03F6          ERR:NODISKSPACE/03F7            ERR:LCNWASNTALLOCATED/03F8
 ERR:NOFREEFCBS/03F9             ERR:WRONGFILESYSTEM/03FA        ERR:FILEINCREATE/03FB
 ERR:DISKMOUNTED/03FC           *ERR:CANTOPENMUSTCREATE/03FD     ERR:NOERRORMSGS/03FE
 ERR:BADFILENAME/03FF            ERR:ILLFILESIZE/0400            K/0400          ERR:HCSICTOOSMALL/0401
 ERR:NOTENOUGHPOOL/0402          ERR:PWRFAILDISKF/0403           ERR:NOTALOADFILE/0404
*ERR:BADFILEVERSION/0405         ERR:CHTOOBIG/0406               ERR:CHBUSY/0407
 ERR:CLOSED/0408                 ERR:ILLEGALSYSCALL/0409         ERR:ILLDEVICEOP/040A
 ERR:RENAMEDEVICE/040B           ERR:BADLOADRECORD/040C          ERR:NOTENOUGHROOM/040D
 ERR:ILLLSN/040E                 ERR:DIRECTORYDAMAGED/040F      *ERR:IBUFOVERFLOW/0410
 ERR:PROGRAMKILLED/0411         *ERR:DEVICETIMEDOUT/0412         ERR:SECTORSIZE2/0413
*ERR:SYSTEMCROAKED/0414          ERR:DISKREAD/0415               ERR:DISKWRITE/0416
*ERR:DISKSEEK/0417              *ERR:DSKWRTPROT/0418             ERR:DISKWRITELOCKED/0419
 ERR:SDOSCKSUM/041A              ERR:NLSNGE224/041B              ERR:CLUSTERSIZELIMITSFILE/041C
 ERR:SYSCALLTOOSHORT/041D        ERR:RDBUFTOOSMALL/041E          ERR:WRBUFTOOSMALL/041F
 ERR:NOSUCHDEVICE/0420          *ERR:DEVICEERRORED/0421          ERR:MUSTBEDISK/0422
 ERR:NOTOPENTOCONSOLE/0423      *ERR:DEVICENOTREADY/0424         ERR:TIMENOTSET/0425
*ERR:NOSUCHLUN/0426              ERR:ZEROSTARTADDRESS/0427       ERR:NOSUCHPROGRAM/0428
*ERR:OLDFILEEXISTS/0429          ERR:ALLOC0CLUSTERS/042B         ERR:FILEALREADYDELETED/042C
*ERR:PRINTERNOTREADY/042D       *ERR:INPUTTIMEOUT/042E          *ERR:ENDOFMEDIUM/042F
 ERR:SELFTESTCKSUM/0430         *ERR:NOTIMEOUTBLKS/0431          ERR:SERIALNOWRONG/0432
*ERR:NOSUCHKEY/0433             *ERR:DUPLICATEKEY/0434          *ERR:BRANCHFACTORSIZE/0435
 ERR:SDOSNOTREGISTERED/0436      ERR:DECRYPTIONKEYSDONTMATCH/0437               *ERR:BADREADBUF/04B0
*ERR:BADWRITEBUF/04B1           *ERR:RDBUFTOOBIG/04B2           *ERR:WRBUFTOOBIG/04B3
*ERR:NOTENOUGHCHANNELS/04B4     *ERR:NOTUNDERTIMESHARE/04B5     *ERR:MTNOROOM/04B6
*ERR:MTBADCONFIG/04B7           *ERR:ALREADYLOCKED/04B8         *ERR:NOSUCHOBJECT/04B9
*ERR:NOTLOCKED/04BA             *ERR:OBJECTDESTROYED/04BB       *ERR:LOCKRESET/04BC
*ERR:IMPLEMENTATIONLIMITREACHED/04BD            *ERR:ILLEGALINTERLOCKFUNCTION/04BE




ASM/6800 1.4A0: FEF2 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 479; Form 1     Symbols Sorted by Value
SDOS11G.ASM
*ERR:MEMORYMGMTFAIL/04BF        *ERR:NOMOREJOBS/04C0            *ERR:ILLEGALJOBCONTROL/04C1
*ERR:CAPABILITYFAILURE/04C2     *ERR:JOBKILLED/04C3             *ERR:JOBCOMPLETED/04C4
*ERR:WRONGDISKTYPE/076E         *ERR:IOINPROGRESS/0771          *ERR:BUSYFORANOTHERPROCESS/0772
*ERR:ACTIVATIONNOTINBUFFER/0773 *ERR:BADFIELDWIDTH/0774         *ERR:ACTIVATIONRECEIVED/0775
*ERR:TIMEDINPUTEXPIRED/0776     *ERR:PROFILENOTFOUND/0777       *ERR:PROFILENOTMALLEABLE/0778
 OKRTS/0C39      ERRORRTS/0D39   SDOSINIT/2000   SDOSINITCKSUML/2019            *VERIFYRESTARTCODE0/203B
 MACRO:0002/2073                 MACRO:0003/207F                 VERIFYRESTARTCODE1/208D
 VERIFYRESTARTCODELOOP/2099      INCORRECTROM/20CB               VERIFYNMIISNOP/20D6
 MACRO:0004/20ED                 MACRO:0005/20FB                 FETCHSERIALNUMBERSYS/211E
 MACRO:0006/211E                 INITIALIZEERR/214D              RESTART/2162    LDAENCRYPTED/2165
 ERASEBANK/216C  ERASEMEM/216F   ERASELOOP/2172  DONTZEROMEMORY/217A             WRITERANDOM/217A
 WRITERANDOML/217C               WRITERANDOM1/2183               WRITERANDOM2/2185
 DOSYSCALL/2194  ERRWRONGSERIALNUMBER/219A       WAITFORMESSAGEPRINTED/21BD      DELAYLOOP/21BF
 ZAPMEMORYLOOP/21E5              PRINTCANTRUN/21ED               CANTRUNMSG/21F5
 SDOSSERIALNUMBER/221B           CPUSERIALNUMBER/2251            CANTRUNMSGEND/2264
 SAYINVALIDROM/2264              PRINTINVALIDROM/226D            INVALIDROMMSG/2275
 CVTTOHEXSERIALNO/22B8           INVALIDROMMSGEND/22B8           CVTTOHEXSERIALNOLOOP/22C0
 HEXTOD/22DD     HEXTOD1/22EC    HEXTOD2/22F4    SDOSINITCKSUM/22F5              SDOSINITERRED/22F6
 SDOSINITS/22F9  SDOSINIT0/230C  SDOSINIT1/2316  SDOSINIT1A/2318                 SDOSINIT1L/2383
*SDOSINIT1B/238A                 SDOSINITTCB1/239A               SDOSINITTCBL/23AF
 SDOSINITDBLCHECKL/23D8          SDOSINIT2/240A  BCDTOASCII/2448                 DSKFRESET/2454
 INITRDSI/245F   MACRO:0007/2498                *INITRDSI1/249A  INITRDSI2/24A3  INITRDSI2A/24AE
 INITRDSI3/24C1  INITRDSI3A/24CE                 INITRDSI4L/24D3                 INITRDSI4/24D9
 INITRDSI4A/24E8                *INITRDSI6/24F5  ERRNOTENOUGHPOOL/24FA           INITRDSI7/24FF
 INITRDSI8/2527  INITRDSI9/2543  ALLOCRDSIS/2560                 ALLOCRDSISRTS/2592
 INITFCBS/2593   INITFCBL/25AC   INITDISKINFO/25C4               INITDISKINFOL/25D5
 MACRO:0008/2600                 INITDISKINFO2/2608              INITDISKINFO2L/260C
 INITDISKERRED/264D              ERRSECTORSIZE2/2650             MULNLSNBYAB/2655
 MULNLSNBYABL/2662               MULNLSNBYAB1/2672               ERRNLSNGE224/2681
 INITIOCBS/2686  INITIOCBL/2690  INITIOCB/26AD   TIMEOUTTASKSETUP/26B2           SDOSINITEND/26BD
*COMPUTECHECKSUMS/26BE           COMPUTEEXITCHECKSUM/26BE        COMPUTEEXITCHECKSUML/26C7
 COMPUTEMAINCHECKSUM/26D3        COMPUTEMAINCHECKSUML/26DC       COMPUTEINITCHECKSUM/26E9
 COMPUTEINITCHECKSUML/26F2       FIRSTBUF/26FF   FIRSTSEGSIZE/2701               NBUFFERS/2703
 INITCOUNTER/2704                INITX/2705      EXITCOPYRIGHT/2707              SDOSINITID/270F
 DISPLAYINITDATE/2717            INITDATE/271F   CHAINTOSERIALNO.SYS/2728        SERIALNUMBER.SYS/2736
 OPENSERIALNO.SYS/2746           SCRATCH/2754    CLOSESERIALNO.SYS/2758          SETINITERROR/275B
 ERRORCODE/275D  DISPLAYINITERROR/275F           READSERIALNUMBERFROMFILE/2761
 READSERIALNUMBERFILETYPE/2773   SEED/2781       RUNNINGENCRYPTEDP/2782          COPYOFNMIVECTOR/2784
 COPYOFRESTARTVECTOR/2786        ACTSIZE/30F3    SDOS:ESTSIZE/3200               CODE/CE00
 LASTERROR/CE01  IOCBPOINTER/CE09                STARTADDRESS/CE48               LOADCOUNT/CE4A




ASM/6800 1.4A0: FEF2 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 480; Form 1     Symbols Sorted by Value
SDOS11G.ASM
 DEFAULTDISKDCB/CE4C             NAMESCANPTR/CE4E                NAMESIZE/CE50   CONSOLEDRIVER/CE52
 DRIVERVPOINTER/CE54             ERRORADDRESS/CE56               DAYSPERMONTHX/CE58
 NTIMEOUTBLKS/CE5A               CLOCKTICKEDEVENT/CE5B           TIMEOUTLEPTR/CE5C
 DELAYBLOCK/CE5E                 DELAYCOMPLETE/CE64              TIMEOUTTASKSTKINIT/CE72
 TIMEOUTTASKTCB/CE7A             USERTASKTCB/CE8A                WRITEFLAG/CE9A  BUFFERPOINTER/CE9B
 TRANSFERCOUNT/CE9D              USEDCOUNT/CE9F  COLUMNCOUNT/CEA1                USERIOCBPOINTER/CEA2
 RDSIPOINTER/CEA4                FCBPOINTER/CEA6                 DIRENTRY/CEA8   DIRENTRYDISP/CEAA
 SEARCHNAMEP/CEAC                SEARCHSAVEP/CEAE                SEARCHSTARTLSN/CEB0
 FREEDIRLSN/CEB3                 FREEDIRENTRYDISP/CEB6           DIRSECTOREND/CEB8
 FILENAMEBUF/CEBA               *FILENAMEFILL/CECA               FILENAMELENGTH/CECC
 FILESIZERQSTD/CECD              FILESIZE2/CED1  PARSECOUNT/CED5                *FILEPROT/CED7
 ALLOCATIONCOUNT/CED8            ALLOCATIONPLCN/CEDA             DIVIDEPOINTLCN/CEDC
 SEARCHLCN/CEDE  AVAILABLELCN/CEE0               AVAILABLECOUNT/CEE2             DESIREDLCN/CEE4
 LCNGROUPLENGTH/CEE6             DISKMAPSECTORSTART/CEE8         DISKMAPSECTOREND/CEEA
 DISKMAPBYTEPOINTER/CEEC         DISKMAPMASK/CEEE                LASTSECTORREADQ/CEEF
 READFLAG/CF03   READSECTORDBP/CF04              REMOVESECTORCNT/CF06            REMOVEIOCBPTR/CF07
 NRDSIS/CF09     NFCBS/CF0A      NDRIVES/CF0B    ERRFCBPOINTER/CF0C              MAXSECTORSIZE/CF0E
 SYSFCBPOINTER/CF10              SYSSECTORDB/CF12                LOCATERDCNX/CF19
 DCBPTRSAVE/CF1B                 LOADSYSCALLPTR/CF1D             SYSCALLX/CF1F   SDOSSTACK/CF22
 USERSLASTERROR/CF26             EXITDAMAGEPTR/CF28              DECBUF/CF2A     ERRORNUMBER/CF2D
 STRINGBUFFER/CF2F               LOGIOCB/CF35    SYSIOCB/CF57    DONTSTOPME/CF79
 SURPRISE/CF7A   SCHEDX/CF7B     INTDISABLE/CF7D                 INTENABLE/CF80  INTRTI/CF83
 INTERRUPTSTACK/CF86             JMPIOINT/CF88   KILLREQUESTEDF/CF8B             KILLEDF/CF8C
 SDOSRECURSIVECALL/CF8D          USERRETAPTR/CF8E                USERSYSCALLPTR/CF90
 CONSOLEOPEN/CF92                CONSOLENAMEPTR/CF96             CONSOLENAMELEN/CF98
 ACKCONTROLC/CFA0                LOGOUT/CFAE     DISPOUT/CFC0    DISPREADB3/CFC8
 DISPPOS1/CFD6   DISPGETCHAR/CFDA                BUFFER/CFE8     EXITCHAIN/CFEC  EXITSCLOSE/CFFA
 IOBLOCK/CFFD    SAFEGAURD/D00F  SAFEGAURD1/D016                 LOADGETPOS/D01F
 LOADFILEPOS/D02D                FILLDECRYPTBUFFER/D031          LOADMULTIPLEOF8/D03F
 LOADADDRESS/D049                OPTIMIZEDLOADCOUNT/D04B         GET1BYTE/D04D   DECRYPTBUFPTR/D05B
 DECRYPTBUFFER/D05D              DECRYPTBUFFEREND/D065           NKEYS/D065      RUNNINGENCRYPTEDFLAG/D066
 OKTODECRYPTFLAG/D067            OLDKEYENCRYPTED/D068            NEWKEYENCRYPTED/D070
 DECRYPT1/D078   KEY1/D07E       KEY2/D085       KEY3/D08C       KEY4/D093       KEY5/D09A       KEY6/D0A1
 KEY7/D0A8       DECRYPT/D0B1    DECRYPTLOOP/D0BD                KEY0/D0C2       SDOSCHKSUMBASE/D0C3
*DECRYPT0/D0C5   DECRYPTRTS/D102                 EORALL8BYTES/D108               SDOSMSG/D119
 COPYRIGHT/D12F  COPYRIGHTEND/D154               OPCODES/D154    SYSCALLENTRY/D1B3
 SYSCALL1/D1BE   SYSCALL2/D1D9   ERRILLSYSCALL/D1EF              READLUNNAME/D1EF
 ERRSYSCALLTOOSHORT/D1F3         ERRET/D1F7      ERRORINX/D201   ERRETL/D208     ERRORED/D20A
 ERRORSAVE/D219  ISCONSOLE/D220  ERRCLOSED/D234  ERRCHBUSY/D238  ERRCHTOOBIG/D23C
 CHECKCHANNELOPEN/D240           ISCONSOLEOKRTS/D253             CHECKCHANNELCLOSED/D255




ASM/6800 1.4A0: FEF2 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 481; Form 1     Symbols Sorted by Value
SDOS11G.ASM
 CHECKCHANNELCL1/D257            GETIOCBPOINTER/D25D             GETIOCBX/D278   GETIOCB1/D27D
 ISDIG/D28F      ISDNO/D296      ISALPHANUM/D298                 ISALPHANUMRTS/D2A6
 ISALPHANUM1/D2A7                FINDDRIVER/D2AE                 FINDDRIVER1L/D2BC
*FINDDRIVER2/D2CE                FINDDISK/D2D7   FINDDEVICEL/D2F6                FINDDEFAULT/D310
 FOUNDDISK1/D31D                 FOUNDDISK2/D320                 FOUNDDEVICE/D323
 FOUNDDISK/D337  FOUNDDISK3/D345                 DEFAULTDISKNAME/D34A            CMPDVNAME/D350
 CMPDVNAML/D364  CMPDVNAML1/D377                 CMPDVNAMEZ/D389                 CMPDVNAMENF/D394
 CMPDVNAMENM/D396                INTERLOCK/D39F  INTERLOCKOKRTS/D3AF             DELAY/D3B1
 DELAY1/D3C0     SDOSNOTREGISTERED/D3CE          DELAYDONE/D3F2  OPEN/D3F8       OPEN1/D3FD      OPEN2/D432
 PLANTDCBINIOCB/D43F             OPENERRED/D44B  CREATELOG/D44C  CREATE/D459     CREATE1/D45B
 DELETE/D462     READB/D469      WRITEB/D470     WRITEB1/D482    FNAMEPROCESS/D486
 FNAMEPROCESS1/D489              WRITEBOKRTS/D494                DISKDEFAULT/D496
 CLOSERTS/D4A3   ERRMUSTBEDISK/D4A4              CLOSE/D4A9      CLOSE1/D4B5     CLOSELOG/D4C3
 LOGCLOSE/D4C9   RENAME/D4CC     RENAME1/D4EA    ERRRENAMEDEVICE/D4F1            READAEOF/D4F6
 READA/D4FB      MACRO:0009/D507                 MACRO:000A/D521                 READA2/D540
 MACRO:000B/D584                *READA1/D584     READALOG/D595   WRITEALOG/D59E  READALOG0/D5B8
 CLOSECHANNEL0/D5D0              DOWELOG/D5D3    DONTLOG/D5E1    READARTS/D5E2   WRITEA/D5E3
 WRITEA0/D5F5    WRITEA1/D5FB    CONTROL/D606    STATUSCONTROL/D60C              STATUSCONTROL1/D620
 STATUS/D62A     DEBUG/D630      DEBUG1/D63E     ATTNCHECK/D644  SETERROR/D64B   WAITDONE/D653
 GETERROR/D655   DISPLAYERROR/D668               DISPLAYERRORRETRY/D66E          DISPLAYERRORA/D678
 DISPLAYERROR0/D696              DISPLAYERROR1A/D6B4             DISPLAYERROR1/D6BC
 DISPERRKILLLOG/D6D3             DISPERRKILLLOG1/D6DF            DISPLAYERRORDONE/D6E9
 DISPLAYERROR4/D6F2              DISPLAYERROR4A/D6F4             DISPLAYERROR5/D707
 DISPLAYERROR6/D725              DISPLAYERROR7/D740              DISPLAYERROR9/D747
 DISPLAYERROR8/D74A              DISPLAYERROR8A/D74B             MACRO:000C/D769
 DISPERRORMSG/D76A               DISPCLOSE/D770  DISPPOS/D773    DISPPUTCHAR/D77B
 DISPERROR/D783  KILLUSERPROGRAM/D78B            KILLUSER2/D7A8  KILLUSERRTS/D7B1
 KILLPROOF/D7B6  KILLENABLE/D7BA                 KILLPROOF1/D7BB                 KILLEDTEST/D7C1
 KILLPROGRAM/D7C5                KILLPROGRAM1/D7DC               ERROREXIT/D7EE  EXITERRED/D7F5
 EXIT/D80B       EXITCHKSUMBASE/D80B             EXIT1/D80E      EXITCODECHKSUM/D82D
 EXITCKSUML/D82F                 SERIALNUMBERLOCATION/D845       EXITCHKSUMEND/D847
 SDOSCODECHKSUM/D847             EXIT2/D848      EXIT3/D861      DEFAULTPROG/D870
 EXITCR/D87E     EXITCR1/D884    DISPLAYERRORCR/D88C             DISPLAYERRORCR1/D898
 OPENCONSOLE/D89A                CHECKRDLEN/D8A0                 CHECKRDLEN1/D8C4
 CHECKRDLEN2/D8CF                ERRSYSTOOSHORTJ/D8D4            ERRRDBUFTOOSMALL/D8D7
 CHECKWRLEN/D8DC                *ERRWRBUFTOOSMALL/D8F8           CHECKSCLEN/D8FD                 EXITS/D908
 EXITS2/D910     EXITSERRED/D921                 EXITS3/D924     EXITS4/D929     EXITS6/D935
 EXITDAMAGE/D93C                 CHAIN/D93E      FIRSTCHAIN/D951                 CHAINOK/D971
 CHAIN1/D979     ERRZEROSTARTADDRESS/D987        COMPAREDECRYPTIONKEYS/D98D
 COMPAREDECRYPTIONMATCH/D9AC     LOADINIT/D9AE   MACRO:000E/D9F1                 ZERONEWKEYLOOP/D9F6




ASM/6800 1.4A0: FEF2 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 482; Form 1     Symbols Sorted by Value
SDOS11G.ASM
 LOADSTART/D9FC  CANTLOAD/DA00   LOADTYPE1/DA07  MACRO:000F/DA28                *LOADINITOKRTS/DA2A
 ERRSERIALNOWRONG/DA2C           LOADER2/DA2F    LOADINITCANTOPEN/DA39           LOADINITCANT1/DA41
 LOAD/DA44       LOADREST/DA4C   LOADCLOSE/DA51  LOADCLOSE1/DA72                 GETSERIALNUMBER/DA75
 GETSERIALNUMBERADDRESS/DA85     GETSERIALNUMBERADDRESSRTS/DA94  GETRUNNINGENCRYPTED/DA95
 GETRUNNINGENCRYPTED1/DA9E       LOADENCRYPTED/DAA6              LOADENCRYPTED1/DAB9
 LOADCASCADELOOP/DAD1            MACRO:0010/DB00                 SDOSSECRETKEY/DB1C
 LOADSETPOS/DB24                 LOADTYPE0/DB2C  LOADTYPE0L/DB2F                 LOADTYPE0.2/DB51
 LOADTYPE0.1/DB72                LOADTYPE2/DB7A  LOADCONTENTS/DB7C               LOADNEXT/DB7C
*ERRBADLOADRECORD/DB8B           ERRNOTENOUGHROOM/DB90           LOAD2AND3/DB95  LOADTYPE3/DB95
 LOAD2AND3.1/DBB7                LOAD2AND3LOOP/DBBC              MACRO:0011/DBD7
 LOAD2AND3MASSDECRYPT/DC06       LOAD2AND3BYTE/DC18              LOAD2AND3RTS/DC2C
 GETBYTE/DC2E    GETBYTED/DC46   GETBYTE1/DC52   GETWORD/DC5A    SETKEY/DC62     ZAPUSERSPACE/DC8B
 ZAPUSERSPACEL/DC8C              DISKDEVICEDRIVER/DC95           ILLDEVICEOP/DCAF
 DISKRTS/DCB4    DISKFILEDRIVER/DCB6             DSKFPFRESTART/DCD0              DSKFCREATE/DCD5
 ERRFILEINCREATE/DCF7            DSKFCREATE1/DCFC                ERRFILEWRTPROT/DD09
 UPDATEFILEDATE/DD0E             ERRTIMENOTSET/DD34              DSKFCREATEC/DD39
 DSKFCREATEF/DD3C                DSKFCREATE3/DD66                DSKFCREATEMIN/DD84
 DSKFCREATEALLOC/DD8A            DSKFCREATE2/DD8F                DSKFCREATEE/DD91
 DSKFCREATEOOPS/DD9D             DSKFOPEN/DDA5   DSKFOPENL/DDB5  DSKFOPEN0/DDC4  DSKFOPEN1/DDC7
 DSKFOPENSYSIOCB/DDFE            DSKFDELETE/DE11                 ERRFILENOTFNDJ/DE19
 DSKFDELETEL/DE1E                DSKFDELETEDE/DE33               DSKFDELETE1/DE3D
*DSKFDELETEFCB/DE49              DSKFDELETESYSIOCB/DE4B          DSKFDELETEIOCBFCB/DE4D
 ERRFILEWRTPROTJ/DE68            ERRFILENOTFOUND/DE6B            DSKFCLOSE/DE70  DSKFCLOSE1/DE99
 DSKFCLOSEOLD/DEC3               DSKFCLOSEOKRTS/DEC6             DSKFCLOSEDOLD1/DEC8
 DSKFRENAME/DEEB                 MACRO:0012/DEF9                 MACRO:0013/DF05
 DSKFRENAMEL/DF11                DSKFRENAMEERR1/DF1F            *ERRNEWFILEEXISTS/DF2A
 ERRFILEALREADYDELETED/DF2F      DSKFRENAME1/DF34                DSKFRENAME2/DF60
 COPYNAMETODIR/DF6F              MARKMODIFIED/DF7E               DSKFREADB/DF86  DSKFREADBL/DF8E
 DSKFREADBOKRTS/DF9F             DSKDREADB/DFA1  DSKDREADBL/DFA7                 DSKREADBCHUNK/DFB8
 DSKFREADA/DFE2  DSKFREADAL/DFE8                 DSKFREADALINE/DFFB              DSKFREADADONE/E000
 DSKDREADA/E00A  DSKDREADAL/E010                 DSKDREADALINE/E023              DSKREADACHUNK/E02A
 DSKREADACHUNKL/E052             DSKREADACHUNKL1/E07C            DSKREADANULL/E087
 MACRO:0014/E094                 DSKREADANULL1/E09F              DSKREADANULL2/E0A1
 DSKREADACR/E0A4                 ADJUSTCOLUMNCOUNT/E0C9          ADJUSTCOLZERO/E0DF
 ADJUSTCOLRTS/E0E2               ADJUSTCOLBUMP/E0E3              ADJUSTCOLBS/E0EB
 ADJUSTCOLTAB/E0F4               SETUPFORWRITE/E0FE              SETUPFORREAD/E10A
 SETUPFORREAD1/E112              GETFCBFROMIOCB/E11E             CHECKREADDONE/E12A
 CHECKREADDONE1/E138             CHECKWRITEDONE/E139             CHECKWRITEDONE1/E14D
 DSKFWRITEB/E14E                 DSKFWRITEBL/E15A                DSKFWRITEBDONE/E16A
 DSKDWRITEB/E16C                 DSKDWRITEBL/E174                DSKWRITEBCHUNK/E184




ASM/6800 1.4A0: FEF2 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 483; Form 1     Symbols Sorted by Value
SDOS11G.ASM
 DSKFWRITEA/E19B                 DSKFWRITEAL/E1A6                DSKFWRITEADONE/E1B7
 DSKWRITEACHUNK/E1C1             DSKWRITEACHUNKL/E1D8            DSKDWRITEA/E1F6
 DSKDWRITEAL/E1FC                TABLEBRANCH/E20D                TABLEBRANCHCANT/E22C
 DSKFSETDATE/E22D                DSKFSET1/E245   DSKFSETPROT/E24D                DSKFCONTROL/E25D
 ERRILLDEVOP/E26C                DSKFCONTROL0/E271               DSKFCONTROL10/E277
 DSKFOPENERRORFILE/E281          ERRNOERRMSGS/E292               DSKFSETSIZE/E297
 DSKFIMPLIEDPOSOKRTS/E2B8        DSKFIMPLIEDPOSITION/E2BA        DSKFPOSITIONTOEND/E2D0
 DSKFPOSITIONTOEND1/E2D6         DSKFPOSITION/E2E5               DSKFPOSITION1/E2F6
 DSKFEOFTEST/E309                DSKFEOFTESTROL/E326             ERREOFHIT/E32C  ERRBADPOSITION/E331
 DSKFGETFILESIZE/E340            DSKFGETPOS/E354                 DSKFGETPOS4/E366
 DSKFGETPOS3/E36D                DSKDGETBADLSN/E377              DSKFGETPOS3A/E38E
 DSKFGETPARAMS/E395              DSKFSTATUS/E3A6                 DSKFSTATUS0/E3B8
 DSKFSTATUS10/E3C6               DSKDSTATUS/E3CC                 DSKDSTATUS0/E3E0
 DSKDSTATUS10/E3EE               DSKDGETERRORSTATS/E3F4          DSKFGETPROT/E418
 DSKFGETDATE/E424                DSKDGETTYPE/E447                DSKFGETTYPE/E450
 DSKFGETCOL/E459                 DSKFGETCOL1/E463                DSKFGETEOF/E46C
 DSKDGETPARAMS/E478              DSKDSETMAPALGORITHM/E495        DSKDSETMAPALGDUMP/E4A6
 MACRO:0015/E4AC                *DSKDSETMAPALG0/E4AE             DSKDSETMAPALG1/E4BA
 DSKDSETMAPALG2/E4BC             DSKDSETMAPALGRTS/E4C8           ERRDISKMOUNTED/E4CA
 DSKDOPEN/E4CF   DSKDOPEN1/E4D9  DSKDCONTROL/E4F3                DSKDCONTROL1/E4FF
 DSKDCONTROL0/E507               DSKDCONTROL10/E50D              DSKDIMPLIEDPOSITION/E515
 DSKDPOSITION/E528               DSKDPOSITION1/E539              DSKDEOFTEST/E548
 DSKDEOFTESTL/E55D               DSKDUNLOCK/E584                 DSKDCLOSE/E589  DSKDIMPLIEDPOSOKRTS/E589
 FORGETLASTBADLSN/E58B           ERRFCBOPENQ/E596                ERRFCBOPENERRRTS/E5A6
 DSKDDISMOUNT/E5A8               DSKDDISMOUNTL/E5B6              DSKDDISMOUNT0/E5E9
 DSKDDISMOUNT2/E604              DSKDDISMOUNTZ/E61F              DSKDDISMOUNT1/E635
 DSKDDISMOUNTOKRTS/E64E          ERRFILEISOPEN/E650              MARKINVALID/E655
 MARKINVALIDL/E658               MACRO:0016/E662                 MARKINVALID1/E676
 SEARCHDIR/E67F  RESTOREUSERIOCB/E685            SEARCHDIRERRED/E69B             SAVEUSERIOCB/E6A0
 SEARCHDIRE/E6AD                *ERRBOOTCKSUMFAIL/E6C2           ERRNBPCTOOBIG/E6C7
 ERRWRONGFILESYSTEM/E6CC         SEARCHDIRMOUNT/E6D1             SEARCHDI1/E6EC  SEARCHDI3/E71F
 SEARCHDI5L/E738                 SEARCHDI5A/E73E                 MACRO:0017/E77B
 MACRO:0018/E78C                 SEARCHDI3A/E7D1                 SEARCHDI4/E7EE  SEARCHDIRF/E7F4
 SEARCHDIROKRTS/E80C             COMPUTEDIRENTRYDISPLACEMENT/E811                ERRDIRECTORYDAMAGED/E828
 SEARCHDIR1/E82D                 SEARCHDIRS/E854                 SEARCHDIRL/E86E
 MACRO:0019/E879                 SEARCHDIRL1/E880                SEARCHDIR2/E8AD
 SEARCHDIRN/E8B4                 SEARCHDIRT/E8E5                 SEARCHDIRSJ/E8FE
 SEARCHDIRERRED4/E901            SEARCHDIRNF/E902                DIRECTORYNAME/E907
 DISKMAPNAME/E917                ERRMSGSNAME/E927                SEARCHDIRCREATE/E937
 SEARCHDIRCREAT1/E93A            SEARCHDIRCREAT2/E97C            SEARCHDIRCNEW/E981




ASM/6800 1.4A0: FEF2 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 484; Form 1     Symbols Sorted by Value
SDOS11G.ASM
 SEARCHDIRCOKRTS/E9AF            SEARCHDIRCERRED/E9B2            LOCATEDIRENTRY/E9B5
 UPDATEDIRFROMFCB/E9ED           LOCUPDATEDIRENTRY/E9FA          UPDATEDIRENTRY/E9FC
 UPDATEDIRL/EA03                 UPDATEDIROKRTS/EA20             COMPARENAMES/EA22
 BLOCKCOMPARE/EA29               BLOCKCOMPARERTS/EA3C            HASHFOLD/EA3D   HASHINSERT6/EA4C
 HASHINSERT6L/EA4E               HASHNAME/EA57   HASHNAMEL1/EA89                 HASHNAMEL2/EA9F
 HASHNAME2/EAB1  HASHNAMEL3/EABD                 FINDFREEFCB/EACA                FINDFREEFCBL/EAD8
 SETUPFCB/EAF0   SETUPFCBCL/EAFA                 SETUPFCBDIRPOS/EB2F             SEARCHFCBINIT/EB50
 SEARCHFCBS/EB60                 MACRO:001A/EB83                 MACRO:001B/EB98
 SEARCHFCBCMPNO/EBA6             SEARCHFCBRTS/EBB0               PARSEFILENAME/EBBB
 PARSENAME0/EBE4                 MACRO:001C/EBFC                 PARSENAME1/EC27
 PARSESCANL/EC34                 ERRBADFILENAMEJ/EC3E            PARSESCAND/EC54
 ERRBADFILENAME/EC87             PARSEQUIT/EC8E  ERRBADFNAMESIZE/ECA6            ADDTOFILESIZE/ECAE
 ADDTOFILEOV/ECD3                ERRILLFILESIZE/ECD5             PARSENAMEB/ECDC
 PARSENAMEBLANK/ECF3             PARSENAMEBOK/ECF6               PARSENAMEBX/ECF9
 PARSENAMEB1/ED05                ERRNODISKMAP/ED11               ERRALLOC0CLUSTERS/ED16
 ALLOCATECLUSTERS/ED1B           MACRO:001D/ED26                 ALLOC2/ED8F     MACRO:001E/EDAA
*ALLOC2BIG/EDAC  ALLOC2A/EDB0    ALLOC2B/EDB4    ALLOCINITHC/EDCC                ALLOC3/EDE3
 ALLOCERRED/EE0A                 ALLOCDC5/EE0B   ALLOCDATACLUSTERS/EE13          ALLOCDC2/EE1E
 ALLOCDC4/EE4E   ALLOCDC3/EE57   ALLOCDC1/EE6F   ALLOCDONE/EE85  ALLOCDATACLUSTJ/EE93
 ALLOCINITHS/EE96                STAASECTORL/EEAA                ZEROSECTOR/EEB9
 ZEROCLUSTER/EECB                ZEROCLUSTERL/EECE               FREECLUSTER/EEE8
 FREEERROR/EEF7  ERRNODISKMAPJ1/EEFC             FREECLUSTERS/EEFF               FREECLUSTERL/EF0B
 MACRO:001F/EF1A                 FREECLUSTER0/EF37               FREECLUSTER3/EF43
 FREECLUSTERN/EF56               FREECLUSTER2/EF5F               FREECLUSTERE/EF61
 FREECLUSTERE1/EF76              FREECLUSTERDONE/EF79            FREECLUSTEREXIT/EF84
 SEARCHMAP/EF86  SEARCHMAP1/EF9D                 SEARCHM5/EFA3   SEARCHM2/EFAC   SEARCHM3/EFB8
 SEARCHM4/EFBE   SEARCHMFQJ1/EFDD                SEARCHMFE/EFE0  SEARCHMFE2/EFE8
 SEARCHMFE1/EFFC                 SEARCHMFQXITJ1/F015             SEARCHMF/F018   SEARCHMF0/F024
 SEARCHMF1/F02C  SEARCHMF1A/F02F                 SEARCHMF4/F059  SEARCHMF2/F062  SEARCHMF3/F06A
 SEARCHMF5/F07A  SEARCHMF6/F082  SEARCHMF7/F085  SEARCHMF8/F08B  SEARCHMFG/F0AC  SEARCHMFQ/F0CA
 SEARCHMR/F0E2   SEARCHMR0/F0E6  SEARCHMR0A/F0EE                 SEARCHMRE/F0F4  SEARCHMRE2/F0FA
 SEARCHMRE3/F10B                 SEARCHMRE1/F113                 SEARCHMREBJ1/F129
 SEARCHMR1/F12C  SEARCHMR4C/F142                 SEARCHMR4/F14E  SEARCHMR2/F157  SEARCHMR3/F15F
 SEARCHMR5/F171  SEARCHMR6/F179  SEARCHMR7/F17F  SEARCHMR8/F186  SEARCHMRG/F1A7  SEARCHUS/F1B9
 SEARCHFLCN/F1C5                 SEARCHMFQXIT/F1CE               SEARCHMREB/F1E4
 SEARCHMERRED3/F1F4              SEARCHOOSE/F1F7                 SEARCHOOSE1/F209
 SEARCHOOSE2/F21F                FINDLCNERREXIT/F224             FINDLCNMAPBIT/F229
 MACRO:0020/F231                 FINDLCNMAPBITL/F2A1             LOCATECURBYTE/F2B3
 LOCATECURBYTEWJ/F2D6            LOCATECURBYTE9J/F2D9            LOCATECURBYTEE/F2DC
 LOCATECURBYTEE2/F2E8            LOCATECURBYTEE4/F311            LOCATECURBYTEE1/F31E




ASM/6800 1.4A0: FEF2 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 485; Form 1     Symbols Sorted by Value
SDOS11G.ASM
 LOCATECURBYTEE3/F321            LOCATECURBYTEGJ/F329            LOCATECURBYTE0/F32C
 MACRO:0021/F335                *LOCATECURBYTE1/F337             LOCATECURBYTE4/F33D
 LOCATECURBYTE3A/F370            LOCATECURBYTE2/F378             LOCATECURBYTE3/F388
 LOCATECURBYTE5/F398             LOCATECURBYTE5B/F3BA            MACRO:0022/F3BA
 LOCATECURBYTE8/F3C4             LOCATECURBYTEG/F3E7             LOCATECURBYTE5A/F3ED
*LOCATECURBYTER/F405             MACRO:0023/F405                 MACRO:0024/F435
*LOCATECURBYTE6/F437             LOCATECURBYTE7/F43B             LOCATECURBYTED/F448
 MACRO:0025/F457                 LOCATECURBYTED2/F463            LOCATECURBYTE9/F468
 LOCATECURBYTEW/F46F             MACRO:0026/F47B                 MACRO:0027/F48C
 LOCATECURBYTEW2/F498            LOCATECURBYTEW5/F4A5            LOCATECURBYTEW4/F4D2
 ZEROTOCURBYTE/F4E8              ZEROTOCURBYTEZ/F4F9             ZEROTOCURBYTEA/F52C
 ZEROTOCURBYTEA1/F54C            ZEROTOCURBYTE3/F556             ZEROTOCURBYTE5/F559
 CHECKMUSTZERO/F561              UPDATECURBYTE/F582              UPDATECURBYTE1/F59B
 UPDATECURBYTERTS/F5BA           UPDATECURBYTEF/F5BB             UPDATECURBYTEOKRTS/F5C6
 UPDATECURBYTED/F5C8             ERRDISKWRITELOCKED/F5CF         ERREOFHITJ2/F5D4
 LOCDSKD/F5D7    LOCDSKD1/F5ED   LOCDSKD0/F5FA   LOCDSKDR/F629   LOCDSKD2/F633   LOCDSKD4/F664
 LOCATECURBYTEDJ/F667            LOCDSKD3/F66A   LOCATERDCN/F66D                 LOCATERDCN0/F67F
 LOCATERDCN2/F698                LOCATERDCN3/F6BB                ERRCLUSTERSIZELIMITSFILE/F6C1
 ERRHCSICTOOSMALL/F6C6           COMPUTENEXTBYTE/F6CB            COMPUTERDCNF/F6FB
 COMPUTERDCN/F706                COMPUTERDCNS/F70F               COMPUTERDCNL/F719
 MACRO:0028/F727                 COMPUTERDCN0/F72D               MACRO:0029/F753
 COMPUTERDCNLIMIT/F75C           COMPUTERHSN/F75F                COMPUTERHSN0/F765
 COMPUTERHSN1/F768               COMPUTERSN/F773                 CONVERTLCNTOLSN/F77A
 CONVERTLCN2/F788                CONVERTLCNTO1ST/F792            CONVERTLCNL/F7A5
 CONVERTLCN1/F7B8                GENHLSNPLUSHRSN/F7C7            READBEHIND/F7E4
 INCIOCB:CURLSN/F7F2             INCIOCB:CURLSNX/F7FF            READBEHINDOKRTS/F7FF
 READBEHINDERRED/F801            READAHEAD/F806  READAHEAD0/F82D                 DECIOCB:CURLSN/F859
 DECIOCB:CURLSN1/F86C            READAHEADCERRED/F870            READAHEADH/F875
 MACRO:002A/F88A                 READAHEAD1/F895                 READAHEADS/F8B8
 READAHEADOKRTS/F8BE             READAHEADNX/F8C0                READAHEADHA/F8D0
 READAHEADH1/F8D5                INVENTSECTOR/F8F2               READSECTOR/F8F5
 READSECTOR0/F8F7                READSECTORL/F904                MACRO:002B/F90A
 MACRO:002C/F91C                 READSECTORL1/F92A               READSECTORNMA/F92D
 READSECTORNM/F934              *READSECTORV/F93B               *ERRILLLSN/F952  READSECTORVD/F957
 READSECTORVD1/F958             *READSECTOR1/F95B                READSECTOR2/F96F
 READSECTOR2L/F972               MACRO:002D/F99E                 READSECTOR3/F9A0
 READSECTOR4/F9B1                WAITSECTORERRJ/F9EA             READSECTORI/F9ED
 READSECTORR/F9F0                READSECTORF/F9F2                REMOVERDSI/FA02
 REMOVERDSIL/FA12                READSECTORZAPIOCB/FA31          READSECTORZAPH/FA40
 MACRO:002E/FA48                 READSECTORZAPD/FA4E             READSECTORZAPD1/FA50




ASM/6800 1.4A0: FEF2 SDOS1.1            *** SDOS -- SOFTWARE DYNAMICS 6800/6809 OPERATING SYSTEM (C) 1978 *
08/16/82 00:00:00; Page 486; Form 1     Symbols Sorted by Value
SDOS11G.ASM
 MACRO:002F/FA56                 READSECTORZAPRTS/FA5C           REQUERDSI/FA5D  REQUERDSI1/FA60
 ENQUELASTSECTORREAD/FA7A        FETCHSECTOR/FA9C                WAITSECTOR/FAA1
 WAITRDSI/FAA3   WAITSECTOR1/FAAE                WAITSECTORRTS/FAB8              WAITSECTORERRED/FABA
 DSKDUMPBUFFERS/FADC             DSKDUMPFCBL/FAEA                DSKDUMPFCB1/FB12
 DSKDUMPBUF0/FB29                DSKDUMPBUFL/FB2C                DSKDUMPBUFN/FB49
 DSKDUMPERR1/FB55                WAITSECTORERRJ2/FB59            DISKREAD/FB5C   DISKWRITE/FB68
 DISKWAITD/FB74  DISKWAITE/FB80  DISKWAITE1/FB8D                 DISKWAITE2/FBA1
 DISKWAITD2/FBA6                 DISKDCBUNSAVE/FBAC              DISKRWCOPYARGS/FBB2
 DISKDCBSAVE/FBBF                SECTORDRIVER/FBCD               BLOCKMOVE/FBD2 *BLOCKMOVEDOWN/FBD2
 BLOCKMOVEDOWNE/FBF8             BLOCKMOVEDOWNA/FC10             BLOCKMOVEDOWN4/FC18
 BLOCKMOVEDOWNB/FC4C             BLOCKMOVEDOWN16/FC50            BLOCKMOVEDOWND/FCCA
 CLOCKTICKED/FCD1                CLOCKTICK1/FCE7                 CLOCKTICK2/FD26
 CLOCKTICKEXIT/FD42              BCDTOBIN/FD45   DAYSPERMONTH/FD52               TIMEOUTTASKBORED/FD5E
 TIMEOUTTASK/FD64                TIMEOUTTASKL/FD69               SECONDARYCHECKSUM1/FD8A
 TIMEOUTLEH/FD9D                 MACRO:0030/FDA9                 TIMEOUTLEH3/FDB9
 TASKRTI/FDC5    FORCERTI/FDCA   FORCESCHEDULE/FDCD              IORTI/FDD0      IORTI1/FDD3
 PUSH0TO7/FDE0   SCHEDLDS/FE09   SCHEDTOP/FE0C   SCHEDLOOP/FE16  SCHEDTEST/FE26  JUSTREADY/FE2F
 EXECUTING/FE3E  WAITEVENTCOND/FE71              WAITEVENTCONDRTS/FE73           WAITEVENT$/FE74
 WAIT$/FE7C      STARTIO$/FEA7   IOINTERRUPT/FEC5                IOINTJ/FED2    *PATCHSPACE/FED5
 SDOS:END/FEF3   DUMMYLCN/FFFF

1748 Symbols.


 *** No Assembly Errors.
