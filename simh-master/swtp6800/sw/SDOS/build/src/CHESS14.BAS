	REM **** CHESS 1.4 **** 3/17/80	REM ANALYSISRATE IS SOME 51.8 ANALYSES PER MINUTE	REM STACK BOARD IN CHARACTER STRING ??	REM INSTALL PIECE RATIO ON SCORES	REM ACCESS BOARD AS VECTOR ??	REM BOARD SWAP COSTS VERY HIGH--COULD REPLICATE 8000,6000	REM 2 4 ARE REASONABLE MIN,MAX	REM **** CHESS *****	REM BY IRA BAXTER, SOFTWARE DYNAMICS	REM BOARD[2..9,2..9] IS USED TO PREVENT KNIGHTMOVE$ FROM USING FP ARITHMETIC	REM EXTRA ROWS AROUND BOARD ARE FILLED WITH "PAWN"...	REM SO THAT MOVES TO THOSE REGIONS ARE APPARANTLY ILLEGAL10	DIM ONE/2/,TWO/3/,THREE/4/,FOUR/5/,FIVE/6/,SIX/7/,SEVEN/8/,EIGHT/9/,NINE/11/	REM NINE = EIGHT + ONE	DIM ROOK/4/,KNIGHT/2/,BISHOP/3/,QUEEN/5/,KING/6/,PAWN/1/	DIM PAWNSCORE/16/,KNIGHTSCORE/48/,BISHOPSCORE/48/,ROOKSCORE/80/	DIM QUEENSCORE/144/,KINGSCORE/10000/,CASTLESCORE/8/	DIM ADVANCEPAWNSCORE/1/,TREEDEPTHPENALTY/1/	DIM BOARD(11,11)	DIM BACKROW$/0,4,2,3,6,5,3,2,4/	DIM OBJECTNAME$/".PNBRQK"/,OBJECTCOLOR$/" WWWWWWW BBBBBBB"/	DIM SCOREPIECE[15],INSERT/0/	DIM SWAPPIECE[14]	REM CURRENT STATE (OF LOOKAHEAD)	DIM CURSCORE,CURROWFROM/0/,CURCOLFROM/0/,CURROWTO/0/,CURCOLTO/0/	DIM CURBESTMOVE,CURBESTSCORE,CURMACHCASTLED/0/,CUROPPCASTLED/0/	DIM CURMOVEBASE/0/,CURMOBILITY,CURBESTONEMOBILITY	REM NEW STATE (OF LOOKAHEAD)	DIM NEWSCORE,NEWROWFROM,NEWCOLFROM,NEWROWTO,NEWCOLTO,NEWMACHCASTLED	DIM NEWSOURCEPIECE,NEWTARGETPIECE	REM PUSHDOWN STACK FOR CURRENT STATE WHEN DOING RECURSIVE LOOKAHEAD	DIM LEVEL/1/,MAXLEVEL/4/,MINLEVEL/1/,MAXDEPTH/10/	DIM STACKSCORE[10]	DIM STACKBESTMOVE[10],STACKBESTSCORE[10],STACKSOURCEPIECE[10],STACKTARGETPIECE[10]	DIM STACKMACHCASTLED[10],STACKOPPCASTLED[10],STACKMOVEBASE[10],STACKMOBILITY[10]	DIM STACKBESTONEMOBILITY[10],STACKKILLERMOVE[10]	DIM CHEAT/2/	REM VALUES IN ...MOVE$ HAVE HAD "CHEAT" ALREADY ADDED!	REM THIS PREVENTS ME FROM DOING FLOATING POINT ARITHMETIC	DIM KNIGHTMOVE$/3,4,1,4,3,0,1,0,4,3,4,1,0,3,0,1/	DIM BISHOPROOKMOVE$/3,3,3,1,1,3,1,1,3,2,1,2,2,1,2,3/	DIM POSSSOURCEROW$[300],POSSSOURCECOLUMN$[300],POSSTARGETROW$[300],POSSTARGETCOLUMN$[300]	DIM MAXPOSSMOVES/300/,MOVE,POSSSCORE[300],POSSLINK[300],POSSFREE,MOVELIST/0/	DIM ONEMOBILITY,ENDGAMEMOBILITY/20/	DIM DEADHEAT/32767/,LOSE/27767/,WIN/37767/,TWODEADHEAT/65534/	REM (WIN-LOSE)/2 > SUM(SCOREPIECES+CASTLING+POSITION+...)	DIM REPLY$[10],HUMANCOLOR$[10],DBG$[10]	DIM ANALYSISHISTORY[3],RECENTANALYSIS,NUMBEROFMOVES/0/	DIM ANALYSISRATE,TOTALANALYSIS/0/,ANALYSISCOUNT/0/,HISTORYLENGTH/3/	REM *** MAGIC COLOR VALUES ****	REM	THESE ARE TAG BITS DIFFERENTIATING TYPES OF PIECES	DIM	MACHINE/0/,OPPONENT/8/,EMPTY/0/,MACHINEQ/8/,OPPONENTQ/8/	DIM DISTANCE(7,7)	LET ALPHABETACUTOFF=TWODEADHEAT-PAWNSCORE+1	LET STACKKILLERMOVE[0]=0\ REM SO THERE IS ALWAYS A KILLER MOVE!	PRINT " **** SOFTWARE DYNAMICS <<CHESS>> ****"	INPUT "TIMED PLAY (0 FOR 'NO') ? " ANALYSISRATE	FOR I=1 TO HISTORYLENGTH		LET ANALYSISHISTORY[I]=ANALYSISRATE	NEXT I	REM FILL THE DISTANCE ARRAY NOW TO SAVE TIME LATER	REM DISTANCE BETWEEN (X1,Y1) AND (X2,Y2) IS...	REM "DISTANCE(ABS(X1-X2),ABS(Y1-Y2))"	FOR I=0 TO 7		FOR J=0 TO 7			REM KEEP DISTANCE * 100 SO FRACTION IS SIGNIFICANT			LET DISTANCE(I,J)=INT(.5+100*SQR(I^2+J^2))		NEXT J	NEXT I50	INPUT "HOW CLEVER AM I TODAY?   " MINLEVEL,MAXLEVEL	IF MINLEVEL<1 OR MINLEVEL<>INT(MINLEVEL)...&	   OR MAXLEVEL>MAXDEPTH OR MAXLEVEL<>INT(MAXLEVEL) ...&	   OR MINLEVEL>MAXLEVEL THEN 50REM	INPUT "PRINT LIST OF GENERATED MOVES ?" DBG$100	REM **** INITIALIZE TO PLAY ****	CURSCORE=DEADHEAT	\! START OFF EVEN	CURBESTSCORE=DEADHEAT	\! SO 9000 WORKS PROPERLY FIRST TIME	FOR COLUMN=ONE TO EIGHT		LET BOARD(ONE,COLUMN)=BACKROW$(COLUMN)		LET BOARD(TWO,COLUMN)=PAWN		FOR ROW=THREE TO SIX\ BOARD(ROW,COLUMN)=EMPTY\NEXT ROW		LET BOARD(SEVEN,COLUMN)=OPPONENT!PAWN		LET BOARD(EIGHT,COLUMN)=OPPONENT!BACKROW$(COLUMN)	NEXT COLUMN	FOR ROW=0 TO 1		! SET UP BOARD EDGES TO "PAWN"		FOR COLUMN=0 TO 11			! THIS SPEEDS UP "MOVE OFF EDGE OF BOARD" CHECK			BOARD[ROW,COLUMN]=PAWN			BOARD[COLUMN,ROW]=PAWN			BOARD[11-ROW,COLUMN]=PAWN			BOARD[COLUMN,11-ROW]=PAWN		NEXT COLUMN	NEXT ROW	REM INITZ SCOREPIECE	SCOREPIECE[EMPTY]=0	SCOREPIECE[PAWN]=PAWNSCORE	SCOREPIECE[KNIGHT]=KNIGHTSCORE	SCOREPIECE[BISHOP]=BISHOPSCORE	SCOREPIECE[ROOK]=ROOKSCORE	SCOREPIECE[QUEEN]=QUEENSCORE	SCOREPIECE[KING]=KINGSCORE	\! = 2* VALUE REQUIRED TO WIN	FOR I=0 TO 7\ SCOREPIECE[I!OPPONENT]=SCOREPIECE[I]\NEXT I	REM INITZ SWAPPIECE VECTOR	FOR I=PAWN TO KING		SWAPPIECE[I]=OPPONENT!I		SWAPPIECE[OPPONENT!I]=I	NEXT I	SWAPPIECE[EMPTY]=EMPTY	REM INITZ POSSLINK FREE LIST	FOR I=1 TO MAXPOSSMOVES\POSSLINK[I]=I-1\NEXT I	POSSFREE=MAXPOSSMOVES200	INPUT "DO YOU WANT BLACK OR WHITE ?" HUMANCOLOR$	IF HUMANCOLOR$="BLACK" THEN 2000	IF HUMANCOLOR$<>"WHITE" THEN PRINT "NOT A VALID COLOR!?"\GOTO 200	LET OBJECTCOLOR$=" BBBBBBB WWWWWWW"	BOARD(ONE,FOUR)=QUEEN	BOARD(ONE,FIVE)=KING	BOARD(EIGHT,FOUR)=OPPONENT!QUEEN	BOARD(EIGHT,FIVE)=OPPONENT!KING1000	REM **** HUMAN MOVES ****	GOSUB 9000\! DISPLAY THE BOARD	IF CURSCORE>=WIN THEN PRINT "YOU LOSE, BUSTER!"\EXIT1005	FOR I=1 TO MAXPOSSMOVES\POSSLINK[I]=I-1\NEXT I\ ! RESET FREE MOVE CHAIN	POSSFREE=MAXPOSSMOVES	GOSUB 5000\! SWAP MACHINE FOR OPPONENT OBJECTS	MOVELIST=0	\! MAKE MOVE LIST EMPTY	MAXLEVEL=MAXLEVEL+1	\! SO 8000 DOESN'T "TRIM MOVE LIST (8970)"	GOSUB 8000\! FIGURE OUT WHAT ALL THE LEGAL MOVES ARE	MAXLEVEL=MAXLEVEL-1	\! UNDO THE INCREMENT DONE BEFORE THE GOSUB	IF CURMOBILITY=0 THEN PRINT "I HATE DRAW GAMES!"\EXIT1010	INPUT "YOUR MOVE: " ROW,COLUMN,ROWTO,COLTO	IF ROW=0 AND COLUMN=0 THEN GOSUB 5000\ GOTO 1000\ REM DISPLAY THE BOARD AGAIN	IF ROW=0 AND COLUMN=-1 THEN 1500\ REM ENTER NEW PIECE LAYOUT	IF ROW=0 AND COLUMN=-2 THEN MINLEVEL=ROWTO\MAXLEVEL=COLTO\GOTO 1010	LET ROW=NINE-(ROW-1+ONE)	LET ROWTO=NINE-(ROWTO-1+ONE)	LET COLUMN=ONE-1+COLUMN	LET COLTO=ONE-1+COLTO	LET MOVE=MOVELIST	WHILE MOVE<>0 DO		IF POSSSOURCEROW$(MOVE)=ROW AND POSSSOURCECOLUMN$(MOVE)=COLUMN...&		AND POSSTARGETROW$(MOVE)=ROWTO AND POSSTARGETCOLUMN$(MOVE)=COLTO		THEN 1600 ELSE MOVE=POSSLINK[MOVE]	END	PRINT "THAT'S NOT A LEGAL MOVE, BUDDY....."	GOTO 10101500	REM **** MODIFY BOARD LAYOUT	GOSUB 5000\REM TURN BOARD RIGHTSIDE UP AGAIN1510	INPUT "PLACE PIECE: " REPLY$	IF REPLY$="" THEN 1550	IF REPLY$="." THEN 1520	IF LEN(REPLY$)<>2 OR (REPLY$[1]<>ASC("W") AND REPLY$[1]<>ASC("B")) THEN 1510	LET NEWSOURCEPIECE=FIND(OBJECTNAME$[2,6],REPLY$[2,1])	IF NEWSOURCEPIECE=0 THEN 15101520	INPUT "WHERE? " ROW,COLUMN	LET ROW=ONE-1+ROW	LET COLUMN=ONE-1+COLUMN	IF ONE>ROW OR EIGHT<ROW OR ONE>COLUMN OR EIGHT<COLUMN THEN 1520	IF REPLY$="." THEN BOARD[ROW,COLUMN]=EMPTY		      ELSE BOARD[ROW,COLUMN]=NEWSOURCEPIECE			   IF REPLY$[1]=HUMANCOLOR$[1]			   THEN BOARD[ROW,COLUMN]=OPPONENT!BOARD[ROW,COLUMN]	GOTO 15101550	LET CURSCORE=DEADHEAT	FOR ROW=ONE TO EIGHT		FOR COLUMN=ONE TO EIGHT			IF OPPONENT&BOARD[ROW,COLUMN]<>0			THEN CURSCORE=CURSCORE-SCOREPIECE[BOARD[ROW,COLUMN]]			ELSE CURSCORE=CURSCORE+SCOREPIECE[BOARD[ROW,COLUMN]]1560		NEXT COLUMN	NEXT ROW	GOSUB 9000\ REM DISPLAY THE BOARD	FOR ROW=ONE TO EIGHT		FOR COLUMN=ONE TO EIGHT			IF BOARD[ROW,COLUMN]=KING THEN 1570		NEXT COLUMN	NEXT ROW	PRINT "YOU'RE MISSING MY KING!"\GOTO 15101570	FOR ROW=ONE TO EIGHT		FOR COLUMN=ONE TO EIGHT			IF BOARD[ROW,COLUMN]=OPPONENT!KING			THEN 1005		NEXT COLUMN	NEXT ROW	PRINT "YOU'RE MISSING YOUR KING!"\GOTO 15101600	REM HUMAN MADE LEGAL MOVE, NOW DO THE MOVE	INSERT=MOVELIST	\! REMEMBER BEGINNING OF MOVELIST	MOVELIST=MOVE	\! SO WE CAN MAKE THE MOVE ON THE BOARD	GOSUB 6000\! DO POSSIBLEMOVES(MOVELIST,...)	NEWSCORE=POSSSCORE[MOVELIST]	\! SO 6100 WORKS PROPERLY	GOSUB 6100\! FIX MOVE PERMANENTLY	GOSUB 5000\! SWAP THE BOARD BACK THE WAY IT WAS	PRINT "SCORE: "; (CURSCORE-DEADHEAT)/PAWNSCORE	IF CURSCORE<=LOSE THEN PRINT "YOU ATE MY KING!...."\EXIT2000	REM **** NOW ITS THE MACHINE'S TURN !	REM ADD HUMAN MOVES BACK TO FREE LIST	LET MOVELIST=INSERT	\! PUT THINGS BACK LIKE THEY WERE AT LINE 1600	IF INSERT<>0	THEN WHILE POSSLINK[INSERT]<>0 DO INSERT=POSSLINK[INSERT] END\	     LET POSSLINK[INSERT]=POSSFREE\	     LET POSSFREE=MOVELIST\	     LET MOVELIST=0	REM FIND ENEMY KING	FOR KINGROW=ONE TO EIGHT		FOR KINGCOLUMN=ONE TO EIGHT			IF BOARD(KINGROW,KINGCOLUMN)=OPPONENT!KING THEN 2010		NEXT KINGCOLUMN	NEXT KINGROW2010	LET ANALYSISCOUNT=0	\! SO WE COUNT # BOARDS ANALYZED BY "7000"	LET STACKSCORE[0]=CURSCORE	REM SO "IF" BEFORE 7100 DOESN'T COMPARE AGAINST GARBAGE IF LEVEL=1	GOSUB 7000	\! FIGURE OUT BEST POSSIBLE MOVE	IF CURMOBILITY=0 THEN PRINT "YOU BACKED ME INTO A CORNER..."\EXIT	IF CURBESTSCORE<=LOSE THEN PRINT "....(I LOSE)..."\EXIT	MOVELIST=CURBESTMOVE	\! PICK THE BEST MOVE TO MAKE	PRINT "MY MOVE IS: ";POSSSOURCEROW$(MOVELIST)+1-ONE;POSSSOURCECOLUMN$(MOVELIST)+1-ONE;	PRINT " TO ";POSSTARGETROW$(MOVELIST)+1-ONE;POSSTARGETCOLUMN$(MOVELIST)+1-ONE	GOSUB 6000\! REM MAKE THE BEST MOVE	LET NEWSCORE=POSSSCORE[MOVELIST]	\! SO 6100 WORKS RIGHT	GOSUB 6100\! FIX MOVE PERMANENTLY2100	REM OPERATE MOVE DEPTH FILTER OVER "HISTORYLENGTH" MOST RECENT MOVES	LET NUMBEROFMOVES=NUMBEROFMOVES+1	LET TOTALANALYSIS=TOTALANALYSIS+ANALYSISCOUNT	LET RECENTANALYSIS=ANALYSISCOUNT	\! ZERO THE SUM	FOR I=2 TO HISTORYLENGTH		LET RECENTANALYSIS=RECENTANALYSIS+ANALYSISHISTORY[I]		LET ANALYSISHISTORY[I-1]=ANALYSISHISTORY[I]	NEXT I	LET ANALYSISHISTORY[HISTORYLENGTH]=ANALYSISCOUNT	IF NUMBEROFMOVES<40	THEN LET TEMP=(40*ANALYSISRATE-TOTALANALYSIS)/(40-NUMBEROFMOVES)	ELSE LET TEMP=ANALYSISRATE	IF ANALYSISRATE<>0	THEN IF RECENTANALYSIS/HISTORYLENGTH > TEMP	     THEN IF MINLEVEL>0 AND ANALYSISCOUNT > TEMP		  THEN LET MINLEVEL=MINLEVEL-1 FI	     ELSE IF ANALYSISCOUNT < TEMP THEN MINLEVEL=MINLEVEL+1	GOTO 1000\! HUMAN'S TURN AGAIN5000	REM **** SWAP MACHINE OBJECTS FOR OPPONENT'S OBJECTS ****	FOR ROW=ONE TO FOUR		! ALSO ROTATE OBJECTS AROUND HORIZONTAL AXIS		FOR COLUMN=ONE TO EIGHT			LET TEMP=SWAPPIECE[BOARD(ROW,COLUMN)]			LET BOARD(ROW,COLUMN)=SWAPPIECE[BOARD(NINE-ROW,COLUMN)]			LET BOARD(NINE-ROW,COLUMN)=TEMP		NEXT COLUMN	NEXT ROW	REM SWITCH LAST MOVE STATE AROUND TO MATCH OBJECT SWAP, TOO!	TEMP=CURMACHCASTLED\CURMACHCASTLED=CUROPPCASTLED\CUROPPCASTLED=TEMP	CURROWFROM=NINE-CURROWFROM	CURROWTO=NINE-CURROWTO	CURSCORE=TWODEADHEAT-CURSCORE	RETURN6000	REM **** DO POSSIBLEMOVES(MOVELIST,...)	REM CREATE NEW LOOKAHEAD STATE	NEWROWFROM=POSSSOURCEROW$(MOVELIST)	NEWCOLFROM=POSSSOURCECOLUMN$(MOVELIST)	NEWROWTO=POSSTARGETROW$(MOVELIST)	NEWCOLTO=POSSTARGETCOLUMN$(MOVELIST)	NEWMACHCASTLED=CURMACHCASTLED	NEWSOURCEPIECE=BOARD[NEWROWFROM,NEWCOLFROM]	NEWTARGETPIECE=BOARD[NEWROWTO,NEWCOLTO]	BOARD[NEWROWFROM,NEWCOLFROM]=EMPTY	REM ROOK MOVE SHOULD PREVENT CASTLING!	IF NEWSOURCEPIECE=KING	THEN NEWMACHCASTLED=TRUE\	     IF NEWCOLTO=NEWCOLFROM-2	     THEN BOARD[ONE,ONE]=EMPTY\BOARD[ONE,NEWCOLTO+1]=ROOK	     ELSE IF NEWCOLTO=NEWCOLFROM+2		  THEN BOARD[ONE,EIGHT]=EMPTY\BOARD[ONE,NEWCOLTO-1]=ROOK FI	ELSE IF NEWSOURCEPIECE=PAWN		THEN IF NEWROWTO=EIGHT		     THEN BOARD[NEWROWTO,NEWCOLTO]=QUEEN\RETURN		     ELSE IF NEWCOLFROM<>NEWCOLTO AND BOARD[NEWROWTO,NEWCOLTO]=EMPTY			  THEN BOARD[NEWROWFROM,NEWCOLTO]=EMPTY	BOARD[NEWROWTO,NEWCOLTO]=NEWSOURCEPIECE	RETURN6100	REM **** FIX MOVE MADE BY SUBROUTINE 6000 AS PERMANENT MOVE ****	CURSCORE=NEWSCORE	CURROWFROM=NEWROWFROM	CURCOLFROM=NEWCOLFROM	CURROWTO=NEWROWTO	CURCOLTO=NEWCOLTO	CURMACHCASTLED=NEWMACHCASTLED	RETURN6500	REM **** UNDO LAST MOVE(LIST) ****REM	IF DBG$="YES" THEN PRINT NEWSCORE\ GOSUB 9000	BOARD[POSSSOURCEROW$[MOVELIST],POSSSOURCECOLUMN$[MOVELIST]]=NEWSOURCEPIECE	BOARD[POSSTARGETROW$[MOVELIST],POSSTARGETCOLUMN$[MOVELIST]]=NEWTARGETPIECE	IF NEWSOURCEPIECE=KING	THEN IF POSSTARGETCOLUMN$[MOVELIST]=POSSSOURCECOLUMN$[MOVELIST]-2	     THEN BOARD[ONE,ONE]=ROOK\		  BOARD[ONE,POSSTARGETCOLUMN$[MOVELIST]+1]=EMPTY	     ELSE IF POSSTARGETCOLUMN$[MOVELIST]=POSSSOURCECOLUMN$[MOVELIST]+2		  THEN BOARD[ONE,EIGHT]=ROOK\		       BOARD[ONE,POSSTARGETCOLUMN$[MOVELIST]-1]=EMPTY FI	ELSE IF NEWSOURCEPIECE=PAWN AND NEWTARGETPIECE=EMPTY ...&		AND POSSTARGETCOLUMN$[MOVELIST]<>POSSSOURCECOLUMN$[MOVELIST]	     THEN BOARD[FIVE,POSSTARGETCOLUMN$[MOVELIST]]=OPPONENT!PAWN	RETURN7000	REM **** FIGURE OUT BEST POSSIBLE MOVE *****	REM **** RETURN CURBESTSCORE= BEST SCORE	REM **** RETURNS CURBESTMOVE = POINTER TO NODE IN FREE POOL WITH BEST MOVE	REM **** RETURNS WITH MOVELIST = CURMOVEBASE	REM **** PRESERVES CURSCORE ****	GOSUB 8000\! FIGURE OUT THE POSSIBLE MOVES	IF CURMOBILITY=0 THEN LET CURBESTSCORE=DEADHEAT\ RETURN	REM DOES PREVIOUS STATEMENT HELP ?	REM NOW CHECK FOR QUICK WIN	IF POSSSCORE[MOVELIST]>=WIN	THEN CURBESTSCORE=POSSSCORE[MOVELIST]\	     CURBESTMOVE=MOVELIST\	     INSERT=MOVELIST\	     WHILE POSSLINK[INSERT]<>CURMOVEBASE DO INSERT=POSSLINK[INSERT] END\	     POSSLINK[INSERT]=POSSFREE\	     POSSFREE=MOVELIST\	     MOVELIST=CURMOVEBASE\	     RETURN \! MOBILITIES DON'T MATTER...	REM STACK THESE THINGS NOW SO WE DON'T HAVE TO DO IT IN MAIN LOOP	STACKSCORE[LEVEL]=TWODEADHEAT-CURSCORE	STACKMACHCASTLED[LEVEL]=CURMACHCASTLED	STACKOPPCASTLED[LEVEL]=CUROPPCASTLED	STACKMOVEBASE[LEVEL]=CURMOVEBASE	STACKMOBILITY[LEVEL]=CURMOBILITY	CURBESTMOVE=0	\! NOW ALLOCATE A DUMMY NODE AS "BEST"	CURBESTSCORE=0	\! ASSUME WORSE THAN WORST POSSIBLE SCORE	REM SO THAT 7100 CHOOSES FIRST MOVE AS BETTER MOVE, IGNORING MOBILITIES7010	IF MOVELIST=CURMOVEBASE	THEN POSSLINK[CURBESTMOVE]=POSSFREE\	     POSSFREE=CURBESTMOVE\	     CURMACHCASTLED=STACKMACHCASTLED[LEVEL]\	     CUROPPCASTLED=STACKOPPCASTLED[LEVEL]\	     CURMOBILITY=STACKMOBILITY[LEVEL]\	     RETURN \! WITH CURBESTSCORE, CURMOBILITY	REM CURMOBILITY IS # MOVES AVAILABLE TO WHITE AT PLY #0	REM ONEMOBILITY IS # MOVES AVAILABLE TO BLACK AT PLY #1	LET NEWSCORE=POSSSCORE[MOVELIST]	IF NEWSCORE-CURSCORE<CASTLESCORE AND...&		( LEVEL>MINLEVEL OR LEVEL=MINLEVEL AND STACKSCORE[LEVEL-1]-CURSCORE<PAWNSCORE ) ...&	   OR LEVEL=MAXLEVEL OR POSSFREE=0 	THEN LET ONEMOBILITY=ENDGAMEMOBILITY\ GOTO 7100	REM NO RECURSION, SO USE FIXED MOBILITYREM	IF DBG$="GOOD" THEN PRINT NEWSCORE\GOSUB 9000	REM SOMETHING INTERESTING HAPPENED, FOLLOW IT UP!	GOSUB 6000	\! MAKE THE MOVE ON THE BOARD	REM SAVE EVERYTHING AND DO RECURSIVE LOOKAHEAD	REM PUSH ALL THE STUFF WE NEED TO SAVE ON THE STACK	STACKBESTMOVE[LEVEL]=CURBESTMOVE	STACKBESTSCORE[LEVEL]=CURBESTSCORE	STACKSOURCEPIECE[LEVEL]=NEWSOURCEPIECE	STACKTARGETPIECE[LEVEL]=NEWTARGETPIECE	STACKBESTONEMOBILITY[LEVEL]=CURBESTONEMOBILITY	LEVEL=LEVEL+1	REM SWITCH OUR ATTENTION TO OTHER PLAYER BY SWAPPING SIDES	CURSCORE=NEWSCORE	CURROWFROM=NEWROWFROM	CURCOLFROM=NEWCOLFROM	CURROWTO=NEWROWTO	CURCOLTO=NEWCOLTO	CURMACHCASTLED=NEWMACHCASTLED	CURMOVEBASE=MOVELIST	GOSUB 5000	\! SWITCH PIECE COLORS	GOSUB 7000	\! REM DO RECURSIVE CALL TO COMPUTE BEST MOVE	GOSUB 5000	\! SWITCH PIECE COLORS BACK AGAIN	NEWSCORE=TWODEADHEAT-CURBESTSCORE	\! THIS IS THE RESULT OF THE EVALUATION	LET ONEMOBILITY=CURMOBILITY\ REM BECAUSE WE WENT UP TREE ONE PLY!	REM NOW UNSTACK ALL THE STUFF!	LEVEL=LEVEL-1	\! POP THE LOOKAHEAD STACK	CURMOVEBASE=STACKMOVEBASE[LEVEL]	CURBESTMOVE=STACKBESTMOVE[LEVEL]	CURBESTSCORE=STACKBESTSCORE[LEVEL]	NEWSOURCEPIECE=STACKSOURCEPIECE[LEVEL]	NEWTARGETPIECE=STACKTARGETPIECE[LEVEL]	CURMACHCASTLED=STACKMACHCASTLED[LEVEL]	CURSCORE=TWODEADHEAT-STACKSCORE[LEVEL]	CURBESTONEMOBILITY=STACKBESTONEMOBILITY[LEVEL]	IF CURSCORE<>NEWSCORE	THEN IF NEWSCORE>CURSCORE	     THEN LET NEWSCORE=NEWSCORE-TREEDEPTHPENALTY	     ELSE LET NEWSCORE=NEWSCORE+TREEDEPTHPENALTY	GOSUB 6500	\! UNMAKE THE MOVE	REM COULD ALSO MOVE PIECE THAT COVERS MAX DISTANCE TOWARDS KING	REM OR MOVE SMALLEST PIECE THAT MOVES TOWARDS KING7100	REM 1) MAXIMIZE SCORE (DONE BY SUBROUTINE 8000)	REM 2) MINIMIZE PLY 1 MOBILITY IF IT IS LESS THAN ENDGAMEMOBILITY	REM 3) CHOOSE MOVE THAT MOVES THE MOST DISTANCE TOWARDS ENEMY KING	REM 4) OR CHOOSE A PAWN MOVE!	IF LEVEL=1 THEN!	PRINT "MOVE ";POSSSOURCEROW$(MOVELIST)-1;POSSSOURCECOLUMN$(MOVELIST)-1;...!&	POSSTARGETROW$(MOVELIST)-1;POSSTARGETCOLUMN$(MOVELIST)-1;!	PRINT 	"DIST TO KING AT START";DISTANCE[ABS(KINGROW-POSSSOURCEROW$[MOVELIST]), ...!&			     ABS(KINGCOLUMN-POSSSOURCECOLUMN$[MOVELIST])] !	PRINT "DIST TO KING AT END";DISTANCE[ABS(KINGROW-POSSTARGETROW$[MOVELIST]), ...!&			      ABS(KINGCOLUMN-POSSTARGETCOLUMN$[MOVELIST])] !	PRINT "ONEMOBILITY=";ONEMOBILITY;"CURBESTONEMOBILITY=";CURBESTONEMOBILITY!	PRINT "NEWSCORE=";NEWSCORE;"CURBESTSCORE=";CURBESTSCORE!	IF CURBESTMOVE<>0!	THEN	PRINT "BEST MOVE DELTA TOWARDS KING";DISTANCE(ABS(KINGROW-POSSSOURCEROW$[CURBESTMOVE]),...!&			     ABS(KINGCOLUMN-POSSSOURCECOLUMN$[CURBESTMOVE])] ...!&		    -DISTANCE[ABS(KINGROW-POSSTARGETROW$[CURBESTMOVE]),...!&			      ABS(KINGCOLUMN-POSSTARGETCOLUMN$[CURBESTMOVE])]   !	FI!	FI	IF NEWSCORE>CURBESTSCORE...&	    OR NEWSCORE=CURBESTSCORE AND...&		( ONEMOBILITY < ENDGAMEMOBILITY AND ONEMOBILITY < CURBESTONEMOBILITY OR...&		CURBESTONEMOBILITY >= ENDGAMEMOBILITY AND LEVEL=1 ...&		AND DISTANCE[ABS(KINGROW-POSSSOURCEROW$[MOVELIST]), ...&			     ABS(KINGCOLUMN-POSSSOURCECOLUMN$[MOVELIST])] ...&		    -DISTANCE[ABS(KINGROW-POSSTARGETROW$[MOVELIST]), ...&			      ABS(KINGCOLUMN-POSSTARGETCOLUMN$[MOVELIST])] > ...&		    DISTANCE(ABS(KINGROW-POSSSOURCEROW$[CURBESTMOVE]),...&			     ABS(KINGCOLUMN-POSSSOURCECOLUMN$[CURBESTMOVE])] ...&		    -DISTANCE[ABS(KINGROW-POSSTARGETROW$[CURBESTMOVE]),...&			      ABS(KINGCOLUMN-POSSTARGETCOLUMN$[CURBESTMOVE])]   )	THEN IF CURBESTMOVE<>0 	     THEN POSSLINK[CURBESTMOVE]=POSSFREE\		  POSSFREE=CURBESTMOVE FI\	     CURBESTMOVE=MOVELIST\CURBESTSCORE=NEWSCORE\CURBESTONEMOBILITY=ONEMOBILITY\	     IF LEVEL>=2 AND ALPHABETACUTOFF-CURBESTSCORE<=STACKBESTSCORE[LEVEL-1]	     THEN LET INSERT=MOVELIST\		  WHILE POSSLINK[INSERT]<>CURMOVEBASE DO INSERT=POSSLINK[INSERT] END\		  LET POSSLINK[INSERT]=POSSFREE\		  LET POSSFREE=MOVELIST\		  MOVELIST=CURMOVEBASE\		  CURMACHCASTLED=STACKMACHCASTLED[LEVEL]\		  CUROPPCASTLED=STACKOPPCASTLED[LEVEL]\		  CURMOBILITY=STACKMOBILITY[LEVEL]\		  RETURN	     ELSE MOVELIST=POSSLINK[MOVELIST]	ELSE INSERT=MOVELIST\	     MOVELIST=POSSLINK[MOVELIST]\	     POSSLINK[INSERT]=POSSFREE\	     POSSFREE=INSERT	GOTO 70108000	REM **** GENERATE LIST OF ALL POSSIBLE MOVES ****	LET ANALYSISCOUNT=ANALYSISCOUNT+1	\! COUNT # TIMES THRU HERE	CURMOBILITY=0	\! NUMBER OF MOVES AVAILABLE	FOR ROW=ONE TO EIGHT		FOR COLUMN=ONE TO EIGHT			ON BOARD[ROW,COLUMN] GOSUB 8100,8200,8300,8400,8500,8600		NEXT COLUMN	NEXT ROW	RETURN8100	REM DO PAWN MOVE	ROWTO=ROW+1	REM WAS LAST MOVE EN PASSANT ?	IF ROW=FIVE AND CURROWTO=FIVE AND CURROWFROM=SEVEN ...&		AND BOARD[CURROWTO,CURCOLTO]=OPPONENT!PAWN...&		AND ( COLUMN=CURCOLTO-1 OR COLUMN=CURCOLTO+1 )	THEN COLTO=CURCOLFROM\	     POSSCORE=CURSCORE+PAWNSCORE\	     GOSUB 8950\! RECORD THE EN PASSANT CAPTURE AS A POSSIBILITY	REM TRY PAWN CAPTURE	IF OPPONENTQ&BOARD(ROWTO,COLUMN-1)<>0	THEN COLTO=COLUMN-1\POSSCORE=CURSCORE+SCOREPIECE[BOARD[ROWTO,COLTO]]\GOSUB 8920	IF OPPONENTQ&BOARD(ROWTO,COLUMN+1)<>0	THEN COLTO=COLUMN+1\POSSCORE=CURSCORE+SCOREPIECE[BOARD[ROWTO,COLTO]]\GOSUB 8920	REM TRY STRAIGHT FORWARD	IF BOARD(ROWTO,COLUMN)=EMPTY	THEN COLTO=COLUMN\	     POSSCORE=CURSCORE\	     GOSUB 8920\	     IF ROW=TWO AND BOARD(FOUR,COLTO)=EMPTY	     THEN ROWTO=FOUR\GOSUB 8950	RETURN8200	REM DO KNIGHT MOVE	FOR I=1 TO 15 STEP 2		LET ROWTO=ROW+KNIGHTMOVE$(I)-CHEAT		LET COLTO=COLUMN+KNIGHTMOVE$(I+1)-CHEAT		IF BOARD(ROWTO,COLTO)=EMPTY		THEN GOSUB 8900		ELSE IF OPPONENTQ&BOARD(ROWTO,COLTO)<>0		     THEN POSSCORE=CURSCORE+SCOREPIECE[BOARD[ROWTO,COLTO]]\GOSUB 8950	NEXT I	RETURN8300	REM DO BISHOP MOVE	FOR I=1 TO 7 STEP 2		LET ROWTO=ROW		LET COLTO=COLUMN		FOR J=1 TO 7			REM J IS DISTANCE MOVED			LET ROWTO=ROWTO+BISHOPROOKMOVE$(I)-CHEAT			LET COLTO=COLTO+BISHOPROOKMOVE$(I+1)-CHEAT			IF BOARD[ROWTO,COLTO]=EMPTY			THEN GOSUB 8900			ELSE				IF OPPONENTQ&BOARD[ROWTO,COLTO]<>0				THEN POSSCORE=CURSCORE+SCOREPIECE[BOARD[ROWTO,COLTO]]\GOSUB 8950				CYCLE I			FI		NEXT J	NEXT I	RETURN8400	REM DO ROOK MOVE	FOR I=9 TO 15 STEP 2		LET ROWTO=ROW		LET COLTO=COLUMN		FOR J=1 TO 7			REM J IS DISTANCE MOVED			LET ROWTO=ROWTO+BISHOPROOKMOVE$(I)-CHEAT			LET COLTO=COLTO+BISHOPROOKMOVE$(I+1)-CHEAT			IF BOARD[ROWTO,COLTO]=EMPTY			THEN GOSUB 8900			ELSE				IF OPPONENTQ&BOARD[ROWTO,COLTO]<>0				THEN POSSCORE=CURSCORE+SCOREPIECE[BOARD[ROWTO,COLTO]]\GOSUB 8950				CYCLE I			FI		NEXT J	NEXT I	RETURN8500	REM DO QUEEN MOVE	FOR I=1 TO 15 STEP 2		LET ROWTO=ROW		LET COLTO=COLUMN		FOR J=1 TO 7			REM J IS DISTANCE MOVED			LET ROWTO=ROWTO+BISHOPROOKMOVE$(I)-CHEAT			LET COLTO=COLTO+BISHOPROOKMOVE$(I+1)-CHEAT			IF BOARD[ROWTO,COLTO]=EMPTY			THEN GOSUB 8900			ELSE				IF OPPONENTQ&BOARD[ROWTO,COLTO]<>0				THEN POSSCORE=CURSCORE+SCOREPIECE[BOARD[ROWTO,COLTO]]\GOSUB 8950				CYCLE I			FI		NEXT J	NEXT I	RETURN8600	REM DO KING MOVE	FOR I=1 TO 15 STEP 2		LET ROWTO=ROW+BISHOPROOKMOVE$(I)-CHEAT		LET COLTO=COLUMN+BISHOPROOKMOVE$(I+1)-CHEAT		IF BOARD[ROWTO,COLTO]=EMPTY		THEN GOSUB 8900		ELSE IF OPPONENTQ&BOARD[ROWTO,COLTO]<>0		     THEN POSSCORE=CURSCORE+SCOREPIECE[BOARD[ROWTO,COLTO]]\GOSUB 8950	NEXT I	REM TRY TO CASTLE	REM NOTE: THIS DOESN'T DETECT CASTLING THRU CHECK !!	IF CURMACHCASTLED=TRUE THEN RETURN	REM CHECK CASTLE TO LEFT	IF BOARD(ONE,ONE)=ROOK AND BOARD(ONE,TWO)=EMPTY AND BOARD(ONE,THREE)=EMPTY...&		AND ( BOARD(ONE,FOUR)=KING OR BOARD(ONE,FOUR)=EMPTY AND BOARD(ONE,FIVE)=KING )	THEN ROWTO=ONE\COLTO=COLUMN-2\POSSCORE=CURSCORE+CASTLESCORE\GOSUB 8950	IF BOARD(ONE,EIGHT)=ROOK AND BOARD(ONE,SEVEN)=EMPTY AND BOARD(ONE,SIX)=EMPTY...&		AND ( BOARD(ONE,FIVE)=KING OR BOARD(ONE,FIVE)=EMPTY AND BOARD(ONE,FOUR)=KING )	THEN ROWTO=ONE\COLTO=COLUMN+2\POSSCORE=CURSCORE+CASTLESCORE\GOSUB 8950	RETURN8920	REM RECORD POSSIBLE MOVE WITH PAWN QUEENING	IF ROWTO=EIGHT THEN POSSCORE=POSSCORE+QUEENSCORE-PAWNSCORE	GOTO 89508900	REM RECORD POSSIBLE MOVE	POSSCORE=CURSCORE8950	REM RECORD POSSIBLE MOVE WITH POSSIBLE SCORE	REM INSERT IN LIST ACCORDING TO:	REM 1) VALUE OF POSSCORE (DECREASING)	REM 2) VALUE OF PIECE MOVED (INCREASING)	REM 3) DISTANCE TO ENEMY KING (? - NOT IMPLEMENTED)	CURMOBILITY=CURMOBILITY+1	\! COUNT THE MOVE WHETHER WE RECORD IT OR NOT	IF LEVEL>MINLEVEL AND MOVELIST<>CURMOVEBASE	THEN		REM WE'RE LOOKING AHEAD SOMEWHAT, AND HAVE AN NON-EMPTY MOVELIST		REM THROW AWAY NON-CAPTURES ONCE WE EXCEED MINIMUM LOOKAHEAD		IF POSSCORE-CURSCORE<PAWNSCORE THEN RETURN		REM KEEP ONLY THE BEST MOVE IF AT LOOKAHEAD LIMIT		IF LEVEL=MAXLEVEL		THEN			REM AT LOOKAHEAD LIMIT, SEE IF THIS MOVE IS BETTER			IF POSSSCORE[MOVELIST]>=POSSCORE THEN RETURN			ELSE				REM THIS IS BEST SO FAR, REPLACE OLD BEST WITH THIS				POSSSOURCEROW$[MOVELIST]=ROW				POSSSOURCECOLUMN$[MOVELIST]=COLUMN				POSSTARGETROW$[MOVELIST]=ROWTO				POSSTARGETCOLUMN$[MOVELIST]=COLTO				POSSSCORE[MOVELIST]=POSSCORE				RETURN			FI		FI	FI	NEWNODE=POSSFREE	POSSFREE=POSSLINK[NEWNODE]	POSSSOURCEROW$[NEWNODE]=ROW	POSSSOURCECOLUMN$[NEWNODE]=COLUMN	POSSTARGETROW$[NEWNODE]=ROWTO	POSSTARGETCOLUMN$[NEWNODE]=COLTO	POSSSCORE[NEWNODE]=POSSCORE	LET INSERT=MOVELIST	LET PREVIOUS=0	WHILE INSERT<>CURMOVEBASE AND...&		( POSSCORE < POSSSCORE[INSERT] OR...&		  POSSCORE = POSSSCORE[INSERT] AND...&			SCOREPIECE[BOARD[ROW,COLUMN]] > ...&				SCOREPIECE[BOARD[POSSSOURCEROW$[INSERT],POSSSOURCECOLUMN$[INSERT]]] )...&	DO		PREVIOUS=INSERT		INSERT=POSSLINK[PREVIOUS]	END	POSSLINK[NEWNODE]=INSERT	IF PREVIOUS=0 THEN MOVELIST=NEWNODE ELSE POSSLINK[PREVIOUS]=NEWNODE	IF POSSFREE=0 THEN PRINT "TRUNCATED 8000"\ GOSUB POP 2	RETURN9000	REM **** PRINT BOARD ****	PRINT	PRINT "    1  2  3  4  5  6  7  8"	FOR ROW=ONE TO EIGHT		PRINT ROW-ONE+1;		FOR COLUMN=ONE TO EIGHT			PRINT OBJECTCOLOR$[1+(BOARD(ROW,COLUMN)),1];			PRINT OBJECTNAME$[(BOARD(ROW,COLUMN)&7)+1,1];" ";		NEXT COLUMN		PRINT	NEXT ROW	PRINT "SCORE: "; (CURSCORE-DEADHEAT)/PAWNSCORE	PRINT "EXPECTED SCORE : ";(CURBESTSCORE-DEADHEAT)/PAWNSCORE	PRINT "BOARD ANALYSES: ";ANALYSISCOUNT	PRINT "CLOCK TIME: "; TOTALANALYSIS	RETURN	END