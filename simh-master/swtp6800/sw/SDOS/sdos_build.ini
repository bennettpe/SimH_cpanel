set console -n -q log=console.txt 
set debug -n -q debug.txt

set bootrom 2708
attach bootrom swtbug.bin
set cpu hex
set cpu noitrap
set cpu nomtrap
set cpu nodebug
reset
set mp-b2 bd0, bd1, bd2, bd3, bd4, bd5

; creates SDOS_Boot.dsk: to boot SDOS 1.1G on a Standart SWTPC 6800
;         SDOS_System.dsk: contains the system commands to init disk, etc
;         SDOS_Prog1.dsk: contains assembler, basic compiler, editor
;         SDOS_Prog2.dsk: contains metacompiler
; updates SDOS_Base.dsk with last version of O/S

; needs build/SDOS11G56K.S19	- The O/S
;       build/IOSWTPC6800.S19	- the I/O package for SWTPC 6800


; As a starting point we need a disk image with the following features
;   - Disk image with SDOS file system (a sdosdiskinit'd disk), should have at least 
;     DIRECTORY.SYS, DISKMAP.SYS, BADCLUSTERS.SYS files. 
;   - DEFAULTTPROGRAM with command interpreter
;   - SDOSDISKINIT program
; the image does not need to be bootable, nor need SERIALNUMBER.SYS file 
; this is the SDOS_Base.DSK image

; we use a copy of disk images to not damage them if something goes wrong
; disk are 2 sides X 35 track x 18 sect x 128 bytes/sector
; first track is track 0, first sector on all tracks is sector 1
; total size 157,5 Kb


copy -q SDOS_Base.DSK D0.DSK
copy -q Blank.DSK D1.DSK
copy -q Blank.DSK D2.DSK

; insert disk images in disk drives

set dc-4 fmt=sdos
att dc-40 D0.DSK
set dc-40 rw
att dc-41 D1.DSK
set dc-41 rw
att dc-42 D2.DSK
set dc-42 rw

; SDOS68 1.1 for MF68 Disk - 1985

; load SDOS Operating System + I/O Package from paper tape

LOAD BUILD/IOSWTPC6800.LST
LOAD BUILD/SDOS11G56K.LST

; start symbolic trace
; set cpu debug=symb;inst
; set dc-4 debug=all

go until "$"

att -q ptr BUILD/SDOS11G56K.S19
send "L"
go until "$"

att -q ptr BUILD/IOSWTPC6800.S19
send "L"
go until "$"

; load listing files for symbolic debugging
; load also Basic Run Time Package and SWTBUG listing
; (command processor is a compiled basic prog that relies on RTP

; start SDOS os in its $2000 entry point as 
; if it was loaded from disk by boot prog

send "J2000"

go until "Software Dynamics"
go until "\n."

; send several <CR>'s
send "\r"
go until "\n."
send "\r"
go until "\n."
send "\r"
go until "\n."

send "files"
send "\r"
go until "\n."

send "\r"
go until "\n."
send "\r"
go until "\n."

send "sdosdiskinit"
send "\r"

go until "disk to initialize?"
send "D1:"
send "\r"

go until "Disk id?"
send "SIMH SWTPC6800 SDOS 1.1G"
send "\r"

go until "be copied?"
send "\r"

go until "Default value is"
send "\r"

go until "Default value"
send "\r"

go until "Default value"
send "\r"

go until "to find best"
send "\r"

go until "Default value is"
send "\r"

go until "bootable system"
send "\r"
go until "\n."

send "\r"
go until "\n."
send "\r"
go until "\n."
send "\r"
go until "\n."

send "defaultdisk d1:"
send "\r"
go until "\n."

call ImportToSDOS    DISKINIT11H.680   d1:sdosdiskinit
call ImportToSDOS    DEFAULT14L.680    d1:defaultprogram

; Dismount disk & remove form disk drive & make a copy
; this will be the SDOS_Base disk

send "********************************************"
send "\r"
go until "\n."
send "files d1:"
send "\r"
go until "\n."
send "dismount d1:"
send "\r"
go until "\n."

det dc-41 
copy -q D1.DSK SDOS_Base.DSK

; insert disk again in drive and go on

att dc-41 D1.DSK
set dc-41 rw

send "\r"
go until "\n."
send "********************************************"
send "\r"
go until "\n."
send "* "
send "\r"
go until "\n."
send "* SDOS_Base disk generated (from D1:)"
send "\r"
go until "\n."
send "* "
send "\r"
go until "\n."
send "********************************************"
send "\r"
go until "\n."
send "\r"
go until "\n."

send "mount d1:"
send "\r"
go until "\n."
send "defaultdisk d1:"
send "\r"
go until "\n."
send "files"
send "\r"
go until "\n."

; now copy default as sdoscommands and generate ERRORMSGS.SYS file

send "copy d1:defaultprogram to d1:sdoscommands"
send "\r"
go until "\n."

call ImportToSDOS    ERRORMSGBUILD.DO	d1:errormsgbuild.do
call ImportToSDOS    ERRORMAINT14.680	d1:errormaint

send "do errormsgbuild.do"
send "\r"
go until ">S"
go until "* DISMOUNT DISK"
go until "\n."

send "\r"
send "\r"
go until "\n."
send "\r"
go until "\n."

send "free"
send "\r"
go until "disk capacity"
go until "\n."

send "\r"
go until "\n."

; dismount & mount again as asked for by ERRORMSGS.SYS generation progrma
; this is needed by SDOS to sense and use the file

send "dismount d1:"
send "\r"
go until "\n."
send "mount d1:"
send "\r"
go until "\n."
send "defaultdisk d1:"
send "\r"
go until "\n."
send "files"
send "\r"
go until "\n."

send "\r"
go until "\n."
send "\r"
go until "\n."
send "\r"
go until "\n."

; Get the parts fo SDOS to create a bootable image of the O/S
;    SDOS11G56K.680  -> SDOS 1.1G assembly for 6800 and 56K ram (OS uses $AE00-$DFFF)
;    IOSWTPC6800.680 -> I/O Package for SWTPBUG 6800
;    BOOT.BIN        -> the boot loader prog. It is not in SDOS Load format, 
;                       It is an absolute binay to be loaded at addr $2400, entry point $2400
;              

call ImportToSDOS    MERGEBIN.680      d1:MERGEBIN

call ImportToSDOS    SDOS11G56K.680   d1:SDOS11G56K.680
call ImportToSDOS    IOSWTPC6800.680  d1:IOSWTPC6800.680
call ImportToSDOS    BOOT.BIN         d1:BOOT.BIN

; concat into one big file (SDOS.680) to be loaded by boot program (BOOT.BIN)

send "MERGEBIN"
send "\r"
go until "Input File1"
send "SDOS11G56K.680\r"
go until "Input File2"
send "IOSWTPC6800.680\r"
go until "Output File"
send "SDOS.680\r"
go until "Generated File"
go until "\n."

send "\r"
go until "\n."
send "\r"
go until "\n."
send "\r"
go until "\n."

; Now create a bootable disk image using SDOS.680 and BOOT.BIN

send "sdosdiskinit"
send "\r"

go until "disk to initialize?"
send "D2:"
send "\r"

go until "Disk id?"
send "SIMH SWTPC6800 SDOS 1.1G BOOT"
send "\r"

go until "be copied?"
send "\r"

go until "Default value is"
send "\r"

go until "Default value"
send "\r"

go until "Default value"
send "\r"

go until "to find best"
send "\r"

go until "Default value is"
send "\r"

go until "bootable system"
send "YES"
send "\r"

go until "File to copy into BOOT.SYS"
send "D1:BOOT.BIN"
send "\r"

go until "File to copy into SDOS.SYS"
send "D1:SDOS.680"
send "\r"

go until "File to copy for SERIALNUMBER.SYS"
send "\r"

go until "File to copy for DEFAULTPROGRAM"
send "D1:DEFAULTPROGRAM"
send "\r"
go until "\n."

call CopyFromD1 errormsgs.sys    

; disk in drive 2 is bootable, has the basic OS, but no progs on it
; let's copy it to have an empty fresh bootable image

; dismoutn & remove D2.dsk in drive 2 and copy it as SDOS_Boot.dsk (empty bootable disk)
; then put back in drive, and re-mount it

send "********************************************"
send "\r"
go until "\n."

send "files d2:"
send "\r"
go until "\n."

send "dismount d2:"
send "\r"
go until "\n."

det dc-42 
copy -q D2.DSK SDOS_Boot.dsk
att dc-42 D2.DSK
set dc-42 rw

send "\r"
go until "\n."
send "********************************************"
send "\r"
go until "\n."
send "* "
send "\r"
go until "\n."
send "* SDOS_Boot disk generated (from D2:)"
send "\r"
go until "\n."
send "* "
send "\r"
go until "\n."
send "********************************************"
send "\r"
go until "\n."
send "\r"
go until "\n."

send "mount d2:"
send "\r"
go until "\n."

send "\r"
go until "\n."
send "\r"
go until "\n."
send "\r"
go until "\n."

; Populate the D2 disk with system utilities to create a system disk

call CopyFromD1 sdosdiskinit     
call CopyFromD1 sdoscommands     
call CopyFromD1 ERRORMSGBUILD.DO 
call CopyFromD1 ERRORMAINT       

call ImportToSDOS    DISKVAL111H.680   D2:SDOSDISKVALIDATE
call ImportToSDOS    DISKVAL211H.680   D2:SDOSDISKVAL.PAS2
call ImportToSDOS    DISKVAL311H.680   D2:SDOSDISKVAL.PAS3
call ImportToSDOS    DISKVAL411H.680   D2:SDOSDISKVAL.PAS4
call ImportToSDOS    DISKVAL511H.680   D2:SDOSDISKVAL.PAS5

call ImportToSDOS    BACKUP11G.680     D2:SDOSDISKBACKUP
call ImportToSDOS    SDCOPY.680        D2:SDCOPY


send "\r"
go until "\n."
send "\r"
go until "\n."
send "\r"
go until "\n."

send "********************************************"
send "\r"
go until "\n."

send "files d2:"
send "\r"
go until "\n."

send "\r"
go until "\n."

send "dismount d1:"
send "\r"
go until "\n."
send "dismount d2:"
send "\r"
go until "\n."

send "\r"
go until "\n."
send "********************************************"
send "\r"
go until "\n."
send "* "
send "\r"
go until "\n."
send "* SDOS_System disk generated (from D2:)"
send "\r"
go until "\n."
send "* "
send "\r"
go until "\n."
send "********************************************"
send "\r"
go until "\n."
send "\r"
go until "\n."

; That's all folks
; Enter to SWTBUG, 
; remove D2.dsk in drive 2 and use it new SDOS_System.dsk (bootable system utilities disk)
; insert boot disk in drive 0 and boot it

; remove all disks
: put generated boot disk in drive 0

det dc-40 
det dc-41 
det dc-42 

copy -q D2.DSK SDOS_System.dsk
del -q D0.DSK
del -q D1.DSK
del -q D2.DSK

; Boot a New disk and go on

copy -q SDOS_System.dsk D0.DSK
copy -q Blank.DSK D1.DSK

set dc-4 fmt=sdos
att dc-40 D0.DSK
set dc-40 rw
att dc-41 D1.DSK
set dc-41 rw

; send ^D to enter into swtbug monitor
send "\004"
go until "$"

; clear mem (to be sure only code loaded form disk is the one runned)
dep 0000-7FFF 00

; and boot usign SWTBUG

send "D"

go until "Software Dynamics"
go until "\n."

; now boot with stand alone loader
; send ^D to enter into swtbug monitor
send "\004"
go until "$"

att -q ptr build/loader.s19
send "L"
go until "$"

send "G"

go until "Software Dynamics"
go until "\n."

det -q ptr

send "version"
send "\r"
go until "\n."

send "userspace"
send "\r"
go until "\n."

; Now create a new non-bootable disk image 

send "sdosdiskinit"
send "\r"

go until "disk to initialize?"
send "D1:"
send "\r"

go until "Disk id?"
send "SIMH SWTPC6800 SDOS 1.1G DATA"
send "\r"

go until "be copied?"
send "\r"

go until "Default value is"
send "\r"

go until "Default value"
send "\r"

go until "Default value"
send "\r"

go until "to find best"
send "\r"

go until "Default value is"
send "\r"

go until "bootable system"
send "\r"

go until "\n."

; copy error message file and default program 
; default is the command line interpreter and is needed to allow
; this disk to be defautldisk
; error message file is optional but nice to have. It is a sparse file, 
; so even if its length it > 200K, in fact it occupies 17 clusters of 5 sectors
; each of 128 bytes each = 17*5*128=10880 bytes on disk

send "copy d0:errormsgs.sys to d1:*"
send "\r"
go until "\n."
send "copy d0:defaultprogram to d1:*"
send "\r"
go until "\n."

; Dismount disk & remove form disk drive & make a copy
; this will be the SDOS_Blank disk

send "********************************************"
send "\r"
go until "\n."
send "files d1:"
send "\r"
go until "\n."
send "dismount d1:"
send "\r"
go until "\n."

det dc-41 
copy -q D1.DSK SDOS_Blank.DSK
copy -q SDOS_Blank.DSK D2.DSK
copy -q SDOS_Blank.DSK D3.DSK

; copy SDOS_Blank and insert disk again in drive to go on

att dc-41 D1.DSK
set dc-41 rw
att dc-42 D2.DSK
set dc-42 rw
att dc-43 D3.DSK
set dc-43 rw

send "\r"
go until "\n."
send "********************************************"
send "\r"
go until "\n."
send "* "
send "\r"
go until "\n."
send "* SDOS_Blank disk generated (from D1:)"
send "\r"
go until "\n."
send "* "
send "\r"
go until "\n."
send "********************************************"
send "\r"
go until "\n."
send "\r"
go until "\n."

send "mount d1:"
send "\r"
go until "\n."

; now copy application programs

; sort and type program

call ImportToSDOS    SORT10H3.680      d1:sort
call ImportToSDOS    TYPE23.680        d1:type

; assembler version 1.3 and 1.4 (runs on 6800
; and generates code for 6800)

call ImportToSDOS    ASM13H4.680   d1:asm13
call ImportToSDOS    ASM14A.680    d1:asm

; basic compiler 1.4I and line editor 1.1

call ImportToSDOS    BASIC.680         d1:basic
call ImportToSDOS    EDIT11S1.680      d1:edit
call ImportToSDOS    FIX10B.680        d1:fix
call ImportToSDOS    COMPILE10B.680    d1:compile
call ImportToSDOS    FINDLABEL10B.680  d1:findlabel
; other programs

call ImportToSDOS    CALCULATE.680  d1:calculate
call ImportToSDOS    CHESS14.680    d1:chess


; developement tools: Binary Management Prog 1.4F for bin pathing, 
; BASIC Runt-Time-Package 1.4J

send "********************************************"
send "\r"
go until "\n."

send "files d1:"
send "\r"
go until "\n."

send "dismount d1:"
send "\r"
go until "\n."

det dc-41 
copy -q D1.DSK SDOS_Progs1.dsk
att dc-41 D1.DSK
set dc-41 rw

send "\r"
go until "\n."
send "********************************************"
send "\r"
go until "\n."
send "* "
send "\r"
go until "\n."
send "* SDOS_Progs1 disk generated (from D1:)"
send "\r"
go until "\n."
send "* "
send "\r"
go until "\n."
send "********************************************"
send "\r"
go until "\n."
send "\r"
go until "\n."

send "mount d1:"
send "\r"
go until "\n."

; Binary Maintenance Program
; basic runtime package 1.4J
; M680C prog to convert M680C menmonics to plain 6800 menmonics
; MetaMachine 1.4 and MetaCompiler 1.4
; Make Nice Binaries
; MergeBin (merge two .680 binaries), TrimBin (remove n leading bytes from file)
; Strip conditional compilation IF's from 6800 assembler source
; detailed/sorted dir
; make s19 mikbug format file from SDOS .680 binary load file
: make SDOS .680 binary load file from s19 mikbug format file 

call ImportToSDOS    	BMPVT14F.680		d2:bmp
call ImportToSDOS    	BASRTP14J.680		d2:basrtp
call ImportToSDOS    	M680C10J.680		d2:m680c
call ImportTextToSDOS	SRC/M680C.LIB		d2:M680C.LIB
call ImportToSDOS    	METAM14C.680		d2:metam14
call ImportToSDOS    	META14C.680		d2:meta14c
call ImportToSDOS    	MNB14.680		d2:mnb
call ImportToSDOS    	MERGEBIN.680		d2:mergebin
call ImportToSDOS    	TRIMBIN.680		d2:trimbin
call ImportToSDOS    	STRIPIFS14H.680		d2:stripifs
call ImportToSDOS    	DIR14.680		d2:dir
call ImportToSDOS    	SDIR.680		d2:sdir
call ImportToSDOS    	MAKMIKBUG11B.680	d2:makmikbug
call ImportToSDOS    	MAKBINARY11A.680	d2:makbinary

send "********************************************"
send "\r"
go until "\n."

send "files d2:"
send "\r"
go until "\n."

send "dismount d2:"
send "\r"
go until "\n."

det dc-42 
copy -q D2.DSK SDOS_Progs2.dsk
att dc-42 D2.DSK
set dc-42 rw

send "\r"
go until "\n."
send "********************************************"
send "\r"
go until "\n."
send "* "
send "\r"
go until "\n."
send "* SDOS_Progs2 disk generated (from D2:)"
send "\r"
go until "\n."
send "* "
send "\r"
go until "\n."
send "********************************************"
send "\r"
go until "\n."
send "\r"
go until "\n."

send "mount d2:"
send "\r"
go until "\n."

send "defaultdisk d1:"
send "\r"
go until "\n."


; test assembler 1.3 


call ImportToSDOS    	ASM13H4.680       d1:ASM13
call ImportTextToSDOS	SRC/ASMHELLO.ASM  d1:HELLO.ASM

send "asm13"
send "\r"
go until "Source File"
send "HELLO.ASM"
send "\r"
go until "Listing File"
send "HELLO.LST"
send "\r"
go until "Binary File"
send "HELLO"
send "\r"
go until ">"
send "\r"
go until "No Assembly Errors"
go until "\n."

send "list HELLO.LST"
send "\r"
go until "No Assembly Errors"
go until "\n."

send "HELLO"
send "\r"
go until "\n."

send "delete HELLO"
send "\r"
go until "\n."
send "delete HELLO.ASM"
send "\r"
go until "\n."
send "delete HELLO.LST"
send "\r"
go until "\n."

; test editor

send "EDIT"
send "\r"
go until "*"
send "ewHELLO.BAS\\"
send "\r"
go until "*"
send "I"
send "10 REM Hola \r"
send "20 PRINT \"Hola2\" \r"
send "40 END \r"
send "\\"
send "\r"
go until "*"
send "exit"
send "\r"
go until "\n."

send "list HELLO.BAS"
send "\r"
go until "\n."

; test basic asm assembler 1.4

send "BASIC"
send "\r"
go until "Input file"
send "HELLO.BAS"
send "\r"
go until "Output File"
send "HELLO.ASM"
send "\r"
go until "\n."

send "ASM"
send "\r"
go until "Source File"
send "HELLO.ASM"
send "\r"
go until "Listing File"
send "HELLO.LST"
send "\r"
go until "Binary File"
send "HELLO"
send "\r"
go until ">"
send "\r"
go until "\n."

send "HELLO"
send "\r"
go until "\n."

; build finished! clean up

send "dismount d0:"
send "\r"
go until "\n."
send "dismount d1:"
send "\r"
go until "\n."
send "dismount d2:"
send "\r"
go until "\n."
send "dismount d3:"
send "\r"
go until "\n."

det dc-40
det dc-41 
det dc-42 
det dc-43 

del -q D0.DSK
del -q D1.DSK
del -q D2.DSK
del -q D3.DSK


go 
goto end


:CopyFromD1
send "copy d1:%1 to d2:*"
send "\r"
go until "\n."
return

:ImportToSDOS
att ptr build/%1
send "copy port: to %2"
send "\r"
go until "\n."
det -q ptr
return

:ImportTextToSDOS
att ptr build/%1
send "list port: to %2"
send "\r"
go until "\n."
det -q ptr
return

:end
echo