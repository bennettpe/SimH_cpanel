


; if paramter %1 == "IO" then directly go to assemble iopackage and 

set console -n -q log=console.txt 
set debug -n -q debug.txt

set cpu hex
set cpu noitrap
set cpu nomtrap
set cpu nodebug
reset

; setup Hack for 64k RAM:
;	System has ram in 0000..FFFF
;       except FF00..FF1F that is the I/O 
;       no bootrom, no eprom
; 
set mp-b2 64k

; as system has no rom, load in ram SWTBUG program
; and set top of mem cpu vectors for IRQ, SWI, NMI, Reset

; load swtbug
load swtbug.bin e000

; patch it for new I/O addresses at FF00 instead of 8000
dep e10a ff
dep e156 ff

; set SWI vector
dep FFFA E1
dep fffb 8B

; set NMI vector
dep FFFC E1
dep FFFd A7

; set reset vector
dep FFFE E0
dep ffff D0

; needs build/SWTBUG4000.S19		- relocated SWTBUG at 4000 (so will not be overwritten by OS)
;       build/SDOS11G64K.680.S19	- The O/S, loads at BE00-FEFF, cold start at $2000
;       build/IOSWTPC6800.64K.S19	- the I/O package for SWTPC 6800 with 64K

; As a starting point we need a disk image with the following features
;   - Disk image with SDOS file system (a sdosdiskinit'd disk), should have at least 
;     DIRECTORY.SYS, DISKMAP.SYS, BADCLUSTERS.SYS files. 
;   - DEFAULTTPROGRAM with command interpreter
;   - SDOSDISKINIT program
; the image does not need to be bootable, nor need SERIALNUMBER.SYS file 
; this is the SDOS_Base.DSK image

; this script generates the compiled binaries from sources
; copy the new binaries (.680) from ./comp folder to ./build folder
; the script sdos_build.ini will read ./build forder and build the SDOS disk images

; we use a copy of disk images to not damage them if something goes wrong
; disk are 2 sides X 35 track x 18 sect x 128 bytes/sector
; first track is track 0, first sector on all tracks is sector 1
; total size 157,5 Kb


copy -q SDOS_Base.DSK D0.DSK

; insert disk images in disk drives

set dc-4 fmt=sdos
att dc-40 D0.DSK
set dc-40 rw

set hd0 enabled
att -n -q hd HD.DSK

; SDOS68 1.1 for MF68 Disk - 1985

; load SDOS Operating System + I/O Package from paper tape

LOAD BUILD/IOSWTPC64K.LST
LOAD BUILD/SDOS11G64K.LST

; start symbolic trace
; set cpu debug=symb;inst
; set dc-4 debug=all
; set hd debug=all

go until "$"

att -q ptr BUILD/SWTBUG4000.S19
send "L"
go until "$"
send "G"
go until "$"

att -q ptr build/SDOS11G64K.S19
send "L"
go until "$"

att -q ptr build/IOSWTPC64K.S19
send "L"
go until "$"

; start SDOS os in its $2000 entry point as 
; if it was loaded from disk by boot prog

send "J2000"


go until "Software Dynamics"
go until "\n."

send "version"
send "\r"
go until "\n."

send "userspace"
send "\r"
go until "\n."

call rem2 "Init Hard Disk. It will be used to compile the OS"
call InitHD

if "%1"=="IO" goto ioswtpc0

call rem2 "Assemble ASM 1.4 using ASM 1.3"
call asm
call rem2 "Assemble MetaCompiler and MetaMachine"
call meta
call rem2 "Assemble BASIC compiler"
call basic
call rem2 "Compile BASIC programs"
call bascompile
call rem2 "generate .TXT manuals from .TYP files"
call man
call rem2 "assemble SDOS core operating system"
call SDOS
:ioswtpc0
call rem2 "assemble SimH SWTPC IO Package "
call IOSWTPC

call rem2 "All Done!"
send "files"
send "\r"
go until "\n."
send "free"
send "\r"
go until "\n."
send "dismount d0:"
send "\r"
go until "\n."
send "dismount hd:"
send "\r"
go until "\n."

det dc-40
det hd

del -q D0.DSK
del -q HD.DSK

go 
goto end



:InitHD
send "sdosdiskinit hd:"
send "\r"

go until "Disk id?"
send "SDOS HD 5 MB"
send "\r"

go until "be copied?"
send "\r"

go until "Default value is"
send "\r"

go until "Default value"
send "\r"

go until "Default value"
send "\r"

go until "to find best"
send "\r"

go until "Default value is"
send "\r"

go until "bootable system"
send "\r"
go until "\n."

send "copy d0:defaultprogram to hd:defaultprogram"
send "\r"
go until "\n."
send "defaultdisk hd:"
send "\r"
go until "\n."

return

:man
; generate manuals

call ImportToSDOS       TYPE23.680      hd:type
send "\r"
go until "\n."

call typeman SDOSMANPART1
call typeman SDOSMANPART2
call typeman SDOSMANPART3 ERR
call typeman TYPEMANUAL
call typeman TYPEADDEN
call typeman TYPEBUGS
call typeman ASMMANUAL14
call typeman BASICMAN14J
call typeman EDIT11
call typeman SORTMANUAL
call typeman BMP
call typeman DEFAULTBUGS
call typeman VALIDATEBUGS
call typeman BACKUPBUGS
call typeman VTDRIVER

return


:typeman
send "***** Generate Text Doc from %1.TYP *****"
send "\r"
go until "\n."

call ImportTextToSDOS	man/%1.TYP     hd:MANTEXT.TYP

send "TYPE"
send "\r"
go until "*"
send "%1.TXT=MANTEXT.TYP"
send "\r"
if "%2"=="ERR" go until "**ERROR"
go until "*"
send "\r"
go until "\n."

call ExportTextFromSDOS	    %1.TXT     

send "delete MANTEXT.TYP"
send "\r"
go until "\n."
send "delete %1.TXT"
send "\r"
go until "\n."
send "\r"
go until "\n."

return


:meta

call rem "Assemble Metamachine METAM14C from source using M680C macro expansion"

call ImportTextToSDOS    SRC/METAM14C.ASM	HD:METAM14C.ASM
call ImportTextToSDOS    SRC/SDOSUSERDEFS.ASM	HD:SDOSUSERDEFS.ASM

call ImportTextToSDOS    SRC/M680C.LIB		HD:M680C.LIB
call ImportToSDOS        M680C10J.680		HD:M680C

send "M680C"
send "\r"
go until "Output file"
send "M.ASM"
send "\r"
go until "Input file"
send "METAM14C.ASM"
send "\r"
go until "\n."

call ImportToSDOS     	 ASM14A.680       hd:ASM
call ImportToSDOS    	 ASM13H4.680      hd:ASM13

send "asm"
send "\r"
go until "Source File"
send "M.ASM"
send "\r"
go until "Listing File"
send "METAM14C.LST"
send "\r"
go until "Binary File"
send "METAM14C.680"
send "\r"
go until ">"
send "\r"
go until "\n."

call ExportTextFromSDOS   METAM14C.LST

;ZZZ Metamachine is broken! and thus Metacompiler generated with it
;ZZZ thus we use CHM disk suppiled file in BUILD folder
     call ImportToSDOS    	  METAM14C.680		hd:METAM14C.680
;ZZZ call ExportFromSDOS       METAM14C.680

call rem "Load Metacompiler 1.4, use it to compile itself to Metamachine code"


call ImportToSDOS         META14C.680		HD:META14C
call ImportTextToSDOS     SRC/META14C.BNF	HD:META14C.BNF

send "META14C"
send "\r"
go until "Input file"
send "META14C.BNF"
send "\r"
go until "Output File"
send "META14C.ASM"
send "\r"
go until "\n."

call ExportTextFromSDOS   META14C.ASM

call rem "Assemble Metacompiler"

send "asm13"
send "\r"
go until "Source File"
send "META14C.ASM"
send "\r"
go until "Listing File"
send "META14C.LST"
send "\r"
go until "Binary File"
send "META14C.680"
send "\r"
go until ">"
send "\r"
go until "\n."

call ExportTextFromSDOS   META14C.LST

call ImportToSDOS    	  MERGEBIN.680		hd:MERGEBIN

send "MERGEBIN"
send "\r"
go until "Input File1"
send "METAM14C.680\r"
go until "Input File2"
send "META14C.680\r"
go until "Output File"
send "META14C.680\r"
go until "Generated File"
go until "\n."

call ExportFromSDOS       META14C.680

send "delete META14C.LST"
send "\r"
go until "\n."
send "delete METAM14C.LST"
send "\r"
go until "\n."

return

:basic
call rem "Load meta compiler 1.4, use it to compile basic14i.bnf to metamachine code"
call basic1
call rem "Concat METAM14C.680 + basic14i.680 -> basic.680"
call basic2
call rem "Test basic compiler with a sample program"
call basic3
return

:basic1
call ImportToSDOS        META14C.680		HD:META14C
call ImportTextToSDOS    SRC/BASIC14I.BNF	HD:BASIC14I.BNF

send "META14C"
send "\r"
go until "Input file"
send "BASIC14I.BNF"
send "\r"
go until "Output File"
send "BASIC14I.ASM"
send "\r"
go until "\n."

call ImportToSDOS    	ASM13H4.680      hd:ASM13

send "asm13"
send "\r"
go until "Source File"
send "BASIC14I.ASM"
send "\r"
go until "Listing File"
send "BASIC14I.LST"
send "\r"
go until "Binary File"
send "BASIC14I.680"
send "\r"
go until ">"
send "\r"
go until "\n."

call ExportTextFromSDOS   BASIC14I.ASM
call ExportTextFromSDOS   BASIC14I.LST
call ExportFromSDOS       BASIC14I.680

send "delete HD:BASIC14I.LST"
send "\r"
go until "\n."
send "delete HD:BASIC14I.ASM"
send "\r"
go until "\n."
send "delete HD:BASIC14I.BNF"
send "\r"
go until "\n."

return

:basic2

call ImportToSDOS    	  MERGEBIN.680		hd:MERGEBIN
call ImportToSDOS    	  METAM14C.680		hd:METAM14C.680
call ImportToSDOS         ../comp/BASIC14I.680	HD:BASIC14I.680

send "MERGEBIN"
send "\r"
go until "Input File1"
send "METAM14C.680\r"
go until "Input File2"
send "BASIC14I.680\r"
go until "Output File"
send "BASIC.680\r"
go until "Generated File"
go until "\n."

call ExportFromSDOS       BASIC.680
return

:basic3
call ImportToSDOS    	EDIT11S1.680  hd:edit
send "EDIT"
send "\r"
go until "*"
send "ewHELLO.BAS\\"
send "\r"
go until "*"
send "I"
send "10 REM Hola \r"
send "20 PRINT \"Hola\" \r"
send "30 STOP \r"
send "40 END \r"
send "\\"
send "\r"
go until "*"
send "exit"
send "\r"
go until "\n."

send "list HELLO.BAS"
send "\r"
go until "\n."

call ImportToSDOS        ../comp/BASIC.680		HD:BASIC

send "BASIC"
send "\r"
go until "Input file"
send "HELLO.BAS"
send "\r"
go until "Output File"
send "HELLO.ASM"
send "\r"
go until "\n."

call ImportToSDOS    ASM14A.680    hd:ASM

send "ASM"
send "\r"
go until "Source File"
send "HELLO.ASM"
send "\r"
go until "Listing File"
send "HELLO.LST"
send "\r"
go until "Binary File"
send "HELLO"
send "\r"
go until ">"
send "\r"
go until "\n."

send "list HELLO.LST"
send "\r"
go until "\n."

send "HELLO"
send "\r"
go until "\n."

return


:asm
call rem "Load source files ASM14XXX.ASM and convert them from 680C to 6800"
call asm1
call rem "Assemble ASM14A.CTRL.ASM with ASM 1.3 -> generates ASM14BODY.680"
call asm2
call rem "Assemble ASM14IODR with ASM 1.3 -> generates ASM14IODR.680"
call asm3
call rem "Merge ASM14BODY.680 + ASM14IODR.680 -> ASM14A.680"
call asm4
call rem "Assemble TEST.ASM with generated ASM 1.4"
call asm5
return


:asm1
call ImportTextToSDOS    SRC/M680C.LIB		HD:M680C.LIB
call ImportToSDOS        M680C10J.680		HD:M680C

call asm1a  		ASM14A.CTRL.ASM
call asm1a  		ASM14A.DEFS.ASM
call asm1a  		ASM14A.DITL0.ASM
call asm1a  		ASM14A.DREX.ASM
call asm1a  		ASM14A.EVAL.ASM
call asm1a  		ASM14A.FCONV.ASM
call asm1a  		ASM14A.IOFM.ASM
call asm1a  		ASM14A.MAIN.ASM
call asm1a  		ASM14IODR.ASM

send "delete HD:A.ASM"
send "\r"
go until "\n."
return

:asm1a
call ImportTextToSDOS    SRC/%1		HD:A.ASM
send "M680C"
send "\r"
go until "Output file"
send "%1"
send "\r"
go until "Input file"
send "A.ASM"
send "\r"
go until "\n."
return

:ASM2
call ImportToSDOS    	 ASM13H4.680            hd:ASM13

send "asm13"
send "\r"
go until "Source File"
send "ASM14A.CTRL.ASM"
send "\r"
go until "Listing File"
send "ASM14BODY.LST"
send "\r"
go until "Binary File"
send "ASM14BODY.680"
send "\r"
go until ">"
send "\r"
go until "\n."

call ExportTextFromSDOS	    ASM14BODY.LST
call ExportFromSDOS	    ASM14BODY.680

send "delete HD:ASM14BODY.LST"
send "\r"
go until "\n."

return

:ASM3
call ImportTextToSDOS   SRC/SDOSUSERDEFS.ASM	HD:SDOSUSERDEFS.ASM

send "asm13"
send "\r"
go until "Source File"
send "ASM14IODR.ASM"
send "\r"
go until "Listing File"
send "ASM14IODR.LST"
send "\r"
go until "Binary File"
send "ASM14IODR.680"
send "\r"
go until ">"
send "\r"
go until "\n."

call ExportTextFromSDOS	    ASM14IODR.LST
call ExportFromSDOS	    ASM14IODR.680

send "delete HD:ASM14IODR.LST"
send "\r"
go until "\n."
return

:asm4
call ImportToSDOS    	  MERGEBIN.680			hd:MERGEBIN
call ImportToSDOS    	  ../comp/ASM14BODY.680		hd:ASM14BODY.680
call ImportToSDOS    	  ../comp/ASM14IODR.680		hd:ASM14IODR.680

send "MERGEBIN"
send "\r"
go until "Input File1"
send "ASM14BODY.680\r"
go until "Input File2"
send "ASM14IODR.680\r"
go until "Output File"
send "ASM14A.680\r"
go until "Generated File"
go until "\n."

call ExportFromSDOS       ASM14A.680
return

:asm5
call ImportToSDOS    EDIT11S1.680  		hd:edit
call ImportToSDOS    ../comp/ASM14A.680    hd:ASM14A.680

send "EDIT"
send "\r"
go until "*"
send "ewTEST.ASM\\"
send "\r"
go until "*"
send "I"
send "        IFUND    M6800  \r"
send "M6800   EQU      1 \r"
send "        FIN \r"
send "        ORG $1000 \r"
send "START   LDAA #0 \r"
send "AAA     001 \r"
send "        LDAA AAA \r"
send "        END START \r"
send "\\"
send "\r"
go until "*"
send "exit"
send "\r"
go until "\n."

send "ASM14A.680"
send "\r"

load comp/ASM14BODY.LST
load comp/ASM14IODR.LST

go until "Source File"
send "TEST.ASM"
send "\r"
go until "Listing File"
send "TEST.LST"
send "\r"
go until "Binary File"
send "TEST.680"
send "\r"
go until ">"
send "\r"
go until "\n."

send "list TEST.LST"
send "\r"
go until "\n."

send "delete ASM14*.ASM"
send "\r"
go until "Ask before doing the delete?"
send "n"
send "\r"
go until "\n."

return

:bascompile

; compile basic programs using basic compiler

call ImportToSDOS        BASIC.680              HD:BASIC
call ImportToSDOS        ASM14A.680             HD:ASM
call ImportToSDOS        EDIT11S1.680           hd:edit
call ImportTextToSDOS    SRC/M680C.LIB		HD:M680C.LIB
call ImportToSDOS        M680C10J.680		HD:M680C
call ImportToSDOS    	 MERGEBIN.680		hd:MERGEBIN
call ImportTextToSDOS    SRC/SDOSUSERDEFS.ASM	HD:SDOSUSERDEFS.ASM

call rem "Assemble BASIC RunTime Package (RTP)"
call ImportTextToSDOS    SRC/BASRTP14L.ASM	HD:BASRTP14L.ASM
call rem "Convert RTP from 680C to 6800"

send "M680C"
send "\r"
go until "Output file"
send "RTP.ASM"
send "\r"
go until "Input file"
send "BASRTP14L.ASM"
send "\r"
go until "\n."

call rem "Assemble RTP"

send "ASM"
send "\r"
go until "Source File"
send "RTP.ASM"
send "\r"
go until "Listing File"
send "BASRTP14L.LST"
send "\r"
go until "Binary File"
send "BASRTP14L.680"
send "\r"
go until ">"
send "\r"
go until "\n."

call ExportTextFromSDOS	BASRTP14L.LST

;ZZZ assembled RTP expects basic code at 3000, not at 2E00! How do I change this back to 2E00?
;ZZZ BASRTP package is broken, cannot be used to build default program
;ZZZ thus we use CHM disk suppiled file in BUILD folder
;ZZZ call ExportFromSDOS	BASRTP14L.680

call rem "Compile SDOS Command Interpreter"

call bascomp SDOSCMDS11L     SDOSCMDS11L.ASM       M680C

call rem "Create Defaultprogram mergin RTP + SDOS Command Interpreter"

send "MERGEBIN"
send "\r"
go until "Input File1"
send "BASRTP14L.680\r"
go until "Input File2"
send "SDOSCMDS11L.680\r"
go until "Output File"
send "DEFAULT14L.680\r"
go until "Generated File"
go until "\n."

;ZZZ Default program is broken. RTP expect compiled basic code at 3000, but
;ZZZ SDOSCMDS sets compiled basic code at 2E00
;ZZZ call ExportFromSDOS	DEFAULT14L.680

send "delete RTP.ASM"
send "\r"
go until "\n."
send "delete BASRTP14L.ASM"
send "\r"
go until "\n."
send "delete BASRTP14L.LST"
send "\r"
go until "\n."


call bascomp SYSGEN10K       BINARYACCESS.ASM      M680C
call bascomp BACKUP11G	     BACKUP11G.ASM
call bascomp M680C
call bascomp ERRORMAINT14
call bascomp MAKMIKBUG11B
call bascomp MAKBINARY11A
call bascomp SDCOPY
call bascomp STRIPIFS
call bascomp BMPVT14F
call bascomp DISKINIT11H
call bascomp TRIMBIN
call bascomp MERGEBIN
call bascomp CALCULATE
call bascomp MNB14  
call bascomp COMPILE10B
call bascomp FIX10B   
call bascomp FINDLABEL10B
call bascomp SDIR  
call bascomp DIR14  
call bascomp CHESS14 

;ZZZ DiskVAL does not compile. reports COMMON cannot be initialized error
;ZZZ call bascomp DISKVAL111H
;ZZZ call bascomp DISKVAL211H
;ZZZ call bascomp DISKVAL311H
;ZZZ call bascomp DISKVAL411H
;ZZZ call bascomp DISKVAL511H

del -q comp\bas.lst
del -q comp\bas.asm
return


:bascomp

call rem "---------------------------------"
call rem "Compile basic program %1.BAS"
call ImportTextToSDOS        SRC/%1.BAS		HD:%1.BAS
if "%2"=="" goto bascomp1
call rem "Basic prog calls assembly routines"
call ImportTextToSDOS        SRC/%2		HD:%2

if "%3"!="M680C" goto bascomp1

call rem "Convert assembly routines from 680C to 6800"

send "M680C"
send "\r"
go until "Output file"
send "A.ASM"
send "\r"
go until "Input file"
send "%2"
send "\r"
go until "\n."

send "delete %2"
send "\r"
go until "\n."
send "copy A.ASM to %2"
send "\r"
go until "\n."
send "delete A.ASM"
send "\r"
go until "\n."

:bascomp1

call rem "Use basic compiler"

send "BASIC"
send "\r"
go until "Input file"
send "%1.BAS"
send "\r"
go until "Output File"
send "BAS.ASM"
send "\r"
go until "\n."

if "%2"=="" goto bascomp2

call rem "Insert INCLUDE above PROGEND label in asm source of compiled basic prog"
send "EDIT"
send "\r"
go until "\n*"
send "erBAS.ASM\\ewBAS.ASM\\1n.PROGEND\\"
send "\r"
go until "\n*"
send "0L"
send "\r"
go until "\n*"
send "I"
send "     INCLUDE %2 \r"
send "\\"
send "\r"
go until "\n*"
send "exit"
send "\r"
go until "\n."
:bascomp2

call rem "Assemble compiled basic prog"

send "ASM"
send "\r"
go until "Source File"
send "BAS.ASM"
send "\r"
go until "Listing File"
send "BAS.LST"
send "\r"
go until "Binary File"
send "%1.680"
send "\r"
go until ">"

if "%3"!="M680C" goto bascomp3
send "OKRTS      EQU  $0C39   ;CLC,RTS \r"
go until ">"
:bascomp3

send "\r"
go until "\n."

call rem "Export compiled prog, listing and asm source"

call ExportTextFromSDOS	BAS.LST
call ExportTextFromSDOS	BAS.ASM
call ExportFromSDOS	%1.680

if "%3"=="RUN" goto runit

call rem "Clean up"

send "delete BAS.LST"
send "\r"
go until "\n."
send "delete BAS.ASM"
send "\r"
go until "\n."
send "delete %1.BAS"
send "\r"
go until "\n."

call rem "Compilation done"
return

:runit

; uncomment to activate tarce in debug.txt file
;
;	set cpu debug=symb;inst
;	break	2e00

send "%1.680"
send "\r"

; Basic debug flags
;
;    GOBIT	EQU	$08	; GO FROM BREAKPOINT/SINGLE STEP
;    SSTEPBIT	EQU	$10	; SINGLE STEP REQUEST
;    BREAKBIT	EQU	$20	; REQUEST LINE NUMBER BREAKPOINT
;    TRACEBIT	EQU	$40	; REQUEST LINE NUMBER TRACE
;    ABORTBIT	EQU	$80	; REQUEST PROGRAM ABORT
;
; set one or severral into magic address to activate
; debug trace for basic programs
;
; dep e483 40

go
goto end

:SDOS
call rem "Import needed files"
call sdos0
call rem "convert original SDOS sources from 680C to 6800"
call sdos1
call rem "assemble original SDOS for 56K RAM (used to buid SDOS Boot Floppy)"
call sdos2 SDOS6800.ASM  56  SDOS11G56K
call rem "assemble SDOS for 64K RAM with SerialNumber/checksum validation disabled" 
call rem "(used to boot ram64K SimH machine and run this compile.ini script)"
call sdos2 SDOS11G.ASM   64  SDOS11G64K

send "delete SDOS6800.ASM"
send "\r"
go until "\n."
send "delete SDOS11G.ASM"
send "\r"
go until "\n."
send "delete SDOS11DEFS.ASM"
send "\r"
go until "\n."

return

:sdos0
call ImportTextToSDOS    SRC/M680C.LIB		HD:M680C.LIB
call ImportToSDOS        M680C10J.680		HD:M680C
call ImportToSDOS    	 ASM14A.680             hd:ASM
call ImportToSDOS        MAKMIKBUG11B.680	hd:makmikbug

call ImportTextToSDOS    SRC/SDOS11G4DEFS.ASM	HD:SDOS11DEFS.ASM
call ImportTextToSDOS    SRC/SDOS11GPART1.ASM	HD:SDOS11GPART1.ASM
call ImportTextToSDOS    SRC/SDOS11GPART2.ASM	HD:SDOS11GPART2.ASM
call ImportTextToSDOS    ../ASM/SDOS11G.ASM	HD:SDOS11G.ASM
return

:sdos1
send "copy SDOS11GPART1.ASM,SDOS11GPART2.ASM to SDOS680C.ASM"
send "\r"
go until "\n."

send "M680C"
send "\r"
go until "Output file"
send "SDOS6800.ASM"
send "\r"
go until "Input file"
send "SDOS680C.ASM"
send "\r"
go until "\n."

send "delete SDOS11GPART1.ASM \r"
go until "\n."
send "delete SDOS11GPART2.ASM \r"
go until "\n."
send "delete SDOS680C.ASM \r"
go until "\n."
return


:sdos2  
send "asm"
send "\r"
go until "Source File"
send "%1"
send "\r"
go until "Listing File"
send "%3.LST"
send "\r"
go until "Binary File"
send "%3.680"
send "\r"
go until ">"
send "IOPKDEFS   EQU  0 \r"
go until ">"
send "MEMSIZE    EQU %2 \r"	
go until ">"
send "OKRTS      EQU  $0C39   ;CLC,RTS \r"
go until ">"
send "ERRORRTS   EQU  $0D39   ;SEC,RTS \r"
go until ">"
send "SDOSSUBREVISION   EQU  'G \r"
go until ">"
send "\r"
go until "\n."

call ExportTextFromSDOS   %3.LST
call ExportFromSDOS       %3.680

send "delete %3.LST \r"
go until "\n."

send "makmikbug"
send "\r"
go until "convert to MIKBUG"
send "%3.680"
send "\r"
go until "output file"
send "%3.S19"
send "\r"
go until "\n."

call ExportTextFromSDOS   %3.S19
return


:IOSWTPC
call rem "Import needed files"
call iodriver0
call rem "Assemble swtpc 6800 io package"
call iodriver1   IOSWTPC6800	0
call rem "Assemble SimH swtpc 6800 ram64k io package"
call iodriver1   IOSWTPC64K	1  
call rem "Assemble SWTBUG at addr $4000 to be used in SimH swtpc 6800 ram64k"
call iodriver2   SWTBUG4000    
call rem "Assemble boot LOADER for MF4 floppy for standard swtpc 6800"
call iodriver2   LOADER     680
call rem "create BOOT.BIN file from boot LOADER"
call iodriver3   
return

:iodriver0
call ImportToSDOS    	 ASM14A.680             hd:ASM
call ImportToSDOS        MAKMIKBUG11B.680	hd:makmikbug
call ImportTextToSDOS    ../ASM/IOSWTPC6800.ASM	HD:IOSWTPC6800.ASM
call ImportTextToSDOS    ../ASM/LOADER.ASM	HD:LOADER.ASM
call ImportTextToSDOS    ../ASM/SWTBUG4000.ASM	HD:SWTBUG4000.ASM
call ImportToSDOS        MAKMIKBUG11B.680	hd:makmikbug
return


:iodriver1
send "asm"
send "\r"
go until "Source File"
send "IOSWTPC6800.ASM"
send "\r"
go until "Listing File"
send "%1.LST"
send "\r"
go until "Binary File"
send "%1.680"
send "\r"
go until ">"
send "RAM64K   EQU  %2 \r"
go until ">"
send "\r"
go until "\n."

call ExportTextFromSDOS   %1.LST
if "%2"=="0" call ExportFromSDOS       %1.680

send "delete %1.LST \r"
go until "\n."

send "makmikbug"
send "\r"
go until "convert to MIKBUG"
send "%1.680"
send "\r"
go until "output file"
send "%1.S19"
send "\r"
go until "\n."

call ExportTextFromSDOS   %1.S19
return


:iodriver2
send "asm"
send "\r"
go until "Source File"
send "%1.ASM"
send "\r"
go until "Listing File"
send "%1.LST"
send "\r"
go until "Binary File"
send "%1.680"
send "\r"
go until ">"
send "\r"
go until "\n."

; only .S19 file is needed 
call ExportTextFromSDOS   %1.LST
if "%2"=="680" call ExportFromSDOS       %1.680

send "delete %1.LST \r"
go until "\n."

send "makmikbug"
send "\r"
go until "convert to MIKBUG"
send "%1.680"
send "\r"
go until "output file"
send "%1.S19"
send "\r"
go until "\n."

call ExportTextFromSDOS   %1.S19
return

:iodriver3
call ImportToSDOS    	  TRIMBIN.680		hd:TRIMBIN

; BOOT.BIN is the absolute binay file that goes to LSN zero of floppy disk
; it is loaded by SWTBUG command D at $2400 address and executed
; we should remove the type 01 record (5 bytes), and 5 bytes of followinf type 2 record
; result: should remove 9 first bytes
send "TRIMBIN"
send "\r"
go until "Input File"
send "LOADER.680\r"
go until "Output File"
send "BOOT.BIN\r"
go until "Bytes to Trim"
send "10\r"
go until "\n."

call ExportFromSDOS       BOOT.BIN
return

:rem2
call rem0 
call rem0 
call rem0 
call rem0 "**************************************"
call rem0 "%1"
call rem0 "**************************************"
return

:rem
call rem0
call rem0 "%1"
return

:rem0
send "* %1"
send "\r"
go until "\n."
return


:ExportFromSDOS
att -q -n ptp comp/%1
send "copy hd:%1 to port:"
send "\r"
go until "\n."
return

:ExportTextFromSDOS
att -q -n ptp comp/%1
send "list hd:%1 to port:"
send "\r"
go until "\n."
return

:ImportToSDOS
att ptr build/%1
send "copy port: to %2"
send "\r"
go until "\n."
det -q ptr
return

:ImportTextToSDOS    
att ptr build/%1
send "list port: to %2"
send "\r"
go until "\n."
det -q ptr
return

:end
echo