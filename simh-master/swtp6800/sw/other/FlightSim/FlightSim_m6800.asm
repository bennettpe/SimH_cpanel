;*	NAM FLITM6800

;*THE FOLLOWING PROGRAM WAS WRITTEN BY WAYNE PARSONS IN
;*CONJUNCTION WITH THE INDISTRIAL ENGENEERING DEPARTMENT
;*AND DR. DAUER AS A PARTIAL REQUIREMENT FOR COMPLETITION
;*OF A MS DEGREE AT THE UNIVERSITY OF CENTRAL FLORIDA IN THE
;*FALL SEMESTER OF 1981.
;*
;* MODIFIED BY ROBERTO SANCHO JUN 2022 
;* TO RUN ON SIMH SWTPC 6800 SIMULATOR
;*
;*   CHANGES: - REMOVE INTERFACE WITH EXTERNAL ATC-610J 
;*              ANALOG FLIGH SIMULATOR
;*            - ADD ROUTINES TO PERFORM FLIGH SIMULATION
;*              USING SWTPC 6800 CPU
;*            - USES MP-T TIMER SS50 BOARD TO PROVIDE
;*              TIMING FOR SIMULATION. 
;*            - USES PPG-J ANALOG TO SIMULATR PLANE CONTROL YOKE
;*
;*   THIS PROGRAM ONLY USES SW AND HW AVAILABLE IN 1979
;*
;**********************************************************
;* 
;* MEMORY MAP: 0000-004F SUBLOGIC 3DG68 DIRECT STORAGE
;*             0050-     USED BY FLIGHTSIM M6800
;*             0100-0112 SUBLOGIC 3DG68 3D TO 2D ROUTINE CONTROL ARRAY
;*             0113-0FFF SUBLOGIC 3DG68 PACKAGE (ENTRY POINT 0900)
;* 
;*             1100-1296 SUBLOGIC SCENERY
;*             1300-1362 PARTSON'S FIELD SCENERY
;*             1800-18FF 2D OUTPUT BUFFER ARRAY
;*
;*             6000-     FLIGHT SIMULATOR M6800 PROGRAM
;*
;**********************************************************	

			; PATCHES FOR 3DG68 
	ORG $0DBE
	JMP SVTRIG	; PATCH 3DG68 TO SAVE COS&SIN CALCULATIONS FOR PV, BV, HV
	ORG $0A8C
	JMP SAFSWP1	; PATCH 3DG68 TO MAKE SWAP ROUTINE INTERRUPT SAFE
	ORG $0AAE
	JMP SAFSWP2	

	ORG $6000
	
START	LDS #STACK	;SET NEW STACK ADDRESS
        JMP MACRO	

			; PATCHES FOR 3DG68 ROUTINES
			
			; PATCH 3DG68 TO SAVE COS&SIN CALCULATIONS FOR PV, BV, HV
			; TO BE USED AGAIN ON PLANE MOTION CALCULATIONS			
SVTRIG	JSR  COS	; ADDR $20..$2B CONTAINS COS AND SIN VALUES 
	STAB $2A
	STAA $2B
	LDX $0020
	STX SINP	;SIN(PV)
	LDX $0022
	STX SINB	;SIN(BV)
	LDX $0024
	STX SINH	;SIN(HV)
	LDX $0026
	STX COSP	;COS(PV)
	LDX $0028
	STX COSB	;COS(BV)
	LDX $002A
	STX COSH	;COS(HV)
	JMP $0DC5
	
			; ROUTINE AT 0A8C..0AB0 USES M6800 16 BITS REGISTERS
			; IX AND SP TO SWAP A SERIES OF 16 BIT VALUES
			; THIS TRICK IS CLEVER AND NICE AND FASTER THAN ANY OTHER METHOD
			; SP IS SAVED AT ENTRY AND EXIT OF ROUTINES, SO WORKS OK
			; BUT IF AN INTERRUPR OCCURS WHILE IN MIDDLE OF ROUTINE, 
			; AS SP IS BEING FILLED WITH DATA, MEMORY AT ANY LOCATION CAN BE
			; OVERWRITTEN WITH IRQ STATUS SAVE. TO FIX THIS, IRQ IS DISABLED
			; ON ENTRY, ENABLED AGAIN ON EXIT

SAFSWP1	SEI		; DISABLE IRQ ON SWAP ROUTINE ENTRY
	STS  $38
	LDX  $2A
	JMP  $0A90
SAFSWP2	LDS  $38	; ENABLE IRQ ON SWAP ROUTINE EXIT
	CLI
	RTS


; 3DG68 MEMORY LOCATIONS

XV	EQU $0100	;VIEWER POSITION WEST (0000-7FFF), EAST (FFFF-8000)
YV	EQU $0102	;VIEWER POSITION ALTITUDE
ZV	EQU $0104	;VIEWER POSITION SOUTH (0000-7FFF), NORTH (FFFF-8000)
PV 	EQU $0106	;VIEWER PITCH ANGLE
BV 	EQU $0108	;VIEWER BANK ANGLE
HV 	EQU $010A	;VIEWER HEADING ANGLE
SCRN	EQU $010E	;SCREEN WIDTH FOR OUTPUT
IBP 	EQU $010F	;INPUT BUFFER POINTER
OBP 	EQU $0111	;OUTPUT BUFFER POINTER

MA	EQU $00		;FIRST ARG FOR MULTS FUNCTION
MB	EQU $02		;SECOND ARG FOR MULTS FUNCTION

MULTS	EQU $021C	;(B,A)=(MA)*(MB)
CONV3D	EQU $0900	;CONVERSION OF 3D INPUT BUFFER TO 2D OUTPUT BUFFER
SIN	EQU $0BA2	;(B,A)=SIN(B). B=0..$FF FOR 0..259 DEG. 
COS	EQU $0BA4	;(B,A)=COS(B). (B,A)=SIGNED 16 BITS (-1 -> $FFFF, +1 -> $7FFF)

;* SWTBUG ROM LOCATIONS

OUT4HS	EQU $E0C8 	;OUTPUT 4 HEX CHAR + SPACE (WORD POINTED BY X-REG)
OUT2HS	EQU $E0CA 	;OUTPUT 2 HEX CHAR + SPACE (BYTE POINTED BY X-REG)
INEEE	EQU $E1AC	;SWTBUG INPUT CHAR
OUTEEE	EQU $E1D1	;SWTBUG OUTPUT CHAR
MON	EQU $E113	;SWTBUG RETURN TO MONITOR

;* FLIGHT SIM VARIABLES

STACKSP RMB 200		;STACK SPACE
STACK	RMB 1

TICK	RMB 2		;IRQ TICK COUNT. GET INCREMENTED BY IRQ EACH 10MSEC
TICK0	RMB 2		;LAST TICK COUNT VALUE
TICK1	RMB 2		;CURRENT TICK COUNT VALUE
NFRAME	RMB 2		;NUMBER OF FRAME
ELAPSED	RMB 1		;NUMBER OF TICKS ELAPSED

IDXREG	RMB 2		;INDEX ON OUTPUT 2D BUFFER

JHSGN	RMB 2		;STORE JOY HORIZ POS -$20 .. $1F AS 16 BITS SIGNED
JVSGN	RMB 2		;STORE JOY VERT POS -$30 .. $2F AS 16 BITS SIGNED
JHPOS	RMB 1		;JOY HORIZONTAL POSITION 00..3F
JVPOS	RMB 1		;JOY VERTICAL POSITION 00..5F
ASAVE	RMB 1		;SAVE REGISTER
BSAVE	RMB 1		;SAVE REGISTER
ISAVE	RMB 2		;SAVE REGISTER

COSP	RMB 2		;COS(PITCH VIEWER)
COSB	RMB 2		;COS(BANK VIEWER)
COSH	RMB 2		;COS(HEADING VIEWER)
SINP	RMB 2		;SIN(PITCH VIEWER)
SINB	RMB 2		;SIN(BANK VIEWER)
SINH	RMB 2		;SIN(HEADING VIEWER)

SPEED   RMB 2		;PLANE SPEED
PITCH	RMB 2 		;PLANE PITCH ANGLE (16 BITS). >0 LOOK DOWN
BANK	RMB 2		;PLANE BANK ANGLE (16 BITS). >0 BANK TO LEFT
HEADING RMB 2		;PLANE HEADING ANGLE (16 BITS). =0 NORTH, >0 TO RIGHT
VEL	RMB 2		;TEMP VAR VEL = SPEED * TIME ELPASED
DZ	RMB 2		;Z AXIS INCREMENT
DY	RMB 2		;Z AXIS INCREMENT
DX	RMB 2		;Z AXIS INCREMENT

MACRO   JSR CLRMEM	;CLEAR MEMORY LOCATIONS
	JSR PIAINT	;INITIALIZE PIA AND CLEAR SCREEN
	JSR PROMPT	;PRINT USER PROMPT MESSAGES
	JSR INITLOD	;LOAD INITIAL AIRCRAFT POSITIONAL PARAMETERS
	BRA TIMONE	;GO TRANSFORM INITIAL VIEW 1ST TIME THRU
GOAGN	JSR UPDATE	;GET UPDATED AIRCRAFT POSITION
TIMONE	JSR GO3D2D	;GO TRANSFORM 3D TO 2D COORDINATES 
	JSR CLSCRN	;CLEAR SCREEN FOR NEW DRAW
	JSR DBDRAW	;DRAW TRANSFORMED DATA BASE
	JSR UPDTPOS	;UPDATE AIRCRAFT POSITION
	JSR GETJOY	;GET ANALOG PPG-J JOY POSITION
	JSR CHKLAND	;CHECK IF LANDED OR CRASHED
	; JSR PRTVIEW	;PRINT ON TERMINAL AIRCRAFT STATE (FOR DEBUG) 
	

        jmp goagn
	
	
	JMP  MON	;SWTBUG RETURN TO MONITOR
	
	BRA GOAGN

;* UPDATE PLANE STATE
UPDATE	NOP		
	;CALC ELAPSED = NUMBER OF TICKS ELAPSED FROM LAST UPDATE 
TCK0	LDX TICK	;GET TICK COUNT
	CPX TICK0	
	STX TICK1	;STORE CURRENT TICK COUNT
	LDAA TICK1+1
	LDAB TICK1
	SUBA TICK0+1
	SBCB TICK0
	CMPB #0
	BEQ TCK1
	LDA #255	;MAX ELAPSED TIME IS 255
TCK1	CMPA #5		;AT LEAST THIS NUMBER OF TICKS SHOULD BE ELAPSED
	BCS TCK0	;BR IF A-REG < 5
	CMPA #100	
	BCS TCK2	;BR IF A-REG < 100
	LDAA #100
TCK2	STAA ELAPSED	;NUMBER OF TICKS ELAPSED FROM LAST UPDATE 
	LDX TICK1	;.*echo elapsed:a
	STX TICK0	
	LDX NFRAME	;INCR NUMBER 
	INX 		
	STX NFRAME	;.*echo nframe:x
	;SET PLANE PITCH, BANK AND TURN RATE BASED ON JOYSTICK POSITION 			
	;* UPDATE PLANE BANK BASED ON JOY HORIZ POS 
	LDAB #0		
	LDAA #32	
	SUBA JHPOS	;GET JOY HORIZ POS LEFT=0, RIGHT=63
	STAA JHSGN+1	;STORE SIGNED JOY HORIZ POS (LOW PART)
        BCC JH1
        LDAB #$FF
JH1     STAB JHSGN	;STORE SIGNED JOY HORIZ POS (HI PART)
	ASLA
	ROLB		;JOY H = JOY H * 32
	ASLA
	ROLB
	ASLA
	ROLB
	ASLA
	ROLB
	ASLA
	ROLB
        ADDA BANK+1	;BANK = BANK + (JOY H - 32)
        STAA BANK+1
        ADCB BANK
        STAB BANK
        ;* LIMIT BANK TO +/- 60GR (2A HEX)
        CMPB #$2A
        BLT JH2
        LDX #$2A00
        STX BANK
        BRA JH3
JH2	CMPB #$D6	;D6 = -2A   
	BPL JH3     
        LDX #$D600
        STX BANK
JH3	LDAB BANK        
        STAB BV+1	;SET VIEWER BANK ANGLE
        ;* UPDATE PLANE PITCH BASED ON JOY VERT POS 
	LDAB #0
	LDAA #48
	SUBA JVPOS	;GET JOY VERT POS UP=0, DOWN=95
	STAA JVSGN+1	;STORE SIGNED JOY VERT POS (LOW PART)
        BCC JV1
        LDAB #$FF
JV1     STAB JVSGN	;STORE SIGNED JOY VERT POS (HI PART)
	ASLA
	ROLB		;JOY V = JOY V * 32
	ASLA
	ROLB
	ASLA
	ROLB
	ASLA
	ROLB
	ASLA
	ROLB
	ADDA PITCH+1	;BANK = BANK + (JOY V - 48)
        STAA PITCH+1
        ADCB PITCH
        STAB PITCH        
        ;* LIMIT PITCH FROM -45GR (NOSE UP $E0 HEX) TO +80GR ($38 HEX)
        CMPB #$38
        BLT JV2
        LDX #$3800
        STX PITCH
        BRA JV3
JV2	CMPB #$E0	;E6 = -20   
	BPL JV3     
        LDX #$E000
        STX PITCH
JV3	LDAB PITCH        
        STAB PV+1	;SET VIEWER PITCH ANGLE        
        ;* CALC TURN RATE BASED ON BANK
        LDAA BANK+1
        STAA MA+1
        LDAB #0
        LDAA BANK
        BPL JT1
        DECB
JT1	ASL MA+1
	ROLA
	ROLB
	ASL MA+1
	ROLA
	ROLB
	ASL MA+1
	ROLA
	ROLB
        STAB MA        
        STAA MA+1
        LDAA HEADING+1
        LDAB HEADING
        SUBA MA+1
        SBCB MA
        STAA HEADING+1	;HEADING = HEADING - BANK*8
        STAB HEADING
        STAB HV+1	;SET VIEWER HEADING ANGLE
	RTS		
;* UPDATE PLANE COORDINATES X,Y,Z
UPDTPOS	NOP             
	;* CALCULATE VEL = PLANE SPEED * ELAPSED TIME
	LDAB ELAPSED  
	LDAA #0
	STAB MA         
	STAA MA+1	
	LDX SPEED
	STX MB		;.*echo speed:x
	JSR MULTS
	STAB VEL 
	STAA VEL+1	
	;* DZ = VEL * COS(PITCH) * COS(HEADING)
	LDX COSP
	STX MA		;.*echo cosp:x	
	LDX COSH
	STX MB		;.*echo cosh:x		
	JSR MULTS
	STAB MA
	STAA MA+1	
	LDX VEL
	STX MB		;.*echo vel:x
	JSR MULTS
	STAB DZ
	STAA DZ+1
	LDAA ZV+1	;* UPDATE ZV VIEWER POSITION OF PLANE
	LDAB ZV
	SUBA DZ+1
	SBCB DZ
	STAA ZV+1
	STAB ZV
	;* DX = VEL * COS(PITCH) * SIN(HEADING)
	LDX COSP
	STX MA		;.*echo cosp:x			
	LDX SINH
	STX MB		;.*echo sinh:x	
	JSR MULTS
	STAB MA
	STAA MA+1
	LDX VEL
	STX MB		;.*echo vel:x
	JSR MULTS
	STAB DX
	STAA DX+1
	LDAA XV+1	;* UPDATE XV VIEWER POSITION OF PLANE
	LDAB XV
	SUBA DX+1
	SBCB DX
	STAA XV+1
	STAB XV
	;* DY = VEL * SIN(PITCH) 
	LDX SINP
	STX MA		
	LDX VEL
	STX MB
	JSR MULTS
	STAB DY
	STAA DY+1
	LDAA YV+1	;* UPDATE YV VIEWER POSITION OF PLANE
	LDAB YV		
	ADDA DY+1
	ADCB DY
	STAA YV+1
	STAB YV
	RTS 		

;* CHECK IF LANDED OR CRASHED
CHKLAND	LDAA YV
	BPL ALT0	;BR IF ALTITUDE IS ZERO
	RTS		;RETURN BECAUSE PLANE IS FLYING
ALT0	LDAA BV+1	;CHECK IF PLANE BANK IF +/- 18GR
        CMPA #$18
        BLT ALT1
	JMP CRASH       ;CRASH: BANK TOO HIGH 
ALT1	CMPA #$E8
	BPL ALT2
	JMP CRASH       ;CRASH: BANK TOO HIGH
ALT2	LDAA PV+1	;CHECK IF PLANE PITCH IF -18GR (NOSE UP) TO +18GR (NOSE DOWN)
        CMPA #$18
        BLT ALT3
	JMP CRASH       ;CRASH: NOSE TOO LOW, NOSE HIT THE GROUND
ALT3	CMPA #$E8
	BPL ALT4
	JMP CRASH       ;CRASH: NOSE TOO HIGH, TAIL HIT THE GROUND
ALT4	JMP LANDED

;* END OF FLIGHT MESSAGES 
LANDED	LDX #MLANDED
	BRA MEOF
CRASH	LDX #MCRASH
MEOF	JSR DSPCHR	
   	LDX #MNEWFL
	JSR DSPCHR
        JSR INCHR
	CMPA #'1'
	BNE ENDFLI
	LDX #MCRLF	;REMOVE WELCOME MESSAGE
	STX PROMPT+1
	JMP MACRO
ENDFLI	JMP MON	

MCRASH	FCB 13,10,13,10
	FCC 'CRASH!'
	FCB 13,10,4

MLANDED	FCB 13,10,13,10
	FCC 'LANDED!'
	FCB 13,10,4

MNEWFL	FCB 13,10,13,10
	FCC 'PRESS 1 TO FLIGTH AGAIN, ANY OTHER KEY TO QUIT ?'
	FCB 4
	
;*PRINT ON TERMINAL VIEWER X,Y,Z 3D POS AND P,B,H ANGLES (0..255)
PRTVIEW	LDX #XV
	LDAA #'X'
	JSR PRT4H
	LDAA #'Y'
	JSR PRT4H
	LDAA #'Z'
	JSR PRT4H
	LDAA #'P'
	JSR PRT2H
	LDAA #'B'
	JSR PRT2H
	LDAA #'H'
	JSR PRT2H
	LDAA #'J'
	LDX #JHPOS
	JSR PRT4H
PRTCRLF	LDA #13
	JSR OUTEEE
	LDA #10
	JMP OUTEEE
PRT4H	JSR OUTEEE
	LDA #32
	JSR OUTEEE
	JSR OUT4HS
	LDA #32
	JMP OUTEEE
PRT2H	JSR OUTEEE
	LDA #32
	JSR OUTEEE
	INX
	JSR OUT2HS
	LDA #32
	JMP OUTEEE

;*SUBROUTINE "CLRMEM" CLEAR MEMORY STORAGE LOCATIONS
CLRMEM	CLRB
	LDAB #$00	;TOTAL NUMBER OF LOCATIONS TO CLEAR (00=CLEAR FROM 00 TO FF)
	LDX #$1800	;CLEAR OUTPUT BUFFER (AT 1800)
	BSR CLEAR2
	RTS
CLEAR2	CLRA
CLRMOR	STAA $00,X
	INX
	DECB
	BNE CLRMOR
	RTS
PIAINT	LDAA #1		;GRAPHICS DISPLAY OPTION = PIA INITIALIZATION
	JSR SCREEN
CLSCRN	LDAA #3
	JSR SCREEN
	RTS
GETJOY	LDAA #6		;GET ANALOG PPG-J JOY POSITION
	JMP SCREEN	

;*SUBROUTINE "PROMPT" WILL LOAD THE INDEX REGISTER WITH THE		
;*ADDRESS OF THE NEXT USER PROMPT TO BE DISPLAYED AND THEN 
;*WILL PRINT THE MESSAGE ON THE USER'S TERMINAL. IT WILL
;*THEN WAIT UNTIL THE USER HAS READ AND UNDERSTOOD THE
;*PROMPT BEFORE PRINTING THE NEXT MESSAGE.
PROMPT	LDX #WELCOM
	JSR DSPCHR
	LDX #MSGA
	JSR DSPCHR
	JSR INCHR
	LDX #$1300	;RESPONSE TO MSGB PROMPT = 1 (PARSONS AIRFIELD)
	CMPA #$31
	BEQ LOADIR
	LDX #$1100	;RESPONSE TO MSGB PROMPT = 2 (SUBLOGIC AIRFIELD)
LOADIR	STX IBP
	LDX #MCRLF
DSPCHR	LDAA $0,X	;PRINT A STRING POINTED BY X-REG, TERMINATED BY $04 CHAR
	CMPA #04	
	BNE PRTCHR
	RTS
PRTCHR	JSR OUTEEE	;PUT CHARACTER OUT TO TERMINAL
	INX
	BRA DSPCHR	
	
INCHR	CLRA		;PREPARE ACCM FOR RESPONSE
	JMP INEEE	;ANY RESPONSE ?
	
;*SUBROUTINE "INITLOD" LOADS THE SIX POSITIONAL PARAMETERS
;*OF THE SIMULATOR'S INITIAL POSITION WHICH WAS PREVIOUSLY
;*PROMPTED TO THE USER.
INITLOD	LDX #$D500	;-11,190 FEET FROM DISPLAY ORIGIN
	STX XV		;POS = WEST (0000-7FFF) NEG = EAST (FFFF-8000)
	LDX #$FC18	;ALT = 1000 FT => 3D VALUE FOR VIEWRT
	STX YV		;      SO REQUIRE NEGATIVE 3D VALUE (FFFF-8000)
	LDX #$F000	;-4096 FEET FROM DISPLAY ORIGIN
	STX ZV		;POS=SOUTH (0000-7FFF) NEG=NORTH (FFFF-8000)
	LDX #$0000	;PITCH = BANK = HEADING = 0.0 DEGREES
	STX PV
	STX BV
	STX HV
	LDX #$1800	;OUTPUT 2D BUFFER
	STX OBP
	LDAA #$40
	STAA SCRN	;SCREEN WIDTH=64 PIXELS X 64 PIXELS
	LDX #0
	STX PITCH	;PLANE PITCH ANGLE (16 BITS). >0 LOOK DOWN
	STX BANK	;PLANE BANK ANGLE (16 BITS). >0 BANK TO LEFT
	STX HEADING 	;PLANE HEADING ANGLE (16 BITS). =0 NORTH, >0 TO RIGHT	
	STX SINP	;SIN(PITCH VIEWER)
	STX SINB	;SIN(BANK VIEWER)
	STX SINH	;SIN(HEADING VIEWER)
	LDX #$7FFF	
	STX COSP	;COS(PITCH VIEWER)
	STX COSB	;COS(BANK VIEWER)
	STX COSH	;COS(HEADING VIEWER)
	LDX #250
	STX SPEED	;PLANE SPEED 
	LDX #TMRIRQ	;LOAD TIMER IRQ SERVICING ROUTINE ADDRESS
	STX $A000	;STORE IT ON IRQ VECTOR
	LDX #0
	STX TICK	;INIT TICK COUNT
	STX TICK0
	STX NFRAME	;INIT FRAME NUMBER	
	LDX #$8010	;INIT MP-T TIMER 
 	LDAA #$FF	;TO GENERATE AN IRQ EACH 10 MSEC 
 	STAA 2,X
 	LDAA #$3D
 	STAA 3,X
 	LDAA #$80
 	STAA 2,X
	LDAA #$04	;04=10 MILLISEC INTERVAL
 	STAA 2,X
 	NOP
 	CLI		;ENABLE INTERRUPTS
	RTS
;* TIMER IRQ ROUTINE TO INCREMENT TICK EACH 10 MSEC
;* USED TO PROVIDE REAL TIME CALCULATIONS ON PLANE MOTION SIMULATION
;* TICK SHOULD BE READ WITH LDX (NOT LDAA/B) TO PREVENT BEING
;* UPDATED IN MIDDLE OF READ.
;* TICK VAR WILL WRAP AFTER 65536*10 MSEC = 655,36 SEC = 10.9 MINUTES
TMRIRQ	LDX #$8010	;CLEAR IRQ REQUEST FROM MP-T TIMER CARD
 	LDAA 2,X
 	LDX TICK	;INCREMENT TICK COUNT
 	INX
 	STX TICK
 	RTI

;*SUBROUTINE "GO3D2D" CALLS THE PROGRAM WRITTEN BY SUBLOGIC'S
;*BRUCE ARTWICK WHICH WILL PERFORM THE NECESSARYMATHEMATICAL
;*ALGORITHMS TO SUCCESSFULLY TRANSFORM THE DATA BASE GIVE
;*THE POSITIONAL PARAMETERS STORED IN XV,YU,ZV,PV,BV AND HV,
;*UPON COMPLETITION THE OUTPUT ARRAY IS STORES IN MEMORY IN
;*THE OUTPUT BUFFER.
GO3D2D	JSR CONV3D	
	RTS		
;*SUBROUTINE "DBDRAW" WILL LOAD THE NEXT (X1,Y1) AND (X2,Y2)
;*FROM THE OUTPUT BUFFER IF THE CONTROL BYTE IS HEX 55,
;*OTHERWISE IT WILL RETURN TO THE MACRO
DBDRAW	LDX OBP		
FEED	LDAA 0,X	
	CMPA #$55
	BEQ NXTLIN
	RTS		
NXTLIN	INX
	LDAA 0,X
	STAA X1		;.*echo x1:a
	INX	
	LDAA 0,X
	STAA Y1		;.*echo y1:a
	INX	
	LDAA 0,X
	STAA X2		;.*echo x2:a
	INX	
	LDAA 0,X
	STAA Y2		;.*echo y2:a
	INX	
	STX IDXREG
	LDAA #5		;GRAPHIC'S DISPLAY OPTION = DRAW (SHOW2)
	JSR SCREEN	;.*echo drawline
	LDX IDXREG
	BRA FEED

WELCOM	FCB 13,10,13,10
        FCC '     WELCOME TO THE M6800 FLIGHT SIMULATOR PROGRAM'
        FCB 13,10,13,10
	FCC 'THIS PROGRAM IS DESIGNED TO ALLOW THE USER TO SET UP THE AIRCRAFT`S INITIAL'
	FCB 13,10
	FCC 'POSITION COORDINAES FROM USER PROMPTS, ENGAGE THE FLIGHT SIMULATOR AND'
	FCB 13,10
	FCC 'PRESENT AN UPDATED GRAPHICS DISPLAY AS STUDENT PILOT ATTEMPTS TO MANUEVER'
	FCB 13,10	 
	FCC 'THE PLANE FOR LANDING ON AN AIRSTRIP. TO USE THE PROGRAM YOU FIRST MUST'
	FCB 13,10	 
	FCC 'CHOOSE AN AIRPORT DATABASE.'
MCRLF   FCB 13,10,13,10
	FCB $04
	
MSGA	FCC '   CHOOSE THE AIRPORT DATABASE AS FOLLOWS: '
        FCB 13,10,13,10
	FCC ' 1 = PARSON`S FIELD AT TETERBORO, NEW JERSEY.'	
        FCB 13,10
	FCC ' 2 = ARTWICK`S FIELD AT TETERBORO, NEW JERSEY.'	
        FCB 13,10,13,10
        FCC '?'
	FCB $04
	
SCREEN	CMPA #01       
	BEQ  FIRST     
	CMPA #02       
	BEQ  JINIT     
	CMPA #03       
	BEQ  ERASE     
	CMPA #04
	BEQ  PIXEL
	CMPA #05
	BEQ  SHOW2
	CMPA #06
	BEQ  JSTART
	RTS
;* PIA INITIALIZATION SECTION
FIRST	CLRA
	STAA $800C     
	LDAA #$FF
	STAA $800C
	LDAA #$3F
	STAA $800D
	RTS
;* ERASE SCREEN SECTION
ERASE	LDAA #63
	STAA HPOS
HSET	LDAA HPOS
	BSR  SENDA
VBAR	LDAA #128
CLR	BSR  SENDA
	INCA
MOD	CMPA #224
	BNE  CLR
	DEC  HPOS
	BGE  HSET
	LDAA #192
	STAA MOD+1
	RTS
;*SCREEN DRIVE SUBROUTINES
SENDA	TAB
SENDB	STAB $800C
	LDAB #$37
	STAB $800D
	LDAB 0,X
	LDAB #$3F
	STAB $800D
	RTS
;* PIXEL OUTPUT
PIXEL	LDAB X1
	ADDB #96
	BSR SENDB
	LDAB #160
	SUBB Y1
	BSR SENDB
	RTS
SHOW2	BRA SHOW
;* INITIALIZE PIA INTERFACE TO JOYSTICK
JINIT	LDAA #$3D
	LDX #$800C
	LDAB #$00
	STAB 2,X
	STAA 3,X
;* SAVE MACHINE REGISTERS ON INPUT
JSTART	STAA ASAVE
	STAB BSAVE
	STX ISAVE
;* GET HORIZONTAL STICK POSITION
	LDX #$800C
LOOP1	LDA 3,X
	ANDA #$80
	BEQ LOOP1
	LDAA 2,X
	TAB
	ANDA #$80
	BNE LOOP1
	ANDB #$3F
	STAB JHPOS 
LOOP2	LDAA 3,X
	ANDA #$80 
	BEQ LOOP2
	LDAA 2,X
	TAB
	ANDA #$80
	BNE GOBACK
	BRA LOOP1
GOBACK	ANDB #$7F
        STAB JVPOS
	LDAA ASAVE
	LDAB BSAVE
	LDX ISAVE
	RTS
;* ROUTINE TO DRAW LINE FROM (X1,Y1) TO (X2,Y2)
SHOW	CLRA
	LDAB #1
	STAB M
	STAB N
	LDAB X2 
	SUBB X1
	STAB D
	BGE BP1
	NEG M
	NEG D
BP1	BNE BP2
	LDAA #$FF
BP2	LDAB Y2
	SUBB Y1
	STAB E
	BGE B8963
	NEG N
	NEG E
B8963	JSR PIXEL
	LDAB X1
	CMPB X2
	BEQ B8990
B8969	TSTA
	BLT B8981
	LDAB X1
	ADDB M
	STAB X1
	SUBA E
	BRA B8963
B8981	LDAB Y1
	ADDB N
	STAB Y1
	ADDA D
	BRA B8963
B8990	LDAB Y1
	CMPB Y2
	BNE B8969
	RTS

X1	EQU $0050
X2	EQU $0052
Y1	EQU $0051
Y2	EQU $0053
M	EQU $0054
N	EQU $0055
D	EQU $0056
E	EQU $0057
HPOS	EQU $0058

	ORG $A048	;SET START ADDRESS FOR "G" COMMAND
	FDB START

	END